void sub_23C5B3514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;

  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&a32);
  a32 = v32 - 160;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v34 = *(void **)(v32 - 136);
  if (v34)
    operator delete(v34);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  int v18;
  int *v19;
  unint64_t v20;
  unint64_t i;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 result;
  int v26;
  int v27;

  v7 = a3;
  v8 = *(int **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v9 = (_QWORD *)(a4 + 16);
  do
  {
    if ((unint64_t)v8 >= *v9)
    {
      v10 = *(int **)a4;
      v11 = ((uint64_t)v8 - *(_QWORD *)a4) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = *v9 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v9, v14);
        v10 = *(int **)a4;
        v8 = *(int **)(a4 + 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      *(_DWORD *)v16 = v7;
      v17 = (int *)(v16 + 4);
      while (v8 != v10)
      {
        v18 = *--v8;
        *((_DWORD *)v16 - 1) = v18;
        v16 -= 4;
      }
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v17;
      *(_QWORD *)(a4 + 16) = &v15[4 * v14];
      if (v10)
        operator delete(v10);
      v8 = v17;
    }
    else
    {
      *v8++ = v7;
    }
    *(_QWORD *)(a4 + 8) = v8;
    LODWORD(v7) = *(_DWORD *)(*a2 + 4 * v7);
  }
  while ((_DWORD)v7 != -1);
  v19 = *(int **)a4;
  v20 = (((uint64_t)v8 - *(_QWORD *)a4) >> 2) - 1;
  if (v20)
  {
    for (i = 0; i < v20; ++i)
    {
      v22 = v19[i];
      v19[i] = v19[v20];
      v19[v20--] = v22;
    }
  }
  v23 = *(_QWORD *)(a1 + 40);
  v27 = *v19;
  if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(v23, (uint64_t)&v27))
    cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource();
  v24 = *(_QWORD *)(a1 + 40);
  v26 = *(_DWORD *)(*(_QWORD *)(a4 + 8) - 4);
  result = cv3d::cv::gess::mesh::PolyMesh::is_boundary(v24, (uint64_t)&v26);
  if (!result)
    cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource();
  return result;
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathBetweenBoundaries(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  unsigned int v13;
  float v14;
  std::vector<unsigned int> v15;

  std::vector<unsigned int>::vector(&v15, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2);
  if (a2[1] == *a2)
  {
LABEL_7:
    v11 = 1;
  }
  else
  {
    v8 = 0;
    v9 = 3.4028e38;
    while (1)
    {
      v13 = -1;
      v14 = 0.0;
      cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathToOtherBoundary(a1, a2, v8, a3, (uint64_t)&v15, &v13, &v14);
      if (v13 == -1)
        break;
      v10 = v14;
      if (v14 < v9)
      {
        cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource(a1, &v15, v13, a4);
        v9 = v10;
      }
      if (++v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
        goto LABEL_7;
    }
    v11 = 0;
  }
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  return v11;
}

void sub_23C5B3890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CutChartAlongPath(uint64_t a1, uint64_t *a2)
{
  _DWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int HEdgeClockwise;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unsigned int *v28;
  char *v29;
  char *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  void *v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  char *v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  const char *v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  const char *v75;
  int v76;
  void *v77[2];
  char v78;
  unsigned int v79[4];
  void *v80[2];
  char *v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int appended;
  void *__p;
  unsigned int *v90;
  unsigned int *v91;
  _DWORD *v92;
  _BYTE *v93;
  uint64_t v94;
  _DWORD v95[3];

  v92 = 0;
  v93 = 0;
  v94 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath(a1, a2, (uint64_t)&v92);
  v3 = v92;
  if ((unint64_t)(v93 - (_BYTE *)v92) <= 7)
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 684, "split_path.size() >= 2");
  v4 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2;
  do
  {
    v79[0] = v3[v4++];
    v95[0] = v3[v4];
    __p = 0;
    v90 = 0;
    v91 = 0;
    v77[0] = (void *)-1;
    cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit(a1, (uint64_t)v79, v95, (char **)&__p, (unint64_t *)v77);
    v6 = *(_QWORD *)(a1 + 40);
    *(_OWORD *)v80 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v6, *(_DWORD *)(v6 + 176), v79[0]);
    v87 = -1;
    appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(v6, v80, &v87);
    v7 = *(_QWORD *)(a1 + 40);
    LODWORD(v81) = -1;
    v80[0] = (void *)-1;
    v80[1] = (void *)-1;
    v87 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(v7, 1, (__int128 *)v80);
    v8 = *(_QWORD *)(a1 + 40);
    LODWORD(v81) = -1;
    v80[0] = (void *)-1;
    v80[1] = (void *)-1;
    v86 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(v8, 1, (__int128 *)v80);
    LODWORD(v80[0]) = *(v90 - 1);
    v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v80[0]);
    if ((*v9 & v10) == 0)
      __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 703, "mesh_.is_boundary(bh0)");
    v85 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)v80) + 4);
    v11 = (unint64_t)v77[0];
    v84 = *((_DWORD *)__p + (uint64_t)v77[0]);
    v83 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v84);
    v12 = *(_QWORD *)(a1 + 40) + 104;
    v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, (unsigned int *)__p);
    v82 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12);
    v14 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v85);
    if (v82 != *(_DWORD *)(v14 + 12))
      __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 707, "vhc == mesh_.HEdgeStart(bh1)");
    cv3d::cv::gess::mesh::Topology::SetPrevNext(*(_QWORD *)(a1 + 40) + 104, &v85, &v86);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(*(_QWORD *)(a1 + 40) + 104, &v86, &v87);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(*(_QWORD *)(a1 + 40) + 104, &v87, (unsigned int *)v80);
    cv3d::cv::gess::mesh::Topology::SetTwin(*(_QWORD *)(a1 + 40) + 104, &v84, &v87);
    cv3d::cv::gess::mesh::Topology::SetTwin(*(_QWORD *)(a1 + 40) + 104, &v83, &v86);
    v15 = (char *)__p;
    if (v11 < ((char *)v90 - (_BYTE *)__p) >> 2)
    {
      v16 = 4 * v11;
      do
      {
        cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), (unsigned int *)&v15[v16], &appended);
        ++v11;
        v15 = (char *)__p;
        v16 += 4;
      }
      while (v11 < ((char *)v90 - (_BYTE *)__p) >> 2);
    }
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v87, v95);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v86, v79);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v85, &v82);
    if (__p)
    {
      v90 = (unsigned int *)__p;
      operator delete(__p);
    }
    v3 = v92;
    v17 = ((v93 - (_BYTE *)v92) >> 2) - 1;
  }
  while (v4 < v17);
  v18 = *(_QWORD *)(a1 + 40);
  appended = v92[v17];
  __p = 0;
  v90 = 0;
  v91 = 0;
  v80[0] = 0;
  v80[1] = 0;
  v81 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v79, v18 + 104, &appended);
  HEdgeClockwise = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise((cv3d::cv::gess::mesh::OneRingHEdge *)v79);
  v20 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), HEdgeClockwise);
  if ((*v20 & v21) == 0)
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 733, "mesh_.is_boundary(hh)");
  v87 = HEdgeClockwise;
  v86 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v87) + 4);
  do
  {
    v22 = v90;
    if (v90 >= v91)
    {
      v24 = ((char *)v90 - (_BYTE *)__p) >> 2;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = ((char *)v91 - (_BYTE *)__p) >> 1;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if ((unint64_t)((char *)v91 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v91, v26);
      else
        v27 = 0;
      v28 = (unsigned int *)&v27[4 * v24];
      *v28 = HEdgeClockwise;
      v23 = v28 + 1;
      v30 = (char *)__p;
      v29 = (char *)v90;
      if (v90 != __p)
      {
        do
        {
          v31 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *--v28 = v31;
        }
        while (v29 != v30);
        v29 = (char *)__p;
      }
      __p = v28;
      v90 = v23;
      v91 = (unsigned int *)&v27[4 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v90 = HEdgeClockwise;
      v23 = v22 + 1;
    }
    v90 = v23;
    HEdgeClockwise = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise((cv3d::cv::gess::mesh::OneRingHEdge *)v79);
    v32 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), HEdgeClockwise);
  }
  while ((*v32 & v33) == 0 && HEdgeClockwise != -1);
  v35 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), HEdgeClockwise);
  if ((*v35 & v36) == 0)
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 740, "mesh_.is_boundary(hh)");
  v85 = HEdgeClockwise;
  v84 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v85) + 4);
  do
  {
    v37 = (char *)v80[1];
    if (v80[1] >= v81)
    {
      v39 = ((char *)v80[1] - (char *)v80[0]) >> 2;
      if ((unint64_t)(v39 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v40 = (v81 - (char *)v80[0]) >> 1;
      if (v40 <= v39 + 1)
        v40 = v39 + 1;
      if ((unint64_t)(v81 - (char *)v80[0]) >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v81, v41);
      else
        v42 = 0;
      v43 = (unsigned int *)&v42[4 * v39];
      *v43 = HEdgeClockwise;
      v38 = v43 + 1;
      v45 = (char *)v80[0];
      v44 = (char *)v80[1];
      if (v80[1] != v80[0])
      {
        do
        {
          v46 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *--v43 = v46;
        }
        while (v44 != v45);
        v44 = (char *)v80[0];
      }
      v80[0] = v43;
      v80[1] = v38;
      v81 = &v42[4 * v41];
      if (v44)
        operator delete(v44);
    }
    else
    {
      *(_DWORD *)v80[1] = HEdgeClockwise;
      v38 = v37 + 4;
    }
    v80[1] = v38;
    HEdgeClockwise = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise((cv3d::cv::gess::mesh::OneRingHEdge *)v79);
  }
  while (HEdgeClockwise != -1);
  v47 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v77 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v47, *(_DWORD *)(v47 + 176), appended);
  v95[0] = -1;
  v83 = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(v47, v77, v95);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(*(_QWORD *)(a1 + 40) + 104, &v84, &v87);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(*(_QWORD *)(a1 + 40) + 104, &v86, &v85);
  v49 = (unsigned int *)v80[0];
  v50 = (unsigned int *)v80[1];
  while (v49 != v50)
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), v49++, &v83);
  v51 = (_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &appended, v48);
  if (*v51 != v87)
  {
    v75 = "mesh_.VertexHEdge(vha) == bh0";
    v76 = 758;
    goto LABEL_87;
  }
  v52 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v85);
  if (*(_DWORD *)(v52 + 12) != v83)
  {
    v75 = "mesh_.HEdgeStart(bh2) == v_new";
    v76 = 759;
    goto LABEL_87;
  }
  v53 = *(_QWORD *)(a1 + 40);
  if (((v93 - (_BYTE *)v92) >> 2) + v5 != (uint64_t)(*(_QWORD *)(v53 + 112) - *(_QWORD *)(v53 + 104)) >> 2)
  {
    v75 = "mesh_.VSize() == (v_size_before + split_path.size())";
    v76 = 762;
LABEL_87:
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", v76, v75);
  }
  std::string::basic_string[abi:ne180100]<0>(v77, "v:index_in_root");
  v95[0] = -1;
  v55 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v53 + 8), (uint64_t)v95, (unsigned __int8 *)v77);
  if (v78 < 0)
    operator delete(v77[0]);
  if (v55 == -1)
    __assert_rtn("CutChartAlongPath", "IsoChartMesh.cpp", 765, "v_id_root_ah.Valid()");
  if (v93 != (_BYTE *)v92)
  {
    v56 = 0;
    v57 = 0;
    v58 = "index < data_.size()";
    v59 = "Attribute.h";
    v60 = "operator[]";
    while (1)
    {
      v61 = *(_QWORD *)(a1 + 40);
      LODWORD(v77[0]) = v55;
      v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v61 + 8), (unsigned int *)v77, v54);
      v64 = v5 + v57;
      v65 = *(_QWORD *)(v62 + 40);
      if (v64 >= (*(_QWORD *)(v62 + 48) - v65) >> 2)
        break;
      if (*(_DWORD *)(v65 + 4 * v64) != -1)
      {
        v74 = 767;
        v60 = "CutChartAlongPath";
        v59 = "IsoChartMesh.cpp";
        v58 = "!mesh_.attribute(v_id_root_ah)[ii + v_size_before].Valid()";
LABEL_80:
        __assert_rtn(v60, v59, v74, v58);
      }
      v66 = *(_QWORD *)(a1 + 40);
      LODWORD(v77[0]) = v55;
      v67 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v66 + 8), (unsigned int *)v77, v63);
      v69 = v92[v56];
      v70 = *(_QWORD *)(v67 + 40);
      if (v69 >= (*(_QWORD *)(v67 + 48) - v70) >> 2)
        break;
      v71 = *(_QWORD *)(a1 + 40);
      LODWORD(v77[0]) = v55;
      v72 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v71 + 8), (unsigned int *)v77, v68);
      v73 = *(_QWORD *)(v72 + 40);
      if (v64 >= (*(_QWORD *)(v72 + 48) - v73) >> 2)
        break;
      *(_DWORD *)(v73 + 4 * v64) = *(_DWORD *)(v70 + 4 * v69);
      v56 = ++v57;
      if (v57 >= (unint64_t)((v93 - (_BYTE *)v92) >> 2))
        goto LABEL_69;
    }
    v74 = 182;
    goto LABEL_80;
  }
LABEL_69:
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (__p)
  {
    v90 = (unsigned int *)__p;
    operator delete(__p);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
}

void sub_23C5B4170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (a14 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a26)
    operator delete(a26);
  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath();
  if (v4 - v3 == 4)
  {
    LODWORD(v8) = 0;
LABEL_7:
    v9 = v8;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 40);
      v28 = *(_DWORD *)(v3 + 4 * v8);
      if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(v10, (uint64_t)&v28))
        break;
      v3 = *a2;
      v8 = ++v9;
      if (((a2[1] - *a2) >> 2) - 1 <= (unint64_t)v9)
        goto LABEL_7;
    }
  }
  if (!v9)
    cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath();
  v11 = v9 - 1;
  v12 = *a2;
  if (v11 < (a2[1] - *a2) >> 2)
  {
    v13 = v9 - 1;
    do
    {
      v14 = *(_DWORD *)(v12 + 4 * v13);
      if (v14 == -1)
        cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath();
      v16 = *(_DWORD **)(a3 + 8);
      v15 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v16 >= v15)
      {
        v18 = *(_DWORD **)a3;
        v19 = ((uint64_t)v16 - *(_QWORD *)a3) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v21 = v15 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a3 + 16, v22);
          v18 = *(_DWORD **)a3;
          v16 = *(_DWORD **)(a3 + 8);
          v14 = *(_DWORD *)(v12 + 4 * v13);
        }
        else
        {
          v23 = 0;
        }
        v24 = &v23[4 * v19];
        *(_DWORD *)v24 = v14;
        v17 = v24 + 4;
        while (v16 != v18)
        {
          v25 = *--v16;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        *(_QWORD *)a3 = v24;
        *(_QWORD *)(a3 + 8) = v17;
        *(_QWORD *)(a3 + 16) = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v16 = v14;
        v17 = v16 + 1;
      }
      *(_QWORD *)(a3 + 8) = v17;
      if (v13 != v11)
      {
        v26 = *(_QWORD *)(a1 + 40);
        v27 = *(_DWORD *)(*a2 + 4 * v13);
        if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(v26, (uint64_t)&v27))
          break;
      }
      ++v13;
      v12 = *a2;
    }
    while (v13 < (a2[1] - *a2) >> 2);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit(uint64_t a1, uint64_t a2, _DWORD *a3, char **a4, unint64_t *a5)
{
  _QWORD *v10;
  int HEdge;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;
  const char *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  _BYTE v40[16];
  void *__p;
  _BYTE *v42;
  uint64_t v43;

  if (*a4 != a4[1])
    cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit();
  if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(a1 + 40), a2))
    cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit();
  __p = 0;
  v42 = 0;
  v43 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v40, *(_QWORD *)(a1 + 40) + 104, a2);
  v10 = a4 + 2;
  while (1)
  {
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v40);
    v12 = HEdge;
    v13 = a4[1];
    if (HEdge == -1)
      break;
    if ((unint64_t)v13 >= *v10)
    {
      v15 = (v13 - *a4) >> 2;
      if ((unint64_t)(v15 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v16 = *v10 - (_QWORD)*a4;
      v17 = v16 >> 1;
      if (v16 >> 1 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v18);
      else
        v19 = 0;
      v20 = &v19[4 * v15];
      *(_DWORD *)v20 = v12;
      v14 = v20 + 4;
      v22 = *a4;
      v21 = a4[1];
      if (v21 != *a4)
      {
        do
        {
          v23 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v20 - 1) = v23;
          v20 -= 4;
        }
        while (v21 != v22);
        v21 = *a4;
      }
      *a4 = v20;
      a4[1] = v14;
      a4[2] = &v19[4 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v13 = HEdge;
      v14 = v13 + 4;
    }
    a4[1] = v14;
  }
  v24 = *a4;
  v25 = v13 - *a4;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&__p, v25 >> 1);
  v26 = v25 >> 2;
  if (v13 != v24)
  {
    v27 = 0;
    if (v26 <= 1)
      v28 = 1;
    else
      v28 = v26;
    do
    {
      *((_DWORD *)__p + v27) = *(_DWORD *)&(*a4)[4 * v27];
      *((_DWORD *)__p + v26 + v27) = *(_DWORD *)&(*a4)[4 * v27];
      ++v27;
    }
    while (v28 != v27);
  }
  v29 = __p;
  if (v42 == __p)
    goto LABEL_46;
  v30 = 0;
  v31 = 4;
  v32 = "boundary_index < adj_h_size";
  while (1)
  {
    v33 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v29[v30]);
    if ((*v33 & v34) != 0)
      break;
    ++v30;
    v29 = __p;
    v31 += 4;
    if (v30 >= (v42 - (_BYTE *)__p) >> 2)
      goto LABEL_31;
  }
  if (v30 >= v26)
  {
LABEL_46:
    v32 = "boundary_index < adj_h_size";
LABEL_31:
    v35 = 823;
LABEL_44:
    __assert_rtn("FindAdjacentHEdgeToSplit", "IsoChartMesh.cpp", v35, v32);
  }
  v36 = 0;
  v37 = 0;
  do
  {
    *(_DWORD *)&(*a4)[4 * v37] = *(_DWORD *)((char *)__p + v31);
    v38 = *(_QWORD *)(a1 + 40) + 104;
    v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v38, (unsigned int *)&(*a4)[v36]);
    if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v38, v39) + 12) == *a3)
      *a5 = v37;
    ++v37;
    v36 += 4;
    v31 += 4;
  }
  while (v26 != v37);
  if (*a5 >= v26)
  {
    v32 = "split_hh_index < adj_h_size";
    v35 = 830;
    goto LABEL_44;
  }
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
}

void sub_23C5B46E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::ProcessPlaneLikeShape(uint64_t this, BOOL *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  float v15;
  unsigned int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  unsigned int v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  float32x4_t v101;
  float v102;
  float v104;
  float v105;
  float v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  float32x2_t v116;
  int32x2_t v117;
  float v118;
  BOOL v124;
  float32x4_t *v125;
  int32x4_t v126;
  int32x4_t v127;
  char v128;
  float v129;
  float v130;
  float v131;
  float v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t j;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  BOOL v163;
  BOOL v164;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float v174;
  void *__p[2];
  int64x2_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[3];
  char v182;
  _OWORD v183[2];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  void *v188[3];
  void *v189[3];
  unsigned int v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD v193[4];
  __int128 v194;
  unint64_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v3 = *(_QWORD **)(this + 40);
  v4 = v3[20] - v3[19];
  if ((v4 >> 2))
  {
    v5 = this;
    v6 = 0;
    v7 = v3[14] - v3[13];
    while (1)
    {
      v8 = *(_QWORD *)(v5 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v5 + 196);
      this = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v8 + 56), (unsigned int *)__p, a3);
      v10 = *(_QWORD *)(this + 40);
      if (v6 >= (*(_QWORD *)(this + 48) - v10) >> 2)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(this, v9, a3);
      if (*(float *)(v10 + 4 * v6) > 1.0e-16)
        break;
      if ((v4 >> 2) == (_DWORD)++v6)
        return this;
    }
    v200 = 0u;
    v201 = 0u;
    v199 = 0u;
    v194 = 0u;
    memset(v193, 0, sizeof(v193));
    LOBYTE(__p[0]) = 0;
    std::vector<BOOL>::vector(&v192, (v7 >> 2), (unsigned __int8 *)__p);
    LOBYTE(__p[0]) = 0;
    std::vector<BOOL>::vector(&v191, (v4 >> 2), (unsigned __int8 *)__p);
    v197 = 0u;
    v198 = 0u;
    v196 = 0u;
    v190 = v6;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v189, 3uLL);
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(_QWORD *)(v5 + 40), &v190, v189);
    for (i = 0; i != 3; ++i)
      *(&v196 + i) = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(_QWORD *)(v5 + 40), *(_DWORD *)(*(_QWORD *)(v5 + 40) + 176), *((_DWORD *)v189[0] + i));
    v13 = 0;
    v14 = -1;
    v15 = 3.4028e38;
    do
    {
      if ((_DWORD)v13 == 2)
        v16 = 0;
      else
        v16 = v13 + 1;
      v17 = *(&v196 + v13);
      v18 = vsubq_f32(*(&v196 + v16), v17);
      v19 = vmulq_f32(v18, v18);
      v19.i32[3] = 0;
      v20 = vpaddq_f32(v19, v19);
      v21 = vpaddq_f32(v20, v20);
      v22 = (float32x4_t)xmmword_23C603EC0;
      if (v21.f32[0] > 0.0)
        v22 = vdivq_f32(v18, vsqrtq_f32(v21));
      v23 = vsubq_f32(*(&v196 + (v13 + 2) % 3u), v17);
      v24 = vmulq_f32(v23, v23);
      v24.i32[3] = 0;
      v25 = vpaddq_f32(v24, v24);
      v26 = vpaddq_f32(v25, v25);
      v27 = (float32x4_t)xmmword_23C603EC0;
      if (v26.f32[0] > 0.0)
        v27 = vdivq_f32(v23, vsqrtq_f32(v26));
      v28 = vmulq_f32(v22, v27);
      v28.i32[3] = 0;
      v29 = fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)));
      if (v15 > v29)
      {
        v14 = v13;
        v15 = v29;
      }
      ++v13;
    }
    while (v13 != 3);
    if (v14 > 2)
      __assert_rtn("ProcessPlaneLikeShape", "IsoChartMesh.cpp", 916, "origin_index < 3");
    if (v14 == 2)
      v30 = 0;
    else
      v30 = v14 + 1;
    v31 = *(&v196 + v14);
    v32 = vsubq_f32(*(&v196 + v30), v31);
    v33 = v14 - 1;
    if (!v14)
      v33 = 2;
    v166 = *(&v196 + v14);
    v34 = (int32x4_t)vsubq_f32(*(&v196 + v33), v31);
    v35 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL)), (int32x4_t)v32);
    v36 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL), (int32x4_t)v32);
    v37 = (int32x4_t)vmlsq_f32(vmulq_f32(v35, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL), v34)), (float32x4_t)vzip2q_s32(vzip1q_s32(v34, (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL)), v34), v36);
    v38 = vmulq_f32(v36, (float32x4_t)vzip2q_s32(vzip1q_s32(v37, (int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL)), v37));
    v39 = vmulq_f32(v32, v32);
    v39.i32[3] = 0;
    v40 = vmlsq_f32(v38, v35, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), v37));
    v41 = vpaddq_f32(v39, v39);
    v42 = vpaddq_f32(v41, v41);
    v167 = (float32x4_t)xmmword_23C603EC0;
    v169 = (float32x4_t)xmmword_23C603EC0;
    if (v42.f32[0] > 0.0)
      v169 = vdivq_f32(v32, vsqrtq_f32(v42));
    v43 = vmulq_f32(v40, v40);
    v43.i32[3] = 0;
    v44 = vpaddq_f32(v43, v43);
    v45 = vpaddq_f32(v44, v44);
    if (v45.f32[0] > 0.0)
      v167 = vdivq_f32(v40, vsqrtq_f32(v45));
    v46 = 3;
    do
    {
      v47 = v14 % 3;
      v171 = *(&v196 + v47);
      v48 = *(_QWORD *)(v5 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
      v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v48 + 80), (unsigned int *)__p, v12);
      v51 = *((unsigned int *)v189[0] + v47);
      v52 = *(_QWORD *)(v49 + 40);
      if (v51 >= (*(_QWORD *)(v49 + 48) - v52) >> 3)
        goto LABEL_112;
      v172 = vsubq_f32(v171, v166);
      v53 = vmulq_f32(v169, v172);
      v53.i32[3] = 0;
      *(float *)(v52 + 8 * v51) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v53, v53));
      v54 = *(_QWORD *)(v5 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
      v55 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v54 + 80), (unsigned int *)__p, v50);
      v57 = *((unsigned int *)v189[0] + v47);
      v58 = *(_QWORD *)(v55 + 40);
      if (v57 >= (*(_QWORD *)(v55 + 48) - v58) >> 3)
LABEL_112:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v59 = vmulq_f32(v167, v172);
      v59.i32[3] = 0;
      *(float *)(v58 + 8 * v57 + 4) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v59, v59));
      v60 = *(_QWORD *)(v5 + 40);
      LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
      v61 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v60 + 80), (unsigned int *)__p, v56);
      v63 = *((unsigned int *)v189[0] + v47);
      v64 = *(_QWORD *)(v61 + 40);
      if (v63 >= (*(_QWORD *)(v61 + 48) - v64) >> 3
        || (v65 = *(_QWORD *)(v5 + 40),
            LODWORD(__p[0]) = *(_DWORD *)(v5 + 192),
            v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v65 + 80), (unsigned int *)__p, v62), v68 = *((unsigned int *)v189[0] + v47), v69 = *(_QWORD *)(v66 + 40), v68 >= (*(_QWORD *)(v66 + 48) - v69) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      LODWORD(v67) = *(_DWORD *)(v64 + 8 * v63);
      DWORD1(v67) = *(_DWORD *)(v69 + 8 * v68 + 4);
      *((_OWORD *)&v199 + v47) = v67;
      *(_QWORD *)((char *)v192 + ((v68 >> 3) & 0x1FFFFFF8)) |= 1 << v68;
      ++v14;
      --v46;
    }
    while (v46);
    LODWORD(__p[0]) = v190;
    std::deque<unsigned int>::push_back(v193, __p);
    *(_QWORD *)((char *)v191 + (((unint64_t)v190 >> 3) & 0x1FFFFFF8)) |= 1 << v190;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v188, 3uLL);
    v70 = *((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v170 = v197;
      v173 = v196;
      v168 = v198;
      while (1)
      {
        v71 = *(_DWORD *)(*(_QWORD *)(v193[1] + (((unint64_t)v194 >> 7) & 0x1FFFFFFFFFFFFF8))
                        + 4 * (v194 & 0x3FF));
        *(_QWORD *)&v194 = v194 + 1;
        *((_QWORD *)&v194 + 1) = v70 - 1;
        if ((unint64_t)v194 >= 0x800)
        {
          operator delete(*(void **)v193[1]);
          v193[1] += 8;
          *(_QWORD *)&v194 = v194 - 1024;
        }
        LODWORD(v195) = v71;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(_QWORD *)(v5 + 40), (unsigned int *)&v195, v188);
        v72 = 0;
        while (1)
        {
          v73 = *((unsigned int *)v188[0] + v72);
          if (((1 << v73) & v192[v73 >> 6]) == 0)
            break;
          if (++v72 == 3)
            goto LABEL_84;
        }
        v74 = *((unsigned int *)v188[0] + (v72 + 1) % 3u);
        if (((*(_QWORD *)((char *)v192 + ((v74 >> 3) & 0x1FFFFFF8)) >> v74) & 1) == 0)
        {
          v196 = v173;
          v197 = v170;
          v198 = v168;
          __assert_rtn("ProcessPlaneLikeShape", "IsoChartMesh.cpp", 958, "rgb_vert_processed[vid0]");
        }
        v75 = *((unsigned int *)v188[0] + (v72 + 2) % 3u);
        if (((*(_QWORD *)((char *)v192 + ((v75 >> 3) & 0x1FFFFFF8)) >> v75) & 1) == 0)
        {
          v196 = v173;
          v197 = v170;
          v198 = v168;
          __assert_rtn("ProcessPlaneLikeShape", "IsoChartMesh.cpp", 959, "rgb_vert_processed[vid1]");
        }
        v76 = *(_QWORD *)(v5 + 40);
        LODWORD(__p[0]) = *(_DWORD *)(v76 + 176);
        v77 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v76 + 8), (unsigned int *)__p);
        v78 = *(_QWORD *)(v77 + 40);
        if (v74 >= (*(_QWORD *)(v77 + 48) - v78) >> 4)
          goto LABEL_115;
        v173 = *(float32x4_t *)(v78 + 16 * v74);
        v79 = *(_QWORD *)(v5 + 40);
        LODWORD(__p[0]) = *(_DWORD *)(v79 + 176);
        v80 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v79 + 8), (unsigned int *)__p);
        v81 = *(_QWORD *)(v80 + 40);
        if (v75 >= (*(_QWORD *)(v80 + 48) - v81) >> 4
          || (v170 = *(float32x4_t *)(v81 + 16 * v75),
              v82 = *(_QWORD *)(v5 + 40),
              LODWORD(__p[0]) = *(_DWORD *)(v82 + 176),
              v83 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v82 + 8), (unsigned int *)__p), v85 = *(_QWORD *)(v83 + 40), v73 >= (*(_QWORD *)(v83 + 48) - v85) >> 4))
        {
LABEL_115:
          v196 = v173;
          v197 = v170;
          v198 = v168;
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        v168 = *(float32x4_t *)(v85 + 16 * v73);
        v86 = vsubq_f32(v170, v173);
        v87 = vmulq_f32(v86, v86);
        v87.i32[3] = 0;
        v88 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v87, v87)));
        if (fabsf(v88) < 0.00000001)
          break;
        v89 = vsubq_f32(v168, v173);
        v90 = vmulq_f32(v89, v89);
        v90.i32[3] = 0;
        v91 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v90, v90)));
        if (fabsf(v91) >= 0.00000001)
        {
          v101 = vmulq_f32(v89, v86);
          v101.i32[3] = 0;
          v102 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v101, v101)) / (float)(v88 * v91);
          if (v102 < -1.0)
            v102 = -1.0;
          if (v102 <= 1.0)
            _S15 = v102;
          else
            _S15 = 1.0;
          v104 = 1.0 - (float)(_S15 * _S15);
          v105 = sqrtf(v104);
          if (v104 >= 0.0)
            v106 = v105;
          else
            v106 = 0.0;
          v107 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v108 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v107 + 80), (unsigned int *)__p, v84);
          v110 = *(_QWORD *)(v108 + 40);
          if (v75 >= (*(_QWORD *)(v108 + 48) - v110) >> 3
            || (v111 = *(_QWORD *)(v5 + 40),
                LODWORD(__p[0]) = *(_DWORD *)(v5 + 192),
                v112 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v111 + 80), (unsigned int *)__p, v109), v115 = *(_QWORD *)(v112 + 40), v74 >= (*(_QWORD *)(v112 + 48) - v115) >> 3))
          {
            v196 = v173;
            v197 = v170;
            v198 = v168;
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v116 = vsub_f32(*(float32x2_t *)(v110 + 8 * v75), *(float32x2_t *)(v115 + 8 * v74));
          v117 = (int32x2_t)vmul_f32(v116, v116);
          *(float *)v117.i32 = sqrtf(vmlas_n_f32(*(float *)&v117.i32[1], v116.f32[0], v116.f32[0]));
          *(float32x2_t *)&_Q0 = vdiv_f32(v116, (float32x2_t)vdup_lane_s32(v117, 0));
          if (*(float *)v117.i32 <= 0.0)
            *(double *)&_Q0 = COERCE_DOUBLE(1065353216);
          v118 = vmlas_n_f32(-(float)(*((float *)&_Q0 + 1) * v106), _S15, *(float *)&_Q0);
          __asm { FMLA            S3, S15, V0.S[1] }
          *((_OWORD *)&v199 + v72) = __PAIR64__(LODWORD(_S3), LODWORD(v118));
          v124 = _NF != _VF;
          v125 = &v199 + (v72 + 1) % 3u;
          v125->i64[0] = 0;
          v125->i64[1] = 0;
          *((_OWORD *)&v199 + (v72 + 2) % 3u) = _Q0;
          v126 = (int32x4_t)vsubq_f32(v200, v199);
          v127 = (int32x4_t)vsubq_f32(v201, v199);
          v128 = v124 ^ (COERCE_FLOAT(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v126, (int32x4_t)vextq_s8(*(int8x16_t *)&v126, *(int8x16_t *)&v126, 0xCuLL)), v126), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v127, *(int8x16_t *)&v127, 4uLL), v127)), (float32x4_t)vzip2q_s32(vzip1q_s32(v127, (int32x4_t)vextq_s8(
                                                                      *(int8x16_t *)&v127,
                                                                      *(int8x16_t *)&v127,
                                                                      0xCuLL)),
                                                       v127),
                                        (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v126, *(int8x16_t *)&v126, 4uLL), v126)).i32[2]) >= 0.0);
          v129 = (float)(v106 * *((float *)&_Q0 + 1)) + (float)(*(float *)&_Q0 * _S15);
          v130 = (float)(*((float *)&_Q0 + 1) * _S15) - (float)(v106 * *(float *)&_Q0);
          if ((v128 & 1) != 0)
            v131 = _S3;
          else
            v131 = v130;
          if ((v128 & 1) != 0)
            v132 = v118;
          else
            v132 = v129;
          v133 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v134 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v133 + 80), (unsigned int *)__p, v113);
          v136 = *(_QWORD *)(v134 + 40);
          if (v74 >= (*(_QWORD *)(v134 + 48) - v136) >> 3)
            goto LABEL_116;
          v137 = *(float *)(v136 + 8 * v74);
          v138 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v139 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v138 + 80), (unsigned int *)__p, v135);
          v141 = *(_QWORD *)(v139 + 40);
          if (v73 >= (*(_QWORD *)(v139 + 48) - v141) >> 3)
            goto LABEL_116;
          *(float *)(v141 + 8 * v73) = v137 + (float)(v91 * v132);
          v142 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v143 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v142 + 80), (unsigned int *)__p, v140);
          v145 = *(_QWORD *)(v143 + 40);
          if (v74 >= (*(_QWORD *)(v143 + 48) - v145) >> 3)
            goto LABEL_116;
          v146 = *(float *)(v145 + 8 * v74 + 4);
          v147 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v148 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v147 + 80), (unsigned int *)__p, v144);
          v150 = *(_QWORD *)(v148 + 40);
          if (v73 >= (*(_QWORD *)(v148 + 48) - v150) >> 3)
            goto LABEL_116;
          *(float *)(v150 + 8 * v73 + 4) = v146 + (float)(v91 * v131);
          v151 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v152 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v151 + 80), (unsigned int *)__p, v149);
          v154 = *(_QWORD *)(v152 + 40);
          if (v73 >= (*(_QWORD *)(v152 + 48) - v154) >> 3)
            goto LABEL_116;
          if (fabsf(*(float *)(v154 + 8 * v73)) == INFINITY)
            break;
          v155 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v156 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v155 + 80), (unsigned int *)__p, v153);
          v157 = *(_QWORD *)(v156 + 40);
          if (v73 >= (*(_QWORD *)(v156 + 48) - v157) >> 3)
          {
LABEL_116:
            v196 = v173;
            v197 = v170;
            v198 = v168;
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          if (fabsf(*(float *)(v157 + 8 * v73 + 4)) == INFINITY)
            break;
        }
        else
        {
          v92 = *(_QWORD *)(v5 + 40);
          LODWORD(__p[0]) = *(_DWORD *)(v5 + 192);
          v93 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v92 + 80), (unsigned int *)__p, v84);
          v95 = *(_QWORD *)(v93 + 40);
          if (v74 >= (*(_QWORD *)(v93 + 48) - v95) >> 3
            || (v96 = *(_QWORD *)(v5 + 40),
                LODWORD(__p[0]) = *(_DWORD *)(v5 + 192),
                v97 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v96 + 80), (unsigned int *)__p, v94), v98 = *(_QWORD *)(v97 + 40), v73 >= (*(_QWORD *)(v97 + 48) - v98) >> 3))
          {
            v196 = v173;
            v197 = v170;
            v198 = v168;
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v99 = (_DWORD *)(v95 + 8 * v74);
          v100 = (_DWORD *)(v98 + 8 * v73);
          *v100 = *v99;
          v100[1] = v99[1];
        }
        v192[v73 >> 6] |= 1 << v73;
LABEL_84:
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(_QWORD *)(v5 + 40), (unsigned int *)&v195, __p);
        for (j = 0; j != 12; j += 4)
        {
          HIDWORD(v187) = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(v5 + 40) + 104, (unsigned int *)((char *)__p[0] + j));
          v159 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(v5 + 40) + 104, (unsigned int *)&v187 + 1);
          v160 = *(unsigned int *)(v159 + 16);
          if ((_DWORD)v160 != -1)
          {
            v161 = v160 >> 6;
            v162 = 1 << v160;
            if ((v191[v160 >> 6] & (1 << v160)) == 0)
            {
              LODWORD(v187) = *(_DWORD *)(v159 + 16);
              std::deque<unsigned int>::push_back(v193, &v187);
              v191[v161] |= v162;
            }
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v70 = *((_QWORD *)&v194 + 1);
        if (!*((_QWORD *)&v194 + 1))
        {
          v196 = v173;
          v197 = v170;
          v198 = v168;
          goto LABEL_93;
        }
      }
      v196 = v173;
      v197 = v170;
      v198 = v168;
    }
    else
    {
LABEL_93:
      LOWORD(__p[0]) = 256;
      BYTE2(__p[0]) = 1;
      v176 = vdupq_n_s64(0xAuLL);
      v177 = 20;
      v178 = xmmword_23C60C620;
      v179 = 0x7F7FFFFFFF7FFFFFLL;
      v180 = -1;
      memset(v181, 0, sizeof(v181));
      v182 = 0;
      memset(v183, 0, sizeof(v183));
      v184 = 0u;
      v185 = 0u;
      v186 = 0u;
      v187 = 0;
      v174 = 0.0;
      v195 = 0;
      v163 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch((cv3d::cv::gess::isochart::IsoChartMesh *)v5, (float **)__p, (float *)&v187 + 1, (float *)&v187, &v195, &v174, 0);
      if (v195)
        v164 = v163;
      else
        v164 = 1;
      *a2 = v164;
      if (*((_QWORD *)&v185 + 1))
      {
        *(_QWORD *)&v186 = *((_QWORD *)&v185 + 1);
        operator delete(*((void **)&v185 + 1));
      }
      if ((_QWORD)v184)
      {
        *((_QWORD *)&v184 + 1) = v184;
        operator delete((void *)v184);
      }
      v195 = (unint64_t)v183 + 8;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v195);
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v181);
    }
    if (v188[0])
    {
      v188[1] = v188[0];
      operator delete(v188[0]);
    }
    if (v189[0])
    {
      v189[1] = v189[0];
      operator delete(v189[0]);
    }
    if (v191)
      operator delete(v191);
    if (v192)
      operator delete(v192);
    return std::deque<int>::~deque[abi:ne180100](v193);
  }
  return this;
}

void sub_23C5B55D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, __int128 a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  _QWORD *v54;
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)&__p);
  v56 = (void *)v54[24];
  if (v56)
  {
    v54[25] = v56;
    operator delete(v56);
  }
  v57 = (void *)v54[27];
  if (v57)
  {
    v54[28] = v57;
    operator delete(v57);
  }
  v58 = (void *)v54[31];
  if (v58)
    operator delete(v58);
  v59 = (void *)v54[34];
  if (v59)
    operator delete(v59);
  std::deque<int>::~deque[abi:ne180100](&a54);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(uint64_t a1, _QWORD *a2, unint64_t *a3, char **a4, BOOL a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  char *v13;
  void **v14;
  unint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;

  v42 = a5;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  std::vector<std::vector<cv3d::cv::gess::mesh::FaceHandle>>::vector(&v40, *a3);
  if ((v8 >> 2))
  {
    v9 = 0;
    v10 = (v8 >> 2);
    do
    {
      v11 = *(unsigned int *)(*a2 + 4 * v9);
      if (*a3 <= v11)
        __assert_rtn("GenerateAllSubCharts", "MeshPartitionChart.cpp", 36, "face_chart_id[fi] < max_sub_chart_count");
      v12 = (char **)(v40 + 24 * v11);
      v14 = (void **)(v12 + 1);
      v13 = v12[1];
      v16 = v12 + 2;
      v15 = (unint64_t)v12[2];
      if ((unint64_t)v13 >= v15)
      {
        v18 = (v13 - *v12) >> 2;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v19 = v15 - (_QWORD)*v12;
        v20 = v19 >> 1;
        if (v19 >> 1 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v16, v21);
        else
          v22 = 0;
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v9;
        v17 = v23 + 4;
        v24 = (char *)*v14;
        v25 = *v12;
        if (*v14 != *v12)
        {
          do
          {
            v26 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v23 - 1) = v26;
            v23 -= 4;
          }
          while (v24 != v25);
          v24 = *v12;
        }
        *v12 = v23;
        *v14 = v17;
        *v16 = &v22[4 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v13 = v9;
        v17 = v13 + 4;
      }
      *v14 = v17;
      ++v9;
    }
    while (v9 != v10);
  }
  v28 = *(_QWORD *)(a1 + 256);
  for (i = *(_QWORD *)(a1 + 264);
        i != v28;
  *(_QWORD *)(a1 + 264) = v28;
  v29 = v40;
  for (j = v41; v29 != j; v29 += 24)
  {
    if (*(_QWORD *)(v29 + 8) != *(_QWORD *)v29)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v39);
      cv3d::cv::gess::isochart::GenerateMeshFromFaceList(*(_QWORD *)(a1 + 40), (unsigned int **)v29, v39);
      std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,void>((cv3d::cv::gess::mesh::TriMesh *)v39, *(const float **)(a1 + 48), *(const float **)(a1 + 56), &v42, &v38);
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)(a1 + 256), &v38);
      *(_QWORD *)(v38 + 280) = a1;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](a4, &v39);
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
    }
  }
  *(_QWORD *)&v39 = &v40;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_23C5B5A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  __cxa_end_catch();
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x23C5B5A60);
}

void sub_23C5B5A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  a13 = (void **)&a15;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::isochart::AllElementsIdentical(int **a1)
{
  int *v1;
  int *v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  _BOOL8 result;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
    return 1;
  v5 = *v2;
  v4 = v2 + 1;
  v3 = v5;
  do
  {
    v6 = *(v4 - 1);
    result = v6 == v3;
  }
  while (v6 == v3 && v4++ != v1);
  return result;
}

uint64_t cv3d::cv::gess::isochart::BiPartitionChartMesh(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD v11[2];
  int64x2_t v12[2];
  __int128 v13;
  int64x2_t v14[2];
  __int128 v15;
  int v16;
  int v17;

  v16 = a3;
  v17 = a2;
  v15 = 0u;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  memset(v12, 0, sizeof(v12));
  std::deque<unsigned int>::push_back(v14, &v17);
  std::deque<unsigned int>::push_back(v12, &v16);
  v6 = *(_DWORD **)a4;
  v7 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v7 >= 1)
    memset(*(void **)a4, 255, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
  v6[v17] = 0;
  v6[v16] = 1;
  v11[0] = a1;
  v11[1] = a4;
  while (1)
  {
    while (*((_QWORD *)&v15 + 1))
    {
      cv3d::cv::gess::isochart::BiPartitionChartMesh(cv3d::cv::gess::mesh::TriMesh const&,unsigned int,unsigned int,std::vector<unsigned int> &)::$_0::operator()((uint64_t)v11, v14, 0);
      if (*((_QWORD *)&v13 + 1))
        goto LABEL_8;
    }
    if (!*((_QWORD *)&v13 + 1))
      break;
LABEL_8:
    cv3d::cv::gess::isochart::BiPartitionChartMesh(cv3d::cv::gess::mesh::TriMesh const&,unsigned int,unsigned int,std::vector<unsigned int> &)::$_0::operator()((uint64_t)v11, v12, 1);
  }
  v8 = *(_DWORD **)a4;
  v9 = *(_DWORD **)(a4 + 8);
  while (v8 != v9)
  {
    if (*v8 == -1)
      *v8 = 0;
    ++v8;
  }
  std::deque<int>::~deque[abi:ne180100](v12);
  std::deque<int>::~deque[abi:ne180100](v14);
  return 1;
}

void sub_23C5B5BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::BiPartitionChartMesh(cv3d::cv::gess::mesh::TriMesh const&,unsigned int,unsigned int,std::vector<unsigned int> &)::$_0::operator()(uint64_t a1, int64x2_t *a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  v6 = *(_DWORD *)(*(_QWORD *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * (a2[2].i64[0] & 0x3FF));
  a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_23C60C630);
  std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
  v7 = *(_QWORD *)a1 + 104;
  v18 = v6;
  v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v7, &v18);
  v17 = v8;
  do
  {
    v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)a1 + 104, &v17) + 8);
    v9 = *(_QWORD *)a1;
    v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)a1 + 104, &v17);
    v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v9, *(_DWORD *)(v9 + 180), *v10);
    if ((v12 & *v11) == 0)
    {
      v13 = *(_QWORD *)a1 + 104;
      v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v13, &v17);
      v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v13, v14) + 16);
      if (*(_DWORD *)(**(_QWORD **)(a1 + 8) + 4 * v15) == -1)
      {
        v16 = v15;
        std::deque<unsigned int>::push_back(a2, &v16);
        *(_DWORD *)(**(_QWORD **)(a1 + 8) + 4 * v15) = a3;
      }
    }
  }
  while (v17 != v8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::PartitionGeneralShape(uint64_t a1, char **a2, unsigned int *a3, BOOL a4, _BYTE *a5)
{
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::vector<unsigned int>::pointer begin;
  cv3d::cv::gess::mesh::TriMesh *v15;
  std::vector<unsigned int>::pointer v16;
  std::vector<unsigned int>::pointer end;
  unsigned int v18;
  std::vector<unsigned int>::pointer v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  float v25;
  uint64_t *v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *i;
  uint64_t *v32;
  int v33;
  uint64_t j;
  uint64_t v35;
  unint64_t v36;
  void *__p;
  uint64_t *v38;
  uint64_t v39;
  std::vector<unsigned int> v40;
  void **p_p;

  if (*(_QWORD *)(a1 + 112) >= 2uLL)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
    v9 = v8 >> 2;
    if ((unint64_t)v8 <= 0xF)
    {
      std::vector<unsigned int>::vector(&v40, v9);
      v10 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) != *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152))
      {
        v11 = 0;
        begin = v40.__begin_;
        do
        {
          begin[v11] = v11;
          ++v11;
        }
        while (v10 > v11);
      }
      __p = (void *)v10;
      cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v40, (unint64_t *)&__p, a2, a4);
      goto LABEL_45;
    }
    std::vector<unsigned int>::vector(&v40, v9);
    cv3d::cv::gess::isochart::IsoChartMesh::ClusterFacesByParameterDistance((_QWORD *)a1, (uint64_t *)&v40);
    v16 = v40.__begin_;
    end = v40.__end_;
    if (v40.__end_ == v40.__begin_)
      __assert_rtn("PartitionGeneralShape", "MeshPartitionChart.cpp", 135, "face_chart_id.size() > 0");
    v18 = *v40.__begin_;
    v19 = v40.__begin_;
    do
    {
      if (*v19 != v18)
        goto LABEL_14;
      ++v19;
    }
    while (v19 != v40.__end_);
    cv3d::cv::gess::isochart::CalculateVertexImportance(*(cv3d::cv::gess::isochart **)(a1 + 40), v15);
    cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization((cv3d::cv::gess::isochart::IsoChartMesh *)a1);
    cv3d::cv::gess::isochart::IsoChartMesh::ClusterFacesByParameterDistance((_QWORD *)a1, (uint64_t *)&v40);
    v16 = v40.__begin_;
    end = v40.__end_;
    v18 = *v40.__begin_;
LABEL_14:
    while (v16 != end)
    {
      if (*v16 != v18)
      {
        v29 = *(_QWORD *)(a1 + 112);
        v36 = v29;
        if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152) >= 0x4DuLL)
          cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult(a1, &v36, (uint64_t *)&v40, a5);
        __p = 0;
        v38 = 0;
        v39 = 0;
        cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v40, &v36, (char **)&__p, a4);
        v30 = *(_QWORD *)(a1 + 32);
        if (!v30 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30) & 1) == 0)
        {
          LOBYTE(p_p) = 0;
          if (*a3 >= (unint64_t)(v40.__end_ - v40.__begin_))
          {
            cv3d::cv::gess::isochart::IsoChartMesh::OptimizeBoundaryByStretch((std::vector<unsigned int> *)a1, (uint64_t *)(a1 + 312), (uint64_t)&v40, v29, &p_p);
            if ((_BYTE)p_p)
            {
              v32 = (uint64_t *)__p;
              for (i = v38;
                    i != v32;
              v38 = v32;
              cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v40, &v36, (char **)&__p, a4);
            }
          }
          v35 = *(_QWORD *)(a1 + 256);
          for (j = *(_QWORD *)(a1 + 264);
                j != v35;
          *(_QWORD *)(a1 + 264) = v35;
          *a5 |= p_p;
          if (&__p != (void **)a2)
            std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__assign_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>((uint64_t)a2, (uint64_t *)__p, v38, ((char *)v38 - (_BYTE *)__p) >> 4);
        }
        p_p = &__p;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&p_p);
        goto LABEL_45;
      }
      ++v16;
    }
    std::vector<float>::vector(&__p, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2);
    v20 = *(_QWORD *)(a1 + 40);
    if (*(_QWORD *)(v20 + 160) != *(_QWORD *)(v20 + 152))
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = -1;
      while (1)
      {
        LODWORD(p_p) = v22;
        v25 = cv3d::cv::gess::mesh::TriMesh::Area(v20, (unsigned int *)&p_p);
        v26 = (uint64_t *)__p;
        *((float *)__p + v21) = v25;
        if (!(_DWORD)v22)
          break;
        v27 = *((float *)v26 + v21);
        if (v27 <= *((float *)v26 + v23))
        {
          if (v24 != -1 && v27 <= *((float *)v26 + v24))
            break;
          v28 = v23;
          v24 = v22;
        }
        else
        {
          v28 = v22;
          v24 = v23;
        }
LABEL_24:
        v21 = (v22 + 1);
        v20 = *(_QWORD *)(a1 + 40);
        v22 = v21;
        v23 = v28;
        if (v21 >= (uint64_t)(*(_QWORD *)(v20 + 160) - *(_QWORD *)(v20 + 152)) >> 2)
          goto LABEL_36;
      }
      v28 = v23;
      goto LABEL_24;
    }
    LODWORD(v28) = 0;
    v33 = 0;
    v26 = (uint64_t *)__p;
    v24 = -1;
    if (__p)
    {
LABEL_36:
      v38 = v26;
      operator delete(v26);
      v20 = *(_QWORD *)(a1 + 40);
      v33 = v28;
    }
    cv3d::cv::gess::isochart::BiPartitionChartMesh(v20, v33, v24, (uint64_t)&v40);
    __p = (void *)2;
    cv3d::cv::gess::isochart::IsoChartMesh::GenerateAllSubCharts(a1, &v40, (unint64_t *)&__p, a2, a4);
    *a5 = 0;
LABEL_45:
    if (v40.__begin_)
    {
      v40.__end_ = v40.__begin_;
      operator delete(v40.__begin_);
    }
  }
}

void sub_23C5B60E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ClusterFacesByParameterDistance(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  float v17;
  float v18;
  int *v19;
  int v20;
  unsigned int v21;
  void *__p;
  int *v23;

  v4 = (_QWORD *)a1[5];
  v5 = v4[20] - v4[19];
  v7 = v4[13];
  v6 = v4[14];
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    v8 = 0;
    v9 = (unint64_t)(v6 - v7) >> 2;
    v10 = (v5 >> 2);
    do
    {
      v11 = a1[5];
      v21 = v8;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v11, &v21, &__p);
      v12 = *a2;
      *(_DWORD *)(*a2 + 4 * v8) = -1;
      v13 = a1[14];
      if (v13)
      {
        LODWORD(v14) = 0;
        v15 = (int *)__p;
        v16 = v23;
        v17 = 3.4028e38;
        do
        {
          if (v15 == v16)
          {
            v18 = 0.0;
          }
          else
          {
            v18 = 0.0;
            v19 = v15;
            do
            {
              v20 = *v19++;
              v18 = v18 + *(float *)(a1[39] + 4 * (v20 + v14 * v9));
            }
            while (v19 != v16);
          }
          if (v18 < v17)
          {
            *(_DWORD *)(v12 + 4 * v8) = v14;
            v17 = v18;
          }
          v14 = (v14 + 1);
        }
        while (v13 > v14);
      }
      ++v8;
    }
    while (v8 != v10);
  }
  if (__p)
  {
    v23 = (int *)__p;
    operator delete(__p);
  }
}

void sub_23C5B625C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult(uint64_t a1, unint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD **v37;
  unint64_t v38;
  _QWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unsigned int v64;
  void **v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[3];
  uint64_t v70[3];
  char v71;
  uint64_t v72;

  v5 = *a2;
  if (!v5)
    cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult();
  v72 = 0;
  memset(v70, 0, sizeof(v70));
  v71 = 0;
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::resize((uint64_t)v70, v5);
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::vector(v69, *a2);
  v8 = *a2;
  if (*a2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = operator new(0x28uLL);
      v11[1] = 0;
      v11[2] = 0;
      *v11 = &off_250D4AD38;
      *((_DWORD *)v11 + 6) = 0;
      *((_DWORD *)v11 + 7) = v10;
      v11[4] = -1;
      *(_QWORD *)&v67 = v11 + 3;
      *((_QWORD *)&v67 + 1) = v11;
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v69[0] + 16 * v9, &v67);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
      if (*((_QWORD *)&v67 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v8 = *a2;
      v9 = ++v10;
    }
    while (*a2 > v10);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  v16 = (v15 >> 2);
  v17 = v15 & 0x3FFFFFFFCLL;
  if ((v15 & 0x3FFFFFFFCLL) != 0)
  {
    v18 = (unsigned int *)*a3;
    v19 = v69[0];
    v20 = v16;
    do
    {
      v22 = *v18++;
      v21 = v22;
      if (v8 <= v22)
        __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 269, "face_chart_id[i] < max_sub_chart_count");
      --**(_DWORD **)(v19 + 16 * v21);
      --v20;
    }
    while (v20);
  }
  else if (!v8)
  {
    v30 = 0;
    goto LABEL_26;
  }
  v23 = 0;
  do
  {
    v24 = *(_OWORD *)(v69[0] + 16 * v23);
    v68 = v24;
    if (*((_QWORD *)&v24 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::insert((uint64_t)v70, &v68);
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    ++v23;
    v30 = *a2;
  }
  while (v23 < *a2);
LABEL_26:
  std::vector<std::vector<unsigned int>>::vector(&v67, v30);
  if (*a2)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    do
    {
      std::vector<unsigned int>::reserve((std::vector<int> *)(v67 + v32), -**(_DWORD **)(v69[0] + v31));
      ++v33;
      v32 += 24;
      v31 += 16;
    }
    while (v33 < *a2);
  }
  if (v17)
  {
    v34 = 0;
    do
    {
      v35 = v67 + 24 * *(unsigned int *)(*a3 + 4 * v34);
      v37 = (_DWORD **)(v35 + 8);
      v36 = *(_DWORD **)(v35 + 8);
      v39 = (_QWORD *)(v35 + 16);
      v38 = *(_QWORD *)(v35 + 16);
      if ((unint64_t)v36 >= v38)
      {
        v41 = *(_DWORD **)v35;
        v42 = ((uint64_t)v36 - *(_QWORD *)v35) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v44 = v38 - (_QWORD)v41;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v39, v45);
          v36 = *v37;
          v41 = *(_DWORD **)v35;
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *(_DWORD *)v47 = v34;
        v40 = v47 + 4;
        while (v36 != v41)
        {
          v48 = *--v36;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        *(_QWORD *)v35 = v47;
        *v37 = v40;
        *v39 = &v46[4 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v36 = v34;
        v40 = v36 + 1;
      }
      *v37 = v40;
      ++v34;
    }
    while (v34 != v16);
  }
  while (v72)
  {
    cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::remove_at(v70, 0, &v65);
    if (!v65 || *(int *)v65 >= 1)
      __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 292, "top != nullptr && (top->weight <= 0)");
    v49 = *((_DWORD *)v65 + 1);
    v50 = (uint64_t *)(v67 + 24 * v49);
    v51 = *v50;
    v52 = v50[1];
    v53 = v52 - *v50;
    if ((unint64_t)v53 >= 0x14 && v52 != v51)
    {
      v55 = 0;
      v56 = v53 >> 2;
      v57 = (_DWORD *)*a3;
      do
      {
        v64 = *(_DWORD *)(v51 + 4 * v55);
        v58 = v64;
        if (v49 != v57[v64])
          __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 301, "top->data == face_chart_id[fid]");
        cv3d::cv::gess::isochart::IsoChartMesh::SmoothOneFace(a1, &v64, a3);
        v57 = (_DWORD *)*a3;
        v49 = *((_DWORD *)v65 + 1);
        if (*(_DWORD *)(*a3 + 4 * v58) != v49 && (unint64_t)--v56 <= 4)
          break;
        ++v55;
        v51 = *(_QWORD *)(v67 + 24 * v49);
      }
      while (v55 < (*(_QWORD *)(v67 + 24 * v49 + 8) - v51) >> 2);
    }
    v59 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  cv3d::cv::gess::isochart::IsoChartMesh::MakePartitionValid(a1, a2, a3, a4);
  v65 = (void **)&v67;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v65);
  *(_QWORD *)&v67 = v69;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  return cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::~MaxHeap((uint64_t)v70);
}

void sub_23C5B6754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v5;
  va_list va;
  uint64_t v7;
  void **v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void **);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  va_copy((va_list)v5, va1);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  va_copy((va_list)v8, va2);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::~MaxHeap((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::resize(uint64_t a1, unint64_t a2)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize(a1, a2);
  return 1;
}

void sub_23C5B6824(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23C5B681CLL);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::insert(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4)
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)a1, a2);
  else
    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a1 + 16 * v4), (uint64_t *)a2);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)a2 + 8) = v5;
  *(_QWORD *)(a1 + 32) = v5 + 1;
  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::upheap((uint64_t *)a1, v5);
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::SmoothOneFace(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  void *__p[3];
  unsigned int v42[4];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(*a3 + 4 * *a2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(_QWORD *)(a1 + 40), a2, __p);
  v7 = 0;
  v8 = 0;
  do
  {
    v42[0] = *(_DWORD *)((char *)__p[0] + v7 * 4);
    v40 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, v42);
    v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v40);
    if ((*v9 & v11) != 0)
    {
      v42[v7 + 1] = v6;
    }
    else
    {
      v12 = *(_DWORD *)(*a3
                      + 4
                      * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v40) + 16));
      v42[v7 + 1] = v12;
      if (v12 != v6)
        ++v8;
    }
    ++v7;
  }
  while (v7 != 3);
  if (v8 == 3)
  {
    v17 = 0;
    for (i = 1; i != 3; ++i)
    {
      v30 = *(_QWORD *)(a1 + 40);
      v42[0] = *(_DWORD *)(a1 + 200);
      v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v30 + 32), v42, v10);
      v33 = *((unsigned int *)__p[0] + v17);
      v34 = *(_QWORD *)(v31 + 40);
      if (v33 >= (*(_QWORD *)(v31 + 48) - v34) >> 2
        || (v35 = *(float *)(v34 + 4 * v33),
            v36 = *(_QWORD *)(a1 + 40),
            v42[0] = *(_DWORD *)(a1 + 200),
            v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v36 + 32), v42, v32),
            v38 = *((unsigned int *)__p[0] + i),
            v39 = *(_QWORD *)(v37 + 40),
            v38 >= (*(_QWORD *)(v37 + 48) - v39) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      if (v35 < *(float *)(v39 + 4 * v38))
        v17 = i;
    }
LABEL_32:
    v14 = v42[v17 + 1];
  }
  else
  {
    if (v8 != 2)
      goto LABEL_34;
    v13 = 0;
    while (1)
    {
      v14 = v42[v13 + 1];
      if (v14 != v6)
      {
        v15 = v13 > 1 ? -2 : 1;
        if (v14 == v42[(v15 + v13) + 1])
          break;
        v16 = (v13 - 1);
        if (!v13)
          v16 = 2;
        if (v14 == v42[v16 + 1])
          break;
      }
      if (++v13 == 3)
      {
        v17 = 0;
        for (j = 1; j != 3; ++j)
        {
          v19 = *(_QWORD *)(a1 + 40);
          v42[0] = *(_DWORD *)(a1 + 200);
          v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v19 + 32), v42, v10);
          v22 = *((unsigned int *)__p[0] + v17);
          v23 = *(_QWORD *)(v20 + 40);
          if (v22 >= (*(_QWORD *)(v20 + 48) - v23) >> 2
            || (v24 = *(float *)(v23 + 4 * v22),
                v25 = *(_QWORD *)(a1 + 40),
                v42[0] = *(_DWORD *)(a1 + 200),
                v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v25 + 32), v42, v21),
                v27 = *((unsigned int *)__p[0] + j),
                v28 = *(_QWORD *)(v26 + 40),
                v27 >= (*(_QWORD *)(v26 + 48) - v28) >> 2))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          if (v24 < *(float *)(v28 + 4 * v27))
            v17 = j;
        }
        goto LABEL_32;
      }
    }
  }
  *(_DWORD *)(*a3 + 4 * *a2) = v14;
LABEL_34:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23C5B6BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::MakePartitionValid(uint64_t a1, unint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  _BOOL4 v8;
  unint64_t v9;
  int v10;
  unsigned __int8 v11;
  BOOL v12;

  v8 = 0;
  v9 = 0;
  v12 = 0;
  *a4 = 0;
  while (1)
  {
    v10 = 0;
    v11 = 0;
    if (!v8)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::SatifyManifoldRule(a1, a2, a3, &v11, &v12);
      v10 = v11;
      v8 = v12;
    }
    *a4 = v8;
    if (v8 && !v10)
      break;
    if (v10)
    {
      v9 += 2;
      if (v9 < *a2)
        continue;
    }
    *a4 = 0;
    return;
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::SatifyManifoldRule(uint64_t a1, unint64_t *a2, uint64_t *a3, _BYTE *a4, BOOL *a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  unint64_t v16;
  int v17;
  unsigned __int8 v18;

  v10 = 0;
  v11 = 0;
  *a4 = 0;
  do
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
    v13 = (v12 >> 2);
    if ((v12 >> 2))
    {
      v14 = 0;
      LOBYTE(v15) = 0;
      do
      {
        v18 = 0;
        v17 = v14;
        cv3d::cv::gess::isochart::IsoChartMesh::MakeValidationAroundVertex(a1, (uint64_t)&v17, a3, &v18);
        v15 = (v18 | v15) != 0;
        ++v14;
      }
      while (v13 != v14);
      v10 = *a4;
    }
    else
    {
      v15 = 0;
    }
    ++v11;
    v10 |= v15;
    *a4 = v10;
    v16 = *a2;
  }
  while (v15 && v11 <= v16);
  *a5 = v11 <= v16;
}

void cv3d::cv::gess::isochart::IsoChartMesh::MakeValidationAroundVertex(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  unsigned int i;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  void *__p;
  char *v71;
  unint64_t v72;
  void *v73;
  char *v74;
  char *v75;
  void *v76;
  char *v77;
  char *v78;
  unsigned int v79;
  _BYTE v80[16];
  char *v81;
  char *v82;
  char *v83;

  *a4 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v80, *(_QWORD *)(a1 + 40) + 104, a2);
  for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v80);
        ;
        i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v80))
  {
    v79 = i;
    if (i == -1)
      break;
    v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), i);
    if ((*v7 & v8) == 0)
    {
      v9 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v79);
      v10 = v9;
      v11 = v82;
      if (v82 >= v83)
      {
        v13 = (v82 - v81) >> 2;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v14 = (v83 - v81) >> 1;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if ((unint64_t)(v83 - v81) >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v83, v15);
        else
          v16 = 0;
        v17 = &v16[4 * v13];
        *(_DWORD *)v17 = *(_DWORD *)(v10 + 16);
        v12 = v17 + 4;
        v19 = v81;
        v18 = v82;
        if (v82 != v81)
        {
          do
          {
            v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          v18 = v81;
        }
        v81 = v17;
        v82 = v12;
        v83 = &v16[4 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v82 = *(_DWORD *)(v9 + 16);
        v12 = v11 + 4;
      }
      v82 = v12;
    }
  }
  v21 = v81;
  v22 = v82;
  v23 = v82 - v81;
  if (v82 == v81)
    goto LABEL_100;
  if ((unint64_t)v23 <= 7)
  {
LABEL_101:
    v82 = v21;
    operator delete(v21);
    return;
  }
  v24 = v23 >> 2;
  v25 = *a3;
  v26 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v81);
  v27 = 2;
  if (v24 > 2)
    v27 = v24;
  v28 = *(_DWORD *)(v25 + 4 * *((unsigned int *)v81 + 1));
  if (v26 == v28)
  {
    v29 = 2;
    while (1)
    {
      v30 = v29;
      if (v27 == v29)
        break;
      v28 = *(_DWORD *)(v25 + 4 * *(unsigned int *)&v81[4 * v29++]);
      if (v26 != v28)
        goto LABEL_32;
    }
    v28 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v81);
LABEL_32:
    if (v30 >= v24)
    {
      v22 = v81;
      goto LABEL_100;
    }
  }
  v31 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  __p = 0;
  v71 = 0;
  v72 = 0;
  while (1)
  {
    v32 = *(unsigned int *)&v21[4 * v31];
    v33 = *(_DWORD *)(*a3 + 4 * v32);
    v34 = (char *)v76;
    v35 = v77;
    v36 = v76;
    if (v76 == v77)
      break;
    while (*v36 != v33)
    {
      if (++v36 == (_DWORD *)v77)
        goto LABEL_37;
    }
    ++v31;
LABEL_91:
    if (v31 >= (v22 - v21) >> 2)
      goto LABEL_92;
  }
LABEL_37:
  if (v77 >= v78)
  {
    v38 = (v77 - (_BYTE *)v76) >> 2;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v40 = v78 - (_BYTE *)v76;
    if ((v78 - (_BYTE *)v76) >> 1 > v39)
      v39 = v40 >> 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
      v41 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v78, v41);
      v34 = (char *)v76;
      v35 = v77;
    }
    else
    {
      v42 = 0;
    }
    v43 = (int *)&v42[4 * v38];
    *v43 = v33;
    v37 = (char *)(v43 + 1);
    while (v35 != v34)
    {
      v44 = *((_DWORD *)v35 - 1);
      v35 -= 4;
      *--v43 = v44;
    }
    v76 = v43;
    v77 = v37;
    v78 = &v42[4 * v41];
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_DWORD *)v77 = v33;
    v37 = v35 + 4;
  }
  v77 = v37;
  v45 = (char *)__p;
  v71 = (char *)__p;
  if ((unint64_t)__p >= v72)
  {
    v47 = (uint64_t)(v72 - (_QWORD)__p) >> 1;
    if (v47 <= 1)
      v47 = 1;
    if (v72 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
      v48 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v48 = v47;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v72, v48);
    *(_DWORD *)v49 = v32;
    v46 = v49 + 4;
    v52 = (char *)__p;
    v51 = v71;
    v53 = v49;
    if (v71 != __p)
    {
      do
      {
        v54 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v53 - 1) = v54;
        v53 -= 4;
      }
      while (v51 != v52);
      v51 = (char *)__p;
    }
    __p = v53;
    v71 = v49 + 4;
    v72 = (unint64_t)&v49[4 * v50];
    if (v51)
      operator delete(v51);
  }
  else
  {
    *(_DWORD *)__p = v32;
    v46 = v45 + 4;
  }
  v71 = v46;
  v55 = (char *)v73;
  v74 = (char *)v73;
  ++v31;
  v57 = v81;
  v56 = v82;
  if (v31 >= (v82 - v81) >> 2)
    goto LABEL_109;
  v58 = v31;
  do
  {
    v59 = *(unsigned int *)&v57[4 * v58];
    if (*(_DWORD *)(*a3 + 4 * v59) == v33)
    {
      if (v55 >= v75)
      {
        v60 = (v55 - (_BYTE *)v73) >> 2;
        if ((unint64_t)(v60 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v61 = (v75 - (_BYTE *)v73) >> 1;
        if (v61 <= v60 + 1)
          v61 = v60 + 1;
        if ((unint64_t)(v75 - (_BYTE *)v73) >= 0x7FFFFFFFFFFFFFFCLL)
          v62 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v62 = v61;
        if (v62)
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v75, v62);
        else
          v63 = 0;
        v64 = &v63[4 * v60];
        *(_DWORD *)v64 = v59;
        v55 = v64 + 4;
        v66 = (char *)v73;
        v65 = v74;
        if (v74 != v73)
        {
          do
          {
            v67 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v64 - 1) = v67;
            v64 -= 4;
          }
          while (v65 != v66);
          v65 = (char *)v73;
        }
        v73 = v64;
        v74 = v55;
        v75 = &v63[4 * v62];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *(_DWORD *)v55 = v59;
        v55 += 4;
      }
      v74 = v55;
      v57 = v81;
      v56 = v82;
    }
    ++v58;
  }
  while (v58 < (v56 - v57) >> 2);
  if (v73 == v55
    || (cv3d::cv::gess::isochart::IsoChartMesh::TryConnectAllFacesInSameChart(a1, (char **)&v73, &__p), v73 == v74))
  {
LABEL_109:
    if (*a4)
      goto LABEL_92;
    v21 = v81;
    v22 = v82;
    goto LABEL_91;
  }
  cv3d::cv::gess::isochart::IsoChartMesh::AdjustChartIDToAvoidNonmanifold(v68, a3, (unsigned int **)&v73, (unsigned int **)&__p, v33, v26, v28);
  *a4 = 1;
LABEL_92:
  if (__p)
  {
    v71 = (char *)__p;
    operator delete(__p);
  }
  if (v73)
  {
    v74 = (char *)v73;
    operator delete(v73);
  }
  if (v76)
  {
    v77 = (char *)v76;
    operator delete(v76);
  }
  v22 = v81;
LABEL_100:
  v21 = v22;
  if (v22)
    goto LABEL_101;
}

void sub_23C5B72DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  v21 = *(void **)(v19 - 104);
  if (v21)
  {
    *(_QWORD *)(v19 - 96) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryConnectAllFacesInSameChart(uint64_t a1, char **a2, void **a3)
{
  char *v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  int64_t v32;
  void *__p[3];
  unsigned int v34;

  v3 = (char *)*a3;
  if (a3[1] != *a3)
  {
    v7 = 0;
    v8 = (uint64_t)(a3 + 2);
    do
    {
      if (*a2 == a2[1])
        break;
      v34 = *(_DWORD *)&v3[4 * v7];
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(_QWORD *)(a1 + 40), &v34, __p);
      for (i = 0; i != 3; ++i)
      {
        v10 = *(_QWORD *)(a1 + 40);
        v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10 + 104, (unsigned int *)__p[0] + i);
        v12 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v10, *(_DWORD *)(v10 + 180), *v11);
        if ((*v12 & v13) == 0)
        {
          v14 = *(_QWORD *)(a1 + 40) + 104;
          v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)__p[0] + i);
          v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v14, v15) + 16);
          v18 = *a2;
          v17 = a2[1];
          if (*a2 != v17)
          {
            while (*(_DWORD *)v18 != v16)
            {
              v18 += 4;
              if (v18 == v17)
              {
                v18 = a2[1];
                break;
              }
            }
          }
          if (v18 != v17)
          {
            v20 = a3[1];
            v19 = (unint64_t)a3[2];
            if ((unint64_t)v20 >= v19)
            {
              v22 = ((char *)v20 - (_BYTE *)*a3) >> 2;
              if ((unint64_t)(v22 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v23 = v19 - (_QWORD)*a3;
              v24 = v23 >> 1;
              if (v23 >> 1 <= (unint64_t)(v22 + 1))
                v24 = v22 + 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v24;
              if (v25)
                v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v8, v25);
              else
                v26 = 0;
              v27 = &v26[4 * v22];
              *(_DWORD *)v27 = v16;
              v21 = v27 + 4;
              v29 = (char *)*a3;
              v28 = (char *)a3[1];
              if (v28 != *a3)
              {
                do
                {
                  v30 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v27 - 1) = v30;
                  v27 -= 4;
                }
                while (v28 != v29);
                v28 = (char *)*a3;
              }
              *a3 = v27;
              a3[1] = v21;
              a3[2] = &v26[4 * v25];
              if (v28)
                operator delete(v28);
            }
            else
            {
              *v20 = v16;
              v21 = v20 + 1;
            }
            a3[1] = v21;
            v31 = a2[1];
            v32 = v31 - (v18 + 4);
            if (v31 != v18 + 4)
              memmove(v18, v18 + 4, v31 - (v18 + 4));
            a2[1] = &v18[v32];
          }
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      ++v7;
      v3 = (char *)*a3;
    }
    while (v7 < ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 2);
  }
}

void sub_23C5B7568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::AdjustChartIDToAvoidNonmanifold(uint64_t a1, uint64_t *a2, unsigned int **a3, unsigned int **a4, int a5, int a6, int a7)
{
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  if (a6 != a5)
    a7 = a6;
  v8 = *a3;
  v9 = a3[1];
  v10 = v9 - *a3;
  v11 = *a4;
  v12 = a4[1];
  v13 = (char *)v12 - (char *)*a4;
  if (v10 <= v13 >> 2)
  {
    if (v9 != v8)
    {
      v17 = *a2;
      if (v10 <= 1)
        v10 = 1;
      do
      {
        v18 = *v8++;
        *(_DWORD *)(v17 + 4 * v18) = a7;
        --v10;
      }
      while (v10);
    }
  }
  else if (v12 != v11)
  {
    v14 = v13 >> 2;
    v15 = *a2;
    if ((unint64_t)(v13 >> 2) <= 1)
      v14 = 1;
    do
    {
      v16 = *v11++;
      *(_DWORD *)(v15 + 4 * v16) = a7;
      --v14;
    }
    while (v14);
  }
}

_QWORD *std::vector<std::vector<cv3d::cv::gess::mesh::FaceHandle>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5B7698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__assign_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C5B7920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::~MaxHeap(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::CutTopData((uint64_t *)a1);
  }
  v3 = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::CutTopData(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::remove_at(a1, 0, &v6);
  if (v6)
    v1 = *(unsigned int *)(v6 + 4);
  else
    v1 = 0;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::remove_at(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = a1[4];
  if (v4 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v4 - 1);
    v7 = a1[4] - 1;
    a1[4] = v7;
    v8 = *a1;
    v9 = *(_QWORD *)(*a1 + 16 * v7);
    *(_QWORD *)(v9 + 8) = -1;
    if (**(_DWORD **)(v8 + 16 * a2) >= *(_DWORD *)v9)
      cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::upheap(a1, a2);
    else
      cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::downheap(a1, a2);
    v10 = *(_OWORD *)(*a1 + 16 * a1[4]);
    *(_OWORD *)a3 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

void cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::downheap(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;

  v2 = a1[4];
  if (v2 > a2)
  {
    v4 = a2;
    do
    {
      v5 = (2 * a2) | 1;
      v6 = *a1;
      v7 = **(_DWORD **)(*a1 + 16 * a2);
      if (v5 < v2)
      {
        v8 = **(_DWORD **)(v6 + 16 * v5);
        v4 = v8 <= v7 ? a2 : (2 * a2) | 1;
        if (v8 > v7)
          v7 = **(_DWORD **)(v6 + 16 * v5);
      }
      v9 = 2 * a2 + 2;
      if (v9 < v2 && **(_DWORD **)(v6 + 16 * v9) > v7)
        v4 = 2 * a2 + 2;
      if (v4 == a2)
        break;
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v4);
      v2 = a1[4];
      a2 = v4;
    }
    while (v4 < v2);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<int,unsigned int>::upheap(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    do
    {
      v3 = a2 - 1;
      v4 = (unint64_t)(a2 - 1) >> 1;
      if (**(_DWORD **)(*a1 + 16 * a2) <= **(_DWORD **)(*a1 + 16 * v4))
        break;
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, (unint64_t)(a2 - 1) >> 1);
      a2 = v4;
    }
    while (v3 > 1);
  }
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<int,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AD38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::InitOptimizeInfo(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  uint64_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t i;
  const cv3d::cv::gess::mesh::PolyMesh *v22;
  uint64_t j;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  float v29;
  int v30;
  uint64_t k;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v8 = (uint64_t *)*((_QWORD *)this + 5);
  v9 = v8[14] - v8[13];
  LODWORD(v34) = *((_DWORD *)this + 48);
  v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8 + 10, (unsigned int *)&v34, a3);
  v13 = (v9 >> 2);
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    v14 = *(float32x2_t **)(v10 + 40);
    v15 = (uint64_t)(*(_QWORD *)(v10 + 48) - (_QWORD)v14) >> 3;
    v16 = *(float32x2_t *)((char *)a2 + 44);
    v17 = *(float32x2_t *)((char *)a2 + 52);
    v18 = (v9 >> 2);
    do
    {
      if (!v15)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v10, v11, v12);
      v16 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v16, *v14), (int8x8_t)*v14, (int8x8_t)v16);
      *(float32x2_t *)((char *)a2 + 44) = v16;
      v19 = *v14++;
      v17 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v17), (int8x8_t)v19, (int8x8_t)v17);
      *(float32x2_t *)((char *)a2 + 52) = v17;
      --v15;
      --v18;
    }
    while (v18);
  }
  v32 = a4;
  v33 = v10;
  *((_QWORD *)a2 + 21) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 18) = *((_QWORD *)a2 + 17);
  v20 = *((_QWORD *)a2 + 14);
  for (i = *((_QWORD *)a2 + 15);
        i != v20;
  *((_QWORD *)a2 + 15) = v20;
  std::vector<float>::resize((uint64_t)a2 + 160, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 5) + 160) - *(_QWORD *)(*((_QWORD *)this + 5) + 152)) >> 2);
  std::vector<float>::resize((uint64_t)a2 + 136, v13);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize((uint64_t)a2 + 112, v13);
  if (v13)
  {
    for (j = 0; j != v13; ++j)
    {
      v24 = operator new(0x28uLL);
      v24[1] = 0;
      v24[2] = 0;
      *v24 = &off_250D4AD70;
      v24[4] = -1;
      *((_QWORD *)&v34 + 1) = v24;
      v24[3] = 0xFFFFFFFF00000000;
      *(_QWORD *)&v34 = v24 + 3;
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](*((_QWORD *)a2 + 14) + 16 * j, &v34);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength(*((float32x4_t **)this + 5), v22);
  *((_DWORD *)a2 + 1) = v28;
  *((_QWORD *)a2 + 2) = a3;
  *((_QWORD *)a2 + 3) = v32;
  *((_DWORD *)a2 + 2) = 953267991;
  v29 = **((float **)this + 7) * 0.2;
  *((float *)a2 + 10) = v29;
  v30 = *((unsigned __int8 *)this + 64);
  *(_BYTE *)a2 = v30;
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch(*((_QWORD *)this + 5), v33, (_QWORD *)a2 + 20, v30, (unsigned int *)this + 17);
  if (v13)
  {
    for (k = 0; k != v13; ++k)
    {
      LODWORD(v34) = k;
      *(float *)(*((_QWORD *)a2 + 17) + 4 * k) = cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertexStretch((uint64_t)this, (uint64_t)&v34, (_QWORD *)a2 + 20);
    }
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, unsigned int *a5)
{
  unint64_t v7;
  unsigned int v8;
  unint64_t i;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v21;
  void *__p[2];
  char v23;
  int v24;
  unsigned int v25;

  v7 = ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  std::vector<float>::resize((uint64_t)a3, v7);
  v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  v25 = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 56), (uint64_t)&v25, (unsigned __int8 *)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v8 == -1)
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch();
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v21 = i;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v21, __p);
      v10 = *(unsigned int *)__p[0];
      v11 = *(_QWORD *)(a2 + 40);
      v12 = (*(_QWORD *)(a2 + 48) - v11) >> 3;
      if (v12 <= v10
        || (v13 = *((unsigned int *)__p[0] + 1), v12 <= v13)
        || (v14 = *((unsigned int *)__p[0] + 2), v12 <= v14)
        || (v25 = v8,
            v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 56), &v25),
            v16 = *(_QWORD *)(v15 + 40),
            i >= (*(_QWORD *)(v15 + 48) - v16) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch(a1, &v21, (float *)(v11 + 8 * v10), (float *)(v11 + 8 * v13), (float *)(v11 + 8 * v14), (float *)(v16 + 4 * i), (float *)&v24, a4, a5);
      *(_DWORD *)(*a3 + 4 * i) = v17;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23C5B802C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertexStretch(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  float v5;
  unsigned int v6;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  cv3d::cv::gess::isochart::GetAdjacentFaces(*(_QWORD *)(a1 + 40), a2, (void **)&v9);
  if (v10 == v9)
  {
    v5 = 0.0;
    if (!v9)
      return v5;
LABEL_7:
    v10 = v9;
    operator delete(v9);
    return v5;
  }
  v4 = 0;
  v5 = 0.0;
  v6 = 1;
  while (fabsf(v5 + -3.4028e38) >= 0.00000001)
  {
    v5 = v5 + *(float *)(*a3 + 4 * v9[v4]);
    v4 = v6;
    if (v10 - v9 <= (unint64_t)v6++)
      goto LABEL_7;
  }
  v5 = 3.4028e38;
  if (v9)
    goto LABEL_7;
  return v5;
}

void sub_23C5B8124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::OptimizeInfiniteStretch(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2, BOOL *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t result;
  unint64_t v24;
  float *v25;
  uint64_t v26;
  float v27;
  BOOL v28;
  __int128 v30;

  v5 = (char *)a2 + 72;
  v6 = *(_QWORD *)(*((_QWORD *)this + 5) + 112) - *(_QWORD *)(*((_QWORD *)this + 5) + 104);
  v7 = (v6 >> 2);
  v8 = v6 & 0x3FFFFFFFCLL;
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_DWORD **)(*((_QWORD *)a2 + 14) + v9);
      *v11 = *(_DWORD *)(*((_QWORD *)a2 + 17) + 4 * v10);
      v11[1] = v10++;
      v9 += 16;
    }
    while (v7 != v10);
  }
  v12 = 0;
  v13 = *((_QWORD *)a2 + 8);
  *((_BYTE *)a2 + 1) = 0;
  while (1)
  {
    if (v8)
    {
      v14 = 0;
      do
      {
        if (*(float *)(*((_QWORD *)a2 + 17) + 4 * v14) >= 3.4028e38)
        {
          v15 = *((_QWORD *)a2 + 14);
          v16 = *(_QWORD *)(v15 + 16 * v14);
          if (*(_QWORD *)(v16 + 8) == -1)
          {
            v17 = *(_QWORD *)(v15 + 16 * v14 + 8);
            *(_QWORD *)&v30 = v16;
            *((_QWORD *)&v30 + 1) = v17;
            if (v17)
            {
              v18 = (unint64_t *)(v17 + 8);
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }
            cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::insert((uint64_t)v5, &v30);
            v20 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
            if (*((_QWORD *)&v30 + 1))
            {
              v21 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
          }
        }
        ++v14;
      }
      while (v14 != v7);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVerticesInHeap(this, a2);
    result = *((_QWORD *)this + 4);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
      if ((result & 1) != 0)
        return result;
    }
    v24 = 0;
    if (v8)
    {
      v25 = (float *)*((_QWORD *)a2 + 17);
      v26 = v7;
      do
      {
        v27 = *v25++;
        if (v27 >= 3.4028e38)
          ++v24;
        --v26;
      }
      while (v26);
    }
    if (*((_QWORD *)a2 + 8) <= v24)
    {
      v24 = *((_QWORD *)a2 + 8);
LABEL_34:
      *a3 = v24 < v13;
      return result;
    }
    *((_QWORD *)a2 + 8) = v24;
    if (v24)
      v28 = (unint64_t)++v12 >= *((_QWORD *)a2 + 2);
    else
      v28 = 1;
    if (v28)
      goto LABEL_34;
  }
}

void sub_23C5B8320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::insert(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4)
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)a1, a2);
  else
    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a1 + 16 * v4), (uint64_t *)a2);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)a2 + 8) = v5;
  *(_QWORD *)(a1 + 32) = v5 + 1;
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap((uint64_t *)a1, v5);
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVerticesInHeap(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2)
{
  uint64_t *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[3];
  char v23;
  unsigned int v24;
  unsigned __int32 *v25;
  std::__shared_weak_count *v26;

  if (*((_QWORD *)a2 + 13))
  {
    v4 = (uint64_t *)((char *)a2 + 72);
    do
    {
      v5 = *((_QWORD *)this + 4);
      if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) != 0)
        break;
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(v4, 0, &v25);
      if (!v25)
        __assert_rtn("OptimizeVerticesInHeap", "MeshOptimizeStretch.cpp", 435, "top != nullptr");
      v6.n128_u32[0] = *v25;
      if (*(float *)v25 >= *((float *)a2 + 10))
      {
        v24 = v25[1];
        if (*((_BYTE *)a2 + 2) || !cv3d::cv::gess::mesh::PolyMesh::is_boundary(*((_QWORD *)this + 5), (uint64_t)&v24))
        {
          v23 = 0;
          cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexParamStretch((uint64_t)this, (int *)&v24, a2, &v23);
          if (v23)
          {
            v7 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 16 * v24);
            if (*(_QWORD *)(v7 + 8) != -1)
              __assert_rtn("OptimizeVerticesInHeap", "MeshOptimizeStretch.cpp", 446, "heap_items[vh.Index()]->GetPos() == NOT_IN_HEAP");
            *(_DWORD *)v7 = *(_DWORD *)(*((_QWORD *)a2 + 17) + 4 * v24);
            cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v22, (_QWORD *)(*((_QWORD *)this + 5) + 104), &v24);
            for (i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v22);
                  i != -1;
                  i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v22))
            {
              v9 = *((_QWORD *)a2 + 14);
              v10 = *(_QWORD *)(v9 + 16 * i);
              if (*(_QWORD *)(v10 + 8) == -1)
              {
                *(_DWORD *)v10 = *(_DWORD *)(*((_QWORD *)a2 + 17) + 4 * i);
              }
              else
              {
                v20 = *(_QWORD *)(v9 + 16 * i);
                v11 = *(std::__shared_weak_count **)(v9 + 16 * i + 8);
                v21 = v11;
                if (v11)
                {
                  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
                  do
                    v13 = __ldxr(p_shared_owners);
                  while (__stxr(v13 + 1, p_shared_owners));
                }
                cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update(v4, &v20, *(float *)(*((_QWORD *)a2 + 17) + 4 * i));
                v14 = v21;
                if (v21)
                {
                  v15 = (unint64_t *)&v21->__shared_owners_;
                  do
                    v16 = __ldaxr(v15);
                  while (__stlxr(v16 - 1, v15));
                  if (!v16)
                  {
                    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                    std::__shared_weak_count::__release_weak(v14);
                  }
                }
              }
            }
          }
        }
      }
      v17 = v26;
      if (v26)
      {
        v18 = (unint64_t *)&v26->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v6);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    while (*((_QWORD *)a2 + 13));
  }
}

void sub_23C5B85F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t result;
  unint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v32;
  __int128 v33;

  v4 = (char *)a2 + 72;
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = v5[14] - v5[13];
  v7 = v5[20] - v5[19];
  v8 = (v6 >> 2);
  v9 = v6 & 0x3FFFFFFFCLL;
  if ((v6 & 0x3FFFFFFFCLL) != 0)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_DWORD **)(*((_QWORD *)a2 + 14) + v10);
      *v12 = *(_DWORD *)(*((_QWORD *)a2 + 17) + 4 * v11);
      v12[1] = v11++;
      v10 += 16;
    }
    while (v8 != v11);
  }
  v13 = 0;
  v14 = v7 & 0x3FFFFFFFCLL;
  v32 = (v7 >> 2);
  do
  {
    if (v9)
    {
      v15 = 0;
      do
      {
        v16 = *((_QWORD *)a2 + 14);
        v17 = *(_QWORD *)(v16 + 16 * v15);
        if (*(_QWORD *)(v17 + 8) != -1)
          cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch();
        v18 = *(_QWORD *)(v16 + 16 * v15 + 8);
        *(_QWORD *)&v33 = v17;
        *((_QWORD *)&v33 + 1) = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::insert((uint64_t)v4, &v33);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (*((_QWORD *)&v33 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        ++v15;
      }
      while (v15 != v8);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVerticesInHeap(this, a2);
    result = *((_QWORD *)this + 4);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
      if ((result & 1) != 0)
        break;
    }
    v25 = 0;
    if (v14)
    {
      v26 = (float *)*((_QWORD *)a2 + 20);
      v27 = -3.4028e38;
      v28 = v32;
      do
      {
        v29 = *v26++;
        v30 = v29;
        if (v27 < v29)
          v27 = v30;
        if (v30 >= 3.4028e38)
          ++v25;
        --v28;
      }
      while (v28);
    }
    else
    {
      v27 = -3.4028e38;
    }
    if ((float)(*((float *)a2 + 15) - v27) < 0.00004 && *((_QWORD *)a2 + 8) <= v25)
      break;
    *((float *)a2 + 15) = v27;
    *((_QWORD *)a2 + 8) = v25;
    ++v13;
  }
  while (v13 < *((_QWORD *)a2 + 2));
  return result;
}

void sub_23C5B8824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(cv3d::cv::gess::isochart::IsoChartMesh *this, float **a2, float *a3, float *a4, unint64_t *a5, float *a6, int a7)
{
  __n128 v14;
  float v15;
  float *v16;
  float *v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  unint64_t v24;
  float v25;
  _BOOL8 result;
  uint64_t v27;
  float v28;
  uint64_t v29;
  BOOL v30;

  cv3d::cv::gess::isochart::IsoChartMesh::InitOptimizeInfo(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2, 10, 10);
  v14.n128_u32[0] = 1036831949;
  if (a7)
    v15 = 0.05;
  else
    v15 = 0.1;
  v16 = a2[20];
  v17 = a2[21];
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v16++;
      v14.n128_f32[0] = v19;
      if (v19 >= 3.4028e38)
        ++v18;
    }
    while (v16 != v17);
  }
  *a5 = v18;
  v20 = *((_QWORD *)this + 4);
  if (v20)
  {
    if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v20 + 48))(v20, v14) & 1) != 0)
      return 0;
    v18 = *a5;
  }
  if (v18 > 0x1F3
    || (float)(v15
             * (float)(unint64_t)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 5) + 160)
                                                 - *(_QWORD *)(*((_QWORD *)this + 5) + 152)) >> 2)) <= (float)v18)
  {
    result = 0;
    *a3 = 3.4028e38;
    return result;
  }
  *((_BYTE *)a2 + 1) = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::OptimizeInfiniteStretch(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2, &v30);
  v21 = *((_QWORD *)this + 4);
  if (v21 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21) & 1) != 0)
    return 0;
  if (!a2[8])
  {
    cv3d::cv::gess::isochart::IsoChartMesh::InitOptimizeInfo(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2, 10, 10);
    *((_BYTE *)a2 + 1) = 1;
    cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch(this, (cv3d::cv::gess::isochart::ChartOptimizeInfo *)a2);
    v27 = *((_QWORD *)this + 4);
    if (v27)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 48))(v27) & 1) != 0)
        return 0;
    }
  }
  v29 = 0;
  cv3d::cv::gess::isochart::CalculateMaxAvgStretch((uint64_t)(a2 + 20), a3, a4, &v29);
  v22 = a2[20];
  v23 = a2[21];
  if (v22 == v23)
  {
    *a5 = 0;
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = *v22++;
      if (v25 >= 3.4028e38)
        ++v24;
    }
    while (v22 != v23);
    *a5 = v24;
    if (v24)
      return 0;
  }
  v28 = cv3d::cv::gess::isochart::CalculateInfiniteStretchArea(*((_QWORD *)this + 5), a2 + 20);
  *a6 = v28;
  if (v28 > (float)(**((float **)this + 6) * 1.0e-16))
    return 0;
  return *a3 <= **((float **)this + 7);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  _BOOL8 v1;
  float v3;
  uint64_t v4;
  float *v5;
  int64x2_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  char v12;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;

  LOWORD(v5) = 256;
  BYTE2(v5) = 1;
  v6 = vdupq_n_s64(0xAuLL);
  v7 = 20;
  v8 = xmmword_23C60C620;
  v9 = 0x7F7FFFFFFF7FFFFFLL;
  v10 = -1;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = 0;
  v17 = 0;
  v1 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(this, &v5, (float *)&v4 + 1, (float *)&v4, &v17, &v3, 0);
  if (*((_QWORD *)&v15 + 1))
  {
    *(_QWORD *)&v16 = *((_QWORD *)&v15 + 1);
    operator delete(*((void **)&v15 + 1));
  }
  if ((_QWORD)v14)
  {
    *((_QWORD *)&v14 + 1) = v14;
    operator delete((void *)v14);
  }
  v17 = (unint64_t)v13 + 8;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v11);
  return v1;
}

void sub_23C5B8B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalFaceGeoL2SquaredStretch(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *a7 = (float)((float)((float)(*a4 - *a3) * (float)(a5[1] - a3[1]))
              - (float)((float)(a4[1] - a3[1]) * (float)(*a5 - *a3)))
      * 0.5;
  v14 = a1 + 104;
  v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, v15);
  v17 = cv3d::cv::gess::mesh::Topology::h(v14, v16);
  v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  v19 = cv3d::cv::gess::mesh::Topology::h(v14, v18);
  v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)(v19 + 8));
  v21 = cv3d::cv::gess::mesh::Topology::h(v14, v20);
  v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  v23 = cv3d::cv::gess::mesh::Topology::h(v14, v22);
  v26 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v17 + 12));
  v25 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v21 + 12));
  v24 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v23 + 12));
  cv3d::cv::gess::isochart::CalculateFaceL2Stretch((uint64_t)&v26, (uint64_t)&v25, (uint64_t)&v24, a3, a4, a5, a6, a7);
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSigL2SquaredStretch(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x24BDAC8D0];
  *a7 = (float)((float)((float)(*a4 - *a3) * (float)(a5[1] - a3[1]))
              - (float)((float)(a4[1] - a3[1]) * (float)(*a5 - *a3)))
      * 0.5;
  v14 = a1 + 104;
  v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, v15);
  v17 = cv3d::cv::gess::mesh::Topology::h(v14, v16);
  v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  v19 = cv3d::cv::gess::mesh::Topology::h(v14, v18);
  v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)(v19 + 8));
  v21 = cv3d::cv::gess::mesh::Topology::h(v14, v20);
  v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v14, a2);
  v23 = cv3d::cv::gess::mesh::Topology::h(v14, v22);
  v32 = 0;
  v33 = 0;
  v34[0] = 0;
  v30 = 0u;
  v31 = 0u;
  v29 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v17 + 12));
  v28 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v21 + 12));
  v27 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v23 + 12));
  cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(&v29, &v28, &v27, &v32, (uint64_t)&v33, (float *)v34, &v31, &v30);
  return cv3d::cv::gess::isochart::CalculateFaceSigL2Stretch(a3, a4, a5, a6, a7, (uint64_t)&v32, a8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7, int a8, unsigned int *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;

  if (a8)
  {
    if (*a9 == -1)
      cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch();
    v21 = *a9;
    v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v21);
    v19 = *a2;
    v20 = *(_QWORD *)(v16 + 40);
    if (v19 >= (*(_QWORD *)(v16 + 48) - v20) >> 4)
      cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v16, v17, v18);
    cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSigL2SquaredStretch(a1, a2, a3, a4, a5, a6, a7, (float *)(v20 + 16 * v19));
  }
  else
  {
    cv3d::cv::gess::isochart::IsoChartMesh::CalFaceGeoL2SquaredStretch(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t cv3d::cv::gess::isochart::GetAdjacentFaces(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  unsigned int i;
  _BYTE v24[16];

  if (*a3 != a3[1])
    cv3d::cv::gess::isochart::GetAdjacentFaces();
  v5 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v24, a1 + 104, a2);
  result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v24);
  for (i = result; (_DWORD)result != -1; i = result)
  {
    v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), result);
    if ((v8 & *v7) == 0)
    {
      v9 = cv3d::cv::gess::mesh::Topology::h(v5, &i);
      v10 = v9;
      v12 = a3[1];
      v11 = (unint64_t)a3[2];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - (_BYTE *)*a3) >> 2;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*a3;
        v16 = v15 >> 1;
        if (v15 >> 1 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v17);
        else
          v18 = 0;
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = *(_DWORD *)(v10 + 16);
        v13 = v19 + 4;
        v21 = (char *)*a3;
        v20 = (char *)a3[1];
        if (v20 != *a3)
        {
          do
          {
            v22 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v19 - 1) = v22;
            v19 -= 4;
          }
          while (v20 != v21);
          v20 = (char *)*a3;
        }
        *a3 = v19;
        a3[1] = v13;
        a3[2] = &v18[4 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = *(_DWORD *)(v9 + 16);
        v13 = v12 + 1;
      }
      a3[1] = v13;
    }
    result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v24);
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexParamStretch(uint64_t a1, int *a2, cv3d::cv::gess::isochart::ChartOptimizeInfo *a3, _BYTE *a4)
{
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  float v50;
  float v51;
  void *v52[2];
  void *v53[2];
  __int128 v54;
  void *v55[2];
  void *v56[2];
  __int128 v57;
  void *v58[2];
  void *__p[2];
  __int128 v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  _BYTE *v65;
  _DWORD *v66;
  _BYTE *v67;
  uint64_t v68;
  unsigned int v69[3];

  *a4 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  cv3d::cv::gess::isochart::GetAdjacentHEdges(*(_QWORD *)(a1 + 40), (uint64_t)a2, (void **)&v66);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v64, (v67 - (_BYTE *)v66) >> 2);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v8 = v66;
  if (v67 == (_BYTE *)v66)
  {
    v29 = 0;
    v28 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 40) + 104;
      v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v11, &v8[v9]);
      v13 = cv3d::cv::gess::mesh::Topology::h(v11, v12);
      *(_DWORD *)&v64[4 * v9] = *(_DWORD *)(v13 + 12);
      v14 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v66[v9]);
      if ((*v14 & v15) == 0)
      {
        v16 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v66[v9]);
        v17 = v16;
        v18 = v62;
        if (v62 >= v63)
        {
          v20 = (v62 - (_BYTE *)v61) >> 2;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v21 = (v63 - (_BYTE *)v61) >> 1;
          if (v21 <= v20 + 1)
            v21 = v20 + 1;
          if ((unint64_t)(v63 - (_BYTE *)v61) >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v63, v22);
          else
            v23 = 0;
          v24 = &v23[4 * v20];
          *(_DWORD *)v24 = *(_DWORD *)(v17 + 16);
          v19 = v24 + 4;
          v26 = (char *)v61;
          v25 = v62;
          if (v62 != v61)
          {
            do
            {
              v27 = *((_DWORD *)v25 - 1);
              v25 -= 4;
              *((_DWORD *)v24 - 1) = v27;
              v24 -= 4;
            }
            while (v25 != v26);
            v25 = (char *)v61;
          }
          v61 = v24;
          v62 = v19;
          v63 = &v23[4 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v62 = *(_DWORD *)(v16 + 16);
          v19 = v18 + 4;
        }
        v62 = v19;
      }
      v9 = ++v10;
      v8 = v66;
    }
    while (v10 < (unint64_t)((v67 - (_BYTE *)v66) >> 2));
    v28 = (char *)v61;
    v29 = (uint64_t)v62;
  }
  v47 = 0;
  v46 = 0;
  v48 = 0;
  *(_OWORD *)v52 = 0u;
  *(_OWORD *)v53 = 0u;
  v54 = 0u;
  *(_OWORD *)v55 = 0u;
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)v58 = 0u;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  v45 = *a2;
  v57 = 0u;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v56[1], v28, v29, (v29 - (uint64_t)v28) >> 2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)v58, v64, (uint64_t)v65, (v65 - v64) >> 2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&__p[1], (char *)v66, (uint64_t)v67, (v67 - (_BYTE *)v66) >> 2);
  std::vector<float>::resize((uint64_t)v52, (v62 - (_BYTE *)v61) >> 2);
  std::vector<float>::resize((uint64_t)&v53[1], (v62 - (_BYTE *)v61) >> 2);
  std::vector<float>::resize((uint64_t)v55, (v62 - (_BYTE *)v61) >> 2);
  v30 = *(_QWORD *)(a1 + 40);
  v69[0] = *(_DWORD *)(a1 + 192);
  v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v30 + 80), v69, v31);
  v33 = *a2;
  v34 = *(_QWORD *)(v32 + 40);
  if (v33 >= (*(_QWORD *)(v32 + 48) - v34) >> 3)
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  v46 = *(_QWORD *)(v34 + 8 * v33);
  v49 = *(_DWORD *)(*((_QWORD *)a3 + 17) + 4 * v33);
  v35 = (unsigned int *)v61;
  if (v62 != v61)
  {
    v36 = (v62 - (_BYTE *)v61) >> 2;
    v37 = *((_QWORD *)a3 + 20);
    v38 = v52[0];
    if (v36 <= 1)
      v36 = 1;
    do
    {
      v39 = *v35++;
      *v38++ = *(_DWORD *)(v37 + 4 * v39);
      --v36;
    }
    while (v36);
  }
  if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(a1 + 40), (uint64_t)a2))
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt(a1, (uint64_t)a3, &v45);
  else
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt((cv3d::cv::gess::isochart::IsoChartMesh *)a1, (cv3d::cv::gess::isochart::VertexOptimizeInfo *)&v45, v40);
  if (fabsf(v51) <= 1.0e-16)
  {
    *a4 = 0;
  }
  else
  {
    *a4 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexStretchAroundCenter((cv3d::cv::gess::isochart::IsoChartMesh *)a1, a3, (cv3d::cv::gess::isochart::VertexOptimizeInfo *)&v45);
    v41 = v50;
    if (v50 >= 3.4028e38)
    {
      v42 = 9;
      do
      {
        v51 = v51 * 1.1;
        *a4 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexStretchAroundCenter((cv3d::cv::gess::isochart::IsoChartMesh *)a1, a3, (cv3d::cv::gess::isochart::VertexOptimizeInfo *)&v45);
      }
      while ((v50 < v41 || v50 >= 3.4028e38) && v42-- != 0);
    }
  }
  if (__p[1])
  {
    *(void **)&v60 = __p[1];
    operator delete(__p[1]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v56[1])
  {
    *(void **)&v57 = v56[1];
    operator delete(v56[1]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (v53[1])
  {
    *(void **)&v54 = v53[1];
    operator delete(v53[1]);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v61)
  {
    v62 = (char *)v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
}

void sub_23C5B95C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(_QWORD *)(v33 - 128) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::GetAdjacentHEdges(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t result;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  _BYTE v18[16];

  if (*a3 != a3[1])
    cv3d::cv::gess::isochart::GetAdjacentHEdges();
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v18, a1 + 104, a2);
  result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v18);
  if ((_DWORD)result != -1)
  {
    v5 = result;
    do
    {
      v7 = a3[1];
      v6 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v6)
      {
        v9 = ((char *)v7 - (_BYTE *)*a3) >> 2;
        if ((unint64_t)(v9 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v10 = v6 - (_QWORD)*a3;
        v11 = v10 >> 1;
        if (v10 >> 1 <= (unint64_t)(v9 + 1))
          v11 = v9 + 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v12);
        else
          v13 = 0;
        v14 = &v13[4 * v9];
        *(_DWORD *)v14 = v5;
        v8 = v14 + 4;
        v16 = (char *)*a3;
        v15 = (char *)a3[1];
        if (v15 != *a3)
        {
          do
          {
            v17 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v14 - 1) = v17;
            v14 -= 4;
          }
          while (v15 != v16);
          v15 = (char *)*a3;
        }
        *a3 = v14;
        a3[1] = v8;
        a3[2] = &v13[4 * v12];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      a3[1] = v8;
      result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v18);
      v5 = result;
    }
    while ((_DWORD)result != -1);
  }
  return result;
}

unint64_t cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  float *v17;
  unint64_t v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  unsigned int *v23;
  unsigned int *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *i;
  unint64_t result;
  unint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *j;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  BOOL v66;
  float v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;

  v71 = *a3;
  if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(a1 + 40), (uint64_t)&v71))
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt();
  v7 = *(_QWORD *)(a1 + 40);
  v72 = *(_DWORD *)(a1 + 192);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v7 + 80), &v72, v6);
  v11 = v71;
  v12 = *(_QWORD *)(v8 + 40);
  v13 = (*(_QWORD *)(v8 + 48) - v12) >> 3;
  if (v13 <= v71)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v8, v9, v10);
  v14 = v8;
  v15 = (unsigned int *)*((_QWORD *)a3 + 17);
  v16 = (_DWORD *)*((_QWORD *)a3 + 18);
  v17 = (float *)(v12 + 8 * v71);
  a3[5] = *(_DWORD *)v17;
  a3[6] = *((_DWORD *)v17 + 1);
  a3[3] = *(_DWORD *)v17;
  a3[4] = *((_DWORD *)v17 + 1);
  a3[8] = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v11);
  a3[9] = 2139095039;
  if (v16 != v15)
  {
    v18 = v16 - v15;
    if (v18 <= 1)
      v18 = 1;
    v19 = 3.4028e38;
    do
    {
      v21 = *v15++;
      v20 = v21;
      if (v13 <= v21)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v8, v9, v10);
      v22 = (float)((float)(v17[1] - *(float *)(v12 + 8 * v20 + 4)) * (float)(v17[1] - *(float *)(v12 + 8 * v20 + 4)))
          + (float)((float)(*v17 - *(float *)(v12 + 8 * v20)) * (float)(*v17 - *(float *)(v12 + 8 * v20)));
      if (v22 < v19)
      {
        *((float *)a3 + 9) = v22;
        v19 = v22;
      }
      --v18;
    }
    while (v18);
  }
  v72 = -1;
  v23 = (unsigned int *)*((_QWORD *)a3 + 20);
  v24 = (unsigned int *)*((_QWORD *)a3 + 21);
  while (v23 != v24)
  {
    v25 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), *v23);
    if ((v26 & *v25) != 0)
    {
      v72 = *v23;
      break;
    }
    ++v23;
  }
  v27 = *(_QWORD *)(a1 + 40) + 104;
  for (i = &v72; ; i = &v70)
  {
    result = cv3d::cv::gess::mesh::Topology::h(v27, i);
    v70 = *(_DWORD *)(result + 8);
    if (v70 == v72)
      break;
    v30 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v70) + 12);
    v31 = *(_QWORD *)(a1 + 40) + 104;
    v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, &v70);
    v33 = cv3d::cv::gess::mesh::Topology::h(v31, v32);
    v36 = *(unsigned int *)(v33 + 12);
    if ((_DWORD)v36 != v71)
    {
      v37 = *(_QWORD *)(v14 + 40);
      v38 = (*(_QWORD *)(v14 + 48) - v37) >> 3;
      if (v38 <= v71)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, v34, v35);
      if (v38 <= v30)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, v34, v35);
      if (v38 <= v36)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, v34, v35);
      if (*((float *)a3 + 9) > v39)
        *((float *)a3 + 9) = v39;
    }
    v27 = *(_QWORD *)(a1 + 40) + 104;
  }
  v40 = (unsigned int *)*((_QWORD *)a3 + 20);
  v41 = (unsigned int *)*((_QWORD *)a3 + 21);
  while (v40 != v41)
  {
    v42 = *(_QWORD *)(a1 + 40);
    v43 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v42, *(_DWORD *)(v42 + 180), *v40);
    if ((v44 & *v43) != 0
      || (v45 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v42 + 104, v40),
          result = cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v42, *(_DWORD *)(v42 + 180), *v45),
          (v46 & *(_QWORD *)result) != 0))
    {
      v47 = *(_QWORD *)(a1 + 40) + 104;
      v48 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v47, v40);
      v49 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v47, v48) + 12);
      v50 = v71;
      v51 = *(_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), *v40);
      v52 = (int *)v40;
      if ((v53 & v51) == 0)
        v52 = (int *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, v40);
      v69 = *v52;
      v54 = *(_QWORD *)(a1 + 40) + 104;
      for (j = (unsigned int *)&v69; ; j = &v68)
      {
        result = cv3d::cv::gess::mesh::Topology::h(v54, j);
        v68 = *(_DWORD *)(result + 8);
        if (v68 == v69)
          break;
        v56 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v68);
        v59 = *(unsigned int *)(v56 + 12);
        if ((_DWORD)v59 != (_DWORD)v50 && (_DWORD)v59 != (_DWORD)v49)
        {
          v61 = *(_QWORD *)(v14 + 40);
          v62 = (*(_QWORD *)(v14 + 48) - v61) >> 3;
          if (v62 <= v59)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v56, v57, v58);
          if (v62 <= v50)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v56, v57, v58);
          if (v62 <= v49)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v56, v57, v58);
          if (*((float *)a3 + 9) > v63)
            *((float *)a3 + 9) = v63;
        }
        v54 = *(_QWORD *)(a1 + 40) + 104;
      }
    }
    ++v40;
  }
  v64 = *((float *)a3 + 9);
  v65 = sqrtf(v64) * 0.8;
  v66 = v64 < 0.0;
  v67 = 0.0;
  if (!v66)
    v67 = v65;
  *((float *)a3 + 9) = v67;
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::VertexOptimizeInfo *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float32x2_t v12;
  float32x2_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float32x2_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  float32x2_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float v39;
  BOOL v40;
  float v41;
  float v42;
  float32x2_t v43;
  int v44;

  v44 = *(_DWORD *)a2;
  v5 = *((_QWORD *)this + 5);
  v43.i32[0] = *((_DWORD *)this + 48);
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v5 + 80), (unsigned int *)&v43, a3);
  v8 = (unsigned int *)*((_QWORD *)a2 + 17);
  v9 = *((_QWORD *)a2 + 18) - (_QWORD)v8;
  if (!v9)
    cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt();
  v10 = v6;
  v11 = v9 >> 2;
  v12 = 0;
  *(_QWORD *)((char *)a2 + 12) = 0;
  v13 = (float32x2_t *)((char *)a2 + 12);
  v14 = *(_QWORD *)(v6 + 40);
  v15 = (*(_QWORD *)(v6 + 48) - v14) >> 3;
  if (v11 <= 1)
    v16 = 1;
  else
    v16 = v11;
  v17 = v16;
  do
  {
    v19 = *v8++;
    v18 = v19;
    if (v15 <= v19)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v6, v7, (uint64_t)v13);
    v20 = *(float32x2_t *)(v14 + 8 * v18);
    v12 = vadd_f32(v12, v20);
    *v13 = v12;
    --v17;
  }
  while (v17);
  v20.f32[0] = (float)v11;
  *(float32x2_t *)&v21 = vdiv_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 0));
  *((_QWORD *)&v21 + 1) = v21;
  *(_OWORD *)((char *)a2 + 12) = v21;
  cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v44, (uint64_t)v13, (float *)a2 + 8, (float **)a2 + 8, (uint64_t *)a2 + 14);
  v25 = 0;
  v43 = 0;
  v26 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
  v27 = (float32x2_t)vdup_n_s32(0x3E4CCCCCu);
  do
  {
    v28 = *(unsigned int *)(*((_QWORD *)a2 + 17) + 4 * v25);
    v29 = *(_QWORD *)(v10 + 40);
    if (v28 >= (*(_QWORD *)(v10 + 48) - v29) >> 3)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v22, v23, v24);
    v43 = vadd_f32(vmul_f32(*(float32x2_t *)(v29 + 8 * v28), v26), vmul_f32(*(float32x2_t *)((char *)a2 + 20), v27));
    v42 = 0.0;
    cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v44, (uint64_t)&v43, &v42, (float **)a2 + 11, (uint64_t *)a2 + 14);
    if (v42 < *((float *)a2 + 8))
    {
      *((float *)a2 + 8) = v42;
      v22 = std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)a2 + 64, *((char **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
      *(float32x2_t *)((char *)a2 + 12) = v43;
    }
    ++v25;
  }
  while (v16 != v25);
  *((_DWORD *)a2 + 9) = 2139095039;
  v30 = (unsigned int *)*((_QWORD *)a2 + 17);
  v31 = *(_QWORD *)(v10 + 40);
  v32 = (*(_QWORD *)(v10 + 48) - v31) >> 3;
  v33 = *((float *)a2 + 5);
  v34 = *((float *)a2 + 6);
  v35 = 3.4028e38;
  do
  {
    v37 = *v30++;
    v36 = v37;
    if (v32 <= v37)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v22, v23, v24);
    v38 = (float)((float)(*(float *)(v31 + 8 * v36 + 4) - v34) * (float)(*(float *)(v31 + 8 * v36 + 4) - v34))
        + (float)((float)(*(float *)(v31 + 8 * v36) - v33) * (float)(*(float *)(v31 + 8 * v36) - v33));
    if (v38 < v35)
    {
      *((float *)a2 + 9) = v38;
      v35 = v38;
    }
    --v16;
  }
  while (v16);
  v39 = sqrtf(v35) * 0.8;
  v40 = v35 < 0.0;
  v41 = 0.0;
  if (!v40)
    v41 = v39;
  *((float *)a2 + 9) = v41;
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::OptimizeVertexStretchAroundCenter(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::isochart::ChartOptimizeInfo *a2, cv3d::cv::gess::isochart::VertexOptimizeInfo *a3)
{
  float v6;
  _QWORD *v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v13;
  uint64_t i;
  uint64_t v15;
  float v16;
  unint64_t v17;
  double v18;
  float **v19;
  unsigned int HEdge;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float *v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v55;
  float v56;
  float v57;
  float v58;
  __float2 v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  double v68;
  float v69;
  float v70;
  float v71;
  double v72;
  BOOL v73;
  float v74;
  float v76;
  float v77;
  float v78;
  float v79;
  float *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  unsigned int v85;
  unsigned int v86;
  void *__p[2];
  char v88;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v89;
  float v90;
  uint64_t v91;
  float v92[2];
  float v93;
  unsigned int v94;
  uint64_t v95;

  v93 = *(float *)a3;
  v6 = *((float *)a3 + 7);
  v8 = *((float *)a3 + 3);
  v9 = *((float *)a3 + 4);
  v7 = (_QWORD *)((char *)a3 + 12);
  v92[0] = v8;
  v92[1] = v9;
  v10 = (float *)((char *)a3 + 32);
  v11 = *((float *)a3 + 8);
  v12 = *((float *)a2 + 2) * (float)((float)(*((float *)a2 + 1) * *((float *)a2 + 1)) * *((float *)a2 + 2));
  v91 = 0;
  v90 = 0.0;
  v13 = 2;
  v89.__x_[0] = 2;
  for (i = 1; i != 624; ++i)
  {
    v13 = i + 1812433253 * (v13 ^ (v13 >> 30));
    v89.__x_[i] = v13;
  }
  v89.__i_ = 0;
  v15 = *((_QWORD *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v95 = 0;
  v94 = 0;
  cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v15 + 56), (uint64_t)&v94, (unsigned __int8 *)__p);
  v78 = v6;
  v79 = v11;
  if (v88 < 0)
    operator delete(__p[0]);
  v76 = v9;
  v77 = v8;
  v16 = 0.0;
  if (*((float *)a3 + 7) >= 3.4028e38)
  if (*((_QWORD *)a2 + 3))
  {
    v17 = 0;
    v18 = v12;
    v19 = (float **)((char *)a3 + 64);
    v84 = (float *)((char *)a3 + 4);
    v80 = v10;
    v81 = v7;
    do
    {
      if (*((float *)a3 + 7) < 3.4028e38)
        goto LABEL_23;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(__p, *((_QWORD *)this + 5) + 104, a3);
      v86 = -1;
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
      v85 = HEdge;
      if (HEdge == -1)
        goto LABEL_23;
      v21 = 0;
      do
      {
        v22 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*((_QWORD *)this + 5), *(_DWORD *)(*((_QWORD *)this + 5) + 180), HEdge);
        if ((v23 & *v22) == 0
          && *(float *)(*((_QWORD *)a2 + 20)
                      + 4
                      * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 5) + 104, &v85) + 16)) >= 3.4028e38)
        {
          ++v21;
          v86 = v85;
        }
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
        v85 = HEdge;
      }
      while (HEdge != -1);
      if (v21 != 1)
      {
LABEL_23:
        v55 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v89);
        v56 = (float)((float)v55 + (float)v55) * 3.14159265 * 2.32830644e-10;
      }
      else
      {
        v25 = *((_QWORD *)this + 5);
        v94 = *((_DWORD *)this + 48);
        v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v25 + 80), &v94, v24);
        v27 = cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 5) + 104, &v86);
        if (*(unsigned int *)(v27 + 12) >= (unint64_t)((uint64_t)(*(_QWORD *)(v26 + 48) - *(_QWORD *)(v26 + 40)) >> 3))
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v27, v28, v29);
        v82 = *(_QWORD *)(v26 + 40);
        v83 = *(unsigned int *)(v27 + 12);
        v30 = *((_QWORD *)this + 5);
        v94 = *((_DWORD *)this + 48);
        v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v30 + 80), &v94, v29);
        v32 = *((_QWORD *)this + 5) + 104;
        v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v32, &v86);
        v34 = cv3d::cv::gess::mesh::Topology::h(v32, v33);
        v37 = *(unsigned int *)(v34 + 12);
        v38 = *(_QWORD *)(v31 + 40);
        if (v37 >= (*(_QWORD *)(v31 + 48) - v38) >> 3)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v34, v35, v36);
        v39 = *((_QWORD *)this + 5);
        v94 = *((_DWORD *)this + 48);
        v40 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v39 + 80), &v94, v36);
        v41 = *((_QWORD *)this + 5) + 104;
        v42 = cv3d::cv::gess::mesh::Topology::h(v41, &v86);
        v43 = cv3d::cv::gess::mesh::Topology::h(v41, (unsigned int *)(v42 + 4));
        v46 = *(unsigned int *)(v43 + 12);
        v47 = *(_QWORD *)(v40 + 40);
        if (v46 >= (*(_QWORD *)(v40 + 48) - v47) >> 3)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v43, v44, v45);
        v48 = (float *)(v82 + 8 * v83);
        v49 = (float *)(v47 + 8 * v46);
        v50 = v48[1];
        v51 = *v49 - *v48;
        v52 = v49[1] - v50;
        v53 = atan2f(*(float *)(v38 + 8 * v37 + 4) - v50, *(float *)(v38 + 8 * v37) - *v48);
        v54 = atan2f(v52, v51);
        if (vabds_f32(v54, v53) <= 3.14159265)
        {
          v10 = v80;
          v7 = v81;
          v19 = (float **)((char *)a3 + 64);
        }
        else
        {
          v10 = v80;
          v7 = v81;
          v19 = (float **)((char *)a3 + 64);
          if (v54 >= v53)
            v53 = v53 + 6.28318531;
          else
            v54 = v54 + 6.28318531;
        }
        v56 = v53
            + (float)((float)((float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v89)
                            * 2.3283e-10)
                    * (float)(v54 - v53));
      }
      v57 = *((float *)a3 + 5);
      v58 = *((float *)a3 + 9);
      v59 = __sincosf_stret(v56);
      v60 = *((float *)a3 + 6) + (float)(v58 * v59.__sinval);
      *((float *)a3 + 3) = v57 + (float)(v58 * v59.__cosval);
      *((float *)a3 + 4) = v60;
      if (*((_BYTE *)a2 + 1) && cv3d::cv::gess::mesh::PolyMesh::is_boundary(*((_QWORD *)this + 5), (uint64_t)&v93))
      {
        v61 = *((float *)a2 + 13);
        v62 = *((float *)a3 + 4);
        if (*((float *)a3 + 3) < v61)
          v61 = *((float *)a3 + 3);
        *((float *)a3 + 3) = v61;
        if (*((float *)a2 + 11) >= v61)
          v61 = *((float *)a2 + 11);
        *((float *)a3 + 3) = v61;
        v63 = *((float *)a2 + 14);
        if (v62 < v63)
          v63 = v62;
        *((float *)a3 + 4) = v63;
        if (*((float *)a2 + 12) >= v63)
          v63 = *((float *)a2 + 12);
        *((float *)a3 + 4) = v63;
      }
      cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v93, (uint64_t)v7, v10, v19, (uint64_t *)a3 + 14);
      v64 = *((float *)a3 + 1);
      v65 = *((float *)a3 + 2);
      v67 = *((float *)a3 + 3);
      v66 = *((float *)a3 + 4);
      v68 = (float)((float)((float)(v65 - v66) * (float)(v65 - v66)) + (float)((float)(v64 - v67) * (float)(v64 - v67)));
      while (v68 > v18)
      {
        v90 = (float)(v64 + v67) * 0.5;
        *(float *)&v91 = (float)(v65 + v66) * 0.5;
        cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v93, (uint64_t)&v90, (float *)&v91 + 1, (float **)a3 + 11, (uint64_t *)a3 + 14);
        v70 = *((float *)a3 + 7);
        v69 = *((float *)a3 + 8);
        v71 = *((float *)&v91 + 1);
        if (v70 >= v69)
        {
          *((_DWORD *)a3 + 7) = HIDWORD(v91);
          v64 = v90;
          v65 = *(float *)&v91;
          *((float *)a3 + 1) = v90;
          *((float *)a3 + 2) = v65;
          v67 = *((float *)a3 + 3);
          v66 = *((float *)a3 + 4);
          v70 = v71;
        }
        else
        {
          *((_DWORD *)a3 + 8) = HIDWORD(v91);
          v67 = v90;
          v66 = *(float *)&v91;
          *((float *)a3 + 3) = v90;
          *((float *)a3 + 4) = v66;
          v64 = *((float *)a3 + 1);
          v65 = *((float *)a3 + 2);
          v69 = v71;
        }
        v72 = (float)((float)((float)(v65 - v66) * (float)(v65 - v66)) + (float)((float)(v64 - v67) * (float)(v64 - v67)));
        v73 = vabdd_f64(v68, v72) < 1.00000002e-16 || v68 < v72;
        v68 = (float)((float)((float)(v65 - v66) * (float)(v65 - v66)) + (float)((float)(v64 - v67) * (float)(v64 - v67)));
        if (v73)
          goto LABEL_47;
      }
      v70 = *((float *)a3 + 7);
      v69 = *((float *)a3 + 8);
LABEL_47:
      if (v70 <= v69)
      {
        if (v70 < 3.4028e38
        {
          goto LABEL_53;
        }
        *(_QWORD *)v84 = *v7;
        v69 = *v10;
      }
      else
      {
        *((float *)a3 + 1) = v67;
        *((float *)a3 + 2) = v66;
      }
      *((float *)a3 + 7) = v69;
LABEL_53:
      ++v17;
    }
    while (v17 < *((_QWORD *)a2 + 3));
  }
  v74 = *((float *)a3 + 7);
  if (v74 >= v79)
  {
    if (v74 >= 3.4028e38)
    {
      {
        *((_DWORD *)a3 + 8) = *((_DWORD *)a3 + 7);
        *(_QWORD *)((char *)a3 + 12) = *(_QWORD *)((char *)a3 + 4);
LABEL_66:
        cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch((uint64_t)this, &v93, (uint64_t)v7, v10, (float **)a3 + 8, (uint64_t *)a3 + 14);
        cv3d::cv::gess::isochart::IsoChartMesh::UpdateOptimizeResult((uint64_t)this, (uint64_t)a2, (unsigned int *)a3);
        return 1;
      }
      v74 = *v10;
    }
    else
    {
      *((float *)a3 + 8) = v79;
      v74 = v79;
      *((float *)a3 + 3) = v77;
      *((float *)a3 + 4) = v76;
    }
  }
  else
  {
    *((float *)a3 + 8) = v74;
    *(_QWORD *)((char *)a3 + 12) = *(_QWORD *)((char *)a3 + 4);
  }
  if (v74 < v78)
    goto LABEL_66;
  return 0;
}

void sub_23C5BA3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::VertexOptimizeInfo::~VertexOptimizeInfo(cv3d::cv::gess::isochart::VertexOptimizeInfo *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 5);
  if (v7)
  {
    *((_QWORD *)this + 6) = v7;
    operator delete(v7);
  }
}

float `anonymous namespace'::IsochartVertexToEdgeDistance2D(float32x2_t *a1, float32x2_t *a2, float *a3)
{
  float *v6;
  float32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  void *__p[3];

  std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(__p, 2uLL);
  v6 = (float *)__p[0];
  v7 = vsub_f32(*a1, *a2);
  *(float32x2_t *)__p[0] = v7;
  v8 = a2->f32[1];
  v9 = *a3 - a2->f32[0];
  v10 = a3[1] - v8;
  v11 = (float)(v10 * v10) + (float)(v9 * v9);
  if (fabsf(v11) >= 0.00000001)
  {
    v13 = vmlas_n_f32(vmuls_lane_f32(v10, v7, 1), v9, v7.f32[0]) / v11;
    if (v13 < 0.0)
      v13 = 0.0;
    if (v13 > 1.0)
      v13 = 1.0;
    v14 = a2->f32[0] + (float)(v9 * v13);
    v15 = v8 + (float)(v10 * v13);
    v6[2] = v14;
    v6[3] = v15;
    v12 = (float)((float)(v15 - a1->f32[1]) * (float)(v15 - a1->f32[1]))
        + (float)((float)(v14 - a1->f32[0]) * (float)(v14 - a1->f32[0]));
  }
  else
  {
    v12 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v7, v7).i32[1]), v7.f32[0], v7.f32[0]);
  }
  __p[1] = v6;
  operator delete(v6);
  return v12;
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryAdjustVertexParamStretch(uint64_t a1, _DWORD *a2, uint64_t a3, float *a4, float **a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float *v29;
  float *v30;
  float *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float *v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  float v40;
  int v41;
  void *__p[3];
  int v43;
  unsigned int v44;

  *a4 = 0.0;
  v12 = *(_QWORD *)(a1 + 40);
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 192);
  v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v12 + 80), (unsigned int *)__p, a3);
  v43 = 0;
  a5[1] = *a5;
  std::vector<float>::resize((uint64_t)a5, (a6[1] - *a6) >> 2);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v14 = *a6;
  if (a6[1] != *a6)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(_QWORD *)(a1 + 40), (unsigned int *)(v14 + 4 * v15), __p);
      v17 = *(_QWORD *)(a1 + 40);
      v44 = *(_DWORD *)(a1 + 196);
      v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v17 + 56), &v44, v18);
      v20 = (unsigned int *)(*a6 + 4 * v15);
      v21 = *v20;
      v22 = *(_QWORD *)(v19 + 40);
      if (v21 >= (*(_QWORD *)(v19 + 48) - v22) >> 2)
        break;
      v23 = *(unsigned int *)__p[0];
      if ((_DWORD)v23 == *a2)
      {
        v24 = *((unsigned int *)__p[0] + 1);
        v25 = *(_QWORD *)(v13 + 40);
        v26 = (*(_QWORD *)(v13 + 48) - v25) >> 3;
        if (v26 <= v24)
          goto LABEL_30;
        v27 = *((unsigned int *)__p[0] + 2);
        if (v26 <= v27)
          goto LABEL_30;
        v28 = *(_QWORD *)(a1 + 40);
        v29 = (float *)(v25 + 8 * v24);
        v30 = (float *)a3;
        v31 = (float *)(v25 + 8 * v27);
      }
      else
      {
        v32 = *((unsigned int *)__p[0] + 1);
        v28 = *(_QWORD *)(a1 + 40);
        v33 = *(_QWORD *)(v13 + 40);
        v34 = (*(_QWORD *)(v13 + 48) - v33) >> 3;
        if ((_DWORD)v32 == *a2)
        {
          if (v34 <= v23)
            goto LABEL_30;
          v35 = *((unsigned int *)__p[0] + 2);
          if (v34 <= v35)
            goto LABEL_30;
          v30 = (float *)(v33 + 8 * v23);
          v29 = (float *)a3;
          v31 = (float *)(v33 + 8 * v35);
        }
        else
        {
          if (v34 <= v23 || v34 <= v32)
          {
LABEL_30:
            v41 = 187;
            goto LABEL_32;
          }
          v30 = (float *)(v33 + 8 * v23);
          v31 = (float *)a3;
          v29 = (float *)(v33 + 8 * v32);
        }
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalFaceGeoL2SquaredStretch(v28, v20, v30, v29, v31, (float *)(v22 + 4 * v21), (float *)&v43);
      v36 = *a5;
      (*a5)[v15] = v37;
      v15 = ++v16;
      v14 = *a6;
      if (v16 >= (unint64_t)((a6[1] - *a6) >> 2))
        goto LABEL_18;
    }
    v41 = 182;
LABEL_32:
    __assert_rtn("operator[]", "Attribute.h", v41, "index < data_.size()");
  }
  v36 = *a5;
LABEL_18:
  v38 = (char *)a5[1] - (char *)v36;
  if (v38)
  {
    v39 = v38 >> 2;
    if (v39 <= 1)
      v39 = 1;
    v40 = 0.0;
    while (*v36 < 3.4028e38)
    {
      v40 = v40 + *v36++;
      if (!--v39)
        goto LABEL_27;
    }
    v40 = 3.4028e38;
  }
  else
  {
    v40 = 0.0;
  }
LABEL_27:
  *a4 = v40;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23C5BA7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float `anonymous namespace'::CalculateAdjFlipFaceArea(uint64_t a1, float *a2, unsigned int **a3, unsigned int a4)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v8;
  uint64_t *v9;
  float v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v4 = *a3;
  v5 = a3[1];
  if (*a3 == v5)
    return 0.0;
  v8 = a1 + 104;
  v9 = (uint64_t *)(a1 + 80);
  v10 = 0.0;
  do
  {
    v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, v4);
    v12 = cv3d::cv::gess::mesh::Topology::h(v8, v11);
    v13 = cv3d::cv::gess::mesh::Topology::h(v8, v4);
    v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)(v13 + 8));
    v15 = cv3d::cv::gess::mesh::Topology::h(v8, v14);
    v28 = a4;
    v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v9, &v28, v16);
    v20 = *(unsigned int *)(v12 + 12);
    v21 = *(_QWORD *)(v17 + 40);
    if (v20 >= (*(_QWORD *)(v17 + 48) - v21) >> 3)
      cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v17, v18, v19);
    v29 = a4;
    v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v9, &v29, v19);
    v25 = *(unsigned int *)(v15 + 12);
    v26 = *(_QWORD *)(v22 + 40);
    if (v25 >= (*(_QWORD *)(v22 + 48) - v26) >> 3)
      cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v22, v23, v24);
    v10 = v10
        - fminf((float)((float)((float)(*(float *)(v21 + 8 * v20) - *a2) * (float)(*(float *)(v26 + 8 * v25 + 4) - a2[1]))- (float)((float)(*(float *)(v21 + 8 * v20 + 4) - a2[1]) * (float)(*(float *)(v26 + 8 * v25) - *a2)))* 0.5, 0.0);
    ++v4;
  }
  while (v4 != v5);
  return v10;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

void cv3d::cv::gess::isochart::IsoChartMesh::UpdateOptimizeResult(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  int *v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  unsigned int v28;

  v7 = *((_QWORD *)a3 + 14);
  v6 = *((_QWORD *)a3 + 15);
  v9 = *((_QWORD *)a3 + 17);
  v8 = *((_QWORD *)a3 + 18);
  v10 = *(_QWORD *)(a1 + 40);
  v28 = *(_DWORD *)(a1 + 192);
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v10 + 80), &v28, (uint64_t)a3);
  v14 = *a3;
  v15 = *(_QWORD *)(v11 + 40);
  if (v14 >= (*(_QWORD *)(v11 + 48) - v15) >> 3)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v11, v12, v13);
  v16 = (_DWORD *)(v15 + 8 * v14);
  *v16 = a3[3];
  v16[1] = a3[4];
  *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v14) = a3[8];
  if (v6 != v7)
  {
    v17 = (v6 - v7) >> 2;
    v18 = (int *)*((_QWORD *)a3 + 8);
    v19 = (unsigned int *)*((_QWORD *)a3 + 14);
    v20 = *(_QWORD *)(a2 + 160);
    if (v17 <= 1)
      v17 = 1;
    do
    {
      v21 = *v18++;
      v22 = v21;
      v23 = *v19++;
      *(_DWORD *)(v20 + 4 * v23) = v22;
      --v17;
    }
    while (v17);
  }
  if (v8 != v9)
  {
    v24 = 0;
    if ((unint64_t)((v8 - v9) >> 2) <= 1)
      v25 = 1;
    else
      v25 = (v8 - v9) >> 2;
    v26 = *((_QWORD *)a3 + 17);
    do
    {
      v27 = cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertexStretch(a1, v26 + v24, (_QWORD *)(a2 + 160));
      v26 = *((_QWORD *)a3 + 17);
      *(float *)(*(_QWORD *)(a2 + 136) + 4 * *(unsigned int *)(v26 + v24)) = v27;
      v24 += 4;
      --v25;
    }
    while (v25);
  }
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalculateAdjustedVertexStretch(uint64_t a1, uint64_t a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  float result;

  v2 = *(float **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v3)
    return 0.0;
  v4 = v3 >> 2;
  if (v4 <= 1)
    v4 = 1;
  result = 0.0;
  while (*v2 < 3.4028e38)
  {
    result = result + *v2++;
    if (!--v4)
      return result;
  }
  return 3.4028e38;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::alg::internal::LoadImageFromTextureFilePath(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  char v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::__fs::filesystem::path *v11;
  std::__fs::filesystem::path v13;
  std::string v14;
  std::string v15;
  std::string __p;
  std::string v17;

  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = __p;
  }
  v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  size = v17.__r_.__value_.__l.__size_;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = (std::string *)((char *)&v17 + HIBYTE(v17.__r_.__value_.__r.__words[2]));
  else
    v7 = (std::string *)(v17.__r_.__value_.__r.__words[0] + v17.__r_.__value_.__l.__size_);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v17;
  else
    v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
  if (v8 != v7)
  {
    do
    {
      v8->__r_.__value_.__s.__data_[0] = __tolower(v8->__r_.__value_.__s.__data_[0]);
      v8 = (std::string *)((char *)v8 + 1);
    }
    while (v8 != v7);
    v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    size = v17.__r_.__value_.__l.__size_;
    v5 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  if (v5 < 0)
    v4 = size;
  if (v4 == 4)
  {
    v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if (v5 >= 0)
      v9 = &v17;
    if (LODWORD(v9->__r_.__value_.__l.__data_) == 1920492846)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v15 = *(std::string *)a1;
      v10 = cv3d::cv::gess::io::LoadExr(&v15, a2);
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_37;
      v11 = (std::__fs::filesystem::path *)&v15;
      goto LABEL_36;
    }
    if (LODWORD(v9->__r_.__value_.__l.__data_) == 1735290926)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v14 = *(std::string *)a1;
      v10 = cv3d::cv::gess::io::LoadJpeg(&v14, a2);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_37;
      v11 = (std::__fs::filesystem::path *)&v14;
      goto LABEL_36;
    }
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13.__pn_, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v13.__pn_ = *(std::__fs::filesystem::path::string_type *)a1;
  v10 = cv3d::cv::gess::io::LoadJpeg(&v13, a2);
  if ((SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_37;
  v11 = &v13;
LABEL_36:
  operator delete(v11->__pn_.__r_.__value_.__l.__data_);
LABEL_37:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v10;
}

void sub_23C5BADC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  std::string::size_type v11;
  char v12;
  std::string::size_type size;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  _BOOL8 v17;
  std::string *v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;

  v7 = *(_QWORD *)(a4 + 24);
  if (v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1, a2);
  if (*(char *)(a3 + 55) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
  else
    v22 = *(std::string *)(a3 + 32);
  v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  v12 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  size = v22.__r_.__value_.__l.__size_;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = (std::string *)((char *)&v22 + HIBYTE(v22.__r_.__value_.__r.__words[2]));
  else
    v14 = (std::string *)(v22.__r_.__value_.__r.__words[0] + v22.__r_.__value_.__l.__size_);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v22;
  else
    v15 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if (v15 != v14)
  {
    do
    {
      v15->__r_.__value_.__s.__data_[0] = __tolower(v15->__r_.__value_.__s.__data_[0]);
      v15 = (std::string *)((char *)v15 + 1);
    }
    while (v15 != v14);
    v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    size = v22.__r_.__value_.__l.__size_;
    v12 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  if (v12 < 0)
    v11 = size;
  if (v11 == 4)
  {
    v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
    if (v12 >= 0)
      v16 = &v22;
    if (LODWORD(v16->__r_.__value_.__l.__data_) == 1920492846)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v21 = *(std::string *)a1;
      v17 = cv3d::cv::gess::io::SaveExr((char *)&v21, a2, a5);
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v18 = &v21;
      goto LABEL_37;
    }
    if (LODWORD(v16->__r_.__value_.__l.__data_) == 1735290926)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v20 = *(std::string *)a1;
      v17 = cv3d::cv::gess::io::SavePng((uint64_t)&v20, a2);
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      v18 = &v20;
      goto LABEL_37;
    }
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v19 = *(std::string *)a1;
  v17 = cv3d::cv::gess::io::SaveJpeg((uint64_t)&v19, a2, *(unsigned __int16 *)(a3 + 24));
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_38;
  v18 = &v19;
LABEL_37:
  operator delete(v18->__r_.__value_.__l.__data_);
LABEL_38:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v17;
}

void sub_23C5BB060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::SCENEKIT_TANGENTIAL(uint64_t a1, int32x4_t *a2, float32x4_t *a3, float64x2_t a4, float64x2_t a5)
{
  int8x16_t v5;
  int32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  a4.f64[0] = fabsf(*(float *)(a1 + 8));
  a5.f64[0] = 0.999;
  v5 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(a5, a4).i64[0], 0);
  v6 = (int32x4_t)xmmword_23C603EC0;
  v7 = (int32x4_t)vbslq_s8(v5, (int8x16_t)xmmword_23C605210, (int8x16_t)xmmword_23C603EC0);
  v8 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1), (float32x4_t)vzip2q_s32(vzip1q_s32(v7, (int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL)), v7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL), v7));
  v9 = vmulq_f32(v8, v8);
  v9.i32[3] = 0;
  v10 = vpaddq_f32(v9, v9);
  v11 = vpaddq_f32(v10, v10);
  if (v11.f32[0] > 0.0)
    v6 = (int32x4_t)vdivq_f32(v8, vsqrtq_f32(v11));
  *a2 = v6;
  *a3 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL), v6), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1)), (float32x4_t)vzip2q_s32(vzip1q_s32(v6, (int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL)), v6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1));
  return 1;
}

uint64_t cv3d::cv::gess::alg::internal::PREPARE_OBJ_ORTHOGONAL_TANGENTIAL(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float32x4_t v10;
  unint64_t v11;
  float32x4_t *v12;
  unsigned int v13;
  uint64_t v14;
  float32x4_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int8x16_t *v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  unsigned int v43;
  void *v44[2];
  char v45;

  std::string::basic_string[abi:ne180100]<0>(v44, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v42.i32[2] = 0;
  v42.i64[0] = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v42, (unsigned __int8 *)v44);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v5 == -1)
    return 0;
  LODWORD(v44[0]) = v5;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)v44, v4);
  std::string::basic_string[abi:ne180100]<0>(v44, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v42.i64[0] = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v42, (unsigned __int8 *)v44);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v8 == -1)
    return 0;
  LODWORD(v44[0]) = v8;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)v44, v7);
  std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::resize(a2, (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v44, 3uLL);
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    v11 = 0;
    v10.i32[0] = 897988541;
    v37 = v10;
    do
    {
      v43 = v11;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v43, v44);
      v41 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v44[0] + 1));
      v40 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v44[0]);
      v39 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v44[0] + 2));
      v12 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v44[0]);
      v13 = v43;
      v14 = *(_QWORD *)(v6 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 48) - v14) >> 2) <= v43)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v38 = *v12;
      cv3d::cv::gess::math::FaceNormal(a1, v43, (float32x4_t *)&v42);
      v16 = (unsigned int *)(v14 + 12 * v13);
      v17 = v16[1];
      v18 = *(_QWORD *)(v9 + 40);
      v19 = (*(_QWORD *)(v9 + 48) - v18) >> 3;
      if (v19 <= v17 || (v20 = *v16, v19 <= v20))
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v21 = v16[2];
      if (v19 <= v21)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v22 = (float *)(v18 + 8 * v17);
      v23 = (float *)(v18 + 8 * v20);
      v24 = v23[1];
      v25 = (float *)(v18 + 8 * v21);
      v26 = v22[1] - v24;
      v27 = v25[1] - v24;
      v28 = (float)((float)(*v22 - *v23) * v27) - (float)(v26 * (float)(*v25 - *v23));
      if (fabsf(v28) >= v37.f32[0])
      {
        v34 = (int32x4_t)vmulq_n_f32(vsubq_f32(vmulq_n_f32(vsubq_f32(v41, v40), v27), vmulq_n_f32(vsubq_f32(v39, v38), v26)), 1.0 / v28);
        v30 = v42;
        v33 = (int32x4_t)vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL), v34), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v42, (int32x4_t)vextq_s8(v30, v30, 0xCuLL)), (int32x4_t)v42)), (float32x4_t)vzip2q_s32(vzip1q_s32(v34, (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL)), v34), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v30, v30, 4uLL), (int32x4_t)v42));
      }
      else
      {
        v15.f32[0] = fabsf(*(float *)v42.i32 + -1.0);
        v29 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v37, v15), 0), (int8x16_t)xmmword_23C605200, (int8x16_t)xmmword_23C603EC0);
        v30 = v42;
        v31 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v42, (int32x4_t)vextq_s8(v30, v30, 0xCuLL)), (int32x4_t)v42);
        v32 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v30, v30, 4uLL), (int32x4_t)v42);
        v33 = (int32x4_t)vmlsq_f32(vmulq_f32(v31, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL), v29)), (float32x4_t)vzip2q_s32(vzip1q_s32(v29, (int32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL)), v29), v32);
        v34 = (int32x4_t)vmlsq_f32(vmulq_f32(v31, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL), v33)), (float32x4_t)vzip2q_s32(vzip1q_s32(v33, (int32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL)), v33), v32);
      }
      v35 = (int8x16_t *)(*a2 + 48 * v43);
      *v35 = v30;
      v35[1] = (int8x16_t)v34;
      v35[2] = (int8x16_t)v33;
      ++v11;
    }
    while (v11 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  return 1;
}

void sub_23C5BB59C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 48 * a2;
  }
}

BOOL cv3d::cv::gess::alg::internal::CheckLazyLoading(cv3d::cv::gess::alg::internal *this, const Material *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  if (v2 == v3)
    return 0;
  LOBYTE(result) = 0;
  do
  {
    result = result || *(_BYTE *)(v2 + 4) == 0;
    v2 += 48;
  }
  while (v2 != v3);
  return result;
}

BOOL cv3d::cv::gess::alg::internal::TransferMapKd(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float *v54;
  float *v55;
  float v56;
  float v57;
  float *v58;
  float v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  double v63;
  unsigned int v64;
  double v65;
  float v66;
  float v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  char ImageFromTextureFilePath;
  uint64_t v74;
  unsigned __int16 v75;
  unsigned __int16 v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  const std::string::value_type **v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  float v123;
  float v124;
  float *v125;
  float *v126;
  float v127;
  float v128;
  float *v129;
  float v130;
  float v131;
  unsigned int v132;
  unsigned int v133;
  double v134;
  unsigned int v135;
  double v136;
  float v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v144;
  uint64_t v145;
  std::string::size_type v147;
  uint64_t v148;
  int v150;
  unsigned __int16 v151;
  int v152;
  std::string v153;
  std::string __p;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v153.__r_.__value_.__l.__data_) = 0;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&v153, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(__p.__r_.__value_.__l.__data_) = v9;
  v145 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)(a1 + 56), (unsigned int *)&__p, v8);
  v11 = -1;
  v152 = -1;
  if (v9 == -1)
  {
    v12 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    v12 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a1, &v152, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = v152;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v11;
  v13 = (uint64_t *)(a1 + 80);
  v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)(a1 + 80), (unsigned int *)&__p, v10);
  v144 = *(_QWORD *)(v14 + 40);
  if (*(_QWORD *)(v14 + 48) == v144)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v14, v15, v16);
  if (!v12)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = -1;
    v148 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&__p, v16);
LABEL_16:
    v21 = 0;
    v20 = -1;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v153.__r_.__value_.__r.__words[1]) = 0;
  v153.__r_.__value_.__r.__words[0] = 0;
  v18 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v153, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(__p.__r_.__value_.__l.__data_) = v18;
  v148 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&__p, v17);
  if (v18 == -1)
    goto LABEL_16;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v153.__r_.__value_.__r.__words[0] = 0;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v153, (unsigned __int8 *)&__p);
  v21 = v20 != -1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_17:
  LODWORD(__p.__r_.__value_.__l.__data_) = v20;
  v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&__p, v19);
  v147 = v22;
  v25 = a2[3];
  v26 = a2[4];
  if (v25 == v26)
  {
LABEL_24:
    v29 = *(_DWORD *)(a4 + 8);
    if (v29)
    {
      v30 = 0;
      v31 = *(_DWORD *)(a4 + 4);
      v32 = v31;
      do
      {
        if (v32)
        {
          v33 = 0;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)(a4 + 16) + *(_DWORD *)(a4 + 12) * (v33 + v32 * v30)))
            {
              v34 = *(_QWORD *)(a5 + 16);
              v35 = (v33 + *(_DWORD *)(a5 + 4) * v30) * *(_DWORD *)(a5 + 12);
              v36 = *(unsigned int *)(v34 + 16 * v35 + 4);
              v151 = 0;
              v37 = *(_QWORD *)(v145 + 40);
              if (v36 >= (*(_QWORD *)(v145 + 48) - v37) >> 1)
                cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v22, v23, v24);
              v151 = *(_WORD *)(v37 + 2 * v36);
              v38 = std::map<unsigned short,std::string>::at(v144, &v151);
              v39 = *a2
                  + 48 * *(unsigned __int16 *)std::map<std::string,std::string>::at((uint64_t)(a2 + 6), (void **)v38)
                  + 24;
              v150 = 1;
              v40 = a2[3]
                  + 48
                  * *(unsigned __int16 *)std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(v39, &v150);
              v22 = *(_QWORD *)(v40 + 8);
              __p.__r_.__value_.__r.__words[0] = v22;
              v41 = *(std::__shared_weak_count **)(v40 + 16);
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
              if (v41)
              {
                p_shared_owners = (unint64_t *)&v41->__shared_owners_;
                do
                  v43 = __ldxr(p_shared_owners);
                while (__stxr(v43 + 1, p_shared_owners));
              }
              v44 = *(_QWORD *)(v148 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v148 + 48) - v44) >> 2) <= v36)
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              v45 = (unsigned int *)(v44 + 12 * v36);
              v46 = *v45;
              v47 = *(_QWORD *)(v147 + 40);
              v48 = (*(_QWORD *)(v147 + 48) - v47) >> 3;
              if (v48 <= v46)
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              v49 = v45[1];
              if (v48 <= v49)
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              v50 = v45[2];
              if (v48 <= v50)
                __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
              if (v21)
              {
                v51 = v34 + 16 * v35;
                v52 = *(float *)(v51 + 8);
                v53 = *(float *)(v51 + 12);
                v54 = (float *)(v47 + 8 * v46);
                v55 = (float *)(v47 + 8 * v49);
                v56 = *v55;
                v57 = (float)(1.0 - v52) - v53;
                v58 = (float *)(v47 + 8 * v50);
                v59 = *v58;
                v60 = (float)((float)(v52 * v54[1]) + (float)(v53 * v55[1])) + (float)(v57 * v58[1]);
                v62 = *(_DWORD *)(v22 + 4);
                v61 = *(_DWORD *)(v22 + 8);
                v63 = (float)((float)(1.0 - v60) * (float)v61) + -0.5;
                if (v63 < 0.0)
                  v63 = 0.0;
                v64 = v61 - 1;
                if (v63 > (double)v64)
                  v63 = (double)v64;
                v65 = (float)((float)((float)((float)(v52 * *v54) + (float)(v53 * v56)) + (float)(v57 * v59))
                            * (float)v62)
                    + -0.5;
                if (v65 < 0.0)
                  v65 = 0.0;
                if (v65 > (double)(v62 - 1))
                  v65 = (double)(v62 - 1);
                v66 = v65;
                v67 = v63;
                v22 = cv3d::cv::gess::util::ImageT<float>::at(v22, (float *)&v153, v66, v67);
                LOBYTE(v21) = v22;
              }
              else
              {
                LOBYTE(v21) = 0;
              }
              v68 = 0;
              v69 = *(_QWORD *)(a3 + 16) + 4 * *(_DWORD *)(a3 + 12) * (v33 + v30 * *(_DWORD *)(a3 + 4));
              do
              {
                *(_DWORD *)(v69 + v68) = *(_DWORD *)((char *)&v153.__r_.__value_.__l.__data_ + v68);
                v68 += 4;
              }
              while (v68 != 12);
              if (v41)
              {
                v70 = (unint64_t *)&v41->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                  std::__shared_weak_count::__release_weak(v41);
                }
              }
              v31 = *(_DWORD *)(a4 + 4);
            }
            ++v33;
            v32 = v31;
          }
          while (v33 < v31);
          v29 = *(_DWORD *)(a4 + 8);
          v32 = v31;
        }
        ++v30;
      }
      while (v30 < v29);
    }
  }
  else
  {
    v27 = 0;
    do
    {
      while (v27)
      {
        v25 += 48;
        v27 = 1;
        if (v25 == v26)
          goto LABEL_60;
      }
      v28 = *(unsigned __int8 *)(v25 + 4);
      v27 = *(_BYTE *)(v25 + 4) == 0;
      v25 += 48;
    }
    while (v25 != v26);
    if (v28)
      goto LABEL_24;
LABEL_60:
    v72 = -1;
    v150 = -1;
    if (v21)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      ImageFromTextureFilePath = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v150, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v72 = v150;
    }
    else
    {
      ImageFromTextureFilePath = 0;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = v72;
    v74 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v13, (unsigned int *)&__p, v24);
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
    v151 = 0;
    if (v75)
    {
      v76 = 0;
      v77 = v145;
      do
      {
        v78 = *(_DWORD *)(a4 + 8);
        if (v78)
        {
          v79 = 0;
          v80 = 0;
          v81 = 0;
          v82 = *(_DWORD *)(a4 + 4);
          v83 = *(_DWORD *)(a4 + 12);
          v84 = *(_DWORD *)(a5 + 12);
          v85 = *(_QWORD *)(v77 + 40);
          v86 = (*(_QWORD *)(v77 + 48) - v85) >> 1;
          v87 = (*(_DWORD *)(a5 + 4) * v84);
          while (!v82)
          {
LABEL_75:
            ++v81;
            v80 += v87;
            v79 += v82 * v83;
            if (v81 == v78)
              goto LABEL_125;
          }
          v88 = *(unsigned int *)(a4 + 4);
          v89 = v79;
          v90 = v80;
          while (1)
          {
            if (*(_BYTE *)(*(_QWORD *)(a4 + 16) + v89))
            {
              v91 = *(unsigned int *)(*(_QWORD *)(a5 + 16) + 16 * v90 + 4);
              if (v86 <= v91)
                cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v85, v86, v87);
              if (*(unsigned __int16 *)(v85 + 2 * v91) == v76)
                break;
            }
            v90 += v84;
            v89 += v83;
            if (!--v88)
              goto LABEL_75;
          }
          v92 = std::map<unsigned short,std::string>::at(v144, &v151);
          v93 = *a2
              + 48 * *(unsigned __int16 *)std::map<std::string,std::string>::at((uint64_t)(a2 + 6), (void **)v92)
              + 24;
          LODWORD(__p.__r_.__value_.__l.__data_) = 1;
          v94 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(v93, (int *)&__p);
          v95 = a2[3];
          if (*(_BYTE *)(v95 + 48 * *(unsigned __int16 *)v94 + 4))
          {
            v96 = v95 + 48 * *(unsigned __int16 *)v94;
            v98 = *(_QWORD *)(v96 + 8);
            v97 = *(std::__shared_weak_count **)(v96 + 16);
            v77 = v145;
            if (v97)
            {
              v99 = v97;
              v100 = (unint64_t *)&v97->__shared_owners_;
              do
                v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
            }
            else
            {
              v99 = 0;
            }
          }
          else
          {
            v102 = v95 + 48 * *(unsigned __int16 *)v94;
            v103 = (const std::string::value_type **)(v102 + 24);
            v77 = v145;
            if (*(char *)(v102 + 47) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *v103, *(_QWORD *)(v95 + 48 * *(unsigned __int16 *)v94 + 32));
            }
            else
            {
              v104 = *(_OWORD *)v103;
              __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 40);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v104;
            }
            v105 = (std::__shared_weak_count *)operator new(0x30uLL);
            v105->__shared_owners_ = 0;
            v105->__shared_weak_owners_ = 0;
            v105->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
            v105[1].__vftable = 0;
            v98 = (uint64_t)&v105[1];
            v105[1].__shared_owners_ = 0;
            v105[1].__shared_weak_owners_ = 0;
            v99 = v105;
            if ((ImageFromTextureFilePath & 1) != 0)
            {
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v153, (char *)&__p);
              ImageFromTextureFilePath = cv3d::cv::gess::alg::internal::LoadImageFromTextureFilePath((uint64_t)&v153, v98);
              if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v153.__r_.__value_.__l.__data_);
            }
            else
            {
              ImageFromTextureFilePath = 0;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          v106 = *(_DWORD *)(a4 + 8);
          if (v106)
          {
            v107 = 0;
            v108 = *(_DWORD *)(a4 + 4);
            v109 = v108;
            do
            {
              if (v109)
              {
                v110 = 0;
                do
                {
                  if (*(_BYTE *)(*(_QWORD *)(a4 + 16) + *(_DWORD *)(a4 + 12) * (v110 + v109 * v107)))
                  {
                    v111 = *(_QWORD *)(a5 + 16);
                    v112 = (v110 + *(_DWORD *)(a5 + 4) * v107) * *(_DWORD *)(a5 + 12);
                    v113 = *(unsigned int *)(v111 + 16 * v112 + 4);
                    v114 = *(_QWORD *)(v77 + 40);
                    if (v113 >= (*(_QWORD *)(v77 + 48) - v114) >> 1)
                      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                    if (*(unsigned __int16 *)(v114 + 2 * v113) == v151)
                    {
                      v115 = *(_QWORD *)(v148 + 40);
                      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v148 + 48) - v115) >> 2) <= v113)
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      v116 = (unsigned int *)(v115 + 12 * v113);
                      v117 = *v116;
                      v118 = *(_QWORD *)(v147 + 40);
                      v119 = (*(_QWORD *)(v147 + 48) - v118) >> 3;
                      if (v119 <= v117)
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      v120 = v116[1];
                      if (v119 <= v120)
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      v121 = v116[2];
                      if (v119 <= v121)
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      if ((ImageFromTextureFilePath & 1) != 0)
                      {
                        v122 = v111 + 16 * v112;
                        v123 = *(float *)(v122 + 8);
                        v124 = *(float *)(v122 + 12);
                        v125 = (float *)(v118 + 8 * v117);
                        v126 = (float *)(v118 + 8 * v120);
                        v127 = *v126;
                        v128 = (float)(1.0 - v123) - v124;
                        v129 = (float *)(v118 + 8 * v121);
                        v130 = *v129;
                        v131 = (float)((float)(v123 * v125[1]) + (float)(v124 * v126[1])) + (float)(v128 * v129[1]);
                        v133 = *(_DWORD *)(v98 + 4);
                        v132 = *(_DWORD *)(v98 + 8);
                        v134 = (float)((float)(1.0 - v131) * (float)v132) + -0.5;
                        if (v134 < 0.0)
                          v134 = 0.0;
                        v135 = v132 - 1;
                        if (v134 > (double)v135)
                          v134 = (double)v135;
                        v136 = (float)((float)((float)((float)(v123 * *v125) + (float)(v124 * v127))
                                             + (float)(v128 * v130))
                                     * (float)v133)
                             + -0.5;
                        if (v136 < 0.0)
                          v136 = 0.0;
                        if (v136 > (double)(v133 - 1))
                          v136 = (double)(v133 - 1);
                        v137 = v136;
                        v138 = v134;
                        ImageFromTextureFilePath = cv3d::cv::gess::util::ImageT<float>::at(v98, (float *)&__p, v137, v138);
                      }
                      else
                      {
                        ImageFromTextureFilePath = 0;
                      }
                      v139 = 0;
                      v140 = *(_QWORD *)(a3 + 16) + 4 * *(_DWORD *)(a3 + 12) * (v110 + v107 * *(_DWORD *)(a3 + 4));
                      do
                      {
                        *(_DWORD *)(v140 + v139) = *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + v139);
                        v139 += 4;
                      }
                      while (v139 != 12);
                      v108 = *(_DWORD *)(a4 + 4);
                    }
                  }
                  ++v110;
                  v109 = v108;
                }
                while (v110 < v108);
                v106 = *(_DWORD *)(a4 + 8);
                v109 = v108;
              }
              ++v107;
            }
            while (v107 < v106);
          }
          if (v99)
          {
            v141 = (unint64_t *)&v99->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
        }
LABEL_125:
        v76 = ++v151;
      }
      while (v151 < v75);
    }
    LOBYTE(v21) = ImageFromTextureFilePath & 1;
  }
  return v21;
}

void sub_23C5BC1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::ImageT<float>::at(uint64_t a1, float *a2, float a3, float a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  float *v15;
  int v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  v4 = *(unsigned int *)(a1 + 12);
  if ((int)v4 >= 1)
  {
    v6 = *(_DWORD *)(a1 + 4);
    v5 = *(_DWORD *)(a1 + 8);
    v7 = (int)vcvtms_s32_f32(a3) % v6;
    v8 = (int)vcvtms_s32_f32(a4) % v5;
    v9 = a3 - (float)v7;
    v10 = a4 - (float)v8;
    v11 = (int)vcvtps_s32_f32(a4) % v5;
    v12 = (int)vcvtps_s32_f32(a3) % v6;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v8 * v6;
    v15 = (float *)(v13 + 4 * ((v14 + v7) * v4));
    v16 = v11 * v6;
    v17 = (float *)(v13 + 4 * ((v16 + v7) * v4));
    v18 = (float *)(v13 + 4 * ((v14 + v12) * v4));
    v19 = (float *)(v13 + 4 * ((v16 + v12) * v4));
    do
    {
      v20 = *v15++;
      v21 = v20;
      v22 = *v17++;
      v23 = v22;
      v24 = *v18++;
      v25 = v24;
      v26 = *v19++;
      *a2++ = (float)(v9 * (float)((float)(v10 * v26) + (float)((float)(1.0 - v10) * v25)))
            + (float)((float)(1.0 - v9) * (float)((float)(v10 * v23) + (float)((float)(1.0 - v10) * v21)));
      --v4;
    }
    while (v4);
  }
  return 1;
}

BOOL cv3d::cv::gess::alg::internal::TransferMapNorm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  int v53;
  float32x4_t v54;
  uint64_t v56;
  void *__p[2];
  char v58;
  _QWORD v59[2];

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v56 = a1;
  v14 = (uint64_t *)(a1 + 8);
  v59[0] = 0;
  v59[1] = 0;
  v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v59, (unsigned __int8 *)__p);
  if (v58 < 0)
    operator delete(__p[0]);
  v53 = v15;
  LODWORD(__p[0]) = v15;
  v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v14, (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v17 = *(_DWORD *)(a4 + 8);
  if (v17)
  {
    v18 = 0;
    v19 = *(_DWORD *)(a4 + 4);
    __asm { FMOV            V0.4S, #1.0 }
    v54 = _Q0;
    v25 = v19;
    do
    {
      if (v25)
      {
        v26 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a4 + 16) + *(_DWORD *)(a4 + 12) * (v26 + v18 * v25)))
          {
            v27 = *(_QWORD *)(a5 + 16);
            v28 = (v26 + v18 * *(_DWORD *)(a5 + 4)) * *(_DWORD *)(a5 + 12);
            LODWORD(v59[0]) = *(_DWORD *)(v27 + 16 * v28 + 4);
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v56, (unsigned int *)v59, __p);
            v29 = *(unsigned int *)__p[0];
            v30 = *(_QWORD *)(v16 + 40);
            v31 = (*(_QWORD *)(v16 + 48) - v30) >> 4;
            if (v31 <= v29)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v32 = *((unsigned int *)__p[0] + 1);
            if (v31 <= v32)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v33 = *((unsigned int *)__p[0] + 2);
            if (v31 <= v33)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v34 = *(float32x4_t *)(*a8
                                 + 48
                                 * *(unsigned int *)(*(_QWORD *)(a7 + 16)
                                                   + 4 * (v26 + v18 * *(_DWORD *)(a7 + 4)) * *(_DWORD *)(a7 + 12))
                                 + 32);
            v35 = *(float32x4_t *)(*(_QWORD *)(a6 + 16) + 16
                                                        * (v26 + v18 * *(_DWORD *)(a6 + 4))
                                                        * *(_DWORD *)(a6 + 12));
            v36 = vmulq_f32(v34, v35);
            v36.i32[3] = 0;
            v37 = vsubq_f32(v34, vmulq_n_f32(v35, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36))));
            v38 = vmulq_f32(v37, v37);
            v38.i32[3] = 0;
            v39 = vpaddq_f32(v38, v38);
            v40 = vpaddq_f32(v39, v39);
            v41 = (float32x4_t)xmmword_23C603EC0;
            if (v40.f32[0] > 0.0)
              v41 = vdivq_f32(v37, vsqrtq_f32(v40));
            v42 = v27 + 16 * v28;
            v43 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v33), (float)(1.0 - *(float *)(v42 + 8)) - *(float *)(v42 + 12)), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v29), *(float *)(v42 + 8)), vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v32), *(float *)(v42 + 12))));
            v44 = vmulq_f32(v43, v43);
            v44.i32[3] = 0;
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
            v44.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v44.f32));
            v45 = vdivq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
            v46 = vmulq_f32(v45, vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), (int32x4_t)v35), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v41, (int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL)), (int32x4_t)v41)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v35, (int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL)), (int32x4_t)v35), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL), (int32x4_t)v41)));
            v46.i32[3] = 0;
            v47 = vmulq_f32(v45, v41);
            v47.i32[3] = 0;
            v48 = vmulq_f32(v45, v35);
            v48.i32[3] = 0;
            v45.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))));
            v45.i64[1] = COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)));
            v49 = vmulq_f32(v45, v45);
            v49.i32[3] = 0;
            v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
            v49.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v49.f32));
            v47.i64[0] = 0x3F0000003F000000;
            v47.i64[1] = 0x3F0000003F000000;
            v50 = vmulq_f32(vaddq_f32(vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0)), v54), v47);
            v51 = *(_QWORD *)(a3 + 16) + 4 * (v26 + v18 * *(_DWORD *)(a3 + 4)) * *(_DWORD *)(a3 + 12);
            *(_DWORD *)(v51 + 8) = v50.i32[2];
            *(_QWORD *)v51 = v50.i64[0];
            v19 = *(_DWORD *)(a4 + 4);
          }
          ++v26;
          v25 = v19;
        }
        while (v26 < v19);
        v17 = *(_DWORD *)(a4 + 8);
        v25 = v19;
      }
      ++v18;
    }
    while (v18 < v17);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v53 != -1;
}

void sub_23C5BC748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::TransferMapNormSCENEKIT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  float64x2_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float64x2_t v53;
  float32x4_t v54;
  uint64_t v55;
  void *__p[2];
  char v57;
  _QWORD v58[2];

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v55 = a1;
  v58[0] = 0;
  v58[1] = 0;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v58, (unsigned __int8 *)__p);
  if (v57 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v10;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v13 = *(_DWORD *)(a3 + 8);
  if (v13)
  {
    v14 = 0;
    v15 = *(_DWORD *)(a3 + 4);
    v12.f64[0] = 0.999;
    v53 = v12;
    __asm { FMOV            V0.4S, #1.0 }
    v54 = _Q0;
    v21 = v15;
    do
    {
      if (v21)
      {
        v22 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a3 + 16) + *(_DWORD *)(a3 + 12) * (v22 + v14 * v21)))
          {
            v23 = *(_QWORD *)(a4 + 16);
            v24 = (v22 + v14 * *(_DWORD *)(a4 + 4)) * *(_DWORD *)(a4 + 12);
            LODWORD(v58[0]) = *(_DWORD *)(v23 + 16 * v24 + 4);
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v55, (unsigned int *)v58, __p);
            v26 = *(unsigned int *)__p[0];
            v27 = *(_QWORD *)(v11 + 40);
            v28 = (*(_QWORD *)(v11 + 48) - v27) >> 4;
            if (v28 <= v26)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v29 = *((unsigned int *)__p[0] + 1);
            if (v28 <= v29)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v30 = *((unsigned int *)__p[0] + 2);
            if (v28 <= v30)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v31 = *(_QWORD *)(a5 + 16) + 16 * (v22 + v14 * *(_DWORD *)(a5 + 4)) * *(_DWORD *)(a5 + 12);
            if (v10 == -1)
            {
              v33 = *(float32x4_t *)v31;
              v41 = 0uLL;
              v40 = 0uLL;
            }
            else
            {
              v25.f64[0] = fabsf(*(float *)(v31 + 8));
              v32 = vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v53, v25).i64[0], 0), (int8x16_t)xmmword_23C605210, (int8x16_t)xmmword_23C603EC0);
              v33 = *(float32x4_t *)v31;
              v34 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL), *(int32x4_t *)v31);
              v35 = (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v31, (int32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL)), *(int32x4_t *)v31);
              v36 = vmlsq_f32(vmulq_f32(v34, (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v32, (int32x4_t)vextq_s8(v32, v32, 0xCuLL)), (int32x4_t)v32)), v35, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v32, v32, 4uLL), (int32x4_t)v32));
              v37 = vmulq_f32(v36, v36);
              v37.i32[3] = 0;
              v38 = vpaddq_f32(v37, v37);
              v39 = vpaddq_f32(v38, v38);
              v40 = (float32x4_t)xmmword_23C603EC0;
              if (v39.f32[0] > 0.0)
                v40 = vdivq_f32(v36, vsqrtq_f32(v39));
              v41 = vmlsq_f32(vmulq_f32(v35, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 4uLL), (int32x4_t)v40)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v40, (int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL)), (int32x4_t)v40), v34);
            }
            v42 = v23 + 16 * v24;
            v43 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + 16 * v30), (float)(1.0 - *(float *)(v42 + 8)) - *(float *)(v42 + 12)), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v27 + 16 * v26), *(float *)(v42 + 8)), vmulq_n_f32(*(float32x4_t *)(v27 + 16 * v29), *(float *)(v42 + 12))));
            v44 = vmulq_f32(v43, v43);
            v44.i32[3] = 0;
            v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
            v44.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v44.f32));
            v45 = vdivq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
            v46 = vmulq_f32(v45, v40);
            v46.i32[3] = 0;
            v47 = vmulq_f32(v45, v41);
            v47.i32[3] = 0;
            v48 = vmulq_f32(v45, v33);
            v48.i32[3] = 0;
            v45.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47))), COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))));
            v45.i64[1] = COERCE_UNSIGNED_INT(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)));
            v49 = vmulq_f32(v45, v45);
            v49.i32[3] = 0;
            v49.i64[0] = vpaddq_f32(v49, v49).u64[0];
            v49.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v49.f32));
            v46.i64[0] = 0x3F0000003F000000;
            v46.i64[1] = 0x3F0000003F000000;
            v50 = vmulq_f32(vaddq_f32(vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0)), v54), v46);
            v51 = *(_QWORD *)(a2 + 16) + 4 * (v22 + v14 * *(_DWORD *)(a2 + 4)) * *(_DWORD *)(a2 + 12);
            *(_DWORD *)(v51 + 8) = v50.i32[2];
            *(_QWORD *)v51 = v50.i64[0];
            v15 = *(_DWORD *)(a3 + 4);
          }
          ++v22;
          v21 = v15;
        }
        while (v22 < v15);
        v13 = *(_DWORD *)(a3 + 8);
        v21 = v15;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10 != -1;
}

void sub_23C5BCB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::TransferMapNormObj(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float v27;
  int v29;
  unsigned int v30;
  void *__p[2];
  char v32;
  float32x4_t v33;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v33 = 0uLL;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v33, (unsigned __int8 *)__p);
  if (v32 < 0)
    operator delete(__p[0]);
  v29 = v8;
  LODWORD(__p[0]) = v8;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v10 = *(_DWORD *)(a3 + 8);
  if (v10)
  {
    v11 = 0;
    v12 = *(_DWORD *)(a3 + 4);
    v13 = v12;
    do
    {
      if (v13)
      {
        v14 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a3 + 16) + *(_DWORD *)(a3 + 12) * (v14 + v13 * v11)))
          {
            v15 = *(_QWORD *)(a4 + 16);
            v16 = (v14 + *(_DWORD *)(a4 + 4) * v11) * *(_DWORD *)(a4 + 12);
            v30 = *(_DWORD *)(v15 + 16 * v16 + 4);
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v30, __p);
            v17 = *(unsigned int *)__p[0];
            v18 = *(_QWORD *)(v9 + 40);
            v19 = (*(_QWORD *)(v9 + 48) - v18) >> 4;
            if (v19 <= v17)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v20 = *((unsigned int *)__p[0] + 1);
            if (v19 <= v20)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v21 = *((unsigned int *)__p[0] + 2);
            if (v19 <= v21)
              __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
            v22 = 0;
            v23 = v15 + 16 * v16;
            v24 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v18 + 16 * v21), (float)(1.0 - *(float *)(v23 + 8)) - *(float *)(v23 + 12)), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v18 + 16 * v17), *(float *)(v23 + 8)), vmulq_n_f32(*(float32x4_t *)(v18 + 16 * v20), *(float *)(v23 + 12))));
            v25 = vmulq_f32(v24, v24);
            v25.i32[3] = 0;
            v25.i64[0] = vpaddq_f32(v25, v25).u64[0];
            v25.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v25.f32));
            v33 = vdivq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0));
            v26 = *(_QWORD *)(a2 + 16) + 4 * *(_DWORD *)(a2 + 12) * (v14 + v11 * *(_DWORD *)(a2 + 4));
            do
            {
              v27 = (v33.f32[v22] + 1.0) * 0.5;
              *(float *)(v26 + v22 * 4) = v27;
              ++v22;
            }
            while (v22 != 3);
            v12 = *(_DWORD *)(a3 + 4);
          }
          ++v14;
          v13 = v12;
        }
        while (v14 < v12);
        v10 = *(_DWORD *)(a3 + 8);
        v13 = v12;
      }
      ++v11;
    }
    while (v11 < v10);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v29 != -1;
}

void sub_23C5BCE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::TransferMapDisp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  float *v28;
  double v29;
  double v30;

  v5 = *(_DWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_18;
  v6 = 0;
  v7 = *(unsigned int *)(a2 + 4);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 12);
  v10 = 1;
  v11 = -3.4028e38;
  v12 = 3.4028e38;
  do
  {
    if ((_DWORD)v7)
    {
      v13 = 0;
      v14 = *(_QWORD *)(a3 + 16);
      v15 = *(_DWORD *)(a3 + 4) * v6;
      v16 = *(_DWORD *)(a3 + 12);
      v17 = *(_QWORD *)(a1 + 16);
      v18 = *(unsigned int *)(a1 + 12);
      v19 = *(_DWORD *)(a1 + 4) * v18 * v6;
      do
      {
        if (*(_BYTE *)(v8 + (v9 * (v7 * v6 + v13))))
        {
          v20 = (_DWORD *)(v14 + 16 * ((v15 + v13) * v16));
          if ((_DWORD)v18)
          {
            v21 = (_DWORD *)(v17 + 4 * v19);
            v22 = v18;
            do
            {
              *v21++ = *v20;
              --v22;
            }
            while (v22);
          }
          if (*(float *)v20 >= v11)
            v11 = *(float *)v20;
          if (v12 >= *(float *)v20)
            v12 = *(float *)v20;
          v23 = (v10 & 1) == 0;
          v10 = 0;
          if (!v23)
          {
            v12 = *(float *)v20;
            v11 = *(float *)v20;
          }
        }
        ++v13;
        v19 += v18;
      }
      while (v13 != v7);
    }
    ++v6;
  }
  while (v6 != v5);
  if ((v10 & 1) == 0)
  {
    v26 = -v12;
    if (v11 >= (float)-v12)
      v26 = v11;
    if (v26 > 0.0)
    {
      v27 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
      if ((_DWORD)v27)
      {
        v28 = *(float **)(a1 + 16);
        do
        {
          *v28 = *v28 + 0.5;
          ++v28;
          --v27;
        }
        while (v27);
      }
    }
    if (a5)
    {
      v29 = v12;
      if (*(double *)(a4 + 336) < v29)
        v29 = *(double *)(a4 + 336);
      v30 = v11;
      if (*(double *)(a4 + 344) > v30)
        v30 = *(double *)(a4 + 344);
      *(double *)(a4 + 336) = v29;
      *(double *)(a4 + 344) = v30;
    }
  }
  else
  {
LABEL_18:
    v24 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
    if ((_DWORD)v24)
    {
      v25 = *(float **)(a1 + 16);
      do
      {
        *v25 = *v25 + 0.5;
        ++v25;
        --v24;
      }
      while (v24);
    }
    v10 = 1;
  }
  return (v10 & 1) == 0;
}

BOOL cv3d::cv::gess::alg::internal::GetProjectionIntersections(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, float32_t a8)
{
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  float *v22;
  float32x4_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t *v35;
  float32x4_t *v36;
  unsigned int *v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  char *v45;
  float v46;
  unsigned int v47;
  char *v48;
  float v49;
  unsigned int v50;
  char *v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  char *v64;
  float v65;
  unsigned int v66;
  char *v67;
  float v68;
  unsigned int v69;
  uint64_t v71;
  int v72;
  BOOL v73;
  _QWORD *v75;
  BOOL v76;
  uint64_t v77;
  float32x4_t v79;
  float32x4_t v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  std::vector<unsigned int> v85;
  uint64_t v86;
  uint64_t v87;
  void *__p[3];
  void *v89[3];
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  void *v94[2];
  char v95;

  std::string::basic_string[abi:ne180100]<0>(v94, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v92 = 0;
  v93 = 0;
  v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v92, (unsigned __int8 *)v94);
  if (v95 < 0)
    operator delete(v94[0]);
  LODWORD(v94[0]) = v15;
  v77 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v94);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v94, 3uLL);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v92, 0x40000uLL);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v90, 0x40000uLL);
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(v89, 0xAAAAAAAAAAAAAAABLL * ((v93 - v92) >> 4));
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((v91 - v90) >> 4));
  v87 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a3, (double *)&v87);
  v86 = 0;
  std::vector<unsigned int>::vector(&v85, 0x80000uLL);
  v16 = *(_DWORD *)(a2 + 8);
  if (!v16)
  {
    v56 = 1;
    goto LABEL_81;
  }
  v75 = a3;
  v17 = 0;
  v18 = 0;
  v19 = *(_DWORD *)(a2 + 4);
  v20 = v19;
  v76 = 1;
  do
  {
    if (v20)
    {
      v21 = 0;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v21 + v20 * v17)))
        {
          v84 = *(_DWORD *)(*(_QWORD *)(a7 + 16) + 4 * (v21 + *(_DWORD *)(a7 + 4) * v17) * *(_DWORD *)(a7 + 12));
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v84, v94);
          v22 = (float *)(*(_QWORD *)(a6 + 16) + 16 * (v21 + *(_DWORD *)(a6 + 4) * v17) * *(_DWORD *)(a6 + 12));
          v82 = *v22;
          v81 = v22[1];
          v83 = v22[2];
          v80 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v94[0]);
          v79 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v94[0] + 1));
          v23 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v94[0] + 2));
          v24 = *(unsigned int *)v94[0];
          v25 = *(_QWORD *)(v77 + 40);
          v26 = (*(_QWORD *)(v77 + 48) - v25) >> 4;
          if (v26 <= v24)
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          v27 = *((unsigned int *)v94[0] + 1);
          if (v26 <= v27)
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          v28 = *((unsigned int *)v94[0] + 2);
          if (v26 <= v28)
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          v29 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v28), v83), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v27), v81), vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v24), v82)));
          v30 = vmulq_f32(v29, v29);
          v30.i32[3] = 0;
          v31 = vpaddq_f32(v30, v30);
          v32 = vpaddq_f32(v31, v31);
          v33 = (float32x4_t)xmmword_23C603EC0;
          if (v32.f32[0] > 0.0)
            v33 = vdivq_f32(v29, vsqrtq_f32(v32));
          v34 = vaddq_f32(vaddq_f32(vmulq_n_f32(v80, v82), vmulq_n_f32(v79, v81)), vmulq_n_f32(*v23, v83));
          v35 = (float32x4_t *)&v92[48 * v18];
          *v35 = v34;
          v35[1] = v33;
          v35[2].i32[0] = 0;
          v35[2].f32[1] = a8;
          v36 = (float32x4_t *)&v90[48 * v18];
          *v36 = v34;
          v36[1] = vnegq_f32(v33);
          v36[2].i32[0] = 0;
          v36[2].f32[1] = a8;
          v37 = &v85.__begin_[2 * v18];
          *v37 = v21;
          v37[1] = v17;
          if (++v18 == 0x40000)
          {
            v86 = 2;
            cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
            v38 = v76 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v92, v89);
            LODWORD(v86) = 1;
            cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
            v76 = v38 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v90, __p);
            v39 = 0;
            v40 = 1;
            v41 = 12;
            while (1)
            {
              v42 = v85.__begin_[v40 - 1];
              v43 = v85.__begin_[v40];
              v44 = (char *)v89[0];
              v45 = (char *)v89[0] + v41;
              v46 = *(float *)((char *)v89[0] + v41 - 12);
              if (v46 == -1.0)
              {
                v52 = (char *)__p[0] + v41 - 12;
                v49 = *(float *)v52;
                if (*(float *)v52 != -1.0 && *(_DWORD *)((char *)__p[0] + v41 - 8) < a4)
                  goto LABEL_33;
              }
              else
              {
                v47 = *((_DWORD *)v45 - 2);
                v48 = (char *)__p[0] + v41 - 12;
                v49 = *(float *)v48;
                if (*(float *)v48 == -1.0)
                {
                  if (v47 < a4)
                  {
LABEL_36:
                    v53 = *(_QWORD *)(a5 + 16) + 16 * (v42 + *(_DWORD *)(a5 + 4) * v43) * *(_DWORD *)(a5 + 12);
                    *(_QWORD *)v53 = *(_QWORD *)(v45 - 12);
                    *(_DWORD *)(v53 + 8) = *(_DWORD *)&v44[v41 - 4];
                    v54 = *(_DWORD *)&v44[v41];
                    goto LABEL_41;
                  }
                }
                else
                {
                  v50 = *(_DWORD *)((char *)__p[0] + v41 - 8);
                  if (v47 < a4 && v50 < a4)
                  {
                    if (v46 >= v49)
                      *(float *)v48 = -v49;
                    else
                      v48 = (char *)v89[0] + 16 * v39;
                    v53 = *(_QWORD *)(a5 + 16) + 16 * (v42 + *(_DWORD *)(a5 + 4) * v43) * *(_DWORD *)(a5 + 12);
                    *(_QWORD *)v53 = *(_QWORD *)v48;
                    *(_DWORD *)(v53 + 8) = *((_DWORD *)v48 + 2);
                    v54 = *((_DWORD *)v48 + 3);
                    goto LABEL_41;
                  }
                  if (v47 < a4)
                    goto LABEL_36;
                  if (v50 < a4)
                  {
                    v52 = (char *)__p[0] + 16 * v39;
LABEL_33:
                    *(float *)v52 = -v49;
                    v53 = *(_QWORD *)(a5 + 16) + 16 * (v42 + *(_DWORD *)(a5 + 4) * v43) * *(_DWORD *)(a5 + 12);
                    *(_QWORD *)v53 = *(_QWORD *)v52;
                    *(_DWORD *)(v53 + 8) = *((_DWORD *)v52 + 2);
                    v54 = *((_DWORD *)v52 + 3);
LABEL_41:
                    *(_DWORD *)(v53 + 12) = v54;
                    goto LABEL_42;
                  }
                }
              }
              *(_BYTE *)(*(_QWORD *)(a2 + 16) + (v42 + *(_DWORD *)(a2 + 4) * v43) * *(_DWORD *)(a2 + 12)) = 0;
LABEL_42:
              ++v39;
              v41 += 16;
              v40 += 2;
              if (v41 == 4194316)
              {
                v18 = 0;
                break;
              }
            }
          }
          v19 = *(_DWORD *)(a2 + 4);
        }
        ++v21;
        v20 = v19;
      }
      while (v21 < v19);
      v16 = *(_DWORD *)(a2 + 8);
      v20 = v19;
    }
    ++v17;
  }
  while (v17 < v16);
  if (!v18)
  {
    a3 = v75;
    v56 = v76;
    goto LABEL_81;
  }
  v86 = 2;
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
  v55 = v76 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v92, v89);
  LODWORD(v86) = 1;
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(v75, &v86);
  v56 = v55 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)v75, (uint64_t *)&v90, __p);
  v57 = 0;
  v58 = 0;
  v59 = 1;
  v60 = 1;
  do
  {
    v61 = v85.__begin_[v59 - 1];
    v62 = v85.__begin_[v59];
    v63 = (char *)v89[0];
    v64 = (char *)v89[0] + v57;
    v65 = *(float *)((char *)v89[0] + v57);
    if (v65 == -1.0)
    {
      v68 = *(float *)((char *)__p[0] + v57);
      if (v68 == -1.0 || *(_DWORD *)((char *)__p[0] + v57 + 4) >= a4)
      {
LABEL_73:
        *(_BYTE *)(*(_QWORD *)(a2 + 16) + (v61 + *(_DWORD *)(a2 + 4) * v62) * *(_DWORD *)(a2 + 12)) = 0;
        goto LABEL_79;
      }
      v67 = (char *)__p[0] + 16 * v58;
    }
    else
    {
      v66 = *((_DWORD *)v64 + 1);
      v67 = (char *)__p[0] + v57;
      v68 = *(float *)((char *)__p[0] + v57);
      if (v68 == -1.0)
      {
        if (v66 >= a4)
          goto LABEL_73;
LABEL_74:
        v71 = *(_QWORD *)(a5 + 16) + 16 * (v61 + *(_DWORD *)(a5 + 4) * v62) * *(_DWORD *)(a5 + 12);
        *(_QWORD *)v71 = *(_QWORD *)((char *)v89[0] + v57);
        *(_DWORD *)(v71 + 8) = *(_DWORD *)&v63[v57 + 8];
        v72 = *(_DWORD *)&v63[v57 + 12];
        goto LABEL_78;
      }
      v69 = *((_DWORD *)v67 + 1);
      if (v66 < a4 && v69 < a4)
      {
        if (v65 >= v68)
        {
          v64 = (char *)__p[0] + 16 * v58;
          *(float *)v67 = -v68;
        }
        v71 = *(_QWORD *)(a5 + 16) + 16 * (v61 + *(_DWORD *)(a5 + 4) * v62) * *(_DWORD *)(a5 + 12);
        *(_QWORD *)v71 = *(_QWORD *)v64;
        *(_DWORD *)(v71 + 8) = *((_DWORD *)v64 + 2);
        v72 = *((_DWORD *)v64 + 3);
        goto LABEL_78;
      }
      if (v66 < a4)
        goto LABEL_74;
      if (v69 >= a4)
        goto LABEL_73;
    }
    *(float *)v67 = -v68;
    v71 = *(_QWORD *)(a5 + 16) + 16 * (v61 + *(_DWORD *)(a5 + 4) * v62) * *(_DWORD *)(a5 + 12);
    *(_QWORD *)v71 = *(_QWORD *)v67;
    *(_DWORD *)(v71 + 8) = *((_DWORD *)v67 + 2);
    v72 = *((_DWORD *)v67 + 3);
LABEL_78:
    *(_DWORD *)(v71 + 12) = v72;
LABEL_79:
    v58 = v60;
    v57 += 16;
    v73 = v18 > v60++;
    v59 += 2;
  }
  while (v73);
  a3 = v75;
LABEL_81:
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v87);
  if (v85.__begin_)
  {
    v85.__end_ = v85.__begin_;
    operator delete(v85.__begin_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v94[0])
  {
    v94[1] = v94[0];
    operator delete(v94[0]);
  }
  return v56;
}

void sub_23C5BD854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;
  void *v41;
  void *v42;

  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  v40 = *(void **)(v38 - 200);
  if (v40)
  {
    *(_QWORD *)(v38 - 192) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 176);
  if (v41)
  {
    *(_QWORD *)(v38 - 168) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v38 - 152);
  if (v42)
  {
    *(_QWORD *)(v38 - 144) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateDispMapWithFaceNormals(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, float32_t a8, uint64_t a9, uint64_t a10, char a11)
{
  int v19;
  uint64_t v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  float *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  float32x4_t v38;
  float32x4_t *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  _BYTE *v48;
  int v49;
  int v50;
  std::vector<unsigned int>::pointer v51;
  int v52;
  unsigned int v53;
  float v54;
  unsigned int v55;
  float v56;
  unsigned int v57;
  char *v59;
  float v60;
  uint64_t v61;
  std::vector<unsigned int>::pointer begin;
  char *v63;
  uint64_t v64;
  int v65;
  int v66;
  _BYTE *v67;
  int v68;
  int v69;
  float *v70;
  unsigned int v71;
  unsigned int v72;
  float *v73;
  unsigned int v74;
  unsigned int v75;
  float v76;
  float v77;
  float v78;
  unsigned int v79;
  float *v81;
  float v82;
  BOOL v83;
  int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  int v88;
  float v89;
  float v90;
  char v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  BOOL v98;
  uint64_t v99;
  float *v100;
  float v101;
  uint64_t v102;
  float *v103;
  double v104;
  double v105;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float v110;
  float v111;
  float v112;
  float32x4_t v113;
  unsigned int v114;
  std::vector<unsigned int> v115;
  uint64_t v116;
  uint64_t v117;
  void *__p[3];
  void *v119[3];
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  void *v124[3];
  int v125;
  uint64_t v126;
  int v127;
  _BYTE *v128;

  v19 = *(_DWORD *)(a2 + 12);
  v125 = 0;
  v126 = *(_QWORD *)(a2 + 4);
  v127 = v19;
  v128 = 0;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v125);
  v20 = (*(_DWORD *)(a2 + 8) * *(_DWORD *)(a2 + 4) * *(_DWORD *)(a2 + 12));
  if ((_DWORD)v20)
  {
    v21 = *(char **)(a2 + 16);
    v22 = v128;
    do
    {
      v23 = *v21++;
      *v22++ = v23;
      --v20;
    }
    while (v20);
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v124, 3uLL);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v122, 0x40000uLL);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v120, 0x40000uLL);
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(v119, 0xAAAAAAAAAAAAAAABLL * ((v123 - v122) >> 4));
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((v121 - v120) >> 4));
  v117 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a3, (double *)&v117);
  v116 = 0;
  std::vector<unsigned int>::vector(&v115, 0x80000uLL);
  v24 = HIDWORD(v126);
  if (HIDWORD(v126))
  {
    v25 = 0;
    v26 = 0;
    v27 = v126;
    v28 = v126;
    LOBYTE(v29) = 1;
    do
    {
      if (v28)
      {
        v30 = 0;
        do
        {
          if (v128[v127 * (v30 + v28 * v25)])
          {
            v114 = *(_DWORD *)(*(_QWORD *)(a6 + 16) + 4 * (v30 + *(_DWORD *)(a6 + 4) * v25) * *(_DWORD *)(a6 + 12));
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v114, v124);
            v31 = (float *)(*(_QWORD *)(a5 + 16) + 16 * (v30 + *(_DWORD *)(a5 + 4) * v25) * *(_DWORD *)(a5 + 12));
            v111 = *v31;
            v110 = v31[1];
            v112 = v31[2];
            v109 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v124[0]);
            v108 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v124[0] + 1));
            v107 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v124[0] + 2));
            cv3d::cv::gess::math::FaceNormal(a1, v114, &v113);
            v32 = vmulq_f32(v113, v113);
            v32.i32[3] = 0;
            v33 = vpaddq_f32(v32, v32);
            v34 = vpaddq_f32(v33, v33);
            v35 = (float32x4_t)xmmword_23C603EC0;
            if (v34.f32[0] > 0.0)
              v35 = vdivq_f32(v113, vsqrtq_f32(v34));
            v36 = vaddq_f32(vaddq_f32(vmulq_n_f32(v109, v111), vmulq_n_f32(v108, v110)), vmulq_n_f32(v107, v112));
            v113 = v35;
            v37 = (float32x4_t *)&v122[48 * v26];
            *v37 = v36;
            v37[1] = v35;
            v37[2].i32[0] = 0;
            v37[2].f32[1] = a8;
            v38 = vnegq_f32(v113);
            v39 = (float32x4_t *)&v120[48 * v26];
            *v39 = v36;
            v39[1] = v38;
            v39[2].i32[0] = 0;
            v39[2].f32[1] = a8;
            v40 = &v115.__begin_[2 * v26];
            *v40 = v30;
            v40[1] = v25;
            if (++v26 == 0x40000)
            {
              v116 = 2;
              cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v116);
              v29 = (v29 & 1) != 0
                 && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)a3, (uint64_t *)&v122, v119);
              LODWORD(v116) = 1;
              cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v116);
              if (v29)
                LOBYTE(v29) = cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)a3, (uint64_t *)&v120, __p);
              v41 = 0;
              v42 = 0;
              v43 = (char *)v119[0];
              v44 = (char *)__p[0];
              v45 = *(_QWORD *)(a7 + 16);
              v46 = *(_DWORD *)(a7 + 4);
              v47 = *(_DWORD *)(a7 + 12);
              v48 = v128;
              v49 = v126;
              v50 = v127;
              v51 = v115.__begin_ + 1;
              while (1)
              {
                v52 = *(v51 - 1);
                v53 = *v51;
                v54 = *(float *)&v43[v41];
                if (v54 == -1.0)
                {
                  v59 = &v44[v41];
                  v56 = *(float *)&v44[v41];
                  if (v56 == -1.0 || *((_DWORD *)v59 + 1) >= a4)
                    goto LABEL_32;
                }
                else
                {
                  v55 = *(_DWORD *)&v43[v41 + 4];
                  v56 = *(float *)&v44[v41];
                  if (v56 == -1.0)
                  {
                    if (v55 < a4)
                      goto LABEL_35;
LABEL_32:
                    v48[(v52 + v49 * v53) * v50] = 0;
                    goto LABEL_36;
                  }
                  v57 = *(_DWORD *)&v44[v41 + 4];
                  if (v55 < a4 && v57 < a4)
                  {
                    if (v54 >= v56)
                    {
                      v54 = -v56;
                      *(float *)&v44[v41] = -v56;
                    }
LABEL_35:
                    *(float *)(v45 + 4 * (v52 + v46 * v53) * v47) = v54;
                    goto LABEL_36;
                  }
                  if (v55 < a4)
                    goto LABEL_35;
                  if (v57 >= a4)
                    goto LABEL_32;
                  v59 = &v44[16 * v42];
                }
                v60 = -v56;
                *(float *)v59 = v60;
                *(float *)(v45 + 4 * (v52 + v46 * v53) * v47) = v60;
LABEL_36:
                v51 += 2;
                ++v42;
                v41 += 16;
                if (v41 == 0x400000)
                {
                  v26 = 0;
                  break;
                }
              }
            }
            v27 = v126;
          }
          ++v30;
          v28 = v27;
        }
        while (v30 < v27);
        v24 = HIDWORD(v126);
        v28 = v27;
      }
      ++v25;
    }
    while (v25 < v24);
    if (v26)
    {
      v116 = 2;
      cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v116);
      v29 = (v29 & 1) != 0
         && cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)a3, (uint64_t *)&v122, v119);
      LODWORD(v116) = 1;
      cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v116);
      if (v29)
        LOBYTE(v29) = cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays((uint64_t)a3, (uint64_t *)&v120, __p);
      v61 = 0;
      begin = v115.__begin_;
      v63 = (char *)__p[0];
      v64 = *(_QWORD *)(a7 + 16);
      v65 = *(_DWORD *)(a7 + 4);
      v66 = *(_DWORD *)(a7 + 12);
      v67 = v128;
      v68 = v126;
      v69 = v127;
      v70 = (float *)((char *)v119[0] + 4);
      v71 = 1;
      v72 = 1;
      v73 = (float *)__p[0];
      do
      {
        v74 = begin[v71 - 1];
        v75 = begin[v71];
        v76 = *(v70 - 1);
        if (v76 == -1.0)
        {
          v78 = *v73;
          if (*v73 == -1.0 || *((_DWORD *)v73 + 1) >= a4)
            goto LABEL_65;
          v81 = (float *)&v63[16 * v61];
        }
        else
        {
          v77 = *v70;
          v78 = *v73;
          if (*v73 == -1.0)
          {
            if (LODWORD(v77) < a4)
              goto LABEL_68;
LABEL_65:
            v67[(v74 + v68 * v75) * v69] = 0;
            goto LABEL_69;
          }
          v79 = *((_DWORD *)v73 + 1);
          if (LODWORD(v77) < a4 && v79 < a4)
          {
            if (v76 >= v78)
            {
              v76 = -v78;
              *v73 = -v78;
            }
LABEL_68:
            *(float *)(v64 + 4 * (v74 + v65 * v75) * v66) = v76;
            goto LABEL_69;
          }
          if (LODWORD(v77) < a4)
            goto LABEL_68;
          v81 = v73;
          if (v79 >= a4)
            goto LABEL_65;
        }
        v82 = -v78;
        *v81 = v82;
        *(float *)(v64 + 4 * (v74 + v65 * v75) * v66) = v82;
LABEL_69:
        v61 = v72;
        v70 += 4;
        v73 += 4;
        v83 = v26 > v72++;
        v71 += 2;
      }
      while (v83);
    }
  }
  else
  {
    LOBYTE(v29) = 1;
  }
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v117);
  if (!HIDWORD(v126))
    goto LABEL_89;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v88 = *(_DWORD *)(a7 + 12);
  v89 = -3.4028e38;
  v90 = 3.4028e38;
  v91 = 1;
  do
  {
    v92 = v126;
    v93 = v84;
    v94 = v85;
    if ((_DWORD)v126)
    {
      do
      {
        if (v128[v93])
        {
          v87 = *(_QWORD *)(a7 + 16);
          v95 = *(float *)(v87 + 4 * v94);
          if (v95 >= v89)
            v96 = *(float *)(v87 + 4 * v94);
          else
            v96 = v89;
          if (v90 >= v95)
            v97 = *(float *)(v87 + 4 * v94);
          else
            v97 = v90;
          v98 = (v91 & 1) == 0;
          v91 = 0;
          if (v98)
            v89 = v96;
          else
            v89 = *(float *)(v87 + 4 * v94);
          if (v98)
            v90 = v97;
          else
            v90 = *(float *)(v87 + 4 * v94);
        }
        v94 += v88;
        v93 += v127;
        --v92;
      }
      while (v92);
    }
    ++v86;
    v85 += *(_DWORD *)(a7 + 4) * v88;
    v84 += v126 * v127;
  }
  while (v86 != HIDWORD(v126));
  if ((v91 & 1) == 0)
  {
    v101 = -v90;
    if (v89 >= (float)-v90)
      v101 = v89;
    if (v101 > 0.0)
    {
      v102 = (*(_DWORD *)(a7 + 8) * *(_DWORD *)(a7 + 4) * *(_DWORD *)(a7 + 12));
      if ((_DWORD)v102)
      {
        v103 = *(float **)(a7 + 16);
        do
        {
          *v103 = *v103 + 0.5;
          ++v103;
          --v102;
        }
        while (v102);
      }
      if ((v29 & 1) != 0)
        LOBYTE(v29) = cv3d::cv::gess::util::ImageT<float>::Dilate(a7, v128, 5);
      else
        LOBYTE(v29) = 0;
    }
    if (a11)
    {
      v104 = v90;
      if (*(double *)(a10 + 336) < v90)
        v104 = *(double *)(a10 + 336);
      v105 = v89;
      if (*(double *)(a10 + 344) > v89)
        v105 = *(double *)(a10 + 344);
      *(double *)(a10 + 336) = v104;
      *(double *)(a10 + 344) = v105;
    }
  }
  else
  {
LABEL_89:
    v99 = (*(_DWORD *)(a7 + 8) * *(_DWORD *)(a7 + 4) * *(_DWORD *)(a7 + 12));
    if ((_DWORD)v99)
    {
      v100 = *(float **)(a7 + 16);
      do
      {
        *v100 = *v100 + 0.5;
        ++v100;
        --v99;
      }
      while (v99);
    }
    LOBYTE(v29) = 0;
  }
  if (v115.__begin_)
  {
    v115.__end_ = v115.__begin_;
    operator delete(v115.__begin_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  if (v128)
    MEMORY[0x2426211A0](v128, 0x1000C8077774924);
  return v29 & 1;
}

void sub_23C5BE10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);
  if (a35)
    operator delete(a35);
  v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(_QWORD *)(v36 - 208) = v38;
    operator delete(v38);
  }
  v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(_QWORD *)(v36 - 184) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(_QWORD *)(v36 - 160) = v40;
    operator delete(v40);
  }
  v41 = *(_QWORD *)(v36 - 128);
  if (v41)
    MEMORY[0x2426211A0](v41, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::ImageT<float>::Dilate(uint64_t a1, const void *a2, int a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  int v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  unint64_t v52;
  uint64_t v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t *__p;
  uint64_t *v58;
  uint64_t *v59;
  void *v60;
  char *v61;
  char *v62;

  v54 = *(_DWORD *)(a1 + 4);
  v5 = (void *)operator new[]();
  v6 = a1;
  v7 = *(unsigned int *)(a1 + 4);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = (v8 * v7);
  v55 = v5;
  v53 = a1;
  if ((_DWORD)v9)
  {
    memcpy(v5, a2, v9);
    v6 = a1;
    v5 = v55;
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v10 = v54;
  if ((int)v8 >= 1)
  {
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((int)v7 >= 1)
      {
        v13 = 0;
        v14 = v10 * i;
        v15 = i << 32;
        do
        {
          if (*((_BYTE *)v5 + (v14 + v13)))
          {
            v16 = 0;
            while (1)
            {
              v17 = dword_23C60CB30[v16] + v13;
              if (v17 >= 0 && v17 < (int)v7)
              {
                v18 = dword_23C60CB50[v16] + i;
                if ((v18 & 0x80000000) == 0 && v18 < (int)v8 && !*((_BYTE *)v5 + (v17 + v18 * v10)))
                  break;
              }
              if (++v16 == 8)
                goto LABEL_34;
            }
            if (v11 >= v62)
            {
              v19 = (v11 - (_BYTE *)v60) >> 3;
              if ((unint64_t)(v19 + 1) >> 61)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v20 = (v62 - (_BYTE *)v60) >> 2;
              if (v20 <= v19 + 1)
                v20 = v19 + 1;
              if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v21);
              else
                v22 = 0;
              v23 = &v22[8 * v19];
              *(_QWORD *)v23 = v15 | v13;
              v11 = v23 + 8;
              v25 = (char *)v60;
              v24 = v61;
              if (v61 != v60)
              {
                do
                {
                  v26 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *((_QWORD *)v23 - 1) = v26;
                  v23 -= 8;
                }
                while (v24 != v25);
                v24 = (char *)v60;
              }
              v60 = v23;
              v61 = v11;
              v62 = &v22[8 * v21];
              if (v24)
                operator delete(v24);
              v5 = v55;
              v6 = v53;
              v10 = v54;
            }
            else
            {
              *(_QWORD *)v11 = v15 | v13;
              v11 += 8;
            }
            v61 = v11;
          }
LABEL_34:
          ++v13;
        }
        while (v13 != v7);
      }
    }
  }
  __p = 0;
  v59 = 0;
  while (1)
  {
    v27 = (char *)v60;
    if (v60 == v61)
      break;
    if ((a3 & 0x80000000) == 0)
    {
      if (!a3)
        break;
      --a3;
    }
    v28 = 0;
    v29 = __p;
    v58 = __p;
    v30 = (v61 - (_BYTE *)v60) >> 3;
    if (v30 <= 1)
      v30 = 1;
    v52 = v30;
    do
    {
      v31 = 0;
      v32 = (char *)v60 + 8 * v28;
      v56 = *(_QWORD *)(v6 + 16) + 4 * ((*v32 + *(_DWORD *)(v6 + 4) * v32[1]) * *(_DWORD *)(v6 + 12));
      v33 = v55;
      do
      {
        v34 = dword_23C60CB30[v31];
        v35 = (v34 + *v32);
        if (v34 + *v32 >= 0 && (int)v35 < (int)v7)
        {
          v36 = (dword_23C60CB50[v31] + v32[1]);
          if ((v36 & 0x80000000) == 0 && (int)v36 < (int)v8)
          {
            v37 = (v35 + v36 * v10);
            if (!v33[v37])
            {
              v33[v37] = 1;
              v38 = *(unsigned int *)(v6 + 12);
              if ((_DWORD)v38)
              {
                v39 = (_DWORD *)(*(_QWORD *)(v6 + 16) + 4 * ((v35 + *(_DWORD *)(v6 + 4) * v36) * v38));
                v40 = (int *)v56;
                do
                {
                  v41 = *v40++;
                  *v39++ = v41;
                  --v38;
                }
                while (v38);
              }
              if (v29 >= v59)
              {
                v42 = v29 - __p;
                if ((unint64_t)(v42 + 1) >> 61)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v43 = ((char *)v59 - (char *)__p) >> 2;
                if (v43 <= v42 + 1)
                  v43 = v42 + 1;
                if ((unint64_t)((char *)v59 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v43;
                if (v44)
                  v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v59, v44);
                else
                  v45 = 0;
                v46 = (uint64_t *)&v45[8 * v42];
                *v46 = v35 | (v36 << 32);
                v29 = v46 + 1;
                v47 = v58;
                if (v58 != __p)
                {
                  do
                  {
                    v48 = *--v47;
                    *--v46 = v48;
                  }
                  while (v47 != __p);
                  v47 = __p;
                }
                __p = v46;
                v59 = (uint64_t *)&v45[8 * v44];
                if (v47)
                  operator delete(v47);
                v33 = v55;
                v6 = v53;
                v10 = v54;
              }
              else
              {
                *v29++ = v35 | (v36 << 32);
              }
              v58 = v29;
            }
          }
        }
        ++v31;
      }
      while (v31 != 8);
      ++v28;
    }
    while (v28 != v52);
    std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(&v60, __p, v29, v29 - __p);
    v10 = v54;
    v6 = v53;
  }
  if (__p)
  {
    operator delete(__p);
    v27 = (char *)v60;
  }
  v49 = v55;
  if (v27)
  {
    v61 = v27;
    operator delete(v27);
    v49 = v55;
  }
  MEMORY[0x2426211A0](v49, 0x1000C8077774924);
  return 1;
}

void sub_23C5BE660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v22;

  v22 = a15;
  if (__p)
  {
    operator delete(__p);
    v22 = a15;
  }
  MEMORY[0x2426211A0](v22, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateEdgeDistanceMap(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, int a6)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  unsigned int i;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  int v23;
  float v24;
  uint64_t v25;
  int *v26;
  int v27;
  float v28;
  float *v29;
  uint64_t v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  unint64_t v35;
  float *v36;
  float *v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  _QWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v67;
  void *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v76;
  _DWORD *v77;
  float32x4_t v78;
  _QWORD *v79;
  unsigned int v80;
  void *__p[3];
  void *v82[3];
  float *v83;
  float *v84;

  v8 = (_QWORD *)(a1 + 104);
  v9 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
  LODWORD(v82[0]) = 0;
  std::vector<float>::vector(&v83, v9, v82);
  if (v8[1] == *v8)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      LODWORD(v82[0]) = v11 - 1;
      if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)v82))
        v83[v10] = 1.0;
      v10 = v11;
      v12 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
    }
    while (v12 > v11++);
  }
  if ((char *)v84 - (char *)v83 >= 1)
    memset_pattern16(v83, &unk_23C60CB20, 4 * (((unint64_t)((char *)v84 - (char *)v83) >> 2) - ((unint64_t)((char *)v84 - (char *)v83) > 3))+ 4);
  v12 = v12;
  if ((_DWORD)v12)
  {
    v72 = operator new(4 * v12);
    memset_pattern16(v72, &unk_23C603E70, 4 * v12);
    v14 = 0;
    do
    {
      LODWORD(v82[0]) = v14;
      if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)v82))
      {
        v83[v14] = 0.0;
        *((_DWORD *)v72 + v14) = 3;
      }
      ++v14;
    }
    while (v12 != v14);
  }
  else
  {
    v72 = 0;
  }
  v15 = v72;
  if (a6)
  {
    v16 = 0;
    while (!(_DWORD)v12)
    {
LABEL_37:
      if (++v16 == a6)
        goto LABEL_38;
    }
    v17 = 0;
    do
    {
      if (*((_DWORD *)v72 + v17) == 3)
      {
        LODWORD(__p[0]) = v17;
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v82, v8, (unsigned int *)__p);
        for (i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v82);
              i != -1;
              i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v82))
        {
          v19 = i;
          v78 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), i);
          v20 = vsubq_f32(v78, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v17));
          v21 = vmulq_f32(v20, v20);
          v21.i32[3] = 0;
          v22 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)));
          v23 = *((_DWORD *)v72 + v19);
          if (v23 == 2)
          {
            v24 = v22 + v83[v17];
            if (v83[v19] > v24)
              v83[v19] = v24;
          }
          else if (v23 == 1)
          {
            v83[v19] = v22 + v83[v17];
            *((_DWORD *)v72 + v19) = 2;
          }
        }
      }
      ++v17;
    }
    while (v17 != v12);
    v25 = v12;
    v26 = (int *)v72;
    while (*v26 != 3)
    {
      if (*v26 == 2)
      {
        v27 = 3;
LABEL_35:
        *v26 = v27;
      }
      ++v26;
      if (!--v25)
        goto LABEL_37;
    }
    v27 = 4;
    goto LABEL_35;
  }
LABEL_38:
  if ((_DWORD)v12)
  {
    v28 = -1.0;
    v29 = v83;
    v30 = v12;
    do
    {
      v31 = *v29++;
      v32 = v31;
      if (v31 > v28)
        v28 = v32;
      --v30;
    }
    while (v30);
    if (v28 < 0.00000001)
      v28 = 0.00000001;
    v33 = v83;
    do
    {
      v34 = 0.0;
      if (*v33 >= -0.001)
        v34 = (float)(v28 - *v33) / v28;
      *v33++ = v34;
      --v12;
    }
    while (v12);
  }
  v35 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
  LODWORD(__p[0]) = 1056964608;
  std::vector<float>::vector(v82, v35, __p);
  cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(a1, v82, &v83, 5, 1);
  v36 = v83;
  v37 = v84;
  if (v83 != v84)
  {
    while (1)
    {
      v38 = *v36;
      if (*v36 > 1.0)
        break;
      v39 = 0.0;
      if (v38 >= 0.0)
        goto LABEL_53;
LABEL_54:
      *v36++ = v39;
      if (v36 == v37)
        goto LABEL_55;
    }
    *v36 = 1.0;
    v38 = 1.0;
LABEL_53:
    v39 = v38;
    goto LABEL_54;
  }
LABEL_55:
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v40 = *a2;
  v41 = a2[1];
  if (v41 != *a2)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      v44 = v40 + 24 * v42;
      v45 = *(_DWORD *)(v44 + 8);
      v74 = (unsigned int *)(v44 + 8);
      if (v45)
      {
        v73 = v43;
        v46 = 0;
        v47 = v40 + 24 * v42;
        v49 = *(_DWORD *)(v47 + 4);
        v47 += 4;
        v48 = v49;
        v50 = (_QWORD *)(v47 + 12);
        v76 = (unsigned int *)v47;
        v51 = (_DWORD *)(v47 + 8);
        v52 = *a4 + 24 * v42;
        v53 = *a3 + 24 * v42;
        v77 = (_DWORD *)(v52 + 4);
        v79 = (_QWORD *)(v52 + 16);
        v54 = (_DWORD *)(v52 + 12);
        v55 = (_QWORD *)(v53 + 16);
        v56 = (_DWORD *)(v53 + 4);
        v57 = (_DWORD *)(v53 + 12);
        v58 = v49;
        do
        {
          if (v58)
          {
            v59 = 0;
            do
            {
              if (*(_BYTE *)(*v50 + *v51 * (v59 + v46 * v58)))
              {
                v80 = *(_DWORD *)(*v79 + 4 * (v59 + v46 * *v77) * *v54);
                cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v80, __p);
                _Q0 = *(_OWORD *)(*v55 + 16 * (v59 + v46 * *v56) * *v57);
                _S1 = v83[*((unsigned int *)__p[0] + 2)];
                __asm { FMLA            S2, S1, V0.S[2] }
                v67 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a5 + 16 * v42) + 16)
                               + 4
                               * (v59 + v46 * *(_DWORD *)(*(_QWORD *)(*a5 + 16 * v42) + 4))
                               * *(_DWORD *)(*(_QWORD *)(*a5 + 16 * v42) + 12));
                *v67 = _S2;
                v67[1] = _S2;
                v67[2] = _S2;
                v48 = *v76;
              }
              ++v59;
              v58 = v48;
            }
            while (v59 < v48);
            v45 = *v74;
            v58 = v48;
          }
          ++v46;
        }
        while (v46 < v45);
        v15 = v72;
        v40 = *a2;
        v41 = a2[1];
        v43 = v73;
      }
      v42 = ++v43;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v41 - v40) >> 3) > v43);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v82[0])
  {
    v82[1] = v82[0];
    operator delete(v82[0]);
  }
  if (v15)
    operator delete(v15);
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  return 1;
}

void sub_23C5BEC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v4, v11);
    else
      v12 = 0;
    __p = v12;
    v16 = &v12[48 * v8];
    v18 = &v12[48 * v11];
    v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(a1, &__p);
    if (v17 != v16)
      v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_23C5BEE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<cv3d::cv::gess::math::RayT<float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 48 * a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_OWORD *)(v4 + 16) = xmmword_23C60CB10;
      *(_QWORD *)(v4 + 32) = 0x7F7FFFFF3089705FLL;
      v4 += 48;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C5BEF88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

_QWORD *std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[2 * a2];
    do
    {
      *v4 = -1082130432;
      v4[1] = 0;
      v4 += 2;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C5BF04C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::internal::CalculateVariance(uint64_t *a1, uint64_t a2, uint64_t a3, float32x2_t a4, float a5)
{
  uint64_t *v7;
  uint64_t v8;
  int32x2_t v9;
  float64x2_t v15;
  int32x2_t v16;
  uint64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float32x2_t v20;
  int v21;
  double v22;
  float32x2_t v23;
  float64x2_t v24;
  int32x2_t v25;
  double v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v7 = a1;
  v8 = 0;
  v9 = *(int32x2_t *)(*a1 + 4);
  a4.f32[1] = 1.0 - a5;
  __asm { FMOV            V1.2D, #-0.5 }
  v15 = vaddq_f64(vcvtq_f64_f32(vmul_f32(a4, vcvt_f32_u32((uint32x2_t)v9))), _Q1);
  v16 = vadd_s32(v9, (int32x2_t)-1);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18 = vcvtq_f64_u64(v17);
  v19 = (float64x2_t)vbicq_s8((int8x16_t)v15, (int8x16_t)vcltzq_f64(v15));
  v20 = vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v19, v18), (int8x16_t)v18, (int8x16_t)v19));
  LOBYTE(a1) = 1;
  do
  {
    while ((a1 & 1) == 0)
    {
      LOBYTE(a1) = 0;
      if (++v8 == 9)
        return;
    }
    v21 = *(_DWORD *)(*v7 + 4);
    v22 = (double)(*(_DWORD *)(*v7 + 8) - 1);
    v23 = vadd_f32(v20, vcvt_f32_s32(*(int32x2_t *)(a3 + 8 * v8)));
    v24 = vcvtq_f64_f32(v23);
    v25 = vcltz_f32(v23);
    v26 = v24.f64[1];
    if ((v25.i8[4] & 1) != 0)
      v26 = 0.0;
    if (v26 <= v22)
      v22 = v26;
    if ((v25.i8[0] & 1) != 0)
      v24.f64[0] = 0.0;
    if (v24.f64[0] > (double)(v21 - 1))
      v24.f64[0] = (double)(v21 - 1);
    v27 = v22;
    v28 = v24.f64[0];
    LODWORD(a1) = cv3d::cv::gess::util::ImageT<float>::at(*v7, (float *)(a2 + 12 * v8++), v28, v27);
  }
  while (v8 != 9);
  if ((_DWORD)a1)
  {
    v29 = 0;
    v30 = 0.0;
    do
    {
      v31 = 0;
      v32 = 0.0;
      v33 = 0.0;
      do
      {
        v34 = *(float *)(a2 + v31);
        v33 = v33 + v34;
        v32 = v32 + (float)(v34 * v34);
        v31 += 12;
      }
      while (v31 != 108);
      v30 = v30 + fmaxf((float)((float)(v32 / 9.0) - (float)((float)(v33 / 9.0) * (float)(v33 / 9.0))) / 6.5, 0.00001);
      ++v29;
      a2 += 4;
    }
    while (v29 != 3);
    v35 = v30 / (v30 + 0.001);
    pow(1.0 - v35, 0.454545445);
  }
}

uint64_t cv3d::cv::gess::alg::internal::CalculateGradient(uint64_t result, uint64_t a2, uint64_t a3, float32x2_t a4, float a5)
{
  uint64_t *v7;
  uint64_t v8;
  int32x2_t v9;
  float64x2_t v15;
  int32x2_t v16;
  uint64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float32x2_t v20;
  int v21;
  double v22;
  float32x2_t v23;
  float64x2_t v24;
  int32x2_t v25;
  double v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;

  v7 = (uint64_t *)result;
  v8 = 0;
  v9 = *(int32x2_t *)(*(_QWORD *)result + 4);
  a4.f32[1] = 1.0 - a5;
  __asm { FMOV            V1.2D, #-0.5 }
  v15 = vaddq_f64(vcvtq_f64_f32(vmul_f32(a4, vcvt_f32_u32((uint32x2_t)v9))), _Q1);
  v16 = vadd_s32(v9, (int32x2_t)-1);
  v17.i64[0] = v16.u32[0];
  v17.i64[1] = v16.u32[1];
  v18 = vcvtq_f64_u64(v17);
  v19 = (float64x2_t)vbicq_s8((int8x16_t)v15, (int8x16_t)vcltzq_f64(v15));
  v20 = vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v19, v18), (int8x16_t)v18, (int8x16_t)v19));
  LOBYTE(result) = 1;
  do
  {
    while ((result & 1) == 0)
    {
      result = 0;
      if (++v8 == 9)
        return result;
    }
    v21 = *(_DWORD *)(*v7 + 4);
    v22 = (double)(*(_DWORD *)(*v7 + 8) - 1);
    v23 = vadd_f32(v20, vcvt_f32_s32(*(int32x2_t *)(a3 + 8 * v8)));
    v24 = vcvtq_f64_f32(v23);
    v25 = vcltz_f32(v23);
    v26 = v24.f64[1];
    if ((v25.i8[4] & 1) != 0)
      v26 = 0.0;
    if (v26 <= v22)
      v22 = v26;
    if ((v25.i8[0] & 1) != 0)
      v24.f64[0] = 0.0;
    if (v24.f64[0] > (double)(v21 - 1))
      v24.f64[0] = (double)(v21 - 1);
    v27 = v22;
    v28 = v24.f64[0];
    result = cv3d::cv::gess::util::ImageT<float>::at(*v7, (float *)(a2 + 12 * v8++), v28, v27);
  }
  while (v8 != 9);
  if ((_DWORD)result)
  {
    v29 = a2 + 96;
    v30 = 0.0;
    v31 = -12;
    do
    {
      v32 = *(float *)(v29 + v31 - 84);
      v33 = *(float *)(v29 + v31 - 60);
      v34 = *(float *)(v29 + v31 - 12);
      v35 = *(float *)(v29 + v31 + 12);
      v36 = (float)((float)((float)((float)(v33 - v32) + (float)(*(float *)(v29 + v31 - 48) * -2.0))
                          + (float)(*(float *)(v29 + v31 - 24) * 2.0))
                  - v34)
          + v35;
      v37 = (float)(v33 + (float)(v32 + (float)(*(float *)(v29 + v31 - 72) * 2.0))) - v34;
      v30 = v30
          + (float)((float)((float)((float)(v37 + (float)(*(float *)(v29 + v31) * -2.0)) - v35)
                          * (float)((float)(v37 + (float)(*(float *)(v29 + v31) * -2.0)) - v35))
                  + (float)(v36 * v36));
      v31 += 4;
    }
    while (v31);
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::internal::CustomImplicitLaplacianSmoothing(uint64_t a1, _QWORD *a2, float **a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Vertex;
  char *v14;
  void *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  double *v39;
  double *v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  double v51;
  uint64_t v52;
  double v53;
  char *v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  float *v80;
  double *v81;
  uint64_t v82;
  float v83;
  __int128 v84;
  char *v85;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  void *__p;
  double *v98;
  double *v99;
  void *v100[2];
  char *v101;
  void *v102[2];
  char *v103;
  unsigned int v104;
  uint64_t v105[2];
  void *v106;
  char *v107;
  _QWORD v108[10];

  v93 = (_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v5 = a3[1] - *a3;
  if (v5 == (v4 >> 2))
  {
    v6 = a2[1] - *a2;
    v92 = v6;
    if (v6 == 4 || v6 >> 2 == v5)
    {
      v91 = a2;
      v89 = a3[1] - *a3;
      cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(v105, v5, v5);
      LODWORD(v102[0]) = *(_DWORD *)(a1 + 176);
      v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v102);
      v10 = (v4 >> 2);
      v87 = v4 & 0x3FFFFFFFCLL;
      if ((v4 & 0x3FFFFFFFCLL) == 0)
        goto LABEL_117;
      v11 = v9;
      v12 = 0;
      v90 = v10;
LABEL_9:
      v104 = v12;
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v102, v93, &v104);
      v94 = v12;
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v102);
      v100[0] = 0;
      v100[1] = 0;
      v101 = 0;
      while (1)
      {
        v14 = (char *)v100[1];
        if (Vertex == -1)
          break;
        if (v100[1] >= v101)
        {
          v16 = ((char *)v100[1] - (char *)v100[0]) >> 2;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v17 = (v101 - (char *)v100[0]) >> 1;
          if (v17 <= v16 + 1)
            v17 = v16 + 1;
          if ((unint64_t)(v101 - (char *)v100[0]) >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v101, v18);
          else
            v19 = 0;
          v20 = &v19[4 * v16];
          *(_DWORD *)v20 = Vertex;
          v15 = v20 + 4;
          v22 = (char *)v100[0];
          v21 = (char *)v100[1];
          if (v100[1] != v100[0])
          {
            do
            {
              v23 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v20 - 1) = v23;
              v20 -= 4;
            }
            while (v21 != v22);
            v21 = (char *)v100[0];
          }
          v100[0] = v20;
          v100[1] = v15;
          v101 = &v19[4 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_DWORD *)v100[1] = Vertex;
          v15 = v14 + 4;
        }
        v100[1] = v15;
        Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v102);
      }
      v24 = (unint64_t)((char *)v100[1] - (char *)v100[0]) >> 2;
      if ((int)v24 <= 0)
        __assert_rtn("CustomImplicitLaplacianSmoothing", "AomapGeneration.mm", 144, "k > 0");
      v25 = 0;
      __p = 0;
      v98 = 0;
      v26 = ((unint64_t)((char *)v100[1] - (char *)v100[0]) >> 2);
      v27 = 0.0;
      v99 = 0;
      do
      {
        if (v25)
          v28 = v25 - 1;
        else
          v28 = v24 - 1;
        v29 = v25 + 1;
        if (v25 >= (v24 - 1))
          v30 = 0;
        else
          v30 = (v25 + 1);
        v31 = *(_QWORD *)(v11 + 40);
        v32 = (*(_QWORD *)(v11 + 48) - v31) >> 4;
        if (v32 <= v104)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v33 = *((unsigned int *)v100[0] + v28);
        v34 = *((unsigned int *)v100[0] + v30);
        v96 = *(float32x4_t *)(v31 + 16 * v104);
        v35 = *((unsigned int *)v100[0] + v25);
        if (v32 <= v35)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v95 = *(float32x4_t *)(v31 + 16 * v35);
        if (v32 <= v33
          || (v36 = cv3d::cv::gess::math::Cotan(&v96, (float32x4_t *)(v31 + 16 * v33), &v95),
              v37 = *(_QWORD *)(v11 + 40),
              v34 >= (*(_QWORD *)(v11 + 48) - v37) >> 4))
        {
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        v38 = v36 + cv3d::cv::gess::math::Cotan(&v96, (float32x4_t *)(v37 + 16 * v34), &v95);
        v39 = v98;
        if (v98 >= v99)
        {
          v41 = (double *)__p;
          v42 = ((char *)v98 - (_BYTE *)__p) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v44 = (char *)v99 - (_BYTE *)__p;
          if (((char *)v99 - (_BYTE *)__p) >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v99, v45);
            v41 = (double *)__p;
            v39 = v98;
          }
          else
          {
            v46 = 0;
          }
          v47 = (double *)&v46[8 * v42];
          *v47 = v38;
          v40 = v47 + 1;
          while (v39 != v41)
          {
            v48 = *((_QWORD *)v39-- - 1);
            *((_QWORD *)v47-- - 1) = v48;
          }
          __p = v47;
          v98 = v40;
          v99 = (double *)&v46[8 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v98 = v38;
          v40 = v39 + 1;
        }
        v98 = v40;
        v27 = v27 + *((double *)__p + v25++);
      }
      while (v29 != v26);
      if (v27 == 0.0)
        __assert_rtn("CustomImplicitLaplacianSmoothing", "AomapGeneration.mm", 156, "sum");
      v49 = v94;
      if (v92 == 4)
        v49 = 0;
      v50 = *(float *)(*v91 + 4 * v49);
      v51 = v50;
      v52 = v104;
      v53 = v50 + 1.0;
      v54 = v107;
      if ((unint64_t)v107 >= v108[0])
      {
        v56 = (char *)v106;
        v57 = 0xAAAAAAAAAAAAAAABLL * ((v107 - (_BYTE *)v106) >> 3);
        v58 = v57 + 1;
        if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3) > v58)
          v58 = 0x5555555555555556 * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3) >= 0x555555555555555)
          v59 = 0xAAAAAAAAAAAAAAALL;
        else
          v59 = v58;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v108, v59);
          v56 = (char *)v106;
          v54 = v107;
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[24 * v57];
        *(_QWORD *)v61 = v52;
        *((_QWORD *)v61 + 1) = v52;
        *((double *)v61 + 2) = v53;
        v62 = v61;
        if (v54 != v56)
        {
          do
          {
            v63 = *(_OWORD *)(v54 - 24);
            *((_QWORD *)v62 - 1) = *((_QWORD *)v54 - 1);
            *(_OWORD *)(v62 - 24) = v63;
            v62 -= 24;
            v54 -= 24;
          }
          while (v54 != v56);
          v56 = (char *)v106;
        }
        v55 = v61 + 24;
        v106 = v62;
        v107 = v61 + 24;
        v108[0] = &v60[24 * v59];
        if (v56)
          operator delete(v56);
      }
      else
      {
        *(_QWORD *)v107 = v104;
        *((_QWORD *)v54 + 1) = v52;
        v55 = v54 + 24;
        *((double *)v54 + 2) = v53;
      }
      v64 = 0;
      v107 = v55;
      v65 = -1.0 / (double)(int)v24 * v51;
      while (v50 == 0.0)
      {
LABEL_111:
        if (++v64 == v26)
        {
          if (__p)
          {
            v98 = (double *)__p;
            operator delete(__p);
          }
          v10 = v90;
          if (v100[0])
          {
            v100[1] = v100[0];
            operator delete(v100[0]);
          }
          v12 = v94 + 1;
          if (v94 + 1 == v90)
          {
LABEL_117:
            cv3d::cv::gess::math::SparseMatrixT<double>::SortMatrix(v105);
            std::vector<double>::vector(v102, v89);
            std::vector<double>::vector(v100, v89);
            if (v87)
            {
              v80 = *a3;
              v81 = (double *)v100[0];
              v82 = v10;
              do
              {
                v83 = *v80++;
                *v81++ = v83;
                --v82;
              }
              while (v82);
            }
            v84 = *(_OWORD *)v102;
            *(_OWORD *)v102 = *(_OWORD *)v100;
            *(_OWORD *)v100 = v84;
            v85 = v103;
            v103 = v101;
            v101 = v85;
            cv3d::cv::gess::math::SparseMatrixT<double>::BCG(v105, (uint64_t **)v102, (double **)v100, 20);
          }
          goto LABEL_9;
        }
      }
      v66 = v104;
      v67 = *((unsigned int *)v100[0] + v64);
      if (v27 <= 0.0)
      {
        if ((unint64_t)v55 < v108[0])
        {
          *(_QWORD *)v55 = v104;
          *((_QWORD *)v55 + 1) = v67;
          *((double *)v55 + 2) = v65;
          goto LABEL_83;
        }
        v69 = (char *)v106;
        v74 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (_BYTE *)v106) >> 3);
        v75 = v74 + 1;
        if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_129:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3) > v75)
          v75 = 0x5555555555555556 * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3) >= 0x555555555555555)
          v72 = 0xAAAAAAAAAAAAAAALL;
        else
          v72 = v75;
        if (v72)
        {
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v108, v72);
          v69 = (char *)v106;
          v55 = v107;
        }
        else
        {
          v73 = 0;
        }
        v76 = &v73[24 * v74];
        *(_QWORD *)v76 = v66;
        *((_QWORD *)v76 + 1) = v67;
        *((double *)v76 + 2) = v65;
        v77 = v76;
        if (v55 != v69)
        {
          do
          {
            v79 = *(_OWORD *)(v55 - 24);
            *((_QWORD *)v77 - 1) = *((_QWORD *)v55 - 1);
            *(_OWORD *)(v77 - 24) = v79;
            v77 -= 24;
            v55 -= 24;
          }
          while (v55 != v69);
          goto LABEL_107;
        }
      }
      else
      {
        v68 = -*((double *)__p + v64) / v27 * v51;
        if ((unint64_t)v55 < v108[0])
        {
          *(_QWORD *)v55 = v104;
          *((_QWORD *)v55 + 1) = v67;
          *((double *)v55 + 2) = v68;
LABEL_83:
          v55 += 24;
LABEL_110:
          v107 = v55;
          goto LABEL_111;
        }
        v69 = (char *)v106;
        v70 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (_BYTE *)v106) >> 3);
        v71 = v70 + 1;
        if (v70 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_129;
        if (0x5555555555555556 * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3) > v71)
          v71 = 0x5555555555555556 * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108[0] - (_QWORD)v106) >> 3) >= 0x555555555555555)
          v72 = 0xAAAAAAAAAAAAAAALL;
        else
          v72 = v71;
        if (v72)
        {
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v108, v72);
          v69 = (char *)v106;
          v55 = v107;
        }
        else
        {
          v73 = 0;
        }
        v76 = &v73[24 * v70];
        *(_QWORD *)v76 = v66;
        *((_QWORD *)v76 + 1) = v67;
        *((double *)v76 + 2) = v68;
        v77 = v76;
        if (v55 != v69)
        {
          do
          {
            v78 = *(_OWORD *)(v55 - 24);
            *((_QWORD *)v77 - 1) = *((_QWORD *)v55 - 1);
            *(_OWORD *)(v77 - 24) = v78;
            v77 -= 24;
            v55 -= 24;
          }
          while (v55 != v69);
LABEL_107:
          v69 = (char *)v106;
        }
      }
      v55 = v76 + 24;
      v106 = v77;
      v107 = v76 + 24;
      v108[0] = &v73[24 * v72];
      if (v69)
        operator delete(v69);
      goto LABEL_110;
    }
  }
  return 0;
}

void sub_23C5BFD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(&a39);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::math::SparseMatrixT<double>::SortMatrix(_QWORD *a1)
{
  uint64_t v2;
  __int128 *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(__int128 *, __int128 *);

  v2 = a1[2];
  v3 = (__int128 *)a1[3];
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - v2) >> 3));
  v15 = (uint64_t (*)(__int128 *, __int128 *))cv3d::cv::gess::math::MatrixElementT<double>::order;
  if (v3 == (__int128 *)v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,false>(v2, v3, &v15, v5, 1);
  if (*a1 != -1)
  {
    v6 = 0;
    v7 = a1[5];
    do
      *(_QWORD *)(v7 + 8 * v6++) = 0;
    while (v6 < *a1 + 1);
  }
  v8 = (char *)a1[2];
  v9 = (char *)a1[3];
  v10 = v9 - v8;
  if (v9 != v8)
  {
    v11 = 0;
    v12 = v10 / 24;
    v13 = a1[5];
    if (v12 <= 1)
      v12 = 1;
    do
    {
      ++v11;
      v14 = *(_QWORD *)v8;
      v8 += 24;
      *(_QWORD *)(v13 + 8 * v14 + 8) = v11;
    }
    while (v12 != v11);
  }
}

void cv3d::cv::gess::math::SparseMatrixT<double>::BCG(uint64_t *a1, uint64_t **a2, double **a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double *v35;
  double *v36;
  uint64_t v37;
  double v38;

  v8 = operator new[]();
  v9 = operator new[]();
  v10 = operator new[]();
  v11 = a1[1];
  if (v11)
  {
    v12 = *a3;
    v13 = *a2;
    v14 = (_QWORD *)v8;
    v15 = (_QWORD *)v9;
    v16 = a1[1];
    do
    {
      *v12++ = 0.0;
      v17 = *v13++;
      *v14++ = v17;
      *v15++ = v17;
      --v16;
    }
    while (v16);
  }
  if (a4)
  {
    v18 = 0;
    v19 = a1[v11 < *a1];
    do
    {
      v20 = 0.0;
      v21 = 0.0;
      if (v11)
      {
        v22 = (double *)v9;
        do
        {
          v23 = *v22++;
          v21 = v21 + v23 * v23;
          --v11;
        }
        while (v11);
      }
      cv3d::cv::gess::math::SparseMatrixT<double>::Multiply(a1, v8, v10);
      if (v19)
      {
        v24 = 0;
        v25 = 0.0;
        do
        {
          v25 = v25 + *(double *)(v8 + 8 * v24) * *(double *)(v10 + 8 * v24);
          ++v24;
        }
        while (v19 != v24);
        v26 = v21 / v25;
        v27 = *a3;
        v20 = 0.0;
        v28 = (double *)v8;
        v29 = (double *)v10;
        v30 = (double *)v9;
        v31 = v19;
        do
        {
          v32 = *v28++;
          *v27 = *v27 + v26 * v32;
          ++v27;
          v33 = *v29++;
          v34 = *v30 + -v26 * v33;
          *v30++ = v34;
          v20 = v20 + v34 * v34;
          --v31;
        }
        while (v31);
      }
      v11 = a1[1];
      if (v11)
      {
        v35 = (double *)v9;
        v36 = (double *)v8;
        v37 = a1[1];
        do
        {
          v38 = *v35++;
          *v36 = v38 + v20 / v21 * *v36;
          ++v36;
          --v37;
        }
        while (v37);
      }
      ++v18;
    }
    while (v18 != a4);
  }
  MEMORY[0x2426211A0](v8, 0x1000C8000313F17);
  MEMORY[0x2426211A0](v9, 0x1000C8000313F17);
  JUMPOUT(0x2426211A0);
}

uint64_t cv3d::cv::gess::alg::internal::PrepareLowMeshPerVertexReliabilityWeight(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  int v12;
  void *__p[3];

  v4 = *(float **)a2;
  v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v5)
  {
    v6 = v5 >> 2;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v7 = *v4 + -0.02;
      if (v7 >= 0.0)
        v8 = v7 * 0.75;
      else
        v8 = 0.0;
      if (v8 < 0.0)
        v8 = 0.0;
      if (v8 > 1.0)
        v8 = 1.0;
      *v4++ = v8;
      --v6;
    }
    while (v6);
  }
  v9 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
  v12 = 1061997773;
  std::vector<float>::vector(__p, v9, &v12);
  v10 = cv3d::cv::gess::alg::internal::CustomImplicitLaplacianSmoothing(a1, __p, (float **)a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_23C5C01B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::WeakenAomapWithLowMeshPerVertexReliabilityWeight(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  float v21;
  unsigned int v23;
  void *__p[3];

  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v12 = *(_DWORD *)(a3 + 8);
  if (v12)
  {
    v13 = 0;
    v14 = *(_DWORD *)(a3 + 4);
    v15 = v14;
    do
    {
      if (v15)
      {
        v16 = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a3 + 16) + *(_DWORD *)(a3 + 12) * (v16 + v15 * v13)))
          {
            v23 = *(_DWORD *)(*(_QWORD *)(a5 + 16) + 4 * (v16 + *(_DWORD *)(a5 + 4) * v13) * *(_DWORD *)(a5 + 12));
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v23, __p);
            v17 = *(unsigned int *)(a6 + 12);
            if ((_DWORD)v17)
            {
              v18 = (float *)(*(_QWORD *)(a4 + 16) + 16 * (v16 + *(_DWORD *)(a4 + 4) * v13) * *(_DWORD *)(a4 + 12));
              v19 = v18[1] * *(float *)(*a2 + 4 * *((unsigned int *)__p[0] + 1))
                  + *(float *)(*a2 + 4 * *(unsigned int *)__p[0]) * *v18
                  + *(float *)(*a2 + 4 * *((unsigned int *)__p[0] + 2)) * v18[2];
              v20 = (float *)(*(_QWORD *)(a6 + 16) + 4 * v17 * (v16 + v13 * *(_DWORD *)(a6 + 4)));
              do
              {
                v21 = 1.0 - v19 + (float)(*v20 * v19);
                *v20++ = v21;
                --v17;
              }
              while (v17);
            }
            v14 = *(_DWORD *)(a3 + 4);
          }
          ++v16;
          v15 = v14;
        }
        while (v16 < v14);
        v12 = *(_DWORD *)(a3 + 8);
        v15 = v14;
      }
      ++v13;
    }
    while (v13 < v12);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_23C5C0378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::PrepareBatch_RayIntersection(uint64_t a1, unsigned int a2, cv3d::cv::gess::alg::MPSMeshIntersector *a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  int v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  id v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  id v69;
  void *__p[2];
  char v71;
  id v72;
  int v73;

  v15 = a5;
  v16 = (void *)MEMORY[0x2426214AC]();
  cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(a3);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *(id *)a1;
  *(_QWORD *)a1 = v17;

  v19 = *(id *)a1;
  v72 = 0;
  GetMTLLibrary(v19, (uint64_t)&v72, a6, a8);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = v72;
  v22 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v20;

  if (!v21)
  {
    cv3d::cv::gess::alg::MPSMeshIntersector::getMPSRayIntersectorInternal(a3);
    v26 = objc_claimAutoreleasedReturnValue();
    v27 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v26;

    cv3d::cv::gess::alg::MPSMeshIntersector::getMPSTriangleAccelerationStructureInternal(a3);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;

    v30 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 4 * a2, 0);
    v31 = *(void **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v30;

    v32 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 4 * a2, 0);
    v33 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v32;

    v34 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 12 * a2, 0);
    v35 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v34;

    v36 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 12 * a2, 0);
    v37 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v36;

    v38 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 4 * a2, 0);
    v39 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v38;

    v40 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 32 * a2, 32);
    v41 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v40;

    v42 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 16 * a2, 32);
    v43 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v42;

    v44 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 4 * a2, 32);
    v45 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v44;

    v46 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 4 * a2, 32);
    v47 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v46;

    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 32)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 48))), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 64)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 80)))))) & 1) != 0|| !*(_QWORD *)(a1 + 96))
    {
      if (v15)
        *(_DWORD *)(a4 + 384) = 2;
      if (*(_QWORD *)(a7 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
        v73 = 2;
        v63 = *(_QWORD *)(a7 + 24);
        if (!v63)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v63 + 48))(v63, &v73, __p);
        if (v71 < 0)
          operator delete(__p[0]);
      }
      goto LABEL_9;
    }
    v48 = objc_alloc_init(MEMORY[0x24BDDD550]);
    objc_msgSend(v48, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
    v49 = (void *)objc_msgSend(*(id *)(a1 + 8), "newFunctionWithName:", CFSTR("szPPfSnwed"));
    objc_msgSend(v48, "setComputeFunction:", v49);

    v50 = *(id *)a1;
    v69 = 0;
    v51 = objc_msgSend(v50, "newComputePipelineStateWithDescriptor:options:reflection:error:", v48, 0, 0, &v69);
    v52 = v69;
    v53 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v51;

    if (*(_QWORD *)(a1 + 104))
    {
      v54 = (void *)objc_msgSend(*(id *)(a1 + 8), "newFunctionWithName:", CFSTR("EDhdscza3Z"));
      objc_msgSend(v48, "setComputeFunction:", v54);

      v55 = *(id *)a1;
      v68 = v52;
      v56 = objc_msgSend(v55, "newComputePipelineStateWithDescriptor:options:reflection:error:", v48, 0, 0, &v68);
      v57 = v68;

      v58 = *(void **)(a1 + 112);
      *(_QWORD *)(a1 + 112) = v56;

      if (!*(_QWORD *)(a1 + 112))
      {
        if (v15)
          *(_DWORD *)(a4 + 384) = 5;
        if (*(_QWORD *)(a7 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
          v73 = 5;
          v65 = *(_QWORD *)(a7 + 24);
          if (!v65)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v65 + 48))(v65, &v73, __p);
          if (v71 < 0)
            operator delete(__p[0]);
        }
        v24 = 1;
        v52 = v57;
        goto LABEL_43;
      }
      v59 = (void *)objc_msgSend(*(id *)(a1 + 8), "newFunctionWithName:", CFSTR("kKPMS8MNt0"));
      objc_msgSend(v48, "setComputeFunction:", v59);

      v60 = *(id *)a1;
      v67 = v57;
      v61 = objc_msgSend(v60, "newComputePipelineStateWithDescriptor:options:reflection:error:", v48, 0, 0, &v67);
      v52 = v67;

      v62 = *(void **)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v61;

      if (*(_QWORD *)(a1 + 120))
      {
        v24 = 0;
LABEL_43:

        goto LABEL_10;
      }
      if (v15)
        *(_DWORD *)(a4 + 384) = 5;
      if (!*(_QWORD *)(a7 + 24))
      {
LABEL_42:
        v24 = 1;
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v73 = 5;
      v66 = *(_QWORD *)(a7 + 24);
      if (!v66)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v66 + 48))(v66, &v73, __p);
    }
    else
    {
      if (v15)
        *(_DWORD *)(a4 + 384) = 5;
      if (!*(_QWORD *)(a7 + 24))
        goto LABEL_42;
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v73 = 5;
      v64 = *(_QWORD *)(a7 + 24);
      if (!v64)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v64 + 48))(v64, &v73, __p);
    }
    if (v71 < 0)
      operator delete(__p[0]);
    goto LABEL_42;
  }
  if (v15)
    *(_DWORD *)(a4 + 384) = 5;
  if (*(_QWORD *)(a7 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
    v73 = 5;
    v23 = *(_QWORD *)(a7 + 24);
    if (!v23)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v23 + 48))(v23, &v73, __p);
    if (v71 < 0)
      operator delete(__p[0]);
  }

LABEL_9:
  v24 = 1;
LABEL_10:
  objc_autoreleasePoolPop(v16);
  return v24 == 0;
}

void sub_23C5C093C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayIntersection(uint64_t a1, unsigned int a2, _QWORD *a3, float a4, float a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  int v18;
  float v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  cv3d::cv::gess::util::os *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  cv3d::cv::gess::alg::internal *v34;
  NSError *v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  void *context;
  void *v43;
  void *__p[2];
  char v46;
  unint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  int64x2_t v50;
  unint64_t v51;
  int64x2_t v52;
  unint64_t v53;
  int64x2_t v54;
  int v55;
  unint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  int64x2_t v59;
  float v60;
  float v61;
  _DWORD v62[3];

  v60 = a4;
  v61 = a5;
  if (((a3[1] - *a3) >> 4) >= 0xFF)
    v13 = 255;
  else
    v13 = (a3[1] - *a3) >> 4;
  v14 = MEMORY[0x2426214AC]();
  v43 = (void *)objc_msgSend(*(id *)a1, "newCommandQueue");
  v15 = objc_msgSend(*(id *)(a1 + 48), "contents");
  if (a2)
  {
    v16 = (float *)v15;
    v17 = a2;
    do
    {
      v18 = rand();
      v19 = (float)((float)((float)v18 * 4.6566e-10) + (float)((float)v18 * 4.6566e-10)) * 3.14159265;
      *v16++ = v19;
      --v17;
    }
    while (v17);
  }
  objc_msgSend(v43, "commandBuffer");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = a7;
  v40 = a8;
  context = (void *)v14;
  v21 = objc_msgSend(*(id *)(a1 + 104), "maxTotalThreadsPerThreadgroup");
  v22 = a2;
  if (v21 >= a2)
    v23 = a2;
  else
    v23 = v21;
  objc_msgSend(v20, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 88), 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 72), 0, 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 96), 0, 2);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 80), 0, 3);
  objc_msgSend(v24, "setComputePipelineState:", *(_QWORD *)(a1 + 104));
  v58 = a2;
  v59 = vdupq_n_s64(1uLL);
  v56 = v23;
  v57 = v59;
  objc_msgSend(v24, "dispatchThreads:threadsPerThreadgroup:", &v58, &v56);
  v25 = (cv3d::cv::gess::util::os *)objc_msgSend(v24, "endEncoding");
  if (v13)
  {
    v26 = 0;
    do
    {
      v27 = objc_msgSend(*(id *)(a1 + 112), "maxTotalThreadsPerThreadgroup");
      if (v27 >= v22)
        v28 = v22;
      else
        v28 = v27;
      LODWORD(__p[0]) = 0;
      v29 = (_DWORD *)(*a3 + v26);
      LODWORD(__p[0]) = *v29;
      v62[0] = 0;
      v62[0] = v29[1];
      v55 = 0;
      v55 = v29[2];
      objc_msgSend(v20, "computeCommandEncoder");
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 32), 0, 0);
      objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 40), 0, 1);
      objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 56), 0, 2);
      objc_msgSend(v30, "setBytes:length:atIndex:", __p, 4, 3);
      objc_msgSend(v30, "setBytes:length:atIndex:", v62, 4, 4);
      objc_msgSend(v30, "setBytes:length:atIndex:", &v55, 4, 5);
      objc_msgSend(v30, "setBytes:length:atIndex:", &v60, 4, 6);
      objc_msgSend(v30, "setBytes:length:atIndex:", &v61, 4, 7);
      objc_msgSend(v30, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 48), 0, 8);
      objc_msgSend(v30, "setComputePipelineState:", *(_QWORD *)(a1 + 112));
      v53 = v22;
      v54 = vdupq_n_s64(1uLL);
      v51 = v28;
      v52 = v54;
      objc_msgSend(v30, "dispatchThreads:threadsPerThreadgroup:", &v53, &v51);
      objc_msgSend(v30, "endEncoding");
      objc_msgSend(*(id *)(a1 + 24), "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v20, 1, *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64), 0, v22, *(_QWORD *)(a1 + 16));
      v31 = objc_msgSend(*(id *)(a1 + 120), "maxTotalThreadsPerThreadgroup");
      if (v31 >= v22)
        v32 = v22;
      else
        v32 = v31;
      objc_msgSend(v20, "computeCommandEncoder");
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 64), 0, 0);
      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 40), 0, 1);
      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 56), 0, 2);
      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 72), 0, 3);
      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 88), 0, 4);
      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 80), 0, 5);
      objc_msgSend(v33, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 96), 0, 6);
      objc_msgSend(v33, "setComputePipelineState:", *(_QWORD *)(a1 + 120));
      v49 = v22;
      v50 = vdupq_n_s64(1uLL);
      v47 = v32;
      v48 = v50;
      objc_msgSend(v33, "dispatchThreads:threadsPerThreadgroup:", &v49, &v47);
      v25 = (cv3d::cv::gess::util::os *)objc_msgSend(v33, "endEncoding");
      v26 += 16;
      v24 = v33;
    }
    while (16 * v13 != v26);
  }
  else
  {
    v33 = v24;
  }
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v25);
  objc_msgSend(v20, "commit");
  objc_msgSend(v20, "waitUntilCompleted");
  objc_msgSend(v20, "error");
  v34 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
  v36 = cv3d::cv::gess::alg::internal::GPUEncountersError(v34, v35);

  if (v36)
  {
    if (v40)
      *(_DWORD *)(v39 + 384) = 16;
    if (*(_QWORD *)(a9 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v62[0] = 16;
      v37 = *(_QWORD *)(a9 + 24);
      if (!v37)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v37 + 48))(v37, v62, __p);
      if (v46 < 0)
        operator delete(__p[0]);
    }
  }

  objc_autoreleasePoolPop(context);
  return !v36;
}

void sub_23C5C0F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::PrepareBatch_RayTracing(uint64_t a1, unsigned int a2, cv3d::cv::gess::alg::MPSMeshIntersector *a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  int v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *__p[2];
  char v48;
  id v49;
  int v50;

  v15 = a5;
  v16 = (void *)MEMORY[0x2426214AC]();
  cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(a3);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *(id *)a1;
  *(_QWORD *)a1 = v17;

  v19 = *(id *)a1;
  v49 = 0;
  GetMTLLibrary(v19, (uint64_t)&v49, a6, a8);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = v49;
  v22 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v20;

  if (v21)
  {
    if (v15)
      *(_DWORD *)(a4 + 384) = 5;
    if (*(_QWORD *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v50 = 5;
      v23 = *(_QWORD *)(a7 + 24);
      if (!v23)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v23 + 48))(v23, &v50, __p);
      if (v48 < 0)
        operator delete(__p[0]);
    }

LABEL_9:
    v24 = 1;
    goto LABEL_10;
  }
  cv3d::cv::gess::alg::MPSMeshIntersector::getMTLAccelerationStructureInternal(a3);
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v26;

  v28 = 4 * a2;
  v29 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", v28, 0);
  v30 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v29;

  v31 = 12 * a2;
  v32 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", v31, 0);
  v33 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v32;

  v34 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", v31, 0);
  v35 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v34;

  v36 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", v28, 0);
  v37 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v36;

  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 32)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 48))))) & 1) != 0)
  {
    if (v15)
      *(_DWORD *)(a4 + 384) = 2;
    if (*(_QWORD *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v50 = 2;
      v38 = *(_QWORD *)(a7 + 24);
      if (!v38)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v38 + 48))(v38, &v50, __p);
      if (v48 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_9;
  }
  v39 = objc_alloc_init(MEMORY[0x24BDDD550]);
  objc_msgSend(v39, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
  v40 = (void *)objc_msgSend(*(id *)(a1 + 8), "newFunctionWithName:", CFSTR("rtak"));
  objc_msgSend(v39, "setComputeFunction:", v40);

  v41 = *(id *)a1;
  v46 = 0;
  v42 = objc_msgSend(v41, "newComputePipelineStateWithDescriptor:options:reflection:error:", v39, 0, 0, &v46);
  v43 = v46;
  v44 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v42;

  if (*(_QWORD *)(a1 + 24))
  {
    v24 = 0;
  }
  else
  {
    if (v15)
      *(_DWORD *)(a4 + 384) = 5;
    if (*(_QWORD *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v50 = 5;
      v45 = *(_QWORD *)(a7 + 24);
      if (!v45)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v45 + 48))(v45, &v50, __p);
      if (v48 < 0)
        operator delete(__p[0]);
    }
    v24 = 1;
  }

LABEL_10:
  objc_autoreleasePoolPop(v16);
  return v24 == 0;
}

void sub_23C5C1304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayTracing(uint64_t a1, unsigned int a2, int a3, float a4, float a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  int v13;
  void *v14;
  void *v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  int v19;
  float v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  cv3d::cv::gess::alg::internal *v25;
  NSError *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v31;
  void *__p[2];
  char v33;
  unint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  int64x2_t v37;
  int v38;
  float v39;
  float v40;
  int v41;

  v39 = a5;
  v40 = a4;
  v38 = 3;
  if (a3 == 2)
  {
    v13 = 1;
  }
  else
  {
    if (a3 != 1)
      goto LABEL_6;
    v13 = 2;
  }
  v38 = v13;
LABEL_6:
  v14 = (void *)MEMORY[0x2426214AC]();
  v15 = (void *)objc_msgSend(*(id *)a1, "newCommandQueue");
  v16 = objc_msgSend(*(id *)(a1 + 56), "contents");
  if (a2)
  {
    v17 = (float *)v16;
    v18 = a2;
    do
    {
      v19 = rand();
      v20 = (float)((float)((float)v19 * 4.6566e-10) + (float)((float)v19 * 4.6566e-10)) * 3.14159265;
      *v17++ = v20;
      --v18;
    }
    while (v18);
  }
  objc_msgSend(v15, "commandBuffer", a9);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend(*(id *)(a1 + 24), "maxTotalThreadsPerThreadgroup");
  if (v22 >= a2)
    v23 = a2;
  else
    v23 = v22;
  objc_msgSend(v21, "computeCommandEncoder");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 32), 0, 0);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 40), 0, 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 48), 0, 2);
  objc_msgSend(v24, "setAccelerationStructure:atBufferIndex:", *(_QWORD *)(a1 + 16), 3);
  objc_msgSend(v24, "useResource:usage:", *(_QWORD *)(a1 + 16), 1);
  objc_msgSend(v24, "setBuffer:offset:atIndex:", *(_QWORD *)(a1 + 56), 0, 4);
  objc_msgSend(v24, "setBytes:length:atIndex:", &v40, 4, 5);
  objc_msgSend(v24, "setBytes:length:atIndex:", &v39, 4, 6);
  objc_msgSend(v24, "setBytes:length:atIndex:", &v38, 4, 7);
  objc_msgSend(v24, "setComputePipelineState:", *(_QWORD *)(a1 + 24));
  v36 = a2;
  v37 = vdupq_n_s64(1uLL);
  v34 = v23;
  v35 = v37;
  objc_msgSend(v24, "dispatchThreads:threadsPerThreadgroup:", &v36, &v34);
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v24, "endEncoding"));
  objc_msgSend(v21, "commit");
  objc_msgSend(v21, "waitUntilCompleted");
  objc_msgSend(v21, "error");
  v25 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
  v27 = cv3d::cv::gess::alg::internal::GPUEncountersError(v25, v26);

  if (v27)
  {
    if (a8)
      *(_DWORD *)(a7 + 384) = 16;
    if (*(_QWORD *)(v31 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v41 = 16;
      v28 = *(_QWORD *)(v31 + 24);
      if (!v28)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v28 + 48))(v28, &v41, __p);
      if (v33 < 0)
        operator delete(__p[0]);
    }
  }

  objc_autoreleasePoolPop(v14);
  return !v27;
}

void sub_23C5C1680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateAomapWithIntersections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, cv3d::cv::gess::alg::MPSMeshIntersector *a5, int a6, uint64_t a7, float a8, float a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t *a13, uint64_t a14, unsigned __int8 a15)
{
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  int v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  __float2 v49;
  __int128 v50;
  _BOOL4 v51;
  _QWORD *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  float *v61;
  float v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float v65;
  float v66;
  float v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  _DWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  float *v101;
  float v102;
  float32x4_t *v103;
  float32x4_t *v104;
  float v105;
  float v106;
  float v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  __int32 v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int *v131;
  float v132;
  float v133;
  int v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  float *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  float v147;
  _QWORD *v148;
  uint64_t v149;
  float *v150;
  float *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  float v156;
  int v157;
  int v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  float v170;
  float *v171;
  uint64_t v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  float v182;
  float *v183;
  uint64_t v184;
  void *v186;
  void *v187;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v195;
  unsigned int v197;
  float v198;
  float v199;
  float32x4_t v200;
  float32x4_t v201;
  int v202;
  float v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  unsigned int v214;
  void *v215[2];
  void *__p[2];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  void *v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  void *v229;
  _BYTE v230[24];
  _BYTE *v231;
  _BYTE v232[24];
  _BYTE *v233;
  _BYTE v234[24];
  _BYTE *v235;
  _BYTE v236[24];
  _BYTE *v237;
  _BYTE v238[24];
  _BYTE *v239;
  _BYTE v240[24];
  _BYTE *v241;
  _BYTE v242[24];
  _BYTE *v243;
  _BYTE v244[24];
  _BYTE *v245;
  _BYTE v246[24];
  _BYTE *v247;
  _BYTE v248[24];
  _BYTE *v249;
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v228 = 0;
  v229 = 0;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v228, (unsigned __int8 *)__p);
  if (SBYTE7(v217) < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v20;
  v195 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v228, 3uLL);
  v202 = v20;
  v21 = *(_DWORD *)(a2 + 4);
  v197 = *(_DWORD *)(a2 + 8);
  v22 = v197 * v21;
  v23 = operator new[]();
  v24 = v23;
  v189 = a6;
  if ((_DWORD)v22)
  {
    v25 = *(char **)(a2 + 16);
    v26 = (_BYTE *)v23;
    do
    {
      v27 = *v25++;
      *v26++ = v27;
      --v22;
    }
    while (v22);
  }
  v28 = *(_DWORD *)(a2 + 8);
  if (v28)
  {
    v29 = 0;
    v30 = *(_DWORD *)(a2 + 4);
    v31 = v30;
    while (!v31)
    {
      v33 = v29 + 1;
LABEL_34:
      v29 = v33;
      if (v33 >= v28)
        goto LABEL_35;
    }
    v32 = 0;
    v33 = v29 + 1;
    while (!*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v32 + v31 * v29)))
    {
LABEL_31:
      ++v32;
      v31 = v30;
      if (v32 >= v30)
      {
        v31 = v30;
        goto LABEL_34;
      }
    }
    v34 = *(_QWORD *)(a7 + 24);
    if (v34)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 48))(v34) & 1) != 0)
        goto LABEL_169;
      v30 = *(_DWORD *)(a2 + 4);
    }
    if (v32)
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + 16) + (v32 + v30 * v29 - 1) * *(_DWORD *)(a2 + 12)) == 0;
    else
      v35 = 0;
    if (v32 < v30 - 1
      && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12)
                                          + *(_DWORD *)(a2 + 12) * (v32 + v30 * v29)))
    {
      v35 = 1;
    }
    if (v29 && !*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v32 + v30 * (v29 - 1))))
      v35 = 1;
    v28 = *(_DWORD *)(a2 + 8);
    if (v29 >= v28 - 1)
    {
      if (v35)
      {
LABEL_27:
        v36 = 1;
LABEL_30:
        *(_BYTE *)(v24 + v29 * v21 + v32) = v36;
        goto LABEL_31;
      }
    }
    else
    {
      if (!*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v32 + v30 * v33)))
        v35 = 1;
      if (v35)
        goto LABEL_27;
    }
    v36 = v29 & 1 & v32;
    goto LABEL_30;
  }
LABEL_35:
  v227 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a5, (double *)&v227);
  v226 = 0x100000000;
  if (v189 == 1)
  {
    v37 = 2;
  }
  else
  {
    if (v189 != 2)
      goto LABEL_40;
    v37 = 1;
  }
  LODWORD(v226) = v37;
LABEL_40:
  v38 = cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a5, &v226);
  v39 = (void *)MEMORY[0x2426214AC](v38);
  if (!cv3d::cv::gess::alg::MPSMeshIntersector::getMTLAccelerationStructureInternal(a5))
  {
    v186 = v39;
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v224, 0x7FuLL);
    v43 = 0;
    *(_OWORD *)v224 = xmmword_23C605210;
    v44 = 16;
    do
    {
      v45 = 0;
      v46 = (double)v43 * -0.94 / 13.0 + 0.98;
      v204 = v46;
      v47 = sqrtf(1.0 - (float)(v46 * v46));
      do
      {
        v48 = (double)v43 * 0.448798951 + (double)v45 * 0.698131701;
        v49 = __sincosf_stret(v48);
        *(float *)&v50 = v47 * v49.__cosval;
        *((float *)&v50 + 1) = v47 * v49.__sinval;
        *((_QWORD *)&v50 + 1) = LODWORD(v204);
        *(_OWORD *)((char *)v224 + 16 * v45++ + v44) = v50;
      }
      while (v45 != 9);
      ++v43;
      v44 += 144;
    }
    while (v43 != 14);
    v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    *(_OWORD *)__p = 0u;
    v217 = 0u;
    if (v202 == -1)
    {
      LOBYTE(v51) = 0;
      v39 = v186;
      goto LABEL_164;
    }
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v248, a14);
    v39 = v186;
    v51 = cv3d::cv::gess::alg::internal::PrepareBatch_RayIntersection((uint64_t)__p, 0x100000u, a5, a11, a12, a13, (uint64_t)v248, a15);
    v52 = v249;
    if (v249 == v248)
    {
      v53 = 4;
      v52 = v248;
    }
    else
    {
      if (!v249)
      {
        if (!v51)
          goto LABEL_164;
LABEL_97:
        std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::vector(v215, 0x100000uLL);
        v193 = objc_msgSend((id)v218, "contents");
        v191 = objc_msgSend(*((id *)&v218 + 1), "contents");
        if (!v197)
        {
          LOBYTE(v51) = 1;
          v39 = v186;
          goto LABEL_132;
        }
        v95 = 0;
        v96 = 0;
        LOBYTE(v51) = 1;
        while (!v21)
        {
LABEL_125:
          if (++v96 >= v197)
          {
            v39 = v186;
            if (v51 && v95)
            {
              std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v242, a7);
              std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v240, a14);
              LOBYTE(v51) = cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayIntersection((uint64_t)__p, v95, &v224, a8, a9, v136, a11, a12, (uint64_t)v240);
              v137 = v241;
              if (v241 == v240)
              {
                v138 = 4;
                v137 = v240;
LABEL_153:
                (*(void (**)(void))(*v137 + 8 * v138))();
              }
              else if (v241)
              {
                v138 = 5;
                goto LABEL_153;
              }
              v148 = v243;
              if (v243 == v242)
              {
                v149 = 4;
                v148 = v242;
LABEL_158:
                (*(void (**)(void))(*v148 + 8 * v149))();
              }
              else if (v243)
              {
                v149 = 5;
                goto LABEL_158;
              }
              v150 = (float *)objc_msgSend(*((id *)&v220 + 1), "contents");
              v151 = (float *)objc_msgSend((id)v221, "contents");
              v152 = 0;
              v139 = (char *)v215[0];
              v153 = *(_QWORD *)(a4 + 16);
              v154 = *(_DWORD *)(a4 + 4);
              v155 = *(_DWORD *)(a4 + 12);
              do
              {
                v156 = 1.0;
                if (*v151 > 0.0)
                  v156 = 1.0 - (float)(*v150 / *v151);
                v158 = *(_DWORD *)&v139[v152];
                v157 = *(_DWORD *)&v139[v152 + 4];
                v152 += 8;
                *(float *)(v153 + 4 * ((v158 + v154 * v157) * v155)) = v156;
                ++v151;
                ++v150;
              }
              while (8 * v95 != v152);
LABEL_163:
              v215[1] = v139;
              operator delete(v139);
LABEL_164:
              cv3d::cv::gess::alg::internal::AoBatchImpl_RayIntersection::~AoBatchImpl_RayIntersection(__p);
              if (v224)
              {
                v225 = v224;
                operator delete(v224);
              }
              v40 = v51;
              goto LABEL_167;
            }
LABEL_132:
            v139 = (char *)v215[0];
            if (v215[0])
              goto LABEL_163;
            goto LABEL_164;
          }
        }
        v97 = 0;
        while (!*(_BYTE *)(v24 + v97 + v96 * v21))
        {
LABEL_124:
          if (++v97 >= v21)
            goto LABEL_125;
        }
        v98 = (unsigned int *)((char *)v215[0] + 8 * v95);
        *v98 = v97;
        v98[1] = v96;
        v99 = *(_QWORD *)(a3 + 16);
        v100 = (v97 + *(_DWORD *)(a3 + 4) * v96) * *(_DWORD *)(a3 + 12);
        v214 = *(_DWORD *)(v99 + 16 * v100 + 4);
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v214, &v228);
        v207 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v228);
        v101 = (float *)(v99 + 16 * v100);
        v102 = v101[2];
        v101 += 2;
        v103 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 1));
        v199 = v101[1];
        v201 = *v103;
        v104 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 2));
        v105 = *v101;
        v106 = v101[1];
        v107 = (float)(1.0 - *v101) - v106;
        v213 = vaddq_f32(vaddq_f32(vmulq_n_f32(v207, v102), vmulq_n_f32(v201, v199)), vmulq_n_f32(*v104, v107));
        v108 = *(unsigned int *)v228;
        v109 = *(_QWORD *)(v195 + 40);
        v110 = (*(_QWORD *)(v195 + 48) - v109) >> 4;
        if (v110 <= v108)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v111 = *((unsigned int *)v228 + 1);
        if (v110 <= v111)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v112 = *((unsigned int *)v228 + 2);
        if (v110 <= v112)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v113 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v109 + 16 * v112), v107), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v109 + 16 * v111), v106), vmulq_n_f32(*(float32x4_t *)(v109 + 16 * v108), v105)));
        v114 = vmulq_f32(v113, v113);
        v114.i32[3] = 0;
        v114.i64[0] = vpaddq_f32(v114, v114).u64[0];
        v114.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v114.f32));
        v208 = vdivq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 0));
        v212 = v208;
        v211 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v108);
        v210 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 1));
        v209 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 2));
        v115 = v209;
        v115.f32[0] = a8;
        cv3d::cv::gess::alg::internal::OptimizePositionEnv(&v213, &v212, &v211, &v210, &v209, v115);
        v116 = v213.i32[2];
        v117 = v193 + 12 * v95;
        *(_QWORD *)v117 = v213.i64[0];
        *(_DWORD *)(v117 + 8) = v116;
        v118 = v191 + 12 * v95;
        *(_QWORD *)v118 = v208.i64[0];
        *(_DWORD *)(v118 + 8) = v208.i32[2];
        ++v95;
        v119 = v51;
        if (!v51 || v95 != 0x100000)
        {
LABEL_122:
          if (!v119)
          {
            v97 = v21;
            v96 = v197;
          }
          goto LABEL_124;
        }
        std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v246, a7);
        std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v244, a14);
        v119 = cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayIntersection((uint64_t)__p, 0x100000u, &v224, a8, a9, v120, a11, a12, (uint64_t)v244);
        v121 = v245;
        if (v245 == v244)
        {
          v121 = v244;
          v122 = 4;
        }
        else
        {
          if (!v245)
            goto LABEL_112;
          v122 = 5;
        }
        (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_112:
        v123 = v247;
        if (v247 == v246)
        {
          v123 = v246;
          v124 = 4;
        }
        else
        {
          if (!v247)
            goto LABEL_117;
          v124 = 5;
        }
        (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_117:
        v125 = objc_msgSend(*((id *)&v220 + 1), "contents");
        v126 = objc_msgSend((id)v221, "contents");
        v127 = 0;
        v128 = *(_QWORD *)(a4 + 16);
        v129 = *(_DWORD *)(a4 + 4);
        v130 = *(_DWORD *)(a4 + 12);
        v131 = (int *)((char *)v215[0] + 4);
        do
        {
          v132 = *(float *)(v126 + v127);
          v133 = 1.0;
          if (v132 > 0.0)
            v133 = 1.0 - (float)(*(float *)(v125 + v127) / v132);
          v134 = *(v131 - 1);
          v135 = *v131;
          v131 += 2;
          *(float *)(v128 + 4 * ((v134 + v129 * v135) * v130)) = v133;
          v127 += 4;
        }
        while (v127 != 0x400000);
        v95 = 0;
        LOBYTE(v51) = v119;
        goto LABEL_122;
      }
      v53 = 5;
    }
    (*(void (**)(void))(*v52 + 8 * v53))();
    if (!v51)
    {
      LOBYTE(v51) = 0;
      goto LABEL_164;
    }
    goto LABEL_97;
  }
  v218 = 0u;
  v219 = 0u;
  *(_OWORD *)__p = 0u;
  v217 = 0u;
  if (v202 == -1)
  {
LABEL_55:
    v40 = 0;
    goto LABEL_148;
  }
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v238, a14);
  v40 = cv3d::cv::gess::alg::internal::PrepareBatch_RayTracing((uint64_t)__p, 0x100000u, a5, a11, a12, a13, (uint64_t)v238, a15);
  v41 = v239;
  if (v239 == v238)
  {
    v42 = 4;
    v41 = v238;
  }
  else
  {
    if (!v239)
    {
      if (!(_DWORD)v40)
        goto LABEL_148;
      goto LABEL_58;
    }
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
  if ((v40 & 1) == 0)
    goto LABEL_55;
LABEL_58:
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::vector(&v224, 0x100000uLL);
  v192 = objc_msgSend((id)v218, "contents");
  v187 = v39;
  v190 = objc_msgSend(*((id *)&v218 + 1), "contents");
  if (!v197)
  {
    v56 = 1;
    goto LABEL_94;
  }
  v54 = 0;
  v55 = 0;
  v56 = 1;
  do
  {
    if (v21)
    {
      v57 = 0;
      while (!*(_BYTE *)(v24 + v57 + v55 * v21))
      {
LABEL_83:
        if (++v57 >= v21)
          goto LABEL_84;
      }
      v58 = (unsigned int *)((char *)v224 + 8 * v54);
      *v58 = v57;
      v58[1] = v55;
      v59 = *(_QWORD *)(a3 + 16);
      v60 = (v57 + *(_DWORD *)(a3 + 4) * v55) * *(_DWORD *)(a3 + 12);
      v209.i32[0] = *(_DWORD *)(v59 + 16 * v60 + 4);
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v209, &v228);
      v205 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v228);
      v61 = (float *)(v59 + 16 * v60);
      v62 = v61[2];
      v61 += 2;
      v63 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 1));
      v198 = v61[1];
      v200 = *v63;
      v64 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 2));
      v65 = *v61;
      v66 = v61[1];
      v67 = (float)(1.0 - *v61) - v66;
      *(float32x4_t *)v215 = vaddq_f32(vaddq_f32(vmulq_n_f32(v205, v62), vmulq_n_f32(v200, v198)), vmulq_n_f32(*v64, v67));
      v68 = *(unsigned int *)v228;
      v69 = *(_QWORD *)(v195 + 40);
      v70 = (*(_QWORD *)(v195 + 48) - v69) >> 4;
      if (v70 <= v68)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v71 = *((unsigned int *)v228 + 1);
      if (v70 <= v71)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v72 = *((unsigned int *)v228 + 2);
      if (v70 <= v72)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v73 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v69 + 16 * v72), v67), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v69 + 16 * v71), v66), vmulq_n_f32(*(float32x4_t *)(v69 + 16 * v68), v65)));
      v74 = vmulq_f32(v73, v73);
      v74.i32[3] = 0;
      v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
      v74.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v74.f32));
      v206 = vdivq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 0));
      v213 = v206;
      v212 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v68);
      v211 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 1));
      v210 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v228 + 2));
      v75 = v210;
      v75.f32[0] = a8;
      cv3d::cv::gess::alg::internal::OptimizePositionEnv((float32x4_t *)v215, &v213, &v212, &v211, &v210, v75);
      v76 = (int)v215[1];
      v77 = v192 + 12 * v54;
      *(void **)v77 = v215[0];
      *(_DWORD *)(v77 + 8) = v76;
      v78 = v190 + 12 * v54;
      *(_QWORD *)v78 = v206.i64[0];
      *(_DWORD *)(v78 + 8) = v206.i32[2];
      ++v54;
      v79 = v56;
      if (!v56 || v54 != 0x100000)
      {
LABEL_81:
        if (!v79)
        {
          v57 = v21;
          v55 = v197;
        }
        goto LABEL_83;
      }
      std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v236, a7);
      std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v234, a14);
      v79 = cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayTracing((uint64_t)__p, 0x100000u, v189, a8, a9, v80, a11, a12, (uint64_t)v234);
      v81 = v235;
      if (v235 == v234)
      {
        v81 = v234;
        v82 = 4;
      }
      else
      {
        if (!v235)
          goto LABEL_73;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_73:
      v83 = v237;
      if (v237 == v236)
      {
        v83 = v236;
        v84 = 4;
      }
      else
      {
        if (!v237)
          goto LABEL_78;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_78:
      v85 = objc_msgSend((id)v219, "contents");
      v86 = 0;
      v87 = *(_QWORD *)(a4 + 16);
      v88 = *(_DWORD *)(a4 + 4);
      v89 = *(_DWORD *)(a4 + 12);
      v90 = (char *)v224 + 4;
      do
      {
        *(float *)(v87 + 4 * ((*(v90 - 1) + v88 * *v90) * v89)) = 1.0 - *(float *)(v85 + v86);
        v86 += 4;
        v90 += 2;
      }
      while (v86 != 0x400000);
      v54 = 0;
      v56 = v79;
      goto LABEL_81;
    }
LABEL_84:
    ++v55;
  }
  while (v55 < v197);
  v39 = v187;
  if (!v56 || !v54)
  {
LABEL_94:
    v94 = (char *)v224;
    if (v224)
      goto LABEL_146;
    goto LABEL_147;
  }
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v232, a7);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v230, a14);
  v56 = cv3d::cv::gess::alg::internal::ComputeAmbientOcclusionValue_Batch_RayTracing((uint64_t)__p, v54, v189, a8, a9, v91, a11, a12, (uint64_t)v230);
  v92 = v231;
  if (v231 == v230)
  {
    v93 = 4;
    v92 = v230;
LABEL_138:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  else if (v231)
  {
    v93 = 5;
    goto LABEL_138;
  }
  v140 = v233;
  if (v233 == v232)
  {
    v141 = 4;
    v140 = v232;
LABEL_143:
    (*(void (**)(void))(*v140 + 8 * v141))();
  }
  else if (v233)
  {
    v141 = 5;
    goto LABEL_143;
  }
  v142 = (float *)objc_msgSend((id)v219, "contents");
  v143 = 0;
  v94 = (char *)v224;
  v144 = *(_QWORD *)(a4 + 16);
  v145 = *(_DWORD *)(a4 + 4);
  v146 = *(_DWORD *)(a4 + 12);
  do
  {
    v147 = *v142++;
    *(float *)(v144 + 4 * ((*(_DWORD *)&v94[v143] + v145 * *(_DWORD *)&v94[v143 + 4]) * v146)) = 1.0 - v147;
    v143 += 8;
  }
  while (8 * v54 != v143);
LABEL_146:
  v225 = v94;
  operator delete(v94);
LABEL_147:
  v40 = v56;
LABEL_148:

LABEL_167:
  objc_autoreleasePoolPop(v39);
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a5, &v227);
  v159 = *(_QWORD *)(a7 + 24);
  if (v159)
  {
    if ((((*(unsigned int (**)(uint64_t))(*(_QWORD *)v159 + 48))(v159) | v40 ^ 1) & 1) != 0)
    {
LABEL_169:
      v40 = 0;
      goto LABEL_203;
    }
LABEL_171:
    v160 = *(_DWORD *)(a2 + 8);
    if (v160)
    {
      v161 = 0;
      v162 = *(unsigned int *)(a2 + 4);
      v163 = *(_QWORD *)(a2 + 16);
      v164 = *(_DWORD *)(a2 + 12);
      while (v162 < 2)
      {
LABEL_186:
        v161 += 2;
        if (v161 >= v160)
        {
          v173 = 0;
          v174 = *(unsigned int *)(a2 + 4);
          v175 = *(_QWORD *)(a2 + 16);
          v176 = *(_DWORD *)(a2 + 12);
          while (!(_DWORD)v174)
          {
LABEL_201:
            if (++v173 == v160)
              goto LABEL_202;
          }
          v177 = 0;
          v178 = *(_QWORD *)(a4 + 16);
          v179 = *(_DWORD *)(a4 + 4) * v173;
          v180 = *(unsigned int *)(a4 + 12);
          v181 = v179 * v180;
          while (2)
          {
            if (*(_BYTE *)(v175 + (v176 * (v174 * v173 + v177)))
              && !*(_BYTE *)(v24 + v173 * v21 + v177))
            {
              if (v177)
              {
                v182 = *(float *)(v178 + 4 * ((v177 + v179 - 1) * v180));
                if (v177 < (v174 - 1))
                  v182 = (float)(v182 + *(float *)(v178 + 4 * ((v177 | 1) + v179) * v180))
                       * 0.5;
                if (!(_DWORD)v180)
                  goto LABEL_200;
              }
              else
              {
                v182 = *(float *)(v178 + 4 * (v180 + v179 * v180));
                if (!(_DWORD)v180)
                  goto LABEL_200;
              }
              v183 = (float *)(v178 + 4 * v181);
              v184 = v180;
              do
              {
                *v183++ = v182;
                --v184;
              }
              while (v184);
            }
LABEL_200:
            v177 += 2;
            v181 += 2 * v180;
            if (v177 >= v174)
              goto LABEL_201;
            continue;
          }
        }
      }
      v165 = *(_QWORD *)(a4 + 16);
      v166 = *(_DWORD *)(a4 + 4);
      v167 = *(unsigned int *)(a4 + 12);
      v168 = v167 + v167 * v166 * v161;
      v169 = 1;
      while (2)
      {
        if (*(_BYTE *)(v163 + v164 * (v162 * v161 + v169))
          && !*(_BYTE *)(v24 + v161 * v21 + v169))
        {
          if (v161)
          {
            v170 = *(float *)(v165 + 4 * (v166 * (v161 - 1) + v169) * v167);
            if (v161 < v160 - 1)
              v170 = (float)(v170
                           + *(float *)(v165 + 4 * (v166 * (v161 | 1) + v169) * v167))
                   * 0.5;
            if (!(_DWORD)v167)
              goto LABEL_185;
          }
          else
          {
            v170 = *(float *)(v165 + 4 * ((v166 + v169) * v167));
            if (!(_DWORD)v167)
              goto LABEL_185;
          }
          v171 = (float *)(v165 + 4 * v168);
          v172 = v167;
          do
          {
            *v171++ = v170;
            --v172;
          }
          while (v172);
        }
LABEL_185:
        v169 += 2;
        v168 += 2 * v167;
        if (v169 >= v162)
          goto LABEL_186;
        continue;
      }
    }
LABEL_202:
    v40 = 1;
  }
  else if ((_DWORD)v40)
  {
    goto LABEL_171;
  }
LABEL_203:
  MEMORY[0x2426211A0](v24, 0x1000C8077774924);
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  return v40;
}

void sub_23C5C28DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a66;
  uint64_t a67;
  void *a71;
  uint64_t a72;
  uint64_t v72;

  if (__p)
    operator delete(__p);
  cv3d::cv::gess::alg::internal::AoBatchImpl_RayIntersection::~AoBatchImpl_RayIntersection((id *)&a49);
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  MEMORY[0x2426211A0](v72, 0x1000C8077774924);
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::internal::AoBatchImpl_RayTracing::~AoBatchImpl_RayTracing(id *this)
{

}

void cv3d::cv::gess::alg::internal::AoBatchImpl_RayIntersection::~AoBatchImpl_RayIntersection(id *this)
{

}

_QWORD *cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = operator new[]();
  a1[6] = operator new[]();
  a1[7] = operator new[]();
  a1[8] = operator new[]();
  a1[9] = operator new[]();
  a1[10] = operator new[]();
  a1[11] = operator new[]();
  a1[12] = operator new[]();
  return a1;
}

void sub_23C5C2E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = a1[5];
  if (v2)
    MEMORY[0x2426211A0](v2, 0x1000C8000313F17);
  v3 = a1[6];
  if (v3)
    MEMORY[0x2426211A0](v3, 0x1000C8000313F17);
  v4 = a1[7];
  if (v4)
    MEMORY[0x2426211A0](v4, 0x1000C8000313F17);
  v5 = a1[8];
  if (v5)
    MEMORY[0x2426211A0](v5, 0x1000C8000313F17);
  v6 = a1[9];
  if (v6)
    MEMORY[0x2426211A0](v6, 0x1000C8000313F17);
  v7 = a1[10];
  if (v7)
    MEMORY[0x2426211A0](v7, 0x1000C8000313F17);
  v8 = a1[11];
  if (v8)
    MEMORY[0x2426211A0](v8, 0x1000C8000313F17);
  v9 = a1[12];
  if (v9)
    MEMORY[0x2426211A0](v9, 0x1000C8000313F17);
  v10 = (void *)a1[2];
  if (v10)
  {
    a1[3] = v10;
    operator delete(v10);
  }
  return a1;
}

BOOL cv3d::cv::gess::math::MatrixElementT<double>::order(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  if (*a1 == *a2)
    return a1[1] < a2[1];
  return 0;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  BOOL v29;
  uint64_t (*v30)(__int128 *, __int128 *);
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(__int128 *, __int128 *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(__int128 *, __int128 *);
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (result != a2)
  {
    v28 = v3;
    v29 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        v12 = *a3;
        v26 = *(_OWORD *)v10;
        v27 = *(_QWORD *)(v10 + 16);
        v13 = *(_QWORD *)(v11 + 16);
        v24 = *(_OWORD *)v11;
        v25 = v13;
        result = v12(&v26, &v24);
        if ((_DWORD)result)
        {
          v22 = *(_OWORD *)v10;
          v23 = *(_QWORD *)(v10 + 16);
          v14 = v9;
          while (1)
          {
            v15 = v6 + v14;
            *(_OWORD *)(v15 + 24) = *(_OWORD *)(v6 + v14);
            *(_QWORD *)(v15 + 40) = *(_QWORD *)(v6 + v14 + 16);
            if (!v14)
              break;
            v16 = *a3;
            v20 = v22;
            v21 = v23;
            v18 = *(_OWORD *)(v15 - 24);
            v19 = *(_QWORD *)(v15 - 8);
            result = v16(&v20, &v18);
            v14 -= 24;
            if ((result & 1) == 0)
            {
              v17 = v6 + v14 + 24;
              goto LABEL_10;
            }
          }
          v17 = v6;
LABEL_10:
          *(_OWORD *)v17 = v22;
          *(_QWORD *)(v17 + 16) = v23;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v9;
  uint64_t (*v10)(__int128 *, __int128 *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(__int128 *, __int128 *);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (result != a2)
  {
    v25 = v3;
    v26 = v4;
    v6 = result;
    for (i = result + 24; v6 + 24 != a2; i = v6 + 24)
    {
      v9 = v6;
      v6 = i;
      v10 = *a3;
      v23 = *(_OWORD *)v6;
      v24 = *(_QWORD *)(v6 + 16);
      v11 = *(_QWORD *)(v9 + 16);
      v21 = *(_OWORD *)v9;
      v22 = v11;
      result = v10(&v23, &v21);
      if ((_DWORD)result)
      {
        v19 = *(_OWORD *)v6;
        v20 = *(_QWORD *)(v6 + 16);
        v12 = v6;
        do
        {
          v13 = v12 - 24;
          *(_OWORD *)v12 = *(_OWORD *)(v12 - 24);
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 - 8);
          v14 = *a3;
          v17 = v19;
          v18 = v20;
          v15 = *(_OWORD *)(v12 - 48);
          v16 = *(_QWORD *)(v12 - 32);
          result = v14(&v17, &v15);
          v12 = v13;
        }
        while ((result & 1) != 0);
        *(_OWORD *)v13 = v19;
        *(_QWORD *)(v13 + 16) = v20;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  uint64_t (*v8)(__int128 *, __int128 *);
  char v9;
  uint64_t (*v10)(__int128 *, __int128 *);
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t (*v18)(__int128 *, __int128 *);
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t (*v26)(__int128 *, __int128 *);
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v8 = *a4;
  v49 = *a2;
  v50 = *((_QWORD *)a2 + 2);
  v47 = *a1;
  v48 = *((_QWORD *)a1 + 2);
  v9 = v8(&v49, &v47);
  v10 = *a4;
  if ((v9 & 1) == 0)
  {
    v45 = *a3;
    v46 = *((_QWORD *)a3 + 2);
    v43 = *a2;
    v44 = *((_QWORD *)a2 + 2);
    result = v10(&v45, &v43);
    if (!(_DWORD)result)
      return result;
    v15 = *((_QWORD *)a2 + 2);
    v16 = *a2;
    v17 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v17;
    *a3 = v16;
    *((_QWORD *)a3 + 2) = v15;
    v18 = *a4;
    v42 = *((_QWORD *)a2 + 2);
    v41 = *a2;
    v19 = *a1;
    v40 = *((_QWORD *)a1 + 2);
    v39 = v19;
    if (!v18(&v41, &v39))
      return 1;
    v20 = *((_QWORD *)a1 + 2);
    v21 = *a1;
    v22 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v22;
    *a2 = v21;
    *((_QWORD *)a2 + 2) = v20;
    return 2;
  }
  v37 = *a3;
  v38 = *((_QWORD *)a3 + 2);
  v35 = *a2;
  v36 = *((_QWORD *)a2 + 2);
  if (!v10(&v37, &v35))
  {
    v23 = *((_QWORD *)a1 + 2);
    v24 = *a1;
    v25 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v25;
    *a2 = v24;
    *((_QWORD *)a2 + 2) = v23;
    v26 = *a4;
    v34 = *((_QWORD *)a3 + 2);
    v33 = *a3;
    v27 = *a2;
    v32 = *((_QWORD *)a2 + 2);
    v31 = v27;
    if (!v26(&v33, &v31))
      return 1;
    v28 = *((_QWORD *)a2 + 2);
    v29 = *a2;
    v30 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v30;
    *a3 = v29;
    *((_QWORD *)a3 + 2) = v28;
    return 2;
  }
  v11 = *((_QWORD *)a1 + 2);
  v12 = *a1;
  v13 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v13;
  *a3 = v12;
  *((_QWORD *)a3 + 2) = v11;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  uint64_t (*v6)(__int128 *, __int128 *);
  __int128 *v7;
  __int128 *v8;
  uint64_t (*v9)(__int128 *, __int128 *);
  char v10;
  __int128 *v11;
  uint64_t (*v12)(__int128 *, __int128 *);
  int v13;
  __int128 *v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t (*v21)(__int128 *, __int128 *);
  uint64_t v22;
  __int128 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;

  v4 = a2;
  v53 = *a1;
  v54 = *((_QWORD *)a1 + 2);
  v6 = *a3;
  v51 = v53;
  v52 = v54;
  v49 = *(__int128 *)((char *)a2 - 24);
  v50 = *((_QWORD *)a2 - 1);
  if ((v6(&v51, &v49) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = (__int128 *)((char *)v7 + 24);
      v9 = *a3;
      v47 = v53;
      v48 = v54;
      v45 = *(__int128 *)((char *)v7 + 24);
      v46 = *((_QWORD *)v7 + 5);
      v10 = v9(&v47, &v45);
      v7 = v8;
    }
    while ((v10 & 1) == 0);
  }
  else
  {
    v11 = (__int128 *)((char *)a1 + 24);
    do
    {
      v8 = v11;
      if (v11 >= v4)
        break;
      v12 = *a3;
      v43 = v53;
      v44 = v54;
      v41 = *v8;
      v42 = *((_QWORD *)v8 + 2);
      v13 = v12(&v43, &v41);
      v11 = (__int128 *)((char *)v8 + 24);
    }
    while (!v13);
  }
  if (v8 >= v4)
  {
    v14 = v4;
  }
  else
  {
    do
    {
      v14 = (__int128 *)((char *)v4 - 24);
      v15 = *a3;
      v39 = v53;
      v40 = v54;
      v37 = *(__int128 *)((char *)v4 - 24);
      v38 = *((_QWORD *)v4 - 1);
      v4 = (__int128 *)((char *)v4 - 24);
    }
    while ((v15(&v39, &v37) & 1) != 0);
  }
  while (v8 < v14)
  {
    v16 = *v8;
    v56 = *((_QWORD *)v8 + 2);
    v55 = v16;
    v17 = *v14;
    *((_QWORD *)v8 + 2) = *((_QWORD *)v14 + 2);
    *v8 = v17;
    v18 = v55;
    *((_QWORD *)v14 + 2) = v56;
    *v14 = v18;
    do
    {
      v35 = v53;
      v36 = v54;
      v19 = *((_QWORD *)v8 + 5);
      v20 = *(__int128 *)((char *)v8 + 24);
      v8 = (__int128 *)((char *)v8 + 24);
      v21 = *a3;
      v33 = v20;
      v34 = v19;
    }
    while (!v21(&v35, &v33));
    do
    {
      v31 = v53;
      v32 = v54;
      v22 = *((_QWORD *)v14 - 1);
      v23 = *(__int128 *)((char *)v14 - 24);
      v14 = (__int128 *)((char *)v14 - 24);
      v24 = *a3;
      v29 = v23;
      v30 = v22;
    }
    while ((v24(&v31, &v29) & 1) != 0);
  }
  v25 = (__int128 *)((char *)v8 - 24);
  if ((__int128 *)((char *)v8 - 24) != a1)
  {
    v26 = *v25;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v8 - 1);
    *a1 = v26;
  }
  v27 = v53;
  *((_QWORD *)v8 - 1) = v54;
  *v25 = v27;
  return v8;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  uint64_t (*v7)(__int128 *, __int128 *);
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(__int128 *, __int128 *);
  uint64_t (*v12)(__int128 *, __int128 *);
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  uint64_t v21;
  __int128 v22;
  uint64_t (*v23)(__int128 *, __int128 *);
  __int128 v24;
  __int128 v25;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v6 = 0;
  v47 = *a1;
  v48 = *((_QWORD *)a1 + 2);
  do
  {
    v7 = *a3;
    v45 = *(__int128 *)((char *)a1 + v6 + 24);
    v46 = *(_QWORD *)((char *)a1 + v6 + 40);
    v43 = v47;
    v44 = v48;
    v6 += 24;
  }
  while ((v7(&v45, &v43) & 1) != 0);
  v8 = (__int128 *)((char *)a1 + v6);
  v9 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    while ((unint64_t)v8 < a2)
    {
      v12 = *a3;
      v10 = a2 - 24;
      v41 = *(_OWORD *)(a2 - 24);
      v42 = *(_QWORD *)(a2 - 8);
      v39 = v47;
      v40 = v48;
      a2 -= 24;
      if ((v12(&v41, &v39) & 1) != 0)
        goto LABEL_9;
    }
    v10 = a2;
  }
  else
  {
    do
    {
      v10 = a2 - 24;
      v11 = *a3;
      v37 = *(_OWORD *)(a2 - 24);
      v38 = *(_QWORD *)(a2 - 8);
      v35 = v47;
      v36 = v48;
      a2 -= 24;
    }
    while (!v11(&v37, &v35));
  }
LABEL_9:
  if ((unint64_t)v8 < v10)
  {
    v13 = v8;
    v14 = v10;
    do
    {
      v49 = *v13;
      v15 = v49;
      v50 = *((_QWORD *)v13 + 2);
      v16 = v50;
      v17 = *(_QWORD *)(v14 + 16);
      *v13 = *(_OWORD *)v14;
      *((_QWORD *)v13 + 2) = v17;
      *(_QWORD *)(v14 + 16) = v16;
      *(_OWORD *)v14 = v15;
      do
      {
        v18 = *((_QWORD *)v13 + 5);
        v19 = *(__int128 *)((char *)v13 + 24);
        v13 = (__int128 *)((char *)v13 + 24);
        v20 = *a3;
        v33 = v19;
        v34 = v18;
        v31 = v47;
        v32 = v48;
      }
      while ((v20(&v33, &v31) & 1) != 0);
      do
      {
        v21 = *(_QWORD *)(v14 - 8);
        v22 = *(_OWORD *)(v14 - 24);
        v14 -= 24;
        v23 = *a3;
        v29 = v22;
        v30 = v21;
        v27 = v47;
        v28 = v48;
      }
      while (!v23(&v29, &v27));
    }
    while ((unint64_t)v13 < v14);
    v9 = (uint64_t)v13 - 24;
  }
  if ((__int128 *)v9 != a1)
  {
    v24 = *(_OWORD *)v9;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v9 + 16);
    *a1 = v24;
  }
  v25 = v47;
  *(_QWORD *)(v9 + 16) = v48;
  *(_OWORD *)v9 = v25;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(__int128 *, __int128 *);
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(__int128 *, __int128 *);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v35 = *(_OWORD *)(a2 - 24);
      v36 = *(_QWORD *)(a2 - 8);
      v33 = *(_OWORD *)a1;
      v34 = *(_QWORD *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        v9 = a2 - 24;
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_OWORD *)a1;
        v12 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v12;
        *(_OWORD *)v9 = v11;
        *(_QWORD *)(v9 + 16) = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, a1 + 24, a1 + 48, (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, a1 + 24, a1 + 48, a1 + 72, (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v13 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *a3;
    v31 = *(_OWORD *)v14;
    v32 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v13 + 16);
    v29 = *(_OWORD *)v13;
    v30 = v18;
    if (v17(&v31, &v29))
    {
      v27 = *(_OWORD *)v14;
      v28 = *(_QWORD *)(v14 + 16);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(_QWORD *)(v20 + 88) = *(_QWORD *)(a1 + v19 + 64);
        if (v19 == -48)
          break;
        v21 = *a3;
        v25 = v27;
        v26 = v28;
        v23 = *(_OWORD *)(v20 + 24);
        v24 = *(_QWORD *)(v20 + 40);
        v19 -= 24;
        if ((v21(&v25, &v23) & 1) == 0)
        {
          v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *(_OWORD *)v22 = v27;
      *(_QWORD *)(v22 + 16) = v28;
      if (++v16 == 8)
        return v14 + 24 == a2;
    }
    v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  uint64_t (*v10)(__int128 *, __int128 *);
  __n128 result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  v10 = *a5;
  v34 = *a4;
  v35 = *((_QWORD *)a4 + 2);
  v32 = *(_OWORD *)a3;
  v33 = *(_QWORD *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    v12 = *(_QWORD *)(a3 + 16);
    v13 = *(_OWORD *)a3;
    v14 = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *(_QWORD *)(a3 + 16) = v14;
    *a4 = v13;
    *((_QWORD *)a4 + 2) = v12;
    v15 = *a5;
    v31 = *(_QWORD *)(a3 + 16);
    v30 = *(_OWORD *)a3;
    v16 = *(_OWORD *)a2;
    v29 = *(_QWORD *)(a2 + 16);
    v28 = v16;
    if (v15(&v30, &v28))
    {
      v17 = *(_QWORD *)(a2 + 16);
      v18 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(_QWORD *)(a3 + 16) = v17;
      v20 = *a5;
      v27 = *(_QWORD *)(a2 + 16);
      v26 = *(_OWORD *)a2;
      v21 = *(_OWORD *)a1;
      v25 = *(_QWORD *)(a1 + 16);
      v24 = v21;
      if (v20(&v26, &v24))
      {
        v22 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v23 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v23;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v22;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  uint64_t (*v12)(__int128 *, __int128 *);
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (*v22)(__int128 *, __int128 *);
  __n128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t (*v27)(__int128 *, __int128 *);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, a2, a3, (__int128 *)a4, a6);
  v12 = *a6;
  v45 = *a5;
  v46 = *((_QWORD *)a5 + 2);
  v43 = *(_OWORD *)a4;
  v44 = *(_QWORD *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *((_QWORD *)a5 + 2);
    *(_OWORD *)a4 = *a5;
    *(_QWORD *)(a4 + 16) = v16;
    *a5 = v15;
    *((_QWORD *)a5 + 2) = v14;
    v17 = *a6;
    v42 = *(_QWORD *)(a4 + 16);
    v41 = *(_OWORD *)a4;
    v18 = *(_OWORD *)a3;
    v40 = *(_QWORD *)(a3 + 16);
    v39 = v18;
    if (v17(&v41, &v39))
    {
      v19 = *(_QWORD *)(a3 + 16);
      v20 = *(_OWORD *)a3;
      v21 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v19;
      v22 = *a6;
      v38 = *(_QWORD *)(a3 + 16);
      v37 = *(_OWORD *)a3;
      v23 = *(__n128 *)a2;
      v36 = *(_QWORD *)(a2 + 16);
      v35 = v23;
      if (v22(&v37, (__int128 *)&v35))
      {
        v24 = *(_QWORD *)(a2 + 16);
        v25 = *(__n128 *)a2;
        v26 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v26;
        *(__n128 *)a3 = v25;
        *(_QWORD *)(a3 + 16) = v24;
        v27 = *a6;
        v34 = *(_QWORD *)(a2 + 16);
        v33 = *(__n128 *)a2;
        v28 = *(__n128 *)a1;
        v32 = *(_QWORD *)(a1 + 16);
        v31 = v28;
        if (v27((__int128 *)&v33, (__int128 *)&v31))
        {
          v29 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v30 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v30;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,cv3d::cv::gess::math::MatrixElementT<double>*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(__n128 *, __int128 *))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unsigned int (*v15)(__n128 *, __int128 *);
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  __n128 *v20;
  uint64_t v21;
  __n128 v22;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *a4;
        v27 = *v14;
        v28 = v14[1].n128_i64[0];
        v25 = *a1;
        v26 = a1[1].n128_u64[0];
        if (v15(&v27, (__int128 *)&v25))
        {
          v16 = v14[1].n128_u64[0];
          v17 = *v14;
          v18 = a1[1].n128_u64[0];
          *v14 = *a1;
          v14[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 = (__n128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v19 = v8 / 0x18uLL;
      v20 = (__n128 *)((char *)a2 - 24);
      do
      {
        v29 = *a1;
        v30 = a1[1].n128_u64[0];
        v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, (unsigned int (**)(__int128 *, __int128 *))a4, v19);
        if (v20 == (__n128 *)v21)
        {
          *(__n128 *)v21 = v29;
          *(_QWORD *)(v21 + 16) = v30;
        }
        else
        {
          v22 = *v20;
          *(_QWORD *)(v21 + 16) = v20[1].n128_u64[0];
          *(__n128 *)v21 = v22;
          *v20 = v29;
          v20[1].n128_u64[0] = v30;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)a1, v21 + 24, (unsigned int (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - (uint64_t)a1) >> 3));
        }
        v20 = (__n128 *)((char *)v20 - 24);
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, unsigned int (**a2)(__n128 *, __int128 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(__n128 *, __int128 *);
  uint64_t (*v16)(__n128 *, __n128 *);
  __n128 result;
  __n128 *v18;
  __n128 v19;
  uint64_t v20;
  unsigned int (*v21)(__n128 *, __int128 *);
  unsigned int (*v22)(__n128 *, __int128 *);
  __n128 v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  __n128 v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v41 = v4;
    v42 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3)
      {
        v15 = *a2;
        v39 = *(__n128 *)v13;
        v40 = *(_QWORD *)(v13 + 16);
        v37 = *(_OWORD *)(v13 + 24);
        v38 = *(_QWORD *)(v13 + 40);
        if (v15(&v39, &v37))
        {
          v13 += 24;
          v12 = v14;
        }
      }
      v16 = (uint64_t (*)(__n128 *, __n128 *))*a2;
      v35 = *(__n128 *)v13;
      v36 = *(_QWORD *)(v13 + 16);
      v33 = *v7;
      v34 = v7[1].n128_u64[0];
      if ((v16(&v35, &v33) & 1) == 0)
      {
        v31 = *v7;
        v32 = v7[1].n128_u64[0];
        do
        {
          v18 = (__n128 *)v13;
          v19 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = a1 + 24 * v20;
          if (2 * v12 + 2 < a3)
          {
            v21 = *a2;
            v29 = *(__n128 *)v13;
            v30 = *(_QWORD *)(v13 + 16);
            v27 = *(_OWORD *)(v13 + 24);
            v28 = *(_QWORD *)(v13 + 40);
            if (v21(&v29, &v27))
            {
              v13 += 24;
              v20 = 2 * v12 + 2;
            }
          }
          v22 = *a2;
          v25 = *(__n128 *)v13;
          v26 = *(_QWORD *)(v13 + 16);
          v23 = v31;
          v24 = v32;
          v7 = v18;
          v12 = v20;
        }
        while (!v22(&v25, (__int128 *)&v23));
        result = v31;
        v18[1].n128_u64[0] = v32;
        *v18 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, unsigned int (**a2)(__int128 *, __int128 *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(__int128 *, __int128 *);
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *a2;
      v13 = *(_QWORD *)(v9 + 16);
      v19 = *(_OWORD *)v9;
      v20 = v13;
      v14 = *(_QWORD *)(v9 + 40);
      v17 = *(_OWORD *)(v9 + 24);
      v18 = v14;
      if (v12(&v19, &v17))
      {
        v9 += 24;
        v10 = v11;
      }
    }
    v15 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v15;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  __int128 *v11;
  unsigned int (*v12)(__int128 *, __int128 *);
  double result;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  unsigned int (*v17)(__int128 *, __int128 *);
  char v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v29 = v4;
    v30 = v5;
    v10 = v6 >> 1;
    v11 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v12 = *a3;
    v27 = *v11;
    v28 = *((_QWORD *)v11 + 2);
    v25 = *(_OWORD *)(a2 - 24);
    v26 = *(_QWORD *)(a2 - 8);
    if (v12(&v27, &v25))
    {
      v14 = (__int128 *)(a2 - 24);
      v23 = *(_OWORD *)(a2 - 24);
      v24 = *(_QWORD *)(a2 - 8);
      do
      {
        v15 = v11;
        v16 = *v11;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v11 + 2);
        *v14 = v16;
        if (!v10)
          break;
        v10 = (v10 - 1) >> 1;
        v11 = (__int128 *)(a1 + 24 * v10);
        v17 = *a3;
        v21 = *v11;
        v22 = *((_QWORD *)v11 + 2);
        v19 = v23;
        v20 = v24;
        v18 = v17(&v21, &v19);
        v14 = v15;
      }
      while ((v18 & 1) != 0);
      result = *(double *)&v23;
      *v15 = v23;
      *((_QWORD *)v15 + 2) = v24;
    }
  }
  return result;
}

uint64_t *cv3d::cv::gess::math::SparseMatrixT<double>::Multiply(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  unint64_t v10;
  double *v11;

  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = (unint64_t *)result[5];
    v6 = *v5;
    do
    {
      v7 = v4 + 1;
      v8 = v5[v4 + 1];
      v9 = 0.0;
      v10 = v8 - v6;
      if (v8 > v6)
      {
        v11 = (double *)(result[2] + 24 * v6 + 16);
        do
        {
          v9 = v9 + *v11 * *(double *)(a2 + 8 * *((_QWORD *)v11 - 1));
          v11 += 3;
          --v10;
        }
        while (v10);
      }
      *(double *)(a3 + 8 * v4) = v9;
      v6 = v8;
      ++v4;
    }
    while (v7 != v3);
  }
  return result;
}

BOOL cv3d::cv::gess::alg::internal::CompileShaders(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, int a7)
{
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  id v19;
  int v20;

  v11 = *(void **)a1;
  v19 = 0;
  GetMTLLibrary(v11, (uint64_t)&v19, a5, a7);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v19;
  v14 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;

  if (v13)
  {
    if (a4)
      *(_DWORD *)(a3 + 384) = 5;
    if (*(_QWORD *)(a6 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v20 = 5;
      v15 = *(_QWORD *)(a6 + 24);
      if (!v15)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v15 + 48))(v15, &v20, __p);
      if (v18 < 0)
        operator delete(__p[0]);
    }
  }

  return v13 == 0;
}

void sub_23C5C47B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::InternalRasterize(id *a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  void *v18;
  int64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void **v35;
  uint64_t v36;
  int v37;
  void *v38;
  uint64_t v39;
  void **v40;
  int v41;
  _BYTE *v42;
  __int16 v43;
  void *begin;
  void **v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  void *v61;
  cv3d::cv::gess::util::os *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  char *v69;
  char *v70;
  void **v71;
  int v72;
  void *v73;
  void *v74;
  void **v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  uint64_t v87;
  void *v88;
  cv3d::cv::gess::alg::internal *v89;
  NSError *v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  int v95;
  unsigned int *v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  id v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  id v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  std::vector<unsigned int>::pointer v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int *v130;
  id v131;
  id v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  unint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  int v143;
  int v144;
  uint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  void *v148;
  id *v149;
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  id v153;
  void *v154[2];
  char v155;
  id v156;
  void **v157;
  uint64_t v158;
  char v159;
  std::vector<unsigned int> v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _DWORD v165[5];

  v18 = (void *)MEMORY[0x2426214AC]();
  v19 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v146 = *(unsigned int **)(a5 + 4);
  LODWORD(v147) = a2[1];
  HIDWORD(v147) = a2[3];
  v143 = a2[2];
  v144 = *a2;
  v20 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", v19, 0);
  v149 = a1;
  v21 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (unint64_t)(2* (((unint64_t)((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)* (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL, 0);
  v22 = v21;
  if (v20 && v21)
  {
    v132 = objc_retainAutorelease(v21);
    v23 = objc_msgSend(v132, "contents");
    v131 = objc_retainAutorelease(v20);
    v136 = a7;
    v140 = v18;
    memcpy((void *)objc_msgSend(v131, "contents"), *(const void **)a3, v19);
    v24 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if ((unint64_t)v24 >= 0xC)
    {
      v25 = 0;
      v26 = (v24 >> 2) / 3uLL;
      if (v26 <= 1)
        v26 = 1;
      do
      {
        *(_DWORD *)(v23 + 4 * v25) = v25;
        ++v25;
      }
      while (v26 != v25);
    }
    v145 = objc_msgSend(*v149, "newBufferWithLength:options:", 64, 0);
    if (!v145)
    {
      if (a10)
        *(_DWORD *)(a9 + 384) = 2;
      v38 = 0;
      if (*(_QWORD *)(a11 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(&v161, (char *)&unk_23C62207F);
        LODWORD(v160.__begin_) = 2;
        v39 = *(_QWORD *)(a11 + 24);
        if (!v39)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, std::vector<unsigned int> *, __int128 *))(*(_QWORD *)v39 + 48))(v39, &v160, &v161);
        if (SBYTE7(v162) < 0)
          operator delete((void *)v161);
      }
      v37 = 1;
      goto LABEL_79;
    }
    v161 = xmmword_23C603EC0;
    v162 = xmmword_23C605200;
    v163 = xmmword_23C605210;
    v164 = xmmword_23C60CBB0;
    v133 = v22;
    v134 = v20;
    objc_msgSend(v149[1], "commandBuffer");
    v135 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)objc_opt_new();
    v141 = v27;
    if (v144)
    {
      objc_msgSend(v27, "colorAttachments");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "objectAtIndexedSubscript:", 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v29, "setTexture:", v149[4]);
      objc_msgSend(v29, "setLoadAction:", 2);
      objc_msgSend(v29, "setStoreAction:", 1);
      objc_msgSend(v29, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

      v27 = v141;
    }
    if (!HIDWORD(v147))
    {
      if ((_DWORD)v147)
      {
        objc_msgSend(v27, "colorAttachments");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "objectAtIndexedSubscript:", 2);
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v31, "setTexture:", v149[5]);
        objc_msgSend(v31, "setLoadAction:", 2);
        objc_msgSend(v31, "setStoreAction:", 1);
        objc_msgSend(v31, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        v27 = v141;
      }
      if (v143)
      {
        objc_msgSend(v27, "colorAttachments");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "objectAtIndexedSubscript:", 3);
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v33, "setTexture:", v149[3]);
        objc_msgSend(v33, "setLoadAction:", 2);
        objc_msgSend(v33, "setStoreAction:", 1);
        objc_msgSend(v33, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        v27 = v141;
      }
    }
    v34 = v27;
    objc_msgSend(v27, "setRenderTargetWidth:");
    objc_msgSend(v34, "setRenderTargetHeight:");
    objc_msgSend(v34, "setRenderTargetArrayLength:", 1);
    objc_msgSend(v34, "setDefaultRasterSampleCount:", 1);
    std::string::basic_string[abi:ne180100]<0>(&v160, "VSAC");
    std::string::basic_string[abi:ne180100]<0>(&v157, (char *)&unk_23C62207F);
    if (!(_DWORD)v147 || HIDWORD(v147))
    {
      if (v147)
      {
        if (HIDWORD(v147) && (_DWORD)v147)
        {
          if (v159 < 0)
          {
            v158 = 6;
            v40 = v157;
          }
          else
          {
            v159 = 6;
            v40 = (void **)&v157;
          }
          v43 = 20304;
        }
        else
        {
          if (v159 < 0)
          {
            v158 = 6;
            v40 = v157;
          }
          else
          {
            v159 = 6;
            v40 = (void **)&v157;
          }
          v43 = 16973;
        }
        *((_WORD *)v40 + 2) = v43;
        *(_DWORD *)v40 = 1111708486;
        v42 = (char *)v40 + 6;
LABEL_52:
        *v42 = 0;
        if (SHIBYTE(v160.__end_cap_.__value_) >= 0)
          begin = &v160;
        else
          begin = v160.__begin_;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", begin);
        v138 = (void *)objc_claimAutoreleasedReturnValue();
        if (v159 >= 0)
          v45 = (void **)&v157;
        else
          v45 = v157;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v45);
        v137 = (void *)objc_claimAutoreleasedReturnValue();
        v46 = (void *)objc_msgSend(v149[2], "newFunctionWithName:", v138);
        v47 = (void *)objc_msgSend(v149[2], "newFunctionWithName:", v137);
        v48 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
        objc_msgSend(v48, "setVertexFunction:", v46);
        objc_msgSend(v48, "setFragmentFunction:", v47);
        if (v144)
        {
          objc_msgSend(v48, "colorAttachments");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "objectAtIndexedSubscript:", 1);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "setPixelFormat:", 53);

        }
        if (!HIDWORD(v147))
        {
          if ((_DWORD)v147)
          {
            objc_msgSend(v48, "colorAttachments");
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v51, "objectAtIndexedSubscript:", 2);
            v52 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v52, "setPixelFormat:", 53);

          }
          if (v143)
          {
            objc_msgSend(v48, "colorAttachments");
            v53 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v53, "objectAtIndexedSubscript:", 3);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v54, "setPixelFormat:", 125);

          }
        }
        v55 = *v149;
        v156 = 0;
        v56 = (void *)objc_msgSend(v55, "newRenderPipelineStateWithDescriptor:error:", v48, &v156);
        v57 = v156;
        if (v57)
        {
          v58 = v57;
          if (a10)
            *(_DWORD *)(a9 + 384) = 5;
          v38 = (void *)v145;
          if (*(_QWORD *)(a11 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(v154, (char *)&unk_23C62207F);
            v165[0] = 5;
            v59 = *(_QWORD *)(a11 + 24);
            if (!v59)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v59 + 48))(v59, v165, v154);
            if (v155 < 0)
              operator delete(v154[0]);
          }

          if (v159 < 0)
            operator delete(v157);
          v22 = v133;
          v20 = v134;
          if (SHIBYTE(v160.__end_cap_.__value_) < 0)
            operator delete(v160.__begin_);

        }
        else
        {

          if (v159 < 0)
            operator delete(v157);
          v22 = v133;
          v20 = v134;
          if (SHIBYTE(v160.__end_cap_.__value_) < 0)
            operator delete(v160.__begin_);
          v160.__begin_ = v146;
          objc_msgSend(v135, "renderCommandEncoderWithDescriptor:", v141);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v61, "setRenderPipelineState:", v56);
          objc_msgSend(v61, "setCullMode:", 0);
          objc_msgSend(v61, "setFrontFacingWinding:", 1);
          objc_msgSend(v61, "setVertexBuffer:offset:atIndex:", v131, 0, 0);
          objc_msgSend(v61, "setVertexBytes:length:atIndex:", &v161, 64, 1);
          objc_msgSend(v61, "setFragmentBytes:length:atIndex:", &v160, 8, 0);
          objc_msgSend(v61, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * ((v19 >> 2) / 9uLL), 1, v132, 0);
          objc_msgSend(v61, "endEncoding");

          if (HIDWORD(v147))
          {
            v139 = 3 * ((v19 >> 2) / 9uLL);
            v63 = (void *)objc_opt_new();
            v64 = v63;
            v148 = v63;
            if ((_DWORD)v147)
            {
              objc_msgSend(v63, "colorAttachments");
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "objectAtIndexedSubscript:", 0);
              v66 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v66, "setTexture:", v149[5]);
              objc_msgSend(v66, "setLoadAction:", 2);
              objc_msgSend(v66, "setStoreAction:", 1);
              objc_msgSend(v66, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

            }
            if (v143)
            {
              objc_msgSend(v64, "colorAttachments");
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v67, "objectAtIndexedSubscript:", 1);
              v68 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v68, "setTexture:", v149[3]);
              objc_msgSend(v68, "setLoadAction:", 2);
              objc_msgSend(v68, "setStoreAction:", 1);
              objc_msgSend(v68, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

            }
            objc_msgSend(v64, "setRenderTargetWidth:", v146);
            objc_msgSend(v64, "setRenderTargetHeight:", HIDWORD(v146));
            objc_msgSend(v64, "setRenderTargetArrayLength:", 1);
            objc_msgSend(v64, "setDefaultRasterSampleCount:", 1);
            std::string::basic_string[abi:ne180100]<0>(&v160, (char *)&unk_23C62207F);
            std::string::basic_string[abi:ne180100]<0>(&v157, (char *)&unk_23C62207F);
            if ((_DWORD)v147)
            {
              if (SHIBYTE(v160.__end_cap_.__value_) < 0)
              {
                v160.__end_ = (std::vector<unsigned int>::pointer)7;
                v69 = (char *)v160.__begin_;
              }
              else
              {
                HIBYTE(v160.__end_cap_.__value_) = 7;
                v69 = (char *)&v160;
              }
              strcpy(v69, "BVSCBPO");
              if (v159 < 0)
              {
                v158 = 7;
                v71 = v157;
              }
              else
              {
                v159 = 7;
                v71 = (void **)&v157;
              }
              v72 = 1330659907;
            }
            else
            {
              if (SHIBYTE(v160.__end_cap_.__value_) < 0)
              {
                v160.__end_ = (std::vector<unsigned int>::pointer)7;
                v70 = (char *)v160.__begin_;
              }
              else
              {
                HIBYTE(v160.__end_cap_.__value_) = 7;
                v70 = (char *)&v160;
              }
              strcpy(v70, "BVSCBMB");
              if (v159 < 0)
              {
                v158 = 7;
                v71 = v157;
              }
              else
              {
                v159 = 7;
                v71 = (void **)&v157;
              }
              v72 = 1112359491;
            }
            *(_DWORD *)((char *)v71 + 3) = v72;
            *(_DWORD *)v71 = 1129530946;
            *((_BYTE *)v71 + 7) = 0;
            if (SHIBYTE(v160.__end_cap_.__value_) >= 0)
              v73 = &v160;
            else
              v73 = v160.__begin_;
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v73);
            v74 = (void *)objc_claimAutoreleasedReturnValue();
            if (v159 >= 0)
              v75 = (void **)&v157;
            else
              v75 = v157;
            objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v75);
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            v77 = (void *)objc_msgSend(v149[2], "newFunctionWithName:", v74);
            v78 = (void *)objc_msgSend(v149[2], "newFunctionWithName:", v76);
            v79 = (void *)objc_opt_new();
            objc_msgSend(v79, "setVertexFunction:", v77);
            objc_msgSend(v79, "setFragmentFunction:", v78);
            if ((_DWORD)v147)
            {
              objc_msgSend(v79, "colorAttachments");
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v80, "objectAtIndexedSubscript:", 0);
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v81, "setPixelFormat:", 53);

            }
            if (v143)
            {
              objc_msgSend(v79, "colorAttachments");
              v82 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v82, "objectAtIndexedSubscript:", 1);
              v83 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "setPixelFormat:", 125);

            }
            v84 = *v149;
            v153 = 0;
            v142 = (void *)objc_msgSend(v84, "newRenderPipelineStateWithDescriptor:error:", v79, &v153);
            v85 = v153;
            if (v85)
            {
              v86 = v85;
              if (a10)
                *(_DWORD *)(a9 + 384) = 5;
              v38 = (void *)v145;
              if (*(_QWORD *)(a11 + 24))
              {
                std::string::basic_string[abi:ne180100]<0>(v154, (char *)&unk_23C62207F);
                v165[0] = 5;
                v87 = *(_QWORD *)(a11 + 24);
                if (!v87)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v87 + 48))(v87, v165, v154);
                if (v155 < 0)
                  operator delete(v154[0]);
              }

              if (v159 < 0)
                operator delete(v157);
              v22 = v133;
              v20 = v134;
              if (SHIBYTE(v160.__end_cap_.__value_) < 0)
                operator delete(v160.__begin_);

              goto LABEL_77;
            }

            if (v159 < 0)
              operator delete(v157);
            v22 = v133;
            v20 = v134;
            if (SHIBYTE(v160.__end_cap_.__value_) < 0)
              operator delete(v160.__begin_);
            v160.__begin_ = v146;
            objc_msgSend(v135, "renderCommandEncoderWithDescriptor:", v148);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v88, "setRenderPipelineState:", v142);
            objc_msgSend(v88, "setCullMode:", 0);
            objc_msgSend(v88, "setFrontFacingWinding:", 1);
            objc_msgSend(v88, "setVertexBuffer:offset:atIndex:", v131, 0, 0);
            objc_msgSend(v88, "setVertexBytes:length:atIndex:", &v161, 64, 1);
            objc_msgSend(v88, "setFragmentBytes:length:atIndex:", &v160, 8, 0);
            objc_msgSend(v88, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, v139, 1, v132, 0);
            objc_msgSend(v88, "endEncoding");

          }
          cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v62);
          objc_msgSend(v135, "commit");
          objc_msgSend(v135, "waitUntilCompleted");
          objc_msgSend(v135, "error");
          v89 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
          v91 = cv3d::cv::gess::alg::internal::GPUEncountersError(v89, v90);

          if (!v91)
          {
            v93 = 4 * v146;
            if (v144)
            {
              std::vector<unsigned int>::vector(&v160, (HIDWORD(v146) * (_DWORD)v146));
              v94 = v149[4];
              memset(v152, 0, 24);
              v152[3] = v146;
              v152[4] = HIDWORD(v146);
              v152[5] = 1;
              objc_msgSend(v94, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v160.__begin_, v93, v152, 0);
              v95 = *(_DWORD *)(a5 + 8);
              v96 = v160.__begin_;
              if (v95)
              {
                v97 = 0;
                v98 = 0;
                v99 = *(unsigned int *)(a5 + 4);
                v100 = *(_QWORD *)(a5 + 16);
                v101 = *(_DWORD *)(a5 + 12);
                v102 = v99 * v101 * (v95 - 1);
                do
                {
                  v103 = v99;
                  v104 = v97;
                  v105 = v102;
                  if ((_DWORD)v99)
                  {
                    do
                    {
                      *(_BYTE *)(v100 + v105) = v96[v104] > 0x80;
                      v105 += v101;
                      ++v104;
                      --v103;
                    }
                    while (v103);
                  }
                  ++v98;
                  v102 -= v99 * v101;
                  v97 += v99;
                }
                while (v98 != v95);
                v96 = v160.__begin_;
              }
              if (v96)
              {
                v160.__end_ = v96;
                operator delete(v96);
              }
            }
            if ((_DWORD)v147)
            {
              std::vector<unsigned int>::vector(&v160, (HIDWORD(v146) * (_DWORD)v146));
              v106 = v149[5];
              memset(v151, 0, 24);
              v151[3] = v146;
              v151[4] = HIDWORD(v146);
              v151[5] = 1;
              objc_msgSend(v106, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v160.__begin_, v93, v151, 0);
              v107 = *(_DWORD *)(a5 + 8);
              if (v107)
              {
                v108 = 0;
                v109 = *(_DWORD *)(a5 + 4);
                v110 = -1;
                do
                {
                  if (v109)
                  {
                    v111 = 0;
                    v112 = v107 + v110;
                    do
                    {
                      *(_DWORD *)(*(_QWORD *)(a6 + 16) + 4
                                                       * (v111 + v112 * *(_DWORD *)(a6 + 4))
                                                       * *(_DWORD *)(a6 + 12)) = *(_DWORD *)(*a4
                                                                                           + 4
                                                                                           * v160.__begin_[v111 + v108 * v109]);
                      ++v111;
                      v109 = *(_DWORD *)(a5 + 4);
                    }
                    while (v111 < v109);
                    v107 = *(_DWORD *)(a5 + 8);
                  }
                  ++v108;
                  --v110;
                }
                while (v108 < v107);
              }
              if (v160.__begin_)
              {
                v160.__end_ = v160.__begin_;
                operator delete(v160.__begin_);
              }
            }
            if (v143)
            {
              v113 = HIDWORD(v146) >> 2;
              std::vector<float>::vector(&v160, (4 * (_DWORD)v146 * (HIDWORD(v146) >> 2)));
              v114 = 0;
              v115 = -1;
              do
              {
                v116 = v114 * v113;
                if (v114 == 3)
                  v117 = HIDWORD(v146);
                else
                  v117 = v113 + v114 * v113;
                std::vector<float>::resize((uint64_t)&v160, 4 * (_DWORD)v146 * (v117 - v116));
                v118 = v149[3];
                v150[0] = 0;
                v150[1] = v114 * v113;
                v150[2] = 0;
                v150[3] = v146;
                v150[4] = v117 - v116;
                v150[5] = 1;
                objc_msgSend(v118, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v160.__begin_, 16 * v146, v150, 0);
                if (v116 < v117)
                {
                  v119 = 0;
                  v120 = *(unsigned int *)(a5 + 4);
                  v121 = *(_QWORD *)(v136 + 16);
                  v122 = *(_DWORD *)(v136 + 12);
                  v123 = v160.__begin_;
                  v124 = *(_DWORD *)(v136 + 4) * v122;
                  v125 = v124 * (*(_DWORD *)(a5 + 8) + v115);
                  do
                  {
                    v126 = v120;
                    v127 = v119;
                    v128 = v125;
                    if ((_DWORD)v120)
                    {
                      do
                      {
                        v129 = (unsigned int *)(v121 + 16 * v128);
                        v130 = &v123[4 * v127];
                        *v129 = *v130;
                        v129[1] = v130[1];
                        v129[2] = v130[2];
                        v128 += v122;
                        ++v127;
                        --v126;
                      }
                      while (v126);
                    }
                    LODWORD(v116) = v116 + 1;
                    v125 -= v124;
                    v119 += v120;
                  }
                  while (v116 < v117);
                }
                ++v114;
                v115 -= v113;
              }
              while (v114 != 4);
              if (v160.__begin_)
              {
                v160.__end_ = v160.__begin_;
                operator delete(v160.__begin_);
              }
              v37 = 0;
              v22 = v133;
              v20 = v134;
              v38 = (void *)v145;
            }
            else
            {
              v37 = 0;
              v38 = (void *)v145;
            }
            goto LABEL_78;
          }
          if (a10)
            *(_DWORD *)(a9 + 384) = 16;
          v38 = (void *)v145;
          if (*(_QWORD *)(a11 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v160, (char *)&unk_23C62207F);
            LODWORD(v157) = 16;
            v92 = *(_QWORD *)(a11 + 24);
            if (!v92)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, void ***, std::vector<unsigned int> *))(*(_QWORD *)v92 + 48))(v92, &v157, &v160);
            if (SHIBYTE(v160.__end_cap_.__value_) < 0)
              operator delete(v160.__begin_);
          }
        }
LABEL_77:
        v37 = 1;
LABEL_78:

LABEL_79:
        v18 = v140;
        goto LABEL_80;
      }
      if (v159 < 0)
      {
        v158 = 7;
        v35 = v157;
      }
      else
      {
        v159 = 7;
        v35 = (void **)&v157;
      }
      v41 = 1112359491;
    }
    else
    {
      if (v159 < 0)
      {
        v158 = 7;
        v35 = v157;
      }
      else
      {
        v159 = 7;
        v35 = (void **)&v157;
      }
      v41 = 1330659907;
    }
    *(_DWORD *)((char *)v35 + 3) = v41;
    *(_DWORD *)v35 = 1129206598;
    v42 = (char *)v35 + 7;
    goto LABEL_52;
  }
  if (a10)
    *(_DWORD *)(a9 + 384) = 2;
  if (*(_QWORD *)(a11 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v161, (char *)&unk_23C62207F);
    LODWORD(v160.__begin_) = 2;
    v36 = *(_QWORD *)(a11 + 24);
    if (!v36)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, std::vector<unsigned int> *, __int128 *))(*(_QWORD *)v36 + 48))(v36, &v160, &v161);
    if (SBYTE7(v162) < 0)
      operator delete((void *)v161);
  }
  v37 = 1;
LABEL_80:

  objc_autoreleasePoolPop(v18);
  return v37 == 0;
}

void sub_23C5C5964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::GPURasterize(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v11;
  id *v12;
  id v13;
  id *v14;
  id v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t **v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD **v36;
  unint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  float v52;
  float *v53;
  float **v54;
  unint64_t v55;
  _QWORD *v56;
  float *v57;
  float *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  float *v64;
  int v65;
  uint64_t v66;
  float v67;
  float *v68;
  float **v69;
  unint64_t v70;
  _QWORD *v71;
  float *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  float *v79;
  int v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD **v83;
  unint64_t v84;
  _QWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  id v104;
  void *v105;
  uint64_t v106;
  id v107;
  void *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  id *v117;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  id *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  _QWORD *v132;
  uint64_t v133;
  id *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  char v150;
  int v151;
  float v152;
  char v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  float *v161;
  uint64_t v162;
  float v163;
  float *v164;
  float **v165;
  unint64_t v166;
  _QWORD *v167;
  float *v168;
  float *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  float *v175;
  int v176;
  uint64_t v177;
  float v178;
  float *v179;
  float **v180;
  unint64_t v181;
  _QWORD *v182;
  float *v183;
  float *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char *v189;
  float *v190;
  int v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  unint64_t v195;
  _QWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  int v205;
  id *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BOOL4 v210;
  void ***v211;
  uint64_t v212;
  id *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  unsigned int *v223;
  unsigned int *v224;
  uint64_t v225;
  _QWORD *v226;
  unsigned int *v227;
  unsigned int *v228;
  uint64_t v229;
  _QWORD *v230;
  unsigned int *v231;
  unsigned int *v232;
  int v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  char *v239;
  char v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id *v253;
  unint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  void *context;
  uint64_t **v262;
  char v263;
  uint64_t **v264;
  BOOL v265;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v276;
  int v277;
  __int128 v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  int v284;
  _QWORD v285[3];
  _QWORD v286[3];
  id *v287;
  _BYTE v288[24];
  _BYTE *v289;
  _BYTE v290[24];
  _BYTE *v291;
  _BYTE v292[24];
  _BYTE *v293;
  _BYTE v294[24];
  _BYTE *v295;
  void **v296;
  int v297;
  char v298;
  void ***v299;
  uint64_t v300;

  v300 = *MEMORY[0x24BDAC8D0];
  v11 = MEMORY[0x2426214AC]();
  v12 = (id *)operator new();
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  v287 = v12;
  v13 = MTLCreateSystemDefaultDevice();
  v14 = v287;
  v15 = *v287;
  *v287 = v13;

  v16 = objc_msgSend(*v14, "newCommandQueue");
  v17 = v287[1];
  v287[1] = (id)v16;

  v257 = *a2;
  v259 = a2[1];
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v259 - *a2) >> 3);
  std::vector<std::vector<float>>::vector(v286, v18);
  std::vector<std::vector<unsigned int>>::vector(v285, v18);
  std::string::basic_string[abi:ne180100]<0>(&v296, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v19 = (uint64_t **)(a1 + 56);
  *(_WORD *)v294 = 0;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)v294, (unsigned __int8 *)&v296);
  context = (void *)v11;
  if (v298 < 0)
    operator delete(v296);
  if (v20 == -1)
    goto LABEL_253;
  std::string::basic_string[abi:ne180100]<0>(&v296, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(_QWORD *)&v294[4] = 0;
  *(_DWORD *)v294 = 0;
  v21 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v19, (uint64_t)v294, (unsigned __int8 *)&v296);
  if (v298 < 0)
    operator delete(v296);
  if (v21 == -1)
    goto LABEL_253;
  std::string::basic_string[abi:ne180100]<0>(&v296, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)v294 = 0;
  v23 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)v294, (unsigned __int8 *)&v296);
  if (v298 < 0)
    operator delete(v296);
  if (v23 == -1)
LABEL_253:
    __assert_rtn("GPURasterize", "RasterizeSurface.mm", 464, "success");
  LODWORD(v296) = v20;
  v271 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)v19, (unsigned int *)&v296, v22);
  LODWORD(v296) = v21;
  v273 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v19, (unsigned int *)&v296, v24);
  v254 = v18;
  v255 = a8;
  v262 = (uint64_t **)(a1 + 80);
  v264 = (uint64_t **)(a1 + 56);
  LODWORD(v296) = v23;
  v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v296, v25);
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    v27 = v26;
    v28 = 0;
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(v273 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v273 + 48) - v30) >> 2) <= v28)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v31 = v30 + 12 * v28;
      v296 = *(void ***)v31;
      v297 = *(_DWORD *)(v31 + 8);
      v32 = *(_QWORD *)(v271 + 40);
      if (v28 >= (*(_QWORD *)(v271 + 48) - v32) >> 1)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v33 = *(unsigned __int16 *)(v32 + 2 * v28);
      v34 = v285[0] + 24 * *(unsigned __int16 *)(v32 + 2 * v28);
      v36 = (_DWORD **)(v34 + 8);
      v35 = *(_DWORD **)(v34 + 8);
      v37 = *(_QWORD *)(v34 + 16);
      v276 = v29;
      if ((unint64_t)v35 >= v37)
      {
        v39 = *(_DWORD **)v34;
        v40 = ((uint64_t)v35 - *(_QWORD *)v34) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v42 = v37 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v34 + 16, v43);
          v35 = *v36;
          v39 = *(_DWORD **)v34;
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = v29;
        v38 = v45 + 4;
        while (v35 != v39)
        {
          v46 = *--v35;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(_QWORD *)v34 = v45;
        *v36 = v38;
        *(_QWORD *)(v34 + 16) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *v35 = v29;
        v38 = v35 + 1;
      }
      v47 = 0;
      *v36 = v38;
      do
      {
        v48 = *((unsigned int *)&v296 + v47);
        v49 = *(_QWORD *)(v27 + 40);
        if (v48 >= (*(_QWORD *)(v27 + 48) - v49) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v50 = (float *)(v49 + 8 * v48);
        v51 = v286[0] + 24 * v33;
        v52 = (float)(*v50 * 2.0) + -1.0;
        v54 = (float **)(v51 + 8);
        v53 = *(float **)(v51 + 8);
        v56 = (_QWORD *)(v51 + 16);
        v55 = *(_QWORD *)(v51 + 16);
        if ((unint64_t)v53 >= v55)
        {
          v58 = *(float **)v51;
          v59 = ((uint64_t)v53 - *(_QWORD *)v51) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v61 = v55 - (_QWORD)v58;
          if (v61 >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v56, v62);
            v53 = *v54;
            v58 = *(float **)v51;
          }
          else
          {
            v63 = 0;
          }
          v64 = (float *)&v63[4 * v59];
          *v64 = v52;
          v57 = v64 + 1;
          while (v53 != v58)
          {
            v65 = *((_DWORD *)v53-- - 1);
            *((_DWORD *)v64-- - 1) = v65;
          }
          *(_QWORD *)v51 = v64;
          *v54 = v57;
          *v56 = &v63[4 * v62];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *v53 = v52;
          v57 = v53 + 1;
        }
        *v54 = v57;
        v66 = v286[0] + 24 * v33;
        v67 = (float)(v50[1] * 2.0) + -1.0;
        v69 = (float **)(v66 + 8);
        v68 = *(float **)(v66 + 8);
        v71 = (_QWORD *)(v66 + 16);
        v70 = *(_QWORD *)(v66 + 16);
        if ((unint64_t)v68 >= v70)
        {
          v73 = *(float **)v66;
          v74 = ((uint64_t)v68 - *(_QWORD *)v66) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v76 = v70 - (_QWORD)v73;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v71, v77);
            v68 = *v69;
            v73 = *(float **)v66;
          }
          else
          {
            v78 = 0;
          }
          v79 = (float *)&v78[4 * v74];
          *v79 = v67;
          v72 = v79 + 1;
          while (v68 != v73)
          {
            v80 = *((_DWORD *)v68-- - 1);
            *((_DWORD *)v79-- - 1) = v80;
          }
          *(_QWORD *)v66 = v79;
          *v69 = v72;
          *v71 = &v78[4 * v77];
          if (v73)
            operator delete(v73);
        }
        else
        {
          *v68 = v67;
          v72 = v68 + 1;
        }
        *v69 = v72;
        v81 = v286[0] + 24 * v33;
        v83 = (_DWORD **)(v81 + 8);
        v82 = *(_DWORD **)(v81 + 8);
        v85 = (_QWORD *)(v81 + 16);
        v84 = *(_QWORD *)(v81 + 16);
        if ((unint64_t)v82 >= v84)
        {
          v87 = *(_DWORD **)v81;
          v88 = ((uint64_t)v82 - *(_QWORD *)v81) >> 2;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v90 = v84 - (_QWORD)v87;
          if (v90 >> 1 > v89)
            v89 = v90 >> 1;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
            v91 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v85, v91);
            v82 = *v83;
            v87 = *(_DWORD **)v81;
          }
          else
          {
            v92 = 0;
          }
          v93 = &v92[4 * v88];
          *(_DWORD *)v93 = 0;
          v86 = v93 + 4;
          while (v82 != v87)
          {
            v94 = *--v82;
            *((_DWORD *)v93 - 1) = v94;
            v93 -= 4;
          }
          *(_QWORD *)v81 = v93;
          *v83 = v86;
          *v85 = &v92[4 * v91];
          if (v87)
            operator delete(v87);
        }
        else
        {
          *v82 = 0;
          v86 = v82 + 1;
        }
        *v83 = v86;
        ++v47;
      }
      while (v47 != 3);
      v28 = (v276 + 1);
      v29 = v276 + 1;
    }
    while (v28 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  v96 = *(_DWORD *)(*a2 + 4);
  v95 = *(_DWORD *)(*a2 + 8);
  if (v95 == 0x4000)
    v97 = 0x2000;
  else
    v97 = 0x4000;
  if (v95 == 0x4000)
    v98 = 0x2000;
  else
    v98 = *(_DWORD *)(*a2 + 8);
  if (v96 == 0x4000)
    v99 = v97;
  else
    v99 = v96;
  v100 = v96 == 0x4000 && v95 == 0x4000;
  if (v96 == 0x4000)
    v101 = v98;
  else
    v101 = v95;
  v102 = (void *)objc_opt_new();
  objc_msgSend(v102, "setWidth:", v99);
  objc_msgSend(v102, "setHeight:", v101);
  objc_msgSend(v102, "setArrayLength:", 1);
  objc_msgSend(v102, "setTextureType:", 2);
  objc_msgSend(v102, "setStorageMode:", 0);
  objc_msgSend(v102, "setPixelFormat:", 53);
  objc_msgSend(v102, "setUsage:", 4);
  v103 = objc_msgSend(*v287, "newTextureWithDescriptor:", v102);
  v104 = v287[4];
  v287[4] = (id)v103;

  v105 = (void *)objc_opt_new();
  objc_msgSend(v105, "setWidth:", v99);
  objc_msgSend(v105, "setHeight:", v101);
  objc_msgSend(v105, "setArrayLength:", 1);
  objc_msgSend(v105, "setTextureType:", 2);
  objc_msgSend(v105, "setStorageMode:", 0);
  objc_msgSend(v105, "setPixelFormat:", 125);
  objc_msgSend(v105, "setUsage:", 4);
  v106 = objc_msgSend(*v287, "newTextureWithDescriptor:", v105);
  v107 = v287[3];
  v287[3] = (id)v106;

  v108 = (void *)objc_opt_new();
  objc_msgSend(v108, "setWidth:", v99);
  objc_msgSend(v108, "setHeight:", v101);
  objc_msgSend(v108, "setArrayLength:", 1);
  objc_msgSend(v108, "setTextureType:", 2);
  objc_msgSend(v108, "setStorageMode:", 0);
  objc_msgSend(v108, "setPixelFormat:", 53);
  objc_msgSend(v108, "setUsage:", 4);
  v109 = objc_msgSend(*v287, "newTextureWithDescriptor:", v108);
  v110 = v287[5];
  v287[5] = (id)v109;

  if (v287[4] && v287[3] && v287[5])
  {

    v284 = 0;
    HIBYTE(v284) = objc_msgSend(*v287, "areBarycentricCoordsSupported") ^ 1;
    v111 = (uint64_t)v287;
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v292, a9);
    v113 = cv3d::cv::gess::alg::internal::CompileShaders(v111, v112, a6, a7, v255, (uint64_t)v292, a10);
    v114 = v293;
    if (v293 == v292)
    {
      v115 = 4;
      v114 = v292;
    }
    else
    {
      if (!v293)
      {
LABEL_115:
        if (v100)
        {
          v282 = xmmword_23C60CBC0;
          v283 = 0;
          v280 = xmmword_23C60CBC0;
          v281 = 0;
          v278 = xmmword_23C60CBC0;
          v279 = 0;
          cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v282);
          cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>::AllocateMemory((uint64_t)&v280);
          cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>::AllocateMemory((uint64_t)&v278);
          if (v113)
          {
            std::string::basic_string[abi:ne180100]<0>(&v296, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
            *(_QWORD *)&v294[4] = 0;
            *(_DWORD *)v294 = 0;
            v120 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v264, (uint64_t)v294, (unsigned __int8 *)&v296);
            if (v298 < 0)
              operator delete(v296);
            if (v120 == -1)
            {
              v113 = 0;
              v121 = -1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v296, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
              *(_QWORD *)v294 = 0;
              v121 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v262, (uint64_t)v294, (unsigned __int8 *)&v296);
              v113 = v121 != -1;
              if (v298 < 0)
                operator delete(v296);
            }
          }
          else
          {
            v121 = -1;
            v120 = -1;
          }
          LODWORD(v296) = v120;
          v272 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v264, (unsigned int *)&v296, v119);
          LODWORD(v296) = v121;
          v144 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v262, (unsigned int *)&v296, v143);
          if (v259 != v257)
          {
            v145 = v144;
            v146 = 0;
            v147 = v254;
            if (v254 <= 1)
              v147 = 1;
            v256 = v147;
            do
            {
              v148 = 0;
              v258 = v146;
              v149 = (int)v146;
              v150 = 1;
              do
              {
                v277 = 0;
                v260 = v150;
                v151 = v148;
                v152 = -(float)(2 * v148);
                v153 = 1;
                do
                {
                  v265 = v113;
                  v263 = v153;
                  *(_QWORD *)(v286[0] + 24 * (int)v149 + 8) = *(_QWORD *)(v286[0] + 24 * (int)v149);
                  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
                  {
                    v154 = 0;
                    v155 = 0;
                    do
                    {
                      v274 = v155;
                      v156 = *(_QWORD *)(v272 + 40);
                      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v272 + 48) - v156) >> 2) <= v154)
LABEL_245:
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      v157 = 0;
                      v158 = v156 + 12 * v154;
                      v296 = *(void ***)v158;
                      v297 = *(_DWORD *)(v158 + 8);
                      do
                      {
                        v159 = *((unsigned int *)&v296 + v157);
                        v160 = *(_QWORD *)(v145 + 40);
                        if (v159 >= (*(_QWORD *)(v145 + 48) - v160) >> 3)
                          goto LABEL_245;
                        v161 = (float *)(v160 + 8 * v159);
                        v162 = v286[0] + 24 * (int)v149;
                        v163 = (float)(v152 + (float)((float)(*v161 + *v161) * 2.0)) + -1.0;
                        v165 = (float **)(v162 + 8);
                        v164 = *(float **)(v162 + 8);
                        v167 = (_QWORD *)(v162 + 16);
                        v166 = *(_QWORD *)(v162 + 16);
                        if ((unint64_t)v164 >= v166)
                        {
                          v169 = *(float **)v162;
                          v170 = ((uint64_t)v164 - *(_QWORD *)v162) >> 2;
                          v171 = v170 + 1;
                          if ((unint64_t)(v170 + 1) >> 62)
                            goto LABEL_251;
                          v172 = v166 - (_QWORD)v169;
                          if (v172 >> 1 > v171)
                            v171 = v172 >> 1;
                          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                            v173 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v173 = v171;
                          if (v173)
                          {
                            v174 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v167, v173);
                            v164 = *v165;
                            v169 = *(float **)v162;
                          }
                          else
                          {
                            v174 = 0;
                          }
                          v175 = (float *)&v174[4 * v170];
                          *v175 = v163;
                          v168 = v175 + 1;
                          while (v164 != v169)
                          {
                            v176 = *((_DWORD *)v164-- - 1);
                            *((_DWORD *)v175-- - 1) = v176;
                          }
                          *(_QWORD *)v162 = v175;
                          *v165 = v168;
                          *v167 = &v174[4 * v173];
                          if (v169)
                            operator delete(v169);
                        }
                        else
                        {
                          *v164 = v163;
                          v168 = v164 + 1;
                        }
                        *v165 = v168;
                        v177 = v286[0] + 24 * (int)v149;
                        v178 = (float)((float)((float)(v161[1] + v161[1]) * 2.0) - (float)(2 * v277)) + -1.0;
                        v180 = (float **)(v177 + 8);
                        v179 = *(float **)(v177 + 8);
                        v182 = (_QWORD *)(v177 + 16);
                        v181 = *(_QWORD *)(v177 + 16);
                        if ((unint64_t)v179 >= v181)
                        {
                          v184 = *(float **)v177;
                          v185 = ((uint64_t)v179 - *(_QWORD *)v177) >> 2;
                          v186 = v185 + 1;
                          if ((unint64_t)(v185 + 1) >> 62)
                            goto LABEL_251;
                          v187 = v181 - (_QWORD)v184;
                          if (v187 >> 1 > v186)
                            v186 = v187 >> 1;
                          if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
                            v188 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v188 = v186;
                          if (v188)
                          {
                            v189 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v182, v188);
                            v179 = *v180;
                            v184 = *(float **)v177;
                          }
                          else
                          {
                            v189 = 0;
                          }
                          v190 = (float *)&v189[4 * v185];
                          *v190 = v178;
                          v183 = v190 + 1;
                          while (v179 != v184)
                          {
                            v191 = *((_DWORD *)v179-- - 1);
                            *((_DWORD *)v190-- - 1) = v191;
                          }
                          *(_QWORD *)v177 = v190;
                          *v180 = v183;
                          *v182 = &v189[4 * v188];
                          if (v184)
                            operator delete(v184);
                        }
                        else
                        {
                          *v179 = v178;
                          v183 = v179 + 1;
                        }
                        *v180 = v183;
                        v192 = v286[0] + 24 * (int)v149;
                        v194 = (_DWORD **)(v192 + 8);
                        v193 = *(_DWORD **)(v192 + 8);
                        v196 = (_QWORD *)(v192 + 16);
                        v195 = *(_QWORD *)(v192 + 16);
                        if ((unint64_t)v193 >= v195)
                        {
                          v198 = *(_DWORD **)v192;
                          v199 = ((uint64_t)v193 - *(_QWORD *)v192) >> 2;
                          v200 = v199 + 1;
                          if ((unint64_t)(v199 + 1) >> 62)
LABEL_251:
                            std::vector<std::string>::__throw_length_error[abi:ne180100]();
                          v201 = v195 - (_QWORD)v198;
                          if (v201 >> 1 > v200)
                            v200 = v201 >> 1;
                          if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL)
                            v202 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v202 = v200;
                          if (v202)
                          {
                            v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v196, v202);
                            v193 = *v194;
                            v198 = *(_DWORD **)v192;
                          }
                          else
                          {
                            v203 = 0;
                          }
                          v204 = &v203[4 * v199];
                          *(_DWORD *)v204 = 0;
                          v197 = v204 + 4;
                          while (v193 != v198)
                          {
                            v205 = *--v193;
                            *((_DWORD *)v204 - 1) = v205;
                            v204 -= 4;
                          }
                          *(_QWORD *)v192 = v204;
                          *v194 = v197;
                          *v196 = &v203[4 * v202];
                          if (v198)
                            operator delete(v198);
                        }
                        else
                        {
                          *v193 = 0;
                          v197 = v193 + 1;
                        }
                        *v194 = v197;
                        ++v157;
                      }
                      while (v157 != 3);
                      v154 = (v274 + 1);
                      v155 = v274 + 1;
                    }
                    while (v154 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
                  }
                  BYTE2(v284) = 1;
                  LOWORD(v284) = 1;
                  if (!v265)
                  {
                    v113 = 0;
                    BYTE2(v284) = 0;
                    LOWORD(v284) = 256;
                    goto LABEL_217;
                  }
                  v206 = v287;
                  v207 = v286[0];
                  v208 = v285[0];
                  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)&v296, a9);
                  v210 = cv3d::cv::gess::alg::internal::InternalRasterize(v206, (unsigned __int8 *)&v284, v207 + 24 * v149, (_QWORD *)(v208 + 24 * v149), (uint64_t)&v282, (uint64_t)&v280, (uint64_t)&v278, v209, a6, a7, (uint64_t)&v296);
                  v211 = v299;
                  if (v299 == &v296)
                  {
                    v211 = &v296;
                    v212 = 4;
                  }
                  else
                  {
                    if (!v299)
                      goto LABEL_211;
                    v212 = 5;
                  }
                  ((void (*)(void))(*v211)[v212])();
LABEL_211:
                  v113 = 0;
                  BYTE2(v284) = 0;
                  LOWORD(v284) = 256;
                  if (!v210)
                    goto LABEL_217;
                  v213 = v287;
                  v214 = v286[0];
                  v215 = v285[0];
                  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v294, a9);
                  v113 = cv3d::cv::gess::alg::internal::InternalRasterize(v213, (unsigned __int8 *)&v284, v214 + 24 * v149, (_QWORD *)(v215 + 24 * v149), (uint64_t)&v282, (uint64_t)&v280, (uint64_t)&v278, v216, a6, a7, (uint64_t)v294);
                  v217 = v295;
                  if (v295 == v294)
                  {
                    v217 = v294;
                    v218 = 4;
                  }
                  else
                  {
                    if (!v295)
                      goto LABEL_217;
                    v218 = 5;
                  }
                  (*(void (**)(void))(*v217 + 8 * v218))();
LABEL_217:
                  v219 = DWORD1(v282);
                  if (DWORD1(v282))
                  {
                    v220 = 0;
                    v221 = *a2 + 24 * v149;
                    v222 = (_QWORD *)(v221 + 16);
                    v223 = (unsigned int *)(v221 + 4);
                    v224 = (unsigned int *)(v221 + 12);
                    v225 = *a3 + 24 * v149;
                    v226 = (_QWORD *)(v225 + 16);
                    v227 = (unsigned int *)(v225 + 4);
                    v228 = (unsigned int *)(v225 + 12);
                    v229 = *a4 + 24 * v149;
                    v230 = (_QWORD *)(v229 + 16);
                    v231 = (unsigned int *)(v229 + 4);
                    v232 = (unsigned int *)(v229 + 12);
                    v233 = DWORD2(v282);
                    do
                    {
                      if (v233)
                      {
                        v234 = 0;
                        do
                        {
                          v235 = HIDWORD(v282);
                          v236 = (DWORD1(v282) * v151);
                          v237 = (v233 * v277);
                          if (HIDWORD(v282))
                          {
                            v238 = (_BYTE *)(*v222 + (v220 + (v234 + v237) * *v223 + v236) * *v224);
                            v239 = (char *)(v283 + (v220 + v234 * DWORD1(v282)) * HIDWORD(v282));
                            do
                            {
                              v240 = *v239++;
                              *v238++ = v240;
                              --v235;
                            }
                            while (v235);
                          }
                          v241 = HIDWORD(v280);
                          if (HIDWORD(v280))
                          {
                            v242 = 0;
                            do
                            {
                              *(_DWORD *)(*v226 + 4 * (v220 + v236 + (v234 + v237) * *v227) * *v228 + 4 * v242) = *(_DWORD *)(v281 + 4 * (v220 + v234 * DWORD1(v280)) * v241 + 4 * v242);
                              ++v242;
                              v241 = HIDWORD(v280);
                            }
                            while (v242 < HIDWORD(v280));
                          }
                          v243 = HIDWORD(v278);
                          if (HIDWORD(v278))
                          {
                            v244 = 0;
                            v245 = v220 + v236;
                            v246 = v234 + v237;
                            do
                            {
                              *(_OWORD *)(*v230 + 16 * (v245 + v246 * *v231) * *v232 + 16 * v244) = *(_OWORD *)(v279 + 16 * (v220 + v234 * DWORD1(v278)) * v243 + 16 * v244);
                              ++v244;
                              v243 = HIDWORD(v278);
                            }
                            while (v244 < HIDWORD(v278));
                          }
                          ++v234;
                          v233 = DWORD2(v282);
                        }
                        while (v234 < DWORD2(v282));
                        v219 = DWORD1(v282);
                      }
                      ++v220;
                    }
                    while (v220 < v219);
                  }
                  v153 = 0;
                  v277 = 1;
                }
                while ((v263 & 1) != 0);
                v150 = 0;
                v148 = 1;
              }
              while ((v260 & 1) != 0);
              v146 = v258 + 1;
            }
            while (v258 + 1 != v256);
          }
          if (v279)
            MEMORY[0x2426211A0](v279 - 16, 0x1000C80451B5BE8);
          if (v281)
            MEMORY[0x2426211A0](v281, 0x1000C8052888210);
          if (v283)
            MEMORY[0x2426211A0](v283, 0x1000C8077774924);
          goto LABEL_242;
        }
        if (v259 == v257)
        {
LABEL_242:
          v247 = v287[4];
          v287[4] = 0;

          v248 = v287[3];
          v287[3] = 0;

          v249 = v287[5];
          v287[5] = 0;

          v250 = v287[2];
          v287[2] = 0;

          v251 = v287[1];
          v287[1] = 0;

          v252 = *v287;
          *v287 = 0;

          v296 = (void **)v285;
          std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v296);
          v296 = (void **)v286;
          std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v296);
          v253 = v287;
          v287 = 0;
          if (v253)
            std::default_delete<cv3d::cv::gess::alg::internal::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&v287, v253);
          objc_autoreleasePoolPop(context);
          return v113;
        }
        v122 = 0;
        if (v254 <= 1)
          v123 = 1;
        else
          v123 = v254;
        while (1)
        {
          BYTE2(v284) = 1;
          LOWORD(v284) = 1;
          if (!v113)
          {
            v113 = 0;
            BYTE2(v284) = 0;
            LOWORD(v284) = 256;
            goto LABEL_139;
          }
          v124 = v287;
          v125 = v286[0];
          v126 = v285[0];
          v127 = *a2;
          v128 = *a3;
          v129 = *a4;
          std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v290, a9);
          v131 = cv3d::cv::gess::alg::internal::InternalRasterize(v124, (unsigned __int8 *)&v284, v125 + v122, (_QWORD *)(v126 + v122), v127 + v122, v128 + v122, v129 + v122, v130, a6, a7, (uint64_t)v290);
          v132 = v291;
          if (v291 == v290)
          {
            v132 = v290;
            v133 = 4;
          }
          else
          {
            if (!v291)
              goto LABEL_133;
            v133 = 5;
          }
          (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_133:
          v113 = 0;
          BYTE2(v284) = 0;
          LOWORD(v284) = 256;
          if (v131)
          {
            v134 = v287;
            v135 = v286[0];
            v136 = v285[0];
            v137 = *a2;
            v138 = *a3;
            v139 = *a4;
            std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v288, a9);
            v113 = cv3d::cv::gess::alg::internal::InternalRasterize(v134, (unsigned __int8 *)&v284, v135 + v122, (_QWORD *)(v136 + v122), v137 + v122, v138 + v122, v139 + v122, v140, a6, a7, (uint64_t)v288);
            v141 = v289;
            if (v289 == v288)
            {
              v141 = v288;
              v142 = 4;
              goto LABEL_138;
            }
            if (v289)
            {
              v142 = 5;
LABEL_138:
              (*(void (**)(void))(*v141 + 8 * v142))();
            }
          }
LABEL_139:
          v122 += 24;
          if (!--v123)
            goto LABEL_242;
        }
      }
      v115 = 5;
    }
    (*(void (**)(void))(*v114 + 8 * v115))();
    goto LABEL_115;
  }
  if (a7)
    *(_DWORD *)(a6 + 384) = 2;
  if (*(_QWORD *)(a9 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v296, (char *)&unk_23C62207F);
    *(_DWORD *)v294 = 2;
    v116 = *(_QWORD *)(a9 + 24);
    if (!v116)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, _BYTE *, void ***))(*(_QWORD *)v116 + 48))(v116, v294, &v296);
    if (v298 < 0)
      operator delete(v296);
  }

  v296 = (void **)v285;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v296);
  v296 = (void **)v286;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v296);
  v117 = v287;
  v287 = 0;
  if (v117)
    std::default_delete<cv3d::cv::gess::alg::internal::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&v287, v117);
  objc_autoreleasePoolPop(context);
  return 0;
}

void sub_23C5C7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void ***a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,id *a48)
{
  uint64_t v48;
  id *v50;

  if (*(char *)(v48 - 153) < 0)
    operator delete(*(void **)(v48 - 176));
  if (a31)
    MEMORY[0x2426211A0](a31 - 16, 0x1000C80451B5BE8);
  if (a35)
    MEMORY[0x2426211A0](a35, 0x1000C8052888210);
  if (a39)
    MEMORY[0x2426211A0](a39, 0x1000C8077774924);
  a37 = &a42;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a42 = (void **)&a45;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a42);
  v50 = a48;
  a48 = 0;
  if (v50)
    std::default_delete<cv3d::cv::gess::alg::internal::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&a48, v50);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>::AllocateMemory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x2426211A0](v2, 0x1000C8052888210);
  v3 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
  v4 = (void *)operator new[]();
  v5 = v4;
  if ((_DWORD)v3)
    memset(v4, 255, 4 * v3);
  *(_QWORD *)(a1 + 16) = v5;
  return 1;
}

uint64_t cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>::AllocateMemory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x2426211A0](v2 - 16, 0x1000C80451B5BE8);
  v3 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
  v4 = (_QWORD *)operator new[]();
  *v4 = 16;
  v4[1] = v3;
  v5 = v4 + 2;
  if ((_DWORD)v3)
    bzero(v4 + 2, 16 * v3);
  *(_QWORD *)(a1 + 16) = v5;
  return 1;
}

BOOL cv3d::cv::gess::alg::internal::RasterizeSurface(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8, uint64_t a9, unsigned __int8 a10)
{
  void *v17;
  uint64_t v18;
  _BOOL8 v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v17 = (void *)MEMORY[0x2426214AC]();
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v23, a9);
  v19 = cv3d::cv::gess::alg::internal::GPURasterize(a1, a2, a4, a3, v18, a6, a7, a8, (uint64_t)v23, a10);
  v20 = v24;
  if (v24 == v23)
  {
    v21 = 4;
    v20 = v23;
    goto LABEL_5;
  }
  if (v24)
  {
    v21 = 5;
LABEL_5:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  objc_autoreleasePoolPop(v17);
  return v19;
}

void sub_23C5C75D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v16;
  uint64_t v17;

  v16 = a15;
  if (a15 == &a12)
  {
    v17 = 4;
    v16 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5C76A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::default_delete<cv3d::cv::gess::alg::internal::MetalContextImpl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x2426211B8);
  }
}

unint64_t cv3d::cv::gess::alg::internal::aligned_with_page_size(unint64_t this)
{
  unint64_t v1;

  v1 = this % *MEMORY[0x24BDB03C8];
  if (v1)
    return *MEMORY[0x24BDB03C8] + this - v1;
  return this;
}

uint64_t cv3d::cv::gess::alg::internal::RunRoughness(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t *a11, uint64_t a12, unsigned __int8 a13)
{
  void *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  int v34;
  float v35;
  double v36;
  float v37;
  float *v38;
  float v39;
  int i;
  float v41;
  int v42;
  int v43;
  float *v44;
  int j;
  id v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  cv3d::cv::gess::alg::internal *v62;
  NSError *v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  unint64_t v72;
  unint64_t v73;
  int64x2_t v74;
  unint64_t v75;
  int64x2_t v76;
  id v77;
  void *__p[2];
  char v79;
  id v80;
  int v81;
  float *v82;
  float *v83;
  char v84;
  int v85;
  int v86;
  _DWORD v87[3];

  v85 = a6;
  v86 = a5;
  v19 = (void *)MEMORY[0x2426214AC]();
  v20 = (a6 * a5);
  v21 = (_QWORD *)MEMORY[0x24BDB03C8];
  v22 = 12 * v20 % *MEMORY[0x24BDB03C8];
  if (v22)
    v23 = *MEMORY[0x24BDB03C8] + 12 * v20 - v22;
  else
    v23 = 12 * v20;
  v24 = (void *)objc_msgSend(*a1, "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(a2 + 16), v23, 0, 0);
  v25 = 4 * v20;
  v26 = v25 % *v21;
  v72 = v20;
  if (v26)
    v27 = *v21 + 4 * v20 - v26;
  else
    v27 = 4 * v20;
  v28 = (void *)objc_msgSend(*a1, "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(a3 + 16), v27, 0, 0);
  v29 = v25 % *v21;
  if (v29)
    v30 = *v21 + v25 - v29;
  else
    v30 = 4 * v20;
  v31 = objc_msgSend(*a1, "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(a4 + 16), v30, 0, 0);
  v32 = (void *)v31;
  if (v24 && v28 && v31)
  {
    v71 = v19;
    v81 = 31;
    std::vector<float>::vector(&v82, 0x3C1uLL);
    v69 = v32;
    v70 = v28;
    v33 = 0;
    v34 = 0;
    v35 = (float)((float)((float)0x1Fu * 0.3) + 0.8) * 0.5;
    v36 = 1.0 / ((float)((float)(v35 * v35) + (float)(v35 * v35)) * 3.14159265);
    v37 = v35 * (float)(v35 + v35);
    v38 = v82;
    v39 = 0.0;
    do
    {
      for (i = 0; i != 31; ++i)
      {
        v41 = v36 * expf((float)-((v33 - 15) * (v33 - 15) + (i - 15) * (i - 15)) / v37);
        v39 = v39 + v41;
        v38[v34 + i] = v41;
      }
      ++v33;
      v34 += 31;
    }
    while (v33 != 31);
    v42 = 0;
    v43 = 0;
    v44 = v82;
    v28 = v70;
    do
    {
      for (j = 0; j != 31; ++j)
        v44[v42 + j] = v44[v42 + j] / v39;
      ++v43;
      v42 += 31;
    }
    while (v43 != 31);
    v46 = *a1;
    v80 = 0;
    GetMTLLibrary(v46, (uint64_t)&v80, a11, a13);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v80;
    if (v48)
    {
      v49 = v48;
      if (a10)
        *(_DWORD *)(a9 + 384) = 5;
      if (*(_QWORD *)(a12 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
        v87[0] = 5;
        v50 = *(_QWORD *)(a12 + 24);
        if (!v50)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v50 + 48))(v50, v87, __p);
        v51 = v47;
        if (v79 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v51 = v47;
      }
      v53 = 1;
      v54 = 1;
    }
    else
    {
      v68 = objc_alloc_init(MEMORY[0x24BDDD550]);
      objc_msgSend(v68, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
      v55 = (void *)objc_msgSend(v47, "newFunctionWithName:", CFSTR("wkecUsTj5u"));
      objc_msgSend(v68, "setComputeFunction:", v55);

      v56 = *a1;
      v77 = 0;
      v57 = (void *)objc_msgSend(v56, "newComputePipelineStateWithDescriptor:options:reflection:error:", v68, 0, 0, &v77);
      v49 = v77;
      if (v57)
      {
        objc_msgSend(a1[1], "commandBuffer");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        v59 = objc_msgSend(v57, "maxTotalThreadsPerThreadgroup");
        if (v59 >= v72)
          v60 = v72;
        else
          v60 = v59;
        objc_msgSend(v58, "computeCommandEncoder", a11);
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v61, "setBuffer:offset:atIndex:", v24, 0, 0);
        objc_msgSend(v61, "setBuffer:offset:atIndex:", v70, 0, 1);
        objc_msgSend(v61, "setBuffer:offset:atIndex:", v32, 0, 2);
        objc_msgSend(v61, "setBytes:length:atIndex:", v82, (char *)v83 - (char *)v82, 3);
        objc_msgSend(v61, "setBytes:length:atIndex:", &v81, 4, 4);
        objc_msgSend(v61, "setBytes:length:atIndex:", &v86, 4, 5);
        objc_msgSend(v61, "setBytes:length:atIndex:", &v85, 4, 6);
        objc_msgSend(v61, "setComputePipelineState:", v57);
        v75 = v72;
        v76 = vdupq_n_s64(1uLL);
        v73 = v60;
        v74 = v76;
        objc_msgSend(v61, "dispatchThreads:threadsPerThreadgroup:", &v75, &v73);
        cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v61, "endEncoding"));
        objc_msgSend(v58, "commit");
        objc_msgSend(v58, "waitUntilCompleted");
        objc_msgSend(v58, "error");
        v62 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
        v64 = cv3d::cv::gess::alg::internal::GPUEncountersError(v62, v63);

        v32 = v69;
        if (v64)
        {
          if (a10)
            *(_DWORD *)(a9 + 384) = 16;
          if (*(_QWORD *)(a12 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
            v87[0] = 16;
            v65 = *(_QWORD *)(a12 + 24);
            if (!v65)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v65 + 48))(v65, v87, __p);
            if (v79 < 0)
              operator delete(__p[0]);
          }
        }
        v51 = v47;
        v54 = !v64;

        v53 = 0;
        v28 = v70;
        v19 = v71;
      }
      else
      {
        if (a10)
          *(_DWORD *)(a9 + 384) = 5;
        if (*(_QWORD *)(a12 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
          v87[0] = 5;
          v66 = *(_QWORD *)(a12 + 24);
          if (!v66)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v66 + 48))(v66, v87, __p);
          v51 = v47;
          if (v79 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v51 = v47;
        }
        v53 = 1;
        v54 = 1;
      }

    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
  }
  else
  {
    if (a10)
      *(_DWORD *)(a9 + 384) = 2;
    if (*(_QWORD *)(a12 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v82, (char *)&unk_23C62207F);
      LODWORD(__p[0]) = 2;
      v52 = *(_QWORD *)(a12 + 24);
      if (!v52)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, void **, float **))(*(_QWORD *)v52 + 48))(v52, __p, &v82);
      if (v84 < 0)
        operator delete(v82);
    }
    v53 = 1;
    v54 = 1;
  }

  objc_autoreleasePoolPop(v19);
  if (v53)
    return 0;
  else
    return v54;
}

void sub_23C5C7E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v38;

  v38 = *(void **)(v36 - 160);
  if (v38)
  {
    *(_QWORD *)(v36 - 152) = v38;
    operator delete(v38);
  }

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateRoughnessMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9)
{
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *context;
  id v25;
  id v26;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v16 = *(_DWORD *)(a1 + 4);
  v17 = *(_DWORD *)(a1 + 8);
  context = (void *)MEMORY[0x2426214AC]();
  v25 = 0;
  v26 = 0;
  cv3d::cv::gess::alg::internal::ConfigureProcessingContext((uint64_t)&v25);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v27, a8);
  v20 = cv3d::cv::gess::alg::internal::RunRoughness(&v25, a1, a2, a3, v16, v17, v18, v19, a5, a6, a7, (uint64_t)v27, a9);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_5;
  }
  if (v28)
  {
    v22 = 5;
LABEL_5:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }

  objc_autoreleasePoolPop(context);
  return v20;
}

void sub_23C5C80DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::ValidateOSStatus(cv3d::cv::gess::alg::internal *this)
{
  int8x16_t v2;
  uint64_t v3;

  cv3d::cv::gess::util::os::GetSystemPhysicalMemory(this);
  cv3d::cv::gess::util::os::GetDiskSpaceInfo(&v3);
  return cv3d::cv::gess::util::os::GetSystemMemoryInfo(&v2);
}

uint64_t cv3d::cv::gess::alg::internal::CreateUVIsoChart(uint64_t a1, int a2, char a3, unsigned int a4, int *a5, uint64_t a6, char a7, uint64_t a8, float a9, uint64_t a10)
{
  uint64_t v13;
  _BOOL8 v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  _OWORD v28[2];
  __int128 v29;
  _BYTE v30[28];
  int v31;
  char v32;
  uint64_t v33;
  float v34;
  char v35;
  int v36;
  char v37;
  int v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  char v42;
  int v43;
  int v44;
  _QWORD v45[3];
  _QWORD *v46;
  _BYTE v47[24];
  _BYTE *v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v36 = 100000;
  v37 = 0;
  v40 = 1;
  v41 = 257;
  v42 = 1;
  v38 = a2;
  v39 = a3;
  v33 = a4;
  v34 = a9;
  v43 = *a5;
  if (a7)
  {
    v29 = 0u;
    memset(v30, 0, sizeof(v30));
    memset(v28, 0, sizeof(v28));
    v31 = 3;
    v32 = 1;
    v49[0] = &off_250D4ADA8;
    v50 = v49;
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v47, a8);
    v13 = (uint64_t)v50;
    if (v50)
    {
      if (v50 == v49)
      {
        v46 = v45;
        (*(void (**)(uint64_t, _QWORD *))(v49[0] + 24))((uint64_t)v49, v45);
LABEL_8:
        v14 = cv3d::cv::gess::alg::IsoChartParameterize(a1, (uint64_t)&v33, (uint64_t)v28, (uint64_t)v47, (uint64_t)v45);
        v15 = v46;
        if (v46 == v45)
        {
          v16 = 4;
          v15 = v45;
        }
        else
        {
          if (!v46)
            goto LABEL_13;
          v16 = 5;
        }
        (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_13:
        v17 = v48;
        if (v48 == v47)
        {
          v18 = 4;
          v17 = v47;
        }
        else
        {
          if (!v48)
            goto LABEL_18;
          v18 = 5;
        }
        (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_18:
        switch(v31)
        {
          case 0:
            goto LABEL_30;
          case 1:
            *(_DWORD *)(a6 + 384) = 22;
            if (!*(_QWORD *)(a10 + 24))
              goto LABEL_30;
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
            v44 = 22;
            v19 = *(_QWORD *)(a10 + 24);
            if (!v19)
              std::__throw_bad_function_call[abi:ne180100]();
            break;
          case 2:
            *(_DWORD *)(a6 + 384) = 11;
            if (!*(_QWORD *)(a10 + 24))
              goto LABEL_30;
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
            v44 = 11;
            v19 = *(_QWORD *)(a10 + 24);
            if (!v19)
              std::__throw_bad_function_call[abi:ne180100]();
            break;
          default:
            v20 = *(_QWORD *)(a8 + 24);
            if (!v20 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20) & 1) == 0)
            {
              *(_QWORD *)(a6 + 224) = *(_QWORD *)&v28[0];
              *(_QWORD *)(a6 + 232) = *((_QWORD *)&v29 + 1);
              *(_QWORD *)(a6 + 256) = *(_QWORD *)v30;
              *(_QWORD *)(a6 + 264) = *(_QWORD *)&v30[8];
              *(_QWORD *)(a6 + 240) = *(_QWORD *)&v30[16];
              *(_DWORD *)(a6 + 248) = *(_DWORD *)&v30[24];
              v24 = v50;
              if (v50 == v49)
              {
                v25 = 4;
                v24 = v49;
              }
              else
              {
                if (!v50)
                  return v14;
                v25 = 5;
              }
              (*(void (**)(void))(*v24 + 8 * v25))();
              return v14;
            }
LABEL_30:
            v21 = v50;
            if (v50 == v49)
            {
              v22 = 4;
              v21 = v49;
            }
            else
            {
              if (!v50)
                return 0;
              v22 = 5;
            }
            (*(void (**)(void))(*v21 + 8 * v22))();
            return 0;
        }
        (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v19 + 48))(v19, &v44, __p);
        if (v27 < 0)
          operator delete(__p[0]);
        goto LABEL_30;
      }
      v13 = (*(uint64_t (**)(_QWORD *))(*v50 + 16))(v50);
    }
    v46 = (_QWORD *)v13;
    goto LABEL_8;
  }
  return cv3d::cv::gess::alg::IsoChartParameterize(a1, (uint64_t)&v33);
}

void sub_23C5C84B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v17 = *(_QWORD **)(v15 - 64);
  if (v17 == (_QWORD *)(v15 - 88))
  {
    v18 = 4;
    v17 = (_QWORD *)(v15 - 88);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double cv3d::cv::gess::alg::internal::CreateBlenderUV2(uint64_t a1, int a2, char a3, int a4, int *a5, uint64_t a6, char a7, uint64_t a8)
{
  int v8;
  double result;
  uint64_t v12;
  void *__p[2];
  char v14;
  _OWORD v15[2];
  __int128 v16;
  _BYTE v17[28];
  int v18;
  char v19;
  float v20[2];
  char v21;
  int v22;
  int v23;
  int v24;

  v20[0] = 1.0472;
  LODWORD(v20[1]) = a2;
  v21 = a3;
  if (a4 == 2)
    v8 = 2;
  else
    v8 = 1;
  if (!a4)
    v8 = 0;
  v22 = v8;
  v23 = *a5;
  if (a7)
  {
    v16 = 0u;
    memset(v17, 0, sizeof(v17));
    memset(v15, 0, sizeof(v15));
    v18 = 3;
    v19 = 1;
    cv3d::cv::gess::alg::BlenderUV2Parameterize(a1, v20, v15);
    if (v18)
    {
      if (v18 == 2)
      {
        *(_DWORD *)(a6 + 384) = 11;
        if (*(_QWORD *)(a8 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
          v24 = 11;
          v12 = *(_QWORD *)(a8 + 24);
          if (!v12)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v12 + 48))(v12, &v24, __p);
          if (v14 < 0)
            operator delete(__p[0]);
        }
      }
      else
      {
        *(_QWORD *)(a6 + 224) = *(_QWORD *)&v15[0];
        *(_QWORD *)(a6 + 232) = *((_QWORD *)&v16 + 1);
        result = *(double *)v17;
        *(_QWORD *)(a6 + 256) = *(_QWORD *)v17;
        *(_QWORD *)(a6 + 264) = *(_QWORD *)&v17[8];
      }
    }
  }
  else
  {
    cv3d::cv::gess::alg::BlenderUV2Parameterize(a1, v20);
  }
  return result;
}

void sub_23C5C86B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::CreateUVAuto(uint64_t a1, int a2, char a3, unsigned int a4, uint64_t a5, char a6, unsigned int a7, int a8, float a9, int *a10, uint64_t a11, uint64_t a12)
{
  __n128 v18;
  uint64_t v19;
  uint64_t UVIsoChart;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a7 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v32, a11);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v30, a12);
    UVIsoChart = cv3d::cv::gess::alg::internal::CreateUVIsoChart(a1, a2, a3, a4, a10, a5, a6, (uint64_t)v32, a9, (uint64_t)v30);
    v25 = v31;
    if (v31 == v30)
    {
      v26 = 4;
      v25 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_9;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_9:
    v21 = v33;
    if (v33 == v32)
    {
      v22 = 4;
      v21 = v32;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v28, a12);
  v18.n128_f64[0] = cv3d::cv::gess::alg::internal::CreateBlenderUV2(a1, a2, a3, a8, a10, a5, a6, (uint64_t)v28);
  UVIsoChart = v19;
  v21 = v29;
  if (v29 == v28)
  {
    v22 = 4;
    v21 = v28;
LABEL_13:
    (*(void (**)(__n128))(*(_QWORD *)v21 + 8 * v22))(v18);
    return UVIsoChart;
  }
LABEL_10:
  if (v21)
  {
    v22 = 5;
    goto LABEL_13;
  }
  return UVIsoChart;
}

void sub_23C5C887C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;

  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  v24 = a21;
  if (a21 == &a18)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::internal::GetLowMeshFromHighMesh(cv3d::cv::gess::mesh::PolyMesh *a1, char **this, uint64_t a3, int *a4, int *a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::chrono::system_clock::time_point *a12)
{
  uint64_t v19;
  unsigned int v20;
  float v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::chrono::system_clock::time_point v28;
  int v29;
  int v30;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  float v37;
  int v38;
  int UVAuto;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __n128 v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  float v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  int v65;
  float v67;
  __int16 v68;
  int v69;
  void *__p[2];
  char v71;
  uint64_t v72;
  int v73;
  _BYTE v74[24];
  _BYTE *v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v65 = a7;
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom(this, (void **)a1);
  v19 = (*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19)) >> 2;
  v20 = *(_DWORD *)(a3 + 4);
  v21 = 0.0;
  if (v20 <= v19)
  {
    v21 = *(float *)a3;
    v22 = (float)((float)(1.0 - *(float *)a3) * (float)v19);
    if (v20 > v22 || (v20 = *(_DWORD *)(a3 + 8), v20 < v22))
      v21 = 1.0 - (float)((float)v20 / (float)v19);
  }
  v68 = 256;
  v69 = 1065353216;
  v67 = v21;
  if (v19 >= 0x1E8481 && v21 > 0.99)
    HIBYTE(v68) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v84, a9);
  cv3d::cv::gess::alg::QuadricErrorMetricSimplify((cv3d::cv::gess::mesh::PolyMesh *)this, (int *)&v67, (uint64_t)v84);
  v23 = v85;
  if (v85 == v84)
  {
    v24 = 4;
    v23 = v84;
    goto LABEL_12;
  }
  if (v85)
  {
    v24 = 5;
LABEL_12:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  v25 = *(_QWORD *)(a9 + 24);
  if (v25)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25) & 1) != 0)
      return 0;
    v26 = *(_QWORD *)(a9 + 24);
    if (v26)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 48))(v26) & 1) != 0)
        return 0;
    }
  }
  cv3d::cv::gess::alg::TangentialRelaxation((cv3d::cv::gess::alg *)this, (cv3d::cv::gess::mesh::TriMesh *)2, 1.0, 1);
  if (*(_QWORD *)(a8 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
    LODWORD(v72) = 1097859072;
    v27 = *(_QWORD *)(a8 + 24);
    if (!v27)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v27 + 48))(v27, &v72, __p);
    if (v71 < 0)
      operator delete(__p[0]);
  }
  v28.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v65)
    *(double *)(a6 + 120) = (double)(v28.__d_.__rep_ - a12->__d_.__rep_) / 1000000.0;
  a12->__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v73 = 0;
  v72 = 0;
  v29 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)a1 + 7, (uint64_t)&v72, (unsigned __int8 *)__p);
  if (v71 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v72 = 0;
  v30 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)a1 + 10, (uint64_t)&v72, (unsigned __int8 *)__p);
  if (v71 < 0)
    operator delete(__p[0]);
  v32 = v29 != -1 && v30 != -1;
  v33 = *(_DWORD *)(a3 + 12);
  if (v33)
  {
    if (v33 == 2)
    {
      if (v32 && !cv3d::cv::gess::alg::ComputeIMTFromHighMesh(this, a1, a11))
      {
        UVAuto = 0;
        goto LABEL_67;
      }
      v34 = *a4;
      v35 = *a5;
      v36 = *(_DWORD *)(a3 + 16);
      v37 = *(float *)(a3 + 20);
      v38 = *(_DWORD *)(a3 + 24);
      std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v80, a9);
      std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v78, a10);
      UVAuto = cv3d::cv::gess::alg::internal::CreateUVAuto((uint64_t)this, v34, v35, v36, a6, a7, 0x7A120u, v38, v37, (int *)(a3 + 28), (uint64_t)v80, (uint64_t)v78);
      v40 = v79;
      if (v79 == v78)
      {
        v41 = 4;
        v40 = v78;
      }
      else
      {
        if (!v79)
        {
LABEL_54:
          v57 = v81;
          if (v81 == v80)
          {
            v58 = 4;
            v57 = v80;
          }
          else
          {
            if (!v81)
              goto LABEL_67;
            v58 = 5;
          }
          (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_67:
          v61 = *(_QWORD *)(a9 + 24);
          if (!v61)
            goto LABEL_74;
          goto LABEL_71;
        }
        v41 = 5;
      }
      (*(void (**)(void))(*v40 + 8 * v41))();
      goto LABEL_54;
    }
    if (v32 && !cv3d::cv::gess::alg::ComputeIMTFromHighMesh(this, a1, a11))
    {
      UVAuto = 0;
      goto LABEL_70;
    }
    v49 = *a4;
    v50 = *a5;
    v51 = *(_DWORD *)(a3 + 16);
    v52 = *(float *)(a3 + 20);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v76, a9);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v74, a10);
    UVAuto = cv3d::cv::gess::alg::internal::CreateUVIsoChart((uint64_t)this, v49, v50, v51, (int *)(a3 + 28), a6, a7, (uint64_t)v76, v52, (uint64_t)v74);
    v53 = v75;
    if (v75 == v74)
    {
      v54 = 4;
      v53 = v74;
    }
    else
    {
      if (!v75)
      {
LABEL_61:
        v59 = v77;
        if (v77 == v76)
        {
          v60 = 4;
          v59 = v76;
        }
        else
        {
          if (!v77)
            goto LABEL_70;
          v60 = 5;
        }
        (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_70:
        v61 = *(_QWORD *)(a9 + 24);
        if (!v61)
          goto LABEL_74;
LABEL_71:
        v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 48))(v61);
        goto LABEL_72;
      }
      v54 = 5;
    }
    (*(void (**)(void))(*v53 + 8 * v54))();
    goto LABEL_61;
  }
  v42 = *(_QWORD *)a4;
  v43 = *(_QWORD *)a5;
  v44 = *(_DWORD *)(a3 + 24);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v82, a10);
  v45.n128_f64[0] = cv3d::cv::gess::alg::internal::CreateBlenderUV2((uint64_t)this, v42, v43, v44, (int *)(a3 + 28), a6, a7, (uint64_t)v82);
  UVAuto = v46;
  v47 = v83;
  if (v83 == v82)
  {
    v48 = 4;
    v47 = v82;
    goto LABEL_49;
  }
  if (v83)
  {
    v48 = 5;
LABEL_49:
    (*(void (**)(__n128))(*v47 + 8 * v48))(v45);
  }
  v55 = *(_QWORD *)(a9 + 24);
  if (!v55)
    goto LABEL_74;
  v56 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v55 + 48))(v55, v45);
LABEL_72:
  if ((v56 & 1) != 0)
    return 0;
LABEL_74:
  if (*(_QWORD *)(a8 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
    LODWORD(v72) = 1101529088;
    v63 = *(_QWORD *)(a8 + 24);
    if (!v63)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v63 + 48))(v63, &v72, __p);
    if (v71 < 0)
      operator delete(__p[0]);
  }
  LODWORD(v72) = -1;
  if (UVAuto)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    v62 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v72, (unsigned __int8 *)__p);
    if (v71 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v62 = 0;
  }
  a12->__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  return v62;
}

void sub_23C5C8F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25,int a26,int a27,int a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    if (a15)
      *(_DWORD *)(a16 + 384) = 1;
    if (*(_QWORD *)(a13 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_23C62207F);
      a25 = 1;
      v41 = *(_QWORD *)(a13 + 24);
      if (!v41)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v41 + 48))(v41, &a25, &__p);
      if (a24 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C8E58);
  }
  _Unwind_Resume(exception_object);
}

void sub_23C5C92A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23C5C9350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23C5C938C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,int a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v30 = *(_QWORD **)(v25 + 120);
  if (v30 == v26)
  {
    v31 = 4;
    v30 = (_QWORD *)(v27 - 144);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a15)
      *(_DWORD *)(a16 + 384) = 1;
    if (*(_QWORD *)(a13 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_23C62207F);
      a25 = 1;
      v32 = *(_QWORD *)(a13 + 24);
      if (!v32)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v32 + 48))(v32, &a25, &__p);
      if (a24 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C8E58);
  }
  _Unwind_Resume(a1);
}

void sub_23C5C9504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23C5C9528(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::DetailMap(uint64_t a1, uint64_t a2, std::__fs::filesystem::path *a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7)
{
  int v14;
  cv3d::cv::gess::alg::internal *v15;
  _BOOL4 GPU;
  _BOOL4 v17;
  cv3d::cv::gess::util::os *v18;
  char *v19;
  cv3d::cv::gess::alg *v20;
  unint64_t v21;
  _BOOL4 v22;
  _BOOL4 ObjFile;
  unint64_t *v24;
  cv3d::cv::gess::mesh::TriMesh *v25;
  BOOL *v26;
  char v27;
  int v28;
  cv3d::cv::gess::util::os *v29;
  std::chrono::system_clock::time_point v30;
  std::chrono::system_clock::time_point v31;
  _BOOL8 v32;
  cv3d::cv::gess::util::os *v33;
  BOOL v34;
  BOOL v35;
  cv3d::cv::gess::mesh::PolyMesh *v36;
  char **v37;
  uint64_t v38;
  cv3d::cv::gess::mesh::TriMesh *v39;
  BOOL *v40;
  char v41;
  std::chrono::system_clock::time_point v42;
  _BOOL4 LowMeshFromHighMesh;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  cv3d::cv::gess::mesh::PolyMesh *v57;
  _QWORD *v58;
  uint64_t v59;
  cv3d::cv::gess::mesh::PolyMesh *v60;
  BOOL v61;
  uint64_t v62;
  BOOL v63;
  cv3d::cv::gess::mesh::PolyMesh *v64;
  _QWORD *v65;
  uint64_t **v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t i;
  uint64_t v70;
  __int128 *v71;
  __int128 v72;
  uint64_t **v73;
  cv3d::cv::gess::util::os *v74;
  std::string *v75;
  uint64_t v76;
  std::__fs::filesystem::path *v77;
  std::chrono::system_clock::time_point v78;
  cv3d::cv::gess::mesh::PolyMesh *v79;
  _QWORD *v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  std::string *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  cv3d::cv::gess::util::os *v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  cv3d::cv::gess::util::os *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t j;
  cv3d::cv::gess::util::os *v122;
  unsigned __int8 v123;
  cv3d::cv::gess::alg::BakeCallbackBundle *v124;
  int v125;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  unint64_t v130;
  void *v131;
  void *v132;
  void *v133;
  char v134;
  void *v135;
  char v136;
  std::string v137;
  std::string v138;
  cv3d::cv::gess::mesh::PolyMesh *v139;
  std::__shared_weak_count *v140;
  std::string v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  std::__shared_weak_count *v145;
  cv3d::cv::gess::mesh::PolyMesh *v146;
  std::__shared_weak_count *v147;
  std::string __p;
  void *v149;
  void *v150;
  uint64_t v151;
  std::chrono::system_clock::time_point v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int *v157;
  int v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  _BYTE v165[24];
  _BYTE *v166;
  _BYTE v167[24];
  _BYTE *v168;
  std::string __str;
  std::string *p_str;
  _BYTE v171[24];
  _BYTE *v172;
  _BYTE v173[24];
  _BYTE *v174;
  _BYTE v175[24];
  _BYTE *v176;
  _BYTE v177[24];
  _BYTE *v178;
  _QWORD v179[3];
  _QWORD *v180;
  _BYTE v181[24];
  _BYTE *v182;
  _BYTE v183[24];
  _BYTE *v184;
  _BYTE v185[24];
  _BYTE *v186;
  _QWORD v187[3];
  _QWORD *v188;
  _QWORD v189[3];
  cv3d::cv::gess::util::os *v190;
  _QWORD v191[3];
  _QWORD *v192;
  uint64_t v193;
  std::__fs::filesystem::path::__string_view v194;

  v193 = *MEMORY[0x24BDAC8D0];
  v14 = *(unsigned __int8 *)(a4 + 504);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v191, a7);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v189, a7 + 32);
  v124 = (cv3d::cv::gess::alg::BakeCallbackBundle *)a7;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v187, a7 + 64);
  v152.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v150 = 0;
  v149 = 0;
  v151 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v149, *(const void **)(a4 + 456), *(_QWORD *)(a4 + 464), (uint64_t)(*(_QWORD *)(a4 + 464) - *(_QWORD *)(a4 + 456)) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_23C62207F);
  v15 = (cv3d::cv::gess::alg::internal *)cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v128, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  cv3d::cv::gess::alg::internal::ValidateOSStatus(v15);
  v125 = a6;
  cv3d::cv::gess::alg::internal::CustomSortGPU((unint64_t **)&v149);
  GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v149);
  if (!GPU)
  {
    if (a6)
      *(_DWORD *)(a5 + 384) = 17;
    if (v188)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
      v153 = 17;
      if (!v188)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int *, std::string *))(*v188 + 48))(v188, &v153, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v192)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
    v153 = 1088421888;
    if (!v192)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, std::string *))(*v192 + 48))(v192, &v153, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v14)
    v17 = 0;
  else
    v17 = GPU;
  if (v17)
  {
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a4 + 480), 0);
    if (__str.__r_.__value_.__s.__data_[0] != 255 && __str.__r_.__value_.__s.__data_[0])
    {
      GPU = 1;
    }
    else
    {
      if (a6)
        *(_DWORD *)(a5 + 384) = 4;
      if (v188)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
        LODWORD(v179[0]) = 4;
        if (!v188)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, _QWORD *, std::string *))(*v188 + 48))(v188, v179, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      GPU = 0;
    }
  }
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v128);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v18);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v146);
  v19 = (char *)operator new(0x60uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = &off_250D4ADF0;
  *(_OWORD *)(v19 + 24) = 0u;
  v20 = (cv3d::cv::gess::alg *)(v19 + 24);
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 9) = v19 + 80;
  v144 = v19 + 24;
  v145 = (std::__shared_weak_count *)v19;
  v21 = *(unsigned int *)(a4 + 60);
  v143 = *(unsigned int *)(a4 + 56);
  v142 = v21;
  if (!GPU)
  {
    v22 = 0;
    goto LABEL_62;
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, (char *)&unk_23C62207F);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v128, &v141, 0, 0);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
  LOWORD(v179[0]) = 1;
  BYTE2(v179[0]) = 1;
  HIDWORD(v179[0]) = 2;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  ObjFile = cv3d::cv::gess::io::LoadObjFile((__int128 *)&__str, (uint64_t)v146, (uint64_t)v20, (uint64_t)v179);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  LODWORD(v126[0]) = 0;
  if (ObjFile
    && (LODWORD(__str.__r_.__value_.__l.__data_) = 1,
        cv3d::cv::gess::alg::ComputeUVUtilization((uint64_t)v146, v20, (float *)v126, (int *)&__str))
    && (cv3d::cv::gess::alg::AutoMapNumberAndResolution(v20, (Material *)v126, (float *)&v143, &v142, v24) & 1) != 0)
  {
    cv3d::cv::gess::alg::RepairEverything(v146, v25, v26);
    v27 = 0;
    v28 = 1;
  }
  else
  {
    if (a6)
      *(_DWORD *)(a5 + 384) = 7;
    if (v188)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
      v154 = 7;
      if (!v188)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int *, std::string *))(*v188 + 48))(v188, &v154, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v28 = 0;
    v27 = 1;
  }
  if (!v192)
    goto LABEL_51;
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
  v154 = 1092616192;
  if (!v192)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *, int *, std::string *))(*v192 + 48))(v192, &v154, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v27 & 1) == 0)
    {
LABEL_52:
      if (*((_QWORD *)v146 + 20) - *((_QWORD *)v146 + 19) <= 7uLL)
      {
        if (a6)
          *(_DWORD *)(a5 + 384) = 9;
        if (v188)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
          v154 = 9;
          if (!v188)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int *, std::string *))(*v188 + 48))(v188, &v154, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        v28 = 0;
      }
    }
  }
  else
  {
LABEL_51:
    if ((v27 & 1) == 0)
      goto LABEL_52;
  }
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v128);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v29);
  v22 = v28 != 0;
LABEL_62:
  v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a6)
    *(double *)a5 = (double)(v30.__d_.__rep_ - v152.__d_.__rep_) / 1000000.0;
  v31.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v152.__d_.__rep_ = v31.__d_.__rep_;
  if (v190 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v190 + 48))(v190))
  {
    if (a6)
      *(_DWORD *)(a5 + 384) = 10;
    if (v188)
    {
      std::string::basic_string[abi:ne180100]<0>(v128, (char *)&unk_23C62207F);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      if (!v188)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, std::string *, void **))(*v188 + 48))(v188, &__str, v128);
      if (v129 < 0)
        operator delete(v128[0]);
    }
    v32 = 0;
    goto LABEL_295;
  }
  v33 = (cv3d::cv::gess::util::os *)_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v139);
  if (v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v138, (char *)&unk_23C62207F);
    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v128, &v138, 0, 0);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v138.__r_.__value_.__l.__data_);
    std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__str, (char *)&unk_23C62207F);
    v194.__data_ = (const std::string_view::value_type *)&__str;
    v34 = std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)a2, v194);
    v35 = v34;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v35)
      {
LABEL_78:
        v36 = v146;
        v37 = (char **)v139;
        v38 = (uint64_t)v192;
        if (v192)
        {
          if (v192 == v191)
          {
            v186 = v185;
            (*(void (**)(_QWORD *, _BYTE *))(v191[0] + 24))(v191, v185);
LABEL_96:
            v44 = (uint64_t)v190;
            if (v190)
            {
              if (v190 == (cv3d::cv::gess::util::os *)v189)
              {
                v184 = v183;
                (*(void (**)(_QWORD *, _BYTE *))(v189[0] + 24))(v189, v183);
LABEL_101:
                v45 = (uint64_t)v188;
                if (v188)
                {
                  if (v188 == v187)
                  {
                    v182 = v181;
                    (*(void (**)(_QWORD *, _BYTE *))(v187[0] + 24))(v187, v181);
LABEL_106:
                    LowMeshFromHighMesh = cv3d::cv::gess::alg::internal::GetLowMeshFromHighMesh(v36, v37, a4, (int *)&v143, (int *)&v142, a5, a6, (uint64_t)v185, (uint64_t)v183, (uint64_t)v181, (uint64_t)&v149, &v152);
                    v46 = v182;
                    if (v182 == v181)
                    {
                      v47 = 4;
                      v46 = v181;
                    }
                    else
                    {
                      if (!v182)
                        goto LABEL_111;
                      v47 = 5;
                    }
                    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_111:
                    v48 = v184;
                    if (v184 == v183)
                    {
                      v49 = 4;
                      v48 = v183;
                    }
                    else
                    {
                      if (!v184)
                      {
LABEL_116:
                        v50 = v186;
                        if (v186 == v185)
                        {
                          v51 = 4;
                          v50 = v185;
                          goto LABEL_120;
                        }
                        if (v186)
                        {
                          v51 = 5;
LABEL_120:
                          (*(void (**)(void))(*v50 + 8 * v51))();
                        }
LABEL_129:
                        cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v128);
                        v22 = LowMeshFromHighMesh;
                        goto LABEL_130;
                      }
                      v49 = 5;
                    }
                    (*(void (**)(void))(*v48 + 8 * v49))();
                    goto LABEL_116;
                  }
                  v45 = (*(uint64_t (**)(_QWORD *))(*v188 + 16))(v188);
                }
                v182 = (_BYTE *)v45;
                goto LABEL_106;
              }
              v44 = (*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v190 + 16))(v190);
            }
            v184 = (_BYTE *)v44;
            goto LABEL_101;
          }
          v38 = (*(uint64_t (**)(_QWORD *))(*v192 + 16))(v192);
        }
        v186 = (_BYTE *)v38;
        goto LABEL_96;
      }
    }
    else if (v34)
    {
      goto LABEL_78;
    }
    HIDWORD(v179[0]) = 3;
    LOWORD(v179[0]) = 1;
    BYTE2(v179[0]) = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __str = *(std::string *)a2;
    v41 = cv3d::cv::gess::io::LoadObjFile((__int128 *)&__str, (uint64_t **)v139, v179);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    cv3d::cv::gess::alg::RepairEverything(v139, v39, v40);
    v42.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (a6)
      *(double *)(a5 + 112) = (double)(v42.__d_.__rep_ - v31.__d_.__rep_) / 1000000.0;
    if (!v192)
      goto LABEL_93;
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
    v155 = 1101529088;
    if (!v192)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, std::string *))(*v192 + 48))(v192, &v155, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((v41 & 1) != 0)
        goto LABEL_94;
    }
    else
    {
LABEL_93:
      if ((v41 & 1) != 0)
      {
LABEL_94:
        LowMeshFromHighMesh = 1;
        goto LABEL_129;
      }
    }
    if (a6)
      *(_DWORD *)(a5 + 384) = 8;
    if (v188)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
      v155 = 8;
      if (!v188)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int *, std::string *))(*v188 + 48))(v188, &v155, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    LowMeshFromHighMesh = 0;
    goto LABEL_129;
  }
LABEL_130:
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v33);
  if (v190 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v190 + 48))(v190))
  {
    if (a6)
      *(_DWORD *)(a5 + 384) = 10;
    if (!v188)
      goto LABEL_289;
    std::string::basic_string[abi:ne180100]<0>(v128, (char *)&unk_23C62207F);
    LODWORD(__str.__r_.__value_.__l.__data_) = 10;
    v52 = v188;
    if (!v188)
      std::__throw_bad_function_call[abi:ne180100]();
LABEL_287:
    (*(void (**)(_QWORD *, std::string *, void **))(*v188 + 48))(v52, &__str, v128);
    if (v129 < 0)
      operator delete(v128[0]);
LABEL_289:
    v32 = 0;
    goto LABEL_290;
  }
  v152.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(&v137, (char *)&unk_23C62207F);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v128, &v137, 0, 0);
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v137.__r_.__value_.__l.__data_);
    if (v22)
      goto LABEL_139;
  }
  else if (v22)
  {
LABEL_139:
    v53 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v146);
    goto LABEL_142;
  }
  v53 = 0;
LABEL_142:
  if (v192)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
    v156 = 1103626240;
    if (!v192)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, std::string *))(*v192 + 48))(v192, &v156, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v190 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v190 + 48))(v190))
  {
    if (a6)
      *(_DWORD *)(a5 + 384) = 10;
    if (v188)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
      LODWORD(v179[0]) = 10;
      if (!v188)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _QWORD *, std::string *))(*v188 + 48))(v188, v179, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v128);
    goto LABEL_289;
  }
  if (v53)
  {
    v54 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v139);
    v56 = -1;
    LODWORD(v179[0]) = -1;
    if (v54)
    {
      v57 = v139;
      std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      v53 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v57, v179, (unsigned __int8 *)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v56 = v179[0];
    }
    else
    {
      v53 = 0;
    }
    LODWORD(v157) = v56;
    v58 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v139 + 10, (unsigned int *)&v157, v55);
    v59 = (*(uint64_t (**)(_QWORD *))(*v58 + 16))(v58);
    LODWORD(v126[0]) = -1;
    v60 = v139;
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    v61 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)v60, v126, (unsigned __int8 *)&__str);
    v63 = v61;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v63)
      {
LABEL_167:
        LODWORD(v157) = v126[0];
        v65 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)v139 + 10, (unsigned int *)&v157, v62);
        (*(void (**)(_QWORD *, uint64_t))(*v65 + 32))(v65, 1);
        v123 = a6;
        v67 = v65 + 5;
        v66 = (uint64_t **)v65[5];
        if ((uint64_t **)v67[1] == v66)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        if (v59)
        {
          v68 = 0;
          for (i = 0; i != v59; ++i)
          {
            v70 = v58[5];
            if (0xAAAAAAAAAAAAAAABLL * ((v58[6] - v70) >> 3) <= i)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v71 = (__int128 *)(v70 + v68);
            if (*((char *)v71 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v71, *((_QWORD *)v71 + 1));
            }
            else
            {
              v72 = *v71;
              __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v71 + 2);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v72;
            }
            LOWORD(v158) = i;
            v157 = &v158;
            v73 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v66, (unsigned __int16 *)&v158, (uint64_t)&std::piecewise_construct, (_WORD **)&v157);
            std::string::operator=((std::string *)(v73 + 5), &__str);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v68 += 24;
          }
        }
        a6 = v123;
        if (v192)
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
          LODWORD(v157) = 1106247680;
          if (!v192)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_QWORD *, int **, std::string *))(*v192 + 48))(v192, &v157, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_181;
      }
    }
    else if (v61)
    {
      goto LABEL_167;
    }
    v64 = v139;
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)v64, v126, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_167;
  }
LABEL_181:
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v128);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v74);
  if (v190 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v190 + 48))(v190))
  {
    if (v125)
      *(_DWORD *)(a5 + 384) = 10;
    if (!v188)
      goto LABEL_289;
    std::string::basic_string[abi:ne180100]<0>(v128, (char *)&unk_23C62207F);
    LODWORD(__str.__r_.__value_.__l.__data_) = 10;
    v52 = v188;
    if (!v188)
      std::__throw_bad_function_call[abi:ne180100]();
    goto LABEL_287;
  }
  if (!v53)
  {
    v32 = 0;
    goto LABEL_281;
  }
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v128, (const cv3d::cv::gess::alg::ConfigBake *)a4);
  v130 = __PAIR64__(v142, v143);
  v180 = 0;
  if (v192)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250D4AE28;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v191;
    p_str = &__str;
    std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](&__str, v179);
    v75 = p_str;
    if (p_str == &__str)
    {
      v76 = 4;
      v75 = &__str;
    }
    else
    {
      if (!p_str)
        goto LABEL_195;
      v76 = 5;
    }
    (*(void (**)(void))(v75->__r_.__value_.__r.__words[0] + 8 * v76))();
  }
LABEL_195:
  v77 = a3;
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&__str, v124);
  std::function<void ()(float,std::string const&)>::operator=(&__str, (uint64_t)v179);
  v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v125)
    *(double *)(a5 + 280) = (double)(v78.__d_.__rep_ - v152.__d_.__rep_) / 1000000.0;
  v79 = v146;
  v80 = v144;
  v81 = (uint64_t *)v139;
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v159, (const cv3d::cv::gess::alg::BakeCallbackBundle *)&__str);
  v32 = cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary((float32x4_t *)v79, v80, v81, v77, (uint64_t)v128, a5, a6, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v159);
  v82 = v168;
  if (v168 == v167)
  {
    v83 = 4;
    v82 = v167;
  }
  else
  {
    if (!v168)
      goto LABEL_202;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_202:
  v84 = v166;
  if (v166 == v165)
  {
    v85 = 4;
    v84 = v165;
  }
  else
  {
    if (!v166)
      goto LABEL_207;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_207:
  v86 = v164;
  if (v164 == v163)
  {
    v87 = 4;
    v86 = v163;
  }
  else
  {
    if (!v164)
      goto LABEL_212;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_212:
  v88 = v162;
  if (v162 == v161)
  {
    v89 = 4;
    v88 = v161;
  }
  else
  {
    if (!v162)
      goto LABEL_217;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_217:
  v90 = v160;
  if (v160 == v159)
  {
    v91 = 4;
    v90 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_222;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_222:
  if (v192)
  {
    std::string::basic_string[abi:ne180100]<0>(v126, (char *)&unk_23C62207F);
    v158 = 1120403456;
    if (!v192)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, void **))(*v192 + 48))(v192, &v158, v126);
    if (v127 < 0)
      operator delete(v126[0]);
  }
  v92 = v178;
  if (v178 == v177)
  {
    v93 = 4;
    v92 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_231;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_231:
  v94 = v176;
  if (v176 == v175)
  {
    v95 = 4;
    v94 = v175;
  }
  else
  {
    if (!v176)
      goto LABEL_236;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_236:
  v96 = v174;
  if (v174 == v173)
  {
    v97 = 4;
    v96 = v173;
  }
  else
  {
    if (!v174)
      goto LABEL_241;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_241:
  v98 = v172;
  if (v172 == v171)
  {
    v99 = 4;
    v98 = v171;
  }
  else
  {
    if (!v172)
      goto LABEL_246;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_246:
  v100 = p_str;
  if (p_str == &__str)
  {
    v101 = 4;
    v100 = &__str;
  }
  else
  {
    if (!p_str)
      goto LABEL_251;
    v101 = 5;
  }
  (*(void (**)(void))(v100->__r_.__value_.__r.__words[0] + 8 * v101))();
LABEL_251:
  v102 = v180;
  if (v180 == v179)
  {
    v103 = 4;
    v102 = v179;
    goto LABEL_255;
  }
  if (v180)
  {
    v103 = 5;
LABEL_255:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  if (v136 < 0)
    operator delete(v135);
  if (v134 < 0)
    operator delete(v133);
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput((void **)&v130);
LABEL_281:
  v104 = v190;
  if (v190)
  {
    v104 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v190 + 48))(v190);
    if ((_DWORD)v104)
    {
      if (v125)
        *(_DWORD *)(a5 + 384) = 10;
      if (!v188)
        goto LABEL_289;
      std::string::basic_string[abi:ne180100]<0>(v128, (char *)&unk_23C62207F);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      v52 = v188;
      if (!v188)
        std::__throw_bad_function_call[abi:ne180100]();
      goto LABEL_287;
    }
  }
  for (j = 0; ; ++j)
  {
    v122 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v104);
    if (j >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)v122 + 1) - *(_QWORD *)v122) >> 3))
      break;
    v104 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v122);
  }
LABEL_290:
  v105 = v140;
  if (v140)
  {
    p_shared_owners = (unint64_t *)&v140->__shared_owners_;
    do
      v107 = __ldaxr(p_shared_owners);
    while (__stlxr(v107 - 1, p_shared_owners));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
LABEL_295:
  v108 = v145;
  if (v145)
  {
    v109 = (unint64_t *)&v145->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v147;
  if (v147)
  {
    v112 = (unint64_t *)&v147->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  v114 = v188;
  if (v188 == v187)
  {
    v115 = 4;
    v114 = v187;
  }
  else
  {
    if (!v188)
      goto LABEL_312;
    v115 = 5;
  }
  (*(void (**)(void))(*v114 + 8 * v115))();
LABEL_312:
  v116 = v190;
  if (v190 == (cv3d::cv::gess::util::os *)v189)
  {
    v117 = 4;
    v116 = (cv3d::cv::gess::util::os *)v189;
  }
  else
  {
    if (!v190)
      goto LABEL_317;
    v117 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v116 + 8 * v117))();
LABEL_317:
  v118 = v192;
  if (v192 == v191)
  {
    v119 = 4;
    v118 = v191;
    goto LABEL_321;
  }
  if (v192)
  {
    v119 = 5;
LABEL_321:
    (*(void (**)(void))(*v118 + 8 * v119))();
  }
  return v32;
}

void sub_23C5CACA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_end_catch();
  JUMPOUT(0x23C5CB09CLL);
}

void sub_23C5CACDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x23C5CB09CLL);
}

void sub_23C5CACF4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a18)
      *(_DWORD *)(v18 + 384) = 1;
    if (*(_QWORD *)(v19 - 176))
    {
      std::string::basic_string[abi:ne180100]<0>(&STACK[0x410], (char *)&unk_23C62207F);
      LODWORD(STACK[0x4B8]) = 1;
      v20 = *(_QWORD *)(v19 - 176);
      if (!v20)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &STACK[0x4B8], &STACK[0x410]);
      if (SLOBYTE(STACK[0x427]) < 0)
        operator delete((void *)STACK[0x410]);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C9F64);
  }
  JUMPOUT(0x23C5CAD20);
}

void sub_23C5CAD04(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)&__p);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a18)
      *(_DWORD *)(v27 + 384) = 1;
    if (*(_QWORD *)(v28 - 176))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_23C62207F);
      LODWORD(STACK[0x410]) = 1;
      v30 = *(_QWORD *)(v28 - 176);
      if (!v30)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unint64_t *, void **))(*(_QWORD *)v30 + 48))(v30, &STACK[0x410], &__p);
      if (a27 < 0)
        operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C9A18);
  }
  JUMPOUT(0x23C5CB0A4);
}

void sub_23C5CAD14()
{
  JUMPOUT(0x23C5CB188);
}

void sub_23C5CAD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)va);
  JUMPOUT(0x23C5CB09CLL);
}

void sub_23C5CAD2C()
{
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  JUMPOUT(0x23C5CB09CLL);
}

void sub_23C5CAD44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x23C5CB0A4);
}

void sub_23C5CAD5C()
{
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  JUMPOUT(0x23C5CAF78);
}

void sub_23C5CAD74()
{
  if (SLOBYTE(STACK[0x29F]) < 0)
    JUMPOUT(0x23C5CAD84);
  JUMPOUT(0x23C5CB09CLL);
}

void sub_23C5CAD94()
{
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  JUMPOUT(0x23C5CAEA8);
}

void sub_23C5CADB8()
{
  JUMPOUT(0x23C5CAEA8);
}

void sub_23C5CADC8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a18)
      *(_DWORD *)(v18 + 384) = 1;
    if (*(_QWORD *)(v19 - 176))
    {
      std::string::basic_string[abi:ne180100]<0>(&STACK[0x410], (char *)&unk_23C62207F);
      LODWORD(STACK[0x4B8]) = 1;
      v21 = *(_QWORD *)(v19 - 176);
      if (!v21)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v21 + 48))(v21, &STACK[0x4B8], &STACK[0x410]);
      if (SLOBYTE(STACK[0x427]) < 0)
        operator delete((void *)STACK[0x410]);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C9F64);
  }
  JUMPOUT(0x23C5CAD20);
}

void sub_23C5CAE60()
{
  __cxa_end_catch();
  JUMPOUT(0x23C5CAD20);
}

void sub_23C5CAE88(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)&a22);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a18)
      *(_DWORD *)(v27 + 384) = 1;
    if (*(_QWORD *)(v28 - 176))
    {
      std::string::basic_string[abi:ne180100]<0>(&a22, (char *)&unk_23C62207F);
      LODWORD(STACK[0x410]) = 1;
      v30 = *(_QWORD *)(v28 - 176);
      if (!v30)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unint64_t *, void **))(*(_QWORD *)v30 + 48))(v30, &STACK[0x410], &a22);
      if (a27 < 0)
        operator delete(a22);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C9A18);
  }
  JUMPOUT(0x23C5CB0A4);
}

void sub_23C5CAF28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_end_catch();
  JUMPOUT(0x23C5CB0A4);
}

void sub_23C5CAF5C()
{
  JUMPOUT(0x23C5CB0A4);
}

void sub_23C5CAF64()
{
  JUMPOUT(0x23C5CB0ACLL);
}

void sub_23C5CAF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)va);
  JUMPOUT(0x23C5CB0B4);
}

void sub_23C5CAF84()
{
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  JUMPOUT(0x23C5CB0B4);
}

void sub_23C5CAF9C()
{
  JUMPOUT(0x23C5CB0B4);
}

void sub_23C5CAFA4()
{
  JUMPOUT(0x23C5CB0C4);
}

void sub_23C5CAFAC()
{
  JUMPOUT(0x23C5CB0F4);
}

void sub_23C5CAFB4()
{
  JUMPOUT(0x23C5CB124);
}

void sub_23C5CAFBC()
{
  JUMPOUT(0x23C5CB154);
}

void sub_23C5CAFC8()
{
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  JUMPOUT(0x23C5CAFF0);
}

void sub_23C5CAFE8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, int a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a18)
      *(_DWORD *)(v18 + 384) = 1;
    if (*(_QWORD *)(v19 - 176))
    {
      std::string::basic_string[abi:ne180100]<0>(&STACK[0x410], (char *)&unk_23C62207F);
      LODWORD(STACK[0x4B8]) = 1;
      v20 = *(_QWORD *)(v19 - 176);
      if (!v20)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v20 + 48))(v20, &STACK[0x4B8], &STACK[0x410]);
      if (SLOBYTE(STACK[0x427]) < 0)
        operator delete((void *)STACK[0x410]);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5C9770);
  }
  JUMPOUT(0x23C5CAF78);
}

void sub_23C5CB06C()
{
  __cxa_end_catch();
  JUMPOUT(0x23C5CAF78);
}

void sub_23C5CB098(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2F0]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x300]);
  v2 = (void *)STACK[0x328];
  if (STACK[0x328])
  {
    STACK[0x330] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(v1 - 176);
  if (v3 == (_QWORD *)(v1 - 200))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 200);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(v1 - 144);
  if (v5 == (_QWORD *)(v1 - 168))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 - 168);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = *(_QWORD **)(v1 - 112);
  if (v7 == (_QWORD *)(v1 - 136))
  {
    v8 = 4;
    v7 = (_QWORD *)(v1 - 136);
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_23C5CB208()
{
  __cxa_end_catch();
  JUMPOUT(0x23C5CAD20);
}

void sub_23C5CB230(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x23C5CB154);
}

_QWORD *std::function<void ()(float,std::string const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle(cv3d::cv::gess::alg::BakeCallbackBundle *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  cv3d::cv::gess::alg::BakeCallbackBundle *v5;
  uint64_t v6;
  cv3d::cv::gess::alg::BakeCallbackBundle *v7;
  uint64_t v8;
  cv3d::cv::gess::alg::BakeCallbackBundle *v9;
  uint64_t v10;
  cv3d::cv::gess::alg::BakeCallbackBundle *v11;
  uint64_t v12;

  v2 = (char *)this + 128;
  v3 = (char *)*((_QWORD *)this + 19);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (cv3d::cv::gess::alg::BakeCallbackBundle *)*((_QWORD *)this + 15);
  if (v5 == (cv3d::cv::gess::alg::BakeCallbackBundle *)((char *)this + 96))
  {
    v6 = 4;
    v5 = (cv3d::cv::gess::alg::BakeCallbackBundle *)((char *)this + 96);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (cv3d::cv::gess::alg::BakeCallbackBundle *)*((_QWORD *)this + 11);
  if (v7 == (cv3d::cv::gess::alg::BakeCallbackBundle *)((char *)this + 64))
  {
    v8 = 4;
    v7 = (cv3d::cv::gess::alg::BakeCallbackBundle *)((char *)this + 64);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (cv3d::cv::gess::alg::BakeCallbackBundle *)*((_QWORD *)this + 7);
  if (v9 == (cv3d::cv::gess::alg::BakeCallbackBundle *)((char *)this + 32))
  {
    v10 = 4;
    v9 = (cv3d::cv::gess::alg::BakeCallbackBundle *)((char *)this + 32);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (cv3d::cv::gess::alg::BakeCallbackBundle *)*((_QWORD *)this + 3);
  if (v11 == this)
  {
    v12 = 4;
    v11 = this;
  }
  else
  {
    if (!v11)
      return;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
}

void cv3d::cv::gess::alg::ConfigBake::~ConfigBake(void **this)
{
  void *v2;

  if (*((char *)this + 535) < 0)
    operator delete(this[64]);
  if (*((char *)this + 503) < 0)
    operator delete(this[60]);
  v2 = this[57];
  if (v2)
  {
    this[58] = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(this + 7);
}

uint64_t cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::PolyMesh *a1, cv3d::cv::gess::alg *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8, uint64_t a9)
{
  cv3d::cv::gess::alg::internal *v15;
  _BOOL4 GPU;
  char v17;
  cv3d::cv::gess::util::os *v18;
  unint64_t v19;
  cv3d::cv::gess::util::os *v20;
  unint64_t *v21;
  int v22;
  int v23;
  std::chrono::system_clock::time_point v24;
  cv3d::cv::gess::util::os *v25;
  _QWORD *v26;
  cv3d::cv::gess::mesh::TriMesh *v27;
  BOOL *v28;
  _BOOL4 LowMeshFromHighMesh;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::chrono::system_clock::time_point v39;
  int v40;
  uint64_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  _QWORD *v50;
  uint64_t **v51;
  uint64_t v52;
  unint64_t i;
  uint64_t v54;
  __int128 *v55;
  __int128 v56;
  uint64_t **v57;
  cv3d::cv::gess::util::os *v58;
  _QWORD *v59;
  const cv3d::cv::gess::alg::BakeCallbackBundle *v60;
  std::string *v61;
  uint64_t v62;
  std::chrono::system_clock::time_point v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  std::string *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  cv3d::cv::gess::util::os *v87;
  _QWORD *v88;
  uint64_t v89;
  cv3d::cv::gess::util::os *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t j;
  cv3d::cv::gess::util::os *v96;
  uint64_t v97;
  uint64_t v98;
  _Unwind_Exception *exception_object;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  unint64_t v106;
  void *v107;
  void *v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  std::string v113;
  std::string v114;
  unint64_t v115;
  uint64_t v116;
  std::string __p;
  void *v118;
  void *v119;
  uint64_t v120;
  std::chrono::system_clock::time_point v121;
  int v122;
  int v123;
  int v124;
  int *v125;
  int v126;
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[24];
  _BYTE *v130;
  _BYTE v131[24];
  _BYTE *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  std::string __str;
  std::string *p_str;
  _BYTE v139[24];
  _BYTE *v140;
  _BYTE v141[24];
  _BYTE *v142;
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[24];
  _BYTE *v146;
  _QWORD v147[3];
  _QWORD *v148;
  _BYTE v149[24];
  _BYTE *v150;
  _BYTE v151[24];
  _BYTE *v152;
  _BYTE v153[24];
  _BYTE *v154;
  _QWORD v155[3];
  _QWORD *v156;
  _QWORD v157[3];
  cv3d::cv::gess::util::os *v158;
  _QWORD v159[3];
  _QWORD *v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v159, a9);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v157, a9 + 32);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v155, a9 + 64);
  v121.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v119 = 0;
  v118 = 0;
  v120 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v118, *(const void **)(a6 + 456), *(_QWORD *)(a6 + 464), (uint64_t)(*(_QWORD *)(a6 + 464) - *(_QWORD *)(a6 + 456)) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_23C62207F);
  v15 = (cv3d::cv::gess::alg::internal *)cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v104, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  cv3d::cv::gess::alg::internal::ValidateOSStatus(v15);
  cv3d::cv::gess::alg::internal::CustomSortGPU((unint64_t **)&v118);
  GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v118);
  if (GPU)
  {
    if (!v160)
      goto LABEL_20;
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
    v122 = 1088421888;
    if (!v160)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, std::string *))(*v160 + 48))(v160, &v122, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!GPU)
        goto LABEL_28;
    }
    else if (!GPU)
    {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  if (a8)
    *(_DWORD *)(a7 + 384) = 17;
  if (v156)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
    v122 = 17;
    if (!v156)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, std::string *))(*v156 + 48))(v156, &v122, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v160)
    goto LABEL_13;
  if (!GPU)
  {
LABEL_28:
    v17 = 0;
    goto LABEL_29;
  }
LABEL_20:
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a6 + 480), 0);
  if (__str.__r_.__value_.__s.__data_[0] == 255 || !__str.__r_.__value_.__s.__data_[0])
  {
    if (a8)
      *(_DWORD *)(a7 + 384) = 4;
    if (v156)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
      LODWORD(v147[0]) = 4;
      if (!v156)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, _QWORD *, std::string *))(*v156 + 48))(v156, v147, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_28;
  }
  v17 = 1;
LABEL_29:
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v104);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v18);
  v19 = *(unsigned int *)(a6 + 60);
  v116 = *(unsigned int *)(a6 + 56);
  v115 = v19;
  if ((v17 & 1) == 0)
  {
    v23 = 0;
    goto LABEL_50;
  }
  LODWORD(__str.__r_.__value_.__l.__data_) = 0;
  LODWORD(v104[0]) = 1;
  v20 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::alg::ComputeUVUtilization((uint64_t)a1, a2, (float *)&__str, (int *)v104);
  if ((_DWORD)v20)
  {
    v20 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::alg::AutoMapNumberAndResolution(a2, (Material *)&__str, (float *)&v116, &v115, v21);
    v22 = (int)v20;
  }
  else
  {
    v22 = 0;
  }
  if (!v160)
    goto LABEL_37;
  std::string::basic_string[abi:ne180100]<0>(v104, (char *)&unk_23C62207F);
  v123 = 1092616192;
  if (!v160)
    std::__throw_bad_function_call[abi:ne180100]();
  v20 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(_QWORD *, int *, void **))(*v160 + 48))(v160, &v123, v104);
  if ((v105 & 0x80000000) == 0)
  {
LABEL_37:
    if (v22)
      goto LABEL_38;
LABEL_48:
    v23 = 0;
    goto LABEL_49;
  }
  operator delete(v104[0]);
  if (!v22)
    goto LABEL_48;
LABEL_38:
  if (*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19) <= 7uLL)
  {
    if (a8)
      *(_DWORD *)(a7 + 384) = 9;
    if (v156)
    {
      std::string::basic_string[abi:ne180100]<0>(v104, (char *)&unk_23C62207F);
      v123 = 9;
      if (!v156)
        std::__throw_bad_function_call[abi:ne180100]();
      v20 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(_QWORD *, int *, void **))(*v156 + 48))(v156, &v123, v104);
      if (v105 < 0)
        operator delete(v104[0]);
    }
    goto LABEL_48;
  }
  v23 = 1;
LABEL_49:
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v20);
LABEL_50:
  v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a8)
    *(double *)(a7 + 280) = *(double *)(a7 + 280) + (double)(v24.__d_.__rep_ - v121.__d_.__rep_) / 1000000.0;
  v121.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v25 = v158;
  if (v158)
  {
    v25 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v158 + 48))(v158);
    if ((_DWORD)v25)
    {
      if (a8)
        *(_DWORD *)(a7 + 384) = 10;
      if (!v156)
        goto LABEL_244;
      std::string::basic_string[abi:ne180100]<0>(v104, (char *)&unk_23C62207F);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      v26 = v156;
      if (!v156)
        std::__throw_bad_function_call[abi:ne180100]();
      goto LABEL_58;
    }
  }
  if (!v23)
  {
    LowMeshFromHighMesh = 0;
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]<0>(&v114, (char *)&unk_23C62207F);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v104, &v114, 0, 0);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a3 + 184))
  {
    cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)a4, (void **)a3);
    cv3d::cv::gess::alg::RepairEverything((cv3d::cv::gess::alg *)a4, v27, v28);
    if (v160)
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
      v124 = 1101529088;
      if (!v160)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, int *, std::string *))(*v160 + 48))(v160, &v124, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    LowMeshFromHighMesh = 1;
    goto LABEL_99;
  }
  v30 = (uint64_t)v160;
  if (!v160)
    goto LABEL_72;
  if (v160 != v159)
  {
    v30 = (*(uint64_t (**)(_QWORD *))(*v160 + 16))(v160);
LABEL_72:
    v154 = (_BYTE *)v30;
    goto LABEL_74;
  }
  v154 = v153;
  (*(void (**)(_QWORD *, _BYTE *))(v159[0] + 24))(v159, v153);
LABEL_74:
  v31 = (uint64_t)v158;
  if (!v158)
  {
LABEL_77:
    v152 = (_BYTE *)v31;
    goto LABEL_79;
  }
  if (v158 != (cv3d::cv::gess::util::os *)v157)
  {
    v31 = (*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v158 + 16))(v158);
    goto LABEL_77;
  }
  v152 = v151;
  (*(void (**)(_QWORD *, _BYTE *))(v157[0] + 24))(v157, v151);
LABEL_79:
  v32 = (uint64_t)v156;
  if (!v156)
  {
LABEL_82:
    v150 = (_BYTE *)v32;
    goto LABEL_84;
  }
  if (v156 != v155)
  {
    v32 = (*(uint64_t (**)(_QWORD *))(*v156 + 16))(v156);
    goto LABEL_82;
  }
  v150 = v149;
  (*(void (**)(_QWORD *, _BYTE *))(v155[0] + 24))(v155, v149);
LABEL_84:
  LowMeshFromHighMesh = cv3d::cv::gess::alg::internal::GetLowMeshFromHighMesh(a1, (char **)a4, a6, (int *)&v116, (int *)&v115, a7, a8, (uint64_t)v153, (uint64_t)v151, (uint64_t)v149, (uint64_t)&v118, &v121);
  v33 = v150;
  if (v150 == v149)
  {
    v34 = 4;
    v33 = v149;
  }
  else
  {
    if (!v150)
      goto LABEL_89;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_89:
  v35 = v152;
  if (v152 == v151)
  {
    v36 = 4;
    v35 = v151;
  }
  else
  {
    if (!v152)
      goto LABEL_94;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_94:
  v37 = v154;
  if (v154 == v153)
  {
    v38 = 4;
    v37 = v153;
    goto LABEL_98;
  }
  if (v154)
  {
    v38 = 5;
LABEL_98:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
LABEL_99:
  v39.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a8)
    *(double *)(a7 + 280) = *(double *)(a7 + 280) + (double)(v39.__d_.__rep_ - v121.__d_.__rep_) / 1000000.0;
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v104);
LABEL_102:
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v25);
  if (v158 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v158 + 48))(v158))
  {
    if (a8)
      *(_DWORD *)(a7 + 384) = 10;
    if (!v156)
      goto LABEL_244;
    std::string::basic_string[abi:ne180100]<0>(v104, (char *)&unk_23C62207F);
    LODWORD(__str.__r_.__value_.__l.__data_) = 10;
    v26 = v156;
    if (!v156)
      std::__throw_bad_function_call[abi:ne180100]();
LABEL_58:
    (*(void (**)(_QWORD *, std::string *, void **))(*v156 + 48))(v26, &__str, v104);
    goto LABEL_242;
  }
  v121.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(&v113, (char *)&unk_23C62207F);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v104, &v113, 0, 0);
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v113.__r_.__value_.__l.__data_);
    if (!LowMeshFromHighMesh)
    {
LABEL_149:
      v43 = 0;
      goto LABEL_150;
    }
  }
  else if (!LowMeshFromHighMesh)
  {
    goto LABEL_149;
  }
  v40 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a4);
  v42 = -1;
  LODWORD(v147[0]) = -1;
  v98 = a5;
  if (v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    v43 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a4, v147, (unsigned __int8 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v42 = v147[0];
  }
  else
  {
    v43 = 0;
  }
  LODWORD(v125) = v42;
  exception_object = (_Unwind_Exception *)a4;
  v44 = (uint64_t *)(a4 + 80);
  v45 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a4 + 80), (unsigned int *)&v125, v41);
  v46 = (*(uint64_t (**)(_QWORD *))(*v45 + 16))(v45);
  LODWORD(v102[0]) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  v47 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)exception_object, v102, (unsigned __int8 *)&__str);
  v49 = v47;
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v47)
      goto LABEL_124;
LABEL_122:
    std::string::basic_string[abi:ne180100]<0>(&__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)exception_object, v102, (__int128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_124;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if (!v49)
    goto LABEL_122;
LABEL_124:
  LODWORD(v125) = v102[0];
  v50 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>(v44, (unsigned int *)&v125, v48);
  (*(void (**)(_QWORD *, uint64_t))(*v50 + 32))(v50, 1);
  v97 = a7;
  v51 = (uint64_t **)v50[5];
  if ((uint64_t **)v50[6] == v51)
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  if (v46)
  {
    v52 = 0;
    for (i = 0; i != v46; ++i)
    {
      v54 = v45[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v45[6] - v54) >> 3) <= i)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v55 = (__int128 *)(v54 + v52);
      if (*((char *)v55 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v55, *((_QWORD *)v55 + 1));
      }
      else
      {
        v56 = *v55;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v55 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v56;
      }
      LOWORD(v126) = i;
      v125 = &v126;
      v57 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v51, (unsigned __int16 *)&v126, (uint64_t)&std::piecewise_construct, (_WORD **)&v125);
      std::string::operator=((std::string *)(v57 + 5), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v52 += 24;
    }
  }
  a7 = v97;
  a5 = v98;
  a4 = (uint64_t)exception_object;
  if (v160)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&unk_23C62207F);
    LODWORD(v125) = 1106247680;
    if (!v160)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int **, std::string *))(*v160 + 48))(v160, &v125, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_150:
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v104);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v58);
  if (v158 && (*(unsigned int (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v158 + 48))(v158))
  {
    if (a8)
      *(_DWORD *)(a7 + 384) = 10;
    if (!v156)
      goto LABEL_244;
    std::string::basic_string[abi:ne180100]<0>(v104, (char *)&unk_23C62207F);
    LODWORD(__str.__r_.__value_.__l.__data_) = 10;
    v59 = v156;
    if (!v156)
      std::__throw_bad_function_call[abi:ne180100]();
    goto LABEL_241;
  }
  if (!v43)
  {
    v64 = 0;
    goto LABEL_235;
  }
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v104, (const cv3d::cv::gess::alg::ConfigBake *)a6);
  v106 = __PAIR64__(v115, v116);
  v148 = 0;
  v60 = (const cv3d::cv::gess::alg::BakeCallbackBundle *)a9;
  if (v160)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250D4AE70;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v159;
    p_str = &__str;
    std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](&__str, v147);
    v61 = p_str;
    if (p_str == &__str)
    {
      v62 = 4;
      v61 = &__str;
      v60 = (const cv3d::cv::gess::alg::BakeCallbackBundle *)a9;
    }
    else
    {
      v60 = (const cv3d::cv::gess::alg::BakeCallbackBundle *)a9;
      if (!p_str)
        goto LABEL_164;
      v62 = 5;
    }
    (*(void (**)(void))(v61->__r_.__value_.__r.__words[0] + 8 * v62))();
  }
LABEL_164:
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&__str, v60);
  std::function<void ()(float,std::string const&)>::operator=(&__str, (uint64_t)v147);
  v63.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a8)
    *(double *)(a7 + 280) = (double)(v63.__d_.__rep_ - v121.__d_.__rep_) / 1000000.0;
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v127, (const cv3d::cv::gess::alg::BakeCallbackBundle *)&__str);
  v64 = cv3d::cv::gess::alg::InternalBake((float32x4_t *)a1, a2, (uint64_t *)a4, a5, (uint64_t)v104, a7, a8, (cv3d::cv::gess::alg::BakeCallbackBundle *)v127);
  v65 = v136;
  if (v136 == v135)
  {
    v66 = 4;
    v65 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_171;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_171:
  v67 = v134;
  if (v134 == v133)
  {
    v68 = 4;
    v67 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_176;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_176:
  v69 = v132;
  if (v132 == v131)
  {
    v70 = 4;
    v69 = v131;
  }
  else
  {
    if (!v132)
      goto LABEL_181;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_181:
  v71 = v130;
  if (v130 == v129)
  {
    v72 = 4;
    v71 = v129;
  }
  else
  {
    if (!v130)
      goto LABEL_186;
    v72 = 5;
  }
  (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_186:
  v73 = v128;
  if (v128 == v127)
  {
    v74 = 4;
    v73 = v127;
  }
  else
  {
    if (!v128)
      goto LABEL_191;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_191:
  if (v160)
  {
    std::string::basic_string[abi:ne180100]<0>(v102, (char *)&unk_23C62207F);
    v126 = 1120403456;
    if (!v160)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_QWORD *, int *, void **))(*v160 + 48))(v160, &v126, v102);
    if (v103 < 0)
      operator delete(v102[0]);
  }
  v75 = v146;
  if (v146 == v145)
  {
    v76 = 4;
    v75 = v145;
  }
  else
  {
    if (!v146)
      goto LABEL_200;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_200:
  v77 = v144;
  if (v144 == v143)
  {
    v78 = 4;
    v77 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_205;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_205:
  v79 = v142;
  if (v142 == v141)
  {
    v80 = 4;
    v79 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_210;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_210:
  v81 = v140;
  if (v140 == v139)
  {
    v82 = 4;
    v81 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_215;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_215:
  v83 = p_str;
  if (p_str == &__str)
  {
    v84 = 4;
    v83 = &__str;
  }
  else
  {
    if (!p_str)
      goto LABEL_220;
    v84 = 5;
  }
  (*(void (**)(void))(v83->__r_.__value_.__r.__words[0] + 8 * v84))();
LABEL_220:
  v85 = v148;
  if (v148 == v147)
  {
    v86 = 4;
    v85 = v147;
    goto LABEL_224;
  }
  if (v148)
  {
    v86 = 5;
LABEL_224:
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
  if (v112 < 0)
    operator delete(v111);
  if (v110 < 0)
    operator delete(v109);
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput((void **)&v106);
LABEL_235:
  v87 = v158;
  if (v158)
  {
    v87 = (cv3d::cv::gess::util::os *)(*(uint64_t (**)(cv3d::cv::gess::util::os *))(*(_QWORD *)v158 + 48))(v158);
    if ((_DWORD)v87)
    {
      if (a8)
        *(_DWORD *)(a7 + 384) = 10;
      if (!v156)
        goto LABEL_244;
      std::string::basic_string[abi:ne180100]<0>(v104, (char *)&unk_23C62207F);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      v59 = v156;
      if (!v156)
        std::__throw_bad_function_call[abi:ne180100]();
LABEL_241:
      (*(void (**)(_QWORD *, std::string *, void **))(*v156 + 48))(v59, &__str, v104);
LABEL_242:
      if (v105 < 0)
        operator delete(v104[0]);
LABEL_244:
      v64 = 0;
      goto LABEL_245;
    }
  }
  for (j = 0; ; ++j)
  {
    v96 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v87);
    if (j >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((_QWORD *)v96 + 1) - *(_QWORD *)v96) >> 3))
      break;
    v87 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v96);
  }
LABEL_245:
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  v88 = v156;
  if (v156 == v155)
  {
    v89 = 4;
    v88 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_252;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_252:
  v90 = v158;
  if (v158 == (cv3d::cv::gess::util::os *)v157)
  {
    v91 = 4;
    v90 = (cv3d::cv::gess::util::os *)v157;
  }
  else
  {
    if (!v158)
      goto LABEL_257;
    v91 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v90 + 8 * v91))();
LABEL_257:
  v92 = v160;
  if (v160 == v159)
  {
    v93 = 4;
    v92 = v159;
    goto LABEL_261;
  }
  if (v160)
  {
    v93 = 5;
LABEL_261:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  return v64;
}

void sub_23C5CCA8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __cxa_end_catch();
  JUMPOUT(0x23C5CCAECLL);
}

void sub_23C5CCAB4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x23C5CCB8CLL);
}

void sub_23C5CCAE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(v1 - 168);
  if (v3 == (_QWORD *)(v1 - 192))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 192);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  v5 = *(_QWORD **)(v1 - 136);
  if (v5 == (_QWORD *)(v1 - 160))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 - 160);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_13:
  v7 = *(_QWORD **)(v1 - 104);
  if (v7 == (_QWORD *)(v1 - 128))
  {
    v8 = 4;
    v7 = (_QWORD *)(v1 - 128);
  }
  else
  {
    if (!v7)
      goto LABEL_18;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_18:
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::GenerateCustomizedEdgeDistanceMap(__int128 *a1, char *a2, int a3, unsigned int a4, char a5, uint64_t *a6)
{
  unsigned int v11;
  unsigned int v12;
  cv3d::cv::gess::mesh::TriMesh *v13;
  BOOL *v14;
  uint64_t **v15;
  uint64_t v16;
  int v17;
  uint64_t **v18;
  uint64_t **v19;
  int v20;
  uint64_t **v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  uint64_t **v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int32x2_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int i;
  uint64_t v41;
  _QWORD *v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  int EdgeDistanceMap;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t **v52;
  BOOL v53;
  uint64_t v54;
  BOOL v55;
  uint64_t **v56;
  _QWORD *v57;
  uint64_t **v58;
  unint64_t v59;
  unsigned int j;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  uint64_t **v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t v67;
  BOOL v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t **v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  int v84;
  char *v85;
  std::string __p;
  uint64_t *v87;
  uint64_t v88;
  _QWORD v89[6];
  char v90;
  void *v91;
  char v92;
  std::string v93;
  std::string *p_p;
  __int128 v95;
  __int128 v96;
  _QWORD v97[4];
  __int128 v98;
  std::string v99;
  std::string __str;
  int v101;
  void *v102[2];
  __int128 v103;
  __int128 v104;
  char **v105;
  char *v106[2];
  _QWORD v107[3];
  uint64_t v108[3];
  uint64_t v109[3];
  uint64_t v110[3];
  int v111;
  __int16 v112;
  char v113;
  int v114;
  uint64_t **v115;
  std::__shared_weak_count *v116;
  _BYTE v117[24];
  _BYTE *v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0x200)
    v11 = 512;
  else
    v11 = a4;
  if (v11 >= 0x2000)
    v12 = 0x2000;
  else
    v12 = v11;
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v115);
  v112 = 0;
  v114 = 3;
  v113 = 1;
  if ((cv3d::cv::gess::io::LoadObjFile(a1, v115, &v112) & 1) == 0
    || (cv3d::cv::gess::alg::RepairEverything((cv3d::cv::gess::alg *)v115, v13, v14),
        v15 = v115,
        (unint64_t)((char *)v15[20] - (char *)v15[19]) < 8))
  {
    v16 = 0;
    goto LABEL_118;
  }
  v111 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v102[0] = 0;
  v17 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v15 + 10, (uint64_t)v102, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = v115;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v18, &v111, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = v115;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v102[1]) = 0;
  v102[0] = 0;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v19 + 7, (uint64_t)v102, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = a2;
  v21 = v115;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v102[0]) = 0;
  v23 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(v21 + 7, (uint64_t)v102, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = 1;
  if (v17 == -1 || (v25 = v111, v111 == -1) || v20 == -1 || v23 == -1)
  {
    __p.__r_.__value_.__s.__data_[12] = 0;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 100000;
    __p.__r_.__value_.__s.__data_[20] = 0;
    v88 = 1;
    LOWORD(v89[0]) = 1;
    BYTE2(v89[0]) = 1;
    LODWORD(v87) = v12;
    BYTE4(v87) = a5;
    __p.__r_.__value_.__r.__words[0] = 200;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 1036831949;
    HIDWORD(v89[0]) = 1090519040;
    v24 = cv3d::cv::gess::alg::IsoChartParameterize((uint64_t)v115, (uint64_t)&__p);
    v26 = v115;
    std::string::basic_string[abi:ne180100]<0>(v102, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v26, &v111, (unsigned __int8 *)v102);
    if (SBYTE7(v103) < 0)
      operator delete(v102[0]);
    v25 = v111;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v25;
  v27 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v115 + 10, (unsigned int *)&__p, v22);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::vector(v110, v28);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::vector(v109, v28);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::vector(v108, v28);
  if (v28)
  {
    v29 = 0;
    v30 = vdup_n_s32(v12);
    v31 = v28;
    do
    {
      v32 = v110[0] + v29;
      *(int32x2_t *)(v32 + 4) = v30;
      *(_DWORD *)(v32 + 12) = 1;
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory(v32);
      v33 = v109[0] + v29;
      *(int32x2_t *)(v33 + 4) = v30;
      *(_DWORD *)(v33 + 12) = 1;
      cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>::AllocateMemory(v33);
      v34 = v108[0] + v29;
      *(int32x2_t *)(v34 + 4) = v30;
      *(_DWORD *)(v34 + 12) = 1;
      cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>::AllocateMemory(v34);
      v29 += 24;
      --v31;
    }
    while (v31);
  }
  if ((v24 & 1) == 0)
  {
    v35 = 0;
    goto LABEL_37;
  }
  memset(&__p, 0, sizeof(__p));
  v118 = 0;
  v35 = cv3d::cv::gess::alg::internal::GPURasterize((uint64_t)v115, v110, v109, v108, (uint64_t)&__p, 0, 0, a6, (uint64_t)v117, 0);
  v36 = v118;
  if (v118 == v117)
  {
    v37 = 4;
    v36 = v117;
  }
  else
  {
    if (!v118)
      goto LABEL_35;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_35:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_37:
  std::vector<std::shared_ptr<cv3d::cv::gess::util::Imagef>>::vector(v107, v28);
  if (v28)
  {
    v39 = 0;
    for (i = 0; i < v28; v39 = ++i)
    {
      v41 = operator new[]();
      v42 = operator new(0x30uLL);
      v42[1] = 0;
      v42[2] = 0;
      *v42 = &off_250D49908;
      *((_DWORD *)v42 + 6) = 0;
      *((_DWORD *)v42 + 7) = v12;
      *((_DWORD *)v42 + 8) = v12;
      *((_DWORD *)v42 + 9) = 3;
      v42[5] = v41;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v42 + 3);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v107[0] + 16 * v39, (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v44 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      **(_DWORD **)(v107[0] + 16 * v39) = 0;
    }
  }
  if (v35)
  {
    EdgeDistanceMap = cv3d::cv::gess::alg::internal::GenerateEdgeDistanceMap((uint64_t)v115, v110, v108, v109, v107, a3);
    if (!v28)
      goto LABEL_51;
  }
  else
  {
    EdgeDistanceMap = 0;
    if (!v28)
      goto LABEL_51;
  }
  v47 = 0;
  v48 = 1;
  do
  {
    v49 = 16 * v47;
    cv3d::cv::gess::util::ImageT<float>::Dilate(*(_QWORD *)(v107[0] + 16 * v47), *(const void **)(v110[0] + 24 * v47 + 16), 2);
    cv3d::cv::gess::util::ImageT<float>::Flip(*(_QWORD *)(v107[0] + v49));
    v47 = v48;
  }
  while (v28 > v48++);
LABEL_51:
  v106[0] = 0;
  v106[1] = 0;
  *(_OWORD *)v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = v106;
  LODWORD(p_p) = v111;
  v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v115 + 10, (unsigned int *)&p_p, v38);
  v101 = -1;
  v52 = v115;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  v53 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)v52, &v101, (unsigned __int8 *)&__p);
  v55 = v53;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v53)
      goto LABEL_57;
LABEL_55:
    v56 = v115;
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)v56, &v101, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_57;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v55)
    goto LABEL_55;
LABEL_57:
  v84 = EdgeDistanceMap;
  LODWORD(p_p) = v101;
  v57 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)v115 + 10, (unsigned int *)&p_p, v54);
  (*(void (**)(_QWORD *, uint64_t))(*v57 + 32))(v57, 1);
  v58 = (uint64_t **)v57[5];
  if ((uint64_t **)v57[6] == v58)
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  if (v28)
  {
    v59 = 0;
    for (j = 0; j < v28; v59 = ++j)
    {
      v61 = *(_QWORD *)(v51 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v51 + 48) - v61) >> 3) <= v59)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v62 = (__int128 *)(v61 + 24 * v59);
      if (*((char *)v62 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v62, *((_QWORD *)v62 + 1));
      }
      else
      {
        v63 = *v62;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v62 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v63;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = j;
      p_p = &__p;
      v64 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v58, (unsigned __int16 *)&__p, (uint64_t)&std::piecewise_construct, (_WORD **)&p_p);
      std::string::operator=((std::string *)(v64 + 5), &__str);
      p_p = &__str;
      *((_WORD *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v105, (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 28) = j;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v99, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v99 = __str;
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
        v88 = 0;
        v89[0] = 0;
        v87 = &v88;
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
      }
      else
      {
        __p = v99;
        v88 = 0;
        v89[0] = 0;
        v87 = &v88;
      }
      LODWORD(v93.__r_.__value_.__l.__data_) = 1;
      p_p = &v93;
      *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(&v87, (int *)&v93, (uint64_t)&std::piecewise_construct, (_DWORD **)&p_p)+ 16) = j;
      WORD2(p_p) = 0;
      v95 = 0u;
      v96 = 0u;
      v97[0] = 0;
      LODWORD(p_p) = 1;
      v65 = *(_OWORD *)(v107[0] + 16 * v59);
      v98 = v65;
      if (*((_QWORD *)&v65 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](&v95, (uint64_t *)&v98);
      v68 = (_QWORD)v95 && *(_QWORD *)(v95 + 16);
      BYTE4(p_p) = v68;
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = v104;
      if ((unint64_t)v104 >= *((_QWORD *)&v104 + 1))
      {
        v73 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>((uint64_t *)&v103 + 1, (int *)&p_p);
      }
      else
      {
        std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(v104, (int *)&p_p);
        v73 = v72 + 48;
      }
      *(_QWORD *)&v104 = v73;
      v74 = (char *)v102[1];
      if (v102[1] >= (void *)v103)
      {
        v75 = (void *)std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial const&>((uint64_t *)v102, (__int128 *)&__p);
      }
      else
      {
        std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>((std::string *)v102[1], (__int128 *)&__p);
        v75 = v74 + 48;
      }
      v102[1] = v75;
      if (SHIBYTE(v97[0]) < 0)
        operator delete((void *)v96);
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
      if (*((_QWORD *)&v95 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v87, (_QWORD *)v88);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  LOBYTE(p_p) = 0;
  HIDWORD(p_p) = 1;
  LOWORD(v95) = 0;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)((char *)&v95 + 8));
  BYTE1(v95) = 1;
  if (v84)
    v16 = cv3d::cv::gess::io::SaveObjFile(v85, (uint64_t)v115, (uint64_t *)v102, (uint64_t)&p_p);
  else
    v16 = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__str, v85);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, ".usda");
  std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&__str, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v93, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v93 = __str;
  v79 = v115;
  cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption((cv3d::cv::gess::io::SaveUsdOption *)&__p, (const cv3d::cv::gess::io::SaveObjOption *)&p_p);
  cv3d::cv::gess::io::SaveUsdaFile((uint64_t)&v93, (uint64_t)v79, (uint64_t *)v102, (uint64_t)&__p);
  if (v92 < 0)
    operator delete(v91);
  if (v90 < 0)
    operator delete((void *)v89[4]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v89, (_QWORD *)v89[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v87);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v97, (_QWORD *)v97[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&v95 + 8, (_QWORD *)v96);
  std::__tree<std::string>::destroy((uint64_t)&v105, v106[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103 + 8;
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_118:
  v80 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  return v16;
}

void sub_23C5CD708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  if (a56 < 0)
    operator delete(__p);
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a36);
  cv3d::cv::gess::mesh::Material::~Material((char **)&a58);
  a15 = &a67;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  a58 = (void *)(v67 - 256);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a58 = (void *)(v67 - 232);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a58 = (void *)(v67 - 208);
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v67 - 168);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::util::ImageT<float>::Flip(uint64_t a1)
{
  unsigned int v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = v1 >> 1;
    v5 = *(unsigned int *)(a1 + 4);
    v6 = v5 * (v1 - 1);
    do
    {
      if ((_DWORD)v5)
      {
        v7 = 0;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(unsigned int *)(a1 + 12);
        v10 = v9 * v2;
        v11 = v9 * v6;
        do
        {
          if ((_DWORD)v9)
          {
            v12 = (int *)(v8 + 4 * v10);
            v13 = v9;
            v14 = (int *)(v8 + 4 * v11);
            do
            {
              v15 = *v12;
              *v12++ = *v14;
              *v14++ = v15;
              --v13;
            }
            while (v13);
          }
          ++v7;
          v10 += v9;
          v11 += v9;
        }
        while (v7 != v5);
      }
      ++v3;
      v2 += v5;
      v6 -= v5;
    }
    while (v3 != v4);
  }
  return 1;
}

void cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption(void **this)
{
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)(this + 5), this[6]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)(this + 2), this[3]);
}

void cv3d::cv::gess::mesh::Material::~Material(char **this)
{
  char **v2;

  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  v2 = this + 3;
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  v2 = this;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C5CDAE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::string::operator=((std::string *)(a1 + 16), a2);
  *(std::chrono::system_clock::time_point *)(a1 + 40) = std::chrono::system_clock::now();
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)(a1 + 56));
  return a1;
}

void sub_23C5CDB58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable(cv3d::cv::gess::util::os::MemoryLogTable *this)
{
  _BOOL8 v2;
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  *(_OWORD *)((char *)this + 184) = *(_OWORD *)this;
  *((std::chrono::system_clock::time_point *)this + 6) = std::chrono::system_clock::now();
  v2 = cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryLogTable *)((char *)this + 120));
  v3 = (uint64_t *)cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)v2);
  v4 = v3;
  v5 = v3[1];
  if (v5 >= v3[2])
  {
    v6 = std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(v3, (__int128 *)this + 1);
  }
  else
  {
    std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>((uint64_t)v3, (__int128 *)this + 1);
    v6 = v5 + 184;
  }
  v4[1] = v6;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

__n128 std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(v4 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v4 + 24) = v6;
  v7 = *(__int128 *)((char *)a2 + 56);
  v8 = *(__int128 *)((char *)a2 + 72);
  v9 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(v4 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(v4 + 88) = v9;
  *(_OWORD *)(v4 + 72) = v8;
  *(_OWORD *)(v4 + 56) = v7;
  result = *(__n128 *)((char *)a2 + 120);
  v11 = *(__int128 *)((char *)a2 + 136);
  v12 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(v4 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(v4 + 152) = v12;
  *(_OWORD *)(v4 + 136) = v11;
  *(__n128 *)(v4 + 120) = result;
  *(_QWORD *)(a1 + 8) = v4 + 184;
  return result;
}

void sub_23C5CDCC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v23[2];
  std::string *v24;
  char *v25;
  uint64_t *v26;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v26 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[184 * v4];
  v23[0] = v10;
  v23[1] = v11;
  v24 = v11;
  v25 = &v10[184 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v24;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = &v10[184 * v4];
  v14 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v14;
  v15 = *(__int128 *)((char *)a2 + 56);
  v16 = *(__int128 *)((char *)a2 + 72);
  v17 = *(__int128 *)((char *)a2 + 88);
  *(_OWORD *)(v13 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(v13 + 88) = v17;
  *(_OWORD *)(v13 + 72) = v16;
  *(_OWORD *)(v13 + 56) = v15;
  v18 = *(__int128 *)((char *)a2 + 120);
  v19 = *(__int128 *)((char *)a2 + 136);
  v20 = *(__int128 *)((char *)a2 + 152);
  *(_OWORD *)(v13 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_OWORD *)(v13 + 152) = v20;
  *(_OWORD *)(v13 + 136) = v19;
  *(_OWORD *)(v13 + 120) = v18;
  v24 = (std::string *)((char *)v11 + 184);
  std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__swap_out_circular_buffer(a1, v23);
  v21 = a1[1];
  std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::~__split_buffer((uint64_t)v23);
  return v21;
}

void sub_23C5CDE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v19[3];
  char v20;
  __int128 v21;
  __int128 v22;

  v7 = a7;
  *(_QWORD *)&v22 = a6;
  *((_QWORD *)&v22 + 1) = a7;
  v21 = v22;
  v19[0] = a1;
  v19[1] = &v21;
  v19[2] = &v22;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 184);
      *(_QWORD *)(v9 - 168) = *(_QWORD *)(a3 - 168);
      *(_OWORD *)(v9 - 184) = v10;
      *(_QWORD *)(a3 - 176) = 0;
      *(_QWORD *)(a3 - 168) = 0;
      *(_QWORD *)(a3 - 184) = 0;
      v11 = *(_OWORD *)(a3 - 80);
      v13 = *(_OWORD *)(a3 - 128);
      v12 = *(_OWORD *)(a3 - 112);
      *(_OWORD *)(v9 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v9 - 80) = v11;
      *(_OWORD *)(v9 - 128) = v13;
      *(_OWORD *)(v9 - 112) = v12;
      v14 = *(_OWORD *)(a3 - 144);
      *(_OWORD *)(v9 - 160) = *(_OWORD *)(a3 - 160);
      *(_OWORD *)(v9 - 144) = v14;
      v15 = *(_OWORD *)(a3 - 16);
      v17 = *(_OWORD *)(a3 - 64);
      v16 = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v15;
      *(_OWORD *)(v9 - 64) = v17;
      *(_OWORD *)(v9 - 48) = v16;
      v9 -= 184;
      v7 -= 184;
      a3 -= 184;
    }
    while (a3 != a5);
    *((_QWORD *)&v22 + 1) = v9;
  }
  v20 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v19);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::util::os::MemoryLogItem>,std::reverse_iterator<cv3d::cv::gess::util::os::MemoryLogItem*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 184;
  }
}

uint64_t std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::util::os::MemoryLogItem>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 23;
      *(_QWORD *)(a1 + 16) = v2 - 23;
      if (*((char *)v2 - 161) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

cv3d::cv::gess::alg::ConfigBake *cv3d::cv::gess::alg::ConfigBake::ConfigBake(cv3d::cv::gess::alg::ConfigBake *this, const cv3d::cv::gess::alg::ConfigBake *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 2);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_OWORD *)this + 1) = v5;
  *((_OWORD *)this + 2) = v6;
  *(_OWORD *)this = v4;
  cv3d::cv::gess::alg::ConfigOutput::ConfigOutput((uint64_t)this + 56, (uint64_t)a2 + 56);
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 57, *((const void **)a2 + 57), *((_QWORD *)a2 + 58), (uint64_t)(*((_QWORD *)a2 + 58) - *((_QWORD *)a2 + 57)) >> 3);
  v7 = (std::string *)((char *)this + 480);
  if (*((char *)a2 + 503) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 60), *((_QWORD *)a2 + 61));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 30);
    *((_QWORD *)this + 62) = *((_QWORD *)a2 + 62);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_BYTE *)this + 504) = *((_BYTE *)a2 + 504);
  v9 = (std::string *)((char *)this + 512);
  if (*((char *)a2 + 535) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 64), *((_QWORD *)a2 + 65));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 32);
    *((_QWORD *)this + 66) = *((_QWORD *)a2 + 66);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = *((_QWORD *)a2 + 67);
  *((_DWORD *)this + 136) = *((_DWORD *)a2 + 136);
  *((_QWORD *)this + 67) = v11;
  return this;
}

void sub_23C5CE17C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  cv3d::cv::gess::alg::ConfigSystem::~ConfigSystem(v2);
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::ConfigSystem::~ConfigSystem(void **this)
{
  void *v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t cv3d::cv::gess::alg::ConfigOutput::ConfigOutput(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  if (*(char *)(a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), *(const std::string::value_type **)(a2 + 136), *(_QWORD *)(a2 + 144));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v7;
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  if (*(char *)(a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 176), *(const std::string::value_type **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v8;
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  if (*(char *)(a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 216), *(const std::string::value_type **)(a2 + 216), *(_QWORD *)(a2 + 224));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v9;
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  if (*(char *)(a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 256), *(const std::string::value_type **)(a2 + 256), *(_QWORD *)(a2 + 264));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 256);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = v10;
  }
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  if (*(char *)(a2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 296), *(const std::string::value_type **)(a2 + 296), *(_QWORD *)(a2 + 304));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v11;
  }
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  if (*(char *)(a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 336), *(const std::string::value_type **)(a2 + 336), *(_QWORD *)(a2 + 344));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 336);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v12;
  }
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  v13 = (std::string *)(a1 + 376);
  if (*(char *)(a2 + 399) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 376), *(_QWORD *)(a2 + 384));
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return a1;
}

void sub_23C5CE4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;

  if (v10[359] < 0)
    operator delete(*v11);
  if (v10[319] < 0)
    operator delete(*v18);
  if (v10[279] < 0)
    operator delete(*v17);
  if (v10[239] < 0)
    operator delete(*v16);
  if (v10[199] < 0)
    operator delete(*v15);
  if (v10[159] < 0)
    operator delete(*v14);
  if (v10[119] < 0)
    operator delete(*v13);
  if (v10[79] < 0)
    operator delete(*v12);
  if (v10[39] < 0)
    operator delete(*a10);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(void **this)
{
  if (*((char *)this + 399) < 0)
    operator delete(this[47]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

cv3d::cv::gess::alg::BakeCallbackBundle *cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle(cv3d::cv::gess::alg::BakeCallbackBundle *this, const cv3d::cv::gess::alg::BakeCallbackBundle *a2)
{
  uint64_t v4;

  v4 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)this, (uint64_t)a2);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](v4 + 32, (uint64_t)a2 + 32);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 64);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 96);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)this + 128, (uint64_t)a2 + 128);
  return this;
}

void sub_23C5CE6E0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = (_QWORD *)v1[15];
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = (_QWORD *)v1[15];
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = (_QWORD *)v1[11];
  if (v9 == v3)
  {
    v10 = 4;
    v9 = v3;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = (_QWORD *)v1[7];
  if (v11 == v2)
  {
    v12 = 4;
    v11 = v2;
  }
  else
  {
    if (!v11)
      goto LABEL_16;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_16:
  v13 = (_QWORD *)v1[3];
  if (v13 == v1)
  {
    v14 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_21;
    v14 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v14))(v1);
LABEL_21:
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5CE848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    result = *(_QWORD *)(i - 8);
    if (result)
    {
      result = MEMORY[0x2426211A0](result, 0x1000C8077774924);
      *(_QWORD *)(i - 8) = 0;
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5CE98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    result = *(_QWORD *)(i - 8);
    if (result)
    {
      result = MEMORY[0x2426211A0](result, 0x1000C8052888210);
      *(_QWORD *)(i - 8) = 0;
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5CEAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    v5 = *(_QWORD *)(i - 8);
    if (v5)
    {
      result = MEMORY[0x2426211A0](v5 - 16, 0x1000C80451B5BE8);
      *(_QWORD *)(i - 8) = 0;
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *std::vector<std::shared_ptr<cv3d::cv::gess::util::Imagef>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C5CEBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[48 * v4];
  v16 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>(v14, a2);
  v15 = v14 + 2;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_23C5CECF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_23C5CED64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_23C5CEDBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

cv3d::cv::gess::io::SaveUsdOption *cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption(cv3d::cv::gess::io::SaveUsdOption *this, const cv3d::cv::gess::io::SaveObjOption *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  *((_WORD *)this + 4) = *((_WORD *)a2 + 4);
  *(_QWORD *)this = v4;
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::map[abi:ne180100]((uint64_t *)this + 2, (uint64_t)a2 + 16);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::map[abi:ne180100]((uint64_t *)this + 5, (uint64_t)a2 + 40);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 9, "CorePhotogrammetry Bake");
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 14, "ObjectCapture");
  return this;
}

void sub_23C5CF110(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[95] < 0)
    operator delete(*v2);
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_23C5CF18C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C5CF4B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_23C5CF564(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_23C5CF5BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>(v5, v6, v4 + 8, v4 + 8);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_hint_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__find_equal<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__construct_node<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  v6[8] = *a2;
  result = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(v6 + 10), (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C5CF744(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  _QWORD *v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (_QWORD *)__p[8];
    if (v3 == __p + 5)
    {
      v4 = 4;
      v3 = __p + 5;
      goto LABEL_8;
    }
    if (v3)
    {
      v4 = 5;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }
LABEL_9:
    operator delete(__p);
    return;
  }
  if (__p)
    goto LABEL_9;
}

void std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0,std::allocator<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0,std::allocator<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250D4ADA8;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0,std::allocator<cv3d::cv::gess::alg::internal::CreateUVIsoChart(cv3d::cv::gess::mesh::TriMesh &,unsigned int,unsigned int,unsigned int,float,float const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,std::function<BOOL ()(void)>,std::function<void ()(cv3d::cv::gess::alg::BakeErrorCode,std::string const&)>)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250D4ADA8;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::Material>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ADF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::Material>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ADF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::Material>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(a1 + 24);
}

void std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(uint64_t a1)
{
  void **v2;

  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  v2 = (void **)(a1 + 24);
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)a1;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4AE28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4AE28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::operator()(uint64_t a1, float *a2)
{
  uint64_t result;
  float v3;
  float v4;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
  {
    v3 = *a2 / 100.0 * 70.0 + 30.0;
    v4 = v3;
    return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)result + 48))(result, &v4);
  }
  return result;
}

_QWORD *std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C5CFBC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4AE70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4AE70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::internal::DetailMap(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,std::optional<cv3d::cv::gess::mesh::TriMesh const>,cv3d::cv::gess::mesh::TriMesh&,cv3d::cv::gess::mesh::Material&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::operator()(uint64_t a1, float *a2)
{
  uint64_t result;
  float v3;
  float v4;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
  {
    v3 = *a2 / 100.0 * 70.0 + 30.0;
    v4 = v3;
    return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)result + 48))(result, &v4);
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::TwoWayRaycast(_QWORD *a1, uint64_t a2, _QWORD *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v20 = a7;
  v19 = a4;
  v18 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a3, (double *)&v18);
  v17 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v17);
  v12 = (uint64_t)(a1[1] - *a1) >> 4;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize(a5, v12);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a6, v12);
  v13 = operator new(0x40uLL);
  *v13 = &off_250D4AEB8;
  v13[1] = a3;
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = &v20;
  v13[5] = &v19;
  v13[6] = a5;
  v13[7] = a6;
  v22 = v13;
  cv3d::cv::gess::internal::parallel_for (v12, (uint64_t)v21, 0);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
    goto LABEL_5;
  }
  if (v22)
  {
    v15 = 5;
LABEL_5:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a3, &v18);
  return 1;
}

void sub_23C5CFDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250D4AEB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250D4AEB8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0,std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  char *v15;
  float32x4_t v16;
  _DWORD *v17;
  int *v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  void *__p[3];
  _BYTE v25[32];
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *a3;
  if (*a3 - *a2 >= 0x20000)
    v6 = 0x20000;
  else
    v6 = *a3 - *a2;
  cv3d::cv::gess::alg::MultipleBufferComponent::MultipleBufferComponent((cv3d::cv::gess::alg::MultipleBufferComponent *)v25, *(const cv3d::cv::gess::alg::MPSMeshIntersector **)(a1 + 8), 3uLL, 2 * v6);
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(__p, 2 * v6);
  if (v5 > v4)
  {
    v7 = 16 * v4;
    while (1)
    {
      if ((int)v5 - (int)v4 <= (int)v6)
        v8 = v5 - v4;
      else
        v8 = v6;
      if (v8 != v6)
        std::vector<cv3d::cv::gess::math::RayT<float>>::resize((uint64_t *)__p, 2 * v8);
      if (v8)
      {
        v9 = (char *)__p[0];
        v10 = 84;
        v11 = v7;
        v12 = v8;
        do
        {
          v13 = *(_OWORD *)(**(_QWORD **)(a1 + 24) + v11);
          v14 = &v9[v10];
          *(_OWORD *)(v14 - 84) = *(_OWORD *)(**(_QWORD **)(a1 + 16) + v11);
          *(_OWORD *)(v14 - 68) = v13;
          *(_QWORD *)(v14 - 52) = 0x7F7FFFFF3089705FLL;
          v15 = (char *)__p[0] + v10;
          *((_DWORD *)v15 - 13) = 0;
          *((_DWORD *)v15 - 12) = **(_DWORD **)(a1 + 32);
          v16 = vnegq_f32(*(float32x4_t *)(**(_QWORD **)(a1 + 24) + v11));
          *(_OWORD *)(v15 - 36) = *(_OWORD *)(**(_QWORD **)(a1 + 16) + v11);
          *(float32x4_t *)(v15 - 20) = v16;
          *(_QWORD *)(v15 - 4) = 0x7F7FFFFF3089705FLL;
          v9 = (char *)__p[0];
          v17 = (char *)__p[0] + v10;
          *(v17 - 1) = 0;
          *v17 = **(_DWORD **)(a1 + 32);
          v11 += 16;
          v10 += 96;
          --v12;
        }
        while (v12);
      }
      v18 = *(int **)(a1 + 8);
      v19 = **(_DWORD **)(a1 + 40);
      v23 = *(_OWORD *)(a1 + 48);
      v27 = 0;
      v20 = operator new(0x30uLL);
      *v20 = &off_250D4AF00;
      v20[1] = v8;
      v20[2] = v4;
      *((_DWORD *)v20 + 6) = v19;
      *((_OWORD *)v20 + 2) = v23;
      v27 = v20;
      cv3d::cv::gess::alg::MPSMeshIntersector::intersectRaysMultipleBuffer(v18, (uint64_t)v25, (uint64_t *)__p, (uint64_t)v26, v4 + 3 * v6 >= v5);
      v21 = v27;
      if (v27 == v26)
        break;
      if (v27)
      {
        v22 = 5;
LABEL_18:
        (*(void (**)(void))(*v21 + 8 * v22))();
      }
      v4 += v6;
      v7 += 16 * v6;
      if (v4 >= v5)
        goto LABEL_20;
    }
    v21 = v26;
    v22 = 4;
    goto LABEL_18;
  }
LABEL_20:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  cv3d::cv::gess::alg::MultipleBufferComponent::~MultipleBufferComponent((cv3d::cv::gess::alg::MultipleBufferComponent *)v25);
}

void sub_23C5D00FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  cv3d::cv::gess::alg::MultipleBufferComponent::~MultipleBufferComponent((cv3d::cv::gess::alg::MultipleBufferComponent *)&a14);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::math::RayT<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::RayT<float>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 48 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::RayT<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_OWORD *)(v7 + 16) = xmmword_23C60CB10;
        *(_QWORD *)(v7 + 32) = 0x7F7FFFFF3089705FLL;
        v7 += 48;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v20 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[48 * v8];
    __p = v12;
    v17 = v14;
    v19 = &v12[48 * v11];
    v15 = &v14[48 * a2];
    do
    {
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_OWORD *)v14 + 1) = xmmword_23C60CB10;
      *((_QWORD *)v14 + 4) = 0x7F7FFFFF3089705FLL;
      v14 += 48;
    }
    while (v14 != v15);
    v18 = v15;
    std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v18 != v17)
      v18 = &v17[(v18 - v17 - 48) % 0x30uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_23C5D0334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_250D4AF00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250D4AF00;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1},std::allocator<cv3d::cv::gess::internal::TwoWayRaycast(std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float,cv3d::cv::gess::alg::MPSMeshIntersector &,unsigned int,std::vector<cv3d::cv::gess::mesh::FaceHandle> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&)::$_0::operator() const(unsigned long,unsigned long)::{lambda(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)#1}>,void ()(std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> const&)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float *v9;
  unsigned int v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  float *v15;
  __int128 v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;

  if (*(_QWORD *)(result + 8))
  {
    v2 = 0;
    for (i = 28; ; i += 32)
    {
      v4 = *a2;
      v5 = *a2 + i;
      v7 = *(float *)(v5 - 28);
      v6 = v5 - 28;
      v8 = v7;
      v9 = (float *)(v6 + 16);
      v10 = *(_DWORD *)(result + 24);
      if (v7 == -1.0)
        break;
      v11 = *(_DWORD *)(*a2 + i - 24);
      v12 = *v9;
      if (*v9 != -1.0)
      {
        v13 = *(_DWORD *)(v4 + i - 8);
        if (v11 < v10 && v13 < v10)
        {
          if (v8 >= v12)
            v17 = v6 + 16;
          else
            v17 = v6;
          v18 = (float *)(v4 + i);
          if (v8 < v12)
          {
            v19 = *(v18 - 5);
            v20 = *(v18 - 4);
          }
          else
          {
            v19 = *(v18 - 1);
            v20 = *v18;
          }
          HIDWORD(v16) = 0;
          *(_QWORD *)&v16 = __PAIR64__(LODWORD(v20), LODWORD(v19));
          *((float *)&v16 + 2) = (float)(1.0 - v19) - v20;
          *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = *(_DWORD *)(v17 + 4);
          goto LABEL_26;
        }
        if (v11 < v10)
          goto LABEL_18;
LABEL_14:
        if (v13 < v10)
        {
          *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = v13;
          v15 = (float *)(v4 + i);
          HIDWORD(v16) = 0;
          *(_QWORD *)&v16 = *(_QWORD *)(v15 - 1);
          *((float *)&v16 + 2) = (float)(1.0 - *(float *)&v16) - *v15;
LABEL_26:
          *(_OWORD *)(**(_QWORD **)(result + 40) + 16 * (v2 + *(_QWORD *)(result + 16))) = v16;
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v11 < v10)
      {
LABEL_18:
        *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = v11;
        HIDWORD(v16) = 0;
        *(_QWORD *)&v16 = *(_QWORD *)(v4 + i - 20);
        *((float *)&v16 + 2) = (float)(1.0 - *(float *)&v16) - *((float *)&v16 + 1);
        goto LABEL_26;
      }
LABEL_17:
      *(_DWORD *)(**(_QWORD **)(result + 32) + 4 * (v2 + *(_QWORD *)(result + 16))) = -1;
LABEL_27:
      if ((unint64_t)++v2 >= *(_QWORD *)(result + 8))
        return result;
    }
    if (*v9 == -1.0)
      goto LABEL_17;
    v13 = *(_DWORD *)(v4 + i - 8);
    goto LABEL_14;
  }
  return result;
}

uint64_t cv3d::cv::gess::MAJOR_VERSION(cv3d::cv::gess *this)
{
  std::string *p_str;
  int64_t size;
  _BYTE *v3;
  std::string *v4;
  _BYTE *v5;
  std::string::size_type v6;
  unsigned __int16 v7;
  std::string v9;
  std::string __str;
  char v11;

  p_str = &__str;
  std::string::basic_string[abi:ne180100]<0>(&__str, "1.4.26");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v3 = (char *)p_str + size;
  if (size >= 1)
  {
    v4 = p_str;
    do
    {
      v5 = memchr(v4, 46, size);
      if (!v5)
        break;
      if (*v5 == 46)
        goto LABEL_12;
      v4 = (std::string *)(v5 + 1);
      size = v3 - (_BYTE *)v4;
    }
    while (v3 - (_BYTE *)v4 > 0);
  }
  v5 = v3;
LABEL_12:
  if (v5 == v3)
    v6 = -1;
  else
    v6 = v5 - (_BYTE *)p_str;
  std::string::basic_string(&v9, &__str, 0, v6, (std::allocator<char> *)&v11);
  v7 = std::stoul(&v9, 0, 10);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v7;
}

void sub_23C5D06E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::MINOR_VERSION(cv3d::cv::gess *this)
{
  int64_t size;
  std::string *p_str;
  unsigned __int8 *v3;
  size_t v4;
  std::string *v5;
  unsigned __int8 *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  char *v16;
  unsigned __int16 v17;
  std::string v19;
  std::string __str;
  char v21;

  std::string::basic_string[abi:ne180100]<0>(&__str, "1.4.26");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v3 = (unsigned __int8 *)p_str + size;
  if (size >= 1)
  {
    v4 = size;
    v5 = p_str;
    do
    {
      v6 = (unsigned __int8 *)memchr(v5, 46, v4);
      if (!v6)
        break;
      if (*v6 == 46)
        goto LABEL_13;
      v5 = (std::string *)(v6 + 1);
      v4 = v3 - (unsigned __int8 *)v5;
    }
    while (v3 - (unsigned __int8 *)v5 > 0);
  }
  v6 = (unsigned __int8 *)p_str + size;
LABEL_13:
  if (v6 == v3)
    v7 = 0;
  else
    v7 = v6 - (unsigned __int8 *)p_str + 1;
  if (size)
  {
    v8 = p_str;
    v9 = (std::string *)((char *)p_str + size);
    do
    {
      v10 = v8;
      v11 = (unsigned __int8 *)v8;
      while (1)
      {
        v12 = *v11++;
        if (v12 == 46)
          break;
        v10 = (std::string *)v11;
        if (v11 == v3)
        {
          v10 = v9;
          goto LABEL_23;
        }
      }
      v8 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      v9 = v10;
    }
    while (v11 != v3);
LABEL_23:
    if (v10 == (std::string *)v3)
      v13 = -1;
    else
      v13 = (char *)v10 - (char *)p_str;
    if (size >= 1)
    {
      v14 = p_str;
      do
      {
        v15 = (unint64_t)memchr(v14, 46, size);
        if (!v15)
          break;
        if (*(_BYTE *)v15 == 46)
          goto LABEL_34;
        v14 = (std::string *)(v15 + 1);
        size = v3 - (unsigned __int8 *)v14;
      }
      while (v3 - (unsigned __int8 *)v14 > 0);
    }
  }
  else
  {
    v13 = -1;
  }
  v15 = (unint64_t)v3;
LABEL_34:
  v16 = (char *)p_str + ~v15;
  if ((unsigned __int8 *)v15 == v3)
    v16 = 0;
  std::string::basic_string(&v19, &__str, v7, (std::string::size_type)&v16[v13], (std::allocator<char> *)&v21);
  v17 = std::stoul(&v19, 0, 10);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v17;
}

void sub_23C5D08BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::PATCH_VERSION(cv3d::cv::gess *this)
{
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  unsigned __int8 *v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  unsigned __int8 *v13;
  int v14;
  char *v15;
  unsigned __int16 v16;
  std::string v18;
  std::string __str;
  char v20;

  std::string::basic_string[abi:ne180100]<0>(&__str, "1.4.26");
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v3 = (unsigned __int8 *)p_str + size;
  if (size)
  {
    v4 = p_str;
    v5 = (std::string *)((char *)p_str + size);
    do
    {
      v6 = v4;
      v7 = (unsigned __int8 *)v4;
      while (1)
      {
        v8 = *v7++;
        if (v8 == 46)
          break;
        v6 = (std::string *)v7;
        if (v7 == v3)
        {
          v6 = v5;
          goto LABEL_13;
        }
      }
      v4 = (std::string *)((char *)&v6->__r_.__value_.__l.__data_ + 1);
      v5 = v6;
    }
    while (v7 != v3);
LABEL_13:
    if (v6 == (std::string *)v3)
      v9 = 0;
    else
      v9 = (char *)v6 - (char *)p_str + 1;
    v10 = p_str;
    v11 = (std::string *)((char *)p_str + size);
    do
    {
      v12 = v10;
      v13 = (unsigned __int8 *)v10;
      while (1)
      {
        v14 = *v13++;
        if (v14 == 46)
          break;
        v12 = (std::string *)v13;
        if (v13 == v3)
          goto LABEL_24;
      }
      v10 = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      v11 = v12;
    }
    while (v13 != v3);
    v11 = v12;
  }
  else
  {
    v9 = 0;
    v11 = p_str;
  }
LABEL_24:
  v15 = (char *)p_str + ~(unint64_t)v11;
  if (v11 == (std::string *)v3)
    v15 = 0;
  std::string::basic_string(&v18, &__str, v9, (std::string::size_type)&v15[size], (std::allocator<char> *)&v20);
  v16 = std::stoul(&v18, 0, 10);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v16;
}

void sub_23C5D0A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::CutHEdges(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  _BOOL4 v40;
  BOOL v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  float32x4_t *v45;
  float32x4_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  uint64_t v52;
  void *exception;
  float32x4_t v54;
  __int128 v55;
  int v57;
  unsigned int appended;
  void *__p[2];
  __int128 v60;
  float32x4_t v61;
  unsigned int v62;
  unsigned int v63;

  v63 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "flags hedges");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v63, (__int128 *)__p);
  if (SBYTE7(v60) < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v63;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p, v9);
  v13 = *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128);
  if (v13)
  {
    v14 = v10;
    v15 = 0;
    v16 = v13 / 20;
    v17 = *(_QWORD *)(v10 + 40);
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = v16;
    do
    {
      if (*(_QWORD *)(v10 + 48) <= (unint64_t)v15)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v10, v11, v12);
      *(_QWORD *)(v17 + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) &= ~(1 << v15);
      ++v15;
    }
    while (v18 != v15);
    for (i = 0; i != v18; ++i)
    {
      v62 = i;
      if (*(_QWORD *)(v14 + 48) <= (unint64_t)i)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v10, v11, v12);
      v20 = *(_QWORD *)(v14 + 40);
      v21 = (unint64_t)i >> 6;
      v22 = *(_QWORD *)(v20 + 8 * v21);
      if ((v22 & (1 << i)) == 0)
      {
        *(_QWORD *)(v20 + 8 * v21) = v22 | (1 << i);
        v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
        v26 = *v23;
        if (*(_QWORD *)(v14 + 48) <= v26)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v23, v24, v25);
        *(_QWORD *)(*(_QWORD *)(v14 + 40) + ((v26 >> 3) & 0x1FFFFFF8)) |= 1 << v26;
        v27 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
        v30 = *(unsigned int *)(v27 + 12);
        v31 = *(_QWORD *)(a2 + 40);
        if (v30 >= (*(_QWORD *)(a2 + 48) - v31) >> 2)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v27, v28, v29);
        v32 = *(_DWORD *)(v31 + 4 * v30);
        v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
        v10 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v33);
        v34 = *(unsigned int *)(v10 + 12);
        v35 = *(_QWORD *)(a2 + 40);
        if (v34 >= (*(_QWORD *)(a2 + 48) - v35) >> 2)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v10, v11, v12);
        v36 = *(_DWORD *)(v35 + 4 * v34);
        if ((v32 != 1 || v36 != 1) && (v32 != 1 || v36 != 4) && (v32 != 4 || v36 != 1))
        {
          v37 = v32 == 4;
          v38 = v36 == 2;
          if (v36 != 2)
            v37 = 0;
          if (v36 == 4)
            v38 = 1;
          if (v32 != 2)
            v38 = 0;
          if (!v38 && !v37)
          {
            v40 = v32 == 2 && v36 == 1;
            v41 = v36 == 2 && v32 == 1;
            if (v41 || v40)
            {
              v42 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
              v54 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v42 + 12));
              v43 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
              v44 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v43);
              v45 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v44 + 12));
              v46.i64[0] = 0x3F0000003F000000;
              v46.i64[1] = 0x3F0000003F000000;
              v61 = vmulq_f32(vaddq_f32(v54, *v45), v46);
              v47 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
              v55 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v47 + 12));
              v48 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
              v49 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v48);
              v50 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v49 + 12));
              *(_OWORD *)__p = v55;
              v60 = v50;
              cv3d::cv::gess::math::PlaneT<float>::intersectLine(a4, (float32x4_t *)__p, &v61, 0, a5);
              v57 = -1;
              appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(a1, &v61, &v57);
              v10 = cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, &v62, &appended, 0);
              v51 = appended;
              v52 = *(_QWORD *)(a2 + 40);
              if (appended >= (unint64_t)((*(_QWORD *)(a2 + 48) - v52) >> 2))
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_DWORD *)(v52 + 4 * appended) = 4;
              if (*(_QWORD *)(a3 + 48) <= v51)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_QWORD *)(*(_QWORD *)(a3 + 40) + ((v51 >> 3) & 0x1FFFFFF8)) |= 1 << v51;
            }
            else if (v32 != 4 || v36 != 4)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x242620E28](exception, "Invalid he status.");
            }
          }
        }
      }
    }
  }
  if (v63 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 32), &v63, v12);
}

void sub_23C5D0EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::math::PlaneT<float>::intersectLine(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int a4, double a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float v22;

  v5 = *a2;
  v6 = a2[1];
  v7 = vsubq_f32(v6, *a2);
  v8 = *a1;
  v9 = vmulq_f32(v7, v7);
  v9.i32[3] = 0;
  v10 = vpaddq_f32(v9, v9);
  v11 = vpaddq_f32(v10, v10);
  if (v11.f32[0] <= 0.0)
    v12 = (float32x4_t)xmmword_23C603EC0;
  else
    v12 = vdivq_f32(v7, vsqrtq_f32(v11));
  v13 = vmulq_f32(v8, v12);
  v13.i32[3] = 0;
  if (fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13))) < a5)
  {
    v14 = vmulq_f32(v5, v8);
    v14.i32[3] = 0;
    if (fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)) + a1[1].f32[0]) < a5 && a4 != 0)
    {
      v16 = vaddq_f32(v5, v6);
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      *a3 = vmulq_f32(v16, v17);
      return 1;
    }
    return 0;
  }
  v19 = vmulq_f32(v8, v7);
  v19.i32[3] = 0;
  v20 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  if (fabsf(v20) < a5)
    return 0;
  v21 = vmulq_f32(v5, v8);
  v21.i32[3] = 0;
  v22 = (float)-(float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)) + a1[1].f32[0]) / v20;
  *a3 = vaddq_f32(v5, vmulq_n_f32(v7, v22));
  return a5 + 1.0 >= v22 && 0.0 - a5 <= v22;
}

uint64_t cv3d::cv::gess::alg::PlaneCut(float32x4_t *this, float32x4_t *a2, GeometryQuality *a3, int *a4, unsigned __int8 a5, double a6)
{
  int v10;
  __int128 v11;
  uint64_t i;
  uint64_t j;
  float v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  double v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  cv3d::cv::gess::mesh::TriMesh *v40;
  _BOOL4 v41;
  uint64_t v42;
  int v43;
  const char *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  double v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int k;
  unsigned int *v56;
  uint64_t v57;
  double v58;
  double v59;
  unint64_t v60;
  unsigned int v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  BOOL v76;
  int v77;
  int v79;
  double v80;
  double v81;
  double v82;
  unsigned int v83;
  void *__p[2];
  char v85;
  unsigned int v86;
  double v87[6];
  _QWORD v88[2];
  int v89;
  int32x4_t v90;
  __int128 v91;
  unsigned int v92[3];

  if ((a3 & 1) == 0)
  {
    a2[1].f32[0] = -a2[1].f32[0];
    *a2 = vnegq_f32(*a2);
  }
  v10 = a5;
  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  *(_QWORD *)&v11 = 0x80000000800000;
  *((_QWORD *)&v11 + 1) = 0x80000000800000;
  v90 = vdupq_n_s32(0x7F7FFFFFu);
  v91 = v11;
  cv3d::cv::gess::alg::MeasureGeometryQuality(this, (const cv3d::cv::gess::mesh::PolyMesh *)v88, a3);
  if (a6 == 0.0)
    a6 = *(float *)v88 / 1000.0;
  for (i = 0; i != 3; ++i)
    v87[i] = *(float *)&v90.i32[i];
  for (j = 0; j != 3; ++j)
    v87[j + 3] = *(float *)&v92[j - 3];
  v14 = *(float *)v88;
  v86 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "CutStatus vertex");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::alg::CutStatus>((uint64_t)this, &v86, (__int128 *)__p);
  v79 = v10;
  if (v85 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v86;
  v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::alg::CutStatus>(&this->i64[1], (unsigned int *)__p, v15);
  if (this[7].i64[0] != this[6].i64[1])
  {
    v17 = 0;
    do
    {
      v18 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, this[11].u32[0], v17);
      v21 = *(_QWORD *)(v16 + 40);
      if (v17 >= (unint64_t)((*(_QWORD *)(v16 + 48) - v21) >> 2))
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v18, v19, v20);
      v22 = vmulq_f32(*a2, *v18);
      v22.i32[3] = 0;
      v23 = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22)) + a2[1].f32[0]);
      if (v23 >= -a6)
        v24 = 4;
      else
        v24 = 2;
      if (a6 < v23)
        v24 = 1;
      *(_DWORD *)(v21 + 4 * v17++) = v24;
    }
    while (v17 < (this[7].i64[0] - this[6].i64[1]) >> 2);
  }
  v83 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "PlaneCutAffected vertex");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v83, (__int128 *)__p);
  if (v85 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v83;
  v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(&this->i64[1], (unsigned int *)__p, v25);
  cv3d::cv::gess::alg::CutHEdges((uint64_t)this, v16, v26, a2, a6);
  if (this[10].i64[0] != this[9].i64[1])
  {
    v27 = 0;
    v28 = "index < data_.size()";
    v29 = "operator[]";
    do
    {
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
      LODWORD(v80) = v27;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)this, (unsigned int *)&v80, __p);
      v30 = 0;
      v31 = (char *)__p[0];
      v32 = *(_QWORD *)(v16 + 40);
      v33 = 4;
      do
      {
        v34 = *(unsigned int *)((char *)__p[0] + v30);
        if ((*(_QWORD *)(v16 + 48) - v32) >> 2 <= v34)
        {
          v43 = 182;
          v44 = "Attribute.h";
          goto LABEL_95;
        }
        v35 = *(_DWORD *)(v32 + 4 * v34);
        if (v35 == 1)
        {
          if (v33 == 2)
          {
            v43 = 129;
            v29 = "PlaneCut";
            v44 = "Edit.cpp";
            v28 = "fcs != REMOVE";
LABEL_95:
            __assert_rtn(v29, v44, v43, v28);
          }
          v33 = 1;
        }
        else if (v35 == 2)
        {
          if (v33 == 1)
          {
            v43 = 132;
            v29 = "PlaneCut";
            v44 = "Edit.cpp";
            v28 = "fcs != KEEP";
            goto LABEL_95;
          }
          v33 = 2;
        }
        v30 += 4;
      }
      while (v30 != 12);
      if (v33 != 2 && v33 != 4)
        goto LABEL_39;
      v36 = 0;
      v37 = *(_QWORD *)(v26 + 40);
      do
      {
        v38 = *(unsigned int *)&v31[v36];
        if (*(_QWORD *)(v26 + 48) <= v38)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v36 += 4;
        *(_QWORD *)(v37 + ((v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
      }
      while (v36 != 12);
      cv3d::cv::gess::mesh::TriMesh::DeleteFace((uint64_t)this, (unsigned int *)&v80);
      v31 = (char *)__p[0];
      if (__p[0])
      {
LABEL_39:
        __p[1] = v31;
        operator delete(v31);
      }
      ++v27;
    }
    while (v27 < (this[10].i64[0] - this[9].i64[1]) >> 2);
  }
  if (!cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)this))
  {
    v42 = 0;
    goto LABEL_54;
  }
  cv3d::cv::gess::mesh::TriMesh::RemoveDanglingUV((cv3d::cv::gess::mesh::TriMesh *)this);
  LODWORD(v80) = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v39 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v80, (unsigned __int8 *)__p);
  v41 = v39;
  if ((v85 & 0x80000000) == 0)
  {
    if (!v39)
      goto LABEL_49;
    goto LABEL_48;
  }
  operator delete(__p[0]);
  if (v41)
LABEL_48:
    cv3d::cv::gess::alg::SortFaceByGroupID((uint64_t **)this, v40);
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v80 = 0.0;
  v81 = 0.0;
  v45 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)&this->i64[1], (uint64_t)&v80, (unsigned __int8 *)__p);
  if (v85 < 0)
    operator delete(__p[0]);
  if (v45 == -1)
    v42 = 1;
  else
    v42 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)this);
LABEL_54:
  v46 = (this[7].i64[0] - this[6].i64[1]) >> 2;
  LOBYTE(v80) = 0;
  std::vector<BOOL>::vector(__p, v46, (unsigned __int8 *)&v80);
  v49 = this[6].i64[1];
  v48 = this[7].i64[0];
  if (v48 != v49)
  {
    v50 = 0;
    v51 = 0;
    v52 = v14;
    do
    {
      if (*(_QWORD *)(v26 + 48) <= v50)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v53 = v50 >> 6;
      v54 = 1 << v50;
      if ((*(_QWORD *)(*(_QWORD *)(v26 + 40) + 8 * v53) & v54) != 0)
      {
        *((_QWORD *)__p[0] + v53) |= v54;
        v92[0] = v51;
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(&v80, &this[6].u32[2], v92);
        for (k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v80);
              ;
              k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v80))
        {
          v92[0] = k;
          if (k == -1)
            break;
          v56 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&this[6].i64[1], v92);
          v57 = cv3d::cv::gess::mesh::Topology::h((uint64_t)&this[6].i64[1], v56);
          *(_QWORD *)((char *)__p[0] + (((unint64_t)*(unsigned int *)(v57 + 12) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v57 + 12);
        }
        v49 = this[6].i64[1];
        v48 = this[7].i64[0];
      }
      v50 = ++v51;
    }
    while (v51 < (unint64_t)((v48 - v49) >> 2));
    v58 = 0.001;
    if (a6 >= 0.001)
      v58 = a6;
    v59 = v52 + v52 >= v58 ? v52 + v52 : v58;
    if (v48 != v49)
    {
      v60 = 0;
      v61 = 0;
      v62 = v87[0] - v59;
      v63 = v87[1] - v59;
      v64 = v87[2] - v59;
      v65 = v59 + v87[3];
      v66 = v59 + v87[4];
      v67 = v59 + v87[5];
      while (1)
      {
        if (*(_QWORD *)(v26 + 48) <= v60)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        if ((*(_QWORD *)(*(_QWORD *)(v26 + 40) + 8 * (v60 >> 6)) & (1 << v60)) != 0)
        {
          LODWORD(v80) = this[11].i32[0];
          v68 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], (unsigned int *)&v80);
          v69 = *(_QWORD *)(v68 + 40);
          if (v60 >= (*(_QWORD *)(v68 + 48) - v69) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v70 = vmulq_f32(*a2, *(float32x4_t *)(v69 + 16 * v60));
          v70.i32[3] = 0;
          if (v59 < fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v70, v70)) + a2[1].f32[0]))
          {
            v77 = 0;
            if (v79)
              goto LABEL_97;
            goto LABEL_98;
          }
        }
        if ((*((_QWORD *)__p[0] + (v60 >> 6)) & (1 << v60)) != 0)
        {
          v92[0] = this[11].u32[0];
          v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], v92);
          v72 = *(_QWORD *)(v71 + 40);
          if (v60 >= (*(_QWORD *)(v71 + 48) - v72) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v73 = 0;
          v74 = v72 + 16 * v61;
          do
          {
            *(&v80 + v73) = *(float *)(v74 + 4 * v73);
            ++v73;
          }
          while (v73 != 3);
          if (v62 > v80 || v63 > v81)
            break;
          v75 = v64 > v82 || v65 < v80;
          v76 = v75 || v66 < v81;
          if (v76 || v67 < v82)
            break;
        }
        v60 = ++v61;
        if (v61 >= (unint64_t)((this[7].i64[0] - this[6].i64[1]) >> 2))
        {
          v42 = v42;
          goto LABEL_99;
        }
      }
      if (v79)
      {
        v77 = 1;
LABEL_97:
        v42 = 0;
        *a4 = v77;
        goto LABEL_99;
      }
LABEL_98:
      v42 = 0;
    }
  }
LABEL_99:
  if (__p[0])
    operator delete(__p[0]);
  if (v83 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(&this->i64[1], &v83, v47);
  v83 = -1;
  if (v86 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>(&this->i64[1], &v86);
  return v42;
}

void sub_23C5D18AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::alg::CutStatus>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  int v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::alg::CutStatus>((char **)(a1 + 8), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

uint64_t cv3d::cv::gess::alg::BoxCut(float32x4_t *a1, float32x4_t *a2, int a3, double a4)
{
  uint64_t i;
  float32x4_t *v7;
  uint64_t result;
  uint64_t j;
  float32x4_t v10[12];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  for (i = 0; i != 12; i += 2)
  {
    v7 = &v10[i];
    *v7 = (float32x4_t)xmmword_23C603EC0;
    v7[1].i32[0] = 0;
  }
  LOBYTE(result) = cv3d::cv::gess::math::OBBT<float>::GetFacePlanes(a2, v10);
  for (j = 0; j != 12; j += 2)
  {
    if ((result & 1) != 0)
      result = cv3d::cv::gess::alg::PlaneCut(a1, &v10[j], 0, 0, 0, a4);
    else
      result = 0;
  }
  return result;
}

uint64_t cv3d::cv::gess::math::OBBT<float>::GetFacePlanes(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v3;
  float32x4_t *v4;
  float32x4_t v6;
  __int32 v7;
  uint64_t v8;

  v3 = 0;
  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 1;
  do
  {
    cv3d::cv::gess::math::OBBT<float>::FacePlane(a1, v3, &v6);
    v4[-1] = v6;
    v4->i32[0] = v7;
    v4 += 2;
    ++v3;
  }
  while (v3 != 6);
  return 1;
}

uint64_t cv3d::cv::gess::alg::BoxCut(float32x4_t *a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float32x2_t v9;
  float v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  uint64_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  float32x2_t v37;
  uint64_t v38;
  float32x4_t v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;

  v4 = 0;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v36 = xmmword_23C60CBB0;
  v37 = 0;
  v38 = 0;
  v5 = a2;
  do
  {
    v6 = 0;
    v7 = 0.0;
    do
    {
      v7 = v7 + (float)(*(float *)(v5 + 4 * v6) * *(float *)((char *)&v36 + v6));
      v6 += 4;
    }
    while (v6 != 16);
    v37.f32[v4++] = v7;
    v5 += 4;
  }
  while (v4 != 4);
  v8 = 0;
  v9 = vdiv_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)HIDWORD(v38), 0));
  v10 = *(float *)&v38 / *((float *)&v38 + 1);
  *(float32x2_t *)v11.f32 = v9;
  v11.f32[2] = *(float *)&v38 / *((float *)&v38 + 1);
  v11.i32[3] = 0;
  v39 = v11;
  v35 = xmmword_23C60C6C0;
  v36 = 0uLL;
  v12 = a2;
  do
  {
    v13 = 0;
    v14 = 0.0;
    do
    {
      v14 = v14 + (float)(*(float *)(v12 + 4 * v13) * *(float *)((char *)&v35 + v13));
      v13 += 4;
    }
    while (v13 != 16);
    *((float *)&v36 + v8++) = v14;
    v12 += 4;
  }
  while (v8 != 4);
  v15 = 0;
  *(float32x2_t *)v16.f32 = vsub_f32(vdiv_f32(*(float32x2_t *)&v36, (float32x2_t)vdup_lane_s32((int32x2_t)HIDWORD(v36), 0)), v9);
  v16.f32[2] = (float)(*((float *)&v36 + 2) / *((float *)&v36 + 3)) - v10;
  v16.i32[3] = 0;
  v17 = vmulq_f32(v16, v16);
  v17.i32[3] = 0;
  v18 = (float32x2_t)vpaddq_f32(v17, v17).u64[0];
  v18.f32[0] = sqrtf(vaddv_f32(v18));
  v41 = vdivq_f32(v16, (float32x4_t)vdupq_lane_s32((int32x2_t)v18, 0));
  v19.i32[1] = 1065353216;
  v34 = xmmword_23C60CC30;
  v35 = 0uLL;
  v20 = a2;
  do
  {
    v21 = 0;
    v22 = 0.0;
    do
    {
      v22 = v22 + (float)(*(float *)(v20 + 4 * v21) * *(float *)((char *)&v34 + v21));
      v21 += 4;
    }
    while (v21 != 16);
    *((float *)&v35 + v15++) = v22;
    v20 += 4;
  }
  while (v15 != 4);
  v23 = 0;
  v19.i32[0] = HIDWORD(v35);
  *(float32x2_t *)v24.f32 = vsub_f32(vdiv_f32(*(float32x2_t *)&v35, (float32x2_t)vdup_lane_s32(v19, 0)), v9);
  v24.f32[2] = (float)(*((float *)&v35 + 2) / *((float *)&v35 + 3)) - v10;
  v24.i32[3] = 0;
  v25 = vmulq_f32(v24, v24);
  v25.i32[3] = 0;
  v26 = (float32x2_t)vpaddq_f32(v25, v25).u64[0];
  v26.f32[0] = sqrtf(vaddv_f32(v26));
  v42 = vdivq_f32(v24, (float32x4_t)vdupq_lane_s32((int32x2_t)v26, 0));
  v33 = xmmword_23C60CC40;
  v34 = 0uLL;
  do
  {
    v27 = 0;
    v28 = 0.0;
    do
    {
      v28 = v28 + (float)(*(float *)(a2 + 4 * v27) * *(float *)((char *)&v33 + v27));
      v27 += 4;
    }
    while (v27 != 16);
    *((float *)&v34 + v23++) = v28;
    a2 += 4;
  }
  while (v23 != 4);
  *(float32x2_t *)v29.f32 = vsub_f32(vdiv_f32(*(float32x2_t *)&v34, (float32x2_t)vdup_lane_s32((int32x2_t)HIDWORD(v34), 0)), v9);
  v29.f32[2] = (float)(*((float *)&v34 + 2) / *((float *)&v34 + 3)) - v10;
  v29.i32[3] = 0;
  v30 = vmulq_f32(v29, v29);
  v30.i32[3] = 0;
  v30.i64[0] = vpaddq_f32(v30, v30).u64[0];
  v30.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v30.f32));
  v18.i32[1] = v26.i32[0];
  *(float32x2_t *)&v31 = vmul_f32(v18, (float32x2_t)0x3F0000003F000000);
  *((float *)&v31 + 2) = v30.f32[0] * 0.5;
  HIDWORD(v31) = 0;
  v43 = vdivq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0));
  v40 = v31;
  return cv3d::cv::gess::alg::BoxCut(a1, &v39, a3, a4);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::alg::CutStatus>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5D1FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C5D2014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4AF48;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5D205C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4AF80;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Reserve(uint64_t a1, std::vector<int>::size_type a2)
{
  std::vector<unsigned int>::reserve((std::vector<int> *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Resize(uint64_t a1, std::vector<unsigned int>::size_type a2)
{
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = (v4 - v6) >> 2;
    if ((unint64_t)(v7 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 1;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v10);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *(_DWORD *)v12 = 0;
    v5 = v12 + 4;
    while (v4 != v6)
    {
      v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v4 = 0;
    v5 = v4 + 4;
  }
  a1[6] = v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(v3 + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::Clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,void>(a2, (uint64_t)v4);
}

void sub_23C5D22EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x1093C400FBCE358);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4AF80;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D4AF80;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::alg::CutStatus>::__init_with_size[abi:ne180100]<cv3d::cv::gess::alg::CutStatus*,cv3d::cv::gess::alg::CutStatus*>((_QWORD *)v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  return a1;
}

void sub_23C5D23A8(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::alg::CutStatus>::__init_with_size[abi:ne180100]<cv3d::cv::gess::alg::CutStatus*,cv3d::cv::gess::alg::CutStatus*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C5D2418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4AFF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5D2488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::alg::CutStatus>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::alg::CutStatus>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::alg::CutStatus>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

float32_t cv3d::cv::gess::math::OBBT<float>::FacePlane@<S0>(float32x4_t *a1@<X0>, int a2@<W1>, float32x4_t *a3@<X8>)
{
  float v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  switch(a2)
  {
    case 1:
      v3 = a1[1].f32[0];
      v4 = a1[2];
      goto LABEL_9;
    case 2:
      v5 = a1[3];
      v6 = vnegq_f32(v5);
      v7 = a1[1].f32[1];
      goto LABEL_7;
    case 3:
      v3 = a1[1].f32[1];
      v4 = a1[3];
      goto LABEL_9;
    case 4:
      v5 = a1[4];
      v6 = vnegq_f32(v5);
      v7 = a1[1].f32[2];
      goto LABEL_7;
    case 5:
      v3 = a1[1].f32[2];
      v4 = a1[4];
LABEL_9:
      v12 = vaddq_f32(*a1, vmulq_n_f32(v4, v3));
      v13 = vmulq_f32(v4, v4);
      v13.i32[3] = 0;
      v13.i64[0] = vpaddq_f32(v13, v13).u64[0];
      v13.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v13.f32));
      v14 = vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0));
      *a3 = v14;
      v11 = vmulq_f32(v12, v14);
      break;
    default:
      v5 = a1[2];
      v6 = vnegq_f32(v5);
      v7 = a1[1].f32[0];
LABEL_7:
      v8 = vsubq_f32(*a1, vmulq_n_f32(v5, v7));
      v9 = vmulq_f32(v5, v5);
      v9.i32[3] = 0;
      v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
      v9.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v9.f32));
      v10 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
      *a3 = v10;
      v11 = vmulq_f32(v8, v10);
      break;
  }
  v11.i32[3] = 0;
  v11.f32[0] = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11));
  a3[1].i32[0] = v11.i32[0];
  return v11.f32[0];
}

BOOL cv3d::cv::gess::alg::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL cv3d::cv::gess::alg::operator!=(_QWORD *a1, _QWORD *a2)
{
  return !cv3d::cv::gess::alg::operator==(a1, a2);
}

uint64_t cv3d::cv::gess::alg::CountBoundaryLoops(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  unint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int HEdge;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v22[20];
  unsigned int v23;
  void *__p;

  std::vector<BOOL>::vector(&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2));
  if (*((_QWORD *)this + 17) == *((_QWORD *)this + 16))
    goto LABEL_18;
  v3 = 0;
  v4 = 1;
  do
  {
    v5 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v3);
    if ((*v5 & v6) != 0)
      *(_QWORD *)((char *)__p + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v3);
    v8 = *((_QWORD *)this + 16);
    v7 = *((_QWORD *)this + 17);
    v3 = v4;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v7 - v8) >> 2) > v4++);
  if (v7 == v8)
  {
LABEL_18:
    v12 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v10);
      if ((*v13 & v14) != 0 && ((*(_QWORD *)((char *)__p + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      {
        v12 = (v12 + 1);
        v23 = v11;
        v15 = v11;
LABEL_13:
        *(_QWORD *)((char *)__p + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
        v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v23);
        v17 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v16);
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v22, (char *)this + 104, v17 + 12);
        while (1)
        {
          HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v22);
          v15 = HEdge;
          if (HEdge == -1)
            break;
          v19 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), HEdge);
          if ((*v19 & v20) != 0)
          {
            v23 = v15;
            if (v15 != v11)
              goto LABEL_13;
            break;
          }
        }
      }
      v10 = ++v11;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2) > v11);
  }
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_23C5D28BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::CountConnectedComponents(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int __src;
  _OWORD v18[2];
  __int128 v19;
  void *__p;

  v3 = (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2;
  LOBYTE(v18[0]) = 0;
  std::vector<BOOL>::vector(&__p, v3, (unsigned __int8 *)v18);
  v19 = 0u;
  memset(v18, 0, sizeof(v18));
  if (*((_QWORD *)this + 20) == *((_QWORD *)this + 19))
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v4 >> 6;
      v8 = 1 << v4;
      if ((*((_QWORD *)__p + (v4 >> 6)) & (1 << v4)) == 0)
      {
        __src = v6;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::__assign_with_size_random_access[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(v18, (char *)&__src, 1uLL);
        v5 = (v5 + 1);
        *((_QWORD *)__p + v7) |= v8;
        while (*((_QWORD *)&v19 + 1))
        {
          __src = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v18[0] + 1) + (((unint64_t)v19 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v19 & 0x3FF));
          *(_QWORD *)&v19 = v19 + 1;
          --*((_QWORD *)&v19 + 1);
          if ((unint64_t)v19 >= 0x800)
          {
            operator delete(**((void ***)&v18[0] + 1));
            *((_QWORD *)&v18[0] + 1) += 8;
            *(_QWORD *)&v19 = v19 - 1024;
          }
          v9 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)this + 104, &__src);
          v16 = v9;
          do
          {
            v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v16) + 4);
            v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v16);
            v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v10);
            if ((*v11 & v12) == 0)
            {
              v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v16);
              v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v13) + 16);
              if (((*(_QWORD *)((char *)__p + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
              {
                std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v18, &v15);
                *(_QWORD *)((char *)__p + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
              }
            }
          }
          while (v16 != v9);
        }
      }
      v4 = ++v6;
    }
    while (v6 < (unint64_t)((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2));
  }
  std::deque<int>::~deque[abi:ne180100](v18);
  if (__p)
    operator delete(__p);
  return v5;
}

void sub_23C5D2B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p)
{
  std::deque<int>::~deque[abi:ne180100](&a11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float32x4_t *cv3d::cv::gess::alg::ComputeAverageEdgeLength(float32x4_t *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unsigned int v12;

  if (this[8].i64[1] != this[8].i64[0])
  {
    v2 = (uint64_t)this;
    LODWORD(v3) = 0;
    v4 = (uint64_t)&this[6].i64[1];
    v5 = 0.0;
    do
    {
      v12 = v3;
      v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, &v12) + 12);
      v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, &v12);
      v8 = cv3d::cv::gess::mesh::Topology::h(v4, v7);
      v11 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), *(_DWORD *)(v8 + 12));
      this = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), v6);
      v9 = vsubq_f32(v11, *this);
      v10 = vmulq_f32(v9, v9);
      v10.i32[3] = 0;
      v3 = (v3 + 1);
      v5 = v5 + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)));
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 136) - *(_QWORD *)(v2 + 128)) >> 2) > v3);
  }
  return this;
}

uint64_t cv3d::cv::gess::alg::ComputeAverageVertexValence(uint64_t this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  int v6;
  _BYTE v7[16];

  v2 = this + 104;
  if (*(_QWORD *)(this + 112) != *(_QWORD *)(this + 104))
  {
    v3 = this;
    LODWORD(v4) = 0;
    v5 = 0.0;
    do
    {
      v6 = v4;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v7, v2, &v6);
      while (1)
      {
        this = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v7);
        if ((_DWORD)this == -1)
          break;
        v5 = v5 + 1.0;
      }
      v4 = (v4 + 1);
    }
    while (v4 < (uint64_t)(*(_QWORD *)(v3 + 112) - *(_QWORD *)(v3 + 104)) >> 2);
  }
  return this;
}

uint64_t cv3d::cv::gess::alg::ComputeVertexValenceDeviation(uint64_t this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float v5;
  int v6;
  _BOOL4 v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  _BYTE v12[16];

  v2 = this + 104;
  if (*(_QWORD *)(this + 112) != *(_QWORD *)(this + 104))
  {
    v3 = this;
    LODWORD(v4) = 0;
    v5 = 0.0;
    do
    {
      v11 = v4;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v12, v2, &v11);
      this = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v12);
      if ((_DWORD)this == -1)
      {
        v10 = 6;
      }
      else
      {
        v6 = 0;
        LOBYTE(v7) = 0;
        do
        {
          if (v7)
          {
            v7 = 1;
          }
          else
          {
            v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v3, *(_DWORD *)(v3 + 180), this);
            v7 = (v9 & *v8) != 0;
          }
          this = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v12);
          --v6;
        }
        while ((_DWORD)this != -1);
        if (v7)
        {
          if (-v6 >= 3)
            v10 = -3 - v6;
          else
            v10 = v6 + 3;
        }
        else if (~v6 > 4)
        {
          v10 = -6 - v6;
        }
        else
        {
          v10 = v6 + 6;
        }
      }
      v5 = v5 + (float)v10;
      v4 = (v4 + 1);
    }
    while (v4 < (uint64_t)(*(_QWORD *)(v3 + 112) - *(_QWORD *)(v3 + 104)) >> 2);
  }
  return this;
}

float32x4_t *cv3d::cv::gess::alg::ComputeEdgeStandardDeviation(float32x4_t *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unsigned int v13;

  if (this[8].i64[1] != this[8].i64[0])
  {
    v2 = (uint64_t)this;
    LODWORD(v3) = 0;
    v4 = (uint64_t)&this[6].i64[1];
    v5 = 0.0;
    v6 = 0.0;
    do
    {
      v13 = v3;
      v7 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, &v13) + 12);
      v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, &v13);
      v9 = cv3d::cv::gess::mesh::Topology::h(v4, v8);
      v12 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), *(_DWORD *)(v9 + 12));
      this = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), v7);
      v10 = vsubq_f32(v12, *this);
      v11 = vmulq_f32(v10, v10);
      v11.i32[3] = 0;
      v11.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11));
      v5 = v5 + v11.f32[0];
      v3 = (v3 + 1);
      v6 = v6 + sqrtf(v11.f32[0]);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 136) - *(_QWORD *)(v2 + 128)) >> 2) > v3);
  }
  return this;
}

void cv3d::cv::gess::alg::ComputeFaceAngleStandardDeviation(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  unsigned int v3;
  int v4;
  double v5;
  unsigned int v6;
  double v7;
  double v8;

  if (*((_QWORD *)this + 17) != *((_QWORD *)this + 16))
  {
    v3 = 0;
    v4 = 0;
    v5 = 0.0;
    v6 = 1;
    v7 = 0.0;
    do
    {
      v8 = cv3d::cv::gess::mesh::PolyMesh::Angle((uint64_t)this, v3);
      v7 = v7 + v8;
      v5 = v5 + v8 * v8;
      ++v4;
      v3 = v6;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2) > v6++);
  }
}

float32x4_t cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox@<Q0>(cv3d::cv::gess::alg *this@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v4;
  float32x4_t result;
  unint64_t v7;
  unsigned int v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;

  v4 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  result.i64[0] = 0x80000000800000;
  result.i64[1] = 0x80000000800000;
  *a2 = v4;
  a2[1] = result;
  if (*((_QWORD *)this + 14) != *((_QWORD *)this + 13))
  {
    LODWORD(v7) = 0;
    v8 = 1;
    do
    {
      v10 = v4;
      v11 = result;
      v9 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), v7);
      v4 = vminq_f32(v10, *v9);
      result = vmaxq_f32(v11, *v9);
      *a2 = v4;
      a2[1] = result;
      v7 = v8++;
    }
    while (v7 < (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2);
  }
  return result;
}

_QWORD *cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox@<X0>(_QWORD *result@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2;
  float32x4_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  float32x4_t v8;

  v2 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v3.i64[0] = 0x80000000800000;
  v3.i64[1] = 0x80000000800000;
  *a2 = v2;
  a2[1] = v3;
  v4 = result[1];
  v5 = v4 - *result;
  if (v4 != *result)
  {
    v6 = 0;
    v7 = v5 >> 4;
    do
    {
      v8 = *(float32x4_t *)(*result + 16 * v6);
      v2 = vminq_f32(v2, v8);
      v3 = vmaxq_f32(v3, v8);
      ++v6;
    }
    while (v7 > v6);
    *a2 = v2;
    a2[1] = v3;
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::MeasureTopologyQuality(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2, TopologyQuality *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  const cv3d::cv::gess::mesh::PolyMesh *v14;
  int v15;

  v6 = *((_QWORD *)this + 13);
  v5 = *((_QWORD *)this + 14);
  if (*((_QWORD *)this + 17) == *((_QWORD *)this + 16))
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v9);
      if (((unint64_t)a2 & *v10) != 0)
        ++v8;
      else
        ++v7;
      ++v9;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2));
  }
  v11 = (unint64_t)(v5 - v6) >> 2;
  v12 = (*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2;
  v13 = cv3d::cv::gess::alg::CountBoundaryLoops(this, a2);
  v15 = cv3d::cv::gess::alg::CountConnectedComponents(this, v14);
  *(_DWORD *)a2 = v11;
  *((_DWORD *)a2 + 1) = v7;
  *((_DWORD *)a2 + 2) = v8;
  *((_DWORD *)a2 + 3) = (v7 + v8) >> 1;
  *((_DWORD *)a2 + 4) = v12;
  *((_DWORD *)a2 + 5) = v13;
  *((_DWORD *)a2 + 6) = (v15 - (int)(v11 - ((v7 + v8) >> 1) + v13 + v12) / 2) & ~((v15
                                                                                               - (int)(v11 - ((v7 + v8) >> 1) + v13 + v12)
                                                                                               / 2) >> 31);
  *((_DWORD *)a2 + 7) = v15;
  return 1;
}

uint64_t cv3d::cv::gess::alg::MeasureGeometryQuality(float32x4_t *this, const cv3d::cv::gess::mesh::PolyMesh *a2, GeometryQuality *a3)
{
  int v5;
  const cv3d::cv::gess::mesh::PolyMesh *v6;
  int v7;
  const cv3d::cv::gess::mesh::PolyMesh *v8;
  int v9;
  const cv3d::cv::gess::mesh::PolyMesh *v10;
  int v11;
  const cv3d::cv::gess::mesh::PolyMesh *v12;
  double v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;
  float32x4_t *v18;
  float32x4_t v20;
  float32x4_t v21;

  cv3d::cv::gess::alg::ComputeAverageEdgeLength(this, a2);
  *(_DWORD *)a2 = v5;
  cv3d::cv::gess::alg::ComputeAverageVertexValence((uint64_t)this, v6);
  *((_DWORD *)a2 + 1) = v7;
  cv3d::cv::gess::alg::ComputeVertexValenceDeviation((uint64_t)this, v8);
  *((_DWORD *)a2 + 2) = v9;
  cv3d::cv::gess::alg::ComputeEdgeStandardDeviation(this, v10);
  *((_DWORD *)a2 + 3) = v11;
  cv3d::cv::gess::alg::ComputeFaceAngleStandardDeviation((cv3d::cv::gess::alg *)this, v12);
  *(float *)&v13 = v13;
  *((_DWORD *)a2 + 4) = LODWORD(v13);
  if (this[7].i64[0] == this[6].i64[1])
  {
    v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16.i64[0] = 0x80000000800000;
    v16.i64[1] = 0x80000000800000;
  }
  else
  {
    LODWORD(v14) = 0;
    v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16.i64[0] = 0x80000000800000;
    v16.i64[1] = 0x80000000800000;
    v17 = 1;
    do
    {
      v20 = v15;
      v21 = v16;
      v18 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, this[11].u32[0], v14);
      v15 = vminq_f32(v20, *v18);
      v16 = vmaxq_f32(v21, *v18);
      v14 = v17++;
    }
    while (v14 < (this[7].i64[0] - this[6].i64[1]) >> 2);
  }
  *((float32x4_t *)a2 + 2) = v15;
  *((float32x4_t *)a2 + 3) = v16;
  return 1;
}

uint64_t cv3d::cv::gess::alg::ComputeUVUtilization(uint64_t a1, _QWORD *a2, float *a3, int *a4)
{
  uint64_t *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  BOOL v15;
  uint64_t result;
  uint64_t v17;
  std::vector<int>::size_type v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  std::vector<int>::pointer end;
  int *v26;
  std::vector<int>::pointer begin;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<unsigned int>::size_type v39;
  uint64_t v40;
  unsigned __int16 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unsigned __int16 *v48;
  uint64_t *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float *v86;
  float v87;
  unsigned __int16 v88;
  float v89;
  uint64_t v90;
  unsigned int v91;
  float *v92;
  _QWORD *v93;
  int *v94;
  unsigned int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t **v100;
  unsigned __int16 v101;
  std::vector<unsigned int> v102;
  void *v103;
  void *v104;
  std::vector<int> __p;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108[3];

  v106 = -1;
  v107 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v107, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a1, &v106, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v8 = (uint64_t *)(a1 + 80);
  v103 = 0;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v103, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v103) = 0;
  v100 = (uint64_t **)(a1 + 56);
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&v103, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v104) = 0;
  v103 = 0;
  v99 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v100, (uint64_t)&v103, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v15 = v107 == -1 || v106 == -1 || v9 == -1 || v10 == -1 || v99 == -1;
  result = !v15;
  if (!v15)
  {
    v91 = result;
    v92 = a3;
    LODWORD(__p.__begin_) = v107;
    v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&__p, v11);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned int>::reserve(&__p, v18);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      do
      {
        LODWORD(v103) = v10;
        v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)v100, (unsigned int *)&v103, v19);
        v24 = *(_QWORD *)(v23 + 40);
        if (v20 >= (*(_QWORD *)(v23 + 48) - v24) >> 1)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        if (v21 == *(unsigned __int16 *)(v24 + 2 * v20))
        {
          end = __p.__end_;
          if (__p.__end_ >= __p.__end_cap_.__value_)
          {
            begin = __p.__begin_;
            v28 = __p.__end_ - __p.__begin_;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v30 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
            if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v31);
              begin = __p.__begin_;
              end = __p.__end_;
            }
            else
            {
              v32 = 0;
            }
            v33 = (int *)&v32[4 * v28];
            *v33 = v22;
            v26 = v33 + 1;
            while (end != begin)
            {
              v34 = *--end;
              *--v33 = v34;
            }
            __p.__begin_ = v33;
            __p.__end_ = v26;
            __p.__end_cap_.__value_ = (int *)&v32[4 * v31];
            if (begin)
              operator delete(begin);
          }
          else
          {
            *__p.__end_ = v22;
            v26 = end + 1;
          }
          __p.__end_ = v26;
          ++v21;
        }
        v20 = ++v22;
      }
      while (v22 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2));
    }
    LODWORD(v102.__begin_) = v107;
    v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v102, v19);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
    std::vector<float>::vector(&v103, v36);
    v108[0] = v107;
    v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), v108, v37);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
    std::vector<unsigned int>::vector(&v102, v39);
    v41 = 0;
    v42 = 0;
    v97 = (uint64_t)(a2 + 6);
    v98 = a1;
    v93 = a2;
    v94 = a4;
    while (1)
    {
      v101 = v41;
      v108[0] = v107;
      v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, v108, v40);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) <= (unint64_t)v41)
        break;
      v108[0] = v106;
      v46 = (uint64_t *)(cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>(v8, v108, v44)+ 40);
      v45 = *v46;
      if (v46[1] == *v46)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v47 = std::map<unsigned short,std::string>::at(v45, &v101);
      v48 = (unsigned __int16 *)std::map<std::string,std::string>::at(v97, (void **)v47);
      v49 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(*a2 + 48 * *v48 + 24, a4);
      v50 = *(unsigned __int16 *)v49;
      v51 = a2[3] + 48 * *(unsigned __int16 *)v49;
      v52 = *(_QWORD *)(v51 + 8);
      v53 = *(std::__shared_weak_count **)(v51 + 16);
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldxr(p_shared_owners);
        while (__stxr(v55 + 1, p_shared_owners));
        v56 = a2[3] + 48 * v50;
        v57 = *(_QWORD *)(v56 + 8);
        v58 = *(std::__shared_weak_count **)(v56 + 16);
        v59 = *(_DWORD *)(v52 + 4);
        if (v58)
        {
          v60 = (unint64_t *)&v58->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          v62 = *(_DWORD *)(v57 + 8);
          do
            v63 = __ldaxr(v60);
          while (__stlxr(v63 - 1, v60));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        else
        {
          v62 = *(_DWORD *)(v57 + 8);
        }
        v64 = v62 * v59;
        do
          v65 = __ldaxr(p_shared_owners);
        while (__stlxr(v65 - 1, p_shared_owners));
        a1 = v98;
        if (!v65)
        {
          v66 = v64;
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
          v64 = v66;
        }
      }
      else
      {
        v64 = *(_DWORD *)(v52 + 8) * *(_DWORD *)(v52 + 4);
      }
      v67 = v101;
      v102.__begin_[v101] = v64;
      v68 = __p.__begin_[v67];
      if (v67 + 1 == __p.__end_ - __p.__begin_)
        v69 = ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
      else
        v69 = __p.__begin_[v67 + 1];
      if (v68 >= v69)
      {
        v71 = 0.0;
      }
      else
      {
        v95 = v64;
        v96 = v42;
        v70 = 12 * v68;
        v71 = 0.0;
        do
        {
          v108[0] = v99;
          v72 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v100, v108, v40);
          v74 = *(_QWORD *)(v72 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v72 + 48) - v74) >> 2) <= v68)
            goto LABEL_95;
          v108[0] = v9;
          v75 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8, v108, v73);
          v77 = *(unsigned int *)(v74 + v70);
          v78 = *(_QWORD *)(v75 + 40);
          if (v77 >= (*(_QWORD *)(v75 + 48) - v78) >> 3)
            goto LABEL_95;
          v108[0] = v9;
          v79 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8, v108, v76);
          v81 = *(unsigned int *)(v74 + v70 + 4);
          v82 = *(_QWORD *)(v79 + 40);
          if (v81 >= (*(_QWORD *)(v79 + 48) - v82) >> 3
            || (v108[0] = v9,
                v83 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8, v108, v80), v84 = *(unsigned int *)(v74 + v70 + 8), v85 = *(_QWORD *)(v83 + 40), v84 >= (*(_QWORD *)(v83 + 48) - v85) >> 3))
          {
LABEL_95:
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          }
          v86 = (float *)(v78 + 8 * v77);
          v71 = v71
              + fabsf((float)((float)((float)(*(float *)(v82 + 8 * v81) - *v86)* (float)(*(float *)(v85 + 8 * v84 + 4) - v86[1]))- (float)((float)(*(float *)(v82 + 8 * v81 + 4) - v86[1])* (float)(*(float *)(v85 + 8 * v84) - *v86)))* 0.5);
          ++v68;
          v70 += 12;
        }
        while (v69 != v68);
        v67 = v101;
        a2 = v93;
        a4 = v94;
        a1 = v98;
        v42 = v96;
        v64 = v95;
      }
      if (v71 <= 1.0)
        v87 = v71;
      else
        v87 = 1.0;
      *((float *)v103 + v67) = v87;
      v42 += v64;
      v41 = v67 + 1;
    }
    v88 = 0;
    v89 = 0.0;
    while (1)
    {
      v108[0] = v107;
      v90 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, v108, v44);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 16))(v90) <= (unint64_t)v88)
        break;
      v89 = v89 + (float)(*((float *)v103 + v88) * (float)((float)v102.__begin_[v88] / (float)v42));
      ++v88;
    }
    *v92 = v89;
    if (v102.__begin_)
    {
      v102.__end_ = v102.__begin_;
      operator delete(v102.__begin_);
    }
    if (v103)
    {
      v104 = v103;
      operator delete(v103);
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    return v91;
  }
  return result;
}

void sub_23C5D3A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeUVUtilization(uint64_t **this, const cv3d::cv::gess::mesh::PolyMesh *a2, float *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float *v35;
  unint64_t v36;
  unsigned int v37;
  float *v38;
  void *__p[2];
  char v40;
  int v41;
  uint64_t v42;
  int v43;

  v41 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v41, (unsigned __int8 *)__p);
  if (v40 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v42 = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v40 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v43 = 0;
  v42 = 0;
  v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v40 < 0)
    operator delete(__p[0]);
  v9 = v41 == -1 || v5 == -1 || v7 == -1;
  result = !v9;
  if (!v9)
  {
    v37 = result;
    v38 = (float *)a2;
    LODWORD(__p[0]) = v41;
    v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p, v6);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    if (this[20] == this[19])
    {
      v14 = 0.0;
    }
    else
    {
      v13 = 0;
      v14 = 0.0;
      v15 = 1;
      do
      {
        LODWORD(__p[0]) = v7;
        v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p, v12);
        v19 = *(_QWORD *)(v16 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v16 + 48) - v19) >> 2) <= v13)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v16, v17, v18);
        v20 = (unsigned int *)(v19 + 12 * v13);
        LODWORD(__p[0]) = v5;
        v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p, v18);
        v24 = *v20;
        v25 = *(_QWORD *)(v21 + 40);
        if (v24 >= (*(_QWORD *)(v21 + 48) - v25) >> 3)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v21, v22, v23);
        LODWORD(__p[0]) = v5;
        v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p, v23);
        v29 = v20[1];
        v30 = *(_QWORD *)(v26 + 40);
        if (v29 >= (*(_QWORD *)(v26 + 48) - v30) >> 3)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v26, v27, v28);
        LODWORD(__p[0]) = v5;
        v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p, v28);
        v33 = v20[2];
        v34 = *(_QWORD *)(v31 + 40);
        if (v33 >= (*(_QWORD *)(v31 + 48) - v34) >> 3)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v31, v32, v12);
        v35 = (float *)(v25 + 8 * v24);
        v14 = v14
            + fabsf((float)((float)((float)(*(float *)(v30 + 8 * v29) - *v35)* (float)(*(float *)(v34 + 8 * v33 + 4) - v35[1]))- (float)((float)(*(float *)(v30 + 8 * v29 + 4) - v35[1])* (float)(*(float *)(v34 + 8 * v33) - *v35)))* 0.5);
        v13 = v15++;
      }
      while (v13 < ((char *)this[20] - (char *)this[19]) >> 2);
    }
    *v38 = v14 / (float)v36;
    return v37;
  }
  return result;
}

void sub_23C5D3D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::VerifyManifoldEdges(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  cv3d::cv::gess::alg *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int i;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  char *v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v35;
  cv3d::cv::gess::alg *v37;
  _BYTE v38[16];
  void *__p;
  char *v40;
  char *v41;
  unsigned int v42;
  void *v43[3];
  void *v44;

  v2 = this;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2);
  LOBYTE(v43[0]) = 0;
  std::vector<BOOL>::vector(&v44, v3, (unsigned __int8 *)v43);
  v4 = (uint64_t)v2 + 104;
  v5 = (uint64_t)(*((_QWORD *)v2 + 14) - *((_QWORD *)v2 + 13)) >> 2;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v43, v5, (unsigned __int8 *)&__p);
  v7 = *((_QWORD *)v2 + 16);
  v6 = *((_QWORD *)v2 + 17);
  if (v6 == v7)
  {
LABEL_38:
    v21 = 1;
    goto LABEL_39;
  }
  v8 = 0;
  v9 = 0;
  v37 = v2;
  while (1)
  {
    if (((*(_QWORD *)((char *)v44 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      goto LABEL_37;
    LODWORD(__p) = v9;
    v42 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)&__p) + 12);
    if (((*(_QWORD *)((char *)v43[0] + (((unint64_t)v42 >> 3) & 0x1FFFFFF8)) >> v42) & 1) != 0)
      break;
    __p = 0;
    v40 = 0;
    v41 = 0;
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v38, v4, &v42);
    for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v38);
          i != -1;
          i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v38))
    {
      *(_QWORD *)((char *)v44 + (((unint64_t)i >> 3) & 0x1FFFFFF8)) |= 1 << i;
      v11 = v40;
      if (v40 >= v41)
      {
        v13 = (v40 - (_BYTE *)__p) >> 2;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v14 = (v41 - (_BYTE *)__p) >> 1;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if ((unint64_t)(v41 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v41, v15);
        else
          v16 = 0;
        v17 = &v16[4 * v13];
        *(_DWORD *)v17 = i;
        v12 = v17 + 4;
        v19 = (char *)__p;
        v18 = v40;
        if (v40 != __p)
        {
          do
          {
            v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          v18 = (char *)__p;
        }
        __p = v17;
        v40 = v12;
        v41 = &v16[4 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v40 = i;
        v12 = v11 + 4;
      }
      v40 = v12;
    }
    v21 = 1;
    *(_QWORD *)((char *)v43[0] + (((unint64_t)v42 >> 3) & 0x1FFFFFF8)) |= 1 << v42;
    v22 = (unsigned int *)__p;
    v23 = v40;
    if ((unint64_t)(v40 - (_BYTE *)__p) >= 5)
    {
      v24 = 0;
      v25 = 0;
      v26 = 2;
      while (1)
      {
        v27 = v24;
        v24 = (v25 + 1);
        v28 = (v23 - (char *)v22) >> 2;
        v29 = v26;
        v30 = v24;
        if (v28 > v24)
          break;
LABEL_29:
        v35 = v28 - 1;
        ++v26;
        v25 = v24;
        if (v35 <= v24)
        {
          v21 = 1;
          goto LABEL_32;
        }
      }
      while (1)
      {
        v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, &v22[v27]);
        v32 = cv3d::cv::gess::mesh::Topology::h(v4, v31);
        v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)__p + v30);
        if (*(_DWORD *)(v32 + 12) == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, v33) + 12))
          break;
        v30 = v29;
        v22 = (unsigned int *)__p;
        v23 = v40;
        v28 = (v40 - (_BYTE *)__p) >> 2;
        if (v28 <= v29++)
          goto LABEL_29;
      }
      v21 = 0;
      v22 = (unsigned int *)__p;
LABEL_32:
      v2 = v37;
    }
    if (v22)
    {
      v40 = (char *)v22;
      operator delete(v22);
    }
    if (!(_DWORD)v21)
      goto LABEL_39;
    v7 = *((_QWORD *)v2 + 16);
    v6 = *((_QWORD *)v2 + 17);
LABEL_37:
    v8 = ++v9;
    if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) <= v9)
      goto LABEL_38;
  }
  v21 = 0;
LABEL_39:
  if (v43[0])
    operator delete(v43[0]);
  if (v44)
    operator delete(v44);
  return v21;
}

void sub_23C5D40C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::FindNonOrientableManifoldEdges(uint64_t a1, char **a2, char **a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *i;
  unint64_t v19;
  uint64_t j;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  unsigned int v54;
  unsigned int v55;
  _OWORD v56[2];
  int v57;

  memset(v56, 0, sizeof(v56));
  v57 = 1065353216;
  a2[1] = *a2;
  a3[1] = *a3;
  v3 = -858993459 * ((*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = a1 + 104;
    do
    {
      v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v7);
      if ((*v9 & v10) != 0)
        goto LABEL_25;
      v54 = v7;
      v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, &v54) + 12);
      v54 = v7;
      v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v54);
      v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, v12) + 12);
      if (*((_QWORD *)&v56[0] + 1))
      {
        v14 = v13 ^ v11;
        v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v56 + 8));
        v15.i16[0] = vaddlv_u8(v15);
        if (v15.u32[0] > 1uLL)
        {
          v16 = v13 ^ v11;
          if (*((_QWORD *)&v56[0] + 1) <= v14)
            v16 = v14 % *((_QWORD *)&v56[0] + 1);
        }
        else
        {
          v16 = (DWORD2(v56[0]) - 1) & v14;
        }
        v17 = *(uint64_t ***)(*(_QWORD *)&v56[0] + 8 * v16);
        if (v17)
        {
          for (i = *v17; i; i = (uint64_t *)*i)
          {
            v19 = i[1];
            if (v19 == v14)
            {
              if (*((_DWORD *)i + 4) == v11 && *((_DWORD *)i + 5) == v13)
              {
                ++*((_WORD *)i + 12);
                goto LABEL_25;
              }
            }
            else
            {
              if (v15.u32[0] > 1uLL)
              {
                if (v19 >= *((_QWORD *)&v56[0] + 1))
                  v19 %= *((_QWORD *)&v56[0] + 1);
              }
              else
              {
                v19 &= *((_QWORD *)&v56[0] + 1) - 1;
              }
              if (v19 != v16)
                break;
            }
          }
        }
      }
      v54 = v11;
      v55 = v13;
LABEL_25:
      ++v7;
    }
    while (v7 != v3);
    for (j = 0; j != v3; ++j)
    {
      v22 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), j);
      if ((*v22 & v23) == 0)
      {
        v54 = j;
        v24 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, &v54) + 12);
        v54 = j;
        v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v54);
        v26 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, v25) + 12);
        v54 = v24;
        v55 = v26;
        v54 = v26;
        v55 = v24;
        if (v27 != 2 || v28)
        {
          if (v27 != 1 || v28 >= 2)
          {
            v33 = a3[1];
            v32 = (unint64_t)a3[2];
            if ((unint64_t)v33 >= v32)
            {
              v40 = (v33 - *a3) >> 2;
              if ((unint64_t)(v40 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v41 = v32 - (_QWORD)*a3;
              v42 = v41 >> 1;
              if (v41 >> 1 <= (unint64_t)(v40 + 1))
                v42 = v40 + 1;
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v42;
              if (v43)
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v43);
              else
                v44 = 0;
              v49 = &v44[4 * v40];
              *(_DWORD *)v49 = j;
              v34 = v49 + 4;
              v51 = *a3;
              v50 = a3[1];
              if (v50 != *a3)
              {
                do
                {
                  v52 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v49 - 1) = v52;
                  v49 -= 4;
                }
                while (v50 != v51);
                v50 = *a3;
              }
              *a3 = v49;
              a3[1] = v34;
              a3[2] = &v44[4 * v43];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *(_DWORD *)v33 = j;
              v34 = v33 + 4;
            }
            a3[1] = v34;
          }
        }
        else
        {
          v30 = a2[1];
          v29 = (unint64_t)a2[2];
          if ((unint64_t)v30 >= v29)
          {
            v35 = (v30 - *a2) >> 2;
            if ((unint64_t)(v35 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v36 = v29 - (_QWORD)*a2;
            v37 = v36 >> 1;
            if (v36 >> 1 <= (unint64_t)(v35 + 1))
              v37 = v35 + 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v38 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a2 + 2), v38);
            else
              v39 = 0;
            v45 = &v39[4 * v35];
            *(_DWORD *)v45 = j;
            v31 = v45 + 4;
            v47 = *a2;
            v46 = a2[1];
            if (v46 != *a2)
            {
              do
              {
                v48 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v45 - 1) = v48;
                v45 -= 4;
              }
              while (v46 != v47);
              v46 = *a2;
            }
            *a2 = v45;
            a2[1] = v31;
            a2[2] = &v39[4 * v38];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_DWORD *)v30 = j;
            v31 = v30 + 4;
          }
          a2[1] = v31;
        }
      }
    }
  }
}

void sub_23C5D4504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Unwind_Resume(a1);
}

char *std::unordered_map<std::pair<unsigned int,unsigned int>,unsigned short,`anonymous namespace'::pair_hash,std::equal_to<std::pair<unsigned int,unsigned int>>,std::allocator<std::pair<std::pair<unsigned int,unsigned int> const,unsigned short>>>::operator[](float *a1, unsigned int *a2)
{
  unint64_t v2;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v14;
  float v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v5 = *a2;
  v6 = a2[1];
  v7 = v6 ^ *a2;
  v8 = *((_QWORD *)a1 + 1);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v2 = v6 ^ v5;
      if (v8 <= v7)
        v2 = v7 % v8;
    }
    else
    {
      v2 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v5 && *((_DWORD *)v11 + 5) == v6)
              return (char *)(v11 + 3);
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = *(_QWORD *)a2;
  *((_WORD *)v11 + 12) = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (v8 && (float)(v15 * (float)v8) >= v14)
  {
    v7 = v2;
    goto LABEL_68;
  }
  v16 = (v8 & (v8 - 1)) == 0;
  if (v8 < 3)
    v16 = 0;
  v17 = (2 * v8) | !v16;
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v8 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v8)
  {
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_64;
    v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v8 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *((_QWORD *)a1 + 1);
      goto LABEL_64;
    }
    if (!*(_QWORD *)&prime)
    {
      v35 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v35)
        operator delete(v35);
      v8 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_64;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v23)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
            goto LABEL_60;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_60:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v8 = (unint64_t)prime;
LABEL_64:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7)
      v7 %= v8;
  }
  else
  {
    v7 = ((_DWORD)v8 - 1) & v7;
  }
LABEL_68:
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v32)
  {
    *v11 = *v32;
LABEL_76:
    *v32 = v11;
    goto LABEL_77;
  }
  *v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v31[v7] = a1 + 4;
  if (*v11)
  {
    v33 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return (char *)(v11 + 3);
}

void sub_23C5D492C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::FindNonManifoldVertices(uint64_t a1, char **a2, unsigned int **a3, unsigned int **a4)
{
  uint64_t v6;
  int v7;
  int i;
  uint64_t v9;
  char **v10;
  char *v11;
  void **v12;
  unint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  char v28;
  unsigned int *v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int *v32;
  char v33;
  unsigned int *v34;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int HEdge;
  int v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  char *v67;
  int64_t v68;
  char *v69;
  char *v70;
  char *v71;
  int v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  int v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v97;
  void *__p;
  char *v99;
  char *v100;
  _BYTE v101[16];
  _QWORD v102[3];

  a2[1] = *a2;
  v6 = a1 + 104;
  v7 = -858993459 * ((*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  v93 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v97 = (v93 >> 2);
  std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::vector(v102, v97);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      LODWORD(__p) = i;
      v9 = cv3d::cv::gess::mesh::Topology::h(v6, (unsigned int *)&__p);
      v10 = (char **)(v102[0] + 24 * *(unsigned int *)(v9 + 12));
      v12 = (void **)(v10 + 1);
      v11 = v10[1];
      v14 = v10 + 2;
      v13 = (unint64_t)v10[2];
      if ((unint64_t)v11 >= v13)
      {
        v16 = (v11 - *v10) >> 2;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v17 = v13 - (_QWORD)*v10;
        v18 = v17 >> 1;
        if (v17 >> 1 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v14, v19);
        else
          v20 = 0;
        v21 = &v20[4 * v16];
        *(_DWORD *)v21 = i;
        v15 = v21 + 4;
        v22 = (char *)*v12;
        v23 = *v10;
        if (*v12 != *v10)
        {
          do
          {
            v24 = *((_DWORD *)v22 - 1);
            v22 -= 4;
            *((_DWORD *)v21 - 1) = v24;
            v21 -= 4;
          }
          while (v22 != v23);
          v22 = *v10;
        }
        *v10 = v21;
        *v12 = v15;
        *v14 = &v20[4 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v11 = i;
        v15 = v11 + 4;
      }
      *v12 = v15;
    }
  }
  if ((v93 & 0x3FFFFFFFCLL) != 0)
  {
    v25 = 0;
    v94 = (uint64_t)(a2 + 2);
    do
    {
      if (*(_QWORD *)(v102[0] + 24 * v25 + 8) == *(_QWORD *)(v102[0] + 24 * v25))
      {
        v43 = a2[1];
        v49 = (unint64_t)a2[2];
        if ((unint64_t)v43 >= v49)
        {
          v51 = (v43 - *a2) >> 2;
          if ((unint64_t)(v51 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v52 = v49 - (_QWORD)*a2;
          v53 = v52 >> 1;
          if (v52 >> 1 <= (unint64_t)(v51 + 1))
            v53 = v51 + 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v53;
          if (v47)
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v47);
          else
            v48 = 0;
          v69 = &v48[4 * v51];
          *(_DWORD *)v69 = v25;
          v50 = v69 + 4;
          v71 = *a2;
          v70 = a2[1];
          if (v70 != *a2)
          {
            do
            {
              v72 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v69 - 1) = v72;
              v69 -= 4;
            }
            while (v70 != v71);
LABEL_97:
            v70 = *a2;
          }
LABEL_98:
          *a2 = v69;
          a2[1] = v50;
          a2[2] = &v48[4 * v47];
          if (v70)
            operator delete(v70);
          goto LABEL_100;
        }
      }
      else
      {
        v27 = *a4;
        v26 = a4[1];
        if (*a4 != v26)
        {
          v28 = 0;
          while (v25 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, v27) + 12))
          {
            v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, v27);
            v30 = v25 == *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v6, v29) + 12);
            v28 |= v30;
            ++v27;
            v30 = v30 || v27 == v26;
            if (v30)
            {
              if ((v28 & 1) != 0)
                goto LABEL_101;
              goto LABEL_32;
            }
          }
          goto LABEL_101;
        }
LABEL_32:
        v32 = *a3;
        v31 = a3[1];
        if (*a3 != v31)
        {
          v33 = 0;
          while (v25 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, v32) + 12))
          {
            v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, v32);
            v30 = v25 == *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v6, v34) + 12);
            v33 |= v30;
            ++v32;
            if (v30 || v32 == v31)
            {
              if ((v33 & 1) != 0)
                goto LABEL_101;
              goto LABEL_41;
            }
          }
          goto LABEL_101;
        }
LABEL_41:
        v36 = v102[0] + 24 * v25;
        v37 = *(unsigned int **)v36;
        v38 = *(unsigned int **)(v36 + 8);
        if (*(unsigned int **)v36 == v38)
          goto LABEL_66;
        v39 = 0;
        do
        {
          v40 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v37);
          if ((*v40 & v41) != 0)
            ++v39;
          ++v37;
        }
        while (v37 != v38);
        if (v39 <= 1)
        {
LABEL_66:
          LODWORD(__p) = v25;
          cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v101, v6, &__p);
          __p = 0;
          v99 = 0;
          v100 = 0;
          while (1)
          {
            HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v101);
            v55 = HEdge;
            if (HEdge == -1)
              break;
            v56 = v99;
            if (v99 >= v100)
            {
              v58 = (v99 - (_BYTE *)__p) >> 2;
              if ((unint64_t)(v58 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v59 = (v100 - (_BYTE *)__p) >> 1;
              if (v59 <= v58 + 1)
                v59 = v58 + 1;
              if ((unint64_t)(v100 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
                v60 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v60 = v59;
              if (v60)
                v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v100, v60);
              else
                v61 = 0;
              v62 = &v61[4 * v58];
              *(_DWORD *)v62 = v55;
              v57 = v62 + 4;
              v64 = (char *)__p;
              v63 = v99;
              if (v99 != __p)
              {
                do
                {
                  v65 = *((_DWORD *)v63 - 1);
                  v63 -= 4;
                  *((_DWORD *)v62 - 1) = v65;
                  v62 -= 4;
                }
                while (v63 != v64);
                v63 = (char *)__p;
              }
              __p = v62;
              v99 = v57;
              v100 = &v61[4 * v60];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *(_DWORD *)v99 = HEdge;
              v57 = v56 + 4;
            }
            v99 = v57;
          }
          v67 = *(char **)(v102[0] + 24 * v25);
          v66 = *(char **)(v102[0] + 24 * v25 + 8);
          if (v66 - v67 == v99 - (_BYTE *)__p)
          {
            while (v67 != v66)
            {
              v68 = v99 - (_BYTE *)__p;
              if (__p != v99)
              {
                v68 = 0;
                while (*(_DWORD *)((char *)__p + v68) != *(_DWORD *)v67)
                {
                  v68 += 4;
                  if ((char *)__p + v68 == v99)
                  {
                    v68 = v99 - (_BYTE *)__p;
                    break;
                  }
                }
              }
              if ((char *)__p + v68 == v99)
              {
                v74 = a2[1];
                v80 = (unint64_t)a2[2];
                if ((unint64_t)v74 < v80)
                  goto LABEL_113;
                v88 = (v74 - *a2) >> 2;
                if ((unint64_t)(v88 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v89 = v80 - (_QWORD)*a2;
                v90 = v89 >> 1;
                if (v89 >> 1 <= (unint64_t)(v88 + 1))
                  v90 = v88 + 1;
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v90;
                if (v78)
                  v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v78);
                else
                  v79 = 0;
                v82 = &v79[4 * v88];
                *(_DWORD *)v82 = v25;
                v81 = v82 + 4;
                v91 = *a2;
                v83 = a2[1];
                if (v83 != *a2)
                {
                  do
                  {
                    v92 = *((_DWORD *)v83 - 1);
                    v83 -= 4;
                    *((_DWORD *)v82 - 1) = v92;
                    v82 -= 4;
                  }
                  while (v83 != v91);
                  goto LABEL_133;
                }
                goto LABEL_134;
              }
              v67 += 4;
            }
          }
          else
          {
            v74 = a2[1];
            v73 = (unint64_t)a2[2];
            if ((unint64_t)v74 < v73)
            {
LABEL_113:
              *(_DWORD *)v74 = v25;
              v81 = v74 + 4;
            }
            else
            {
              v75 = (v74 - *a2) >> 2;
              if ((unint64_t)(v75 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v76 = v73 - (_QWORD)*a2;
              v77 = v76 >> 1;
              if (v76 >> 1 <= (unint64_t)(v75 + 1))
                v77 = v75 + 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v77;
              if (v78)
                v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v78);
              else
                v79 = 0;
              v82 = &v79[4 * v75];
              *(_DWORD *)v82 = v25;
              v81 = v82 + 4;
              v84 = *a2;
              v83 = a2[1];
              if (v83 != *a2)
              {
                do
                {
                  v85 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v82 - 1) = v85;
                  v82 -= 4;
                }
                while (v83 != v84);
LABEL_133:
                v83 = *a2;
              }
LABEL_134:
              *a2 = v82;
              a2[1] = v81;
              a2[2] = &v79[4 * v78];
              if (v83)
                operator delete(v83);
            }
            a2[1] = v81;
          }
          if (__p)
          {
            v99 = (char *)__p;
            operator delete(__p);
          }
          goto LABEL_101;
        }
        v43 = a2[1];
        v42 = (unint64_t)a2[2];
        if ((unint64_t)v43 >= v42)
        {
          v44 = (v43 - *a2) >> 2;
          if ((unint64_t)(v44 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v45 = v42 - (_QWORD)*a2;
          v46 = v45 >> 1;
          if (v45 >> 1 <= (unint64_t)(v44 + 1))
            v46 = v44 + 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47)
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v94, v47);
          else
            v48 = 0;
          v69 = &v48[4 * v44];
          *(_DWORD *)v69 = v25;
          v50 = v69 + 4;
          v86 = *a2;
          v70 = a2[1];
          if (v70 != *a2)
          {
            do
            {
              v87 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v69 - 1) = v87;
              v69 -= 4;
            }
            while (v70 != v86);
            goto LABEL_97;
          }
          goto LABEL_98;
        }
      }
      *(_DWORD *)v43 = v25;
      v50 = v43 + 4;
LABEL_100:
      a2[1] = v50;
LABEL_101:
      ++v25;
    }
    while (v25 != v97);
  }
  __p = v102;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23C5D5014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a18;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::FindNonManifoldOrientable(uint64_t a1, char **a2, char **a3, char **a4)
{
  cv3d::cv::gess::alg::FindNonOrientableManifoldEdges(a1, a2, a3);
  cv3d::cv::gess::alg::FindNonManifoldVertices(a1, a4, (unsigned int **)a2, (unsigned int **)a3);
}

BOOL cv3d::cv::gess::alg::IsManifold(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  void *v3;
  void *v4;
  char *v5;
  char *v6;
  void *v7;
  char *v10;
  char *v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  __p = 0;
  v14 = 0;
  v15 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  cv3d::cv::gess::alg::FindNonOrientableManifoldEdges((uint64_t)this, (char **)&v16, (char **)&__p);
  cv3d::cv::gess::alg::FindNonManifoldVertices((uint64_t)this, &v10, (unsigned int **)&v16, (unsigned int **)&__p);
  v4 = __p;
  v3 = v14;
  v5 = v10;
  v6 = v11;
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
    v7 = __p;
    if (!__p)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = __p;
  if (__p)
  {
LABEL_3:
    v14 = v7;
    operator delete(v7);
  }
LABEL_4:
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  return v3 == v4 && v6 == v5;
}

void sub_23C5D5180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  cv3d::cv::gess::isochart::IsVertexManifold((uint64_t)&__p, (uint64_t)&a13, (uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::IsOrientable(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::PolyMesh *a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *__p;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  __p = 0;
  v7 = 0;
  v8 = 0;
  cv3d::cv::gess::alg::FindNonOrientableManifoldEdges((uint64_t)this, (char **)&v9, (char **)&__p);
  v3 = v9;
  v2 = v10;
  if (!__p)
  {
    v4 = v9;
    if (!v9)
      return v2 == v3;
    goto LABEL_3;
  }
  v7 = __p;
  operator delete(__p);
  v4 = v9;
  if (v9)
  {
LABEL_3:
    v10 = v4;
    operator delete(v4);
  }
  return v2 == v3;
}

void sub_23C5D5220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeVertexTBN(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  int v60;
  int v61;
  void *__p[2];
  char v63;
  void *v64[3];
  uint64_t v65;
  uint64_t v66;

  if (*a2 != 2)
    return 0;
  std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::vector(v64, (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  if (!cv3d::cv::gess::alg::internal::PREPARE_OBJ_ORTHOGONAL_TANGENTIAL(a1, (uint64_t *)v64))
    goto LABEL_53;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v65 = 0;
  v66 = 0;
  v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
  if (v63 < 0)
    operator delete(__p[0]);
  if (v3 == -1 && !cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a1))
    goto LABEL_53;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v65 = 0;
  v66 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
  if (v63 < 0)
    operator delete(__p[0]);
  if (v4 == -1)
  {
LABEL_53:
    v58 = 0;
  }
  else
  {
    LODWORD(__p[0]) = v4;
    v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_TANGENT[0]);
    v65 = 0;
    v66 = 0;
    v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
    v61 = v6;
    if (v63 < 0)
      operator delete(__p[0]);
    if (v6 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_TANGENT[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v61, (__int128 *)__p);
      if (v63 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v61;
    v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_BITANGENT[0]);
    v65 = 0;
    v66 = 0;
    v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v65, (unsigned __int8 *)__p);
    v60 = v8;
    if (v63 < 0)
      operator delete(__p[0]);
    if (v8 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_BITANGENT[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v60, (__int128 *)__p);
      if (v63 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v60;
    v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v10 = v9;
    if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
    {
      v11 = 0;
      v12 = 1;
      do
      {
        v13 = *(_QWORD *)(v7 + 40);
        if (v11 >= (*(_QWORD *)(v7 + 48) - v13) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v14 = (_QWORD *)(v13 + 16 * v11);
        *v14 = 0;
        v14[1] = 0;
        v15 = *(_QWORD *)(v9 + 40);
        if (v11 >= (*(_QWORD *)(v9 + 48) - v15) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v16 = (_QWORD *)(v15 + 16 * v11);
        *v16 = 0;
        v16[1] = 0;
        v11 = v12++;
      }
      while (v11 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    }
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      LODWORD(v18) = 0;
      do
      {
        LODWORD(v65) = v18;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v65, __p);
        v19 = 0;
        v20 = (float32x4_t *)((char *)v64[0] + 48 * v65);
        v17 = v20[1];
        v21 = v20[2];
        do
        {
          v22 = *(unsigned int *)((char *)__p[0] + v19);
          v23 = *(_QWORD *)(v7 + 40);
          if (v22 >= (*(_QWORD *)(v7 + 48) - v23) >> 4
            || (*(float32x4_t *)(v23 + 16 * v22) = vaddq_f32(v17, *(float32x4_t *)(v23 + 16 * v22)),
                v24 = *(unsigned int *)((char *)__p[0] + v19),
                v25 = *(_QWORD *)(v10 + 40),
                v24 >= (*(_QWORD *)(v10 + 48) - v25) >> 4))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v19 += 4;
          *(float32x4_t *)(v25 + 16 * v24) = vaddq_f32(v21, *(float32x4_t *)(v25 + 16 * v24));
        }
        while (v19 != 12);
        v18 = (v18 + 1);
      }
      while (v18 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
    }
    if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
    {
      v26 = 0;
      v27 = 1;
      v17.i32[0] = 897988541;
      do
      {
        v28 = *(_QWORD *)(v7 + 40);
        if (v26 >= (*(_QWORD *)(v7 + 48) - v28) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v29 = *(_QWORD *)(v5 + 40);
        if (v26 >= (*(_QWORD *)(v5 + 48) - v29) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v30 = *(float32x4_t *)(v28 + 16 * v26);
        v31 = *(float32x4_t *)(v29 + 16 * v26);
        v32 = vmulq_f32(v30, v31);
        v32.i32[3] = 0;
        v33 = vsubq_f32(v30, vmulq_n_f32(v31, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32))));
        v34 = vmulq_f32(v33, v33);
        v34.i32[3] = 0;
        v35 = vpaddq_f32(v34, v34);
        v36 = (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL);
        v37 = (int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL);
        if (fabsf(sqrtf(vaddv_f32(*(float32x2_t *)v35.f32))) >= 0.000001)
        {
          v52 = vpaddq_f32(v35, v35);
          v53 = (int32x4_t)xmmword_23C603EC0;
          if (v52.f32[0] > 0.0)
            v53 = (int32x4_t)vdivq_f32(v33, vsqrtq_f32(v52));
          *(int32x4_t *)(v28 + 16 * v26) = v53;
          v54 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v31, v36), (int32x4_t)v31), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL), v53)), (float32x4_t)vzip2q_s32(vzip1q_s32(v53, (int32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 0xCuLL)), v53), (float32x4_t)vuzp2q_s32(v37, (int32x4_t)v31));
          v55 = vmulq_f32(v54, v54);
          v55.i32[3] = 0;
          v56 = vpaddq_f32(v55, v55);
          v57 = vpaddq_f32(v56, v56);
          v50 = (float32x4_t)xmmword_23C603EC0;
          if (v57.f32[0] > 0.0)
            v50 = vdivq_f32(v54, vsqrtq_f32(v57));
          v51 = *(_QWORD *)(v10 + 40);
          if (v26 >= (*(_QWORD *)(v10 + 48) - v51) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        else
        {
          v33.f32[0] = fabsf(v31.f32[0] + -1.0);
          v38 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v17, v33), 0), (int8x16_t)xmmword_23C605200, (int8x16_t)xmmword_23C603EC0);
          v39 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v31, v36), (int32x4_t)v31);
          v40 = (float32x4_t)vuzp2q_s32(v37, (int32x4_t)v31);
          v41 = vmlsq_f32(vmulq_f32(v39, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), v38)), (float32x4_t)vzip2q_s32(vzip1q_s32(v38, (int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL)), v38), v40);
          v42 = vmulq_f32(v41, v41);
          v42.i32[3] = 0;
          v43 = vpaddq_f32(v42, v42);
          v44 = vpaddq_f32(v43, v43);
          v45 = (int32x4_t)xmmword_23C603EC0;
          if (v44.f32[0] > 0.0)
            v45 = (int32x4_t)vdivq_f32(v41, vsqrtq_f32(v44));
          *(int32x4_t *)(v28 + 16 * v26) = v45;
          v46 = vmlaq_f32(vmulq_f32(v39, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL), v45)), (float32x4_t)vzip2q_s32(vzip1q_s32(v45, (int32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL)), v45), vnegq_f32(v40));
          v47 = vmulq_f32(v46, v46);
          v47.i32[3] = 0;
          v48 = vpaddq_f32(v47, v47);
          v49 = vpaddq_f32(v48, v48);
          v50 = (float32x4_t)xmmword_23C603EC0;
          if (v49.f32[0] > 0.0)
            v50 = vdivq_f32(v46, vsqrtq_f32(v49));
          v51 = *(_QWORD *)(v10 + 40);
          if (v26 >= (*(_QWORD *)(v10 + 48) - v51) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(float32x4_t *)(v51 + 16 * v26) = v50;
        v26 = v27++;
      }
      while (v26 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v58 = 1;
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  return v58;
}

void sub_23C5D58A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5D59D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::tuple<cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>,cv3d::cv::gess::math::Vector3T<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5D5A64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::deque<cv3d::cv::gess::mesh::FaceHandle>::__assign_with_size_random_access[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(_QWORD *a1, char *__src, unint64_t a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  void **v11;
  char *v12;
  char *v14[3];

  v5 = a1[5];
  if (v5 >= a3)
  {
    v10 = a1[1];
    v11 = (void **)(v10 + 8 * (a1[4] >> 10));
    if (a1[2] == v10)
      v12 = 0;
    else
      v12 = (char *)*v11 + 4 * (a1[4] & 0x3FFLL);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cv3d::cv::gess::mesh::FaceHandle const*,cv3d::cv::gess::mesh::FaceHandle const*,std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>,0>(__src, v12, &__src[4 * a3], v11, v14);
    return (_QWORD *)std::deque<cv3d::cv::gess::mesh::FaceHandle>::__erase_to_end((uint64_t)a1, v14[1], (uint64_t)v14[2]);
  }
  else
  {
    v6 = &__src[4 * v5];
    v7 = a1[1];
    v8 = (void **)(v7 + 8 * (a1[4] >> 10));
    if (a1[2] == v7)
      v9 = 0;
    else
      v9 = (char *)*v8 + 4 * (a1[4] & 0x3FFLL);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cv3d::cv::gess::mesh::FaceHandle const*,cv3d::cv::gess::mesh::FaceHandle const*,std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>,0>(__src, v9, v6, v8, v14);
    return std::deque<cv3d::cv::gess::mesh::FaceHandle>::__append_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(a1, (int *)v6, a3 - a1[5]);
  }
}

_QWORD *std::deque<cv3d::cv::gess::mesh::FaceHandle>::__append_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle const*>(_QWORD *a1, int *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = ((v7 - v6) << 7) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  if (a3 > v10)
  {
    std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(a1, a3 - v10);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v11 = (_QWORD *)(v6 + 8 * (v9 >> 10));
  if (v7 == v6)
    v12 = 0;
  else
    v12 = *v11 + 4 * (v9 & 0x3FF);
  v19[0] = v6 + 8 * (v9 >> 10);
  v19[1] = v12;
  result = std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>::operator+[abi:ne180100]((uint64_t)v19, a3);
  while (v12 != v14)
  {
    v15 = (_DWORD *)(v11 == result ? v14 : *v11 + 4096);
    if ((_DWORD *)v12 == v15)
    {
      v15 = (_DWORD *)v12;
    }
    else
    {
      v16 = (_DWORD *)v12;
      do
      {
        v17 = *a2++;
        *v16++ = v17;
      }
      while (v16 != v15);
    }
    a1[5] += ((uint64_t)v15 - v12) >> 2;
    if (v11 == result)
      break;
    v18 = v11[1];
    ++v11;
    v12 = v18;
  }
  return result;
}

uint64_t std::deque<cv3d::cv::gess::mesh::FaceHandle>::__erase_to_end(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 10));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 4 * (v5 & 0x3FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 2) + ((v8 - a2) << 7);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 2);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 10));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 4 * (*(_QWORD *)(result + 32) & 0x3FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 2) + ((a2 - v13) << 7) - ((v14 - *(_QWORD *)v13) >> 2);
      std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>::operator+[abi:ne180100]((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = std::deque<cv3d::cv::gess::mesh::FaceHandle>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,cv3d::cv::gess::mesh::FaceHandle const*,cv3d::cv::gess::mesh::FaceHandle const*,std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 2 >= v11 >> 2 ? v11 >> 2 : (a3 - v9) >> 2;
      if (v12)
        __src = (char *)memmove(__dst, v9, 4 * v12);
      v9 += 4 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 4 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x3FF) != 0)
    v6 = (v5 >> 10) + 1;
  else
    v6 = v5 >> 10;
  v7 = a1[4];
  if (v6 >= v7 >> 10)
    v8 = v7 >> 10;
  else
    v8 = v6;
  if (v6 <= v7 >> 10)
  {
    for (a1[4] = v7 - (v8 << 10); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<int *>::push_back(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<int *>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 1023;
          else
            v64 = 1024;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 10);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 10;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        std::__split_buffer<int *>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<int *>::push_front((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_23C5D633C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__deque_iterator<cv3d::cv::gess::mesh::FaceHandle,cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle&,cv3d::cv::gess::mesh::FaceHandle**,long,1024l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 2);
    if (v4 < 1)
      result -= (unint64_t)(1023 - v4) >> 10;
    else
      result += (unint64_t)v4 >> 10;
  }
  return result;
}

uint64_t std::deque<cv3d::cv::gess::mesh::FaceHandle>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t cv3d::cv::gess::alg::ComputeFieldsFromRandomInitialValue(uint64_t a1, float *a2, _BYTE *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  char inited;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  inited = cv3d::cv::gess::internal::InitRandomTangent(a4, a5);
  v13 = *a3;
  if (*a3)
  {
    v14 = 0;
    do
    {
      if ((inited & 1) != 0)
      {
        inited = cv3d::cv::gess::internal::OptimizeOrientationsRoSy4Extrinsic(a1, a4, a5);
        v13 = *a3;
      }
      else
      {
        inited = 0;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  v19 = *(_DWORD *)(a1 + 176);
  v15 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v19);
  result = (inited & 1) != 0 && cv3d::cv::gess::internal::InitRandomPosition(v15, a4, a6, *a2);
  v17 = *a3;
  if (*a3)
  {
    v18 = 0;
    do
    {
      if ((result & 1) != 0)
      {
        result = cv3d::cv::gess::internal::OptimizePositionsRoSy4Extrinsic(a1, a4, a5, a6, *a2);
        v17 = *a3;
      }
      else
      {
        result = 0;
      }
      ++v18;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::ComputeFieldsFromCoarserHierarchy(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, float *a5, _BYTE *a6, uint64_t *a7, uint64_t *a8, _QWORD *a9)
{
  uint64_t v14;
  char inited;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int i;
  uint64_t v37;
  float32x4_t v40;
  float32x4_t v41;
  unsigned int v42;
  unsigned int v43;

  v14 = (uint64_t)(a2[1] - *a2) >> 2;
  inited = v14 == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2
        && v14 == (a8[1] - *a8) >> 4
        && v14 == (uint64_t)(a9[1] - *a9) >> 4;
  v42 = *(_DWORD *)(a1 + 176);
  v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v42);
  v16 = *a8;
  if (a8[1] != *a8)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      v19 = *(unsigned int *)(*a2 + 4 * v17);
      if ((_DWORD)v19 == -1)
      {
        if ((inited & 1) != 0
          && (v28 = cv3d::cv::gess::internal::InitRandomTangentHelper((float *)(*a7 + 16 * v17), (float32x4_t *)(v16 + 16 * v17)), (_DWORD)v28))
        {
          v31 = *(_QWORD *)(v37 + 40);
          if (v17 >= (*(_QWORD *)(v37 + 48) - v31) >> 4)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v28, v29, v30);
          inited = cv3d::cv::gess::internal::InitRandomPositionHelper((float32x4_t *)(v31 + 16 * v17), (float *)(*a7 + 16 * v17), (float32x4_t *)(*a9 + 16 * v17), *a5);
        }
        else
        {
          inited = 0;
        }
      }
      else
      {
        v20 = *(float32x4_t *)(*a3 + 16 * v19);
        v21 = *(float32x4_t *)(*a7 + 16 * v17);
        v22 = vmulq_f32(v20, v21);
        v22.i32[3] = 0;
        *(float32x4_t *)(v16 + 16 * v17) = vsubq_f32(v20, vmulq_n_f32(v21, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22))));
        v40 = *(float32x4_t *)(*a4 + 16 * *(unsigned int *)(*a2 + 4 * v17));
        v41 = v21;
        v43 = *(_DWORD *)(a1 + 176);
        v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v43);
        v26 = *(_QWORD *)(v23 + 40);
        if (v17 >= (*(_QWORD *)(v23 + 48) - v26) >> 4)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v23, v24, v25);
        v27 = vmulq_f32(v41, vsubq_f32(v40, *(float32x4_t *)(v26 + 16 * v17)));
        v27.i32[3] = 0;
        *(float32x4_t *)(*a9 + 16 * v17) = vsubq_f32(v40, vmulq_n_f32(v41, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27))));
      }
      v17 = v18;
      v16 = *a8;
      ++v18;
    }
    while (v17 < (a8[1] - *a8) >> 4);
  }
  v32 = *a6;
  if (*a6)
  {
    v33 = 0;
    do
    {
      if ((inited & 1) != 0)
      {
        inited = cv3d::cv::gess::internal::OptimizeOrientationsRoSy4Extrinsic(a1, a7, a8);
        v32 = *a6;
      }
      else
      {
        inited = 0;
      }
      ++v33;
    }
    while (v33 < v32);
    if (v32)
    {
      for (i = 0; i < v32; ++i)
      {
        if ((inited & 1) != 0)
        {
          inited = cv3d::cv::gess::internal::OptimizePositionsRoSy4Extrinsic(a1, a7, a8, a9, *a5);
          v32 = *a6;
        }
        else
        {
          inited = 0;
        }
      }
    }
  }
  return inited & 1;
}

uint64_t cv3d::cv::gess::alg::TriMesh2QuadMesh(uint64_t a1, cv3d::cv::gess::mesh::QuadMesh *a2, std::string *__str, uint64_t a4, unsigned __int8 a5)
{
  float v10;
  uint64_t inited;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  float v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  double v25;
  unsigned int v26;
  uint64_t v27;
  double v28;
  unsigned int *v29;
  double *v30;
  double v31;
  _DWORD *v32;
  unint64_t v33;
  BOOL v34;
  double v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  _DWORD *v43;
  _OWORD *v44;
  _BYTE *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  _OWORD *v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  int i;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int *v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  double v74;
  int v75;
  std::chrono::system_clock::time_point v76;
  std::chrono::system_clock::time_point v77;
  std::chrono::system_clock::time_point v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  void *v87;
  std::chrono::system_clock::time_point v88;
  std::chrono::system_clock::time_point v89;
  std::chrono::system_clock::time_point v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  std::chrono::system_clock::time_point v94;
  int v95;
  std::chrono::system_clock::time_point v96;
  std::chrono::system_clock::time_point v97;
  int v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t j;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  std::chrono::system_clock::time_point v112;
  std::chrono::system_clock::time_point v113;
  cv3d::cv::gess::mesh::PolyMesh *v114;
  cv3d::cv::gess::mesh::PolyMesh *v115;
  std::chrono::system_clock::time_point v116;
  std::chrono::system_clock::time_point v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  std::string *v123;
  int v124;
  void *__p;
  __int128 *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  uint64_t v130;
  void *v131;
  void *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  uint64_t v139;
  void *v140;
  _BYTE *v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t v144;
  void **v145;
  void **v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  _OWORD v150[2];
  __int128 v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  _QWORD *v155;
  _BYTE *v156;
  double *v157;
  double *v158;
  float v159;
  unsigned int v160;
  void *v161[4];
  uint64_t *v162[3];
  uint64_t *v163[6];
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;

  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 104))
    return 0;
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    return 0;
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 128))
    return 0;
  v10 = std::stof(__str, 0);
  if (v10 < 0.00000001)
    return 0;
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)v161);
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)v161, (void **)a1);
  v123 = __str;
  v160 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v153, "h:is_quadmesh_diagonal");
  LOBYTE(v157) = 0;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>(v162, (uint64_t)&v157, (unsigned __int8 *)&v153);
  v160 = v13;
  if (SHIBYTE(v154) < 0)
    operator delete((void *)v153);
  if (v13 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v153, "h:is_quadmesh_diagonal");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)v161, &v160, &v153);
    if (SHIBYTE(v154) < 0)
      operator delete((void *)v153);
  }
  v122 = a5;
  v159 = 0.0;
  if (__str[1].__r_.__value_.__s.__data_[2])
  {
    v14 = 1;
    inited = 1;
  }
  else
  {
    v119 = (uint64_t)a2;
    v120 = a4;
    v16 = v164;
    v15 = v165;
    v17 = cv3d::cv::gess::mesh::TriMesh::CalculateSurfaceArea((cv3d::cv::gess::mesh::TriMesh *)v161);
    v18 = (float)(v10 * (float)(unint64_t)((v15 - v16) >> 2));
    if (v18 <= 1)
      v18 = 1;
    v19 = sqrtf(v17 / (float)v18);
    v159 = v19;
    v20 = (double *)v120;
    if (a5)
      *(float *)(v120 + 40) = v19;
    if (v123[1].__r_.__value_.__s.__data_[1])
    {
      std::vector<double>::vector(&v157, 0xCCCCCCCCCCCCCCCDLL * ((v167 - v166) >> 2));
      LOBYTE(v153) = 0;
      std::vector<BOOL>::vector(&v155, 0xCCCCCCCCCCCCCCCDLL * ((v167 - v166) >> 2), (unsigned __int8 *)&v153);
      v22 = v166;
      v21 = v167;
      v23 = v155;
      if (v167 == v166)
      {
        v33 = 0xCCCCCCCCCCCCCCCDLL * ((v167 - v166) >> 2);
        v25 = 0.0;
        v27 = v167;
      }
      else
      {
        v24 = 0;
        v25 = 0.0;
        v26 = 1;
        v27 = v167;
        do
        {
          if ((v23[v24 >> 6] & (1 << v24)) == 0)
          {
            LODWORD(v153) = v26 - 1;
            v28 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength((uint64_t)v161, (unsigned int *)&v153);
            v157[v24] = v28;
            LODWORD(v153) = v26 - 1;
            v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v164, (unsigned int *)&v153);
            v30 = v157;
            v157[*v29] = v28;
            v31 = v30[v24];
            v155[v24 >> 6] |= 1 << v24;
            LODWORD(v153) = v26 - 1;
            v32 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v164, (unsigned int *)&v153);
            v25 = v25 + v31;
            v23 = v155;
            *(_QWORD *)((char *)v155 + (((unint64_t)*v32 >> 3) & 0x1FFFFFF8)) |= 1 << *v32;
            v22 = v166;
            v27 = v167;
          }
          v24 = v26;
          v33 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v22) >> 2);
          v34 = v33 > v26++;
        }
        while (v34);
        v21 = v22;
      }
      v20 = (double *)v120;
      if (v156)
      {
        *(_QWORD *)&v153 = v23;
        DWORD2(v153) = 0;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v153, (unint64_t)v156);
        v21 = v166;
        v27 = v167;
      }
      if ((v25 + v25) / (double)v33 + (v25 + v25) / (double)v33 >= v159 * 0.5)
        v35 = v159 * 0.5;
      else
        v35 = (v25 + v25) / (double)v33 + (v25 + v25) / (double)v33;
      v153 = 0uLL;
      v154 = 0;
      if (v27 != v21)
      {
        v36 = 0;
        v37 = v155;
        v38 = 1;
        do
        {
          v39 = v36 >> 6;
          v40 = 1 << v36;
          v41 = v37[v36 >> 6];
          if ((v41 & (1 << v36)) == 0)
          {
            v42 = v157[v36];
            if (v42 > v35)
            {
              LODWORD(v151) = v38 - 1;
              *((double *)&v151 + 1) = v42;
              std::priority_queue<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::vector<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::allocator<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>::push((uint64_t *)&v153, &v151);
              v37 = v155;
              v41 = v155[v39];
            }
            v37[v39] = v41 | v40;
            LODWORD(v151) = v38 - 1;
            v43 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v164, (unsigned int *)&v151);
            v37 = v155;
            *(_QWORD *)((char *)v155 + (((unint64_t)*v43 >> 3) & 0x1FFFFFF8)) |= 1 << *v43;
            v21 = v166;
            v27 = v167;
          }
          v36 = v38;
          v34 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v21) >> 2) > v38++;
        }
        while (v34);
        v45 = (_BYTE *)*((_QWORD *)&v153 + 1);
        v44 = (_OWORD *)v153;
        if ((_QWORD)v153 != *((_QWORD *)&v153 + 1))
        {
          v46 = "adj_hhs.size() == 3";
          do
          {
            v150[0] = *v44;
            v47 = v45 - (_BYTE *)v44;
            if (v45 - (_BYTE *)v44 >= 17)
            {
              v48 = 0;
              v49 = v47 >> 4;
              v151 = *v44;
              v50 = (unint64_t)((v47 >> 4) - 2) >> 1;
              v51 = v44;
              do
              {
                v52 = v51;
                v51 += v48 + 1;
                v53 = 2 * v48;
                v48 = (2 * v48) | 1;
                v54 = v53 + 2;
                if (v54 < v49 && *((double *)v51 + 1) < *((double *)v51 + 3))
                {
                  ++v51;
                  v48 = v54;
                }
                *v52 = *v51;
              }
              while (v48 <= v50);
              v55 = v45 - 16;
              if (v51 == (_OWORD *)(v45 - 16))
              {
                *v51 = v151;
              }
              else
              {
                *v51 = *v55;
                *v55 = v151;
                std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength> &,std::__wrap_iter<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength*>>((uint64_t)v44, (uint64_t)(v51 + 1), v51 + 1 - v44);
              }
              v45 = (_BYTE *)*((_QWORD *)&v153 + 1);
            }
            v45 -= 16;
            *((_QWORD *)&v153 + 1) = v45;
            LODWORD(v145) = -1;
            if (cv3d::cv::gess::mesh::TriMesh::SplitEdge((uint64_t)v161, (unsigned int *)v150, (unsigned int *)&v145, 0))
            {
              if ((_DWORD)v145 == -1)
                __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 201, "added_vh.Valid()");
              v151 = 0uLL;
              v152 = 0;
              cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(&v148, &v164, &v145);
              for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v148);
                    i != -1;
                    i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v148))
              {
                v57 = *((_QWORD *)&v151 + 1);
                if (*((_QWORD *)&v151 + 1) >= (unint64_t)v152)
                {
                  v59 = (uint64_t)(*((_QWORD *)&v151 + 1) - v151) >> 2;
                  if ((unint64_t)(v59 + 1) >> 62)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  v60 = (uint64_t)&v152[-v151] >> 1;
                  if (v60 <= v59 + 1)
                    v60 = v59 + 1;
                  if ((unint64_t)&v152[-v151] >= 0x7FFFFFFFFFFFFFFCLL)
                    v61 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v61 = v60;
                  if (v61)
                    v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v152, v61);
                  else
                    v62 = 0;
                  v63 = &v62[4 * v59];
                  *(_DWORD *)v63 = i;
                  v58 = v63 + 4;
                  v64 = (char *)*((_QWORD *)&v151 + 1);
                  v65 = (char *)v151;
                  if (*((_QWORD *)&v151 + 1) != (_QWORD)v151)
                  {
                    do
                    {
                      v66 = *((_DWORD *)v64 - 1);
                      v64 -= 4;
                      *((_DWORD *)v63 - 1) = v66;
                      v63 -= 4;
                    }
                    while (v64 != v65);
                    v64 = (char *)v151;
                  }
                  *(_QWORD *)&v151 = v63;
                  *((_QWORD *)&v151 + 1) = v58;
                  v152 = &v62[4 * v61];
                  if (v64)
                    operator delete(v64);
                }
                else
                {
                  **((_DWORD **)&v151 + 1) = i;
                  v58 = (_DWORD *)(v57 + 4);
                }
                *((_QWORD *)&v151 + 1) = v58;
              }
              v67 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v161, v170, v150[0]);
              if ((*v67 & v68) != 0
                || (v69 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)&v164, (unsigned int *)v150),
                    v70 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v161, v170, *v69),
                    (*v70 & v71) != 0))
              {
                v72 = (unsigned int *)*((_QWORD *)&v151 + 1);
                v73 = (unsigned int *)v151;
                if (*((_QWORD *)&v151 + 1) - (_QWORD)v151 != 12)
                {
                  v75 = 211;
LABEL_180:
                  __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", v75, v46);
                }
              }
              else
              {
                v72 = (unsigned int *)*((_QWORD *)&v151 + 1);
                v73 = (unsigned int *)v151;
                if (*((_QWORD *)&v151 + 1) - (_QWORD)v151 != 16)
                {
                  v75 = 213;
                  v46 = "adj_hhs.size() == 4";
                  goto LABEL_180;
                }
              }
              if (v73 != v72)
              {
                do
                {
                  v74 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength((uint64_t)v161, v73);
                  if (v35 < v74)
                  {
                    LODWORD(v148) = *v73;
                    *((double *)&v148 + 1) = v74;
                    std::priority_queue<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::vector<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::allocator<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>::push((uint64_t *)&v153, &v148);
                  }
                  ++v73;
                }
                while (v73 != v72);
                v72 = (unsigned int *)v151;
              }
              if (v72)
              {
                *((_QWORD *)&v151 + 1) = v72;
                operator delete(v72);
              }
              v45 = (_BYTE *)*((_QWORD *)&v153 + 1);
            }
            v44 = (_OWORD *)v153;
          }
          while ((_BYTE *)v153 != v45);
        }
        v20 = (double *)v120;
        if (v45)
        {
          *((_QWORD *)&v153 + 1) = v45;
          operator delete(v45);
        }
      }
      if (v155)
        operator delete(v155);
      if (v157)
      {
        v158 = v157;
        operator delete(v157);
      }
    }
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v153, (v165 - v164) >> 2);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v157, (v165 - v164) >> 2);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v155, (v165 - v164) >> 2);
    std::vector<float>::vector(&v151, (v165 - v164) >> 2);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v150, (v169 - v168) >> 2);
    cv3d::cv::gess::internal::ComputeSmoothNormals(v161, &v155, v150);
    cv3d::cv::gess::internal::ComputeVertexAreas((uint64_t)v161, &v151);
    v76.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v123[1].__r_.__value_.__s.__data_[0])
    {
      v77.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v148 = 0uLL;
      v149 = 0;
      v146 = 0;
      v147 = 0;
      v143 = 0uLL;
      v144 = 0;
      v145 = 0;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v142 = 0;
      v137 = 0;
      v138 = 0;
      cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(v161, (uint64_t *)&v155, (uint64_t *)&v151, (char **)&v148, (uint64_t *)&v145, (uint64_t *)&v143, (uint64_t *)&v140, (uint64_t *)&v137);
      if (0xAAAAAAAAAAAAAAABLL * ((v141 - (_BYTE *)v140) >> 3) != (uint64_t)(*((_QWORD *)&v148 + 1) - v148) >> 4)
        __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 256, "hierarchy_mesh_list.size() == fine_to_coarse_vertex_mappings.size()");
      v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (a5)
        *v20 = (double)(v78.__d_.__rep_ - v77.__d_.__rep_) / 1000000.0;
      LOBYTE(v124) = 6;
      v134 = 0;
      v135 = 0;
      v136 = 0;
      v131 = 0;
      v132 = 0;
      v133 = 0;
      v128 = 0;
      v129 = 0;
      v130 = 0;
      __p = 0;
      v126 = 0;
      v127 = 0;
      v79 = *((_QWORD *)&v148 + 1);
      v80 = *((_QWORD *)&v148 + 1) - v148;
      if (*((_QWORD *)&v148 + 1) == (_QWORD)v148)
      {
        v87 = 0;
      }
      else
      {
        v81 = 0;
        v82 = v80 >> 4;
        v83 = 1;
        v79 = v148;
        do
        {
          v84 = v82 + ~v81;
          v85 = *(_QWORD *)(v79 + 16 * v84);
          v86 = (uint64_t *)&v145[3 * v84];
          if (v83 == 1)
          {
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&v128, (uint64_t)(*(_QWORD *)(v85 + 112) - *(_QWORD *)(v85 + 104)) >> 2);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&__p, (uint64_t)(*(_QWORD *)(v85 + 112) - *(_QWORD *)(v85 + 104)) >> 2);
            cv3d::cv::gess::alg::ComputeFieldsFromRandomInitialValue(v85, &v159, &v124, v86, (uint64_t *)&__p, &v128);
          }
          else
          {
            if ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v79 + 16 * (v82 - v81)) + 112)
                         - *(_QWORD *)(*(_QWORD *)(v79 + 16 * (v82 - v81)) + 104)) >> 2 != (v129 - (_BYTE *)v128) >> 4)
              __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 288, "hierarchy_mesh_list[hierarchy_mesh_list.size() - level_i]->VSize() == cur_field_positions.size()");
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v131, (__int128 *)__p, v126, ((char *)v126 - (_BYTE *)__p) >> 4);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v134, (__int128 *)v128, (__int128 *)v129, (v129 - (_BYTE *)v128) >> 4);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&__p, (uint64_t)(*(_QWORD *)(v85 + 112) - *(_QWORD *)(v85 + 104)) >> 2);
            std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&v128, (uint64_t)(*(_QWORD *)(v85 + 112) - *(_QWORD *)(v85 + 104)) >> 2);
            cv3d::cv::gess::alg::ComputeFieldsFromCoarserHierarchy(v85, (_QWORD *)v140 + 3 * (((uint64_t)(*((_QWORD *)&v148 + 1) - v148) >> 4) - v81), &v131, &v134, &v159, &v124, v86, (uint64_t *)&__p, &v128);
          }
          v81 = v83;
          v79 = v148;
          v82 = (uint64_t)(*((_QWORD *)&v148 + 1) - v148) >> 4;
          v34 = v82 > v83++;
        }
        while (v34);
        v87 = v128;
        v80 = (uint64_t)v129;
        v20 = (double *)v120;
      }
      if ((uint64_t)(*(_QWORD *)(*(_QWORD *)v79 + 112) - *(_QWORD *)(*(_QWORD *)v79 + 104)) >> 2 != (v80 - (uint64_t)v87) >> 4)
        __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 308, "hierarchy_mesh_list[0]->VSize() == cur_field_positions.size()");
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v131, (__int128 *)__p, v126, ((char *)v126 - (_BYTE *)__p) >> 4);
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(&v134, (__int128 *)v128, (__int128 *)v129, (v129 - (_BYTE *)v128) >> 4);
      cv3d::cv::gess::alg::ComputeFieldsFromCoarserHierarchy((uint64_t)v161, v140, &v131, &v134, &v159, &v124, (uint64_t *)&v155, (uint64_t *)&v157, &v153);
      if (__p)
      {
        v126 = (__int128 *)__p;
        operator delete(__p);
      }
      if (v128)
      {
        v129 = (char *)v128;
        operator delete(v128);
      }
      if (v131)
      {
        v132 = v131;
        operator delete(v131);
      }
      if (v134)
      {
        v135 = v134;
        operator delete(v134);
      }
      v134 = &v137;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
      v137 = &v140;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v137);
      v140 = &v143;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v140);
      v143.i64[0] = (uint64_t)&v145;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v143);
      v145 = (void **)&v148;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v145);
    }
    else
    {
      LOBYTE(v148) = 10;
      cv3d::cv::gess::alg::ComputeFieldsFromRandomInitialValue((uint64_t)v161, &v159, &v148, (uint64_t *)&v155, (uint64_t *)&v157, &v153);
    }
    v88.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v122)
      v20[1] = (double)(v88.__d_.__rep_ - v76.__d_.__rep_) / 1000000.0;
    if ((v156 - (_BYTE *)v155) >> 4 != (v165 - v164) >> 2)
      __assert_rtn("TriMesh2QuadMesh", "QuadMeshConvert.cpp", 333, "v_normals.size() == mesh.VSize()");
    v90.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v167 != v166)
    {
      v91 = 0;
      v92 = 1;
      do
      {
        LODWORD(v148) = v160;
        v93 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v162, (unsigned int *)&v148, v89.__d_.__rep_);
        if (*(_QWORD *)(v93 + 48) <= v91)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(_QWORD *)(*(_QWORD *)(v93 + 40) + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v91);
        v91 = v92;
        v34 = 0xCCCCCCCCCCCCCCCDLL * ((v167 - v166) >> 2) > v92++;
      }
      while (v34);
    }
    LODWORD(v128) = 0;
    v124 = 0;
    LODWORD(__p) = 0;
    v148 = 0uLL;
    v149 = 0;
    v146 = 0;
    v147 = 0;
    v143 = 0uLL;
    v144 = 0;
    v145 = 0;
    cv3d::cv::gess::internal::ClassifyAndCollapseEdges((uint64_t)v161, (uint64_t *)&v155, (uint64_t *)&v157, (uint64_t *)&v153, &v159, &v160, (uint64_t *)&v148, &v145, &v143, &v128, &__p);
    v94.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    a4 = v120;
    if (v122)
    {
      *(double *)(v120 + 16) = (double)(v94.__d_.__rep_ - v90.__d_.__rep_) / 1000000.0;
      v95 = (int)__p;
      *(_DWORD *)(v120 + 44) = (_DWORD)v128;
      *(_DWORD *)(v120 + 48) = v95;
    }
    v96.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    cv3d::cv::gess::internal::ExtractQuadFaces((uint64_t *)&v148, (uint64_t)&v143, (uint64_t)&v145, (unsigned int *)&v140, (uint64_t)&v159, &v124);
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    cv3d::cv::gess::internal::CollectIrregularFaces((uint64_t *)&v140, (uint64_t *)&v137, (uint64_t *)&v134);
    cv3d::cv::gess::internal::ReorderIrregularFaceIndices((uint64_t *)&v143, (std::vector<unsigned int>::pointer **)&v134);
    inited = cv3d::cv::gess::mesh::QuadMesh::InitVF(v119, (uint64_t *)&v143, (uint64_t *)&v137, (uint64_t *)&v134);
    v97.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v122)
    {
      *(double *)(v120 + 24) = (double)(v97.__d_.__rep_ - v96.__d_.__rep_) / 1000000.0;
      *(_DWORD *)(v120 + 52) = v124;
    }
    v131 = &v134;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v131);
    a2 = (cv3d::cv::gess::mesh::QuadMesh *)v119;
    if (v137)
    {
      v138 = v137;
      operator delete(v137);
    }
    if (v140)
    {
      v141 = v140;
      operator delete(v140);
    }
    if (v143.i64[0])
    {
      v143.i64[1] = v143.i64[0];
      operator delete((void *)v143.i64[0]);
    }
    if (v145)
    {
      v146 = v145;
      operator delete(v145);
    }
    v145 = (void **)&v148;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v145);
    if (*(_QWORD *)&v150[0])
    {
      *((_QWORD *)&v150[0] + 1) = *(_QWORD *)&v150[0];
      operator delete(*(void **)&v150[0]);
    }
    if ((_QWORD)v151)
    {
      *((_QWORD *)&v151 + 1) = v151;
      operator delete((void *)v151);
    }
    if (v155)
    {
      v156 = v155;
      operator delete(v155);
    }
    if (v157)
    {
      v158 = v157;
      operator delete(v157);
    }
    if ((_QWORD)v153)
    {
      *((_QWORD *)&v153 + 1) = v153;
      operator delete((void *)v153);
    }
    v14 = v123[1].__r_.__value_.__s.__data_[2];
    if (!v123[1].__r_.__value_.__s.__data_[2])
      goto LABEL_168;
  }
  if (v123[1].__r_.__value_.__s.__data_[3])
  {
    v121 = a4;
    v117.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    std::string::basic_string[abi:ne180100]<0>(&v153, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v158) = 0;
    v157 = 0;
    v98 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v163, (uint64_t)&v157, (unsigned __int8 *)&v153);
    if (SHIBYTE(v154) < 0)
      operator delete((void *)v153);
    LODWORD(v157) = -1;
    std::string::basic_string[abi:ne180100]<0>(&v153, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)v161, &v157, (unsigned __int8 *)&v153);
    v118 = inited;
    if (SHIBYTE(v154) < 0)
      operator delete((void *)v153);
    if (v98 != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v153, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
      v100 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)v161, &v157, (unsigned __int8 *)&v153);
      if (SHIBYTE(v154) < 0)
        operator delete((void *)v153);
      if (!v100)
      {
        std::string::basic_string[abi:ne180100]<0>(&v153, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
        cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<unsigned int>>((uint64_t)v161, &v157, &v153);
        if (SHIBYTE(v154) < 0)
          operator delete((void *)v153);
      }
      if (v169 != v168)
      {
        v101 = 0;
        v102 = 0;
        do
        {
          LODWORD(v153) = (_DWORD)v157;
          v103 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)v163, (unsigned int *)&v153, v99);
          v104 = *(_QWORD *)(v103 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v103 + 48) - v104) >> 3) <= v101)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          std::vector<int>::resize((std::vector<unsigned int> *)(v104 + 24 * v101), 3uLL);
          for (j = 0; j != 12; j += 4)
          {
            LODWORD(v153) = v98;
            v106 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v163, (unsigned int *)&v153, v99);
            v108 = *(_QWORD *)(v106 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v106 + 48) - v108) >> 2) <= v101
              || (v109 = *(_DWORD *)(v108 + 12 * v102 + j),
                  LODWORD(v153) = (_DWORD)v157,
                  v110 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)v163, (unsigned int *)&v153, v107), v111 = *(_QWORD *)(v110 + 40), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v110 + 48) - v111) >> 3) <= v101))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_DWORD *)(*(_QWORD *)(v111 + 24 * v101) + j) = v109;
          }
          v101 = ++v102;
        }
        while (v102 < (unint64_t)((v169 - v168) >> 2));
      }
    }
    cv3d::cv::gess::internal::ExtractQuadFacesByDiagonal((uint64_t)v161, &v160);
    v112.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    a4 = v121;
    inited = v118;
    if (v122)
      *(double *)(v121 + 24) = (double)(v112.__d_.__rep_ - v117.__d_.__rep_) / 1000000.0;
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)v161);
    cv3d::cv::gess::mesh::QuadMesh::CopyFrom(a2, (const cv3d::cv::gess::mesh::TriMesh *)v161);
    v14 = v123[1].__r_.__value_.__s.__data_[2];
  }
LABEL_168:
  if (!v14)
  {
    v113.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v157) = -1;
    std::string::basic_string[abi:ne180100]<0>(&v153, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)a2, &v157, (unsigned __int8 *)&v153);
    if (SHIBYTE(v154) < 0)
      operator delete((void *)v153);
    cv3d::cv::gess::internal::FinalFaceMergingByDiagonal((uint64_t)a2, &v159, (int *)&v157);
    cv3d::cv::gess::alg::FixNonManifoldVertices(a2, v114);
    cv3d::cv::gess::alg::RemoveDanglingElements(a2, v115);
    v116.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v122)
      *(double *)(a4 + 32) = (double)(v116.__d_.__rep_ - v113.__d_.__rep_) / 1000000.0;
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v161);
  return inited;
}

void sub_23C5D79E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  _QWORD *v66;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;

  v68 = (void *)v66[12];
  if (v68)
  {
    v66[13] = v68;
    operator delete(v68);
  }
  v69 = (void *)v66[16];
  if (v69)
  {
    v66[17] = v69;
    operator delete(v69);
  }
  v70 = (void *)v66[24];
  if (v70)
  {
    v66[25] = v70;
    operator delete(v70);
  }
  v71 = (void *)v66[27];
  if (v71)
  {
    v66[28] = v71;
    operator delete(v71);
  }
  v72 = (void *)v66[20];
  if (v72)
  {
    v66[21] = v72;
    operator delete(v72);
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a66);
  _Unwind_Resume(a1);
}

float cv3d::cv::gess::mesh::TriMesh::CalculateSurfaceArea(cv3d::cv::gess::mesh::TriMesh *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v8;

  v1 = *((_QWORD *)this + 20) - *((_QWORD *)this + 19);
  if (!v1)
    return 0.0;
  v3 = 0;
  v4 = v1 >> 2;
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  v6 = 0.0;
  do
  {
    v8 = v3;
    v6 = v6 + cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)this, &v8);
    ++v3;
  }
  while (v5 != v3);
  return v6;
}

uint64_t std::priority_queue<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::vector<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength,std::allocator<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength>>::push(uint64_t *a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;

  v5 = (_OWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_OWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 16);
    if (v5 != (_OWORD *)v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *(v5 - 1);
        v13 -= 16;
        --v5;
      }
      while (v5 != (_OWORD *)v7);
      v5 = (_OWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  return std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength> &,std::__wrap_iter<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength*>>(*a1, v6, (v6 - *a1) >> 4);
}

uint64_t cv3d::cv::gess::alg::QuadMesh2TriMesh(void **this, const cv3d::cv::gess::mesh::QuadMesh *a2, cv3d::cv::gess::mesh::TriMesh *a3)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int *v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v26;
  unsigned int v27;
  __int128 __p;
  char *v29;
  int v30;

  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)a2, this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "h:is_quadmesh_diagonal");
  LOBYTE(v27) = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)a2 + 4, (uint64_t)&v27, (unsigned __int8 *)&__p);
  v30 = v5;
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__p);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "h:is_quadmesh_diagonal");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)a2, &v30, &__p);
    if (SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else if (*((_QWORD *)a2 + 17) != *((_QWORD *)a2 + 16))
  {
    v6 = 0;
    v7 = 1;
    do
    {
      LODWORD(__p) = v30;
      v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)a2 + 4, (unsigned int *)&__p, v4);
      if (*(_QWORD *)(v8 + 48) <= v6)
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      *(_QWORD *)(*(_QWORD *)(v8 + 40) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v6);
      v6 = v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2) > v7++);
  }
  __p = 0uLL;
  v29 = 0;
  if (*((_QWORD *)a2 + 20) != *((_QWORD *)a2 + 19))
  {
    LODWORD(v10) = 0;
    do
    {
      v27 = v10;
      *((_QWORD *)&__p + 1) = __p;
      v11 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)a2 + 104, &v27);
      v26 = v11;
      do
      {
        v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)a2 + 104, &v26) + 8);
        v26 = v12;
        v13 = *((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v29)
        {
          v15 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v16 = (uint64_t)&v29[-__p] >> 1;
          if (v16 <= v15 + 1)
            v16 = v15 + 1;
          if ((unint64_t)&v29[-__p] >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v29, v17);
            v12 = v26;
          }
          else
          {
            v18 = 0;
          }
          v19 = (unsigned int *)&v18[4 * v15];
          *v19 = v12;
          v14 = v19 + 1;
          v20 = (char *)*((_QWORD *)&__p + 1);
          v21 = (char *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
            {
              v22 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *--v19 = v22;
            }
            while (v20 != v21);
            v20 = (char *)__p;
          }
          *(_QWORD *)&__p = v19;
          *((_QWORD *)&__p + 1) = v14;
          v29 = &v18[4 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          **((_DWORD **)&__p + 1) = v12;
          v14 = (_DWORD *)(v13 + 4);
        }
        *((_QWORD *)&__p + 1) = v14;
      }
      while (v26 != v11);
      v23 = __p;
      v24 = (unint64_t)v14 - __p;
      if ((unint64_t)((unint64_t)v14 - __p) >= 0x10)
      {
        if (v24 >= 0x15)
          __assert_rtn("QuadMesh2TriMesh", "QuadMeshConvert.cpp", 475, "fh_hhs.size() <= 5");
        if (v24 == 16)
        {
          cv3d::cv::gess::internal::Quad2Triangles((uint64_t)a2, &v27, (unsigned int **)&__p, v30);
          v14 = (_DWORD *)*((_QWORD *)&__p + 1);
          v23 = __p;
        }
        if ((_DWORD *)((char *)v14 - v23) == (_DWORD *)20)
          cv3d::cv::gess::internal::Pentagon2Triangles((uint64_t)a2, &v27, (unsigned int **)&__p, v30);
      }
      v10 = (v10 + 1);
    }
    while (v10 < (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return 1;
}

void sub_23C5D8144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeDifferenceBetweenQuadMeshAndTriMesh(cv3d::cv::gess::alg *this, const cv3d::cv::gess::mesh::QuadMesh *a2, const cv3d::cv::gess::mesh::TriMesh *a3, float *a4)
{
  cv3d::cv::gess::mesh::TriMesh *v7;
  const cv3d::cv::gess::alg::ProjectionOptions *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int HEdge;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29[2];
  unsigned int v30;
  int v31;
  char *v32;
  uint64_t v33[21];
  __int32 v34;
  void *v35;
  uint64_t v36[12];
  uint64_t v37;
  uint64_t v38;
  __int32 v39;
  unsigned int v40;

  if (*((_QWORD *)this + 14) == *((_QWORD *)this + 13) || *((_QWORD *)a2 + 14) == *((_QWORD *)a2 + 13))
    return 0;
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v35);
  cv3d::cv::gess::alg::QuadMesh2TriMesh((void **)this, (const cv3d::cv::gess::mesh::QuadMesh *)&v35, v7);
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v32);
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom(&v32, &v35);
  cv3d::cv::gess::alg::ProjectionOptions::ProjectionOptions(&v31);
  v31 = 1065353216;
  v9 = cv3d::cv::gess::alg::Mesh2MeshProjection((cv3d::cv::gess::alg *)&v32, a2, (const cv3d::cv::gess::mesh::TriMesh *)&v31, v8);
  if (v38 == v37)
  {
    v12 = 0.0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0.0;
    do
    {
      v29[0].i32[0] = v34;
      v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, (unsigned int *)v29);
      v14 = *(_QWORD *)(v13 + 40);
      if (v10 >= (*(_QWORD *)(v13 + 48) - v14) >> 4
        || (v29[0].i32[0] = v39,
            v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v36, (unsigned int *)v29), v16 = *(_QWORD *)(v15 + 40), v10 >= (*(_QWORD *)(v15 + 48) - v16) >> 4))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      v27 = *(float32x4_t *)(v14 + 16 * v10);
      v28 = *(float32x4_t *)(v16 + 16 * v10);
      v30 = v11;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v29, &v37, &v30);
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v29);
      v18 = vsubq_f32(v27, v28);
      v19 = vmulq_f32(v18, v18);
      v19.i32[3] = 0;
      v20 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19)));
      v21 = 0.0;
      while (1)
      {
        v30 = HEdge;
        if (HEdge == -1)
          break;
        v22 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)&v35, v40, HEdge);
        if ((*v22 & v23) == 0)
        {
          v24 = cv3d::cv::gess::mesh::Topology::h((uint64_t)&v37, &v30);
          v21 = v21 + (float)(cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)&v35, (unsigned int *)(v24 + 16)) / 3.0);
        }
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v29);
      }
      v12 = v12 + (float)(v20 * v21);
      v10 = ++v11;
    }
    while (v11 < (unint64_t)((v38 - v37) >> 2));
  }
  cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox((cv3d::cv::gess::alg *)&v35, v29);
  v25 = vsubq_f32(v29[1], v29[0]);
  v25.f32[0] = v12 / vmulq_laneq_f32(vmulq_lane_f32(v25, *(float32x2_t *)v25.f32, 1), v25, 2).f32[0];
  *(_DWORD *)a3 = v25.i32[0];
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v32);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v35);
  return v9;
}

void sub_23C5D83F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a19);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a42);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::CheckBakeOption(cv3d::cv::gess::alg *this, const cv3d::cv::gess::alg::ConfigBake *a2, cv3d::cv::gess::alg::ConfigBake *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  v5 = *(_OWORD *)this;
  v6 = *((_OWORD *)this + 1);
  v7 = *((_OWORD *)this + 2);
  *((_BYTE *)a2 + 48) = *((_BYTE *)this + 48);
  *((_OWORD *)a2 + 1) = v6;
  *((_OWORD *)a2 + 2) = v7;
  *(_OWORD *)a2 = v5;
  cv3d::cv::gess::alg::ConfigOutput::operator=((uint64_t)a2 + 56, (uint64_t)this + 56);
  if (a2 != this)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)a2 + 456, *((char **)this + 57), *((_QWORD *)this + 58), (uint64_t)(*((_QWORD *)this + 58) - *((_QWORD *)this + 57)) >> 3);
  std::string::operator=((std::string *)a2 + 20, (const std::string *)this + 20);
  *((_BYTE *)a2 + 504) = *((_BYTE *)this + 504);
  std::string::operator=((std::string *)((char *)a2 + 512), (const std::string *)((char *)this + 512));
  v8 = *((_DWORD *)this + 136);
  *((_QWORD *)a2 + 67) = *((_QWORD *)this + 67);
  *((_DWORD *)a2 + 136) = v8;
  *((_DWORD *)a2 + 15) = 1;
  return 1;
}

uint64_t cv3d::cv::gess::alg::TriModel2QuadModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  cv3d::cv::gess::alg::ConfigBake *v12;
  char *v13;
  std::chrono::system_clock::time_point v14;
  cv3d::cv::gess::mesh::TriMesh *v15;
  BOOL *v16;
  BOOL ObjFile;
  uint64_t v18;
  uint64_t v19;
  std::chrono::system_clock::time_point v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  cv3d::cv::gess::mesh::PolyMesh *v43;
  int v44;
  int v45;
  uint64_t v46;
  cv3d::cv::gess::mesh::TriMesh *v47;
  cv3d::cv::gess::mesh::PolyMesh *v48;
  int v49;
  cv3d::cv::gess::mesh::PolyMesh *v50;
  BOOL *v51;
  cv3d::cv::gess::mesh::PolyMesh *v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  cv3d::cv::gess::mesh::PolyMesh *v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v95;
  std::__shared_weak_count *v96;
  char v97;
  char v98;
  uint64_t v99;
  int v100;
  int data;
  cv3d::cv::gess::mesh::PolyMesh *v102;
  _BOOL4 v103;
  _QWORD *v104;
  uint64_t v105;
  cv3d::cv::gess::mesh::PolyMesh *v106;
  BOOL v107;
  uint64_t v108;
  BOOL v109;
  cv3d::cv::gess::mesh::PolyMesh *v110;
  _QWORD *v111;
  uint64_t **v112;
  uint64_t v113;
  unint64_t k;
  uint64_t v115;
  __int128 *v116;
  __int128 v117;
  uint64_t **v118;
  _BOOL4 v119;
  cv3d::cv::gess::mesh::PolyMesh *v120;
  uint64_t *v121;
  cv3d::cv::gess::alg::BakeCallbackBundle *v122;
  uint64_t v123;
  int v124;
  cv3d::cv::gess::mesh::PolyMesh *v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t **v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t **v142;
  uint64_t **v143;
  uint64_t **v144;
  uint64_t **v145;
  cv3d::cv::gess::io::SaveMtlOption *v146;
  int v147;
  unint64_t v148;
  uint64_t v149;
  __int128 *v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  char *v154;
  char v155;
  char v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _BOOL4 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  std::string v169;
  std::string v170;
  std::string v171;
  int v172;
  std::__fs::filesystem::path v173;
  std::__fs::filesystem::path v174;
  std::string pn;
  std::__fs::filesystem::path __replacement;
  void *v177;
  uint64_t v178;
  int v179;
  char v180;
  _QWORD *v181;
  uint64_t *v182[5];
  std::string v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  std::__shared_weak_count *v189;
  std::string v190;
  int v191;
  cv3d::cv::gess::alg *v192;
  std::__shared_weak_count *v193;
  cv3d::cv::gess::mesh::PolyMesh *v194;
  std::__shared_weak_count *v195;
  _QWORD *v196;
  std::__shared_weak_count *v197;
  cv3d::cv::gess::mesh::PolyMesh *v198;
  std::__shared_weak_count *v199;
  _BYTE v200[28];
  int v201;
  void *v202;
  char v203;
  char v204;
  char v205;
  char v206;
  const void *v207;
  void *v208;
  void *v209;
  void *v210;
  char v211;
  std::string __p;
  uint64_t v213;
  int v214;
  _BYTE v215[125];
  _BYTE v216[160];
  _BYTE __str[32];
  _BYTE v218[44];
  int v219;
  char v220;
  _BYTE *v221;
  uint64_t v222;
  int v223;
  char *v224;
  uint64_t v225;
  _BYTE v226[7];
  char v227;
  _BYTE *v228;
  _BYTE v229[24];
  _BYTE *v230;
  _BYTE v231[24];
  _BYTE *v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v231, a6);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v229, a6 + 32);
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v200);
  cv3d::cv::gess::alg::CheckBakeOption((cv3d::cv::gess::alg *)(a3 + 32), (const cv3d::cv::gess::alg::ConfigBake *)v200, v12);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v198);
  v167 = a6 + 32;
  v168 = a2;
  v13 = (char *)operator new(0x60uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_250D4ADF0;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((_QWORD *)v13 + 11) = 0;
  *((_QWORD *)v13 + 9) = v13 + 80;
  v196 = v13 + 24;
  v197 = (std::__shared_weak_count *)v13;
  v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  LOWORD(v177) = 1;
  BYTE2(v177) = 1;
  HIDWORD(v177) = 2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__str = *(_OWORD *)a1;
    *(_QWORD *)&__str[16] = *(_QWORD *)(a1 + 16);
  }
  ObjFile = cv3d::cv::gess::io::LoadObjFile((__int128 *)__str, (uint64_t)v198, (uint64_t)(v13 + 24), (uint64_t)&v177);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (!ObjFile && *((_QWORD *)v198 + 20) == *((_QWORD *)v198 + 19) && *((_QWORD *)v198 + 14) == *((_QWORD *)v198 + 13))
    goto LABEL_33;
  v18 = *((_QWORD *)v13 + 6);
  v19 = *((_QWORD *)v13 + 7);
  cv3d::cv::gess::alg::RepairEverything(v198, v15, v16);
  v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v21 = a5;
  if (a5)
    *(double *)(a4 + 64) = (double)(v20.__d_.__rep_ - v14.__d_.__rep_) / 1000000.0;
  v22 = *((_QWORD *)v13 + 6);
  if (v22 != *((_QWORD *)v13 + 7))
  {
    v23 = *(_QWORD *)(v22 + 8);
    v24 = *(std::__shared_weak_count **)(v22 + 16);
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v23)
    {
      v28 = v196[3];
      v29 = *(_QWORD *)(v28 + 8);
      v30 = *(std::__shared_weak_count **)(v28 + 16);
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        LODWORD(v202) = *(_DWORD *)(v29 + 4);
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      else
      {
        LODWORD(v202) = *(_DWORD *)(v29 + 4);
      }
    }
  }
  if (v232)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_23C62207F);
    LODWORD(v190.__r_.__value_.__l.__data_) = 1092616192;
    if (!v232)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, std::string *, _BYTE *))(*(_QWORD *)v232 + 48))(v232, &v190, __str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
  if (v230 && ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v230 + 48))(v230) & 1) != 0)
  {
LABEL_33:
    v34 = 0;
    goto LABEL_98;
  }
  v35 = v196;
  v36 = *v196;
  v37 = v196[1];
  if (*v196 != v37)
  {
    while (1)
    {
      v38 = *(_QWORD *)(v36 + 32);
      if (!v38)
        break;
      v39 = v36 + 32;
      do
      {
        v40 = *(_DWORD *)(v38 + 28);
        v41 = v40 < 1;
        if (v40 >= 1)
          v42 = (uint64_t *)v38;
        else
          v42 = (uint64_t *)(v38 + 8);
        if (!v41)
          v39 = v38;
        v38 = *v42;
      }
      while (*v42);
      if (v39 == v36 + 32 || *(int *)(v39 + 28) >= 2)
        break;
      v36 += 48;
      if (v36 == v37)
        goto LABEL_48;
    }
  }
  v203 = 0;
  v205 = 0;
  v204 = 0;
LABEL_48:
  v43 = v198;
  std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v177 = 0;
  v178 = 0;
  v44 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)v43 + 1, (uint64_t)&v177, __str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if (v44 == -1)
    v45 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v198);
  else
    v45 = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v194);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v192);
  std::string::basic_string[abi:ne180100]<0>(&v190, "0.25");
  v191 = 257;
  std::string::operator=(&v190, (const std::string *)a3);
  LOWORD(v191) = *(_WORD *)(a3 + 24);
  if (v21)
    v46 = a4;
  else
    v46 = 0;
  cv3d::cv::gess::alg::TriMesh2QuadMesh((uint64_t)v198, v192, &v190, v46, v21 != 0);
  if (v232)
  {
    std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_23C62207F);
    LODWORD(v177) = 1109393408;
    if (!v232)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, void **, _BYTE *))(*(_QWORD *)v232 + 48))(v232, &v177, __str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
  }
  if (!v230 || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v230 + 48))(v230) & 1) == 0)
  {
    cv3d::cv::gess::alg::QuadMesh2TriMesh((void **)v192, v194, v47);
    v48 = v194;
    std::string::basic_string[abi:ne180100]<0>(__str, "h:is_quadmesh_diagonal");
    LOBYTE(v177) = 0;
    v49 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)v48 + 4, (uint64_t)&v177, __str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (v49 != -1)
    {
      v166 = v21;
      LODWORD(v183.__r_.__value_.__l.__data_) = -1;
      v50 = v194;
      std::string::basic_string[abi:ne180100]<0>(__str, "f:hedge_diagonal");
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t)v50, &v183, (__int128 *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__str, 3uLL);
      v163 = v45;
      v161 = v19;
      v162 = v18;
      v165 = a6;
      v52 = v194;
      if (*((_QWORD *)v194 + 20) != *((_QWORD *)v194 + 19))
      {
        v53 = 0;
        v54 = 0;
        do
        {
          LODWORD(v177) = v54;
          cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges((uint64_t)v52, (unsigned int *)&v177, __str);
          for (i = 0; i != 3; ++i)
          {
            LODWORD(v177) = v49;
            v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v194 + 4, (unsigned int *)&v177, (uint64_t)v51);
            v58 = *(unsigned int *)(*(_QWORD *)__str + 4 * i);
            if (*(_QWORD *)(v56 + 48) <= v58
              || (v59 = *(_QWORD *)(*(_QWORD *)(v56 + 40) + ((v58 >> 3) & 0x1FFFFFF8)),
                  LODWORD(v177) = v183.__r_.__value_.__l.__data_,
                  v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t *)v194 + 7, (unsigned int *)&v177, v57), v61 = *(_QWORD *)(v60 + 40), 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(v60 + 48) - v61) <= v53))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_BYTE *)(v61 + 3 * v54 + i) = (v59 & (1 << v58)) != 0;
          }
          v52 = v194;
          v53 = ++v54;
        }
        while (v54 < (unint64_t)((uint64_t)(*((_QWORD *)v194 + 20) - *((_QWORD *)v194 + 19)) >> 2));
      }
      LOBYTE(v185) = 0;
      cv3d::cv::gess::alg::FixNonManifoldEdges(v52, (cv3d::cv::gess::mesh::TriMesh *)&v185, v51);
      v62 = v194;
      if (*((_QWORD *)v194 + 20) == *((_QWORD *)v194 + 19))
      {
        v72 = *(void **)__str;
        if (!*(_QWORD *)__str)
          goto LABEL_128;
      }
      else
      {
        v63 = 0;
        v64 = 0;
        do
        {
          LODWORD(v177) = v64;
          cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges((uint64_t)v62, (unsigned int *)&v177, __str);
          for (j = 0; j != 3; ++j)
          {
            LODWORD(v177) = v183.__r_.__value_.__l.__data_;
            v67 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<BOOL>>((uint64_t *)v194 + 7, (unsigned int *)&v177, v65);
            v69 = *(_QWORD *)(v67 + 40);
            if (0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(v67 + 48) - v69) <= v63)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v70 = *(unsigned __int8 *)(v69 + 3 * v64 + j);
            LODWORD(v177) = v49;
            v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v194 + 4, (unsigned int *)&v177, v68);
            v72 = *(void **)__str;
            v73 = *(unsigned int *)(*(_QWORD *)__str + 4 * j);
            if (*(_QWORD *)(v71 + 48) <= v73)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v74 = *(_QWORD *)(v71 + 40);
            v75 = v73 >> 6;
            v76 = 1 << v73;
            if (v70)
              v77 = *(_QWORD *)(v74 + 8 * v75) | v76;
            else
              v77 = *(_QWORD *)(v74 + 8 * v75) & ~v76;
            *(_QWORD *)(v74 + 8 * v75) = v77;
          }
          v62 = v194;
          v63 = ++v64;
        }
        while (v64 < (unint64_t)((uint64_t)(*((_QWORD *)v194 + 20) - *((_QWORD *)v194 + 19)) >> 2));
      }
      *(_QWORD *)&__str[8] = v72;
      operator delete(v72);
LABEL_128:
      v96 = (std::__shared_weak_count *)operator new(0x60uLL);
      v96->__shared_owners_ = 0;
      v96->__shared_weak_owners_ = 0;
      v96->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ADF0;
      v96[3].std::__shared_count = 0u;
      v96[3].__vftable = (std::__shared_weak_count_vtbl *)&v96[3].__shared_owners_;
      v219 = 3;
      v220 = 1;
      v97 = BYTE4(v202);
      LODWORD(v177) = 1065749138;
      HIDWORD(v177) = (_DWORD)v202;
      v96[1].std::__shared_count = 0u;
      *(_OWORD *)&v96[1].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v96[2].__shared_owners_ = 0u;
      v96[3].__shared_weak_owners_ = 0;
      v160 = (uint64_t *)&v96[1];
      v188 = v96 + 1;
      v189 = v96;
      v185 = 0;
      v186 = 0;
      v187 = 0;
      memset(v218, 0, sizeof(v218));
      memset(__str, 0, sizeof(__str));
      LOBYTE(v178) = v97;
      v179 = v201;
      HIDWORD(v178) = 2;
      if (v163)
        v98 = cv3d::cv::gess::alg::BlenderUV2ParameterizeWithDiagonal(v194, &v177, __str);
      else
        v98 = 0;
      if (v166)
      {
        v99 = *(_QWORD *)&v218[16];
        *(_QWORD *)(a4 + 288) = *(_QWORD *)__str;
        *(_QWORD *)(a4 + 320) = v99;
      }
      if (v232)
      {
        std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_23C62207F);
        LODWORD(v177) = 1112014848;
        if (!v232)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, void **, _BYTE *))(*(_QWORD *)v232 + 48))(v232, &v177, __str);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
      }
      if (v230 && ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v230 + 48))(v230) & 1) != 0)
        goto LABEL_178;
      if ((v98 & 1) != 0)
      {
        v100 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)v194);
        data = -1;
        LODWORD(v183.__r_.__value_.__l.__data_) = -1;
        if (v100)
        {
          v102 = v194;
          std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
          v103 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)v102, &v183, __str);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          data = (int)v183.__r_.__value_.__l.__data_;
        }
        else
        {
          v103 = 0;
        }
      }
      else
      {
        v103 = 0;
        data = -1;
        LODWORD(v183.__r_.__value_.__l.__data_) = -1;
      }
      LODWORD(v177) = data;
      v104 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)v194 + 10, (unsigned int *)&v177, v95);
      v105 = (*(uint64_t (**)(_QWORD *))(*v104 + 16))(v104);
      LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = -1;
      v106 = v194;
      std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
      v107 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)v106, &__replacement, __str);
      v109 = v107;
      if ((__str[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__str);
        if (v109)
          goto LABEL_154;
      }
      else if (v107)
      {
        goto LABEL_154;
      }
      v110 = v194;
      std::string::basic_string[abi:ne180100]<0>(__str, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)v110, &__replacement, (__int128 *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
LABEL_154:
      v164 = v103;
      LODWORD(v177) = __replacement.__pn_.__r_.__value_.__l.__data_;
      v111 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)v194 + 10, (unsigned int *)&v177, v108);
      (*(void (**)(_QWORD *, uint64_t))(*v111 + 32))(v111, 1);
      v112 = (uint64_t **)v111[5];
      if ((uint64_t **)v111[6] == v112)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      if (v105)
      {
        v113 = 0;
        for (k = 0; k != v105; ++k)
        {
          v115 = v104[5];
          if (0xAAAAAAAAAAAAAAABLL * ((v104[6] - v115) >> 3) <= k)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v116 = (__int128 *)(v115 + v113);
          if (*((char *)v116 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v116, *((_QWORD *)v116 + 1));
          }
          else
          {
            v117 = *v116;
            *(_QWORD *)&__str[16] = *((_QWORD *)v116 + 2);
            *(_OWORD *)__str = v117;
          }
          LOWORD(pn.__r_.__value_.__l.__data_) = k;
          v177 = &pn;
          v118 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v112, (unsigned __int16 *)&pn, (uint64_t)&std::piecewise_construct, (_WORD **)&v177);
          std::string::operator=((std::string *)(v118 + 5), (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          v113 += 24;
        }
      }
      *(_QWORD *)&__str[24] = 0;
      *(_QWORD *)&v218[24] = 0;
      v221 = 0;
      v225 = 0;
      v228 = 0;
      std::function<void ()(float,std::string const&)>::operator=(__str, v165);
      v119 = v164;
      std::function<BOOL ()(void)>::operator=(v218, v167);
      if (v162 != v161)
      {
        if (v166)
        {
          if (!v164)
            goto LABEL_171;
          v120 = v198;
          v121 = (uint64_t *)v194;
          v122 = (cv3d::cv::gess::alg::BakeCallbackBundle *)v216;
          cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v216, (const cv3d::cv::gess::alg::BakeCallbackBundle *)__str);
          v124 = cv3d::cv::gess::alg::InternalBakeHelper((float32x4_t *)v120, v35, v121, (uint64_t)v160, (uint64_t)v200, a4 + 64, 1u, v123, (uint64_t)&v185, 1, (uint64_t)v216, 1, (const std::__fs::filesystem::path *)v168);
        }
        else
        {
          if (!v164)
            goto LABEL_171;
          v125 = v198;
          v126 = (uint64_t *)v194;
          v122 = (cv3d::cv::gess::alg::BakeCallbackBundle *)v215;
          cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v215, (const cv3d::cv::gess::alg::BakeCallbackBundle *)__str);
          v124 = cv3d::cv::gess::alg::InternalBakeHelper((float32x4_t *)v125, v35, v126, (uint64_t)v160, (uint64_t)v200, 0, 0, v127, (uint64_t)&v185, 1, (uint64_t)v215, 1, (const std::__fs::filesystem::path *)v168);
        }
        v119 = v124;
        cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle(v122);
      }
LABEL_171:
      if (v232)
      {
        std::string::basic_string[abi:ne180100]<0>(&v177, (char *)&unk_23C62207F);
        LODWORD(v183.__r_.__value_.__l.__data_) = 1119092736;
        if (!v232)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, std::string *, void **))(*(_QWORD *)v232 + 48))(v232, &v183, &v177);
        if (v180 < 0)
          operator delete(v177);
      }
      if (v230 && ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v230 + 48))(v230) & 1) != 0)
      {
        cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)__str);
LABEL_178:
        *(_QWORD *)__str = &v185;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        v34 = 0;
LABEL_291:
        v158 = (unint64_t *)&v96->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
        goto LABEL_86;
      }
      v128 = v228;
      if (v228 == v226)
      {
        v129 = 4;
        v128 = v226;
      }
      else
      {
        if (!v228)
          goto LABEL_184;
        v129 = 5;
      }
      (*(void (**)(void))(*v128 + 8 * v129))();
LABEL_184:
      v130 = (uint64_t *)v225;
      if ((uint64_t *)v225 == &v222)
      {
        v131 = 4;
        v130 = &v222;
      }
      else
      {
        if (!v225)
          goto LABEL_189;
        v131 = 5;
      }
      (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_189:
      v132 = v221;
      if (v221 == &v218[32])
      {
        v133 = 4;
        v132 = &v218[32];
      }
      else
      {
        if (!v221)
          goto LABEL_194;
        v133 = 5;
      }
      (*(void (**)(void))(*v132 + 8 * v133))();
LABEL_194:
      v134 = *(_QWORD **)&v218[24];
      if (*(_BYTE **)&v218[24] == v218)
      {
        v135 = 4;
        v134 = v218;
      }
      else
      {
        if (!*(_QWORD *)&v218[24])
          goto LABEL_199;
        v135 = 5;
      }
      (*(void (**)(void))(*v134 + 8 * v135))();
LABEL_199:
      v136 = *(_QWORD **)&__str[24];
      if (*(_BYTE **)&__str[24] == __str)
      {
        v137 = 4;
        v136 = __str;
      }
      else
      {
        if (!*(_QWORD *)&__str[24])
        {
LABEL_204:
          std::string::basic_string[abi:ne180100]<0>(&v183, "0.25");
          v184 = 16843009;
          cv3d::cv::gess::alg::TriMesh2QuadMesh((uint64_t)v194, v192, &v183, 0, 0);
          LOBYTE(v177) = 0;
          HIDWORD(v177) = 1;
          LOWORD(v178) = 0;
          cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)&v179);
          LOBYTE(v177) = 1;
          BYTE1(v178) = 1;
          *(_DWORD *)__str = 1;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v138 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v138 + 5);
          *(_DWORD *)__str = 2;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v139 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          v140 = v165;
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v139 + 5);
          *(_DWORD *)__str = 3;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v141 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v141 + 5);
          *(_DWORD *)__str = 4;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v142 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v142 + 5);
          *(_DWORD *)__str = 5;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v143 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v143 + 5);
          *(_DWORD *)__str = 7;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v144 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v144 + 5);
          *(_DWORD *)__str = 13;
          __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          v145 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v182, (int *)__str, (uint64_t)&std::piecewise_construct, &__replacement);
          std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(v145 + 5);
          if (v119
            && cv3d::cv::gess::alg::CopyAllConfigMapToImageSaveFormat((cv3d::cv::gess::alg *)&v202, (const cv3d::cv::gess::alg::ConfigOutput *)&v179, v146))
          {
            if (*(char *)(v168 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v168, *(_QWORD *)(v168 + 8));
            }
            else
            {
              *(_OWORD *)__str = *(_OWORD *)v168;
              *(_QWORD *)&__str[16] = *(_QWORD *)(v168 + 16);
            }
            v147 = cv3d::cv::gess::io::SaveObjFile(__str, (uint64_t)v192, v160, (uint64_t)&v177);
            if ((__str[23] & 0x80000000) != 0)
              operator delete(*(void **)__str);
          }
          else
          {
            v147 = 0;
          }
          v148 = v186;
          if (v186 >= v187)
          {
            v149 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v185, (__int128 *)v168);
          }
          else
          {
            std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)&v185, (__int128 *)v168);
            v149 = v148 + 24;
          }
          v186 = v149;
          if (*(char *)(v168 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v168, *(_QWORD *)(v168 + 8));
          }
          else
          {
            *(_OWORD *)__str = *(_OWORD *)v168;
            *(_QWORD *)&__str[16] = *(_QWORD *)(v168 + 16);
          }
          std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".mtl");
          v150 = (__int128 *)std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)__str, &__replacement);
          v151 = v186;
          if (v186 >= v187)
          {
            v152 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v185, v150);
          }
          else
          {
            std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>((uint64_t)&v185, v150);
            v152 = v151 + 24;
          }
          v186 = v152;
          if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          if (v206)
            v153 = v147;
          else
            v153 = 0;
          if (v153 != 1)
            goto LABEL_279;
          if (*(char *)(v168 + 23) < 0)
            std::string::__init_copy_ctor_external(&__replacement.__pn_, *(const std::string::value_type **)v168, *(_QWORD *)(v168 + 8));
          else
            __replacement = *(std::__fs::filesystem::path *)v168;
          std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>((std::string *)__str, ".usda");
          std::__fs::filesystem::path::replace_extension(&__replacement, (const std::__fs::filesystem::path *)__str);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption((cv3d::cv::gess::io::SaveUsdOption *)__str, (const cv3d::cv::gess::io::SaveObjOption *)&v177);
          std::string::operator=((std::string *)&v218[40], &__p);
          v222 = v213;
          v223 = v214;
          if (v227 < 0)
          {
            v225 = 13;
            v154 = v224;
          }
          else
          {
            v154 = (char *)&v224;
            v227 = 13;
          }
          strcpy(v154, "ObjectCapture");
          if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&pn, __replacement.__pn_.__r_.__value_.__l.__data_, __replacement.__pn_.__r_.__value_.__l.__size_);
          else
            pn = __replacement.__pn_;
          cv3d::cv::gess::io::SaveUsdaFile((uint64_t)&pn, (uint64_t)v192, v160, (uint64_t)__str);
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
            operator delete(pn.__r_.__value_.__l.__data_);
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v207, "usda"))
            goto LABEL_273;
          if (*(char *)(v168 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&pn, *(const std::string::value_type **)v168, *(_QWORD *)(v168 + 8));
            if (*(char *)(v168 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v174.__pn_, *(const std::string::value_type **)v168, *(_QWORD *)(v168 + 8));
LABEL_247:
              std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&v173.__pn_, ".usdc");
              std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&pn, &v173);
              if (SHIBYTE(v173.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v173.__pn_.__r_.__value_.__l.__data_);
              std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&v173.__pn_, ".usdz");
              std::__fs::filesystem::path::replace_extension(&v174, &v173);
              if (SHIBYTE(v173.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v173.__pn_.__r_.__value_.__l.__data_);
              v172 = 0;
              std::string::basic_string[abi:ne180100]<0>(&v173, (char *)&unk_23C62207F);
              if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v171, __replacement.__pn_.__r_.__value_.__l.__data_, __replacement.__pn_.__r_.__value_.__l.__size_);
              else
                v171 = __replacement.__pn_;
              if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v170, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
              else
                v170 = pn;
              if (SHIBYTE(v174.__pn_.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v169, v174.__pn_.__r_.__value_.__l.__data_, v174.__pn_.__r_.__value_.__l.__size_);
              else
                v169 = v174.__pn_;
              v155 = cv3d::cv::gess::io::UsdzConvert((uint64_t *)&v171, (uint64_t *)&v170, (uint64_t *)&v169, &v172, &v173.__pn_);
              if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v169.__r_.__value_.__l.__data_);
              if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v170.__r_.__value_.__l.__data_);
              if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v171.__r_.__value_.__l.__data_);
              if (SHIBYTE(v173.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v173.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v174.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v174.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                operator delete(pn.__r_.__value_.__l.__data_);
              if ((v155 & 1) == 0)
              {
                v156 = 0;
                goto LABEL_275;
              }
LABEL_273:
              v156 = 1;
LABEL_275:
              cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption((void **)__str);
              v140 = v165;
              if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
              if ((v156 & 1) == 0)
                goto LABEL_287;
              v147 = 1;
LABEL_279:
              if (v232)
              {
                std::string::basic_string[abi:ne180100]<0>(__str, (char *)&unk_23C62207F);
                LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = 1120403456;
                if (!v232)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(_BYTE *, std::__fs::filesystem::path *, _BYTE *))(*(_QWORD *)v232 + 48))(v232, &__replacement, __str);
                if ((__str[23] & 0x80000000) != 0)
                  operator delete(*(void **)__str);
              }
              if (v147)
              {
                v157 = *(_QWORD *)(v140 + 88);
                if (v157)
                  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v157 + 48))(v157, &v185);
                v34 = 1;
LABEL_288:
                std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v182, v182[1]);
                std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&v179, v181);
                if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v183.__r_.__value_.__l.__data_);
                v96 = v189;
                *(_QWORD *)__str = &v185;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
                if (!v96)
                  goto LABEL_86;
                goto LABEL_291;
              }
LABEL_287:
              v34 = 0;
              goto LABEL_288;
            }
          }
          else
          {
            pn = *(std::string *)v168;
          }
          v174 = *(std::__fs::filesystem::path *)v168;
          goto LABEL_247;
        }
        v137 = 5;
      }
      (*(void (**)(void))(*v136 + 8 * v137))();
      goto LABEL_204;
    }
  }
  v34 = 0;
LABEL_86:
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v190.__r_.__value_.__l.__data_);
  v78 = v193;
  if (v193)
  {
    v79 = (unint64_t *)&v193->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v195;
  if (v195)
  {
    v82 = (unint64_t *)&v195->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
LABEL_98:
  v84 = v197;
  if (v197)
  {
    v85 = (unint64_t *)&v197->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v199;
  if (v199)
  {
    v88 = (unint64_t *)&v199->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v211 < 0)
    operator delete(v210);
  if (v208)
  {
    v209 = v208;
    operator delete(v208);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(&v202);
  v90 = v230;
  if (v230 == v229)
  {
    v91 = 4;
    v90 = v229;
  }
  else
  {
    if (!v230)
      goto LABEL_119;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_119:
  v92 = v232;
  if (v232 == v231)
  {
    v93 = 4;
    v92 = v231;
    goto LABEL_123;
  }
  if (v232)
  {
    v93 = 5;
LABEL_123:
    (*(void (**)(void))(*v92 + 8 * v93))();
  }
  return v34;
}

void sub_23C5D9B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;
  char a73;
  char a74;
  void *a75;
  char a76;
  uint64_t v76;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;

  if (a48 < 0)
    operator delete(__p);
  cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption((void **)&STACK[0x5B0]);
  if (a55 < 0)
    operator delete(a50);
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a57);
  if (a72 < 0)
    operator delete(a67);
  STACK[0x5B0] = (unint64_t)&a73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5B0]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a74);
  if (a76 < 0)
    operator delete(a75);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x208]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x218]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x228]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x238]);
  cv3d::cv::gess::alg::ConfigBake::~ConfigBake((void **)&STACK[0x248]);
  v78 = *(_QWORD **)(v76 - 136);
  if (v78 == (_QWORD *)(v76 - 160))
  {
    v79 = 4;
    v78 = (_QWORD *)(v76 - 160);
  }
  else
  {
    if (!v78)
      goto LABEL_14;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_14:
  v80 = *(_QWORD **)(v76 - 104);
  if (v80 == (_QWORD *)(v76 - 128))
  {
    v81 = 4;
    v80 = (_QWORD *)(v76 - 128);
  }
  else
  {
    if (!v80)
      goto LABEL_19;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_19:
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<BOOL>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  __int16 v6;
  char v7;

  v7 = 0;
  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<BOOL>>((char **)(a1 + 56), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

_QWORD *std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0 const&,void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_250D4B140;
  v6 = v5;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

_OWORD *std::vector<cv3d::cv::gess::math::Vector3T<float>>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  _OWORD **v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  _OWORD *v23;
  __int128 v24;
  int64_t v25;
  _OWORD *v26;
  __int128 v27;

  v6 = a2;
  v8 = a1[2];
  result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, v11);
    v13 = (_OWORD *)a1[1];
    v12 = (_OWORD **)(a1 + 1);
    result = v13;
    v14 = (char *)v13;
    if (v6 != a3)
    {
      v14 = (char *)result;
      do
      {
        v15 = *v6++;
        *(_OWORD *)v14 = v15;
        v14 += 16;
      }
      while (v6 != a3);
    }
LABEL_26:
    v25 = v14 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_OWORD *)a1[1];
  v12 = (_OWORD **)(a1 + 1);
  v16 = v17;
  v18 = v17 - result;
  if (v18 >= a4)
  {
    v14 = (char *)result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        v27 = *v6++;
        *v26++ = v27;
        v14 += 16;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = &a2[v18];
  if (v16 != result)
  {
    v20 = 16 * v18;
    do
    {
      v21 = *v6++;
      *result++ = v21;
      v20 -= 16;
    }
    while (v20);
    result = *v12;
  }
  v22 = (char *)result;
  if (v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      v24 = *v19++;
      *v23++ = v24;
      v22 += 16;
    }
    while (v19 != a3);
  }
  v25 = v22 - (char *)result;
LABEL_27:
  *v12 = (_OWORD *)((char *)result + v25);
  return result;
}

uint64_t cv3d::cv::gess::alg::ConfigOutput::operator=(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a2 + 376));
  return a1;
}

cv3d::cv::gess::alg::ConfigBake *cv3d::cv::gess::alg::ConfigBake::ConfigBake(cv3d::cv::gess::alg::ConfigBake *this)
{
  *(_DWORD *)this = 1061997773;
  *(_OWORD *)((char *)this + 4) = xmmword_23C60CC70;
  *(_QWORD *)((char *)this + 20) = 0x13DCCCCCDLL;
  *(_QWORD *)((char *)this + 28) = 0x241000000;
  *(_QWORD *)((char *)this + 36) = 1065353216;
  *((_DWORD *)this + 11) = 2139095039;
  *((_BYTE *)this + 48) = 1;
  cv3d::cv::gess::alg::ConfigOutput::ConfigOutput((cv3d::cv::gess::alg::ConfigBake *)((char *)this + 56));
  *((_BYTE *)this + 504) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 64, "CorePhotogrammetry Bake");
  *((_QWORD *)this + 67) = 0;
  *((_DWORD *)this + 136) = 0;
  return this;
}

void sub_23C5DA3C0(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;

  cv3d::cv::gess::alg::ConfigSystem::~ConfigSystem(v2);
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v1);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::alg::ConfigOutput *cv3d::cv::gess::alg::ConfigOutput::ConfigOutput(cv3d::cv::gess::alg::ConfigOutput *this)
{
  int v2;
  int v3;
  int v4;
  int v5;
  void *__p[2];
  uint64_t v8;

  *(_QWORD *)this = 4096;
  *((_BYTE *)this + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, "png");
  *((_DWORD *)this + 10) = 1065017672;
  *((_BYTE *)this + 48) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 7, "png");
  *((_DWORD *)this + 20) = 1065017672;
  *((_BYTE *)this + 88) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "png");
  *((_DWORD *)this + 30) = 1065017672;
  *((_BYTE *)this + 128) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 17, "png");
  *((_DWORD *)this + 40) = 1065017672;
  std::string::basic_string[abi:ne180100]<0>(__p, "exr");
  *((_BYTE *)this + 168) = 1;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v2 = SHIBYTE(v8);
    *((_DWORD *)this + 50) = 1065017672;
    *((_BYTE *)this + 204) = 1;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 11) = *(_OWORD *)__p;
    *((_QWORD *)this + 24) = v8;
    *((_DWORD *)this + 50) = 1065017672;
    *((_BYTE *)this + 204) = 1;
  }
  *((_BYTE *)this + 208) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 27, "png");
  *((_DWORD *)this + 60) = 1065017672;
  std::string::basic_string[abi:ne180100]<0>(__p, "png");
  *((_BYTE *)this + 248) = 0;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 256), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v3 = SHIBYTE(v8);
    *((_DWORD *)this + 70) = 1065017672;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 16) = *(_OWORD *)__p;
    *((_QWORD *)this + 34) = v8;
    *((_DWORD *)this + 70) = 1065017672;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "exr");
  *((_BYTE *)this + 288) = 0;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 296), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v4 = SHIBYTE(v8);
    *((_DWORD *)this + 80) = 1065017672;
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)((char *)this + 296) = *(_OWORD *)__p;
    *((_QWORD *)this + 39) = v8;
    *((_DWORD *)this + 80) = 1065017672;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "exr");
  *((_BYTE *)this + 328) = 0;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    v5 = SHIBYTE(v8);
    *((_DWORD *)this + 90) = 1065017672;
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_OWORD *)this + 21) = *(_OWORD *)__p;
    *((_QWORD *)this + 44) = v8;
    *((_DWORD *)this + 90) = 1065017672;
  }
  *((_BYTE *)this + 368) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 47, "usdz");
  return this;
}

void sub_23C5DA6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  char *v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;

  if (a15 < 0)
    operator delete(__p);
  if (v15[319] < 0)
    operator delete(*v23);
  if (v15[279] < 0)
    operator delete(*v22);
  if (v15[239] < 0)
    operator delete(*v21);
  if (v15[199] < 0)
    operator delete(*v20);
  if (v15[159] < 0)
    operator delete(*v19);
  if (v15[119] < 0)
    operator delete(*v18);
  if (v15[79] < 0)
    operator delete(*v17);
  if (v15[39] < 0)
    operator delete(*v16);
  _Unwind_Resume(a1);
}

void sub_23C5DA7BC()
{
  JUMPOUT(0x23C5DA794);
}

void sub_23C5DA7C4()
{
  JUMPOUT(0x23C5DA7A4);
}

void std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_23C5DA820(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> v15;

  v3 = *(_QWORD *)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = a1 + 16;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  v15.__first_ = v10;
  v15.__begin_ = end;
  v15.__end_ = end;
  v15.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = v15.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  v15.__end_ = end + 1;
  std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  v13 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_23C5DA934(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>,std::reverse_iterator<std::__fs::filesystem::path*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::reverse_iterator<std::__fs::filesystem::path*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength> &,std::__wrap_iter<cv3d::cv::gess::alg::TriMesh2QuadMesh(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::QuadMesh &,cv3d::cv::gess::alg::TriMesh2QuadMeshOption const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriMesh2QuadMesh>>)::EdgeWithLength*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = *(double *)(a2 - 8);
    if (*(double *)(result + 16 * v3 + 8) < v4)
    {
      v7 = *(_QWORD *)(a2 - 16);
      v5 = a2 - 16;
      v6 = v7;
      do
      {
        v8 = (_OWORD *)v5;
        v5 = result + 16 * v3;
        *v8 = *(_OWORD *)v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
      }
      while (*(double *)(result + 16 * v3 + 8) < v4);
      *(_QWORD *)v5 = v6;
      *(double *)(v5 + 8) = v4;
    }
  }
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23C5DAB1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh8QuadMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4B028;
  cv3d::cv::gess::mesh::QuadMesh::QuadMesh((cv3d::cv::gess::mesh::QuadMesh *)(a1 + 3));
  return a1;
}

void sub_23C5DAB64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::QuadMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4B028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::QuadMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4B028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::QuadMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<BOOL>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5DAD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C5DADD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4B060;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5DAE1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4B060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4B060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4B098;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

unint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40));
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::resize((_QWORD *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  char *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (_BYTE *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (_BYTE *)a1[5];
    v7 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
    if (v7 + 1 >= 0x5555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v3 - (_QWORD)v6);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x2AAAAAAAAAAAAAAALL)
      v10 = 0x5555555555555555;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(v2, v10);
      v6 = (_BYTE *)a1[5];
      v4 = (_BYTE *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[3 * v7];
    *(_WORD *)v12 = 0;
    v12[2] = 0;
    v13 = &v11[3 * v10];
    v5 = v12 + 3;
    if (v4 == v6)
    {
      v14 = v12;
    }
    else
    {
      do
      {
        v14 = v12 - 3;
        v15 = v4 - 3;
        v16 = -3;
        do
          v12[v16] = v4[v16];
        while (!__CFADD__(v16++, 1));
        v4 -= 3;
        v12 -= 3;
      }
      while (v15 != v6);
    }
    a1[5] = v14;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_WORD *)v4 = 0;
    v4[2] = 0;
    v5 = v4 + 3;
  }
  a1[6] = v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char v5;
  char v6;
  char v7;
  char *v8;

  v3 = *(_QWORD *)(result + 40);
  v4 = (char *)(v3 + 3 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v8 = (char *)(v3 + 3 * a3);
  *v4 = *v8;
  v4[1] = v8[1];
  v4[2] = v8[2];
  *v8 = v5;
  v8[1] = v6;
  v8[2] = v7;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 40);
  v4 = v3 + 3 * a2;
  v5 = v3 + 3 * a3;
  *(_BYTE *)v5 = *(_BYTE *)v4;
  *(_WORD *)(v5 + 1) = *(_WORD *)(v4 + 1);
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::Clone@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,void>(a2, (uint64_t)v4);
}

void sub_23C5DB14C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4B098;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * (v4 - (_BYTE *)*a1) < a2)
  {
    if (a2 >= 0x5555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 3;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(v3, a2);
    v7 = &v6[3 * v5];
    v9 = &v6[3 * v8];
    v10 = (char *)*a1;
    v11 = a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v13 = v7;
      do
      {
        v12 = v13 - 3;
        v14 = v11 - 3;
        v15 = -3;
        do
          v13[v15] = v11[v15];
        while (!__CFADD__(v15++, 1));
        v11 -= 3;
        v13 -= 3;
      }
      while (v14 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x5555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(3 * a2);
}

void std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__append((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 3 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * (v6 - (_QWORD)v7) >= a2)
  {
    if (a2)
    {
      v14 = 3 * ((3 * a2 - 3) / 3) + 3;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(char **)a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v7[-*(_QWORD *)a1];
    v10 = v9 + a2;
    if (v9 + a2 >= 0x5555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v5 - (_QWORD)v8);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAAALL)
      v12 = 0x5555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>(v4, v12);
      v8 = *(char **)a1;
      v7 = *(char **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[3 * v9];
    v16 = &v13[3 * v12];
    v17 = 3 * ((3 * a2 - 3) / 3) + 3;
    bzero(v15, v17);
    v18 = &v15[v17];
    if (v7 == v8)
    {
      v19 = v15;
    }
    else
    {
      do
      {
        v19 = v15 - 3;
        v20 = v7 - 3;
        v21 = -3;
        do
          v15[v21] = v7[v21];
        while (!__CFADD__(v21++, 1));
        v7 -= 3;
        v15 -= 3;
      }
      while (v20 != v8);
    }
    *(_QWORD *)a1 = v19;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D4B098;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)a1 + 6) = 0;
  *((_QWORD *)a1 + 7) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<BOOL>*,cv3d::cv::gess::math::Vector3T<BOOL>*>((char *)v4 + 40, a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * (a2[6] - a2[5]));
  return a1;
}

void sub_23C5DB4F0(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<BOOL>*,cv3d::cv::gess::math::Vector3T<BOOL>*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t i;

  if (a4)
  {
    v6 = result;
    result = std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      for (i = 0; i != 3; ++i)
        *(_BYTE *)(v7 + i) = *(_BYTE *)(a2 + i);
      a2 += 3;
      v7 += 3;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C5DB570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::Vector3T<BOOL>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x5555555555555556)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<BOOL>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[3 * v4];
  return result;
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4B108;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5DB62C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<BOOL>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<BOOL>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<BOOL>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250D4B140;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250D4B140;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::TriModel2QuadModel(std::__fs::filesystem::path const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::TriModel2QuadModelOptions const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportTriModel2QuadModel>>,cv3d::cv::gess::alg::TriModel2QuadModelCallbackBundle)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;

  v2 = *(void **)a2;
  v3 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v3 < 0)
    operator delete(v2);
  return 1;
}

uint64_t cv3d::cv::gess::alg::FixNonManifoldVertices(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _DWORD *v15;
  void **v16;
  unint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int *i;
  unint64_t v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int appended;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  __int128 __p;
  char *v76;
  unsigned int v77;
  __int128 v78;
  unsigned int v79[3];

  v77 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ring hedges");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t)this, &v77, &__p);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)__p);
  LODWORD(__p) = v77;
  v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t *)this + 1, (unsigned int *)&__p, v3);
  v74 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "hedges flags");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v74, &__p);
  v62 = (uint64_t *)((char *)this + 8);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)__p);
  LODWORD(__p) = v74;
  v61 = (uint64_t *)((char *)this + 32);
  v5 = (_DWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)&__p, v4);
  v8 = v5;
  v68 = (unsigned int *)this;
  if (*((_QWORD *)this + 17) != *((_QWORD *)this + 16))
  {
    v9 = 0;
    v10 = 0;
    v11 = (char *)this + 104;
    do
    {
      LODWORD(__p) = v10;
      if (*((_QWORD *)v8 + 6) <= v9)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v5, v6, v7);
      *(_QWORD *)(*((_QWORD *)v8 + 5) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
      v5 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, (unsigned int *)&__p);
      v12 = v5[3];
      if ((_DWORD)v12 != -1)
      {
        v13 = *(_QWORD *)(v69 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v69 + 48) - v13) >> 3) <= v12)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v5, v6, v7);
        v14 = (_QWORD *)(v13 + 24 * v12);
        v16 = (void **)(v14 + 1);
        v15 = (_DWORD *)v14[1];
        v18 = v14 + 2;
        v17 = v14[2];
        if ((unint64_t)v15 >= v17)
        {
          v20 = ((uint64_t)v15 - *v14) >> 2;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v21 = v17 - *v14;
          v22 = v21 >> 1;
          if (v21 >> 1 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v6 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v6 = v22;
          if (v6)
            v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v18, v6);
          else
            v5 = 0;
          v23 = &v5[v20];
          *v23 = __p;
          v19 = v23 + 1;
          v24 = (char *)*v16;
          v25 = (char *)*v14;
          if (*v16 != (void *)*v14)
          {
            do
            {
              v26 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *--v23 = v26;
            }
            while (v24 != v25);
            v24 = (char *)*v14;
          }
          *v14 = v23;
          *v16 = v19;
          *v18 = &v5[v6];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v15 = __p;
          v19 = v15 + 1;
        }
        *v16 = v19;
        this = (cv3d::cv::gess::alg *)v68;
      }
      v9 = ++v10;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2) > v10);
  }
  v27 = *((_QWORD *)this + 13);
  v28 = *((_QWORD *)this + 14);
  v29 = (_QWORD *)((char *)this + 104);
  v30 = v28 - v27;
  v31 = 0;
  if ((v30 >> 2))
  {
    v32 = 0;
    v63 = (v30 >> 2);
    do
    {
      v73 = v32;
      v33 = *(_QWORD *)(v69 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v69 + 48) - v33) >> 3) <= v32)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v5, v6, v7);
      v34 = (*(_QWORD *)(v33 + 24 * v32 + 8) - *(_QWORD *)(v33 + 24 * v32)) & 0x3FFFFFFFCLL;
      v5 = (_DWORD *)cv3d::cv::gess::mesh::Topology::v(v29, &v73, v7);
      if (v34)
      {
        v35 = v73;
        v37 = *(_QWORD *)(v69 + 40);
        v36 = *(_QWORD *)(v69 + 48);
        if (0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3) <= v73)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v5, v6, v7);
        v64 = v32;
        v65 = v31;
        v66 = 0;
        v38 = *v5;
        for (i = *(unsigned int **)(v37 + 24 * v73); i != *(unsigned int **)(v37 + 24 * v35 + 8); ++i)
        {
          v40 = *i;
          if (*((_QWORD *)v8 + 6) <= v40)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v5, v6, v7);
          if (((*(_QWORD *)(*((_QWORD *)v8 + 5) + ((v40 >> 3) & 0x1FFFFFF8)) >> v40) & 1) == 0)
          {
            v41 = 0;
            __p = 0uLL;
            v76 = 0;
            v72 = *i;
            v42 = v72;
            v43 = v72;
            do
            {
              v71 = v43;
              v44 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v29, &v72);
              v45 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v29, (unsigned int *)(v44 + 4));
              v72 = v45;
              v46 = (_DWORD)v45 == v38;
              if (*((_QWORD *)v8 + 6) <= v45)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_QWORD *)(*((_QWORD *)v8 + 5) + ((v45 >> 3) & 0x1FFFFFF8)) |= 1 << v45;
              v47 = *((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1) >= (unint64_t)v76)
              {
                v49 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
                if ((unint64_t)(v49 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v50 = (uint64_t)&v76[-__p] >> 1;
                if (v50 <= v49 + 1)
                  v50 = v49 + 1;
                if ((unint64_t)&v76[-__p] >= 0x7FFFFFFFFFFFFFFCLL)
                  v6 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v6 = v50;
                if (v6)
                {
                  v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v76, v6);
                  LODWORD(v45) = v72;
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v49];
                *(_DWORD *)v52 = v45;
                v48 = v52 + 4;
                v53 = (char *)*((_QWORD *)&__p + 1);
                v54 = (char *)__p;
                if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                {
                  do
                  {
                    v55 = *((_DWORD *)v53 - 1);
                    v53 -= 4;
                    *((_DWORD *)v52 - 1) = v55;
                    v52 -= 4;
                  }
                  while (v53 != v54);
                  v53 = (char *)__p;
                }
                *(_QWORD *)&__p = v52;
                *((_QWORD *)&__p + 1) = v48;
                v76 = &v51[4 * v6];
                if (v53)
                  operator delete(v53);
              }
              else
              {
                **((_DWORD **)&__p + 1) = v45;
                v48 = (_DWORD *)(v47 + 4);
              }
              v41 |= v46;
              *((_QWORD *)&__p + 1) = v48;
              v43 = v72;
            }
            while (v72 != -1 && v72 != v42);
            v5 = (_DWORD *)__p;
            if ((v41 & 1) == 0)
            {
              if ((unint64_t)((unint64_t)v48 - __p) <= 7)
                __assert_rtn("FixNonManifoldVertices", "Repair.cpp", 99, "sector.size() > 1");
              v78 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v68, v68[44], v73);
              v79[0] = -1;
              appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex((uint64_t)v68, &v78, v79);
              cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes((uint64_t)v68, v73, appended, 1);
              v58 = (unsigned int *)*((_QWORD *)&__p + 1);
              v57 = (unsigned int *)__p;
              *(_QWORD *)&v78 = v68;
              *((_QWORD *)&v78 + 1) = v67 & 0xFFFFFFFF00000000 | appended;
              v67 = *((_QWORD *)&v78 + 1);
              while (v57 != v58)
              {
                v79[0] = *v57;
                cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(v78 + 104), v79, (_DWORD *)&v78 + 2);
                ++v57;
              }
              cv3d::cv::gess::mesh::Topology::SetHEdge(v29, &appended, &v71);
              v66 = 1;
              v5 = (_DWORD *)__p;
            }
            if (v5)
            {
              *((_QWORD *)&__p + 1) = v5;
              operator delete(v5);
            }
            v35 = v73;
            v37 = *(_QWORD *)(v69 + 40);
            v36 = *(_QWORD *)(v69 + 48);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3) <= v35)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v5, v6, v7);
        }
        v31 = v65;
        v59 = v66 & 1;
        v32 = v64;
      }
      else
      {
        *v5 = -1;
        v59 = 1;
      }
      v31 += v59;
      ++v32;
    }
    while (v32 != v63);
  }
  if (v77 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v62, &v77, v7);
  v77 = -1;
  if (v74 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v61, &v74, v7);
  return v31;
}

void sub_23C5DBE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::RemoveDanglingElements(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::PolyMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 14) - *((_QWORD *)this + 13);
  v4 = (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2;
  v5 = (uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2;
  cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(this);
  return v4
       + (v3 >> 2)
       - 0x3333333333333333 * v5
       - (((uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2)
        + ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2))
       + 0x3333333333333333 * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2);
}

uint64_t cv3d::cv::gess::alg::RepairEverything(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::PolyMesh *a2, BOOL *a3)
{
  cv3d::cv::gess::mesh::PolyMesh *v5;
  BOOL v6;
  char v7;
  BOOL v8;
  char v9;

  *(_BYTE *)a2 = 0;
  if (cv3d::cv::gess::alg::FixNonManifoldVertices(this, a2))
    v6 = 0;
  else
    v6 = *(_BYTE *)a2 == 0;
  v7 = !v6;
  *(_BYTE *)a2 = v7;
  if (cv3d::cv::gess::alg::RemoveDanglingElements(this, v5))
    v8 = 0;
  else
    v8 = *(_BYTE *)a2 == 0;
  v9 = !v8;
  *(_BYTE *)a2 = v9;
  return 1;
}

{
  char v4;

  v4 = 0;
  return cv3d::cv::gess::alg::RepairEverything(this, (cv3d::cv::gess::mesh::PolyMesh *)&v4, a3);
}

uint64_t cv3d::cv::gess::alg::RepairEverything(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, BOOL *a3)
{
  uint64_t result;
  BOOL *v6;
  char v7;
  char v8;

  *(_BYTE *)a2 = 0;
  result = cv3d::cv::gess::alg::RepairEverything(this, a2, a3);
  v8 = 0;
  if ((_DWORD)result)
  {
    result = cv3d::cv::gess::alg::FixNonManifoldEdges(this, (cv3d::cv::gess::mesh::TriMesh *)&v8, v6);
    v7 = v8;
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)a2 |= v7;
  return result;
}

{
  char v4;

  v4 = 0;
  return cv3d::cv::gess::alg::RepairEverything(this, (cv3d::cv::gess::mesh::TriMesh *)&v4, a3);
}

uint64_t cv3d::cv::gess::alg::FixNonManifoldEdges(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, BOOL *a3)
{
  uint64_t fixed;
  cv3d::cv::gess::mesh::PolyMesh *v6;
  cv3d::cv::gess::mesh::PolyMesh *v7;

  *(_BYTE *)a2 = 0;
  if ((cv3d::cv::gess::alg::VerifyManifoldEdges(this, a2) & 1) != 0)
    return 1;
  fixed = cv3d::cv::gess::mesh::TriMesh::FixNonManifoldEdge(this);
  if ((_DWORD)fixed)
  {
    cv3d::cv::gess::alg::FixNonManifoldVertices(this, v6);
    cv3d::cv::gess::alg::RemoveDanglingElements(this, v7);
  }
  *(_BYTE *)a2 = 1;
  return fixed;
}

uint64_t cv3d::cv::gess::alg::CheckDegeneratedTriangles(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  double v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v12;
  double v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  _DWORD *v24;
  float32x4_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unsigned int v37;
  void *__p[3];

  v6 = 0.0;
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    v7 = 1;
    do
    {
      LODWORD(__p[0]) = v7 - 1;
      v6 = v6 + cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)__p);
      v9 = *(_QWORD *)(a1 + 152);
      v8 = *(_QWORD *)(a1 + 160);
      v10 = (v8 - v9) >> 2;
    }
    while (v10 > v7++);
    if (v8 != v9)
      v6 = v6 / (double)v10;
  }
  v12 = v6 * 0.0001;
  if (v6 * 0.0001 > 0.000001)
    v12 = 0.000001;
  if (v12 >= 1.0e-10)
    v13 = v12;
  else
    v13 = 1.0e-10;
  *a3 = 0;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    LODWORD(v14) = 0;
    do
    {
      v37 = v14;
      v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v37);
      v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v15);
      v17 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v16);
      *(_DWORD *)__p[0] = *(_DWORD *)(v17 + 12);
      v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v37);
      v19 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v18);
      v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(v19 + 8));
      v21 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v20);
      *((_DWORD *)__p[0] + 1) = *(_DWORD *)(v21 + 12);
      v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v37);
      v23 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v22);
      v24 = __p[0];
      *((_DWORD *)__p[0] + 2) = *(_DWORD *)(v23 + 12);
      v36 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v24[1]);
      v35 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
      v34 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
      v25 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
      v26 = (int32x4_t)vsubq_f32(v36, v35);
      v27 = (int32x4_t)vsubq_f32(v34, *v25);
      v28 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v26, (int32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL)), v26), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), v27)), (float32x4_t)vzip2q_s32(vzip1q_s32(v27, (int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL)), v27), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL), v26));
      v29 = vmulq_f32(v28, v28);
      v29.i32[3] = 0;
      if (v13 > sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
      {
        v30 = 0;
        v31 = (char *)__p[0];
        v32 = *a2;
        do
        {
          *(_DWORD *)(v32 + 4 * *(unsigned int *)&v31[v30]) = 1056964608;
          v30 += 4;
        }
        while (v30 != 12);
        *a3 = 1;
      }
      v14 = (v14 + 1);
    }
    while (v14 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_23C5DC35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::RepairDegeneratedTriangles(float32x4_t *this, cv3d::cv::gess::mesh::TriMesh *a2, float a3, _BYTE *a4, BOOL *a5)
{
  int v6;
  unint64_t v9;
  double v10;
  unsigned int v11;
  const cv3d::cv::gess::mesh::PolyMesh *v12;
  int v13;
  float v14;
  int v16;
  void *__p;
  _BYTE *v18;

  v6 = (int)a2;
  v9 = (this[7].i64[0] - this[6].i64[1]) >> 2;
  v16 = 0;
  std::vector<float>::vector(&__p, v9, &v16);
  LOBYTE(v16) = 0;
  *a4 = 0;
  v10 = a3;
  v11 = -1;
  do
  {
    cv3d::cv::gess::alg::CheckDegeneratedTriangles((uint64_t)this, (uint64_t *)&__p, &v16);
    v13 = v16;
    if (v6)
    {
      if (!(_BYTE)v16)
        break;
      cv3d::cv::gess::alg::ComputeAverageEdgeLength(this, v12);
      if (!cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)this, 0, v14, v10, 1, 0.000001, 4))goto LABEL_9;
      std::vector<float>::resize((uint64_t)&__p, (this[7].i64[0] - this[6].i64[1]) >> 2);
      if (v18 - (_BYTE *)__p >= 1)
        bzero(__p, 4 * (((unint64_t)(v18 - (_BYTE *)__p) >> 2) - ((unint64_t)(v18 - (_BYTE *)__p) > 3)) + 4);
      cv3d::cv::gess::alg::CheckDegeneratedTriangles((uint64_t)this, (uint64_t *)&__p, &v16);
      *a4 = 1;
      v13 = v16;
    }
    if (!v13)
      break;
LABEL_9:
    cv3d::cv::gess::alg::TangentialRelaxation((uint64_t)this, &__p, 5, 0);
    *a4 = 1;
    ++v11;
  }
  while (v11 < 9);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_23C5DC4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::IsPointInTriangle(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  _BOOL8 result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v4 = a3[1];
  v5 = a2[1];
  v6 = *a3 - *a2;
  v7 = *a1;
  v8 = a1[1];
  v9 = (float)(v6 * (float)(v8 - v5)) - (float)((float)(v4 - v5) * (float)(*a1 - *a2));
  result = 0;
  if (v9 >= 0.0)
  {
    v11 = *a4;
    v12 = a4[1];
    v13 = *a4 - *a2;
    v14 = (float)((float)(v6 * (float)(v12 - v5)) - (float)((float)(v4 - v5) * v13)) + 1.0e-12;
    if (v9 <= v14)
    {
      v15 = (float)((float)(v11 - *a3) * (float)(v8 - v4)) - (float)((float)(v12 - v4) * (float)(v7 - *a3));
      if (v15 >= 0.0)
      {
        result = 0;
        if (v15 <= v14)
        {
          v16 = (float)((float)(v7 - v11) * (float)(v12 - v5)) - (float)((float)(v8 - v12) * v13);
          if (v16 >= 0.0 && v16 <= v14)
            return (float)((float)(v9 + v15) + v16) <= v14;
        }
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::Edge2DIntersects(float *a1, float *a2, float *a3, float *a4, double *a5, double *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double v13;
  float v14;
  float v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v23;
  double v24;
  double v25;
  double v29;
  _BOOL4 v30;
  int v32;
  _BOOL4 v34;
  BOOL v35;
  double v36;

  v6 = a1[1];
  v7 = *a2 - *a1;
  v8 = a2[1] - v6;
  v9 = a4[1];
  v10 = a3[1];
  v11 = *a4 - *a3;
  v12 = v9 - v10;
  v13 = (float)((float)(v7 * (float)(v9 - v10)) - (float)(v8 * v11));
  v14 = *a3 - *a1;
  v15 = v10 - v6;
  v16 = *a5;
  v17 = *a6 * *a6;
  v18 = (float)((float)(v8 * v8) + (float)(v7 * v7));
  if (fabs(v13 / sqrt(fmax(v18 * (float)((float)(v12 * v12) + (float)(v11 * v11)), 1.17549435e-38))) < v17)
  {
    if (fabs((float)((float)(v14 * v8) - (float)(v15 * v7))/ sqrt(fmax(v18 * (float)((float)(v15 * v15) + (float)(v14 * v14)), 1.17549435e-38))) < v17)
    {
      v19 = v16 * v16;
      v20 = (float)(v8 * v15) + (float)(v14 * v7);
      if (v20 >= 0.0 && v19 + v18 >= v20)
        return 4;
      v21 = (float)(v8 * (float)(v9 - v6)) + (float)((float)(*a4 - *a1) * v7);
      if (v21 >= 0.0 && v19 + v18 >= v21)
        return 4;
    }
    return 3;
  }
  v23 = (float)((float)(v14 * v12) - (float)(v15 * v11)) / v13;
  v24 = (float)((float)(v14 * v8) - (float)(v15 * v7)) / v13;
  v25 = 1.0 - v16;
  if (v23 > v16 && v23 < v25 && v24 > v16 && v24 < v25)
    return 0;
  v29 = -v16;
  v30 = v23 >= v25;
  if (v23 > v16 + 1.0)
    v30 = 0;
  v32 = v23 <= v16 && v23 >= v29 || v30;
  if (v24 > v16 || v24 < v29)
  {
    if (v24 > v16 + 1.0)
    {
      v34 = 0;
      goto LABEL_37;
    }
    v34 = v24 >= 1.0 - v16;
  }
  else
  {
    v34 = 1;
  }
  if ((v32 & v34 & 1) != 0)
    return 2;
LABEL_37:
  if (!v32 || (v24 >= v29 ? (v35 = v24 > v16 + 1.0) : (v35 = 1), v35))
  {
    if (!v34)
      return 3;
    v36 = v16 + 1.0;
    if (v23 < v29 || v23 > v36)
      return 3;
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, float a3, int a4, int a5)
{
  int v7;
  uint64_t v9;
  void *__p[3];
  float v12;

  v7 = (int)a2;
  v12 = a3;
  std::vector<float>::vector(__p, (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2, &v12);
  v9 = cv3d::cv::gess::alg::ImplicitLaplacianSmoothing((uint64_t)this, __p, v7, a4, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_23C5DC83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(uint64_t a1, _QWORD *a2, int a3, int a4, int a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int Vertex;
  char *v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  char *v42;
  void *v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  double v54;
  uint64_t v55;
  double v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  double *v89;
  float *v90;
  unint64_t v91;
  float v92;
  __int128 v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  unint64_t v99;
  float32x4_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  unsigned int v105;
  uint64_t v107;
  int v108;
  uint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  void *__p[2];
  char *v116;
  void *v117[2];
  char *v118;
  void *v119;
  void *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123[2];
  void *v124;
  char *v125;
  _QWORD v126[10];

  v111 = (_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v7 = a2[1] - *a2;
  v8 = (v6 >> 2);
  v109 = v7;
  v9 = v7 == 4 || v8 == v7 >> 2;
  result = v9;
  if (!v9)
    return result;
  v105 = result;
  cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(v123, (v6 >> 2), (v6 >> 2));
  LODWORD(v119) = *(_DWORD *)(a1 + 176);
  v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v119);
  v14 = v6 & 0x3FFFFFFFCLL;
  if ((v6 & 0x3FFFFFFFCLL) == 0)
    goto LABEL_119;
  v15 = 0;
  v108 = a3;
  v107 = v6 & 0x3FFFFFFFCLL;
  do
  {
    v112 = v15;
    v122 = v15;
    cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(&v119, v111, &v122);
    Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&v119);
    v117[0] = 0;
    v117[1] = 0;
    v118 = 0;
    while (1)
    {
      v17 = (char *)v117[1];
      if (Vertex == -1)
        break;
      if (v117[1] >= v118)
      {
        v19 = ((char *)v117[1] - (char *)v117[0]) >> 2;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v20 = (v118 - (char *)v117[0]) >> 1;
        if (v20 <= v19 + 1)
          v20 = v19 + 1;
        if ((unint64_t)(v118 - (char *)v117[0]) >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v118, v21);
        else
          v22 = 0;
        v23 = &v22[4 * v19];
        *(_DWORD *)v23 = Vertex;
        v18 = v23 + 4;
        v25 = (char *)v117[0];
        v24 = (char *)v117[1];
        if (v117[1] != v117[0])
        {
          do
          {
            v26 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v23 - 1) = v26;
            v23 -= 4;
          }
          while (v24 != v25);
          v24 = (char *)v117[0];
        }
        v117[0] = v23;
        v117[1] = v18;
        v118 = &v22[4 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v117[1] = Vertex;
        v18 = v17 + 4;
      }
      v117[1] = v18;
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&v119);
    }
    v27 = (unint64_t)((char *)v117[1] - (char *)v117[0]) >> 2;
    if ((int)v27 <= 0)
      __assert_rtn("ImplicitLaplacianSmoothing", "Smooth.cpp", 39, "k > 0");
    v28 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v29 = ((unint64_t)((char *)v117[1] - (char *)v117[0]) >> 2);
    v30 = 0.0;
    v116 = 0;
    do
    {
      if (v28)
        v31 = v28 - 1;
      else
        v31 = v27 - 1;
      v32 = v28 + 1;
      if (v28 >= (v27 - 1))
        v33 = 0;
      else
        v33 = (v28 + 1);
      v34 = *(_QWORD *)(v13 + 40);
      v35 = (*(_QWORD *)(v13 + 48) - v34) >> 4;
      if (v35 <= v122)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v36 = *((unsigned int *)v117[0] + v31);
      v37 = *((unsigned int *)v117[0] + v33);
      v114 = *(float32x4_t *)(v34 + 16 * v122);
      v38 = *((unsigned int *)v117[0] + v28);
      if (v35 <= v38)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v113 = *(float32x4_t *)(v34 + 16 * v38);
      if (v35 <= v36
        || (v39 = cv3d::cv::gess::math::Cotan(&v114, (float32x4_t *)(v34 + 16 * v36), &v113),
            v40 = *(_QWORD *)(v13 + 40),
            v37 >= (*(_QWORD *)(v13 + 48) - v40) >> 4))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      v41 = v39 + cv3d::cv::gess::math::Cotan(&v114, (float32x4_t *)(v40 + 16 * v37), &v113);
      v42 = (char *)__p[1];
      if (__p[1] >= v116)
      {
        v44 = (char *)__p[0];
        v45 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v47 = v116 - (char *)__p[0];
        if ((v116 - (char *)__p[0]) >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v116, v48);
          v44 = (char *)__p[0];
          v42 = (char *)__p[1];
        }
        else
        {
          v49 = 0;
        }
        v50 = (double *)&v49[8 * v45];
        *v50 = v41;
        v43 = v50 + 1;
        while (v42 != v44)
        {
          v51 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *((_QWORD *)v50-- - 1) = v51;
        }
        __p[0] = v50;
        __p[1] = v43;
        v116 = &v49[8 * v48];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(double *)__p[1] = v41;
        v43 = v42 + 8;
      }
      __p[1] = v43;
      v30 = v30 + *((double *)__p[0] + v28++);
    }
    while (v32 != v29);
    if (v30 == 0.0)
      __assert_rtn("ImplicitLaplacianSmoothing", "Smooth.cpp", 51, "sum");
    v52 = v112;
    if (v109 == 4)
      v52 = 0;
    v53 = *(float *)(*a2 + 4 * v52);
    v54 = v53;
    v55 = v122;
    v56 = v53 + 1.0;
    v57 = v125;
    if ((unint64_t)v125 >= v126[0])
    {
      v59 = (char *)v124;
      v60 = 0xAAAAAAAAAAAAAAABLL * ((v125 - (_BYTE *)v124) >> 3);
      v61 = v60 + 1;
      if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3) > v61)
        v61 = 0x5555555555555556 * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3) >= 0x555555555555555)
        v62 = 0xAAAAAAAAAAAAAAALL;
      else
        v62 = v61;
      if (v62)
      {
        v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v126, v62);
        v59 = (char *)v124;
        v57 = v125;
      }
      else
      {
        v63 = 0;
      }
      v64 = &v63[24 * v60];
      *(_QWORD *)v64 = v55;
      *((_QWORD *)v64 + 1) = v55;
      *((double *)v64 + 2) = v56;
      v65 = v64;
      if (v57 != v59)
      {
        do
        {
          v66 = *(_OWORD *)(v57 - 24);
          *((_QWORD *)v65 - 1) = *((_QWORD *)v57 - 1);
          *(_OWORD *)(v65 - 24) = v66;
          v65 -= 24;
          v57 -= 24;
        }
        while (v57 != v59);
        v59 = (char *)v124;
      }
      v58 = v64 + 24;
      v124 = v65;
      v125 = v64 + 24;
      v126[0] = &v63[24 * v62];
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(_QWORD *)v125 = v122;
      *((_QWORD *)v57 + 1) = v55;
      v58 = v57 + 24;
      *((double *)v57 + 2) = v56;
    }
    v67 = 0;
    v125 = v58;
    v68 = -1.0 / (double)(int)v27 * v54;
    do
    {
      if (v53 == 0.0)
        goto LABEL_113;
      v69 = v122;
      v70 = *((unsigned int *)v117[0] + v67);
      if (v30 <= 0.0)
      {
        if ((unint64_t)v58 < v126[0])
        {
          *(_QWORD *)v58 = v122;
          *((_QWORD *)v58 + 1) = v70;
          *((double *)v58 + 2) = v68;
          goto LABEL_85;
        }
        v72 = (char *)v124;
        v77 = 0xAAAAAAAAAAAAAAABLL * ((v58 - (_BYTE *)v124) >> 3);
        v78 = v77 + 1;
        if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_164:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3) > v78)
          v78 = 0x5555555555555556 * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3) >= 0x555555555555555)
          v75 = 0xAAAAAAAAAAAAAAALL;
        else
          v75 = v78;
        if (v75)
        {
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v126, v75);
          v72 = (char *)v124;
          v58 = v125;
        }
        else
        {
          v76 = 0;
        }
        v79 = &v76[24 * v77];
        *(_QWORD *)v79 = v69;
        *((_QWORD *)v79 + 1) = v70;
        *((double *)v79 + 2) = v68;
        v80 = v79;
        if (v58 != v72)
        {
          do
          {
            v82 = *(_OWORD *)(v58 - 24);
            *((_QWORD *)v80 - 1) = *((_QWORD *)v58 - 1);
            *(_OWORD *)(v80 - 24) = v82;
            v80 -= 24;
            v58 -= 24;
          }
          while (v58 != v72);
LABEL_109:
          v72 = (char *)v124;
        }
LABEL_110:
        v58 = v79 + 24;
        v124 = v80;
        v125 = v79 + 24;
        v126[0] = &v76[24 * v75];
        if (v72)
          operator delete(v72);
        goto LABEL_112;
      }
      v71 = -*((double *)__p[0] + v67) / v30 * v54;
      if ((unint64_t)v58 >= v126[0])
      {
        v72 = (char *)v124;
        v73 = 0xAAAAAAAAAAAAAAABLL * ((v58 - (_BYTE *)v124) >> 3);
        v74 = v73 + 1;
        if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_164;
        if (0x5555555555555556 * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3) > v74)
          v74 = 0x5555555555555556 * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126[0] - (_QWORD)v124) >> 3) >= 0x555555555555555)
          v75 = 0xAAAAAAAAAAAAAAALL;
        else
          v75 = v74;
        if (v75)
        {
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v126, v75);
          v72 = (char *)v124;
          v58 = v125;
        }
        else
        {
          v76 = 0;
        }
        v79 = &v76[24 * v73];
        *(_QWORD *)v79 = v69;
        *((_QWORD *)v79 + 1) = v70;
        *((double *)v79 + 2) = v71;
        v80 = v79;
        if (v58 != v72)
        {
          do
          {
            v81 = *(_OWORD *)(v58 - 24);
            *((_QWORD *)v80 - 1) = *((_QWORD *)v58 - 1);
            *(_OWORD *)(v80 - 24) = v81;
            v80 -= 24;
            v58 -= 24;
          }
          while (v58 != v72);
          goto LABEL_109;
        }
        goto LABEL_110;
      }
      *(_QWORD *)v58 = v122;
      *((_QWORD *)v58 + 1) = v70;
      *((double *)v58 + 2) = v71;
LABEL_85:
      v58 += 24;
LABEL_112:
      v125 = v58;
LABEL_113:
      ++v67;
    }
    while (v67 != v29);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    a3 = v108;
    v14 = v107;
    if (v117[0])
    {
      v117[1] = v117[0];
      operator delete(v117[0]);
    }
    v15 = v112 + 1;
  }
  while (v112 + 1 != v8);
LABEL_119:
  cv3d::cv::gess::math::SparseMatrixT<double>::SortMatrix(v123);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  if (a5)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)&v119, v8);
    if (v14)
    {
      v83 = 0;
      do
      {
        v84 = *(_QWORD *)(v13 + 40);
        if (v83 >= (*(_QWORD *)(v13 + 48) - v84) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *((_OWORD *)v119 + v83) = *(_OWORD *)(v84 + 16 * v83);
        ++v83;
      }
      while (v8 != v83);
    }
  }
  std::vector<double>::vector(v117, v8);
  std::vector<double>::vector(__p, v8);
  v85 = 0;
  for (i = 0; i != 3; ++i)
  {
    if (v14)
    {
      v87 = *(_QWORD *)(v13 + 40);
      v88 = (*(_QWORD *)(v13 + 48) - v87) >> 4;
      v89 = (double *)__p[0];
      v90 = (float *)(v87 + v85);
      v91 = v8;
      do
      {
        if (!v88)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v92 = *v90;
        v90 += 4;
        *v89++ = v92;
        --v88;
        --v91;
      }
      while (v91);
    }
    if (a3)
    {
      v93 = *(_OWORD *)v117;
      *(_OWORD *)v117 = *(_OWORD *)__p;
      *(_OWORD *)__p = v93;
      v94 = v118;
      v118 = v116;
      v116 = v94;
      cv3d::cv::gess::math::SparseMatrixT<double>::BCG(v123, (uint64_t **)v117, (double **)__p, 20);
    }
    if (v14)
    {
      v95 = 0;
      v96 = v85;
      do
      {
        if (!a4 || (v114.i32[0] = v95, !cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v114)))
        {
          v97 = *(_QWORD *)(v13 + 40);
          if (v95 >= (*(_QWORD *)(v13 + 48) - v97) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v98 = *((double *)__p[0] + v95);
          *(float *)(v97 + v96) = v98;
        }
        ++v95;
        v96 += 16;
      }
      while (v8 != v95);
    }
    v85 += 4;
  }
  if ((a5 & 1) != 0)
  {
    v114 = 0uLL;
    if (v14)
    {
      v99 = 0;
      do
      {
        cv3d::cv::gess::math::VertexNormal(a1, v99, &v114);
        v100 = vmulq_f32(v114, v114);
        v100.i32[3] = 0;
        if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v100, v100)) > 0.0)
        {
          v101 = *(_QWORD *)(v13 + 40);
          if (v99 >= (*(_QWORD *)(v13 + 48) - v101) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v102 = *((float32x4_t *)v119 + v99);
          v103 = vsubq_f32(*(float32x4_t *)(v101 + 16 * v99), v102);
          v104 = vmulq_f32(v114, v103);
          v104.i32[3] = 0;
          *(float32x4_t *)(v101 + 16 * v99) = vaddq_f32(v102, vsubq_f32(v103, vmulq_n_f32(v114, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v104, v104)))));
        }
        ++v99;
      }
      while (v8 != v99);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(v123);
  return v105;
}

void sub_23C5DD2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (__p)
    operator delete(__p);
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(&a37);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(uint64_t a1, _QWORD *a2, float **a3, int a4, int a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int Vertex;
  char *v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double *v41;
  double *v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  double v53;
  uint64_t v54;
  double v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  float *v82;
  double *v83;
  uint64_t v84;
  float v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  float v89;
  uint64_t v91;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  void *__p;
  double *v104;
  double *v105;
  void *v106[2];
  char *v107;
  void *v108[2];
  char *v109;
  unsigned int v110;
  uint64_t v111[2];
  void *v112;
  char *v113;
  _QWORD v114[10];

  v99 = (_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v7 = a3[1] - *a3;
  if (v7 != (v6 >> 2))
    return 0;
  v8 = a2[1] - *a2;
  v98 = v8;
  if (v8 != 4 && v8 >> 2 != v7)
    return 0;
  v97 = a2;
  v95 = a3[1] - *a3;
  cv3d::cv::gess::math::SparseMatrixT<double>::SparseMatrixT(v111, v7, v7);
  LODWORD(v108[0]) = *(_DWORD *)(a1 + 176);
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v108);
  v12 = (v6 >> 2);
  v91 = v6 & 0x3FFFFFFFCLL;
  if ((v6 & 0x3FFFFFFFCLL) == 0)
    goto LABEL_117;
  v13 = v11;
  v14 = 0;
  v96 = v12;
  do
  {
    v110 = v14;
    cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v108, v99, &v110);
    v100 = v14;
    Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v108);
    v106[0] = 0;
    v106[1] = 0;
    v107 = 0;
    while (1)
    {
      v16 = (char *)v106[1];
      if (Vertex == -1)
        break;
      if (v106[1] >= v107)
      {
        v18 = ((char *)v106[1] - (char *)v106[0]) >> 2;
        if ((unint64_t)(v18 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v19 = (v107 - (char *)v106[0]) >> 1;
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        if ((unint64_t)(v107 - (char *)v106[0]) >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v107, v20);
        else
          v21 = 0;
        v22 = &v21[4 * v18];
        *(_DWORD *)v22 = Vertex;
        v17 = v22 + 4;
        v24 = (char *)v106[0];
        v23 = (char *)v106[1];
        if (v106[1] != v106[0])
        {
          do
          {
            v25 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v22 - 1) = v25;
            v22 -= 4;
          }
          while (v23 != v24);
          v23 = (char *)v106[0];
        }
        v106[0] = v22;
        v106[1] = v17;
        v107 = &v21[4 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v106[1] = Vertex;
        v17 = v16 + 4;
      }
      v106[1] = v17;
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v108);
    }
    v26 = (unint64_t)((char *)v106[1] - (char *)v106[0]) >> 2;
    if ((int)v26 <= 0)
      __assert_rtn("ImplicitLaplacianSmoothing", "Smooth.cpp", 131, "k > 0");
    v27 = 0;
    __p = 0;
    v104 = 0;
    v28 = ((unint64_t)((char *)v106[1] - (char *)v106[0]) >> 2);
    v29 = 0.0;
    v105 = 0;
    do
    {
      if (v27)
        v30 = v27 - 1;
      else
        v30 = v26 - 1;
      v31 = v27 + 1;
      if (v27 >= (v26 - 1))
        v32 = 0;
      else
        v32 = (v27 + 1);
      v33 = *(_QWORD *)(v13 + 40);
      v34 = (*(_QWORD *)(v13 + 48) - v33) >> 4;
      if (v34 <= v110)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v35 = *((unsigned int *)v106[0] + v30);
      v36 = *((unsigned int *)v106[0] + v32);
      v102 = *(float32x4_t *)(v33 + 16 * v110);
      v37 = *((unsigned int *)v106[0] + v27);
      if (v34 <= v37)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v101 = *(float32x4_t *)(v33 + 16 * v37);
      if (v34 <= v35
        || (v38 = cv3d::cv::gess::math::Cotan(&v102, (float32x4_t *)(v33 + 16 * v35), &v101),
            v39 = *(_QWORD *)(v13 + 40),
            v36 >= (*(_QWORD *)(v13 + 48) - v39) >> 4))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      v40 = v38 + cv3d::cv::gess::math::Cotan(&v102, (float32x4_t *)(v39 + 16 * v36), &v101);
      v41 = v104;
      if (v104 >= v105)
      {
        v43 = (double *)__p;
        v44 = ((char *)v104 - (_BYTE *)__p) >> 3;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v46 = (char *)v105 - (_BYTE *)__p;
        if (((char *)v105 - (_BYTE *)__p) >> 2 > v45)
          v45 = v46 >> 2;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v105, v47);
          v43 = (double *)__p;
          v41 = v104;
        }
        else
        {
          v48 = 0;
        }
        v49 = (double *)&v48[8 * v44];
        *v49 = v40;
        v42 = v49 + 1;
        while (v41 != v43)
        {
          v50 = *((_QWORD *)v41-- - 1);
          *((_QWORD *)v49-- - 1) = v50;
        }
        __p = v49;
        v104 = v42;
        v105 = (double *)&v48[8 * v47];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v104 = v40;
        v42 = v41 + 1;
      }
      v104 = v42;
      v29 = v29 + *((double *)__p + v27++);
    }
    while (v31 != v28);
    if (v29 == 0.0)
      __assert_rtn("ImplicitLaplacianSmoothing", "Smooth.cpp", 143, "sum");
    v51 = v100;
    if (v98 == 4)
      v51 = 0;
    v52 = *(float *)(*v97 + 4 * v51);
    v53 = v52;
    v54 = v110;
    v55 = v52 + 1.0;
    v56 = v113;
    if ((unint64_t)v113 >= v114[0])
    {
      v58 = (char *)v112;
      v59 = 0xAAAAAAAAAAAAAAABLL * ((v113 - (_BYTE *)v112) >> 3);
      v60 = v59 + 1;
      if (v59 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3) > v60)
        v60 = 0x5555555555555556 * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3) >= 0x555555555555555)
        v61 = 0xAAAAAAAAAAAAAAALL;
      else
        v61 = v60;
      if (v61)
      {
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v114, v61);
        v58 = (char *)v112;
        v56 = v113;
      }
      else
      {
        v62 = 0;
      }
      v63 = &v62[24 * v59];
      *(_QWORD *)v63 = v54;
      *((_QWORD *)v63 + 1) = v54;
      *((double *)v63 + 2) = v55;
      v64 = v63;
      if (v56 != v58)
      {
        do
        {
          v65 = *(_OWORD *)(v56 - 24);
          *((_QWORD *)v64 - 1) = *((_QWORD *)v56 - 1);
          *(_OWORD *)(v64 - 24) = v65;
          v64 -= 24;
          v56 -= 24;
        }
        while (v56 != v58);
        v58 = (char *)v112;
      }
      v57 = v63 + 24;
      v112 = v64;
      v113 = v63 + 24;
      v114[0] = &v62[24 * v61];
      if (v58)
        operator delete(v58);
    }
    else
    {
      *(_QWORD *)v113 = v110;
      *((_QWORD *)v56 + 1) = v54;
      v57 = v56 + 24;
      *((double *)v56 + 2) = v55;
    }
    v66 = 0;
    v113 = v57;
    v67 = -1.0 / (double)(int)v26 * v53;
    do
    {
      if (v52 == 0.0)
        goto LABEL_111;
      v68 = v110;
      v69 = *((unsigned int *)v106[0] + v66);
      if (v29 <= 0.0)
      {
        if ((unint64_t)v57 < v114[0])
        {
          *(_QWORD *)v57 = v110;
          *((_QWORD *)v57 + 1) = v69;
          *((double *)v57 + 2) = v67;
          goto LABEL_83;
        }
        v71 = (char *)v112;
        v76 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (_BYTE *)v112) >> 3);
        v77 = v76 + 1;
        if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_141:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3) > v77)
          v77 = 0x5555555555555556 * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3) >= 0x555555555555555)
          v74 = 0xAAAAAAAAAAAAAAALL;
        else
          v74 = v77;
        if (v74)
        {
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v114, v74);
          v71 = (char *)v112;
          v57 = v113;
        }
        else
        {
          v75 = 0;
        }
        v78 = &v75[24 * v76];
        *(_QWORD *)v78 = v68;
        *((_QWORD *)v78 + 1) = v69;
        *((double *)v78 + 2) = v67;
        v79 = v78;
        if (v57 != v71)
        {
          do
          {
            v81 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v79 - 1) = *((_QWORD *)v57 - 1);
            *(_OWORD *)(v79 - 24) = v81;
            v79 -= 24;
            v57 -= 24;
          }
          while (v57 != v71);
LABEL_107:
          v71 = (char *)v112;
        }
LABEL_108:
        v57 = v78 + 24;
        v112 = v79;
        v113 = v78 + 24;
        v114[0] = &v75[24 * v74];
        if (v71)
          operator delete(v71);
        goto LABEL_110;
      }
      v70 = -*((double *)__p + v66) / v29 * v53;
      if ((unint64_t)v57 >= v114[0])
      {
        v71 = (char *)v112;
        v72 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (_BYTE *)v112) >> 3);
        v73 = v72 + 1;
        if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_141;
        if (0x5555555555555556 * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3) > v73)
          v73 = 0x5555555555555556 * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v114[0] - (_QWORD)v112) >> 3) >= 0x555555555555555)
          v74 = 0xAAAAAAAAAAAAAAALL;
        else
          v74 = v73;
        if (v74)
        {
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v114, v74);
          v71 = (char *)v112;
          v57 = v113;
        }
        else
        {
          v75 = 0;
        }
        v78 = &v75[24 * v72];
        *(_QWORD *)v78 = v68;
        *((_QWORD *)v78 + 1) = v69;
        *((double *)v78 + 2) = v70;
        v79 = v78;
        if (v57 != v71)
        {
          do
          {
            v80 = *(_OWORD *)(v57 - 24);
            *((_QWORD *)v79 - 1) = *((_QWORD *)v57 - 1);
            *(_OWORD *)(v79 - 24) = v80;
            v79 -= 24;
            v57 -= 24;
          }
          while (v57 != v71);
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      *(_QWORD *)v57 = v110;
      *((_QWORD *)v57 + 1) = v69;
      *((double *)v57 + 2) = v70;
LABEL_83:
      v57 += 24;
LABEL_110:
      v113 = v57;
LABEL_111:
      ++v66;
    }
    while (v66 != v28);
    if (__p)
    {
      v104 = (double *)__p;
      operator delete(__p);
    }
    v12 = v96;
    if (v106[0])
    {
      v106[1] = v106[0];
      operator delete(v106[0]);
    }
    v14 = v100 + 1;
  }
  while (v100 + 1 != v96);
LABEL_117:
  cv3d::cv::gess::math::SparseMatrixT<double>::SortMatrix(v111);
  std::vector<double>::vector(v108, v95);
  std::vector<double>::vector(v106, v95);
  if (v91)
  {
    v82 = *a3;
    v83 = (double *)v106[0];
    v84 = v12;
    do
    {
      v85 = *v82++;
      *v83++ = v85;
      --v84;
    }
    while (v84);
  }
  if (a4)
  {
    v86 = *(_OWORD *)v108;
    *(_OWORD *)v108 = *(_OWORD *)v106;
    *(_OWORD *)v106 = v86;
    v87 = v109;
    v109 = v107;
    v107 = v87;
    cv3d::cv::gess::math::SparseMatrixT<double>::BCG(v111, (uint64_t **)v108, (double **)v106, 20);
  }
  if (v91)
  {
    v88 = 0;
    do
    {
      if (!a5 || (LODWORD(__p) = v88, !cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&__p)))
      {
        v89 = *((double *)v106[0] + v88);
        (*a3)[v88] = v89;
      }
      ++v88;
    }
    while (v12 != v88);
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  if (v108[0])
  {
    v108[1] = v108[0];
    operator delete(v108[0]);
  }
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(v111);
  return 1;
}

void sub_23C5DDC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p)
    operator delete(__p);
  cv3d::cv::gess::math::SparseMatrixT<double>::~SparseMatrixT(&a39);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, float a3, int a4, int a5)
{
  int v7;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  BOOL is_boundary;
  char v19;
  unsigned int Vertex;
  double v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  uint64_t v34;
  int v36;
  const char *v37;
  const char *v38;
  const char *v39;
  float32x4_t v41;
  float32x4_t v42;
  _QWORD v43[3];
  int v44;
  float32x4_t v45;
  void *__p[4];

  v7 = (int)a2;
  v9 = (char *)this + 104;
  v10 = *((_QWORD *)this + 14) - *((_QWORD *)this + 13);
  v11 = (v10 >> 2);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(__p, v11);
  LODWORD(v43[0]) = *((_DWORD *)v9 + 18);
  v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v9 - 12, (unsigned int *)v43);
  v45 = 0uLL;
  if (!v7)
    goto LABEL_30;
  v13 = v12;
  v14 = 0;
  v15 = v10 & 0x3FFFFFFFCLL;
  v16 = fabsf(a3);
  do
  {
    if (!v15)
      goto LABEL_29;
    v17 = 0;
    do
    {
      v44 = v17;
      if (a4)
      {
        is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)this, (uint64_t)&v44);
        v19 = v16 < 0.000001 || is_boundary;
        if ((v19 & 1) != 0)
        {
LABEL_15:
          v24 = *(_QWORD *)(v13 + 40);
          if (v17 >= (*(_QWORD *)(v13 + 48) - v24) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *((_OWORD *)__p[0] + v17) = *(_OWORD *)(v24 + 16 * v17);
          goto LABEL_25;
        }
      }
      else if (v16 < 0.000001)
      {
        goto LABEL_15;
      }
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v43, v9, (unsigned int *)&v44);
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v43);
      v21 = 0.0;
      v22.i32[1] = 0;
      v41 = 0u;
      while (Vertex != -1)
      {
        v23 = *(_QWORD *)(v13 + 40);
        if (Vertex >= (unint64_t)((*(_QWORD *)(v13 + 48) - v23) >> 4))
        {
          v36 = 182;
          v37 = "index < data_.size()";
          v38 = "Attribute.h";
          v39 = "operator[]";
          goto LABEL_34;
        }
        v21 = v21 + 1.0;
        v41 = vaddq_f32(v41, *(float32x4_t *)(v23 + 16 * Vertex));
        Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v43);
      }
      if (v21 <= 0.0)
      {
        v36 = 206;
        v39 = "ExplicitUmbrellaSmoothing";
        v38 = "Smooth.cpp";
        v37 = "weight > 0.0";
LABEL_34:
        __assert_rtn(v39, v38, v36, v37);
      }
      *(float *)v22.i32 = v21;
      v25 = vdivq_f32(v41, (float32x4_t)vdupq_lane_s32(v22, 0));
      v26 = *(_QWORD *)(v13 + 40);
      if ((*(_QWORD *)(v13 + 48) - v26) >> 4 <= v17)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v27 = vaddq_f32(vmulq_n_f32(v25, a3), vmulq_n_f32(*(float32x4_t *)(v26 + 16 * v17), 1.0 - a3));
      if (a5)
      {
        v42 = v27;
        cv3d::cv::gess::math::VertexNormal((uint64_t)this, v44, &v45);
        v28 = vmulq_f32(v45, v45);
        v28.i32[3] = 0;
        if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)) <= 0.0)
        {
          v27 = v42;
        }
        else
        {
          v29 = *(_QWORD *)(v13 + 40);
          if (v17 >= (*(_QWORD *)(v13 + 48) - v29) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v30 = *(float32x4_t *)(v29 + 16 * v17);
          v31 = vsubq_f32(v42, v30);
          v32 = vmulq_f32(v45, v31);
          v32.i32[3] = 0;
          v27 = vaddq_f32(v30, vsubq_f32(v31, vmulq_n_f32(v45, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)))));
        }
      }
      *((float32x4_t *)__p[0] + v17) = v27;
LABEL_25:
      ++v17;
    }
    while (v17 != v11);
    v33 = 0;
    do
    {
      v34 = *(_QWORD *)(v13 + 40);
      if (v33 >= (*(_QWORD *)(v13 + 48) - v34) >> 4)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_OWORD *)(v34 + 16 * v33) = *((_OWORD *)__p[0] + v33);
      ++v33;
    }
    while (v11 != v33);
LABEL_29:
    ++v14;
  }
  while (v14 != v7);
LABEL_30:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_23C5DE0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(uint64_t a1, _QWORD *a2, int a3, int a4, int a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int Vertex;
  double v19;
  int32x2_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  uint64_t v31;
  int v33;
  const char *v34;
  const char *v35;
  const char *v36;
  float32x4_t v38;
  float32x4_t v39;
  _QWORD v40[3];
  int v41;
  float32x4_t v42;
  void *__p[3];

  v5 = a2[1] - *a2;
  v6 = (_QWORD *)(a1 + 104);
  if (v5 >> 2 != (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2)
    cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing();
  v11 = ((unint64_t)v5 >> 2);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(__p, v11);
  LODWORD(v40[0]) = *(_DWORD *)(a1 + 176);
  v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v40);
  v42 = 0uLL;
  if (a3)
  {
    v13 = v12;
    v14 = 0;
    v15 = v5 & 0x3FFFFFFFCLL;
    do
    {
      if (v15)
      {
        v16 = 0;
        do
        {
          v41 = v16;
          if (a4 && cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v41))
          {
            v17 = *(_QWORD *)(v13 + 40);
            if (v16 >= (*(_QWORD *)(v13 + 48) - v17) >> 4)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            *((_OWORD *)__p[0] + v16) = *(_OWORD *)(v17 + 16 * v16);
          }
          else
          {
            cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v40, v6, (unsigned int *)&v41);
            Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v40);
            v19 = 0.0;
            v20.i32[1] = 0;
            v38 = 0u;
            while (Vertex != -1)
            {
              v21 = *(_QWORD *)(v13 + 40);
              if (Vertex >= (unint64_t)((*(_QWORD *)(v13 + 48) - v21) >> 4))
              {
                v33 = 182;
                v34 = "index < data_.size()";
                v35 = "Attribute.h";
                v36 = "operator[]";
                goto LABEL_31;
              }
              v19 = v19 + 1.0;
              v38 = vaddq_f32(v38, *(float32x4_t *)(v21 + 16 * Vertex));
              Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v40);
            }
            if (v19 <= 0.0)
            {
              v33 = 260;
              v36 = "ExplicitUmbrellaSmoothing";
              v35 = "Smooth.cpp";
              v34 = "weight > 0.0";
LABEL_31:
              __assert_rtn(v36, v35, v33, v34);
            }
            *(float *)v20.i32 = v19;
            v22 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(v20, 0));
            v23 = *(_QWORD *)(v13 + 40);
            if ((*(_QWORD *)(v13 + 48) - v23) >> 4 <= v16)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v24 = vaddq_f32(vmulq_n_f32(v22, *(float *)(*a2 + 4 * v16)), vmulq_n_f32(*(float32x4_t *)(v23 + 16 * v16), 1.0 - *(float *)(*a2 + 4 * v16)));
            if (a5)
            {
              v39 = v24;
              cv3d::cv::gess::math::VertexNormal(a1, v41, &v42);
              v25 = vmulq_f32(v42, v42);
              v25.i32[3] = 0;
              if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)) <= 0.0)
              {
                v24 = v39;
              }
              else
              {
                v26 = *(_QWORD *)(v13 + 40);
                if (v16 >= (*(_QWORD *)(v13 + 48) - v26) >> 4)
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                v27 = *(float32x4_t *)(v26 + 16 * v16);
                v28 = vsubq_f32(v39, v27);
                v29 = vmulq_f32(v42, v28);
                v29.i32[3] = 0;
                v24 = vaddq_f32(v27, vsubq_f32(v28, vmulq_n_f32(v42, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)))));
              }
            }
            *((float32x4_t *)__p[0] + v16) = v24;
          }
          ++v16;
        }
        while (v16 != v11);
        v30 = 0;
        do
        {
          v31 = *(_QWORD *)(v13 + 40);
          if (v30 >= (*(_QWORD *)(v13 + 48) - v31) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_OWORD *)(v31 + 16 * v30) = *((_OWORD *)__p[0] + v30);
          ++v30;
        }
        while (v11 != v30);
      }
      ++v14;
    }
    while (v14 != a3);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_23C5DE48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::FillAllHoles(uint64_t a1, float *a2)
{
  float v4;
  unint64_t v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  char **v15;
  char **v16;
  _QWORD *v17;
  float v18;
  float v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int i;
  uint64_t v73;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD v81[3];
  unsigned int v82;
  __int128 __p;
  char *v84;
  void *v85[3];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t v89[3];

  cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox((cv3d::cv::gess::alg *)a1, v89);
  v75 = v89[1];
  v76 = v89[0];
  v4 = *a2;
  v78 = *(_QWORD *)(a1 + 160);
  v79 = (uint64_t)a2;
  v77 = *(_QWORD *)(a1 + 152);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v5 = -858993459 * ((*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(v85, v5, (unsigned __int8 *)&__p);
  if (v5)
  {
    v6 = 0;
    v7 = vsubq_f32(v75, v76);
    v8 = vmulq_f32(v7, v7);
    v8.i32[3] = 0;
    v9 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8))) * v4;
    do
    {
      v10 = v6 >> 6;
      v11 = 1 << v6;
      if ((*((_QWORD *)v85[0] + (v6 >> 6)) & (1 << v6)) == 0)
      {
        v12 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v6);
        if ((*v12 & v13) != 0)
        {
          __p = 0uLL;
          v84 = 0;
          std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::push_back[abi:ne180100](&v86, (uint64_t)&__p);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          v14 = 0;
          v15 = (char **)(v87 - 24);
          LODWORD(__p) = v6;
          v16 = (char **)(v87 - 16);
          v17 = (_QWORD *)(v87 - 8);
          v18 = 0.0;
          do
          {
            v19 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength(a1, (unsigned int *)&__p);
            v20 = __p;
            v21 = (unint64_t)__p >> 6;
            v22 = *((_QWORD *)v85[0] + v21);
            if (((1 << __p) & v22) != 0)
              __assert_rtn("FillAllHoles", "FillHole.cpp", 47, "edge_iterated[curr_bhe.Index()] == false");
            v23 = v19;
            *((_QWORD *)v85[0] + v21) = (1 << __p) | v22;
            v24 = *v16;
            if ((unint64_t)*v16 >= *v17)
            {
              v26 = (v24 - *v15) >> 2;
              if ((unint64_t)(v26 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v27 = *v17 - (_QWORD)*v15;
              v28 = v27 >> 1;
              if (v27 >> 1 <= (unint64_t)(v26 + 1))
                v28 = v26 + 1;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
                v29 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v29 = v28;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v17, v29);
                v20 = __p;
              }
              else
              {
                v30 = 0;
              }
              v31 = &v30[4 * v26];
              *(_DWORD *)v31 = v20;
              v25 = v31 + 4;
              v32 = *v16;
              v33 = *v15;
              if (*v16 != *v15)
              {
                do
                {
                  v34 = *((_DWORD *)v32 - 1);
                  v32 -= 4;
                  *((_DWORD *)v31 - 1) = v34;
                  v31 -= 4;
                }
                while (v32 != v33);
                v32 = *v15;
              }
              *v15 = v31;
              *v16 = v25;
              *v17 = &v30[4 * v29];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v24 = v20;
              v25 = v24 + 4;
            }
            *v16 = v25;
            v18 = v18 + v23;
            ++v14;
            LODWORD(__p) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p) + 8);
          }
          while (v6 != __p);
          if (v18 > v9 || v14 > *(_DWORD *)(v79 + 4))
          {
            v36 = v87 - 24;
            v35 = *(void **)(v87 - 24);
            if (v35)
            {
              *(_QWORD *)(v87 - 16) = v35;
              operator delete(v35);
            }
            v87 = v36;
          }
        }
        else
        {
          v37 = *((_QWORD *)v85[0] + v10);
          if ((v37 & v11) != 0)
            __assert_rtn("FillAllHoles", "FillHole.cpp", 68, "edge_iterated[i] == false");
          *((_QWORD *)v85[0] + v10) = v37 | v11;
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
  v38 = v86;
  v39 = v79;
  if (v87 != v86)
  {
    v40 = 0;
    v41 = 1;
    do
    {
      cv3d::cv::gess::alg::FillOneHole(a1, (unsigned int **)(v38 + 24 * v40), v79);
      v40 = v41;
      v38 = v86;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v87 - v86) >> 3) > v41++);
  }
  if (*(_BYTE *)(v79 + 13))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "v:is_on_boundary_loop_fill_hole");
    LOBYTE(v82) = 0;
    v44 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)&v82, (unsigned __int8 *)&__p);
    LODWORD(v81[0]) = v44;
    if (SHIBYTE(v84) < 0)
      operator delete((void *)__p);
    if (v44 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "v:is_on_boundary_loop_fill_hole");
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, v81, &__p);
      if (SHIBYTE(v84) < 0)
        operator delete((void *)__p);
    }
    if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
    {
      v45 = 0;
      v46 = 1;
      do
      {
        LODWORD(__p) = v81[0];
        v47 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)&__p, v43);
        if (*(_QWORD *)(v47 + 48) <= v45)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(_QWORD *)(*(_QWORD *)(v47 + 40) + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v45);
        v45 = v46++;
      }
      while (v45 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    }
    v48 = v86;
    v49 = v87;
    if (v87 != v86)
    {
      v50 = 0;
      v51 = 0;
      do
      {
        if (*(_QWORD *)(v48 + 24 * v50 + 8) != *(_QWORD *)(v48 + 24 * v50))
        {
          v52 = 0;
          v53 = 1;
          do
          {
            LODWORD(__p) = v81[0];
            v54 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)&__p, v43);
            v55 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(*(_QWORD *)(v86 + 24 * v50) + 4 * v52))+ 12);
            if (*(_QWORD *)(v54 + 48) <= v55)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            *(_QWORD *)(*(_QWORD *)(v54 + 40) + ((v55 >> 3) & 0x1FFFFFF8)) |= 1 << v55;
            v52 = v53;
            v48 = v86;
            ++v53;
          }
          while (v52 < (uint64_t)(*(_QWORD *)(v86 + 24 * v50 + 8) - *(_QWORD *)(v86 + 24 * v50)) >> 2);
          v49 = v87;
        }
        v50 = ++v51;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 3) > v51);
    }
    v39 = v79;
  }
  cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if (((unint64_t)(v78 - v77) >> 2) < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 160)
                                                                                       - *(_QWORD *)(a1 + 152)) >> 2))
  {
    if (*(_BYTE *)(v39 + 13))
    {
      v56 = 0;
      v57 = (unint64_t)(v78 - v77) >> 2;
      __p = 0uLL;
      v84 = 0;
      do
      {
        if (v56 >= v84)
        {
          v58 = (uint64_t)&v56[-__p] >> 2;
          if ((unint64_t)(v58 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v59 = (uint64_t)&v84[-__p] >> 1;
          if (v59 <= v58 + 1)
            v59 = v58 + 1;
          if ((unint64_t)&v84[-__p] >= 0x7FFFFFFFFFFFFFFCLL)
            v60 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v60 = v59;
          if (v60)
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v84, v60);
          else
            v61 = 0;
          v62 = &v61[4 * v58];
          *(_DWORD *)v62 = v57;
          v56 = v62 + 4;
          v63 = (char *)*((_QWORD *)&__p + 1);
          v64 = (char *)__p;
          if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
          {
            do
            {
              v65 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *((_DWORD *)v62 - 1) = v65;
              v62 -= 4;
            }
            while (v63 != v64);
            v63 = (char *)__p;
          }
          *(_QWORD *)&__p = v62;
          *((_QWORD *)&__p + 1) = v56;
          v84 = &v61[4 * v60];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *(_DWORD *)v56 = v57;
          v56 += 4;
        }
        *((_QWORD *)&__p + 1) = v56;
        v57 = (v57 + 1);
      }
      while (v57 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
      cv3d::cv::gess::alg::IsotropicRemeshing(a1, (unsigned int **)&__p, 10, 2, 1.33333333, 0.8, 0.2);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "v:is_on_boundary_loop_fill_hole");
      LOBYTE(v81[0]) = 0;
      v66 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)v81, (unsigned __int8 *)&__p);
      v82 = v66;
      if (SHIBYTE(v84) < 0)
        operator delete((void *)__p);
      if (v66 != -1)
      {
        v67 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
        LODWORD(v81[0]) = 0;
        std::vector<float>::vector(&__p, v67, v81);
        if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
        {
          v69 = 0;
          v70 = 0;
          do
          {
            LODWORD(v81[0]) = v66;
            v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)v81, v68);
            if (*(_QWORD *)(v71 + 48) <= v69)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            if (((*(_QWORD *)(*(_QWORD *)(v71 + 40) + ((v69 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v69) & 1) != 0)
            {
              *(_DWORD *)(__p + 4 * v69) = 1061997773;
              v80 = v70;
              cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v81, (_QWORD *)(a1 + 104), &v80);
              for (i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v81);
                    i != -1;
                    i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v81))
              {
                *(_DWORD *)(__p + 4 * i) = 1061997773;
              }
            }
            v69 = ++v70;
          }
          while (v70 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
        }
        cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(a1, &__p, 5, 1, 0);
        cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v82, v73);
        v82 = -1;
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
      }
    }
    if (!*(_DWORD *)(v39 + 8))
      cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a1);
  }
  if (v85[0])
    operator delete(v85[0]);
  v85[0] = &v86;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v85);
  return 1;
}

void sub_23C5DED48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (__p)
    operator delete(__p);
  __p = &a31;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::FillOneHole(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 8))
    return cv3d::cv::gess::internal::FillTargetHoleMinimumWeight(a1, a2);
  else
    return cv3d::cv::gess::internal::FillTargetHoleEar<cv3d::cv::gess::internal::MinimumWeightEar>(a1, a2);
}

BOOL cv3d::cv::gess::alg::QEMSimplify(cv3d::cv::gess::mesh::PolyMesh *a1, int *a2)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v2 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify(a1, a2, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_23C5DEEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::QuadricErrorMetricSimplify(cv3d::cv::gess::mesh::PolyMesh *a1, int *a2, uint64_t a3)
{
  int v6;
  char v7;
  int v8;
  __int16 v9;
  _BYTE v10[24];
  _QWORD v11[33];

  v11[32] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v7 = *((_BYTE *)a2 + 5);
  v8 = a2[2];
  v6 = *a2;
  cv3d::cv::gess::internal::Simplify::Simplify(v10, a1, &v6);
  if (*(_QWORD *)(a3 + 24))
    std::function<BOOL ()(void)>::operator=(v11, a3);
  cv3d::cv::gess::internal::Simplify::Calculate((cv3d::cv::gess::internal::Simplify *)v10);
  cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)v10);
  return cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(a1);
}

void sub_23C5DEF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x23C5DEF68);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::QEMSimplify()
{
  return 0;
}

BOOL cv3d::cv::gess::alg::GPUEncountersError(cv3d::cv::gess::alg *this, NSError *a2)
{
  cv3d::cv::gess::alg *v2;
  cv3d::cv::gess::alg *v3;
  _BOOL8 v4;

  v2 = this;
  v3 = v2;
  v4 = v2 && -[cv3d::cv::gess::alg code](v2, "code");

  return v4;
}

void sub_23C5DF028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::MPSRaytracingSupported(cv3d::cv::gess::alg *this)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x2426214AC]();
  v3 = MTLCreateSystemDefaultDevice();
  v8[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v8, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "count") <= (unint64_t)this)
  {
    v6 = 0;
  }
  else
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", this);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "supportsRaytracing");

  }
  objc_autoreleasePoolPop(v2);
  return v6;
}

void sub_23C5DF10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ***cv3d::cv::gess::alg::MultipleBufferComponent::MultipleBufferComponent(void ***this, id **a2, void **a3, void **a4)
{
  void *v8;
  uint64_t v9;
  id *v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int64x2_t v46;
  char *v47;
  unint64_t v48;
  dispatch_semaphore_t v49;
  void *v50;
  uint64_t v52;
  int64x2_t v53;
  char *v54;
  _QWORD *v55;

  *this = 0;
  v8 = (void *)MEMORY[0x2426214AC]();
  this[2] = a4;
  this[3] = 0;
  this[1] = a3;
  v9 = operator new();
  *(_QWORD *)(v9 + 48) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = *this;
  *this = (void **)v9;
  if (v10)
    std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100]((uint64_t)this, v10);
  if (this[1])
  {
    v11 = 0;
    do
    {
      v12 = *this;
      v13 = objc_msgSend(**a2, "newBufferWithLength:options:", 32 * (_QWORD)this[2], 0);
      v14 = (unint64_t)v12[3];
      v15 = (uint64_t *)v12[2];
      if ((unint64_t)v15 >= v14)
      {
        v17 = v12[1];
        v18 = ((char *)v15 - v17) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v19 = v14 - (_QWORD)v17;
        v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v55 = v12 + 3;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v12 + 3), v21);
        else
          v22 = 0;
        v23 = (uint64_t *)&v22[8 * v18];
        v24 = &v22[8 * v21];
        v54 = v24;
        *v23 = v13;
        v16 = v23 + 1;
        v53.i64[1] = (uint64_t)(v23 + 1);
        v26 = v12[1];
        v25 = v12[2];
        if (v25 == v26)
        {
          v28 = vdupq_n_s64((unint64_t)v25);
        }
        else
        {
          do
          {
            v27 = *--v25;
            *v25 = 0;
            *--v23 = v27;
          }
          while (v25 != v26);
          v28 = *(int64x2_t *)(v12 + 1);
          v16 = (_QWORD *)v53.i64[1];
          v24 = v54;
        }
        v12[1] = v23;
        v12[2] = v16;
        v53 = v28;
        v29 = (char *)v12[3];
        v12[3] = v24;
        v54 = v29;
        v52 = v28.i64[0];
        std::__split_buffer<objc_object  {objcproto9MTLBuffer}* {__strong}>::~__split_buffer((uint64_t)&v52);
      }
      else
      {
        *v15 = v13;
        v16 = v15 + 1;
      }
      v12[2] = v16;
      v30 = *this;
      v31 = objc_msgSend(**a2, "newBufferWithLength:options:", 16 * (_QWORD)this[2], 0);
      v32 = (unint64_t)v30[6];
      v33 = (uint64_t *)v30[5];
      if ((unint64_t)v33 >= v32)
      {
        v35 = v30[4];
        v36 = ((char *)v33 - v35) >> 3;
        if ((unint64_t)(v36 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v37 = v32 - (_QWORD)v35;
        v38 = v37 >> 2;
        if (v37 >> 2 <= (unint64_t)(v36 + 1))
          v38 = v36 + 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v39 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        v55 = v30 + 6;
        if (v39)
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v30 + 6), v39);
        else
          v40 = 0;
        v41 = (uint64_t *)&v40[8 * v36];
        v42 = &v40[8 * v39];
        v54 = v42;
        *v41 = v31;
        v34 = v41 + 1;
        v53.i64[1] = (uint64_t)(v41 + 1);
        v44 = v30[4];
        v43 = v30[5];
        if (v43 == v44)
        {
          v46 = vdupq_n_s64((unint64_t)v43);
        }
        else
        {
          do
          {
            v45 = *--v43;
            *v43 = 0;
            *--v41 = v45;
          }
          while (v43 != v44);
          v46 = *((int64x2_t *)v30 + 2);
          v34 = (_QWORD *)v53.i64[1];
          v42 = v54;
        }
        v30[4] = v41;
        v30[5] = v34;
        v53 = v46;
        v47 = (char *)v30[6];
        v30[6] = v42;
        v54 = v47;
        v52 = v46.i64[0];
        std::__split_buffer<objc_object  {objcproto9MTLBuffer}* {__strong}>::~__split_buffer((uint64_t)&v52);
      }
      else
      {
        *v33 = v31;
        v34 = v33 + 1;
      }
      v30[5] = v34;
      ++v11;
      v48 = (unint64_t)this[1];
    }
    while (v11 < v48);
  }
  else
  {
    v48 = 0;
  }
  v49 = dispatch_semaphore_create(v48);
  v50 = **this;
  **this = v49;

  objc_autoreleasePoolPop(v8);
  return this;
}

void sub_23C5DF424(_Unwind_Exception *exception_object)
{
  id **v1;
  id *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::alg::MultipleBufferComponent::~MultipleBufferComponent(void ***this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  void *v6;
  _BYTE *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  void *v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  id *v16;

  v2 = (void *)MEMORY[0x2426214AC]();
  v4 = *this + 2;
  v3 = (_QWORD *)*v4;
  if ((void *)*v4 != (*this)[1])
  {
    v5 = 0;
    v3 = (*this)[1];
    do
    {
      v6 = (void *)v3[v5];
      v3[v5] = 0;

      ++v5;
      v3 = (*this)[1];
      v7 = (*this)[2];
    }
    while (v5 < (v7 - (_BYTE *)v3) >> 3);
    v4 = *this + 2;
    while (v7 != (_BYTE *)v3)
    {
      v8 = (void *)*((_QWORD *)v7 - 1);
      v7 -= 8;

    }
  }
  *v4 = v3;
  v10 = *this + 5;
  v9 = (_QWORD *)*v10;
  if ((void *)*v10 != (*this)[4])
  {
    v11 = 0;
    v9 = (*this)[4];
    do
    {
      v12 = (void *)v9[v11];
      v9[v11] = 0;

      ++v11;
      v9 = (*this)[4];
      v13 = (*this)[5];
    }
    while (v11 < (v13 - (_BYTE *)v9) >> 3);
    v10 = *this + 5;
    while (v13 != (_BYTE *)v9)
    {
      v14 = (void *)*((_QWORD *)v13 - 1);
      v13 -= 8;

    }
  }
  *v10 = v9;
  v15 = **this;
  **this = 0;

  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  objc_autoreleasePoolPop(v2);
  v16 = *this;
  *this = 0;
  if (v16)
    std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100]((uint64_t)this, v16);
}

id **cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(cv3d::cv::gess::alg::MPSMeshIntersector *this, const cv3d::cv::gess::mesh::TriMesh *a2)
{
  return cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector((id **)this, (uint64_t)a2, (uint64_t *)this + 1);
}

id **cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(id **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  id *v8;
  id v9;
  id v10;
  id *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  BOOL v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  BOOL v55;
  void *v56;
  void *v57;
  id *v58;
  id v59;
  void *v60;
  uint64_t v61;
  void *v62;
  int v63;
  void *v64;
  void *v65;
  cv3d::cv::gess::alg *v66;
  NSError *v67;
  _BOOL4 v68;
  void *v69;
  uint64_t v70;
  id v71;
  void *v72;
  void *v73;
  cv3d::cv::gess::alg *v74;
  NSError *v75;
  BOOL v76;
  void *context;
  void *v79;
  void *v80;
  id v81;
  uint64_t *v82;
  void *v83;
  void *v84;
  void *v85;
  id v86;
  id v87;
  unsigned int v88;
  void *__p;
  void *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  _BYTE v97[128];
  _QWORD v98[3];

  v98[1] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  v6 = MEMORY[0x2426214AC]();
  v7 = operator new();
  v84 = (void *)v6;
  *(_QWORD *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  v8 = *a1;
  *a1 = (id *)v7;
  if (v8)
  {
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)a1, v8);
    v7 = (uint64_t)*a1;
  }
  *(_BYTE *)(v7 + 32) = 1;
  v9 = MTLCreateSystemDefaultDevice();
  v98[0] = v9;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v98, 1);
  v85 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = MTLCreateSystemDefaultDevice();
  if ((objc_msgSend(v10, "supportsRaytracing") & 1) != 0)
  {
    v11 = *a1;
    v12 = v10;
    v13 = *v11;
    *v11 = v12;
  }
  else
  {
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v13 = v85;
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v92, v97, 16);
    if (v14)
    {
      v15 = *(_QWORD *)v93;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v93 != v15)
            objc_enumerationMutation(v13);
          v17 = *(id *)(*((_QWORD *)&v92 + 1) + 8 * i);
          if (objc_msgSend(v17, "supportsRaytracing"))
          {
            v18 = **a1;
            **a1 = v17;

            goto LABEL_15;
          }

        }
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v92, v97, 16);
        if (v14)
          continue;
        break;
      }
    }
  }
LABEL_15:

  v19 = objc_msgSend(**a1, "newCommandQueue");
  v20 = (*a1)[1];
  (*a1)[1] = (id)v19;

  v21 = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 160);
  v23 = v22 - v21;
  v24 = objc_msgSend(**a1, "newBufferWithLength:options:", 4 * (2 * (v22 - v21) + ((v22 - v21) >> 2)), 0);
  v25 = (*a1)[2];
  (*a1)[2] = (id)v24;

  v26 = (v22 - v21) >> 2;
  v27 = objc_msgSend(**a1, "newBufferWithLength:options:", 12 * v26, 0);
  v28 = (*a1)[3];
  (*a1)[3] = (id)v27;

  v29 = (*a1)[2];
  if (v29 && (*a1)[3])
  {
    v30 = objc_msgSend(v29, "contents");
    v31 = objc_msgSend((*a1)[3], "contents");
    v82 = a3;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
    if (v22 != v21)
    {
      v32 = 0;
      v33 = 0;
      if (v26 <= 1)
        v34 = 1;
      else
        v34 = v23 >> 2;
      v35 = (_DWORD *)(v30 + 8);
      do
      {
        v88 = v33;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a2, &v88, &__p);
        v36 = 0;
        v37 = v35;
        do
        {
          v38 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, *(_DWORD *)(a2 + 176), *((_DWORD *)__p + v36));
          v39 = *(_DWORD *)(v38 + 8);
          *((_QWORD *)v37 - 1) = *(_QWORD *)v38;
          *v37 = v39;
          v37 += 3;
          *(_DWORD *)(v31 + 4 * v36) = v32 + v36;
          ++v36;
        }
        while (v36 != 3);
        ++v33;
        v35 += 9;
        v32 += 3;
        v31 += 12;
      }
      while (v33 != v34);
    }
    if (__p)
    {
      v90 = __p;
      operator delete(__p);
    }
    if (*((_BYTE *)*a1 + 32))
    {
      v40 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE4F0]), "initWithDevice:", **a1);
      v41 = (*a1)[6];
      (*a1)[6] = (id)v40;

      v42 = (*a1)[6];
      v43 = v42;
      v44 = v42 != 0;
      if (v42)
      {
        objc_msgSend(v42, "setFrontFacingWinding:", 1);
        objc_msgSend(v43, "setRayDataType:", 1);
        objc_msgSend(v43, "setRayStride:", 32);
        objc_msgSend(v43, "setIntersectionDataType:", 2);
        objc_msgSend(v43, "setIntersectionStride:", 16);
        cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a1, v82);
      }
      v45 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE500]), "initWithDevice:", **a1);
      v46 = (*a1)[5];
      (*a1)[5] = (id)v45;

      v47 = (*a1)[5];
      if (v47)
      {
        objc_msgSend(v47, "setVertexBuffer:", (*a1)[2]);
        objc_msgSend((*a1)[5], "setVertexStride:", 12);
        objc_msgSend((*a1)[5], "setIndexBuffer:", (*a1)[3]);
        objc_msgSend((*a1)[5], "setIndexType:", 32);
        objc_msgSend((*a1)[5], "setTriangleCount:", v26);
        objc_msgSend((*a1)[5], "rebuild");
      }
      else
      {
        v44 = 0;
      }
    }
    else
    {
      v48 = **a1;
      v87 = 0;
      GetRuntimeMTLLibrary(v48, (uint64_t)&v87);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v49 = v87;
      v50 = objc_alloc_init(MEMORY[0x24BDDD550]);
      objc_msgSend(v50, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
      v51 = (void *)objc_msgSend(v83, "newFunctionWithName:", CFSTR("rtk"));
      objc_msgSend(v50, "setComputeFunction:", v51);

      v52 = **a1;
      v86 = v49;
      v53 = objc_msgSend(v52, "newComputePipelineStateWithDescriptor:options:reflection:error:", v50, 0, 0, &v86);
      v43 = v86;

      v54 = (*a1)[8];
      (*a1)[8] = (id)v53;

      if ((*a1)[8])
        v55 = v49 == 0;
      else
        v55 = 0;
      if (v55)
      {
        objc_msgSend(MEMORY[0x24BDDD4B0], "descriptor");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "setVertexBuffer:", (*a1)[2]);
        objc_msgSend(v56, "setVertexBufferOffset:", 0);
        objc_msgSend(v56, "setVertexStride:", 12);
        objc_msgSend(v56, "setTriangleCount:", v26);
        objc_msgSend(v56, "setIndexBuffer:", (*a1)[3]);
        objc_msgSend(v56, "setIndexBufferOffset:", 0);
        objc_msgSend(v56, "setIndexType:", 1);
        objc_msgSend(MEMORY[0x24BDDD658], "descriptor");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v96 = v56;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v96, 1);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v79, "setGeometryDescriptors:", v57);

        __p = 0;
        v90 = 0;
        v91 = 0;
        v58 = *a1;
        v59 = **a1;
        if (v59)
        {
          objc_msgSend(v59, "accelerationStructureSizesWithDescriptor:", v79);
          v58 = *a1;
          v60 = __p;
        }
        else
        {
          v60 = 0;
        }
        v80 = (void *)objc_msgSend(*v58, "newAccelerationStructureWithSize:", v60);
        v81 = (id)objc_msgSend(**a1, "newBufferWithLength:options:", 4, 0);
        context = (void *)MEMORY[0x2426214AC]();
        v61 = objc_msgSend(**a1, "newBufferWithLength:options:", v90, 32);
        v62 = (void *)v61;
        v63 = 0;
        v64 = 0;
        if (v80 && v81 && v61)
        {
          objc_msgSend((*a1)[1], "commandBuffer");
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v64, "accelerationStructureCommandEncoder");
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v65, "buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:", v80, v79, v62, 0);
          objc_msgSend(v65, "writeCompactedAccelerationStructureSize:toBuffer:offset:", v80, v81, 0);
          cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v65, "endEncoding"));
          objc_msgSend(v64, "commit");
          objc_msgSend(v64, "waitUntilCompleted");
          objc_msgSend(v64, "error");
          v66 = (cv3d::cv::gess::alg *)objc_claimAutoreleasedReturnValue();
          v68 = cv3d::cv::gess::alg::GPUEncountersError(v66, v67);

          v63 = !v68;
        }

        objc_autoreleasePoolPop(context);
        if (v63)
        {
          v69 = (void *)MEMORY[0x2426214AC]();
          v70 = objc_msgSend(**a1, "newAccelerationStructureWithSize:", *(unsigned int *)objc_msgSend(objc_retainAutorelease(v81), "contents"));
          v71 = (*a1)[7];
          (*a1)[7] = (id)v70;

          if ((*a1)[7])
          {
            objc_msgSend((*a1)[1], "commandBuffer");
            v72 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v72, "accelerationStructureCommandEncoder");
            v73 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v73, "copyAndCompactAccelerationStructure:toAccelerationStructure:", v80, (*a1)[7]);
            cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v73, "endEncoding"));
            objc_msgSend(v72, "commit");
            objc_msgSend(v72, "waitUntilCompleted");
            objc_msgSend(v72, "error");
            v74 = (cv3d::cv::gess::alg *)objc_claimAutoreleasedReturnValue();
            v76 = cv3d::cv::gess::alg::GPUEncountersError(v74, v75);

            v44 = !v76;
            v64 = v72;
          }
          else
          {
            v44 = 0;
          }
          objc_autoreleasePoolPop(v69);
        }
        else
        {
          v44 = 0;
        }

      }
      else
      {
        v44 = 0;
      }

    }
  }
  else
  {
    v44 = 0;
  }

  objc_autoreleasePoolPop(v84);
  *((_BYTE *)a1 + 16) = v44;
  return a1;
}

void sub_23C5DFDBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  id **v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id *v30;

  v30 = *v21;
  *v21 = 0;
  if (v30)
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)v21, v30);
  _Unwind_Resume(a1);
}

_QWORD *cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *a2;
  result[1] = *a2;
  if (*(_BYTE *)(*result + 32))
  {
    v3 = *(void **)(*result + 48);
    if (v2 >= 3)
      v4 = 0;
    else
      v4 = v2;
    return (_QWORD *)objc_msgSend(v3, "setCullMode:", v4);
  }
  return result;
}

id **cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(id **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  id *v9;
  id v10;
  uint64_t v11;
  id v12;
  id *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  BOOL v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  id v56;
  BOOL v57;
  void *v58;
  void *v59;
  id *v60;
  id v61;
  void *v62;
  uint64_t v63;
  void *v64;
  int v65;
  void *v66;
  void *v67;
  cv3d::cv::gess::alg *v68;
  NSError *v69;
  _BOOL4 v70;
  void *v71;
  uint64_t v72;
  id v73;
  void *v74;
  void *v75;
  cv3d::cv::gess::alg *v76;
  NSError *v77;
  BOOL v78;
  void *context;
  void *v81;
  void *v82;
  id v83;
  uint64_t *v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  id v89;
  unsigned int v90;
  void *__p;
  void *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  void *v98;
  _BYTE v99[128];
  _QWORD v100[3];

  v100[1] = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  v86 = (void *)MEMORY[0x2426214AC]();
  v8 = operator new();
  *(_QWORD *)(v8 + 64) = 0;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  v9 = *a1;
  *a1 = (id *)v8;
  if (v9)
  {
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)a1, v9);
    v8 = (uint64_t)*a1;
  }
  *(_BYTE *)(v8 + 32) = 1;
  v10 = MTLCreateSystemDefaultDevice();
  v100[0] = v10;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v100, 1);
  v87 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
  {
    v12 = MTLCreateSystemDefaultDevice();
    if ((objc_msgSend(v12, "supportsRaytracing") & 1) != 0)
    {
      v13 = *a1;
      v14 = v12;
      v15 = *v13;
      *v13 = v14;
    }
    else
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v15 = v87;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v94, v99, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v95;
        while (2)
        {
          for (i = 0; i != v16; ++i)
          {
            if (*(_QWORD *)v95 != v17)
              objc_enumerationMutation(v15);
            v19 = *(id *)(*((_QWORD *)&v94 + 1) + 8 * i);
            if (objc_msgSend(v19, "supportsRaytracing"))
            {
              v20 = **a1;
              **a1 = v19;

              goto LABEL_17;
            }

          }
          v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v94, v99, 16);
          if (v16)
            continue;
          break;
        }
      }
    }
LABEL_17:

  }
  else
  {
    objc_msgSend(v87, "objectAtIndexedSubscript:", **(_QWORD **)a4);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = **a1;
    **a1 = (id)v11;
  }

  v21 = objc_msgSend(**a1, "newCommandQueue");
  v22 = (*a1)[1];
  (*a1)[1] = (id)v21;

  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = v24 - v23;
  v26 = objc_msgSend(**a1, "newBufferWithLength:options:", 4 * (2 * (v24 - v23) + ((v24 - v23) >> 2)), 0);
  v27 = (*a1)[2];
  (*a1)[2] = (id)v26;

  v28 = (v24 - v23) >> 2;
  v29 = objc_msgSend(**a1, "newBufferWithLength:options:", 12 * v28, 0);
  v30 = (*a1)[3];
  (*a1)[3] = (id)v29;

  v31 = (*a1)[2];
  if (v31 && (*a1)[3])
  {
    v32 = objc_msgSend(v31, "contents");
    v33 = objc_msgSend((*a1)[3], "contents");
    v84 = a3;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
    if (v24 != v23)
    {
      v34 = 0;
      v35 = 0;
      if (v28 <= 1)
        v36 = 1;
      else
        v36 = v25 >> 2;
      v37 = (_DWORD *)(v32 + 8);
      do
      {
        v90 = v35;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a2, &v90, &__p);
        v38 = 0;
        v39 = v37;
        do
        {
          v40 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, *(_DWORD *)(a2 + 176), *((_DWORD *)__p + v38));
          v41 = *(_DWORD *)(v40 + 8);
          *((_QWORD *)v39 - 1) = *(_QWORD *)v40;
          *v39 = v41;
          v39 += 3;
          *(_DWORD *)(v33 + 4 * v38) = v34 + v38;
          ++v38;
        }
        while (v38 != 3);
        ++v35;
        v37 += 9;
        v34 += 3;
        v33 += 12;
      }
      while (v35 != v36);
    }
    if (__p)
    {
      v92 = __p;
      operator delete(__p);
    }
    if (*((_BYTE *)*a1 + 32))
    {
      v42 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE4F0]), "initWithDevice:", **a1);
      v43 = (*a1)[6];
      (*a1)[6] = (id)v42;

      v44 = (*a1)[6];
      v45 = v44;
      v46 = v44 != 0;
      if (v44)
      {
        objc_msgSend(v44, "setFrontFacingWinding:", 1);
        objc_msgSend(v45, "setRayDataType:", 1);
        objc_msgSend(v45, "setRayStride:", 32);
        objc_msgSend(v45, "setIntersectionDataType:", 2);
        objc_msgSend(v45, "setIntersectionStride:", 16);
        cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a1, v84);
      }
      v47 = objc_msgSend(objc_alloc(MEMORY[0x24BDDE500]), "initWithDevice:", **a1);
      v48 = (*a1)[5];
      (*a1)[5] = (id)v47;

      v49 = (*a1)[5];
      if (v49)
      {
        objc_msgSend(v49, "setVertexBuffer:", (*a1)[2]);
        objc_msgSend((*a1)[5], "setVertexStride:", 12);
        objc_msgSend((*a1)[5], "setIndexBuffer:", (*a1)[3]);
        objc_msgSend((*a1)[5], "setIndexType:", 32);
        objc_msgSend((*a1)[5], "setTriangleCount:", v28);
        objc_msgSend((*a1)[5], "rebuild");
      }
      else
      {
        v46 = 0;
      }
    }
    else
    {
      v50 = **a1;
      v89 = 0;
      GetRuntimeMTLLibrary(v50, (uint64_t)&v89);
      v85 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = v89;
      v52 = objc_alloc_init(MEMORY[0x24BDDD550]);
      objc_msgSend(v52, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
      v53 = (void *)objc_msgSend(v85, "newFunctionWithName:", CFSTR("rtk"));
      objc_msgSend(v52, "setComputeFunction:", v53);

      v54 = **a1;
      v88 = v51;
      v55 = objc_msgSend(v54, "newComputePipelineStateWithDescriptor:options:reflection:error:", v52, 0, 0, &v88);
      v45 = v88;

      v56 = (*a1)[8];
      (*a1)[8] = (id)v55;

      if ((*a1)[8])
        v57 = v51 == 0;
      else
        v57 = 0;
      if (v57)
      {
        objc_msgSend(MEMORY[0x24BDDD4B0], "descriptor");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "setVertexBuffer:", (*a1)[2]);
        objc_msgSend(v58, "setVertexBufferOffset:", 0);
        objc_msgSend(v58, "setVertexStride:", 12);
        objc_msgSend(v58, "setTriangleCount:", v28);
        objc_msgSend(v58, "setIndexBuffer:", (*a1)[3]);
        objc_msgSend(v58, "setIndexBufferOffset:", 0);
        objc_msgSend(v58, "setIndexType:", 1);
        objc_msgSend(MEMORY[0x24BDDD658], "descriptor");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v98 = v58;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", &v98, 1);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "setGeometryDescriptors:", v59);

        __p = 0;
        v92 = 0;
        v93 = 0;
        v60 = *a1;
        v61 = **a1;
        if (v61)
        {
          objc_msgSend(v61, "accelerationStructureSizesWithDescriptor:", v81);
          v60 = *a1;
          v62 = __p;
        }
        else
        {
          v62 = 0;
        }
        v82 = (void *)objc_msgSend(*v60, "newAccelerationStructureWithSize:", v62);
        v83 = (id)objc_msgSend(**a1, "newBufferWithLength:options:", 4, 0);
        context = (void *)MEMORY[0x2426214AC]();
        v63 = objc_msgSend(**a1, "newBufferWithLength:options:", v92, 32);
        v64 = (void *)v63;
        v65 = 0;
        v66 = 0;
        if (v82 && v83 && v63)
        {
          objc_msgSend((*a1)[1], "commandBuffer");
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "accelerationStructureCommandEncoder");
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v67, "buildAccelerationStructure:descriptor:scratchBuffer:scratchBufferOffset:", v82, v81, v64, 0);
          objc_msgSend(v67, "writeCompactedAccelerationStructureSize:toBuffer:offset:", v82, v83, 0);
          cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v67, "endEncoding"));
          objc_msgSend(v66, "commit");
          objc_msgSend(v66, "waitUntilCompleted");
          objc_msgSend(v66, "error");
          v68 = (cv3d::cv::gess::alg *)objc_claimAutoreleasedReturnValue();
          v70 = cv3d::cv::gess::alg::GPUEncountersError(v68, v69);

          v65 = !v70;
        }

        objc_autoreleasePoolPop(context);
        if (v65)
        {
          v71 = (void *)MEMORY[0x2426214AC]();
          v72 = objc_msgSend(**a1, "newAccelerationStructureWithSize:", *(unsigned int *)objc_msgSend(objc_retainAutorelease(v83), "contents"));
          v73 = (*a1)[7];
          (*a1)[7] = (id)v72;

          if ((*a1)[7])
          {
            objc_msgSend((*a1)[1], "commandBuffer");
            v74 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v74, "accelerationStructureCommandEncoder");
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v75, "copyAndCompactAccelerationStructure:toAccelerationStructure:", v82, (*a1)[7]);
            cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v75, "endEncoding"));
            objc_msgSend(v74, "commit");
            objc_msgSend(v74, "waitUntilCompleted");
            objc_msgSend(v74, "error");
            v76 = (cv3d::cv::gess::alg *)objc_claimAutoreleasedReturnValue();
            v78 = cv3d::cv::gess::alg::GPUEncountersError(v76, v77);

            v46 = !v78;
            v66 = v74;
          }
          else
          {
            v46 = 0;
          }
          objc_autoreleasePoolPop(v71);
        }
        else
        {
          v46 = 0;
        }

      }
      else
      {
        v46 = 0;
      }

    }
  }
  else
  {
    v46 = 0;
  }

  objc_autoreleasePoolPop(v86);
  *((_BYTE *)a1 + 16) = v46;
  return a1;
}

void sub_23C5E07DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  id **v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id *v30;

  v30 = *v21;
  *v21 = 0;
  if (v30)
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)v21, v30);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector(void ***this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id *v11;

  v2 = (void *)MEMORY[0x2426214AC]();
  objc_msgSend((*this)[2], "setPurgeableState:", 4);
  v3 = (*this)[2];
  (*this)[2] = 0;

  objc_msgSend((*this)[3], "setPurgeableState:", 4);
  v4 = (*this)[3];
  (*this)[3] = 0;

  v5 = (*this)[1];
  (*this)[1] = 0;

  v6 = **this;
  **this = 0;

  v7 = (*this)[6];
  (*this)[6] = 0;

  v8 = (*this)[5];
  (*this)[5] = 0;

  v9 = (*this)[7];
  (*this)[7] = 0;

  v10 = (*this)[8];
  (*this)[8] = 0;

  objc_autoreleasePoolPop(v2);
  v11 = *this;
  *this = 0;
  if (v11)
    std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100]((uint64_t)this, v11);
}

double cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions(uint64_t a1, double *a2)
{
  double result;

  result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::initialized(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  return *((unsigned __int8 *)this + 16);
}

BOOL cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  id *v21;
  cv3d::cv::gess::util::os *v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  cv3d::cv::gess::alg *v29;
  NSError *v30;
  _BOOL4 v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  void *v38;
  void *context;
  unint64_t v41;
  int64x2_t v42;
  unint64_t v43;
  int64x2_t v44;
  int v45;
  int v46;

  context = (void *)MEMORY[0x2426214AC]();
  v5 = *a2;
  v6 = a2[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 4);
  v38 = (void *)objc_msgSend(**(id **)a1, "newBufferWithLength:options:", 0x5555555555555560 * ((v6 - *a2) >> 4), 0);
  v8 = (void *)objc_msgSend(**(id **)a1, "newBufferWithLength:options:", 16 * v7, 0);
  v9 = objc_retainAutorelease(v38);
  v10 = objc_msgSend(v9, "contents");
  if (v6 != v5)
  {
    v11 = 0;
    if (v7 <= 1)
      v12 = 1;
    else
      v12 = v7;
    v13 = *a2;
    v14 = v10 + 16;
    do
    {
      v15 = v13 + v11;
      v16 = *(_DWORD *)(v15 + 24);
      *(_QWORD *)v14 = *(_QWORD *)(v15 + 16);
      *(_DWORD *)(v14 + 8) = v16;
      v17 = *a2 + v11;
      v18 = *(_DWORD *)(v17 + 8);
      *(_QWORD *)(v14 - 16) = *(_QWORD *)v17;
      *(_DWORD *)(v14 - 8) = v18;
      v13 = *a2;
      v19 = *a2 + v11;
      *(_DWORD *)(v14 - 4) = *(_DWORD *)(v19 + 32);
      *(_DWORD *)(v14 + 12) = *(_DWORD *)(v19 + 36);
      v11 += 48;
      v14 += 32;
      --v12;
    }
    while (v12);
  }
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 8), "commandBuffer");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(id **)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 32))
  {
    v22 = (cv3d::cv::gess::util::os *)objc_msgSend(v21[6], "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v20, *(_DWORD *)(a1 + 12) == 1, v9, 0, v8, 0, v7, v21[5]);
  }
  else
  {
    v23 = *(int *)(a1 + 8);
    if (*(_DWORD *)(a1 + 12) == 1)
      v24 = 1;
    else
      v24 = 2;
    v46 = v24;
    if (v23 > 2)
      v25 = 5;
    else
      v25 = dword_23C60CCC0[v23];
    v45 = v25;
    v26 = objc_msgSend(v21[8], "maxTotalThreadsPerThreadgroup");
    if (v26 >= v7)
      v27 = v7;
    else
      v27 = v26;
    objc_msgSend(v20, "computeCommandEncoder");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "setBuffer:offset:atIndex:", v9, 0, 0);
    objc_msgSend(v28, "setBuffer:offset:atIndex:", v8, 0, 1);
    objc_msgSend(v28, "setAccelerationStructure:atBufferIndex:", *(_QWORD *)(*(_QWORD *)a1 + 56), 2);
    objc_msgSend(v28, "useResource:usage:", *(_QWORD *)(*(_QWORD *)a1 + 56), 1);
    objc_msgSend(v28, "setBytes:length:atIndex:", &v46, 4, 3);
    objc_msgSend(v28, "setBytes:length:atIndex:", &v45, 4, 4);
    objc_msgSend(v28, "setComputePipelineState:", *(_QWORD *)(*(_QWORD *)a1 + 64));
    v43 = v7;
    v44 = vdupq_n_s64(1uLL);
    v41 = v27;
    v42 = v44;
    objc_msgSend(v28, "dispatchThreads:threadsPerThreadgroup:", &v43, &v41);
    objc_msgSend(v28, "endEncoding");

  }
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v22);
  objc_msgSend(v20, "commit");
  objc_msgSend(v20, "waitUntilCompleted");
  objc_msgSend(v20, "error");
  v29 = (cv3d::cv::gess::alg *)objc_claimAutoreleasedReturnValue();
  v31 = cv3d::cv::gess::alg::GPUEncountersError(v29, v30);

  v32 = objc_retainAutorelease(v8);
  v33 = objc_msgSend(v32, "contents");
  if (v6 != v5)
  {
    if (v7 <= 1)
      v34 = 1;
    else
      v34 = v7;
    v35 = (_DWORD *)(*a3 + 8);
    v36 = v33 + 8;
    do
    {
      *(v35 - 2) = *(_DWORD *)(v36 - 8);
      *(v35 - 1) = *(_DWORD *)(v36 - 4);
      *v35 = *(_QWORD *)v36;
      v35[1] = *(_DWORD *)(v36 + 4);
      v35 += 4;
      v36 += 16;
      --v34;
    }
    while (v34);
  }

  objc_autoreleasePoolPop(context);
  return !v31;
}

void sub_23C5E0DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::MPSMeshIntersector::intersectRay(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  uint64_t v5;
  _OWORD *v6;
  _BOOL8 v7;
  _DWORD *v8;
  __int128 v10;
  __int128 v11;
  void *__p[3];
  uint64_t v13[3];

  v10 = a2[1];
  v11 = *a2;
  v5 = *((_QWORD *)a2 + 4);
  v6 = operator new(0x30uLL);
  v13[1] = (uint64_t)(v6 + 3);
  v13[2] = (uint64_t)(v6 + 3);
  *v6 = v11;
  v6[1] = v10;
  *((_QWORD *)v6 + 4) = v5;
  v13[0] = (uint64_t)v6;
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, 1uLL);
  v7 = cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays(a1, v13, __p);
  v8 = __p[0];
  *a3 = *(_DWORD *)__p[0];
  a3[1] = v8[1];
  a3[2] = v8[2];
  a3[3] = v8[3];
  __p[1] = v8;
  operator delete(v8);
  operator delete(v6);
  return v7;
}

void sub_23C5E0EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);
  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::intersectRaysMultipleBuffer(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  dispatch_semaphore_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  cv3d::cv::gess::util::os *v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  cv3d::cv::gess::alg *v35;
  NSError *v36;
  _BOOL4 v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v44;
  void *context;
  unint64_t v46;
  int64x2_t v47;
  unint64_t v48;
  int64x2_t v49;
  _QWORD v50[4];
  _QWORD v51[5];
  id v52;
  void *__p;
  void *p_p;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  id v58;
  _QWORD v59[7];
  _BYTE v60[24];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x2426214AC]();
  dispatch_semaphore_wait(**(dispatch_semaphore_t **)a2, 0xFFFFFFFFFFFFFFFFLL);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(dispatch_semaphore_t **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4) >= *(_QWORD *)(a2 + 16))
    v12 = *(_QWORD *)(a2 + 16);
  else
    v12 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4);
  *(_QWORD *)(a2 + 24) = (unint64_t)(v10 + 1) % *(_QWORD *)(a2 + 8);
  v13 = -[objc_class contents](objc_retainAutorelease(v11[1][v10].isa), "contents");
  if (v12)
  {
    v14 = 0;
    v15 = *a3;
    v16 = v13 + 16;
    v17 = v12;
    do
    {
      v18 = v15 + v14;
      v19 = *(_DWORD *)(v18 + 24);
      *(_QWORD *)v16 = *(_QWORD *)(v18 + 16);
      *(_DWORD *)(v16 + 8) = v19;
      v20 = *a3 + v14;
      v21 = *(_DWORD *)(v20 + 8);
      *(_QWORD *)(v16 - 16) = *(_QWORD *)v20;
      *(_DWORD *)(v16 - 8) = v21;
      v15 = *a3;
      v22 = *a3 + v14;
      *(_DWORD *)(v16 - 4) = *(_DWORD *)(v22 + 32);
      *(_DWORD *)(v16 + 12) = *(_DWORD *)(v22 + 36);
      v14 += 48;
      v16 += 32;
      --v17;
    }
    while (v17);
  }
  objc_msgSend(*(id *)(*(_QWORD *)a1 + 8), "commandBuffer");
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)v23;
  if ((a5 & 1) == 0)
  {
    v44 = (void *)v23;
    __p = 0;
    p_p = &__p;
    v55 = 0x3032000000;
    v56 = __Block_byref_object_copy_;
    v57 = __Block_byref_object_dispose_;
    v58 = **(id **)a2;
    v51[0] = 0;
    v51[1] = v51;
    v51[2] = 0x3032000000;
    v51[3] = __Block_byref_object_copy_;
    v51[4] = __Block_byref_object_dispose_;
    v52 = *(id *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 8 * v10);
    v50[0] = 0;
    v50[1] = v50;
    v50[2] = 0x2020000000;
    v50[3] = v12;
    v59[0] = MEMORY[0x24BDAC760];
    v59[1] = 3321888768;
    v59[2] = ___ZN4cv3d2cv4gess3alg18MPSMeshIntersector27intersectRaysMultipleBufferERNS2_23MultipleBufferComponentERKNSt3__16vectorINS1_4math4RayTIfEENS6_9allocatorISA_EEEENS6_8functionIFvRKNS7_INS8_16RayIntersectionTIfjEENSB_ISI_EEEEEEEb_block_invoke;
    v59[3] = &unk_250D4B180;
    v59[4] = &__p;
    v59[5] = v51;
    v25 = v60;
    v59[6] = v50;
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v60, a4);
    objc_msgSend(v44, "addCompletedHandler:", v59);
    if (v61 == v60)
    {
      v26 = 4;
      v24 = v44;
    }
    else
    {
      v24 = v44;
      if (!v61)
      {
LABEL_13:
        _Block_object_dispose(v50, 8);
        _Block_object_dispose(v51, 8);

        _Block_object_dispose(&__p, 8);
        goto LABEL_14;
      }
      v26 = 5;
      v25 = v61;
    }
    (*(void (**)(_QWORD *))(*v25 + 8 * v26))(v25);
    goto LABEL_13;
  }
LABEL_14:
  v27 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 32))
  {
    v28 = (cv3d::cv::gess::util::os *)objc_msgSend(*(id *)(v27 + 48), "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v24, a1[3] == 1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8 * v10), 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 8 * v10), 0, v12, *(_QWORD *)(v27 + 40));
  }
  else
  {
    v29 = a1[2];
    if (a1[3] == 1)
      v30 = 1;
    else
      v30 = 2;
    LODWORD(__p) = v30;
    if (v29 > 2)
      v31 = 5;
    else
      v31 = dword_23C60CCC0[v29];
    LODWORD(v51[0]) = v31;
    v32 = objc_msgSend(*(id *)(v27 + 64), "maxTotalThreadsPerThreadgroup");
    if (v32 >= v12)
      v33 = v12;
    else
      v33 = v32;
    objc_msgSend(v24, "computeCommandEncoder");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "setBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8 * v10), 0, 0);
    objc_msgSend(v34, "setBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 8 * v10), 0, 1);
    objc_msgSend(v34, "setAccelerationStructure:atBufferIndex:", *(_QWORD *)(*(_QWORD *)a1 + 56), 2);
    objc_msgSend(v34, "useResource:usage:", *(_QWORD *)(*(_QWORD *)a1 + 56), 1);
    objc_msgSend(v34, "setBytes:length:atIndex:", &__p, 4, 3);
    objc_msgSend(v34, "setBytes:length:atIndex:", v51, 4, 4);
    objc_msgSend(v34, "setComputePipelineState:", *(_QWORD *)(*(_QWORD *)a1 + 64));
    v48 = v12;
    v49 = vdupq_n_s64(1uLL);
    v46 = v33;
    v47 = v49;
    objc_msgSend(v34, "dispatchThreads:threadsPerThreadgroup:", &v48, &v46);
    objc_msgSend(v34, "endEncoding");

  }
  cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v28);
  objc_msgSend(v24, "commit");
  if (a5)
  {
    objc_msgSend(v24, "waitUntilCompleted");
    objc_msgSend(v24, "error");
    v35 = (cv3d::cv::gess::alg *)objc_claimAutoreleasedReturnValue();
    v37 = cv3d::cv::gess::alg::GPUEncountersError(v35, v36);

    dispatch_semaphore_signal(**(dispatch_semaphore_t **)a2);
    v38 = objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)(*(_QWORD *)a2 + 32) + 8 * v10)), "contents");
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(&__p, v12);
    if (v12)
    {
      v39 = (char *)__p + 8;
      v40 = v38 + 8;
      do
      {
        *(v39 - 2) = *(_DWORD *)(v40 - 8);
        *(v39 - 1) = *(_DWORD *)(v40 - 4);
        *v39 = *(_QWORD *)v40;
        v39[1] = *(_DWORD *)(v40 + 4);
        v39 += 4;
        v40 += 16;
        --v12;
      }
      while (v12);
    }
    v41 = *(_QWORD *)(a4 + 24);
    if (!v41)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 48))(v41, &__p);
    v42 = !v37;
    if (__p)
    {
      p_p = __p;
      operator delete(__p);
    }
  }
  else
  {
    v42 = 1;
  }

  objc_autoreleasePoolPop(context);
  return v42;
}

void sub_23C5E143C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void ___ZN4cv3d2cv4gess3alg18MPSMeshIntersector27intersectRaysMultipleBufferERNS2_23MultipleBufferComponentERKNSt3__16vectorINS1_4math4RayTIfEENS6_9allocatorISA_EEEENS6_8functionIFvRKNS7_INS8_16RayIntersectionTIfjEENSB_ISI_EEEEEEEb_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[3];

  v3 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[4] + 8) + 40));
  v4 = objc_msgSend(objc_retainAutorelease(*(id *)(*(_QWORD *)(a1[5] + 8) + 40)), "contents");
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
  if (*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24))
  {
    v5 = 0;
    v6 = (char *)__p[0] + 8;
    v7 = v4 + 8;
    do
    {
      *(v6 - 2) = *(_DWORD *)(v7 - 8);
      *(v6 - 1) = *(_DWORD *)(v7 - 4);
      *v6 = *(_QWORD *)v7;
      v6[1] = *(_DWORD *)(v7 + 4);
      ++v5;
      v6 += 4;
      v7 += 16;
    }
    while (v5 < *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24));
  }
  v8 = a1[10];
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 48))(v8, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

}

void sub_23C5E1630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c102_ZTSNSt3__18functionIFvRKNS_6vectorIN4cv3d2cv4gess4math16RayIntersectionTIfjEENS_9allocatorIS7_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

_QWORD *__destroy_helper_block_ea8_56c102_ZTSNSt3__18functionIFvRKNS_6vectorIN4cv3d2cv4gess4math16RayIntersectionTIfjEENS_9allocatorIS7_EEEEEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 56);
  result = *(_QWORD **)(a1 + 80);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  return **(_QWORD **)this;
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMTLAccelerationStructureInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 32))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)this + 56);
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMPSRayIntersectorInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 32))
    return *(_QWORD *)(*(_QWORD *)this + 48);
  else
    return 0;
}

uint64_t cv3d::cv::gess::alg::MPSMeshIntersector::getMPSTriangleAccelerationStructureInternal(cv3d::cv::gess::alg::MPSMeshIntersector *this)
{
  if (*(_BYTE *)(*(_QWORD *)this + 32))
    return *(_QWORD *)(*(_QWORD *)this + 40);
  else
    return 0;
}

uint64_t cv3d::cv::gess::alg::RayCast(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v10[3];
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(v10, a2, &v11);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize(a3, v5);
  v13 = 0;
  v6 = operator new(0x20uLL);
  *v6 = &off_250D4B1C0;
  v6[1] = a1;
  v6[2] = a3;
  v6[3] = v10;
  v13 = v6;
  cv3d::cv::gess::internal::parallel_for (v5, (uint64_t)v12, 0);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v8 = 5;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector(v10);
  return 1;
}

void sub_23C5E17FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector(&a10);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 16 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__append(a1, a2 - v2);
  }
}

uint64_t std::__split_buffer<objc_object  {objcproto9MTLBuffer}* {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  void *__p;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      v14 = &v7[2 * a2];
      do
      {
        *v7 = -1082130432;
        v7[1] = 0;
        v7 += 2;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v21 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    else
      v13 = 0;
    v15 = &v13[16 * v10];
    __p = v13;
    v18 = v15;
    v20 = &v13[16 * v12];
    v16 = &v15[16 * a2];
    do
    {
      *(_QWORD *)v15 = -1082130432;
      *((_QWORD *)v15 + 1) = 0;
      v15 += 16;
    }
    while (v15 != v16);
    v19 = v16;
    std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__swap_out_circular_buffer(a1, &__p);
    if (v19 != v18)
      v19 += (v18 - v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_23C5E19F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::default_delete<cv3d::cv::gess::alg::MultipleBufferComponent::impl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = a2 + 4;
    std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = a2 + 1;
    std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v4);

    return MEMORY[0x2426211B8](a2, 0x80C40C96DFCA5);
  }
  return result;
}

void std::vector<objc_object  {objcproto9MTLBuffer}* {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<cv3d::cv::gess::alg::MPSMeshIntersector::impl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x2426211B8);
  }
}

void std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D4B1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D4B1C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0,std::allocator<cv3d::cv::gess::alg::RayCast(std::vector<cv3d::cv::gess::math::RayT<float>> const&,cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>> &)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *__p[3];
  void *v21;
  _BYTE *v22;

  v4 = *a2;
  v5 = *a3;
  v6 = *a3 - *a2;
  if (v6 >= 0x40000)
    v7 = 0x40000;
  else
    v7 = *a3 - *a2;
  std::vector<cv3d::cv::gess::math::RayT<float>>::vector(&v21, v7);
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::vector(__p, v7);
  if (v5 > v4)
  {
    v8 = 48 * v4;
    v9 = 16 * v4;
    v10 = v6;
    do
    {
      if (v10 >= v6)
        v11 = v6;
      else
        v11 = v10;
      if (v11 >= 0x40000)
        v12 = 0x40000;
      else
        v12 = v11;
      if (v5 - v4 >= v7)
        v13 = v7;
      else
        v13 = v5 - v4;
      if (v7 > v5 - v4)
      {
        std::vector<cv3d::cv::gess::math::RayT<float>>::resize((uint64_t *)&v21, v13);
        std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize((uint64_t *)__p, 0xAAAAAAAAAAAAAAABLL * ((v22 - (_BYTE *)v21) >> 4));
      }
      if (v13)
      {
        v14 = 0;
        do
        {
          v15 = **(_QWORD **)(a1 + 8) + v8 + v14;
          v16 = (char *)v21 + v14;
          *(_OWORD *)v16 = *(_OWORD *)v15;
          *((_OWORD *)v16 + 1) = *(_OWORD *)(v15 + 16);
          *((_QWORD *)v16 + 4) = *(_QWORD *)(v15 + 32);
          v14 += 48;
        }
        while (48 * v12 != v14);
      }
      cv3d::cv::gess::alg::MPSMeshIntersector::intersectRays(*(_QWORD *)(a1 + 24), (uint64_t *)&v21, __p);
      if (v13)
      {
        v17 = 0;
        do
        {
          v18 = (char *)__p[0] + v17;
          v19 = **(_QWORD **)(a1 + 16) + v9 + v17;
          *(_QWORD *)v19 = *(_QWORD *)((char *)__p[0] + v17);
          *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
          *(_DWORD *)(v19 + 12) = *((_DWORD *)v18 + 3);
          v17 += 16;
        }
        while (16 * v12 != v17);
      }
      v4 += v7;
      v10 -= v7;
      v8 += 48 * v7;
      v9 += 16 * v7;
    }
    while (v4 < v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_23C5E1E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::Parameterize(uint64_t a1, float *a2, uint64_t a3)
{
  std::chrono::system_clock::time_point v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  float *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t *v17;
  std::vector<int>::pointer end;
  int *v19;
  std::vector<int>::pointer begin;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  int *v26;
  int v27;
  _DWORD *v28;
  unint64_t i;
  float32x4_t *v30;
  float32x4_t v31;
  std::vector<int>::pointer v32;
  int *v33;
  std::vector<int>::pointer v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  int *v40;
  int v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  float32x4_t *v50;
  float32x4_t *v51;
  float32x4_t *v52;
  float32x4_t v53;
  std::vector<int>::pointer v54;
  std::vector<int>::pointer v55;
  float32x4_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t j;
  uint64_t v60;
  unsigned int v61;
  float v62;
  float32x4_t *v63;
  float32x4_t v64;
  float v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  unsigned int *v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  float32x4_t *v89;
  unsigned int v90;
  int v91;
  float v92;
  uint64_t v93;
  unsigned int *v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t v100;
  float v101;
  float v102;
  std::vector<unsigned int>::pointer v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unsigned int *v108;
  _QWORD *v109;
  uint64_t v110;
  unsigned int *v111;
  signed int v112;
  float32x4_t *v113;
  float32x4_t *v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  float v118;
  unsigned int *v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  float32x4_t v129;
  float v130;
  float v132;
  int v133;
  uint64_t v134;
  unsigned int *v135;
  _QWORD *v136;
  uint64_t v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float v144;
  float32x4_t v145;
  float v146;
  float v148;
  std::vector<unsigned int>::pointer v149;
  std::vector<unsigned int>::pointer v150;
  _DWORD *v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  std::string *v166;
  std::string::size_type v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int v174;
  int v175;
  unsigned int *v176;
  _QWORD *v177;
  uint64_t v178;
  unsigned int *v179;
  void **v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  char *v187;
  char *v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float v195;
  uint64_t v196;
  float v197;
  float v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unsigned int v207;
  uint64_t v208;
  int32x2_t v209;
  uint64_t v210;
  unsigned __int8 v211;
  unsigned __int8 v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t v215;
  float v216;
  unsigned int v217;
  __float2 v218;
  float32x2_t v219;
  float32x2_t v220;
  uint64_t **v221;
  float32x2_t v222;
  unint64_t v223;
  float32x2_t v224;
  float32x2_t v225;
  float v226;
  float v227;
  __float2 v228;
  float32x2_t v229;
  unint64_t v230;
  uint64_t v231;
  unsigned int v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  float *v236;
  uint64_t *v237;
  int v238;
  unint64_t v239;
  __int128 *v240;
  uint64_t v241;
  float *v242;
  uint64_t v243;
  float v244;
  float *v245;
  float v246;
  uint64_t v247;
  uint64_t v248;
  std::chrono::system_clock::time_point v249;
  std::chrono::system_clock::time_point v250;
  uint64_t v251;
  std::chrono::system_clock::time_point v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  std::chrono::system_clock::time_point v256;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  float *v259;
  uint64_t v260;
  uint64_t **v261;
  unsigned int v262;
  unint64_t __n;
  float v264;
  int v265;
  float32x4_t v266;
  float32x4_t v267;
  unint64_t v268;
  int v269;
  float v270;
  float32x4_t v271;
  float32x4_t v272;
  uint64_t v273;
  float32x4_t v274;
  unsigned int v275;
  __int128 v276;
  _DWORD *v277[2];
  uint64_t v278;
  int v279;
  unsigned int v280;
  void *v281[3];
  unsigned int v282;
  unsigned int v283;
  std::vector<unsigned int> v284;
  void *v285;
  char *v286;
  char *v287;
  std::vector<unsigned int> v288;
  std::vector<int> v289;
  void *v290;
  unint64_t v291;
  void *v292;
  float32x4_t *v293;
  float32x4_t *v294;
  void *v295;
  _BYTE *v296;
  unsigned int v297;
  void *__p[2];
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  int v303;
  uint64_t v304;

  v304 = *MEMORY[0x24BDAC8D0];
  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v7 = cosf(*a2);
  cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal((uint64_t **)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  v301 = 0uLL;
  v261 = (uint64_t **)(a1 + 56);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v301, (unsigned __int8 *)__p);
  v297 = v8;
  if (SBYTE7(v299) < 0)
  {
    operator delete(__p[0]);
    v8 = v297;
  }
  if (v8 == -1)
    cv3d::cv::gess::alg::Parameterize();
  v9 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  __n = v9;
  std::vector<std::pair<cv3d::cv::gess::mesh::FaceHandle,float>>::vector(&v295, v9);
  v262 = v9;
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      LODWORD(__p[0]) = v10;
      v12 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)__p);
      v13 = (float *)((char *)v295 + v11);
      *v13 = *(float *)__p;
      v13[1] = v12;
      v11 += 8;
      ++v10;
    }
    while (8 * __n != v11);
  }
  v14 = 126 - 2 * __clz((v296 - (_BYTE *)v295) >> 3);
  if (v296 == v295)
    v15 = 0;
  else
    v15 = v14;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>((uint64_t)v295, (unint64_t)v296, v15, 1);
  v292 = 0;
  v293 = 0;
  v294 = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::reserve(&v292, 0x32uLL);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v290, __n, (unsigned __int8 *)__p);
  rep = v6.__d_.__rep_;
  v259 = a2;
  v260 = a3;
  memset(&v289, 0, sizeof(v289));
  std::vector<unsigned int>::reserve(&v289, (unint64_t)((double)__n * 0.5));
  if (__n)
  {
    v16 = 0;
    do
    {
      if (((*(_QWORD *)((char *)v290 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        ++v16;
      }
      else
      {
        v289.__end_ = v289.__begin_;
        v17 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, *((_DWORD *)v295 + 2 * v16));
        v270 = *((float *)v295 + 2 * v16 + 1);
        v266 = *v17;
        end = v289.__end_;
        if (v289.__end_ >= v289.__end_cap_.__value_)
        {
          begin = v289.__begin_;
          v21 = v289.__end_ - v289.__begin_;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v23 = (char *)v289.__end_cap_.__value_ - (char *)v289.__begin_;
          if (((char *)v289.__end_cap_.__value_ - (char *)v289.__begin_) >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v289.__end_cap_, v24);
            begin = v289.__begin_;
            end = v289.__end_;
          }
          else
          {
            v25 = 0;
          }
          v26 = (int *)&v25[4 * v21];
          *v26 = v16;
          v19 = v26 + 1;
          while (end != begin)
          {
            v27 = *--end;
            *--v26 = v27;
          }
          v289.__begin_ = v26;
          v289.__end_ = v19;
          v289.__end_cap_.__value_ = (int *)&v25[4 * v24];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v289.__end_ = v16;
          v19 = end + 1;
        }
        v267 = vaddq_f32(vmulq_n_f32(v266, v270), (float32x4_t)0);
        v289.__end_ = v19;
        ++v16;
        v28 = v295;
        for (i = v16; i < (v296 - (_BYTE *)v28) >> 3; ++i)
        {
          v30 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, v28[2 * i]);
          v271 = *v30;
          v31 = vmulq_f32(*v30, *v17);
          v31.i32[3] = 0;
          v28 = v295;
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31)) > v7)
          {
            v264 = *((float *)v295 + 2 * i + 1);
            v32 = v289.__end_;
            if (v289.__end_ >= v289.__end_cap_.__value_)
            {
              v34 = v289.__begin_;
              v35 = v289.__end_ - v289.__begin_;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v37 = (char *)v289.__end_cap_.__value_ - (char *)v289.__begin_;
              if (((char *)v289.__end_cap_.__value_ - (char *)v289.__begin_) >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v289.__end_cap_, v38);
                v34 = v289.__begin_;
                v32 = v289.__end_;
              }
              else
              {
                v39 = 0;
              }
              v40 = (int *)&v39[4 * v35];
              *v40 = i;
              v33 = v40 + 1;
              while (v32 != v34)
              {
                v41 = *--v32;
                *--v40 = v41;
              }
              v289.__begin_ = v40;
              v289.__end_ = v33;
              v289.__end_cap_.__value_ = (int *)&v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v289.__end_ = i;
              v33 = v32 + 1;
            }
            v267 = vaddq_f32(v267, vmulq_n_f32(v271, v264));
            v289.__end_ = v33;
            v28 = v295;
          }
        }
        v42 = vmulq_f32(v267, v267);
        v42.i32[3] = 0;
        v42.i64[0] = vpaddq_f32(v42, v42).u64[0];
        v42.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v42.f32));
        v43 = vdivq_f32(v267, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0));
        v44 = v293;
        v272 = v43;
        if (v293 >= v294)
        {
          v46 = ((char *)v293 - (_BYTE *)v292) >> 4;
          if ((unint64_t)(v46 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v47 = ((char *)v294 - (_BYTE *)v292) >> 3;
          if (v47 <= v46 + 1)
            v47 = v46 + 1;
          if ((unint64_t)((char *)v294 - (_BYTE *)v292) >= 0x7FFFFFFFFFFFFFF0)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)&v294, v48);
          else
            v49 = 0;
          v50 = (float32x4_t *)&v49[16 * v46];
          *v50 = v272;
          v45 = v50 + 1;
          v52 = (float32x4_t *)v292;
          v51 = v293;
          if (v293 != v292)
          {
            do
            {
              v53 = v51[-1];
              --v51;
              v50[-1] = v53;
              --v50;
            }
            while (v51 != v52);
            v51 = (float32x4_t *)v292;
          }
          v292 = v50;
          v293 = v45;
          v294 = (float32x4_t *)&v49[16 * v48];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v293 = v43;
          v45 = v44 + 1;
        }
        v293 = v45;
        v54 = v289.__begin_;
        v55 = v289.__end_;
        while (v54 != v55)
        {
          v56 = vmulq_f32(v272, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, *((_DWORD *)v295 + 2 * *v54)));
          v56.i32[3] = 0;
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v56, v56)) > v7)
            *(_QWORD *)((char *)v290 + (((unint64_t)*v54 >> 3) & 0x1FFFFFF8)) |= 1 << *v54;
          ++v54;
        }
      }
    }
    while (v16 != __n);
  }
  v296 = v295;
  v57 = __n;
  std::vector<unsigned int>::vector(&v288, __n);
  v58 = (unint64_t)((char *)v293 - (_BYTE *)v292) >> 4;
  if (__n)
  {
    for (j = 0; j != __n; ++j)
    {
      if ((_DWORD)v58)
      {
        v60 = 0;
        v61 = 0;
        v62 = -3.4028e38;
        do
        {
          v63 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, j);
          v64 = vmulq_f32(*v63, *((float32x4_t *)v292 + v60));
          v64.i32[3] = 0;
          v65 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64));
          if (v65 > v62)
          {
            v62 = v65;
            v61 = v60;
          }
          ++v60;
        }
        while (v58 != v60);
      }
      else
      {
        v61 = 0;
      }
      v288.__begin_[j] = v61;
    }
  }
  v285 = 0;
  v286 = 0;
  v287 = 0;
  std::vector<unsigned int>::vector(&v284, __n);
  v265 = v58;
  v268 = v58;
  std::vector<BOOL>::resize((uint64_t)&v290, __n, 0);
  if (v291)
  {
    __p[0] = v290;
    LODWORD(__p[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__p, v291);
  }
  if (__n)
  {
    v66 = 0;
    do
    {
      if ((*((_QWORD *)v290 + (v66 >> 6)) & (1 << v66)) == 0)
      {
        v67 = v286;
        if (v286 >= v287)
        {
          v69 = (char *)v285;
          v70 = (v286 - (_BYTE *)v285) >> 2;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v72 = v287 - (_BYTE *)v285;
          if ((v287 - (_BYTE *)v285) >> 1 > v71)
            v71 = v72 >> 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v287, v73);
            v69 = (char *)v285;
            v67 = v286;
          }
          else
          {
            v74 = 0;
          }
          v75 = &v74[4 * v70];
          *(_DWORD *)v75 = 1;
          v68 = v75 + 4;
          while (v67 != v69)
          {
            v76 = *((_DWORD *)v67 - 1);
            v67 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          v285 = v75;
          v286 = v68;
          v287 = &v74[4 * v73];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *(_DWORD *)v286 = 1;
          v68 = v67 + 4;
        }
        v286 = v68;
        v77 = v285;
        v299 = 0u;
        v300 = 0u;
        *(_OWORD *)__p = 0u;
        LODWORD(v301) = v66;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v301);
        v78 = ((unint64_t)(v68 - v77) >> 2) - 1;
        *((_QWORD *)v290 + (v66 >> 6)) |= 1 << v66;
        v284.__begin_[v66] = v78;
        v79 = *((_QWORD *)&v300 + 1);
        v57 = __n;
        if (*((_QWORD *)&v300 + 1))
        {
          v80 = v288.__begin_[v66];
          do
          {
            v81 = v300;
            LODWORD(v301) = *(_DWORD *)(*(_QWORD *)((char *)__p[1]
                                                  + (((unint64_t)v300 >> 7) & 0x1FFFFFFFFFFFFF8))
                                      + 4 * (v300 & 0x3FF));
            *(_QWORD *)&v300 = v300 + 1;
            *((_QWORD *)&v300 + 1) = v79 - 1;
            if ((unint64_t)(v81 + 1) >= 0x800)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(_QWORD *)&v300 = v300 - 1024;
            }
            v82 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v301);
            LODWORD(v281[0]) = v82;
            do
            {
              LODWORD(v281[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v281) + 8);
              v83 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v281);
              v84 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v83);
              if ((*v84 & v85) == 0)
              {
                v86 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v281);
                LODWORD(v277[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v86) + 16);
                if (((*(_QWORD *)((char *)v290 + (((unint64_t)LODWORD(v277[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v277[0])) & 1) == 0
                  && v288.__begin_[LODWORD(v277[0])] == v80)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, v277);
                  v87 = LODWORD(v277[0]);
                  *(_QWORD *)((char *)v290 + (((unint64_t)LODWORD(v277[0]) >> 3) & 0x1FFFFFF8)) |= 1 << SLOBYTE(v277[0]);
                  v284.__begin_[v87] = v78;
                  ++*((_DWORD *)v285 + v78);
                }
              }
            }
            while (LODWORD(v281[0]) != v82);
            v79 = *((_QWORD *)&v300 + 1);
          }
          while (*((_QWORD *)&v300 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](__p);
      }
      ++v66;
    }
    while (v66 != v57);
    v88 = 0;
    do
    {
      if (*((_DWORD *)v285 + v284.__begin_[v88]) == 1)
      {
        v89 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, v88);
        v90 = v288.__begin_[v88];
        LODWORD(__p[0]) = v88;
        v91 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v91;
        v92 = 0.0;
        v93 = 0xFFFFFFFFLL;
        do
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          v94 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          v95 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v94);
          if ((*v95 & v96) == 0)
          {
            v97 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v98 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v97);
            v99 = *(unsigned int *)(v98 + 16);
            v100 = vmulq_f32(*((float32x4_t *)v292 + v288.__begin_[v99]), *v89);
            v100.i32[3] = 0;
            v101 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v100, v100));
            if (v101 > v92)
            {
              v102 = v101 * (float)*((unsigned int *)v285 + v284.__begin_[v99]);
              if (v102 > v7)
              {
                v93 = *(unsigned int *)(v98 + 16);
                v92 = v102;
                v90 = v288.__begin_[v99];
              }
            }
          }
        }
        while (LODWORD(__p[0]) != v91);
        if (v288.__begin_[v88] != v90)
        {
          v288.__begin_[v88] = v90;
          v103 = v284.__begin_;
          v104 = v285;
          *((_DWORD *)v285 + v284.__begin_[v88]) = 0;
          v105 = v103[v93];
          v103[v88] = v105;
          ++v104[v105];
        }
      }
      ++v88;
    }
    while (v88 != v57);
    v106 = 0;
    do
    {
      if (*((_DWORD *)v285 + v284.__begin_[v106]) == 2)
      {
        LODWORD(__p[0]) = v106;
        v107 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v107;
        while (1)
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          v108 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          v109 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v108);
          if ((*v109 & v110) == 0)
          {
            v111 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v112 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v111) + 16);
            if (v288.__begin_[v112] == v288.__begin_[v106])
              break;
          }
          if (LODWORD(__p[0]) == v107)
            goto LABEL_134;
        }
        if (v112 != -1)
        {
          v113 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, v106);
          v114 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v297, v112);
          v115 = v288.__begin_[v106];
          LODWORD(v301) = v106;
          v116 = v112;
          v117 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v301);
          LODWORD(__p[0]) = v117;
          v118 = 0.0;
          v273 = 0xFFFFFFFFLL;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            v119 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v120 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v119);
            if ((*v120 & v121) == 0)
            {
              v122 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              v123 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v122);
              v124 = *(unsigned int *)(v123 + 16);
              v125 = v288.__begin_[v124];
              if ((_DWORD)v125 != v288.__begin_[v106])
              {
                v126 = *((float32x4_t *)v292 + v125);
                v127 = vmulq_f32(*v113, v126);
                v127.i32[3] = 0;
                v128 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v127, v127));
                v129 = vmulq_f32(v126, *v114);
                v129.i32[3] = 0;
                v130 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v129, v129));
                if (v128 > v7 && v130 > v7)
                {
                  v132 = (float)(v128 + v130) * (float)*((unsigned int *)v285 + v284.__begin_[v124]);
                  if (v132 > v118)
                  {
                    v273 = *(unsigned int *)(v123 + 16);
                    v115 = v288.__begin_[v124];
                    v118 = v132;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v117);
          LODWORD(v301) = v112;
          v133 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v301);
          LODWORD(__p[0]) = v133;
          v134 = v273;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            v135 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v136 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v135);
            if ((*v136 & v137) == 0)
            {
              v138 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              v139 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v138);
              v140 = *(unsigned int *)(v139 + 16);
              v141 = v288.__begin_[v140];
              if ((_DWORD)v141 != v288.__begin_[v116])
              {
                v142 = *((float32x4_t *)v292 + v141);
                v143 = vmulq_f32(*v113, v142);
                v143.i32[3] = 0;
                v144 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v143, v143));
                v145 = vmulq_f32(v142, *v114);
                v145.i32[3] = 0;
                v146 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v145, v145));
                if (v144 > v7 && v146 > v7)
                {
                  v148 = (float)(v144 + v146) * (float)*((unsigned int *)v285 + v284.__begin_[v140]);
                  if (v148 > v118)
                  {
                    v134 = *(unsigned int *)(v139 + 16);
                    v115 = v288.__begin_[v140];
                    v118 = v148;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v133);
          v149 = v288.__begin_;
          if (v288.__begin_[v106] != v115 && v288.__begin_[v116] != v115)
          {
            v288.__begin_[v116] = v115;
            v149[v106] = v115;
            v150 = v284.__begin_;
            v151 = v285;
            *((_DWORD *)v285 + v284.__begin_[v106]) = 0;
            v152 = v150[v134];
            v150[v116] = v152;
            v150[v106] = v152;
            v151[v152] += 2;
          }
        }
      }
LABEL_134:
      ++v106;
    }
    while (v106 != v57);
  }
  v282 = -1;
  v283 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v153 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v283, (unsigned __int8 *)__p);
  v155 = v153;
  if (SBYTE7(v299) < 0)
  {
    operator delete(__p[0]);
    if (v155)
      goto LABEL_162;
  }
  else if (v153)
  {
LABEL_162:
    LODWORD(__p[0]) = v283;
    v156 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)__p, v154);
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 40))(v156);
    goto LABEL_166;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a1, &v283, (__int128 *)__p);
  if (SBYTE7(v299) < 0)
    operator delete(__p[0]);
LABEL_166:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v301) = 0;
  v158 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(v261, (uint64_t)&v301, (unsigned __int8 *)__p);
  v282 = v158;
  if (SBYTE7(v299) < 0)
    operator delete(__p[0]);
  if (v158 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v282, (__int128 *)__p);
    if (SBYTE7(v299) < 0)
      operator delete(__p[0]);
  }
  if (v291)
  {
    __p[0] = v290;
    LODWORD(__p[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__p, v291);
  }
  if (v57)
  {
    v159 = 0;
    v160 = (uint64_t *)(a1 + 80);
    do
    {
      if ((*((_QWORD *)v290 + (v159 >> 6)) & (1 << v159)) == 0)
      {
        LODWORD(__p[0]) = v283;
        v161 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v160, (unsigned int *)__p, v157);
        (*(void (**)(uint64_t))(*(_QWORD *)v161 + 48))(v161);
        LODWORD(__p[0]) = v283;
        v163 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v160, (unsigned int *)__p, v162);
        v164 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163);
        v165 = (v164 - 1);
        std::to_string((std::string *)__p, v164 - 1);
        v166 = std::string::insert((std::string *)__p, 0, "g", 1uLL);
        v167 = v166->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v301 = v166->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v301 + 7) = *(std::string::size_type *)((char *)&v166->__r_.__value_.__r.__words[1] + 7);
        v168 = HIBYTE(v166->__r_.__value_.__r.__words[2]);
        v166->__r_.__value_.__l.__size_ = 0;
        v166->__r_.__value_.__r.__words[2] = 0;
        v166->__r_.__value_.__r.__words[0] = 0;
        v169 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(a1, v283, v165);
        v170 = v169;
        if (*(char *)(v169 + 23) < 0)
          operator delete(*(void **)v169);
        *(_QWORD *)v170 = v167;
        *(_QWORD *)(v170 + 8) = v301;
        *(_QWORD *)(v170 + 15) = *(_QWORD *)((char *)&v301 + 7);
        *(_BYTE *)(v170 + 23) = v168;
        if (SBYTE7(v299) < 0)
          operator delete(__p[0]);
        v299 = 0u;
        v300 = 0u;
        *(_OWORD *)__p = 0u;
        LODWORD(v301) = v159;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v301);
        v57 = __n;
        *((_QWORD *)v290 + (v159 >> 6)) |= 1 << v159;
        v171 = *((_QWORD *)&v300 + 1);
        if (*((_QWORD *)&v300 + 1))
        {
          v172 = v288.__begin_[v159];
          do
          {
            v173 = v300;
            v174 = *(_DWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v300 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v300 & 0x3FF));
            LODWORD(v301) = v174;
            *(_QWORD *)&v300 = v300 + 1;
            *((_QWORD *)&v300 + 1) = v171 - 1;
            if ((unint64_t)(v173 + 1) >= 0x800)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(_QWORD *)&v300 = v300 - 1024;
              v174 = v301;
            }
            *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v282, v174) = v165;
            v175 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v301);
            LODWORD(v281[0]) = v175;
            do
            {
              LODWORD(v281[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v281) + 8);
              v176 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v281);
              v177 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v176);
              if ((*v177 & v178) == 0)
              {
                v179 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v281);
                LODWORD(v277[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v179) + 16);
                if (((*(_QWORD *)((char *)v290 + (((unint64_t)LODWORD(v277[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v277[0])) & 1) == 0
                  && v288.__begin_[LODWORD(v277[0])] == v172)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, v277);
                  *(_QWORD *)((char *)v290 + (((unint64_t)LODWORD(v277[0]) >> 3) & 0x1FFFFFF8)) |= 1 << SLOBYTE(v277[0]);
                }
              }
            }
            while (LODWORD(v281[0]) != v175);
            v171 = *((_QWORD *)&v300 + 1);
          }
          while (*((_QWORD *)&v300 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](__p);
        v160 = (uint64_t *)(a1 + 80);
      }
      ++v159;
    }
    while (v159 != v57);
  }
  if (v297 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v261, &v297, v157);
  v297 = -1;
  __p[0] = &off_250D4B208;
  __p[1] = &v288;
  *((_QWORD *)&v299 + 1) = __p;
  cv3d::cv::gess::alg::SortFaceByGroupID(a1, (uint64_t)__p);
  v180 = (void **)*((_QWORD *)&v299 + 1);
  if (*((void ***)&v299 + 1) == __p)
  {
    v181 = 4;
    v180 = __p;
    goto LABEL_199;
  }
  if (*((_QWORD *)&v299 + 1))
  {
    v181 = 5;
LABEL_199:
    (*((void (**)(void))*v180 + v181))();
  }
  std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(v281, v268);
  if (v265)
  {
    v182 = 0;
    v183 = 0;
    v184 = xmmword_23C60CCEC;
    v185 = unk_23C60CCFC;
    do
    {
      v186 = 0;
      v187 = (char *)v281[0];
      v188 = (char *)v281[0] + 36 * v183;
      v189 = *((float32x4_t *)v292 + v183);
      v190 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v189, (int8x16_t)v189, 4uLL), (int32x4_t)v189);
      v191 = (int8x16_t)vmulq_f32(v189, (float32x4_t)xmmword_23C605200);
      v192 = vmulq_f32(v189, (float32x4_t)xmmword_23C605210);
      v192.i32[3] = 0;
      v274 = v192;
      v193 = vmlsq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v191, (int32x4_t)vextq_s8(v191, v191, 0xCuLL)), (int32x4_t)v191), (float32x4_t)xmmword_23C605200, v190);
      v194 = vmulq_f32(v193, v193);
      v194.i32[3] = 0;
      LODWORD(v301) = 0;
      DWORD1(v301) = v193.i32[2];
      LODWORD(v302) = 0;
      *((float *)&v302 + 3) = -v193.f32[0];
      *((float32x2_t *)&v301 + 1) = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v193, (int8x16_t)v193, 4uLL));
      *(_QWORD *)((char *)&v302 + 4) = v193.i64[0];
      v195 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v194, v194));
      v303 = 0;
      *(_OWORD *)v188 = xmmword_23C603EC0;
      *((_OWORD *)v188 + 1) = xmmword_23C603EC0;
      *((_DWORD *)v188 + 8) = 1065353216;
      *(_OWORD *)__p = v184;
      v299 = v185;
      LODWORD(v300) = 1065353216;
      do
      {
        *(float *)((char *)__p + v186) = *(float *)&v187[v182 + v186] + *(float *)((char *)&v301 + v186);
        v186 += 4;
      }
      while (v186 != 36);
      *(_OWORD *)v188 = *(_OWORD *)__p;
      *((_OWORD *)v188 + 1) = v299;
      *((_DWORD *)v188 + 8) = v300;
      cv3d::cv::gess::math::Matrix3T<float>::operator*((float *)&v301, (uint64_t)&v301, (uint64_t)__p);
      v196 = 0;
      v303 = v300;
      v197 = sqrtf(v195);
      v301 = *(_OWORD *)__p;
      v302 = v299;
      v198 = (1.0 - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v274, v274))) / (float)(v197 * v197);
      v185 = unk_23C60CCFC;
      v184 = xmmword_23C60CCEC;
      *(_OWORD *)__p = xmmword_23C60CCEC;
      v299 = unk_23C60CCFC;
      LODWORD(v300) = 1065353216;
      do
      {
        *(float *)((char *)__p + v196) = *(float *)((char *)&v301 + v196) * v198;
        v196 += 4;
      }
      while (v196 != 36);
      v199 = 0;
      v301 = *(_OWORD *)__p;
      v302 = v299;
      v303 = v300;
      *(_OWORD *)__p = xmmword_23C60CCEC;
      v299 = unk_23C60CCFC;
      LODWORD(v300) = 1065353216;
      do
      {
        *(float *)((char *)__p + v199) = *(float *)&v187[v182 + v199] + *(float *)((char *)&v301 + v199);
        v199 += 4;
      }
      while (v199 != 36);
      *(_OWORD *)v188 = *(_OWORD *)__p;
      *((_OWORD *)v188 + 1) = v299;
      *((_DWORD *)v188 + 8) = v300;
      ++v183;
      v182 += 36;
    }
    while (v183 != v268);
  }
  v280 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(_QWORD *)((char *)&v301 + 4) = 0;
  LODWORD(v301) = 0;
  v200 = v262;
  v201 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v261, (uint64_t)&v301, (unsigned __int8 *)__p);
  v280 = v201;
  if (SBYTE7(v299) < 0)
    operator delete(__p[0]);
  if (v201 != -1)
  {
    if (v280 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)v261, &v280);
    v280 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, &v280, (__int128 *)__p);
  if (SBYTE7(v299) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)&v301 = 0;
  v203 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v301, (unsigned __int8 *)__p);
  if (SBYTE7(v299) < 0)
    operator delete(__p[0]);
  if (v203 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    *(_QWORD *)&v301 = 0;
    v203 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((char **)(a1 + 80), (uint64_t)&v301, (__int128 *)__p);
    if (SBYTE7(v299) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = v203;
    v204 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p, v202);
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
  }
  v301 = 0u;
  v302 = 0u;
  v303 = 1065353216;
  LODWORD(__p[0]) = v203;
  v206 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p, v205);
  v207 = 0;
  v208 = 0;
  v209 = vdup_n_s32(0x7F7FFFFFu);
  while (1)
  {
    v275 = v207;
    if (v207 == v200)
      break;
    v210 = v207;
    if ((_DWORD)v208 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v282, v207))
      break;
    v231 = v208;
LABEL_245:
    v232 = v288.__begin_[v210];
    v233 = (char *)v281[0];
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    v234 = v210;
    LODWORD(v277[0]) = v207;
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)v277, __p);
    v235 = 0;
    v279 = 0;
    v236 = (float *)&v233[36 * v232];
    v278 = 0;
    v208 = v231;
    do
    {
      LODWORD(v277[0]) = *((_DWORD *)__p[0] + v235);
      if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(&v301, (unsigned int *)v277))
      {
        LODWORD(v277[0]) = *((_DWORD *)__p[0] + v235);
        v237 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(&v301, (unsigned int *)v277);
        if (!v237)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        *((_DWORD *)&v278 + v235) = *((_DWORD *)v237 + 5);
      }
      else
      {
        (*(void (**)(_QWORD *))(*v206 + 48))(v206);
        v238 = (*(uint64_t (**)(_QWORD *))(*v206 + 16))(v206);
        LODWORD(v276) = *((_DWORD *)__p[0] + v235);
        v277[0] = &v276;
        v239 = (v238 - 1);
        *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)&v301, (unsigned int *)&v276, (uint64_t)&std::piecewise_construct, v277)+ 5) = v239;
        *((_DWORD *)&v278 + v235) = v239;
        v240 = (__int128 *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + v235));
        v241 = 0;
        v276 = *v240;
        v277[0] = 0;
        v277[1] = 0;
        v242 = v236;
        do
        {
          v243 = 0;
          v244 = 0.0;
          v245 = v242;
          do
          {
            v246 = *v245;
            v245 += 3;
            v244 = v244 + (float)(v246 * *(float *)((char *)&v277[-2] + v243));
            v243 += 4;
          }
          while (v243 != 12);
          *((float *)v277 + v241++) = v244;
          ++v242;
        }
        while (v241 != 3);
        v247 = v206[5];
        if (v239 >= (v206[6] - v247) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(_DWORD **)(v247 + 8 * v239) = v277[0];
      }
      ++v235;
    }
    while (v235 != 3);
    v248 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v280, v234);
    *(_QWORD *)v248 = v278;
    *(_DWORD *)(v248 + 8) = v279;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v207 = v275 + 1;
    v200 = v262;
    if (v275 + 1 > v262)
      goto LABEL_259;
  }
  if ((_DWORD)v208)
  {
    v269 = v208;
    v211 = 0;
    v212 = 0;
    v213 = (uint64_t *)v302;
    v214 = v206[5];
    v215 = (v206[6] - v214) >> 3;
    v216 = 3.4028e38;
    do
    {
      v217 = v211;
      v218 = __sincosf_stret((float)v211 * 0.19635);
      if (v213)
      {
        v219.f32[0] = -v218.__sinval;
        v219.i32[1] = LODWORD(v218.__cosval);
        v220 = (float32x2_t)0x80000000800000;
        v221 = (uint64_t **)v213;
        v222 = (float32x2_t)v209;
        do
        {
          v223 = *((unsigned int *)v221 + 5);
          if (v215 <= v223)
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          v224 = (float32x2_t)vbsl_s8((int8x8_t)vcgtd_f64((float)((float)v211 * 0.19635), 0.00000001), (int8x8_t)vmla_lane_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v218.__sinval), LODWORD(v218.__cosval)), COERCE_FLOAT(*(_QWORD *)(v214 + 8 * v223))), v219, *(float32x2_t *)(v214 + 8 * v223), 1), *(int8x8_t *)(v214 + 8 * v223));
          v222 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v222, v224), (int8x8_t)v224, (int8x8_t)v222);
          v220 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v224, v220), (int8x8_t)v224, (int8x8_t)v220);
          v221 = (uint64_t **)*v221;
        }
        while (v221);
        v225 = vsub_f32(v220, v222);
        LODWORD(v226) = vmul_lane_f32(v225, v225, 1).u32[0];
      }
      else
      {
        v226 = INFINITY;
      }
      if (v226 < v216)
      {
        v216 = v226;
        v212 = v211;
      }
      ++v211;
    }
    while (v217 < 7);
    v227 = (float)v212 * 0.19635;
    v200 = v262;
    v207 = v275;
    LODWORD(v208) = v269;
    if (v227 > 0.00000001)
    {
      v228 = __sincosf_stret(v227);
      if (v213)
      {
        v229.f32[0] = -v228.__sinval;
        v229.i32[1] = LODWORD(v228.__cosval);
        do
        {
          v230 = *((unsigned int *)v213 + 5);
          if (v215 <= v230)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v214 + 8 * v230) = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v228.__sinval), LODWORD(v228.__cosval)), *(float *)(v214 + 8 * v230)), v229, *(float *)(v214 + 8 * v230 + 4));
          v213 = (uint64_t *)*v213;
        }
        while (v213);
      }
    }
  }
  if (v207 != v200)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(&v301);
    v231 = (v208 + 1);
    v210 = v207;
    goto LABEL_245;
  }
LABEL_259:
  v249.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(v260 + 80))
  {
    *(double *)v260 = (double)(v249.__d_.__rep_ - rep) / 1000000.0;
    LODWORD(__p[0]) = v283;
    v251 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)__p, v250.__d_.__rep_);
    *(_QWORD *)(v260 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v251 + 16))(v251);
  }
  v252.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*((_DWORD *)v259 + 3) == 1)
  {
    cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(__p, a1, v260, v259 + 1, v259 + 2, v259 + 4, 1, 0);
    cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)__p);
    cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)__p);
  }
  else
  {
    cv3d::cv::gess::binpack::Binpack::Binpack((cv3d::cv::gess::binpack::Binpack *)__p, (cv3d::cv::gess::mesh::TriMesh *)a1, (const unsigned int *)v259 + 1, (const unsigned __int8 *)v259 + 8);
    cv3d::cv::gess::binpack::Binpack::BinpackTexture((cv3d::cv::gess::binpack::Binpack *)__p, v253, v254);
    if ((_QWORD)v299)
    {
      *((_QWORD *)&v299 + 1) = v299;
      operator delete((void *)v299);
    }
  }
  v255 = *(_DWORD *)(v260 + 76);
  v256.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(v260 + 80))
  {
    *(double *)(v260 + 48) = (double)(v256.__d_.__rep_ - v252.__d_.__rep_) / 1000000.0;
    *(_QWORD *)(v260 + 56) = *((unsigned __int8 *)v259 + 8);
  }
  if (v281[0])
  {
    v281[1] = v281[0];
    operator delete(v281[0]);
  }
  if (v284.__begin_)
  {
    v284.__end_ = v284.__begin_;
    operator delete(v284.__begin_);
  }
  if (v285)
  {
    v286 = (char *)v285;
    operator delete(v285);
  }
  if (v288.__begin_)
  {
    v288.__end_ = v288.__begin_;
    operator delete(v288.__begin_);
  }
  if (v289.__begin_)
  {
    v289.__end_ = v289.__begin_;
    operator delete(v289.__begin_);
  }
  if (v290)
    operator delete(v290);
  if (v292)
  {
    v293 = (float32x4_t *)v292;
    operator delete(v292);
  }
  if (v295)
  {
    v296 = v295;
    operator delete(v295);
  }
  return v255 != 2;
}

void sub_23C5E394C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,void *__p)
{
  uint64_t v63;

  if (__p)
    operator delete(__p);
  if (a35)
    operator delete(a35);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  if (a48)
    operator delete(a48);
  if (a51)
    operator delete(a51);
  if (a54)
    operator delete(a54);
  if (a57)
    operator delete(a57);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v9;
  int v10;
  void *__p[2];
  uint64_t v12;
  void **v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v10 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v10, (unsigned __int8 *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (v4 == -1)
    cv3d::cv::gess::alg::SortFaceByGroupID();
  LODWORD(__p[0]) = v4;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)__p);
  v9 = ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2) - 1;
  v10 = 0;
  __p[0] = &off_250D4B298;
  __p[1] = (void *)a1;
  v12 = a2;
  v13 = __p;
  v6 = v13;
  if (v13 == __p)
  {
    v7 = 4;
    v6 = __p;
    goto LABEL_8;
  }
  if (v13)
  {
    v7 = 5;
LABEL_8:
    (*((void (**)(void))*v6 + v7))();
  }
  return 1;
}

void sub_23C5E3D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **p_p;
  uint64_t v18;

  p_p = a16;
  if (a16 == &__p)
  {
    v18 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*((void (**)(void))*p_p + v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::Parameterize(uint64_t a1, float *a2)
{
  _BYTE v3[76];
  int v4;
  char v5;

  memset(v3, 0, sizeof(v3));
  v4 = 3;
  v5 = 0;
  return cv3d::cv::gess::alg::Parameterize(a1, a2, (uint64_t)v3);
}

BOOL cv3d::cv::gess::alg::BlenderUV2Parameterize(uint64_t a1, float *a2)
{
  _BYTE v3[76];
  int v4;
  char v5;

  memset(v3, 0, sizeof(v3));
  v4 = 3;
  v5 = 1;
  return cv3d::cv::gess::internal::BlenderUV2Parameterize(a1, a2, (uint64_t)v3);
}

uint64_t cv3d::cv::gess::alg::IsoChartParameterize(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[76];
  int v8;
  char v9;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(v7, 0, sizeof(v7));
  v8 = 3;
  v9 = 1;
  v13 = 0;
  v11 = 0;
  cv3d::cv::gess::alg::IsoChartParameterize(a1, a2, (uint64_t)v7, (uint64_t)v12, (uint64_t)v10);
  v2 = v11;
  if (v11 == v10)
  {
    v3 = 4;
    v2 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
    goto LABEL_10;
  }
  if (v13)
  {
    v5 = 5;
LABEL_10:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return 1;
}

void sub_23C5E3F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  _QWORD *v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == &a20)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(v23, (_QWORD *)(v24 - 56));
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::IsoChartParameterize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  unint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  void **v31;
  void *__p;
  int v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48[2];
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  std::mutex v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v29 = -1;
  v30 = -1;
  v27 = -1;
  v28 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v25 = 0;
  v30 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v25, (unsigned __int8 *)&__p);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v29, (unsigned __int8 *)&__p);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v26) = 0;
  v25 = 0;
  v28 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v25, (unsigned __int8 *)&__p);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v25) = 0;
  v27 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&v25, (unsigned __int8 *)&__p);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(__p);
  if (v30 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 80), &v30, v10);
    v30 = -1;
  }
  if (v29 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 80), &v29, v10);
    v29 = -1;
  }
  if (v28 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(a1 + 56), &v28);
    v28 = -1;
  }
  if (v27 != -1)
  {
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v27, v10);
    v27 = -1;
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v25, (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  v11 = cv3d::cv::gess::isochart::NormalizeMeshPosition(a1, &v25);
  v12 = *(_QWORD *)(a4 + 24);
  if (v12)
  {
    if (((*(uint64_t (**)(uint64_t, float32x4_t))(*(_QWORD *)v12 + 48))(v12, v11) & 1) != 0)
    {
LABEL_39:
      v19 = 0;
      goto LABEL_45;
    }
    v13 = *(_QWORD *)(a4 + 24);
  }
  else
  {
    v13 = 0;
  }
  __p = (void *)4286578687;
  v33 = 0;
  v35 = 0;
  v37 = 0;
  v38 = a1;
  v39 = a2;
  v40 = a2 + 8;
  v41 = *(_DWORD *)(a2 + 16);
  v42 = *(_BYTE *)(a2 + 12);
  v43 = *(_BYTE *)(a2 + 20);
  v44 = a2 + 24;
  v45 = a2 + 28;
  v46 = a2 + 44;
  v47 = *(_BYTE *)(a2 + 41);
  *(_OWORD *)v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v50 = a3;
  v51 = a2 + 32;
  v52 = a2 + 36;
  v53 = *(_BYTE *)(a2 + 40);
  v54 = *(_BYTE *)(a2 + 42);
  v55.__m_.__sig = 850045863;
  memset(v55.__m_.__opaque, 0, sizeof(v55.__m_.__opaque));
  if (v13)
    std::function<BOOL ()(void)>::operator=(v34, a4);
  if (*(_QWORD *)(a5 + 24))
    std::function<void ()(std::string const&)>::operator=(v36, a5);
  cv3d::cv::gess::isochart::IsoChart::Run((cv3d::cv::gess::isochart::IsoChart *)&__p);
  std::mutex::~mutex(&v55);
  v31 = (void **)v49 + 1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  v14 = v37;
  if (v37 == v36)
  {
    v15 = 4;
    v14 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_32;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_32:
  v16 = v35;
  if (v35 == v34)
  {
    v17 = 4;
    v16 = v34;
    goto LABEL_36;
  }
  if (v35)
  {
    v17 = 5;
LABEL_36:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  v18 = *(_QWORD *)(a4 + 24);
  if (v18 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18) & 1) != 0)
    goto LABEL_39;
  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
  {
    v20 = 0;
    do
    {
      v21 = v25;
      LODWORD(__p) = *(_DWORD *)(a1 + 176);
      v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&__p);
      v23 = *(_QWORD *)(v22 + 40);
      if (v20 >= (*(_QWORD *)(v22 + 48) - v23) >> 4)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_OWORD *)(v23 + 16 * v20) = v21[v20];
      ++v20;
    }
    while (v20 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  }
  v19 = (*(_DWORD *)(a3 + 76) & 0xFFFFFFFD) != 0;
LABEL_45:
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  return v19;
}

void sub_23C5E43C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<void ()(std::string const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(std::string const&)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void cv3d::cv::gess::isochart::IsoChart::~IsoChart(cv3d::cv::gess::isochart::IsoChart *this)
{
  void *v2;
  cv3d::cv::gess::isochart::IsoChart *v3;
  uint64_t v4;
  cv3d::cv::gess::isochart::IsoChart *v5;
  uint64_t v6;
  void **v7;

  std::mutex::~mutex((std::mutex *)((char *)this + 240));
  v7 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (cv3d::cv::gess::isochart::IsoChart *)*((_QWORD *)this + 9);
  if (v3 == (cv3d::cv::gess::isochart::IsoChart *)((char *)this + 48))
  {
    v4 = 4;
    v3 = (cv3d::cv::gess::isochart::IsoChart *)((char *)this + 48);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (cv3d::cv::gess::isochart::IsoChart *)*((_QWORD *)this + 5);
  if (v5 == (cv3d::cv::gess::isochart::IsoChart *)((char *)this + 16))
  {
    v6 = 4;
    v5 = (cv3d::cv::gess::isochart::IsoChart *)((char *)this + 16);
  }
  else
  {
    if (!v5)
      return;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
}

uint64_t cv3d::cv::gess::alg::XAtlasPacking(std::vector<unsigned int>::size_type *this, unint64_t *a2, std::vector<int>::size_type *a3, unint64_t *a4, unsigned int *a5, float *a6, const float *a7, const unsigned int *a8, const unsigned int *a9, float *a10, unsigned __int16 *a11, unsigned int *a12)
{
  return cv3d::cv::gess::internal::XAtlasPacking(this, a2, a3, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)a9, a10, a11, 0);
}

uint64_t cv3d::cv::gess::alg::CalculateChartInfo(uint64_t a1, std::vector<unsigned int> *this, unsigned int *a3)
{
  std::vector<unsigned int>::size_type v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  unsigned int j;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD v33[5];
  unsigned int v34;
  std::vector<unsigned int>::value_type __x[4];
  __int128 v36;
  __int128 v37;
  void *__p[3];
  void *v39[3];
  _BYTE v40[24];
  int v41;
  unsigned int v42[3];

  this->__end_ = this->__begin_;
  v6 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  __x[0] = -1;
  std::vector<unsigned int>::resize(this, v6, __x);
  v41 = -1;
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)v40 = 0;
  cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)v40, (unsigned __int8 *)__x);
  if (SBYTE7(v36) < 0)
    operator delete(*(void **)__x);
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v41, (unsigned __int8 *)__x);
  if (SBYTE7(v36) < 0)
    operator delete(*(void **)__x);
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(_QWORD *)&v40[4] = 0;
  *(_DWORD *)v40 = 0;
  v31 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)v40, (unsigned __int8 *)__x);
  if (SBYTE7(v36) < 0)
    operator delete(*(void **)__x);
  std::string::basic_string[abi:ne180100]<0>(__x, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  *(_WORD *)v40 = 0;
  cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 80), (uint64_t)v40, (unsigned __int8 *)__x);
  if (SBYTE7(v36) < 0)
    operator delete(*(void **)__x);
  v7 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  LOBYTE(__x[0]) = 0;
  std::vector<BOOL>::vector(v40, v7, (unsigned __int8 *)__x);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v39, 3uLL);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v30 = a3;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)__x = 0u;
  v9 = *(_QWORD *)(a1 + 152);
  v8 = *(_QWORD *)(a1 + 160);
  if (v8 == v9)
  {
    v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)v40 + 8 * (v10 >> 6));
      if ((v13 & (1 << v10)) == 0)
      {
        *(_QWORD *)(*(_QWORD *)v40 + 8 * (v10 >> 6)) = v13 | (1 << v10);
        v33[0] = v12;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__x, v33);
        this->__begin_[v10] = v11;
        while (*((_QWORD *)&v37 + 1))
        {
          v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&__x[2] + (((unint64_t)v37 >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * (v37 & 0x3FF));
          *(_QWORD *)&v37 = v37 + 1;
          --*((_QWORD *)&v37 + 1);
          if ((unint64_t)v37 >= 0x800)
          {
            operator delete(**(void ***)&__x[2]);
            *(_QWORD *)&__x[2] += 8;
            *(_QWORD *)&v37 = v37 - 1024;
          }
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v34, v39);
          for (i = 0; i != 3; ++i)
          {
            cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v33, a1 + 104, (char *)v39[0] + 4 * i);
            for (j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v33);
                  ;
                  j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v33))
            {
              v32 = j;
              if (j == -1)
                break;
              v16 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), j);
              if ((*v16 & v17) == 0)
              {
                v18 = (unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v32) + 16);
                if (((*(_QWORD *)(*(_QWORD *)v40 + (((unint64_t)*v18 >> 3) & 0x1FFFFFF8)) >> *v18) & 1) == 0)
                {
                  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, v18, __p);
                  v20 = 0;
                  while (*(_DWORD *)((char *)__p[0] + v20) != *((_DWORD *)v39[0] + i))
                  {
                    v20 += 4;
                    if (v20 == 12)
                    {
                      v28 = 0;
                      goto LABEL_38;
                    }
                  }
                  v42[0] = v31;
                  v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v42, v19);
                  v23 = *v18;
                  v24 = *(_QWORD *)(v21 + 40);
                  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v21 + 48) - v24) >> 2) <= v23
                    || (v25 = *(_DWORD *)(v24 + 12 * v23 + v20),
                        v42[0] = v31,
                        v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v42, v22), v27 = *(_QWORD *)(v26 + 40), 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v26 + 48) - v27) >> 2) <= v34))
                  {
                    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                  }
                  if (v25 == *(_DWORD *)(v27 + 12 * v34 + 4 * i))
                  {
                    this->__begin_[*v18] = v11;
                    *(_QWORD *)(*(_QWORD *)v40 + (((unint64_t)*v18 >> 3) & 0x1FFFFFF8)) |= 1 << *v18;
                    std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__x, v18);
                  }
                }
              }
            }
          }
        }
        ++v11;
        v9 = *(_QWORD *)(a1 + 152);
        v8 = *(_QWORD *)(a1 + 160);
      }
      v10 = ++v12;
    }
    while (v12 < (unint64_t)((v8 - v9) >> 2));
  }
  *v30 = v11;
  v28 = 1;
LABEL_38:
  std::deque<int>::~deque[abi:ne180100](__x);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (*(_QWORD *)v40)
    operator delete(*(void **)v40);
  return v28;
}

void sub_23C5E4A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  std::deque<int>::~deque[abi:ne180100](&a15);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  v31 = *(void **)(v29 - 120);
  if (v31)
    operator delete(v31);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::Repack(uint64_t a1, int a2, unsigned int *a3, unsigned int *a4, float *a5)
{
  uint64_t v10;
  uint64_t v11;
  cv3d::cv::gess::mesh::TriMesh *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  unsigned __int8 v25[16];
  __int128 v26;
  __int128 v27;
  _DWORD v28[7];
  int v29;
  char v30;
  void *__p[2];
  char v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  std::vector<unsigned int> v37;
  __int128 v38;
  void *v39;
  void *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  memset(&v37, 0, sizeof(v37));
  v36 = 0;
  if ((cv3d::cv::gess::alg::CalculateChartInfo(a1, &v37, &v36) & 1) != 0)
  {
    v35 = -1;
    v33 = -1;
    v34 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, "f:original_id");
    std::string::basic_string[abi:ne180100]<0>(&v38, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v35, (unsigned __int8 *)&v38);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v38);
    std::string::basic_string[abi:ne180100]<0>(&v38, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    *(_DWORD *)v25 = 0;
    v34 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)v25, (unsigned __int8 *)&v38);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v38);
    LODWORD(v38) = 0;
    v33 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v38, (unsigned __int8 *)__p);
    if (v35 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a1, &v35, &v38);
      if (SHIBYTE(v39) < 0)
        operator delete((void *)v38);
    }
    if (v34 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v38, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v34, &v38);
      if (SHIBYTE(v39) < 0)
        operator delete((void *)v38);
    }
    if (v33 == -1)
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v33, (__int128 *)__p);
    LODWORD(v38) = v35;
    v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v38, v10);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, v36);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = v37.__begin_[v13];
        LODWORD(v38) = v34;
        v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v38);
        v17 = *(_QWORD *)(v16 + 40);
        if (v13 >= (*(_QWORD *)(v16 + 48) - v17) >> 2
          || (*(_DWORD *)(v17 + 4 * v13) = v15,
              LODWORD(v38) = v33,
              v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v38), v19 = *(_QWORD *)(v18 + 40), v13 >= (*(_QWORD *)(v18 + 48) - v19) >> 2))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(_DWORD *)(v19 + 4 * v13) = v14++;
        v13 = v14;
      }
      while (v14 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2));
    }
    cv3d::cv::gess::alg::SortFaceByGroupID32Bit((uint64_t **)a1, v12);
    if (a2 == 2)
    {
      v22 = cv3d::cv::gess::internal::XAtlasPacking((uint64_t **)a1, a3, a4, a5, 0, 0);
    }
    else if (a2 == 1)
    {
      v27 = 0u;
      memset(v28, 0, sizeof(v28));
      *(_OWORD *)v25 = 0u;
      v26 = 0u;
      v29 = 3;
      v30 = 1;
      v24 = *a4;
      cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(&v38, a1, v25, a3, &v24, a5, 1, 0);
      cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)&v38);
      v22 = v29 != 2;
      cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)&v38);
    }
    else if (a2)
    {
      v22 = 1;
    }
    else
    {
      v25[0] = *a4;
      cv3d::cv::gess::binpack::Binpack::Binpack((cv3d::cv::gess::binpack::Binpack *)&v38, (cv3d::cv::gess::mesh::TriMesh *)a1, a3, v25);
      v22 = cv3d::cv::gess::binpack::Binpack::BinpackTexture((cv3d::cv::gess::binpack::Binpack *)&v38, v20, v21);
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
    }
    cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>((uint64_t *)a1, &v33);
    if (v33 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v33);
    v33 = -1;
    if (v32 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v22 = 0;
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  return v22;
}

void sub_23C5E4EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  void *v41;

  cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)&a34);
  if (a28 < 0)
    operator delete(__p);
  v41 = *(void **)(v39 + 8);
  if (v41)
  {
    *(_QWORD *)(v39 + 16) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID32Bit(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  int v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  int v8;
  int v9;
  void *__p[2];
  char v11;
  void **v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v9 = 0;
  v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(this + 7, (uint64_t)&v9, (unsigned __int8 *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v3 == -1)
    cv3d::cv::gess::alg::SortFaceByGroupID32Bit();
  LODWORD(__p[0]) = v3;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)__p);
  v8 = ((unint64_t)((char *)this[20] - (char *)this[19]) >> 2) - 1;
  v9 = 0;
  __p[0] = &off_250D4B328;
  __p[1] = this;
  v12 = __p;
  v5 = v12;
  if (v12 == __p)
  {
    v6 = 4;
    v5 = __p;
    goto LABEL_8;
  }
  if (v12)
  {
    v6 = 5;
LABEL_8:
    (*((void (**)(void))*v5 + v6))();
  }
  return 1;
}

void sub_23C5E50C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **p_p;
  uint64_t v18;

  p_p = a16;
  if (a16 == &__p)
  {
    v18 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*((void (**)(void))*p_p + v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(uint64_t *a1, int *a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v8;
  int v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2 != -1)
  {
    LODWORD(v10[0]) = *a2;
    v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(a1 + 7, (unsigned int *)v10);
    v8 = ((unint64_t)(a1[20] - a1[19]) >> 2) - 1;
    v9 = 0;
    v10[0] = &off_250D4B250;
    v10[1] = a1;
    v11 = v10;
    v5 = v11;
    if (v11 == v10)
    {
      v6 = 4;
      v5 = v10;
      goto LABEL_6;
    }
    if (v11)
    {
      v6 = 5;
LABEL_6:
      (*(void (**)(void))(*v5 + 8 * v6))();
    }
  }
  return v2 != -1;
}

void sub_23C5E5200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::quick_sort<unsigned int>(uint64_t result, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = *a3;
  if (*a2 < *a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    if (v4 >= (unint64_t)((*(_QWORD *)(result + 48) - v7) >> 2))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(result, (uint64_t)a2, (uint64_t)a3);
    v11 = *(_DWORD *)(v7 + 4 * v4);
    v12 = *a2;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 40);
      if (v12 >= (unint64_t)((*(_QWORD *)(v6 + 48) - v13) >> 2))
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(result, (uint64_t)a2, (uint64_t)a3);
      v14 = *(_DWORD *)(v13 + 4 * v12);
      if (v14 >= v11)
      {
        if (v14 > v11)
        {
          v17 = v5;
          v18 = v12;
          v16 = *(_QWORD *)(a4 + 24);
          if (!v16)
LABEL_17:
            std::__throw_bad_function_call[abi:ne180100]();
          result = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v16 + 48))(v16, &v18, &v17);
          --v5;
          goto LABEL_12;
        }
      }
      else
      {
        v17 = v12;
        v18 = v4;
        v15 = *(_QWORD *)(a4 + 24);
        if (!v15)
          goto LABEL_17;
        result = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v15 + 48))(v15, &v18, &v17);
        ++v4;
      }
      ++v12;
LABEL_12:
      if (v12 > v5)
      {
        v17 = v4 - 1;
        v18 = v12;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v9;
  int v10;
  void *__p[2];
  char v12;
  void **v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v10) = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(this + 7, (uint64_t)&v10, (unsigned __int8 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v4 == -1)
    cv3d::cv::gess::alg::SortFaceByGroupID();
  LODWORD(__p[0]) = v4;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)this + 7, (unsigned int *)__p, v3);
  v9 = ((unint64_t)((char *)this[20] - (char *)this[19]) >> 2) - 1;
  v10 = 0;
  __p[0] = &off_250D4B2E0;
  __p[1] = this;
  v13 = __p;
  v6 = v13;
  if (v13 == __p)
  {
    v7 = 4;
    v6 = __p;
    goto LABEL_8;
  }
  if (v13)
  {
    v7 = 5;
LABEL_8:
    (*((void (**)(void))*v6 + v7))();
  }
  return 1;
}

void sub_23C5E5498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **p_p;
  uint64_t v18;

  p_p = a16;
  if (a16 == &__p)
  {
    v18 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*((void (**)(void))*p_p + v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::quick_sort<unsigned short>(uint64_t result, int *a2, int *a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  v4 = *a2;
  v5 = *a3;
  if (*a2 < *a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    if (v4 >= (unint64_t)((*(_QWORD *)(result + 48) - v7) >> 1))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(result, (uint64_t)a2, (uint64_t)a3);
    v11 = *(unsigned __int16 *)(v7 + 2 * v4);
    v12 = *a2;
    while (1)
    {
      v13 = *(_QWORD *)(v6 + 40);
      if (v12 >= (unint64_t)((*(_QWORD *)(v6 + 48) - v13) >> 1))
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(result, (uint64_t)a2, (uint64_t)a3);
      v14 = *(unsigned __int16 *)(v13 + 2 * v12);
      if (v14 >= v11)
      {
        if (v14 > v11)
        {
          v17 = v5;
          v18 = v12;
          v16 = *(_QWORD *)(a4 + 24);
          if (!v16)
LABEL_17:
            std::__throw_bad_function_call[abi:ne180100]();
          result = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v16 + 48))(v16, &v18, &v17);
          --v5;
          goto LABEL_12;
        }
      }
      else
      {
        v17 = v12;
        v18 = v4;
        v15 = *(_QWORD *)(a4 + 24);
        if (!v15)
          goto LABEL_17;
        result = (*(uint64_t (**)(uint64_t, int *, int *))(*(_QWORD *)v15 + 48))(v15, &v18, &v17);
        ++v4;
      }
      ++v12;
LABEL_12:
      if (v12 > v5)
      {
        v17 = v4 - 1;
        v18 = v12;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, const unsigned int *a3, const unsigned int *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  int v12;
  uint64_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  int v17;
  int v18;
  void *__p[2];
  char v20;
  void **v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)a2;
  v5 = *a3;
  if (v4 > v5)
    return 0;
  v7 = ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2) - 1;
  if (v7 < v4 || v7 < v5)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v18 = 0;
  v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)this + 7, (uint64_t)&v18, (unsigned __int8 *)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  if (v12 == -1)
    cv3d::cv::gess::alg::SortFaceByGroupID32Bit();
  LODWORD(__p[0]) = v12;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)__p);
  v14 = *(_DWORD *)a2;
  v17 = *a3;
  v18 = v14;
  __p[0] = &off_250D4B370;
  __p[1] = this;
  v21 = __p;
  v15 = v21;
  if (v21 == __p)
  {
    v16 = 4;
    v15 = __p;
    goto LABEL_14;
  }
  if (v21)
  {
    v16 = 5;
LABEL_14:
    (*((void (**)(void))*v15 + v16))();
  }
  return 1;
}

void sub_23C5E5784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
  void **p_p;
  uint64_t v18;

  p_p = a16;
  if (a16 == &__p)
  {
    v18 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v18 = 5;
  }
  (*((void (**)(void))*p_p + v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  int v26;
  float *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  float v33;
  unint64_t v34;
  float v35;
  _DWORD *v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  float v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float v94;
  int v95;
  _DWORD *v96;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  float v102;
  float *v103;
  float *v104;
  int v105;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 8);
      v7 = *(_QWORD *)a1;
      if (*((float *)&v6 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      v19 = *(_QWORD *)(a2 - 8);
      v20 = *(_QWORD *)(a1 + 24);
      if (*((float *)&v19 + 1) <= *((float *)&v20 + 1))
        return 1;
      *(_DWORD *)(a1 + 24) = v19;
      *(_DWORD *)(a2 - 8) = v20;
      v21 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v21;
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 24);
      v24 = HIDWORD(v23);
      if (*((float *)&v23 + 1) <= *((float *)&v22 + 1))
        return 1;
      *(_QWORD *)(a1 + 16) = v23;
      *(_QWORD *)(a1 + 24) = v22;
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_QWORD *)(a1 + 16);
      if (*((float *)&v26 + 1) <= *((float *)&v25 + 1))
        return 1;
      *(_DWORD *)(a1 + 8) = v26;
      *(_DWORD *)(a1 + 12) = v24;
      *(_QWORD *)(a1 + 16) = v25;
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD *)(a1 + 8);
      v29 = HIDWORD(*(_QWORD *)a1);
      if (*((float *)&v28 + 1) <= COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
        return 1;
      *(_DWORD *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v24;
      result = 1;
      *(_DWORD *)(a1 + 8) = v27;
      *(_DWORD *)(a1 + 12) = v29;
      return result;
    default:
      v9 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 4);
    v14 = *v9;
    if (v13 > COERCE_FLOAT(HIDWORD(*v9)))
    {
      v15 = *(_DWORD *)v10;
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16)
          break;
        v14 = *(_QWORD *)(v17 + 8);
        v16 -= 8;
        if (v13 <= *((float *)&v14 + 1))
        {
          v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v15;
      *(float *)(v18 + 4) = v13;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (uint64_t *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

void std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4B208;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4B208;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1,std::allocator<cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_1>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *a2;
  v4 = **(_QWORD **)(result + 8);
  v5 = *(_DWORD *)(v4 + 4 * v3);
  *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * *a3);
  *(_DWORD *)(v4 + 4 * *a3) = v5;
  return result;
}

_QWORD *std::__function::__value_func<void ()(std::string const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C5E642C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4B250;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4B250;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1},std::allocator<BOOL cv3d::cv::gess::alg::SortFaceByFAttribute<unsigned int>(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::mesh::FAttributeHandleT<unsigned int> const&)::{lambda(unsigned long const&,unsigned long const&)#1}>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v6 = v3;
}

uint64_t `anonymous namespace'::MeshFaceSwap(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  uint64_t result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  v6 = a1 + 104;
  v19 = *a2;
  v7 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v19);
  v19 = *a3;
  v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v6, &v19);
  v19 = v7;
  do
  {
    v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v19) + 8);
    v18 = *a3;
    v19 = v9;
    cv3d::cv::gess::mesh::Topology::SetFace(v6, &v18, &v19);
  }
  while (v19 != -1 && v19 != v7);
  v19 = v8;
  do
  {
    v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v19) + 8);
    v18 = *a2;
    v19 = v11;
    result = cv3d::cv::gess::mesh::Topology::SetFace(v6, &v18, &v19);
  }
  while (v19 != -1 && v19 != v8);
  v15 = *(uint64_t **)(a1 + 56);
  v14 = *(uint64_t **)(a1 + 64);
  if (v15 != v14)
  {
    v16 = *a2;
    v17 = *a3;
    do
    {
      result = *v15;
      if (*v15)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, v16, v17);
      v15 += 2;
    }
    while (v15 != v14);
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250D4B298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D4B298;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &,std::function<void ()(unsigned int const&,unsigned int const&)> const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;

  v4 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  v10 = *a3;
  v5 = v10;
  v11 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v10 = v5;
  v11 = v4;
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, unsigned int *, unsigned int *))(*(_QWORD *)v8 + 48))(v8, &v11, &v10);
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4B2E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4B2E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v6 = v3;
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4B328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4B328;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v6 = v3;
}

void std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4B370;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4B370;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0,std::allocator<cv3d::cv::gess::alg::SortFaceByGroupID32Bit(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  v3 = *a3;
  v4 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v6 = v3;
}

uint64_t cv3d::cv::gess::alg::ValidateLODInput(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v7;
  __int128 v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152)
    || *((_DWORD *)a2 + 1) < *((_DWORD *)a2 + 2)
    || *((_DWORD *)a2 + 3) < *((_DWORD *)a2 + 4))
  {
    return 0;
  }
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(a3 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v8;
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)((char *)a2 + 40));
  v9 = *((_BYTE *)a2 + 80);
  *(_OWORD *)(a3 + 64) = a2[4];
  *(_BYTE *)(a3 + 80) = v9;
  cv3d::cv::gess::alg::ConfigOutput::operator=(a3 + 88, (uint64_t)a2 + 88);
  if (!*(_DWORD *)a2)
  {
    v10 = 1;
    goto LABEL_9;
  }
  if (*(_DWORD *)a2 >= 0x1Fu)
  {
    v10 = 30;
LABEL_9:
    *(_DWORD *)a3 = v10;
  }
  if (*((_DWORD *)a2 + 1) > 0x493E0u)
    *(_DWORD *)(a3 + 4) = 300000;
  if (*((_DWORD *)a2 + 2) <= 0x3E7u)
    *(_DWORD *)(a3 + 8) = 1000;
  if (*((_DWORD *)a2 + 3) > 0x2000u)
    *(_DWORD *)(a3 + 12) = 0x2000;
  if (*((_DWORD *)a2 + 4) <= 0x7Fu)
    *(_DWORD *)(a3 + 16) = 128;
  v11 = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  v12 = v11 >> 2;
  v13 = (unint64_t)v11 >> 2;
  if (v12 < *((unsigned int *)a2 + 2))
  {
    *(_DWORD *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v13;
    *(_DWORD *)(a3 + 8) = v13;
  }
  if (v12 < *((unsigned int *)a2 + 1))
    *(_DWORD *)(a3 + 4) = v13;
  return 1;
}

uint64_t cv3d::cv::gess::alg::ComputeLODSizes(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v11;
  float v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  long double v24;
  uint64_t v25;
  long double v26;
  long double v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  long double v31;
  unsigned int v32;

  v5 = *a4;
  v6 = a4[1] - *a4;
  if (v6)
  {
    v11 = v6 >> 2;
    v12 = *(float *)(a2 + 36);
    v13 = (float)*(unsigned int *)(a2 + 16);
    v14 = (float)*(unsigned int *)(a2 + 12);
    v15 = (float)((float)(v12 * v13) / v14);
    if (v15 <= 1)
      v15 = 1;
    if (v12 <= 2)
      v16 = 2;
    else
      v16 = v12;
    v17 = 1.0 / (float)(*(_DWORD *)a2 - 1);
    v18 = powf((float)v15 / (float)v16, v17);
    v19 = powf(v13 / v14, v17);
    v20 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
    v21 = *(_DWORD *)(a2 + 8);
    if (v21 >= v20)
      v21 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
    if (*(_DWORD *)(a2 + 4) >= v20)
      v22 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
    else
      v22 = *(_DWORD *)(a2 + 4);
    v23 = 0;
    v24 = powf((float)v21 / (float)v22, v17);
    v25 = *a3;
    v26 = v19;
    v27 = v18;
    v28 = *a5;
    do
    {
      *(double *)&v29 = pow(v24, (double)v23) * (double)v22;
      *(_DWORD *)(v25 + 4 * v23) = *(double *)&v29;
      LODWORD(v29) = *(_DWORD *)(a2 + 12);
      v30 = (double)v29;
      v31 = pow(v26, (double)v23);
      *(_DWORD *)(v5 + 4 * v23) = 1 << vcvtas_u32_f32(log2f((float)(v31 * v30)));
      v32 = (pow(v27, (double)v23) * (double)v16);
      if (v32 <= 1)
        v32 = 1;
      *(_DWORD *)(v28 + 4 * v23++) = 1 << vcvtas_u32_f32(log2f((float)v32));
    }
    while (v11 > v23);
  }
  return 1;
}

BOOL cv3d::cv::gess::alg::InitializeMaterialAttributes(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t **v19;
  unsigned __int16 v21;
  int v22;
  std::string __p;
  int v24;
  unsigned __int16 *v25;

  v24 = -1;
  if (cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)this))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    v4 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v24, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = v24;
  }
  else
  {
    v4 = 0;
    v5 = -1;
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = v5;
  v6 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)&__p, v3);
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v22 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  v8 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)this, &v22, (unsigned __int8 *)&__p);
  v10 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_12;
  }
  else if (v8)
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)this, &v22, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_12:
  LODWORD(__p.__r_.__value_.__l.__data_) = v22;
  v11 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)this + 10, (unsigned int *)&__p, v9);
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 32))(v11, 1);
  v13 = v11 + 5;
  v12 = (uint64_t **)v11[5];
  if ((uint64_t **)v13[1] == v12)
    cv3d::cv::gess::mesh::QuadMesh::InitVF();
  if (v7)
  {
    v14 = 0;
    for (i = 0; i != v7; ++i)
    {
      v16 = v6[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v6[6] - v16) >> 3) <= i)
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      v17 = (__int128 *)(v16 + v14);
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
      }
      else
      {
        v18 = *v17;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      }
      v21 = i;
      v25 = &v21;
      v19 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v12, &v21, (uint64_t)&std::piecewise_construct, &v25);
      std::string::operator=((std::string *)(v19 + 5), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 += 24;
    }
  }
  return v4;
}

void sub_23C5E6DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::ComputeLowMeshUV(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, unsigned int *a6)
{
  int v12;
  int v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  void *__p;
  int v23;
  int v24;
  float v25;
  char v26;
  char v27;
  int v28;
  char v29;
  int v30;
  int v31;
  __int16 v32;
  char v33;
  float v34;
  uint64_t v35;
  int v36;

  if (a3[5])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    v36 = 0;
    v35 = 0;
    v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a2 + 56), (uint64_t)&v35, (unsigned __int8 *)&__p);
    if (v27 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v35 = 0;
    v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v35, (unsigned __int8 *)&__p);
    if (v27 < 0)
      operator delete(__p);
    v14 = 1;
    if (v12 != -1 && v13 != -1)
      v14 = cv3d::cv::gess::alg::ComputeIMTFromHighMesh(a1, a2, a4);
    result = 0;
    LODWORD(v25) = 100000;
    v32 = 257;
    LOBYTE(v24) = 0;
    v26 = 0;
    v33 = 1;
    v28 = *a5;
    v29 = 1;
    __p = (void *)a3[6];
    v23 = a3[7];
    v34 = (float)*a6;
    v16 = a3[8];
    if (v16 == 2)
      v17 = 2;
    else
      v17 = 1;
    if (v16)
      v18 = v17;
    else
      v18 = 0;
    v30 = v18;
    v31 = 0;
    if (v14)
      return cv3d::cv::gess::alg::IsoChartParameterize(a1, (uint64_t)&__p);
  }
  else
  {
    v19 = *a5;
    LODWORD(__p) = 1065749138;
    HIDWORD(__p) = v19;
    LOBYTE(v23) = 1;
    v25 = (float)*a6;
    v20 = a3[8];
    if (v20 == 2)
      v21 = 2;
    else
      v21 = 1;
    if (!v20)
      v21 = 0;
    v24 = v21;
    return cv3d::cv::gess::alg::BlenderUV2Parameterize(a1, (float *)&__p);
  }
  return result;
}

void sub_23C5E6FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::GenerateLODInMemory(uint64_t a1, _QWORD *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t GPU;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  _QWORD *v24;
  uint64_t v25;
  cv3d::cv::gess::mesh::TriMesh *v26;
  _BOOL4 v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  void *__p[2];
  char v46;
  __int128 v47;
  char v48;
  void *v49[50];
  void *v50[3];
  std::string v51;
  void *v52;
  char v53;
  float v54;
  __int16 v55;
  int v56;
  void *v57[9];
  uint64_t v58;
  uint64_t v59;
  std::vector<unsigned int> v60;
  std::vector<unsigned int> v61;
  std::vector<unsigned int> v62;
  unsigned int __n[10];
  std::string v64;
  __int128 v65;
  char v66;
  void *v67[6];
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[24];
  _BYTE *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::alg::ConfigLOD::ConfigLOD((cv3d::cv::gess::alg::ConfigLOD *)__n);
  if ((cv3d::cv::gess::alg::ValidateLODInput(a1, a3, (uint64_t)__n) & 1) == 0)
  {
LABEL_59:
    GPU = 0;
    goto LABEL_72;
  }
  v10 = *a4;
  v9 = a4[1];
  if (*a4 != v9)
  {
    v11 = (void (***)(_QWORD))(v9 - 184);
    v12 = (void (***)(_QWORD))(v9 - 184);
    do
    {
      v13 = *v12;
      v12 -= 23;
      (*v13)(v11);
      v14 = v11 == (void (***)(_QWORD))v10;
      v11 = v12;
    }
    while (!v14);
    v16 = *a5;
    v15 = a5[1];
    goto LABEL_8;
  }
  v16 = *a5;
  v15 = a5[1];
  if (*a5 != v15)
  {
LABEL_8:
    a4[1] = v10;
    while (v15 != v16)
    {
      v15 -= 72;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(v15);
    }
    a5[1] = v16;
  }
  if (v68)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v57[1] = 0;
    v57[0] = 0;
    v17 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v57, (unsigned __int8 *)__p);
    if (v46 < 0)
      operator delete(__p[0]);
    if (v17 == -1)
      goto LABEL_59;
  }
  std::vector<unsigned int>::vector(&v62, __n[0]);
  std::vector<unsigned int>::vector(&v61, __n[0]);
  std::vector<unsigned int>::vector(&v60, __n[0]);
  cv3d::cv::gess::alg::ComputeLODSizes(a1, (uint64_t)__n, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60);
  std::vector<cv3d::cv::gess::mesh::TriMesh>::resize(a4, __n[0]);
  std::vector<cv3d::cv::gess::mesh::Material>::resize(a5, __n[0]);
  cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)v57, (void **)a1);
  v57[0] = &off_250D49940;
  v54 = 0.618;
  v55 = 256;
  v56 = 1065353216;
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)__p);
  v47 = v65;
  v48 = v66;
  cv3d::cv::gess::alg::ConfigOutput::operator=((uint64_t)v49, (uint64_t)v67);
  HIDWORD(v49[0]) = 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v42);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v50, (char *)v42, (uint64_t)v43, (v43 - (_BYTE *)v42) >> 3);
  std::string::operator=(&v51, &v64);
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (__n[0])
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v54 = (float)((float)(unint64_t)((v59 - v58) >> 2) - (float)v62.__begin_[v21])
          / (float)(unint64_t)((v59 - v58) >> 2);
      if ((GPU & 1) != 0)
      {
        v80 = 0;
        v23 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify((cv3d::cv::gess::mesh::PolyMesh *)v57, (int *)&v54, (uint64_t)v79);
        v24 = v80;
        if (v80 == v79)
        {
          v24 = v79;
          v25 = 4;
          goto LABEL_26;
        }
        if (v80)
        {
          v25 = 5;
LABEL_26:
          (*(void (**)(void))(*v24 + 8 * v25))();
        }
      }
      else
      {
        v23 = 0;
      }
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)(*a4 + v20), v57);
      if (!v23
        || !cv3d::cv::gess::alg::ComputeLowMeshUV(*a4 + v20, a1, __n, (uint64_t)v50, (int *)&v61.__begin_[v21], &v60.__begin_[v21]))
      {
        GPU = 0;
        LODWORD(v49[0]) = v61.__begin_[v21];
        goto LABEL_34;
      }
      v27 = cv3d::cv::gess::alg::InitializeMaterialAttributes((cv3d::cv::gess::alg *)(*a4 + v20), v26);
      LODWORD(v49[0]) = v61.__begin_[v21];
      if (!v27)
      {
        GPU = 0;
        goto LABEL_34;
      }
      v28 = (uint64_t *)(*a4 + v20);
      v29 = *a5 + v19;
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v72 = 0u;
      v73 = 0u;
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      GPU = cv3d::cv::gess::alg::InternalBake((float32x4_t *)a1, a2, v28, v29, (uint64_t)__p, 0, 0, (cv3d::cv::gess::alg::BakeCallbackBundle *)&v69);
      v30 = (__int128 *)*((_QWORD *)&v78 + 1);
      if (*((__int128 **)&v78 + 1) == &v77)
      {
        v30 = &v77;
        v31 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v78 + 1))
          goto LABEL_39;
        v31 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_39:
      v32 = (__int128 *)*((_QWORD *)&v76 + 1);
      if (*((__int128 **)&v76 + 1) == &v75)
      {
        v32 = &v75;
        v33 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v76 + 1))
          goto LABEL_44;
        v33 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_44:
      v34 = (__int128 *)*((_QWORD *)&v74 + 1);
      if (*((__int128 **)&v74 + 1) == &v73)
      {
        v34 = &v73;
        v35 = 4;
      }
      else
      {
        if (!*((_QWORD *)&v74 + 1))
          goto LABEL_49;
        v35 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
LABEL_49:
      v36 = (__int128 *)*((_QWORD *)&v72 + 1);
      if (*((__int128 **)&v72 + 1) == &v71)
      {
        v36 = &v71;
        v37 = 4;
        goto LABEL_53;
      }
      if (*((_QWORD *)&v72 + 1))
      {
        v37 = 5;
LABEL_53:
        (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
      }
      v38 = (__int128 *)*((_QWORD *)&v70 + 1);
      if (*((__int128 **)&v70 + 1) == &v69)
      {
        v38 = &v69;
        v39 = 4;
        goto LABEL_58;
      }
      if (*((_QWORD *)&v70 + 1))
      {
        v39 = 5;
LABEL_58:
        (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
      }
LABEL_34:
      ++v22;
      v20 += 184;
      v19 += 72;
      ++v21;
    }
    while (v22 < __n[0]);
  }
  if (v53 < 0)
    operator delete(v52);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v49);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v57);
  if (v60.__begin_)
  {
    v60.__end_ = v60.__begin_;
    operator delete(v60.__begin_);
  }
  if (v61.__begin_)
  {
    v61.__end_ = v61.__begin_;
    operator delete(v61.__begin_);
  }
  if (v62.__begin_)
  {
    v62.__end_ = v62.__begin_;
    operator delete(v62.__begin_);
  }
LABEL_72:
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v67);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  return GPU;
}

void sub_23C5E762C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0 - 104);
  if (v1 == (_QWORD *)(v0 - 128))
  {
    v2 = 4;
    v1 = (_QWORD *)(v0 - 128);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    v2 = 5;
  }
  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  JUMPOUT(0x23C5E7668);
}

void sub_23C5E7664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v11;
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a10);
  cv3d::cv::gess::alg::ConfigBake::~ConfigBake((void **)va);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&STACK[0x280]);
  v11 = (void *)STACK[0x340];
  if (STACK[0x340])
  {
    STACK[0x348] = (unint64_t)v11;
    operator delete(v11);
  }
  v12 = (void *)STACK[0x358];
  if (STACK[0x358])
  {
    STACK[0x360] = (unint64_t)v12;
    operator delete(v12);
  }
  v13 = (void *)STACK[0x370];
  if (STACK[0x370])
  {
    STACK[0x378] = (unint64_t)v13;
    operator delete(v13);
  }
  cv3d::cv::gess::alg::ConfigLOD::~ConfigLOD((void **)&STACK[0x388]);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cv3d::cv::gess::mesh::TriMesh>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD);
  uint64_t (***v9)(_QWORD);
  uint64_t (**v10)(_QWORD);
  BOOL v11;

  v2 = result;
  v3 = result[1];
  v4 = 0xD37A6F4DE9BD37A7 * ((v3 - *result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<cv3d::cv::gess::mesh::TriMesh>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 184 * a2;
    if (v3 != v7)
    {
      v8 = (uint64_t (***)(_QWORD))(v3 - 184);
      v9 = (uint64_t (***)(_QWORD))(v3 - 184);
      do
      {
        v10 = *v9;
        v9 -= 23;
        result = (uint64_t *)(*v10)(v8);
        v11 = v8 == (uint64_t (***)(_QWORD))v7;
        v8 = v9;
      }
      while (!v11);
    }
    v2[1] = v7;
  }
  return result;
}

void std::vector<cv3d::cv::gess::mesh::Material>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<cv3d::cv::gess::mesh::Material>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 72 * a2;
    while (v3 != v7)
    {
      v3 -= 72;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(v3);
    }
    a1[1] = v7;
  }
}

void cv3d::cv::gess::alg::ConfigLOD::~ConfigLOD(void **this)
{
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(this + 11);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

BOOL cv3d::cv::gess::alg::GenerateLOD(uint64_t **this, const cv3d::cv::gess::mesh::TriMesh *a2, std::__fs::filesystem::path *a3, std::__fs::filesystem::path *a4, const cv3d::cv::gess::alg::ConfigLOD *a5)
{
  _BOOL8 v9;
  int v10;
  _BOOL8 GPU;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _BOOL4 v15;
  _QWORD *v16;
  uint64_t v17;
  cv3d::cv::gess::mesh::TriMesh *v18;
  _BOOL4 v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  __int128 *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  const cv3d::cv::gess::mesh::TriMesh *v39;
  std::string v40;
  std::string v41;
  std::__fs::filesystem::path v42;
  std::__fs::filesystem::path v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  void *__p[2];
  char v48;
  __int128 v49;
  char v50;
  void *v51[50];
  void *v52[3];
  std::string v53;
  void *v54;
  char v55;
  float v56;
  __int16 v57;
  int v58;
  void *v59[19];
  uint64_t v60;
  uint64_t v61;
  std::vector<unsigned int> v62;
  std::vector<unsigned int> v63;
  std::vector<unsigned int> v64;
  unsigned int __n[10];
  std::string v66;
  __int128 v67;
  char v68;
  void *v69[6];
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  std::string v81;
  _QWORD v82[2];
  _BYTE v83[24];
  _BYTE *v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  std::__fs::filesystem::__status(a3, 0);
  v9 = 0;
  if (LOBYTE(__p[0]) && LOBYTE(__p[0]) != 255)
  {
    cv3d::cv::gess::alg::ConfigLOD::ConfigLOD((cv3d::cv::gess::alg::ConfigLOD *)__n);
    if ((cv3d::cv::gess::alg::ValidateLODInput((uint64_t)this, (__int128 *)a4, (uint64_t)__n) & 1) == 0)
      goto LABEL_73;
    if (!v70)
      goto LABEL_8;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v59[1] = 0;
    v59[0] = 0;
    v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)v59, (unsigned __int8 *)__p);
    if (v48 < 0)
      operator delete(__p[0]);
    if (v10 == -1)
    {
LABEL_73:
      v9 = 0;
    }
    else
    {
LABEL_8:
      std::vector<unsigned int>::vector(&v64, __n[0]);
      std::vector<unsigned int>::vector(&v63, __n[0]);
      std::vector<unsigned int>::vector(&v62, __n[0]);
      cv3d::cv::gess::alg::ComputeLODSizes((uint64_t)this, (uint64_t)__n, (uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62);
      cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)v59, (void **)this);
      v59[0] = &off_250D49940;
      v56 = 0.618;
      v57 = 256;
      v58 = 1065353216;
      cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)__p);
      v49 = v67;
      v50 = v68;
      cv3d::cv::gess::alg::ConfigOutput::operator=((uint64_t)v51, (uint64_t)v69);
      HIDWORD(v51[0]) = 1;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v44);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v52, (char *)v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 3);
      std::string::operator=(&v53, &v66);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v44);
      if (__n[0])
      {
        v39 = a2;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v56 = (float)((float)(unint64_t)((v61 - v60) >> 2) - (float)v64.__begin_[v12])
              / (float)(unint64_t)((v61 - v60) >> 2);
          if (GPU)
          {
            v84 = 0;
            v15 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify((cv3d::cv::gess::mesh::PolyMesh *)v59, (int *)&v56, (uint64_t)v83);
            v16 = v84;
            if (v84 == v83)
            {
              v16 = v83;
              v17 = 4;
              goto LABEL_18;
            }
            if (v84)
            {
              v17 = 5;
LABEL_18:
              (*(void (**)(void))(*v16 + 8 * v17))();
            }
          }
          else
          {
            v15 = 0;
          }
          cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)&v44);
          cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)&v44, v59);
          v19 = v15
             && cv3d::cv::gess::alg::ComputeLowMeshUV((uint64_t)&v44, (uint64_t)this, __n, (uint64_t)v52, (int *)&v63.__begin_[v12], &v62.__begin_[v12])&& cv3d::cv::gess::alg::InitializeMaterialAttributes((cv3d::cv::gess::alg *)&v44, v18);
          LODWORD(v51[0]) = v63.__begin_[v12];
          std::to_string(&v41, v13);
          v20 = std::string::insert(&v41, 0, "LOD", 3uLL);
          v21 = v20->__r_.__value_.__r.__words[0];
          v81.__r_.__value_.__r.__words[0] = v20->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
          v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          v42.__pn_.__r_.__value_.__r.__words[0] = v21;
          *(std::string::size_type *)((char *)&v42.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 7);
          v42.__pn_.__r_.__value_.__l.__size_ = v81.__r_.__value_.__r.__words[0];
          *((_BYTE *)&v42.__pn_.__r_.__value_.__s + 23) = v22;
          std::__fs::filesystem::operator/[abi:ne180100](&v42, (uint64_t)a3, &v43);
          if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41.__r_.__value_.__l.__data_);
          std::__fs::filesystem::__status(&v43, 0);
          v9 = v42.__pn_.__r_.__value_.__s.__data_[0] == 2 && v19;
          if (v42.__pn_.__r_.__value_.__s.__data_[0] != 2 && v19)
            v9 = std::__fs::filesystem::__create_directory(&v43, 0);
          std::to_string(&v40, v13);
          v23 = std::string::insert(&v40, 0, "lod", 3uLL);
          v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          v25 = std::string::append(&v81, ".obj", 4uLL);
          v26 = v25->__r_.__value_.__r.__words[0];
          v82[0] = v25->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
          v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          v41.__r_.__value_.__r.__words[0] = v26;
          *(std::string::size_type *)((char *)&v41.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v82 + 7);
          v41.__r_.__value_.__l.__size_ = v82[0];
          *((_BYTE *)&v41.__r_.__value_.__s + 23) = v27;
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v41, (uint64_t)&v43, &v42);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41.__r_.__value_.__l.__data_);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v40.__r_.__value_.__l.__data_);
            if (!v9)
              goto LABEL_66;
          }
          else if (!v9)
          {
            goto LABEL_66;
          }
          v80 = 0u;
          v79 = 0u;
          v78 = 0u;
          v77 = 0u;
          v76 = 0u;
          v75 = 0u;
          v74 = 0u;
          v73 = 0u;
          v72 = 0u;
          v71 = 0u;
          v9 = cv3d::cv::gess::alg::InternalBake((float32x4_t *)this, v39, (uint64_t *)&v44, &v42, (uint64_t)__p, 0, 0, (cv3d::cv::gess::alg::BakeCallbackBundle *)&v71);
          v28 = (__int128 *)*((_QWORD *)&v80 + 1);
          if (*((__int128 **)&v80 + 1) == &v79)
          {
            v28 = &v79;
            v29 = 4;
          }
          else
          {
            if (!*((_QWORD *)&v80 + 1))
              goto LABEL_46;
            v29 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_46:
          v30 = (__int128 *)*((_QWORD *)&v78 + 1);
          if (*((__int128 **)&v78 + 1) == &v77)
          {
            v30 = &v77;
            v31 = 4;
          }
          else
          {
            if (!*((_QWORD *)&v78 + 1))
              goto LABEL_51;
            v31 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_51:
          v32 = (__int128 *)*((_QWORD *)&v76 + 1);
          if (*((__int128 **)&v76 + 1) == &v75)
          {
            v32 = &v75;
            v33 = 4;
          }
          else
          {
            if (!*((_QWORD *)&v76 + 1))
              goto LABEL_56;
            v33 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_56:
          v34 = (__int128 *)*((_QWORD *)&v74 + 1);
          if (*((__int128 **)&v74 + 1) == &v73)
          {
            v34 = &v73;
            v35 = 4;
            goto LABEL_60;
          }
          if (*((_QWORD *)&v74 + 1))
          {
            v35 = 5;
LABEL_60:
            (*(void (**)(void))(*(_QWORD *)v34 + 8 * v35))();
          }
          v36 = (__int128 *)*((_QWORD *)&v72 + 1);
          if (*((__int128 **)&v72 + 1) == &v71)
          {
            v36 = &v71;
            v37 = 4;
            goto LABEL_65;
          }
          if (*((_QWORD *)&v72 + 1))
          {
            v37 = 5;
LABEL_65:
            (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
          }
LABEL_66:
          if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__pn_.__r_.__value_.__l.__data_);
          if (v9)
          {
            ++v14;
            ++v13;
            ++v12;
            LOBYTE(GPU) = 1;
            if (v14 < __n[0])
              continue;
          }
          goto LABEL_75;
        }
      }
      v9 = GPU;
LABEL_75:
      cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v44);
      if (v55 < 0)
        operator delete(v54);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (v52[0])
      {
        v52[1] = v52[0];
        operator delete(v52[0]);
      }
      cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v51);
      cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v59);
      if (v62.__begin_)
      {
        v62.__end_ = v62.__begin_;
        operator delete(v62.__begin_);
      }
      if (v63.__begin_)
      {
        v63.__end_ = v63.__begin_;
        operator delete(v63.__begin_);
      }
      if (v64.__begin_)
      {
        v64.__end_ = v64.__begin_;
        operator delete(v64.__begin_);
      }
    }
    cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput(v69);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_23C5E7F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0)
    operator delete(__p);
  cv3d::cv::gess::alg::ConfigLOD::~ConfigLOD((void **)&STACK[0x498]);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::GenerateLOD(cv3d::cv::gess::alg *this, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *a3, const cv3d::cv::gess::alg::ConfigLOD *a4)
{
  const cv3d::cv::gess::alg::ConfigLOD *v7;
  _BOOL4 ObjFile;
  int v9;
  _BOOL8 v10;
  std::string __p;
  __int16 v13;
  char v14;
  int v15;
  _OWORD v16[3];
  char **v17;
  char *v18[2];
  uint64_t *v19;
  uint64_t *v20;
  _QWORD v21[2];

  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v19);
  v18[0] = 0;
  v18[1] = 0;
  memset(v16, 0, sizeof(v16));
  v17 = v18;
  v13 = 1;
  v14 = 1;
  v15 = 3;
  if (*((char *)this + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  else
    __p = *(std::string *)this;
  ObjFile = cv3d::cv::gess::io::LoadObjFile((__int128 *)&__p, (uint64_t)&v19, (uint64_t)v16, (uint64_t)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (a3[5].__pn_.__r_.__value_.__s.__data_[16])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v21[0] = 0;
    v21[1] = 0;
    v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(&v20, (uint64_t)v21, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v9 == -1)
    {
      if (!ObjFile || !cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal(&v19))
        goto LABEL_17;
    }
    else if (!ObjFile)
    {
LABEL_17:
      v10 = 0;
      goto LABEL_18;
    }
  }
  else if (!ObjFile)
  {
    goto LABEL_17;
  }
  v10 = cv3d::cv::gess::alg::GenerateLOD(&v19, (const cv3d::cv::gess::mesh::TriMesh *)v16, a2, a3, v7);
LABEL_18:
  std::__tree<std::string>::destroy((uint64_t)&v17, v18[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16[1] + 8;
  std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v19);
  return v10;
}

void sub_23C5E827C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  cv3d::cv::gess::mesh::Material::~Material(&a16);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a25);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::alg::ConfigLOD *cv3d::cv::gess::alg::ConfigLOD::ConfigLOD(cv3d::cv::gess::alg::ConfigLOD *this)
{
  *(_OWORD *)this = xmmword_23C60CD10;
  *((_QWORD *)this + 2) = 0x100000100;
  *((_QWORD *)this + 3) = 0x3DCCCCCD000000C8;
  *((_QWORD *)this + 4) = 0x4100000000000001;
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>((std::string *)((char *)this + 40), (char *)&unk_23C62207F);
  *((_QWORD *)this + 8) = 0x3F80000000000002;
  *((_QWORD *)this + 9) = 0x7F7FFFFF00000000;
  *((_BYTE *)this + 80) = 1;
  cv3d::cv::gess::alg::ConfigOutput::ConfigOutput((cv3d::cv::gess::alg::ConfigLOD *)((char *)this + 88));
  *((_DWORD *)this + 23) = 1;
  *((_BYTE *)this + 96) = 1;
  *((_BYTE *)this + 136) = 1;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 256) = 0;
  *((_BYTE *)this + 296) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_BYTE *)this + 376) = 0;
  *((_BYTE *)this + 416) = 0;
  *((_BYTE *)this + 456) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = 2;
  return this;
}

void sub_23C5E8388(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

cv3d::cv::gess::mesh::PolyMesh *std::vector<cv3d::cv::gess::mesh::TriMesh>::__append(uint64_t *a1, unint64_t a2)
{
  cv3d::cv::gess::mesh::PolyMesh *result;
  uint64_t v5;
  uint64_t v6;
  cv3d::cv::gess::mesh::TriMesh *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  cv3d::cv::gess::mesh::TriMesh *v13;
  uint64_t v14;
  cv3d::cv::gess::mesh::TriMesh *v15;
  uint64_t v16;
  cv3d::cv::gess::mesh::TriMesh *v17;
  _QWORD v18[2];
  cv3d::cv::gess::mesh::TriMesh *v19;
  char *v20;
  cv3d::cv::gess::mesh::PolyMesh *v21;

  v6 = a1[2];
  result = (cv3d::cv::gess::mesh::PolyMesh *)(a1 + 2);
  v5 = v6;
  v7 = (cv3d::cv::gess::mesh::TriMesh *)*((_QWORD *)result - 1);
  if (0xD37A6F4DE9BD37A7 * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v7 + 184 * a2);
      v14 = 184 * a2;
      do
      {
        result = cv3d::cv::gess::mesh::TriMesh::TriMesh(v7);
        v7 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v7 + 184);
        v14 -= 184;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xD37A6F4DE9BD37A7 * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1642C8590B21642)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xD37A6F4DE9BD37A7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xB21642C8590B21)
      v11 = 0x1642C8590B21642;
    else
      v11 = v9;
    v21 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (cv3d::cv::gess::mesh::TriMesh *)&v12[184 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[184 * v11];
    v16 = 184 * a2;
    v17 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v15 + 184 * a2);
    do
    {
      cv3d::cv::gess::mesh::TriMesh::TriMesh(v15);
      v15 = (cv3d::cv::gess::mesh::TriMesh *)((char *)v15 + 184);
      v16 -= 184;
    }
    while (v16);
    v19 = v17;
    std::vector<cv3d::cv::gess::mesh::TriMesh>::__swap_out_circular_buffer(a1, v18);
    return (cv3d::cv::gess::mesh::PolyMesh *)std::__split_buffer<cv3d::cv::gess::mesh::TriMesh>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_23C5E8504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::TriMesh>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::mesh::TriMesh>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::TriMesh>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::TriMesh>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>,std::reverse_iterator<cv3d::cv::gess::mesh::TriMesh*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)(a7 - 184 + v11), (void **)(a3 + v11 - 184)) = &off_250D49940;
      v11 -= 184;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_23C5E8630(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 184)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<cv3d::cv::gess::mesh::TriMesh>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 184);
    *(_QWORD *)(a1 + 16) = i - 184;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<cv3d::cv::gess::mesh::Material>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 72 * a2;
      do
      {
        *(_QWORD *)(v7 + 64) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_QWORD *)(v7 + 48) = v7 + 56;
        v7 += 72;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[72 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[72 * v11];
    v15 = &v14[72 * a2];
    do
    {
      *((_QWORD *)v14 + 8) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_QWORD *)v14 + 6) = v14 + 56;
      v14 += 72;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<cv3d::cv::gess::mesh::Material>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<cv3d::cv::gess::mesh::Material>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_23C5E880C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::Material>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cv3d::cv::gess::mesh::Material>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v6 -= 9;
    v4 -= 72;
    result = std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_QWORD *std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material,cv3d::cv::gess::mesh::Material*>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *(_OWORD *)result = *(_OWORD *)a2;
  result[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  *(_OWORD *)(result + 3) = *(_OWORD *)(a2 + 24);
  result[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result[6] = *(_QWORD *)(a2 + 48);
  v2 = (_QWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 56);
  result[7] = v3;
  v4 = result + 7;
  v5 = *(_QWORD *)(a2 + 64);
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 48) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

uint64_t std::__split_buffer<cv3d::cv::gess::mesh::Material>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Material,0>(i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

vm_address_t cv3d::cv::gess::alg::custom_vm_allocate_float(cv3d::cv::gess::alg *this)
{
  vm_size_t v1;
  kern_return_t v2;
  vm_address_t result;
  BOOL v4;
  _QWORD *exception;
  std::bad_alloc v6;
  vm_address_t address;

  address = 0;
  v1 = cv3d::cv::gess::alg::internal::aligned_with_page_size(4 * (_QWORD)this);
  v2 = vm_allocate(*MEMORY[0x24BDAEC58], &address, v1, 1);
  result = address;
  if (v2)
    v4 = 1;
  else
    v4 = address == 0;
  if (v4)
  {
    std::bad_alloc::bad_alloc(&v6);
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8E8] + 16;
  }
  return result;
}

void sub_23C5E8A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::bad_alloc a9)
{
  std::bad_alloc::~bad_alloc(&a9);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::custom_vm_deallocate_float(cv3d::cv::gess::alg *this, float *a2)
{
  cv3d::cv::gess::alg::internal::aligned_with_page_size(4 * a2);
  JUMPOUT(0x242621770);
}

uint64_t cv3d::cv::gess::alg::imgfbuffer2vmbuffer(uint64_t a1, cv3d::cv::gess::alg *this)
{
  int v2;
  uint64_t v4;
  vm_address_t v5;
  uint64_t result;
  _DWORD *v7;
  int *v8;
  int v9;

  v2 = (int)this;
  v4 = this;
  v5 = cv3d::cv::gess::alg::custom_vm_allocate_float((cv3d::cv::gess::alg *)this);
  result = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v7 = (_DWORD *)v5;
    v8 = *(int **)(a1 + 16);
    do
    {
      v9 = *v8++;
      *v7++ = v9;
      --v4;
    }
    while (v4);
    goto LABEL_6;
  }
  if (result)
LABEL_6:
    result = MEMORY[0x2426211A0](result, 0x1000C8052888210);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t cv3d::cv::gess::alg::imgfvmbuffer2buffer(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  unint64_t v12;
  uint64_t result;

  v4 = 4 * a2;
  v5 = operator new[]();
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (a2)
  {
    v8 = a2;
    v9 = (_DWORD *)v5;
    v10 = *(int **)(a1 + 16);
    do
    {
      v11 = *v10++;
      *v9++ = v11;
      --v8;
    }
    while (v8);
  }
  v12 = cv3d::cv::gess::alg::internal::aligned_with_page_size(v4);
  result = MEMORY[0x242621770](*MEMORY[0x24BDAEC58], v7, v12);
  *(_QWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution(cv3d::cv::gess::alg *this, float *a2, float *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  double v10;
  float v11;
  BOOL v12;
  float v13;
  unint64_t v14;
  unint64_t v15;

  v5 = *a4;
  if (!*a4)
    cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution();
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)this;
  v8 = v5 == 1;
  if (v5 != 1 && (float)v7 * 0.7999 < (double)(v6 * v6 * (v5 - 1)))
  {
    v9 = v5 - 2;
    do
    {
      *a4 = v9 + 1;
      v6 = *(_QWORD *)a3;
      v7 = *(_QWORD *)this;
      v8 = v9 == 0;
      if (!v9)
        break;
      v10 = (double)(v6 * v6 * v9--);
    }
    while ((float)v7 * 0.7999 < v10);
  }
  if (v8)
  {
    v11 = *a2;
    v12 = *a2 > 0.0001 && v11 < 0.65;
    v13 = v11 / 0.65;
    if (!v12)
      v13 = 1.0;
    if (v6 >= 0x11)
    {
      v14 = (unint64_t)(float)(fmaxf(fminf(v13, 1.0), 0.1) * (float)(3 * v7));
      if (v6 * v6 > v14)
      {
        do
        {
          v15 = v6;
          v6 >>= 1;
        }
        while (v15 >= 0x22 && v6 * v6 > v14);
        *(_QWORD *)a3 = v6;
      }
    }
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::AutoMapNumberAndResolution(cv3d::cv::gess::alg *this, float *a2, float *a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  unint64_t v14;

  v9 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 <= 0x4000uLL)
  {
    if (v9 > 0xF)
      goto LABEL_6;
    v9 = 16;
  }
  else
  {
    v9 = 0x4000;
  }
  *(_QWORD *)a3 = v9;
LABEL_6:
  if ((v9 & (v9 - 1)) != 0)
  {
    v9 = (1 << vcvtas_u32_f32(log2f((float)v9)));
    *(_QWORD *)a3 = v9;
  }
  if (*a4)
  {
    cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution(this, a2, a3, a4, a5);
    return 1;
  }
  v10 = (float)*(unint64_t *)this * 0.75;
  v11 = (float)(v9 * v9);
  if (v9 >= 0x11 && v10 <= (float)(v11 * 0.50001))
  {
    do
    {
      v12 = v9;
      v9 >>= 1;
      v11 = (float)(v9 * v9);
    }
    while (v12 >= 0x22 && v10 <= (float)(v11 * 0.50001));
    *(_QWORD *)a3 = v9;
  }
  v13 = v10 / v11;
  *a4 = (unint64_t)v13;
  if (!(unint64_t)v13)
  {
    v14 = 1;
    goto LABEL_20;
  }
  if ((unint64_t)v13 == 1 && v13 > 1.6)
  {
    v14 = 2;
LABEL_20:
    *a4 = v14;
  }
  return 1;
}

uint64_t cv3d::cv::gess::alg::AutoMapNumberAndResolution(cv3d::cv::gess::alg *this, Material *a2, float *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;

  v25 = 0;
  v6 = *(_QWORD *)this;
  v7 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v7)
    goto LABEL_23;
  do
  {
    v11 = *(_QWORD *)(v6 + 32);
    if (v11)
    {
      v12 = v6 + 32;
      do
      {
        v13 = *(_DWORD *)(v11 + 28);
        v14 = v13 < 1;
        if (v13 >= 1)
          v15 = (uint64_t *)v11;
        else
          v15 = (uint64_t *)(v11 + 8);
        if (!v14)
          v12 = v11;
        v11 = *v15;
      }
      while (*v15);
      if (v12 != v6 + 32 && *(int *)(v12 + 28) <= 1)
      {
        v24 = 1;
        v16 = *((_QWORD *)this + 3)
            + 48
            * *(unsigned __int16 *)std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(v6 + 24, &v24);
        v17 = *(_QWORD *)(v16 + 8);
        v18 = *(std::__shared_weak_count **)(v16 + 16);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          v25 += (*(_DWORD *)(v17 + 8) * *(_DWORD *)(v17 + 4));
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        else
        {
          v25 += (*(_DWORD *)(v17 + 8) * *(_DWORD *)(v17 + 4));
        }
      }
    }
    v6 += 48;
  }
  while (v6 != v7);
  if (!v25)
  {
LABEL_23:
    if (*(_QWORD *)a3 <= 0x4000uLL)
    {
      if (*(_QWORD *)a3 > 0xFuLL)
        return 1;
      v22 = 16;
    }
    else
    {
      v22 = 0x4000;
    }
    *(_QWORD *)a3 = v22;
    return 1;
  }
  cv3d::cv::gess::alg::AutoMapNumberAndResolution((cv3d::cv::gess::alg *)&v25, (float *)a2, a3, a4, a5);
  return 1;
}

uint64_t cv3d::cv::gess::alg::InternalBakeHelper(float32x4_t *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, const std::__fs::filesystem::path *a13)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  _BOOL4 GPU;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  TopologyQuality *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  int v95;
  TopologyQuality *v96;
  char v97;
  __int128 v98;
  float32x4_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  cv3d::cv::gess::util::os *v111;
  std::chrono::system_clock::time_point v112;
  std::chrono::system_clock::time_point v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int32x2_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BOOL4 v130;
  _QWORD *v131;
  uint64_t v132;
  cv3d::cv::gess::util::os *v133;
  std::chrono::system_clock::time_point v134;
  std::chrono::system_clock::time_point v135;
  const cv3d::cv::gess::mesh::PolyMesh *v136;
  unint64_t v137;
  float v138;
  float v139;
  uint64_t v140;
  int32x2_t v141;
  uint64_t v142;
  uint64_t v143;
  _BOOL4 v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  unsigned int v155;
  uint64_t v156;
  float v157;
  double v158;
  int v159;
  double v160;
  int v161;
  float v162;
  uint64_t v163;
  float v164;
  _BOOL8 v165;
  uint64_t *v166;
  uint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  std::chrono::system_clock::time_point v170;
  _BOOL4 v171;
  unint64_t v172;
  int v173;
  std::chrono::system_clock::time_point v174;
  uint64_t v175;
  std::chrono::system_clock::time_point v176;
  std::chrono::system_clock::time_point v177;
  float32x4_t *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _DWORD *v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  std::chrono::system_clock::time_point v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  _QWORD *v200;
  uint64_t v201;
  int v202;
  double v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  BOOL v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  BOOL v233;
  int v234;
  std::string *v235;
  std::string::size_type v236;
  std::string *v237;
  std::string *v238;
  std::string *p_s;
  std::string::size_type v240;
  std::string *v241;
  __int128 v242;
  std::string *v243;
  std::string::size_type v244;
  std::string *v245;
  __int128 v246;
  const std::string::value_type *v247;
  std::string::size_type v248;
  std::string *v249;
  __int128 v250;
  uint64_t v251;
  int v252;
  _QWORD *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t *v259;
  int v260;
  unint64_t v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  BOOL v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _BOOL4 v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  _QWORD *v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  _BOOL4 v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  std::string::size_type v309;
  char *v310;
  unint64_t v311;
  uint64_t v312;
  float *v313;
  float v314;
  float v315;
  unsigned int v316;
  float v317;
  unsigned int v318;
  double v319;
  float v320;
  double v321;
  float v322;
  int v323;
  float v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::chrono::system_clock::time_point v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  uint64_t v344;
  float32x4_t v345;
  float v346;
  float v347;
  float v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  std::chrono::system_clock::time_point v352;
  int AomapWithIntersections;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  double v359;
  unsigned int v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  BOOL v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  BOOL v377;
  uint64_t v378;
  unint64_t *v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  BOOL v383;
  uint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  BOOL v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::string *v393;
  size_t v394;
  std::string *v395;
  _BYTE *v396;
  std::string *v397;
  std::string::size_type v398;
  std::string *v399;
  __int128 v400;
  std::string *v401;
  std::string::size_type v402;
  std::string *v403;
  __int128 v404;
  std::string *v405;
  std::string::size_type v406;
  std::string *v407;
  __int128 v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t *v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  BOOL v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  _BOOL8 v427;
  uint64_t *v428;
  int v429;
  unint64_t v430;
  uint64_t v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  uint64_t v439;
  float32x4_t v440;
  float v441;
  float v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _BOOL4 EnvironmentOcclusionMap;
  _QWORD *v447;
  uint64_t v448;
  _QWORD *v449;
  uint64_t v450;
  double v451;
  uint64_t **v452;
  unsigned int v453;
  uint64_t v454;
  int v455;
  unsigned int v456;
  uint64_t v457;
  unint64_t *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  BOOL v462;
  size_t v463;
  std::string *v464;
  _BYTE *v465;
  std::string *v466;
  std::string::size_type v467;
  std::string *v468;
  __int128 v469;
  std::string *v470;
  std::string::size_type v471;
  std::string *v472;
  __int128 v473;
  std::string *v474;
  std::string::size_type v475;
  std::string *v476;
  __int128 v477;
  uint64_t v478;
  _QWORD *v479;
  uint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  unint64_t v484;
  __int128 v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  unsigned int v489;
  uint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  int v494;
  std::chrono::system_clock::time_point v495;
  std::string::size_type DispMapWithFaceNormals;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  unint64_t *v505;
  unint64_t v506;
  uint64_t v507;
  int v508;
  double v509;
  unsigned int v510;
  uint64_t v511;
  unint64_t *v512;
  unint64_t v513;
  unsigned int v514;
  uint64_t v515;
  unint64_t *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  BOOL v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::string *v524;
  std::string::size_type v525;
  std::string *v526;
  std::string *v527;
  std::string *v528;
  std::string::size_type v529;
  std::string *v530;
  __int128 v531;
  std::string *v532;
  std::string::size_type v533;
  std::string *v534;
  __int128 v535;
  const std::string::value_type *v536;
  std::string::size_type v537;
  std::string *v538;
  __int128 v539;
  _QWORD *v540;
  uint64_t v541;
  std::chrono::system_clock::time_point v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  BOOL v546;
  char v547;
  char v548;
  int v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  unsigned int v553;
  unsigned int v554;
  uint64_t v555;
  unsigned int v556;
  unsigned int v557;
  _QWORD *v558;
  _DWORD *v559;
  uint64_t v560;
  uint64_t v561;
  _DWORD *v562;
  _DWORD *v563;
  _QWORD *v564;
  _DWORD *v565;
  _DWORD *v566;
  unsigned int v567;
  unsigned int v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  float *v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  cv3d::cv::gess::util::os *v580;
  uint64_t v581;
  std::chrono::system_clock::time_point v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  unsigned __int16 *v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  _QWORD *v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  uint64_t v596;
  unint64_t v597;
  float *v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  int64x2_t v603;
  int32x2_t v604;
  float v605;
  float v606;
  _BOOL4 v607;
  int v608;
  int v609;
  int v610;
  double v611;
  unsigned int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  cv3d::cv::gess::util::os *v618;
  int v619;
  uint64_t v620;
  _QWORD *v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  uint64_t v625;
  int v626;
  int v627;
  double v628;
  unsigned int v629;
  uint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  uint64_t v634;
  _QWORD *v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t *v643;
  uint64_t v644;
  uint64_t v645;
  float32x4_t *v646;
  uint64_t v647;
  float32x4_t *v648;
  float32x4_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unsigned int v653;
  uint64_t v654;
  unint64_t *v655;
  unint64_t v656;
  uint64_t v657;
  uint64_t v658;
  BOOL v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  uint64_t v666;
  uint64_t v667;
  cv3d::cv::gess::util::os *v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  uint64_t v674;
  std::__shared_weak_count *v675;
  uint64_t v676;
  unint64_t *v677;
  unint64_t v678;
  std::__shared_weak_count *v679;
  unint64_t *v680;
  unint64_t v681;
  int ImageFromTextureFilePath;
  std::__shared_weak_count *v683;
  uint64_t v684;
  unint64_t v685;
  int v686;
  unint64_t v687;
  __int128 v688;
  int v689;
  uint64_t v690;
  uint64_t v691;
  std::__shared_weak_count *v692;
  uint64_t v693;
  unint64_t *v694;
  unint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  uint64_t v700;
  unint64_t v701;
  const std::string::value_type **v702;
  __int128 v703;
  unsigned int v704;
  uint64_t v705;
  unint64_t *v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  BOOL v710;
  unsigned int v711;
  uint64_t v712;
  unint64_t *v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  BOOL v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  std::__shared_weak_count *v721;
  unint64_t *v722;
  unint64_t v723;
  vm_address_t v724;
  char *v725;
  std::__shared_weak_count *v726;
  unint64_t *v727;
  unint64_t v728;
  _DWORD *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  int RoughnessMap;
  _QWORD *v734;
  uint64_t v735;
  int v736;
  unsigned int v737;
  uint64_t v738;
  unsigned int v739;
  uint64_t v740;
  unint64_t *v741;
  unint64_t v742;
  uint64_t v743;
  uint64_t v744;
  BOOL v745;
  std::string *v746;
  std::string *v747;
  std::string::size_type v748;
  std::string *v749;
  __int128 v750;
  std::string *v751;
  std::string::size_type v752;
  std::string *v753;
  __int128 v754;
  const std::string::value_type *v755;
  std::string::size_type v756;
  std::string *v757;
  __int128 v758;
  _DWORD *v759;
  int v760;
  _QWORD *v761;
  uint64_t v762;
  std::__shared_weak_count *v763;
  unint64_t *v764;
  unint64_t v765;
  uint64_t v766;
  BOOL *v767;
  int v768;
  uint64_t v769;
  uint64_t v770;
  BOOL v771;
  char v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  cv3d::cv::gess::util::os *v779;
  int v780;
  int v781;
  char v782;
  uint64_t v783;
  _QWORD *v784;
  std::__shared_weak_count *v785;
  unint64_t *v786;
  unint64_t v787;
  uint64_t v788;
  unsigned __int8 *v789;
  float *v790;
  uint64_t v791;
  float v793;
  unsigned int v794;
  uint64_t v795;
  unint64_t *v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  BOOL v800;
  std::__shared_weak_count *v801;
  unint64_t *v802;
  unint64_t v803;
  std::__shared_weak_count *v804;
  unint64_t *v805;
  unint64_t v806;
  float v807;
  std::__shared_weak_count *v808;
  unint64_t *v809;
  unint64_t v810;
  std::string *v811;
  size_t v812;
  std::string *v813;
  _BYTE *v814;
  std::string *v815;
  std::string::size_type v816;
  std::string *v817;
  __int128 v818;
  std::string *v819;
  std::string::size_type v820;
  std::string *v821;
  __int128 v822;
  const std::string::value_type *v823;
  std::string::size_type v824;
  std::string *v825;
  __int128 v826;
  uint64_t v827;
  _QWORD *v828;
  uint64_t v829;
  std::string *v830;
  size_t v831;
  std::string *v832;
  _BYTE *v833;
  std::string *v834;
  std::string::size_type v835;
  std::string *v836;
  __int128 v837;
  std::string *v838;
  std::string::size_type v839;
  std::string *v840;
  __int128 v841;
  const std::string::value_type *v842;
  std::string::size_type v843;
  std::string *v844;
  __int128 v845;
  uint64_t v846;
  _QWORD *v847;
  uint64_t v848;
  void *v849;
  std::chrono::system_clock::time_point v850;
  uint64_t v851;
  std::chrono::system_clock::time_point v852;
  int v853;
  unint64_t v854;
  uint64_t v855;
  uint64_t *v856;
  uint64_t v857;
  _BOOL4 v858;
  _BYTE *v859;
  std::chrono::system_clock::time_point v860;
  BOOL v861;
  int v862[2];
  uint64_t v863;
  uint64_t v864;
  char v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unsigned __int8 v870;
  unsigned int v871;
  int v873;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t **v877;
  unsigned int *v878;
  int v879;
  int v880;
  uint64_t v881;
  float32x4_t *v882;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v883;
  size_t v884;
  float v885;
  uint64_t **v886;
  unsigned int *v887;
  float32x4_t v888;
  float32x4_t *v889;
  uint64_t v890;
  _QWORD *v891;
  uint64x2_t v892;
  uint64_t v893;
  unint64_t v894;
  __int128 v897;
  std::string v898;
  uint64_t v899[2];
  uint64_t v900[2];
  std::string v901;
  std::string v902;
  _DWORD *v903;
  uint64_t v904;
  int v905[2];
  std::__shared_weak_count *v906;
  int v907[2];
  std::__shared_weak_count *v908;
  std::string v909;
  __int128 v910;
  std::string v911;
  __int128 v912;
  std::string v913;
  std::string v914;
  _QWORD *v915;
  std::__shared_weak_count *v916;
  std::string v917;
  std::string v918;
  _QWORD *v919;
  std::__shared_weak_count *v920;
  std::string v921;
  __int128 v922;
  std::string v923;
  std::string v924;
  std::string v925;
  std::string v926;
  __int128 v927;
  std::string v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  std::string v934;
  std::string v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  __int128 v939;
  __int128 v940;
  std::string v941;
  std::string v942;
  std::string v943;
  std::string v944;
  std::string v945;
  std::string v946;
  std::string v947;
  void *v948;
  void *v949;
  uint64_t v950;
  void *v951;
  void *v952;
  uint64_t v953;
  __int128 v954;
  __int128 v955;
  int32x4_t v956;
  __int128 v957;
  _BYTE v958[64];
  uint64_t v959;
  uint64_t v960;
  uint64_t v961[3];
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  _QWORD v965[3];
  std::string v966;
  uint64_t v967[3];
  uint64_t v968[3];
  _QWORD v969[3];
  _BYTE v970[32];
  std::string v971;
  std::string v972;
  void *__p[2];
  char v974;
  __int16 v975;
  std::string v976[7];
  __int128 v977;
  int v978;
  float32x4_t v979;
  float32x4_t v980;
  void *v981;
  void *v982;
  uint64_t v983;
  void *__src;
  _BYTE *v985;
  uint64_t v986;
  int v987;
  __int128 v988;
  std::string::size_type v989;
  std::string *v990;
  _DWORD *v991;
  __int16 v992;
  unsigned int v993;
  uint64_t v994;
  unsigned int v995;
  uint64_t v996;
  int v997;
  unsigned int v998;
  std::string __s;
  _DWORD *v1000;
  void **v1001;
  std::string v1002;
  _DWORD *v1003;
  std::string *v1004;
  void **v1005;
  std::string v1006;
  std::string *v1007;
  _DWORD *v1008;
  _DWORD *v1009;
  __int128 *v1010;
  _DWORD *v1011;
  __int128 *v1012;
  std::string *v1013;
  std::string *v1014;
  __int128 *v1015;
  __int128 *v1016;
  _BYTE v1017[24];
  _BYTE *v1018;
  _BYTE v1019[24];
  _BYTE *v1020;
  _BYTE v1021[24];
  _BYTE *v1022;
  _BYTE v1023[24];
  _BYTE *v1024;
  _BYTE v1025[24];
  _BYTE *v1026;
  _BYTE v1027[24];
  _BYTE *v1028;
  _BYTE v1029[24];
  _BYTE *v1030;
  _BYTE v1031[24];
  _BYTE *v1032;
  _BYTE v1033[24];
  _BYTE *v1034;
  _BYTE v1035[24];
  _BYTE *v1036;
  _BYTE v1037[24];
  _BYTE *v1038;
  _BYTE v1039[24];
  _BYTE *v1040;
  _BYTE v1041[24];
  _BYTE *v1042;
  _BYTE v1043[24];
  _BYTE *v1044;
  _BYTE v1045[56];
  _BYTE v1046[24];
  _BYTE *v1047;
  _BYTE v1048[24];
  _BYTE *v1049;
  _QWORD v1050[3];
  _QWORD *v1051;
  _QWORD v1052[3];
  _QWORD *v1053;
  _BYTE v1054[24];
  _BYTE *v1055;
  uint64_t v1056;

  v1056 = *MEMORY[0x24BDAC8D0];
  v879 = *(unsigned __int8 *)(a5 + 504);
  rep = std::chrono::system_clock::now().__d_.__rep_;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1054, a11);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1052, a11 + 32);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1050, a11 + 64);
  v987 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  v19 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)a3, &v987, (unsigned __int8 *)__p);
  v883 = rep;
  if (v974 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v987;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>(a3 + 10, (unsigned int *)__p, v18);
  v893 = *(_QWORD *)(v20 + 40);
  if (*(_QWORD *)(v20 + 48) == v893)
    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
  v985 = 0;
  __src = 0;
  v986 = 0;
  v982 = 0;
  v981 = 0;
  v983 = 0;
  v977 = 0uLL;
  v978 = 0;
  v979 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v21.i64[0] = 0x80000000800000;
  v21.i64[1] = 0x80000000800000;
  v980 = v21;
  std::string::basic_string[abi:ne180100]<0>(&v972, (char *)&unk_23C62207F);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v972, 0, 0);
  if (SHIBYTE(v972.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v972.__r_.__value_.__l.__data_);
  if (&__src != (void **)(a5 + 456))
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&__src, *(char **)(a5 + 456), *(_QWORD *)(a5 + 464), (uint64_t)(*(_QWORD *)(a5 + 464) - *(_QWORD *)(a5 + 456)) >> 3);
  cv3d::cv::gess::alg::internal::CustomSortGPU((unint64_t **)&__src);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v981, (char *)__src, (uint64_t)v985, (v985 - (_BYTE *)__src) >> 3);
  v889 = (float32x4_t *)a3;
  v882 = a1;
  if (v19)
  {
    GPU = cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&v981);
    v24 = -1;
    LODWORD(v988) = -1;
    if (GPU)
    {
      std::string::basic_string[abi:ne180100]<0>(&v954, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      v25 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)a3, &v988, (unsigned __int8 *)&v954);
      if (SBYTE7(v955) < 0)
        operator delete((void *)v954);
      v24 = v988;
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
    v25 = 0;
    v24 = -1;
    LODWORD(v988) = -1;
  }
  LODWORD(v954) = v24;
  v877 = (uint64_t **)(a3 + 10);
  v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(a3 + 10, (unsigned int *)&v954, v22);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
    goto LABEL_175;
  v881 = a6;
  v870 = a7;
  v880 = a7;
  v894 = v28;
  if (v28)
  {
    v29 = 0;
    v30 = 0;
    v31 = (uint64_t *)(a4 + 24);
    do
    {
      LOWORD(v954) = v30;
      v32 = std::map<unsigned short,std::string>::at(v893, (unsigned __int16 *)&v954);
      if (*((char *)v32 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v970, (const std::string::value_type *)*v32, v32[1]);
      }
      else
      {
        v33 = *(_OWORD *)v32;
        *(_QWORD *)&v970[16] = v32[2];
        *(_OWORD *)v970 = v33;
      }
      *(_QWORD *)v1045 = v970;
      *((_WORD *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), (void **)v970, (uint64_t)&std::piecewise_construct, (__int128 **)v1045)+ 28) = v30;
      if ((v970[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v971, *(const std::string::value_type **)v970, *(std::string::size_type *)&v970[8]);
      else
        v971 = *(std::string *)v970;
      if (SHIBYTE(v971.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v954, v971.__r_.__value_.__l.__data_, v971.__r_.__value_.__l.__size_);
        v956 = 0uLL;
        *((_QWORD *)&v955 + 1) = &v956;
        if (SHIBYTE(v971.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v971.__r_.__value_.__l.__data_);
      }
      else
      {
        v954 = *(_OWORD *)&v971.__r_.__value_.__l.__data_;
        v956 = 0uLL;
        *(_QWORD *)&v955 = *((_QWORD *)&v971.__r_.__value_.__l + 2);
        *((_QWORD *)&v955 + 1) = &v956;
      }
      if (*(_BYTE *)(a5 + 64))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 1;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 1;
        v34 = *(_QWORD *)(a4 + 32);
        if (v34 >= *(_QWORD *)(a4 + 40))
        {
          v35 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v36 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v35 = v34 + 48;
          v36 = a4;
          *(_QWORD *)(a4 + 32) = v34 + 48;
        }
        *(_QWORD *)(v36 + 32) = v35;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v37 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v38 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 104))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 2;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 2;
        v40 = *(_QWORD *)(a4 + 32);
        if (v40 >= *(_QWORD *)(a4 + 40))
        {
          v41 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v42 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v41 = v40 + 48;
          v42 = a4;
          *(_QWORD *)(a4 + 32) = v40 + 48;
        }
        *(_QWORD *)(v42 + 32) = v41;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v43 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v44 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 144))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 7;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 7;
        v46 = *(_QWORD *)(a4 + 32);
        if (v46 >= *(_QWORD *)(a4 + 40))
        {
          v47 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v48 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v47 = v46 + 48;
          v48 = a4;
          *(_QWORD *)(a4 + 32) = v46 + 48;
        }
        *(_QWORD *)(v48 + 32) = v47;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v49 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v50 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 224))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 3;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 3;
        v52 = *(_QWORD *)(a4 + 32);
        if (v52 >= *(_QWORD *)(a4 + 40))
        {
          v53 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v54 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v53 = v52 + 48;
          v54 = a4;
          *(_QWORD *)(a4 + 32) = v52 + 48;
        }
        *(_QWORD *)(v54 + 32) = v53;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v55 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v56 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 184))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 4;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 4;
        v58 = *(_QWORD *)(a4 + 32);
        if (v58 >= *(_QWORD *)(a4 + 40))
        {
          v59 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v60 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v59 = v58 + 48;
          v60 = a4;
          *(_QWORD *)(a4 + 32) = v58 + 48;
        }
        *(_QWORD *)(v60 + 32) = v59;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v61 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 264))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 5;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 5;
        v64 = *(_QWORD *)(a4 + 32);
        if (v64 >= *(_QWORD *)(a4 + 40))
        {
          v65 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v66 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v65 = v64 + 48;
          v66 = a4;
          *(_QWORD *)(a4 + 32) = v64 + 48;
        }
        *(_QWORD *)(v66 + 32) = v65;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v67 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v68 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 304))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 8;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 8;
        v70 = *(_QWORD *)(a4 + 32);
        if (v70 >= *(_QWORD *)(a4 + 40))
        {
          v71 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v72 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v71 = v70 + 48;
          v72 = a4;
          *(_QWORD *)(a4 + 32) = v70 + 48;
        }
        *(_QWORD *)(v72 + 32) = v71;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v73 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v74 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 344))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 11;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 11;
        v76 = *(_QWORD *)(a4 + 32);
        if (v76 >= *(_QWORD *)(a4 + 40))
        {
          v77 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v78 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v77 = v76 + 48;
          v78 = a4;
          *(_QWORD *)(a4 + 32) = v76 + 48;
        }
        *(_QWORD *)(v78 + 32) = v77;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v79 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v80 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        ++v29;
      }
      if (*(_BYTE *)(a5 + 384))
      {
        LODWORD(v1006.__r_.__value_.__l.__data_) = 13;
        *(_QWORD *)v1045 = &v1006;
        *((_WORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)&v955 + 1, (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)v1045)+ 16) = v29;
        *(_WORD *)&v1045[4] = 0;
        memset(&v1045[8], 0, 40);
        *(_DWORD *)v1045 = 13;
        v82 = *(_QWORD *)(a4 + 32);
        if (v82 >= *(_QWORD *)(a4 + 40))
        {
          v83 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(v31, (int *)v1045);
          v84 = a4;
        }
        else
        {
          std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(*(_QWORD *)(a4 + 32), (int *)v1045);
          v83 = v82 + 48;
          v84 = a4;
          *(_QWORD *)(a4 + 32) = v82 + 48;
        }
        *(_QWORD *)(v84 + 32) = v83;
        if ((v1045[47] & 0x80000000) != 0)
          operator delete(*(void **)&v1045[24]);
        v85 = *(std::__shared_weak_count **)&v1045[16];
        if (*(_QWORD *)&v1045[16])
        {
          v86 = (unint64_t *)(*(_QWORD *)&v1045[16] + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        ++v29;
      }
      v88 = *(_QWORD *)(a4 + 8);
      if (v88 >= *(_QWORD *)(a4 + 16))
      {
        v89 = std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial const&>((uint64_t *)a4, &v954);
        v90 = a4;
      }
      else
      {
        std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial const&,cv3d::cv::gess::mesh::ObjMaterial*>(*(std::string **)(a4 + 8), &v954);
        v89 = v88 + 48;
        v90 = a4;
        *(_QWORD *)(a4 + 8) = v88 + 48;
      }
      *(_QWORD *)(v90 + 8) = v89;
      if (v1055)
      {
        std::string::basic_string[abi:ne180100]<0>(v1045, (char *)&unk_23C62207F);
        v91 = (double)(unint64_t)(v30 + 1) * 10.0 / (double)v28;
        *(float *)&v1006.__r_.__value_.__l.__data_ = v91;
        if (!v1055)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_BYTE *, std::string *, _BYTE *))(*(_QWORD *)v1055 + 48))(v1055, &v1006, v1045);
        if ((v1045[23] & 0x80000000) != 0)
          operator delete(*(void **)v1045);
      }
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v955 + 8, v956.i64[0]);
      if (SBYTE7(v955) < 0)
        operator delete((void *)v954);
      if ((v970[23] & 0x80000000) != 0)
        operator delete(*(void **)v970);
      ++v30;
    }
    while (v30 != v28);
  }
  v92 = a6;
  if (v1053)
  {
    if (((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
      goto LABEL_175;
  }
  v93 = 0;
  memset(v1045, 0, 32);
  memset(v970, 0, sizeof(v970));
  v954 = 0uLL;
  LODWORD(v955) = 0;
  *(_QWORD *)&v94 = 0x80000000800000;
  *((_QWORD *)&v94 + 1) = 0x80000000800000;
  v956 = vdupq_n_s32(0x7F7FFFFFu);
  v957 = v94;
  v95 = a7;
  if (v25)
  {
    if (cv3d::cv::gess::alg::MeasureGeometryQuality((float32x4_t *)a3, (const cv3d::cv::gess::mesh::PolyMesh *)&v977, (GeometryQuality *)v27))v93 = cv3d::cv::gess::alg::MeasureTopologyQuality((cv3d::cv::gess::alg *)a3, (const cv3d::cv::gess::mesh::PolyMesh *)v1045, v27);
    else
      v93 = 0;
  }
  if (v1055)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1006, (char *)&unk_23C62207F);
    LODWORD(__s.__r_.__value_.__l.__data_) = 1101004800;
    if (!v1055)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, std::string *, std::string *))(*(_QWORD *)v1055 + 48))(v1055, &__s, &v1006);
    if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1006.__r_.__value_.__l.__data_);
  }
  if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
    goto LABEL_175;
  if (!v93
    || !cv3d::cv::gess::alg::MeasureGeometryQuality(v882, (const cv3d::cv::gess::mesh::PolyMesh *)&v954, (GeometryQuality *)v27))
  {
    v97 = 0;
    if (!a7)
      goto LABEL_167;
    goto LABEL_166;
  }
  v97 = cv3d::cv::gess::alg::MeasureTopologyQuality((cv3d::cv::gess::alg *)v882, (const cv3d::cv::gess::mesh::PolyMesh *)v970, v96);
  if (a7)
  {
LABEL_166:
    v98 = v977;
    *(_DWORD *)(v881 + 176) = v978;
    v99 = v980;
    *(float32x4_t *)(v881 + 192) = v979;
    *(float32x4_t *)(v881 + 208) = v99;
    v100 = *(_OWORD *)&v1045[16];
    *(_OWORD *)(v881 + 128) = *(_OWORD *)v1045;
    *(_OWORD *)(v881 + 144) = v100;
    *(_OWORD *)(v881 + 160) = v98;
    *(_DWORD *)(v881 + 64) = v955;
    *(_OWORD *)(v881 + 48) = v954;
    v101 = v957;
    *(int32x4_t *)(v881 + 80) = v956;
    *(_OWORD *)(v881 + 96) = v101;
    v102 = *(_OWORD *)v970;
    *(_OWORD *)(v881 + 24) = *(_OWORD *)&v970[16];
    *(_OWORD *)(v881 + 8) = v102;
  }
LABEL_167:
  if (v1055)
  {
    std::string::basic_string[abi:ne180100]<0>(&v1006, (char *)&unk_23C62207F);
    LODWORD(__s.__r_.__value_.__l.__data_) = 1106247680;
    if (!v1055)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, std::string *, std::string *))(*(_QWORD *)v1055 + 48))(v1055, &__s, &v1006);
    if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1006.__r_.__value_.__l.__data_);
  }
  if (v1053
    && (((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0
     || v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0))
  {
LABEL_175:
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
    LOBYTE(v103) = 0;
    goto LABEL_176;
  }
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v111);
  v112.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a7)
    *(double *)(v881 + 280) = (double)(v112.__d_.__rep_ - v883) / 1000000.0 + *(double *)(v881 + 280);
  v113.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::vector(v969, v894);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::vector(v968, v894);
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::vector(v967, v894);
  v114 = *(_DWORD *)(a5 + 56);
  v116 = v889[9].i64[1];
  v115 = v889[10].i64[0];
  std::string::basic_string[abi:ne180100]<0>(&v966, (char *)&unk_23C62207F);
  v117 = v115 - v116;
  v118 = v114 * (unint64_t)v114;
  v119 = ((unint64_t)(v115 - v116) >> 1) + ((unint64_t)(v115 - v116) >> 2);
  v120 = v115 - v116 + 16 * v118 + 8 * v118 + 4 * (v115 - v116 + v118) + 4 * v119;
  v121 = v118 * v894;
  v871 = v114;
  v122 = 3 * v118;
  v869 = v118;
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v966, 21 * v118 * v894 + 16 * v118 + 12 * v118 + 2 * (v117 + 4 * v119), v120);
  if (SHIBYTE(v966.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v966.__r_.__value_.__l.__data_);
  if (v894)
  {
    v123 = 0;
    v124 = vdup_n_s32(v871);
    v125 = v894;
    do
    {
      v126 = v969[0] + v123;
      *(int32x2_t *)(v126 + 4) = v124;
      *(_DWORD *)(v126 + 12) = 1;
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory(v126);
      v127 = v968[0] + v123;
      *(int32x2_t *)(v127 + 4) = v124;
      *(_DWORD *)(v127 + 12) = 1;
      cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>::AllocateMemory(v127);
      v128 = v967[0] + v123;
      *(int32x2_t *)(v128 + 4) = v124;
      *(_DWORD *)(v128 + 12) = 1;
      cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>::AllocateMemory(v128);
      v123 += 24;
      --v125;
    }
    while (v125);
  }
  if ((v97 & 1) == 0)
  {
    v130 = 0;
    goto LABEL_215;
  }
  v129 = (uint64_t)v1051;
  if (!v1051)
    goto LABEL_207;
  if (v1051 != v1050)
  {
    v129 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_207:
    v1049 = (_BYTE *)v129;
    goto LABEL_210;
  }
  v1049 = v1048;
  (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1048);
LABEL_210:
  v130 = cv3d::cv::gess::alg::internal::RasterizeSurface((uint64_t)v889, v969, v968, v967, (uint64_t)&__src, v881, v870, (uint64_t *)(a5 + 480), (uint64_t)v1048, v879 != 0);
  v131 = v1049;
  if (v1049 == v1048)
  {
    v132 = 4;
    v131 = v1048;
  }
  else
  {
    if (!v1049)
      goto LABEL_215;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_215:
  if (v1055)
  {
    std::string::basic_string[abi:ne180100]<0>(&v954, (char *)&unk_23C62207F);
    *(_DWORD *)v1045 = 1113325568;
    if (!v1055)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, _BYTE *, __int128 *))(*(_QWORD *)v1055 + 48))(v1055, v1045, &v954);
    if (SBYTE7(v955) < 0)
      operator delete((void *)v954);
  }
  if (!v1053 || ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) == 0)
  {
    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
    if (!v130)
      goto LABEL_249;
    cv3d::cv::gess::util::os::GlobalMemoryLogs(v133);
    v134.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v880)
      *(double *)(v881 + 288) = (double)(v134.__d_.__rep_ - v113.__d_.__rep_) / 1000000.0;
    v135.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::vector(v965, v894);
    v963 = 0;
    v962 = 0;
    v964 = 0;
    memset(v961, 0, sizeof(v961));
    v954 = 0u;
    v955 = 0u;
    v960 = 0;
    v956.i64[0] = 0;
    v959 = 0;
    *((std::chrono::system_clock::time_point *)&v955 + 1) = std::chrono::system_clock::now();
    cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)&v956.u64[1]);
    v919 = 0;
    cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(v970, v882, &v919, &v981);
    v868 = 4 * v869;
    v867 = 4 * v122;
    if ((cv3d::cv::gess::alg::MPSMeshIntersector::initialized((cv3d::cv::gess::alg::MPSMeshIntersector *)v970) & 1) == 0)
    {
      if (v880)
        *(_DWORD *)(v881 + 384) = 16;
      v158 = 0.0;
      if (v1051)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
        *(_DWORD *)v1045 = 16;
        if (!v1051)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *, _BYTE *, void **))(*v1051 + 48))(v1051, v1045, __p);
        if (v974 < 0)
          operator delete(__p[0]);
      }
      v159 = 1;
      v160 = 0.0;
      v161 = 1;
      goto LABEL_1059;
    }
    cv3d::cv::gess::alg::ComputeAverageEdgeLength(v889, v136);
    v137 = v894;
    v139 = v138 * *(float *)(a5 + 36);
    v890 = (v882[10].i64[0] - v882[9].i64[1]) >> 2;
    if (v894)
    {
      v140 = 0;
      v141 = vdup_n_s32(v871);
      do
      {
        v142 = v965[0] + v140;
        *(int32x2_t *)(v142 + 4) = v141;
        *(_DWORD *)(v142 + 12) = 1;
        cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::AllocateMemory(v142);
        v140 += 24;
        --v137;
      }
      while (v137);
      v143 = 0;
      LOBYTE(v144) = 1;
      do
      {
        v145 = v969[0] + 24 * v143;
        v146 = *(_DWORD *)(v145 + 4);
        v147 = *(_DWORD *)(v145 + 8);
        v148 = 0;
        v149 = (v147 * v146);
        if ((_DWORD)v149)
        {
          v150 = *(unsigned __int8 **)(v969[0] + 24 * v143 + 16);
          v151 = (v147 * v146);
          do
          {
            v152 = *v150++;
            v148 += v152;
            --v151;
          }
          while (v151);
        }
        v144 = v144
            && cv3d::cv::gess::alg::internal::GetProjectionIntersections((uint64_t)v889, v145, v970, v890, v965[0] + 24 * v143, v968[0] + 24 * v143, v967[0] + 24 * v143, v139);
        v153 = 0;
        if ((_DWORD)v149)
        {
          v154 = *(unsigned __int8 **)(v969[0] + 24 * v143 + 16);
          do
          {
            v155 = *v154++;
            v153 += v155;
            --v149;
          }
          while (v149);
        }
        if (v880)
        {
          v156 = *(_QWORD *)(v881 + 320) + v148;
          *(_QWORD *)(v881 + 312) += v153;
          *(_QWORD *)(v881 + 320) = v156;
        }
        if (v1055)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
          v157 = (double)(unint64_t)(v143 + 1) * 15.0 / (double)v894 + 55.0;
          *(float *)&v1006.__r_.__value_.__l.__data_ = v157;
          if (!v1055)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(_BYTE *, std::string *, void **))(*(_QWORD *)v1055 + 48))(v1055, &v1006, __p);
          if (v974 < 0)
            operator delete(__p[0]);
        }
        if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
        {
          v159 = 1;
          v158 = 0.0;
          v160 = 0.0;
          v161 = v144;
          goto LABEL_1059;
        }
        ++v143;
      }
      while (v143 != v894);
    }
    else
    {
      v144 = 1;
    }
    if (v880)
    {
      v162 = (float)*(unint64_t *)(v881 + 312) / (float)*(unint64_t *)(v881 + 320);
      *(float *)(v881 + 328) = v162;
      if (v162 < 0.1)
        *(_DWORD *)(v881 + 384) = 3;
    }
    v163 = v882[10].i64[0] - v882[9].i64[1];
    v164 = (float)(unint64_t)(4 * ((v163 >> 1) + (v163 >> 2)));
    v959 = (unint64_t)(float)((float)(unint64_t)(float)((float)(16 * v121) + (float)(v164 * 2.0))
                                   + (float)(v164 * 2.0))
         + 52428800;
    v960 = 52428800;
    *(std::chrono::system_clock::time_point *)v956.i8 = std::chrono::system_clock::now();
    v165 = cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v958);
    v161 = v144;
    v166 = (uint64_t *)cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)v165);
    v167 = v166;
    v168 = v166[1];
    if (v168 >= v166[2])
    {
      v169 = std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(v166, &v954);
    }
    else
    {
      std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>((uint64_t)v166, &v954);
      v169 = v168 + 184;
    }
    v167[1] = v169;
    v170.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v880)
      *(double *)(v881 + 296) = (double)(v170.__d_.__rep_ - v135.__d_.__rep_) / 1000000.0;
    v952 = 0;
    v951 = 0;
    v953 = 0;
    v949 = 0;
    v948 = 0;
    v950 = 0;
    if (*(_BYTE *)(a5 + 264))
    {
      v171 = 1;
      v172 = v894;
    }
    else
    {
      v172 = v894;
      if (*(_BYTE *)(a5 + 184))
        v171 = *(_BYTE *)(a5 + 48) != 0;
      else
        v171 = 0;
    }
    if (*(_BYTE *)(a5 + 64))
      v173 = 1;
    else
      v173 = v171;
    v158 = 0.0;
    v160 = 0.0;
    if ((v144 & v173) == 1)
    {
      v853 = v173;
      v174.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      std::string::basic_string[abi:ne180100]<0>(&v947, (char *)&unk_23C62207F);
      if (v171)
        v175 = 0;
      else
        v175 = v867;
      cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v947, 24 * v869, v175 + v867);
      if (SHIBYTE(v947.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v947.__r_.__value_.__l.__data_);
      if (v1053 && (*(unsigned int (**)(_QWORD *))(*v1053 + 48))(v1053))
      {
        cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
        v159 = 1;
        v161 = 1;
        goto LABEL_1055;
      }
      std::vector<cv3d::cv::gess::mesh::Texture>::resize(v961, v894);
      v858 = v171;
      v176.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v177.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (*(_BYTE *)(a5 + 48))
      {
        v178 = v889;
        std::vector<float>::resize((uint64_t)&v951, (v889[7].i64[0] - v889[6].i64[1]) >> 2);
        std::vector<BOOL>::resize((uint64_t)&v948, (v178[7].i64[0] - v178[6].i64[1]) >> 2, 0);
        v179 = v178[7].i64[0] - v178[6].i64[1];
        if (v179)
        {
          v180 = 0;
          v181 = v179 >> 2;
          v182 = v951;
          v183 = (char *)v948;
          if (v181 <= 1)
            v181 = 1;
          do
          {
            v182[v180] = 1065353216;
            *(_QWORD *)&v183[(v180 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v180);
            ++v180;
          }
          while (v181 != v180);
        }
      }
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v1006, 3uLL);
      v160 = (double)(v176.__d_.__rep_ - v174.__d_.__rep_) / 1000000.0 + 0.0;
      v158 = (double)(std::chrono::system_clock::now().__d_.__rep_ - v177.__d_.__rep_) / 1000000.0 + 0.0;
      if (v894)
      {
        v184 = 0;
        v185 = 3 * v869;
        v856 = (uint64_t *)(a5 + 480);
        v886 = (uint64_t **)&v889[3].i64[1];
        if (3 * v869 <= 1)
          v185 = 1;
        v857 = 4 * v185;
        LOBYTE(v161) = 1;
        while (1)
        {
          v186.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          v187 = v969[0];
          LOWORD(v1002.__r_.__value_.__l.__data_) = v184;
          *(_QWORD *)v1045 = std::map<unsigned short,std::string>::at(v893, (unsigned __int16 *)&v1002);
          v188 = *((unsigned __int16 *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), *(void ***)v1045, (uint64_t)&std::piecewise_construct, (__int128 **)v1045)+ 28);
          v189 = *(_QWORD *)a4;
          *(_OWORD *)&v925.__r_.__value_.__l.__data_ = 0uLL;
          v190 = operator new[]();
          v191 = operator new(0x30uLL);
          v191[1] = 0;
          v191[2] = 0;
          *v191 = &off_250D49908;
          *((_DWORD *)v191 + 6) = 0;
          *((_DWORD *)v191 + 7) = v871;
          *((_DWORD *)v191 + 8) = v871;
          *((_DWORD *)v191 + 9) = 3;
          v191[5] = v190;
          size = (std::__shared_weak_count *)v925.__r_.__value_.__l.__size_;
          v925.__r_.__value_.__r.__words[0] = (std::string::size_type)(v191 + 3);
          v925.__r_.__value_.__l.__size_ = (std::string::size_type)v191;
          if (size)
          {
            p_shared_owners = (unint64_t *)&size->__shared_owners_;
            do
              v194 = __ldaxr(p_shared_owners);
            while (__stlxr(v194 - 1, p_shared_owners));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v195 = v161;
          v196 = v925.__r_.__value_.__r.__words[0];
          *(_DWORD *)v925.__r_.__value_.__l.__data_ = 0;
          if (v871)
            bzero(*(void **)(v196 + 16), v857);
          if ((v195 & 1) == 0
            || !cv3d::cv::gess::alg::internal::TransferMapKd((uint64_t)v882, a2, v196, v187 + 24 * v184, v965[0] + 24 * v184))
          {
            goto LABEL_314;
          }
          v197 = v925.__r_.__value_.__r.__words[0];
          v198 = (uint64_t)v1051;
          if (!v1051)
            goto LABEL_305;
          if (v1051 != v1050)
            break;
          v1047 = v1046;
          (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1046);
LABEL_307:
          v199 = cv3d::cv::gess::alg::internal::PoissonFill(v197, v187 + 24 * v184, (uint64_t)&__src, v881, v870, v856, (uint64_t)v1046, v879 != 0);
          v200 = v1047;
          if (v1047 == v1046)
          {
            v200 = v1046;
            v201 = 4;
LABEL_311:
            (*(void (**)(void))(*v200 + 8 * v201))();
            if ((v199 & 1) != 0)
              goto LABEL_312;
            goto LABEL_314;
          }
          if (v1047)
          {
            v201 = 5;
            goto LABEL_311;
          }
          if (v199)
          {
LABEL_312:
            v202 = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v925.__r_.__value_.__l.__data_);
            goto LABEL_315;
          }
LABEL_314:
          v202 = 0;
LABEL_315:
          if (a12)
          {
            if (*(_BYTE *)(a5 + 64))
            {
              std::string::basic_string[abi:ne180100]<0>(v1045, "uchar");
              strcpy(&v1045[24], "d");
              std::string::basic_string[abi:ne180100]<0>(&v1045[32], ".jpg");
              v203 = *(float *)(a5 + 96) * 100.0;
              if (v203 < 1.0)
                v203 = 1.0;
              if (v203 > 100.0)
                v203 = 100.0;
              *(_WORD *)&v1045[24] = (int)v203;
              std::operator+<char>();
              if ((v1045[55] & 0x80000000) != 0)
                operator delete(*(void **)&v1045[32]);
              *(_OWORD *)&v1045[32] = v988;
              *(_QWORD *)&v1045[48] = v989;
              LODWORD(v1002.__r_.__value_.__l.__data_) = 1;
              v990 = &v1002;
              v204 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v189 + 48 * v188 + 24), (int *)&v1002, (uint64_t)&std::piecewise_construct, (_DWORD **)&v990)+ 16);
              v205 = *(_QWORD *)(a4 + 24);
              std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&__s);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v1002, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__r_.__value_.__l.__data_);
              }
              else
              {
                v1002 = __s;
              }
              v234 = v202;
              v235 = (std::string *)(v205 + 48 * v204);
              cv3d::cv::gess::mesh::Texture::tex_typename(v235, (uint64_t)&__s);
              if ((v1002.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v236 = HIBYTE(v1002.__r_.__value_.__r.__words[2]);
              else
                v236 = v1002.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v944, v236 + 1);
              if ((v944.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v237 = &v944;
              else
                v237 = (std::string *)v944.__r_.__value_.__r.__words[0];
              if (v236)
              {
                if ((v1002.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v238 = &v1002;
                else
                  v238 = (std::string *)v1002.__r_.__value_.__r.__words[0];
                memmove(v237, v238, v236);
              }
              *(_WORD *)((char *)&v237->__r_.__value_.__l.__data_ + v236) = 95;
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s = &__s;
              else
                p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
              if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v240 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
              else
                v240 = __s.__r_.__value_.__l.__size_;
              v241 = std::string::append(&v944, (const std::string::value_type *)p_s, v240);
              v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
              v945.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v945.__r_.__value_.__l.__data_ = v242;
              v241->__r_.__value_.__l.__size_ = 0;
              v241->__r_.__value_.__r.__words[2] = 0;
              v241->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v943, v184);
              if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v243 = &v943;
              else
                v243 = (std::string *)v943.__r_.__value_.__r.__words[0];
              if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v244 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
              else
                v244 = v943.__r_.__value_.__l.__size_;
              v245 = std::string::append(&v945, (const std::string::value_type *)v243, v244);
              v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
              v946.__r_.__value_.__r.__words[2] = v245->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v946.__r_.__value_.__l.__data_ = v246;
              v245->__r_.__value_.__l.__size_ = 0;
              v245->__r_.__value_.__r.__words[2] = 0;
              v245->__r_.__value_.__r.__words[0] = 0;
              if (v1045[55] >= 0)
                v247 = &v1045[32];
              else
                v247 = *(const std::string::value_type **)&v1045[32];
              if (v1045[55] >= 0)
                v248 = v1045[55];
              else
                v248 = *(_QWORD *)&v1045[40];
              v249 = std::string::append(&v946, v247, v248);
              v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
              v989 = v249->__r_.__value_.__r.__words[2];
              v988 = v250;
              v249->__r_.__value_.__l.__size_ = 0;
              v249->__r_.__value_.__r.__words[2] = 0;
              v249->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v946.__r_.__value_.__l.__data_);
              if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v943.__r_.__value_.__l.__data_);
              if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v945.__r_.__value_.__l.__data_);
              if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v944.__r_.__value_.__l.__data_);
              std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v945);
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v944, (char *)&v988);
              std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v944, (uint64_t)&v945, (std::__fs::filesystem::path *)&v946);
              if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v944.__r_.__value_.__l.__data_);
              if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v945.__r_.__value_.__l.__data_);
              if (v234)
              {
                v251 = v925.__r_.__value_.__r.__words[0];
                std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1043, a11 + 96);
                v252 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&v946, v251, (uint64_t)v1045, (uint64_t)v1043, 1);
                v253 = v1044;
                if (v1044 == v1043)
                {
                  v253 = v1043;
                  v254 = 4;
LABEL_422:
                  (*(void (**)(void))(*v253 + 8 * v254))();
                }
                else if (v1044)
                {
                  v254 = 5;
                  goto LABEL_422;
                }
              }
              else
              {
                v252 = 0;
              }
              v260 = v252;
              if (a10)
              {
                v261 = *(_QWORD *)(a9 + 8);
                if (v261 >= *(_QWORD *)(a9 + 16))
                {
                  v263 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(a9, (__int128 *)&v946);
                  v264 = a9;
                }
                else
                {
                  if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)(a9 + 8), v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v262 = *(_OWORD *)&v946.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v261 + 16) = *((_QWORD *)&v946.__r_.__value_.__l + 2);
                    *(_OWORD *)v261 = v262;
                  }
                  v263 = v261 + 24;
                  v264 = a9;
                  *(_QWORD *)(a9 + 8) = v261 + 24;
                }
                *(_QWORD *)(v264 + 8) = v263;
              }
              if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v942, v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
              else
                v942 = v946;
              cv3d::cv::gess::mesh::Texture::SetFilePath(v235, &v942);
              v202 = v252;
              if (SHIBYTE(v942.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v942.__r_.__value_.__l.__data_);
              if (v858)
              {
                v265 = v961[0];
                if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v941, v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
                else
                  v941 = v946;
                cv3d::cv::gess::mesh::Texture::SetFilePath((std::string *)(v265 + 48 * v184), &v941);
                v202 = v260;
                if (SHIBYTE(v941.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v941.__r_.__value_.__l.__data_);
                if (*(_QWORD *)(a11 + 120))
                {
                  v266 = v961[0];
                  v940 = *(_OWORD *)&v925.__r_.__value_.__l.__data_;
                  if (v925.__r_.__value_.__l.__size_)
                  {
                    v267 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
                    do
                      v268 = __ldxr(v267);
                    while (__stxr(v268 + 1, v267));
                  }
                  v269 = v266 + 48 * v184;
                  std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v269 + 8), (uint64_t *)&v940);
                  v270 = *(_QWORD *)(v269 + 8);
                  v271 = v270 && *(_QWORD *)(v270 + 16);
                  *(_BYTE *)(v266 + 48 * v184 + 4) = v271;
                  v272 = (std::__shared_weak_count *)*((_QWORD *)&v940 + 1);
                  if (*((_QWORD *)&v940 + 1))
                  {
                    v273 = (unint64_t *)(*((_QWORD *)&v940 + 1) + 8);
                    do
                      v274 = __ldaxr(v273);
                    while (__stlxr(v274 - 1, v273));
                    if (!v274)
                    {
                      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                      std::__shared_weak_count::__release_weak(v272);
                    }
                  }
                }
              }
              if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v946.__r_.__value_.__l.__data_);
              if (SHIBYTE(v989) < 0)
                operator delete((void *)v988);
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__s.__r_.__value_.__l.__data_);
              if (SHIBYTE(v1002.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v1002.__r_.__value_.__l.__data_);
              if ((v1045[55] & 0x80000000) != 0)
                operator delete(*(void **)&v1045[32]);
              if ((v1045[23] & 0x80000000) != 0)
                operator delete(*(void **)v1045);
              goto LABEL_467;
            }
            v222 = v961[0];
            v939 = *(_OWORD *)&v925.__r_.__value_.__l.__data_;
            if (v925.__r_.__value_.__l.__size_)
            {
              v223 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
              do
                v224 = __ldxr(v223);
              while (__stxr(v224 + 1, v223));
            }
            v225 = v222 + 48 * v184;
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v225 + 8), (uint64_t *)&v939);
            v226 = *(_QWORD *)(v225 + 8);
            v227 = v226 && *(_QWORD *)(v226 + 16);
            *(_BYTE *)(v222 + 48 * v184 + 4) = v227;
            v255 = (std::__shared_weak_count *)*((_QWORD *)&v939 + 1);
            if (*((_QWORD *)&v939 + 1))
            {
              v256 = (unint64_t *)(*((_QWORD *)&v939 + 1) + 8);
              do
                v257 = __ldaxr(v256);
              while (__stlxr(v257 - 1, v256));
              goto LABEL_419;
            }
          }
          else if (*(_BYTE *)(a5 + 64))
          {
            *(_DWORD *)v1045 = 1;
            v991 = v1045;
            v206 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v189 + 48 * v188 + 24), (int *)v1045, (uint64_t)&std::piecewise_construct, &v991)+ 16);
            v207 = *(_QWORD *)(a4 + 24);
            v938 = *(_OWORD *)&v925.__r_.__value_.__l.__data_;
            if (v925.__r_.__value_.__l.__size_)
            {
              v208 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
              do
                v209 = __ldxr(v208);
              while (__stxr(v209 + 1, v208));
            }
            v210 = v207 + 48 * v206;
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v210 + 8), (uint64_t *)&v938);
            v211 = *(_QWORD *)(v210 + 8);
            v212 = v211 && *(_QWORD *)(v211 + 16);
            *(_BYTE *)(v207 + 48 * v206 + 4) = v212;
            v213 = (std::__shared_weak_count *)*((_QWORD *)&v938 + 1);
            if (*((_QWORD *)&v938 + 1))
            {
              v214 = (unint64_t *)(*((_QWORD *)&v938 + 1) + 8);
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 - 1, v214));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            if (v858)
            {
              v216 = v961[0];
              v937 = *(_OWORD *)&v925.__r_.__value_.__l.__data_;
              if (v925.__r_.__value_.__l.__size_)
              {
                v217 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
                do
                  v218 = __ldxr(v217);
                while (__stxr(v218 + 1, v217));
              }
              v219 = v216 + 48 * v184;
              std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v219 + 8), (uint64_t *)&v937);
              v220 = *(_QWORD *)(v219 + 8);
              v221 = v220 && *(_QWORD *)(v220 + 16);
              *(_BYTE *)(v216 + 48 * v184 + 4) = v221;
              v255 = (std::__shared_weak_count *)*((_QWORD *)&v937 + 1);
              if (*((_QWORD *)&v937 + 1))
              {
                v259 = (unint64_t *)(*((_QWORD *)&v937 + 1) + 8);
                do
                  v257 = __ldaxr(v259);
                while (__stlxr(v257 - 1, v259));
                goto LABEL_419;
              }
            }
          }
          else
          {
            v228 = v961[0];
            v936 = *(_OWORD *)&v925.__r_.__value_.__l.__data_;
            if (v925.__r_.__value_.__l.__size_)
            {
              v229 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
              do
                v230 = __ldxr(v229);
              while (__stxr(v230 + 1, v229));
            }
            v231 = v228 + 48 * v184;
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v231 + 8), (uint64_t *)&v936);
            v232 = *(_QWORD *)(v231 + 8);
            v233 = v232 && *(_QWORD *)(v232 + 16);
            *(_BYTE *)(v228 + 48 * v184 + 4) = v233;
            v255 = (std::__shared_weak_count *)*((_QWORD *)&v936 + 1);
            if (*((_QWORD *)&v936 + 1))
            {
              v258 = (unint64_t *)(*((_QWORD *)&v936 + 1) + 8);
              do
                v257 = __ldaxr(v258);
              while (__stlxr(v257 - 1, v258));
LABEL_419:
              if (!v257)
              {
                ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                std::__shared_weak_count::__release_weak(v255);
              }
            }
          }
LABEL_467:
          v160 = v160 + (double)(std::chrono::system_clock::now().__d_.__rep_ - v186.__d_.__rep_) / 1000000.0;
          if (*(_BYTE *)(a5 + 48))
          {
            v860.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            *(_OWORD *)&v1002.__r_.__value_.__l.__data_ = 0uLL;
            v275 = operator new[]();
            v276 = (char *)operator new(0x30uLL);
            *((_QWORD *)v276 + 1) = 0;
            *((_QWORD *)v276 + 2) = 0;
            *(_QWORD *)v276 = &off_250D49908;
            *(_OWORD *)(v276 + 24) = xmmword_23C60CD50;
            *((_QWORD *)v276 + 5) = v275;
            v277 = (std::__shared_weak_count *)v1002.__r_.__value_.__l.__size_;
            v1002.__r_.__value_.__r.__words[0] = (std::string::size_type)(v276 + 24);
            v1002.__r_.__value_.__l.__size_ = (std::string::size_type)v276;
            if (v277)
            {
              v278 = (unint64_t *)&v277->__shared_owners_;
              do
                v279 = __ldaxr(v278);
              while (__stlxr(v279 - 1, v278));
              if (!v279)
              {
                ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                std::__shared_weak_count::__release_weak(v277);
              }
            }
            v280 = v1002.__r_.__value_.__r.__words[0];
            *(_DWORD *)v1002.__r_.__value_.__l.__data_ = 0;
            bzero(*(void **)(v280 + 16), 0x300000uLL);
            if (v202)
            {
              v282 = v925.__r_.__value_.__r.__words[0];
              v283 = (uint64_t)v1051;
              if (!v1051)
                goto LABEL_477;
              if (v1051 == v1050)
              {
                v1042 = v1041;
                (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1041);
              }
              else
              {
                v283 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_477:
                v1042 = (_BYTE *)v283;
              }
              v284 = cv3d::cv::gess::alg::internal::RunBilinearScale(v282, v280, (uint64_t)&__src, v881, v870, (uint64_t)v1041);
              v285 = v1042;
              if (v1042 == v1041)
              {
                v285 = v1041;
                v286 = 4;
LABEL_483:
                (*(void (**)(void))(*v285 + 8 * v286))();
                if (v284)
                  goto LABEL_486;
                goto LABEL_499;
              }
              if (v1042)
              {
                v286 = 5;
                goto LABEL_483;
              }
              if (!v284)
                goto LABEL_499;
LABEL_486:
              v287 = v1002.__r_.__value_.__r.__words[0];
              v288 = (uint64_t)v1051;
              if (!v1051)
                goto LABEL_489;
              if (v1051 == v1050)
              {
                v1040 = v1039;
                (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1039);
              }
              else
              {
                v288 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_489:
                v1040 = (_BYTE *)v288;
              }
              v289 = cv3d::cv::gess::alg::internal::RunCustomVariance(v287, (uint64_t)&__src, v881, v870, v856, (uint64_t)v1039, v879 != 0);
              v290 = v1040;
              if (v1040 == v1039)
              {
                v290 = v1039;
                v291 = 4;
LABEL_495:
                (*(void (**)(void))(*v290 + 8 * v291))();
                if ((v289 & 1) == 0)
                  goto LABEL_499;
              }
              else
              {
                if (v1040)
                {
                  v291 = 5;
                  goto LABEL_495;
                }
                if (!v289)
                {
LABEL_499:
                  v202 = 0;
                  goto LABEL_500;
                }
              }
              std::string::basic_string[abi:ne180100]<0>(v1045, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
              v992 = 0;
              v292 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(v886, (uint64_t)&v992, v1045);
              v202 = v292 != -1;
              if ((v1045[23] & 0x80000000) != 0)
                operator delete(*(void **)v1045);
            }
            else
            {
LABEL_500:
              v292 = -1;
            }
            v993 = v292;
            v294 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)v886, &v993, v281);
            if (v202)
            {
              std::string::basic_string[abi:ne180100]<0>(v1045, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
              v994 = 0;
              v295 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v877, (uint64_t)&v994, v1045);
              v296 = v295 != -1;
              if ((v1045[23] & 0x80000000) != 0)
                operator delete(*(void **)v1045);
            }
            else
            {
              v296 = 0;
              v295 = -1;
            }
            v995 = v295;
            v298 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v877, &v995, v293);
            if (v296)
            {
              std::string::basic_string[abi:ne180100]<0>(v1045, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
              v997 = 0;
              v996 = 0;
              v299 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v886, (uint64_t)&v996, v1045);
              v296 = v299 != -1;
              if ((v1045[23] & 0x80000000) != 0)
                operator delete(*(void **)v1045);
            }
            else
            {
              v299 = -1;
            }
            v998 = v299;
            v300 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)v886, &v998, v297);
            *(_DWORD *)&v1045[8] = 0;
            *(_QWORD *)v1045 = 0;
            v302 = v889[9].i64[1];
            v301 = v889[10].i64[0];
            if (v301 != v302)
            {
              v303 = v300;
              v304 = 0;
              do
              {
                LODWORD(__s.__r_.__value_.__l.__data_) = v304;
                v305 = *(_QWORD *)(v294 + 40);
                if (v304 >= (unint64_t)((*(_QWORD *)(v294 + 48) - v305) >> 1))
                  __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                if (v184 == *(unsigned __int16 *)(v305 + 2 * v304))
                {
                  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)v889, (unsigned int *)&__s, &v1006);
                  v306 = *(_QWORD *)(v303 + 40);
                  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v303 + 48) - v306) >> 2) <= LODWORD(__s.__r_.__value_.__l.__data_))
                    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                  v307 = 0;
                  v308 = v306 + 12 * LODWORD(__s.__r_.__value_.__l.__data_);
                  v309 = v1006.__r_.__value_.__r.__words[0];
                  v310 = (char *)v948;
                  do
                  {
                    if (((*(_QWORD *)&v310[((unint64_t)*(unsigned int *)(v309 + v307) >> 3) & 0x1FFFFFF8] >> *(_DWORD *)(v309 + v307)) & 1) == 0)
                    {
                      v311 = *(unsigned int *)(v308 + v307);
                      v312 = *(_QWORD *)(v298 + 40);
                      if (v311 >= (*(_QWORD *)(v298 + 48) - v312) >> 3)
                        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                      v313 = (float *)(v312 + 8 * v311);
                      v314 = *v313;
                      v315 = v313[1];
                      LODWORD(v313) = *(_DWORD *)(v1002.__r_.__value_.__r.__words[0] + 4);
                      v316 = *(_DWORD *)(v1002.__r_.__value_.__r.__words[0] + 8);
                      v317 = v314 * (float)v313;
                      v318 = (_DWORD)v313 - 1;
                      v319 = v317 + -0.5;
                      if (v319 < 0.0)
                        v319 = 0.0;
                      if (v319 > (double)v318)
                        v319 = (double)v318;
                      v320 = v319;
                      v321 = (float)((float)(1.0 - v315) * (float)v316) + -0.5;
                      if (v321 < 0.0)
                        v321 = 0.0;
                      if (v321 > (double)(v316 - 1))
                        v321 = (double)(v316 - 1);
                      v322 = v321;
                      v323 = cv3d::cv::gess::util::ImageT<float>::at((uint64_t)v1002.__r_.__value_.__l.__data_, (float *)v1045, v320, v322);
                      v324 = *(float *)v1045;
                      if (!v323)
                        v324 = 1.0;
                      v309 = v1006.__r_.__value_.__r.__words[0];
                      v325 = *(unsigned int *)(v1006.__r_.__value_.__r.__words[0] + v307);
                      *((float *)v951 + v325) = v324;
                      v310 = (char *)v948;
                      *(_QWORD *)((char *)v948 + ((v325 >> 3) & 0x1FFFFFF8)) |= 1 << v325;
                    }
                    v307 += 4;
                  }
                  while (v307 != 12);
                  v302 = v889[9].i64[1];
                  v301 = v889[10].i64[0];
                }
                ++v304;
              }
              while (v304 < (v301 - v302) >> 2);
            }
            v326 = (std::__shared_weak_count *)v1002.__r_.__value_.__l.__size_;
            v202 = v296;
            if (v1002.__r_.__value_.__l.__size_)
            {
              v327 = (unint64_t *)(v1002.__r_.__value_.__l.__size_ + 8);
              do
                v328 = __ldaxr(v327);
              while (__stlxr(v328 - 1, v327));
              if (!v328)
              {
                ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                std::__shared_weak_count::__release_weak(v326);
              }
            }
            v158 = v158 + (double)(std::chrono::system_clock::now().__d_.__rep_ - v860.__d_.__rep_) / 1000000.0;
          }
          v161 = v202 != 0;
          v329 = (std::__shared_weak_count *)v925.__r_.__value_.__l.__size_;
          if (v925.__r_.__value_.__l.__size_)
          {
            v330 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
            do
              v331 = __ldaxr(v330);
            while (__stlxr(v331 - 1, v330));
            if (!v331)
            {
              ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
              std::__shared_weak_count::__release_weak(v329);
            }
          }
          if (++v184 == v894)
          {
            v95 = v880;
            if (*(_BYTE *)(a5 + 48))
            {
              v332.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if ((v161 & 1) == 0)
              {
                v161 = 0;
                goto LABEL_553;
              }
LABEL_552:
              v161 = cv3d::cv::gess::alg::internal::PrepareLowMeshPerVertexReliabilityWeight((uint64_t)v889, (uint64_t)&v951);
LABEL_553:
              v158 = v158 + (double)(std::chrono::system_clock::now().__d_.__rep_ - v332.__d_.__rep_) / 1000000.0;
            }
            goto LABEL_556;
          }
        }
        v198 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_305:
        v1047 = (_BYTE *)v198;
        goto LABEL_307;
      }
      if (*(_BYTE *)(a5 + 48))
      {
        v332.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        v95 = v880;
        goto LABEL_552;
      }
      v161 = 1;
      v95 = v880;
LABEL_556:
      if (v1006.__r_.__value_.__r.__words[0])
      {
        v1006.__r_.__value_.__l.__size_ = v1006.__r_.__value_.__r.__words[0];
        operator delete(v1006.__r_.__value_.__l.__data_);
      }
      cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
      v172 = v894;
      v173 = v853;
    }
    if ((v173 & v161) == 1)
      cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)v170.__d_.__rep_);
    std::chrono::system_clock::now();
    std::chrono::system_clock::now();
    v873 = *(unsigned __int8 *)(a5 + 264);
    if (*(_BYTE *)(a5 + 184) | v873)
    {
      *((std::chrono::system_clock::time_point *)&v955 + 1) = std::chrono::system_clock::now();
      cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)&v956.u64[1]);
      std::vector<cv3d::cv::gess::mesh::Texture>::resize(&v962, v172);
      if (v172)
      {
        v333 = 0;
        if (v869 <= 1)
          v334 = 1;
        else
          v334 = v869;
        v864 = 4 * v334;
        while (1)
        {
          if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
          {
            v159 = 1;
            goto LABEL_1055;
          }
          *(_DWORD *)(v962 + 48 * v333) = 4;
          v335 = v969[0];
          LOWORD(__p[0]) = v333;
          *(_QWORD *)v1045 = std::map<unsigned short,std::string>::at(v893, (unsigned __int16 *)__p);
          v336 = *((unsigned __int16 *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), *(void ***)v1045, (uint64_t)&std::piecewise_construct, (__int128 **)v1045)+ 28);
          v337 = *(_QWORD *)a4;
          *(_OWORD *)&v943.__r_.__value_.__l.__data_ = 0uLL;
          v338 = operator new[]();
          v339 = operator new(0x30uLL);
          v339[1] = 0;
          v339[2] = 0;
          *v339 = &off_250D49908;
          *((_DWORD *)v339 + 6) = 0;
          *((_DWORD *)v339 + 7) = v871;
          *((_DWORD *)v339 + 8) = v871;
          *((_DWORD *)v339 + 9) = 1;
          v339[5] = v338;
          v341 = (std::__shared_weak_count *)v943.__r_.__value_.__l.__size_;
          v943.__r_.__value_.__r.__words[0] = (std::string::size_type)(v339 + 3);
          v943.__r_.__value_.__l.__size_ = (std::string::size_type)v339;
          if (v341)
          {
            v342 = (unint64_t *)&v341->__shared_owners_;
            do
              v343 = __ldaxr(v342);
            while (__stlxr(v343 - 1, v342));
            if (!v343)
            {
              ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
              std::__shared_weak_count::__release_weak(v341);
            }
          }
          v344 = v943.__r_.__value_.__r.__words[0];
          *(_DWORD *)v943.__r_.__value_.__l.__data_ = 1;
          if (v871)
            bzero(*(void **)(v344 + 16), v864);
          v345 = vsubq_f32(v980, v979);
          v346 = v345.f32[1];
          if (v345.f32[0] >= v345.f32[1])
            v346 = v345.f32[0];
          if (v346 >= v345.f32[2])
            v347 = v346;
          else
            v347 = v345.f32[2];
          if ((v161 & 1) == 0)
          {
            if (!*(_BYTE *)(a5 + 48))
              goto LABEL_612;
            v352.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            LOBYTE(AomapWithIntersections) = 0;
            goto LABEL_609;
          }
          v348 = *(float *)(a5 + 44);
          v349 = *(_DWORD *)(a5 + 40);
          v350 = v965[0];
          v351 = (uint64_t)v1053;
          if (!v1053)
            goto LABEL_585;
          if (v1053 != v1052)
            break;
          v1038 = v1037;
          (*(void (**)(_QWORD *, _BYTE *))(v1052[0] + 24))(v1052, v1037);
LABEL_589:
          v354 = (uint64_t)v1051;
          if (!v1051)
            goto LABEL_592;
          if (v1051 != v1050)
          {
            v354 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_592:
            v1036 = (_BYTE *)v354;
            goto LABEL_594;
          }
          v1036 = v1035;
          (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1035);
LABEL_594:
          AomapWithIntersections = cv3d::cv::gess::alg::internal::GenerateAomapWithIntersections((uint64_t)v882, v335 + 24 * v333, v350 + 24 * v333, v344, (cv3d::cv::gess::alg::MPSMeshIntersector *)v970, v349, (uint64_t)v1037, fmaxf(v347 * 0.00001, 0.0000005), v348, v340, v881, v870, (uint64_t *)(a5 + 480), (uint64_t)v1035, v879 != 0);
          v355 = v1036;
          if (v1036 == v1035)
          {
            v355 = v1035;
            v356 = 4;
          }
          else
          {
            if (!v1036)
              goto LABEL_599;
            v356 = 5;
          }
          (*(void (**)(void))(*v355 + 8 * v356))();
LABEL_599:
          v357 = v1038;
          if (v1038 == v1037)
          {
            v357 = v1037;
            v358 = 4;
          }
          else
          {
            if (!v1038)
              goto LABEL_604;
            v358 = 5;
          }
          (*(void (**)(void))(*v357 + 8 * v358))();
LABEL_604:
          if (*(_BYTE *)(a5 + 48))
          {
            v352.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            v95 = v880;
            if (AomapWithIntersections)
              LOBYTE(AomapWithIntersections) = cv3d::cv::gess::alg::internal::WeakenAomapWithLowMeshPerVertexReliabilityWeight((uint64_t)v889, &v951, v335 + 24 * v333, v968[0] + 24 * v333, v967[0] + 24 * v333, (uint64_t)v943.__r_.__value_.__l.__data_);
LABEL_609:
            v158 = v158 + (double)(std::chrono::system_clock::now().__d_.__rep_ - v352.__d_.__rep_) / 1000000.0;
            if ((AomapWithIntersections & 1) == 0)
              goto LABEL_612;
            goto LABEL_610;
          }
          v95 = v880;
          if (!AomapWithIntersections)
            goto LABEL_612;
LABEL_610:
          if (cv3d::cv::gess::util::ImageT<float>::Dilate((uint64_t)v943.__r_.__value_.__l.__data_, *(const void **)(v335 + 24 * v333 + 16), -1))
          {
            v161 = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v943.__r_.__value_.__l.__data_);
            goto LABEL_613;
          }
LABEL_612:
          v161 = 0;
LABEL_613:
          v92 = v881;
          if (!a12)
          {
            if (*(_BYTE *)(a5 + 184))
            {
              LODWORD(__p[0]) = 4;
              v1001 = __p;
              v362 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v337 + 48 * v336 + 24), (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1001)+ 16);
              v363 = *(_QWORD *)(a4 + 24);
              v931 = *(_OWORD *)&v943.__r_.__value_.__l.__data_;
              if (v943.__r_.__value_.__l.__size_)
              {
                v364 = (unint64_t *)(v943.__r_.__value_.__l.__size_ + 8);
                do
                  v365 = __ldxr(v364);
                while (__stxr(v365 + 1, v364));
              }
              v366 = v363 + 48 * v362;
              std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v366 + 8), (uint64_t *)&v931);
              v367 = *(_QWORD *)(v366 + 8);
              v368 = v367 && *(_QWORD *)(v367 + 16);
              *(_BYTE *)(v363 + 48 * v362 + 4) = v368;
              v369 = (std::__shared_weak_count *)*((_QWORD *)&v931 + 1);
              if (*((_QWORD *)&v931 + 1))
              {
                v370 = (unint64_t *)(*((_QWORD *)&v931 + 1) + 8);
                do
                  v371 = __ldaxr(v370);
                while (__stlxr(v371 - 1, v370));
                if (!v371)
                {
                  ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
                  std::__shared_weak_count::__release_weak(v369);
                }
              }
              if (!v873)
                goto LABEL_757;
              v372 = v962;
              v930 = *(_OWORD *)&v943.__r_.__value_.__l.__data_;
              if (v943.__r_.__value_.__l.__size_)
              {
                v373 = (unint64_t *)(v943.__r_.__value_.__l.__size_ + 8);
                do
                  v374 = __ldxr(v373);
                while (__stxr(v374 + 1, v373));
              }
              v375 = v372 + 48 * v333;
              std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v375 + 8), (uint64_t *)&v930);
              v376 = *(_QWORD *)(v375 + 8);
              v377 = v376 && *(_QWORD *)(v376 + 16);
              *(_BYTE *)(v372 + 48 * v333 + 4) = v377;
              v390 = (std::__shared_weak_count *)*((_QWORD *)&v930 + 1);
              if (!*((_QWORD *)&v930 + 1))
                goto LABEL_757;
              v391 = (unint64_t *)(*((_QWORD *)&v930 + 1) + 8);
              do
                v392 = __ldaxr(v391);
              while (__stlxr(v392 - 1, v391));
            }
            else
            {
              v384 = v962;
              v929 = *(_OWORD *)&v943.__r_.__value_.__l.__data_;
              if (v943.__r_.__value_.__l.__size_)
              {
                v385 = (unint64_t *)(v943.__r_.__value_.__l.__size_ + 8);
                do
                  v386 = __ldxr(v385);
                while (__stxr(v386 + 1, v385));
              }
              v387 = v384 + 48 * v333;
              std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v387 + 8), (uint64_t *)&v929);
              v388 = *(_QWORD *)(v387 + 8);
              v389 = v388 && *(_QWORD *)(v388 + 16);
              *(_BYTE *)(v384 + 48 * v333 + 4) = v389;
              v390 = (std::__shared_weak_count *)*((_QWORD *)&v929 + 1);
              if (!*((_QWORD *)&v929 + 1))
                goto LABEL_757;
              v413 = (unint64_t *)(*((_QWORD *)&v929 + 1) + 8);
              do
                v392 = __ldaxr(v413);
              while (__stlxr(v392 - 1, v413));
            }
LABEL_716:
            if (!v392)
            {
              ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
              std::__shared_weak_count::__release_weak(v390);
            }
            goto LABEL_757;
          }
          if (!*(_BYTE *)(a5 + 184))
          {
            v378 = v962;
            v932 = *(_OWORD *)&v943.__r_.__value_.__l.__data_;
            if (v943.__r_.__value_.__l.__size_)
            {
              v379 = (unint64_t *)(v943.__r_.__value_.__l.__size_ + 8);
              do
                v380 = __ldxr(v379);
              while (__stxr(v380 + 1, v379));
            }
            v381 = v378 + 48 * v333;
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v381 + 8), (uint64_t *)&v932);
            v382 = *(_QWORD *)(v381 + 8);
            v383 = v382 && *(_QWORD *)(v382 + 16);
            *(_BYTE *)(v378 + 48 * v333 + 4) = v383;
            v390 = (std::__shared_weak_count *)*((_QWORD *)&v932 + 1);
            if (!*((_QWORD *)&v932 + 1))
              goto LABEL_757;
            v412 = (unint64_t *)(*((_QWORD *)&v932 + 1) + 8);
            do
              v392 = __ldaxr(v412);
            while (__stlxr(v392 - 1, v412));
            goto LABEL_716;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "uchar");
          v975 = 100;
          std::string::basic_string[abi:ne180100]<0>(v976, ".jpg");
          v359 = *(float *)(a5 + 216) * 100.0;
          if (v359 < 1.0)
            v359 = 1.0;
          if (v359 > 100.0)
            v359 = 100.0;
          v975 = (int)v359;
          std::operator+<char>();
          if (SHIBYTE(v976[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v976[0].__r_.__value_.__l.__data_);
          v976[0] = __s;
          *(_DWORD *)v1045 = 4;
          v1000 = v1045;
          v360 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v337 + 48 * v336 + 24), (int *)v1045, (uint64_t)&std::piecewise_construct, &v1000)+ 16);
          v361 = *(_QWORD *)(a4 + 24);
          std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&v1006);
          if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1045, v1006.__r_.__value_.__l.__data_, v1006.__r_.__value_.__l.__size_);
            if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1006.__r_.__value_.__l.__data_);
          }
          else
          {
            *(std::string *)v1045 = v1006;
          }
          v393 = (std::string *)(v361 + 48 * v360);
          cv3d::cv::gess::mesh::Texture::tex_typename(v393, (uint64_t)&v1006);
          if (v1045[23] >= 0)
            v394 = v1045[23];
          else
            v394 = *(_QWORD *)&v1045[8];
          std::string::basic_string[abi:ne180100]((uint64_t)&v945, v394 + 1);
          if ((v945.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v395 = &v945;
          else
            v395 = (std::string *)v945.__r_.__value_.__r.__words[0];
          if (v394)
          {
            if (v1045[23] >= 0)
              v396 = v1045;
            else
              v396 = *(_BYTE **)v1045;
            memmove(v395, v396, v394);
          }
          *(_WORD *)((char *)&v395->__r_.__value_.__l.__data_ + v394) = 95;
          if ((v1006.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v397 = &v1006;
          else
            v397 = (std::string *)v1006.__r_.__value_.__r.__words[0];
          if ((v1006.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v398 = HIBYTE(v1006.__r_.__value_.__r.__words[2]);
          else
            v398 = v1006.__r_.__value_.__l.__size_;
          v399 = std::string::append(&v945, (const std::string::value_type *)v397, v398);
          v400 = *(_OWORD *)&v399->__r_.__value_.__l.__data_;
          v946.__r_.__value_.__r.__words[2] = v399->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v946.__r_.__value_.__l.__data_ = v400;
          v399->__r_.__value_.__l.__size_ = 0;
          v399->__r_.__value_.__r.__words[2] = 0;
          v399->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v944, v333);
          if ((v944.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v401 = &v944;
          else
            v401 = (std::string *)v944.__r_.__value_.__r.__words[0];
          if ((v944.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v402 = HIBYTE(v944.__r_.__value_.__r.__words[2]);
          else
            v402 = v944.__r_.__value_.__l.__size_;
          v403 = std::string::append(&v946, (const std::string::value_type *)v401, v402);
          v404 = *(_OWORD *)&v403->__r_.__value_.__l.__data_;
          __s.__r_.__value_.__r.__words[2] = v403->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v404;
          v403->__r_.__value_.__l.__size_ = 0;
          v403->__r_.__value_.__r.__words[2] = 0;
          v403->__r_.__value_.__r.__words[0] = 0;
          if ((v976[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v405 = v976;
          else
            v405 = (std::string *)v976[0].__r_.__value_.__r.__words[0];
          if ((v976[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v406 = HIBYTE(v976[0].__r_.__value_.__r.__words[2]);
          else
            v406 = v976[0].__r_.__value_.__l.__size_;
          v407 = std::string::append(&__s, (const std::string::value_type *)v405, v406);
          v408 = *(_OWORD *)&v407->__r_.__value_.__l.__data_;
          v1002.__r_.__value_.__r.__words[2] = v407->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v1002.__r_.__value_.__l.__data_ = v408;
          v407->__r_.__value_.__l.__size_ = 0;
          v407->__r_.__value_.__r.__words[2] = 0;
          v407->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v944.__r_.__value_.__l.__data_);
          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v946.__r_.__value_.__l.__data_);
          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v945.__r_.__value_.__l.__data_);
          std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v946);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v945, (char *)&v1002);
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v945, (uint64_t)&v946, (std::__fs::filesystem::path *)&__s);
          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v945.__r_.__value_.__l.__data_);
          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v946.__r_.__value_.__l.__data_);
          if (v161)
          {
            v409 = v943.__r_.__value_.__r.__words[0];
            std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1033, a11 + 96);
            v161 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&__s, v409, (uint64_t)__p, (uint64_t)v1033, 1);
            v410 = v1034;
            if (v1034 == v1033)
            {
              v410 = v1033;
              v411 = 4;
              goto LABEL_719;
            }
            if (v1034)
            {
              v411 = 5;
LABEL_719:
              (*(void (**)(void))(*v410 + 8 * v411))();
            }
          }
          if (a10)
          {
            v414 = *(_QWORD *)(a9 + 8);
            if (v414 >= *(_QWORD *)(a9 + 16))
            {
              v415 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(a9, (__int128 *)&__s);
            }
            else
            {
              std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(a9, (__int128 *)&__s);
              v415 = v414 + 24;
            }
            *(_QWORD *)(a9 + 8) = v415;
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v935, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v935 = __s;
          cv3d::cv::gess::mesh::Texture::SetFilePath(v393, &v935);
          if (SHIBYTE(v935.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v935.__r_.__value_.__l.__data_);
          if (v873)
          {
            v416 = v962;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v934, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            else
              v934 = __s;
            cv3d::cv::gess::mesh::Texture::SetFilePath((std::string *)(v416 + 48 * v333), &v934);
            if (SHIBYTE(v934.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v934.__r_.__value_.__l.__data_);
            if (*(_QWORD *)(a11 + 120))
            {
              v417 = v962;
              v933 = *(_OWORD *)&v943.__r_.__value_.__l.__data_;
              if (v943.__r_.__value_.__l.__size_)
              {
                v418 = (unint64_t *)(v943.__r_.__value_.__l.__size_ + 8);
                do
                  v419 = __ldxr(v418);
                while (__stxr(v419 + 1, v418));
              }
              v420 = v417 + 48 * v333;
              std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v420 + 8), (uint64_t *)&v933);
              v421 = *(_QWORD *)(v420 + 8);
              v422 = v421 && *(_QWORD *)(v421 + 16);
              *(_BYTE *)(v417 + 48 * v333 + 4) = v422;
              std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&v933);
            }
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1002.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1002.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1006.__r_.__value_.__l.__data_);
          if ((v1045[23] & 0x80000000) != 0)
            operator delete(*(void **)v1045);
          if (SHIBYTE(v976[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v976[0].__r_.__value_.__l.__data_);
          if (v974 < 0)
            operator delete(__p[0]);
LABEL_757:
          v423 = (std::__shared_weak_count *)v943.__r_.__value_.__l.__size_;
          if (v943.__r_.__value_.__l.__size_)
          {
            v424 = (unint64_t *)(v943.__r_.__value_.__l.__size_ + 8);
            do
              v425 = __ldaxr(v424);
            while (__stlxr(v425 - 1, v424));
            if (!v425)
            {
              ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
              std::__shared_weak_count::__release_weak(v423);
            }
          }
          ++v333;
          v172 = v894;
          if (v333 == v894)
            goto LABEL_765;
        }
        v351 = (*(uint64_t (**)(void))(*v1053 + 16))();
LABEL_585:
        v1038 = (_BYTE *)v351;
        goto LABEL_589;
      }
LABEL_765:
      v426 = 0x100000;
      if (v869 < 0x100000)
        v426 = v869;
      v959 = v426
           - v869
           + 8 * v869
           + ((8 * v869) & 0x7FFFFFFFFFFFFFF8)
           + 2 * (v869 & 0x1FFFFFFFFFFFFFFFLL)
           + 76 * v426
           + 8 * v426;
      v960 = v959;
      *(std::chrono::system_clock::time_point *)v956.i8 = std::chrono::system_clock::now();
      v427 = cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v958);
      v428 = (uint64_t *)cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)v427);
      std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::push_back[abi:ne180100](v428, &v954);
    }
    if (*(_BYTE *)(a5 + 384))
    {
      v429 = v161;
      if (v172)
      {
        v430 = 0;
        while (1)
        {
          if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
          {
            v159 = 1;
            v95 = v880;
            goto LABEL_1054;
          }
          v431 = v969[0];
          LOWORD(__p[0]) = v430;
          *(_QWORD *)v1045 = std::map<unsigned short,std::string>::at(v893, (unsigned __int16 *)__p);
          v432 = *((unsigned __int16 *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), *(void ***)v1045, (uint64_t)&std::piecewise_construct, (__int128 **)v1045)+ 28);
          v433 = *(_QWORD *)a4;
          *(_OWORD *)&v925.__r_.__value_.__l.__data_ = 0uLL;
          v434 = operator new[]();
          v435 = operator new(0x30uLL);
          v435[1] = 0;
          v435[2] = 0;
          *v435 = &off_250D49908;
          *((_DWORD *)v435 + 6) = 0;
          *((_DWORD *)v435 + 7) = v871;
          *((_DWORD *)v435 + 8) = v871;
          *((_DWORD *)v435 + 9) = 4;
          v435[5] = v434;
          v436 = (std::__shared_weak_count *)v925.__r_.__value_.__l.__size_;
          v925.__r_.__value_.__r.__words[0] = (std::string::size_type)(v435 + 3);
          v925.__r_.__value_.__l.__size_ = (std::string::size_type)v435;
          if (v436)
          {
            v437 = (unint64_t *)&v436->__shared_owners_;
            do
              v438 = __ldaxr(v437);
            while (__stlxr(v438 - 1, v437));
            if (!v438)
            {
              ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
              std::__shared_weak_count::__release_weak(v436);
            }
          }
          v439 = v925.__r_.__value_.__r.__words[0];
          *(_DWORD *)v925.__r_.__value_.__l.__data_ = 0;
          if (v868)
            bzero(*(void **)(v439 + 16), 16 * v869);
          v440 = vsubq_f32(v980, v979);
          v441 = v440.f32[1];
          if (v440.f32[0] >= v440.f32[1])
            v441 = v440.f32[0];
          if (v441 >= v440.f32[2])
            v442 = v441;
          else
            v442 = v440.f32[2];
          if ((v429 & 1) == 0)
            goto LABEL_808;
          v443 = v965[0];
          v444 = (uint64_t)v1053;
          if (!v1053)
            goto LABEL_789;
          if (v1053 != v1052)
            break;
          v1032 = v1031;
          (*(void (**)(_QWORD *, _BYTE *))(v1052[0] + 24))(v1052, v1031);
LABEL_791:
          v445 = (uint64_t)v1051;
          if (!v1051)
            goto LABEL_794;
          if (v1051 != v1050)
          {
            v445 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_794:
            v1030 = (_BYTE *)v445;
            goto LABEL_796;
          }
          v1030 = v1029;
          (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1029);
LABEL_796:
          EnvironmentOcclusionMap = cv3d::cv::gess::alg::internal::GenerateEnvironmentOcclusionMap((uint64_t)v882, v431 + 24 * v430, v443 + 24 * v430, v439, (cv3d::cv::gess::alg::MPSMeshIntersector *)v970, fmaxf(v442 * 0.00001, 0.0000005), (uint64_t)v1031, v92, v870, (uint64_t *)(a5 + 480), (uint64_t)v1029, v879 != 0);
          v447 = v1030;
          if (v1030 == v1029)
          {
            v447 = v1029;
            v448 = 4;
          }
          else
          {
            if (!v1030)
              goto LABEL_801;
            v448 = 5;
          }
          (*(void (**)(void))(*v447 + 8 * v448))();
LABEL_801:
          v449 = v1032;
          if (v1032 == v1031)
          {
            v449 = v1031;
            v450 = 4;
LABEL_805:
            (*(void (**)(void))(*v449 + 8 * v450))();
            if (EnvironmentOcclusionMap)
              goto LABEL_806;
            goto LABEL_808;
          }
          if (v1032)
          {
            v450 = 5;
            goto LABEL_805;
          }
          if (EnvironmentOcclusionMap)
          {
LABEL_806:
            v429 = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v925.__r_.__value_.__l.__data_);
            goto LABEL_809;
          }
LABEL_808:
          v429 = 0;
LABEL_809:
          if (!a12)
          {
            if (*(_BYTE *)(a5 + 384))
              v455 = v429;
            else
              v455 = 0;
            if (v455 == 1)
            {
              LODWORD(__p[0]) = 13;
              v1005 = __p;
              v456 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v433 + 48 * v432 + 24), (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1005)+ 16);
              v457 = *(_QWORD *)(a4 + 24);
              v927 = *(_OWORD *)&v925.__r_.__value_.__l.__data_;
              if (v925.__r_.__value_.__l.__size_)
              {
                v458 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
                do
                  v459 = __ldxr(v458);
                while (__stxr(v459 + 1, v458));
              }
              v460 = v457 + 48 * v456;
              std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v460 + 8), (uint64_t *)&v927);
              v461 = *(_QWORD *)(v460 + 8);
              v462 = v461 && *(_QWORD *)(v461 + 16);
              *(_BYTE *)(v457 + 48 * v456 + 4) = v462;
              v481 = (std::__shared_weak_count *)*((_QWORD *)&v927 + 1);
              if (*((_QWORD *)&v927 + 1))
              {
                v482 = (unint64_t *)(*((_QWORD *)&v927 + 1) + 8);
                do
                  v483 = __ldaxr(v482);
                while (__stlxr(v483 - 1, v482));
                if (!v483)
                {
                  ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                  std::__shared_weak_count::__release_weak(v481);
                }
              }
              v429 = 1;
            }
            goto LABEL_913;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "uchar");
          v975 = 100;
          std::string::basic_string[abi:ne180100]<0>(v976, ".jpg");
          v451 = *(float *)(a5 + 416) * 100.0;
          if (v451 < 1.0)
            v451 = 1.0;
          if (v451 > 100.0)
            v451 = 100.0;
          v975 = (int)v451;
          std::operator+<char>();
          if (SHIBYTE(v976[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v976[0].__r_.__value_.__l.__data_);
          v976[0] = v1002;
          v452 = (uint64_t **)(v433 + 48 * v432 + 24);
          *(_DWORD *)v1045 = 13;
          v1003 = v1045;
          v453 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v452, (int *)v1045, (uint64_t)&std::piecewise_construct, &v1003)+ 16);
          v454 = *(_QWORD *)(a4 + 24);
          std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&v1006);
          if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v1045, v1006.__r_.__value_.__l.__data_, v1006.__r_.__value_.__l.__size_);
            if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1006.__r_.__value_.__l.__data_);
          }
          else
          {
            *(std::string *)v1045 = v1006;
          }
          cv3d::cv::gess::mesh::Texture::tex_typename((_DWORD *)(v454 + 48 * v453), (uint64_t)&v1006);
          if (v1045[23] >= 0)
            v463 = v1045[23];
          else
            v463 = *(_QWORD *)&v1045[8];
          std::string::basic_string[abi:ne180100]((uint64_t)&v944, v463 + 1);
          if ((v944.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v464 = &v944;
          else
            v464 = (std::string *)v944.__r_.__value_.__r.__words[0];
          if (v463)
          {
            if (v1045[23] >= 0)
              v465 = v1045;
            else
              v465 = *(_BYTE **)v1045;
            memmove(v464, v465, v463);
          }
          *(_WORD *)((char *)&v464->__r_.__value_.__l.__data_ + v463) = 95;
          if ((v1006.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v466 = &v1006;
          else
            v466 = (std::string *)v1006.__r_.__value_.__r.__words[0];
          if ((v1006.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v467 = HIBYTE(v1006.__r_.__value_.__r.__words[2]);
          else
            v467 = v1006.__r_.__value_.__l.__size_;
          v468 = std::string::append(&v944, (const std::string::value_type *)v466, v467);
          v469 = *(_OWORD *)&v468->__r_.__value_.__l.__data_;
          v945.__r_.__value_.__r.__words[2] = v468->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v945.__r_.__value_.__l.__data_ = v469;
          v468->__r_.__value_.__l.__size_ = 0;
          v468->__r_.__value_.__r.__words[2] = 0;
          v468->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v943, v430);
          if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v470 = &v943;
          else
            v470 = (std::string *)v943.__r_.__value_.__r.__words[0];
          if ((v943.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v471 = HIBYTE(v943.__r_.__value_.__r.__words[2]);
          else
            v471 = v943.__r_.__value_.__l.__size_;
          v472 = std::string::append(&v945, (const std::string::value_type *)v470, v471);
          v473 = *(_OWORD *)&v472->__r_.__value_.__l.__data_;
          v946.__r_.__value_.__r.__words[2] = v472->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v946.__r_.__value_.__l.__data_ = v473;
          v472->__r_.__value_.__l.__size_ = 0;
          v472->__r_.__value_.__r.__words[2] = 0;
          v472->__r_.__value_.__r.__words[0] = 0;
          if ((v976[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v474 = v976;
          else
            v474 = (std::string *)v976[0].__r_.__value_.__r.__words[0];
          if ((v976[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v475 = HIBYTE(v976[0].__r_.__value_.__r.__words[2]);
          else
            v475 = v976[0].__r_.__value_.__l.__size_;
          v476 = std::string::append(&v946, (const std::string::value_type *)v474, v475);
          v477 = *(_OWORD *)&v476->__r_.__value_.__l.__data_;
          v1002.__r_.__value_.__r.__words[2] = v476->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v1002.__r_.__value_.__l.__data_ = v477;
          v476->__r_.__value_.__l.__size_ = 0;
          v476->__r_.__value_.__r.__words[2] = 0;
          v476->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v946.__r_.__value_.__l.__data_);
          if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v943.__r_.__value_.__l.__data_);
          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v945.__r_.__value_.__l.__data_);
          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v944.__r_.__value_.__l.__data_);
          std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v945);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v944, (char *)&v1002);
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v944, (uint64_t)&v945, (std::__fs::filesystem::path *)&v946);
          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v944.__r_.__value_.__l.__data_);
          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v945.__r_.__value_.__l.__data_);
          if (v429)
          {
            v478 = v925.__r_.__value_.__r.__words[0];
            std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1027, a11 + 96);
            v429 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&v946, v478, (uint64_t)__p, (uint64_t)v1027, 0);
            v479 = v1028;
            if (v1028 == v1027)
            {
              v479 = v1027;
              v480 = 4;
              goto LABEL_883;
            }
            if (v1028)
            {
              v480 = 5;
LABEL_883:
              (*(void (**)(void))(*v479 + 8 * v480))();
            }
          }
          if (a10)
          {
            v484 = *(_QWORD *)(a9 + 8);
            if (v484 >= *(_QWORD *)(a9 + 16))
            {
              v486 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(a9, (__int128 *)&v946);
              v487 = a9;
            }
            else
            {
              if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a9 + 8), v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
              }
              else
              {
                v485 = *(_OWORD *)&v946.__r_.__value_.__l.__data_;
                *(_QWORD *)(v484 + 16) = *((_QWORD *)&v946.__r_.__value_.__l + 2);
                *(_OWORD *)v484 = v485;
              }
              v486 = v484 + 24;
              v487 = a9;
              *(_QWORD *)(a9 + 8) = v484 + 24;
            }
            *(_QWORD *)(v487 + 8) = v486;
          }
          if (*(_BYTE *)(a5 + 384))
            v488 = v429;
          else
            v488 = 0;
          if (v488 == 1)
          {
            LODWORD(v945.__r_.__value_.__l.__data_) = 13;
            v1004 = &v945;
            v489 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v452, (int *)&v945, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1004)+ 16);
            v490 = *(_QWORD *)(a4 + 24);
            if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v928, v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
            else
              v928 = v946;
            cv3d::cv::gess::mesh::Texture::SetFilePath((std::string *)(v490 + 48 * v489), &v928);
            if (SHIBYTE(v928.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v928.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v946.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1002.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1002.__r_.__value_.__l.__data_);
          if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v1006.__r_.__value_.__l.__data_);
          if ((v1045[23] & 0x80000000) != 0)
            operator delete(*(void **)v1045);
          if (SHIBYTE(v976[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v976[0].__r_.__value_.__l.__data_);
          if (v974 < 0)
            operator delete(__p[0]);
LABEL_913:
          v491 = (std::__shared_weak_count *)v925.__r_.__value_.__l.__size_;
          if (v925.__r_.__value_.__l.__size_)
          {
            v492 = (unint64_t *)(v925.__r_.__value_.__l.__size_ + 8);
            do
              v493 = __ldaxr(v492);
            while (__stlxr(v493 - 1, v492));
            if (!v493)
            {
              ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
              std::__shared_weak_count::__release_weak(v491);
            }
          }
          ++v430;
          v172 = v894;
          if (v430 == v894)
            goto LABEL_922;
        }
        v444 = (*(uint64_t (**)(void))(*v1053 + 16))();
LABEL_789:
        v1032 = (_BYTE *)v444;
        goto LABEL_791;
      }
    }
    else
    {
      v429 = v161;
    }
LABEL_922:
    v95 = v880;
    if (*(_BYTE *)(a5 + 224))
    {
      v494 = *(unsigned __int8 *)(a5 + 260);
      v495.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      std::string::basic_string[abi:ne180100]<0>(&v926, (char *)&unk_23C62207F);
      DispMapWithFaceNormals = cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v926, v868, v868);
      if (SHIBYTE(v926.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v926.__r_.__value_.__l.__data_);
      v874 = v495.__d_.__rep_;
      if (v172)
      {
        v497 = 0;
        if (v869 <= 1)
          v498 = 1;
        else
          v498 = v869;
        v884 = 4 * v498;
        do
        {
          if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
          {
            cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
            v159 = 1;
LABEL_1054:
            v161 = v429;
LABEL_1055:
            if (v948)
              operator delete(v948);
            if (v951)
            {
              v952 = v951;
              operator delete(v951);
            }
LABEL_1059:
            cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector((cv3d::cv::gess::alg::MPSMeshIntersector *)v970);
            if (SBYTE7(v955) < 0)
              operator delete((void *)v954);
            if (v159)
            {
              LOBYTE(v103) = 0;
              goto LABEL_1669;
            }
            std::chrono::system_clock::now();
            if (v95)
              *(double *)(v92 + 360) = v158;
            v542.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            v543 = 0;
            v952 = 0;
            v951 = 0;
            v953 = 0;
            if (*(unsigned __int8 *)(a5 + 104) | *(unsigned __int8 *)(a5 + 264))
            {
              v544 = (uint64_t)v889;
              if (*(_DWORD *)(a5 + 32))
              {
                v545 = v889[10].i64[0] - v889[9].i64[1];
                v543 = 16 * ((v545 >> 1) + (v545 >> 2));
              }
            }
            else
            {
              v544 = (uint64_t)v889;
            }
            std::string::basic_string[abi:ne180100]<0>(&v921, (char *)&unk_23C62207F);
            cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v921, v543, 0);
            if (SHIBYTE(v921.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v921.__r_.__value_.__l.__data_);
            if (*(unsigned __int8 *)(a5 + 104) | *(unsigned __int8 *)(a5 + 264))
              v546 = *(_DWORD *)(a5 + 32) == 0;
            else
              v546 = 1;
            v547 = v546;
            v548 = v547 & v161;
            if (!v546 && ((v161 ^ 1) & 1) == 0)
              v548 = cv3d::cv::gess::alg::internal::PREPARE_OBJ_ORTHOGONAL_TANGENTIAL(v544, (uint64_t *)&v951);
            std::string::basic_string[abi:ne180100]<0>(&v954, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
            *(_OWORD *)v1045 = 0uLL;
            v549 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v544 + 8), (uint64_t)v1045, (unsigned __int8 *)&v954);
            if (SBYTE7(v955) < 0)
              operator delete((void *)v954);
            *(_DWORD *)v1045 = v549;
            v550 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v544 + 8), (unsigned int *)v1045);
            *(std::chrono::system_clock::time_point *)v862 = v542;
            v865 = v548;
            std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v954, 3uLL);
            if (v894)
            {
              v551 = 0;
              do
              {
                v875 = v551;
                v552 = v969[0] + 24 * v551;
                v553 = *(_DWORD *)(v552 + 8);
                v878 = (unsigned int *)(v552 + 8);
                if (v553)
                {
                  v554 = 0;
                  v555 = v969[0] + 24 * v875;
                  v557 = *(_DWORD *)(v555 + 4);
                  v555 += 4;
                  v556 = v557;
                  v558 = (_QWORD *)(v555 + 12);
                  v887 = (unsigned int *)v555;
                  v559 = (_DWORD *)(v555 + 8);
                  v560 = v967[0] + 24 * v875;
                  v891 = (_QWORD *)(v560 + 16);
                  v561 = v968[0] + 24 * v875;
                  v562 = (_DWORD *)(v560 + 4);
                  v563 = (_DWORD *)(v560 + 12);
                  v564 = (_QWORD *)(v561 + 16);
                  v565 = (_DWORD *)(v561 + 4);
                  v566 = (_DWORD *)(v561 + 12);
                  v567 = v557;
                  do
                  {
                    if (v567)
                    {
                      v568 = 0;
                      do
                      {
                        if (*(_BYTE *)(*v558 + *v559 * (v568 + v554 * v567)))
                        {
                          *(_DWORD *)v1045 = *(_DWORD *)(*v891 + 4 * (v568 + v554 * *v562) * *v563);
                          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)v889, (unsigned int *)v1045, &v954);
                          v569 = *(unsigned int *)v954;
                          v570 = *(_QWORD *)(v550 + 40);
                          v571 = (*(_QWORD *)(v550 + 48) - v570) >> 4;
                          if (v571 <= v569)
                            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                          v572 = *(unsigned int *)(v954 + 4);
                          if (v571 <= v572)
                            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                          v573 = *(unsigned int *)(v954 + 8);
                          if (v571 <= v573)
                            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                          v574 = (float *)(*v564 + 16 * (v568 + v554 * *v565) * *v566);
                          v575 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v570 + 16 * v573), v574[2]), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v570 + 16 * v572), v574[1]), vmulq_n_f32(*(float32x4_t *)(v570 + 16 * v569), *v574)));
                          v576 = vmulq_f32(v575, v575);
                          v576.i32[3] = 0;
                          v577 = vpaddq_f32(v576, v576);
                          v578 = vpaddq_f32(v577, v577);
                          v579 = (float32x4_t)xmmword_23C603EC0;
                          if (v578.f32[0] > 0.0)
                            v579 = vdivq_f32(v575, vsqrtq_f32(v578));
                          *(float32x4_t *)v574 = v579;
                          v556 = *v887;
                        }
                        ++v568;
                        v567 = v556;
                      }
                      while (v568 < v556);
                      v553 = *v878;
                      v567 = v556;
                    }
                    ++v554;
                  }
                  while (v554 < v553);
                }
                v551 = v875 + 1;
              }
              while (v875 + 1 != v894);
            }
            if ((_QWORD)v954)
            {
              *((_QWORD *)&v954 + 1) = v954;
              operator delete((void *)v954);
            }
            cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
            cv3d::cv::gess::util::os::GlobalMemoryLogs(v580);
            v581 = v881;
            LOBYTE(v103) = v865;
            v582.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            if (v880)
              *(double *)(v881 + 304) = (double)(v582.__d_.__rep_ - *(_QWORD *)v862) / 1000000.0;
            v852.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v948, 3uLL);
            if (!v894)
            {
              v861 = 0;
LABEL_1646:
              if (v948)
              {
                v949 = v948;
                operator delete(v948);
              }
              if (v861)
              {
                LOBYTE(v103) = 0;
              }
              else
              {
                v849 = v951;
                v953 = 0;
                v952 = 0;
                v951 = 0;
                if (v849)
                  operator delete(v849);
                if (v1055)
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
                  LODWORD(v948) = 1120403456;
                  if (!v1055)
                    std::__throw_bad_function_call[abi:ne180100]();
                  (*(void (**)(_BYTE *, void **, void **))(*(_QWORD *)v1055 + 48))(v1055, &v948, __p);
                  if (v974 < 0)
                    operator delete(__p[0]);
                }
                v850.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                if (v880)
                  *(double *)(v581 + 368) = v160 + (double)(v850.__d_.__rep_ - v852.__d_.__rep_) / 1000000.0;
              }
              if (v951)
              {
                v952 = v951;
                operator delete(v951);
              }
LABEL_1669:
              __p[0] = v961;
              std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0] = &v962;
              std::vector<cv3d::cv::gess::mesh::Texture>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0] = v965;
              std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_1670;
            }
            v583 = 0;
            v584 = 3 * v869;
            v859 = (_BYTE *)(a5 + 264);
            v851 = a11 + 96;
            if (3 * v869 <= 1)
              v584 = 1;
            v855 = 4 * v584;
            if (v869 <= 1)
              v585 = 1;
            else
              v585 = v869;
            v876 = v585;
            v854 = (v584 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v892 = (uint64x2_t)vdupq_n_s64(v584 - 1);
            v861 = 1;
            while (2)
            {
              if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
                goto LABEL_1646;
              v586 = v969[0];
              LOWORD(__p[0]) = v583;
              *(_QWORD *)&v954 = std::map<unsigned short,std::string>::at(v893, (unsigned __int16 *)__p);
              v587 = (unsigned __int16 *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), (void **)v954, (uint64_t)&std::piecewise_construct, (__int128 **)&v954);
              v866 = v587[28];
              v863 = *(_QWORD *)a4;
              v920 = 0;
              v919 = 0;
              if ((v103 & 1) == 0)
              {
                v103 = 0;
                goto LABEL_1171;
              }
              v588 = *(unsigned __int8 *)(a5 + 104);
              std::string::basic_string[abi:ne180100]<0>(&v918, (char *)&unk_23C62207F);
              if (v588)
                v589 = 28 * v869;
              else
                v589 = 16 * v869;
              if (v588)
                v590 = v867;
              else
                v590 = 0;
              cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v918, v590, v589);
              if (SHIBYTE(v918.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v918.__r_.__value_.__l.__data_);
              if (!v588)
              {
                v103 = 1;
                goto LABEL_1168;
              }
              if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
              {
                LOBYTE(v103) = 1;
                goto LABEL_1177;
              }
              v591 = operator new[]();
              v592 = operator new(0x30uLL);
              v592[1] = 0;
              v592[2] = 0;
              *v592 = &off_250D49908;
              *((_DWORD *)v592 + 6) = 0;
              *((_DWORD *)v592 + 7) = v871;
              *((_DWORD *)v592 + 8) = v871;
              *((_DWORD *)v592 + 9) = 3;
              v592[5] = v591;
              v593 = v920;
              v919 = v592 + 3;
              v920 = (std::__shared_weak_count *)v592;
              if (v593)
              {
                v594 = (unint64_t *)&v593->__shared_owners_;
                do
                  v595 = __ldaxr(v594);
                while (__stlxr(v595 - 1, v594));
                if (!v595)
                {
                  ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
                  std::__shared_weak_count::__release_weak(v593);
                }
              }
              v596 = (uint64_t)v919;
              *(_DWORD *)v919 = 0;
              if (v871)
              {
                v597 = 0;
                v598 = (float *)(*(_QWORD *)(v596 + 16) + 4);
                v599 = v854;
                v600 = 1;
                v601 = 1;
                v602 = 2;
                v603 = (int64x2_t)xmmword_23C603280;
                do
                {
                  v604 = vmovn_s64((int64x2_t)vcgeq_u64(v892, (uint64x2_t)v603));
                  if ((v604.i8[0] & 1) != 0)
                  {
                    if (v602 + 3 * (v597 / 3))
                      v605 = 0.5;
                    else
                      v605 = 1.0;
                    *(v598 - 1) = v605;
                  }
                  if ((v604.i8[4] & 1) != 0)
                  {
                    if (v601 + 3 * (v600 / 3))
                      v606 = 0.5;
                    else
                      v606 = 1.0;
                    *v598 = v606;
                  }
                  v597 += 2;
                  v602 -= 2;
                  v603 = vaddq_s64(v603, vdupq_n_s64(2uLL));
                  v598 += 2;
                  v601 -= 2;
                  v600 += 2;
                  v599 -= 2;
                }
                while (v599);
              }
              if (*(_DWORD *)(a5 + 32))
                v607 = cv3d::cv::gess::alg::internal::TransferMapNorm((uint64_t)v882, (uint64_t)v889, v596, v586 + 24 * v583, v965[0] + 24 * v583, v968[0] + 24 * v583, v967[0] + 24 * v583, &v951);
              else
                v607 = cv3d::cv::gess::alg::internal::TransferMapNormSCENEKIT((uint64_t)v882, v596, v586 + 24 * v583, v965[0] + 24 * v583, v968[0] + 24 * v583);
              if (v607
                && cv3d::cv::gess::util::ImageT<float>::Dilate((uint64_t)v919, *(const void **)(v586 + 24 * v583 + 16), -1))
              {
                v608 = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v919);
                v609 = v608;
                if (*(_BYTE *)(a5 + 104))
                  v610 = v608;
                else
                  v610 = 0;
                if (v610 == 1)
                {
                  if (a12)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v954, "uchar");
                    WORD4(v955) = 100;
                    std::string::basic_string[abi:ne180100]<0>(&v956, ".jpg");
                    v611 = *(float *)(a5 + 136) * 100.0;
                    if (v611 < 1.0)
                      v611 = 1.0;
                    if (v611 > 100.0)
                      v611 = 100.0;
                    WORD4(v955) = (int)v611;
                    std::operator+<char>();
                    if (SBYTE7(v957) < 0)
                      operator delete((void *)v956.i64[0]);
                    v956 = *(int32x4_t *)v970;
                    *(_QWORD *)&v957 = *(_QWORD *)&v970[16];
                    *(_DWORD *)v970 = 2;
                    v1009 = v970;
                    v612 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)v970, (uint64_t)&std::piecewise_construct, &v1009)+ 16);
                    v613 = *(_QWORD *)(a4 + 24);
                    std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&v946);
                    if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v970, v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
                      if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v946.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      *(std::string *)v970 = v946;
                    }
                    v830 = (std::string *)(v613 + 48 * v612);
                    cv3d::cv::gess::mesh::Texture::tex_typename(v830, (uint64_t)&v946);
                    if (v970[23] >= 0)
                      v831 = v970[23];
                    else
                      v831 = *(_QWORD *)&v970[8];
                    std::string::basic_string[abi:ne180100]((uint64_t)&v925, v831 + 1);
                    if ((v925.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v832 = &v925;
                    else
                      v832 = (std::string *)v925.__r_.__value_.__r.__words[0];
                    if (v831)
                    {
                      if (v970[23] >= 0)
                        v833 = v970;
                      else
                        v833 = *(_BYTE **)v970;
                      memmove(v832, v833, v831);
                    }
                    *(_WORD *)((char *)&v832->__r_.__value_.__l.__data_ + v831) = 95;
                    if ((v946.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v834 = &v946;
                    else
                      v834 = (std::string *)v946.__r_.__value_.__r.__words[0];
                    if ((v946.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v835 = HIBYTE(v946.__r_.__value_.__r.__words[2]);
                    else
                      v835 = v946.__r_.__value_.__l.__size_;
                    v836 = std::string::append(&v925, (const std::string::value_type *)v834, v835);
                    v837 = *(_OWORD *)&v836->__r_.__value_.__l.__data_;
                    v943.__r_.__value_.__r.__words[2] = v836->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v943.__r_.__value_.__l.__data_ = v837;
                    v836->__r_.__value_.__l.__size_ = 0;
                    v836->__r_.__value_.__r.__words[2] = 0;
                    v836->__r_.__value_.__r.__words[0] = 0;
                    std::to_string(&v924, v583);
                    if ((v924.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v838 = &v924;
                    else
                      v838 = (std::string *)v924.__r_.__value_.__r.__words[0];
                    if ((v924.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v839 = HIBYTE(v924.__r_.__value_.__r.__words[2]);
                    else
                      v839 = v924.__r_.__value_.__l.__size_;
                    v840 = std::string::append(&v943, (const std::string::value_type *)v838, v839);
                    v841 = *(_OWORD *)&v840->__r_.__value_.__l.__data_;
                    v944.__r_.__value_.__r.__words[2] = v840->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v944.__r_.__value_.__l.__data_ = v841;
                    v840->__r_.__value_.__l.__size_ = 0;
                    v840->__r_.__value_.__r.__words[2] = 0;
                    v840->__r_.__value_.__r.__words[0] = 0;
                    if ((SBYTE7(v957) & 0x80u) == 0)
                      v842 = (const std::string::value_type *)&v956;
                    else
                      v842 = (const std::string::value_type *)v956.i64[0];
                    if ((SBYTE7(v957) & 0x80u) == 0)
                      v843 = BYTE7(v957);
                    else
                      v843 = v956.u64[1];
                    v844 = std::string::append(&v944, v842, v843);
                    v845 = *(_OWORD *)&v844->__r_.__value_.__l.__data_;
                    v945.__r_.__value_.__r.__words[2] = v844->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v945.__r_.__value_.__l.__data_ = v845;
                    v844->__r_.__value_.__l.__size_ = 0;
                    v844->__r_.__value_.__r.__words[2] = 0;
                    v844->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v944.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v924.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v924.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v943.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v925.__r_.__value_.__l.__data_);
                    std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v943);
                    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v925, (char *)&v945);
                    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v925, (uint64_t)&v943, (std::__fs::filesystem::path *)&v944);
                    if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v925.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v943.__r_.__value_.__l.__data_);
                    v846 = (uint64_t)v919;
                    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1023, v851);
                    v103 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&v944, v846, (uint64_t)&v954, (uint64_t)v1023, 1);
                    v847 = v1024;
                    if (v1024 == v1023)
                    {
                      v847 = v1023;
                      v848 = 4;
LABEL_1622:
                      (*(void (**)(void))(*v847 + 8 * v848))();
                    }
                    else if (v1024)
                    {
                      v848 = 5;
                      goto LABEL_1622;
                    }
                    if (a10)
                      std::vector<std::__fs::filesystem::path>::push_back[abi:ne180100](a9, (__int128 *)&v944);
                    if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v917, v944.__r_.__value_.__l.__data_, v944.__r_.__value_.__l.__size_);
                    else
                      v917 = v944;
                    cv3d::cv::gess::mesh::Texture::SetFilePath(v830, &v917);
                    if (SHIBYTE(v917.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v917.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v944.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v945.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v946.__r_.__value_.__l.__data_);
                    if ((v970[23] & 0x80000000) != 0)
                      operator delete(*(void **)v970);
                    if (SBYTE7(v957) < 0)
                      operator delete((void *)v956.i64[0]);
                    if (SBYTE7(v955) < 0)
                      operator delete((void *)v954);
LABEL_1165:
                    v614 = (uint64_t)v919;
                    v615 = v919[2];
                    if (v615)
                    {
                      MEMORY[0x2426211A0](v615, 0x1000C8052888210);
                      v614 = (uint64_t)v919;
                    }
                    *(_QWORD *)(v614 + 16) = 0;
                  }
                  else
                  {
                    LODWORD(v954) = 2;
                    v1010 = &v954;
                    v711 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)&v954, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1010)+ 16);
                    v712 = *(_QWORD *)(a4 + 24);
                    v915 = v919;
                    v916 = v920;
                    if (v920)
                    {
                      v713 = (unint64_t *)&v920->__shared_owners_;
                      do
                        v714 = __ldxr(v713);
                      while (__stxr(v714 + 1, v713));
                    }
                    v715 = v712 + 48 * v711;
                    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v715 + 8), (uint64_t *)&v915);
                    v716 = *(_QWORD *)(v715 + 8);
                    v717 = v716 && *(_QWORD *)(v716 + 16);
                    *(_BYTE *)(v712 + 48 * v711 + 4) = v717;
                    v721 = v916;
                    if (v916)
                    {
                      v722 = (unint64_t *)&v916->__shared_owners_;
                      do
                        v723 = __ldaxr(v722);
                      while (__stlxr(v723 - 1, v722));
                      if (!v723)
                      {
                        ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
                        std::__shared_weak_count::__release_weak(v721);
                      }
                    }
                    v103 = 1;
                  }
LABEL_1168:
                  v616 = v968[0];
                  v617 = *(_QWORD *)(v968[0] + 24 * v583 + 16);
                  if (v617)
                  {
                    MEMORY[0x2426211A0](v617 - 16, 0x1000C80451B5BE8);
                    v616 = v968[0];
                  }
                  *(_QWORD *)(v616 + 24 * v583 + 16) = 0;
                  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
LABEL_1171:
                  v618 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)v587);
                  v619 = *(unsigned __int8 *)(a5 + 144);
                  if (*(_BYTE *)(a5 + 144) && ((v103 ^ 1) & 1) == 0)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v914, (char *)&unk_23C62207F);
                    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v914, v867, v867);
                    if (SHIBYTE(v914.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v914.__r_.__value_.__l.__data_);
                    if (v1053 && (*(unsigned int (**)(_QWORD *))(*v1053 + 48))(v1053))
                    {
LABEL_1177:
                      cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
                      goto LABEL_1462;
                    }
                    *(_OWORD *)&v902.__r_.__value_.__l.__data_ = 0uLL;
                    v620 = operator new[]();
                    v621 = operator new(0x30uLL);
                    v621[1] = 0;
                    v621[2] = 0;
                    *v621 = &off_250D49908;
                    *((_DWORD *)v621 + 6) = 0;
                    *((_DWORD *)v621 + 7) = v871;
                    *((_DWORD *)v621 + 8) = v871;
                    *((_DWORD *)v621 + 9) = 3;
                    v621[5] = v620;
                    v622 = (std::__shared_weak_count *)v902.__r_.__value_.__l.__size_;
                    v902.__r_.__value_.__r.__words[0] = (std::string::size_type)(v621 + 3);
                    v902.__r_.__value_.__l.__size_ = (std::string::size_type)v621;
                    if (v622)
                    {
                      v623 = (unint64_t *)&v622->__shared_owners_;
                      do
                        v624 = __ldaxr(v623);
                      while (__stlxr(v624 - 1, v623));
                      if (!v624)
                      {
                        ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
                        std::__shared_weak_count::__release_weak(v622);
                      }
                    }
                    v625 = v902.__r_.__value_.__r.__words[0];
                    *(_DWORD *)v902.__r_.__value_.__l.__data_ = 0;
                    if (v871)
                      bzero(*(void **)(v625 + 16), v855);
                    if (cv3d::cv::gess::alg::internal::TransferMapNormObj((uint64_t)v882, v625, v586 + 24 * v583, v965[0] + 24 * v583)&& cv3d::cv::gess::util::ImageT<float>::Dilate((uint64_t)v902.__r_.__value_.__l.__data_, *(const void **)(v586 + 24 * v583 + 16), 5))
                    {
                      v626 = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v902.__r_.__value_.__l.__data_);
                      if (*(_BYTE *)(a5 + 144))
                        v627 = v626;
                      else
                        v627 = 0;
                      if (v627 == 1)
                      {
                        if (a12)
                        {
                          std::string::basic_string[abi:ne180100]<0>(&v954, "uchar");
                          WORD4(v955) = 100;
                          std::string::basic_string[abi:ne180100]<0>(&v956, ".jpg");
                          v628 = *(float *)(a5 + 176) * 100.0;
                          if (v628 < 1.0)
                            v628 = 1.0;
                          if (v628 > 100.0)
                            v628 = 100.0;
                          WORD4(v955) = (int)v628;
                          std::operator+<char>();
                          if (SBYTE7(v957) < 0)
                            operator delete((void *)v956.i64[0]);
                          v956 = *(int32x4_t *)v1045;
                          *(_QWORD *)&v957 = *(_QWORD *)&v1045[16];
                          *(_DWORD *)v1045 = 7;
                          v1011 = v1045;
                          v629 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)v1045, (uint64_t)&std::piecewise_construct, &v1011)+ 16);
                          v630 = *(_QWORD *)(a4 + 24);
                          std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&v946);
                          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)v1045, v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
                            if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v946.__r_.__value_.__l.__data_);
                          }
                          else
                          {
                            *(std::string *)v1045 = v946;
                          }
                          v811 = (std::string *)(v630 + 48 * v629);
                          cv3d::cv::gess::mesh::Texture::tex_typename(v811, (uint64_t)&v946);
                          if (v1045[23] >= 0)
                            v812 = v1045[23];
                          else
                            v812 = *(_QWORD *)&v1045[8];
                          std::string::basic_string[abi:ne180100]((uint64_t)&v925, v812 + 1);
                          if ((v925.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v813 = &v925;
                          else
                            v813 = (std::string *)v925.__r_.__value_.__r.__words[0];
                          if (v812)
                          {
                            if (v1045[23] >= 0)
                              v814 = v1045;
                            else
                              v814 = *(_BYTE **)v1045;
                            memmove(v813, v814, v812);
                          }
                          *(_WORD *)((char *)&v813->__r_.__value_.__l.__data_ + v812) = 95;
                          if ((v946.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v815 = &v946;
                          else
                            v815 = (std::string *)v946.__r_.__value_.__r.__words[0];
                          if ((v946.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v816 = HIBYTE(v946.__r_.__value_.__r.__words[2]);
                          else
                            v816 = v946.__r_.__value_.__l.__size_;
                          v817 = std::string::append(&v925, (const std::string::value_type *)v815, v816);
                          v818 = *(_OWORD *)&v817->__r_.__value_.__l.__data_;
                          v943.__r_.__value_.__r.__words[2] = v817->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v943.__r_.__value_.__l.__data_ = v818;
                          v817->__r_.__value_.__l.__size_ = 0;
                          v817->__r_.__value_.__r.__words[2] = 0;
                          v817->__r_.__value_.__r.__words[0] = 0;
                          std::to_string(&v924, v583);
                          if ((v924.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v819 = &v924;
                          else
                            v819 = (std::string *)v924.__r_.__value_.__r.__words[0];
                          if ((v924.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v820 = HIBYTE(v924.__r_.__value_.__r.__words[2]);
                          else
                            v820 = v924.__r_.__value_.__l.__size_;
                          v821 = std::string::append(&v943, (const std::string::value_type *)v819, v820);
                          v822 = *(_OWORD *)&v821->__r_.__value_.__l.__data_;
                          v944.__r_.__value_.__r.__words[2] = v821->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v944.__r_.__value_.__l.__data_ = v822;
                          v821->__r_.__value_.__l.__size_ = 0;
                          v821->__r_.__value_.__r.__words[2] = 0;
                          v821->__r_.__value_.__r.__words[0] = 0;
                          if ((SBYTE7(v957) & 0x80u) == 0)
                            v823 = (const std::string::value_type *)&v956;
                          else
                            v823 = (const std::string::value_type *)v956.i64[0];
                          if ((SBYTE7(v957) & 0x80u) == 0)
                            v824 = BYTE7(v957);
                          else
                            v824 = v956.u64[1];
                          v825 = std::string::append(&v944, v823, v824);
                          v826 = *(_OWORD *)&v825->__r_.__value_.__l.__data_;
                          v945.__r_.__value_.__r.__words[2] = v825->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v945.__r_.__value_.__l.__data_ = v826;
                          v825->__r_.__value_.__l.__size_ = 0;
                          v825->__r_.__value_.__r.__words[2] = 0;
                          v825->__r_.__value_.__r.__words[0] = 0;
                          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v944.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v924.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v924.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v943.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v925.__r_.__value_.__l.__data_);
                          std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v943);
                          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v925, (char *)&v945);
                          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v925, (uint64_t)&v943, (std::__fs::filesystem::path *)&v944);
                          if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v925.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v943.__r_.__value_.__l.__data_);
                          v827 = v902.__r_.__value_.__r.__words[0];
                          std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1021, v851);
                          v103 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&v944, v827, (uint64_t)&v954, (uint64_t)v1021, 1);
                          v828 = v1022;
                          if (v1022 == v1021)
                          {
                            v828 = v1021;
                            v829 = 4;
LABEL_1555:
                            (*(void (**)(void))(*v828 + 8 * v829))();
                          }
                          else if (v1022)
                          {
                            v829 = 5;
                            goto LABEL_1555;
                          }
                          if (a10)
                            std::vector<std::__fs::filesystem::path>::push_back[abi:ne180100](a9, (__int128 *)&v944);
                          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                            std::string::__init_copy_ctor_external(&v913, v944.__r_.__value_.__l.__data_, v944.__r_.__value_.__l.__size_);
                          else
                            v913 = v944;
                          cv3d::cv::gess::mesh::Texture::SetFilePath(v811, &v913);
                          if (SHIBYTE(v913.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v913.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v944.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v945.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v946.__r_.__value_.__l.__data_);
                          if ((v1045[23] & 0x80000000) != 0)
                            operator delete(*(void **)v1045);
                          if (SBYTE7(v957) < 0)
                            operator delete((void *)v956.i64[0]);
                          if (SBYTE7(v955) < 0)
                            operator delete((void *)v954);
                        }
                        else
                        {
                          LODWORD(v954) = 7;
                          v1012 = &v954;
                          v704 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)&v954, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1012)+ 16);
                          v705 = *(_QWORD *)(a4 + 24);
                          v912 = *(_OWORD *)&v902.__r_.__value_.__l.__data_;
                          if (v902.__r_.__value_.__l.__size_)
                          {
                            v706 = (unint64_t *)(v902.__r_.__value_.__l.__size_ + 8);
                            do
                              v707 = __ldxr(v706);
                            while (__stxr(v707 + 1, v706));
                          }
                          v708 = v705 + 48 * v704;
                          std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v708 + 8), (uint64_t *)&v912);
                          v709 = *(_QWORD *)(v708 + 8);
                          v710 = v709 && *(_QWORD *)(v709 + 16);
                          *(_BYTE *)(v705 + 48 * v704 + 4) = v710;
                          v718 = (std::__shared_weak_count *)*((_QWORD *)&v912 + 1);
                          if (*((_QWORD *)&v912 + 1))
                          {
                            v719 = (unint64_t *)(*((_QWORD *)&v912 + 1) + 8);
                            do
                              v720 = __ldaxr(v719);
                            while (__stlxr(v720 - 1, v719));
                            if (!v720)
                            {
                              ((void (*)(std::__shared_weak_count *))v718->__on_zero_shared)(v718);
                              std::__shared_weak_count::__release_weak(v718);
                            }
                          }
                          v103 = 1;
                        }
                      }
                      else
                      {
                        v103 = v626;
                      }
                    }
                    else
                    {
                      v103 = 0;
                    }
                    v631 = (std::__shared_weak_count *)v902.__r_.__value_.__l.__size_;
                    if (v902.__r_.__value_.__l.__size_)
                    {
                      v632 = (unint64_t *)(v902.__r_.__value_.__l.__size_ + 8);
                      do
                        v633 = __ldaxr(v632);
                      while (__stlxr(v633 - 1, v632));
                      if (!v633)
                      {
                        ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
                        std::__shared_weak_count::__release_weak(v631);
                      }
                    }
                    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
                  }
                  if (v619 && v103)
                    v618 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v618);
                  if (v103)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v911, (char *)&unk_23C62207F);
                    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v911, v868, 20 * v869);
                    if (SHIBYTE(v911.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v911.__r_.__value_.__l.__data_);
                    if (*(_BYTE *)(a5 + 344))
                    {
                      if (!v1053 || ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) == 0)
                      {
                        *(_OWORD *)&v946.__r_.__value_.__l.__data_ = 0uLL;
                        v634 = operator new[]();
                        v635 = operator new(0x30uLL);
                        v635[1] = 0;
                        v635[2] = 0;
                        *v635 = &off_250D49908;
                        *((_DWORD *)v635 + 6) = 0;
                        *((_DWORD *)v635 + 7) = v871;
                        *((_DWORD *)v635 + 8) = v871;
                        *((_DWORD *)v635 + 9) = 3;
                        v635[5] = v634;
                        v636 = (std::__shared_weak_count *)v946.__r_.__value_.__l.__size_;
                        v946.__r_.__value_.__r.__words[0] = (std::string::size_type)(v635 + 3);
                        v946.__r_.__value_.__l.__size_ = (std::string::size_type)v635;
                        if (v636)
                        {
                          v637 = (unint64_t *)&v636->__shared_owners_;
                          do
                            v638 = __ldaxr(v637);
                          while (__stlxr(v638 - 1, v637));
                          if (!v638)
                          {
                            ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
                            std::__shared_weak_count::__release_weak(v636);
                          }
                        }
                        *(_DWORD *)v946.__r_.__value_.__l.__data_ = 0;
                        v639 = v965[0];
                        std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v954, 3uLL);
                        if (v871)
                        {
                          v640 = 0;
                          v641 = 0;
                          v642 = 0;
                          v643 = (uint64_t *)(v639 + 24 * v583 + 16);
                          do
                          {
                            if (*(_BYTE *)(*(_QWORD *)(v586 + 24 * v583 + 16) + v642))
                            {
                              v644 = *v643;
                              LODWORD(v945.__r_.__value_.__l.__data_) = *(_DWORD *)(*v643 + v640 + 4);
                              v645 = (uint64_t)v882;
                              cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)v882, (unsigned int *)&v945, &v954);
                              v646 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v645, *(_DWORD *)(v645 + 176), *(_DWORD *)v954);
                              v647 = v644 + v640;
                              v885 = *(float *)(v647 + 8);
                              v888 = *v646;
                              v648 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v645, *(_DWORD *)(v645 + 176), *(_DWORD *)(v954 + 4));
                              v649 = vaddq_f32(vaddq_f32(vmulq_n_f32(v888, v885), vmulq_n_f32(*v648, *(float *)(v647 + 12))), vmulq_n_f32(*(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v645, *(_DWORD *)(v645 + 176), *(_DWORD *)(v954 + 8)), (float)(1.0 - *(float *)(v647 + 8)) - *(float *)(v647 + 12)));
                              v650 = v946.__r_.__value_.__r.__words[0];
                              v651 = *(_QWORD *)(v946.__r_.__value_.__r.__words[0] + 16) + v641;
                              *(_QWORD *)v651 = v649.i64[0];
                              *(_DWORD *)(v651 + 8) = v649.i32[2];
                            }
                            else
                            {
                              v650 = v946.__r_.__value_.__r.__words[0];
                              v652 = *(_QWORD *)(v946.__r_.__value_.__r.__words[0] + 16) + v641;
                              *(_QWORD *)v652 = 0;
                              *(_DWORD *)(v652 + 8) = 0;
                            }
                            ++v642;
                            v641 += 12;
                            v640 += 16;
                          }
                          while (v876 != v642);
                        }
                        else
                        {
                          v650 = v946.__r_.__value_.__r.__words[0];
                        }
                        cv3d::cv::gess::util::ImageT<float>::Dilate(v650, *(const void **)(v586 + 24 * v583 + 16), 5);
                        cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v946.__r_.__value_.__l.__data_);
                        v581 = v881;
                        if (*(_BYTE *)(a5 + 344))
                        {
                          LODWORD(v945.__r_.__value_.__l.__data_) = 11;
                          v1013 = &v945;
                          v653 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)&v945, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1013)+ 16);
                          v654 = *(_QWORD *)(a4 + 24);
                          v910 = *(_OWORD *)&v946.__r_.__value_.__l.__data_;
                          if (v946.__r_.__value_.__l.__size_)
                          {
                            v655 = (unint64_t *)(v946.__r_.__value_.__l.__size_ + 8);
                            do
                              v656 = __ldxr(v655);
                            while (__stxr(v656 + 1, v655));
                          }
                          v657 = v654 + 48 * v653;
                          std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v657 + 8), (uint64_t *)&v910);
                          v658 = *(_QWORD *)(v657 + 8);
                          v659 = v658 && *(_QWORD *)(v658 + 16);
                          *(_BYTE *)(v654 + 48 * v653 + 4) = v659;
                          v660 = (std::__shared_weak_count *)*((_QWORD *)&v910 + 1);
                          if (*((_QWORD *)&v910 + 1))
                          {
                            v661 = (unint64_t *)(*((_QWORD *)&v910 + 1) + 8);
                            do
                              v662 = __ldaxr(v661);
                            while (__stlxr(v662 - 1, v661));
                            if (!v662)
                            {
                              ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
                              std::__shared_weak_count::__release_weak(v660);
                            }
                          }
                        }
                        if ((_QWORD)v954)
                        {
                          *((_QWORD *)&v954 + 1) = v954;
                          operator delete((void *)v954);
                        }
                        v663 = (std::__shared_weak_count *)v946.__r_.__value_.__l.__size_;
                        if (v946.__r_.__value_.__l.__size_)
                        {
                          v664 = (unint64_t *)(v946.__r_.__value_.__l.__size_ + 8);
                          do
                            v665 = __ldaxr(v664);
                          while (__stlxr(v665 - 1, v664));
                          if (!v665)
                          {
                            ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                            std::__shared_weak_count::__release_weak(v663);
                          }
                        }
                        goto LABEL_1249;
                      }
LABEL_1461:
                      cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
                      v782 = 0;
                      LOBYTE(v103) = 1;
                      goto LABEL_1500;
                    }
LABEL_1249:
                    v666 = v965[0];
                    v667 = *(_QWORD *)(v965[0] + 24 * v583 + 16);
                    if (v667)
                    {
                      MEMORY[0x2426211A0](v667, 0x1000C80451B5BE8);
                      v666 = v965[0];
                    }
                    *(_QWORD *)(v666 + 24 * v583 + 16) = 0;
                    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
                  }
                  v668 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v618);
                  if (v103)
                  {
                    v669 = *v859;
                    if (*v859)
                    {
                      if (v963 == v962)
                      {
                        v670 = 0;
                      }
                      else
                      {
                        v670 = 4 * v869;
                        if (*(_BYTE *)(v962 + 48 * v583 + 4))
                          v670 = 0;
                      }
                      v671 = v867 + v670;
                    }
                    else
                    {
                      v671 = 0;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v909, (char *)&unk_23C62207F);
                    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v909, v671, v671);
                    if (SHIBYTE(v909.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v909.__r_.__value_.__l.__data_);
                    v908 = 0;
                    *(_QWORD *)v907 = 0;
                    v672 = *v859;
                    if (*v859)
                    {
                      v673 = v962;
                      if (*(_BYTE *)(v962 + 48 * v583 + 4))
                      {
                        v674 = v962 + 48 * v583;
                        v676 = *(_QWORD *)(v674 + 8);
                        v675 = *(std::__shared_weak_count **)(v674 + 16);
                        if (v675)
                        {
                          v677 = (unint64_t *)&v675->__shared_owners_;
                          do
                            v678 = __ldxr(v677);
                          while (__stxr(v678 + 1, v677));
                          v679 = v908;
                          *(_QWORD *)v907 = v676;
                          v908 = v675;
                          if (v679)
                          {
                            v680 = (unint64_t *)&v679->__shared_owners_;
                            do
                              v681 = __ldaxr(v680);
                            while (__stlxr(v681 - 1, v680));
                            if (!v681)
                            {
                              ((void (*)(std::__shared_weak_count *))v679->__on_zero_shared)(v679);
                              std::__shared_weak_count::__release_weak(v679);
                            }
                          }
                        }
                        else
                        {
                          *(_QWORD *)v907 = v676;
                          v908 = 0;
                        }
                        ImageFromTextureFilePath = 1;
                      }
                      else
                      {
                        v683 = (std::__shared_weak_count *)operator new(0x30uLL);
                        v683->__shared_owners_ = 0;
                        v683->__shared_weak_owners_ = 0;
                        v683->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
                        v683[1].__vftable = 0;
                        v684 = (uint64_t)&v683[1];
                        v683[1].__shared_owners_ = 0;
                        v683[1].__shared_weak_owners_ = 0;
                        *(_QWORD *)v907 = v683 + 1;
                        v908 = v683;
                        v685 = v673 + 48 * v583;
                        v686 = *(char *)(v685 + 47);
                        v687 = v685 + 24;
                        if (v686 < 0)
                        {
                          std::string::__init_copy_ctor_external(&v946, *(const std::string::value_type **)v687, *(_QWORD *)(v673 + 48 * v583 + 32));
                          v684 = *(_QWORD *)v907;
                        }
                        else
                        {
                          v688 = *(_OWORD *)v687;
                          v946.__r_.__value_.__r.__words[2] = *(_QWORD *)(v687 + 16);
                          *(_OWORD *)&v946.__r_.__value_.__l.__data_ = v688;
                        }
                        v954 = *(_OWORD *)&v946.__r_.__value_.__l.__data_;
                        *(_QWORD *)&v955 = *((_QWORD *)&v946.__r_.__value_.__l + 2);
                        memset(&v946, 0, sizeof(v946));
                        ImageFromTextureFilePath = cv3d::cv::gess::alg::internal::LoadImageFromTextureFilePath((uint64_t)&v954, v684);
                        if (SBYTE7(v955) < 0)
                          operator delete((void *)v954);
                        if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v946.__r_.__value_.__l.__data_);
                      }
                      cv3d::cv::gess::alg::imgfbuffer2vmbuffer(*(uint64_t *)v907, (cv3d::cv::gess::alg *)(*(_DWORD *)(*(_QWORD *)v907 + 8)* *(_DWORD *)(*(_QWORD *)v907 + 4)));
                      v689 = *v859;
                      v906 = 0;
                      *(_QWORD *)v905 = 0;
                      if (v689)
                      {
                        v690 = v961[0];
                        if (*(_BYTE *)(v961[0] + 48 * v583 + 4))
                        {
                          v691 = v961[0] + 48 * v583;
                          v693 = *(_QWORD *)(v691 + 8);
                          v692 = *(std::__shared_weak_count **)(v691 + 16);
                          if (v692)
                          {
                            v694 = (unint64_t *)&v692->__shared_owners_;
                            do
                              v695 = __ldxr(v694);
                            while (__stxr(v695 + 1, v694));
                            v696 = v906;
                            *(_QWORD *)v905 = v693;
                            v906 = v692;
                            if (v696)
                            {
                              v697 = (unint64_t *)&v696->__shared_owners_;
                              do
                                v698 = __ldaxr(v697);
                              while (__stlxr(v698 - 1, v697));
                              if (!v698)
                              {
                                ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                                std::__shared_weak_count::__release_weak(v696);
                              }
                            }
                          }
                          else
                          {
                            *(_QWORD *)v905 = v693;
                            v906 = 0;
                          }
                        }
                        else
                        {
                          v699 = (std::__shared_weak_count *)operator new(0x30uLL);
                          v699->__shared_owners_ = 0;
                          v699->__shared_weak_owners_ = 0;
                          v699->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
                          v699[1].__vftable = 0;
                          v700 = (uint64_t)&v699[1];
                          v699[1].__shared_owners_ = 0;
                          v699[1].__shared_weak_owners_ = 0;
                          *(_QWORD *)v905 = v699 + 1;
                          v906 = v699;
                          if (ImageFromTextureFilePath)
                          {
                            v701 = v690 + 48 * v583;
                            v702 = (const std::string::value_type **)(v701 + 24);
                            if (*(char *)(v701 + 47) < 0)
                            {
                              std::string::__init_copy_ctor_external(&v946, *v702, *(_QWORD *)(v690 + 48 * v583 + 32));
                              v700 = *(_QWORD *)v905;
                            }
                            else
                            {
                              v703 = *(_OWORD *)v702;
                              v946.__r_.__value_.__r.__words[2] = *(_QWORD *)(v701 + 40);
                              *(_OWORD *)&v946.__r_.__value_.__l.__data_ = v703;
                            }
                            v954 = *(_OWORD *)&v946.__r_.__value_.__l.__data_;
                            *(_QWORD *)&v955 = *((_QWORD *)&v946.__r_.__value_.__l + 2);
                            memset(&v946, 0, sizeof(v946));
                            ImageFromTextureFilePath = cv3d::cv::gess::alg::internal::LoadImageFromTextureFilePath((uint64_t)&v954, v700);
                            if (SBYTE7(v955) < 0)
                              operator delete((void *)v954);
                            if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v946.__r_.__value_.__l.__data_);
                          }
                        }
                        cv3d::cv::gess::alg::imgfbuffer2vmbuffer(*(uint64_t *)v905, (cv3d::cv::gess::alg *)(3* *(_DWORD *)(*(_QWORD *)v905 + 4)* *(_DWORD *)(*(_QWORD *)v905 + 8)));
                      }
                    }
                    else
                    {
                      v906 = 0;
                      *(_QWORD *)v905 = 0;
                      ImageFromTextureFilePath = 1;
                    }
                    if (!v669)
                    {
                      v103 = ImageFromTextureFilePath;
                      goto LABEL_1429;
                    }
                    v103 = ImageFromTextureFilePath;
                    if (v1053 && ((*(uint64_t (**)(_QWORD *))(*v1053 + 48))(v1053) & 1) != 0)
                    {
                      v772 = 0;
                    }
                    else
                    {
                      v904 = 0;
                      v903 = 0;
                      v724 = cv3d::cv::gess::alg::custom_vm_allocate_float((cv3d::cv::gess::alg *)v869);
                      v725 = (char *)operator new(0x30uLL);
                      *((_QWORD *)v725 + 1) = 0;
                      *((_QWORD *)v725 + 2) = 0;
                      *(_QWORD *)v725 = &off_250D49908;
                      *((_DWORD *)v725 + 6) = 0;
                      *((_DWORD *)v725 + 7) = v871;
                      *((_DWORD *)v725 + 8) = v871;
                      *((_DWORD *)v725 + 9) = 1;
                      *((_QWORD *)v725 + 5) = v724;
                      v726 = (std::__shared_weak_count *)v904;
                      v903 = v725 + 24;
                      v904 = (uint64_t)v725;
                      if (v726)
                      {
                        v727 = (unint64_t *)&v726->__shared_owners_;
                        do
                          v728 = __ldaxr(v727);
                        while (__stlxr(v728 - 1, v727));
                        if (!v728)
                        {
                          ((void (*)(std::__shared_weak_count *))v726->__on_zero_shared)(v726);
                          std::__shared_weak_count::__release_weak(v726);
                        }
                      }
                      v729 = v903;
                      *v903 = 1;
                      if ((ImageFromTextureFilePath & 1) != 0)
                      {
                        v730 = *(_QWORD *)v905;
                        v731 = *(_QWORD *)v907;
                        v732 = (uint64_t)v1051;
                        if (!v1051)
                          goto LABEL_1342;
                        if (v1051 == v1050)
                        {
                          v1020 = v1019;
                          (*(void (**)(_QWORD *, _BYTE *))(v1050[0] + 24))(v1050, v1019);
                        }
                        else
                        {
                          v732 = (*(uint64_t (**)(void))(*v1051 + 16))();
LABEL_1342:
                          v1020 = (_BYTE *)v732;
                        }
                        RoughnessMap = cv3d::cv::gess::alg::internal::GenerateRoughnessMap(v730, v731, (uint64_t)v729, (uint64_t)&__src, v581, v870, (uint64_t *)(a5 + 480), (uint64_t)v1019, v879 != 0);
                        v734 = v1020;
                        if (v1020 == v1019)
                        {
                          v734 = v1019;
                          v735 = 4;
LABEL_1349:
                          (*(void (**)(void))(*v734 + 8 * v735))();
                          if ((RoughnessMap & 1) != 0)
                            goto LABEL_1352;
                        }
                        else
                        {
                          if (v1020)
                          {
                            v735 = 5;
                            goto LABEL_1349;
                          }
                          if (RoughnessMap)
                          {
LABEL_1352:
                            if (cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v903)
                              && cv3d::cv::gess::util::ImageT<float>::Dilate((uint64_t)v903, *(const void **)(v586 + 24 * v583 + 16), 5))
                            {
                              v103 = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v903);
                              goto LABEL_1356;
                            }
                          }
                        }
                      }
                      v103 = 0;
LABEL_1356:
                      cv3d::cv::gess::alg::imgfvmbuffer2buffer((uint64_t)v903, v869);
                      if (*v859)
                        v736 = v103;
                      else
                        v736 = 0;
                      if (v736 == 1)
                      {
                        if (a12)
                        {
                          cv3d::cv::gess::io::ImageSaveFormat::ImageSaveFormat((cv3d::cv::gess::io::ImageSaveFormat *)&v954);
                          cv3d::cv::gess::alg::CopyConfigMapToImageSaveFormat((uint64_t)v859, (uint64_t)&v954);
                          LODWORD(v946.__r_.__value_.__l.__data_) = 5;
                          v1014 = &v946;
                          v737 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)&v946, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1014)+ 16);
                          v738 = *(_QWORD *)(a4 + 24);
                          std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&v945);
                          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v946, v945.__r_.__value_.__l.__data_, v945.__r_.__value_.__l.__size_);
                            if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v945.__r_.__value_.__l.__data_);
                          }
                          else
                          {
                            v946 = v945;
                          }
                          v746 = (std::string *)(v738 + 48 * v737);
                          cv3d::cv::gess::mesh::Texture::tex_typename(v746, (uint64_t)&v945);
                          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_", (const void **)&v946.__r_.__value_.__l.__data_, (void **)&v924.__r_.__value_.__l.__data_);
                          if ((v945.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v747 = &v945;
                          else
                            v747 = (std::string *)v945.__r_.__value_.__r.__words[0];
                          if ((v945.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v748 = HIBYTE(v945.__r_.__value_.__r.__words[2]);
                          else
                            v748 = v945.__r_.__value_.__l.__size_;
                          v749 = std::string::append(&v924, (const std::string::value_type *)v747, v748);
                          v750 = *(_OWORD *)&v749->__r_.__value_.__l.__data_;
                          v925.__r_.__value_.__r.__words[2] = v749->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v925.__r_.__value_.__l.__data_ = v750;
                          v749->__r_.__value_.__l.__size_ = 0;
                          v749->__r_.__value_.__r.__words[2] = 0;
                          v749->__r_.__value_.__r.__words[0] = 0;
                          std::to_string(&v902, v583);
                          if ((v902.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v751 = &v902;
                          else
                            v751 = (std::string *)v902.__r_.__value_.__r.__words[0];
                          if ((v902.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v752 = HIBYTE(v902.__r_.__value_.__r.__words[2]);
                          else
                            v752 = v902.__r_.__value_.__l.__size_;
                          v753 = std::string::append(&v925, (const std::string::value_type *)v751, v752);
                          v754 = *(_OWORD *)&v753->__r_.__value_.__l.__data_;
                          v943.__r_.__value_.__r.__words[2] = v753->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v943.__r_.__value_.__l.__data_ = v754;
                          v753->__r_.__value_.__l.__size_ = 0;
                          v753->__r_.__value_.__r.__words[2] = 0;
                          v753->__r_.__value_.__r.__words[0] = 0;
                          if ((SBYTE7(v957) & 0x80u) == 0)
                            v755 = (const std::string::value_type *)&v956;
                          else
                            v755 = (const std::string::value_type *)v956.i64[0];
                          if ((SBYTE7(v957) & 0x80u) == 0)
                            v756 = BYTE7(v957);
                          else
                            v756 = v956.u64[1];
                          v757 = std::string::append(&v943, v755, v756);
                          v758 = *(_OWORD *)&v757->__r_.__value_.__l.__data_;
                          v944.__r_.__value_.__r.__words[2] = v757->__r_.__value_.__r.__words[2];
                          *(_OWORD *)&v944.__r_.__value_.__l.__data_ = v758;
                          v757->__r_.__value_.__l.__size_ = 0;
                          v757->__r_.__value_.__r.__words[2] = 0;
                          v757->__r_.__value_.__r.__words[0] = 0;
                          if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v943.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v902.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v902.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v925.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v924.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v924.__r_.__value_.__l.__data_);
                          std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v925);
                          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v924, (char *)&v944);
                          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v924, (uint64_t)&v925, (std::__fs::filesystem::path *)&v943);
                          if (SHIBYTE(v924.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v924.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v925.__r_.__value_.__l.__data_);
                          v759 = v903;
                          std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1017, v851);
                          v760 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&v943, (uint64_t)v759, (uint64_t)&v954, (uint64_t)v1017, 1);
                          v761 = v1018;
                          if (v1018 == v1017)
                          {
                            v761 = v1017;
                            v762 = 4;
LABEL_1407:
                            (*(void (**)(void))(*v761 + 8 * v762))();
                          }
                          else if (v1018)
                          {
                            v762 = 5;
                            goto LABEL_1407;
                          }
                          if (a10)
                            std::vector<std::__fs::filesystem::path>::push_back[abi:ne180100](a9, (__int128 *)&v943);
                          if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                            std::string::__init_copy_ctor_external(&v901, v943.__r_.__value_.__l.__data_, v943.__r_.__value_.__l.__size_);
                          else
                            v901 = v943;
                          cv3d::cv::gess::mesh::Texture::SetFilePath(v746, &v901);
                          v103 = v760;
                          if (SHIBYTE(v901.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v901.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v943.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v944.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v945.__r_.__value_.__l.__data_);
                          if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(v946.__r_.__value_.__l.__data_);
                          cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat((void **)&v954);
                        }
                        else
                        {
                          LODWORD(v954) = 5;
                          v1015 = &v954;
                          v739 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)&v954, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1015)+ 16);
                          v740 = *(_QWORD *)(a4 + 24);
                          v900[0] = (uint64_t)v903;
                          v900[1] = v904;
                          if (v904)
                          {
                            v741 = (unint64_t *)(v904 + 8);
                            do
                              v742 = __ldxr(v741);
                            while (__stxr(v742 + 1, v741));
                          }
                          v743 = v740 + 48 * v739;
                          std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v743 + 8), v900);
                          v744 = *(_QWORD *)(v743 + 8);
                          v745 = v744 && *(_QWORD *)(v744 + 16);
                          *(_BYTE *)(v740 + 48 * v739 + 4) = v745;
                          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)v900);
                          v103 = 1;
                        }
                      }
                      v763 = (std::__shared_weak_count *)v904;
                      if (v904)
                      {
                        v764 = (unint64_t *)(v904 + 8);
                        do
                          v765 = __ldaxr(v764);
                        while (__stlxr(v765 - 1, v764));
                        if (!v765)
                        {
                          ((void (*)(std::__shared_weak_count *))v763->__on_zero_shared)(v763);
                          std::__shared_weak_count::__release_weak(v763);
                        }
                      }
LABEL_1429:
                      if (v672)
                        cv3d::cv::gess::alg::imgfvmbuffer2buffer(*(uint64_t *)v907, *(_DWORD *)(*(_QWORD *)v907 + 8) * *(_DWORD *)(*(_QWORD *)v907 + 4));
                      if (*v859)
                        cv3d::cv::gess::alg::imgfvmbuffer2buffer(*(uint64_t *)v905, 3 * *(_DWORD *)(*(_QWORD *)v905 + 4) * *(_DWORD *)(*(_QWORD *)v905 + 8));
                      if (v963 != v962)
                      {
                        v766 = v962 + 48 * v583;
                        v768 = *(unsigned __int8 *)(v766 + 4);
                        v767 = (BOOL *)(v766 + 4);
                        if (v768)
                        {
                          v899[1] = 0;
                          v899[0] = 0;
                          v769 = v962 + 48 * v583;
                          std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v769 + 8), v899);
                          v770 = *(_QWORD *)(v769 + 8);
                          v771 = v770 && *(_QWORD *)(v770 + 16);
                          *v767 = v771;
                          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)v899);
                        }
                      }
                      v772 = 1;
                    }
                    v773 = v906;
                    if (v906)
                    {
                      v774 = (unint64_t *)&v906->__shared_owners_;
                      do
                        v775 = __ldaxr(v774);
                      while (__stlxr(v775 - 1, v774));
                      if (!v775)
                      {
                        ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
                        std::__shared_weak_count::__release_weak(v773);
                      }
                    }
                    v776 = v908;
                    if (v908)
                    {
                      v777 = (unint64_t *)&v908->__shared_owners_;
                      do
                        v778 = __ldaxr(v777);
                      while (__stlxr(v778 - 1, v777));
                      if (!v778)
                      {
                        ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
                        std::__shared_weak_count::__release_weak(v776);
                      }
                    }
                    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
                    if ((v772 & 1) == 0)
                    {
LABEL_1462:
                      v782 = 0;
                      goto LABEL_1500;
                    }
                  }
                  v779 = (cv3d::cv::gess::util::os *)cv3d::cv::gess::util::os::GlobalMemoryLogs(v668);
                  v780 = *(unsigned __int8 *)(a5 + 304);
                  if (*(_BYTE *)(a5 + 304))
                    v781 = v103;
                  else
                    v781 = 0;
                  if (v781 == 1)
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v898, (char *)&unk_23C62207F);
                    cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)__p, &v898, v868, v868);
                    if (SHIBYTE(v898.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v898.__r_.__value_.__l.__data_);
                    if (v1053 && (*(unsigned int (**)(_QWORD *))(*v1053 + 48))(v1053))
                      goto LABEL_1461;
                    *(_OWORD *)&v946.__r_.__value_.__l.__data_ = 0uLL;
                    v783 = operator new[]();
                    v784 = operator new(0x30uLL);
                    v784[1] = 0;
                    v784[2] = 0;
                    *v784 = &off_250D49908;
                    *((_DWORD *)v784 + 6) = 0;
                    *((_DWORD *)v784 + 7) = v871;
                    *((_DWORD *)v784 + 8) = v871;
                    *((_DWORD *)v784 + 9) = 1;
                    v784[5] = v783;
                    v785 = (std::__shared_weak_count *)v946.__r_.__value_.__l.__size_;
                    v946.__r_.__value_.__r.__words[0] = (std::string::size_type)(v784 + 3);
                    v946.__r_.__value_.__l.__size_ = (std::string::size_type)v784;
                    if (v785)
                    {
                      v786 = (unint64_t *)&v785->__shared_owners_;
                      do
                        v787 = __ldaxr(v786);
                      while (__stlxr(v787 - 1, v786));
                      if (!v787)
                      {
                        ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
                        std::__shared_weak_count::__release_weak(v785);
                      }
                    }
                    v788 = v946.__r_.__value_.__r.__words[0];
                    *(_DWORD *)v946.__r_.__value_.__l.__data_ = 1;
                    if (v871)
                    {
                      v789 = *(unsigned __int8 **)(v586 + 24 * v583 + 16);
                      v790 = *(float **)(v788 + 16);
                      v791 = v876;
                      do
                      {
                        if (*v789++)
                          v793 = 1.0;
                        else
                          v793 = 0.0;
                        *v790++ = v793;
                        --v791;
                      }
                      while (v791);
                    }
                    cv3d::cv::gess::util::ImageT<float>::Flip(v788);
                    if (*(_BYTE *)(a5 + 304))
                    {
                      LODWORD(v954) = 8;
                      v1016 = &v954;
                      v794 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v863 + 48 * v866 + 24), (int *)&v954, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1016)+ 16);
                      v795 = *(_QWORD *)(a4 + 24);
                      v897 = *(_OWORD *)&v946.__r_.__value_.__l.__data_;
                      if (v946.__r_.__value_.__l.__size_)
                      {
                        v796 = (unint64_t *)(v946.__r_.__value_.__l.__size_ + 8);
                        do
                          v797 = __ldxr(v796);
                        while (__stxr(v797 + 1, v796));
                      }
                      v798 = v795 + 48 * v794;
                      std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v798 + 8), (uint64_t *)&v897);
                      v799 = *(_QWORD *)(v798 + 8);
                      v800 = v799 && *(_QWORD *)(v799 + 16);
                      *(_BYTE *)(v795 + 48 * v794 + 4) = v800;
                      v801 = (std::__shared_weak_count *)*((_QWORD *)&v897 + 1);
                      if (*((_QWORD *)&v897 + 1))
                      {
                        v802 = (unint64_t *)(*((_QWORD *)&v897 + 1) + 8);
                        do
                          v803 = __ldaxr(v802);
                        while (__stlxr(v803 - 1, v802));
                        if (!v803)
                        {
                          ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
                          std::__shared_weak_count::__release_weak(v801);
                        }
                      }
                    }
                    v804 = (std::__shared_weak_count *)v946.__r_.__value_.__l.__size_;
                    if (v946.__r_.__value_.__l.__size_)
                    {
                      v805 = (unint64_t *)(v946.__r_.__value_.__l.__size_ + 8);
                      do
                        v806 = __ldaxr(v805);
                      while (__stlxr(v806 - 1, v805));
                      if (!v806)
                      {
                        ((void (*)(std::__shared_weak_count *))v804->__on_zero_shared)(v804);
                        std::__shared_weak_count::__release_weak(v804);
                      }
                    }
                    cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
                    v780 = *(unsigned __int8 *)(a5 + 304);
                  }
                  if (v780)
                    cv3d::cv::gess::util::os::GlobalMemoryLogs(v779);
                  if (v1055)
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
                    v807 = (double)(v583 + 1) * 29.0 / (double)v894 + 70.0;
                    *(float *)&v954 = v807;
                    if (!v1055)
                      std::__throw_bad_function_call[abi:ne180100]();
                    (*(void (**)(_BYTE *, __int128 *, void **))(*(_QWORD *)v1055 + 48))(v1055, &v954, __p);
                    if (v974 < 0)
                      operator delete(__p[0]);
                  }
                  v782 = 1;
LABEL_1500:
                  v808 = v920;
                  if (v920)
                  {
                    v809 = (unint64_t *)&v920->__shared_owners_;
                    do
                      v810 = __ldaxr(v809);
                    while (__stlxr(v810 - 1, v809));
                    if (!v810)
                    {
                      ((void (*)(std::__shared_weak_count *))v808->__on_zero_shared)(v808);
                      std::__shared_weak_count::__release_weak(v808);
                    }
                  }
                  if ((v782 & 1) == 0)
                    goto LABEL_1646;
                  v861 = ++v583 < v894;
                  if (v583 == v894)
                    goto LABEL_1646;
                  continue;
                }
              }
              else
              {
                v609 = 0;
              }
              break;
            }
            v103 = v609;
            if (a12)
              goto LABEL_1165;
            goto LABEL_1168;
          }
          v499 = v969[0];
          LOWORD(v946.__r_.__value_.__l.__data_) = v497;
          *(_QWORD *)v1045 = std::map<unsigned short,std::string>::at(v893, (unsigned __int16 *)&v946);
          v500 = *((unsigned __int16 *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a4 + 48), *(void ***)v1045, (uint64_t)&std::piecewise_construct, (__int128 **)v1045)+ 28);
          v501 = *(_QWORD *)a4;
          *(_OWORD *)&v902.__r_.__value_.__l.__data_ = 0uLL;
          v502 = operator new[]();
          DispMapWithFaceNormals = (std::string::size_type)operator new(0x30uLL);
          *(_QWORD *)(DispMapWithFaceNormals + 8) = 0;
          *(_QWORD *)(DispMapWithFaceNormals + 16) = 0;
          *(_QWORD *)DispMapWithFaceNormals = &off_250D49908;
          *(_DWORD *)(DispMapWithFaceNormals + 24) = 0;
          *(_DWORD *)(DispMapWithFaceNormals + 28) = v871;
          *(_DWORD *)(DispMapWithFaceNormals + 32) = v871;
          *(_DWORD *)(DispMapWithFaceNormals + 36) = 1;
          *(_QWORD *)(DispMapWithFaceNormals + 40) = v502;
          v504 = (std::__shared_weak_count *)v902.__r_.__value_.__l.__size_;
          v902.__r_.__value_.__r.__words[0] = DispMapWithFaceNormals + 24;
          v902.__r_.__value_.__l.__size_ = DispMapWithFaceNormals;
          if (v504)
          {
            v505 = (unint64_t *)&v504->__shared_owners_;
            do
              v506 = __ldaxr(v505);
            while (__stlxr(v506 - 1, v505));
            if (!v506)
            {
              ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
              std::__shared_weak_count::__release_weak(v504);
            }
          }
          v507 = v902.__r_.__value_.__r.__words[0];
          *(_DWORD *)v902.__r_.__value_.__l.__data_ = 1;
          if (v871)
            bzero(*(void **)(v507 + 16), v884);
          if (v494)
          {
            if ((v429 & 1) == 0)
              goto LABEL_959;
            DispMapWithFaceNormals = cv3d::cv::gess::alg::internal::TransferMapDisp(v507, v499 + 24 * v497, v965[0] + 24 * v497, v92, v870);
            if (!(_DWORD)DispMapWithFaceNormals)
              goto LABEL_959;
            DispMapWithFaceNormals = cv3d::cv::gess::util::ImageT<float>::Dilate((uint64_t)v902.__r_.__value_.__l.__data_, *(const void **)(v499 + 24 * v497 + 16), 5);
            if ((DispMapWithFaceNormals & 1) == 0)
              goto LABEL_959;
          }
          else if ((v429 & 1) == 0
                 || (DispMapWithFaceNormals = cv3d::cv::gess::alg::internal::GenerateDispMapWithFaceNormals((uint64_t)v889, v969[0] + 24 * v497, v970, v890, v968[0] + 24 * v497, v967[0] + 24 * v497, v507, v139, v503, v92, v870), !(_DWORD)DispMapWithFaceNormals))
          {
LABEL_959:
            v429 = 0;
            goto LABEL_960;
          }
          DispMapWithFaceNormals = cv3d::cv::gess::util::ImageT<float>::Flip((uint64_t)v902.__r_.__value_.__l.__data_);
          if (*(_BYTE *)(a5 + 224))
            v508 = DispMapWithFaceNormals;
          else
            v508 = 0;
          if (v508 == 1)
          {
            if (!a12)
            {
              *(_DWORD *)v1045 = 3;
              v1008 = v1045;
              v514 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v501 + 48 * v500 + 24), (int *)v1045, (uint64_t)&std::piecewise_construct, &v1008)+ 16);
              v515 = *(_QWORD *)(a4 + 24);
              v922 = *(_OWORD *)&v902.__r_.__value_.__l.__data_;
              if (v902.__r_.__value_.__l.__size_)
              {
                v516 = (unint64_t *)(v902.__r_.__value_.__l.__size_ + 8);
                do
                  v517 = __ldxr(v516);
                while (__stxr(v517 + 1, v516));
              }
              v518 = v515 + 48 * v514;
              DispMapWithFaceNormals = (std::string::size_type)std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(v518 + 8), (uint64_t *)&v922);
              v519 = *(_QWORD *)(v518 + 8);
              v520 = v519 && *(_QWORD *)(v519 + 16);
              *(_BYTE *)(v515 + 48 * v514 + 4) = v520;
              v521 = (std::__shared_weak_count *)*((_QWORD *)&v922 + 1);
              if (*((_QWORD *)&v922 + 1))
              {
                v522 = (unint64_t *)(*((_QWORD *)&v922 + 1) + 8);
                do
                  v523 = __ldaxr(v522);
                while (__stlxr(v523 - 1, v522));
                if (!v523)
                {
                  ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
                  std::__shared_weak_count::__release_weak(v521);
                }
              }
              v429 = 1;
              goto LABEL_960;
            }
            std::string::basic_string[abi:ne180100]<0>(v1045, "uchar");
            strcpy(&v1045[24], "d");
            std::string::basic_string[abi:ne180100]<0>(&v1045[32], ".jpg");
            v509 = *(float *)(a5 + 256) * 100.0;
            if (v509 < 1.0)
              v509 = 1.0;
            if (v509 > 100.0)
              v509 = 100.0;
            *(_WORD *)&v1045[24] = (int)v509;
            std::operator+<char>();
            if ((v1045[55] & 0x80000000) != 0)
              operator delete(*(void **)&v1045[32]);
            *(std::string *)&v1045[32] = v1006;
            LODWORD(v1006.__r_.__value_.__l.__data_) = 3;
            v1007 = &v1006;
            v510 = *((unsigned __int16 *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t **)(v501 + 48 * v500 + 24), (int *)&v1006, (uint64_t)&std::piecewise_construct, (_DWORD **)&v1007)+ 16);
            v511 = *(_QWORD *)(a4 + 24);
            std::__fs::filesystem::path::stem[abi:ne180100](a13, (uint64_t)&v946);
            if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v1006, v946.__r_.__value_.__l.__data_, v946.__r_.__value_.__l.__size_);
              if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v946.__r_.__value_.__l.__data_);
            }
            else
            {
              v1006 = v946;
            }
            v524 = (std::string *)(v511 + 48 * v510);
            cv3d::cv::gess::mesh::Texture::tex_typename(v524, (uint64_t)&v946);
            if ((v1006.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v525 = HIBYTE(v1006.__r_.__value_.__r.__words[2]);
            else
              v525 = v1006.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&v925, v525 + 1);
            if ((v925.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v526 = &v925;
            else
              v526 = (std::string *)v925.__r_.__value_.__r.__words[0];
            if (v525)
            {
              if ((v1006.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v527 = &v1006;
              else
                v527 = (std::string *)v1006.__r_.__value_.__r.__words[0];
              memmove(v526, v527, v525);
            }
            *(_WORD *)((char *)&v526->__r_.__value_.__l.__data_ + v525) = 95;
            if ((v946.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v528 = &v946;
            else
              v528 = (std::string *)v946.__r_.__value_.__r.__words[0];
            if ((v946.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v529 = HIBYTE(v946.__r_.__value_.__r.__words[2]);
            else
              v529 = v946.__r_.__value_.__l.__size_;
            v530 = std::string::append(&v925, (const std::string::value_type *)v528, v529);
            v531 = *(_OWORD *)&v530->__r_.__value_.__l.__data_;
            v943.__r_.__value_.__r.__words[2] = v530->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v943.__r_.__value_.__l.__data_ = v531;
            v530->__r_.__value_.__l.__size_ = 0;
            v530->__r_.__value_.__r.__words[2] = 0;
            v530->__r_.__value_.__r.__words[0] = 0;
            v95 = v880;
            std::to_string(&v924, v497);
            if ((v924.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v532 = &v924;
            else
              v532 = (std::string *)v924.__r_.__value_.__r.__words[0];
            if ((v924.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v533 = HIBYTE(v924.__r_.__value_.__r.__words[2]);
            else
              v533 = v924.__r_.__value_.__l.__size_;
            v534 = std::string::append(&v943, (const std::string::value_type *)v532, v533);
            v535 = *(_OWORD *)&v534->__r_.__value_.__l.__data_;
            v944.__r_.__value_.__r.__words[2] = v534->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v944.__r_.__value_.__l.__data_ = v535;
            v534->__r_.__value_.__l.__size_ = 0;
            v534->__r_.__value_.__r.__words[2] = 0;
            v534->__r_.__value_.__r.__words[0] = 0;
            if (v1045[55] >= 0)
              v536 = &v1045[32];
            else
              v536 = *(const std::string::value_type **)&v1045[32];
            if (v1045[55] >= 0)
              v537 = v1045[55];
            else
              v537 = *(_QWORD *)&v1045[40];
            v538 = std::string::append(&v944, v536, v537);
            v539 = *(_OWORD *)&v538->__r_.__value_.__l.__data_;
            v945.__r_.__value_.__r.__words[2] = v538->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v945.__r_.__value_.__l.__data_ = v539;
            v538->__r_.__value_.__l.__size_ = 0;
            v538->__r_.__value_.__r.__words[2] = 0;
            v538->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v944.__r_.__value_.__l.__data_);
            if (SHIBYTE(v924.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v924.__r_.__value_.__l.__data_);
            if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v943.__r_.__value_.__l.__data_);
            if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v925.__r_.__value_.__l.__data_);
            std::__fs::filesystem::path::parent_path[abi:ne180100](a13, (uint64_t)&v943);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v925, (char *)&v945);
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v925, (uint64_t)&v943, (std::__fs::filesystem::path *)&v944);
            if (SHIBYTE(v925.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v925.__r_.__value_.__l.__data_);
            if (SHIBYTE(v943.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v943.__r_.__value_.__l.__data_);
            std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v1025, a11 + 96);
            v429 = cv3d::cv::gess::alg::internal::SaveImageToTextureFilePath((uint64_t)&v944, (uint64_t)v902.__r_.__value_.__l.__data_, (uint64_t)v1045, (uint64_t)v1025, 1);
            v540 = v1026;
            if (v1026 == v1025)
            {
              v540 = v1025;
              v541 = 4;
LABEL_1028:
              (*(void (**)(void))(*v540 + 8 * v541))();
            }
            else if (v1026)
            {
              v541 = 5;
              goto LABEL_1028;
            }
            if (a10)
              std::vector<std::__fs::filesystem::path>::push_back[abi:ne180100](a9, (__int128 *)&v944);
            if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v923, v944.__r_.__value_.__l.__data_, v944.__r_.__value_.__l.__size_);
            else
              v923 = v944;
            DispMapWithFaceNormals = cv3d::cv::gess::mesh::Texture::SetFilePath(v524, &v923);
            if (SHIBYTE(v923.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v923.__r_.__value_.__l.__data_);
            if (SHIBYTE(v944.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v944.__r_.__value_.__l.__data_);
            if (SHIBYTE(v945.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v945.__r_.__value_.__l.__data_);
            if (SHIBYTE(v946.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v946.__r_.__value_.__l.__data_);
            if (SHIBYTE(v1006.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v1006.__r_.__value_.__l.__data_);
            if ((v1045[55] & 0x80000000) != 0)
              operator delete(*(void **)&v1045[32]);
            if ((v1045[23] & 0x80000000) != 0)
              operator delete(*(void **)v1045);
            goto LABEL_960;
          }
          v429 = DispMapWithFaceNormals;
LABEL_960:
          if (v902.__r_.__value_.__l.__size_)
          {
            v512 = (unint64_t *)(v902.__r_.__value_.__l.__size_ + 8);
            do
              v513 = __ldaxr(v512);
            while (__stlxr(v513 - 1, v512));
            if (!v513)
            {
              (*(void (**)(std::string::size_type))(*(_QWORD *)v902.__r_.__value_.__l.__size_ + 16))(v902.__r_.__value_.__l.__size_);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v902.__r_.__value_.__l.__size_);
            }
          }
          ++v497;
        }
        while (v497 != v894);
      }
      v161 = v429;
      if ((v429 & 1) != 0)
        cv3d::cv::gess::util::os::GlobalMemoryLogs((cv3d::cv::gess::util::os *)DispMapWithFaceNormals);
      v160 = v160 + (double)(std::chrono::system_clock::now().__d_.__rep_ - v874) / 1000000.0;
      cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
    }
    else
    {
      v161 = v429;
    }
    v159 = 0;
    goto LABEL_1055;
  }
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)__p);
LABEL_249:
  LOBYTE(v103) = 0;
LABEL_1670:
  __p[0] = v967;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::mesh::FaceHandle>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v968;
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::Vector3T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v969;
  std::vector<cv3d::cv::gess::util::ImageT<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_176:
  if (v981)
  {
    v982 = v981;
    operator delete(v981);
  }
  if (__src)
  {
    v985 = __src;
    operator delete(__src);
  }
  v104 = v1051;
  if (v1051 == v1050)
  {
    v105 = 4;
    v104 = v1050;
  }
  else
  {
    if (!v1051)
      goto LABEL_185;
    v105 = 5;
  }
  (*(void (**)(void))(*v104 + 8 * v105))();
LABEL_185:
  v106 = v1053;
  if (v1053 == v1052)
  {
    v107 = 4;
    v106 = v1052;
  }
  else
  {
    if (!v1053)
      goto LABEL_190;
    v107 = 5;
  }
  (*(void (**)(void))(*v106 + 8 * v107))();
LABEL_190:
  v108 = v1055;
  if (v1055 == v1054)
  {
    v109 = 4;
    v108 = v1054;
    goto LABEL_194;
  }
  if (v1055)
  {
    v109 = 5;
LABEL_194:
    (*(void (**)(void))(*v108 + 8 * v109))();
  }
  return v103 & 1;
}

void sub_23C5F2C6C()
{
  __cxa_end_catch();
  JUMPOUT(0x23C5F2C94);
}

void sub_23C5F2C7C()
{
  if (SLOBYTE(STACK[0x607]) < 0)
    operator delete((void *)STACK[0x5F0]);
  __cxa_end_catch();
  JUMPOUT(0x23C5F2C94);
}

uint64_t cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::AllocateMemory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x2426211A0](v2, 0x1000C80451B5BE8);
  v3 = (*(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 4) * *(_DWORD *)(a1 + 12));
  v4 = operator new[]();
  if ((_DWORD)v3)
  {
    v5 = (_QWORD *)v4;
    do
    {
      *v5 = -1082130432;
      v5[1] = 0;
      v5 += 2;
    }
    while (v5 != (_QWORD *)(v4 + 16 * v3));
  }
  *(_QWORD *)(a1 + 16) = v4;
  return 1;
}

uint64_t std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__push_back_slow_path<cv3d::cv::gess::util::os::MemoryLogItem const&>(a1, a2);
  }
  else
  {
    std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__construct_one_at_end[abi:ne180100]<cv3d::cv::gess::util::os::MemoryLogItem const&>((uint64_t)a1, a2);
    result = v3 + 184;
  }
  a1[1] = result;
  return result;
}

uint64_t *std::vector<cv3d::cv::gess::mesh::Texture>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<cv3d::cv::gess::mesh::Texture>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      result = (uint64_t *)std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v3);
    }
    v2[1] = v7;
  }
  return result;
}

cv3d::cv::gess::io::ImageSaveFormat *cv3d::cv::gess::io::ImageSaveFormat::ImageSaveFormat(cv3d::cv::gess::io::ImageSaveFormat *this)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(this, "uchar");
  *((_WORD *)v2 + 12) = 100;
  std::string::basic_string[abi:ne180100]<0>(v2 + 4, ".jpg");
  return this;
}

void sub_23C5F2E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double cv3d::cv::gess::alg::CopyConfigMapToImageSaveFormat(uint64_t a1, uint64_t a2)
{
  double v3;
  void **v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v3 = *(float *)(a1 + 32) * 100.0;
  if (v3 < 1.0)
    v3 = 1.0;
  if (v3 > 100.0)
    v3 = 100.0;
  *(_WORD *)(a2 + 24) = (int)v3;
  std::operator+<char>();
  v4 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*v4);
  result = *(double *)&v6;
  *(_OWORD *)v4 = v6;
  *(_QWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (void **)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t std::vector<std::__fs::filesystem::path>::push_back[abi:ne180100](uint64_t a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(a1, a2);
  }
  else
  {
    std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(a1, a2);
    result = v3 + 24;
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

BOOL cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(float32x4_t *a1, _QWORD *a2, uint64_t *a3, std::__fs::filesystem::path *a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, const cv3d::cv::gess::alg::BakeCallbackBundle *a8)
{
  char *v16;
  uint64_t *v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t **v38;
  cv3d::cv::gess::io::SaveMtlOption *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::__fs::filesystem::path *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  int v47;
  char *v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  char v52;
  char v53;
  int v54;
  char v55;
  cv3d::cv::gess::util::os *v56;
  _BOOL8 v57;
  std::chrono::system_clock::time_point v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  std::chrono::system_clock::time_point v83;
  std::string v84;
  std::string v85;
  std::string v86;
  int v87;
  std::__fs::filesystem::path __replacement;
  std::__fs::filesystem::path v89;
  std::string v90;
  std::string pn;
  _QWORD *v92;
  _QWORD *v93[4];
  std::string v94;
  uint64_t v95;
  int v96;
  void *v97[2];
  char v98;
  std::string v99;
  std::string v100;
  _BYTE v101[4];
  int v102;
  __int16 v103;
  _QWORD *v104[3];
  uint64_t *v105[4];
  std::string __p;
  uint64_t v107;
  std::string *v108;
  unint64_t v109;
  char *v110;
  std::__shared_weak_count *v111;
  void **v112[3];
  void ***v113;
  _BYTE v114[24];
  _BYTE *v115;
  _BYTE v116[24];
  _BYTE *v117;
  _BYTE v118[24];
  _BYTE *v119;
  _BYTE v120[24];
  _BYTE *v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  _QWORD *v125;
  _BYTE v126[24];
  _BYTE *v127;
  _BYTE v128[24];
  _BYTE *v129;
  _BYTE v130[24];
  _BYTE *v131;
  _BYTE v132[24];
  _BYTE *v133;
  _QWORD v134[3];
  _QWORD *v135;
  _BYTE v136[24];
  _BYTE *v137;
  _BYTE v138[24];
  _BYTE *v139;
  _BYTE v140[24];
  _BYTE *v141;
  _BYTE v142[24];
  _BYTE *v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v142, (uint64_t)a8);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v140, (uint64_t)a8 + 32);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v138, (uint64_t)a8 + 64);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v136, (uint64_t)a8 + 128);
  v16 = (char *)operator new(0x60uLL);
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &off_250D4ADF0;
  *(_OWORD *)(v16 + 24) = 0u;
  v17 = (uint64_t *)(v16 + 24);
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *((_QWORD *)v16 + 11) = 0;
  *((_QWORD *)v16 + 9) = v16 + 80;
  v110 = v16 + 24;
  v111 = (std::__shared_weak_count *)v16;
  v135 = 0;
  if (v143)
  {
    v112[0] = (void **)&off_250D4B3B8;
    v112[1] = (void **)v142;
    v113 = v112;
    std::__function::__value_func<void ()(float,std::string const&)>::swap[abi:ne180100](v112, v134);
    v18 = v113;
    if (v113 == v112)
    {
      v19 = 4;
      v18 = v112;
    }
    else
    {
      if (!v113)
        goto LABEL_7;
      v19 = 5;
    }
    ((void (*)(void))(*v18)[v19])();
  }
LABEL_7:
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v124, a8);
  std::function<void ()(float,std::string const&)>::operator=(v124, (uint64_t)v134);
  v108 = 0;
  v107 = 0;
  v109 = 0;
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v114, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v124);
  v21 = cv3d::cv::gess::alg::InternalBakeHelper(a1, a2, a3, (uint64_t)v17, a5, a6, a7, v20, (uint64_t)&v107, 1, (uint64_t)v114, 1, a4);
  v22 = v123;
  if (v123 == v122)
  {
    v23 = 4;
    v22 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_12;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_12:
  v24 = v121;
  if (v121 == v120)
  {
    v25 = 4;
    v24 = v120;
  }
  else
  {
    if (!v121)
      goto LABEL_17;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_17:
  v26 = v119;
  if (v119 == v118)
  {
    v27 = 4;
    v26 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_22;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_22:
  v28 = v117;
  if (v117 == v116)
  {
    v29 = 4;
    v28 = v116;
  }
  else
  {
    if (!v117)
      goto LABEL_27;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_27:
  v30 = v115;
  if (v115 == v114)
  {
    v31 = 4;
    v30 = v114;
    goto LABEL_31;
  }
  if (v115)
  {
    v31 = 5;
LABEL_31:
    (*(void (**)(void))(*v30 + 8 * v31))();
  }
  if (v141 && ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v141 + 48))(v141) & 1) != 0)
  {
LABEL_149:
    v57 = 0;
    goto LABEL_150;
  }
  v83.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_23C62207F);
  cv3d::cv::gess::util::os::MemoryLogTable::MemoryLogTable((uint64_t)v112, &__p, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v102 = 1;
  v103 = 256;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v104);
  v101[0] = 1;
  LODWORD(v100.__r_.__value_.__l.__data_) = 1;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v32 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v32 + 5);
  LODWORD(v100.__r_.__value_.__l.__data_) = 2;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v33 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v33 + 5);
  LODWORD(v100.__r_.__value_.__l.__data_) = 3;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v34 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v34 + 5);
  LODWORD(v100.__r_.__value_.__l.__data_) = 4;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v35 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v35 + 5);
  LODWORD(v100.__r_.__value_.__l.__data_) = 5;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v36 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v36 + 5);
  LODWORD(v100.__r_.__value_.__l.__data_) = 7;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v37 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v37 + 5);
  LODWORD(v100.__r_.__value_.__l.__data_) = 13;
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  v38 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v105, (int *)&v100, (uint64_t)&std::piecewise_construct, &pn);
  std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(v38 + 5);
  if (v21)
  {
    cv3d::cv::gess::alg::CopyAllConfigMapToImageSaveFormat((cv3d::cv::gess::alg *)(a5 + 56), (const cv3d::cv::gess::alg::ConfigOutput *)v104, v39);
    if (SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
    else
      pn = a4->__pn_;
    v21 = cv3d::cv::gess::io::SaveObjFile((char *)&pn, (uint64_t)a3, v17, (uint64_t)v101);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  v40 = v108;
  if ((unint64_t)v108 >= v109)
  {
    v42 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v107, (__int128 *)a4);
  }
  else
  {
    if (SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v108, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v41 = *(_OWORD *)&a4->__pn_.__r_.__value_.__l.__data_;
      v108->__r_.__value_.__r.__words[2] = a4->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v41;
    }
    v42 = v40 + 1;
  }
  v108 = v42;
  if (SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v100, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
  else
    v100 = a4->__pn_;
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&pn, ".mtl");
  v43 = std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v100, (const std::__fs::filesystem::path *)&pn);
  v44 = v108;
  if ((unint64_t)v108 >= v109)
  {
    v46 = (std::string *)std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((uint64_t)&v107, (__int128 *)v43);
  }
  else
  {
    if (SHIBYTE(v43->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v108, v43->__pn_.__r_.__value_.__l.__data_, v43->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v45 = *(_OWORD *)&v43->__pn_.__r_.__value_.__l.__data_;
      v108->__r_.__value_.__r.__words[2] = v43->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
    }
    v46 = v44 + 1;
  }
  v108 = v46;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a5 + 424))
    v47 = v21;
  else
    v47 = 0;
  if (v47 != 1)
  {
    if (!v143)
      goto LABEL_137;
LABEL_134:
    std::string::basic_string[abi:ne180100]<0>(&pn, (char *)&unk_23C62207F);
    LODWORD(v99.__r_.__value_.__l.__data_) = 1120403456;
    if (!v143)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, std::string *, std::string *))(*(_QWORD *)v143 + 48))(v143, &v99, &pn);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(pn.__r_.__value_.__l.__data_);
      if (v21)
        goto LABEL_138;
    }
    else
    {
LABEL_137:
      if (v21)
      {
LABEL_138:
        if (v137)
          (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v137 + 48))(v137, &v107);
        v21 = 1;
      }
    }
    v55 = 1;
    goto LABEL_144;
  }
  if (SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v99, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
  else
    v99 = a4->__pn_;
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&pn, ".usda");
  std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v99, (const std::__fs::filesystem::path *)&pn);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  cv3d::cv::gess::io::SaveUsdOption::SaveUsdOption((cv3d::cv::gess::io::SaveUsdOption *)&pn, (const cv3d::cv::gess::io::SaveObjOption *)v101);
  std::string::operator=(&v94, (const std::string *)(a5 + 512));
  v95 = *(_QWORD *)(a5 + 536);
  v96 = *(_DWORD *)(a5 + 544);
  if (v98 < 0)
  {
    v97[1] = (void *)13;
    v48 = (char *)v97[0];
  }
  else
  {
    v48 = (char *)v97;
    v98 = 13;
  }
  strcpy(v48, "ObjectCapture");
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v90, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v90 = v99;
  cv3d::cv::gess::io::SaveUsdaFile((uint64_t)&v90, (uint64_t)a3, v17, (uint64_t)&pn);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v49 = *(unsigned __int8 *)(a5 + 455);
  v50 = (char)v49;
  if ((v49 & 0x80u) != 0)
    v49 = *(_QWORD *)(a5 + 440);
  if (v49 == 4)
  {
    v51 = v50 >= 0 ? (_DWORD *)(a5 + 432) : *(_DWORD **)(a5 + 432);
    if (*v51 == 1633973109)
      goto LABEL_113;
  }
  if ((SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v90 = a4->__pn_;
LABEL_86:
    v89 = *a4;
    goto LABEL_87;
  }
  std::string::__init_copy_ctor_external(&v90, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
  if ((SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_86;
  std::string::__init_copy_ctor_external(&v89.__pn_, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
LABEL_87:
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".usdc");
  std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&v90, &__replacement);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".usdz");
  std::__fs::filesystem::path::replace_extension(&v89, &__replacement);
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  v87 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__replacement, (char *)&unk_23C62207F);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v86, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
  else
    v86 = v99;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
  else
    v85 = v90;
  if (SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v84, v89.__pn_.__r_.__value_.__l.__data_, v89.__pn_.__r_.__value_.__l.__size_);
  else
    v84 = v89.__pn_;
  v52 = cv3d::cv::gess::io::UsdzConvert((uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, &v87, &__replacement.__pn_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v86.__r_.__value_.__l.__data_);
    if ((v52 & 1) != 0)
      goto LABEL_106;
  }
  else if ((v52 & 1) != 0)
  {
LABEL_106:
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v21 = 1;
LABEL_113:
    v53 = 1;
    goto LABEL_128;
  }
  if (a7)
    *(_DWORD *)(a6 + 384) = v87;
  if (v139)
  {
    v54 = v87;
    std::string::basic_string[abi:ne180100]<0>(&v86, (char *)&unk_23C62207F);
    LODWORD(v85.__r_.__value_.__l.__data_) = v54;
    if (!v139)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(_BYTE *, std::string *, std::string *))(*(_QWORD *)v139 + 48))(v139, &v85, &v86);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v21 = 0;
  v53 = 0;
LABEL_128:
  if (v98 < 0)
    operator delete(v97[0]);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v93, v93[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)&pn.__r_.__value_.__r.__words[2], v92);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((v53 & 1) != 0)
      goto LABEL_134;
  }
  else if ((v53 & 1) != 0)
  {
    goto LABEL_134;
  }
  v55 = 0;
LABEL_144:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v105, v105[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v104, v104[1]);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)v112);
  v57 = v21 != 0;
  if ((v55 & 1) == 0)
    goto LABEL_149;
  cv3d::cv::gess::util::os::GlobalMemoryLogs(v56);
  v58.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (a7)
    *(double *)(a6 + 376) = (double)(v58.__d_.__rep_ - v83.__d_.__rep_) / 1000000.0;
LABEL_150:
  v112[0] = (void **)&v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v112);
  v59 = v133;
  if (v133 == v132)
  {
    v60 = 4;
    v59 = v132;
  }
  else
  {
    if (!v133)
      goto LABEL_155;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_155:
  v61 = v131;
  if (v131 == v130)
  {
    v62 = 4;
    v61 = v130;
  }
  else
  {
    if (!v131)
      goto LABEL_160;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_160:
  v63 = v129;
  if (v129 == v128)
  {
    v64 = 4;
    v63 = v128;
  }
  else
  {
    if (!v129)
      goto LABEL_165;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_165:
  v65 = v127;
  if (v127 == v126)
  {
    v66 = 4;
    v65 = v126;
  }
  else
  {
    if (!v127)
      goto LABEL_170;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_170:
  v67 = v125;
  if (v125 == v124)
  {
    v68 = 4;
    v67 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_175;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_175:
  v69 = v135;
  if (v135 == v134)
  {
    v70 = 4;
    v69 = v134;
    goto LABEL_179;
  }
  if (v135)
  {
    v70 = 5;
LABEL_179:
    (*(void (**)(void))(*v69 + 8 * v70))();
  }
  v71 = v111;
  if (v111)
  {
    p_shared_owners = (unint64_t *)&v111->__shared_owners_;
    do
      v73 = __ldaxr(p_shared_owners);
    while (__stlxr(v73 - 1, p_shared_owners));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v137;
  if (v137 == v136)
  {
    v75 = 4;
    v74 = v136;
  }
  else
  {
    if (!v137)
      goto LABEL_190;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_190:
  v76 = v139;
  if (v139 == v138)
  {
    v77 = 4;
    v76 = v138;
  }
  else
  {
    if (!v139)
      goto LABEL_195;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_195:
  v78 = v141;
  if (v141 == v140)
  {
    v79 = 4;
    v78 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_200;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_200:
  v80 = v143;
  if (v143 == v142)
  {
    v81 = 4;
    v80 = v142;
    goto LABEL_204;
  }
  if (v143)
  {
    v81 = 5;
LABEL_204:
    (*(void (**)(void))(*v80 + 8 * v81))();
  }
  return v57;
}

void sub_23C5F3D7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a71;
  int a72;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  if (a40 < 0)
    operator delete(__p);
  cv3d::cv::gess::io::SaveUsdOption::~SaveUsdOption(&a42);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a67);
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a72);
  cv3d::cv::gess::util::os::MemoryLogTable::~MemoryLogTable((cv3d::cv::gess::util::os::MemoryLogTable *)&STACK[0x248]);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (v73)
      *(_DWORD *)(v72 + 384) = 1;
    if (*(_QWORD *)(v74 - 168))
    {
      std::string::basic_string[abi:ne180100]<0>(&STACK[0x248], (char *)&unk_23C62207F);
      a72 = 1;
      v77 = *(_QWORD *)(v74 - 168);
      if (!v77)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, unint64_t *))(*(_QWORD *)v77 + 48))(v77, &a72, &STACK[0x248]);
      if (SLOBYTE(STACK[0x25F]) < 0)
        operator delete((void *)STACK[0x248]);
    }
    __cxa_end_catch();
    JUMPOUT(0x23C5F3AA4);
  }
  STACK[0x248] = (unint64_t)&STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&STACK[0x3B0]);
  v78 = *(_QWORD **)(v74 - 232);
  if (v78 == (_QWORD *)(v74 - 256))
  {
    v79 = 4;
    v78 = (_QWORD *)(v74 - 256);
  }
  else
  {
    if (!v78)
      goto LABEL_21;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_21:
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x238]);
  v80 = *(_QWORD **)(v74 - 200);
  if (v80 == (_QWORD *)(v74 - 224))
  {
    v81 = 4;
    v80 = (_QWORD *)(v74 - 224);
  }
  else
  {
    if (!v80)
      goto LABEL_26;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_26:
  v82 = *(_QWORD **)(v74 - 168);
  if (v82 == (_QWORD *)(v74 - 192))
  {
    v83 = 4;
    v82 = (_QWORD *)(v74 - 192);
  }
  else
  {
    if (!v82)
      goto LABEL_31;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_31:
  v84 = *(_QWORD **)(v74 - 136);
  if (v84 == (_QWORD *)(v74 - 160))
  {
    v85 = 4;
    v84 = (_QWORD *)(v74 - 160);
  }
  else
  {
    if (!v84)
      goto LABEL_36;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_36:
  v86 = *(_QWORD **)(v74 - 104);
  if (v86 == (_QWORD *)(v74 - 128))
  {
    v87 = 4;
    v86 = (_QWORD *)(v74 - 128);
  }
  else
  {
    if (!v86)
      goto LABEL_41;
    v87 = 5;
  }
  (*(void (**)(void))(*v86 + 8 * v87))();
LABEL_41:
  _Unwind_Resume(a1);
}

void sub_23C5F404C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  __cxa_end_catch();
  STACK[0x248] = (unint64_t)&STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&STACK[0x3B0]);
  v3 = *(_QWORD **)(v1 - 232);
  if (v3 == (_QWORD *)(v1 - 256))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 256);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x238]);
  v5 = *(_QWORD **)(v1 - 200);
  if (v5 == (_QWORD *)(v1 - 224))
  {
    v6 = 4;
    v5 = (_QWORD *)(v1 - 224);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = *(_QWORD **)(v1 - 168);
  if (v7 == (_QWORD *)(v1 - 192))
  {
    v8 = 4;
    v7 = (_QWORD *)(v1 - 192);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = *(_QWORD **)(v1 - 136);
  if (v9 == (_QWORD *)(v1 - 160))
  {
    v10 = 4;
    v9 = (_QWORD *)(v1 - 160);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = *(_QWORD **)(v1 - 104);
  if (v11 == (_QWORD *)(v1 - 128))
  {
    v12 = 4;
    v11 = (_QWORD *)(v1 - 128);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  _Unwind_Resume(a1);
}

void sub_23C5F4074(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x23C5F4198);
}

_QWORD *std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator=<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1 const&,void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5[0] = &off_250D4B400;
  v6 = v5;
  std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t cv3d::cv::gess::alg::CopyAllConfigMapToImageSaveFormat(cv3d::cv::gess::alg *this, const cv3d::cv::gess::alg::ConfigOutput *a2, cv3d::cv::gess::io::SaveMtlOption *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  int v24;
  std::string v25;
  __int16 v26;
  std::string v27;
  std::string v28;
  __int16 v29;
  std::string __p;
  std::string v31;
  __int16 v32;
  std::string v33;
  std::string v34;
  __int16 v35;
  std::string v36;
  std::string v37;
  __int16 v38;
  std::string v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  std::string v46;
  __int16 v47;
  std::string v48;
  std::string __str;
  __int16 v50;
  std::string v51;
  std::string v52;

  std::string::basic_string[abi:ne180100]<0>(&__str, "uchar");
  v50 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v51, ".jpg");
  v5 = *((float *)this + 10) * 100.0;
  if (v5 < 1.0)
    v5 = 1.0;
  if (v5 > 100.0)
    v5 = 100.0;
  v50 = (int)v5;
  std::operator+<char>();
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v51 = v46;
  std::string::basic_string[abi:ne180100]<0>(&v46, "uchar");
  v47 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v48, ".jpg");
  v6 = *((float *)this + 20) * 100.0;
  if (v6 < 1.0)
    v6 = 1.0;
  if (v6 > 100.0)
    v6 = 100.0;
  v47 = (int)v6;
  std::operator+<char>();
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v48 = v43;
  std::string::basic_string[abi:ne180100]<0>(&v43, "uchar");
  v44 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v45, ".jpg");
  v7 = *((float *)this + 50) * 100.0;
  if (v7 < 1.0)
    v7 = 1.0;
  if (v7 > 100.0)
    v7 = 100.0;
  v44 = (int)v7;
  std::operator+<char>();
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v45 = v40;
  std::string::basic_string[abi:ne180100]<0>(&v40, "uchar");
  v41 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v42, ".jpg");
  v8 = *((float *)this + 40) * 100.0;
  if (v8 < 1.0)
    v8 = 1.0;
  if (v8 > 100.0)
    v8 = 100.0;
  v41 = (int)v8;
  std::operator+<char>();
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v42 = v37;
  std::string::basic_string[abi:ne180100]<0>(&v37, "uchar");
  v38 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v39, ".jpg");
  v9 = *((float *)this + 60) * 100.0;
  if (v9 < 1.0)
    v9 = 1.0;
  if (v9 > 100.0)
    v9 = 100.0;
  v38 = (int)v9;
  std::operator+<char>();
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v39 = v34;
  std::string::basic_string[abi:ne180100]<0>(&v34, "uchar");
  v35 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v36, ".jpg");
  v10 = *((float *)this + 30) * 100.0;
  if (v10 < 1.0)
    v10 = 1.0;
  if (v10 > 100.0)
    v10 = 100.0;
  v35 = (int)v10;
  std::operator+<char>();
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v36 = v31;
  std::string::basic_string[abi:ne180100]<0>(&v31, "uchar");
  v32 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v33, ".jpg");
  v11 = *((float *)this + 70) * 100.0;
  if (v11 < 1.0)
    v11 = 1.0;
  if (v11 > 100.0)
    v11 = 100.0;
  v32 = (int)v11;
  std::operator+<char>();
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v33 = v28;
  std::string::basic_string[abi:ne180100]<0>(&v28, "uchar");
  v29 = 100;
  std::string::basic_string[abi:ne180100]<0>(&__p, ".jpg");
  v12 = *((float *)this + 80) * 100.0;
  if (v12 < 1.0)
    v12 = 1.0;
  if (v12 > 100.0)
    v12 = 100.0;
  v29 = (int)v12;
  std::operator+<char>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v25;
  std::string::basic_string[abi:ne180100]<0>(&v25, "uchar");
  v26 = 100;
  std::string::basic_string[abi:ne180100]<0>(&v27, ".jpg");
  v13 = *((float *)this + 90) * 100.0;
  if (v13 < 1.0)
    v13 = 1.0;
  if (v13 > 100.0)
    v13 = 100.0;
  v26 = (int)v13;
  std::operator+<char>();
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  v27 = v52;
  v24 = 1;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v14 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v14 + 5), &__str);
  *((_WORD *)v14 + 32) = v50;
  std::string::operator=((std::string *)v14 + 3, &v51);
  v24 = 2;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v15 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v15 + 5), &v46);
  *((_WORD *)v15 + 32) = v47;
  std::string::operator=((std::string *)v15 + 3, &v48);
  v24 = 3;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v16 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v16 + 5), &v43);
  *((_WORD *)v16 + 32) = v44;
  std::string::operator=((std::string *)v16 + 3, &v45);
  v24 = 4;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v17 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v17 + 5), &v40);
  *((_WORD *)v17 + 32) = v41;
  std::string::operator=((std::string *)v17 + 3, &v42);
  v24 = 5;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v18 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v18 + 5), &v37);
  *((_WORD *)v18 + 32) = v38;
  std::string::operator=((std::string *)v18 + 3, &v39);
  v24 = 7;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v19 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v19 + 5), &v34);
  *((_WORD *)v19 + 32) = v35;
  std::string::operator=((std::string *)v19 + 3, &v36);
  v24 = 8;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v20 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v20 + 5), &v31);
  *((_WORD *)v20 + 32) = v32;
  std::string::operator=((std::string *)v20 + 3, &v33);
  v24 = 11;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v21 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v21 + 5), &v28);
  *((_WORD *)v21 + 32) = v29;
  std::string::operator=((std::string *)v21 + 3, &__p);
  v24 = 13;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  v22 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>((uint64_t)a2, &v24, (uint64_t)&std::piecewise_construct, (int **)&v52);
  std::string::operator=((std::string *)(v22 + 5), &v25);
  *((_WORD *)v22 + 32) = v26;
  std::string::operator=((std::string *)v22 + 3, &v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 1;
}

void sub_23C5F4BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  uint64_t v55;

  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&__p);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a20);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a27);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a34);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a41);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a48);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(&a55);
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat((void **)(v55 - 232));
  cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat((void **)(v55 - 176));
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::InternalBake(float32x4_t *a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, cv3d::cv::gess::alg::BakeCallbackBundle *a8)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::string __p;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v29, a8);
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, (char *)&unk_23C62207F);
  v16 = cv3d::cv::gess::alg::InternalBakeHelper(a1, a2, a3, a4, a5, a6, a7, v15, 0, 0, (uint64_t)v29, 0, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = v38;
  if (v38 == v37)
  {
    v18 = 4;
    v17 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_8;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_8:
  v19 = v36;
  if (v36 == v35)
  {
    v20 = 4;
    v19 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_13;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_13:
  v21 = v34;
  if (v34 == v33)
  {
    v22 = 4;
    v21 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_18;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_18:
  v23 = v32;
  if (v32 == v31)
  {
    v24 = 4;
    v23 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_23;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_23:
  v25 = v30;
  if (v30 == v29)
  {
    v26 = 4;
    v25 = v29;
    goto LABEL_27;
  }
  if (v30)
  {
    v26 = 5;
LABEL_27:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  return v16;
}

void sub_23C5F4F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&a21);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::InternalBake(float32x4_t *a1, _QWORD *a2, uint64_t *a3, std::__fs::filesystem::path *a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, cv3d::cv::gess::alg::BakeCallbackBundle *a8)
{
  _BOOL8 v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE v29[24];
  _BYTE *v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v27, a8);
  v15 = cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(a1, a2, a3, a4, a5, a6, a7, (const cv3d::cv::gess::alg::BakeCallbackBundle *)v27);
  v16 = v36;
  if (v36 == v35)
  {
    v17 = 4;
    v16 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  v18 = v34;
  if (v34 == v33)
  {
    v19 = 4;
    v18 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_11;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_11:
  v20 = v32;
  if (v32 == v31)
  {
    v21 = 4;
    v20 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_16;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_16:
  v22 = v30;
  if (v30 == v29)
  {
    v23 = 4;
    v22 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_21;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_21:
  v24 = v28;
  if (v28 == v27)
  {
    v25 = 4;
    v24 = v27;
    goto LABEL_25;
  }
  if (v28)
  {
    v25 = 5;
LABEL_25:
    (*(void (**)(void))(*v24 + 8 * v25))();
  }
  return v15;
}

void sub_23C5F5184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5F522C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<cv3d::cv::gess::util::ImageT<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    result = *(_QWORD *)(i - 8);
    if (result)
    {
      result = MEMORY[0x2426211A0](result, 0x1000C80451B5BE8);
      *(_QWORD *)(i - 8) = 0;
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<cv3d::cv::gess::mesh::Texture>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      v14 = 48 * a2;
      v15 = v7 + 8;
      do
      {
        *(_WORD *)(v15 - 4) = 0;
        *(_OWORD *)v15 = 0uLL;
        *(_OWORD *)(v15 + 16) = 0uLL;
        *(_QWORD *)(v15 + 32) = 0;
        v15 += 48;
        v14 -= 48;
      }
      while (v14);
    }
    else
    {
      v13 = *(_QWORD *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[48 * v8];
    v22 = &v12[48 * v11];
    v16 = &v20[48 * a2];
    v17 = 48 * a2;
    v18 = v20 + 8;
    do
    {
      *((_WORD *)v18 - 2) = 0;
      *(_OWORD *)v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      *((_QWORD *)v18 + 4) = 0;
      v18 += 48;
      v17 -= 48;
    }
    while (v17);
    v21 = v16;
    std::vector<cv3d::cv::gess::mesh::Texture>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_23C5F543C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4B3B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4B3B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_0>,void ()(float,std::string const&)>::operator()(uint64_t a1, float *a2)
{
  uint64_t result;
  float v3;
  float v4;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (result)
  {
    v3 = *a2 / 100.0 * 95.0;
    v4 = v3;
    return (*(uint64_t (**)(uint64_t, float *))(*(_QWORD *)result + 48))(result, &v4);
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250D4B400;
  return result;
}

void std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250D4B400;
}

uint64_t std::__function::__func<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1,std::allocator<cv3d::cv::gess::alg::InternalBakeWithComfigurableMTLLibrary(cv3d::cv::gess::mesh::TriMesh const&,cv3d::cv::gess::mesh::Material const&,cv3d::cv::gess::mesh::TriMesh const&,std::__fs::filesystem::path const&,cv3d::cv::gess::alg::ConfigBake const&,std::optional<std::reference_wrapper<cv3d::cv::gess::alg::ReportBake>>,cv3d::cv::gess::alg::BakeCallbackBundle)::$_1>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator()(uint64_t a1, uint64_t a2)
{
  void *v2;
  int v3;

  v2 = *(void **)a2;
  v3 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v3 < 0)
    operator delete(v2);
  return 1;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, int **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, int **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C5F56AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE&&>(uint64_t a1, int *a2)
{
  int v3;
  _QWORD *v4;

  v3 = *a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = v3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "uchar");
  *(_WORD *)(a1 + 32) = 100;
  std::string::basic_string[abi:ne180100]<0>(v4, ".jpg");
  return a1;
}

void sub_23C5F5738(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::SupportsBaking(int *a1)
{
  id *v2;
  id v3;
  id *v4;
  id v5;
  uint64_t v6;
  id *v7;
  id v8;
  void *v9;
  unint64_t v10;
  cv3d::cv::gess::util::os *v11;
  _BOOL8 DiskSpaceInfo;
  _BOOL8 v13;
  uint64_t v14;
  int v15;
  _QWORD v17[2];
  void *__p;
  void *v19;
  uint64_t v20;
  id *v21;

  v2 = (id *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v21 = v2;
  v3 = MTLCreateSystemDefaultDevice();
  v4 = v21;
  v5 = *v21;
  *v21 = v3;

  v6 = objc_msgSend(*v4, "newCommandQueue");
  v7 = v21;
  v8 = v21[1];
  v21[1] = (id)v6;

  if (!*v7)
  {
    v14 = 0;
    *a1 = 17;
    v21 = 0;
LABEL_23:
    std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&v21, v7);
    return v14;
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  if (cv3d::cv::gess::alg::internal::FindGPU((unint64_t **)&__p))
  {
    if ((objc_msgSend(*v21, "areBarycentricCoordsSupported") & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "physicalMemory");

      if (v10 <= 0x5F5E0FF)
      {
        v14 = 0;
        v15 = 2;
      }
      else if ((unint64_t)cv3d::cv::gess::util::os::GetSystemPhysicalMemory(v11) <= 0x5F5E0FF)
      {
        v14 = 0;
        v15 = 1;
      }
      else
      {
        v17[0] = 0;
        v17[1] = 0;
        DiskSpaceInfo = cv3d::cv::gess::util::os::GetDiskSpaceInfo(v17);
        if (DiskSpaceInfo)
        {
          if (v17[0] <= 0x5F5E100uLL)
          {
            v15 = 19;
          }
          else
          {
            v13 = cv3d::cv::gess::util::os::RunningRosseta((cv3d::cv::gess::util::os *)DiskSpaceInfo);
            if (!v13 || (cv3d::cv::gess::util::os::IsMetalIntersectionFixed((cv3d::cv::gess::util::os *)v13) & 1) != 0)
            {
              v14 = 1;
              goto LABEL_20;
            }
            v15 = 21;
          }
        }
        else
        {
          v15 = 20;
        }
        v14 = 0;
      }
    }
    else
    {
      v14 = 0;
      v15 = 18;
    }
  }
  else
  {
    v14 = 0;
    v15 = 17;
  }
  *a1 = v15;
LABEL_20:
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  v7 = v21;
  v21 = 0;
  if (v7)
    goto LABEL_23;
  return v14;
}

void sub_23C5F58FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, id *a14)
{
  id *v15;

  if (__p)
    operator delete(__p);
  v15 = a14;
  a14 = 0;
  if (v15)
    std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&a14, v15);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::Bake(uint64_t a1, uint64_t a2, std::__fs::filesystem::path *a3, uint64_t a4, uint64_t a5, cv3d::cv::gess::alg::BakeCallbackBundle *a6)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE v24[24];
  _BYTE *v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a5 + 24))
    std::__throw_bad_variant_access[abi:ne180100]();
  v10 = *(_QWORD *)(a5 + 8);
  v11 = *(_QWORD *)(a5 + 16);
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v24, a6);
  v12 = cv3d::cv::gess::alg::internal::DetailMap(a1, a2, a3, a4, v10, v11, (uint64_t)v24);
  v13 = v33;
  if (v33 == v32)
  {
    v14 = 4;
    v13 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_7;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_7:
  v15 = v31;
  if (v31 == v30)
  {
    v16 = 4;
    v15 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_12;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_12:
  v17 = v29;
  if (v29 == v28)
  {
    v18 = 4;
    v17 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_17;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_17:
  v19 = v27;
  if (v27 == v26)
  {
    v20 = 4;
    v19 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_22;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_22:
  v21 = v25;
  if (v25 == v24)
  {
    v22 = 4;
    v21 = v24;
    goto LABEL_26;
  }
  if (v25)
  {
    v22 = 5;
LABEL_26:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return v12;
}

void sub_23C5F5B1C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,__int128 a36,__int128 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,uint64_t a43,int32x4_t a44,__int128 a45,__int128 a46,__int128 a47,__int128 a48,__int128 a49,int a50,uint64_t a51,int32x4_t a52,__int128 a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int128 a58,__int128 a59,__int128 a60,__int128 a61)
{
  uint64_t v61;
  std::__fs::filesystem::path *v62;
  uint64_t v63;
  uint64_t v64;
  const cv3d::cv::gess::alg::BakeCallbackBundle *v65;
  uint64_t v66;
  uint64_t v67;
  const std::__fs::filesystem::path *v70;
  __int128 v71;
  _BOOL4 v72;
  _BOOL4 v73;
  std::__fs::filesystem::path::__string_view v74;

  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)(v67 - 248));
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (*(_DWORD *)(v66 + 24) == 1)
    {
      v70 = *(const std::__fs::filesystem::path **)(v66 + 8);
      a40 = 0;
      a41 = 0;
      a36 = 0u;
      a37 = 0u;
      a38 = 0;
      *(_QWORD *)&v71 = 0x80000000800000;
      *((_QWORD *)&v71 + 1) = 0x80000000800000;
      a44 = vdupq_n_s32(0x7F7FFFFFu);
      a45 = v71;
      a46 = 0u;
      a47 = 0u;
      a48 = 0u;
      a49 = 0u;
      a42 = 0;
      a50 = 0;
      a52 = a44;
      a53 = v71;
      a55 = 0;
      a56 = 0;
      a54 = 0;
      *(__int128 *)((char *)&a61 + 12) = 0u;
      a60 = 0u;
      a61 = 0u;
      a58 = 0u;
      a59 = 0u;
      a57 = 0;
      LODWORD(STACK[0x240]) = 0;
      *(_OWORD *)&STACK[0x220] = 0u;
      *(_OWORD *)&STACK[0x230] = 0u;
      *(_OWORD *)&STACK[0x210] = xmmword_23C60CDB0;
      cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&a16, v65);
      v72 = cv3d::cv::gess::alg::internal::DetailMap(v64, v63, v62, v61, (uint64_t)&a36, 1u, (uint64_t)&a16);
      cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)&a16);
      std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>((std::string *)&__p, (char *)&unk_23C62207F);
      v74.__data_ = (const std::string_view::value_type *)&__p;
      v73 = std::__fs::filesystem::operator==[abi:ne180100](v70, v74);
      if (a15 < 0)
        operator delete(__p);
      if (!v73 && v72)
        cv3d::cv::gess::io::SaveToJson((uint64_t)&a36);
      __cxa_end_catch();
      JUMPOUT(0x23C5F5AD4);
    }
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  _Unwind_Resume(a1);
}

void sub_23C5F5C64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23C5F5C90(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x23C5F5C98);
  __clang_call_terminate(a1);
}

uint64_t cv3d::cv::gess::alg::Bake(cv3d::cv::gess::mesh::PolyMesh *a1, cv3d::cv::gess::alg *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const cv3d::cv::gess::alg::BakeCallbackBundle *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v28[192];
  _QWORD v29[73];
  _BYTE v30[24];
  _BYTE *v31;
  _BYTE v32[24];
  _BYTE *v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v29[0] = a3;
  v29[1] = a4;
  if (*(_DWORD *)(a8 + 24))
    std::__throw_bad_variant_access[abi:ne180100]();
  v14 = *(_QWORD *)(a8 + 8);
  v15 = *(_QWORD *)(a8 + 16);
  std::optional<cv3d::cv::gess::mesh::TriMesh const>::optional[abi:ne180100]<std::reference_wrapper<cv3d::cv::gess::mesh::TriMesh const>,0>((cv3d::cv::gess::mesh::PolyMesh *)v28, (uint64_t)v29);
  cv3d::cv::gess::alg::BakeCallbackBundle::BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)v30, a9);
  v16 = cv3d::cv::gess::alg::internal::DetailMap(a1, a2, (uint64_t)v28, a5, a6, a7, v14, v15, (uint64_t)v30);
  v17 = v39;
  if (v39 == v38)
  {
    v18 = 4;
    v17 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_7;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_7:
  v19 = v37;
  if (v37 == v36)
  {
    v20 = 4;
    v19 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_12;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_12:
  v21 = v35;
  if (v35 == v34)
  {
    v22 = 4;
    v21 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_17;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_17:
  v23 = v33;
  if (v33 == v32)
  {
    v24 = 4;
    v23 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_22;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_22:
  v25 = v31;
  if (v31 == v30)
  {
    v26 = 4;
    v25 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_27;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_27:
  if (v28[184])
    cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)v28);
  return v16;
}

#error "23C5F5FB0: call analysis failed (funcsize=97)"

void sub_23C5F6038(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23C5F607C(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x23C5F6084);
  __clang_call_terminate(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
}

cv3d::cv::gess::mesh::PolyMesh *std::optional<cv3d::cv::gess::mesh::TriMesh const>::optional[abi:ne180100]<std::reference_wrapper<cv3d::cv::gess::mesh::TriMesh const>,0>(cv3d::cv::gess::mesh::PolyMesh *this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 184) = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    cv3d::cv::gess::mesh::PolyMesh::PolyMesh(this, *(void ***)a2);
    *(_QWORD *)this = &off_250D49940;
    *((_BYTE *)this + 184) = 1;
  }
  return this;
}

void sub_23C5F6120(_Unwind_Exception *exception_object)
{
  cv3d::cv::gess::mesh::TriMesh *v1;

  if (*((_BYTE *)v1 + 184))
    cv3d::cv::gess::mesh::TriMesh::~TriMesh(v1);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::ModelSimplification(uint64_t a1, std::__fs::filesystem::path *a2, int *a3)
{
  int v6;
  unsigned int v7;
  int v8;
  _DWORD *v9;
  _BOOL8 v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  std::string __p;
  _DWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  void *v40;
  void *v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::alg::ConfigBake::ConfigBake((cv3d::cv::gess::alg::ConfigBake *)v23);
  v6 = *a3;
  v7 = a3[1];
  if (*a3 >= 0x64)
    v8 = 100;
  else
    v8 = *a3;
  v23[0] = 0;
  v23[1] = v8;
  v23[2] = v6;
  v24 = 0xA00000001;
  v25 = 0x13F800000;
  v26 = 0x240800000;
  v27 = v7 | 0x100000000;
  v32 = 0;
  v31 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v28 = 1;
  if (v30 < 0)
  {
    v29[1] = 3;
    v9 = (_DWORD *)v29[0];
  }
  else
  {
    v9 = v29;
    v30 = 3;
  }
  *v9 = 6778480;
  v39 = 0;
  v44 = 1;
  std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__p, (char *)&unk_23C62207F);
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v10 = cv3d::cv::gess::alg::internal::DetailMap(a1, (uint64_t)&__p, a2, (uint64_t)v23, 0, 0, (uint64_t)&v47);
  v11 = (__int128 *)*((_QWORD *)&v56 + 1);
  if (*((__int128 **)&v56 + 1) == &v55)
  {
    v12 = 4;
    v11 = &v55;
  }
  else
  {
    if (!*((_QWORD *)&v56 + 1))
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_12:
  v13 = (__int128 *)*((_QWORD *)&v54 + 1);
  if (*((__int128 **)&v54 + 1) == &v53)
  {
    v14 = 4;
    v13 = &v53;
  }
  else
  {
    if (!*((_QWORD *)&v54 + 1))
      goto LABEL_17;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_17:
  v15 = (__int128 *)*((_QWORD *)&v52 + 1);
  if (*((__int128 **)&v52 + 1) == &v51)
  {
    v16 = 4;
    v15 = &v51;
  }
  else
  {
    if (!*((_QWORD *)&v52 + 1))
      goto LABEL_22;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_22:
  v17 = (__int128 *)*((_QWORD *)&v50 + 1);
  if (*((__int128 **)&v50 + 1) == &v49)
  {
    v18 = 4;
    v17 = &v49;
  }
  else
  {
    if (!*((_QWORD *)&v50 + 1))
      goto LABEL_27;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_27:
  v19 = (__int128 *)*((_QWORD *)&v48 + 1);
  if (*((__int128 **)&v48 + 1) == &v47)
  {
    v20 = 4;
    v19 = &v47;
  }
  else
  {
    if (!*((_QWORD *)&v48 + 1))
      goto LABEL_32;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v46 < 0)
    operator delete(v45);
  if (v43 < 0)
    operator delete(v42);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  cv3d::cv::gess::alg::ConfigOutput::~ConfigOutput((void **)&v27);
  return v10;
}

void sub_23C5F63F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  cv3d::cv::gess::alg::BakeCallbackBundle::~BakeCallbackBundle((cv3d::cv::gess::alg::BakeCallbackBundle *)(v15 - 224));
  if (a14 < 0)
    operator delete(__p);
  cv3d::cv::gess::alg::ConfigBake::~ConfigBake(&a15);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::SplitLongEdges(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, double a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v59;
  float32x4_t v60;
  unsigned int v61;
  void *v62;
  char *v63;
  char *v64;
  void *__p[2];
  char v66;
  unsigned int v67;
  int32x4_t v68;
  int v69;
  unsigned int v70[2];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v9 = *((_QWORD *)this + 16);
  v8 = *((_QWORD *)this + 17);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  v10 = (uint64_t *)((char *)this + 32);
  LOBYTE(v62) = 0;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)this + 4, (uint64_t)&v62, (unsigned __int8 *)__p);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v9) >> 2);
  if (v66 < 0)
    operator delete(__p[0]);
  v13 = -858993459 * ((v8 - v9) >> 2);
  LOBYTE(v62) = 0;
  std::vector<BOOL>::vector(__p, v12, (unsigned __int8 *)&v62);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(&v62, (unint64_t)((double)v12 * 0.1));
  if ((_DWORD)v12)
  {
    v15 = 0;
    v59 = 0;
    v16 = a3 * a3;
    v17 = a4 * a4 * v16;
    do
    {
      v18 = v15 >> 6;
      v19 = 1 << v15;
      if ((*((_QWORD *)__p[0] + (v15 >> 6)) & (1 << v15)) == 0)
      {
        if (v11 == -1)
          goto LABEL_14;
        v67 = v11;
        v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v10, &v67, v14);
        if (*(_QWORD *)(v20 + 48) <= v15)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        if ((*(_QWORD *)(*(_QWORD *)(v20 + 40) + 8 * v18) & v19) == 0)
        {
          v70[0] = v15;
          if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v70) == -1)
            goto LABEL_14;
          v67 = v11;
          v22 = v10;
          v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v10, &v67, v21);
          v61 = v15;
          v24 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v61);
          if (*(_QWORD *)(v23 + 48) <= v24)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v25 = *(_QWORD *)(*(_QWORD *)(v23 + 40) + ((v24 >> 3) & 0x1FFFFFF8)) >> v24;
          v10 = v22;
          if ((v25 & 1) == 0)
          {
LABEL_14:
            v67 = v15;
            *((_QWORD *)__p[0] + v18) |= v19;
            v26 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v67);
            *(_QWORD *)((char *)__p[0] + (((unint64_t)*v26 >> 3) & 0x1FFFFFF8)) |= 1 << *v26;
            v27 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v67);
            if ((*v27 & v28) == 0)
            {
              v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v67);
              v30 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v29);
              if ((*v30 & v31) == 0)
              {
                v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v67);
                v33 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v32);
                v60 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v33 + 12));
                v34 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v67);
                v35 = vsubq_f32(v60, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v34 + 12)));
                v36 = vmulq_f32(v35, v35);
                v36.i32[3] = 0;
                if (v17 < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)))
                {
                  v37 = v63;
                  if (v63 >= v64)
                  {
                    v39 = (v63 - (_BYTE *)v62) >> 2;
                    if ((unint64_t)(v39 + 1) >> 62)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    v40 = (v64 - (_BYTE *)v62) >> 1;
                    if (v40 <= v39 + 1)
                      v40 = v39 + 1;
                    if ((unint64_t)(v64 - (_BYTE *)v62) >= 0x7FFFFFFFFFFFFFFCLL)
                      v41 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v41 = v40;
                    if (v41)
                      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v64, v41);
                    else
                      v42 = 0;
                    v43 = &v42[4 * v39];
                    *(_DWORD *)v43 = v67;
                    v38 = v43 + 4;
                    v45 = (char *)v62;
                    v44 = v63;
                    if (v63 != v62)
                    {
                      do
                      {
                        v46 = *((_DWORD *)v44 - 1);
                        v44 -= 4;
                        *((_DWORD *)v43 - 1) = v46;
                        v43 -= 4;
                      }
                      while (v44 != v45);
                      v44 = (char *)v62;
                    }
                    v62 = v43;
                    v63 = v38;
                    v64 = &v42[4 * v41];
                    if (v44)
                      operator delete(v44);
                  }
                  else
                  {
                    *(_DWORD *)v63 = v67;
                    v38 = v37 + 4;
                  }
                  v63 = v38;
                  ++v59;
                }
              }
            }
          }
        }
      }
      ++v15;
    }
    while (v15 != v13);
  }
  else
  {
    v59 = 0;
  }
  v47 = v63 - (_BYTE *)v62;
  v48 = (unint64_t)(v63 - (_BYTE *)v62) >> 2;
  v49 = (*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2;
  v51 = *((_QWORD *)this + 19);
  v50 = *((_QWORD *)this + 20);
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)this, (v49 + v48));
  v52 = (v50 - v51) >> 2;
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)this, v52 + (v47 >> 1));
  cv3d::cv::gess::mesh::PolyMesh::ResizeHedges((uint64_t **)this, (v12 + 6 * v48));
  if ((int)v12 + 6 * (int)v48 > v12)
  {
    v53 = 6 * v48;
    do
    {
      v54 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v13);
      *v54 &= ~v55;
      ++v13;
      --v53;
    }
    while (v53);
  }
  if ((_DWORD)v48)
  {
    v56 = 0;
    v57 = v47 & 0x3FFFFFFFCLL;
    do
    {
      v70[0] = v52;
      v70[1] = v52 + 1;
      v67 = v12;
      v68 = vaddq_s32(vdupq_n_s32(v12), (int32x4_t)xmmword_23C60CE10);
      v69 = v12 + 5;
      v61 = v49;
      cv3d::cv::gess::mesh::TriMesh::SplitEdge((uint64_t)this, (unsigned int *)((char *)v62 + v56), &v61, v70, &v67, 0, 1);
      v56 += 4;
      LODWORD(v49) = v49 + 1;
      LODWORD(v12) = v12 + 6;
      LODWORD(v52) = v52 + 2;
    }
    while (v57 != v56);
  }
  if (v62)
  {
    v63 = (char *)v62;
    operator delete(v62);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v59;
}

void sub_23C5F6978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::CollapseShortEdges(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, double a3, double a4, uint64_t a5, double a6, int a7)
{
  cv3d::cv::gess::alg *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  cv3d::cv::gess::alg *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v46;
  float32x4_t v47;
  unsigned int v48;
  unsigned int v49;
  void *__p[2];
  char v51;
  unsigned int v52;

  v10 = this;
  v12 = *((_QWORD *)this + 16);
  v11 = *((_QWORD *)this + 17);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  v13 = (uint64_t *)((char *)v10 + 32);
  LOBYTE(v52) = 0;
  v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)v10 + 4, (uint64_t)&v52, (unsigned __int8 *)__p);
  v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v12) >> 2);
  if (v51 < 0)
    operator delete(__p[0]);
  v16 = v15;
  LOBYTE(v52) = 0;
  std::vector<BOOL>::vector(__p, v15, (unsigned __int8 *)&v52);
  if ((_DWORD)v15)
  {
    v18 = 0;
    v19 = 0;
    v20 = a3 * a3;
    v21 = (uint64_t)v10 + 104;
    v22 = a4 * a4 * v20;
    v46 = v16;
    while (1)
    {
      v23 = v18 >> 6;
      v24 = 1 << v18;
      if ((*((_QWORD *)__p[0] + (v18 >> 6)) & (1 << v18)) == 0)
      {
        if (v14 == -1)
          goto LABEL_16;
        v52 = v14;
        v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v13, &v52, v17);
        if (*(_QWORD *)(v25 + 48) <= v18)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        if ((*(_QWORD *)(*(_QWORD *)(v25 + 40) + 8 * v23) & v24) != 0)
          goto LABEL_6;
        v49 = v18;
        if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v21, &v49) == -1)
          goto LABEL_16;
        v27 = v10;
        v28 = v19;
        v29 = a5;
        v52 = v14;
        v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v13, &v52, v26);
        v48 = v18;
        v31 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, &v48);
        if (*(_QWORD *)(v30 + 48) <= v31)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v32 = *(_QWORD *)(*(_QWORD *)(v30 + 40) + ((v31 >> 3) & 0x1FFFFFF8));
        a5 = v29;
        v19 = v28;
        v10 = v27;
        if (((v32 >> v31) & 1) == 0)
        {
          v16 = v46;
LABEL_16:
          v49 = v18;
          *((_QWORD *)__p[0] + v23) |= v24;
          v52 = v18;
          if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v21, &v52) + 12) != -1)
          {
            v33 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v21, &v49);
            *(_QWORD *)((char *)__p[0] + (((unint64_t)*v33 >> 3) & 0x1FFFFFF8)) |= 1 << *v33;
            if ((a5 & 1) != 0
              || (v39 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v10, *((_DWORD *)v10 + 45), v49), (*v39 & v40) == 0)&& (v41 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, &v49), v42 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v10, *((_DWORD *)v10 + 45), *v41), (*v42 & v43) == 0))
            {
              v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, &v49);
              v35 = cv3d::cv::gess::mesh::Topology::h(v21, v34);
              v47 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v10, *((_DWORD *)v10 + 44), *(_DWORD *)(v35 + 12));
              v36 = cv3d::cv::gess::mesh::Topology::h(v21, &v49);
              v37 = vsubq_f32(v47, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v10, *((_DWORD *)v10 + 44), *(_DWORD *)(v36 + 12)));
              v38 = vmulq_f32(v37, v37);
              v38.i32[3] = 0;
              if (v22 > vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)))
                v19 = v19
                    + cv3d::cv::gess::mesh::TriMesh::CollapseEdge((uint64_t)v10, &v49, a5, a7);
            }
          }
          goto LABEL_6;
        }
        v16 = v46;
      }
LABEL_6:
      if (v16 == ++v18)
        goto LABEL_24;
    }
  }
  v19 = 0;
LABEL_24:
  cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(v10);
  if (__p[0])
    operator delete(__p[0]);
  return v19;
}

void sub_23C5F6D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::EqualizeValences(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int32x2_t v39;
  int32x2_t v40;
  int32x2_t v41;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  void *__p[2];
  char v47;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  LOBYTE(v45) = 0;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)this + 4, (uint64_t)&v45, (unsigned __int8 *)__p);
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 2);
  if (v47 < 0)
    operator delete(__p[0]);
  if (!(_DWORD)v7)
    return 0;
  v8 = 0;
  v9 = 0;
  do
  {
    if (v6 == -1)
      goto LABEL_11;
    LODWORD(__p[0]) = v6;
    v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)__p, v5);
    if (*(_QWORD *)(v10 + 48) <= v8)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v10, v11, v5);
    if (((*(_QWORD *)(*(_QWORD *)(v10 + 40) + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
    {
      v45 = v8;
      if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v45) == -1)
        goto LABEL_11;
      LODWORD(__p[0]) = v6;
      v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)__p, v12);
      v44 = v8;
      v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v44);
      v16 = *v14;
      if (*(_QWORD *)(v13 + 48) <= v16)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v14, v15, v5);
      if (((*(_QWORD *)(*(_QWORD *)(v13 + 40) + ((v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1) == 0)
      {
LABEL_11:
        LODWORD(__p[0]) = v8;
        v17 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v8);
        if ((v18 & *v17) == 0)
        {
          v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
          v20 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v19);
          if ((v21 & *v20) == 0)
          {
            v43 = v9;
            v22 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p) + 12);
            v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
            v24 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v23) + 12);
            v25 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
            v26 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)(v25 + 8));
            v27 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v26) + 12);
            v28 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
            v29 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v28);
            v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)(v29 + 8));
            v31 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v30) + 12);
            v32 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v22);
            v33 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v24);
            v34 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v27);
            v35 = cv3d::cv::gess::mesh::PolyMesh::Valence((uint64_t)this, v31);
            v36 = vdup_n_s32(v32);
            v37 = vdup_n_s32(v33);
            v38 = vdup_n_s32(v34);
            v39 = vadd_s32(vadd_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x700000006, v37), (int8x8_t)vsub_s32((int32x2_t)0x700000006, v37), (int8x8_t)vadd_s32(v37, (int32x2_t)0xFFFFFFF9FFFFFFFALL)), (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x700000006, v36), (int8x8_t)vsub_s32((int32x2_t)0x700000006, v36), (int8x8_t)vadd_s32(v36, (int32x2_t)0xFFFFFFF9FFFFFFFALL))), (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x500000006, v38), (int8x8_t)vsub_s32((int32x2_t)0x500000006, v38), (int8x8_t)vadd_s32(v38, (int32x2_t)0xFFFFFFFBFFFFFFFALL)));
            v40 = vdup_n_s32(v35);
            v41 = vadd_s32(v39, (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0x500000006, v40), (int8x8_t)vsub_s32((int32x2_t)0x500000006, v40), (int8x8_t)vadd_s32(v40, (int32x2_t)0xFFFFFFFBFFFFFFFALL)));
            if ((vcgt_s32(v41, vdup_lane_s32(v41, 1)).u32[0] & 1) != 0)
            {
              v45 = -1;
              v9 = v43
                 + cv3d::cv::gess::mesh::TriMesh::FlipEdge((uint64_t)this, (unsigned int *)__p, 1, &v45);
            }
            else
            {
              v9 = v43;
            }
          }
        }
      }
    }
    ++v8;
  }
  while (v7 != v8);
  return v9;
}

void sub_23C5F7114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::TangentialRelaxation(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, double a3, int a4)
{
  float v4;

  v4 = a3;
  return cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(this, a2, v4, a4, 1);
}

uint64_t cv3d::cv::gess::alg::TangentialRelaxation(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  return cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, a2, a3, a4, 1);
}

uint64_t cv3d::cv::gess::alg::IsotropicRemeshing(float32x4_t *this, cv3d::cv::gess::mesh::TriMesh *a2, cv3d::cv::gess::mesh::TriMesh *a3, double a4, double a5, double a6)
{
  int v10;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  int v17;
  double v18;
  int v19;
  cv3d::cv::gess::mesh::TriMesh *v20;
  int v21;
  BOOL v22;
  void *exception;

  if (a4 <= a5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "split ratio <= collapse ratio");
  }
  v10 = (int)a2;
  cv3d::cv::gess::alg::ComputeAverageEdgeLength(this, a2);
  v13 = v12;
  v14 = a6;
  cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing((cv3d::cv::gess::alg *)this, a3, v14, 1, 1);
  if (v10 >= 1)
  {
    v16 = v13;
    do
    {
      v17 = cv3d::cv::gess::alg::SplitLongEdges((cv3d::cv::gess::alg *)this, 0, v16, a4, v15);
      v19 = cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)this, 0, v16, a5, 0, v18, 4);
      v21 = v19 | v17 | cv3d::cv::gess::alg::EqualizeValences((cv3d::cv::gess::alg *)this, v20);
      cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing((cv3d::cv::gess::alg *)this, a3, v14, 1, 1);
      if (v21)
        v22 = v10 > 1;
      else
        v22 = 0;
      --v10;
    }
    while (v22);
  }
  return 1;
}

void sub_23C5F7274(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::IsotropicRemeshing(uint64_t a1, unsigned int **a2, int a3, int a4, double a5, double a6, double a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  char *v35;
  unsigned int v36;
  const cv3d::cv::gess::mesh::PolyMesh *v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t i;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  float v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  double v59;
  double v60;
  float v61;
  int v62;
  BOOL v63;
  int v64;
  double v65;
  int v66;
  cv3d::cv::gess::mesh::TriMesh *v67;
  int v68;
  unint64_t v69;
  void *exception;
  void *v72[3];
  void *v73[3];
  float v74;
  void *__p[2];
  char v76;
  unsigned int v77;
  float v78;

  if (a5 <= a6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "split ratio <= collapse ratio");
  }
  v77 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  LOBYTE(v73[0]) = 0;
  v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)v73, (unsigned __int8 *)__p);
  v77 = v15;
  if (v76 < 0)
    operator delete(__p[0]);
  if (v15 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v77, (__int128 *)__p);
    if (v76 < 0)
      operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v77;
  v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p, v14);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
  {
    v18 = 0;
    do
    {
      LODWORD(__p[0]) = v77;
      v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p, v17);
      if (*(_QWORD *)(v19 + 48) <= v18)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v19, v20, v21);
      *(_QWORD *)(*(_QWORD *)(v19 + 40) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v18);
      ++v18;
      LODWORD(__p[0]) = v77;
      v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p, v21);
    }
    while (v18 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22));
  }
  v74 = NAN;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:remesh_fixed");
  LOBYTE(v73[0]) = 0;
  v24 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)v73, (unsigned __int8 *)__p);
  v74 = *(float *)&v24;
  if (v76 < 0)
    operator delete(__p[0]);
  if (v24 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "v:remesh_fixed");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v74, (__int128 *)__p);
    if (v76 < 0)
      operator delete(__p[0]);
  }
  *(float *)__p = v74;
  v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p, v23);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25))
  {
    v27 = 0;
    do
    {
      *(float *)__p = v74;
      v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p, v26);
      if (*(_QWORD *)(v28 + 48) <= v27)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v28, v29, v30);
      *(_QWORD *)(*(_QWORD *)(v28 + 40) + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v27);
      ++v27;
      *(float *)__p = v74;
      v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p, v30);
    }
    while (v27 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31));
  }
  v32 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  LOBYTE(v73[0]) = 0;
  std::vector<BOOL>::vector(__p, v32, (unsigned __int8 *)v73);
  v33 = *a2;
  v34 = a2[1];
  if (*a2 != v34)
  {
    v35 = (char *)__p[0];
    do
    {
      v36 = *v33++;
      *(_QWORD *)&v35[((unint64_t)v36 >> 3) & 0x1FFFFFF8] |= 1 << v36;
    }
    while (v33 != v34);
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v73, 3uLL);
  v38 = __p[1];
  if (__p[1])
  {
    v39 = 0;
    do
    {
      if (((*(_QWORD *)((char *)__p[0] + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
      {
        LODWORD(v72[0]) = v39;
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)v72, v73);
        for (i = 0; i != 12; i += 4)
        {
          LODWORD(v72[0]) = v77;
          v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v72, v40);
          v44 = *(unsigned int *)((char *)v73[0] + i);
          if (*(_QWORD *)(v42 + 48) <= v44)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*(_QWORD *)(v42 + 40) + ((v44 >> 3) & 0x1FFFFFF8)) |= 1 << v44;
          LODWORD(v72[0]) = v77;
          v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v72, v43);
          v47 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v73[0] + i));
          if (*(_QWORD *)(v45 + 48) <= v47)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*(_QWORD *)(v45 + 40) + ((v47 >> 3) & 0x1FFFFFF8)) |= 1 << v47;
          *(float *)v72 = v74;
          v48 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)v72, v46);
          v49 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v73[0] + i)) + 12);
          if (*(_QWORD *)(v48 + 48) <= v49)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*(_QWORD *)(v48 + 40) + ((v49 >> 3) & 0x1FFFFFF8)) |= 1 << v49;
        }
        v38 = __p[1];
      }
      ++v39;
    }
    while (v39 < (unint64_t)v38);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)a1, v37);
  v51 = v50;
  std::vector<float>::vector(v72, (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
  {
    v53 = 0;
    v55 = 1;
    do
    {
      v78 = v74;
      v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)&v78, v52);
      if (*(_QWORD *)(v56 + 48) <= v53)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      if (((*(_QWORD *)(*(_QWORD *)(v56 + 40) + ((v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) != 0)
      {
        v57 = 0.0;
      }
      else
      {
        v54 = a7;
        v57 = v54;
      }
      *((float *)v72[0] + v53) = v57;
      v53 = v55++;
    }
    while (v53 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  }
  cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, v72, a4, 1, 1);
  v60 = v51;
  v61 = a7;
  v62 = a3 + 1;
  v63 = 1;
  while (v63)
  {
    if (--v62 < 1)
      break;
    v64 = cv3d::cv::gess::alg::SplitLongEdges((cv3d::cv::gess::alg *)a1, 0, v60, a5, v59);
    v66 = cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)a1, 0, v60, a6, 0, v65, 4);
    v68 = cv3d::cv::gess::alg::EqualizeValences((cv3d::cv::gess::alg *)a1, v67);
    v69 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
    v78 = v61;
    std::vector<float>::resize((uint64_t)v72, v69, &v78);
    v63 = (v66 | v64 | v68) != 0;
    cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, v72, a4, 1, 1);
  }
  if (v77 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 32), &v77, v58);
  v77 = -1;
  if (v74 != NAN)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v74, v58);
  v74 = NAN;
  if (v72[0])
  {
    v72[1] = v72[0];
    operator delete(v72[0]);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  if (__p[0])
    operator delete(__p[0]);
  return 1;
}

void sub_23C5F7968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t cv3d::cv::gess::alg::CreasePreservedRemeshing(uint64_t a1, int a2, int a3, uint64_t a4, double a5, double a6)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  const cv3d::cv::gess::mesh::PolyMesh *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  int v47;
  double v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t i;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  cv3d::cv::gess::mesh::TriMesh *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t *v100;
  float32x4_t v104;
  int v105;
  unsigned int v106;
  void *v107;
  char *v108;
  char *v109;
  void *v110[2];
  char v111;
  void *v112[3];
  void *__p[2];
  char v114;
  unsigned int v115;
  unsigned int v116;
  _BYTE v117[20];
  unsigned int v118;
  unsigned int v119[2];
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  v115 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
  LOBYTE(v112[0]) = 0;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)v112, (unsigned __int8 *)__p);
  v115 = v10;
  if (v114 < 0)
    operator delete(__p[0]);
  if (v10 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:remesh_fixed");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v115, (__int128 *)__p);
    if (v114 < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128))
  {
    v11 = 0;
    v12 = 1;
    do
    {
      LODWORD(__p[0]) = v115;
      v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p, v9);
      if (*(_QWORD *)(v13 + 48) <= v11)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v13, v14, v9);
      *(_QWORD *)(*(_QWORD *)(v13 + 40) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
      v11 = v12;
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v12++;
    }
    while (v15);
  }
  v16 = a1 + 104;
  v17 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
  v18 = a6;
  *(float *)v112 = v18;
  std::vector<float>::vector(__p, v17, v112);
  v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  LOBYTE(v110[0]) = 0;
  std::vector<BOOL>::vector(v112, v19, (unsigned __int8 *)v110);
  if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128))
  {
    v21 = 0;
    v22 = 1;
    do
    {
      v23 = v21 >> 6;
      v24 = 1 << v21;
      v25 = *((_QWORD *)v112[0] + (v21 >> 6));
      if ((v25 & (1 << v21)) == 0)
      {
        *((_QWORD *)v112[0] + v23) = v25 | v24;
        LODWORD(v110[0]) = v22 - 1;
        v26 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
        *(_QWORD *)((char *)v112[0] + (((unint64_t)*v26 >> 3) & 0x1FFFFFF8)) |= 1 << *v26;
        LODWORD(v110[0]) = v22 - 1;
        v27 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v21);
        if ((*v27 & v28) != 0
          || (v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110),
              v30 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v29),
              (*v30 & v31) != 0))
        {
          LODWORD(v110[0]) = v22 - 1;
          v32 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
          *((_DWORD *)__p[0] + *(unsigned int *)(v32 + 12)) = 0;
          LODWORD(v110[0]) = v22 - 1;
          v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
          v34 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v33);
          *((_DWORD *)__p[0] + *(unsigned int *)(v34 + 12)) = 0;
          LODWORD(v110[0]) = v115;
          v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v110, v35);
          if (*(_QWORD *)(v36 + 48) <= v21)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*(_QWORD *)(v36 + 40) + 8 * v23) |= v24;
          LODWORD(v110[0]) = v115;
          v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v110, v37);
          LODWORD(v110[0]) = v22 - 1;
          v39 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
          if (*(_QWORD *)(v38 + 48) <= v39)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        else
        {
          LODWORD(v107) = 0;
          LODWORD(v110[0]) = v22 - 1;
          cv3d::cv::gess::math::EdgeDihedral(a1, (unsigned int *)v110, (float *)&v107);
          if (*(float *)&v107 <= 0.523598776)
            goto LABEL_18;
          LODWORD(v110[0]) = v22 - 1;
          v40 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
          *((_DWORD *)__p[0] + *(unsigned int *)(v40 + 12)) = 0;
          LODWORD(v110[0]) = v22 - 1;
          v41 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
          v42 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v41);
          *((_DWORD *)__p[0] + *(unsigned int *)(v42 + 12)) = 0;
          LODWORD(v110[0]) = v115;
          v44 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v110, v43);
          if (*(_QWORD *)(v44 + 48) <= v21)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*(_QWORD *)(v44 + 40) + 8 * v23) |= v24;
          LODWORD(v110[0]) = v115;
          v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)v110, v45);
          LODWORD(v110[0]) = v22 - 1;
          v39 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v110);
          if (*(_QWORD *)(v38 + 48) <= v39)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(_QWORD *)(*(_QWORD *)(v38 + 40) + ((v39 >> 3) & 0x1FFFFFF8)) |= 1 << v39;
      }
LABEL_18:
      v21 = v22;
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v22++;
    }
    while (v15);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)a1, v20);
  if (a2 >= 1)
  {
    v47 = 0;
    v48 = a5 * a5 * (float)(v46 * v46);
    v100 = (uint64_t *)(a1 + 32);
    do
    {
      v49 = -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
      v50 = v49;
      LOBYTE(v107) = 0;
      std::vector<BOOL>::vector(v110, v49, (unsigned __int8 *)&v107);
      v107 = 0;
      v108 = 0;
      v109 = 0;
      std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(&v107, (unint64_t)((double)v49 * 0.1));
      if (v49)
      {
        for (i = 0; i != v49; ++i)
        {
          v52 = *((_QWORD *)v110[0] + (i >> 6));
          if ((v52 & (1 << i)) == 0)
          {
            *(_DWORD *)v117 = i;
            *((_QWORD *)v110[0] + (i >> 6)) = v52 | (1 << i);
            v53 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v16, (unsigned int *)v117);
            *(_QWORD *)((char *)v110[0] + (((unint64_t)*v53 >> 3) & 0x1FFFFFF8)) |= 1 << *v53;
            v54 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *(unsigned int *)v117);
            if ((*v54 & v55) == 0)
            {
              v56 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, (unsigned int *)v117);
              v57 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v56);
              if ((*v57 & v58) == 0)
              {
                v59 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, (unsigned int *)v117);
                v60 = cv3d::cv::gess::mesh::Topology::h(v16, v59);
                v104 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v60 + 12));
                v61 = cv3d::cv::gess::mesh::Topology::h(v16, (unsigned int *)v117);
                v62 = vsubq_f32(v104, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v61 + 12)));
                v63 = vmulq_f32(v62, v62);
                v63.i32[3] = 0;
                if (v48 < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63)))
                {
                  v64 = v108;
                  if (v108 >= v109)
                  {
                    v66 = (v108 - (_BYTE *)v107) >> 2;
                    if ((unint64_t)(v66 + 1) >> 62)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    v67 = (v109 - (_BYTE *)v107) >> 1;
                    if (v67 <= v66 + 1)
                      v67 = v66 + 1;
                    if ((unint64_t)(v109 - (_BYTE *)v107) >= 0x7FFFFFFFFFFFFFFCLL)
                      v68 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v68 = v67;
                    if (v68)
                      v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v109, v68);
                    else
                      v69 = 0;
                    v70 = &v69[4 * v66];
                    *(_DWORD *)v70 = *(_DWORD *)v117;
                    v65 = v70 + 4;
                    v72 = (char *)v107;
                    v71 = v108;
                    if (v108 != v107)
                    {
                      do
                      {
                        v73 = *((_DWORD *)v71 - 1);
                        v71 -= 4;
                        *((_DWORD *)v70 - 1) = v73;
                        v70 -= 4;
                      }
                      while (v71 != v72);
                      v71 = (char *)v107;
                    }
                    v107 = v70;
                    v108 = v65;
                    v109 = &v69[4 * v68];
                    if (v71)
                      operator delete(v71);
                  }
                  else
                  {
                    *(_DWORD *)v108 = *(_DWORD *)v117;
                    v65 = v64 + 4;
                  }
                  v108 = v65;
                }
              }
            }
          }
        }
      }
      v105 = v47;
      v74 = v108 - (_BYTE *)v107;
      v75 = (unint64_t)(v108 - (_BYTE *)v107) >> 2;
      v76 = (*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
      v78 = *(_QWORD *)(a1 + 152);
      v77 = *(_QWORD *)(a1 + 160);
      cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, (v76 + v75));
      v79 = (v77 - v78) >> 2;
      cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v79 + (v74 >> 1));
      cv3d::cv::gess::mesh::PolyMesh::ResizeHedges((uint64_t **)a1, v49 + 6 * (_DWORD)v75);
      if (v49 + 6 * (_DWORD)v75 > v49)
      {
        v80 = 6 * v75;
        do
        {
          v81 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v50);
          *v81 &= ~v82;
          ++v50;
          --v80;
        }
        while (v80);
      }
      v83 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
      *(float *)v117 = v18;
      std::vector<float>::resize((uint64_t)__p, v83, v117);
      std::vector<BOOL>::resize((uint64_t)v112, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2), 0);
      if ((_DWORD)v75)
      {
        v84 = 0;
        do
        {
          v119[0] = v79;
          v119[1] = v79 + 1;
          *(_DWORD *)v117 = v49;
          *(int32x4_t *)&v117[4] = vaddq_s32(vdupq_n_s32(v49), (int32x4_t)xmmword_23C60CE10);
          v118 = v49 + 5;
          v106 = v76;
          if (cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, (unsigned int *)((char *)v107 + v84), &v106, v119, (unsigned int *)v117, 0, 1))
          {
            v116 = v115;
            v86 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v100, &v116, v85);
            v88 = *(unsigned int *)((char *)v107 + v84);
            if (*(_QWORD *)(v86 + 48) <= v88)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            if (((*(_QWORD *)(*(_QWORD *)(v86 + 40) + ((v88 >> 3) & 0x1FFFFFF8)) >> v88) & 1) != 0)
            {
              *((_DWORD *)__p[0] + v106) = 0;
              v116 = v115;
              v89 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v100, &v116, v87);
              if (*(_QWORD *)(v89 + 48) <= (unint64_t)*(unsigned int *)&v117[16])
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_QWORD *)(*(_QWORD *)(v89 + 40) + (((unint64_t)*(unsigned int *)&v117[16] >> 3) & 0x1FFFFFF8)) |= 1 << v117[16];
              v116 = v115;
              v91 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v100, &v116, v90);
              if (*(_QWORD *)(v91 + 48) <= (unint64_t)v118)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_QWORD *)(*(_QWORD *)(v91 + 40) + (((unint64_t)v118 >> 3) & 0x1FFFFFF8)) |= 1 << v118;
            }
          }
          v84 += 4;
          LODWORD(v76) = v76 + 1;
          v49 += 6;
          LODWORD(v79) = v79 + 2;
        }
        while ((v74 & 0x3FFFFFFFCLL) != v84);
      }
      cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(a1, __p, a3, 1, 1);
      cv3d::cv::gess::alg::EqualizeValences((cv3d::cv::gess::alg *)a1, v92);
      v16 = a1 + 104;
      if (*(_QWORD *)(a4 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(v117, (char *)&unk_23C62207F);
        *(float *)v119 = (float)((float)v105 / (float)a2) * 100.0;
        v93 = *(_QWORD *)(a4 + 24);
        if (!v93)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, unsigned int *, _BYTE *))(*(_QWORD *)v93 + 48))(v93, v119, v117);
        if (SHIBYTE(v118) < 0)
          operator delete(*(void **)v117);
      }
      if (v107)
      {
        v108 = (char *)v107;
        operator delete(v107);
      }
      if (v110[0])
        operator delete(v110[0]);
      v47 = v105 + 1;
    }
    while (v105 + 1 != a2);
  }
  std::string::basic_string[abi:ne180100]<0>(v110, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v107 = 0;
  v108 = 0;
  v94 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v107, (unsigned __int8 *)v110);
  if (v111 < 0)
    operator delete(v110[0]);
  if (v94 != -1)
  {
    v95 = cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal((uint64_t **)a1);
LABEL_89:
    v98 = v95;
    goto LABEL_90;
  }
  std::string::basic_string[abi:ne180100]<0>(v110, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  v107 = 0;
  v108 = 0;
  v96 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v107, (unsigned __int8 *)v110);
  if (v111 < 0)
    operator delete(v110[0]);
  if (v96 != -1)
  {
    v95 = cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal((uint64_t **)a1);
    goto LABEL_89;
  }
  std::string::basic_string[abi:ne180100]<0>(v110, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
  v107 = 0;
  v108 = 0;
  if (cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v107, (unsigned __int8 *)v110) == -1)
  {
    v97 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v107, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
    *(_QWORD *)&v117[4] = 0;
    *(_DWORD *)v117 = 0;
    v97 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)v117, (unsigned __int8 *)&v107) != -1;
    if (SHIBYTE(v109) < 0)
      operator delete(v107);
  }
  if (v111 < 0)
  {
    operator delete(v110[0]);
    if (v97)
      goto LABEL_88;
  }
  else if (v97)
  {
LABEL_88:
    LODWORD(v110[0]) = 1091567616;
    v95 = cv3d::cv::gess::mesh::TriMesh::ComputeMeshNormal((cv3d::cv::gess::mesh::TriMesh *)a1, (float *)v110);
    goto LABEL_89;
  }
  v98 = 1;
LABEL_90:
  if (v112[0])
    operator delete(v112[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v98;
}

void sub_23C5F8664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p)
    operator delete(__p);
  if (a37)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t i;
  uint64_t v11;
  _DWORD *v12;
  uint64_t j;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  int v21;
  unint64_t v22;
  void *__p[2];
  char v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;

  v3 = -858993459 * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2);
  v4 = v3;
  LOBYTE(v31[0]) = 0;
  std::vector<BOOL>::vector(&v33, v3, (unsigned __int8 *)v31);
  std::string::basic_string[abi:ne180100]<0>(v31, "th:isnew_subdiv");
  std::string::basic_string[abi:ne180100]<0>(v29, "tv:isnew_subdiv");
  v28 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v28, (__int128 *)v31);
  LODWORD(__p[0]) = v28;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 4, (unsigned int *)__p, v5);
  v27 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, &v27, (__int128 *)v29);
  LODWORD(__p[0]) = v27;
  v8 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)this + 1, (unsigned int *)__p, v7);
  v26 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v35 = 0;
  v34 = 0;
  v26 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)this + 7, (uint64_t)&v34, (unsigned __int8 *)__p);
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (!v3)
      goto LABEL_9;
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  for (i = 0; i != v3; ++i)
  {
    v11 = *((_QWORD *)v33 + (i >> 6));
    if ((v11 & (1 << i)) == 0)
    {
      *((_QWORD *)v33 + (i >> 6)) = v11 | (1 << i);
      LODWORD(__p[0]) = i;
      v12 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
      *(_QWORD *)((char *)v33 + (((unint64_t)*v12 >> 3) & 0x1FFFFFF8)) |= 1 << *v12;
      LODWORD(__p[0]) = i;
      cv3d::cv::gess::mesh::TriMesh::SplitEdge((uint64_t)this, (unsigned int *)__p, 0);
    }
  }
LABEL_9:
  __p[0] = v8;
  __p[1] = this;
  v14 = *((_QWORD *)this + 16);
  for (j = *((_QWORD *)this + 17); 0xCCCCCCCCCCCCCCCDLL * ((j - v14) >> 2) > v3; v4 = v3)
  {
    if (*(_QWORD *)(v6 + 48) <= v4)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    if ((*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * (v4 >> 6)) & (1 << v4)) != 0)
    {
      v34 = v3;
      v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v34) + 12);
      if (v8[6] <= v15)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v16 = *(_QWORD *)(v8[5] + ((v15 >> 3) & 0x1FFFFFF8));
      v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v34);
      v18 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v17) + 12);
      if (v8[6] <= v18)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      if (((v16 & (1 << v15)) != 0) != ((*(_QWORD *)(v8[5] + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1))
      {
        v19 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()((uint64_t *)__p, v34);
        v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v34);
        v21 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()((uint64_t *)__p, *v20);
        if (v19 == 2 && v21 == 2)
          cv3d::cv::gess::mesh::TriMesh::FlipEdge((uint64_t)this, &v34, 1, &v26);
      }
      if (*(_QWORD *)(v6 + 48) <= v4)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * (v4 >> 6)) &= ~(1 << v4);
      v22 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v34);
      if (*(_QWORD *)(v6 + 48) <= v22)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(*(_QWORD *)(v6 + 40) + ((v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      v14 = *((_QWORD *)this + 16);
      j = *((_QWORD *)this + 17);
    }
    ++v3;
  }
  if (v28 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 4, &v28, v9);
  v28 = -1;
  if (v27 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, &v27, v9);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v33)
    operator delete(v33);
  return 1;
}

void sub_23C5F8C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  if (a16 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  if (a30 < 0)
    operator delete(a25);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v26;

  v26 = a2;
  v3 = *a1;
  v4 = cv3d::cv::gess::mesh::Topology::h(a1[1] + 104, &v26);
  v7 = *(unsigned int *)(v4 + 12);
  if (*(_QWORD *)(v3 + 48) <= v7)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + ((v7 >> 3) & 0x1FFFFFF8));
  v9 = *a1;
  v10 = a1[1] + 104;
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10, &v26);
  v12 = cv3d::cv::gess::mesh::Topology::h(v10, v11);
  v15 = *(unsigned int *)(v12 + 12);
  if (*(_QWORD *)(v9 + 48) <= v15)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, v13, v14);
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + ((v15 >> 3) & 0x1FFFFFF8));
  v17 = *a1;
  v18 = a1[1] + 104;
  v19 = cv3d::cv::gess::mesh::Topology::h(v18, &v26);
  v20 = cv3d::cv::gess::mesh::Topology::h(v18, (unsigned int *)(v19 + 4));
  v23 = *(unsigned int *)(v20 + 12);
  if (*(_QWORD *)(v17 + 48) <= v23)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v20, v21, v22);
  if ((v8 & (1 << v7)) != 0)
    v24 = 2;
  else
    v24 = 1;
  if (((v16 >> v15) & 1) == 0)
    v24 = (v8 & (1 << v7)) != 0;
  return v24 + ((*(_QWORD *)(*(_QWORD *)(v17 + 40) + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1);
}

uint64_t cv3d::cv::gess::alg::MidpointSubdivision(uint64_t a1, unsigned int **a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *i;
  unsigned int *v25;
  uint64_t v26;
  char *v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t j;
  uint64_t k;
  uint64_t v35;
  int v36;
  unsigned int *v37;
  int v38;
  unint64_t v39;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void *__p[2];
  char v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  _QWORD *v53;

  v4 = -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  v5 = v4;
  LOBYTE(v51[0]) = 0;
  std::vector<BOOL>::vector(&v53, v4, (unsigned __int8 *)v51);
  std::string::basic_string[abi:ne180100]<0>(v51, "th:isnew_subdiv");
  std::string::basic_string[abi:ne180100]<0>(v49, "tv:isnew_subdiv");
  v48 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v48, (__int128 *)v51);
  LODWORD(__p[0]) = v48;
  v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)__p, v6);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128);
  if (v9)
  {
    v10 = 0;
    v11 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 2);
    v12 = *(_QWORD *)(v7 + 40);
    v13 = 1;
    do
    {
      if (*(_QWORD *)(v7 + 48) <= v10)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(v12 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v10);
      v10 = v13;
      v14 = v11 > v13++;
    }
    while (v14);
  }
  v47 = -1;
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(a1, &v47, (__int128 *)v49);
  LODWORD(__p[0]) = v47;
  v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 8), (unsigned int *)__p, v15);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  if (v18)
  {
    v19 = 0;
    v20 = v18 >> 2;
    v21 = *(_QWORD *)(v16 + 40);
    v22 = 1;
    do
    {
      if (*(_QWORD *)(v16 + 48) <= v19)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(v21 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
      v19 = v22;
      v14 = v20 > v22++;
    }
    while (v14);
  }
  v46 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v43) = 0;
  v42 = 0;
  v46 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v42, (unsigned __int8 *)__p);
  if (v45 < 0)
    operator delete(__p[0]);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  v25 = *a2;
  for (i = a2[1]; v25 != i; ++v25)
  {
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v25, __p);
    v26 = 0;
    v27 = (char *)__p[0];
    do
    {
      v28 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v27[v26]);
      v27 = (char *)__p[0];
      v29 = *(unsigned int *)((char *)__p[0] + v26);
      v30 = v29 >> 6;
      v31 = 1 << v29;
      v32 = v53[v30];
      if ((v31 & v32) == 0
        && ((*(_QWORD *)((char *)v53 + (((unint64_t)*v28 >> 3) & 0x1FFFFFF8)) >> *v28) & 1) == 0)
      {
        v53[v30] = v31 | v32;
      }
      v26 += 4;
    }
    while (v26 != 12);
  }
  if (v4)
  {
    for (j = 0; j != v4; ++j)
    {
      if (((*(_QWORD *)((char *)v53 + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) != 0)
      {
        LODWORD(v42) = j;
        cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, (unsigned int *)&v42, 0);
      }
    }
  }
  v42 = v17;
  v43 = a1;
  v35 = *(_QWORD *)(a1 + 128);
  for (k = *(_QWORD *)(a1 + 136); 0xCCCCCCCCCCCCCCCDLL * ((k - v35) >> 2) > v4; v5 = v4)
  {
    if (*(_QWORD *)(v8 + 48) <= v5)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    if ((*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v41 = v4;
      v36 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()(&v42, v5);
      v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v41);
      v38 = cv3d::cv::gess::alg::MidpointSubdivision(cv3d::cv::gess::mesh::TriMesh &)::$_0::operator()(&v42, *v37);
      if (v36 == 2 && v38 == 2)
        cv3d::cv::gess::mesh::TriMesh::FlipEdge(a1, &v41, 1, &v46);
      if (*(_QWORD *)(v8 + 48) <= v5)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * (v5 >> 6)) &= ~(1 << v5);
      v39 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v41);
      if (*(_QWORD *)(v8 + 48) <= v39)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(*(_QWORD *)(v8 + 40) + ((v39 >> 3) & 0x1FFFFFF8)) &= ~(1 << v39);
      v35 = *(_QWORD *)(a1 + 128);
      k = *(_QWORD *)(a1 + 136);
    }
    ++v4;
  }
  if (v48 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 32), &v48, v23);
  v48 = -1;
  if (v47 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v47, v23);
  v47 = -1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  if (v53)
    operator delete(v53);
  return 1;
}

void sub_23C5F9340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v35;

  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  v35 = *(void **)(v33 - 112);
  if (v35)
    operator delete(v35);
  _Unwind_Resume(exception_object);
}

_DWORD *cv3d::cv::gess::alg::ProjectionOptions::ProjectionOptions(_DWORD *this)
{
  *this = 1065353216;
  return this;
}

uint64_t cv3d::cv::gess::alg::Mesh2MeshProjection(cv3d::cv::gess::alg *this, cv3d::cv::gess::mesh::TriMesh *a2, const cv3d::cv::gess::mesh::TriMesh *a3, const cv3d::cv::gess::alg::ProjectionOptions *a4)
{
  int v5;

  v5 = 1065353216;
  return cv3d::cv::gess::alg::Mesh2MeshProjection(this, a2, (const cv3d::cv::gess::mesh::TriMesh *)&v5, a4);
}

{
  uint64_t VertexNormalAttribute;
  const cv3d::cv::gess::mesh::PolyMesh *v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  __int128 v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  float v29;
  unsigned int v30;
  float v31;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t *v40;
  __int128 v42;
  float32x4_t v43;
  void *__p;
  void *v45;
  uint64_t v46;
  void *v47;
  _OWORD *v48;
  unint64_t v49;
  __int128 v50;
  float32x4_t v51;
  uint64_t v52;
  __int128 v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (this == a2)
    return 1;
  VertexNormalAttribute = cv3d::cv::gess::internal::GetVertexNormalAttribute((uint64_t **)this, a2);
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)this, v8);
  v10 = v9;
  v11 = *(float *)a3;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::vector<cv3d::cv::gess::math::RayT<float>>::reserve((uint64_t *)&v47, (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 1);
  __p = 0;
  v45 = 0;
  v46 = 0;
  LODWORD(v53) = *((_DWORD *)this + 44);
  v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, (unsigned int *)&v53);
  if (*((_QWORD *)this + 14) == *((_QWORD *)this + 13))
  {
    v21 = (uint64_t)v48;
  }
  else
  {
    v13 = 0;
    v14 = v10 * v11;
    do
    {
      v15 = *(_QWORD *)(VertexNormalAttribute + 40);
      if (v13 >= (unint64_t)((*(_QWORD *)(VertexNormalAttribute + 48) - v15) >> 4))
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v16 = *(_QWORD *)(v12 + 40);
      if (v13 >= (unint64_t)((*(_QWORD *)(v12 + 48) - v16) >> 4))
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v17 = *(float32x4_t *)(v15 + 16 * v13);
      v18 = *(_OWORD *)(v16 + 16 * v13);
      v53 = v18;
      v54 = v17;
      v43 = v17;
      LODWORD(v55) = 0;
      *((float *)&v55 + 1) = v14;
      v19 = v48;
      if ((unint64_t)v48 >= v49)
      {
        v42 = v18;
        v20 = std::vector<cv3d::cv::gess::math::RayT<float>>::__push_back_slow_path<cv3d::cv::gess::math::RayT<float> const&>((uint64_t *)&v47, (uint64_t)&v53);
        v18 = v42;
      }
      else
      {
        *v48 = v18;
        v19[1] = v54;
        *((_QWORD *)v19 + 4) = v55;
        v20 = (unint64_t)(v19 + 3);
      }
      v48 = (_OWORD *)v20;
      v50 = v18;
      v51 = vnegq_f32(v43);
      LODWORD(v52) = 0;
      *((float *)&v52 + 1) = v14;
      if (v20 >= v49)
      {
        v21 = std::vector<cv3d::cv::gess::math::RayT<float>>::__push_back_slow_path<cv3d::cv::gess::math::RayT<float> const&>((uint64_t *)&v47, (uint64_t)&v50);
      }
      else
      {
        *(_OWORD *)v20 = v18;
        *(float32x4_t *)(v20 + 16) = v51;
        *(_QWORD *)(v20 + 32) = v52;
        v21 = v20 + 48;
      }
      v48 = (_OWORD *)v21;
      ++v13;
    }
    while (v13 < (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2);
  }
  std::vector<cv3d::cv::gess::math::RayIntersectionT<float,unsigned int>>::resize((uint64_t *)&__p, 0xAAAAAAAAAAAAAAABLL * ((v21 - (uint64_t)v47) >> 4));
  v22 = cv3d::cv::gess::alg::RayCast(&v47, (uint64_t)a2, (uint64_t *)&__p);
  if (*((_QWORD *)this + 14) != *((_QWORD *)this + 13))
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = (*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2;
    while (1)
    {
      v28 = (char *)__p + v23;
      v29 = *(float *)((char *)__p + v23);
      if (v29 == -1.0)
        break;
      v30 = *((_DWORD *)v28 + 1);
      v31 = *((float *)v28 + 4);
      if (v31 != -1.0)
      {
        v32 = *(_DWORD *)((char *)__p + v23 + 20);
        if (v30 < v27 && v32 < v27)
        {
          v34 = v26;
          v35 = *(_QWORD *)(v12 + 40);
          if (v26 >= (unint64_t)((*(_QWORD *)(v12 + 48) - v35) >> 4))
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v39 = v25 + 1;
          if (v31 >= v29)
          {
            v31 = *(float *)((char *)__p + v23);
            v39 = v25;
          }
          v40 = (float32x4_t *)((char *)v47 + 48 * v39);
          v37 = *v40;
          v36 = v40[1];
          goto LABEL_39;
        }
        if (v30 < v27)
          goto LABEL_33;
LABEL_29:
        if (v32 < v27)
        {
          v34 = v26;
          v35 = *(_QWORD *)(v12 + 40);
          if (v26 >= (unint64_t)((*(_QWORD *)(v12 + 48) - v35) >> 4))
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v37 = *(float32x4_t *)((char *)v47 + v24 + 48);
          v36 = *(float32x4_t *)((char *)v47 + v24 + 64);
LABEL_39:
          v38 = vmulq_n_f32(v36, v31);
LABEL_40:
          *(float32x4_t *)(v35 + 16 * v34) = vaddq_f32(v38, v37);
          goto LABEL_41;
        }
        goto LABEL_41;
      }
      if (v30 < v27)
      {
LABEL_33:
        v34 = v26;
        v35 = *(_QWORD *)(v12 + 40);
        if (v26 >= (unint64_t)((*(_QWORD *)(v12 + 48) - v35) >> 4))
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v37 = *(float32x4_t *)((char *)v47 + v24);
        v38 = vmulq_n_f32(*(float32x4_t *)((char *)v47 + v24 + 16), v29);
        goto LABEL_40;
      }
LABEL_41:
      ++v26;
      v25 += 2;
      v24 += 96;
      v23 += 32;
      if (v26 >= (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2)
        goto LABEL_42;
    }
    v31 = *((float *)v28 + 4);
    if (v31 == -1.0)
      goto LABEL_41;
    v32 = *(_DWORD *)((char *)__p + v23 + 20);
    goto LABEL_29;
  }
LABEL_42:
  if (__p)
  {
    v45 = __p;
    operator delete(__p);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  return v22;
}

void sub_23C5F9840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::math::RayT<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 48 * v6;
    std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 48) % 0x30uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_23C5F9964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t std::vector<cv3d::cv::gess::math::RayT<float>>::__push_back_slow_path<cv3d::cv::gess::math::RayT<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  v11 = &v10[48 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[48 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  v17 = v11 + 48;
  std::vector<cv3d::cv::gess::math::RayT<float>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_23C5F9BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GESSVersionNumberMajor(cv3d::cv::gess *a1)
{
  return cv3d::cv::gess::MAJOR_VERSION(a1);
}

uint64_t GESSVersionNumberMinor(cv3d::cv::gess *a1)
{
  return cv3d::cv::gess::MINOR_VERSION(a1);
}

uint64_t GESSVersionNumberPatch(cv3d::cv::gess *a1)
{
  return cv3d::cv::gess::PATCH_VERSION(a1);
}

void sub_23C5F9CC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5F9F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23C5FA018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23C5FA15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FA294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_23C5FA45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_23C5FA640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_23C5FAB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C5FAE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C5FB040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_23C5FB2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_23C5FB3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23C5FB598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB6C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB758(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB7F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FB920(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *>((int)&v18, __str, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_23C5FBA9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23C5FBAA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*,cv3d::cv::gess::mesh::ObjMaterial*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial&,cv3d::cv::gess::mesh::ObjMaterial*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_23C5FBB6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,cv3d::cv::gess::mesh::ObjMaterial&,cv3d::cv::gess::mesh::ObjMaterial*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_23C5FBBE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *,cv3d::cv::gess::mesh::ObjMaterial *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string::size_type *p_size;

  v5 = __str;
  if (__str != a3)
  {
    p_size = &__str[1].__r_.__value_.__l.__size_;
    do
    {
      std::string::operator=(this, v5);
      if (v5 != this)
        std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>((uint64_t **)&this[1], (_QWORD *)v5[1].__r_.__value_.__l.__data_, p_size);
      v5 += 2;
      this += 2;
      p_size += 6;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = *((_DWORD *)v9 + 7);
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_multi<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(v5, (_QWORD *)((char *)a2 + 28));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_23C5FBDD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_multi<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,unsigned short> const&>(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  *(uint64_t *)((char *)v4 + 28) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v7 + 7) <= (int)v5)
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t std::vector<cv3d::cv::gess::mesh::Texture>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, int *a2, int *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<cv3d::cv::gess::mesh::Texture>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<cv3d::cv::gess::math::RayT<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::Texture>,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = &a2[4 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4)];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *>((uint64_t)&v17, a2, v13, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::Texture>,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (uint64_t)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *>((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      result = std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_23C5FC0A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23C5FC0A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::mesh::Texture>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::Texture>,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture&,cv3d::cv::gess::mesh::Texture*>(a4 + v7, (int *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_23C5FC170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 48;
    do
    {
      std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(v4 + v2);
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture&,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v3 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v3;
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 6);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_23C5FC218(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

int *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *,cv3d::cv::gess::mesh::Texture *>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int *v5;
  int *v6;
  int v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    *(_WORD *)(a4 + 4) = *((_WORD *)v5 + 2);
    *(_DWORD *)a4 = v7;
    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(a4 + 8), (uint64_t *)v5 + 1);
    std::string::operator=((std::string *)(a4 + 24), (const std::string *)v5 + 1);
    a4 += 48;
    v5 += 12;
  }
  while (v5 != v6);
  return v6;
}

uint64_t **std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned short>,std::__tree_node<std::__value_type<std::string,unsigned short>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_WORD *)v8 + 28) = *((_WORD *)v9 + 28);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::string>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_23C5FC41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)(v4 + 32)) & 0x80) == 0)
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_multi<std::pair<std::string const,unsigned short> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::string>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_23C5FC54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::pair<std::string const,unsigned short> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_WORD *)v6 + 28) = *(_WORD *)(a2 + 24);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_23C5FC5F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t GESSIOLoadObjFile(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  __int16 v21;
  char v22;
  int v23;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "meshType") == -1 || !objc_msgSend(v4, "meshType"))
  {
    v12 = 0;
  }
  else
  {
    v5 = (void *)MEMORY[0x2426214AC]();
    v23 = 3;
    v21 = 257;
    v22 = 1;
    if (objc_msgSend(v4, "meshType") == 1)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v19);
      __p[0] = v19;
      __p[1] = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      objc_msgSend(v4, "setMeshImpl:", __p);
      v8 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v9 = (unint64_t *)((char *)__p[1] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      objc_msgSend(v3, "path", __p[0]);
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v11, "UTF8String"));
      v12 = cv3d::cv::gess::io::LoadObjFile((__int128 *)__p, v19, &v21);
      if (v18 < 0)
        operator delete(__p[0]);

      v13 = v20;
      if (v20)
      {
        v14 = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      v12 = 1;
    }
    objc_autoreleasePoolPop(v5);
  }

  return v12;
}

void sub_23C5FC7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a14 < 0)
    operator delete(__p);

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t GESSIOSaveObjFile(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t **v6;
  id v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  BOOL v12[4];
  int v13;
  __int16 v14;
  _QWORD *v15[3];
  _QWORD *v16[4];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v4, "valid") & 1) != 0)
  {
    v5 = (void *)MEMORY[0x2426214AC]();
    v13 = 1;
    cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v15);
    v12[0] = 1;
    v14 = 257;
    v6 = (uint64_t **)objc_msgSend(v4, "meshImpl");
    if (objc_msgSend(v4, "meshType") == 1)
    {
      cv3d::cv::gess::io::ProvideAutoSavingNormalType(v6, &v13);
      v12[0] = v13 != 0;
      objc_msgSend(v3, "path");
      v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v7, "UTF8String"));
      v8 = cv3d::cv::gess::io::SaveObjFile((uint64_t)__p, (uint64_t)v6, (uint64_t)v12);
      if (v11 < 0)
        operator delete(__p[0]);

    }
    else
    {
      v8 = 1;
    }
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v16, v16[1]);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v15, v15[1]);
    objc_autoreleasePoolPop(v5);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_23C5FC95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a14 < 0)
    operator delete(__p);

  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a15);
  _Unwind_Resume(a1);
}

BOOL GESSIOLoadTexturedObjFile(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  id v12;
  _BOOL8 ObjFile;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *__p[2];
  char v22;
  void *v23;
  std::__shared_weak_count *v24;
  __int16 v25;
  char v26;
  int v27;
  char *v28;
  std::__shared_weak_count *v29;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "meshType") == -1 || !objc_msgSend(v4, "meshType"))
  {
    ObjFile = 0;
  }
  else
  {
    v5 = (void *)MEMORY[0x2426214AC]();
    v6 = (char *)operator new(0x60uLL);
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = &off_250D4ADF0;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_QWORD *)v6 + 11) = 0;
    *(_OWORD *)(v6 + 24) = 0u;
    *((_QWORD *)v6 + 9) = v6 + 80;
    v28 = v6 + 24;
    v29 = (std::__shared_weak_count *)v6;
    objc_msgSend(v4, "setMaterialImpl:", &v28);
    v25 = 257;
    v26 = 1;
    v27 = 2;
    if (objc_msgSend(v4, "meshType") == 1)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v23);
      __p[0] = v23;
      __p[1] = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      objc_msgSend(v4, "setMeshImpl:", __p);
      v9 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v10 = (unint64_t *)((char *)__p[1] + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      objc_msgSend(v3, "path", __p[0]);
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v12, "UTF8String"));
      ObjFile = cv3d::cv::gess::io::LoadObjFile((__int128 *)__p, (uint64_t)v23, (uint64_t)v28, (uint64_t)&v25);
      if (v22 < 0)
        operator delete(__p[0]);

      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      ObjFile = 1;
    }
    v17 = v29;
    if (v29)
    {
      v18 = (unint64_t *)&v29->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    objc_autoreleasePoolPop(v5);
  }

  return ObjFile;
}

void sub_23C5FCBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  if (a14 < 0)
    operator delete(__p);

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

uint64_t GESSIOSaveTexturedObjFile(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  uint64_t *v21;
  void *context;
  void *__p[2];
  char v24;
  char v25[4];
  int v26;
  __int16 v27;
  _QWORD *v28[3];
  _QWORD *v29[4];

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "valid") && objc_msgSend(v4, "materialImpl"))
  {
    v5 = MEMORY[0x2426214AC]();
    v6 = (uint64_t **)objc_msgSend(v4, "meshImpl");
    v7 = objc_msgSend(v4, "materialImpl");
    v26 = 1;
    cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v28);
    context = (void *)v5;
    v25[0] = 1;
    v27 = 257;
    v8 = operator new(0x34uLL);
    v9 = 0;
    v8[12] = 13;
    *(_OWORD *)v8 = xmmword_23C60CE20;
    *((_OWORD *)v8 + 1) = unk_23C60CE30;
    *((_OWORD *)v8 + 2) = xmmword_23C60CE40;
    do
    {
      v10 = &v8[v9];
      v11 = v8[v9];
      v12 = v11 > 0xB;
      v13 = (1 << v11) & 0x888;
      if (v12 || v13 == 0)
      {
        __p[0] = &v8[v9];
        v17 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t)v28, v10, (uint64_t)&std::piecewise_construct, (int **)__p);
        if (*((char *)v17 + 95) < 0)
        {
          v17[10] = 4;
          v16 = (uint64_t *)v17[9];
        }
        else
        {
          v16 = v17 + 9;
          *((_BYTE *)v17 + 95) = 4;
        }
        *(_DWORD *)v16 = 1735290926;
      }
      else
      {
        __p[0] = &v8[v9];
        v15 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t)v28, v10, (uint64_t)&std::piecewise_construct, (int **)__p);
        if (*((char *)v15 + 95) < 0)
        {
          v15[10] = 4;
          v16 = (uint64_t *)v15[9];
        }
        else
        {
          v16 = v15 + 9;
          *((_BYTE *)v15 + 95) = 4;
        }
        *(_DWORD *)v16 = 1920492846;
      }
      *((_BYTE *)v16 + 4) = 0;
      ++v9;
    }
    while (v9 != 13);
    if (objc_msgSend(v4, "meshType") == 1)
    {
      cv3d::cv::gess::io::ProvideAutoSavingNormalType(v6, &v26);
      if (!v26)
        v25[0] = 0;
      objc_msgSend(v3, "path", v7);
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v18, "UTF8String"));
      v19 = cv3d::cv::gess::io::SaveObjFile((char *)__p, (uint64_t)v6, v21, (uint64_t)v25);
      if (v24 < 0)
        operator delete(__p[0]);

    }
    else
    {
      v19 = 1;
    }
    operator delete(v8);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v29, v29[1]);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v28, v28[1]);
    objc_autoreleasePoolPop(context);
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_23C5FCED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a19 < 0)
    operator delete(__p);

  operator delete(v21);
  cv3d::cv::gess::io::SaveObjOption::~SaveObjOption((cv3d::cv::gess::io::SaveObjOption *)&a20);

  _Unwind_Resume(a1);
}

void sub_23C5FD8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  cv3d::cv::gess::io::LoadObjContents::~LoadObjContents((cv3d::cv::gess::io::LoadObjContents *)va);
  _Unwind_Resume(a1);
}

void sub_23C5FDB40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDBB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDC28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDC9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDD10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDD84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDDF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDE6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

void sub_23C5FDF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FDFC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FE084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FE21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::TopologyQuality::Description@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v4;
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  cv3d::cv::gess::alg::operator<<(&v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v5[-1] + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[0] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x242621128](&v7);
}

void sub_23C5FE2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t GESSAlgMeasureTopologyQuality(void *a1, void *a2)
{
  id v3;
  id v4;
  cv3d::cv::gess::alg *v5;
  TopologyQuality *v6;
  uint64_t v7;
  __int128 v9;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0)
  {
    v5 = (cv3d::cv::gess::alg *)objc_msgSend(v3, "meshImpl", 0, 0, 0, 0);
    v7 = cv3d::cv::gess::alg::MeasureTopologyQuality(v5, (const cv3d::cv::gess::mesh::PolyMesh *)&v9, v6);
    if ((v7 & 1) != 0)
      objc_msgSend(v4, "setQualityImpl:", &v9);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_23C5FE39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C5FE460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C5FE510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::GeometryQuality::Description@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v4;
  _QWORD v5[10];
  char v6;
  uint64_t v7;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v4);
  cv3d::cv::gess::alg::operator<<(&v4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v5, a1);
  v4 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v5[-1] + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v5[0] = MEMORY[0x24BEDB848] + 16;
  if (v6 < 0)
    operator delete((void *)v5[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x242621128](&v7);
}

void sub_23C5FE5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t GESSAlgMeasureGeometryQuality(void *a1, void *a2)
{
  id v3;
  id v4;
  __int128 v5;
  float32x4_t *v6;
  GeometryQuality *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int32x4_t v12;
  __int128 v13;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0)
  {
    LODWORD(v11) = 0;
    *(_QWORD *)&v5 = 0x80000000800000;
    *((_QWORD *)&v5 + 1) = 0x80000000800000;
    v12 = vdupq_n_s32(0x7F7FFFFFu);
    v13 = v5;
    v6 = (float32x4_t *)objc_msgSend(v3, "meshImpl", 0, 0, v11);
    v8 = cv3d::cv::gess::alg::MeasureGeometryQuality(v6, (const cv3d::cv::gess::mesh::PolyMesh *)&v10, v7);
    if ((v8 & 1) != 0)
      objc_msgSend(v4, "setQualityImpl:", &v10);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_23C5FE6B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_23C5FE78C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x242621128](v1);
  _Unwind_Resume(a1);
}

_QWORD *cv3d::cv::gess::alg::operator<<(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"--- TopologyQuality ---", 23);
  v19 = 10;
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v19, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"vertices: ", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  v20 = 10;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v20, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"halfedges: ", 11);
  v5 = (_QWORD *)std::ostream::operator<<();
  v21 = 10;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v21, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"boundary halfedges: ", 20);
  v7 = (_QWORD *)std::ostream::operator<<();
  v22 = 10;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"edges: ", 7);
  v9 = (_QWORD *)std::ostream::operator<<();
  v23 = 10;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v23, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"faces: ", 7);
  v11 = (_QWORD *)std::ostream::operator<<();
  v24 = 10;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v24, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"boundary loops: ", 16);
  v13 = (_QWORD *)std::ostream::operator<<();
  v25 = 10;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"genus: ", 7);
  v15 = (_QWORD *)std::ostream::operator<<();
  v26 = 10;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v26, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"connected components: ", 22);
  v17 = (_QWORD *)std::ostream::operator<<();
  v27 = 10;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v27, 1);
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"--- GeometryQuality ---", 23);
  v16 = 10;
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)&v16, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"average edge length: ", 21);
  v3 = (_QWORD *)std::ostream::operator<<();
  v17 = 10;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v17, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"average vertex valence: ", 24);
  v5 = (_QWORD *)std::ostream::operator<<();
  v18 = 10;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v18, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"vertex valence deviation: ", 26);
  v7 = (_QWORD *)std::ostream::operator<<();
  v19 = 10;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v19, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"edge length standard deviation: ", 32);
  v9 = (_QWORD *)std::ostream::operator<<();
  v20 = 10;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v20, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"face angle standard deviation: ", 31);
  v11 = (_QWORD *)std::ostream::operator<<();
  v21 = 10;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"axis aligned bounding box: ", 27);
  v14 = cv3d::cv::gess::math::operator<<(v13);
  v22 = 10;
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v22, 1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x242621128](a1 + 112);
  return a1;
}

_QWORD *cv3d::cv::gess::math::operator<<(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"min: (", 6);
  v1 = (_QWORD *)cv3d::cv::gess::math::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"), max: (", 9);
  v2 = (_QWORD *)cv3d::cv::gess::math::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)")", 1);
}

void tinyexr::miniz::tdefl_compress_normal()
{
  __assert_rtn("tdefl_find_match", "tinyexr.h", 3929, "max_match_len <= TDEFL_MAX_MATCH_LEN");
}

{
  __assert_rtn("tdefl_compress_normal", "tinyexr.h", 4305, "d->m_lookahead_size >= len_to_move");
}

void tinyexr::miniz::tdefl_compress_normal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("tdefl_record_match", "tinyexr.h", a3, "(match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE)");
}

void tinyexr::miniz::tdefl_flush_block()
{
  __assert_rtn("tdefl_flush_block", "tinyexr.h", 3826, "d->m_pOutput_buf < d->m_pOutput_buf_end");
}

{
  __assert_rtn("tdefl_flush_block", "tinyexr.h", 3749, "!d->m_output_flush_remaining");
}

void tdefl_compress_buffer_cold_1()
{
  __assert_rtn("tdefl_compress_buffer", "tinyexr.h", 4417, "d->m_pPut_buf_func");
}

void tinyexr::LevelIndex()
{
  __assert_rtn("LevelIndex", "tinyexr.h", 11071, "false");
}

void tinyexr::ConvertHeader()
{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10987, "false");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10977, "!exr_header->tiled");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10979, "exr_header->tiled");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10982, "exr_header->tiled");
}

{
  __assert_rtn("ConvertHeader", "tinyexr.h", 10985, "!exr_header->tiled");
}

void tinyexr::PrecalculateTileInfo()
{
  __assert_rtn("CalculateNumXLevels", "tinyexr.h", 11677, "false");
}

{
  __assert_rtn("CalculateNumYLevels", "tinyexr.h", 11715, "false");
}

void tinyexr::InitTileOffsets()
{
  __assert_rtn("InitTileOffsets", "tinyexr.h", 11808, "false");
}

{
  __assert_rtn("InitTileOffsets", "tinyexr.h", 11777, "offset_data.num_x_levels == offset_data.num_y_levels");
}

void tinyexr::miniz::tdefl_compress_block()
{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3541, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3542, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3549, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3552, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3713, "d->m_huff_code_sizes[0][lit]");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3718, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3714, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3695, "d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3708, "d->m_huff_code_sizes[1][sym]");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3710, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3709, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3699, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_compress_lz_codes", "tinyexr.h", 3697, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3557, "code < TDEFL_MAX_HUFF_SYMBOLS_2");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3561, "bits <= ((1U << len) - 1U)");
}

{
  __assert_rtn("tdefl_start_dynamic_block", "tinyexr.h", 3558, "bits <= ((1U << len) - 1U)");
}

void tinyexr::ReconstructLineOffsets()
{
  __assert_rtn("ReconstructLineOffsets", "tinyexr.h", 11581, "offsets->size() == n");
}

{
  __assert_rtn("ReconstructLineOffsets", "tinyexr.h", 11580, "head < marker");
}

void tinyexr::CalculateNumTiles()
{
  __assert_rtn("CalculateNumTiles", "tinyexr.h", 11727, "l <= std::numeric_limits<int>::max() - size + 1");
}

void tinyexr::LevelSize()
{
  __assert_rtn("LevelSize", "tinyexr.h", 11077, "level >= 0");
}

void tinyexr::DecodeTiledLevel()
{
  __assert_rtn("DecodeTiledLevel", "tinyexr.h", 11098, "num_y_tiles");
}

{
  __assert_rtn("DecodeTiledLevel", "tinyexr.h", 11100, "num_x_tiles");
}

void tinyexr::AllocateImage()
{
  __assert_rtn("AllocateImage", "tinyexr.h", 10590, "0");
}

{
  __assert_rtn("AllocateImage", "tinyexr.h", 10577, "0");
}

void tinyexr::DecodePixelData()
{
  __assert_rtn("DecodePixelData", "tinyexr.h", 10363, "0");
}

{
  __assert_rtn("DecodePixelData", "tinyexr.h", 10424, "0");
}

void cv3d::cv::gess::mesh::QuadMesh::InitVF()
{
  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
}

void cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices()
{
  __assert_rtn("GetFaceVertices", "QuadMesh.cpp", 87, "fh.Valid() && vhs.empty()");
}

void cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges()
{
  __assert_rtn("GetFaceHEdges", "QuadMesh.cpp", 98, "fh.Valid() && hhs.empty()");
}

void cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>()
{
  __assert_rtn("attribute", "AttributeContainer.h", 111, "attributes_[h.Index()] != nullptr");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 112, "attributes_[h.Index()]->internal_type_id() == gess::util::os::GetTypeID<T>()");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 110, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_0("operator[]", "Attribute.h", a3, "index < data_.size()");
}

void cv3d::cv::gess::mesh::PolyMesh::_AddFace()
{
  __assert_rtn("_AddFace", "PolyMesh.cpp", 116, "vh[i] != vh[j]");
}

void cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>()
{
  __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
}

void cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>()
{
  __assert_rtn("attribute", "AttributeContainer.h", 129, "attributes_[h.Index()] != nullptr");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 130, "attributes_[h.Index()]->internal_type_id() == gess::util::os::GetTypeID<T>()");
}

{
  __assert_rtn("attribute", "AttributeContainer.h", 128, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_3("attribute", "AttributeContainer.h", a3, "attributes_[h.Index()] != nullptr");
}

{
  OUTLINED_FUNCTION_2("attribute", "AttributeContainer.h", a3, "attributes_[h.Index()]->internal_type_id() == gess::util::os::GetTypeID<T>()");
}

{
  OUTLINED_FUNCTION_1("attribute", "AttributeContainer.h", a3, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_4("Remove", "AttributeContainer.h", a3, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::mesh::OneRingVertex::NextVertex()
{
  __assert_rtn("h", "Topology.cpp", 86, "ValidHandle(hh)");
}

void cv3d::cv::gess::mesh::Topology::vertex()
{
  __assert_rtn("vertex", "Topology.cpp", 44, "ValidHandle(vh)");
}

{
  __assert_rtn("vertex", "Topology.cpp", 57, "ValidHandle(vh)");
}

void cv3d::cv::gess::mesh::Topology::hedge()
{
  __assert_rtn("hedge", "Topology.cpp", 48, "ValidHandle(hh)");
}

{
  __assert_rtn("hedge", "Topology.cpp", 61, "ValidHandle(hh)");
}

void cv3d::cv::gess::mesh::Topology::face()
{
  __assert_rtn("face", "Topology.cpp", 52, "ValidHandle(fh)");
}

{
  __assert_rtn("face", "Topology.cpp", 65, "ValidHandle(fh)");
}

void cv3d::cv::gess::mesh::Topology::v(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_1("v", "Topology.cpp", a3, "ValidHandle(vh)");
}

void cv3d::cv::gess::mesh::Topology::h()
{
  __assert_rtn("h", "Topology.cpp", 74, "ValidHandle(hh)");
}

void cv3d::cv::gess::mesh::Topology::f()
{
  __assert_rtn("f", "Topology.cpp", 78, "ValidHandle(fh)");
}

{
  __assert_rtn("f", "Topology.cpp", 90, "ValidHandle(fh)");
}

void cv3d::cv::gess::mesh::Topology::v()
{
  __assert_rtn("v", "Topology.cpp", 82, "ValidHandle(vh)");
}

void cv3d::cv::gess::mesh::Topology::SetPrevNext()
{
  __assert_rtn("SetPrevNext", "Topology.cpp", 95, "hh1.Valid() && hh2.Valid()");
}

void cv3d::cv::gess::mesh::Topology::SetTwin()
{
  __assert_rtn("SetTwin", "Topology.cpp", 100, "hh1.Valid() && hh2.Valid()");
}

void cv3d::cv::gess::mesh::Topology::SetFace()
{
  __assert_rtn("SetFace", "Topology.cpp", 105, "fh.Valid() && hh.Valid()");
}

void cv3d::cv::gess::mesh::Topology::SetStart()
{
  __assert_rtn("SetStart", "Topology.cpp", 110, "hh.Valid() && vh.Valid()");
}

void cv3d::cv::gess::mesh::Topology::SetHEdge()
{
  __assert_rtn("SetHEdge", "Topology.cpp", 116, "vh.Valid() && hh.Valid()");
}

void cv3d::cv::gess::mesh::Topology::AppendVertex()
{
  __assert_rtn("handle", "Topology.h", 169, "size_t(&v - &vertices_.front()) < vertices_.size()");
}

void cv3d::cv::gess::mesh::Topology::AppendHEdge()
{
  __assert_rtn("handle", "Topology.h", 173, "size_t(&he - &hedges_.front()) < hedges_.size()");
}

void cv3d::cv::gess::mesh::Topology::AppendFace()
{
  __assert_rtn("handle", "Topology.h", 177, "size_t(&f - &faces_.front()) < faces_.size()");
}

void cv3d::cv::gess::mesh::TriMesh::GetFaceVertices()
{
  __assert_rtn("GetFaceVertices", "TriMesh.cpp", 123, "fh.Valid() && vhs.size() == 3");
}

void cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges()
{
  __assert_rtn("GetFaceHEdges", "TriMesh.cpp", 131, "fh.Valid() && hhs.size() == 3");
}

void cv3d::cv::gess::mesh::TriMesh::FlipEdge()
{
  __assert_rtn("FlipEdge", "TriMesh.cpp", 149, "HEdgeNext(h5) == h3");
}

{
  __assert_rtn("FlipEdge", "TriMesh.cpp", 147, "HEdgeNext(h2) == h0");
}

void cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge()
{
  __assert_rtn("SplitBoundaryEdge", "TriMesh.cpp", 514, "is_boundary(bh6)");
}

void cv3d::cv::gess::mesh::TriMesh::SplitEdge()
{
  __assert_rtn("SplitEdge", "TriMesh.cpp", 333, "v2.Index() != v3.Index()");
}

{
  __assert_rtn("SplitEdge", "TriMesh.cpp", 325, "HEdgeNext(h5) == h3");
}

{
  __assert_rtn("SplitEdge", "TriMesh.cpp", 323, "HEdgeNext(h2) == h0");
}

void cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge()
{
  __assert_rtn("CollapseBoundaryEdge", "TriMesh.cpp", 766, "is_fulledge_boundary(hh)");
}

{
  __assert_rtn("CollapseBoundaryEdge", "TriMesh.cpp", 779, "va == HEdgeEnd(h1)");
}

{
  __assert_rtn("CollapseBoundaryEdge", "TriMesh.cpp", 773, "HEdgeNext(h1) == h2");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump()
{
  __assert_rtn("dump", "json.hpp", 15798, "false");
}

{
  __assert_rtn("dump", "json.hpp", 15573, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15574, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15601, "i != val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15602, "std::next(i) == val.m_value.object->cend()");
}

{
  __assert_rtn("dump", "json.hpp", 15643, "!val.m_value.array->empty()");
}

{
  __assert_rtn("dump", "json.hpp", 15664, "!val.m_value.array->empty()");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped()
{
  __assert_rtn("dump_escaped", "json.hpp", 16064, "false");
}

{
  __assert_rtn("dump_escaped", "json.hpp", 16001, "false");
}

void nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>()
{
  __assert_rtn("dump_integer", "json.hpp", 16165, "n_chars < number_buffer.size() - 1");
}

void nlohmann::detail::to_chars<double>()
{
  __assert_rtn("to_chars", "json.hpp", 15420, "last - first >= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15430, "len <= std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15438, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
}

{
  __assert_rtn("to_chars", "json.hpp", 15439, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
}

{
  __assert_rtn("to_chars", "json.hpp", 15402, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2<double>()
{
  __assert_rtn("grisu2", "json.hpp", 15228, "value > 0");
}

{
  __assert_rtn("grisu2", "json.hpp", 15227, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::format_buffer()
{
  __assert_rtn("format_buffer", "json.hpp", 15317, "min_exp < 0");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15318, "max_exp > 0");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15264, "e > -1000");
}

{
  __assert_rtn("append_exponent", "json.hpp", 15265, "e < 1000");
}

{
  __assert_rtn("format_buffer", "json.hpp", 15344, "k > n");
}

void nlohmann::detail::dtoa_impl::compute_boundaries<double>()
{
  __assert_rtn("compute_boundaries", "json.hpp", 14524, "value > 0");
}

{
  __assert_rtn("compute_boundaries", "json.hpp", 14523, "std::isfinite(value)");
}

void nlohmann::detail::dtoa_impl::grisu2()
{
  __assert_rtn("grisu2", "json.hpp", 15166, "m_plus.e == v.e");
}

{
  __assert_rtn("grisu2", "json.hpp", 15165, "m_plus.e == m_minus.e");
}

void nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent()
{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14804, "e >= -1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14805, "e <= 1500");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14810, "index >= 0");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14814, "kAlpha <= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14815, "kGamma >= cached.e + e + 64");
}

{
  __assert_rtn("get_cached_power_for_binary_exponent", "json.hpp", 14811, "static_cast<std::size_t>(index) < kCachedPowers.size()");
}

void nlohmann::detail::dtoa_impl::grisu2_digit_gen()
{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14939, "M_plus.e >= kAlpha");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14940, "M_plus.e <= kGamma");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14961, "p1 > 0");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 14997, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15095, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15104, "d <= 9");
}

{
  __assert_rtn("grisu2_digit_gen", "json.hpp", 15084, "p2 > delta");
}

void nlohmann::detail::dtoa_impl::grisu2_round()
{
  __assert_rtn("grisu2_round", "json.hpp", 14883, "len >= 1");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14884, "dist <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14885, "rest <= delta");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14886, "ten_k > 0");
}

{
  __assert_rtn("grisu2_round", "json.hpp", 14911, "buf[len - 1] != '0'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal()
{
  __assert_rtn("scan_literal", "json.hpp", 7174, "std::char_traits<char_type>::to_char_type(current) == literal_text[0]");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string()
{
  __assert_rtn("scan_string", "json.hpp", 6251, "0x00 <= codepoint && codepoint <= 0x10FFFF");
}

{
  __assert_rtn("scan_string", "json.hpp", 6131, "current == '\\\"'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number()
{
  __assert_rtn("scan_number", "json.hpp", 6880, "false");
}

{
  __assert_rtn("scan_number", "json.hpp", 7160, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7127, "endptr == token_buffer.data() + token_buffer.size()");
}

{
  __assert_rtn("scan_number", "json.hpp", 7143, "endptr == token_buffer.data() + token_buffer.size()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget()
{
  __assert_rtn("unget", "json.hpp", 7266, "!token_string.empty()");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint()
{
  __assert_rtn("get_codepoint", "json.hpp", 6069, "0x0000 <= codepoint && codepoint <= 0xFFFF");
}

{
  __assert_rtn("get_codepoint", "json.hpp", 6043, "current == 'u'");
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range()
{
  __assert_rtn("next_byte_in_range", "json.hpp", 6090, "ranges.size() == 2 || ranges.size() == 4 || ranges.size() == 6");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object()
{
  __assert_rtn("end_object", "json.hpp", 5613, "!ref_stack.empty()");
}

{
  __assert_rtn("end_object", "json.hpp", 5614, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array()
{
  __assert_rtn("end_array", "json.hpp", 5665, "!ref_stack.empty()");
}

{
  __assert_rtn("end_array", "json.hpp", 5666, "!keep_stack.empty()");
}

void nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_2("handle_value", "json.hpp", a3, "!keep_stack.empty()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->()
{
  __assert_rtn("operator->", "json.hpp", 11047, "m_object != nullptr");
}

{
  __assert_rtn("operator->", "json.hpp", 11053, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator->", "json.hpp", 11059, "m_it.array_iterator != m_object->m_value.array->end()");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++()
{
  __assert_rtn("operator++", "json.hpp", 11092, "m_object != nullptr");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==()
{
  __assert_rtn("operator==", "json.hpp", 11173, "m_object != nullptr");
}

void nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_0("handle_value", "json.hpp", a3, "ref_stack.back()->is_array() || ref_stack.back()->is_object()");
}

{
  OUTLINED_FUNCTION_1_0("handle_value", "json.hpp", a3, "object_element");
}

void nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*()
{
  __assert_rtn("operator*", "json.hpp", 11010, "m_object != nullptr");
}

{
  __assert_rtn("operator*", "json.hpp", 11016, "m_it.object_iterator != m_object->m_value.object->end()");
}

{
  __assert_rtn("operator*", "json.hpp", 11022, "m_it.array_iterator != m_object->m_value.array->end()");
}

void cv3d::cv::gess::io::WriteUsdaGeometry()
{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 244, "f_group_id_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 245, "m_uvs_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 246, "m_group_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 247, "m_groupid_to_objmat_ah.Valid()");
}

{
  __assert_rtn("WriteUsdaGeometry", "UsdaIO.cpp", 243, "f_uv_id_tri_ah.Valid() || f_uv_id_quad_ah.Valid()");
}

void cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_1("attribute", "AttributeContainer.h", a3, "attributes_[h.Index()] != nullptr");
}

{
  OUTLINED_FUNCTION_1_1("attribute", "AttributeContainer.h", a3, "attributes_[h.Index()]->internal_type_id() == gess::util::os::GetTypeID<T>()");
}

{
  OUTLINED_FUNCTION_0_3("attribute", "AttributeContainer.h", a3, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::io::MeshToArray<float,unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_2("operator[]", "Attribute.h", a3, "index < data_.size()");
}

void cv3d::cv::gess::io::MeshFromObjContents()
{
  __assert_rtn("MeshFromObjContents", "MeshIO.cpp", 802, "attribute_size == mesh.FSize()");
}

{
  __assert_rtn("MeshFromObjContents", "MeshIO.cpp", 768, "attribute_size == mesh.FSize()");
}

{
  __assert_rtn("MeshFromObjContents", "MeshIO.cpp", 732, "attribute_size == mesh.FSize()");
}

void cv3d::cv::gess::math::EdgeDihedral()
{
  __assert_rtn("EdgeDihedral", "Differential.cpp", 242, "!mesh.IsDangling(hh)");
}

void cv3d::cv::gess::internal::CalculateWeight()
{
  __assert_rtn("CalculateWeight", "FillHoleMinimumWeight.cpp", 105, "boundary_vhs.size() >= 1");
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>()
{
  __assert_rtn("operator[]", "json.hpp", 20222, "m_value.object->find(key) != m_value.object->end()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AddNode()
{
  __assert_rtn("AddNode", "Vis_Maxflow.cpp", 56, "size_t(m_nodeNumber) < nodes.size()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AddEdge()
{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 77, "nodes[size_t(n0)].edges.size() <= 6");
}

{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 88, "nodes[size_t(n1)].edges.size() <= 6");
}

{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 93, "eid1 == reverse_edge(eid0)");
}

{
  __assert_rtn("AddEdge", "Vis_Maxflow.cpp", 92, "eid0 == reverse_edge(eid1)");
}

void cv3d::cv::gess::isochart::CMaxFlow::push_active()
{
  __assert_rtn("push_active", "Vis_Maxflow.h", 131, "nid >= 0");
}

void cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath()
{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 221, "n.to_t()");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 206, "m.is_free()");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 213, "e_nm.res > 0");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 240, "m.is_free()");
}

{
  __assert_rtn("FindAugmentPath", "Vis_Maxflow.cpp", 247, "e_mn.res > 0");
}

void cv3d::cv::gess::isochart::CMaxFlow::trace_current_path()
{
  __assert_rtn("trace_current_path", "Vis_Maxflow.cpp", 276, "the_eid != invalid_edge_id() && edges[size_t(the_eid)].res > 0");
}

{
  __assert_rtn("trace_current_path", "Vis_Maxflow.cpp", 307, "node_pm.to_t()");
}

{
  __assert_rtn("trace_current_path", "Vis_Maxflow.cpp", 284, "node_qn.to_s()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath()
{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 331, "!current_path.empty()");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 335, "ns.resident > 0");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 338, "mt.resident < 0");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 352, "bottleneck > 0");
}

{
  __assert_rtn("AugmentCurrentPath", "Vis_Maxflow.cpp", 359, "orphan_list.empty()");
}

void cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st()
{
  __assert_rtn("connecting_to_st", "Vis_Maxflow.cpp", 418, "std::fabs(q.resident) >= std::numeric_limits<float>::min()");
}

void cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans()
{
  __assert_rtn("AdoptOrphans", "Vis_Maxflow.cpp", 443, "std::fabs(p.resident) <= std::numeric_limits<float>::min()");
}

void cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow()
{
  __assert_rtn("ComputeMaxFlow", "Vis_Maxflow.h", 93, "m_nodeNumber == nodes.size()");
}

void cv3d::cv::gess::isochart::Geodesic::HEdgeLength()
{
  __assert_rtn("HEdgeLength", "Geodesic.h", 119, "hh.Index() < mesh_.HSize()");
}

void cv3d::cv::gess::internal::Quad2Triangles()
{
  __assert_rtn("Quad2Triangles", "QuadCommon.cpp", 22, "h_diagonal_handle.Valid()");
}

{
  __assert_rtn("Quad2Triangles", "QuadCommon.cpp", 21, "fh_hhs.size() == 4");
}

void cv3d::cv::gess::internal::Pentagon2Triangles()
{
  __assert_rtn("Pentagon2Triangles", "QuadCommon.cpp", 62, "h_diagonal_handle.Valid()");
}

{
  __assert_rtn("Pentagon2Triangles", "QuadCommon.cpp", 61, "fh_hhs.size() == 5");
}

void cv3d::cv::gess::internal::ComputeVertexAreas()
{
  __assert_rtn("ComputeVertexAreas", "QuadCommon.cpp", 670, "vi == mesh.HEdgeStart(hh).Index()");
}

void cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_2("handle", "Topology.h", a3, "size_t(&he - &hedges_.front()) < hedges_.size()");
}

void cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_3("handle", "Topology.h", a3, "size_t(&v - &vertices_.front()) < vertices_.size()");
}

void cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_4("handle", "Topology.h", a3, "size_t(&f - &faces_.front()) < faces_.size()");
}

void cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>()
{
  __assert_rtn("Remove", "AttributeContainer.h", 193, "h.Index() >= 0 && h.Index() < attributes_.size()");
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Insert()
{
  __assert_rtn("Insert", "EdgeErrorHeap.h", 46, "heap_node_items_[edge_index].IsEmpty()");
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Remove()
{
  __assert_rtn("Remove", "EdgeErrorHeap.h", 76, "!heap_node_items_[edge_index].IsEmpty()");
}

{
  __assert_rtn("Remove", "EdgeErrorHeap.h", 80, "heap_node_items_[edge_index].IsEmpty()");
}

void cv3d::cv::gess::internal::Quadric::optimal()
{
  __assert_rtn("optimal", "QEMQuadric.h", 46, "aDet");
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Update()
{
  __assert_rtn("Update", "EdgeErrorHeap.h", 98, "!heap_node_items_[edge_index].IsEmpty()");
}

{
  __assert_rtn("Update", "EdgeErrorHeap.h", 97, "edge_index < heap_node_items_.size()");
}

void cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles()
{
  __assert_rtn("CheckDegenerateTriangles", "Collapser.cpp", 182, "mesh_.HEdgeStart(hh) == mesh_.HEdgeStart(target_) || mesh_.HEdgeStart(hh) == mesh_.HEdgeEnd(target_)");
}

void cv3d::cv::gess::internal::Collapser::Collapse()
{
  __assert_rtn("Collapse", "Collapser.cpp", 295, "h6 == h4");
}

{
  __assert_rtn("Collapse", "Collapser.cpp", 294, "va == mesh_.HEdgeEnd(h4)");
}

void cv3d::cv::gess::internal::Collapser::Reject()
{
  __assert_rtn("Reject", "Collapser.h", 79, "f_removed_ == 0");
}

void cv3d::cv::gess::internal::Collapser::CollapseBoundary()
{
  __assert_rtn("CollapseBoundary", "Collapser.cpp", 437, "va == mesh_.HEdgeEnd(h1)");
}

{
  __assert_rtn("CollapseBoundary", "Collapser.cpp", 431, "mesh_.HEdgeNext(h1) == h2");
}

void cv3d::cv::gess::internal::EdgeErrorHeap::Penalize()
{
  __assert_rtn("Penalize", "EdgeErrorHeap.h", 109, "Contains(edge_index)");
}

void cv3d::cv::gess::internal::CalculateFaceLabels()
{
  __assert_rtn("CalculateFaceLabels", "BlenderUV2.cpp", 65, "fn_handle.Valid()");
}

void cv3d::cv::gess::internal::BipartitionChart()
{
  __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 835, "in_seed0.Valid() && in_seed1.Valid()");
}

{
  __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 836, "in_seed0 != in_seed1");
}

{
  __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 837, "chart_faces.size() >= 2");
}

void cv3d::cv::gess::internal::BipartitionChartWithDiagonal()
{
  __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 252, "in_seed0.Valid() && in_seed1.Valid()");
}

{
  __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 253, "in_seed0 != in_seed1");
}

{
  __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 254, "chart_faces.size() >= 2");
}

void cv3d::cv::gess::internal::AddChart()
{
  __assert_rtn("AddChart", "XAtlasPacking.cpp", 197, "atlas_image.pixel(static_cast<uint32_t>(xx), static_cast<uint32_t>(yy))[0] == false");
}

void cv3d::cv::gess::isochart::IsoChart::DoParameterize()
{
  __assert_rtn("DoParameterize", "IsoChart.cpp", 114, "children_has_genus.empty()");
}

{
  __assert_rtn("DoParameterize", "IsoChart.cpp", 113, "children_mesh.empty()");
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;

  OUTLINED_FUNCTION_5();
  do
    OUTLINED_FUNCTION_1_4(v0);
  while (v2);
  if (!v1)
  {
    OUTLINED_FUNCTION_0_5();
    OUTLINED_FUNCTION_2_3();
  }
  OUTLINED_FUNCTION_3_0();
}

void cv3d::cv::gess::isochart::IsoMap::Init()
{
  __assert_rtn("Init", "IsoMap.cpp", 26, "pGeodesicMatrix != nullptr");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 28, "m_fSumOfEigenValue == 0.0");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 30, "!m_pfMatrixB");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 29, "m_dwPrimaryDimension == 0");
}

{
  __assert_rtn("Init", "IsoMap.cpp", 27, "m_dwCalculatedDimension == 0");
}

void cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen()
{
  __assert_rtn("ComputeLargestEigen", "IsoMap.cpp", 97, "m_pfMatrixB != nullptr");
}

{
  __assert_rtn("ComputeLargestEigen", "IsoMap.cpp", 98, "m_pfAvgSquaredDstColumn != nullptr");
}

{
  __assert_rtn("ComputeLargestEigen", "IsoMap.cpp", 99, "dwSelectedDimension <= m_dwMatrixDimension");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV()
{
  __assert_rtn("CalSubchartsLandmarkUV", "MeshOptimizeBoundaries.cpp", 624, "landmark_vertices_.size() > 0");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion()
{
  __assert_rtn("CalculateLandmarkAndFuzzyRegion", "MeshOptimizeBoundaries.cpp", 480, "father_ != nullptr");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV()
{
  __assert_rtn("CalculateLandmarkUV", "MeshOptimizeBoundaries.cpp", 651, "!vert_geodesic_distance.empty()");
}

{
  __assert_rtn("CalculateLandmarkUV", "MeshOptimizeBoundaries.cpp", 652, "father_ != nullptr");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion()
{
  __assert_rtn("CalculateFaceGeodesicDistortion", "MeshOptimizeBoundaries.cpp", 880, "dimension <= ORIGINAL_CHART_EIGEN_DIMENSION");
}

void cv3d::cv::gess::isochart::TetrisPacking::SortCharts()
{
  __assert_rtn("SortCharts", "TetrisPacking.cpp", 1300, "sorted_chart_index_.size() == chart_number_");
}

void cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture()
{
  __assert_rtn("PrepareMultiTexture", "TetrisPacking.cpp", 1311, "charts_total_area_ > 0");
}

{
  __assert_rtn("PrepareMultiTexture", "TetrisPacking.cpp", 1326, "chart_number_ > 1");
}

{
  __assert_rtn("PrepareMultiTexture", "TetrisPacking.cpp", 1330, "charts_info_[sorted_chart_index_[i]].area > 0");
}

void cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack()
{
  __assert_rtn("PrepareRepack", "TetrisPacking.cpp", 798, "size > 0");
}

void cv3d::cv::gess::isochart::TetrisPacking::DoTessellation()
{
  __assert_rtn("DoTessellation", "TetrisPacking.cpp", 950, "num_x <= int(curr_chart_uv_board_.size())");
}

{
  __assert_rtn("DoTessellation", "TetrisPacking.cpp", 951, "num_y <= int(curr_chart_uv_board_.size())");
}

void cv3d::cv::gess::isochart::CollectLandmarks()
{
  __assert_rtn("CollectLandmarks", "IsoChartLandmark.cpp", 124, "v_imp_ah.Valid()");
}

void cv3d::cv::gess::isochart::GetSubFaceVid()
{
  __assert_rtn("GetSubFaceVid", "IMTComputation.cpp", 14, "sub_face_vids.size() == SUBDIV_FACE_NUMBER");
}

void cv3d::cv::gess::isochart::HEdgeSignalLength()
{
  __assert_rtn("HEdgeSignalLength", "IMTComputation.cpp", 339, "fh0.Valid()");
}

void cv3d::cv::gess::isochart::MergeToRootMesh()
{
  __assert_rtn("MergeToRootMesh", "IsoChartUtils.cpp", 61, "f_uv_id_ah.Valid()");
}

{
  __assert_rtn("MergeToRootMesh", "IsoChartUtils.cpp", 62, "m_uvs_ah.Valid()");
}

void cv3d::cv::gess::isochart::FindAllBoundaries()
{
  __assert_rtn("FindAllBoundaries", "IsoChartUtils.cpp", 322, "vert_boundary_id.size() == mesh.VSize()");
}

void cv3d::cv::gess::isochart::ResetUV()
{
  __assert_rtn("ResetUV", "IsoChartUtils.cpp", 413, "uvs_ah.Valid()");
}

void cv3d::cv::gess::isochart::CalculateInfiniteStretchArea()
{
  __assert_rtn("CalculateInfiniteStretchArea", "IsoChartUtils.cpp", 535, "mesh.FSize() == f_stretchs.size()");
}

void cv3d::cv::gess::isochart::CalculateInfiniteStretch2DAreaRatio()
{
  __assert_rtn("CalculateInfiniteStretch2DAreaRatio", "IsoChartUtils.cpp", 550, "mesh.FSize() == f_stretchs.size()");
}

void cv3d::cv::gess::isochart::IsVertexManifold(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v5;
    operator delete(v5);
  }
}

void cv3d::cv::gess::isochart::CalculateFaceLnStretch()
{
  __assert_rtn("CalculateFaceLnStretch", "IsoChartUtils.cpp", 615, "temp >= 0.0");
}

{
  __assert_rtn("CalculateFaceLnStretch", "IsoChartUtils.cpp", 618, "temp1 >= 0.0");
}

void cv3d::cv::gess::isochart::MeasureTriMeshLnStretch()
{
  __assert_rtn("MeasureTriMeshLnStretch", "IsoChartUtils.cpp", 738, "mesh.attribute(uvs_ah).Size() == mesh.VSize()");
}

void cv3d::cv::gess::isochart::MeasureUvUtilization()
{
  __assert_rtn("MeasureUvUtilization", "IsoChartUtils.cpp", 889, "uvs_ah.Valid()");
}

{
  __assert_rtn("MeasureUvUtilization", "IsoChartUtils.cpp", 890, "f_uvid_ah.Valid()");
}

{
  __assert_rtn("MeasureUvUtilization", "IsoChartUtils.cpp", 891, "g_ah.Valid()");
}

void cv3d::cv::gess::isochart::ExportFaceColorMap()
{
  __assert_rtn("ExportFaceColorMap", "IsoChartUtils.cpp", 924, "mesh.FSize() == f_colors.size()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart()
{
  __assert_rtn("TryMergeChart", "MergeCharts.cpp", 657, "chart1 != nullptr");
}

{
  __assert_rtn("TryMergeChart", "MergeCharts.cpp", 658, "chart2 != nullptr");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts()
{
  __assert_rtn("CollectSharedVerts", "MergeCharts.cpp", 730, "v_id_root_chart1_ah.Valid()");
}

{
  __assert_rtn("CollectSharedVerts", "MergeCharts.cpp", 731, "v_id_root_chart2_ah.Valid()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology()
{
  __assert_rtn("CheckMergingTopology", "MergeCharts.cpp", 791, "!shared_vertex_list.empty()");
}

_QWORD *cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*result == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*result)
      return result;
    v2 = 5;
    a2 = (_QWORD *)*result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 8 * v2))(a2);
}

void cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord()
{
  __assert_rtn("CalculateVertMappingCoord", "IsoChartMesh.cpp", 343, "primary_eigen_dimension_ >= 2");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra()
{
  __assert_rtn("CalculateGeodesicDistanceToVertexDijkstra", "IsoChartMesh.cpp", 203, "geodesic_distances.size() == mesh_.VSize()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::RetreiveVertDijkstraPathToSource()
{
  __assert_rtn("RetreiveVertDijkstraPathToSource", "IsoChartMesh.cpp", 637, "mesh_.is_boundary(mesh::VertexHandle(dijkstra_path[dijkstra_path.size() - 1]))");
}

{
  __assert_rtn("RetreiveVertDijkstraPathToSource", "IsoChartMesh.cpp", 636, "mesh_.is_boundary(mesh::VertexHandle(dijkstra_path[0]))");
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindSplitPath()
{
  __assert_rtn("FindSplitPath", "IsoChartMesh.cpp", 776, "!dijkstra_path.empty()");
}

{
  __assert_rtn("FindSplitPath", "IsoChartMesh.cpp", 784, "start_cut_id > 0");
}

{
  __assert_rtn("FindSplitPath", "IsoChartMesh.cpp", 789, "dijkstra_path[i] != INVALID_INDEX");
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindAdjacentHEdgeToSplit()
{
  __assert_rtn("FindAdjacentHEdgeToSplit", "IsoChartMesh.cpp", 803, "mesh_.is_boundary(vh)");
}

{
  __assert_rtn("FindAdjacentHEdgeToSplit", "IsoChartMesh.cpp", 802, "adj_hhs.empty()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::SmoothPartitionResult()
{
  __assert_rtn("SmoothPartitionResult", "MeshPartitionChart.cpp", 253, "max_sub_chart_count > 0");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch()
{
  __assert_rtn("CalculateAllFaceStretch", "MeshOptimizeStretch.cpp", 405, "f_area_ah.Valid()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeStretch()
{
  __assert_rtn("OptimizeStretch", "MeshOptimizeStretch.cpp", 220, "!heap_items[i]->IsItemInHeap()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalFaceSquaredStretch()
{
  __assert_rtn("CalFaceSquaredStretch", "MeshOptimizeStretch.cpp", 388, "f_imt_ah_.Valid()");
}

void cv3d::cv::gess::isochart::GetAdjacentFaces()
{
  __assert_rtn("GetAdjacentFaces", "IsoChartUtils.h", 148, "fhs.empty()");
}

void cv3d::cv::gess::isochart::GetAdjacentHEdges()
{
  __assert_rtn("GetAdjacentHEdges", "IsoChartUtils.h", 174, "hhs.empty()");
}

void cv3d::cv::gess::isochart::IsoChartMesh::PrepareBoundaryVertOpt()
{
  __assert_rtn("PrepareBoundaryVertOpt", "MeshOptimizeStretch.cpp", 535, "mesh_.is_boundary(opt_vh)");
}

void cv3d::cv::gess::isochart::IsoChartMesh::PrepareInternalVertOpt()
{
  __assert_rtn("PrepareInternalVertOpt", "MeshOptimizeStretch.cpp", 612, "adj_v_size > 0");
}

void cv3d::cv::gess::alg::internal::GenerateCustomizedEdgeDistanceMap(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing()
{
  __assert_rtn("ExplicitUmbrellaSmoothing", "Smooth.cpp", 235, "vertex_lamdas.size() == mesh.VSize()");
}

void cv3d::cv::gess::alg::Parameterize()
{
  __assert_rtn("Parameterize", "Parameterization.cpp", 124, "fn_handle.Valid()");
}

void cv3d::cv::gess::alg::SortFaceByGroupID()
{
  __assert_rtn("SortFaceByGroupID", "Parameterization.cpp", 734, "f_gid_handle.Valid()");
}

{
  __assert_rtn("SortFaceByGroupID", "Parameterization.cpp", 752, "f_gid_handle.Valid()");
}

void cv3d::cv::gess::alg::SortFaceByGroupID32Bit()
{
  __assert_rtn("SortFaceByGroupID32Bit", "Parameterization.cpp", 766, "f_gid_handle.Valid()");
}

{
  __assert_rtn("SortFaceByGroupID32Bit", "Parameterization.cpp", 797, "f_gid_handle.Valid()");
}

void cv3d::cv::gess::alg::AdjustGivenMapNumberAndResolution()
{
  __assert_rtn("AdjustGivenMapNumberAndResolution", "InternalBake.cpp", 84, "map_number > 0");
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x24BDBBE38](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x24BDBC040](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x24BDBC060]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB80]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBDB88]();
}

void CGColorSpaceGetColorTable(CGColorSpaceRef space, uint8_t *table)
{
  MEMORY[0x24BDBDBF8](space, table);
}

size_t CGColorSpaceGetColorTableCount(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC00](space);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x24BDBDC10](space);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x24BDBE168](provider);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE190](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x24BDBE1C8](provider);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x24BDBE5E0](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x24BDD9048](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x24BDD9088](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x24BDD9090](idst);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x24BDBE638](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x24BDBE658](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x24BDBE668](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x24BDBE680](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x24BDBE6E0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x24BDBE770](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x24BDD9148](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x24BDD9158](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x24BDD9180](url, options);
}

CGImageSourceStatus CGImageSourceGetStatus(CGImageSourceRef isrc)
{
  return MEMORY[0x24BDD9198](isrc);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x24BDDD1E0]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x24BEDA978](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x24BEDA9C0](this, __s);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__extension(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA08](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA10](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA18](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__stem(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA40](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x24BEDAA48](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB40](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB60](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
  MEMORY[0x24BEDABD8](__ns);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC20](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x24BEDACE8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x24BEDADD8]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x24BEDADE0]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x24BEDADF0]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x24BEDADF8]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE80]();
}

{
  return MEMORY[0x24BEDAE88]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x24BEDAEF0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF70]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x24BEDB038](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
  MEMORY[0x24BEDB040](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x24BEDB110](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x24BEDB198]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

BOOL std::__fs::filesystem::__create_directory(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x24BEDB280](a1, a2);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::path::replace_extension(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *__replacement)
{
  return (std::__fs::filesystem::path *)MEMORY[0x24BEDB2D8](this, __replacement);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB308](a1, __ec);
}

float std::stof(const std::string *__str, size_t *__idx)
{
  float result;

  MEMORY[0x24BEDB328](__str, __idx);
  return result;
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x24BEDB390](__str, __idx, *(_QWORD *)&__base);
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x24BEDB460]();
}

void std::thread::join(std::thread *this)
{
  MEMORY[0x24BEDB468](this);
}

void std::thread::~thread(std::thread *this)
{
  MEMORY[0x24BEDB478](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x24BEDB5F8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x24BEDB660](this);
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
  MEMORY[0x24BEDB670](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_250D48FB0();
}

void operator delete(void *__p)
{
  off_250D48FB8(__p);
}

uint64_t operator delete()
{
  return off_250D48FC0();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_250D48FC8(__sz, a2);
}

uint64_t operator new[]()
{
  return off_250D48FD0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_250D48FD8(__sz);
}

uint64_t operator new()
{
  return off_250D48FE0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC938](*(_QWORD *)&a1);
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
  MEMORY[0x24BDACF10](termFunc, objAddr);
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x24BDAD110](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x24BDAD258](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  MEMORY[0x24BDADC98](iterations, queue, context, work);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x24BDAE6D0]();
}

int getrusage(int a1, rusage *a2)
{
  return MEMORY[0x24BDAE738](*(_QWORD *)&a1, a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x24BDAEA90]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x24BDAF818](a1, a2, a3, a4);
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x24BDAF980](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x24BDAF9A8](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x24BDAFA10]();
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

int sgeev_(char *__jobvl, char *__jobvr, __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__wr, __CLPK_real *__wi, __CLPK_real *__vl, __CLPK_integer *__ldvl, __CLPK_real *__vr, __CLPK_integer *__ldvr, __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x24BDB2F30](__jobvl, __jobvr, __n, __a, __lda, __wr, __wi, __vl);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

void srand(unsigned int a1)
{
  MEMORY[0x24BDAFE80](*(_QWORD *)&a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x24BDAFF80](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x24BDAFFD0](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0010](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0030](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x24BDB0040](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x24BDB0180](*(_QWORD *)&target_task, *(_QWORD *)&flavor, task_info_out, task_info_outCnt);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x24BDB0380](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x24BDB0390](*(_QWORD *)&target_task, address, size);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

