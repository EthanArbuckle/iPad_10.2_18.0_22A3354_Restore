void sub_23C5531AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23C553B68()
{
  JUMPOUT(0x23C553290);
}

void sub_23C553B78()
{
  JUMPOUT(0x23C5532ACLL);
}

void sub_23C553B88()
{
  JUMPOUT(0x23C5532C8);
}

void sub_23C553B98()
{
  JUMPOUT(0x23C5532E4);
}

void sub_23C553BA8()
{
  JUMPOUT(0x23C553300);
}

void sub_23C553BB8()
{
  JUMPOUT(0x23C55331CLL);
}

void sub_23C553BC8()
{
  JUMPOUT(0x23C553338);
}

void sub_23C553BD8()
{
  JUMPOUT(0x23C553354);
}

void sub_23C553BE8()
{
  JUMPOUT(0x23C553370);
}

void sub_23C553BF8()
{
  JUMPOUT(0x23C55338CLL);
}

void sub_23C553C08()
{
  JUMPOUT(0x23C5533A8);
}

void sub_23C553C18()
{
  JUMPOUT(0x23C5533C4);
}

void sub_23C553C28()
{
  JUMPOUT(0x23C5533E0);
}

void sub_23C553C38()
{
  JUMPOUT(0x23C5533FCLL);
}

void sub_23C553C48()
{
  JUMPOUT(0x23C553418);
}

void sub_23C553C58()
{
  JUMPOUT(0x23C553434);
}

void sub_23C553C68()
{
  JUMPOUT(0x23C553450);
}

void sub_23C553C78()
{
  JUMPOUT(0x23C55346CLL);
}

void sub_23C553C88()
{
  JUMPOUT(0x23C553488);
}

void sub_23C553C98()
{
  JUMPOUT(0x23C5534A8);
}

void sub_23C553CA8()
{
  JUMPOUT(0x23C5534C8);
}

void sub_23C553CBC()
{
  JUMPOUT(0x23C5534E4);
}

void sub_23C553CD4()
{
  JUMPOUT(0x23C553500);
}

void sub_23C553CEC()
{
  JUMPOUT(0x23C55351CLL);
}

void sub_23C553D04()
{
  JUMPOUT(0x23C553538);
}

void sub_23C553D1C()
{
  JUMPOUT(0x23C553554);
}

void sub_23C553D34()
{
  JUMPOUT(0x23C553570);
}

void sub_23C553D4C()
{
  JUMPOUT(0x23C55358CLL);
}

void sub_23C553D64()
{
  JUMPOUT(0x23C5535A8);
}

void sub_23C553D7C()
{
  JUMPOUT(0x23C5535C4);
}

void sub_23C553D94()
{
  JUMPOUT(0x23C5535E0);
}

void sub_23C553DB8()
{
  JUMPOUT(0x23C553628);
}

void sub_23C553DC4()
{
  JUMPOUT(0x23C553630);
}

void sub_23C553DD4()
{
  JUMPOUT(0x23C553650);
}

void sub_23C553DE4()
{
  JUMPOUT(0x23C553670);
}

void sub_23C553DF8()
{
  JUMPOUT(0x23C55368CLL);
}

void sub_23C553E10()
{
  JUMPOUT(0x23C5536A8);
}

void sub_23C553E28()
{
  JUMPOUT(0x23C5536C4);
}

void sub_23C553E40()
{
  JUMPOUT(0x23C5536E0);
}

void sub_23C553E58()
{
  JUMPOUT(0x23C5536FCLL);
}

void sub_23C553E70()
{
  JUMPOUT(0x23C553718);
}

void sub_23C553E88()
{
  JUMPOUT(0x23C553734);
}

void sub_23C553EA8()
{
  JUMPOUT(0x23C55377CLL);
}

void sub_23C553EB4()
{
  JUMPOUT(0x23C553784);
}

void sub_23C553EC4()
{
  JUMPOUT(0x23C5537A0);
}

void sub_23C553ED4()
{
  JUMPOUT(0x23C5537BCLL);
}

void sub_23C553EE4()
{
  JUMPOUT(0x23C5537E0);
}

void sub_23C553EF4()
{
  JUMPOUT(0x23C553804);
}

void sub_23C553F08()
{
  JUMPOUT(0x23C553820);
}

void sub_23C553F20()
{
  JUMPOUT(0x23C55383CLL);
}

void sub_23C553F38()
{
  JUMPOUT(0x23C553858);
}

void sub_23C553F50()
{
  JUMPOUT(0x23C553874);
}

void sub_23C553F68()
{
  JUMPOUT(0x23C553890);
}

void sub_23C553F80()
{
  JUMPOUT(0x23C5538ACLL);
}

void sub_23C553F98()
{
  JUMPOUT(0x23C5538C8);
}

void sub_23C553FB0()
{
  JUMPOUT(0x23C5538E4);
}

void sub_23C553FC8()
{
  JUMPOUT(0x23C553900);
}

void sub_23C553FE0()
{
  JUMPOUT(0x23C553920);
}

void sub_23C554004()
{
  JUMPOUT(0x23C553970);
}

void sub_23C554010()
{
  JUMPOUT(0x23C55397CLL);
}

void sub_23C554020()
{
  JUMPOUT(0x23C5539A0);
}

void sub_23C554030()
{
  JUMPOUT(0x23C5539C4);
}

void sub_23C554044()
{
  JUMPOUT(0x23C5539E4);
}

void sub_23C55405C()
{
  JUMPOUT(0x23C553A04);
}

void sub_23C554074()
{
  JUMPOUT(0x23C553A24);
}

void sub_23C55408C()
{
  JUMPOUT(0x23C553A44);
}

void sub_23C5540A4()
{
  JUMPOUT(0x23C553A64);
}

void sub_23C5540BC()
{
  JUMPOUT(0x23C553A84);
}

void sub_23C5540D4()
{
  JUMPOUT(0x23C553AA4);
}

void sub_23C5540F8()
{
  JUMPOUT(0x23C553AF4);
}

void sub_23C554104()
{
  JUMPOUT(0x23C553B00);
}

void sub_23C554110()
{
  JUMPOUT(0x23C553B00);
}

void sub_23C554124()
{
  JUMPOUT(0x23C553B50);
}

void `anonymous namespace'::GetBakeErrorCodeStringPairs(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  uint64_t i;
  unsigned int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v3 = 0;
    std::string::basic_string[abi:ne180100]<0>(v4, "ERROR_NONE");
    v5 = 1;
    std::string::basic_string[abi:ne180100]<0>(v6, "ERROR_OUT_OF_MEMORY");
    v7 = 2;
    std::string::basic_string[abi:ne180100]<0>(v8, "ERROR_GPU_OUT_OF_MEMORY");
    v9 = 3;
    std::string::basic_string[abi:ne180100]<0>(v10, "ERROR_UNEXPECTED_LOW_INTERSECT_RATE");
    v11 = 4;
    std::string::basic_string[abi:ne180100]<0>(v12, "ERROR_NO_AVAILABLE_METAL_LIB");
    v13 = 5;
    std::string::basic_string[abi:ne180100]<0>(v14, "ERROR_INVALID_METAL_LIBRARY");
    for (i = 0; i != -24; i -= 4)
    {
      if (SHIBYTE(v14[i + 2]) < 0)
        operator delete((void *)v14[i]);
    }
  }
}

void sub_23C5542B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 191) < 0)
      operator delete(*(void **)(v1 + v3 + 168));
    v3 -= 32;
    if (v3 == -192)
    {
      _Unwind_Resume(a1);
    }
  }
}

void sub_23C554328()
{
  JUMPOUT(0x23C554314);
}

uint64_t cv3d::cv::gess::io::internal::Json2ReportBake(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  unsigned __int8 *v95;
  _BYTE *v96;
  char *v97;
  char *v98;
  char *v99;
  unsigned __int8 *v100;
  _BYTE *v101;
  _BYTE *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  _BYTE *v107;
  _BYTE *v108;
  char *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  std::string *v117;
  std::string *v118;
  std::string *v119;
  uint64_t *v120;
  std::string::size_type size;
  std::string *v122;
  std::string::size_type v123;
  unsigned __int8 *v124;
  std::string::size_type v125;
  unsigned __int8 *v126;
  BOOL v127;
  BOOL v128;
  std::string *v129;
  std::string *v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  std::string __p;
  unint64_t v147[2];
  uint64_t *v148;
  std::string v149;

  v4 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "load_high_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v4, (double *)v147);
  *(_QWORD *)a2 = v147[0];
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v6 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v5, "n_vertices");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v6, (unsigned int *)v147);
  *(_DWORD *)(a2 + 8) = v147[0];
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v8 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v7, "n_half_edges");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v8, (unsigned int *)v147);
  *(_DWORD *)(a2 + 12) = v147[0];
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v10 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v9, "n_boundary_half_edges");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v10, (unsigned int *)v147);
  *(_DWORD *)(a2 + 16) = v147[0];
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v12 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v11, "n_edges");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v12, (unsigned int *)v147);
  *(_DWORD *)(a2 + 20) = v147[0];
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v14 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v13, "n_faces");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v14, (unsigned int *)v147);
  *(_DWORD *)(a2 + 24) = v147[0];
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v16 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v15, "n_boundary_loops");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v16, (unsigned int *)v147);
  *(_DWORD *)(a2 + 28) = v147[0];
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v18 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v17, "n_genus");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v18, (unsigned int *)v147);
  *(_DWORD *)(a2 + 32) = v147[0];
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_topology");
  v20 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v19, "n_components");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v20, (unsigned int *)v147);
  *(_DWORD *)(a2 + 36) = v147[0];
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v22 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v21, "avg_edge_length");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v22, (float *)v147);
  *(_DWORD *)(a2 + 48) = v147[0];
  v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v24 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v23, "avg_vertex_valence");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v24, (float *)v147);
  *(_DWORD *)(a2 + 52) = v147[0];
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v26 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v25, "vertex_valence_deviation");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v26, (float *)v147);
  *(_DWORD *)(a2 + 56) = v147[0];
  v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v28 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v27, "edge_length_SD");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v28, (float *)v147);
  *(_DWORD *)(a2 + 60) = v147[0];
  v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v30 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v29, "face_angle_SD");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v30, (float *)v147);
  *(_DWORD *)(a2 + 64) = v147[0];
  v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v32 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v31, "bbox_min_x");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v32, (float *)v147);
  LODWORD(v33) = v147[0];
  v140 = v33;
  v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v35 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v34, "bbox_min_y");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v35, (float *)v147);
  v36 = v140;
  DWORD1(v36) = v147[0];
  v141 = v36;
  v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v38 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v37, "bbox_min_z");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v38, (float *)v147);
  v39 = v141;
  DWORD2(v39) = v147[0];
  v142 = v39;
  v40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v41 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v40, "bbox_max_x");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v41, (float *)v147);
  LODWORD(v42) = v147[0];
  v136 = v42;
  v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v44 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v43, "bbox_max_y");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v44, (float *)v147);
  v45 = v136;
  DWORD1(v45) = v147[0];
  v137 = v45;
  v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "high_mesh_geometry");
  v47 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v46, "bbox_max_z");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v47, (float *)v147);
  v48 = v137;
  DWORD2(v48) = v147[0];
  *(_OWORD *)(a2 + 80) = v142;
  *(_OWORD *)(a2 + 96) = v48;
  v49 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "load_low_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v49, (double *)v147);
  *(_QWORD *)(a2 + 112) = v147[0];
  v50 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "simplify_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v50, (double *)v147);
  *(_QWORD *)(a2 + 120) = v147[0];
  v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v52 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v51, "n_vertices");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v52, (unsigned int *)v147);
  *(_DWORD *)(a2 + 128) = v147[0];
  v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v54 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v53, "n_half_edges");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v54, (unsigned int *)v147);
  *(_DWORD *)(a2 + 132) = v147[0];
  v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v56 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v55, "n_boundary_half_edges");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v56, (unsigned int *)v147);
  *(_DWORD *)(a2 + 136) = v147[0];
  v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v58 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v57, "n_edges");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v58, (unsigned int *)v147);
  *(_DWORD *)(a2 + 140) = v147[0];
  v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v60 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v59, "n_faces");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v60, (unsigned int *)v147);
  *(_DWORD *)(a2 + 144) = v147[0];
  v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v62 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v61, "n_boundary_loops");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v62, (unsigned int *)v147);
  *(_DWORD *)(a2 + 148) = v147[0];
  v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v64 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v63, "n_genus");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v64, (unsigned int *)v147);
  *(_DWORD *)(a2 + 152) = v147[0];
  v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_topology");
  v66 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v65, "n_components");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v66, (unsigned int *)v147);
  *(_DWORD *)(a2 + 156) = v147[0];
  v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v68 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v67, "avg_edge_length");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v68, (float *)v147);
  *(_DWORD *)(a2 + 160) = v147[0];
  v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v70 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v69, "avg_vertex_valence");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v70, (float *)v147);
  *(_DWORD *)(a2 + 164) = v147[0];
  v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v72 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v71, "vertex_valence_deviation");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v72, (float *)v147);
  *(_DWORD *)(a2 + 168) = v147[0];
  v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v74 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v73, "edge_length_SD");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v74, (float *)v147);
  *(_DWORD *)(a2 + 172) = v147[0];
  v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v76 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v75, "face_angle_SD");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v76, (float *)v147);
  *(_DWORD *)(a2 + 176) = v147[0];
  v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v78 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v77, "bbox_min_x");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v78, (float *)v147);
  LODWORD(v79) = v147[0];
  v143 = v79;
  v80 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v81 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v80, "bbox_min_y");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v81, (float *)v147);
  v82 = v143;
  DWORD1(v82) = v147[0];
  v144 = v82;
  v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v84 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v83, "bbox_min_z");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v84, (float *)v147);
  v85 = v144;
  DWORD2(v85) = v147[0];
  v145 = v85;
  v86 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v87 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v86, "bbox_max_x");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v87, (float *)v147);
  LODWORD(v88) = v147[0];
  v138 = v88;
  v89 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v90 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v89, "bbox_max_y");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v90, (float *)v147);
  v91 = v138;
  DWORD1(v91) = v147[0];
  v139 = v91;
  v92 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "low_mesh_geometry");
  v93 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v92, "bbox_max_z");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v93, (float *)v147);
  v94 = v139;
  DWORD2(v94) = v147[0];
  *(_OWORD *)(a2 + 192) = v145;
  *(_OWORD *)(a2 + 208) = v94;
  v95 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "chart_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v95, (double *)v147);
  *(_QWORD *)(a2 + 224) = v147[0];
  v96 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "chart_number");
  v147[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v96, v147);
  *(_QWORD *)(a2 + 232) = v147[0];
  v97 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "chart_max_stretch_ratio");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v97, (float *)v147);
  *(_DWORD *)(a2 + 240) = v147[0];
  v98 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "chart_avg_stretch_ratio");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v98, (float *)v147);
  *(_DWORD *)(a2 + 244) = v147[0];
  v99 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "chart_self_intersect_ratio");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v99, (float *)v147);
  *(_DWORD *)(a2 + 248) = v147[0];
  v100 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "pack_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v100, (double *)v147);
  *(_QWORD *)(a2 + 256) = v147[0];
  v101 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "pack_img_number");
  v147[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v101, v147);
  *(_QWORD *)(a2 + 264) = v147[0];
  v102 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mesh_repair");
  v147[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v102, v147);
  *(_QWORD *)(a2 + 272) = v147[0];
  v103 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "mesh_processing_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v103, (double *)v147);
  *(_QWORD *)(a2 + 280) = v147[0];
  v104 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "rasterize_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v104, (double *)v147);
  *(_QWORD *)(a2 + 288) = v147[0];
  v105 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "build_ray_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v105, (double *)v147);
  *(_QWORD *)(a2 + 296) = v147[0];
  v106 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "retrieve_attribute_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v106, (double *)v147);
  *(_QWORD *)(a2 + 304) = v147[0];
  v107 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "intersected_number_of_rays");
  v147[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v107, v147);
  *(_QWORD *)(a2 + 312) = v147[0];
  v108 = (_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "total_number_of_rays");
  v147[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v108, v147);
  *(_QWORD *)(a2 + 320) = v147[0];
  v109 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "intersected_rate");
  LODWORD(v147[0]) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v109, (float *)v147);
  *(_DWORD *)(a2 + 328) = v147[0];
  v110 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "min_disp");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v110, (double *)v147);
  *(_QWORD *)(a2 + 336) = v147[0];
  v111 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "max_disp");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v111, (double *)v147);
  *(_QWORD *)(a2 + 344) = v147[0];
  v112 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "imaging_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v112, (double *)v147);
  *(_QWORD *)(a2 + 352) = v147[0];
  v113 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "generate_ao_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v113, (double *)v147);
  *(_QWORD *)(a2 + 360) = v147[0];
  v114 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "generate_maps_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v114, (double *)v147);
  *(_QWORD *)(a2 + 368) = v147[0];
  v115 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "save_time");
  v147[0] = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v115, (double *)v147);
  *(_QWORD *)(a2 + 376) = v147[0];
  v116 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "error_code");
  v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>(v116, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v149, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v149 = __p;
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v118 = (std::string *)((char *)&v149 + HIBYTE(v149.__r_.__value_.__r.__words[2]));
  else
    v118 = (std::string *)(v149.__r_.__value_.__r.__words[0] + v149.__r_.__value_.__l.__size_);
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v119 = &v149;
  else
    v119 = (std::string *)v149.__r_.__value_.__r.__words[0];
  while (v119 != v118)
  {
    v117 = (std::string *)__toupper(v119->__r_.__value_.__s.__data_[0]);
    v119->__r_.__value_.__s.__data_[0] = (char)v117;
    v119 = (std::string *)((char *)v119 + 1);
  }
  v120 = v148;
  if (!v148)
  {
LABEL_48:
    v134 = 0;
    goto LABEL_50;
  }
  size = HIBYTE(v149.__r_.__value_.__r.__words[2]);
  v122 = &v149;
  if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v149.__r_.__value_.__l.__size_;
    v122 = (std::string *)v149.__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    v123 = *((unsigned __int8 *)v120 + 47);
    if (*((char *)v120 + 47) < 0)
      break;
    if (*((_BYTE *)v120 + 47))
      goto LABEL_19;
LABEL_37:
    v120 = (uint64_t *)*v120;
    if (!v120)
      goto LABEL_48;
  }
  if (!v120[4])
    goto LABEL_37;
LABEL_19:
  v124 = (unsigned __int8 *)v120[3];
  if ((v123 & 0x80u) != 0)
    v123 = v120[4];
  else
    v124 = (unsigned __int8 *)(v120 + 3);
  if (size >= v123)
    v125 = v123;
  else
    v125 = size;
  v126 = (unsigned __int8 *)v122 + v125;
  if (v123)
    v127 = v125 == 0;
  else
    v127 = 1;
  if (v127)
  {
    v130 = (std::string *)((char *)v122 + v125);
  }
  else
  {
    v129 = v122;
    v130 = (std::string *)((char *)v122 + v125);
    do
    {
      if (v129->__r_.__value_.__s.__data_[0] == *v124)
      {
        v131 = 1;
        while (v123 != v131)
        {
          if ((unsigned __int8 *)((char *)v129 + v131) == v126)
            goto LABEL_31;
          v132 = v129->__r_.__value_.__s.__data_[v131];
          v133 = v124[v131++];
          if (v132 != v133)
            goto LABEL_40;
        }
        v130 = v129;
      }
LABEL_40:
      v129 = (std::string *)((char *)v129 + 1);
    }
    while (v129 != (std::string *)v126);
  }
LABEL_31:
  v128 = v130 != (std::string *)v126 || v123 == 0;
  if (!v128 || v130 != v122)
    goto LABEL_37;
  v134 = *((_DWORD *)v120 + 4);
LABEL_50:
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::~__hash_table((uint64_t)v147);
  if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v149.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(a2 + 384) = v134;
  return 1;
}

void sub_23C554F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(uint64_t a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  nlohmann::detail::exception *exception;
  char *v7;
  std::string v8;
  std::string v9;
  char *v10;

  v10 = a2;
  if (*(_BYTE *)a1 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v7 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v8, v7);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v8, &v9);
    nlohmann::detail::type_error::create(305, (uint64_t)&v9, exception);
  }
  v3 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(*(_QWORD *)(a1 + 8), &v10);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 + 8 == v3)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>();
  return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(v4, &v10)+ 56;
}

void sub_23C55507C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::BakeErrorCode,std::string>::unordered_map(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::BakeErrorCode,std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_23C555140(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::BakeErrorCode,std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C555368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::string *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  LODWORD(v8->__r_.__value_.__r.__words[2]) = *(_DWORD *)a3;
  v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_23C555420(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::BakeErrorCode,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::BakeErrorCode,std::pair<cv3d::cv::gess::alg::BakeErrorCode const,std::string> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23C555560(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[19]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[19]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C5556A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[25]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[25]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C555738(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[14]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[14]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C5557C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[24]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[24]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C555858(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[27],char [27],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[27]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[27]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C5558E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::find<char const*>(uint64_t a1, char **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v3 + 32), *a2);
    if (v6 >= 0)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
      v5 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(v5 + 32), *a2) << 24) >= 1)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v3;
  const void *v4;
  size_t v5;
  size_t v6;

  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  v6 = strlen(__s);
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(v4, v5, __s, v6);
}

unsigned __int8 *nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(unsigned __int8 *result, double *a2)
{
  char *v2;
  int v3;
  double v4;
  nlohmann::detail::exception *exception;
  char *v6;
  std::string v7;
  std::string v8;

  v2 = (char *)result;
  v3 = *result;
  switch(v3)
  {
    case 5:
      v4 = (double)*((uint64_t *)result + 1);
      break;
    case 7:
      v4 = *((double *)result + 1);
      break;
    case 6:
      v4 = (double)*((unint64_t *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v6 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v7, v6);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be number, but is ", &v7, &v8);
      nlohmann::detail::type_error::create(302, (uint64_t)&v8, exception);
  }
  *a2 = v4;
  return result;
}

void sub_23C555AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t cv3d::cv::gess::io::internal::ReportQuad2Json(float *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  char v12;
  uint64_t *v13;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  _BYTE v23[8];
  uint64_t *v24;
  _BYTE v25[8];
  uint64_t *v26;
  _BYTE v27[16];
  _BYTE *v28;
  char v29;
  _BYTE v30[16];
  uint64_t v31;
  char v32;
  _BYTE v33[16];
  _BYTE *v34;
  char v35;
  _BYTE v36[8];
  _QWORD v37[2];
  char v38;
  _BYTE v39[16];
  _BYTE *v40;
  char v41;
  _BYTE v42[8];
  _QWORD v43[2];
  char v44;
  _BYTE v45[16];
  _BYTE *v46;
  char v47;
  _BYTE v48[8];
  _QWORD v49[2];
  char v50;
  _BYTE v51[16];
  _BYTE *v52;
  char v53;
  _BYTE v54[8];
  _QWORD v55[2];
  char v56;
  _BYTE v57[16];
  _BYTE *v58;
  char v59;
  _BYTE v60[8];
  _QWORD v61[2];
  char v62;
  _BYTE v63[16];
  _BYTE *v64;
  char v65;
  _BYTE v66[8];
  _QWORD v67[2];
  char v68;
  _BYTE v69[16];
  _BYTE *v70;
  char v71;
  _QWORD v72[3];
  char v73;
  _QWORD v74[3];
  char v75;
  _QWORD v76[3];
  char v77;
  _QWORD v78[3];
  char v79;
  _QWORD v80[3];
  char v81;
  _BYTE v82[16];
  _BYTE *v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v25[0] = 0;
  v26 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  v5 = cv3d::cv::gess::io::internal::ReportBake2Json((uint64_t)(a1 + 16), (uint64_t)v25, v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v63, "time_hierarchy_building");
  v64 = v63;
  v65 = 1;
  v6 = *(_QWORD *)a1;
  v66[0] = 7;
  v67[0] = v6;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
  v67[1] = v66;
  v68 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v69, (uint64_t)v63, 2, 1, 2);
  v70 = v69;
  v71 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v57, "time_fields_computation");
  v58 = v57;
  v59 = 1;
  v7 = *((_QWORD *)a1 + 1);
  v60[0] = 7;
  v61[0] = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v60);
  v61[1] = v60;
  v62 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v72, (uint64_t)v57, 2, 1, 2);
  v72[2] = v72;
  v73 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>((uint64_t)v51, "time_edge_classification");
  v52 = v51;
  v53 = 1;
  v8 = *((_QWORD *)a1 + 2);
  v54[0] = 7;
  v55[0] = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v54);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v54);
  v55[1] = v54;
  v56 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v74, (uint64_t)v51, 2, 1, 2);
  v74[2] = v74;
  v75 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>((uint64_t)v45, "time_quadface_extraction");
  v46 = v45;
  v47 = 1;
  v9 = *((_QWORD *)a1 + 3);
  v48[0] = 7;
  v49[0] = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v48);
  v49[1] = v48;
  v50 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v76, (uint64_t)v45, 2, 1, 2);
  v76[2] = v76;
  v77 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v39, "time_post_processing");
  v40 = v39;
  v41 = 1;
  v10 = *((_QWORD *)a1 + 4);
  v42[0] = 7;
  v43[0] = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
  v43[1] = v42;
  v44 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v78, (uint64_t)v39, 2, 1, 2);
  v78[2] = v78;
  v79 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[20],char [20],0>((uint64_t)v33, "quadmesh_grid_scale");
  v34 = v33;
  v35 = 1;
  v11 = a1[10];
  v36[0] = 7;
  *(double *)v37 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v36);
  v37[1] = v36;
  v38 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v80, (uint64_t)v33, 2, 1, 2);
  v80[2] = v80;
  v81 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v27, "report_bake");
  v28 = v27;
  v29 = 1;
  v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v25);
  v32 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v82, (uint64_t)v27, 2, 1, 2);
  v83 = v82;
  v84 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)v69, 7, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  v12 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v23[0];
  v23[0] = v12;
  v13 = *(uint64_t **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v24;
  v24 = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v24, v23[0]);
  for (i = 0; i != -224; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v82[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v82[i + 8], v82[i]);
  }
  for (j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v30[j]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v30[j + 8], v30[j]);
  }
  for (k = 0; k != -8; k -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[k * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v37[k], v36[k * 8]);
  }
  for (m = 0; m != -8; m -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v42[m * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v43[m], v42[m * 8]);
  }
  for (n = 0; n != -8; n -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v48[n * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v49[n], v48[n * 8]);
  }
  for (ii = 0; ii != -8; ii -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v54[ii * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v55[ii], v54[ii * 8]);
  }
  for (jj = 0; jj != -8; jj -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v60[jj * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v61[jj], v60[jj * 8]);
  }
  for (kk = 0; kk != -8; kk -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v66[kk * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v67[kk], v66[kk * 8]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
  return v5;
}

void sub_23C556080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;

  for (i = 192; i != -32; i -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(v62 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a14 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a22 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a30 + m));
  for (n = 32; n != -32; n -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a38 + n));
  for (ii = 32; ii != -32; ii -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a46 + ii));
  for (jj = 32; jj != -32; jj -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a54 + jj));
  for (kk = 32; kk != -32; kk -= 32)
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)(&a62 + kk));
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a12);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::internal::Json2ReportQuad(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  uint64_t v13;

  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "report_bake");
  v5 = cv3d::cv::gess::io::internal::Json2ReportBake(v4, a2 + 64);
  v6 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_hierarchy_building");
  v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v6, (double *)&v13);
  *(_QWORD *)a2 = v13;
  v7 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_fields_computation");
  v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v7, (double *)&v13);
  *(_QWORD *)(a2 + 8) = v13;
  v8 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_edge_classification");
  v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v8, (double *)&v13);
  *(_QWORD *)(a2 + 16) = v13;
  v9 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_quadface_extraction");
  v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v9, (double *)&v13);
  *(_QWORD *)(a2 + 24) = v13;
  v10 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "time_post_processing");
  v13 = 0;
  nlohmann::detail::get_arithmetic_value<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,double,0>(v10, (double *)&v13);
  *(_QWORD *)(a2 + 32) = v13;
  v11 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "quadmesh_grid_scale");
  LODWORD(v13) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v11, (float *)&v13);
  *(_DWORD *)(a2 + 40) = v13;
  return v5;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[20],char [20],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[20]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[20]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C5563D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::render::CompileShaders(uint64_t a1, char *a2, int a3)
{
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  std::string __p;
  id v11;

  v5 = *(void **)a1;
  v11 = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  GetMTLLibrary(v5, (uint64_t)&v11, (uint64_t *)&__p, a3);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v11;
  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v7 == 0;
}

void sub_23C55647C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::render::CalculateMetalProjectionMatrix@<S0>(cv3d::cv::gess::render *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>, unsigned int a8@<W1>, uint64_t a9@<X8>)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v9 = (float)((float)this / a4) * a2;
  v10 = (float)((float)a8 / a5) * a2;
  v11 = v9 + (float)((float)((float)-a6 / a4) * a2);
  v12 = (float)(a7 / a5) * a2;
  *(float *)a9 = (float)(a2 + a2) / (float)(v11 - (float)(v11 - v9));
  *(_QWORD *)(a9 + 12) = 0;
  *(_QWORD *)(a9 + 4) = 0;
  *(float *)(a9 + 20) = (float)(a2 + a2) / (float)(v12 - (float)(v12 - v10));
  *(_QWORD *)(a9 + 24) = 0;
  *(float *)(a9 + 32) = (float)(v11 + (float)(v11 - v9)) / (float)(v11 - (float)(v11 - v9));
  *(float *)(a9 + 36) = (float)(v12 + (float)(v12 - v10)) / (float)(v12 - (float)(v12 - v10));
  *(float *)(a9 + 40) = (float)-a3 / (float)(a3 - a2);
  *(_QWORD *)(a9 + 44) = 3212836864;
  *(_DWORD *)(a9 + 52) = 0;
  result = (float)-(float)(a3 * a2) / (float)(a3 - a2);
  *(float *)(a9 + 56) = result;
  *(_DWORD *)(a9 + 60) = 0;
  return result;
}

float cv3d::cv::gess::render::GetDepth(int *a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float *v6;
  uint64_t v7;
  float v8;
  float *v9;
  float v10;
  uint64_t v12;
  float v13[5];
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  int v18;

  v2 = 0;
  v14 = *a1;
  v3 = *((_OWORD *)a1 + 1);
  v17 = *((_QWORD *)a1 + 4);
  v4 = *(_OWORD *)(a1 + 1);
  *((_QWORD *)&v4 + 1) = v3;
  v15 = v4;
  v16 = a1[6];
  v18 = a1[10];
  v5 = *((float *)a1 + 14);
  v12 = 0;
  *(_QWORD *)v13 = 0;
  v6 = (float *)&v14;
  do
  {
    v7 = 0;
    v8 = 0.0;
    v9 = v6;
    do
    {
      v10 = *v9;
      v9 += 3;
      v8 = v8 + (float)(v10 * *(float *)(a2 + v7));
      v7 += 4;
    }
    while (v7 != 12);
    v13[v2++ - 2] = v8;
    ++v6;
  }
  while (v2 != 3);
  return v5 + v13[0];
}

void cv3d::cv::gess::render::ComputeMeshNearFarPlane(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t *v5;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float Depth;
  __int128 v13;
  unsigned int v14;

  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 8);
    v6 = 1.1755e-38;
    v7 = 3.4028e38;
    do
    {
      v14 = *(_DWORD *)(a1 + 176);
      v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v5, &v14);
      v11 = *(_QWORD *)(v8 + 40);
      if (v4 >= (*(_QWORD *)(v8 + 48) - v11) >> 4)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
      v13 = *(_OWORD *)(v11 + 16 * v4);
      Depth = cv3d::cv::gess::render::GetDepth(a2, (uint64_t)&v13);
      if (Depth > 0.0000001 && v6 < Depth)
        v6 = Depth;
      if (Depth > 0.0000001 && Depth < v7)
        v7 = Depth;
      ++v4;
    }
    while (v4 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  }
}

BOOL cv3d::cv::gess::render::OffScreenRender(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  void *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  int v29;
  id *v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  float v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  id v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  const __CFString *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  char *v134;
  _DWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  _DWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  unsigned int v149;
  char *v150;
  _DWORD *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  _DWORD *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  _DWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  id *v165;
  uint64_t v166;
  id v167;
  id v168;
  id v169;
  id v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  void *v182;
  id v183;
  id v184;
  id v185;
  id v186;
  void *v187;
  void *v188;
  void *v189;
  int v190;
  uint64_t v191;
  int v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  uint64_t *v198;
  int v199;
  void *v200;
  void *v201;
  uint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int __val;
  unsigned int __vala[2];
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  __int128 v217;
  std::string v218;
  _QWORD v219[6];
  std::string v220;
  _QWORD v221[6];
  std::string v222;
  _QWORD v223[6];
  std::string v224;
  _QWORD v225[6];
  std::string v226;
  _QWORD v227[6];
  std::string v228;
  std::string v229;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path __s;
  std::string pn;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  void *v237[6];
  void *__src;
  _BYTE *v239;
  id v240;
  _OWORD v241[4];
  _OWORD v242[4];
  std::string v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  id *v248;

  v16 = (void *)MEMORY[0x2426214AC]();
  v17 = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v19 = (v17 & 0x3FFFFFFFCLL) == 0 || (v18 & 0x3FFFFFFFC0) == 0;
  if (v19
    || (v20 = (v18 >> 6), v20 != (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 6)
    || v20 != (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3
    || v20 != (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3
    || (v21 = *(_QWORD *)(a2 + 96), v22 = *(_QWORD *)(a2 + 104), v20 != (v22 - v21) >> 3))
  {
LABEL_19:
    v29 = 1;
    goto LABEL_20;
  }
  v216 = a1;
  v202 = a3;
  if (v22 != v21)
  {
    v23 = 0;
    v24 = 0;
    v25 = (unsigned int *)(v21 + 4);
    v26 = 1;
    while (1)
    {
      v27 = *(v25 - 1);
      if (!v27 || !*v25)
        goto LABEL_19;
      if (v23 <= v27)
        v23 = *(v25 - 1);
      if (v24 <= *v25)
        v24 = *v25;
      v25 += 2;
      if (v20 <= v26++)
        goto LABEL_22;
    }
  }
  v24 = 0;
  v23 = 0;
LABEL_22:
  v203 = v20;
  v198 = a4;
  if (*(_BYTE *)(a2 + 147))
  {
    std::string::basic_string[abi:ne180100]<0>(&v243, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    DWORD2(v242[0]) = 0;
    *(_QWORD *)&v242[0] = 0;
    v199 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v216 + 56), (uint64_t)v242, (unsigned __int8 *)&v243);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v243, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    *(_QWORD *)&v242[0] = 0;
    __val = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v216 + 80), (uint64_t)v242, (unsigned __int8 *)&v243);
    if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v243.__r_.__value_.__l.__data_);
    v29 = 1;
    if (v199 == -1 || __val == -1)
      goto LABEL_20;
    a4 = v198;
  }
  else
  {
    __val = -1;
    v199 = -1;
  }
  if (*(_BYTE *)(a2 + 145))
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](v202);
    std::vector<std::vector<float>>::resize(v202, v203);
  }
  if (*(_BYTE *)(a2 + 146))
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a4);
    std::vector<std::vector<float>>::resize(a4, v203);
  }
  if (*(_BYTE *)(a2 + 147))
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a5);
    std::vector<std::vector<float>>::resize(a5, v203);
  }
  if (*(_BYTE *)(a2 + 148))
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a6);
    std::vector<std::vector<float>>::resize(a6, v203);
  }
  if (*(_BYTE *)(a2 + 149))
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a7);
    std::vector<std::vector<float>>::resize(a7, v203);
  }
  if (*(_BYTE *)(a2 + 150))
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a8);
    std::vector<std::vector<float>>::resize(a8, v203);
  }
  v31 = (id *)operator new();
  v31[1] = 0;
  v31[2] = 0;
  *v31 = 0;
  v248 = v31;
  v32 = MTLCreateSystemDefaultDevice();
  v33 = *v248;
  *v248 = v32;

  v34 = objc_msgSend(*v248, "newCommandQueue");
  v35 = v248[1];
  v248[1] = (id)v34;

  if (*(_BYTE *)(a2 + 150))
  {
    v36 = objc_msgSend(*v248, "supportsFamily:", 2002);
    if (((v36 | objc_msgSend(*v248, "supportsFamily:", 1007)) & 1) == 0)
      goto LABEL_69;
  }
  v37 = (uint64_t)v248;
  if (*(char *)(a2 + 143) < 0)
    std::string::__init_copy_ctor_external(&v243, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  else
    v243 = *(std::string *)(a2 + 120);
  v38 = cv3d::cv::gess::render::CompileShaders(v37, (char *)&v243, *(unsigned __int8 *)(a2 + 144));
  if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v243.__r_.__value_.__l.__data_);
  if (v38)
  {
    v180 = a6;
    v181 = a5;
    v178 = a8;
    v179 = a7;
    v245 = 0;
    v246 = 0;
    v247 = 0;
    v39 = *(_QWORD *)(v216 + 160) - *(_QWORD *)(v216 + 152);
    v40 = (v39 >> 1) + (v39 >> 2);
    v41 = v23 * v24;
    if (*(_BYTE *)(a2 + 145))
      v42 = 4 * (4 * v41);
    else
      v42 = 0;
    v213 = v42;
    if (*(_BYTE *)(a2 + 146))
      v43 = 4 * (4 * v41);
    else
      v43 = 0;
    v209 = v43;
    v44 = 4 * (2 * v41);
    if (!*(_BYTE *)(a2 + 147))
      v44 = 0;
    v204 = 4 * v40;
    v206 = v44;
    if (*(_BYTE *)(a2 + 149))
      v45 = 4 * v23 * v24;
    else
      v45 = 0;
    if (*(_BYTE *)(a2 + 150))
      v46 = 4 * v23 * v24;
    else
      v46 = 0;
    v243.__r_.__value_.__r.__words[0] = 4 * v40;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v47 = 4 * (2 * v39 + (v39 >> 2));
    v243.__r_.__value_.__r.__words[0] = v47;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v243.__r_.__value_.__r.__words[0] = v47;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v48 = 8 * v40;
    v243.__r_.__value_.__r.__words[0] = v48;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v243.__r_.__value_.__r.__words[0] = 4 * v23 * v24;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v243.__r_.__value_.__r.__words[0] = 4 * v23 * v24;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v243.__r_.__value_.__r.__words[0] = v209 + v213 + v206 + v45 + v46;
    std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v245, &v243);
    v49 = v48;
    v50 = v245;
    if (v245 == v246)
    {
      v51 = 0;
    }
    else
    {
      v51 = 0;
      do
      {
        v52 = *v50++;
        v51 += v52;
      }
      while (v50 != v246);
    }
    objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = objc_msgSend(v53, "physicalMemory");

    if (v51 <= v54)
    {
      v186 = (id)objc_msgSend(*v248, "newBufferWithLength:options:", v204, 0);
      v185 = (id)objc_msgSend(*v248, "newBufferWithLength:options:", v47, 0);
      v184 = (id)objc_msgSend(*v248, "newBufferWithLength:options:", v47, 0);
      v183 = (id)objc_msgSend(*v248, "newBufferWithLength:options:", v49, 0);
      v171 = v16;
      v55 = v23;
      v177 = (void *)objc_opt_new();
      objc_msgSend(v177, "setWidth:", v23);
      v56 = v24;
      objc_msgSend(v177, "setHeight:", v24);
      objc_msgSend(v177, "setArrayLength:", 1);
      objc_msgSend(v177, "setTextureType:", 2);
      objc_msgSend(v177, "setStorageMode:", 0);
      objc_msgSend(v177, "setPixelFormat:", 125);
      objc_msgSend(v177, "setUsage:", 4);
      v57 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v177);
      v187 = v57;
      v58 = (void *)objc_opt_new();
      v59 = v216;
      v60 = v23;
      v176 = v58;
      v61 = v58;
      objc_msgSend(v58, "setWidth:", v60);
      objc_msgSend(v61, "setHeight:", v56);
      objc_msgSend(v61, "setArrayLength:", 1);
      objc_msgSend(v61, "setTextureType:", 2);
      objc_msgSend(v61, "setStorageMode:", 0);
      objc_msgSend(v61, "setPixelFormat:", 125);
      objc_msgSend(v61, "setUsage:", 4);
      v197 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v61);
      v175 = (void *)objc_opt_new();
      objc_msgSend(v175, "setWidth:", v55);
      objc_msgSend(v175, "setHeight:", v56);
      objc_msgSend(v175, "setArrayLength:", 1);
      objc_msgSend(v175, "setTextureType:", 2);
      objc_msgSend(v175, "setStorageMode:", 0);
      objc_msgSend(v175, "setPixelFormat:", 105);
      objc_msgSend(v175, "setUsage:", 4);
      v195 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v175);
      v174 = (void *)objc_opt_new();
      objc_msgSend(v174, "setWidth:", v55);
      objc_msgSend(v174, "setHeight:", v56);
      objc_msgSend(v174, "setArrayLength:", 1);
      objc_msgSend(v174, "setTextureType:", 2);
      objc_msgSend(v174, "setStorageMode:", 0);
      objc_msgSend(v174, "setPixelFormat:", 55);
      objc_msgSend(v174, "setUsage:", 4);
      v196 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v174);
      v173 = (void *)objc_opt_new();
      objc_msgSend(v173, "setWidth:", v55);
      objc_msgSend(v173, "setHeight:", v56);
      objc_msgSend(v173, "setArrayLength:", 1);
      objc_msgSend(v173, "setTextureType:", 2);
      objc_msgSend(v173, "setStorageMode:", 0);
      objc_msgSend(v173, "setPixelFormat:", 55);
      objc_msgSend(v173, "setUsage:", 4);
      v194 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v173);
      v172 = (void *)objc_opt_new();
      objc_msgSend(v172, "setWidth:", v55);
      objc_msgSend(v172, "setHeight:", v56);
      objc_msgSend(v172, "setArrayLength:", 1);
      objc_msgSend(v172, "setTextureType:", 2);
      objc_msgSend(v172, "setStorageMode:", 2);
      objc_msgSend(v172, "setPixelFormat:", 252);
      objc_msgSend(v172, "setUsage:", 4);
      v188 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v172);
      if (*(_BYTE *)(a2 + 150))
      {
        objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 70, *(_QWORD *)(a2 + 152), *(_QWORD *)(a2 + 152), 1);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v62, "setStorageMode:", 0);
        objc_msgSend(v62, "setUsage:", 7);
        v182 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v62);
        v63 = (void *)objc_opt_new();
        objc_msgSend(v63, "setWidth:", v55);
        objc_msgSend(v63, "setHeight:", v56);
        objc_msgSend(v63, "setArrayLength:", 1);
        objc_msgSend(v63, "setTextureType:", 2);
        objc_msgSend(v63, "setStorageMode:", 0);
        objc_msgSend(v63, "setPixelFormat:", 55);
        objc_msgSend(v63, "setUsage:", 4);
        v189 = (void *)objc_msgSend(*v248, "newTextureWithDescriptor:", v63);

      }
      else
      {
        v182 = 0;
        v189 = 0;
      }
      v29 = 1;
      if (v186
        && v185
        && v184
        && v183
        && v57
        && v197
        && v196
        && v195
        && v194
        && (!*(_BYTE *)(a2 + 150) || v182 && v189)
        && v188)
      {
        v167 = objc_retainAutorelease(v186);
        v214 = objc_msgSend(v167, "contents");
        v170 = objc_retainAutorelease(v185);
        v64 = objc_msgSend(v170, "contents");
        v169 = objc_retainAutorelease(v184);
        v65 = objc_msgSend(v169, "contents");
        v168 = objc_retainAutorelease(v183);
        v210 = objc_msgSend(v168, "contents");
        std::string::basic_string[abi:ne180100]<0>(&v243, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
        v242[0] = 0uLL;
        v66 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v216 + 8), (uint64_t)v242, (unsigned __int8 *)&v243);
        if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v243.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a2 + 146) && v66 == -1)
        {
          v29 = 1;
        }
        else
        {
          std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v243, 3uLL);
          DWORD2(v242[0]) = 0;
          *(_QWORD *)&v242[0] = 0;
          if (*(_QWORD *)(v216 + 160) != *(_QWORD *)(v216 + 152))
          {
            v67 = 0;
            v68 = 0;
            v69 = 0;
            v207 = v66;
            do
            {
              LODWORD(v241[0]) = v69;
              cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v59, (unsigned int *)v241, &v243);
              if (*(_BYTE *)(a2 + 147))
              {
                LODWORD(v241[0]) = v199;
                v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(v216 + 56), (unsigned int *)v241, v70);
                v73 = cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::operator[](v71, v67, v72);
                *(_QWORD *)&v242[0] = *(_QWORD *)v73;
                DWORD2(v242[0]) = *(_DWORD *)(v73 + 8);
              }
              v190 = v69;
              v74 = 0;
              v75 = v68;
              v76 = 2 * v68;
              v192 = v68;
              v77 = 3 * v68;
              do
              {
                *(_DWORD *)(v214 + 4 * (v75 + v74)) = v75 + v74;
                v78 = (__int128 *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v216, *(_DWORD *)(v216 + 176), *(_DWORD *)(v243.__r_.__value_.__r.__words[0] + 4 * v74));
                v80 = *v78;
                *(_DWORD *)(v64 + 4 * v77) = *v78;
                v81 = v77 + 1;
                *(_DWORD *)(v64 + 4 * v81) = DWORD1(v80);
                v82 = v77 + 2;
                *(_DWORD *)(v64 + 4 * v82) = DWORD2(v80);
                if (*(_BYTE *)(a2 + 146))
                {
                  v83 = (_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v216, v207, *(_DWORD *)(v243.__r_.__value_.__r.__words[0] + 4 * v74));
                  *(_DWORD *)(v65 + 4 * v77) = *v83;
                  *(_DWORD *)(v65 + 4 * v81) = v83[1];
                  *(_DWORD *)(v65 + 4 * v82) = v83[2];
                }
                if (*(_BYTE *)(a2 + 147))
                {
                  LODWORD(v241[0]) = __val;
                  v84 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v216 + 80), (unsigned int *)v241, v79);
                  v85 = *((unsigned int *)v242 + v74);
                  v86 = *(_QWORD *)(v84 + 40);
                  if (v85 >= (*(_QWORD *)(v84 + 48) - v86) >> 3)
                    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                  v87 = (_DWORD *)(v86 + 8 * v85);
                  *(_DWORD *)(v210 + 4 * v76) = *v87;
                  *(_DWORD *)(v210 + 4 * (v76 + 1)) = v87[1];
                }
                ++v74;
                v77 += 3;
                v76 += 2;
              }
              while (v74 != 3);
              v67 = (v190 + 1);
              v59 = v216;
              v68 = v192 + 3;
              v69 = v190 + 1;
            }
            while (v67 < (uint64_t)(*(_QWORD *)(v216 + 160) - *(_QWORD *)(v216 + 152)) >> 2);
          }
          if (v243.__r_.__value_.__r.__words[0])
          {
            v243.__r_.__value_.__l.__size_ = v243.__r_.__value_.__r.__words[0];
            operator delete(v243.__r_.__value_.__l.__data_);
          }
          v88 = 0;
          v191 = 3 * (v17 >> 2);
          v166 = a2 + 288;
          while (1)
          {
            v244 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * v88);
            v208 = v244;
            cv3d::cv::gess::render::ComputeMeshNearFarPlane(v216, (int *)(*(_QWORD *)(a2 + 24) + (v88 << 6)));
            cv3d::cv::gess::render::CalculateMetalProjectionMatrix((cv3d::cv::gess::render *)v208, v89, v90, *(float *)(*(_QWORD *)(a2 + 48) + 8 * v88), *(float *)(*(_QWORD *)(a2 + 48) + 8 * v88 + 4), *(float *)(*(_QWORD *)(a2 + 72) + 8 * v88), *(float *)(*(_QWORD *)(a2 + 72) + 8 * v88 + 4), HIDWORD(v208), (uint64_t)&v243);
            *(_QWORD *)__vala = v88;
            v91 = *(_QWORD *)a2 + (v88 << 6);
            memset(v242, 0, sizeof(v242));
            cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)&v243, v91, v241);
            v92 = 0;
            v93 = v241;
            do
            {
              v94 = 0;
              v95 = v242[v92];
              do
              {
                v96 = *((_DWORD *)v93 + v94);
                v217 = v95;
                *(_DWORD *)((unint64_t)&v217 & 0xFFFFFFFFFFFFFFF3 | (4 * (v94 & 3))) = v96;
                v95 = v217;
                ++v94;
              }
              while (v94 != 4);
              v242[v92++] = v217;
              ++v93;
            }
            while (v92 != 4);
            objc_msgSend(v248[1], "commandBuffer", *(double *)&v95);
            v215 = (void *)objc_claimAutoreleasedReturnValue();
            v97 = objc_alloc_init(MEMORY[0x24BDDD690]);
            objc_msgSend(v97, "colorAttachments");
            v98 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v98, "objectAtIndexedSubscript:", 0);
            v99 = (void *)objc_claimAutoreleasedReturnValue();

            v200 = v99;
            objc_msgSend(v99, "setTexture:", v187);
            objc_msgSend(v99, "setLoadAction:", 2);
            objc_msgSend(v99, "setStoreAction:", 1);
            objc_msgSend(v99, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
            objc_msgSend(v97, "colorAttachments");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "objectAtIndexedSubscript:", 1);
            v101 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v101, "setTexture:", v197);
            objc_msgSend(v101, "setLoadAction:", 2);
            objc_msgSend(v101, "setStoreAction:", 1);
            objc_msgSend(v101, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
            objc_msgSend(v97, "colorAttachments");
            v102 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v102, "objectAtIndexedSubscript:", 2);
            v103 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v103, "setTexture:", v195);
            objc_msgSend(v103, "setLoadAction:", 2);
            objc_msgSend(v103, "setStoreAction:", 1);
            objc_msgSend(v103, "setClearColor:", -1.0, -1.0, -1.0, -1.0);
            objc_msgSend(v97, "colorAttachments");
            v104 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v104, "objectAtIndexedSubscript:", 3);
            v105 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v105, "setTexture:", v194);
            objc_msgSend(v105, "setLoadAction:", 2);
            objc_msgSend(v105, "setStoreAction:", 1);
            objc_msgSend(v105, "setClearColor:", -1.0, -1.0, -1.0, -1.0);
            objc_msgSend(v97, "colorAttachments");
            v106 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v106, "objectAtIndexedSubscript:", 4);
            v107 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v107, "setTexture:", v196);
            objc_msgSend(v107, "setLoadAction:", 2);
            objc_msgSend(v107, "setStoreAction:", 1);
            objc_msgSend(v107, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
            if (*(_BYTE *)(a2 + 150))
            {
              objc_msgSend(v97, "colorAttachments");
              v108 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v108, "objectAtIndexedSubscript:", 5);
              v109 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(v109, "setTexture:", v189);
              objc_msgSend(v109, "setLoadAction:", 2);
              objc_msgSend(v109, "setStoreAction:", 1);
              objc_msgSend(v109, "setClearColor:", -1.0, -1.0, -1.0, -1.0);

            }
            objc_msgSend(v97, "depthAttachment", v166);
            v110 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v110, "setTexture:", v188);
            objc_msgSend(v110, "setLoadAction:", 2);
            objc_msgSend(v110, "setStoreAction:", 1);

            objc_msgSend(v97, "setRenderTargetWidth:", v208);
            objc_msgSend(v97, "setRenderTargetHeight:", HIDWORD(v208));
            objc_msgSend(v97, "setRenderTargetArrayLength:", 1);
            objc_msgSend(v97, "setDefaultRasterSampleCount:", 1);
            objc_msgSend(v215, "renderCommandEncoderWithDescriptor:", v97);
            v205 = (void *)objc_claimAutoreleasedReturnValue();

            v111 = (void *)objc_opt_new();
            objc_msgSend(v111, "setDepthCompareFunction:", 1);
            objc_msgSend(v111, "setDepthWriteEnabled:", 1);
            v193 = (void *)objc_msgSend(*v248, "newDepthStencilStateWithDescriptor:", v111);

            v112 = (void *)objc_msgSend(v248[2], "newFunctionWithName:", CFSTR("OffScreenRendererVS"));
            if (*(_BYTE *)(a2 + 150))
              v113 = CFSTR("OffScreenRendererFS_MIPLEVEL");
            else
              v113 = CFSTR("OffScreenRendererFS");
            v114 = (void *)objc_msgSend(v248[2], "newFunctionWithName:", v113);
            v115 = (void *)objc_opt_new();
            objc_msgSend(v115, "setVertexFunction:", v112);
            objc_msgSend(v115, "setFragmentFunction:", v114);
            objc_msgSend(v115, "colorAttachments");
            v116 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v116, "objectAtIndexedSubscript:", 0);
            v117 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v117, "setPixelFormat:", 125);

            objc_msgSend(v115, "colorAttachments");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v118, "objectAtIndexedSubscript:", 1);
            v119 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v119, "setPixelFormat:", 125);

            objc_msgSend(v115, "colorAttachments");
            v120 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v120, "objectAtIndexedSubscript:", 2);
            v121 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v121, "setPixelFormat:", 105);

            objc_msgSend(v115, "colorAttachments");
            v122 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v122, "objectAtIndexedSubscript:", 3);
            v123 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v123, "setPixelFormat:", 55);

            objc_msgSend(v115, "colorAttachments");
            v124 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v124, "objectAtIndexedSubscript:", 4);
            v125 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v125, "setPixelFormat:", 55);

            if (*(_BYTE *)(a2 + 150))
            {
              objc_msgSend(v115, "colorAttachments");
              v126 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v126, "objectAtIndexedSubscript:", 5);
              v127 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v127, "setPixelFormat:", 55);

            }
            objc_msgSend(v115, "setDepthAttachmentPixelFormat:", 252);
            v128 = *v248;
            v240 = 0;
            v201 = (void *)objc_msgSend(v128, "newRenderPipelineStateWithDescriptor:error:", v115, &v240);
            v129 = v240;

            v130 = v129;
            if (v129)
              break;
            objc_msgSend(v205, "setRenderPipelineState:", v201);
            objc_msgSend(v205, "setCullMode:", 2);
            objc_msgSend(v205, "setFrontFacingWinding:", 1);
            objc_msgSend(v205, "setDepthStencilState:", v193);
            objc_msgSend(v205, "setVertexBuffer:offset:atIndex:", v170, 0, 0);
            objc_msgSend(v205, "setVertexBuffer:offset:atIndex:", v169, 0, 1);
            objc_msgSend(v205, "setVertexBuffer:offset:atIndex:", v168, 0, 2);
            objc_msgSend(v205, "setVertexBytes:length:atIndex:", v242, 64, 3);
            objc_msgSend(v205, "setFragmentBytes:length:atIndex:", &v244, 8, 0);
            if (*(_BYTE *)(a2 + 150))
              objc_msgSend(v205, "setFragmentTexture:atIndex:", v182, 1);
            objc_msgSend(v205, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, v191, 1, v167, 0);
            cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v205, "endEncoding"));
            objc_msgSend(v215, "commit");
            objc_msgSend(v215, "waitUntilCompleted");
            objc_msgSend(v215, "error");
            v131 = (void *)objc_claimAutoreleasedReturnValue();
            if (v131)
            {
              objc_msgSend(v215, "error");
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              v133 = objc_msgSend(v132, "code");

              if (v133)
                break;
            }
            if (*(_BYTE *)(a2 + 145))
            {
              std::vector<float>::vector(&__src, 4 * (HIDWORD(v208) * v208));
              memset(v237, 0, 24);
              v237[3] = (void *)v208;
              v237[4] = (void *)HIDWORD(v208);
              v237[5] = (void *)1;
              objc_msgSend(v187, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", __src, 16 * v208, v237, 0);
              if (*(_BYTE *)(a2 + 160))
              {
                v134 = (char *)(*v202 + 24 * *(_QWORD *)__vala);
                if (v134 != (char *)&__src)
                  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v134, (char *)__src, (uint64_t)v239, (v239 - (_BYTE *)__src) >> 2);
              }
              if (*(_BYTE *)(a2 + 161))
              {
                v234 = v208;
                v233 = 0;
                v235 = 4;
                v236 = 0;
                cv3d::cv::gess::util::ImageT<float>::AllocateMemory((uint64_t)&v233);
                v135 = __src;
                if (v239 != __src)
                {
                  v136 = 0;
                  v137 = (v239 - (_BYTE *)__src) >> 2;
                  v138 = v236;
                  do
                  {
                    *(_DWORD *)(v138 + 4 * v136) = v135[v136];
                    ++v136;
                  }
                  while (v137 > v136);
                }
                std::to_string(&v228, __vala[0]);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".exr", &v228, &v229);
                __p.__pn_ = v229;
                memset(&v229, 0, sizeof(v229));
                std::__fs::filesystem::operator/[abi:ne180100](&__p, a2 + 168, &__s);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&pn, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
                else
                  pn = __s.__pn_;
                cv3d::cv::gess::io::SaveExr((char *)&pn, (uint64_t)&v233, 1);
                if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(pn.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v228.__r_.__value_.__l.__data_);
                if (v236)
                  MEMORY[0x2426211A0](v236, 0x1000C8052888210);
              }
              if (__src)
              {
                v239 = __src;
                operator delete(__src);
              }
            }
            if (*(_BYTE *)(a2 + 146))
            {
              std::vector<float>::vector(&__src, 4 * (HIDWORD(v208) * v208));
              memset(v227, 0, 24);
              v227[3] = v208;
              v227[4] = HIDWORD(v208);
              v227[5] = 1;
              objc_msgSend(v197, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", __src, 16 * v208, v227, 0);
              if (*(_BYTE *)(a2 + 160))
              {
                v139 = (char *)(*v198 + 24 * *(_QWORD *)__vala);
                if (v139 != (char *)&__src)
                  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v139, (char *)__src, (uint64_t)v239, (v239 - (_BYTE *)__src) >> 2);
              }
              if (*(_BYTE *)(a2 + 161))
              {
                v234 = v208;
                v233 = 0;
                v235 = 4;
                v236 = 0;
                cv3d::cv::gess::util::ImageT<float>::AllocateMemory((uint64_t)&v233);
                v140 = __src;
                if (v239 != __src)
                {
                  v141 = 0;
                  v142 = (v239 - (_BYTE *)__src) >> 2;
                  v143 = v236;
                  do
                  {
                    *(_DWORD *)(v143 + 4 * v141) = v140[v141];
                    ++v141;
                  }
                  while (v142 > v141);
                }
                std::to_string(&v228, __vala[0]);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".exr", &v228, &v229);
                __p.__pn_ = v229;
                memset(&v229, 0, sizeof(v229));
                std::__fs::filesystem::operator/[abi:ne180100](&__p, a2 + 192, &__s);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v226, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
                else
                  v226 = __s.__pn_;
                cv3d::cv::gess::io::SaveExr((char *)&v226, (uint64_t)&v233, 1);
                if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v226.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v228.__r_.__value_.__l.__data_);
                if (v236)
                  MEMORY[0x2426211A0](v236, 0x1000C8052888210);
              }
              if (__src)
              {
                v239 = __src;
                operator delete(__src);
              }
            }
            if (*(_BYTE *)(a2 + 147))
            {
              v144 = (HIDWORD(v208) * v208);
              std::vector<float>::vector(&__src, 2 * v144);
              memset(v225, 0, 24);
              v225[3] = v208;
              v225[4] = HIDWORD(v208);
              v225[5] = 1;
              objc_msgSend(v195, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", __src, 8 * v208, v225, 0);
              if (*(_BYTE *)(a2 + 160))
              {
                v145 = (char *)(*v181 + 24 * *(_QWORD *)__vala);
                if (v145 != (char *)&__src)
                  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v145, (char *)__src, (uint64_t)v239, (v239 - (_BYTE *)__src) >> 2);
              }
              if (*(_BYTE *)(a2 + 161))
              {
                v234 = v208;
                v233 = 0;
                v235 = 3;
                v236 = 0;
                cv3d::cv::gess::util::ImageT<float>::AllocateMemory((uint64_t)&v233);
                if ((_DWORD)v144)
                {
                  v146 = 0;
                  v147 = __src;
                  v148 = v236;
                  v149 = 2;
                  do
                  {
                    *(_DWORD *)(v148 + 4 * (v149 - 2)) = v147[v146];
                    *(_DWORD *)(v148 + 4 * (v149 - 1)) = v147[(v146 + 1)];
                    *(_DWORD *)(v148 + 4 * v149) = 0;
                    v149 += 3;
                    v146 += 2;
                  }
                  while (2 * v144 != v146);
                }
                std::to_string(&v228, __vala[0]);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".exr", &v228, &v229);
                __p.__pn_ = v229;
                memset(&v229, 0, sizeof(v229));
                std::__fs::filesystem::operator/[abi:ne180100](&__p, a2 + 216, &__s);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v224, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
                else
                  v224 = __s.__pn_;
                cv3d::cv::gess::io::SaveExr((char *)&v224, (uint64_t)&v233, 1);
                if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v224.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v228.__r_.__value_.__l.__data_);
                if (v236)
                  MEMORY[0x2426211A0](v236, 0x1000C8052888210);
              }
              if (__src)
              {
                v239 = __src;
                operator delete(__src);
              }
            }
            if (*(_BYTE *)(a2 + 148))
            {
              std::vector<float>::vector(&__src, (HIDWORD(v208) * v208));
              memset(v223, 0, 24);
              v223[3] = v208;
              v223[4] = HIDWORD(v208);
              v223[5] = 1;
              objc_msgSend(v196, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", __src, 4 * v208, v223, 0);
              if (*(_BYTE *)(a2 + 160))
              {
                v150 = (char *)(*v180 + 24 * *(_QWORD *)__vala);
                if (v150 != (char *)&__src)
                  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v150, (char *)__src, (uint64_t)v239, (v239 - (_BYTE *)__src) >> 2);
              }
              if (*(_BYTE *)(a2 + 161))
              {
                v234 = v208;
                v233 = 0;
                v235 = 1;
                v236 = 0;
                cv3d::cv::gess::util::ImageT<float>::AllocateMemory((uint64_t)&v233);
                v151 = __src;
                if (v239 != __src)
                {
                  v152 = 0;
                  v153 = (v239 - (_BYTE *)__src) >> 2;
                  v154 = v236;
                  do
                  {
                    *(_DWORD *)(v154 + 4 * v152) = v151[v152];
                    ++v152;
                  }
                  while (v153 > v152);
                }
                std::to_string(&v228, __vala[0]);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".exr", &v228, &v229);
                __p.__pn_ = v229;
                memset(&v229, 0, sizeof(v229));
                std::__fs::filesystem::operator/[abi:ne180100](&__p, a2 + 240, &__s);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v222, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
                else
                  v222 = __s.__pn_;
                cv3d::cv::gess::io::SaveExr((char *)&v222, (uint64_t)&v233, 1);
                if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v222.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v228.__r_.__value_.__l.__data_);
                if (v236)
                  MEMORY[0x2426211A0](v236, 0x1000C8052888210);
              }
              if (__src)
              {
                v239 = __src;
                operator delete(__src);
              }
            }
            if (*(_BYTE *)(a2 + 149))
            {
              std::vector<float>::vector(&__src, (HIDWORD(v208) * v208));
              memset(v221, 0, 24);
              v221[3] = v208;
              v221[4] = HIDWORD(v208);
              v221[5] = 1;
              objc_msgSend(v194, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", __src, 4 * v208, v221, 0);
              if (*(_BYTE *)(a2 + 160))
              {
                v155 = (char *)(*v179 + 24 * *(_QWORD *)__vala);
                if (v155 != (char *)&__src)
                  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v155, (char *)__src, (uint64_t)v239, (v239 - (_BYTE *)__src) >> 2);
              }
              if (*(_BYTE *)(a2 + 161))
              {
                v234 = v208;
                v233 = 0;
                v235 = 1;
                v236 = 0;
                cv3d::cv::gess::util::ImageT<float>::AllocateMemory((uint64_t)&v233);
                v156 = __src;
                if (v239 != __src)
                {
                  v157 = 0;
                  v158 = (v239 - (_BYTE *)__src) >> 2;
                  v159 = v236;
                  do
                  {
                    *(_DWORD *)(v159 + 4 * v157) = v156[v157];
                    ++v157;
                  }
                  while (v158 > v157);
                }
                std::to_string(&v228, __vala[0]);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".exr", &v228, &v229);
                __p.__pn_ = v229;
                memset(&v229, 0, sizeof(v229));
                std::__fs::filesystem::operator/[abi:ne180100](&__p, a2 + 264, &__s);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v220, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
                else
                  v220 = __s.__pn_;
                cv3d::cv::gess::io::SaveExr((char *)&v220, (uint64_t)&v233, 1);
                if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v220.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v228.__r_.__value_.__l.__data_);
                if (v236)
                  MEMORY[0x2426211A0](v236, 0x1000C8052888210);
              }
              if (__src)
              {
                v239 = __src;
                operator delete(__src);
              }
            }
            if (*(_BYTE *)(a2 + 150))
            {
              std::vector<float>::vector(&__src, (HIDWORD(v208) * v208));
              memset(v219, 0, 24);
              v219[3] = v208;
              v219[4] = HIDWORD(v208);
              v219[5] = 1;
              objc_msgSend(v189, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", __src, 4 * v208, v219, 0);
              if (*(_BYTE *)(a2 + 160))
              {
                v160 = (char *)(*v178 + 24 * *(_QWORD *)__vala);
                if (v160 != (char *)&__src)
                  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v160, (char *)__src, (uint64_t)v239, (v239 - (_BYTE *)__src) >> 2);
              }
              if (*(_BYTE *)(a2 + 161))
              {
                v234 = v208;
                v233 = 0;
                v235 = 1;
                v236 = 0;
                cv3d::cv::gess::util::ImageT<float>::AllocateMemory((uint64_t)&v233);
                v161 = __src;
                if (v239 != __src)
                {
                  v162 = 0;
                  v163 = (v239 - (_BYTE *)__src) >> 2;
                  v164 = v236;
                  do
                  {
                    *(_DWORD *)(v164 + 4 * v162) = v161[v162];
                    ++v162;
                  }
                  while (v163 > v162);
                }
                std::to_string(&v228, __vala[0]);
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(".exr", &v228, &v229);
                __p.__pn_ = v229;
                memset(&v229, 0, sizeof(v229));
                std::__fs::filesystem::operator/[abi:ne180100](&__p, v166, &__s);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v218, __s.__pn_.__r_.__value_.__l.__data_, __s.__pn_.__r_.__value_.__l.__size_);
                else
                  v218 = __s.__pn_;
                cv3d::cv::gess::io::SaveExr((char *)&v218, (uint64_t)&v233, 1);
                if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v218.__r_.__value_.__l.__data_);
                if (SHIBYTE(__s.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v229.__r_.__value_.__l.__data_);
                if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v228.__r_.__value_.__l.__data_);
                if (v236)
                  MEMORY[0x2426211A0](v236, 0x1000C8052888210);
              }
              if (__src)
              {
                v239 = __src;
                operator delete(__src);
              }
            }

            v88 = *(_QWORD *)__vala + 1;
            if (*(_QWORD *)__vala + 1 == v203)
            {
              v29 = 0;
              goto LABEL_278;
            }
          }

          v29 = 1;
LABEL_278:
          v57 = v187;
        }
      }

      v16 = v171;
    }
    else
    {
      v29 = 1;
    }
    if (v245)
    {
      v246 = v245;
      operator delete(v245);
    }
  }
  else
  {
LABEL_69:
    v29 = 1;
  }
  v165 = v248;
  v248 = 0;
  if (v165)
    std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100]((uint64_t)&v248, v165);
LABEL_20:
  objc_autoreleasePoolPop(v16);
  return v29 == 0;
}

void sub_23C558720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43)
{
  uint64_t v43;
  void *v45;
  id *v46;

  v45 = *(void **)(v43 - 128);
  if (v45)
  {
    *(_QWORD *)(v43 - 120) = v45;
    operator delete(v45);
  }
  v46 = *(id **)(v43 - 104);
  *(_QWORD *)(v43 - 104) = 0;
  if (v46)
    std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100](v43 - 104, v46);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t cv3d::cv::gess::math::Matrix4T<float>::operator*@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v3 = 0;
  *a3 = xmmword_23C60C32C;
  a3[1] = *(_OWORD *)algn_23C60C33C;
  a3[2] = xmmword_23C60C34C;
  a3[3] = unk_23C60C35C;
  do
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = 0;
      v7 = 0.0;
      do
      {
        v7 = v7 + (float)(*(float *)(result + 4 * v6) * *(float *)(v5 + v6));
        v6 += 4;
      }
      while (v6 != 16);
      *((float *)&a3[v4++] + v3) = v7;
      v5 += 16;
    }
    while (v4 != 4);
    ++v3;
    result += 4;
  }
  while (v3 != 4);
  return result;
}

void std::default_delete<cv3d::cv::gess::render::MetalContextImpl>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x2426211B8);
  }
}

void cv3d::cv::gess::isochart::CMaxFlow::ReserveMemory(cv3d::cv::gess::isochart::CMaxFlow *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  v8 = (uint64_t *)((char *)this + 144);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  v10 = *((_QWORD *)this + 21);
  v9 = (char *)this + 168;
  *((_QWORD *)v9 + 1) = v10;
  cv3d::cv::gess::isochart::CMaxFlow::Node::m_expect_degree = a4;
  if (a3)
    v11 = a3;
  else
    v11 = a4 * a2;
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::reserve(v8, a2);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Edge>::reserve((void **)v9, 2 * v11);
}

uint64_t std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23C558F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Edge>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::InitGraphCut(cv3d::cv::gess::isochart::CMaxFlow *this, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;

  v8 = (uint64_t *)((char *)this + 144);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  v10 = *((_QWORD *)this + 21);
  v9 = (char *)this + 168;
  *((_QWORD *)v9 + 1) = v10;
  cv3d::cv::gess::isochart::CMaxFlow::Node::m_expect_degree = a4;
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::resize(v8, a2);
  v11 = a4 * a2;
  if (a3)
    v11 = a3;
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Edge>::reserve((void **)v9, 2 * v11);
  return 1;
}

void sub_23C5590B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23C5590A4);
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v8 = *(void **)(v3 - 40);
      if (v8)
      {
        *(_QWORD *)(v3 - 32) = v8;
        operator delete(v8);
      }
      v3 -= 48;
    }
    a1[1] = v7;
  }
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::AddNode(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4))
    cv3d::cv::gess::isochart::CMaxFlow::AddNode();
  *(_QWORD *)this = v1 + 1;
  return v1;
}

void cv3d::cv::gess::isochart::CMaxFlow::AddEdge(cv3d::cv::gess::isochart::CMaxFlow *this, int a2, int a3, float a4, float a5)
{
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  char **v27;
  unint64_t v28;
  char *v29;
  char **v30;
  char *v31;
  void **v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  _QWORD *v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  char **v57;
  unint64_t v58;
  char *v59;
  char **v60;
  char *v61;
  void **v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  _QWORD *v72;

  v11 = (char *)this + 184;
  v10 = *((_QWORD *)this + 23);
  v12 = (_QWORD *)((char *)this + 168);
  v13 = (_QWORD *)*((_QWORD *)this + 22);
  if ((unint64_t)v13 >= v10)
  {
    v15 = ((uint64_t)v13 - *v12) >> 4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 60)
      goto LABEL_75;
    v17 = v10 - *v12;
    if (v17 >> 3 > v16)
      v16 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)this + 184, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v15];
    v21 = &v19[16 * v18];
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    v14 = (float *)(v20 + 16);
    v23 = (char *)*((_QWORD *)this + 21);
    v22 = (char *)*((_QWORD *)this + 22);
    if (v22 != v23)
    {
      do
      {
        *((_OWORD *)v20 - 1) = *((_OWORD *)v22 - 1);
        v20 -= 16;
        v22 -= 16;
      }
      while (v22 != v23);
      v22 = (char *)*v12;
    }
    *((_QWORD *)this + 21) = v20;
    *((_QWORD *)this + 22) = v14;
    *((_QWORD *)this + 23) = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v13 = 0;
    v13[1] = 0;
    v14 = (float *)(v13 + 2);
  }
  *((_QWORD *)this + 22) = v14;
  v24 = (((unint64_t)v14 - *((_QWORD *)this + 21)) >> 4) - 1;
  *(v14 - 4) = a4;
  *(v14 - 3) = a4;
  v25 = *((_QWORD *)this + 18) + 48 * a2;
  v28 = *(_QWORD *)(v25 + 24);
  v27 = (char **)(v25 + 24);
  v26 = v28;
  v30 = v27 - 1;
  v29 = *(v27 - 1);
  if ((unint64_t)v29 >= v28)
  {
    v72 = v12;
    v32 = (void **)(v27 - 2);
    v33 = *(v27 - 2);
    v34 = (v29 - v33) >> 2;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v36 = v26 - (_QWORD)v33;
    if (v36 >> 1 > v35)
      v35 = v36 >> 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v27, v37);
      v29 = *v30;
      v33 = (char *)*v32;
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[4 * v34];
    v40 = &v38[4 * v37];
    *(_DWORD *)v39 = v24;
    v31 = v39 + 4;
    while (v29 != v33)
    {
      v41 = *((_DWORD *)v29 - 1);
      v29 -= 4;
      *((_DWORD *)v39 - 1) = v41;
      v39 -= 4;
    }
    *v32 = v39;
    *v30 = v31;
    *v27 = v40;
    if (v33)
      operator delete(v33);
    v12 = v72;
  }
  else
  {
    *(_DWORD *)v29 = v24;
    v31 = v29 + 4;
  }
  *v30 = v31;
  if (*(_QWORD *)(*((_QWORD *)this + 18) + 48 * a2 + 16) - *(_QWORD *)(*((_QWORD *)this + 18) + 48 * a2 + 8) >= 0x19uLL)
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  *((_DWORD *)v14 - 2) = a2;
  *((_DWORD *)v14 - 1) = a3;
  v43 = (_QWORD *)*((_QWORD *)this + 22);
  v42 = *((_QWORD *)this + 23);
  if ((unint64_t)v43 < v42)
  {
    *v43 = 0;
    v43[1] = 0;
    v44 = (float *)(v43 + 2);
    goto LABEL_51;
  }
  v45 = ((uint64_t)v43 - *v12) >> 4;
  v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 60)
LABEL_75:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v47 = v42 - *v12;
  if (v47 >> 3 > v46)
    v46 = v47 >> 3;
  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
    v48 = 0xFFFFFFFFFFFFFFFLL;
  else
    v48 = v46;
  if (v48)
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)v11, v48);
  else
    v49 = 0;
  v50 = &v49[16 * v45];
  v51 = &v49[16 * v48];
  *(_QWORD *)v50 = 0;
  *((_QWORD *)v50 + 1) = 0;
  v44 = (float *)(v50 + 16);
  v53 = (char *)*((_QWORD *)this + 21);
  v52 = (char *)*((_QWORD *)this + 22);
  if (v52 != v53)
  {
    do
    {
      *((_OWORD *)v50 - 1) = *((_OWORD *)v52 - 1);
      v50 -= 16;
      v52 -= 16;
    }
    while (v52 != v53);
    v52 = (char *)*v12;
  }
  *((_QWORD *)this + 21) = v50;
  *((_QWORD *)this + 22) = v44;
  *((_QWORD *)this + 23) = v51;
  if (v52)
    operator delete(v52);
LABEL_51:
  *((_QWORD *)this + 22) = v44;
  v54 = (((unint64_t)v44 - *((_QWORD *)this + 21)) >> 4) - 1;
  *(v44 - 4) = a5;
  *(v44 - 3) = a5;
  v55 = *((_QWORD *)this + 18) + 48 * a3;
  v58 = *(_QWORD *)(v55 + 24);
  v57 = (char **)(v55 + 24);
  v56 = v58;
  v60 = v57 - 1;
  v59 = *(v57 - 1);
  if ((unint64_t)v59 >= v58)
  {
    v62 = (void **)(v57 - 2);
    v63 = *(v57 - 2);
    v64 = (v59 - v63) >> 2;
    v65 = v64 + 1;
    if ((unint64_t)(v64 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v66 = v56 - (_QWORD)v63;
    if (v66 >> 1 > v65)
      v65 = v66 >> 1;
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
      v67 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v67 = v65;
    if (v67)
    {
      v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v57, v67);
      v59 = *v60;
      v63 = (char *)*v62;
    }
    else
    {
      v68 = 0;
    }
    v69 = &v68[4 * v64];
    v70 = &v68[4 * v67];
    *(_DWORD *)v69 = v54;
    v61 = v69 + 4;
    while (v59 != v63)
    {
      v71 = *((_DWORD *)v59 - 1);
      v59 -= 4;
      *((_DWORD *)v69 - 1) = v71;
      v69 -= 4;
    }
    *v62 = v69;
    *v60 = v61;
    *v57 = v70;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(_DWORD *)v59 = v54;
    v61 = v59 + 4;
  }
  *v60 = v61;
  if (*(_QWORD *)(*((_QWORD *)this + 18) + 48 * a3 + 16) - *(_QWORD *)(*((_QWORD *)this + 18) + 48 * a3 + 8) >= 0x19uLL)
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  *((_DWORD *)v44 - 2) = a3;
  *((_DWORD *)v44 - 1) = a2;
  if (v24 != (v54 ^ 1))
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
  if (v54 != (v24 ^ 1))
    cv3d::cv::gess::isochart::CMaxFlow::AddEdge();
}

float cv3d::cv::gess::isochart::CMaxFlow::ResetResident(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  float *v4;
  float result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float *v9;

  *((_DWORD *)this + 2) = 0;
  v1 = *((_QWORD *)this + 18);
  v2 = *((_QWORD *)this + 19) - v1;
  if (v2)
  {
    v3 = v2 / 48;
    if (v3 <= 1)
      v3 = 1;
    v4 = (float *)(v1 + 4);
    do
    {
      result = *(v4 - 1);
      *v4 = result;
      v4 += 12;
      --v3;
    }
    while (v3);
  }
  v6 = *((_QWORD *)this + 21);
  v7 = *((_QWORD *)this + 22) - v6;
  if (v7)
  {
    v8 = v7 >> 4;
    if (v8 <= 1)
      v8 = 1;
    v9 = (float *)(v6 + 4);
    do
    {
      result = *(v9 - 1);
      *v9 = result;
      v9 += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

float cv3d::cv::gess::isochart::CMaxFlow::SetTweights(cv3d::cv::gess::isochart::CMaxFlow *this, int a2, float a3, float a4, double a5)
{
  float result;

  *(float *)&a5 = a3 - a4;
  *(int32x2_t *)(*((_QWORD *)this + 18) + 48 * a2) = vdup_lane_s32(*(int32x2_t *)&a5, 0);
  if (a4 < a3)
    a3 = a4;
  result = a3 + *((float *)this + 2);
  *((float *)this + 2) = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::Initialization(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  unint64_t v12;
  _OWORD v14[3];
  _OWORD v15[3];

  v1 = *((_OWORD *)this + 7);
  v2 = *((_OWORD *)this + 8);
  v3 = *((_OWORD *)this + 5);
  v15[0] = *((_OWORD *)this + 6);
  v15[1] = v1;
  v15[2] = v2;
  v4 = *((_OWORD *)this + 4);
  v14[0] = *((_OWORD *)this + 3);
  v14[1] = v4;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v14[2] = v3;
  v5 = *((_QWORD *)this + 18);
  if ((int)(-1431655765 * ((unint64_t)(*((_QWORD *)this + 19) - v5) >> 4)) >= 1)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = v5 + v7;
      v10 = *(float *)(v9 + 4);
      if (v10 > 0.0)
        break;
      if (v10 < 0.0)
      {
        v11 = 2;
        v12 = 0xFFFFFFECFFFFFFF6;
        goto LABEL_8;
      }
      *(_OWORD *)(v9 + 32) = xmmword_23C60C380;
LABEL_9:
      ++v8;
      v5 = *((_QWORD *)this + 18);
      v7 += 48;
      if (v8 >= (int)(-1431655765 * ((unint64_t)(*((_QWORD *)this + 19) - v5) >> 4)))
        goto LABEL_10;
    }
    v11 = 1;
    v12 = 0xFFFFFFECFFFFFFF5;
LABEL_8:
    *(_QWORD *)(v9 + 32) = v12;
    *(_DWORD *)(v9 + 40) = v11;
    *(_DWORD *)(v9 + 44) = 1;
    cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v8);
    goto LABEL_9;
  }
LABEL_10:
  std::deque<int>::~deque[abi:ne180100](v14);
  return std::deque<int>::~deque[abi:ne180100](v15);
}

void sub_23C559774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CMaxFlow::push_active(cv3d::cv::gess::isochart::CMaxFlow *this, int a2)
{
  int v2;

  v2 = a2;
  if (a2 < 0)
    cv3d::cv::gess::isochart::CMaxFlow::push_active();
  std::deque<int>::push_back((_QWORD *)this + 6, &v2);
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  int v22;
  uint64_t v23;
  float *v24;
  float v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  float *v33;
  float v34;
  _DWORD *v35;
  int v37;
  cv3d::cv::gess::isochart::CMaxFlow *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;

  v1 = *((_QWORD *)this + 11);
  if (!v1)
    return 0;
  v47 = (char *)this + 48;
  while (1)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 7) + ((*((_QWORD *)this + 10) >> 7) & 0x1FFFFFFFFFFFFF8))
                         + 4 * (*((_QWORD *)this + 10) & 0x3FFLL));
    ++*((_QWORD *)this + 10);
    *((_QWORD *)this + 11) = v1 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v47, 1);
    v4 = v3;
    v5 = *((_QWORD *)this + 18);
    v6 = v5 + 48 * (int)v3;
    v8 = *(_DWORD *)(v6 + 40);
    v7 = (_DWORD *)(v6 + 40);
    if (v8)
    {
      v9 = v5 + 48 * (int)v3;
      v12 = *(_QWORD *)(v9 + 8);
      v11 = (uint64_t *)(v9 + 8);
      v10 = v12;
      if (v11[1] != v12)
        break;
    }
LABEL_22:
    v1 = *((_QWORD *)this + 11);
    if (!v1)
      return 0;
  }
  v13 = 0;
  v14 = v5 + 48 * (int)v3 + 44;
  while (1)
  {
    v15 = *(_DWORD *)(v10 + 4 * v13);
    v16 = *((_QWORD *)this + 21);
    v17 = *(_DWORD *)(v16 + 16 * v15 + 12);
    v18 = *((_QWORD *)this + 18);
    if (*v7 != 1)
      break;
    v19 = v18 + 48 * v17;
    v22 = *(_DWORD *)(v19 + 40);
    v21 = (int *)(v19 + 40);
    v20 = v22;
    if (v22 == 1)
      goto LABEL_21;
    v23 = v16 + 16 * v15;
    v25 = *(float *)(v23 + 4);
    v24 = (float *)(v23 + 4);
    if (v25 <= 0.0)
      goto LABEL_21;
    if (v20 == 2)
    {
      v37 = v4;
      cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v4);
      v38 = this;
      v39 = v37;
      v40 = v17;
      v41 = v15;
      goto LABEL_26;
    }
    if (v20)
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    v43 = (_DWORD *)v14;
    v45 = v4;
    cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v17);
    v14 = (uint64_t)v43;
    v4 = v45;
    v26 = (_DWORD *)(v18 + 48 * v17);
    v26[8] = v45;
    v26[9] = v15;
    v26[11] = *v43 + 1;
    if (*v24 <= 0.0)
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    v27 = 1;
LABEL_20:
    *v21 = v27;
LABEL_21:
    ++v13;
    v10 = *v11;
    if (v13 >= (v11[1] - *v11) >> 2)
      goto LABEL_22;
  }
  if (*v7 != 2)
    cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
  v28 = v18 + 48 * v17;
  v30 = *(_DWORD *)(v28 + 40);
  v21 = (int *)(v28 + 40);
  v29 = v30;
  if (v30 == 2)
    goto LABEL_21;
  v31 = v15 ^ 1;
  v32 = v16 + 16 * v31;
  v34 = *(float *)(v32 + 4);
  v33 = (float *)(v32 + 4);
  if (v34 <= 0.0)
    goto LABEL_21;
  if (v29 != 1)
  {
    if (v29)
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    v44 = (_DWORD *)v14;
    v46 = v4;
    cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v17);
    v14 = (uint64_t)v44;
    v4 = v46;
    v35 = (_DWORD *)(v18 + 48 * v17);
    v35[8] = v46;
    v35[9] = v31;
    v35[11] = *v44 + 1;
    if (*v33 <= 0.0)
      cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath();
    v27 = 2;
    goto LABEL_20;
  }
  v42 = v4;
  cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v4);
  v38 = this;
  v39 = v17;
  v40 = v42;
  v41 = v31;
LABEL_26:
  cv3d::cv::gess::isochart::CMaxFlow::trace_current_path(v38, v39, v40, v41);
  return 1;
}

void cv3d::cv::gess::isochart::CMaxFlow::trace_current_path(cv3d::cv::gess::isochart::CMaxFlow *this, int a2, int a3, int a4)
{
  void **v4;
  _DWORD *v5;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  int v46;

  v4 = (void **)((char *)this + 24);
  v5 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v5;
  if (a4 == -1 || *(float *)(*((_QWORD *)this + 21) + 16 * a4 + 4) <= 0.0)
    cv3d::cv::gess::isochart::CMaxFlow::trace_current_path();
  v11 = (_QWORD *)((char *)this + 40);
  v10 = *((_QWORD *)this + 5);
  if ((unint64_t)v5 >= v10)
  {
    v13 = v10 - (_QWORD)v5;
    v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1)
      v14 = 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v15);
    v17 = (char *)*((_QWORD *)this + 3);
    v18 = (char *)*((_QWORD *)this + 4);
    v20 = &v16[v19];
    *v16 = a4;
    v12 = (char *)(v16 + 1);
    while (v18 != v17)
    {
      v21 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--v16 = v21;
    }
    *((_QWORD *)this + 3) = v16;
    *((_QWORD *)this + 4) = v12;
    *((_QWORD *)this + 5) = v20;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v5 = a4;
    v12 = (char *)(v5 + 1);
  }
  *((_QWORD *)this + 4) = v12;
  while (1)
  {
    v22 = *((_QWORD *)this + 18);
    if (*(_DWORD *)(v22 + 48 * a2 + 40) != 1)
      cv3d::cv::gess::isochart::CMaxFlow::trace_current_path();
    v23 = *(_DWORD *)(v22 + 48 * a2 + 32);
    if (v23 == -11)
      break;
    v24 = *(_DWORD *)(v22 + 48 * a2 + 36);
    if ((unint64_t)v12 >= *v11)
    {
      v26 = (char *)*v4;
      v27 = (v12 - (_BYTE *)*v4) >> 2;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62)
LABEL_60:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v29 = *v11 - (_QWORD)v26;
      if (v29 >> 1 > v28)
        v28 = v29 >> 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v30);
        v26 = (char *)*((_QWORD *)this + 3);
        v12 = (char *)*((_QWORD *)this + 4);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[4 * v27];
      *(_DWORD *)v32 = v24;
      v25 = v32 + 4;
      while (v12 != v26)
      {
        v33 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v32 - 1) = v33;
        v32 -= 4;
      }
      *((_QWORD *)this + 3) = v32;
      *((_QWORD *)this + 4) = v25;
      *((_QWORD *)this + 5) = &v31[4 * v30];
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_DWORD *)v12 = v24;
      v25 = v12 + 4;
    }
    *((_QWORD *)this + 4) = v25;
    v12 = v25;
    a2 = v23;
  }
  *((_DWORD *)this + 3) = a2;
  v34 = *((_QWORD *)this + 18);
  if (*(_DWORD *)(v34 + 48 * a3 + 40) != 2)
    goto LABEL_58;
  v35 = a3;
  v36 = *(_DWORD *)(v34 + 48 * a3 + 32);
  if (v36 != -10)
  {
    while (1)
    {
      a3 = v36;
      v37 = *(_DWORD *)(v34 + 48 * v35 + 36);
      if ((unint64_t)v12 >= *v11)
      {
        v38 = (char *)*v4;
        v39 = (v12 - (_BYTE *)*v4) >> 2;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          goto LABEL_60;
        v41 = *v11 - (_QWORD)v38;
        if (v41 >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 40, v42);
          v38 = (char *)*((_QWORD *)this + 3);
          v12 = (char *)*((_QWORD *)this + 4);
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[4 * v39];
        *(_DWORD *)v44 = v37;
        v45 = v44 + 4;
        while (v12 != v38)
        {
          v46 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v44 - 1) = v46;
          v44 -= 4;
        }
        *((_QWORD *)this + 3) = v44;
        *((_QWORD *)this + 4) = v45;
        *((_QWORD *)this + 5) = &v43[4 * v42];
        if (v38)
          operator delete(v38);
        v12 = v45;
      }
      else
      {
        *(_DWORD *)v12 = v37;
        v12 += 4;
      }
      *((_QWORD *)this + 4) = v12;
      v34 = *((_QWORD *)this + 18);
      if (*(_DWORD *)(v34 + 48 * a3 + 40) != 2)
        break;
      v35 = a3;
      v36 = *(_DWORD *)(v34 + 48 * a3 + 32);
      if (v36 == -10)
        goto LABEL_56;
    }
LABEL_58:
    cv3d::cv::gess::isochart::CMaxFlow::trace_current_path();
  }
LABEL_56:
  *((_DWORD *)this + 4) = a3;
}

float cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  int *v1;
  int *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  int v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  float result;
  int v35;

  v1 = (int *)*((_QWORD *)this + 3);
  v2 = (int *)*((_QWORD *)this + 4);
  if (v1 == v2)
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  v4 = *((_DWORD *)this + 3);
  v5 = *((_QWORD *)this + 18);
  v6 = v5 + 48 * v4;
  v8 = *(float *)(v6 + 4);
  v7 = (float *)(v6 + 4);
  v9 = v8;
  if (v8 <= 0.0)
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  v10 = *((_DWORD *)this + 4);
  v11 = v5 + 48 * v10;
  v13 = *(float *)(v11 + 4);
  v12 = (float *)(v11 + 4);
  v14 = v13;
  if (v13 >= 0.0)
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  v15 = v2 - v1;
  v16 = -v14;
  if (v9 <= v16)
    v17 = v9;
  else
    v17 = v16;
  if (v15 <= 1)
    v15 = 1;
  do
  {
    v18 = *v1++;
    v19 = *((_QWORD *)this + 21) + 16 * v18;
    if (*(float *)(v19 + 4) < v17)
      v17 = *(float *)(v19 + 4);
    --v15;
  }
  while (v15);
  if (v17 <= 0.0)
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  *v7 = v9 - v17;
  v20 = v17 + *v12;
  *v12 = v20;
  if (*((_QWORD *)this + 17))
    cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath();
  if (fabsf(*v7) <= 1.1755e-38)
  {
    v21 = v5 + 48 * v4;
    *(_QWORD *)(v21 + 32) = 0x1300000013;
    *(_DWORD *)(v21 + 44) = 0;
    v35 = v4;
    std::deque<int>::push_back((_QWORD *)this + 12, &v35);
    v20 = *v12;
  }
  if (fabsf(v20) <= 1.1755e-38)
  {
    v22 = v5 + 48 * v10;
    *(_QWORD *)(v22 + 32) = 0x1300000013;
    *(_DWORD *)(v22 + 44) = 0;
    v35 = *((_DWORD *)this + 4);
    std::deque<int>::push_back((_QWORD *)this + 12, &v35);
  }
  v23 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v23)
  {
    for (i = 0; i < (*((_QWORD *)this + 4) - v23) >> 2; ++i)
    {
      v25 = *(int *)(v23 + 4 * i);
      v26 = *((_QWORD *)this + 21);
      v27 = v26 + 16 * v25;
      *(float *)(v27 + 4) = *(float *)(v27 + 4) - v17;
      *(float *)(v26 + 16 * (v25 ^ 1) + 4) = v17 + *(float *)(v26 + 16 * (v25 ^ 1) + 4);
      if (fabsf(*(float *)(v27 + 4)) <= 1.1755e-38)
      {
        v28 = *((_QWORD *)this + 18);
        v30 = *(_DWORD *)(v27 + 8);
        v29 = *(_DWORD *)(v27 + 12);
        v31 = *(_DWORD *)(v28 + 48 * v30 + 40);
        if (v31 != 2)
        {
          if (v31 != 1 || *(_DWORD *)(v28 + 48 * v29 + 40) != 1)
            goto LABEL_28;
          v32 = v28 + 48 * v29;
          *(_QWORD *)(v32 + 32) = 0x1300000013;
          *(_DWORD *)(v32 + 44) = 0;
          v35 = v29;
          goto LABEL_27;
        }
        if (*(_DWORD *)(v28 + 48 * v29 + 40) == 2)
        {
          v33 = v28 + 48 * v30;
          *(_QWORD *)(v33 + 32) = 0x1300000013;
          *(_DWORD *)(v33 + 44) = 0;
          v35 = v30;
LABEL_27:
          std::deque<int>::push_back((_QWORD *)this + 12, &v35);
        }
      }
LABEL_28:
      v23 = *((_QWORD *)this + 3);
    }
  }
  result = v17 + *((float *)this + 2);
  *((float *)this + 2) = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st(cv3d::cv::gess::isochart::CMaxFlow *this, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 18);
  if (*(_DWORD *)(v2 + 48 * a2 + 40))
  {
    while (1)
    {
      v3 = a2;
      a2 = *(_DWORD *)(v2 + 48 * a2 + 32);
      if (a2 == -20)
        break;
      if ((a2 + 11) <= 1)
      {
        if (fabsf(*(float *)(v2 + 48 * v3 + 4)) < 1.1755e-38)
          cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st();
        return 1;
      }
    }
  }
  return 0;
}

void cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t v1;
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  char *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;

  v1 = *((_QWORD *)this + 17);
  if (!v1)
    return;
  v3 = (char *)this + 96;
  v28 = (char *)this + 96;
  do
  {
    v4 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + ((*((_QWORD *)this + 16) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (*((_QWORD *)this + 16) & 0x3FFLL));
    ++*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v1 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v3, 1);
    v5 = *((_QWORD *)this + 18);
    if (fabsf(*(float *)(v5 + 48 * v4 + 4)) > 1.1755e-38)
      cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans();
    v29 = *((_QWORD *)this + 18);
    v6 = v5 + 48 * v4;
    v9 = *(_QWORD *)(v6 + 8);
    v8 = (uint64_t *)(v6 + 8);
    v7 = v9;
    v10 = v8 + 1;
    if (v8[1] == v9)
      goto LABEL_29;
    v11 = 0;
    v12 = 0;
    v13 = (int *)(v29 + 48 * v4 + 40);
    v30 = -1;
    v31 = -1;
    do
    {
      v14 = *v13;
      if (!*v13)
        goto LABEL_17;
      v15 = *(int *)(v7 + 4 * v12);
      v16 = *((_QWORD *)this + 21);
      v17 = *(_DWORD *)(v16 + 16 * v15 + 12);
      if (v14 != *(_DWORD *)(*((_QWORD *)this + 18) + 48 * v17 + 40))
        goto LABEL_17;
      if (v14 == 2)
      {
        v18 = v16 + 16 * v15;
LABEL_12:
        if (fabsf(*(float *)(v18 + 4)) <= 1.1755e-38)
          goto LABEL_17;
        goto LABEL_13;
      }
      if (v14 == 1)
      {
        v18 = v16 + 16 * (v15 ^ 1);
        goto LABEL_12;
      }
LABEL_13:
      if (cv3d::cv::gess::isochart::CMaxFlow::connecting_to_st(this, v17)
        && (!v11 || v11 > *(_DWORD *)(*((_QWORD *)this + 18) + 48 * v17 + 44)))
      {
        v30 = v15 ^ (*v13 == 1);
        v31 = v17;
        v11 = *(_DWORD *)(*((_QWORD *)this + 18) + 48 * v17 + 44);
      }
LABEL_17:
      ++v12;
      v7 = *v8;
    }
    while (v12 < (*v10 - *v8) >> 2);
    if (v31 != -1)
    {
      v3 = v28;
      v19 = (_DWORD *)(v29 + 48 * v4);
      v19[8] = v31;
      v19[9] = v30;
      v19[11] = *(_DWORD *)(*((_QWORD *)this + 18) + 48 * v31 + 44) + 1;
      goto LABEL_30;
    }
    v3 = v28;
    if (*v10 != v7)
    {
      v20 = 0;
      do
      {
        if (*v13)
        {
          v21 = *(int *)(v7 + 4 * v20);
          v22 = *((_QWORD *)this + 21);
          v23 = *(_DWORD *)(v22 + 16 * v21 + 12);
          v24 = *((_QWORD *)this + 18);
          if (*v13 == *(_DWORD *)(v24 + 48 * v23 + 40))
          {
            v25 = v24 + 48 * v23;
            v27 = *(_DWORD *)(v25 + 32);
            v26 = (_QWORD *)(v25 + 32);
            if (v27 == v4)
            {
              *v26 = 0x1300000013;
              *(_DWORD *)(v24 + 48 * v23 + 44) = 0;
              v32 = v23;
              std::deque<int>::push_back(v28, &v32);
              v22 = *((_QWORD *)this + 21);
            }
            if (*(float *)(v22 + 16 * (v21 ^ 1) + 4) > 0.0)
              cv3d::cv::gess::isochart::CMaxFlow::push_active(this, v23);
          }
        }
        ++v20;
        v7 = *v8;
      }
      while (v20 < (*v10 - *v8) >> 2);
    }
LABEL_29:
    *(_DWORD *)(v29 + 48 * v4 + 40) = 0;
LABEL_30:
    v1 = *((_QWORD *)this + 17);
  }
  while (v1);
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 48);
      a3 -= 48;
      *(_QWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 32);
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::CMaxFlow::Node>,std::reverse_iterator<cv3d::cv::gess::isochart::CMaxFlow::Node*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(_QWORD *)(v2 - 32) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

cv3d::cv::gess::isochart::CMaxFlow::Node *std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__append(uint64_t *a1, unint64_t a2)
{
  cv3d::cv::gess::isochart::CMaxFlow::Node *result;
  uint64_t v5;
  uint64_t v6;
  cv3d::cv::gess::isochart::CMaxFlow::Node *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  cv3d::cv::gess::isochart::CMaxFlow::Node *v13;
  uint64_t v14;
  cv3d::cv::gess::isochart::CMaxFlow::Node *v15;
  uint64_t v16;
  cv3d::cv::gess::isochart::CMaxFlow::Node *v17;
  uint64_t v18;
  _QWORD v19[2];
  cv3d::cv::gess::isochart::CMaxFlow::Node *v20;
  char *v21;
  cv3d::cv::gess::isochart::CMaxFlow::Node *v22;

  v6 = a1[2];
  result = (cv3d::cv::gess::isochart::CMaxFlow::Node *)(a1 + 2);
  v5 = v6;
  v7 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)*((_QWORD *)result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v7 + 48 * a2);
      v14 = 48 * a2;
      do
      {
        result = cv3d::cv::gess::isochart::CMaxFlow::Node::Node(v7);
        v7 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v7 + 48);
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)&v12[48 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[48 * v11];
    v16 = 3 * a2;
    v17 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v15 + 48 * a2);
    v18 = 16 * v16;
    do
    {
      cv3d::cv::gess::isochart::CMaxFlow::Node::Node(v15);
      v15 = (cv3d::cv::gess::isochart::CMaxFlow::Node *)((char *)v15 + 48);
      v18 -= 48;
    }
    while (v18);
    v20 = v17;
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__swap_out_circular_buffer(a1, v19);
    return (cv3d::cv::gess::isochart::CMaxFlow::Node *)std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_23C55A64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::CMaxFlow::Node>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::isochart::CMaxFlow::Node *cv3d::cv::gess::isochart::CMaxFlow::Node::Node(cv3d::cv::gess::isochart::CMaxFlow::Node *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_23C60C380;
  std::vector<unsigned int>::reserve((std::vector<int> *)((char *)this + 8), cv3d::cv::gess::isochart::CMaxFlow::Node::m_expect_degree);
  return this;
}

void sub_23C55A6C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23C55AA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<int *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<int *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t std::deque<int>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

double cv3d::cv::gess::isochart::CGraphcut::CGraphcut(cv3d::cv::gess::isochart::CGraphcut *this)
{
  double result;

  *((_QWORD *)this + 23) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

void cv3d::cv::gess::isochart::CGraphcut::~CGraphcut(cv3d::cv::gess::isochart::CGraphcut *this)
{
  void **v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = (void **)((char *)this + 144);
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  v3 = (void *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 22) = v3;
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
  v5 = v2;
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)this + 12);
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)this + 6);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

void cv3d::cv::gess::isochart::CGraphcut::Clear(cv3d::cv::gess::isochart::CGraphcut *this)
{
  std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)this + 18);
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
}

uint64_t cv3d::cv::gess::isochart::CGraphcut::AddNode(cv3d::cv::gess::isochart::CGraphcut *this, float a2, float a3)
{
  uint64_t v6;
  double v7;

  v6 = cv3d::cv::gess::isochart::CMaxFlow::AddNode(this);
  cv3d::cv::gess::isochart::CMaxFlow::SetTweights(this, v6, a2, a3, v7);
  return v6;
}

float cv3d::cv::gess::isochart::CGraphcut::CutGraph(cv3d::cv::gess::isochart::CGraphcut *this, float *a2)
{
  float result;

  cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow(this);
  result = *((float *)this + 2);
  *a2 = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow(cv3d::cv::gess::isochart::CMaxFlow *this)
{
  uint64_t result;

  if (*(_QWORD *)this != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4))
    cv3d::cv::gess::isochart::CMaxFlow::ComputeMaxFlow();
  cv3d::cv::gess::isochart::CMaxFlow::Initialization(this);
  result = cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath(this);
  if ((_DWORD)result)
  {
    do
    {
      cv3d::cv::gess::isochart::CMaxFlow::AugmentCurrentPath(this);
      cv3d::cv::gess::isochart::CMaxFlow::AdoptOrphans(this);
      result = cv3d::cv::gess::isochart::CMaxFlow::FindAugmentPath(this);
    }
    while ((result & 1) != 0);
  }
  return result;
}

BOOL cv3d::cv::gess::isochart::CGraphcut::IsInSourceDomain(cv3d::cv::gess::isochart::CGraphcut *this, int a2)
{
  return *(_DWORD *)(*((_QWORD *)this + 18) + 48 * a2 + 40) == 1;
}

void std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::isochart::CMaxFlow::Node>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

cv3d::cv::gess::isochart::Geodesic *cv3d::cv::gess::isochart::Geodesic::Geodesic(cv3d::cv::gess::isochart::Geodesic *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  std::vector<unsigned int> *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *__p;
  int v18;
  unsigned int v19;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)((char *)this + 28) = -1;
  *((_DWORD *)this + 9) = -1;
  *(_OWORD *)((char *)this + 40) = xmmword_23C60C390;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *(_QWORD *)((char *)this + 68) = -1;
  *((_DWORD *)this + 19) = 0;
  *((_QWORD *)this + 10) = -1;
  *((_DWORD *)this + 22) = -1;
  *(_OWORD *)((char *)this + 92) = xmmword_23C60C390;
  *(_QWORD *)((char *)this + 108) = 0;
  *((_DWORD *)this + 29) = 0;
  *((_QWORD *)this + 15) = -1;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  v3 = (std::vector<unsigned int> *)((char *)this + 200);
  v4 = (char *)this + 176;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 46) = -1;
  *((_DWORD *)this + 94) = -1;
  *(_OWORD *)((char *)this + 380) = xmmword_23C60C390;
  *((_DWORD *)this + 99) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = -1;
  *((_QWORD *)this + 52) = 0xFFFFFFFF00000000;
  *((_QWORD *)this + 53) = -1;
  *((_OWORD *)this + 27) = xmmword_23C60C390;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0xFFFFFFFF00000000;
  *((_QWORD *)this + 58) = 0xFFFFFFFFLL;
  *((_QWORD *)this + 59) = a2;
  *((_BYTE *)this + 160) = 1;
  std::vector<BOOL>::resize((uint64_t)this + 296, (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2, 0);
  v5 = *((_QWORD *)this + 38);
  if (v5)
  {
    __p = (void *)*((_QWORD *)this + 37);
    v18 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&__p, v5);
  }
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)v4, (0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 136) - *(_QWORD *)(*((_QWORD *)this + 59) + 128)) >> 2)) >> 1);
  std::vector<int>::resize(v3, 0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 136) - *(_QWORD *)(*((_QWORD *)this + 59) + 128)) >> 2));
  v6 = 0xCCCCCCCCCCCCCCCDLL
     * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 136) - *(_QWORD *)(*((_QWORD *)this + 59) + 128)) >> 2);
  LOBYTE(v19) = 0;
  std::vector<BOOL>::vector(&__p, v6, (unsigned __int8 *)&v19);
  v7 = *((_QWORD *)this + 59);
  v8 = __p;
  if (*(_QWORD *)(v7 + 136) != *(_QWORD *)(v7 + 128))
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
    do
    {
      if ((v8[v9 >> 6] & (1 << v9)) == 0)
      {
        *(_DWORD *)(*((_QWORD *)this + 22) + 4 * v10) = v11 - 1;
        v12 = *((_QWORD *)this + 59);
        v19 = v11 - 1;
        v13 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12 + 104, &v19);
        v8 = __p;
        *((_QWORD *)__p + (v9 >> 6)) |= 1 << v9;
        *(_QWORD *)((char *)v8 + ((v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
        v14 = *((_QWORD *)this + 25);
        *(_DWORD *)(v14 + 4 * v9) = v10;
        *(_DWORD *)(v14 + 4 * v13) = v10++;
        v7 = *((_QWORD *)this + 59);
      }
      v9 = v11;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v7 + 136) - *(_QWORD *)(v7 + 128)) >> 2) > v11++);
    goto LABEL_10;
  }
  if (__p)
LABEL_10:
    operator delete(v8);
  return this;
}

void sub_23C55B4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void **v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void **v27;

  v27 = v18;
  a14 = v16 + 18;
  std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__destroy_vector::operator()[abi:ne180100](&a14);
  v20 = *(void **)(v14 + 320);
  if (v20)
  {
    *(_QWORD *)(v14 + 328) = v20;
    operator delete(v20);
  }
  if (*v27)
    operator delete(*v27);
  v21 = *(void **)(v14 + 272);
  if (v21)
    operator delete(v21);
  v22 = *(void **)(v14 + 248);
  if (v22)
  {
    *(_QWORD *)(v14 + 256) = v22;
    operator delete(v22);
  }
  v23 = *(void **)(v14 + 224);
  if (v23)
  {
    *(_QWORD *)(v14 + 232) = v23;
    operator delete(v23);
  }
  v24 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v14 + 208) = v24;
    operator delete(v24);
  }
  v25 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v14 + 184) = v25;
    operator delete(v25);
  }
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::~MaxHeap(v15);
  v26 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::Geodesic::SetSrcVertexIdx(cv3d::cv::gess::isochart::Geodesic *this, unsigned int a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  char v27;
  int v28;
  unsigned int *v29;
  int v30;
  uint64_t v31;
  char v32;
  int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unsigned int *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  _BYTE v52[20];
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  unsigned int v59[3];

  *((_DWORD *)this + 6) = a2;
  while (*((_QWORD *)this + 21))
  {
    cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at((uint64_t *)this + 17, 0, &v57);
    v51 = 0;
    *(_QWORD *)v52 = 0;
    v4 = v58;
    v57 = 0;
    v58 = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v7 = v58;
      if (v58)
      {
        v8 = (unint64_t *)&v58->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
  std::vector<float>::resize((uint64_t)this, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 112) - *(_QWORD *)(*((_QWORD *)this + 59) + 104)) >> 2);
  v10 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v10 >= 1)
    memset_pattern16(*(void **)this, &unk_23C60C3A0, 4 * (((unint64_t)v10 >> 2) - ((unint64_t)v10 > 3)) + 4);
  std::vector<float>::resize((uint64_t)this + 224, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 112) - *(_QWORD *)(*((_QWORD *)this + 59) + 104)) >> 2);
  v11 = (void *)*((_QWORD *)this + 28);
  v12 = *((_QWORD *)this + 29) - (_QWORD)v11;
  if (v12 >= 1)
    memset_pattern16(v11, &unk_23C60C3A0, 4 * (((unint64_t)v12 >> 2) - ((unint64_t)v12 > 3)) + 4);
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)this + 248, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 112) - *(_QWORD *)(*((_QWORD *)this + 59) + 104)) >> 2);
  std::vector<BOOL>::resize((uint64_t)this + 272, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 59) + 112) - *(_QWORD *)(*((_QWORD *)this + 59) + 104)) >> 2, 0);
  v13 = *((_QWORD *)this + 35);
  if (v13)
  {
    v51 = *((_QWORD *)this + 34);
    *(_DWORD *)v52 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v51, v13);
  }
  v14 = *((_QWORD *)this + 23) - *((_QWORD *)this + 22);
  v15 = (v14 >> 2);
  std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::resize((uint64_t *)this + 43, v15);
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    v16 = 0;
    while (1)
    {
      v59[0] = *(_DWORD *)(*((_QWORD *)this + 22) + 4 * v16);
      if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, v59) + 12) == a2)
      {
        v17 = 1;
      }
      else
      {
        v18 = *((_QWORD *)this + 59) + 104;
        v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, v59);
        v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v18, v19) + 12) == a2;
      }
      v20 = cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, v59);
      v21 = *((_QWORD *)this + 59) + 104;
      v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, v59);
      v23 = cv3d::cv::gess::mesh::Topology::h(v21, v22);
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v57, 3uLL);
      v25 = *(_DWORD *)(v20 + 16);
      v24 = (unsigned int *)(v20 + 16);
      if (v25 == -1)
      {
        v28 = 0;
      }
      else
      {
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*((_QWORD *)this + 59), v24, &v57);
        v26 = 0;
        v27 = 0;
        do
        {
          if (*(_DWORD *)((char *)&v57->__vftable + v26) == a2)
            v27 = 1;
          v26 += 4;
        }
        while (v26 != 12);
        v28 = v27 & 1;
      }
      v30 = *(_DWORD *)(v23 + 16);
      v29 = (unsigned int *)(v23 + 16);
      if (v30 != -1)
        break;
      v33 = 0;
      if (!v17)
        goto LABEL_39;
LABEL_47:
      if (v57)
      {
        v58 = v57;
        operator delete(v57);
      }
      if (++v16 == v15)
        goto LABEL_50;
    }
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*((_QWORD *)this + 59), v29, &v57);
    v31 = 0;
    v32 = 0;
    do
    {
      if (*(_DWORD *)((char *)&v57->__vftable + v31) == a2)
        v32 = 1;
      v31 += 4;
    }
    while (v31 != 12);
    v33 = v32 & 1;
    if (v17)
      goto LABEL_47;
LABEL_39:
    if (v28 | v33)
    {
      v51 = -1;
      *(_DWORD *)v52 = -1;
      *(_OWORD *)&v52[4] = xmmword_23C60C390;
      v54 = 0;
      v53 = 0;
      v55 = -1;
      v56 = 0;
      if ((v28 & 1) != 0)
        v34 = v59;
      else
        v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, v59);
      LODWORD(v51) = *v34;
      v35 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, (unsigned int *)&v51) + 12);
      v36 = *((_QWORD *)this + 59) + 104;
      v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v36, (unsigned int *)&v51);
      LODWORD(v36) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v36, v37) + 12);
      HIDWORD(v54) = 0;
      *(_DWORD *)&v52[4] = 0;
      v45 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v36);
      v38 = vsubq_f32(v45, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v35));
      v39 = vmulq_f32(v38, v38);
      v39.i32[3] = 0;
      *(_DWORD *)&v52[8] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)));
      v46 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v35);
      v40 = vsubq_f32(v46, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), a2));
      v41 = vmulq_f32(v40, v40);
      v41.i32[3] = 0;
      *(_DWORD *)&v52[12] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41)));
      v47 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v36);
      v42 = vsubq_f32(v47, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), a2));
      v43 = vmulq_f32(v42, v42);
      v43.i32[3] = 0;
      *(_DWORD *)&v52[16] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43)));
      v50 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v35);
      v49 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v36);
      v48 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), a2);
      cv3d::cv::gess::isochart::ParameterizePt3ToPt2(&v50, &v49, &v48, (float *)&v53);
      HIDWORD(v51) = v35;
      *(_DWORD *)v52 = a2;
      if (v28)
        v44 = v24;
      else
        v44 = v29;
      LODWORD(v55) = *v44;
      cv3d::cv::gess::isochart::Geodesic::AddWindowToHeapAndEdge((uint64_t *)this, (unsigned int *)&v51);
    }
    goto LABEL_47;
  }
LABEL_50:
  *(_DWORD *)(*(_QWORD *)this + 4 * *((unsigned int *)this + 6)) = 0;
}

void sub_23C55BB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  void *v24;

  v24 = *(void **)(v22 - 128);
  if (v24)
  {
    *(_QWORD *)(v22 - 120) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void cv3d::cv::gess::isochart::Geodesic::AddWindowToHeapAndEdge(uint64_t *a1, unsigned int *a2)
{
  float v4;
  float v5;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unsigned int AnotherVertex;
  uint64_t v32;
  float v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  _BYTE v40[28];
  int v41;
  int v42;
  __int128 v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v4 = *((float *)a2 + 6);
  if (v4 >= *((float *)a2 + 5))
    v4 = *((float *)a2 + 5);
  v5 = *((float *)a2 + 9) + v4;
  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_250D4A5A8;
  *((float *)v6 + 6) = v5;
  *(_OWORD *)(v6 + 28) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 3);
  *((_QWORD *)v6 + 7) = *(_QWORD *)(a2 + 7);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a2 + 9);
  *((_QWORD *)v6 + 10) = -1;
  v46 = (uint64_t)(v6 + 24);
  v47 = (std::__shared_weak_count *)v6;
  *(_QWORD *)&v45 = v6 + 24;
  *((_QWORD *)&v45 + 1) = v6;
  *((_QWORD *)v6 + 1) = 0;
  v7 = (unint64_t *)(v6 + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert((uint64_t)(a1 + 17), &v45);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_DWORD *)(a1[25] + 4 * *a2);
  v13 = a1[43];
  v37 = v46;
  v38 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  cv3d::cv::gess::isochart::WindowListElement::WindowListElement((uint64_t)&v39, &v37, (__int128 *)a2);
  v16 = v13 + 24 * v12;
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v16 + 16);
  v19 = (uint64_t *)(v16 + 8);
  if (v17 >= v18)
  {
    v21 = std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>((uint64_t *)(v13 + 24 * v12), (uint64_t)&v39);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    *v19 = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    *(_OWORD *)v17 = v39;
    v39 = 0uLL;
    v20 = *(_OWORD *)&v40[12];
    *(_OWORD *)(v17 + 16) = *(_OWORD *)v40;
    *(_OWORD *)(v17 + 28) = v20;
    *(_DWORD *)(v17 + 44) = v41;
    *(_DWORD *)(v17 + 48) = v42;
    *(_OWORD *)(v17 + 52) = v43;
    *(_BYTE *)(v17 + 68) = v44;
    *v19 = v17 + 72;
  }
  v25 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = a2[1];
  v29 = *a1;
  v30 = *((float *)a2 + 5) + *((float *)a2 + 9);
  if (v30 >= *(float *)(*a1 + 4 * v28))
    v30 = *(float *)(*a1 + 4 * v28);
  *(float *)(v29 + 4 * v28) = v30;
  *(_DWORD *)(a1[28] + 4 * v28) = 0;
  if (vabds_f32(*(float *)(v29 + 4 * v28), *((float *)a2 + 5) + *((float *)a2 + 9)) < 0.00000001)
    *(_DWORD *)(a1[31] + 4 * v28) = *a2;
  AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)a1, a2, (int *)a2 + 1);
  if (AnotherVertex == -1)
    __assert_rtn("AddWindowToHeapAndEdge", "Geodesic.cpp", 136, "v_another.Valid()");
  v32 = *a1;
  v33 = *((float *)a2 + 6) + *((float *)a2 + 9);
  if (v33 >= *(float *)(*a1 + 4 * AnotherVertex))
    v33 = *(float *)(*a1 + 4 * AnotherVertex);
  *(float *)(v32 + 4 * AnotherVertex) = v33;
  *(_DWORD *)(a1[28] + 4 * AnotherVertex) = 0;
  if (vabds_f32(*(float *)(v32 + 4 * AnotherVertex), *((float *)a2 + 6) + *((float *)a2 + 9)) < 0.00000001)
    *(_DWORD *)(a1[31] + 4 * AnotherVertex) = *a2;
  v34 = v47;
  if (v47)
  {
    v35 = (unint64_t *)&v47->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_23C55BF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v11 - 80);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4)
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)a1, a2);
  else
    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a1 + 16 * v4), (uint64_t *)a2);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)a2 + 56) = v5;
  *(_QWORD *)(a1 + 32) = v5 + 1;
  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::upheap((uint64_t *)a1, v5);
  return 1;
}

uint64_t cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;

  v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 472) + 104, a2) + 12);
  v7 = *a3;
  v8 = *(_QWORD *)(a1 + 472) + 104;
  v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, a2);
  result = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v9) + 12);
  if (v6 != v7)
  {
    if ((_DWORD)result == *a3)
      return *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 472) + 104, a2) + 12);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

void cv3d::cv::gess::isochart::Geodesic::CutHeapTopData(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(a1 + 17, 0, &v20);
  v4 = v20;
  v5 = a1[43] + 24 * *(unsigned int *)(a1[25] + 4 * *(unsigned int *)(v20 + 4));
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD *)(v5 + 8) - *(_QWORD *)v5;
  if (v7)
  {
    v8 = v7 / 72;
    if (v8 <= 1)
      v8 = 1;
    while (*v6 != v20)
    {
      v6 += 9;
      if (!--v8)
        goto LABEL_13;
    }
    v19 = 0uLL;
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v6, &v19);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 = v20;
  }
LABEL_13:
  v12 = *(_OWORD *)(v4 + 4);
  *(_OWORD *)(a2 + 12) = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a2 = v12;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v4 + 32);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v4 + 36);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(v4 + 40);
  v13 = v21;
  v20 = 0;
  v21 = 0;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v16 = v21;
    if (v21)
    {
      v17 = (unint64_t *)&v21->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void cv3d::cv::gess::isochart::Geodesic::InternalRun(cv3d::cv::gess::isochart::Geodesic *this)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  void *v38;
  int64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  char *v44;
  char *v45;
  unsigned int v46;
  char *v47;
  void *v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  double v63;
  uint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  void *v74;
  int64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  unsigned int *v79;
  char *v80;
  char *v81;
  unsigned int v82;
  char *v83;
  void *v84;
  int64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  unsigned int v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  _DWORD *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t i;
  unsigned int HEdge;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  uint64_t v137;
  float v138;
  float v139;
  uint64_t v140;
  float v141;
  float v142;
  uint64_t v143;
  float v144;
  float v145;
  unint64_t v146;
  uint64_t *v147;
  int v148;
  const char *v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int *v154;
  unsigned int v155;
  float32x4_t v156;
  float32x4_t v157;
  void *__p[2];
  _QWORD v159[2];
  void *v160[2];
  _QWORD v161[2];
  unsigned int OpposingEdge;
  unsigned int AnotherVertex;
  unsigned int v164;
  unsigned int v165;
  float32x4_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  int AnotherFace;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];

  v181 = 0;
  v182[0] = 0;
  v179 = 0;
  v180 = 0;
  v177 = 0;
  v178 = 0;
  v175 = -1;
  AnotherFace = -1;
  v173 = -1;
  v174 = -1;
  v172 = -1;
  v170 = 0;
  v171 = 0;
  v168 = 0;
  v169 = 0;
  v167 = 0;
  if (!*((_QWORD *)this + 21))
    goto LABEL_165;
  v154 = (int *)((char *)this + 424);
  do
  {
    *((_DWORD *)this + 92) = -1;
    cv3d::cv::gess::isochart::Geodesic::CutHeapTopData((uint64_t *)this, (uint64_t)this + 420);
    if (cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, (unsigned int *)this + 105)
      || vabds_f32(*((float *)this + 108), *((float *)this + 109)) <= 0.00000001)
    {
      continue;
    }
    AnotherFace = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, (unsigned int *)this + 105, (_DWORD *)this + 115);
    v2 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, (unsigned int *)this + 105) + 12);
    v3 = *((_DWORD *)this + 106);
    v4 = *((_QWORD *)this + 59) + 104;
    v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)this + 105);
    v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, v5) + 8);
    if (v2 == v3)
    {
      v175 = v6;
      v174 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, &v175) + 8);
      v7 = *((_QWORD *)this + 59) + 104;
      v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, &v175);
      v173 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v8) + 12);
      v9 = *((_QWORD *)this + 59) + 104;
      v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, (unsigned int *)this + 105);
      v11 = v9;
    }
    else
    {
      v174 = v6;
      v175 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, &v174) + 8);
      v173 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, &v175) + 12);
      v11 = *((_QWORD *)this + 59) + 104;
      v10 = (unsigned int *)((char *)this + 420);
    }
    v172 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, v10) + 12);
    v182[0] = *((unsigned int *)this + 108);
    v181 = *((unsigned int *)this + 109);
    v180 = *((_QWORD *)this + 56);
    v179 = 0;
    v12 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)this + 105);
    v178 = LODWORD(v12);
    if (*(float *)&v181 > v12)
      *(float *)&v181 = v12;
    *(_OWORD *)v160 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 106));
    *(_OWORD *)__p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v172);
    v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v173);
    cv3d::cv::gess::isochart::ParameterizePt3ToPt2((float32x4_t *)v160, (float32x4_t *)__p, &v166, (float *)&v177);
    *((float *)&v177 + 1) = -*((float *)&v177 + 1);
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v179, (float *)&v177, (float *)&v180, (float *)v182, (float *)&v171, (BOOL *)&v167 + 3);
    if (fabsf(*(float *)&v171 + -3.4028e38) < 0.00000001 && vabds_f32(*(float *)v182, *(float *)&v179) < 0.00000001)
    {
      HIBYTE(v167) = 1;
      v171 = v179;
    }
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v178, (float *)&v177, (float *)&v180, (float *)v182, (float *)&v170, (BOOL *)&v167 + 2);
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v179, (float *)&v177, (float *)&v180, (float *)&v181, (float *)&v169, (BOOL *)&v167 + 1);
    cv3d::cv::gess::isochart::GetCommonPointOf2Lines((float *)&v178, (float *)&v177, (float *)&v180, (float *)&v181, (float *)&v168, (BOOL *)&v167);
    v13 = *(float *)&v168;
    if (fabsf(*(float *)&v168 + -3.4028e38) < 0.00000001 && vabds_f32(*(float *)&v178, *(float *)&v181) < 0.00000001)
    {
      LOBYTE(v167) = 1;
      v168 = v178;
      v13 = *(float *)&v178;
    }
    if (HIBYTE(v167) && (_BYTE)v167 && !*(_WORD *)((char *)&v167 + 1))
    {
      v15 = *((float *)&v177 + 1);
      v14 = *(float *)&v177;
      v16 = sqrtf((float)((float)(*((float *)&v171 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v171 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v171 - *(float *)&v177) * (float)(*(float *)&v171 - *(float *)&v177)));
      *((float *)this + 96) = v16;
      if (v16 > 0.00000001)
      {
        v17 = *(float *)&v179;
        v18 = vabds_f32(*(float *)v182, *(float *)&v179);
        if (v18 < 0.00000001)
        {
          *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v175);
          v15 = *((float *)&v177 + 1);
          v14 = *(float *)&v177;
          v17 = *(float *)&v179;
          v18 = vabds_f32(*(float *)v182, *(float *)&v179);
        }
        *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
        *((_DWORD *)this + 92) = v175;
        *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
        *((_DWORD *)this + 102) = AnotherFace;
        *((_DWORD *)this + 95) = 0;
        v19 = v180;
        *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v180 + 1) - v15) * (float)(*((float *)&v180 + 1) - v15))+ (float)((float)(*(float *)&v180 - v14) * (float)(*(float *)&v180 - v14)));
        if (v18 >= 0.00000001)
        {
          v21 = *((float *)&v171 + 1);
          v20 = *(float *)&v171 - *(float *)&v19;
        }
        else
        {
          v20 = v17 - *(float *)&v19;
          v21 = *((float *)&v179 + 1);
        }
        *((float *)this + 98) = sqrtf((float)((float)(v21 - *((float *)&v19 + 1)) * (float)(v21 - *((float *)&v19 + 1)))+ (float)(v20 * v20));
        cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v179, (float *)&v180, (float *)this + 99);
        *((_DWORD *)this + 93) = v173;
        *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
        *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
        if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
          cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
      }
      v60 = *((float *)&v177 + 1);
      v59 = *(float *)&v177;
      v61 = sqrtf((float)((float)(*((float *)&v168 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v168 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v168 - *(float *)&v177) * (float)(*(float *)&v168 - *(float *)&v177)));
      *((float *)this + 96) = v61;
      if (v61 > 0.00000001)
      {
        v62 = *(float *)&v178;
        v63 = vabds_f32(*(float *)&v181, *(float *)&v178);
        if (v63 < 0.00000001)
        {
          *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v174);
          v60 = *((float *)&v177 + 1);
          v59 = *(float *)&v177;
          v62 = *(float *)&v178;
          v63 = vabds_f32(*(float *)&v181, *(float *)&v178);
        }
        *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
        *((_DWORD *)this + 92) = v174;
        *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
        *((_DWORD *)this + 102) = AnotherFace;
        *((_DWORD *)this + 95) = 0;
        v64 = v180;
        *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v180 + 1) - v60) * (float)(*((float *)&v180 + 1) - v60))+ (float)((float)(*(float *)&v180 - v59) * (float)(*(float *)&v180 - v59)));
        if (v63 >= 0.00000001)
        {
          v66 = *((float *)&v168 + 1);
          v65 = *(float *)&v168 - *(float *)&v64;
        }
        else
        {
          v65 = v62 - *(float *)&v64;
          v66 = *((float *)&v178 + 1);
        }
        *((float *)this + 98) = sqrtf((float)((float)(v66 - *((float *)&v64 + 1)) * (float)(v66 - *((float *)&v64 + 1)))+ (float)(v65 * v65));
        cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v178, (float *)&v180, (float *)this + 99);
        *((_DWORD *)this + 93) = v173;
        *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
        *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
        if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
          cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
      }
      continue;
    }
    if (!BYTE2(v167) || !(_BYTE)v167)
    {
      if (!HIBYTE(v167) || !BYTE1(v167))
        continue;
      *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
      *((_DWORD *)this + 92) = v175;
      *((_DWORD *)this + 102) = AnotherFace;
      *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
      v26 = v177;
      v27 = sqrtf((float)((float)(*((float *)&v169 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v169 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v169 - *(float *)&v177) * (float)(*(float *)&v169 - *(float *)&v177)));
      if (v27 < 0.00000001)
        v27 = 0.0;
      *((float *)this + 95) = v27;
      if (vabds_f32(*(float *)v182, *(float *)&v179) >= 0.00000001)
      {
        v67 = v171;
        *((float *)this + 96) = sqrtf((float)((float)(*((float *)&v171 + 1) - *((float *)&v26 + 1))* (float)(*((float *)&v171 + 1) - *((float *)&v26 + 1)))+ (float)((float)(*(float *)&v171 - *(float *)&v26)* (float)(*(float *)&v171 - *(float *)&v26)));
        v28 = *(float *)&v67 - *(float *)&v180;
        v29 = *((float *)&v67 + 1) - *((float *)&v180 + 1);
      }
      else
      {
        *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v175);
        v28 = *(float *)&v179 - *(float *)&v180;
        v29 = *((float *)&v179 + 1) - *((float *)&v180 + 1);
      }
      *((float *)this + 98) = sqrtf((float)(v29 * v29) + (float)(v28 * v28));
      cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v179, (float *)&v180, (float *)this + 99);
      *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v169 + 1) - *((float *)&v180 + 1))* (float)(*((float *)&v169 + 1) - *((float *)&v180 + 1)))+ (float)((float)(*(float *)&v169 - *(float *)&v180)* (float)(*(float *)&v169 - *(float *)&v180)));
      *((_DWORD *)this + 93) = v173;
      *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
      *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
      if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
        cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
      if (vabds_f32(*(float *)&v181, *(float *)&v178) >= 0.00000001
        || !cv3d::cv::gess::isochart::Geodesic::IsSaddleOrBoundary((uint64_t)this, (uint64_t)&v172))
      {
        continue;
      }
      *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 111);
      v68 = *((float *)&v169 + 1);
      v69 = *((float *)&v177 + 1);
      v70 = *(float *)&v169 - *(float *)&v177;
      *((_DWORD *)this + 94) = v172;
      *((_DWORD *)this + 92) = v175;
      *((_DWORD *)this + 102) = AnotherFace;
      *((_DWORD *)this + 95) = 0;
      *((float *)this + 96) = sqrtf((float)((float)(v68 - v69) * (float)(v68 - v69)) + (float)(v70 * v70));
      *((float *)this + 97) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v174);
      *((float *)this + 98) = sqrtf((float)((float)(*((float *)&v169 + 1) - *((float *)&v178 + 1))* (float)(*((float *)&v169 + 1) - *((float *)&v178 + 1)))+ (float)((float)(*(float *)&v169 - *(float *)&v178)* (float)(*(float *)&v169 - *(float *)&v178)));
      v71 = v173;
      *((_DWORD *)this + 93) = v173;
      *(_OWORD *)v160 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v71);
      *(_OWORD *)__p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 106));
      v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v172);
      cv3d::cv::gess::isochart::ParameterizePt3ToPt2((float32x4_t *)v160, (float32x4_t *)__p, &v166, (float *)this + 99);
      *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
      *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
      if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
        cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
      if (((*(_QWORD *)(*((_QWORD *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) >> v173) & 1) != 0
        || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v174))
      {
        continue;
      }
      *(_QWORD *)(*((_QWORD *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) |= 1 << v173;
      v165 = v174;
      v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &AnotherFace);
      AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, (unsigned int *)this + 105, v154);
      OpposingEdge = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((_QWORD *)this + 59), &v164, (int *)&AnotherVertex);
      v155 = v173;
      v72 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &OpposingEdge, (int *)&v173);
      v160[0] = 0;
      v160[1] = 0;
      v161[0] = 0;
      __p[0] = 0;
      __p[1] = 0;
      v159[0] = 0;
      while (1)
      {
        v73 = (char *)v160[1];
        if (v160[1] >= (void *)v161[0])
        {
          v75 = ((char *)v160[1] - (char *)v160[0]) >> 2;
          if ((unint64_t)(v75 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v76 = (uint64_t)(v161[0] - (unint64_t)v160[0]) >> 1;
          if (v76 <= v75 + 1)
            v76 = v75 + 1;
          if (v161[0] - (unint64_t)v160[0] >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v76;
          if (v77)
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v161, v77);
          else
            v78 = 0;
          v79 = (unsigned int *)&v78[4 * v75];
          *v79 = OpposingEdge;
          v74 = v79 + 1;
          v81 = (char *)v160[0];
          v80 = (char *)v160[1];
          if (v160[1] != v160[0])
          {
            do
            {
              v82 = *((_DWORD *)v80 - 1);
              v80 -= 4;
              *--v79 = v82;
            }
            while (v80 != v81);
            v80 = (char *)v160[0];
          }
          v160[0] = v79;
          v160[1] = v74;
          v161[0] = &v78[4 * v77];
          if (v80)
            operator delete(v80);
        }
        else
        {
          *(_DWORD *)v160[1] = OpposingEdge;
          v74 = v73 + 4;
        }
        v160[1] = v74;
        v83 = (char *)__p[1];
        if (__p[1] >= (void *)v159[0])
        {
          v85 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          if ((unint64_t)(v85 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v86 = (uint64_t)(v159[0] - (unint64_t)__p[0]) >> 1;
          if (v86 <= v85 + 1)
            v86 = v85 + 1;
          if (v159[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFCLL)
            v87 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v87 = v86;
          if (v87)
            v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v159, v87);
          else
            v88 = 0;
          v89 = &v88[4 * v85];
          *(_DWORD *)v89 = v164;
          v84 = v89 + 4;
          v91 = (char *)__p[0];
          v90 = (char *)__p[1];
          if (__p[1] != __p[0])
          {
            do
            {
              v92 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v89 - 1) = v92;
              v89 -= 4;
            }
            while (v90 != v91);
            v90 = (char *)__p[0];
          }
          __p[0] = v89;
          __p[1] = v84;
          v159[0] = &v88[4 * v87];
          if (v90)
            operator delete(v90);
        }
        else
        {
          *(_DWORD *)__p[1] = v164;
          v84 = v83 + 4;
        }
        __p[1] = v84;
        v93 = v173;
        if (v72 == v173
          || ((*(_QWORD *)(*((_QWORD *)this + 34) + (((unint64_t)v72 >> 3) & 0x1FFFFFF8)) >> v72) & 1) != 0)
        {
          goto LABEL_152;
        }
        v165 = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((_QWORD *)this + 59), &v164, (int *)&v155);
        if (cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165))
          break;
        v155 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &OpposingEdge, (int *)&v155);
        v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &v164);
        OpposingEdge = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((_QWORD *)this + 59), &v164, (int *)&AnotherVertex);
        v72 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &OpposingEdge, (int *)&v155);
      }
      v93 = v173;
LABEL_152:
      if (v72 != v93
        && (((*(_QWORD *)(*((_QWORD *)this + 34) + (((unint64_t)v72 >> 3) & 0x1FFFFFF8)) >> v72) & 1) != 0
         || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165)))
      {
        v110 = v160[0];
        if (v160[1] != v160[0])
        {
          v111 = 0;
          do
          {
            *((_DWORD *)this + 92) = v110[v111];
            *((_DWORD *)this + 102) = *((_DWORD *)__p[0] + v111);
            *((_DWORD *)this + 93) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, (unsigned int *)this + 92)+ 12);
            *((_QWORD *)this + 47) = AnotherVertex;
            *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)this + 92);
            v112 = *((_QWORD *)this + 59);
            v113 = cv3d::cv::gess::mesh::Topology::h(v112 + 104, (unsigned int *)this + 92);
            v152 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v112, *(_DWORD *)(v112 + 176), *(_DWORD *)(v113 + 12));
            v114 = vsubq_f32(v152, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), AnotherVertex));
            v115 = vmulq_f32(v114, v114);
            v115.i32[3] = 0;
            *((float *)this + 97) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v115, v115)));
            v116 = *((_QWORD *)this + 59);
            v117 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v116 + 104, (unsigned int *)this + 92);
            v118 = cv3d::cv::gess::mesh::Topology::h(v116 + 104, v117);
            v153 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v116, *(_DWORD *)(v116 + 176), *(_DWORD *)(v118 + 12));
            v119 = vsubq_f32(v153, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), AnotherVertex));
            v120 = vmulq_f32(v119, v119);
            v120.i32[3] = 0;
            *((float *)this + 98) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v120, v120)));
            *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 111);
            v121 = *((_QWORD *)this + 59);
            v122 = cv3d::cv::gess::mesh::Topology::h(v121 + 104, (unsigned int *)this + 92);
            v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v121, *(_DWORD *)(v121 + 176), *(_DWORD *)(v122 + 12));
            v123 = *((_QWORD *)this + 59);
            v124 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v123 + 104, (unsigned int *)this + 92);
            v125 = cv3d::cv::gess::mesh::Topology::h(v123 + 104, v124);
            v157 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v123, *(_DWORD *)(v123 + 176), *(_DWORD *)(v125 + 12));
            v156 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 94));
            cv3d::cv::gess::isochart::ParameterizePt3ToPt2(&v166, &v157, &v156, (float *)this + 99);
            *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
            *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
            if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
              cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
            ++v111;
            v110 = v160[0];
          }
          while (v111 < ((char *)v160[1] - (char *)v160[0]) >> 2);
        }
      }
      goto LABEL_160;
    }
    *((_DWORD *)this + 94) = *((_DWORD *)this + 107);
    *((_DWORD *)this + 92) = v174;
    *((_DWORD *)this + 102) = AnotherFace;
    *((_DWORD *)this + 101) = *((_DWORD *)this + 114);
    v22 = v177;
    v23 = sqrtf((float)((float)(*((float *)&v170 + 1) - *((float *)&v177 + 1))* (float)(*((float *)&v170 + 1) - *((float *)&v177 + 1)))+ (float)((float)(*(float *)&v170 - *(float *)&v177) * (float)(*(float *)&v170 - *(float *)&v177)));
    if (v23 < 0.00000001)
      v23 = 0.0;
    *((float *)this + 95) = v23;
    if (vabds_f32(*(float *)&v181, *(float *)&v178) >= 0.00000001)
    {
      v30 = *((float *)&v168 + 1);
      *((float *)this + 96) = sqrtf((float)((float)(*((float *)&v168 + 1) - *((float *)&v22 + 1))* (float)(*((float *)&v168 + 1) - *((float *)&v22 + 1)))+ (float)((float)(v13 - *(float *)&v22) * (float)(v13 - *(float *)&v22)));
      v24 = v13 - *(float *)&v180;
      v25 = v30 - *((float *)&v180 + 1);
    }
    else
    {
      *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v174);
      v24 = *(float *)&v178 - *(float *)&v180;
      v25 = *((float *)&v178 + 1) - *((float *)&v180 + 1);
    }
    *((float *)this + 98) = sqrtf((float)(v25 * v25) + (float)(v24 * v24));
    cv3d::cv::gess::isochart::ParameterizePt2ToPt2((float *)&v177, (float *)&v178, (float *)&v180, (float *)this + 99);
    *((float *)this + 97) = sqrtf((float)((float)(*((float *)&v170 + 1) - *((float *)&v180 + 1))* (float)(*((float *)&v170 + 1) - *((float *)&v180 + 1)))+ (float)((float)(*(float *)&v170 - *(float *)&v180)* (float)(*(float *)&v170 - *(float *)&v180)));
    *((_DWORD *)this + 93) = v173;
    *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
    *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
    if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
      cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
    if (vabds_f32(*(float *)v182, *(float *)&v179) >= 0.00000001
      || !cv3d::cv::gess::isochart::Geodesic::IsSaddleOrBoundary((uint64_t)this, (uint64_t)v154))
    {
      continue;
    }
    *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 110);
    v31 = *((float *)&v170 + 1);
    v32 = *((float *)&v177 + 1);
    v33 = *(float *)&v170 - *(float *)&v177;
    *((_DWORD *)this + 94) = *((_DWORD *)this + 106);
    *((_DWORD *)this + 92) = v174;
    *((_DWORD *)this + 102) = AnotherFace;
    *((_DWORD *)this + 95) = 0;
    *((float *)this + 96) = sqrtf((float)((float)(v31 - v32) * (float)(v31 - v32)) + (float)(v33 * v33));
    *((float *)this + 97) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, &v175);
    *((float *)this + 98) = sqrtf((float)((float)(*((float *)&v170 + 1) - *((float *)&v179 + 1))* (float)(*((float *)&v170 + 1) - *((float *)&v179 + 1)))+ (float)((float)(*(float *)&v170 - *(float *)&v179)* (float)(*(float *)&v170 - *(float *)&v179)));
    v34 = v173;
    *((_DWORD *)this + 93) = v173;
    *(_OWORD *)v160 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v34);
    *(_OWORD *)__p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), v172);
    v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 106));
    cv3d::cv::gess::isochart::ParameterizePt3ToPt2((float32x4_t *)v160, (float32x4_t *)__p, &v166, (float *)this + 99);
    *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
    *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
    if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
      cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
    if (((*(_QWORD *)(*((_QWORD *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) >> v173) & 1) != 0
      || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v175))
    {
      continue;
    }
    *(_QWORD *)(*((_QWORD *)this + 34) + (((unint64_t)v173 >> 3) & 0x1FFFFFF8)) |= 1 << v173;
    v165 = v175;
    v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &AnotherFace);
    v35 = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((_QWORD *)this + 59), &v164, v154);
    OpposingEdge = v173;
    AnotherVertex = v35;
    v36 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &AnotherVertex, (int *)&v173);
    v160[0] = 0;
    v160[1] = 0;
    v161[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v159[0] = 0;
    while (1)
    {
      v37 = (char *)v160[1];
      if (v160[1] >= (void *)v161[0])
      {
        v39 = ((char *)v160[1] - (char *)v160[0]) >> 2;
        if ((unint64_t)(v39 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v40 = (uint64_t)(v161[0] - (unint64_t)v160[0]) >> 1;
        if (v40 <= v39 + 1)
          v40 = v39 + 1;
        if (v161[0] - (unint64_t)v160[0] >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v161, v41);
        else
          v42 = 0;
        v43 = (unsigned int *)&v42[4 * v39];
        *v43 = AnotherVertex;
        v38 = v43 + 1;
        v45 = (char *)v160[0];
        v44 = (char *)v160[1];
        if (v160[1] != v160[0])
        {
          do
          {
            v46 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *--v43 = v46;
          }
          while (v44 != v45);
          v44 = (char *)v160[0];
        }
        v160[0] = v43;
        v160[1] = v38;
        v161[0] = &v42[4 * v41];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_DWORD *)v160[1] = AnotherVertex;
        v38 = v37 + 4;
      }
      v160[1] = v38;
      v47 = (char *)__p[1];
      if (__p[1] >= (void *)v159[0])
      {
        v49 = ((char *)__p[1] - (char *)__p[0]) >> 2;
        if ((unint64_t)(v49 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v50 = (uint64_t)(v159[0] - (unint64_t)__p[0]) >> 1;
        if (v50 <= v49 + 1)
          v50 = v49 + 1;
        if (v159[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v159, v51);
        else
          v52 = 0;
        v53 = &v52[4 * v49];
        *(_DWORD *)v53 = v164;
        v48 = v53 + 4;
        v55 = (char *)__p[0];
        v54 = (char *)__p[1];
        if (__p[1] != __p[0])
        {
          do
          {
            v56 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *((_DWORD *)v53 - 1) = v56;
            v53 -= 4;
          }
          while (v54 != v55);
          v54 = (char *)__p[0];
        }
        __p[0] = v53;
        __p[1] = v48;
        v159[0] = &v52[4 * v51];
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_DWORD *)__p[1] = v164;
        v48 = v47 + 4;
      }
      __p[1] = v48;
      if (v36 == -1)
      {
        v148 = 372;
        v149 = "next_shadow_vertex.Valid()";
        goto LABEL_198;
      }
      if (*((_QWORD *)this + 35) <= (unint64_t)v36)
      {
        v148 = 373;
        v149 = "next_shadow_vertex.Index() < shadow_boundary_.size()";
LABEL_198:
        __assert_rtn("InternalRun", "Geodesic.cpp", v148, v149);
      }
      v57 = v173;
      v58 = (unint64_t)v36 >> 3;
      if (v36 == v173 || ((*(_QWORD *)(*((_QWORD *)this + 34) + (v58 & 0x1FFFFFF8)) >> v36) & 1) != 0)
        goto LABEL_142;
      v165 = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((_QWORD *)this + 59), &v164, (int *)&v173);
      if (cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165))
        break;
      OpposingEdge = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &AnotherVertex, (int *)&OpposingEdge);
      v164 = cv3d::cv::gess::isochart::Geodesic::GetAnotherFace((uint64_t)this, &v165, &v164);
      AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge((uint64_t)this, *((_QWORD *)this + 59), &v164, v154);
      v36 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex((uint64_t)this, &AnotherVertex, (int *)&OpposingEdge);
    }
    v57 = v173;
LABEL_142:
    if (v36 != v57
      && (((*(_QWORD *)(*((_QWORD *)this + 34) + (v58 & 0x1FFFFFF8)) >> v36) & 1) != 0
       || cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid((uint64_t)this, &v165)))
    {
      v94 = v160[0];
      if (v160[1] != v160[0])
      {
        v95 = 0;
        do
        {
          *((_DWORD *)this + 92) = v94[v95];
          *((_DWORD *)this + 102) = *((_DWORD *)__p[0] + v95);
          *((_DWORD *)this + 93) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 59) + 104, (unsigned int *)this + 92)+ 12);
          *((_QWORD *)this + 47) = *((unsigned int *)this + 106);
          *((float *)this + 96) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)this + 92);
          v96 = *((_QWORD *)this + 59);
          v97 = cv3d::cv::gess::mesh::Topology::h(v96 + 104, (unsigned int *)this + 92);
          v150 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v96, *(_DWORD *)(v96 + 176), *(_DWORD *)(v97 + 12));
          v98 = vsubq_f32(v150, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 106)));
          v99 = vmulq_f32(v98, v98);
          v99.i32[3] = 0;
          *((float *)this + 97) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v99, v99)));
          v100 = *((_QWORD *)this + 59);
          v101 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v100 + 104, (unsigned int *)this + 92);
          v102 = cv3d::cv::gess::mesh::Topology::h(v100 + 104, v101);
          v151 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v100, *(_DWORD *)(v100 + 176), *(_DWORD *)(v102 + 12));
          v103 = vsubq_f32(v151, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 106)));
          v104 = vmulq_f32(v103, v103);
          v104.i32[3] = 0;
          *((float *)this + 98) = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v104, v104)));
          *((float *)this + 101) = *((float *)this + 114) + *((float *)this + 110);
          v105 = *((_QWORD *)this + 59);
          v106 = cv3d::cv::gess::mesh::Topology::h(v105 + 104, (unsigned int *)this + 92);
          v166 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v105, *(_DWORD *)(v105 + 176), *(_DWORD *)(v106 + 12));
          v107 = *((_QWORD *)this + 59);
          v108 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v107 + 104, (unsigned int *)this + 92);
          v109 = cv3d::cv::gess::mesh::Topology::h(v107 + 104, v108);
          v157 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v107, *(_DWORD *)(v107 + 176), *(_DWORD *)(v109 + 12));
          v156 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*((_QWORD *)this + 59), *(_DWORD *)(*((_QWORD *)this + 59) + 176), *((_DWORD *)this + 94));
          cv3d::cv::gess::isochart::ParameterizePt3ToPt2(&v166, &v157, &v156, (float *)this + 99);
          *((_DWORD *)this + 103) = *((_DWORD *)this + 105);
          *((_DWORD *)this + 104) = *((_DWORD *)this + 117);
          if ((float)(*((float *)this + 96) - *((float *)this + 95)) > 0.00000001)
            cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow((uint64_t)this, (__int128 *)this + 23);
          ++v95;
          v94 = v160[0];
        }
        while (v95 < ((char *)v160[1] - (char *)v160[0]) >> 2);
      }
    }
LABEL_160:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v160[0])
    {
      v160[1] = v160[0];
      operator delete(v160[0]);
    }
  }
  while (*((_QWORD *)this + 21));
LABEL_165:
  v126 = *((_QWORD *)this + 59);
  v127 = v126 + 104;
  if (*(_QWORD *)(v126 + 112) != *(_QWORD *)(v126 + 104))
  {
    for (i = 0; i < (uint64_t)(*(_QWORD *)(v126 + 112) - *(_QWORD *)(v126 + 104)) >> 2; ++i)
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 37) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0
        && fabsf(*(float *)(*(_QWORD *)this + 4 * i) + -3.4028e38) < 0.00000001)
      {
        LODWORD(__p[0]) = i;
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v160, v127, __p);
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v160);
        if (HEdge != -1)
        {
          while (1)
          {
            v130 = (uint64_t *)(*((_QWORD *)this + 43) + 24 * *(unsigned int *)(*((_QWORD *)this + 25) + 4 * HEdge));
            v131 = *v130;
            if (v130[1] != *v130)
              break;
LABEL_192:
            HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v160);
            if (HEdge == -1)
              goto LABEL_193;
          }
          v132 = 0;
          v133 = 0;
          v134 = HEdge;
          while (2)
          {
            v135 = v131 + v132;
            if (i == *(_DWORD *)(v131 + v132 + 20))
            {
              v136 = *(float *)(v135 + 28);
              v137 = *((_QWORD *)this + 28);
              v138 = *(float *)(v137 + 4 * i);
              if (v136 < v138)
              {
                *(float *)(v137 + 4 * i) = v136;
                v139 = *(float *)(v131 + v132 + 36) + *(float *)(v131 + v132 + 52);
                v140 = *(_QWORD *)this;
                goto LABEL_180;
              }
              v140 = *(_QWORD *)this;
              if (vabds_f32(v136, v138) >= 0.00000001)
              {
                v139 = *(float *)(v140 + 4 * i);
              }
              else
              {
                v139 = *(float *)(v131 + v132 + 36) + *(float *)(v131 + v132 + 52);
                if (v139 >= *(float *)(v140 + 4 * i))
                  v139 = *(float *)(v140 + 4 * i);
LABEL_180:
                *(float *)(v140 + 4 * i) = v139;
              }
              v146 = i;
              if (vabds_f32(v139, *(float *)(v131 + v132 + 36) + *(float *)(v131 + v132 + 52)) >= 0.00000001)
              {
LABEL_191:
                ++v133;
                v147 = (uint64_t *)(*((_QWORD *)this + 43) + 24 * *(unsigned int *)(*((_QWORD *)this + 25) + 4 * v134));
                v131 = *v147;
                v132 += 72;
                if (v133 >= 0x8E38E38E38E38E39 * ((v147[1] - *v147) >> 3))
                  goto LABEL_192;
                continue;
              }
LABEL_190:
              *(_DWORD *)(*((_QWORD *)this + 31) + 4 * v146) = *(_DWORD *)(v131 + v132 + 16);
              goto LABEL_191;
            }
            break;
          }
          v141 = *(float *)(v135 + 32);
          if (v141 > (float)(cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)(v131 + v132 + 16))- *(float *)(*((_QWORD *)this + 28) + 4 * i)))
          {
            *(float *)(*((_QWORD *)this + 28) + 4 * i) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)(v131 + v132 + 16))- *(float *)(v135 + 32);
            v142 = *(float *)(v131 + v132 + 40) + *(float *)(v131 + v132 + 52);
            v143 = *(_QWORD *)this;
            goto LABEL_184;
          }
          v144 = *(float *)(v135 + 32);
          v145 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength((uint64_t)this, (unsigned int *)(v131 + v132 + 16));
          v143 = *(_QWORD *)this;
          if (vabds_f32(v144, v145 - *(float *)(*((_QWORD *)this + 28) + 4 * i)) >= 0.00000001)
          {
            v142 = *(float *)(v143 + 4 * i);
          }
          else
          {
            v142 = *(float *)(v131 + v132 + 40) + *(float *)(v131 + v132 + 52);
            if (v142 >= *(float *)(v143 + 4 * i))
              v142 = *(float *)(v143 + 4 * i);
LABEL_184:
            *(float *)(v143 + 4 * i) = v142;
          }
          v146 = i;
          if (fabsf((float)(v142 - *(float *)(v131 + v132 + 40)) + *(float *)(v131 + v132 + 52)) >= 0.00000001)
            goto LABEL_191;
          goto LABEL_190;
        }
LABEL_193:
        v126 = *((_QWORD *)this + 59);
      }
      v127 = v126 + 104;
    }
  }
}

void sub_23C55DAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::Geodesic::IsEdgeBoundaryOrInvalid(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;

  if (*a2 == -1)
    return 1;
  v3 = *(_QWORD *)(a1 + 472);
  v4 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v3, *(_DWORD *)(v3 + 180), *a2);
  if ((v5 & *v4) != 0)
    return 1;
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v3 + 104, a2);
  v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v3, *(_DWORD *)(v3 + 180), *v7);
  return (v9 & *v8) != 0;
}

uint64_t cv3d::cv::gess::isochart::Geodesic::GetAnotherFace(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v6 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 472) + 104, a2);
  v7 = *(_QWORD *)(a1 + 472) + 104;
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, a2);
  v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v8) + 16);
  if (v9 == *a3)
    v10 = *(_DWORD *)(v6 + 16);
  else
    v10 = -1;
  if (*(_DWORD *)(v6 + 16) == *a3)
    return v9;
  else
    return v10;
}

float cv3d::cv::gess::isochart::Geodesic::HEdgeLength(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v12;

  v2 = *(_QWORD *)(a1 + 472);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v2 + 136) - *(_QWORD *)(v2 + 128)) >> 2) <= *a2)
    cv3d::cv::gess::isochart::Geodesic::HEdgeLength();
  v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v2 + 104, a2);
  v6 = cv3d::cv::gess::mesh::Topology::h(v2 + 104, v5);
  v12 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v2, *(_DWORD *)(v2 + 176), *(_DWORD *)(v6 + 12));
  v7 = *(_QWORD *)(a1 + 472);
  v8 = cv3d::cv::gess::mesh::Topology::h(v7 + 104, a2);
  v9 = vsubq_f32(v12, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v7, *(_DWORD *)(v7 + 176), *(_DWORD *)(v8 + 12)));
  v10 = vmulq_f32(v9, v9);
  v10.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)));
}

void cv3d::cv::gess::isochart::Geodesic::ProcessNewWindow(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  char *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  float v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  float v71;
  float v72;
  float v73;
  char *v74;
  unint64_t *v75;
  float v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int AnotherVertex;
  float v100;
  __n128 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  float v105;
  float v106;
  float v107;
  char *v108;
  float v109;
  unint64_t *v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t *v125;
  __int128 v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  float v134;
  uint64_t v135;
  unsigned int v136;
  float v137;
  float v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 *v142;
  uint64_t *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  __int128 v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  _BYTE v150[28];
  int v151;
  int v152;
  __int128 v153;
  char v154;
  __int128 v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  __int128 v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  _BYTE v163[28];
  uint64_t v164;
  __int128 v165;
  __int16 v166;
  __int16 v167;
  char *v168;
  char *v169;
  unint64_t v170;

  v168 = 0;
  v169 = 0;
  v170 = 0;
  v3 = std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeWindow const&>((uint64_t *)&v168, a2);
  v4 = v168;
  v169 = (char *)v3;
  if ((char *)v3 == v168)
    goto LABEL_148;
  v5 = 0;
  v142 = (__int128 *)(a1 + 28);
  v143 = (uint64_t *)(a1 + 136);
  do
  {
    v6 = &v4[52 * v5];
    v167 = 0;
    v166 = 0;
    *(_QWORD *)v163 = -1;
    *(_OWORD *)&v163[12] = xmmword_23C60C390;
    *(_DWORD *)&v163[8] = -1;
    v164 = 0;
    LODWORD(v165) = 0;
    *(_QWORD *)((char *)&v165 + 4) = -1;
    HIDWORD(v165) = 0;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 344) + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6));
    v8 = *v7;
    if (v7[1] == *v7)
      goto LABEL_71;
    v9 = 0;
    do
    {
      v167 = 0;
      HIBYTE(v166) = 0;
      v10 = v8 + 72 * v9;
      v12 = *(float *)(v10 + 52);
      v11 = (float *)(v10 + 52);
      v13 = v12;
      v15 = *(v11 - 4);
      v14 = *(v11 - 3);
      v16 = (char *)operator new(0x58uLL);
      if (v14 >= v15)
        v17 = v15;
      else
        v17 = v14;
      v18 = v8 + 72 * v9;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = &off_250D4A5A8;
      v19 = *(_QWORD *)(v18 + 44);
      *((float *)v16 + 6) = v13 + v17;
      v20 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)(v16 + 40) = *(_OWORD *)(v18 + 28);
      *(_OWORD *)(v16 + 28) = v20;
      *((_QWORD *)v16 + 7) = v19;
      *((_OWORD *)v16 + 4) = *(_OWORD *)v11;
      *((_QWORD *)v16 + 10) = -1;
      *(_QWORD *)&v149 = v16 + 24;
      *((_QWORD *)&v149 + 1) = v16;
      cv3d::cv::gess::isochart::Geodesic::IntersectWindow(a1, (uint64_t)(v16 + 28), (uint64_t)v6, (_BYTE *)&v167 + 1, &v167, (_BYTE *)&v166 + 1, &v166);
      if (*(float *)(a1 + 96) > *(float *)(a1 + 92))
      {
        *(_OWORD *)v163 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)&v163[12] = *(_OWORD *)(a1 + 92);
        v164 = *(_QWORD *)(a1 + 108);
        v165 = *(_OWORD *)(a1 + 116);
      }
      if (*(float *)(a1 + 44) > *(float *)(a1 + 40))
      {
        v21 = v169;
        if ((unint64_t)v169 >= v170)
        {
          v23 = std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeWindow const&>((uint64_t *)&v168, v142);
        }
        else
        {
          v22 = *v142;
          *(_OWORD *)(v169 + 12) = *(_OWORD *)(a1 + 40);
          *(_OWORD *)v21 = v22;
          *((_DWORD *)v21 + 7) = *(_DWORD *)(a1 + 56);
          *((_DWORD *)v21 + 8) = *(_DWORD *)(a1 + 60);
          *(_OWORD *)(v21 + 36) = *(_OWORD *)(a1 + 64);
          v23 = (uint64_t)(v21 + 52);
        }
        v169 = (char *)v23;
        v6 = &v168[52 * v5];
      }
      if (!HIBYTE(v167))
        goto LABEL_35;
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 344)
                      + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6));
      v25 = (uint64_t *)(v24 + 72 * v9);
      v26 = *v25;
      if (*v25)
      {
        v159 = *v25;
        v27 = (std::__shared_weak_count *)v25[1];
        v160 = v27;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
        cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(v143, *(_QWORD *)(v26 + 56), &v161);
        v30 = v162;
        if (v162)
        {
          v31 = (unint64_t *)&v162->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = v160;
        if (v160)
        {
          v34 = (unint64_t *)&v160->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        if (!HIBYTE(v166))
        {
          v40 = v149;
          v41 = *(_QWORD *)(*(_QWORD *)(a1 + 344)
                          + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6))
              + 72 * v9;
          v42 = *(_OWORD *)(v149 + 4);
          *(_OWORD *)(v41 + 28) = *(_OWORD *)(v149 + 16);
          *(_OWORD *)(v41 + 16) = v42;
          *(_DWORD *)(v41 + 44) = *(_DWORD *)(v40 + 32);
          *(_DWORD *)(v41 + 48) = *(_DWORD *)(v40 + 36);
          *(_OWORD *)(v41 + 52) = *(_OWORD *)(v40 + 40);
          v43 = v149;
          v44 = *(float *)(v149 + 28);
          if (v44 >= *(float *)(v149 + 24))
            v44 = *(float *)(v149 + 24);
          *(float *)v149 = *(float *)(v149 + 40) + v44;
          *(_QWORD *)&v158 = v43;
          *((_QWORD *)&v158 + 1) = *((_QWORD *)&v149 + 1);
          if (*((_QWORD *)&v149 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert((uint64_t)v143, &v158);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
          if (*((_QWORD *)&v158 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 344)+ 24 * *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6))+ 72 * v9), (uint64_t *)&v149);
          goto LABEL_53;
        }
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 344)
                        + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6))
            + 72 * v9;
      }
      else
      {
        if (!HIBYTE(v166))
        {
          v55 = v149;
          v56 = v24 + 72 * v9;
          v57 = *(_OWORD *)(v149 + 4);
          *(_OWORD *)(v56 + 28) = *(_OWORD *)(v149 + 16);
          *(_OWORD *)(v56 + 16) = v57;
          *(_DWORD *)(v56 + 44) = *(_DWORD *)(v55 + 32);
          *(_DWORD *)(v56 + 48) = *(_DWORD *)(v55 + 36);
          *(_OWORD *)(v56 + 52) = *(_OWORD *)(v55 + 40);
          goto LABEL_35;
        }
        v36 = v24 + 72 * v9;
      }
      *(_BYTE *)(v36 + 68) = 1;
LABEL_35:
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      v149 = 0uLL;
      if (!v37)
      {
        if ((_BYTE)v166)
          break;
        goto LABEL_59;
      }
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
LABEL_53:
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
      v51 = v166;
      if (*((_QWORD *)&v149 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      if (v51)
        break;
LABEL_59:
      ++v9;
      v54 = (uint64_t *)(*(_QWORD *)(a1 + 344)
                      + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6));
      v8 = *v54;
    }
    while (v9 < 0x8E38E38E38E38E39 * ((v54[1] - *v54) >> 3));
    v58 = *(unsigned int *)v6;
    v59 = *(_QWORD *)(a1 + 200);
    v60 = *(_QWORD *)(a1 + 344);
    v61 = 24 * *(unsigned int *)(v59 + 4 * v58);
    v63 = (uint64_t *)(v60 + v61 + 8);
    v62 = *v63;
    v64 = *(_QWORD *)(v60 + v61);
    if (*v63 != v64)
    {
      v65 = 0;
      do
      {
        v66 = v64 + 72 * v65;
        if (*(_BYTE *)(v66 + 68))
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *>((uint64_t)&v149, v66 + 72, v62, v66);
          v68 = v67;
          for (i = *v63;
                i != v68;
          *v63 = v68;
          v58 = *(unsigned int *)v6;
          v59 = *(_QWORD *)(a1 + 200);
          v60 = *(_QWORD *)(a1 + 344);
        }
        else
        {
          ++v65;
        }
        v70 = 24 * *(unsigned int *)(v59 + 4 * v58);
        v63 = (uint64_t *)(v60 + v70 + 8);
        v62 = *v63;
        v64 = *(_QWORD *)(v60 + v70);
      }
      while (v65 < 0x8E38E38E38E38E39 * ((*v63 - v64) >> 3));
    }
LABEL_71:
    if ((float)(*(float *)&v163[16] - *(float *)&v163[12]) > 0.0)
    {
      v72 = *(float *)&v163[20];
      v71 = *(float *)&v163[24];
      v73 = *(float *)&v165;
      v74 = (char *)operator new(0x58uLL);
      *((_QWORD *)v74 + 1) = 0;
      v75 = (unint64_t *)(v74 + 8);
      *((_QWORD *)v74 + 2) = 0;
      if (v71 >= v72)
        v76 = v72;
      else
        v76 = v71;
      *(_QWORD *)v74 = &off_250D4A5A8;
      *((float *)v74 + 6) = v73 + v76;
      *(_OWORD *)(v74 + 28) = *(_OWORD *)v163;
      *(_OWORD *)(v74 + 40) = *(_OWORD *)&v163[12];
      *((_QWORD *)v74 + 7) = v164;
      *((_OWORD *)v74 + 4) = v165;
      *((_QWORD *)v74 + 10) = -1;
      v156 = (uint64_t)(v74 + 24);
      v157 = (std::__shared_weak_count *)v74;
      *(_QWORD *)&v155 = v74 + 24;
      *((_QWORD *)&v155 + 1) = v74;
      do
        v77 = __ldxr(v75);
      while (__stxr(v77 + 1, v75));
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert((uint64_t)v143, &v155);
      v78 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v79 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v163);
      v82 = *(_QWORD *)(a1 + 344);
      v83 = v156;
      v147 = v156;
      v148 = v157;
      if (v157)
      {
        v84 = (unint64_t *)&v157->__shared_owners_;
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      cv3d::cv::gess::isochart::WindowListElement::WindowListElement((uint64_t)&v149, &v147, (__int128 *)(v83 + 4));
      v86 = v82 + 24 * v81;
      v87 = *(_QWORD *)(v86 + 8);
      v88 = *(_QWORD *)(v86 + 16);
      v89 = (uint64_t *)(v86 + 8);
      if (v87 >= v88)
      {
        v91 = std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>((uint64_t *)(v82 + 24 * v81), (uint64_t)&v149);
        v92 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
        *v89 = v91;
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      else
      {
        *(_OWORD *)v87 = v149;
        v149 = 0uLL;
        v90 = *(_OWORD *)&v150[12];
        *(_OWORD *)(v87 + 16) = *(_OWORD *)v150;
        *(_OWORD *)(v87 + 28) = v90;
        *(_DWORD *)(v87 + 44) = v151;
        *(_DWORD *)(v87 + 48) = v152;
        *(_OWORD *)(v87 + 52) = v153;
        *(_BYTE *)(v87 + 68) = v154;
        *v89 = v87 + 72;
      }
      v95 = v148;
      if (v148)
      {
        v96 = (unint64_t *)&v148->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }
      if (*(float *)&v163[12] < 0.01)
      {
        v98 = *(unsigned int *)&v163[4];
        if ((float)(*(float *)&v163[20] + *(float *)&v165) < *(float *)(*(_QWORD *)a1 + 4 * *(unsigned int *)&v163[4]))
        {
          *(float *)(*(_QWORD *)a1 + 4 * *(unsigned int *)&v163[4]) = *(float *)&v163[20] + *(float *)&v165;
          *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * v98) = *(_DWORD *)&v163[12];
          *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v98) = *(_DWORD *)v163;
        }
      }
      AnotherVertex = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex(a1, (unsigned int *)v163, (int *)&v163[4]);
      v100 = *(float *)&v163[16];
      v101.n128_f64[0] = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v163) + -0.01;
      if (v101.n128_f64[0] < v100)
      {
        v101.n128_f32[0] = *(float *)&v163[24] + *(float *)&v165;
        if ((float)(*(float *)&v163[24] + *(float *)&v165) < *(float *)(*(_QWORD *)a1 + 4 * AnotherVertex))
        {
          *(_DWORD *)(*(_QWORD *)a1 + 4 * AnotherVertex) = v101.n128_u32[0];
          v101.n128_f32[0] = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v163);
          v101.n128_f32[0] = v101.n128_f32[0] - *(float *)&v163[16];
          *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * AnotherVertex) = v101.n128_u32[0];
          *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * AnotherVertex) = *(_DWORD *)v163;
        }
      }
      v102 = v157;
      if (v157)
      {
        v103 = (unint64_t *)&v157->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v102->__on_zero_shared)(v102, v101);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
    }
    if (!(_BYTE)v166)
    {
      v105 = *((float *)v6 + 9);
      v107 = *((float *)v6 + 5);
      v106 = *((float *)v6 + 6);
      v108 = (char *)operator new(0x58uLL);
      if (v106 >= v107)
        v109 = v107;
      else
        v109 = v106;
      *((_QWORD *)v108 + 1) = 0;
      v110 = (unint64_t *)(v108 + 8);
      *((_QWORD *)v108 + 2) = 0;
      *(_QWORD *)v108 = &off_250D4A5A8;
      v111 = *(_QWORD *)(v6 + 28);
      *((float *)v108 + 6) = v105 + v109;
      v112 = *(_OWORD *)v6;
      *(_OWORD *)(v108 + 40) = *(_OWORD *)(v6 + 12);
      *(_OWORD *)(v108 + 28) = v112;
      *((_QWORD *)v108 + 7) = v111;
      *((_OWORD *)v108 + 4) = *(_OWORD *)(v6 + 36);
      *((_QWORD *)v108 + 10) = -1;
      v156 = (uint64_t)(v108 + 24);
      v157 = (std::__shared_weak_count *)v108;
      *(_QWORD *)&v146 = v108 + 24;
      *((_QWORD *)&v146 + 1) = v108;
      do
        v113 = __ldxr(v110);
      while (__stxr(v113 + 1, v110));
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::insert((uint64_t)v143, &v146);
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * *(unsigned int *)v6);
      v118 = *(_QWORD *)(a1 + 344);
      v119 = v156;
      v144 = v156;
      v145 = v157;
      if (v157)
      {
        v120 = (unint64_t *)&v157->__shared_owners_;
        do
          v121 = __ldxr(v120);
        while (__stxr(v121 + 1, v120));
      }
      cv3d::cv::gess::isochart::WindowListElement::WindowListElement((uint64_t)&v149, &v144, (__int128 *)(v119 + 4));
      v122 = v118 + 24 * v117;
      v123 = *(_QWORD *)(v122 + 8);
      v124 = *(_QWORD *)(v122 + 16);
      v125 = (uint64_t *)(v122 + 8);
      if (v123 >= v124)
      {
        v127 = std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>((uint64_t *)(v118 + 24 * v117), (uint64_t)&v149);
        v128 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
        *v125 = v127;
        if (v128)
        {
          v129 = (unint64_t *)&v128->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
      }
      else
      {
        *(_OWORD *)v123 = v149;
        v149 = 0uLL;
        v126 = *(_OWORD *)&v150[12];
        *(_OWORD *)(v123 + 16) = *(_OWORD *)v150;
        *(_OWORD *)(v123 + 28) = v126;
        *(_DWORD *)(v123 + 44) = v151;
        *(_DWORD *)(v123 + 48) = v152;
        *(_OWORD *)(v123 + 52) = v153;
        *(_BYTE *)(v123 + 68) = v154;
        *v125 = v123 + 72;
      }
      v131 = v145;
      if (v145)
      {
        v132 = (unint64_t *)&v145->__shared_owners_;
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
      }
      if (*((float *)v6 + 3) < 0.01)
      {
        v134 = *((float *)v6 + 5) + *((float *)v6 + 9);
        v135 = *((unsigned int *)v6 + 1);
        if (v134 < *(float *)(*(_QWORD *)a1 + 4 * v135))
        {
          *(float *)(*(_QWORD *)a1 + 4 * v135) = v134;
          *(_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * v135) = *((_DWORD *)v6 + 3);
          *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v135) = *(_DWORD *)v6;
        }
      }
      v136 = cv3d::cv::gess::isochart::Geodesic::GetAnotherVertex(a1, (unsigned int *)v6, (int *)v6 + 1);
      if (v136 == -1)
        __assert_rtn("ProcessNewWindow", "Geodesic.cpp", 795, "another_pt.Valid()");
      v137 = *((float *)v6 + 4);
      if (cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v6) + -0.01 < v137)
      {
        v138 = *((float *)v6 + 6) + *((float *)v6 + 9);
        if (v138 < *(float *)(*(_QWORD *)a1 + 4 * v136))
        {
          *(float *)(*(_QWORD *)a1 + 4 * v136) = v138;
          *(float *)(*(_QWORD *)(a1 + 224) + 4 * v136) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)v6)- *((float *)v6 + 4);
          *(_DWORD *)(*(_QWORD *)(a1 + 248) + 4 * v136) = *(_DWORD *)v6;
        }
      }
      v139 = v157;
      if (v157)
      {
        v140 = (unint64_t *)&v157->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
    }
    ++v5;
    v4 = v168;
  }
  while (v5 < 0x4EC4EC4EC4EC4EC5 * ((v169 - v168) >> 2));
LABEL_148:
  if (v4)
  {
    v169 = v4;
    operator delete(v4);
  }
}

void sub_23C55E9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  uint64_t v41;
  void *v43;

  v43 = *(void **)(v41 - 168);
  if (v43)
  {
    *(_QWORD *)(v41 - 160) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::Geodesic::IsSaddleOrBoundary(uint64_t a1, uint64_t a2)
{
  unsigned int HEdge;
  float v6;
  _BYTE v7[16];

  if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(a1 + 472), a2))
    return 1;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v7, *(_QWORD *)(a1 + 472) + 104, a2);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v7);
  if (HEdge == -1)
    return 0;
  v6 = 0.0;
  do
  {
    v6 = v6 + cv3d::cv::gess::mesh::PolyMesh::Angle(*(_QWORD *)(a1 + 472), HEdge);
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v7);
  }
  while (HEdge != -1);
  return v6 > 6.28318531;
}

uint64_t cv3d::cv::gess::isochart::Geodesic::GetOpposingEdge(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  void *__p[3];
  unsigned int v14;

  v7 = a2 + 104;
  v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a2 + 104, a3);
  v14 = v8;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a2, a3, __p);
  v9 = *a4;
  if (*(_DWORD *)__p[0] == *a4 || *((_DWORD *)__p[0] + 1) == v9 || *((_DWORD *)__p[0] + 2) == v9)
  {
    while (1)
    {
      if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, &v14) + 12) != *a4)
      {
        v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, &v14);
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v10) + 12) != *a4)
          break;
      }
      v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, &v14) + 8);
      if (v14 == v8)
        goto LABEL_7;
    }
    v11 = v14;
  }
  else
  {
LABEL_7:
    v11 = 0xFFFFFFFFLL;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11;
}

void sub_23C55EC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::Geodesic::IntersectWindow(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  float v7;
  float v8;
  _BYTE *v9;
  int v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  double v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  *(_QWORD *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 88) = -1;
  *(_OWORD *)(a1 + 92) = xmmword_23C60C390;
  *(_QWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 36) = -1;
  *(_OWORD *)(a1 + 40) = xmmword_23C60C390;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 76) = 0;
  v8 = *(float *)(a3 + 12);
  v7 = *(float *)(a3 + 16);
  if (v7 > v8)
  {
    v9 = a7;
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
    *a7 = 0;
    v16 = *(_DWORD *)(a2 + 4);
    if (v16 != *(_DWORD *)(a3 + 4))
    {
      *(_DWORD *)(a3 + 4) = v16;
      *(int32x2_t *)(a3 + 20) = vrev64_s32(*(int32x2_t *)(a3 + 20));
      *(float *)(a3 + 12) = v7;
      *(float *)(a3 + 16) = v8;
      v17 = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)a3) - *(float *)(a3 + 12);
      if (v17 < 0.0)
        v17 = 0.0;
      if (v17 < 0.00000001)
        v17 = 0.0;
      *(float *)(a3 + 12) = v17;
      *(float *)(a3 + 16) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)a3)
                          - *(float *)(a3 + 16);
      *(float *)(a3 + 28) = cv3d::cv::gess::isochart::Geodesic::HEdgeLength(a1, (unsigned int *)a3)
                          - *(float *)(a3 + 28);
    }
    v18 = *(float *)(a2 + 12);
    v19 = *(float *)(a2 + 16);
    if (v19 >= v18)
      v20 = *(float *)(a2 + 12);
    else
      v20 = *(float *)(a2 + 16);
    v21 = *(float *)(a3 + 12);
    v22 = *(float *)(a3 + 16);
    if (v21 < v20)
      v20 = *(float *)(a3 + 12);
    if (v22 < v20)
      v20 = *(float *)(a3 + 16);
    v23 = v20;
    if (v18 >= v19)
      v24 = *(float *)(a2 + 12);
    else
      v24 = *(float *)(a2 + 16);
    if (v24 < v21)
      v24 = *(float *)(a3 + 12);
    if (v24 < v22)
      v24 = *(float *)(a3 + 16);
    v25 = (float)((float)((float)(v19 - v18) + v22) - v21) - (v24 - v23);
    if (v25 > 0.0)
    {
      v26 = *(float *)(a2 + 28);
      v27 = *(float *)(a2 + 32);
      v28 = *(float *)(a3 + 28);
      v29 = *(float *)(a3 + 32);
      if ((float)((float)((float)(v27 - v29) * (float)(v27 - v29)) + (float)((float)(v26 - v28) * (float)(v26 - v28))) < 0.00000001
        && vabds_f32(v18, v21) < 0.00000001
        && vabds_f32(v19, v22) < 0.00000001
        && vabds_f32(*(float *)(a2 + 36), *(float *)(a3 + 36)) < 0.00000001)
      {
        *a5 = 1;
LABEL_77:
        *v9 = 1;
        return;
      }
      if (v21 > v18 && v22 < v19)
      {
        if ((float)(v21 - v18) <= 0.00001)
        {
          *(float *)(a2 + 12) = v21;
          v34 = v21 - v26;
        }
        else
        {
          *(float *)(a1 + 92) = v18;
          v30 = *(float *)(a3 + 12);
          *(float *)(a1 + 96) = v30;
          v31 = *(float *)(a2 + 28);
          *(float *)(a1 + 108) = v31;
          v32 = *(float *)(a2 + 32);
          *(float *)(a1 + 112) = v32;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 20);
          *(_DWORD *)(a1 + 80) = *(_DWORD *)a2;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 40);
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 8);
          *(float *)(a1 + 104) = sqrtf((float)((float)(0.0 - v32) * (float)(0.0 - v32))+ (float)((float)(v30 - v31) * (float)(v30 - v31)));
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 36);
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 48);
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 44);
          v33 = *(float *)(a3 + 12);
          *(float *)(a2 + 12) = v33;
          v34 = v33 - v26;
        }
        *(float *)(a2 + 20) = sqrtf((float)((float)(0.0 - v27) * (float)(0.0 - v27)) + (float)(v34 * v34));
        *a4 = 1;
      }
      v35 = *(float *)(a2 + 12);
      v36 = *(float *)(a3 + 12);
      if (v35 > v36 && *(float *)(a2 + 16) < *(float *)(a3 + 16))
      {
        if ((float)(v35 - v36) > 0.00001)
        {
          *(float *)(a1 + 40) = v36;
          v37 = *(float *)(a2 + 12);
          *(float *)(a1 + 44) = v37;
          v38 = *(float *)(a3 + 28);
          *(float *)(a1 + 56) = v38;
          v39 = *(float *)(a3 + 32);
          *(float *)(a1 + 60) = v39;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 20);
          *(_DWORD *)(a1 + 28) = *(_DWORD *)a3;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(a3 + 40);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 4);
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a3 + 8);
          *(float *)(a1 + 52) = sqrtf((float)((float)(0.0 - v39) * (float)(0.0 - v39))+ (float)((float)(v37 - v38) * (float)(v37 - v38)));
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 36);
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(a3 + 48);
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a3 + 44);
          v35 = *(float *)(a2 + 12);
        }
        *(float *)(a3 + 12) = v35;
        *(float *)(a3 + 20) = sqrtf((float)((float)(0.0 - v29) * (float)(0.0 - v29))+ (float)((float)(v35 - v28) * (float)(v35 - v28)));
        *a5 = 1;
      }
      v40 = *(float *)(a3 + 12);
      v42 = *(float *)(a2 + 12);
      v41 = *(float *)(a2 + 16);
      if (v40 <= v42 || v40 >= v41)
      {
        v45 = *(float *)(a3 + 16);
        if (v42 <= v40 || v42 >= v45)
        {
          v46 = v45 < v41;
          if (v45 < v41)
            v44 = *(float *)(a2 + 12);
          else
            v44 = *(float *)(a3 + 12);
          v43 = !v46;
        }
        else
        {
          v43 = 0;
          v44 = *(float *)(a2 + 12);
        }
      }
      else
      {
        v43 = 1;
        v44 = *(float *)(a3 + 12);
      }
      if (v25 > 0.0 && v25 <= 0.00001)
      {
        if (v43)
        {
          v47 = v25 + v40;
          *(float *)(a3 + 12) = v47;
          *(float *)(a3 + 20) = sqrtf((float)((float)(0.0 - v29) * (float)(0.0 - v29))+ (float)((float)(v47 - v28) * (float)(v47 - v28)));
          if (*(float *)(a3 + 16) > v47)
            goto LABEL_72;
        }
        else
        {
          v55 = *(float *)(a3 + 16) - v25;
          *(float *)(a3 + 16) = v55;
          *(float *)(a3 + 24) = sqrtf((float)((float)(0.0 - v29) * (float)(0.0 - v29))+ (float)((float)(v55 - v28) * (float)(v55 - v28)));
          if (v40 < v55)
            goto LABEL_72;
        }
        goto LABEL_71;
      }
      v48 = v25 * 0.5 + v44;
      v49 = (float)(0.0 - v29) * (float)(0.0 - v29);
      v50 = sqrtf(v49 + (float)((float)(v48 - v28) * (float)(v48 - v28))) + *(float *)(a3 + 36);
      v51 = (float)(0.0 - v27) * (float)(0.0 - v27);
      v52 = sqrtf(v51 + (float)((float)(v48 - v26) * (float)(v48 - v26))) + *(float *)(a2 + 36);
      v53 = vabds_f32(v40, v42);
      if (v50 > v52)
      {
        if (v53 >= 0.00000001 || vabds_f32(*(float *)(a3 + 16), v41) >= 0.00000001)
        {
          if ((v43 & 1) != 0)
          {
            v54 = v25 + v40;
            *(float *)(a3 + 12) = v54;
            if (*(float *)(a3 + 16) > v54)
            {
              *(float *)(a3 + 20) = sqrtf(v49 + (float)((float)(v54 - v28) * (float)(v54 - v28)));
LABEL_72:
              v9 = a5;
              goto LABEL_77;
            }
          }
          else
          {
            v57 = *(float *)(a3 + 16) - v25;
            *(float *)(a3 + 16) = v57;
            if (v40 < v57)
            {
              *(float *)(a3 + 24) = sqrtf(v49 + (float)((float)(v57 - v28) * (float)(v57 - v28)));
              goto LABEL_72;
            }
          }
        }
LABEL_71:
        *v9 = 1;
        goto LABEL_72;
      }
      if (v53 >= 0.00000001 || vabds_f32(*(float *)(a3 + 16), v41) >= 0.00000001)
      {
        if (v43)
        {
          v56 = v41 - v25;
          *(float *)(a2 + 16) = v56;
          if (v42 < v56)
          {
            *(float *)(a2 + 24) = sqrtf(v51 + (float)((float)(v56 - v26) * (float)(v56 - v26)));
LABEL_76:
            v9 = a4;
            goto LABEL_77;
          }
        }
        else
        {
          v58 = v25 + v42;
          *(float *)(a2 + 12) = v58;
          if (v41 > v58)
          {
            *(float *)(a2 + 20) = sqrtf(v51 + (float)((float)(v58 - v26) * (float)(v58 - v26)));
            goto LABEL_76;
          }
        }
      }
      *a6 = 1;
      goto LABEL_76;
    }
  }
}

void std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v4 - 72);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::~MaxHeap(uint64_t a1)
{
  void **v3[7];

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::CutTopData((uint64_t *)a1, (uint64_t)v3);
  }
  v3[0] = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v3);
  return a1;
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::CutTopData(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(a1, 0, &v8);
  v3 = v8;
  if (v8)
  {
    *(_OWORD *)a2 = *(_OWORD *)(v8 + 4);
    *(_OWORD *)(a2 + 12) = *(_OWORD *)(v3 + 16);
    v4 = *(_QWORD *)(v3 + 32);
    *(_OWORD *)(a2 + 36) = *(_OWORD *)(v3 + 40);
  }
  else
  {
    *(_QWORD *)a2 = -1;
    *(_DWORD *)(a2 + 8) = -1;
    *(_OWORD *)(a2 + 12) = xmmword_23C60C390;
    *(_DWORD *)(a2 + 36) = 0;
    *(_QWORD *)(a2 + 40) = -1;
    *(_DWORD *)(a2 + 48) = 0;
    v4 = 0;
  }
  *(_QWORD *)(a2 + 28) = v4;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::remove_at(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = a1[4];
  if (v4 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(a1, a2, v4 - 1);
    v7 = a1[4] - 1;
    a1[4] = v7;
    v8 = *a1;
    v9 = *(_QWORD *)(*a1 + 16 * v7);
    *(_QWORD *)(v9 + 56) = -1;
    if (**(float **)(v8 + 16 * a2) <= *(float *)v9)
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::upheap(a1, a2);
    else
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::downheap(a1, a2);
    v10 = *(_OWORD *)(*a1 + 16 * a1[4]);
    *(_OWORD *)a3 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

__n128 cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *a1;
    result = *(__n128 *)(*a1 + 16 * a2);
    *(_OWORD *)(*a1 + 16 * a2) = *(_OWORD *)(*a1 + 16 * a3);
    *(__n128 *)(v3 + 16 * a3) = result;
    v5 = *a1;
    *(_QWORD *)(*(_QWORD *)(*a1 + 16 * a2) + 56) = a2;
    *(_QWORD *)(*(_QWORD *)(v5 + 16 * a3) + 56) = a3;
  }
  return result;
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::downheap(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1[4];
  if (v2 > a2)
  {
    do
    {
      v4 = (2 * a2) | 1;
      v5 = *a1;
      v6 = **(float **)(*a1 + 16 * a2);
      if (v4 >= v2)
      {
        v7 = a2;
      }
      else
      {
        v7 = a2;
        if (**(float **)(v5 + 16 * v4) < v6)
        {
          v6 = **(float **)(v5 + 16 * v4);
          v7 = (2 * a2) | 1;
        }
      }
      v8 = 2 * a2 + 2;
      if (v8 < v2 && **(float **)(v5 + 16 * v8) < v6)
        v7 = 2 * a2 + 2;
      if (v7 == a2)
        break;
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(a1, a2, v7);
      v2 = a1[4];
      a2 = v7;
    }
    while (v7 < v2);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::upheap(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    do
    {
      v3 = a2 - 1;
      v4 = (unint64_t)(a2 - 1) >> 1;
      if (**(float **)(*a1 + 16 * a2) >= **(float **)(*a1 + 16 * v4))
        break;
      cv3d::cv::gess::isochart::MaxHeap<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>::swapnode(a1, a2, (unint64_t)(a2 - 1) >> 1);
      a2 = v4;
    }
    while (v3 > 1);
  }
}

void std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::~__split_buffer(&v15);
  }
}

void sub_23C55F7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::isochart::WindowListElement>>,std::reverse_iterator<std::vector<cv3d::cv::gess::isochart::WindowListElement>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<cv3d::cv::gess::isochart::WindowListElement>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<cv3d::cv::gess::isochart::WindowListElement>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<cv3d::cv::gess::isochart::WindowListElement>::__push_back_slow_path<cv3d::cv::gess::isochart::WindowListElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>>(v7, v9);
  v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[72 * v12];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 28) = *(_OWORD *)(a2 + 28);
  *((_OWORD *)v11 + 1) = v13;
  *((_DWORD *)v11 + 11) = *(_DWORD *)(a2 + 44);
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 52) = *(_OWORD *)(a2 + 52);
  v11[68] = *(_BYTE *)(a2 + 68);
  v16[2] = v11 + 72;
  std::vector<cv3d::cv::gess::isochart::WindowListElement>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_23C55FB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::isochart::WindowListElement>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::WindowListElement>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>,std::reverse_iterator<cv3d::cv::gess::isochart::WindowListElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a3;
    v9 = a7;
    do
    {
      v10 = *(_QWORD *)(v8 - 72);
      v8 -= 72;
      *(_QWORD *)(v9 - 72) = v10;
      v9 -= 72;
      v11 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v9 + 8) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 44) = *(_OWORD *)(a3 - 44);
      *(_OWORD *)(v7 - 56) = v14;
      *(_DWORD *)(v7 - 28) = *(_DWORD *)(a3 - 28);
      *(_DWORD *)(v7 - 24) = *(_DWORD *)(a3 - 24);
      result = *(__n128 *)(a3 - 20);
      *(__n128 *)(v7 - 20) = result;
      *(_BYTE *)(v7 - 4) = *(_BYTE *)(a3 - 4);
      a3 = v8;
      v7 = v9;
    }
    while (v8 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::WindowListElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 72;
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](i - 72);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::WindowListElement::WindowListElement(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  __int128 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 28) = xmmword_23C60C390;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 56) = -1;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)a1, a2);
  v5 = *a3;
  *(_OWORD *)(a1 + 28) = *(__int128 *)((char *)a3 + 12);
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a3 + 7);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a3 + 8);
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a3 + 36);
  return a1;
}

uint64_t std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeWindow const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x4EC4EC4EC4EC4ECLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x276276276276276)
    v9 = 0x4EC4EC4EC4EC4ECLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeWindow>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[52 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[52 * v9];
  v12 = *a2;
  *(_OWORD *)(v11 + 12) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)v11 = v12;
  *((_DWORD *)v11 + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)v11 + 8) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(v11 + 36) = *(__int128 *)((char *)a2 + 36);
  v17 = v11 + 52;
  std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 52) % 0x34uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_23C55FEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::isochart::EdgeWindow>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 52;
      v6 = *(_OWORD *)(v3 - 52);
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 52) = v6;
      *(_DWORD *)(v4 - 24) = *(_DWORD *)(v3 - 24);
      *(_DWORD *)(v4 - 20) = *(_DWORD *)(v3 - 20);
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v3 -= 52;
      v4 -= 52;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeWindow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4EC4EC4EC4EC4EDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(52 * a2);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *,cv3d::cv::gess::isochart::WindowListElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](a4, (__int128 *)v5);
    v7 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a4 + 28) = *(_OWORD *)(v5 + 28);
    *(_OWORD *)(a4 + 16) = v7;
    *(_DWORD *)(a4 + 44) = *(_DWORD *)(v5 + 44);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(v5 + 48);
    *(_OWORD *)(a4 + 52) = *(_OWORD *)(v5 + 52);
    *(_BYTE *)(a4 + 68) = *(_BYTE *)(v5 + 68);
    a4 += 72;
    v5 += 72;
  }
  while (v5 != v6);
  return v6;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<cv3d::cv::gess::isochart::ReverseComparison<float>,cv3d::cv::gess::isochart::EdgeWindow>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

float cv3d::cv::gess::isochart::ParameterizePt3ToPt2(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float result;
  float32x4_t v10;

  v4 = vsubq_f32(*a3, *a1);
  v5 = vsubq_f32(*a2, *a1);
  v6 = vmulq_f32(v5, v5);
  v6.i32[3] = 0;
  v6.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6)));
  v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), (int32x4_t)v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL), (int32x4_t)v5)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL)), (int32x4_t)v5), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), (int32x4_t)v4));
  v8 = vmulq_f32(v4, v5);
  v8.i32[3] = 0;
  result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8)) / v6.f32[0];
  v10 = vmulq_f32(v7, v7);
  v10.i32[3] = 0;
  *a4 = result;
  a4[1] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10))) / v6.f32[0];
  return result;
}

float cv3d::cv::gess::isochart::ParameterizePt2ToPt2(float *a1, float *a2, float *a3, float *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  v4 = a1[1];
  v5 = *a3 - *a1;
  v6 = a3[1] - v4;
  v7 = *a2 - *a1;
  v8 = a2[1] - v4;
  v9 = sqrtf((float)(v8 * v8) + (float)(v7 * v7));
  v10 = (float)((float)(v6 * v8) + (float)(v5 * v7)) / v9;
  result = fabsf((float)(v5 * v8) - (float)(v6 * v7)) / v9;
  *a4 = v10;
  a4[1] = result;
  return result;
}

float *cv3d::cv::gess::isochart::GetCommonPointOf2Lines(float *result, float *a2, float *a3, float *a4, float *a5, BOOL *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  double v10;
  BOOL v11;
  float v12;
  double v13;
  float v14;

  v6 = *result;
  v7 = result[1];
  v8 = a3[1];
  v9 = a4[1];
  v10 = (float)((float)((float)(v7 - a2[1]) * (float)(*a3 - *a4)) - (float)((float)(*result - *a2) * (float)(v8 - v9)));
  if (fabs(v10) >= 0.00000001)
  {
    v13 = (float)((float)((float)((float)(v7 * (float)(*a4 - *a3)) - (float)(v8 * *a4)) + (float)(v6 * (float)(v8 - v9)))
                + (float)(*a3 * v9))
        / -v10;
    v14 = v6 + (float)(*a2 - v6) * v13;
    *a5 = v14;
    v12 = result[1] + (float)(a2[1] - result[1]) * v13;
    v11 = v13 >= -0.00001;
    if (v13 > 1.00001)
      v11 = 0;
  }
  else
  {
    v11 = 0;
    *a5 = 3.4028e38;
    v12 = 3.4028e38;
  }
  a5[1] = v12;
  *a6 = v11;
  return result;
}

uint64_t cv3d::cv::gess::internal::InitRandomTangentHelper(float *a1, float32x4_t *a2)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int32x4_t v9;
  float v10;
  __int32 v11;
  int v12;
  float v13;
  __float2 v14;
  float32x4_t v16;
  float32x4_t v17;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = v5 * v5;
  if (fabsf(*a1) <= fabsf(v4))
  {
    v10 = 1.0 / sqrtf(v6 + (float)(v4 * v4));
    *(float *)&v11 = v5 * v10;
    v8 = -(float)(v4 * v10);
    v9.i32[0] = 0;
    v9.i32[3] = 0;
    v9.i32[1] = v11;
  }
  else
  {
    v7 = 1.0 / sqrtf(v6 + (float)(v3 * v3));
    v8 = -(float)(v3 * v7);
    v9.i32[1] = 0;
    v9.i32[3] = 0;
    *(float *)v9.i32 = v5 * v7;
  }
  *(float *)&v9.i32[2] = v8;
  v17 = (float32x4_t)v9;
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v9, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL)), v9), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 4uLL), *(int32x4_t *)a1)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a1, (int32x4_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 0xCuLL)), *(int32x4_t *)a1), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), v9));
  v12 = rand();
  v13 = (float)((float)((float)v12 * 4.6566e-10) + (float)((float)v12 * 4.6566e-10)) * 3.14159265;
  v14 = __sincosf_stret(v13);
  *a2 = vaddq_f32(vmulq_n_f32(v17, v14.__sinval), vmulq_n_f32(v16, v14.__cosval));
  return 1;
}

BOOL cv3d::cv::gess::internal::InitRandomTangent(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;

  v2 = a1[1] - *a1;
  v3 = a2[1] - *a2;
  if (v2 == v3)
  {
    srand(2u);
    v6 = *a2;
    if (a2[1] != *a2)
    {
      v7 = 0;
      v8 = 1;
      do
      {
        cv3d::cv::gess::internal::InitRandomTangentHelper((float *)(*a1 + 16 * v7), (float32x4_t *)(v6 + 16 * v7));
        v7 = v8;
        v6 = *a2;
        ++v8;
      }
      while (v7 < (a2[1] - *a2) >> 4);
    }
  }
  return v2 == v3;
}

float32x4_t cv3d::cv::gess::internal::MiddlePoint@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t result;

  v5 = vmulq_f32(*a2, *a1);
  v5.i32[3] = 0;
  v6 = vmulq_f32(*a2, *a3);
  v6.i32[3] = 0;
  v7 = vmulq_f32(*a1, *a4);
  v7.i32[3] = 0;
  v8 = vmulq_f32(*a3, *a4);
  v8.i32[3] = 0;
  v9 = vmulq_f32(*a2, *a4);
  v9.i32[3] = 0;
  v9.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9));
  v5.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))
            - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  v6.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7))
            - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v11 = vaddq_f32(vmulq_n_f32(*a4, (float)((float)(v6.f32[0] - (float)(v9.f32[0] * v5.f32[0]))+ (float)(v6.f32[0] - (float)(v9.f32[0] * v5.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v9.f32[0] * v9.f32[0])) + 0.0001))), vmulq_n_f32(*a2, (float)((float)(v5.f32[0] - (float)(v9.f32[0] * v6.f32[0]))+ (float)(v5.f32[0] - (float)(v9.f32[0] * v6.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v9.f32[0] * v9.f32[0])) + 0.0001))));
  __asm { FMOV            V2.4S, #-0.25 }
  result = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a3), v10), vmulq_f32(v11, _Q2));
  *a5 = result;
  return result;
}

float32x4_t cv3d::cv::gess::internal::PositionFloor4@<Q0>(float32x4_t *a1@<X0>, int8x16_t *a2@<X1>, int32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float *a5@<X4>, float *a6@<X5>, float32x4_t *a7@<X8>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t result;

  v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*a2, *a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*a2, *a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL), *a3));
  v8 = vsubq_f32(*a4, *a1);
  v9 = vmulq_f32(*(float32x4_t *)a2, v8);
  v9.i32[3] = 0;
  v10 = vmulq_f32(v7, v8);
  v10.i32[3] = 0;
  result = vaddq_f32(vaddq_f32(*a1, vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)a2, floorf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)) * *a6)), *a5)), vmulq_n_f32(vmulq_n_f32(v7, floorf(*a6 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)))), *a5));
  *a7 = result;
  return result;
}

int32x2_t cv3d::cv::gess::internal::PositionFloorIndex4@<D0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float *a5@<X5>, int32x2_t *a6@<X8>)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x2_t result;

  v6 = vsubq_f32(*a4, *a1);
  v7 = vmulq_f32(*a2, v6);
  v7.i32[3] = 0;
  v7.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7));
  v8 = vmulq_f32(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL), *a3)), v6);
  v8.i32[3] = 0;
  v7.i32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  result = vcvt_s32_f32(vrndm_f32(vmul_n_f32(*(float32x2_t *)v7.f32, *a5)));
  *a6 = result;
  return result;
}

float32x4_t cv3d::cv::gess::internal::PositionRound4@<Q0>(float32x4_t *a1@<X0>, int8x16_t *a2@<X1>, int32x4_t *a3@<X2>, float32x4_t *a4@<X3>, float32x4_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t result;

  v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*a2, *a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*a2, *a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a3, *(int8x16_t *)a3, 4uLL), *a3));
  v8 = vsubq_f32(*a4, *a1);
  v9 = vmulq_f32(*(float32x4_t *)a2, v8);
  v9.i32[3] = 0;
  v10 = vmulq_f32(v7, v8);
  v10.i32[3] = 0;
  result = vaddq_f32(vmulq_n_f32(vmulq_n_f32(v7, roundf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10)) * a7)), a6), vaddq_f32(*a1, vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)a2, roundf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)) * a7)), a6)));
  *a5 = result;
  return result;
}

uint64_t cv3d::cv::gess::internal::InitRandomPositionHelper(float32x4_t *a1, float *a2, float32x4_t *a3, float a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int32x4_t v12;
  float v13;
  __int32 v14;
  float v16;
  float32x4_t v17;
  float32x4_t v18;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = v8 * v8;
  if (fabsf(*a2) <= fabsf(v7))
  {
    v13 = 1.0 / sqrtf(v9 + (float)(v7 * v7));
    *(float *)&v14 = v8 * v13;
    v11 = -(float)(v7 * v13);
    v12.i32[0] = 0;
    v12.i32[3] = 0;
    v12.i32[1] = v14;
  }
  else
  {
    v10 = 1.0 / sqrtf(v9 + (float)(v6 * v6));
    v11 = -(float)(v6 * v10);
    v12.i32[1] = 0;
    v12.i32[3] = 0;
    *(float *)v12.i32 = v8 * v10;
  }
  *(float *)&v12.i32[2] = v11;
  v18 = (float32x4_t)v12;
  v17 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v12, (int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL)), v12), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *(int32x4_t *)a2)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *(int32x4_t *)a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL), v12));
  v16 = (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0;
  *a3 = vaddq_f32(*a1, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v17, v16), vmulq_n_f32(v18, (float)((float)((float)rand() * 4.6566e-10) * 2.0) + -1.0)), a4));
  return 1;
}

BOOL cv3d::cv::gess::internal::InitRandomPosition(_QWORD *a1, _QWORD *a2, _QWORD *a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v8 = (uint64_t)(a3[1] - *a3) >> 4;
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (v8 == v9)
  {
    srand(2u);
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    if (v10)
    {
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = a1[5];
        if (v13 >= (a1[6] - v15) >> 4)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v10, v11, v12);
        cv3d::cv::gess::internal::InitRandomPositionHelper((float32x4_t *)(v15 + 16 * v13), (float *)(*a2 + 16 * v13), (float32x4_t *)(*a3 + 16 * v13), a4);
        v13 = v14;
        v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
      }
      while (v10 > v14++);
    }
  }
  return v8 == v9;
}

uint64_t cv3d::cv::gess::internal::CompatOrientationExtrinsic4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, _OWORD *a6, int8x16_t a7)
{
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  uint64_t k;
  uint64_t m;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  double v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  char v22;
  char v23;
  double v24;
  double *v25;
  float64x2_t *v26;
  double v27;
  float64x2_t v28;
  __int128 v29;
  unsigned int v30;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  __int128 v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45[11];

  v7 = 0;
  v45[10] = *(double *)MEMORY[0x24BDAC8D0];
  do
  {
    v45[v7 + 4] = *(float *)(a1 + 4 * v7);
    ++v7;
  }
  while (v7 != 3);
  for (i = 0; i != 3; ++i)
    *(&v43 + i) = *(float *)(a2 + 4 * i);
  for (j = 0; j != 3; ++j)
    *(&v40 + j) = *(float *)(a1 + 4 * j);
  v10 = 0;
  v45[7] = v44 * v42 - v45[0] * v41;
  v45[8] = v45[0] * v40 - v43 * v42;
  v45[9] = v43 * v41 - v44 * v40;
  do
  {
    *(&v43 + v10) = *(float *)(a3 + 4 * v10);
    ++v10;
  }
  while (v10 != 3);
  for (k = 0; k != 3; ++k)
    *(&v40 + k) = *(float *)(a4 + 4 * k);
  for (m = 0; m != 3; ++m)
    *(&v37 + m) = *(float *)(a3 + 4 * m);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v45[1] = v41 * v39 - v42 * v38;
  v45[2] = v42 * v37 - v40 * v39;
  v45[3] = v40 * v38 - v41 * v37;
  v16 = -1.79769313e308;
  do
  {
    v17 = 0;
    v18 = &v45[3 * v13 + 4];
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[2];
    v22 = 1;
    do
    {
      v23 = v22;
      v24 = fabs(v20 * *(&v43 + 3 * v17 + 1) + v19 * *(&v43 + 3 * v17) + v21 * v45[3 * v17]);
      if (v24 > v16)
      {
        v16 = v24;
        v15 = v13;
        v14 = v17;
      }
      v17 = 1;
      v22 = 0;
    }
    while ((v23 & 1) != 0);
    ++v13;
  }
  while (v13 != 2);
  v25 = &v45[3 * v15 + 4];
  v26 = (float64x2_t *)(&v43 + 3 * v14);
  a7.i64[0] = (uint64_t)v25[2];
  v27 = v26[1].f64[0];
  v28 = *(float64x2_t *)v25;
  *(float32x2_t *)&v29 = vcvt_f32_f64(*(float64x2_t *)v25);
  *(float *)&v30 = *(double *)a7.i64;
  *((_QWORD *)&v29 + 1) = v30;
  *a5 = v29;
  *(double *)a7.i64 = vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v28, *v26).f64[1]), v26->f64[0], v28.f64[0])
                    + *(double *)a7.i64 * v27;
  v28.f64[0] = 1.0;
  v31.f64[0] = NAN;
  v31.f64[1] = NAN;
  v32 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v31), (int8x16_t)v28, a7).i64;
  v33 = vmulq_n_f64(*v26, v32);
  v34 = v27 * v32;
  *(float32x2_t *)&v35 = vcvt_f32_f64(v33);
  *(float *)&v34 = v34;
  *((_QWORD *)&v35 + 1) = LODWORD(v34);
  *a6 = v35;
  return 1;
}

uint64_t cv3d::cv::gess::internal::CompatPositionExtrinsic4(float32x4_t *a1, int32x4_t *a2, int32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, int32x4_t *a7, float32x4_t *a8, float *a9, float *a10, float32x4_t *a11, float32x4_t *a12)
{
  unsigned int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned int v39;
  double v40;
  unsigned int v41;
  unsigned int v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  double v46;

  v12 = 0;
  v13 = *(float32x4_t *)a3;
  v14 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), *a3)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *a2));
  v15 = *(float32x4_t *)a7;
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a6, (int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 0xCuLL)), *a6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), *a7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 4uLL), *a6));
  v17 = vmulq_f32(*(float32x4_t *)a2, *a1);
  v17.i32[3] = 0;
  v18 = vmulq_f32(*(float32x4_t *)a2, *a5);
  v18.i32[3] = 0;
  v19 = vmulq_f32(*(float32x4_t *)a6, *a1);
  v19.i32[3] = 0;
  v20 = vmulq_f32(*(float32x4_t *)a6, *a5);
  v20.i32[3] = 0;
  v21 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a6);
  v21.i32[3] = 0;
  v21.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21));
  v17.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
  v18.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20));
  v22.i64[0] = 0x3F0000003F000000;
  v22.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V5.4S, #-0.25 }
  v28 = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a5), v22), vmulq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a6, (float)((float)(v18.f32[0] - (float)(v21.f32[0] * v17.f32[0]))+ (float)(v18.f32[0] - (float)(v21.f32[0] * v17.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v21.f32[0] * v21.f32[0])) + 0.0001))), vmulq_n_f32(*(float32x4_t *)a2, (float)((float)(v17.f32[0] - (float)(v21.f32[0] * v18.f32[0]))+ (float)(v17.f32[0] - (float)(v21.f32[0] * v18.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v21.f32[0] * v21.f32[0])) + 0.0001)))), _Q5));
  v29 = vsubq_f32(v28, *a4);
  v30 = vmulq_f32(*(float32x4_t *)a3, v29);
  v30.i32[3] = 0;
  v31 = vmulq_n_f32(*(float32x4_t *)a3, floorf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30)) * *a10));
  v32 = *a9;
  v33 = vmulq_f32(v14, v29);
  v33.i32[3] = 0;
  v34 = vaddq_f32(vaddq_f32(*a4, vmulq_n_f32(v31, *a9)), vmulq_n_f32(vmulq_n_f32(v14, floorf(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)))), *a9));
  v35 = vsubq_f32(v28, *a8);
  v36 = vmulq_f32(*(float32x4_t *)a7, v35);
  v36.i32[3] = 0;
  v37 = vmulq_f32(v16, v35);
  v37.i32[3] = 0;
  v38 = vaddq_f32(vaddq_f32(*a8, vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)a7, floorf(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)))), *a9)), vmulq_n_f32(vmulq_n_f32(v16, floorf(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37)))), *a9));
  v39 = -1;
  v40 = 1.79769313e308;
  v41 = -1;
  do
  {
    v42 = 0;
    v43 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v14, (float)(v12 >> 1)), vmulq_n_f32(v13, (float)(v12 & 1))), v32));
    do
    {
      v44 = vsubq_f32(v43, vaddq_f32(v38, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v16, (float)(v42 >> 1)), vmulq_n_f32(v15, (float)(v42 & 1))), v32)));
      v45 = vmulq_f32(v44, v44);
      v45.i32[3] = 0;
      v46 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)));
      if (v40 > v46)
      {
        v40 = v46;
        v41 = v12;
        v39 = v42;
      }
      ++v42;
    }
    while (v42 != 4);
    ++v12;
  }
  while (v12 != 4);
  *a11 = vaddq_f32(v34, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v13, (float)(v41 & 1)), vmulq_n_f32(v14, (float)((v41 >> 1) & 1))), v32));
  *a12 = vaddq_f32(v38, vmulq_n_f32(vaddq_f32(vmulq_n_f32(v16, (float)((v39 >> 1) & 1)), vmulq_n_f32(*(float32x4_t *)a7, (float)(v39 & 1))), *a9));
  return 1;
}

uint64_t cv3d::cv::gess::internal::CompatPositionExtrinsicIndex4(float32x4_t *a1, int32x4_t *a2, int32x4_t *a3, float32x4_t *a4, float32x4_t *a5, int32x4_t *a6, int32x4_t *a7, float32x4_t *a8, const float *a9, float *a10, float *a11, _DWORD *a12, _DWORD *a13)
{
  unsigned int v13;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  float32x4_t v34;
  unsigned int v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned int v38;
  float32x4_t v39;
  unsigned int v40;
  float32x4_t v41;
  unsigned int v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float v49;

  v13 = 0;
  v15 = *(float32x4_t *)a3;
  v16 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a2, (int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 0xCuLL)), *a2), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), *a3)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a3, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), *a3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 4uLL), *a2));
  v17 = *(float32x4_t *)a7;
  v18 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(*a6, (int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 0xCuLL)), *a6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL)), *a7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 4uLL), *a6));
  v19 = vmulq_f32(*(float32x4_t *)a2, *a1);
  v19.i32[3] = 0;
  v20 = vmulq_f32(*(float32x4_t *)a2, *a5);
  v20.i32[3] = 0;
  v21 = vmulq_f32(*(float32x4_t *)a6, *a1);
  v21.i32[3] = 0;
  v21.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21));
  v22 = vmulq_f32(*(float32x4_t *)a6, *a5);
  v22.i32[3] = 0;
  v22.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22));
  v23 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a6);
  v23.i32[3] = 0;
  v23.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23));
  v19.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  v24.i64[0] = 0x3F0000003F000000;
  v24.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V5.4S, #-0.25 }
  v30 = vaddq_f32(vmulq_f32(vaddq_f32(*a1, *a5), v24), vmulq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a6, (float)((float)((float)(v21.f32[0] - v22.f32[0]) - (float)(v23.f32[0] * v19.f32[0]))+ (float)((float)(v21.f32[0] - v22.f32[0]) - (float)(v23.f32[0] * v19.f32[0])))* (float)(1.0 / (float)((float)(1.0 - (float)(v23.f32[0] * v23.f32[0])) + 0.0001))), vmulq_n_f32(*(float32x4_t *)a2, (float)((float)(v19.f32[0] - (float)(v23.f32[0] * (float)(v21.f32[0] - v22.f32[0])))+ (float)(v19.f32[0] - (float)(v23.f32[0] * (float)(v21.f32[0] - v22.f32[0]))))* (float)(1.0 / (float)((float)(1.0 - (float)(v23.f32[0] * v23.f32[0])) + 0.0001)))), _Q5));
  v31 = vsubq_f32(v30, *a4);
  v32 = vmulq_f32(*(float32x4_t *)a3, v31);
  v32.i32[3] = 0;
  v33 = vcvtms_s32_f32(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)) * *a10);
  v34 = vmulq_f32(v16, v31);
  v34.i32[3] = 0;
  v35 = vcvtms_s32_f32(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)));
  v36 = vsubq_f32(v30, *a8);
  v37 = vmulq_f32(*(float32x4_t *)a7, v36);
  v37.i32[3] = 0;
  v38 = vcvtms_s32_f32(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37)));
  v39 = vmulq_f32(v18, v36);
  v39.i32[3] = 0;
  v40 = vcvtms_s32_f32(*a10 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)));
  v41 = vld1q_dup_f32(a9);
  v42 = -1;
  v43 = 3.4028e38;
  v44 = -1;
  do
  {
    v45 = 0;
    v46 = vaddq_f32(*a4, vmulq_f32(vaddq_f32(vmulq_n_f32(v16, (float)(int)(v35 + (v13 >> 1))), vmulq_n_f32(v15, (float)(int)((v13 & 1) + v33))), v41));
    do
    {
      v47 = vsubq_f32(v46, vaddq_f32(*a8, vmulq_f32(v41, vaddq_f32(vmulq_n_f32(v18, (float)(int)(v40 + (v45 >> 1))), vmulq_n_f32(v17, (float)(int)((v45 & 1) + v38))))));
      v48 = vmulq_f32(v47, v47);
      v48.i32[3] = 0;
      v49 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48));
      if (v49 < v43)
      {
        v43 = v49;
        v44 = v13;
        v42 = v45;
      }
      ++v45;
    }
    while (v45 != 4);
    ++v13;
  }
  while (v13 != 4);
  *a11 = v43;
  *a12 = (v44 & 1) + v33;
  a12[1] = ((v44 >> 1) & 1) + v35;
  *a13 = (v42 & 1) + v38;
  a13[1] = ((v42 >> 1) & 1) + v40;
  return 1;
}

uint64_t cv3d::cv::gess::internal::OptimizeOrientationsRoSy4Extrinsic(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v10;
  unsigned __int32 v11;
  uint64_t v12;
  unsigned int Vertex;
  __int128 v14;
  float32x4_t *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  __int128 v23;
  float32x4_t v25;
  __int128 v26;
  float32x4_t v27;
  float32x4_t v28;
  _QWORD v29[3];
  float32x4_t v30;

  v3 = (a2[1] - *a2) >> 4;
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = (_QWORD *)(a1 + 104);
  if (v3 != (v5 - v4) >> 2 || v3 != (uint64_t)(a3[1] - *a3) >> 4)
    return 0;
  if (v5 != v4)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *a2;
      v30 = *(float32x4_t *)(*a3 + 16 * v10);
      v28.i32[0] = v11;
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v29, v6, (unsigned int *)&v28);
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v29);
      if (Vertex != -1)
      {
        v15 = (float32x4_t *)(v12 + 16 * v10);
        LODWORD(v14) = 0;
        v26 = v14;
        do
        {
          v16 = *a2 + 16 * Vertex;
          v17 = *a3 + 16 * Vertex;
          v27 = 0u;
          v28 = 0u;
          cv3d::cv::gess::internal::CompatOrientationExtrinsic4((uint64_t)&v30, (uint64_t)v15, v17, v16, &v28, &v27, (int8x16_t)0);
          v18 = vaddq_f32(v27, vmulq_n_f32(v28, *(float *)&v26));
          v19 = vmulq_f32(v18, *v15);
          v19.i32[3] = 0;
          v20 = vsubq_f32(v18, vmulq_n_f32(*v15, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))));
          v21 = vmulq_f32(v20, v20);
          v21.i32[3] = 0;
          v22 = (float32x2_t)vpaddq_f32(v21, v21).u64[0];
          v22.f32[0] = sqrtf(vaddv_f32(v22));
          v23 = v26;
          if (v22.f32[0] > 0.00000001)
            v20 = vdivq_f32(v20, (float32x4_t)vdupq_lane_s32((int32x2_t)v22, 0));
          *(float *)&v23 = *(float *)&v26 + 1.0;
          v25 = v20;
          v26 = v23;
          v30 = v20;
          Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v29);
        }
        while (Vertex != -1);
        if (*(float *)&v26 > 0.0)
          *(float32x4_t *)(*a3 + 16 * v10) = v25;
      }
      v10 = ++v11;
    }
    while (v11 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::OptimizePositionsRoSy4Extrinsic(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  float v11;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  cv3d::cv::gess::mesh::OneRingVertex *v26;
  unsigned int Vertex;
  __int128 v28;
  unsigned int v29;
  int32x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  __int128 v42;
  double v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  _QWORD *v51;
  float32x4_t v52;
  unint64_t v53;
  unsigned __int32 v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  _QWORD v62[3];
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float v66;
  float v67[3];

  v67[0] = a5;
  v5 = (a2[1] - *a2) >> 4;
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = (_QWORD *)(a1 + 104);
  if (v5 != (v7 - v6) >> 2 || v5 != (uint64_t)(a3[1] - *a3) >> 4 || v5 != (uint64_t)(a4[1] - *a4) >> 4)
    return 0;
  if (fabsf(a5) <= 0.00000001)
    v11 = 0.0;
  else
    v11 = 1.0 / a5;
  v66 = v11;
  if (v7 != v6)
  {
    v14 = 0;
    v54 = 0;
    v15 = (uint64_t *)(a1 + 8);
    v51 = (_QWORD *)(a1 + 104);
    do
    {
      v53 = v14;
      v16 = *a2;
      LODWORD(v62[0]) = *(_DWORD *)(a1 + 176);
      v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, (unsigned int *)v62);
      v20 = *(_QWORD *)(v17 + 40);
      if (v53 >= (*(_QWORD *)(v17 + 48) - v20) >> 4)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v17, v18, v19);
      v21 = *(float32x4_t *)(*a3 + 16 * v53);
      v56 = *(float32x4_t *)(v20 + 16 * v53);
      v65 = v56;
      v63 = *(float32x4_t *)(*a4 + 16 * v53);
      v22 = vmulq_f32(v21, v21);
      v22.i32[3] = 0;
      v23 = vpaddq_f32(v22, v22);
      v24 = vpaddq_f32(v23, v23);
      v25 = (float32x4_t)xmmword_23C603EC0;
      if (v24.f32[0] > 0.0)
        v25 = vdivq_f32(v21, vsqrtq_f32(v24));
      v52 = v25;
      v64 = (int32x4_t)v25;
      v61.i32[0] = v54;
      v26 = (cv3d::cv::gess::mesh::OneRingVertex *)cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v62, v8, (unsigned int *)&v61);
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex(v26);
      if (Vertex != -1)
      {
        v29 = Vertex;
        v30 = (int32x4_t *)(v16 + 16 * v53);
        LODWORD(v28) = 0;
        v57 = v28;
        do
        {
          v31 = *a2;
          v61.i32[0] = *(_DWORD *)(a1 + 176);
          v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, (unsigned int *)&v61);
          v35 = *(_QWORD *)(v32 + 40);
          if (v29 >= (unint64_t)((*(_QWORD *)(v32 + 48) - v35) >> 4))
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v32, v33, v34);
          v36 = *(float32x4_t *)(*a3 + 16 * v29);
          v60 = *(float32x4_t *)(*a4 + 16 * v29);
          v37 = vmulq_f32(v36, v36);
          v37.i32[3] = 0;
          v38 = vpaddq_f32(v37, v37);
          v39 = vpaddq_f32(v38, v38);
          v40 = (float32x4_t)xmmword_23C603EC0;
          if (v39.f32[0] > 0.0)
            v40 = vdivq_f32(v36, vsqrtq_f32(v39));
          v61 = (int32x4_t)v40;
          v58 = 0u;
          v59 = 0u;
          cv3d::cv::gess::internal::CompatPositionExtrinsic4(&v65, v30, &v64, &v63, (float32x4_t *)(v35 + 16 * v29), (int32x4_t *)(v31 + 16 * v29), &v61, &v60, v67, &v66, &v59, &v58);
          v42 = v57;
          v41 = vaddq_f32(v58, vmulq_n_f32(v59, *(float *)&v57));
          *(float *)&v42 = *(float *)&v57 + 1.0;
          v43 = (float)(*(float *)&v57 + 1.0);
          v57 = v42;
          if (v43 > 0.00000001)
            v41 = vdivq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v42, 0));
          v44 = vmulq_f32(vsubq_f32(v41, v56), *(float32x4_t *)v30);
          v44.i32[3] = 0;
          v55 = vsubq_f32(v41, vmulq_n_f32(*(float32x4_t *)v30, vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44))));
          v63 = v55;
          v29 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v62);
        }
        while (v29 != -1);
        if (*(float *)&v57 > 0.0)
        {
          v45 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL), (int32x4_t)v52), (float32x4_t)vzip2q_s32(vzip1q_s32(*v30, (int32x4_t)vextq_s8(*(int8x16_t *)v30, *(int8x16_t *)v30, 0xCuLL)), *v30)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v52, (int32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 0xCuLL)), (int32x4_t)v52), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v30, *(int8x16_t *)v30, 4uLL), *v30));
          v46 = vsubq_f32(v56, v55);
          v47 = vmulq_f32(v52, v46);
          v47.i32[3] = 0;
          v48 = vmulq_f32(v46, v45);
          v48.i32[3] = 0;
          *(float32x4_t *)(*a4 + 16 * v53) = vaddq_f32(vmulq_n_f32(vmulq_n_f32(v45, roundf(v11 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)))), a5), vaddq_f32(v55, vmulq_n_f32(vmulq_n_f32(v52, roundf(v11 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47)))), a5)));
        }
      }
      v14 = ++v54;
      v8 = v51;
    }
    while (v54 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::Quad2Triangles(uint64_t a1, _DWORD *a2, unsigned int **a3, int a4)
{
  unsigned int *v4;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  __int128 v24;
  int v25;
  unsigned int v26;
  int appended;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  v4 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 16)
    cv3d::cv::gess::internal::Quad2Triangles();
  if (a4 == -1)
    cv3d::cv::gess::internal::Quad2Triangles();
  v8 = v4[1];
  v33 = *v4;
  v10 = v4[2];
  v9 = v4[3];
  v31 = v10;
  v32 = v8;
  v30 = v9;
  v11 = (_QWORD *)(a1 + 104);
  v29 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v33) + 12);
  v28 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v31) + 12);
  LODWORD(v24) = -1;
  appended = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v24);
  v25 = -1;
  *(_QWORD *)&v24 = -1;
  *((_QWORD *)&v24 + 1) = -1;
  v12 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v24);
  v26 = v12;
  v25 = -1;
  *(_QWORD *)&v24 = -1;
  *((_QWORD *)&v24 + 1) = -1;
  v13 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v24);
  v23 = v13;
  LODWORD(v24) = a4;
  v14 = (uint64_t *)(a1 + 32);
  v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v14, (unsigned int *)&v24, v15);
  if (*(_QWORD *)(v16 + 48) <= (unint64_t)v12)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v16, v17, v18);
  *(_QWORD *)(*(_QWORD *)(v16 + 40) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) |= 1 << v12;
  LODWORD(v24) = a4;
  v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v14, (unsigned int *)&v24, v18);
  if (*(_QWORD *)(v19 + 48) <= (unint64_t)v13)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v19, v20, v21);
  *(_QWORD *)(*(_QWORD *)(v19 + 40) + (((unint64_t)v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v26, &v33);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v32, &v26);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v23, &v31);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v11, &v30, &v23);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v11, &v26, &v23);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, a2, &v26);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, &appended, &v23);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, &appended, &v31);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v11, &appended, &v30);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v11, &v29, &v23);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v11, &v28, &v26);
  return 1;
}

uint64_t cv3d::cv::gess::internal::Pentagon2Triangles(uint64_t a1, _DWORD *a2, unsigned int **a3, int a4)
{
  unsigned int *v4;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  __int128 v33;
  int v34;
  unsigned int v35;
  int v36;
  int appended;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;

  v4 = *a3;
  if ((char *)a3[1] - (char *)*a3 != 20)
    cv3d::cv::gess::internal::Pentagon2Triangles();
  if (a4 == -1)
    cv3d::cv::gess::internal::Pentagon2Triangles();
  v8 = v4[1];
  v45 = *v4;
  v9 = v4[3];
  v43 = v4[2];
  v44 = v8;
  v41 = v4[4];
  v42 = v9;
  v10 = (_QWORD *)(a1 + 104);
  v40 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v45) + 12);
  v39 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v10, &v43) + 12);
  v38 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v10, &v42) + 12);
  LODWORD(v33) = -1;
  appended = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v33);
  LODWORD(v33) = -1;
  v36 = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v33);
  v34 = -1;
  *(_QWORD *)&v33 = -1;
  *((_QWORD *)&v33 + 1) = -1;
  v11 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v33);
  v34 = -1;
  v35 = v11;
  *(_QWORD *)&v33 = -1;
  *((_QWORD *)&v33 + 1) = -1;
  v12 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v33);
  v32 = v12;
  v34 = -1;
  *(_QWORD *)&v33 = -1;
  *((_QWORD *)&v33 + 1) = -1;
  v13 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v33);
  v31 = v13;
  v34 = -1;
  *(_QWORD *)&v33 = -1;
  *((_QWORD *)&v33 + 1) = -1;
  v14 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v33);
  v30 = v14;
  LODWORD(v33) = a4;
  v15 = (uint64_t *)(a1 + 32);
  v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v33, v16);
  if (*(_QWORD *)(v17 + 48) <= (unint64_t)v11)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v17, v18, v19);
  *(_QWORD *)(*(_QWORD *)(v17 + 40) + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
  LODWORD(v33) = a4;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v33, v19);
  if (*(_QWORD *)(v20 + 48) <= (unint64_t)v12)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v20, v21, v22);
  *(_QWORD *)(*(_QWORD *)(v20 + 40) + (((unint64_t)v12 >> 3) & 0x1FFFFFF8)) |= 1 << v12;
  LODWORD(v33) = a4;
  v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v33, v22);
  if (*(_QWORD *)(v23 + 48) <= (unint64_t)v13)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v23, v24, v25);
  *(_QWORD *)(*(_QWORD *)(v23 + 40) + (((unint64_t)v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
  LODWORD(v33) = a4;
  v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v15, (unsigned int *)&v33, v25);
  if (*(_QWORD *)(v26 + 48) <= (unint64_t)v14)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v26, v27, v28);
  *(_QWORD *)(*(_QWORD *)(v26 + 40) + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) |= 1 << v14;
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v35, &v45);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v44, &v35);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v32, &v43);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v43, &v31);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v31, &v32);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v30, &v42);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v10, &v41, &v30);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v10, &v35, &v32);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v10, &v31, &v30);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, a2, &v35);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &appended, &v32);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &appended, &v43);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &appended, &v31);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &v36, &v30);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &v36, &v42);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v10, &v36, &v41);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v40, &v32);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v40, &v30);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v39, &v35);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v10, &v38, &v31);
  return 1;
}

uint64_t cv3d::cv::gess::internal::EdgeCollapsing(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unsigned int *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  unsigned int *v12;
  _BOOL4 is_boundary;
  BOOL v14;
  unsigned int *v15;
  int v16;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int Vertex;
  int v24;
  int v25;
  int i;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  _DWORD *v42;
  unsigned int *v43;
  _DWORD *v44;
  unsigned int *v45;
  _DWORD *v46;
  unsigned int *v47;
  _DWORD *v48;
  const char *v49;
  int v50;
  const char *v51;
  const char *v52;
  int v53;
  _BYTE v54[16];
  void *__p;
  _BYTE *v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD v59[3];
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;

  v4 = a2;
  v6 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v7 & *v6) != 0)
    return cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge(a1, v4);
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
  v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v8);
  if ((v10 & *v9) != 0)
    return cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge(a1, v4);
  v77 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4) + 12);
  v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
  v76 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v12) + 12);
  if (v77 == v76)
    return 0;
  is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v77);
  v14 = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v76);
  if (is_boundary && v14)
    return 0;
  if (!is_boundary)
    v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
  v75 = *v4;
  v74 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75) + 8);
  v73 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74) + 8);
  v72 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75);
  v71 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72) + 8);
  v70 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v71) + 8);
  v69 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
  v68 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v71);
  v67 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74);
  v66 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v70);
  v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75) + 16);
  v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72) + 16);
  v63 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75) + 12);
  v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75);
  v62 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v15) + 12);
  v61 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73) + 12);
  v60 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v70) + 12);
  v16 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v63);
  v17 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v62);
  if ((unint64_t)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v61) < 3)
    return 0;
  v18 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v60);
  result = 0;
  if (v18 >= 3 && v17 >= 3)
  {
    v19 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v69);
    if ((v20 & *v19) == 0
      || (v21 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v68),
          (v22 & *v21) == 0))
    {
      if (v16 == 2)
        return 0;
    }
    if (v17 + v16 < 6 || v61 == v60 || v61 == v63)
      return 0;
    result = 0;
    if (v63 != v62 && v60 != v62 && v60 != v63 && v61 != v62)
    {
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v59, (_QWORD *)(a1 + 104), (unsigned int *)&v63);
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v59);
      v58 = Vertex;
      if (Vertex != -1)
      {
        v24 = 0;
        do
        {
          if (Vertex == v62)
          {
            if (v24 > 0)
              return 0;
            v24 = 1;
          }
          cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(&__p, (_QWORD *)(a1 + 104), &v58);
          while (1)
          {
            v25 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&__p);
            if (v25 == -1)
              break;
            if (v25 == v62 && v58 != v61 && v58 != v60)
              return 0;
          }
          Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v59);
          v58 = Vertex;
        }
        while (Vertex != -1);
      }
      __p = 0;
      v56 = 0;
      v57 = 0;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v54, a1 + 104, &v62);
      for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v54);
            ;
            i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v54))
      {
        v53 = i;
        if (i == -1)
          break;
        if (i != v74 && i != v72)
          std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::push_back[abi:ne180100](&__p, &v53);
      }
      v78 = *(_DWORD *)(a1 + 176);
      v29 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v78);
      v30 = *(_QWORD *)(v29 + 40);
      if (v63 >= (unint64_t)((*(_QWORD *)(v29 + 48) - v30) >> 4))
      {
        v49 = "index < data_.size()";
        v50 = 182;
        v51 = "Attribute.h";
        v52 = "operator[]";
      }
      else
      {
        *(_OWORD *)(v30 + 16 * v63) = *a3;
        cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v69, &v67);
        cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v68, &v66);
        v31 = (unsigned int *)__p;
        if (v56 != __p)
        {
          v32 = 0;
          v33 = 1;
          do
          {
            cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v31[v32], &v63);
            v32 = v33;
            v31 = (unsigned int *)__p;
            ++v33;
          }
          while (v32 < (v56 - (_BYTE *)__p) >> 2);
        }
        cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v61, &v67);
        cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v60, &v68);
        cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v63, &v69);
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v65) = -1;
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v64) = -1;
        v34 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75);
        *(_QWORD *)v34 = -1;
        *(_QWORD *)(v34 + 8) = -1;
        *(_DWORD *)(v34 + 16) = -1;
        v35 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74);
        *(_QWORD *)v35 = -1;
        *(_QWORD *)(v35 + 8) = -1;
        *(_DWORD *)(v35 + 16) = -1;
        v36 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
        *(_QWORD *)v36 = -1;
        *(_QWORD *)(v36 + 8) = -1;
        *(_DWORD *)(v36 + 16) = -1;
        v37 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72);
        *(_QWORD *)v37 = -1;
        *(_QWORD *)(v37 + 8) = -1;
        *(_DWORD *)(v37 + 16) = -1;
        v38 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v71);
        *(_QWORD *)v38 = -1;
        *(_QWORD *)(v38 + 8) = -1;
        *(_DWORD *)(v38 + 16) = -1;
        v39 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v70);
        *(_QWORD *)v39 = -1;
        *(_QWORD *)(v39 + 8) = -1;
        *(_DWORD *)(v39 + 16) = -1;
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)(a1 + 104), (unsigned int *)&v62, v40) = -1;
        v41 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v69);
        v42 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v41);
        if (*v42 == v69)
        {
          v43 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68);
          v44 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v43);
          if (*v44 == v68)
          {
            v45 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v67);
            v46 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v45);
            if (*v46 == v67)
            {
              v47 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v66);
              v48 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v47);
              if (*v48 == v66)
              {
                v78 = v63;
                if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex((_QWORD *)(a1 + 104), (unsigned int *)&v78) != -1)
                {
                  if (__p)
                  {
                    v56 = __p;
                    operator delete(__p);
                  }
                  return 1;
                }
                v49 = "!mesh.IsDangling(vc)";
                v50 = 247;
              }
              else
              {
                v49 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h15)) == h15";
                v50 = 246;
              }
            }
            else
            {
              v49 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h12)) == h12";
              v50 = 245;
            }
          }
          else
          {
            v49 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h9)) == h9";
            v50 = 244;
          }
        }
        else
        {
          v49 = "mesh.HEdgeTwin(mesh.HEdgeTwin(h6)) == h6";
          v50 = 243;
        }
        v51 = "QuadCommon.cpp";
        v52 = "EdgeCollapsing";
      }
      __assert_rtn(v52, v51, v50, v49);
    }
  }
  return result;
}

void sub_23C5622A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::EdgeMerging(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  v5 = (_QWORD *)(a1 + 104);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 8) != *a3)
    return 0;
  v6 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, a2);
  v7 = *a3;
  if (*v6 == *a3)
    return 0;
  v22 = *a2;
  v21 = v7;
  v20 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v22);
  v19 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21);
  v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v19) + 4);
  v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21) + 8);
  v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21) + 12);
  v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21);
  v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, v9) + 12);
  v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v22) + 16);
  v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v20) + 16);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v5, &v22, &v17);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v5, &v18, &v20);
  cv3d::cv::gess::mesh::Topology::SetHEdge(v5, &v15, &v20);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v5, &v14, &v22);
  cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v5, &v13, &v20);
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v5, &v16, v10) = -1;
  v11 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v19);
  *(_QWORD *)v11 = -1;
  *(_QWORD *)(v11 + 8) = -1;
  *(_DWORD *)(v11 + 16) = -1;
  v12 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v5, &v21);
  *(_QWORD *)v12 = -1;
  *(_QWORD *)(v12 + 8) = -1;
  *(_DWORD *)(v12 + 16) = -1;
  return 1;
}

uint64_t cv3d::cv::gess::internal::FaceMergingByDiagonal(uint64_t a1, unsigned int *a2, int *a3)
{
  unsigned int *v4;
  _QWORD *v6;
  unsigned int *v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unsigned int *v38;
  _DWORD *v39;
  _DWORD *v40;
  int begin;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  int v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  std::vector<unsigned int>::pointer v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unsigned int *v119;
  const char *v120;
  int v121;
  int v122;
  float v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  std::vector<unsigned int>::pointer v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  int v144;
  std::vector<unsigned int> *v145;
  std::vector<unsigned int> *v146;
  BOOL v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  unsigned int *v158;
  char *v159;
  char *v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  void *v171;
  unsigned int *v172;
  unsigned int *v173;
  void *v174;
  char *v175;
  char *v176;
  std::vector<unsigned int> v177;
  char v178;
  void *__p;
  char *v180;
  char *v181;
  void *v182;
  char *v183;
  char *v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  unsigned int v201;
  unsigned int v202[3];

  v4 = a2;
  v6 = (_QWORD *)(a1 + 104);
  v202[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 16);
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v4);
  v201 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v7) + 16);
  v198 = 0;
  v199 = 0;
  v200 = 0;
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v8 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, v202);
  LODWORD(v182) = v8;
  do
  {
    v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v182) + 8);
    LODWORD(v182) = v9;
    v10 = v199;
    if (v199 >= v200)
    {
      v12 = (v199 - v198) >> 2;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = (v200 - v198) >> 1;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if ((unint64_t)(v200 - v198) >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v200, v14);
        v9 = (int)v182;
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v12];
      *(_DWORD *)v16 = v9;
      v11 = v16 + 4;
      v18 = v198;
      v17 = v199;
      if (v199 != v198)
      {
        do
        {
          v19 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v16 - 1) = v19;
          v16 -= 4;
        }
        while (v17 != v18);
        v17 = v198;
      }
      v198 = v16;
      v199 = v11;
      v200 = &v15[4 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v199 = v9;
      v11 = v10 + 4;
    }
    v199 = v11;
  }
  while ((_DWORD)v182 != v8);
  v20 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v201);
  LODWORD(v182) = v20;
  do
  {
    v21 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v182) + 8);
    LODWORD(v182) = v21;
    v22 = v196;
    if (v196 >= v197)
    {
      v24 = (v196 - v195) >> 2;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = (v197 - v195) >> 1;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if ((unint64_t)(v197 - v195) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v197, v26);
        v21 = (int)v182;
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v24];
      *(_DWORD *)v28 = v21;
      v23 = v28 + 4;
      v30 = v195;
      v29 = v196;
      if (v196 != v195)
      {
        do
        {
          v31 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v28 - 1) = v31;
          v28 -= 4;
        }
        while (v29 != v30);
        v29 = v195;
      }
      v195 = v28;
      v196 = v23;
      v197 = &v27[4 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_DWORD *)v196 = v21;
      v23 = v22 + 4;
    }
    v196 = v23;
  }
  while ((_DWORD)v182 != v20);
  v32 = v199 - v198;
  v33 = v195;
  if ((unint64_t)(v199 - v198) > 0x10
    || (v34 = v23 - v195, (unint64_t)(v23 - v195) > 0x10)
    || v32 == 16 && v34 == 16)
  {
    v35 = 0;
    if (!v195)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (v32 < v34)
    v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v4);
  v194 = *v4;
  v193 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194);
  v192 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194) + 16);
  v191 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v193) + 16);
  v190 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194) + 8);
  v189 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194) + 4);
  v188 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v193) + 8);
  v187 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v193) + 4);
  v37 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v188);
  if (*(_DWORD *)(v37 + 8) != v187)
    __assert_rtn("FaceMergingByDiagonal", "QuadCommon.cpp", 336, "mesh.HEdgeNext(h2).Index() == h3.Index()");
  v38 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194);
  v186 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, v38) + 12);
  v185 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194) + 12);
  v39 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v190);
  if (*v39 == v187 || (v40 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v189), *v40 == v188))
  {
    v35 = 0;
    goto LABEL_52;
  }
  v182 = 0;
  v183 = 0;
  v184 = 0;
  __p = 0;
  v180 = 0;
  v181 = 0;
  LODWORD(v177.__begin_) = v194;
  do
  {
    begin = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v177) + 8);
    LODWORD(v177.__begin_) = begin;
    if (begin == v194)
      break;
    v42 = v180;
    if (v180 >= v181)
    {
      v44 = (v180 - (_BYTE *)__p) >> 2;
      if ((unint64_t)(v44 + 1) >> 62)
        goto LABEL_248;
      v45 = (v181 - (_BYTE *)__p) >> 1;
      if (v45 <= v44 + 1)
        v45 = v44 + 1;
      if ((unint64_t)(v181 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
        v46 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v46 = v45;
      if (v46)
      {
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v181, v46);
        begin = (int)v177.__begin_;
      }
      else
      {
        v47 = 0;
      }
      v48 = &v47[4 * v44];
      *(_DWORD *)v48 = begin;
      v43 = v48 + 4;
      v50 = (char *)__p;
      v49 = v180;
      if (v180 != __p)
      {
        do
        {
          v51 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v48 - 1) = v51;
          v48 -= 4;
        }
        while (v49 != v50);
        v49 = (char *)__p;
      }
      __p = v48;
      v180 = v43;
      v181 = &v47[4 * v46];
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_DWORD *)v180 = begin;
      v43 = v42 + 4;
    }
    v180 = v43;
  }
  while (LODWORD(v177.__begin_) != v194);
  v52 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v193);
  v53 = v52;
  v54 = v180;
  if (v180 >= v181)
  {
    v56 = (v180 - (_BYTE *)__p) >> 2;
    if ((unint64_t)(v56 + 1) >> 62)
      goto LABEL_248;
    v57 = (v181 - (_BYTE *)__p) >> 1;
    if (v57 <= v56 + 1)
      v57 = v56 + 1;
    if ((unint64_t)(v181 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
      v58 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v58 = v57;
    if (v58)
      v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v181, v58);
    else
      v59 = 0;
    v60 = &v59[4 * v56];
    v61 = &v59[4 * v58];
    *(_DWORD *)v60 = *(_DWORD *)(v53 + 8);
    v55 = v60 + 4;
    v63 = (char *)__p;
    v62 = v180;
    if (v180 != __p)
    {
      do
      {
        v64 = *((_DWORD *)v62 - 1);
        v62 -= 4;
        *((_DWORD *)v60 - 1) = v64;
        v60 -= 4;
      }
      while (v62 != v63);
      v62 = (char *)__p;
    }
    __p = v60;
    v180 = v55;
    v181 = v61;
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(_DWORD *)v180 = *(_DWORD *)(v52 + 8);
    v55 = v54 + 4;
  }
  v180 = v55;
  v65 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v193);
  v66 = v65;
  v67 = v180;
  if (v180 < v181)
  {
    *(_DWORD *)v180 = *(_DWORD *)(v65 + 4);
    v68 = v67 + 4;
    goto LABEL_105;
  }
  v69 = (v180 - (_BYTE *)__p) >> 2;
  if ((unint64_t)(v69 + 1) >> 62)
LABEL_248:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v70 = (v181 - (_BYTE *)__p) >> 1;
  if (v70 <= v69 + 1)
    v70 = v69 + 1;
  if ((unint64_t)(v181 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
    v71 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v71 = v70;
  if (v71)
    v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v181, v71);
  else
    v72 = 0;
  v73 = &v72[4 * v69];
  v74 = &v72[4 * v71];
  *(_DWORD *)v73 = *(_DWORD *)(v66 + 4);
  v68 = v73 + 4;
  v76 = (char *)__p;
  v75 = v180;
  if (v180 != __p)
  {
    do
    {
      v77 = *((_DWORD *)v75 - 1);
      v75 -= 4;
      *((_DWORD *)v73 - 1) = v77;
      v73 -= 4;
    }
    while (v75 != v76);
    v75 = (char *)__p;
  }
  __p = v73;
  v180 = v68;
  v181 = v74;
  if (v75)
    operator delete(v75);
LABEL_105:
  v180 = v68;
  v78 = (unsigned int *)__p;
  if ((unint64_t)(v68 - (_BYTE *)__p) > 0x14)
    __assert_rtn("FaceMergingByDiagonal", "QuadCommon.cpp", 359, "fh_hhs.size() <= 5");
  if (v68 != __p)
  {
    v79 = 0;
    v80 = 0;
    do
    {
      v81 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v78[v79]);
      v82 = v81;
      v83 = v183;
      if (v183 >= v184)
      {
        v85 = (v183 - (_BYTE *)v182) >> 2;
        if ((unint64_t)(v85 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v86 = (v184 - (_BYTE *)v182) >> 1;
        if (v86 <= v85 + 1)
          v86 = v85 + 1;
        if ((unint64_t)(v184 - (_BYTE *)v182) >= 0x7FFFFFFFFFFFFFFCLL)
          v87 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v87 = v86;
        if (v87)
          v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v184, v87);
        else
          v88 = 0;
        v89 = &v88[4 * v85];
        *(_DWORD *)v89 = *(_DWORD *)(v82 + 12);
        v84 = v89 + 4;
        v91 = (char *)v182;
        v90 = v183;
        if (v183 != v182)
        {
          do
          {
            v92 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v89 - 1) = v92;
            v89 -= 4;
          }
          while (v90 != v91);
          v90 = (char *)v182;
        }
        v182 = v89;
        v183 = v84;
        v184 = &v88[4 * v87];
        if (v90)
          operator delete(v90);
      }
      else
      {
        *(_DWORD *)v183 = *(_DWORD *)(v81 + 12);
        v84 = v83 + 4;
      }
      v183 = v84;
      v78 = (unsigned int *)__p;
      v79 = ++v80;
    }
    while (v80 < (unint64_t)((v180 - (_BYTE *)__p) >> 2));
  }
  v178 = 0;
  v93 = v192;
  v94 = v191;
  v95 = (unsigned int *)operator new(8uLL);
  *(_QWORD *)v95 = v93 | (v94 << 32);
  v177.__end_ = v95 + 2;
  v177.__end_cap_.__value_ = v95 + 2;
  v177.__begin_ = v95;
  cv3d::cv::gess::internal::CheckSharedVerticesInAdjacentFaces(a1, (uint64_t)&v177, &v182, v96, &v178);
  operator delete(v95);
  if (!v178)
  {
    v98 = *a3;
    if (*a3 == -1)
    {
LABEL_165:
      cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v6, &v189, &v188);
      cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v6, &v187, &v190);
      cv3d::cv::gess::mesh::Topology::SetHEdge(v6, &v186, &v190);
      cv3d::cv::gess::mesh::Topology::SetHEdge(v6, &v185, &v188);
      cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v6, &v192, &v188);
      cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v6, &v192, &v187);
      if (*a3 == -1)
      {
        v122 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v192);
        LODWORD(v177.__begin_) = v122;
        LODWORD(v174) = -1;
        v123 = -200.0;
        do
        {
          LODWORD(v177.__begin_) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v177) + 8);
          v124 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, v177.__begin_);
          if (v124 > v123)
          {
            LODWORD(v174) = v177.__begin_;
            v123 = v124;
          }
        }
        while (LODWORD(v177.__begin_) != v122);
        if ((_DWORD)v174 != -1)
        {
          v125 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v174);
          if (*(_DWORD *)(v125 + 4) != *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v192) && v123 > 120.0)
          {
            v126 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)&v174);
            cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v6, &v192, (unsigned int *)(v126 + 4));
          }
        }
        if (*a3 == -1)
        {
          v177.__end_ = 0;
          v177.__end_cap_.__value_ = 0;
          v176 = 0;
          v177.__begin_ = (std::vector<unsigned int>::pointer)&v177.__end_;
          v174 = 0;
          v175 = 0;
          cv3d::cv::gess::internal::FindSharedEdgesInAdjacentFaces(a1, &v192, &v174, (uint64_t)&v177);
          v127 = v177.__begin_;
          v174 = 0;
          v175 = 0;
          v176 = 0;
          if ((std::vector<unsigned int>::pointer *)v177.__begin_ == &v177.__end_)
          {
            v164 = 0;
          }
          else
          {
            v128 = 0;
            do
            {
              if (*((_QWORD *)v127 + 6) - *((_QWORD *)v127 + 5) >= 5uLL)
              {
                LODWORD(v171) = 0;
                cv3d::cv::gess::internal::FindFirstEdgeInPrevNextConnectedSequence(a1, (uint64_t *)v127 + 5, (unsigned int *)&v171);
                v129 = v171;
                v130 = *((_QWORD *)v127 + 5);
                v131 = *((_QWORD *)v127 + 6);
                v132 = ((_DWORD)v171 + 1) % (unint64_t)((v131 - v130) >> 2);
                if ((_DWORD)v171 != (_DWORD)v132)
                {
                  LOBYTE(v133) = 0;
                  while (2)
                  {
                    v134 = (v131 - v130) >> 2;
                    while ((v133 & 1) != 0)
                    {
                      v132 = (v132 + 1) % v134;
                      LOBYTE(v133) = 1;
                      if ((_DWORD)v129 == (_DWORD)v132)
                        goto LABEL_186;
                    }
                    v133 = cv3d::cv::gess::internal::EdgeMerging(a1, (unsigned int *)(v130 + 4 * v129), (unsigned int *)(v130 + 4 * v132));
                    v130 = *((_QWORD *)v127 + 5);
                    v131 = *((_QWORD *)v127 + 6);
                    v132 = (v132 + 1) % (unint64_t)((v131 - v130) >> 2);
                    if ((_DWORD)v129 != (_DWORD)v132)
                      continue;
                    break;
                  }
                  if (v133)
                  {
LABEL_186:
                    v135 = v175;
                    if (v175 >= v176)
                    {
                      v137 = (v175 - (_BYTE *)v174) >> 2;
                      if ((unint64_t)(v137 + 1) >> 62)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v138 = (v176 - (_BYTE *)v174) >> 1;
                      if (v138 <= v137 + 1)
                        v138 = v137 + 1;
                      if ((unint64_t)(v176 - (_BYTE *)v174) >= 0x7FFFFFFFFFFFFFFCLL)
                        v139 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v139 = v138;
                      if (v139)
                        v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v176, v139);
                      else
                        v140 = 0;
                      v141 = &v140[4 * v137];
                      *(_DWORD *)v141 = v127[8];
                      v136 = v141 + 4;
                      v143 = (char *)v174;
                      v142 = v175;
                      if (v175 != v174)
                      {
                        do
                        {
                          v144 = *((_DWORD *)v142 - 1);
                          v142 -= 4;
                          *((_DWORD *)v141 - 1) = v144;
                          v141 -= 4;
                        }
                        while (v142 != v143);
                        v142 = (char *)v174;
                      }
                      v174 = v141;
                      v175 = v136;
                      v176 = &v140[4 * v139];
                      if (v142)
                        operator delete(v142);
                    }
                    else
                    {
                      *(_DWORD *)v175 = v127[8];
                      v136 = v135 + 4;
                    }
                    v175 = v136;
                    ++v128;
                  }
                }
              }
              v145 = (std::vector<unsigned int> *)*((_QWORD *)v127 + 1);
              if (v145)
              {
                do
                {
                  v146 = v145;
                  v145 = (std::vector<unsigned int> *)v145->__begin_;
                }
                while (v145);
              }
              else
              {
                do
                {
                  v146 = (std::vector<unsigned int> *)*((_QWORD *)v127 + 2);
                  v147 = v146->__begin_ == v127;
                  v127 = (std::vector<unsigned int>::pointer)v146;
                }
                while (!v147);
              }
              v127 = (std::vector<unsigned int>::pointer)v146;
            }
            while (v146 != (std::vector<unsigned int> *)&v177.__end_);
            v171 = 0;
            v172 = 0;
            v173 = 0;
            if (v128)
            {
              std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::push_back[abi:ne180100](&v174, &v192);
              v148 = (unsigned int *)v174;
              v149 = (unsigned int *)v175;
              if (v174 != v175)
              {
                do
                {
                  v170 = *v148;
                  v172 = (unsigned int *)v171;
                  v150 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v170);
                  v169 = v150;
                  do
                  {
                    v151 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v169) + 8);
                    v169 = v151;
                    v152 = v172;
                    if (v172 >= v173)
                    {
                      v154 = ((char *)v172 - (_BYTE *)v171) >> 2;
                      if ((unint64_t)(v154 + 1) >> 62)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v155 = ((char *)v173 - (_BYTE *)v171) >> 1;
                      if (v155 <= v154 + 1)
                        v155 = v154 + 1;
                      if ((unint64_t)((char *)v173 - (_BYTE *)v171) >= 0x7FFFFFFFFFFFFFFCLL)
                        v156 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v156 = v155;
                      if (v156)
                      {
                        v157 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v173, v156);
                        v151 = v169;
                      }
                      else
                      {
                        v157 = 0;
                      }
                      v158 = (unsigned int *)&v157[4 * v154];
                      *v158 = v151;
                      v153 = v158 + 1;
                      v160 = (char *)v171;
                      v159 = (char *)v172;
                      if (v172 != v171)
                      {
                        do
                        {
                          v161 = *((_DWORD *)v159 - 1);
                          v159 -= 4;
                          *--v158 = v161;
                        }
                        while (v159 != v160);
                        v159 = (char *)v171;
                      }
                      v171 = v158;
                      v172 = v153;
                      v173 = (unsigned int *)&v157[4 * v156];
                      if (v159)
                        operator delete(v159);
                    }
                    else
                    {
                      *v172 = v151;
                      v153 = v152 + 1;
                    }
                    v172 = v153;
                  }
                  while (v169 != v150);
                  if ((char *)v153 - (_BYTE *)v171 == 8)
                  {
                    v162 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, (unsigned int *)v171);
                    if (*(_DWORD *)(v162 + 8) == *((_DWORD *)v171 + 1))
                    {
                      v163 = *(_DWORD *)v171;
                      v167 = *(_DWORD *)(v162 + 8);
                      v168 = v163;
                      cv3d::cv::gess::internal::RemoveDegeneratedFace(a1, &v170, &v168, &v167);
                    }
                  }
                  ++v148;
                }
                while (v148 != v149);
              }
              if (v171)
              {
                v172 = (unsigned int *)v171;
                operator delete(v171);
              }
            }
            v164 = (char *)v174;
          }
          if (v164)
          {
            v175 = v164;
            operator delete(v164);
          }
          std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy((uint64_t)&v177, (_QWORD *)v177.__end_);
        }
      }
      v165 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v194);
      *(_QWORD *)v165 = -1;
      *(_QWORD *)(v165 + 8) = -1;
      *(_DWORD *)(v165 + 16) = -1;
      v166 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v6, &v193);
      *(_QWORD *)v166 = -1;
      *(_QWORD *)(v166 + 8) = -1;
      *(_DWORD *)(v166 + 16) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v6, &v191) = -1;
      v35 = 1;
      goto LABEL_127;
    }
    memset(&v177, 0, sizeof(v177));
    v174 = 0;
    v175 = 0;
    v176 = 0;
    LODWORD(v171) = v98;
    v99 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v171, v97);
    v101 = cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::operator[](v99, v192, v100);
    if (&v177 != (std::vector<unsigned int> *)v101)
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v177, *(char **)v101, *(_QWORD *)(v101 + 8), (uint64_t)(*(_QWORD *)(v101 + 8) - *(_QWORD *)v101) >> 2);
    LODWORD(v171) = *a3;
    v103 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v171, v102);
    v105 = cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::operator[](v103, v191, v104);
    if (&v174 != (void **)v105)
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v174, *(char **)v105, *(_QWORD *)(v105 + 8), (uint64_t)(*(_QWORD *)(v105 + 8) - *(_QWORD *)v105) >> 2);
    if (v175 - (_BYTE *)v174 != 12)
    {
      v120 = "f1_uvid.size() == 3u";
      v121 = 380;
LABEL_160:
      __assert_rtn("FaceMergingByDiagonal", "QuadCommon.cpp", v121, v120);
    }
    if (v175 != v174)
    {
      v106 = 0;
      v107 = v177.__end_ - v177.__begin_;
      while (2)
      {
        if (v177.__end_ != v177.__begin_)
        {
          v108 = 0;
          v109 = 0;
          while (*((_DWORD *)v174 + v106) != v177.__begin_[v108])
          {
            v108 = ++v109;
            if (v107 <= v109)
            {
              v111 = 0;
              v112 = 0;
              while (*((_DWORD *)v174
                      + (unsigned __int16)(v106
                                         + 2
                                         - 3 * ((21846 * (v106 + 2)) >> 16))) != v177.__begin_[v111])
              {
                v111 = ++v112;
                if (v107 <= v112)
                  goto LABEL_148;
              }
              std::vector<int>::resize(&v177, v107 + 1);
              v114 = v177.__begin_;
              if ((((LODWORD(v177.__end_) - LODWORD(v177.__begin_)) >> 2) - 2) > v112)
              {
                v115 = (((LODWORD(v177.__end_) - LODWORD(v177.__begin_)) >> 2) - 2);
                do
                {
                  v114[v115 + 1] = v114[v115];
                  --v115;
                }
                while (v112 < v115);
              }
              v114[v111 + 1] = *((_DWORD *)v174 + v106);
              LODWORD(v171) = *a3;
              v116 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v171, v113);
              v117 = *(_QWORD *)(v116 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v116 + 48) - v117) >> 3) <= v192)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              v118 = (char *)(v117 + 24 * v192);
              if (v118 != (char *)&v177)
                std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v118, (char *)v177.__begin_, (uint64_t)v177.__end_, v177.__end_ - v177.__begin_);
              v119 = v177.__begin_;
              if ((unint64_t)((char *)v177.__end_ - (char *)v177.__begin_ - 13) >= 0xB)
              {
                v120 = "!prev_uv_idx_found || (f0_uvid.size() >= 4 && f0_uvid.size() <= 5)";
                v121 = 409;
                goto LABEL_160;
              }
              if (v174)
              {
                v175 = (char *)v174;
                operator delete(v174);
                v119 = v177.__begin_;
              }
              if (v119)
              {
                v177.__end_ = v119;
                operator delete(v119);
              }
              goto LABEL_165;
            }
          }
          v110 = (v106 + 1);
          v106 = (v106 + 1);
          if (v110 < 3)
            continue;
        }
        break;
      }
    }
LABEL_148:
    if (v174)
    {
      v175 = (char *)v174;
      operator delete(v174);
    }
    if (v177.__begin_)
    {
      v177.__end_ = v177.__begin_;
      operator delete(v177.__begin_);
    }
  }
  v35 = 0;
LABEL_127:
  if (__p)
  {
    v180 = (char *)__p;
    operator delete(__p);
  }
  if (v182)
  {
    v183 = (char *)v182;
    operator delete(v182);
  }
LABEL_52:
  v33 = v195;
  if (v195)
  {
LABEL_42:
    v196 = v33;
    operator delete(v33);
  }
LABEL_43:
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  return v35;
}

void sub_23C5634C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy((uint64_t)&a18, a19);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  v28 = *(void **)(v26 - 160);
  if (v28)
  {
    *(_QWORD *)(v26 - 152) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v26 - 136);
  if (v29)
  {
    *(_QWORD *)(v26 - 128) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::CheckSharedVerticesInAdjacentFaces(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _BYTE *a5)
{
  _DWORD *v5;
  unint64_t v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unsigned int v24;
  unsigned int v25;
  unsigned int HEdge;
  _BYTE v27[16];

  *a5 = 0;
  v5 = (_DWORD *)*a3;
  if (a3[1] != *a3)
  {
    v9 = 0;
    v10 = 0;
    v11 = a1 + 104;
    while (1)
    {
      v12 = &v5[v9];
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v27, v11, v12);
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v27);
      if (HEdge != -1)
        break;
      v9 = ++v10;
LABEL_25:
      v5 = (_DWORD *)*a3;
      if (v9 >= (uint64_t)(a3[1] - *a3) >> 2)
        return 1;
    }
    v13 = v9 - 1;
    v9 = ++v10;
    while (1)
    {
      v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, &HEdge) + 16);
      v25 = v14;
      if (v14 != -1)
      {
        v16 = *(_DWORD **)a2;
        v15 = *(_DWORD **)(a2 + 8);
        if (*(_DWORD **)a2 != v15)
        {
          while (*v16 != v14)
          {
            if (++v16 == v15)
            {
              v16 = *(_DWORD **)(a2 + 8);
              break;
            }
          }
        }
        if (v16 == v15)
          break;
      }
LABEL_11:
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v27);
      if (HEdge == -1)
        goto LABEL_25;
    }
    v17 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v11, &v25);
    v24 = v17;
    while (1)
    {
      v24 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, &v24) + 8);
      v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, &v24) + 12);
      if (v18 != *v12)
      {
        v20 = (_DWORD *)*a3;
        v19 = (_DWORD *)a3[1];
        v21 = ((uint64_t)v19 - *a3) >> 2;
        if (v18 != *(_DWORD *)(*a3 + 4 * ((v13 + v21) % v21)) && v18 != v20[v9 % v21] && v20 != v19)
          break;
      }
LABEL_22:
      if (v24 == v17)
        goto LABEL_11;
    }
    while (v18 != *v20)
    {
      if (++v20 == v19)
        goto LABEL_22;
    }
    *a5 = 1;
  }
  return 1;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::operator[](uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 48) - v3) >> 3) <= a2)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, a2, a3);
  return v3 + 24 * a2;
}

BOOL cv3d::cv::gess::internal::FindSharedEdgesInAdjacentFaces(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char *v47;
  unsigned int *v48;
  char *v49;
  unsigned int *v50;

  v4 = *(_QWORD *)(a4 + 16);
  if (!v4)
  {
    v47 = 0;
    v48 = 0;
    v8 = a1 + 104;
    v49 = 0;
    v9 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
    v46 = v9;
    do
    {
      v10 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, &v46) + 8);
      v46 = v10;
      v11 = v48;
      if (v48 >= (unsigned int *)v49)
      {
        v13 = ((char *)v48 - v47) >> 2;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v14 = (v49 - v47) >> 1;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if ((unint64_t)(v49 - v47) >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v49, v15);
          v10 = v46;
        }
        else
        {
          v16 = 0;
        }
        v17 = (unsigned int *)&v16[4 * v13];
        *v17 = v10;
        v12 = v17 + 1;
        v19 = (unsigned int *)v47;
        v18 = v48;
        if (v48 != (unsigned int *)v47)
        {
          do
          {
            v20 = *--v18;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = (unsigned int *)v47;
        }
        v47 = (char *)v17;
        v48 = v12;
        v49 = &v16[4 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v48 = v10;
        v12 = v11 + 1;
      }
      v48 = v12;
    }
    while (v46 != v9);
    if (v12 == (unsigned int *)v47)
      goto LABEL_44;
    v21 = 0;
    v22 = 0;
    v12 = (unsigned int *)v47;
    do
    {
      v45 = v12[v21];
      v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v45);
      v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v23);
      if ((*v24 & v25) == 0)
      {
        v26 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v45);
        v27 = cv3d::cv::gess::mesh::Topology::h(v8, v26);
        v28 = *(unsigned int *)(v27 + 16);
        v44 = *(_DWORD *)(v27 + 16);
        if (!a3[1] || ((*(_QWORD *)(*a3 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0)
        {
          v50 = &v44;
          v29 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::FaceHandle,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::FaceHandle const&>,std::tuple<>>((uint64_t **)a4, &v44, (uint64_t)&std::piecewise_construct, &v50);
          v30 = v29[6];
          v31 = v29[7];
          if (v30 >= v31)
          {
            v33 = v29[5];
            v34 = ((char *)v30 - (char *)v33) >> 2;
            if ((unint64_t)(v34 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v35 = (char *)v31 - (char *)v33;
            v36 = v35 >> 1;
            if (v35 >> 1 <= (unint64_t)(v34 + 1))
              v36 = v34 + 1;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v36;
            if (v37)
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v29 + 7), v37);
            else
              v38 = 0;
            v39 = (uint64_t *)&v38[4 * v34];
            *(_DWORD *)v39 = v45;
            v32 = (uint64_t *)((char *)v39 + 4);
            v41 = v29[5];
            v40 = v29[6];
            if (v40 != v41)
            {
              do
              {
                v42 = *((_DWORD *)v40 - 1);
                v40 = (uint64_t *)((char *)v40 - 4);
                *((_DWORD *)v39 - 1) = v42;
                v39 = (uint64_t *)((char *)v39 - 4);
              }
              while (v40 != v41);
              v40 = v29[5];
            }
            v29[5] = v39;
            v29[6] = v32;
            v29[7] = (uint64_t *)&v38[4 * v37];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v30 = v45;
            v32 = (uint64_t *)((char *)v30 + 4);
          }
          v29[6] = v32;
        }
      }
      v12 = (unsigned int *)v47;
      v21 = ++v22;
    }
    while (v22 < (unint64_t)(((char *)v48 - v47) >> 2));
    if (v47)
    {
LABEL_44:
      v48 = v12;
      operator delete(v12);
    }
  }
  return v4 == 0;
}

void sub_23C563B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FindFirstEdgeInPrevNextConnectedSequence(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;

  v4 = *a2;
  v3 = a2[1];
  if (v3 != *a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = a1 + 104;
    while (v3 != v4)
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        if (v8 != v11)
        {
          v12 = *(_DWORD *)(v4 + 4 * v7);
          v13 = cv3d::cv::gess::mesh::Topology::h(v9, (unsigned int *)(v4 + 4 * v10));
          v4 = *a2;
          v3 = a2[1];
          if (v12 == *(_DWORD *)(v13 + 8))
            break;
        }
        v10 = ++v11;
        if (v11 >= (unint64_t)((v3 - v4) >> 2))
          goto LABEL_11;
      }
      v7 = ++v8;
      if (v8 >= (unint64_t)((v3 - v4) >> 2))
        return 1;
    }
LABEL_11:
    *a3 = v8;
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::RemoveDegeneratedFace(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v7 = (_QWORD *)(a1 + 104);
  v14 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a3);
  v13 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a4);
  v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a3) + 12);
  v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a4) + 12);
  cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v7, &v14, &v13);
  cv3d::cv::gess::mesh::Topology::SetStart(v7, &v14, &v11);
  cv3d::cv::gess::mesh::Topology::SetStart(v7, &v13, &v12);
  v8 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a3);
  *(_QWORD *)v8 = -1;
  *(_QWORD *)(v8 + 8) = -1;
  *(_DWORD *)(v8 + 16) = -1;
  v9 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, a4);
  *(_QWORD *)v9 = -1;
  *(_QWORD *)(v9 + 8) = -1;
  *(_DWORD *)(v9 + 16) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v7, a2) = -1;
  return 1;
}

uint64_t cv3d::cv::gess::internal::ComputeSmoothNormals(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  float32x4_t v15;

  v4 = a1[13];
  v3 = a1[14];
  if ((uint64_t)(a2[1] - *a2) >> 4 != (v3 - v4) >> 2)
    return 0;
  v8 = a1[19];
  v7 = a1[20];
  if ((uint64_t)(a3[1] - *a3) >> 4 != (v7 - v8) >> 2)
    return 0;
  if (v7 != v8)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      cv3d::cv::gess::math::FaceNormal((uint64_t)a1, v10, (float32x4_t *)(*a3 + 16 * v10));
      v10 = v11++;
    }
    while (v10 < (uint64_t)(a1[20] - a1[19]) >> 2);
    v4 = a1[13];
    v3 = a1[14];
  }
  if (v3 != v4)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      cv3d::cv::gess::math::VertexNormalFromFaceNormal((uint64_t)a1, a3, v12, &v15);
      *(float32x4_t *)(*a2 + 16 * v12) = v15;
      v12 = v13++;
    }
    while (v12 < (uint64_t)(a1[14] - a1[13]) >> 2);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::ComputeVertexAreas(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unsigned int HEdge;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[20];
  unsigned int v55;

  v2 = a2[1] - *a2;
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = a1 + 104;
  v6 = v4 - v3;
  if (v4 != v3 && v2 == v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = (uint64_t *)(a1 + 8);
    v48 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      v55 = v11;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v54, v5, &v55);
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v54);
      v53 = HEdge;
      v14 = 0.0;
      while (HEdge != -1)
      {
        v15 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
        if ((v16 & *v15) == 0)
        {
          v52 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, &v53) + 4);
          v55 = *(_DWORD *)(a1 + 176);
          v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, &v55);
          v20 = *(_QWORD *)(v17 + 40);
          if (v10 >= (*(_QWORD *)(v17 + 48) - v20) >> 4)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v17, v18, v19);
          v51 = *(float32x4_t *)(v20 + 16 * v10);
          v55 = *(_DWORD *)(a1 + 176);
          v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, &v55);
          v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, &v53);
          v23 = cv3d::cv::gess::mesh::Topology::h(v5, v22);
          v26 = *(unsigned int *)(v23 + 12);
          v27 = *(_QWORD *)(v21 + 40);
          if (v26 >= (*(_QWORD *)(v21 + 48) - v27) >> 4)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v23, v24, v25);
          v50 = *(float32x4_t *)(v27 + 16 * v26);
          v55 = *(_DWORD *)(a1 + 176);
          v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, &v55);
          v29 = cv3d::cv::gess::mesh::Topology::h(v5, &v52);
          v32 = *(unsigned int *)(v29 + 12);
          v33 = *(_QWORD *)(v28 + 40);
          if (v32 >= (*(_QWORD *)(v28 + 48) - v33) >> 4)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v29, v30, v31);
          v49 = *(float32x4_t *)(v33 + 16 * v32);
          if (v11 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, &v53) + 12))
            cv3d::cv::gess::internal::ComputeVertexAreas();
          v34 = vaddq_f32(v51, v50);
          v35 = vmulq_f32(vaddq_f32(v34, v49), v48);
          v36.i64[0] = 0x3F0000003F000000;
          v36.i64[1] = 0x3F0000003F000000;
          v37 = vmulq_f32(v34, v36);
          v38 = (int32x4_t)vsubq_f32(v35, v51);
          v39 = (int32x4_t)vsubq_f32(vmulq_f32(vaddq_f32(v51, v49), v36), v51);
          v40 = (float32x4_t)vzip2q_s32(vzip1q_s32(v38, (int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL)), v38);
          v41 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), v38);
          v42 = vmlsq_f32(vmulq_f32(v40, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL), v39)), (float32x4_t)vzip2q_s32(vzip1q_s32(v39, (int32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 0xCuLL)), v39), v41);
          v43 = vmulq_f32(v42, v42);
          v43.i32[3] = 0;
          v44 = (int32x4_t)vsubq_f32(v37, v51);
          v45 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL), v44), v40), (float32x4_t)vzip2q_s32(vzip1q_s32(v44, (int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL)), v44), v41);
          v46 = vmulq_f32(v45, v45);
          v46.i32[3] = 0;
          v14 = v14
              + (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43)))
                      + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))))
              * 0.5;
        }
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v54);
        v53 = HEdge;
      }
      *(float *)(*a2 + 4 * v10) = v14;
      v10 = ++v11;
    }
    while (v11 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
  }
  return v2 == v6;
}

uint64_t cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(void **a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  uint64_t *v9;
  char **v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  double v32;
  BOOL v33;
  float v34;
  float32x4_t v35;
  float v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  float *v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  int32x2_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  std::vector<unsigned int>::size_type v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  _DWORD *v88;
  uint64_t v89;
  unsigned int v90;
  std::vector<unsigned int>::pointer begin;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v118;
  uint64_t v119;
  float32x4_t v120;
  float v121;
  int32x2_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *__p[3];
  std::vector<unsigned int> v127;
  void *v128[2];
  __int128 v129;
  char v130;
  unsigned int v131;
  _QWORD *v132;
  __int128 v133;
  unsigned int v134;
  void *v135[5];

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v135[3] = *(void **)MEMORY[0x24BDAC8D0];
  while ((unint64_t)(v10[1] - *v10) <= 0x18F)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v133);
    v11 = v10[1];
    if (*v10 == v11)
    {
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)v133, a1);
      v12 = a2;
      v13 = a3;
    }
    else
    {
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)v133, *((void ***)v11 - 2));
      v12 = (uint64_t *)(v9[1] - 24);
      v13 = (uint64_t *)(v8[1] - 24);
    }
    v124 = *v12;
    v125 = *v13;
    v14 = v133;
    v16 = (_QWORD *)(v133 + 104);
    v15 = *(_QWORD *)(v133 + 104);
    v119 = *(_QWORD *)(v133 + 112);
    v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v14 + 136) - *(_QWORD *)(v14 + 128)) >> 2);
    LOBYTE(v129) = 0;
    std::vector<BOOL>::vector(&v132, v17, (unsigned __int8 *)&v129);
    v118 = v15;
    if (*(_QWORD *)(v14 + 136) == *(_QWORD *)(v14 + 128))
    {
      v18 = 0;
      v19 = 0;
      v21 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      do
      {
        LODWORD(v129) = v23;
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge((uint64_t)v16, (unsigned int *)&v129) + 12) == -1)
          __assert_rtn("BuildMultiResolutionHierarchies", "QuadCommon.cpp", 729, "!cur_mesh.IsDangling(mesh::HEdgeHandle(hi))");
        v24 = v22 >> 6;
        v25 = 1 << v22;
        if ((v132[v22 >> 6] & (1 << v22)) == 0)
        {
          LODWORD(v129) = v23;
          v26 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)&v129) + 12);
          LODWORD(v129) = v23;
          v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)&v129);
          v28 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, v27) + 12);
          v29 = *(float *)(v125 + 4 * v26);
          v30 = 1.0;
          if (v29 > 0.00000001)
          {
            v31 = *(float *)(v125 + 4 * v28);
            v32 = v31;
            v33 = v29 <= v31;
            v34 = v31 / v29;
            v30 = v29 / v31;
            if (v33)
              v30 = v34;
            if (v32 <= 0.00000001)
              v30 = 1.0;
          }
          v35 = vmulq_f32(*(float32x4_t *)(v124 + 16 * v26), *(float32x4_t *)(v124 + 16 * v28));
          v35.i32[3] = 0;
          v36 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)) * v30;
          if (v21 >= v20)
          {
            v37 = ((char *)v21 - (char *)v18) >> 3;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (v20 - v18 > v38)
              v38 = v20 - v18;
            if ((unint64_t)((char *)v20 - (char *)v18) >= 0x7FFFFFFFFFFFFFF8)
              v39 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
            {
              if (v39 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v40 = (char *)operator new(8 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = (float *)&v40[8 * v37];
            *(_DWORD *)v41 = v23;
            v41[1] = v36;
            if (v21 == v18)
            {
              v18 = (float *)&v40[8 * v37];
            }
            else
            {
              v42 = (float *)&v40[8 * v37];
              do
              {
                v43 = *((_QWORD *)v21 - 1);
                v21 -= 2;
                *((_QWORD *)v42 - 1) = v43;
                v42 -= 2;
              }
              while (v21 != v18);
              v21 = v18;
              v18 = v42;
            }
            v20 = (float *)&v40[8 * v39];
            v19 = v41 + 2;
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v21 = v23;
            v21[1] = v36;
            v19 = v21 + 2;
          }
          v132[v24] |= v25;
          LODWORD(v129) = v23;
          v44 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)&v129);
          *(_QWORD *)((char *)v132 + (((unint64_t)*v44 >> 3) & 0x1FFFFFF8)) |= 1 << *v44;
          v21 = v19;
        }
        v22 = ++v23;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v14 + 136) - *(_QWORD *)(v14 + 128)) >> 2) > v23);
    }
    v45 = 126 - 2 * __clz(((char *)v21 - (char *)v18) >> 3);
    if (v21 == v18)
      v46 = 0;
    else
      v46 = v45;
    std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*,false>(v18, v21, v46, 1);
    v131 = -1;
    std::string::basic_string[abi:ne180100]<0>(&v129, "v:c2f");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector2T<unsigned int>>(v14, &v131, &v129);
    if (v130 < 0)
      operator delete((void *)v129);
    if (*(_QWORD *)(v14 + 112) == *(_QWORD *)(v14 + 104))
    {
      v52 = 0;
    }
    else
    {
      v48 = 0;
      v49 = 0;
      do
      {
        LODWORD(v129) = v131;
        v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), (unsigned int *)&v129, v47);
        v51 = *(_QWORD *)(v50 + 40);
        if (v48 >= (*(_QWORD *)(v50 + 48) - v51) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(int32x2_t *)(v51 + 8 * v48) = vdup_n_s32(v49);
        v52 = (uint64_t)(*(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104)) >> 2;
        v48 = ++v49;
      }
      while (v52 > v49);
    }
    LOBYTE(v128[0]) = 0;
    std::vector<BOOL>::vector(&v129, v52, (unsigned __int8 *)v128);
    v53 = (char *)v19 - (char *)v18;
    if (v19 != v18)
    {
      v54 = 0;
      v55 = 0;
      v56 = v53 >> 3;
      v123 = v53 >> 3;
      do
      {
        *(float *)__p = v18[2 * v54];
        LODWORD(v128[0]) = __p[0];
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge((uint64_t)v16, (unsigned int *)v128) + 12) != -1)
        {
          v57 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)__p) + 12);
          v58 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, (unsigned int *)__p);
          v59 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v16, v58);
          if ((*(_QWORD *)(v129 + 8 * (v57 >> 6)) & (1 << v57)) == 0)
          {
            v61 = *(unsigned int *)(v59 + 12);
            if ((*(_QWORD *)(v129 + 8 * (v61 >> 6)) & (1 << v61)) == 0)
            {
              *(float *)v60.i32 = *(float *)(v125 + 4 * v57) + *(float *)(v125 + 4 * v61);
              if (*(float *)v60.i32 <= 1.0e-16)
              {
                LODWORD(v135[0]) = *(_DWORD *)(v14 + 176);
                v67 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v135);
                v68 = *(_QWORD *)(v67 + 40);
                if (v57 >= (*(_QWORD *)(v67 + 48) - v68) >> 4
                  || (LODWORD(v135[0]) = *(_DWORD *)(v14 + 176),
                      v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v135), v70 = *(_QWORD *)(v69 + 40), v61 >= (*(_QWORD *)(v69 + 48) - v70) >> 4))
                {
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                }
                v71.i64[0] = 0x3F0000003F000000;
                v71.i64[1] = 0x3F0000003F000000;
                v66 = vmulq_f32(vaddq_f32(*(float32x4_t *)(v70 + 16 * v61), *(float32x4_t *)(v68 + 16 * v57)), v71);
                v56 = v123;
              }
              else
              {
                v122 = v60;
                LODWORD(v135[0]) = *(_DWORD *)(v14 + 176);
                v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v135);
                v63 = *(_QWORD *)(v62 + 40);
                if (v57 >= (*(_QWORD *)(v62 + 48) - v63) >> 4)
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                v121 = *(float *)(v125 + 4 * v57);
                v120 = *(float32x4_t *)(v63 + 16 * v57);
                LODWORD(v135[0]) = *(_DWORD *)(v14 + 176);
                v64 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v14 + 8), (unsigned int *)v135);
                v65 = *(_QWORD *)(v64 + 40);
                if (v61 >= (*(_QWORD *)(v64 + 48) - v65) >> 4)
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                v66 = vdivq_f32(vaddq_f32(vmulq_n_f32(v120, v121), vmulq_n_f32(*(float32x4_t *)(v65 + 16 * v61), *(float *)(v125 + 4 * v61))), (float32x4_t)vdupq_lane_s32(v122, 0));
              }
              *(float32x4_t *)v128 = v66;
              if (cv3d::cv::gess::internal::EdgeCollapsing(v14, (unsigned int *)__p, v128))
              {
                v72 = 0;
                v73 = v129;
                *(_QWORD *)(v129 + 8 * (v57 >> 6)) |= 1 << v57;
                *(_QWORD *)(v73 + 8 * (v61 >> 6)) |= 1 << v61;
                v135[0] = (void *)__PAIR64__(v61, v57);
                do
                {
                  LODWORD(v127.__begin_) = *(_DWORD *)((char *)v135 + v72);
                  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v16, (unsigned int *)&v127) != -1)
                  {
                    LODWORD(v127.__begin_) = v131;
                    v75 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), (unsigned int *)&v127, v74);
                    v76 = *(unsigned int *)((char *)v135 + v72);
                    v77 = *(_QWORD *)(v75 + 40);
                    if (v76 >= (*(_QWORD *)(v75 + 48) - v77) >> 3)
                      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                    v78 = (_DWORD *)(v77 + 8 * v76);
                    *v78 = v57;
                    v78[1] = v61;
                  }
                  v72 += 4;
                }
                while (v72 != 8);
                v56 = v123;
              }
            }
          }
        }
        v54 = ++v55;
      }
      while (v56 > v55);
    }
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement((cv3d::cv::gess::mesh::PolyMesh *)v14);
    v79 = *(_QWORD *)(v133 + 112) - *(_QWORD *)(v133 + 104);
    if ((unint64_t)v79 < 8 || (v80 = ((unint64_t)(v119 - v118) >> 2), v80 == v79 >> 2))
    {
      v81 = 0;
      v9 = a5;
      v8 = a6;
      v10 = a4;
    }
    else
    {
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v128, (uint64_t)(*(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104)) >> 2);
      std::vector<float>::vector(v135, (uint64_t)(*(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104)) >> 2);
      std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::vector(__p, (uint64_t)(*(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104)) >> 2);
      if (*(_QWORD *)(v14 + 112) != *(_QWORD *)(v14 + 104))
      {
        v83 = 0;
        v84 = 0;
        do
        {
          v134 = v131;
          v85 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), &v134, v82);
          v86 = *(_QWORD *)(v85 + 40);
          if (v83 >= (*(_QWORD *)(v85 + 48) - v86) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v87 = (unsigned int *)(v86 + 8 * v83);
          v88 = (char *)__p[0] + 8 * v83;
          *v88 = *v87;
          v88[1] = v87[1];
          v89 = *v87;
          v90 = v87[1];
          begin = v127.__begin_;
          v127.__begin_[v89] = v84;
          if ((_DWORD)v89 == v90)
          {
            *v88 = *v87;
            v88[1] = v87[1];
            *((_OWORD *)v128[0] + v83) = *(_OWORD *)(v124 + 16 * *v87);
            v92 = *(float *)(v125 + 4 * *v87);
          }
          else
          {
            begin[v87[1]] = v84;
            *v88 = *v87;
            v88[1] = v87[1];
            v93 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v124 + 16 * *v87), *(float *)(v125 + 4 * *v87)), vmulq_n_f32(*(float32x4_t *)(v124 + 16 * v87[1]), *(float *)(v125 + 4 * v87[1])));
            v94 = vmulq_f32(v93, v93);
            v94.i32[3] = 0;
            v95 = vpaddq_f32(v94, v94);
            v96 = vpaddq_f32(v95, v95);
            v97 = (float32x4_t)xmmword_23C603EC0;
            if (v96.f32[0] > 0.0)
              v97 = vdivq_f32(v93, vsqrtq_f32(v96));
            *((float32x4_t *)v128[0] + v83) = v97;
            v92 = *(float *)(v125 + 4 * *v87) + *(float *)(v125 + 4 * v87[1]);
          }
          *((float *)v135[0] + v83) = v92;
          v83 = ++v84;
        }
        while (v84 < (unint64_t)((uint64_t)(*(_QWORD *)(v14 + 112) - *(_QWORD *)(v14 + 104)) >> 2));
      }
      v9 = a5;
      v8 = a6;
      v10 = a4;
      if (v131 != -1)
        cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(v14 + 8), &v131);
      v131 = -1;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](a4, &v133);
      v98 = a6[1];
      if (v98 >= a6[2])
      {
        v99 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a6, (uint64_t)v135);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a6, (uint64_t)v135);
        v99 = v98 + 24;
      }
      a6[1] = v99;
      v100 = a5[1];
      if (v100 >= a5[2])
      {
        v101 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>(a5, (__int128 **)v128);
      }
      else
      {
        std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>((uint64_t)a5, (__int128 **)v128);
        v101 = v100 + 24;
      }
      a5[1] = v101;
      v102 = a7[1];
      if (v102 >= a7[2])
      {
        v103 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(a7, (uint64_t)&v127);
      }
      else
      {
        std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)a7, (uint64_t)&v127);
        v103 = v102 + 24;
      }
      a7[1] = v103;
      v104 = a8[1];
      if (v104 >= a8[2])
      {
        v105 = std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>(a8, (_DWORD **)__p);
      }
      else
      {
        std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>((uint64_t)a8, (_DWORD **)__p);
        v105 = v104 + 24;
      }
      a8[1] = v105;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v127.__begin_)
      {
        v127.__end_ = v127.__begin_;
        operator delete(v127.__begin_);
      }
      if (v135[0])
      {
        v135[1] = v135[0];
        operator delete(v135[0]);
      }
      if (v128[0])
      {
        v128[1] = v128[0];
        operator delete(v128[0]);
      }
      v81 = 1;
    }
    if ((_QWORD)v129)
      operator delete((void *)v129);
    if (v18)
      operator delete(v18);
    if (v132)
      operator delete(v132);
    v106 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
    if (!*((_QWORD *)&v133 + 1))
      goto LABEL_114;
    v107 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
      if ((v81 & 1) == 0)
        return 1;
    }
    else
    {
LABEL_114:
      if ((v81 & 1) == 0)
        return 1;
    }
  }
  return 1;
}

void sub_23C564BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  void *v40;
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;

  if (__p)
    operator delete(__p);
  v43 = *(void **)(v41 - 152);
  if (v43)
  {
    *(_QWORD *)(v41 - 144) = v43;
    operator delete(v43);
  }
  if (a39)
    operator delete(a39);
  v44 = *(void **)(v41 - 232);
  if (v44)
  {
    operator delete(v44);
    if (!v40)
    {
LABEL_12:
      v45 = *(void **)(v41 - 200);
      if (v45)
        operator delete(v45);
      v46 = *(std::__shared_weak_count **)(v41 - 168);
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(p_shared_owners);
        while (__stlxr(v48 - 1, p_shared_owners));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_12;
  }
  operator delete(v40);
  goto LABEL_12;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector2T<unsigned int>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<unsigned int>>((char **)(a1 + 8), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingElement(cv3d::cv::gess::mesh::PolyMesh *this)
{
  return cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(this)
      && cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(this)
      && cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(this);
}

uint64_t cv3d::cv::gess::internal::VisualizeOrientation(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float32x2_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 __p;
  _BYTE v46[7];
  char v47;
  _QWORD *v48;
  _QWORD *v49[4];
  void *v50[3];
  void *v51;
  void *v52;
  int v53;
  void (**v54)(cv3d::cv::gess::mesh::TriMesh *__hidden);
  uint64_t *v55[12];
  uint64_t v56;
  uint64_t v57;

  cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)&v54, (void **)a2);
  v54 = &off_250D49940;
  v53 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  v51 = 0;
  v52 = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(v55, (uint64_t)&v51, (unsigned __int8 *)&__p);
  v53 = v8;
  if (v47 < 0)
    operator delete((void *)__p);
  if (v8 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)&v54, &v53, &__p);
    if (v47 < 0)
      operator delete((void *)__p);
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v51, 4uLL);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v50, (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  v9 = v57;
  if (v57 == v56)
  {
    v27 = (v57 - v56) >> 2;
    v26 = v57;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = (float32x2_t)vpaddq_f32((float32x4_t)xmmword_23C60C3E0, (float32x4_t)xmmword_23C60C3E0).u64[0];
    v12.f32[0] = sqrtf(vaddv_f32(v12));
    v13 = (int32x4_t)vdivq_f32((float32x4_t)xmmword_23C60C3E0, (float32x4_t)vdupq_lane_s32((int32x2_t)v12, 0));
    v14 = (float32x4_t)vzip2q_s32(vzip1q_s32(v13, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), v13);
    v15 = vnegq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), v13));
    do
    {
      v16 = 0;
      v17 = *(float32x4_t *)(*a3 + 16 * v10);
      v18 = *(int32x4_t *)(*a4 + 16 * v10);
      v19 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v17, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL)), (int32x4_t)v17), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL), v18)), (float32x4_t)vzip2q_s32(vzip1q_s32(v18, (int32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL)), v18), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), (int32x4_t)v17));
      *(float32x4_t *)v51 = v17;
      v20 = (float32x4_t *)v51;
      *((float32x4_t *)v51 + 1) = v19;
      v20[2] = vnegq_f32(v17);
      v20[3] = vnegq_f32(v19);
      v21 = *(int32x4_t *)(*a4 + 16 * v10);
      v23 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL), v21);
      v22 = vmlaq_f32(vmulq_f32(v23, v14), (float32x4_t)vzip2q_s32(vzip1q_s32(v21, (int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL)), v21), v15);
      v23.i32[0] = -2.0;
      do
      {
        v24 = vmulq_f32(v22, v20[v16]);
        v24.i32[3] = 0;
        v25 = vpaddq_f32(v24, v24);
        v25.f32[0] = vaddv_f32(*(float32x2_t *)v25.f32);
        v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v25, v23), 0), (int8x16_t)vmulq_n_f32(v22, v25.f32[0]), (int8x16_t)v17);
        if (v25.f32[0] > v23.f32[0])
          v23.f32[0] = v25.f32[0];
        ++v16;
      }
      while (v16 != 4);
      *((float32x4_t *)v50[0] + v10) = v17;
      v9 = v56;
      v26 = v57;
      v27 = (v57 - v56) >> 2;
      v10 = ++v11;
    }
    while (v27 > v11);
  }
  if (v27)
  {
    v28 = 0;
    v29 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v30.i64[0] = 0x80000000800000;
    v30.i64[1] = 0x80000000800000;
    do
    {
      v31 = *((float32x4_t *)v50[0] + v28);
      v29 = vminq_f32(v29, v31);
      v30 = vmaxq_f32(v30, v31);
      ++v28;
    }
    while (v27 > v28);
  }
  else
  {
    v29 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v30.i64[0] = 0x80000000800000;
    v30.i64[1] = 0x80000000800000;
  }
  if (v26 != v9)
  {
    v32 = 0;
    v41 = vsubq_f32(v30, v29);
    v42 = v29;
    v33 = 1;
    do
    {
      v43 = *((float32x4_t *)v50[0] + v32);
      LODWORD(__p) = v53;
      v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v55, (unsigned int *)&__p);
      v35 = *(_QWORD *)(v34 + 40);
      if (v32 >= (*(_QWORD *)(v34 + 48) - v35) >> 4)
        goto LABEL_31;
      v44 = vdivq_f32(vsubq_f32(v43, v42), v41);
      *(_DWORD *)(v35 + 16 * v32) = v44.i32[0];
      LODWORD(__p) = v53;
      v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v55, (unsigned int *)&__p);
      v37 = *(_QWORD *)(v36 + 40);
      if (v32 >= (*(_QWORD *)(v36 + 48) - v37) >> 4
        || (*(_DWORD *)(v37 + 16 * v32 + 4) = v44.i32[1],
            LODWORD(__p) = v53,
            v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v55, (unsigned int *)&__p), v39 = *(_QWORD *)(v38 + 40), v32 >= (*(_QWORD *)(v38 + 48) - v39) >> 4))
      {
LABEL_31:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v39 + 16 * v32 + 8) = v44.i32[2];
      v32 = v33++;
    }
    while (v32 < (v57 - v56) >> 2);
  }
  LOBYTE(__p) = 0;
  DWORD1(__p) = 1;
  WORD4(__p) = 0;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v46);
  BYTE8(__p) = 1;
  cv3d::cv::gess::io::SaveObjFile(a1, (uint64_t)&v54, (uint64_t)&__p);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v49, v49[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v46, v48);
  if (v50[0])
  {
    v50[1] = v50[0];
    operator delete(v50[0]);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v54);
  return 1;
}

void sub_23C565200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a20 < 0)
    operator delete(__p);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a35);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::io::SaveObjOption::~SaveObjOption(cv3d::cv::gess::io::SaveObjOption *this)
{
  char *v2;

  v2 = (char *)this + 16;
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v2, *((_QWORD **)this + 3));
}

uint64_t cv3d::cv::gess::internal::VisualizePosition(uint64_t a1, void **a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 __p;
  _BYTE v24[7];
  char v25;
  _QWORD *v26;
  _QWORD *v27[4];
  int v28;
  void (**v29)(cv3d::cv::gess::mesh::TriMesh *__hidden);
  uint64_t *v30[12];
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];

  cv3d::cv::gess::mesh::PolyMesh::PolyMesh((cv3d::cv::gess::mesh::PolyMesh *)&v29, a2);
  v29 = &off_250D49940;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  v33[0] = 0;
  v33[1] = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(v30, (uint64_t)v33, (unsigned __int8 *)&__p);
  v28 = v5;
  if (v25 < 0)
    operator delete((void *)__p);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)&v29, &v28, &__p);
    if (v25 < 0)
      operator delete((void *)__p);
  }
  if (v32 == v31)
  {
    v7 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v8.i64[0] = 0x80000000800000;
    v8.i64[1] = 0x80000000800000;
  }
  else
  {
    v6 = 0;
    v7 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v8.i64[0] = 0x80000000800000;
    v8.i64[1] = 0x80000000800000;
    do
    {
      v9 = *(float32x4_t *)(*a3 + 16 * v6);
      v7 = vminq_f32(v7, v9);
      v8 = vmaxq_f32(v8, v9);
      ++v6;
    }
    while ((v32 - v31) >> 2 > (unint64_t)v6);
  }
  if (v32 != v31)
  {
    v10 = 0;
    v19 = vsubq_f32(v8, v7);
    v20 = v7;
    v11 = 1;
    do
    {
      v21 = *(float32x4_t *)(*a3 + 16 * v10);
      LODWORD(__p) = v28;
      v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v30, (unsigned int *)&__p);
      v13 = *(_QWORD *)(v12 + 40);
      if (v10 >= (*(_QWORD *)(v12 + 48) - v13) >> 4)
        goto LABEL_18;
      v22 = vdivq_f32(vsubq_f32(v21, v20), v19);
      *(_DWORD *)(v13 + 16 * v10) = v22.i32[0];
      LODWORD(__p) = v28;
      v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v30, (unsigned int *)&__p);
      v15 = *(_QWORD *)(v14 + 40);
      if (v10 >= (*(_QWORD *)(v14 + 48) - v15) >> 4
        || (*(_DWORD *)(v15 + 16 * v10 + 4) = v22.i32[1],
            LODWORD(__p) = v28,
            v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v30, (unsigned int *)&__p), v17 = *(_QWORD *)(v16 + 40), v10 >= (*(_QWORD *)(v16 + 48) - v17) >> 4))
      {
LABEL_18:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v17 + 16 * v10 + 8) = v22.i32[2];
      v10 = v11++;
    }
    while (v10 < (v32 - v31) >> 2);
  }
  LOBYTE(__p) = 0;
  DWORD1(__p) = 1;
  WORD4(__p) = 0;
  cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption((cv3d::cv::gess::io::SaveMtlOption *)v24);
  BYTE8(__p) = 1;
  cv3d::cv::gess::io::SaveObjFile(a1, (uint64_t)&v29, (uint64_t)&__p);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy((uint64_t)v27, v27[1]);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy((uint64_t)v24, v26);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&v29);
  return 0;
}

void sub_23C565534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  cv3d::cv::gess::mesh::TriMesh::~TriMesh((cv3d::cv::gess::mesh::TriMesh *)&a29);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::ReorderMesh(uint64_t *a1, void **a2, void **a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  void *v25;
  void *v26;
  void *v27;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  void *__p[2];
  void *v34;
  void *v35[2];
  void *v36;
  void *v37[2];
  uint64_t v38;
  _OWORD v39[2];
  int v40;
  _QWORD v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  std::vector<unsigned int> v46;
  std::vector<unsigned int> v47;
  _DWORD *v48[3];

  memset(&v46, 0, sizeof(v46));
  memset(&v47, 0, sizeof(v47));
  v6 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  v8 = *a1;
  v7 = a1[1];
  v29 = v6 >> 4;
  v30 = cv3d::cv::gess::internal::BuildDirectedEdge(a1, v6 >> 4, &v47, &v46);
  if ((v30 & 1) != 0)
  {
    v9 = v7 - v8;
    v10 = (v9 >> 4);
    v43 = 0u;
    v44 = 0u;
    v45 = 1065353216;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>((uint64_t)&v43, v10);
    v11 = v9 >> 4;
    for (LODWORD(v41[0]) = 0; LODWORD(v41[0]) < v11; ++LODWORD(v41[0]))
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v43, (unsigned int *)v41, v41);
    v42 = 0u;
    memset(v41, 0, sizeof(v41));
    memset(v39, 0, sizeof(v39));
    v40 = 1065353216;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>((uint64_t)v39, (v6 >> 4));
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::vector(v37, v10);
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v35, (v6 >> 4));
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(__p, (v6 >> 4));
    if (*((_QWORD *)&v44 + 1))
    {
      v12 = 0;
      v13 = 0;
      v14 = *((_QWORD *)&v42 + 1);
      do
      {
        if (v14
          || (v15 = (uint64_t *)v44,
              std::deque<unsigned int>::push_back(v41, (_DWORD *)(v44 + 16)),
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(&v43, v15), (v14 = *((_QWORD *)&v42 + 1)) != 0))
        {
          do
          {
            v16 = *(unsigned int *)(*(_QWORD *)(v41[1] + (((unint64_t)v42 >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * (v42 & 0x3FF));
            *(_QWORD *)&v42 = v42 + 1;
            *((_QWORD *)&v42 + 1) = v14 - 1;
            if ((unint64_t)v42 >= 0x800)
            {
              operator delete(*(void **)v41[1]);
              v41[1] += 8;
              *(_QWORD *)&v42 = v42 - 1024;
            }
            v17 = 0;
            v18 = 16 * v13;
            v31 = v13 + 1;
            v19 = (4 * v16);
            v20 = 16 * v16;
            v21 = v12;
            do
            {
              v32 = 0;
              v32 = *(_DWORD *)(*a1 + v20 + v17 * 4);
              v22 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(v39, &v32);
              if (v22)
              {
                v12 = v21;
                LODWORD(v21) = *((_DWORD *)v22 + 5);
              }
              else
              {
                v48[0] = &v32;
                v12 = (v21 + 1);
                *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v39, &v32, (uint64_t)&std::piecewise_construct, v48)+ 5) = v21;
                v23 = v32;
                *((_OWORD *)v35[0] + v21) = *((_OWORD *)*a2 + v32);
                *((_OWORD *)__p[0] + v21) = *((_OWORD *)*a3 + v23);
              }
              *(_DWORD *)((char *)v37[0] + v18 + v17 * 4) = v21;
              v24 = v46.__begin_[v19 + v17];
              if (v24 != -1)
              {
                LODWORD(v48[0]) = v24 >> 2;
                if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(&v43, (unsigned int *)v48))
                {
                  std::deque<unsigned int>::push_back(v41, v48);
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(&v43, (unsigned int *)v48);
                }
              }
              ++v17;
              v21 = v12;
            }
            while (v17 != 4);
            v14 = *((_QWORD *)&v42 + 1);
            v13 = v31;
          }
          while (*((_QWORD *)&v42 + 1));
        }
        v14 = 0;
      }
      while (*((_QWORD *)&v44 + 1));
    }
    else
    {
      LODWORD(v12) = 0;
    }
    v25 = (void *)*a1;
    if (*a1)
    {
      a1[1] = (uint64_t)v25;
      operator delete(v25);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)v37;
    a1[2] = v38;
    v37[1] = 0;
    v38 = 0;
    v37[0] = 0;
    v26 = *a2;
    if (*a2)
    {
      a2[1] = v26;
      operator delete(v26);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v35;
    a2[2] = v36;
    v35[1] = 0;
    v36 = 0;
    v35[0] = 0;
    v27 = *a3;
    if (*a3)
    {
      a3[1] = v27;
      operator delete(v27);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v34;
    __p[1] = 0;
    v34 = 0;
    __p[0] = 0;
    if ((_DWORD)v12 != (_DWORD)v29)
    {
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a2, v12);
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a3, v12);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    std::deque<int>::~deque[abi:ne180100](v41);
  }
  if (v46.__begin_)
  {
    v46.__end_ = v46.__begin_;
    operator delete(v46.__begin_);
  }
  if (v47.__begin_)
  {
    v47.__end_ = v47.__begin_;
    operator delete(v47.__begin_);
  }
  return v30;
}

void sub_23C565978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  uint64_t v32;
  void *v34;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a21)
    operator delete(a21);
  std::deque<int>::~deque[abi:ne180100](&a31);
  v34 = (void *)v31[12];
  if (v34)
  {
    v31[13] = v34;
    operator delete(v34);
  }
  v35 = (void *)v31[15];
  if (v35)
  {
    v31[16] = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::BuildDirectedEdge(uint64_t *a1, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int> *this, std::vector<unsigned int> *a4)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t i;
  char *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  std::vector<unsigned int>::pointer v32;
  _DWORD *v33;
  std::vector<unsigned int>::pointer v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  void *__p[3];

  v6 = __sz;
  this->__end_ = this->__begin_;
  std::vector<std::pair<unsigned int,unsigned int>>::vector(__p, (a1[1] - *a1) >> 2);
  v8 = *a1;
  v9 = a1[1] - *a1;
  if (v9)
  {
    v10 = 0;
    v11 = 0;
    while (2)
    {
      v12 = 0;
      v13 = (char *)__p[0];
      begin = this->__begin_;
      v15 = v8 + 16 * v10;
      do
      {
        v16 = *(unsigned int *)(v15 + 4 * v12);
        v17 = v12 + 1;
        v18 = *(_DWORD *)(v15 + 4 * ((v12 + 1) & 3));
        if (v16 >= v6 || v18 >= v6)
        {
          v43 = 0;
          goto LABEL_32;
        }
        if ((_DWORD)v16 != v18)
        {
          v20 = v12 + 4 * v11;
          v21 = (unsigned int *)&v13[8 * v20];
          *v21 = v18;
          v21[1] = -1;
          v22 = &begin[v16];
          for (i = *v22; (_DWORD)i != -1; i = v25)
          {
            v24 = &v13[8 * i];
            v25 = *((_DWORD *)v24 + 1);
            v22 = (unsigned int *)(v24 + 4);
          }
          *v22 = v20;
        }
        v12 = v17;
      }
      while (v17 != 4);
      v10 = ++v11;
      if (v9 >> 4 > (unint64_t)v11)
        continue;
      break;
    }
  }
  a4->__end_ = a4->__begin_;
  v26 = *a1;
  v27 = a1[1];
  v28 = v27 - *a1;
  if (v27 != *a1)
  {
    v29 = 0;
    v30 = v28 >> 4;
    do
    {
      v31 = 0;
      v32 = this->__begin_;
      v33 = __p[0];
      v34 = a4->__begin_;
      v35 = v26 + 16 * v29;
      do
      {
        v36 = *(_DWORD *)(v35 + 4 * v31);
        v37 = v31 + 1;
        v38 = *(unsigned int *)(v35 + 4 * ((v31 + 1) & 3));
        if (v36 != (_DWORD)v38)
        {
          v39 = v32[v38];
          if ((_DWORD)v39 != -1)
          {
            v40 = v31 + (4 * v29);
            v41 = 0xFFFFFFFFLL;
            while (1)
            {
              if (v33[2 * v39] == v36)
              {
                v42 = v41 == 0xFFFFFFFF;
                v41 = v39;
                if (!v42)
                  break;
              }
              v39 = v33[2 * v39 + 1];
              if ((_DWORD)v39 == -1)
              {
                if (v41 != 0xFFFFFFFF && v40 < v41)
                {
                  v34[v40] = v41;
                  v34[v41] = v40;
                }
                break;
              }
            }
          }
        }
        v31 = v37;
      }
      while (v37 != 4);
      ++v29;
    }
    while (v30 > v29);
  }
  v43 = 1;
LABEL_32:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v43;
}

void sub_23C565C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

uint64_t cv3d::cv::gess::internal::ReorderIrregularFaceIndices(uint64_t *a1, std::vector<unsigned int>::pointer **a2)
{
  std::vector<unsigned int>::pointer *v2;
  std::vector<unsigned int>::pointer *v3;
  __int128 v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  std::vector<unsigned int>::size_type v12;
  float v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  uint64_t v28;
  std::vector<unsigned int>::pointer v29;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v31;
  unsigned int *v32;
  std::vector<unsigned int> v34;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = xmmword_23C603EC0;
    do
    {
      v6 = *v2;
      v7 = (char *)v2[1] - (char *)*v2;
      v8 = v7 >> 2;
      if ((v7 >> 2))
      {
        v9 = 0;
        v10 = 0;
        v11 = *a1;
        v12 = (v7 >> 2);
        v13 = 3.4028e38;
        do
        {
          if (v12 - 1 == v9)
            v14 = 0;
          else
            v14 = v9 + 1;
          v15 = *(float32x4_t *)(v11 + 16 * v6[v9]);
          v16 = vsubq_f32(*(float32x4_t *)(v11 + 16 * v6[((int)v8 - 1 + (int)v9) % v8]), v15);
          v17 = vmulq_f32(v16, v16);
          v17.i32[3] = 0;
          v18 = vpaddq_f32(v17, v17);
          v19 = vpaddq_f32(v18, v18);
          v20 = (float32x4_t)v5;
          if (v19.f32[0] > 0.0)
            v20 = vdivq_f32(v16, vsqrtq_f32(v19));
          v21 = vsubq_f32(*(float32x4_t *)(v11 + 16 * v6[v14]), v15);
          v22 = vmulq_f32(v21, v21);
          v22.i32[3] = 0;
          v23 = vpaddq_f32(v22, v22);
          v24 = vpaddq_f32(v23, v23);
          v25 = (float32x4_t)v5;
          if (v24.f32[0] > 0.0)
            v25 = vdivq_f32(v21, vsqrtq_f32(v24));
          v26 = vmulq_f32(v20, v25);
          v26.i32[3] = 0;
          v27 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26));
          if (v13 > v27)
            v10 = v9;
          v28 = v9 + 1;
          if (v13 > v27)
            v13 = v27;
          ++v9;
        }
        while (v12 != v28);
        std::vector<unsigned int>::vector(&v34, v12);
        v5 = xmmword_23C603EC0;
        v29 = *v2;
        begin = v34.__begin_;
        do
        {
          *begin++ = v29[v10 % v8];
          ++v10;
          --v12;
        }
        while (v12);
      }
      else
      {
        std::vector<unsigned int>::vector(&v34, (v7 >> 2));
        v5 = xmmword_23C603EC0;
      }
      v31 = *v2;
      *v2 = v34.__begin_;
      v2[1] = v34.__end_;
      v32 = v2[2];
      v2[2] = v34.__end_cap_.__value_;
      v34.__begin_ = v31;
      v34.__end_cap_.__value_ = v32;
      if (v31)
      {
        v34.__end_ = v31;
        operator delete(v31);
        v5 = xmmword_23C603EC0;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::CollectIrregularFaces(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t **v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t *v34;
  _BOOL8 v35;
  uint64_t *v36;
  uint64_t *v37;
  BOOL v38;
  void *__p;
  char *v42;
  char *v43;
  uint64_t *v44;
  _QWORD *v45[2];

  a2[1] = *a2;
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a3);
  v45[0] = 0;
  v45[1] = 0;
  v44 = (uint64_t *)v45;
  v5 = *a1;
  if (a1[1] == *a1)
  {
    v7 = 0;
LABEL_55:
    v35 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) == v7;
    goto LABEL_56;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = (_DWORD *)(v5 + 16 * v6);
    if (v9[2] == v9[3])
    {
      __p = v9 + 2;
      v10 = std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v44, v9 + 2, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
      *((_DWORD *)v10 + 10) = v8;
      v11 = (_DWORD *)(*a1 + 16 * v6);
      v12 = v11[1];
      __p = v11;
      ++v7;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10 + 6, v11, (uint64_t)&std::piecewise_construct, (unsigned int **)&__p)+ 8) = v12;
    }
    else
    {
      v13 = (_DWORD *)a2[1];
      if ((unint64_t)v13 >= a2[2])
      {
        v14 = std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__push_back_slow_path<cv3d::cv::gess::math::Vector4T<unsigned int> const&>(a2, v9);
      }
      else
      {
        *v13 = *v9;
        v13[1] = v9[1];
        v13[2] = v9[2];
        v13[3] = v9[3];
        v14 = (uint64_t)(v13 + 4);
      }
      a2[1] = v14;
    }
    v5 = *a1;
    v6 = ++v8;
  }
  while (v8 < (unint64_t)((a1[1] - *a1) >> 4));
  v15 = v44;
  if (v44 == (uint64_t *)v45)
    goto LABEL_55;
  while (1)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    v18 = *(_DWORD *)(v15[6] + 28);
    __p = 0;
    v42 = 0;
    v43 = 0;
    v19 = v15 + 7;
    v20 = v18;
    while (1)
    {
      if (v16 >= v43)
      {
        v21 = (char *)__p;
        v22 = (v16 - (_BYTE *)__p) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v24 = v43 - (_BYTE *)__p;
        if ((v43 - (_BYTE *)__p) >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v43, v25);
          v21 = (char *)__p;
          v16 = v42;
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = v20;
        v28 = v27 + 4;
        while (v16 != v21)
        {
          v29 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v27 - 1) = v29;
          v27 -= 4;
        }
        __p = v27;
        v42 = v28;
        v43 = &v26[4 * v25];
        if (v21)
          operator delete(v21);
        v16 = v28;
      }
      else
      {
        *(_DWORD *)v16 = v20;
        v16 += 4;
      }
      v42 = v16;
      v30 = *v19;
      if (!*v19)
        break;
      v31 = v15 + 7;
      do
      {
        v32 = *(_DWORD *)(v30 + 28);
        v33 = v32 >= v20;
        if (v32 >= v20)
          v34 = (uint64_t *)v30;
        else
          v34 = (uint64_t *)(v30 + 8);
        if (v33)
          v31 = (uint64_t *)v30;
        v30 = *v34;
      }
      while (*v34);
      if (v31 == v19 || v20 < *((_DWORD *)v31 + 7))
        break;
      v20 = *((_DWORD *)v31 + 8);
      if (v20 != v18)
      {
        v17 = (v17 + 1);
        if (v15[8] != v17)
          continue;
      }
      std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](a3, (uint64_t)&__p);
      v35 = 1;
      goto LABEL_44;
    }
    v35 = 0;
LABEL_44:
    if (__p)
    {
      v42 = (char *)__p;
      operator delete(__p);
    }
    if (!v35)
      break;
    v36 = (uint64_t *)v15[1];
    if (v36)
    {
      do
      {
        v37 = v36;
        v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        v37 = (uint64_t *)v15[2];
        v38 = *v37 == (_QWORD)v15;
        v15 = v37;
      }
      while (!v38);
    }
    v15 = v37;
    if (v37 == (uint64_t *)v45)
      goto LABEL_55;
  }
LABEL_56:
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy((uint64_t)&v44, v45[0]);
  return v35;
}

void sub_23C566154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::internal::SaveQuadMesh(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  unsigned int v7;
  std::locale::id *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  unint64_t v11;
  unint64_t v12;
  std::locale::id *v13;
  uint64_t i;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  unsigned int v18;
  std::locale::id *v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  const std::locale::facet *v23;
  int v25;
  std::locale v26;
  uint64_t v27;
  _BYTE v28[408];
  _QWORD v29[21];

  v29[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v27);
  v25 = *(_DWORD *)&v28[*(_QWORD *)(v27 - 24) + 24] & 5;
  if (!v25)
  {
    if (a4[1] != *a4)
    {
      v7 = 1;
      v8 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"v ", 2);
        v9 = (_QWORD *)cv3d::cv::gess::math::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
        v10 = std::locale::use_facet(&v26, v8);
        ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        v11 = v7++;
      }
      while (v11 < (uint64_t)(a4[1] - *a4) >> 4);
    }
    if (a2[1] != *a2)
    {
      LODWORD(v12) = 0;
      v13 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"f ", 2);
        for (i = 0; i != 16; i += 4)
        {
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
        }
        std::ios_base::getloc((const std::ios_base *)&v28[*(_QWORD *)(v27 - 24) - 8]);
        v16 = std::locale::use_facet(&v26, v13);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        v12 = (v12 + 1);
      }
      while (v12 < (uint64_t)(a2[1] - *a2) >> 4);
    }
    if (a3[1] != *a3)
    {
      v17 = 0;
      v18 = 0;
      v19 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"f ", 2);
        if (*(_QWORD *)(*a3 + 24 * v17 + 8) != *(_QWORD *)(*a3 + 24 * v17))
        {
          v20 = 1;
          do
          {
            v21 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
            v22 = v20++;
          }
          while (v22 < (uint64_t)(*(_QWORD *)(*a3 + 24 * v17 + 8) - *(_QWORD *)(*a3 + 24 * v17)) >> 2);
        }
        std::ios_base::getloc((const std::ios_base *)&v28[*(_QWORD *)(v27 - 24) - 8]);
        v23 = std::locale::use_facet(&v26, v19);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v26);
        std::ostream::put();
        std::ostream::flush();
        v17 = ++v18;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v18);
    }
  }
  v27 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v28[*(_QWORD *)(v27 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](v28);
  std::ostream::~ostream();
  MEMORY[0x242621128](v29);
  return v25 == 0;
}

void sub_23C566524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, char a12)
{
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  float v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  uint64_t v25;
  float v26;
  float v27;
  BOOL v28;
  float *v29;
  float v30;
  float *v31;
  float v32;
  float *v33;
  float *v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  unint64_t v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  int v78;
  _QWORD *v79;
  float v81;
  float v82;
  float v83;
  float *v84;
  uint64_t v85;

  v7 = result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (float *)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(a2 - 1) > *(float *)(v8 + 4))
        {
          v40 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v40;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)v8, (float *)(v8 + 8), a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), (uint64_t)(a2 - 2));
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), v8 + 24);
        if (*(a2 - 1) > *(float *)(v8 + 28))
        {
          v41 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v41;
          if (*(float *)(v8 + 28) > *(float *)(v8 + 20))
          {
            v43 = *(_QWORD *)(v8 + 16);
            v42 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 16) = v42;
            *(_QWORD *)(v8 + 24) = v43;
            if (*(float *)(v8 + 12) < *((float *)&v42 + 1))
            {
              v44 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = v42;
              *(_QWORD *)(v8 + 16) = v44;
              if (*(float *)(v8 + 4) < *((float *)&v42 + 1))
              {
                v45 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v42;
                *(_QWORD *)(v8 + 8) = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v46 = (float *)(v8 + 8);
          v48 = (float *)v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v8;
              do
              {
                v51 = *(float *)(v50 + 12);
                v52 = *(float *)(v50 + 4);
                v50 = (unint64_t)v46;
                if (v51 > v52)
                {
                  v53 = *v46;
                  v54 = v49;
                  while (1)
                  {
                    *(_QWORD *)(v8 + v54 + 8) = *(_QWORD *)(v8 + v54);
                    if (!v54)
                      break;
                    v55 = *(float *)(v8 + v54 - 4);
                    v54 -= 8;
                    if (v55 >= v51)
                    {
                      v56 = v8 + v54 + 8;
                      goto LABEL_80;
                    }
                  }
                  v56 = v8;
LABEL_80:
                  *(float *)v56 = v53;
                  *(float *)(v56 + 4) = v51;
                }
                v46 = (float *)(v50 + 8);
                v49 += 8;
              }
              while ((float *)(v50 + 8) != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v81 = v7[3];
              v82 = v7[1];
              v7 = v46;
              if (v81 > v82)
              {
                v83 = *v46;
                do
                {
                  v84 = v46;
                  v85 = *((_QWORD *)v46 - 1);
                  v46 -= 2;
                  *(_QWORD *)v84 = v85;
                }
                while (*(v84 - 3) < v81);
                *v46 = v83;
                v46[1] = v81;
              }
              v46 = v7 + 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v57 = (v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = v8 + 8 * v60;
                if (2 * v59 + 2 < (uint64_t)v10 && *(float *)(v61 + 4) > *(float *)(v61 + 12))
                {
                  v61 += 8;
                  v60 = 2 * v59 + 2;
                }
                v62 = *(float *)(v8 + 8 * v59 + 4);
                if (*(float *)(v61 + 4) <= v62)
                {
                  v63 = v8 + 8 * v59;
                  v64 = *(_DWORD *)v63;
                  do
                  {
                    v65 = (_QWORD *)v63;
                    v63 = v61;
                    *v65 = *(_QWORD *)v61;
                    if (v57 < v60)
                      break;
                    v66 = 2 * v60;
                    v60 = (2 * v60) | 1;
                    v61 = v8 + 8 * v60;
                    v67 = v66 + 2;
                    if (v67 < (uint64_t)v10 && *(float *)(v61 + 4) > *(float *)(v61 + 12))
                    {
                      v61 += 8;
                      v60 = v67;
                    }
                  }
                  while (*(float *)(v61 + 4) <= v62);
                  *(_DWORD *)v63 = v64;
                  *(float *)(v63 + 4) = v62;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v68 = (unint64_t)v9 >> 3;
            do
            {
              v69 = 0;
              v70 = *(_QWORD *)v8;
              v71 = v8;
              do
              {
                v72 = (_QWORD *)v71;
                v71 += 8 * (v69 + 1);
                v73 = 2 * v69;
                v69 = (2 * v69) | 1;
                v74 = v73 + 2;
                if (v74 < v68 && *(float *)(v71 + 4) > *(float *)(v71 + 12))
                {
                  v71 += 8;
                  v69 = v74;
                }
                *v72 = *(_QWORD *)v71;
              }
              while (v69 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
              a2 -= 2;
              if ((float *)v71 == a2)
              {
                *(_QWORD *)v71 = v70;
              }
              else
              {
                *(_QWORD *)v71 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v70;
                v75 = v71 - v8 + 8;
                if (v75 >= 9)
                {
                  v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                  v77 = *(float *)(v71 + 4);
                  if (*(float *)(v8 + 8 * v76 + 4) > v77)
                  {
                    v78 = *(_DWORD *)v71;
                    do
                    {
                      v79 = (_QWORD *)v71;
                      v71 = v8 + 8 * v76;
                      *v79 = *(_QWORD *)v71;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                    }
                    while (*(float *)(v8 + 8 * v76 + 4) > v77);
                    *(_DWORD *)v71 = v78;
                    *(float *)(v71 + 4) = v77;
                  }
                }
              }
            }
            while (v68-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = v7[1];
          if (*(v7 - 1) > v14)
            goto LABEL_12;
          if (*(a2 - 1) >= v14)
          {
            v31 = v7 + 2;
            do
            {
              v8 = (unint64_t)v31;
              if (v31 >= a2)
                break;
              v32 = v31[1];
              v31 += 2;
            }
            while (v32 >= v14);
          }
          else
          {
            v29 = v7;
            do
            {
              v8 = (unint64_t)(v29 + 2);
              v30 = v29[3];
              v29 += 2;
            }
            while (v30 >= v14);
          }
          v33 = a2;
          if (v8 < (unint64_t)a2)
          {
            v34 = a2;
            do
            {
              v33 = v34 - 2;
              v35 = *(v34 - 1);
              v34 -= 2;
            }
            while (v35 < v14);
          }
          v36 = *v7;
          while (v8 < (unint64_t)v33)
          {
            v37 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v33;
            *(_QWORD *)v33 = v37;
            do
            {
              v38 = *(float *)(v8 + 12);
              v8 += 8;
            }
            while (v38 >= v14);
            do
            {
              v39 = *(v33 - 1);
              v33 -= 2;
            }
            while (v39 < v14);
          }
          if ((float *)(v8 - 8) != v7)
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
          a4 = 0;
          *(float *)(v8 - 8) = v36;
          *(float *)(v8 - 4) = v14;
          continue;
        }
        v14 = v7[1];
LABEL_12:
        v15 = 0;
        v16 = *v7;
        do
        {
          v17 = v7[v15 + 3];
          v15 += 2;
        }
        while (v17 > v14);
        v18 = &v7[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 2;
            v23 = *(v22 - 1);
            v22 -= 2;
            if (v23 > v14)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 2;
            v21 = *(v19 - 1);
            v19 -= 2;
          }
          while (v21 <= v14);
        }
LABEL_22:
        v8 = (unint64_t)v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            do
            {
              v26 = *(float *)(v8 + 12);
              v8 += 8;
            }
            while (v26 > v14);
            do
            {
              v27 = *(v24 - 1);
              v24 -= 2;
            }
            while (v27 <= v14);
          }
          while (v8 < (unint64_t)v24);
        }
        if ((float *)(v8 - 8) != v7)
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 8);
        *(float *)(v8 - 8) = v16;
        *(float *)(v8 - 4) = v14;
        if (v18 < v20)
        {
LABEL_33:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*,false>(v7, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((uint64_t)v7, v8 - 8);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(v8, (uint64_t)a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = (float *)(v8 - 8);
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 <= result[1])
  {
    if (v4 > v3)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (a2[1] > result[1])
      {
        v7 = *(_QWORD *)result;
        *(_QWORD *)result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v7;
      }
    }
  }
  else
  {
    v5 = *(_QWORD *)result;
    if (v4 <= v3)
    {
      *(_QWORD *)result = *(_QWORD *)a2;
      *(_QWORD *)a2 = v5;
      if (a3[1] <= *((float *)&v5 + 1))
        return result;
      *(_QWORD *)a2 = *(_QWORD *)a3;
    }
    else
    {
      *(_QWORD *)result = *(_QWORD *)a3;
    }
    *(_QWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 4) > *(float *)(a1 + 4))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      if (*(float *)(a2 - 4) > *(float *)(a1 + 28))
      {
        v16 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v16;
        if (*(float *)(a1 + 28) > *(float *)(a1 + 20))
        {
          v18 = *(_QWORD *)(a1 + 16);
          v17 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 24) = v18;
          if (*(float *)(a1 + 12) < *((float *)&v17 + 1))
          {
            v19 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v17;
            *(_QWORD *)(a1 + 16) = v19;
            if (*(float *)(a1 + 4) < *((float *)&v17 + 1))
            {
              v20 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v17;
              *(_QWORD *)(a1 + 8) = v20;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v8 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)(v8 + 4);
    if (v11 > *(float *)(v7 + 4))
    {
      v12 = *(_DWORD *)v8;
      v13 = v9;
      while (1)
      {
        *(_QWORD *)(a1 + v13 + 24) = *(_QWORD *)(a1 + v13 + 16);
        if (v13 == -16)
          break;
        v14 = *(float *)(a1 + v13 + 12);
        v13 -= 8;
        if (v14 >= v11)
        {
          v15 = a1 + v13 + 24;
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *(_DWORD *)v15 = v12;
      *(float *)(v15 + 4) = v11;
      if (++v10 == 8)
        return v8 + 8 == a2;
    }
    v7 = v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2)
      return 1;
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge> &,cv3d::cv::gess::internal::BuildMultiResolutionHierarchies(cv3d::cv::gess::mesh::TriMesh const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<float> const&,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>> &,std::vector<std::vector<float>> &,std::vector<std::vector<unsigned int>> &,std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>> &)::WeightedEdge*>(a1, a2, a3);
  if (*(float *)(a4 + 4) > a3[1])
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    if (a3[1] > a2[1])
    {
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v10;
      if (a2[1] > a1[1])
      {
        v11 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v11;
      }
    }
  }
  return result;
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(cv3d::cv::gess::mesh::PolyMesh *this)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_250D4A5E0;
  v7[1] = this;
  v8 = v7;
  v2 = cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>((uint64_t)this, (_QWORD *)this + 16, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
  {
    v5 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(_QWORD *)this + 24))(this);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 4), *((uint64_t **)this + 5), v5);
  }
  return v2;
}

void sub_23C567024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(cv3d::cv::gess::mesh::PolyMesh *this)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_250D4A628;
  v7[1] = this;
  v8 = v7;
  v2 = cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>(this, (_QWORD *)this + 13, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
  {
    v5 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(_QWORD *)this + 16))(this);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 1), *((uint64_t **)this + 2), v5);
  }
  return v2;
}

void sub_23C567138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(cv3d::cv::gess::mesh::PolyMesh *this)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7[0] = &off_250D4A670;
  v7[1] = this;
  v8 = v7;
  v2 = cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>(this, (_QWORD *)this + 19, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (v2)
  {
    v5 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(_QWORD *)this + 32))(this);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 7), *((uint64_t **)this + 8), v5);
  }
  return v2;
}

void sub_23C56724C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  unsigned int v40;

  v3 = a2[1] - *a2;
  if (!v3)
    return 1;
  v4 = a3;
  v6 = a1;
  v7 = 0;
  v8 = 0;
  v39 = v3 / 20;
  v9 = v3 / 20 - 1;
  v10 = a1 + 104;
  while (1)
  {
    if (v9 > v8)
    {
      v11 = 20 * v9;
      while (1)
      {
        v12 = *(_QWORD *)(v6 + 128);
        if (0xCCCCCCCCCCCCCCCDLL * ((v11 + *a2 - v12) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                              * ((*(_QWORD *)(v6 + 136) - v12) >> 2))
          cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
        v40 = -858993459 * ((v11 + *a2 - v12) >> 2);
        a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
        if (*(_DWORD *)(a1 + 12) != -1)
          break;
        --v9;
        v11 -= 20;
        if (v9 <= v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      v13 = 20 * v8;
      v14 = v7;
      v15 = v8;
      while (1)
      {
        v16 = *(_QWORD *)(v6 + 128);
        if (0xCCCCCCCCCCCCCCCDLL * ((v13 + *a2 - v16) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                              * ((*(_QWORD *)(v6 + 136) - v16) >> 2))
          cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
        v40 = -858993459 * ((v13 + *a2 - v16) >> 2);
        a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
        if (*(_DWORD *)(a1 + 12) == -1)
          break;
        ++v15;
        ++v14;
        v13 += 20;
        if (v9 == v15)
        {
          v7 = v9 + v7 - v8;
          goto LABEL_23;
        }
      }
      v8 = v15;
      v7 = v14;
      v4 = a3;
    }
    if (v8 == v9)
      break;
    v17 = *(_QWORD *)(v6 + 128);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v8 - v17) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                       * ((*(_QWORD *)(v6 + 136) - v17) >> 2))
      cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
    v40 = -858993459 * ((uint64_t)(*a2 + 20 * v8 - v17) >> 2);
    v18 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
    if (*(_DWORD *)(v18 + 12) != -1)
      return 0;
    v21 = *(_QWORD *)(v6 + 128);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v9 - v21) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                       * ((*(_QWORD *)(v6 + 136) - v21) >> 2))
      cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(v18, v19, v20);
    v40 = -858993459 * ((uint64_t)(*a2 + 20 * v9 - v21) >> 2);
    if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v10, &v40) + 12) == -1)
      return 0;
    a1 = std::function<void ()(unsigned long,unsigned long)>::operator()(v4, v9, v8);
    v22 = *a2 + 20 * v8;
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_OWORD *)v22;
    v25 = *a2 + 20 * v9;
    v26 = *(_OWORD *)v25;
    *(_DWORD *)(v22 + 16) = *(_DWORD *)(v25 + 16);
    *(_OWORD *)v22 = v26;
    v27 = *a2 + 20 * v9;
    *(_OWORD *)v27 = v24;
    *(_DWORD *)(v27 + 16) = v23;
    ++v8;
    ++v7;
    if (v8 > v9)
      goto LABEL_26;
  }
LABEL_23:
  v28 = *(_QWORD *)(v6 + 128);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v9 - v28) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                     * ((*(_QWORD *)(v6 + 136) - v28) >> 2))
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
  v40 = -858993459 * ((uint64_t)(*a2 + 20 * v9 - v28) >> 2);
  a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
  if (*(_DWORD *)(a1 + 12) != -1)
    ++v7;
  if (!v7)
    goto LABEL_29;
LABEL_26:
  v29 = *(_QWORD *)(v6 + 128);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v7 - v29 - 20) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                          * ((*(_QWORD *)(v6 + 136) - v29) >> 2))
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
  v40 = -858993459 * ((uint64_t)(*a2 + 20 * v7 - v29 - 20) >> 2);
  a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    v30 = 0;
  }
  else
  {
LABEL_29:
    if (v7 == v39)
    {
      v30 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v6 + 128);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*a2 + 20 * v7 - v32) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                                         * ((*(_QWORD *)(v6 + 136) - v32) >> 2))
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
      v40 = -858993459 * ((uint64_t)(*a2 + 20 * v7 - v32) >> 2);
      a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
      v30 = *(_DWORD *)(a1 + 12) == -1;
    }
  }
  v33 = 0;
  v34 = 0;
  if (v39 <= 1)
    v35 = 1;
  else
    v35 = v39;
  do
  {
    if (v34 >= v7)
    {
      if (!v30)
      {
LABEL_45:
        v30 = 0;
        goto LABEL_46;
      }
      v37 = *(_QWORD *)(v6 + 128);
      if (0xCCCCCCCCCCCCCCCDLL * ((v33 + *a2 - v37) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                            * ((*(_QWORD *)(v6 + 136) - v37) >> 2))
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
      v40 = -858993459 * ((v33 + *a2 - v37) >> 2);
      a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
      v30 = *(_DWORD *)(a1 + 12) == -1;
    }
    else
    {
      if (!v30)
        goto LABEL_45;
      v36 = *(_QWORD *)(v6 + 128);
      if (0xCCCCCCCCCCCCCCCDLL * ((v33 + *a2 - v36) >> 2) >= 0xCCCCCCCCCCCCCCCDLL
                                                            * ((*(_QWORD *)(v6 + 136) - v36) >> 2))
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::HEdge>(a1, (uint64_t)a2, a3);
      v40 = -858993459 * ((v33 + *a2 - v36) >> 2);
      a1 = cv3d::cv::gess::mesh::Topology::hedge(v10, &v40);
      v30 = *(_DWORD *)(a1 + 12) != -1;
    }
LABEL_46:
    ++v34;
    v33 += 20;
  }
  while (v35 != v34);
  if (v30)
  {
    std::vector<cv3d::cv::gess::mesh::HEdge>::resize((uint64_t)a2, v7);
    return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2) == v7;
  }
  return 0;
}

void std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4A5E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4A5E0;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}::operator()((_QWORD *)(a1 + 8), *a2, *a3);
}

_DWORD *cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingHEdge(void)::{lambda(unsigned long,unsigned long)#1}::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *result;
  _DWORD **v16;
  _DWORD **v17;
  unsigned int v18;
  unsigned int v19;

  v5 = (_QWORD *)*a1;
  v19 = a2;
  v6 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v19);
  v8 = (_DWORD *)cv3d::cv::gess::mesh::Topology::v(v5 + 13, (unsigned int *)(v6 + 12), v7);
  if (*v8 == v19)
  {
    v9 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v19);
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v5 + 13, (unsigned int *)(v9 + 12), v10) = a3;
  }
  v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v19) + 16);
  if (v18 != -1)
  {
    v11 = (_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(v5 + 13), &v18);
    if (*v11 == v19)
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(v5 + 13), &v18) = a3;
  }
  v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v19);
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), v12) = a3;
  v13 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v19);
  *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), (unsigned int *)(v13 + 8)) + 4) = a3;
  v14 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), &v19);
  result = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(v5 + 13), (unsigned int *)(v14 + 4));
  result[2] = a3;
  v16 = (_DWORD **)v5[4];
  v17 = (_DWORD **)v5[5];
  while (v16 != v17)
  {
    result = *v16;
    if (*v16)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, a2, a3);
    v16 += 2;
  }
  return result;
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>(_DWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;

  v3 = a2[1] - *a2;
  if (!v3)
    return 1;
  v6 = a1;
  v7 = 0;
  v8 = 0;
  v42 = v3 >> 2;
  v9 = (v3 >> 2) - 1;
  v10 = a1 + 26;
  while (1)
  {
    if (v9 > v8)
    {
      v11 = 4 * v9;
      while (1)
      {
        v12 = *((_QWORD *)v6 + 13);
        v13 = v11 + *a2 - v12;
        if (v13 >= *((_QWORD *)v6 + 14) - v12)
          cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
        v43 = v13 >> 2;
        a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
        if (*a1 != -1)
          break;
        --v9;
        v11 -= 4;
        if (v9 <= v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      v14 = 4 * v8;
      v15 = v7;
      v16 = v8;
      while (1)
      {
        v17 = *((_QWORD *)v6 + 13);
        v18 = v14 + *a2 - v17;
        if (v18 >= *((_QWORD *)v6 + 14) - v17)
          cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
        v43 = v18 >> 2;
        a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
        if (*a1 == -1)
          break;
        ++v16;
        ++v15;
        v14 += 4;
        if (v9 == v16)
        {
          v7 = v9 + v7 - v8;
          goto LABEL_23;
        }
      }
      v8 = v16;
      v7 = v15;
    }
    if (v8 == v9)
      break;
    v19 = *((_QWORD *)v6 + 13);
    v20 = *a2 + 4 * v8 - v19;
    if (v20 >= *((_QWORD *)v6 + 14) - v19)
      cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
    v43 = v20 >> 2;
    v21 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
    if (*v21 != -1)
      return 0;
    v24 = *((_QWORD *)v6 + 13);
    v25 = *a2 + 4 * v9 - v24;
    if (v25 >= *((_QWORD *)v6 + 14) - v24)
      cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)v21, v22, v23);
    v43 = v25 >> 2;
    if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43) == -1)
      return 0;
    a1 = (_DWORD *)std::function<void ()(unsigned long,unsigned long)>::operator()(a3, v9, v8);
    v26 = *(_DWORD *)(*a2 + 4 * v8);
    *(_DWORD *)(*a2 + 4 * v8) = *(_DWORD *)(*a2 + 4 * v9);
    *(_DWORD *)(*a2 + 4 * v9) = v26;
    ++v8;
    ++v7;
    if (v8 > v9)
      goto LABEL_26;
  }
LABEL_23:
  v27 = *((_QWORD *)v6 + 13);
  v28 = *a2 + 4 * v9 - v27;
  if (v28 >= *((_QWORD *)v6 + 14) - v27)
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
  v43 = v28 >> 2;
  a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
  if (*a1 != -1)
    ++v7;
LABEL_26:
  v29 = v42;
  if (!v7)
    goto LABEL_29;
  v30 = *((_QWORD *)v6 + 13);
  v31 = *a2 + 4 * v7 - v30 - 4;
  if (v31 >= *((_QWORD *)v6 + 14) - v30)
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
  v43 = v31 >> 2;
  a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
  if (*a1 == -1)
  {
    v32 = 0;
  }
  else
  {
LABEL_29:
    if (v7 == v42)
    {
      v32 = 1;
    }
    else
    {
      v34 = *((_QWORD *)v6 + 13);
      v35 = *a2 + 4 * v7 - v34;
      if (v35 >= *((_QWORD *)v6 + 14) - v34)
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
      v43 = v35 >> 2;
      a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
      v32 = *a1 == -1;
    }
  }
  v36 = 0;
  v37 = 0;
  if (v42 <= 1)
    v29 = 1;
  do
  {
    if (v37 >= v7)
    {
      if (!v32)
      {
LABEL_44:
        v32 = 0;
        goto LABEL_45;
      }
      v40 = *((_QWORD *)v6 + 13);
      v41 = v36 + *a2 - v40;
      if (v41 >= *((_QWORD *)v6 + 14) - v40)
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
      v43 = v41 >> 2;
      a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
      v32 = *a1 == -1;
    }
    else
    {
      if (!v32)
        goto LABEL_44;
      v38 = *((_QWORD *)v6 + 13);
      v39 = v36 + *a2 - v38;
      if (v39 >= *((_QWORD *)v6 + 14) - v38)
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Vertex>((uint64_t)a1, (uint64_t)a2, a3);
      v43 = v39 >> 2;
      a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v10, &v43);
      v32 = *a1 != -1;
    }
LABEL_45:
    ++v37;
    v36 += 4;
  }
  while (v29 != v37);
  if (v32)
  {
    std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)a2, v7);
    return v7 == (uint64_t)(a2[1] - *a2) >> 2;
  }
  return 0;
}

void std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4A628;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4A628;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingVertex(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  _BYTE v11[16];

  v3 = *a2;
  v4 = *a3;
  v5 = *a1;
  v6 = *a1 + 104;
  v10 = *a2;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v11, v6, &v10);
  while (1)
  {
    result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v11);
    v10 = result;
    if ((_DWORD)result == -1)
      break;
    *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v10) + 12) = v4;
  }
  v8 = *(uint64_t **)(v5 + 8);
  v9 = *(uint64_t **)(v5 + 16);
  while (v8 != v9)
  {
    result = *v8;
    if (*v8)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, v3, v4);
    v8 += 2;
  }
  return result;
}

BOOL cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>(_DWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;

  v3 = a2[1] - *a2;
  if (!v3)
    return 1;
  v6 = a1;
  v7 = 0;
  v8 = 0;
  v42 = v3 >> 2;
  v9 = (v3 >> 2) - 1;
  v10 = (uint64_t)(a1 + 26);
  while (1)
  {
    if (v9 > v8)
    {
      v11 = 4 * v9;
      while (1)
      {
        v12 = *((_QWORD *)v6 + 19);
        v13 = v11 + *a2 - v12;
        if (v13 >= *((_QWORD *)v6 + 20) - v12)
          cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
        v43 = v13 >> 2;
        a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
        if (*a1 != -1)
          break;
        --v9;
        v11 -= 4;
        if (v9 <= v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      v14 = 4 * v8;
      v15 = v7;
      v16 = v8;
      while (1)
      {
        v17 = *((_QWORD *)v6 + 19);
        v18 = v14 + *a2 - v17;
        if (v18 >= *((_QWORD *)v6 + 20) - v17)
          cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
        v43 = v18 >> 2;
        a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
        if (*a1 == -1)
          break;
        ++v16;
        ++v15;
        v14 += 4;
        if (v9 == v16)
        {
          v7 = v9 + v7 - v8;
          goto LABEL_23;
        }
      }
      v8 = v16;
      v7 = v15;
    }
    if (v8 == v9)
      break;
    v19 = *((_QWORD *)v6 + 19);
    v20 = *a2 + 4 * v8 - v19;
    if (v20 >= *((_QWORD *)v6 + 20) - v19)
      cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
    v43 = v20 >> 2;
    v21 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
    if (*v21 != -1)
      return 0;
    v24 = *((_QWORD *)v6 + 19);
    v25 = *a2 + 4 * v9 - v24;
    if (v25 >= *((_QWORD *)v6 + 20) - v24)
      cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)v21, v22, v23);
    v43 = v25 >> 2;
    if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43) == -1)
      return 0;
    a1 = (_DWORD *)std::function<void ()(unsigned long,unsigned long)>::operator()(a3, v9, v8);
    v26 = *(_DWORD *)(*a2 + 4 * v8);
    *(_DWORD *)(*a2 + 4 * v8) = *(_DWORD *)(*a2 + 4 * v9);
    *(_DWORD *)(*a2 + 4 * v9) = v26;
    ++v8;
    ++v7;
    if (v8 > v9)
      goto LABEL_26;
  }
LABEL_23:
  v27 = *((_QWORD *)v6 + 19);
  v28 = *a2 + 4 * v9 - v27;
  if (v28 >= *((_QWORD *)v6 + 20) - v27)
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
  v43 = v28 >> 2;
  a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
  if (*a1 != -1)
    ++v7;
LABEL_26:
  v29 = v42;
  if (!v7)
    goto LABEL_29;
  v30 = *((_QWORD *)v6 + 19);
  v31 = *a2 + 4 * v7 - v30 - 4;
  if (v31 >= *((_QWORD *)v6 + 20) - v30)
    cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
  v43 = v31 >> 2;
  a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
  if (*a1 == -1)
  {
    v32 = 0;
  }
  else
  {
LABEL_29:
    if (v7 == v42)
    {
      v32 = 1;
    }
    else
    {
      v34 = *((_QWORD *)v6 + 19);
      v35 = *a2 + 4 * v7 - v34;
      if (v35 >= *((_QWORD *)v6 + 20) - v34)
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
      v43 = v35 >> 2;
      a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
      v32 = *a1 == -1;
    }
  }
  v36 = 0;
  v37 = 0;
  if (v42 <= 1)
    v29 = 1;
  do
  {
    if (v37 >= v7)
    {
      if (!v32)
      {
LABEL_44:
        v32 = 0;
        goto LABEL_45;
      }
      v40 = *((_QWORD *)v6 + 19);
      v41 = v36 + *a2 - v40;
      if (v41 >= *((_QWORD *)v6 + 20) - v40)
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
      v43 = v41 >> 2;
      a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
      v32 = *a1 == -1;
    }
    else
    {
      if (!v32)
        goto LABEL_44;
      v38 = *((_QWORD *)v6 + 19);
      v39 = v36 + *a2 - v38;
      if (v39 >= *((_QWORD *)v6 + 20) - v38)
        cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingT<cv3d::cv::gess::mesh::Face>((uint64_t)a1, (uint64_t)a2, a3);
      v43 = v39 >> 2;
      a1 = (_DWORD *)cv3d::cv::gess::mesh::Topology::face(v10, &v43);
      v32 = *a1 != -1;
    }
LABEL_45:
    ++v37;
    v36 += 4;
  }
  while (v29 != v37);
  if (v32)
  {
    std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)a2, v7);
    return v7 == (uint64_t)(a2[1] - *a2) >> 2;
  }
  return 0;
}

void std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4A670;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4A670;
  a2[1] = v2;
  return result;
}

_DWORD *std::__function::__func<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1},std::allocator<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>((uint64_t *)(a1 + 8), a2, a3);
}

_DWORD *std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<cv3d::cv::gess::mesh::PolyMesh::RemoveDanglingFace(void)::{lambda(unsigned long,unsigned long)#1} &,unsigned long,unsigned long>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _DWORD *result;
  unsigned int v9;
  _DWORD **v11;
  _DWORD **v12;
  unsigned int v13;
  unsigned int v14;

  v3 = *a2;
  v4 = *a3;
  v5 = *a1;
  v6 = *a1 + 104;
  v14 = *a2;
  v7 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(v6, &v14);
  v13 = v7;
  do
  {
    *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, &v13) + 16) = v4;
    result = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v6, &v13);
    v9 = result[2];
    v13 = v9;
  }
  while (v9 != -1 && v9 != v7);
  v11 = *(_DWORD ***)(v5 + 56);
  v12 = *(_DWORD ***)(v5 + 64);
  while (v11 != v12)
  {
    result = *v11;
    if (*v11)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, v3, v4);
    v11 += 2;
  }
  return result;
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C568378(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C5683EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_23C568450(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23C568558(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C5685C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_23C56862C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23C568734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_23C568790(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23C568898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>(uint64_t a1, _DWORD **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>((char *)v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_23C5688F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__push_back_slow_path<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>> const&>(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  v15 += 24;
  std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23C5689FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C568A74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C568C30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v7;
  unsigned int *value;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<unsigned int>::size_type v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::vector<unsigned int>::size_type v20;
  unsigned int *v21;
  unsigned int *v22;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer i;
  unsigned int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (unsigned int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (unsigned int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__push_back_slow_path<cv3d::cv::gess::math::Vector4T<unsigned int> const&>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  _QWORD *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  __p = v10;
  v15 = v11;
  v17 = &v10[16 * v9];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  *((_DWORD *)v11 + 3) = a2[3];
  v16 = v11 + 16;
  std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 += (v15 - v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_23C568E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_DWORD *)*result;
  v2 = (_DWORD *)result[1];
  v4 = (_DWORD *)a2[1];
  while (v2 != v3)
  {
    v5 = *(v2 - 4);
    v2 -= 4;
    *(v4 - 4) = v5;
    v4 -= 4;
    v4[1] = v2[1];
    v4[2] = v2[2];
    v4[3] = v2[3];
  }
  a2[1] = v4;
  v6 = (_DWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::__map_value_compare<cv3d::cv::gess::mesh::FaceHandle,std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::less<cv3d::cv::gess::mesh::FaceHandle>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::FaceHandle,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::FaceHandle,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::FaceHandle const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23C569050(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEEC2B8ne180100IJES7_Li0EEES7_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A6B8;
  cv3d::cv::gess::mesh::TriMesh::TriMesh((cv3d::cv::gess::mesh::TriMesh *)(a1 + 3));
  return a1;
}

void sub_23C569098(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::TriMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::TriMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::TriMesh>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<unsigned int>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5692A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C569308(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A6F0;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C569350(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4A728;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::resize((_QWORD *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 2;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v10);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = 0;
    v5 = v12 + 8;
    while (v4 != v6)
    {
      v14 = *((_DWORD *)v4 - 2);
      v4 -= 8;
      *((_DWORD *)v12 - 2) = v14;
      v12 -= 8;
      *((_DWORD *)v12 + 1) = *((_DWORD *)v4 + 1);
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    v5 = v4 + 8;
  }
  a1[6] = v5;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = *(_QWORD *)(v3 + 8 * a3);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::Clone@<X0>(const cv3d::cv::gess::mesh::BaseAttribute *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,void>(a2, (uint64_t)v4);
}

void sub_23C5695E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4A728;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[8 * v8];
    v10 = *a1;
    v11 = a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *(v11 - 2);
        v11 -= 2;
        *((_DWORD *)v12 - 2) = v13;
        v12 -= 8;
        *((_DWORD *)v12 + 1) = v11[1];
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 8 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__append((uint64_t)a1, a2 - v2);
  }
}

void std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 2 * a2;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(_DWORD **)a1;
    v9 = (uint64_t)v7 - *(_QWORD *)a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - (_QWORD)v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *(_DWORD **)a1;
      v7 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *(v7 - 2);
      v7 -= 2;
      *((_DWORD *)v15 - 2) = v18;
      v15 -= 8;
      *((_DWORD *)v15 + 1) = v7[1];
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, const cv3d::cv::gess::mesh::BaseAttribute *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, a2);
  *(_QWORD *)v4 = &off_250D4A728;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::math::Vector2T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<unsigned int>*,cv3d::cv::gess::math::Vector2T<unsigned int>*>((char *)v4 + 40, *((_DWORD **)a2 + 5), *((_DWORD **)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  return a1;
}

void sub_23C56987C(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4A798;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5698E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<unsigned int>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<unsigned int>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<unsigned int>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v2 = *a2;
  v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>();
  v7 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v3 + 16 * v2, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::deque<unsigned int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<unsigned int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23C569DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23C56A194(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(a1, a2);
  if (result)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)(a2 + 6), (_QWORD *)a2[7]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::pair<unsigned int,std::map<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = v11 + 14;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void OUTLINED_FUNCTION_0_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 177, a4);
}

void OUTLINED_FUNCTION_1_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 169, a4);
}

void OUTLINED_FUNCTION_2_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 173, a4);
}

uint64_t cv3d::cv::gess::internal::FaceNormal(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x4_t v4;
  int32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x2_t v8;
  float32x4_t v9;

  v4 = (int32x4_t)vsubq_f32(*a2, *a1);
  v5 = (int32x4_t)vsubq_f32(*a3, *a1);
  v6 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL), v5)), (float32x4_t)vzip2q_s32(vzip1q_s32(v5, (int32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL)), v5), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), v4));
  v7 = vmulq_f32(v6, v6);
  v7.i32[3] = 0;
  v8 = (float32x2_t)vpaddq_f32(v7, v7).u64[0];
  v8.f32[0] = sqrtf(vaddv_f32(v8));
  if (v8.f32[0] <= 0.0)
    v9 = (float32x4_t)xmmword_23C603EC0;
  else
    v9 = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32((int32x2_t)v8, 0));
  *a4 = v9;
  return 1;
}

uint64_t cv3d::cv::gess::internal::ClassifyAndCollapseEdges(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, const float *a5, _DWORD *a6, uint64_t *a7, _QWORD *a8, float32x4_t *a9, _DWORD *a10, _DWORD *a11)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int32x2_t v46;
  int32x2_t v47;
  unsigned int v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  _OWORD *v55;
  __int128 v56;
  char *v57;
  char **v58;
  unint64_t *v59;
  char **v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  __int128 v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  int v82;
  __int16 v83;
  char **v84;
  unint64_t *v85;
  char **v86;
  unint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  int v98;
  __int16 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  std::vector<unsigned int>::size_type v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  char *v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int **v135;
  unsigned int *v136;
  unsigned int *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  std::vector<unsigned int>::pointer begin;
  char **v143;
  uint64_t v144;
  char **v145;
  char *v146;
  unint64_t v147;
  _QWORD *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  int v158;
  __int16 v159;
  std::vector<unsigned int> *v160;
  std::vector<unsigned int> *v161;
  BOOL v162;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  float v169;
  unsigned int v170;
  _QWORD *v171;
  uint64_t v172;
  std::vector<unsigned int>::pointer v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  std::vector<unsigned int>::value_type *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  _WORD *v196;
  _WORD *v197;
  int v198;
  __int16 v199;
  std::vector<unsigned int>::value_type *v200;
  std::vector<unsigned int>::value_type *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  double v209;
  double v210;
  unsigned int **v211;
  unsigned int *v212;
  unsigned int *v213;
  uint64_t *v214;
  uint64_t v215;
  int *v216;
  int **v217;
  int *v218;
  int *v219;
  int v220;
  unint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  float32x4_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  std::vector<unsigned int>::pointer v231;
  uint64_t v232;
  uint64_t v233;
  float *v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float v240;
  uint64_t i;
  uint64_t *v242;
  uint64_t j;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float v248;
  uint64_t v249;
  unsigned int **v250;
  char *v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t *v254;
  unsigned int **v255;
  unsigned int *v256;
  unsigned int *v257;
  unint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float v275;
  float32x4_t v276;
  float32x4_t v277;
  float v278;
  float32x4_t v279;
  float32x4_t v280;
  float v281;
  float v282;
  float v283;
  float v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  unint64_t v296;
  uint64_t v297;
  float *v298;
  char v299;
  float v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int **v304;
  uint64_t v305;
  _DWORD *v306;
  _DWORD *v307;
  unsigned int **v308;
  unsigned int *v309;
  unsigned int *v310;
  unsigned int **v311;
  unsigned int *v312;
  unsigned int *v313;
  uint64_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float v325;
  float v326;
  float v327;
  unsigned int v329;
  float32x4_t v330;
  unsigned int **v331;
  uint64_t v332;
  unsigned int *v333;
  unsigned int *v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD *v337;
  uint64_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  unsigned int **v346;
  uint64_t v347;
  char *v348;
  char *v349;
  const void **v350;
  char *v351;
  unsigned int **v352;
  unsigned int *v353;
  unsigned int *v354;
  unsigned int **v355;
  unint64_t *v356;
  uint64_t v357;
  char **v358;
  char **v359;
  char *v360;
  unint64_t v361;
  _QWORD *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  char *v368;
  char *v369;
  char *v370;
  char *v371;
  int v372;
  __int16 v373;
  unint64_t *v374;
  unint64_t *v375;
  char *v376;
  int v377;
  uint64_t v378;
  unsigned int **v379;
  char *v380;
  char *v381;
  const void **v382;
  char *v383;
  char *v384;
  int v385;
  uint64_t v386;
  char **v387;
  char **v388;
  char *v389;
  unint64_t v390;
  _QWORD *v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  int v401;
  __int16 v402;
  char **v403;
  uint64_t v404;
  char **v405;
  char *v406;
  unint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  int v417;
  __int16 v418;
  uint64_t v419;
  unsigned int **v420;
  char *v421;
  unint64_t v422;
  uint64_t *v423;
  unsigned int **v424;
  unsigned int *v425;
  unsigned int *v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  uint64_t v434;
  _DWORD **v435;
  _QWORD *v436;
  float v437;
  uint64_t v438;
  _DWORD *v439;
  _DWORD *v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float v446;
  float32x4_t v447;
  float32x4_t v448;
  float v449;
  float v450;
  float v451;
  char *v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  char *v456;
  char *v457;
  char *v458;
  uint64_t v459;
  int v460;
  _BYTE *v461;
  unint64_t v462;
  uint64_t v463;
  _DWORD *v464;
  _DWORD *v465;
  unsigned int v466;
  uint64_t v467;
  _QWORD *v468;
  char *v469;
  const void **v470;
  uint64_t v471;
  int v472;
  unsigned int v473;
  _QWORD *v474;
  _DWORD *v475;
  _DWORD *v476;
  _DWORD *v477;
  char *v478;
  char *v479;
  int v480;
  _WORD *v481;
  int64_t v482;
  uint64_t v483;
  char *v484;
  char *v485;
  const void **v486;
  char *v487;
  char *v488;
  int v489;
  uint64_t v490;
  unsigned int **v491;
  unsigned int **v492;
  unsigned int *v493;
  unsigned int *v494;
  char v495;
  uint64_t v496;
  char *v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  char *v501;
  char *v502;
  _WORD *v503;
  _WORD *v504;
  int v505;
  __int16 v506;
  unsigned int *v507;
  unsigned int *v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t v511;
  float *v512;
  float v513;
  float v514;
  float v515;
  float v516;
  float v517;
  unsigned int v518;
  float v519;
  int32x4_t v520;
  float v521;
  __int32 v522;
  unsigned int **v523;
  unsigned int *v524;
  unsigned int *v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v529;
  int v530;
  char v532;
  int v534;
  uint64_t *v535;
  _DWORD *v536;
  unsigned int **v537;
  uint64_t *v538;
  unsigned int **v539;
  uint64_t v541;
  uint64_t v543;
  uint64_t *v544;
  float32x4_t *v546;
  _QWORD *v547;
  int v549;
  float *v550;
  uint64_t *v551;
  unsigned int v552;
  float32x4_t *v553[4];
  __int128 v554;
  int32x4_t v555;
  char *v556;
  unsigned int v557;
  void *__p[2];
  _QWORD v559[2];
  void *v560[4];
  void *v561[2];
  char *v562;
  std::vector<unsigned int>::value_type v563[4];
  unint64_t v564;
  std::vector<unsigned int> __x;
  std::vector<unsigned int> v566;
  char *v567;
  char *v568;
  __int128 v569;
  char *v570;
  __int128 v571;
  _QWORD *v572;
  float v573[5];

  *a10 = 0;
  *a11 = 0;
  v573[0] = 1.0;
  if (*a5 > 0.00000001)
    v573[0] = 1.0 / *a5;
  v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  LOBYTE(v567) = 0;
  std::vector<BOOL>::vector(&v572, v13, (unsigned __int8 *)&v567);
  v570 = 0;
  v571 = 0uLL;
  v14 = a1 + 104;
  v15 = (float)((float)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2)
                            * 2.5);
  if ((_DWORD)v15)
  {
    std::__split_buffer<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge,std::allocator<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &>::__split_buffer(&v567, v15, 0, (uint64_t)&v571 + 8);
    v17 = v570;
    v16 = (char *)v571;
    v18 = v568;
    if ((char *)v571 == v570)
    {
      v20 = (char *)v571;
    }
    else
    {
      do
      {
        v19 = *(_OWORD *)(v16 - 20);
        *((_DWORD *)v18 - 1) = *((_DWORD *)v16 - 1);
        *(_OWORD *)(v18 - 20) = v19;
        v18 -= 20;
        v16 -= 20;
      }
      while (v16 != v17);
      v20 = v570;
      v16 = (char *)v571;
    }
    v570 = v18;
    v21 = *((_QWORD *)&v571 + 1);
    v571 = v569;
    *(_QWORD *)&v569 = v16;
    *((_QWORD *)&v569 + 1) = v21;
    v567 = v20;
    v568 = v20;
    if (v16 != v20)
      *(_QWORD *)&v569 = &v20[(v16 - v20 - 20) % 0x14uLL];
    if (v20)
      operator delete(v20);
  }
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a7);
  std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::resize(a7, (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  v535 = a7;
  v536 = a6;
  v22 = a1;
  v24 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  if (v23 != v24)
  {
    v25 = 0;
    v26 = 0;
    v551 = (uint64_t *)(a1 + 8);
    v538 = (uint64_t *)(a1 + 32);
    while (1)
    {
      v27 = v25 >> 6;
      v28 = 1 << v25;
      v29 = v572[v25 >> 6];
      if ((v29 & (1 << v25)) == 0)
        break;
LABEL_85:
      v25 = ++v26;
      if (0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 2) <= v26)
        goto LABEL_86;
    }
    v572[v27] = v29 | v28;
    LODWORD(v567) = v26;
    v30 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v567);
    *(_QWORD *)((char *)v572 + (((unint64_t)*v30 >> 3) & 0x1FFFFFF8)) |= 1 << *v30;
    LODWORD(v567) = v26;
    LODWORD(v31) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v567) + 12);
    LODWORD(v567) = v26;
    v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v567);
    v33 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v14, v32) + 12);
    if (v31 <= v33)
      v34 = v33;
    else
      v34 = v31;
    if (v31 >= v33)
      v31 = v33;
    else
      v31 = v31;
    *(_OWORD *)&__x.__begin_ = 0u;
    v35 = *a3;
    v36 = *a3 + 16 * v31;
    v37 = *a2;
    v38 = *a2 + 16 * v31;
    *(_OWORD *)v563 = 0u;
    v561[0] = 0;
    v560[0] = 0;
    cv3d::cv::gess::internal::CompatOrientationExtrinsic4(v36, v38, v35 + 16 * v34, v37 + 16 * v34, &__x, v563, (int8x16_t)0);
    LODWORD(__p[0]) = 0;
    LODWORD(v567) = *(_DWORD *)(v22 + 176);
    v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v551, (unsigned int *)&v567);
    v40 = *(_QWORD *)(v39 + 40);
    if (v31 >= (*(_QWORD *)(v39 + 48) - v40) >> 4
      || (v41 = *a2,
          v42 = *a4,
          LODWORD(v567) = *(_DWORD *)(a1 + 176),
          v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v551, (unsigned int *)&v567), v44 = *(_QWORD *)(v43 + 40), v34 >= (*(_QWORD *)(v43 + 48) - v44) >> 4))
    {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    cv3d::cv::gess::internal::CompatPositionExtrinsicIndex4((float32x4_t *)(v40 + 16 * v31), (int32x4_t *)(v41 + 16 * v31), (int32x4_t *)&__x, (float32x4_t *)(v42 + 16 * v31), (float32x4_t *)(v44 + 16 * v34), (int32x4_t *)(*a2 + 16 * v34), (int32x4_t *)v563, (float32x4_t *)(*a4 + 16 * v34), a5, v573, (float *)__p, v561, v560);
    v46 = vabd_s32((int32x2_t)v561[0], (int32x2_t)v560[0]);
    v47 = vceq_s32(v46, (int32x2_t)0x100000001);
    if (v46.i32[0] <= (unsigned __int32)v46.i32[1])
      v48 = v46.u32[1];
    else
      v48 = v46.i32[0];
    v49 = vand_s8((int8x8_t)v47, (int8x8_t)vdup_lane_s32(v47, 1)).u8[0];
    if (v48 <= 1)
    {
      v22 = a1;
      if ((v49 & 1) == 0)
      {
        if (v46.i32[0] + v46.i32[1])
        {
          v58 = (char **)(*v535 + 24 * v31);
          v60 = v58 + 1;
          v59 = (unint64_t *)v58[1];
          v62 = v58 + 2;
          v61 = (unint64_t)v58[2];
          if ((unint64_t)v59 >= v61)
          {
            v64 = ((char *)v59 - *v58) >> 3;
            if ((unint64_t)(v64 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v65 = v61 - (_QWORD)*v58;
            v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1))
              v66 = v64 + 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
              v67 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v67 = v66;
            if (v67)
              v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v62, v67);
            else
              v68 = 0;
            v79 = &v68[8 * v64];
            *(_QWORD *)v79 = v34;
            v63 = v79 + 8;
            v80 = *v60;
            v81 = *v58;
            if (*v60 != *v58)
            {
              do
              {
                v82 = *((_DWORD *)v80 - 2);
                v80 -= 8;
                v83 = *((_WORD *)v80 + 2);
                *((_DWORD *)v79 - 2) = v82;
                v79 -= 8;
                *((_WORD *)v79 + 2) = v83;
              }
              while (v80 != v81);
              v80 = *v58;
            }
            *v58 = v79;
            *v60 = v63;
            *v62 = &v68[8 * v67];
            if (v80)
              operator delete(v80);
          }
          else
          {
            *v59 = v34;
            v63 = (char *)(v59 + 1);
          }
          *v60 = v63;
          v84 = (char **)(*v535 + 24 * v34);
          v86 = v84 + 1;
          v85 = (unint64_t *)v84[1];
          v88 = v84 + 2;
          v87 = (unint64_t)v84[2];
          if ((unint64_t)v85 >= v87)
          {
            v90 = ((char *)v85 - *v84) >> 3;
            if ((unint64_t)(v90 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v91 = v87 - (_QWORD)*v84;
            v92 = v91 >> 2;
            if (v91 >> 2 <= (unint64_t)(v90 + 1))
              v92 = v90 + 1;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v92;
            if (v93)
              v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v88, v93);
            else
              v94 = 0;
            v95 = &v94[8 * v90];
            *(_QWORD *)v95 = v31;
            v89 = v95 + 8;
            v96 = *v86;
            v97 = *v84;
            if (*v86 != *v84)
            {
              do
              {
                v98 = *((_DWORD *)v96 - 2);
                v96 -= 8;
                v99 = *((_WORD *)v96 + 2);
                *((_DWORD *)v95 - 2) = v98;
                v95 -= 8;
                *((_WORD *)v95 + 2) = v99;
              }
              while (v96 != v97);
              v96 = *v84;
            }
            *v84 = v95;
            *v86 = v89;
            *v88 = &v94[8 * v93];
            if (v96)
              operator delete(v96);
          }
          else
          {
            *v85 = v31;
            v89 = (char *)(v85 + 1);
          }
          *v86 = v89;
        }
        else
        {
          v566.__begin_ = (std::vector<unsigned int>::pointer)(v26 | 0xFFFFFFFF00000000);
          v54 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v566);
          LODWORD(v566.__end_cap_.__value_) = __p[0];
          HIDWORD(v566.__begin_) = v54;
          v566.__end_ = (std::vector<unsigned int>::pointer)__PAIR64__(v34, v31);
          v55 = (_OWORD *)v571;
          if ((unint64_t)v571 >= *((_QWORD *)&v571 + 1))
          {
            v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v571 - (_QWORD)v570) >> 2);
            v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) > 0xCCCCCCCCCCCCCCCLL)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v571 + 1) - (_QWORD)v570) >> 2) > v70)
              v70 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v571 + 1) - (_QWORD)v570) >> 2);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v571 + 1) - (_QWORD)v570) >> 2) >= 0x666666666666666)
              v71 = 0xCCCCCCCCCCCCCCCLL;
            else
              v71 = v70;
            std::__split_buffer<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge,std::allocator<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &>::__split_buffer(&v567, v71, v69, (uint64_t)&v571 + 8);
            v72 = (_OWORD *)v569;
            v73 = *(_OWORD *)&v566.__begin_;
            *(_DWORD *)(v569 + 16) = v566.__end_cap_.__value_;
            *v72 = v73;
            v74 = v568;
            v57 = (char *)(v569 + 20);
            *(_QWORD *)&v569 = v569 + 20;
            v76 = v570;
            v75 = (char *)v571;
            if ((char *)v571 == v570)
            {
              v78 = (char *)v571;
            }
            else
            {
              do
              {
                v77 = *(_OWORD *)(v75 - 20);
                *((_DWORD *)v74 - 1) = *((_DWORD *)v75 - 1);
                *(_OWORD *)(v74 - 20) = v77;
                v74 -= 20;
                v75 -= 20;
              }
              while (v75 != v76);
              v78 = v570;
              v75 = (char *)v571;
              v57 = (char *)v569;
            }
            v570 = v74;
            *(_QWORD *)&v571 = v57;
            v100 = *((_QWORD *)&v571 + 1);
            *((_QWORD *)&v571 + 1) = *((_QWORD *)&v569 + 1);
            *(_QWORD *)&v569 = v75;
            *((_QWORD *)&v569 + 1) = v100;
            v567 = v78;
            v568 = v78;
            if (v75 != v78)
              *(_QWORD *)&v569 = &v75[-20 - 20 * ((v75 - v78 - 20) / 0x14uLL)];
            if (v78)
              operator delete(v78);
          }
          else
          {
            v56 = *(_OWORD *)&v566.__begin_;
            *(_DWORD *)(v571 + 16) = v566.__end_cap_.__value_;
            *v55 = v56;
            v57 = (char *)v55 + 20;
          }
          *(_QWORD *)&v571 = v57;
        }
        goto LABEL_84;
      }
    }
    else
    {
      v22 = a1;
      if ((v49 & 1) == 0)
      {
LABEL_84:
        v24 = *(_QWORD *)(v22 + 128);
        v23 = *(_QWORD *)(v22 + 136);
        goto LABEL_85;
      }
    }
    LODWORD(v567) = *v536;
    v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v538, (unsigned int *)&v567, v45);
    if (*(_QWORD *)(v50 + 48) <= v25)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    *(_QWORD *)(*(_QWORD *)(v50 + 40) + 8 * v27) |= v28;
    LODWORD(v567) = *v536;
    v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v538, (unsigned int *)&v567, v51);
    LODWORD(v567) = v26;
    v53 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, (unsigned int *)&v567);
    if (*(_QWORD *)(v52 + 48) <= v53)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    *(_QWORD *)(*(_QWORD *)(v52 + 40) + ((v53 >> 3) & 0x1FFFFFF8)) |= 1 << v53;
    goto LABEL_84;
  }
LABEL_86:
  v101 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v571 - (_QWORD)v570) >> 2));
  if ((char *)v571 == v570)
    v102 = 0;
  else
    v102 = v101;
  std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*,false>((uint64_t)v570, v571, v102, 1);
  cv3d::cv::gess::internal::DisjointSets<unsigned int>::DisjointSets((std::vector<unsigned int> *)&v567, (*(_QWORD *)(v22 + 112) - *(_QWORD *)(v22 + 104)) >> 2);
  v103 = (uint64_t)(*(_QWORD *)(v22 + 112) - *(_QWORD *)(v22 + 104)) >> 2;
  LODWORD(__x.__begin_) = 0;
  std::vector<unsigned int>::vector(&v566, v103, (const std::vector<unsigned int>::value_type *)&__x);
  __x.__end_ = 0;
  __x.__end_cap_.__value_ = 0;
  __x.__begin_ = (std::vector<unsigned int>::pointer)&__x.__end_;
  v105 = v570;
  v104 = v571;
  v106 = v535;
  if ((char *)v571 == v570)
  {
    end = 0;
  }
  else
  {
    v107 = 0;
    v108 = 0;
    do
    {
      v109 = &v105[20 * v107];
      v112 = *((_DWORD *)v109 + 2);
      v111 = (unsigned int *)(v109 + 8);
      v110 = v112;
      v113 = (uint64_t)v567;
      v114 = v112;
      do
      {
        v115 = v114;
        v114 = *(unsigned int *)&v567[4 * v114];
      }
      while (v115 != v114);
      *(_DWORD *)&v567[4 * v110] = v115;
      *v111 = v115;
      v116 = &v105[20 * v107];
      v119 = *((_DWORD *)v116 + 3);
      v118 = (unsigned int *)(v116 + 12);
      v117 = v119;
      v120 = v119;
      do
      {
        v121 = v120;
        v120 = *(unsigned int *)(v113 + 4 * v120);
      }
      while (v121 != v120);
      *(_DWORD *)(v113 + 4 * v117) = v121;
      *v118 = v121;
      v122 = *v111;
      if (v122 != v121)
      {
        v123 = *v106 + 24 * v122;
        v124 = *(unsigned int **)v123;
        v125 = *(unsigned int **)(v123 + 8);
        while (v124 != v125)
        {
          v126 = *v124;
          do
          {
            v127 = v126;
            v126 = *(unsigned int *)(v113 + 4 * v126);
          }
          while (v127 != v126);
          *(_DWORD *)(v113 + 4 * *v124) = v127;
          if (v127 == *v118)
            goto LABEL_140;
          v124 += 2;
        }
        std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&__x, (_QWORD *)__x.__end_);
        __x.__end_ = 0;
        __x.__end_cap_.__value_ = 0;
        __x.__begin_ = (std::vector<unsigned int>::pointer)&__x.__end_;
        v128 = *v106;
        v129 = *v106 + 24 * *v111;
        v130 = *(unsigned int **)v129;
        v131 = *(unsigned int **)(v129 + 8);
        if (*(unsigned int **)v129 != v131)
        {
          do
          {
            v132 = *v130;
            do
            {
              v133 = v132;
              v132 = *(unsigned int *)&v567[4 * v132];
            }
            while (v133 != v132);
            *(_DWORD *)&v567[4 * *v130] = v133;
            v563[0] = v133;
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&__x, v563, v563);
            v130 += 2;
          }
          while (v130 != v131);
          v128 = *v106;
        }
        v134 = *v118;
        v135 = (unsigned int **)(v128 + 24 * *v118);
        v137 = *v135;
        v136 = v135[1];
        v552 = v108;
        if (*v135 != v136)
        {
          do
          {
            v138 = *v137;
            do
            {
              v139 = v138;
              v138 = *(unsigned int *)&v567[4 * v138];
            }
            while (v139 != v138);
            *(_DWORD *)&v567[4 * *v137] = v139;
            v563[0] = v139;
            std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&__x, v563, v563);
            v137 += 2;
          }
          while (v137 != v136);
          v134 = *v118;
          v128 = *v106;
          v137 = *(unsigned int **)(*v106 + 24 * *v118);
        }
        v140 = *v111;
        if (*v111 >= v134)
          v141 = v134;
        else
          v141 = v140;
        *(_QWORD *)(v128 + 24 * v140 + 8) = *(_QWORD *)(v128 + 24 * v140);
        *(_QWORD *)(v128 + 24 * v134 + 8) = v137;
        std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve((char **)(v128 + 24 * v141), (unint64_t)__x.__end_cap_.__value_);
        begin = __x.__begin_;
        if ((std::vector<unsigned int>::pointer *)__x.__begin_ != &__x.__end_)
        {
          do
          {
            v143 = (char **)(*v106 + 24 * v141);
            v144 = begin[7];
            v145 = v143 + 1;
            v146 = v143[1];
            v148 = v143 + 2;
            v147 = (unint64_t)v143[2];
            if ((unint64_t)v146 >= v147)
            {
              v150 = (v146 - *v143) >> 3;
              if ((unint64_t)(v150 + 1) >> 61)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v151 = v147 - (_QWORD)*v143;
              v152 = v151 >> 2;
              if (v151 >> 2 <= (unint64_t)(v150 + 1))
                v152 = v150 + 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
                v153 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v153 = v152;
              if (v153)
                v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v148, v153);
              else
                v154 = 0;
              v155 = &v154[8 * v150];
              *(_QWORD *)v155 = v144;
              v149 = v155 + 8;
              v156 = *v145;
              v157 = *v143;
              if (*v145 != *v143)
              {
                do
                {
                  v158 = *((_DWORD *)v156 - 2);
                  v156 -= 8;
                  v159 = *((_WORD *)v156 + 2);
                  *((_DWORD *)v155 - 2) = v158;
                  v155 -= 8;
                  *((_WORD *)v155 + 2) = v159;
                }
                while (v156 != v157);
                v156 = *v143;
              }
              *v143 = v155;
              *v145 = v149;
              *v148 = &v154[8 * v153];
              if (v156)
                operator delete(v156);
              v106 = v535;
            }
            else
            {
              *(_QWORD *)v146 = v144;
              v149 = v146 + 8;
              v106 = v535;
            }
            *v145 = v149;
            v160 = (std::vector<unsigned int> *)*((_QWORD *)begin + 1);
            if (v160)
            {
              do
              {
                v161 = v160;
                v160 = (std::vector<unsigned int> *)v160->__begin_;
              }
              while (v160);
            }
            else
            {
              do
              {
                v161 = (std::vector<unsigned int> *)*((_QWORD *)begin + 2);
                v162 = v161->__begin_ == begin;
                begin = (std::vector<unsigned int>::pointer)v161;
              }
              while (!v162);
            }
            begin = (std::vector<unsigned int>::pointer)v161;
          }
          while (v161 != (std::vector<unsigned int> *)&__x.__end_);
        }
        v566.__begin_[v141] = v566.__begin_[*v111] + v566.__begin_[*v118] + 1;
        std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit(*v106 + 24 * *v111);
        std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit(*v106 + 24 * *v118);
        cv3d::cv::gess::internal::DisjointSets<unsigned int>::Unite((uint64_t *)&v567, *v111, *v118);
        v104 = v571;
        v108 = v552;
      }
LABEL_140:
      v105 = v570;
      v107 = ++v108;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v104 - (uint64_t)v570) >> 2) > v108);
    end = __x.__end_;
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&__x, end);
  v164 = 0xAAAAAAAAAAAAAAABLL * ((v106[1] - *v106) >> 3);
  v563[0] = -1;
  std::vector<unsigned int>::vector(&__x, v164, v563);
  v165 = *v106;
  v166 = v106[1];
  if (v166 == *v106)
  {
    v168 = 0;
    v169 = 0.0;
  }
  else
  {
    v167 = 0;
    v168 = 0;
    v169 = 0.0;
    v170 = 1;
    do
    {
      v171 = (_QWORD *)(v165 + 24 * v167);
      v172 = v171[1];
      if (*v171 != v172)
      {
        if (v170 - 1 == v168)
        {
          v173 = v566.__begin_;
        }
        else
        {
          v174 = v165 + 24 * v168;
          v175 = *(_OWORD *)v174;
          *(_QWORD *)v174 = *v171;
          *(_QWORD *)(v174 + 8) = v172;
          *(_OWORD *)v171 = v175;
          v176 = v165 + 24 * v167;
          v177 = *(_QWORD *)(v174 + 16);
          *(_QWORD *)(v174 + 16) = *(_QWORD *)(v176 + 16);
          *(_QWORD *)(v176 + 16) = v177;
          v173 = v566.__begin_;
          LODWORD(v176) = v566.__begin_[v168];
          v566.__begin_[v168] = v566.__begin_[v167];
          v173[v167] = v176;
          v165 = *v106;
          v166 = v106[1];
        }
        v169 = v169 + (float)v173[v168];
        __x.__begin_[v167] = v168++;
      }
      v167 = v170;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v166 - v165) >> 3) > v170++);
  }
  v179 = v168;
  std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::resize(v106, v168);
  std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::shrink_to_fit((uint64_t)v106);
  v180 = v179;
  v529 = v179;
  if ((_DWORD)v179)
  {
    v181 = 0;
    v169 = v169 / (float)v180;
    *(_QWORD *)&v563[2] = 0;
    v564 = 0;
    *(_QWORD *)v563 = &v563[2];
    do
    {
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)v563, *(_QWORD **)&v563[2]);
      *(_QWORD *)&v563[2] = 0;
      v564 = 0;
      *(_QWORD *)v563 = &v563[2];
      v182 = *v535 + 24 * v181;
      v183 = *(unsigned int **)v182;
      v184 = *(unsigned int **)(v182 + 8);
      if (*(unsigned int **)v182 == v184)
      {
        v187 = 0;
      }
      else
      {
        do
        {
          v185 = *v183;
          do
          {
            v186 = v185;
            v185 = *(unsigned int *)&v567[4 * v185];
          }
          while (v186 != v185);
          *(_DWORD *)&v567[4 * *v183] = v186;
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)v563, &__x.__begin_[v186], &__x.__begin_[v186]);
          v183 += 2;
        }
        while (v183 != v184);
        v187 = v564;
      }
      v561[0] = 0;
      v561[1] = 0;
      v562 = 0;
      std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve((char **)v561, v187);
      v188 = *(std::vector<unsigned int>::value_type **)v563;
      if (*(std::vector<unsigned int>::value_type **)v563 != &v563[2])
      {
        v189 = (char *)v561[1];
        do
        {
          v190 = v188[7];
          if (v189 >= v562)
          {
            v191 = (v189 - (char *)v561[0]) >> 3;
            if ((unint64_t)(v191 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v192 = (v562 - (char *)v561[0]) >> 2;
            if (v192 <= v191 + 1)
              v192 = v191 + 1;
            if ((unint64_t)(v562 - (char *)v561[0]) >= 0x7FFFFFFFFFFFFFF8)
              v193 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v193 = v192;
            if (v193)
              v194 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v562, v193);
            else
              v194 = 0;
            v195 = &v194[8 * v191];
            *(_QWORD *)v195 = v190;
            v189 = v195 + 8;
            v197 = v561[0];
            v196 = v561[1];
            if (v561[1] != v561[0])
            {
              do
              {
                v198 = *((_DWORD *)v196 - 2);
                v196 -= 4;
                v199 = v196[2];
                *((_DWORD *)v195 - 2) = v198;
                v195 -= 8;
                *((_WORD *)v195 + 2) = v199;
              }
              while (v196 != v197);
              v196 = v561[0];
            }
            v561[0] = v195;
            v561[1] = v189;
            v562 = &v194[8 * v193];
            if (v196)
              operator delete(v196);
          }
          else
          {
            *(_QWORD *)v189 = v190;
            v189 += 8;
          }
          v561[1] = v189;
          v200 = (std::vector<unsigned int>::value_type *)*((_QWORD *)v188 + 1);
          if (v200)
          {
            do
            {
              v201 = v200;
              v200 = *(std::vector<unsigned int>::value_type **)v200;
            }
            while (v200);
          }
          else
          {
            do
            {
              v201 = (std::vector<unsigned int>::value_type *)*((_QWORD *)v188 + 2);
              v162 = *(_QWORD *)v201 == (_QWORD)v188;
              v188 = v201;
            }
            while (!v162);
          }
          v188 = v201;
        }
        while (v201 != &v563[2]);
      }
      v202 = *v535;
      v203 = *v535 + 24 * v181;
      v204 = *(void **)v203;
      if (*(_QWORD *)v203)
      {
        *(_QWORD *)(v202 + 24 * v181 + 8) = v204;
        operator delete(v204);
        *(_QWORD *)v203 = 0;
        *(_QWORD *)(v203 + 8) = 0;
        *(_QWORD *)(v203 + 16) = 0;
      }
      *(_OWORD *)v203 = *(_OWORD *)v561;
      *(_QWORD *)(v202 + 24 * v181++ + 16) = v562;
    }
    while (v181 != v529);
    v106 = v535;
  }
  else
  {
    *(_QWORD *)&v563[2] = 0;
    v564 = 0;
    *(_QWORD *)v563 = &v563[2];
  }
  v205 = *v106;
  v206 = v106[1];
  if (v206 != *v106)
  {
    v207 = 0;
    v208 = 0;
    v209 = v169;
    v210 = v169 * 0.1;
    do
    {
      LODWORD(v209) = v566.__begin_[v207];
      v209 = (double)*(unint64_t *)&v209;
      if (v210 >= v209)
      {
        v211 = (unsigned int **)(v205 + 24 * v207);
        v212 = *v211;
        v213 = v211[1];
        if (*v211 != v213)
        {
          do
          {
            v214 = (uint64_t *)(*v106 + 24 * *v212);
            v215 = *v214;
            v218 = (int *)v214[1];
            v217 = (int **)(v214 + 1);
            v216 = v218;
            while ((int *)v215 != v216)
            {
              if (*(_DWORD *)v215 == v208)
              {
                if ((int *)v215 != v216)
                {
                  v219 = (int *)(v215 + 8);
                  if ((int *)(v215 + 8) != v216)
                  {
                    do
                    {
                      if (*v219 != v208)
                      {
                        v220 = *v219;
                        *(_WORD *)(v215 + 4) = *((_WORD *)v219 + 2);
                        *(_DWORD *)v215 = v220;
                        v215 += 8;
                      }
                      v219 += 2;
                    }
                    while (v219 != v216);
                    v216 = *v217;
                  }
                }
                if ((int *)v215 != v216)
                  *v217 = (int *)v215;
                break;
              }
              v215 += 8;
            }
            v212 += 2;
            v106 = v535;
          }
          while (v212 != v213);
          v205 = *v535;
          v206 = v535[1];
          v212 = *(unsigned int **)(*v535 + 24 * v207);
        }
        *(_QWORD *)(v205 + 24 * v207 + 8) = v212;
      }
      v207 = ++v208;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v206 - v205) >> 3) > v208);
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v561, (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
  {
    v221 = 0;
    v222 = 1;
    do
    {
      LODWORD(v560[0]) = *(_DWORD *)(a1 + 176);
      v223 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)v560);
      v224 = *(_QWORD *)(v223 + 40);
      if (v221 >= (*(_QWORD *)(v223 + 48) - v224) >> 4)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *((_OWORD *)v561[0] + v221) = *(_OWORD *)(v224 + 16 * v221);
      v221 = v222++;
    }
    while (v221 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  }
  a9->i64[1] = a9->i64[0];
  v560[0] = 0;
  v560[1] = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a9, v529, v560);
  a8[1] = *a8;
  v560[0] = 0;
  v560[1] = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a8, v529, v560);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v560, v529, __p);
  v226 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  if (v226)
  {
    v227 = 0;
    v228 = 0;
    v229 = v226 >> 2;
    v230 = (uint64_t)v567;
    v231 = __x.__begin_;
    v232 = *a4;
    v543 = a9->i64[0];
    v546 = (float32x4_t *)v561[0];
    v541 = *a8;
    v233 = *a2;
    v234 = (float *)v560[0];
    do
    {
      v235 = v228;
      do
      {
        v236 = v235;
        v235 = *(_DWORD *)(v230 + 4 * v235);
      }
      while (v236 != v235);
      *(_DWORD *)(v230 + 4 * v227) = v236;
      v237 = v231[v236];
      if ((_DWORD)v237 != -1)
      {
        if (v237 >= v529)
          __assert_rtn("ClassifyAndCollapseEdges", "QuadExtract.cpp", 393, "j < num_vertices");
        v238 = vsubq_f32(*(float32x4_t *)(v232 + 16 * v227), v546[v227]);
        v239 = vmulq_f32(v238, v238);
        v239.i32[3] = 0;
        v240 = expf((float)(v573[0] * (float)(v573[0] * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v239, v239)))) * -9.0);
        for (i = 0; i != 12; i += 4)
        {
          *(float *)(v543 + 16 * v237 + i) = *(float *)(v543 + 16 * v237 + i)
                                           + (float)(*(float *)(v232 + 16 * v228 + i) * v240);
          *(float *)(v541 + 16 * v237 + i) = *(float *)(v541 + 16 * v237 + i)
                                           + (float)(*(float *)(v233 + 16 * v228 + i) * v240);
        }
        v234[v237] = v240 + v234[v237];
      }
      v227 = ++v228;
    }
    while (v229 > v228);
  }
  v242 = v535;
  if ((_DWORD)v529)
  {
    for (j = 0; j != v529; ++j)
    {
      v225.i32[0] = *((_DWORD *)v560[0] + j);
      if (v225.f32[0] >= 0.00000001)
      {
        *(float32x4_t *)(a9->i64[0] + 16 * j) = vdivq_f32(*(float32x4_t *)(a9->i64[0] + 16 * j), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v225.f32, 0));
        v225 = *(float32x4_t *)(*a8 + 16 * j);
        v244 = vmulq_f32(v225, v225);
        v244.i32[3] = 0;
        v245 = vpaddq_f32(v244, v244);
        v246 = vpaddq_f32(v245, v245);
        v247 = (float32x4_t)xmmword_23C603EC0;
        if (v246.f32[0] > 0.0)
          v247 = vdivq_f32(v225, vsqrtq_f32(v246));
        *(float32x4_t *)(*a8 + 16 * j) = v247;
      }
    }
  }
  v534 = 0;
  v530 = 0;
  do
  {
    v532 = 0;
    do
    {
      v248 = *a5 * 0.3;
      __p[0] = 0;
      __p[1] = 0;
      v559[0] = 0;
      v250 = (unsigned int **)*v242;
      v249 = v242[1];
      if (v249 == *v242)
      {
        v251 = 0;
        v295 = 0;
      }
      else
      {
        v251 = 0;
        v252 = 0;
        v253 = 0;
        v254 = (uint64_t *)a9;
        do
        {
          v255 = &v250[3 * v252];
          v256 = v255[1];
          v537 = v255 + 1;
          v539 = v255;
          v257 = *v255;
          if (v256 != *v255)
          {
            v258 = 0;
            v259 = 0;
            v260 = *v254;
            do
            {
              v549 = v259;
              v261 = v257[2 * v258];
              v262 = (_QWORD *)(*v242 + 24 * v261);
              v264 = v262 + 1;
              v263 = v262[1];
              v265 = *v262;
              if (v263 != *v262)
              {
                v266 = 0;
                v267 = 0;
                v268 = *v254;
                v544 = v262 + 1;
                v547 = v262;
                do
                {
                  v269 = *(unsigned int *)(v265 + 8 * v266);
                  if ((_DWORD)v269 != v253)
                  {
                    v270 = *(float32x4_t *)(*v254 + 16 * v269);
                    v271 = *(float32x4_t *)(v268 + 16 * v261);
                    v272 = vsubq_f32(v271, v270);
                    v273 = vmulq_f32(v272, v272);
                    v273.i32[3] = 0;
                    v274 = *(float32x4_t *)(v260 + 16 * v252);
                    v275 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v273, v273)));
                    v276 = vsubq_f32(v274, v271);
                    v277 = vmulq_f32(v276, v276);
                    v277.i32[3] = 0;
                    v278 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v277, v277)));
                    v279 = vsubq_f32(v274, v270);
                    v280 = vmulq_f32(v279, v279);
                    v280.i32[3] = 0;
                    v281 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v280, v280)));
                    v282 = v278 >= v281 ? v278 : v281;
                    if (v275 > v282)
                    {
                      v283 = sqrtf((float)((float)((float)((float)(v275 + v278) + v281) * 0.5) - v281)* (float)((float)((float)((float)((float)(v275 + v278) + v281) * 0.5) - v278)* (float)((float)((float)((float)(v275 + v278) + v281) * 0.5)* (float)((float)((float)((float)(v275 + v278) + v281) * 0.5) - v275))));
                      v284 = (float)(v283 + v283) / v275;
                      if (v284 < v248)
                      {
                        v285 = (v252 << 32) | LODWORD(v284);
                        v286 = v261 | (v269 << 32);
                        if ((unint64_t)v251 >= v559[0])
                        {
                          v287 = (v251 - (char *)__p[0]) >> 4;
                          if ((unint64_t)(v287 + 1) >> 60)
                            std::vector<std::string>::__throw_length_error[abi:ne180100]();
                          v288 = (uint64_t)(v559[0] - (unint64_t)__p[0]) >> 3;
                          if (v288 <= v287 + 1)
                            v288 = v287 + 1;
                          if (v559[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF0)
                            v289 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v289 = v288;
                          if (v289)
                            v290 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)v559, v289);
                          else
                            v290 = 0;
                          v291 = &v290[16 * v287];
                          *(_QWORD *)v291 = v285;
                          *((_QWORD *)v291 + 1) = v286;
                          v293 = (char *)__p[0];
                          v292 = (char *)__p[1];
                          v294 = v291;
                          if (__p[1] == __p[0])
                          {
                            v254 = (uint64_t *)a9;
                          }
                          else
                          {
                            v254 = (uint64_t *)a9;
                            do
                            {
                              *((_OWORD *)v294 - 1) = *((_OWORD *)v292 - 1);
                              v294 -= 16;
                              v292 -= 16;
                            }
                            while (v292 != v293);
                            v292 = (char *)__p[0];
                          }
                          v251 = v291 + 16;
                          __p[0] = v294;
                          __p[1] = v291 + 16;
                          v559[0] = &v290[16 * v289];
                          if (v292)
                            operator delete(v292);
                          v264 = v544;
                          v262 = v547;
                        }
                        else
                        {
                          *(_QWORD *)v251 = v285;
                          *((_QWORD *)v251 + 1) = v286;
                          v251 += 16;
                          v254 = (uint64_t *)a9;
                        }
                        __p[1] = v251;
                        v263 = *v264;
                        v265 = *v262;
                      }
                    }
                  }
                  v266 = ++v267;
                }
                while (v267 < (unint64_t)((v263 - v265) >> 3));
                v242 = v535;
                v256 = *v537;
                v257 = *v539;
              }
              v258 = (v549 + 1);
              v259 = v549 + 1;
            }
            while (v258 < ((char *)v256 - (char *)v257) >> 3);
            v250 = (unsigned int **)*v242;
            v249 = v242[1];
          }
          v252 = ++v253;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v249 - (uint64_t)v250) >> 3) > v253);
        v295 = (char *)__p[0];
      }
      v296 = 126 - 2 * __clz((v251 - v295) >> 4);
      if (v251 == v295)
        v297 = 0;
      else
        v297 = v296;
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,false>((uint64_t)v295, (unint64_t)v251, v297, 1);
      v298 = (float *)__p[0];
      v550 = (float *)__p[1];
      if (__p[0] == __p[1])
      {
        v299 = 0;
        if (__p[0])
          goto LABEL_403;
      }
      else
      {
        v299 = 0;
        do
        {
          v300 = *v298;
          v301 = *((unsigned int *)v298 + 1);
          v302 = *((unsigned int *)v298 + 2);
          v303 = *((unsigned int *)v298 + 3);
          LODWORD(v554) = v301;
          v304 = (unsigned int **)*v242;
          v305 = *v242 + 24 * v301;
          v306 = *(_DWORD **)v305;
          v307 = *(_DWORD **)(v305 + 8);
          if (v306 != v307)
          {
            while (*v306 != (_DWORD)v302)
            {
              v306 += 2;
              if (v306 == v307)
              {
                v306 = v307;
                break;
              }
            }
          }
          v308 = &v304[3 * v302];
          v309 = *v308;
          v310 = v308[1];
          if (v309 != v310)
          {
            while (*v309 != (_DWORD)v303)
            {
              v309 += 2;
              if (v309 == v310)
              {
                v309 = v310;
                break;
              }
            }
          }
          v311 = &v304[3 * v303];
          v312 = *v311;
          v313 = v311[1];
          if (*v311 != v313)
          {
            while (*v312 != (_DWORD)v301)
            {
              v312 += 2;
              if (v312 == v313)
              {
                v312 = v311[1];
                break;
              }
            }
          }
          if (v306 != v307 && v309 != v310)
          {
            v314 = a9->i64[0];
            v315 = *(float32x4_t *)(a9->i64[0] + 16 * v303);
            v316 = *(float32x4_t *)(a9->i64[0] + 16 * v302);
            v317 = vsubq_f32(v316, v315);
            v318 = vmulq_f32(v317, v317);
            v318.i32[3] = 0;
            v319 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v318, v318)));
            v320 = *(float32x4_t *)(a9->i64[0] + 16 * v301);
            v321 = vsubq_f32(v320, v316);
            v322 = vmulq_f32(v321, v321);
            v322.i32[3] = 0;
            v323 = vsubq_f32(v320, v315);
            v324 = vmulq_f32(v323, v323);
            v324.i32[3] = 0;
            v325 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v322, v322)));
            v326 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v324, v324)));
            v327 = sqrtf((float)((float)((float)((float)(v319 + v325) + v326) * 0.5) - v326)* (float)((float)((float)((float)((float)(v319 + v325) + v326) * 0.5) - v325)* (float)((float)((float)((float)(v319 + v325) + v326) * 0.5)* (float)((float)((float)((float)(v319 + v325) + v326) * 0.5) - v319))));
            if (vabds_f32((float)(v327 + v327) / v319, v300) <= 0.00000001)
            {
              if (v325 < v248 || v326 < v248)
              {
                if (v325 >= v248)
                  v329 = v303;
                else
                  v329 = v302;
                v330.i64[0] = 0x3F0000003F000000;
                v330.i64[1] = 0x3F0000003F000000;
                *(float32x4_t *)(v314 + 16 * v301) = vmulq_f32(vaddq_f32(v320, *(float32x4_t *)(v314 + 16 * v329)), v330);
                v557 = v329;
                *(float32x4_t *)(*a8 + 16 * v301) = vmulq_f32(vaddq_f32(*(float32x4_t *)(*a8 + 16 * v329), *(float32x4_t *)(*a8 + 16 * v301)), v330);
                v555.i64[1] = 0;
                v556 = 0;
                v555.i64[0] = (uint64_t)&v555.i64[1];
                v331 = (unsigned int **)*v242;
                v332 = *v242 + 24 * v329;
                v334 = *(unsigned int **)v332;
                v333 = *(unsigned int **)(v332 + 8);
                if (*(unsigned int **)v332 != v333)
                {
                  do
                  {
                    if (*v334 != (_DWORD)v554)
                    {
                      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v555, v334, v334);
                      v331 = (unsigned int **)*v242;
                      v335 = *v242 + 24 * *v334;
                      v336 = *(_DWORD **)v335;
                      v337 = *(_DWORD **)(v335 + 8);
                      while (v336 != v337)
                      {
                        if (*v336 == v557)
                          *v336 = v554;
                        v336 += 2;
                      }
                    }
                    v334 += 2;
                  }
                  while (v334 != v333);
                  LODWORD(v301) = v554;
                }
                v352 = &v331[3 * v301];
                v354 = *v352;
                v353 = v352[1];
                while (v354 != v353)
                {
                  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v555, v354, v354);
                  v354 += 2;
                }
                std::__tree<unsigned int>::__erase_unique<unsigned int>((uint64_t)&v555, (unsigned int *)&v554);
                std::__tree<unsigned int>::__erase_unique<unsigned int>((uint64_t)&v555, &v557);
                v355 = (unsigned int **)*v242;
                *(_QWORD *)(*v242 + 24 * v557 + 8) = *(_QWORD *)(*v242 + 24 * v557);
                v355[3 * v554 + 1] = v355[3 * v554];
                v356 = (unint64_t *)v555.i64[0];
                if ((unint64_t *)v555.i64[0] != &v555.u64[1])
                {
                  do
                  {
                    v357 = *((unsigned int *)v356 + 7);
                    v358 = (char **)(*v242 + 24 * v554);
                    v359 = v358 + 1;
                    v360 = v358[1];
                    v362 = v358 + 2;
                    v361 = (unint64_t)v358[2];
                    if ((unint64_t)v360 >= v361)
                    {
                      v364 = (v360 - *v358) >> 3;
                      if ((unint64_t)(v364 + 1) >> 61)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v365 = v361 - (_QWORD)*v358;
                      v366 = v365 >> 2;
                      if (v365 >> 2 <= (unint64_t)(v364 + 1))
                        v366 = v364 + 1;
                      if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
                        v367 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v367 = v366;
                      if (v367)
                        v368 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v362, v367);
                      else
                        v368 = 0;
                      v369 = &v368[8 * v364];
                      *(_QWORD *)v369 = v357;
                      v363 = v369 + 8;
                      v370 = *v359;
                      v371 = *v358;
                      if (*v359 != *v358)
                      {
                        do
                        {
                          v372 = *((_DWORD *)v370 - 2);
                          v370 -= 8;
                          v373 = *((_WORD *)v370 + 2);
                          *((_DWORD *)v369 - 2) = v372;
                          v369 -= 8;
                          *((_WORD *)v369 + 2) = v373;
                        }
                        while (v370 != v371);
                        v370 = *v358;
                      }
                      *v358 = v369;
                      *v359 = v363;
                      *v362 = &v368[8 * v367];
                      if (v370)
                        operator delete(v370);
                    }
                    else
                    {
                      *(_QWORD *)v360 = v357;
                      v363 = v360 + 8;
                    }
                    *v359 = v363;
                    v374 = (unint64_t *)v356[1];
                    if (v374)
                    {
                      do
                      {
                        v375 = v374;
                        v374 = (unint64_t *)*v374;
                      }
                      while (v374);
                    }
                    else
                    {
                      do
                      {
                        v375 = (unint64_t *)v356[2];
                        v162 = *v375 == (_QWORD)v356;
                        v356 = v375;
                      }
                      while (!v162);
                    }
                    v356 = v375;
                  }
                  while (v375 != &v555.u64[1]);
                }
                std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v555, (_QWORD *)v555.i64[1]);
              }
              else
              {
                v338 = *a8;
                v339 = vaddq_f32(v315, v316);
                v340.i64[0] = 0x3F0000003F000000;
                v340.i64[1] = 0x3F0000003F000000;
                *(float32x4_t *)(v314 + 16 * v301) = vmulq_f32(v339, v340);
                v341 = vaddq_f32(*(float32x4_t *)(v338 + 16 * v303), *(float32x4_t *)(v338 + 16 * v302));
                v342 = vmulq_f32(v341, v341);
                v342.i32[3] = 0;
                v343 = vpaddq_f32(v342, v342);
                v344 = vpaddq_f32(v343, v343);
                v345 = (float32x4_t)xmmword_23C603EC0;
                if (v344.f32[0] > 0.0)
                  v345 = vdivq_f32(v341, vsqrtq_f32(v344));
                *(float32x4_t *)(*a8 + 16 * v301) = v345;
                v346 = (unsigned int **)*v242;
                v347 = *v242 + 24 * v302;
                v348 = *(char **)v347;
                v351 = *(char **)(v347 + 8);
                v350 = (const void **)(v347 + 8);
                v349 = v351;
                while (v348 != v349)
                {
                  if (*(_DWORD *)v348 == (_DWORD)v303)
                  {
                    if (v348 != v349)
                    {
                      v376 = v348 + 8;
                      if (v348 + 8 != v349)
                      {
                        do
                        {
                          if (*(_DWORD *)v376 != (_DWORD)v303)
                          {
                            v377 = *(_DWORD *)v376;
                            *((_WORD *)v348 + 2) = *((_WORD *)v376 + 2);
                            *(_DWORD *)v348 = v377;
                            v348 += 8;
                          }
                          v376 += 8;
                        }
                        while (v376 != v349);
                        v346 = (unsigned int **)*v242;
                        v349 = *(char **)(*v242 + 24 * v302 + 8);
                      }
                    }
                    if (v348 != v349)
                    {
                      v378 = (_BYTE *)*v350 - v349;
                      if (*v350 != v349)
                      {
                        memmove(v348, v349, v378 - 2);
                        v346 = (unsigned int **)*v242;
                      }
                      *v350 = &v348[v378];
                    }
                    break;
                  }
                  v348 += 8;
                }
                v379 = &v346[3 * v303];
                v380 = (char *)*v379;
                v383 = (char *)v379[1];
                v382 = (const void **)(v379 + 1);
                v381 = v383;
                while (v380 != v381)
                {
                  if (*(_DWORD *)v380 == (_DWORD)v302)
                  {
                    if (v380 != v381)
                    {
                      v384 = v380 + 8;
                      if (v380 + 8 != v381)
                      {
                        do
                        {
                          if (*(_DWORD *)v384 != (_DWORD)v302)
                          {
                            v385 = *(_DWORD *)v384;
                            *((_WORD *)v380 + 2) = *((_WORD *)v384 + 2);
                            *(_DWORD *)v380 = v385;
                            v380 += 8;
                          }
                          v384 += 8;
                        }
                        while (v384 != v381);
                        v381 = *(char **)(*v242 + 24 * v303 + 8);
                      }
                    }
                    if (v380 != v381)
                    {
                      v386 = (_BYTE *)*v382 - v381;
                      if (*v382 != v381)
                        memmove(v380, v381, v386 - 2);
                      *v382 = &v380[v386];
                    }
                    break;
                  }
                  v380 += 8;
                }
                if (v312 == v313)
                {
                  v387 = (char **)(*v242 + 24 * v554);
                  v388 = v387 + 1;
                  v389 = v387[1];
                  v391 = v387 + 2;
                  v390 = (unint64_t)v387[2];
                  if ((unint64_t)v389 >= v390)
                  {
                    v393 = (v389 - *v387) >> 3;
                    if ((unint64_t)(v393 + 1) >> 61)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    v394 = v390 - (_QWORD)*v387;
                    v395 = v394 >> 2;
                    if (v394 >> 2 <= (unint64_t)(v393 + 1))
                      v395 = v393 + 1;
                    if ((unint64_t)v394 >= 0x7FFFFFFFFFFFFFF8)
                      v396 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v396 = v395;
                    if (v396)
                      v397 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v391, v396);
                    else
                      v397 = 0;
                    v398 = &v397[8 * v393];
                    *(_QWORD *)v398 = v303;
                    v392 = v398 + 8;
                    v399 = *v388;
                    v400 = *v387;
                    if (*v388 != *v387)
                    {
                      do
                      {
                        v401 = *((_DWORD *)v399 - 2);
                        v399 -= 8;
                        v402 = *((_WORD *)v399 + 2);
                        *((_DWORD *)v398 - 2) = v401;
                        v398 -= 8;
                        *((_WORD *)v398 + 2) = v402;
                      }
                      while (v399 != v400);
                      v399 = *v387;
                    }
                    *v387 = v398;
                    *v388 = v392;
                    *v391 = &v397[8 * v396];
                    if (v399)
                      operator delete(v399);
                  }
                  else
                  {
                    *(_QWORD *)v389 = v303;
                    v392 = v389 + 8;
                  }
                  *v388 = v392;
                  v403 = (char **)(*v242 + 24 * v303);
                  v404 = v554;
                  v405 = v403 + 1;
                  v406 = v403[1];
                  v407 = (unint64_t)v403[2];
                  if ((unint64_t)v406 >= v407)
                  {
                    v409 = (v406 - *v403) >> 3;
                    if ((unint64_t)(v409 + 1) >> 61)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    v410 = v407 - (_QWORD)*v403;
                    v411 = v410 >> 2;
                    if (v410 >> 2 <= (unint64_t)(v409 + 1))
                      v411 = v409 + 1;
                    if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFF8)
                      v412 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v412 = v411;
                    if (v412)
                      v413 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v403 + 2), v412);
                    else
                      v413 = 0;
                    v414 = &v413[8 * v409];
                    *(_QWORD *)v414 = v404;
                    v408 = v414 + 8;
                    v415 = *v405;
                    v416 = *v403;
                    if (*v405 != *v403)
                    {
                      do
                      {
                        v417 = *((_DWORD *)v415 - 2);
                        v415 -= 8;
                        v418 = *((_WORD *)v415 + 2);
                        *((_DWORD *)v414 - 2) = v417;
                        v414 -= 8;
                        *((_WORD *)v414 + 2) = v418;
                      }
                      while (v415 != v416);
                      v415 = *v403;
                    }
                    *v403 = v414;
                    *v405 = v408;
                    v403[2] = &v413[8 * v412];
                    if (v415)
                      operator delete(v415);
                  }
                  else
                  {
                    *(_QWORD *)v406 = v554;
                    v408 = v406 + 8;
                  }
                  *v405 = v408;
                }
              }
              ++v534;
              v299 = 1;
              v532 = 1;
            }
          }
          v298 += 4;
        }
        while (v298 != v550);
        v298 = (float *)__p[0];
        if (__p[0])
        {
LABEL_403:
          __p[1] = v298;
          operator delete(v298);
        }
      }
    }
    while ((v299 & 1) != 0);
    __p[0] = 0;
    __p[1] = 0;
    v559[0] = 0;
    v420 = (unsigned int **)*v242;
    v419 = v242[1];
    if (v419 == *v242)
    {
      v421 = 0;
      v461 = 0;
    }
    else
    {
      v421 = 0;
      v422 = 0;
      v423 = (uint64_t *)a9;
      do
      {
        v424 = &v420[3 * v422];
        v425 = v424[1];
        v426 = *v424;
        if (v425 != *v424)
        {
          v427 = 0;
          v428 = 0;
          v429 = *v423;
          v430 = ((char *)v425 - (char *)*v424) >> 3;
          do
          {
            v431 = 0;
            v432 = 0;
            v433 = v426[2 * v427];
            v434 = a9->i64[0];
            v435 = (_DWORD **)(*v242 + 24 * v433);
            v436 = v435 + 1;
            v437 = 0.0;
            do
            {
              v438 = v426[2 * v431];
              if ((_DWORD)v438 != (_DWORD)v433)
              {
                v439 = *v435;
                v440 = (_DWORD *)*v436;
                if (*v435 != (_DWORD *)*v436)
                {
                  while (*v439 != (_DWORD)v438)
                  {
                    v439 += 2;
                    if (v439 == v440)
                      goto LABEL_420;
                  }
                }
                if (v439 != v440)
                {
                  ++v432;
                  v441 = *(float32x4_t *)(v434 + 16 * v438);
                  v442 = vsubq_f32(v441, *(float32x4_t *)(v429 + 16 * v422));
                  v443 = vmulq_f32(v442, v442);
                  v443.i32[3] = 0;
                  v444 = vsubq_f32(v441, *(float32x4_t *)(v434 + 16 * v433));
                  v445 = vmulq_f32(v444, v444);
                  v445.i32[3] = 0;
                  v437 = v437
                       + (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v443, v443)))
                               + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v445, v445))));
                }
              }
LABEL_420:
              ++v431;
            }
            while (v430 > v431);
            if (v432 == 2)
            {
              v446 = (float)(v437 * 0.25) * 1.4142;
              v447 = vsubq_f32(*(float32x4_t *)(v429 + 16 * v422), *(float32x4_t *)(v434 + 16 * v433));
              v448 = vmulq_f32(v447, v447);
              v448.i32[3] = 0;
              v449 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v448, v448)));
              v450 = v449 - v446;
              if (v446 >= v449)
                v446 = v449;
              v451 = fabsf(v450 / v446);
              if ((unint64_t)v421 >= v559[0])
              {
                v452 = (char *)__p[0];
                v453 = 0xAAAAAAAAAAAAAAABLL * ((v421 - (char *)__p[0]) >> 2);
                v454 = v453 + 1;
                if (v453 + 1 > 0x1555555555555555)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * ((uint64_t)(v559[0] - (unint64_t)__p[0]) >> 2) > v454)
                  v454 = 0x5555555555555556 * ((uint64_t)(v559[0] - (unint64_t)__p[0]) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v559[0] - (unint64_t)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v455 = 0x1555555555555555;
                else
                  v455 = v454;
                if (v455)
                {
                  v456 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>((uint64_t)v559, v455);
                  v452 = (char *)__p[0];
                  v421 = (char *)__p[1];
                }
                else
                {
                  v456 = 0;
                }
                v457 = &v456[12 * v453];
                *(float *)v457 = v451;
                *((_DWORD *)v457 + 1) = v422;
                *((_DWORD *)v457 + 2) = v433;
                v458 = v457;
                if (v421 != v452)
                {
                  do
                  {
                    v459 = *(_QWORD *)(v421 - 12);
                    v421 -= 12;
                    v460 = *((_DWORD *)v421 + 2);
                    *(_QWORD *)(v458 - 12) = v459;
                    v458 -= 12;
                    *((_DWORD *)v458 + 2) = v460;
                  }
                  while (v421 != v452);
                  v452 = (char *)__p[0];
                }
                v421 = v457 + 12;
                __p[0] = v458;
                __p[1] = v457 + 12;
                v559[0] = &v456[12 * v455];
                if (v452)
                  operator delete(v452);
              }
              else
              {
                *(float *)v421 = v451;
                *((_DWORD *)v421 + 1) = v422;
                *((_DWORD *)v421 + 2) = v433;
                v421 += 12;
              }
              __p[1] = v421;
              v425 = v424[1];
              v426 = *v424;
            }
            v430 = ((char *)v425 - (char *)v426) >> 3;
            v427 = ++v428;
          }
          while (v430 > v428);
          v420 = (unsigned int **)*v242;
          v419 = v242[1];
          v423 = (uint64_t *)a9;
        }
        ++v422;
      }
      while (v422 < 0xAAAAAAAAAAAAAAABLL * ((v419 - (uint64_t)v420) >> 3));
      v461 = __p[0];
    }
    v462 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v421 - v461) >> 2));
    if (v421 == v461)
      v463 = 0;
    else
      v463 = v462;
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *,false>((uint64_t)v461, (unint64_t)v421, v463, 1);
    v465 = __p[0];
    v464 = __p[1];
    if (__p[0] != __p[1])
    {
      do
      {
        v466 = v465[1];
        v467 = *v242;
        v468 = (_QWORD *)(*v242 + 24 * v466);
        v470 = (const void **)(v468 + 1);
        v469 = (char *)v468[1];
        if (v469 != (char *)*v468)
        {
          v471 = 0;
          v472 = 0;
          v473 = v465[2];
          v474 = (_QWORD *)(v467 + 24 * v473);
          v475 = (_DWORD *)*v474;
          v476 = (_DWORD *)v474[1];
          do
          {
            v477 = v475;
            if (v475 != v476)
            {
              v477 = v475;
              while (*v477 != *(_DWORD *)(*v468 + 8 * v471))
              {
                v477 += 2;
                if (v477 == v476)
                {
                  v477 = v476;
                  break;
                }
              }
            }
            if (v477 != v476)
              ++v472;
            ++v471;
          }
          while ((uint64_t)&v469[-*v468] >> 3 > (unint64_t)v471);
          v478 = (char *)*v468;
          if (v472 == 2)
          {
            while (*(_DWORD *)v478 != v473)
            {
              v478 += 8;
              if (v478 == v469)
                goto LABEL_474;
            }
            if (v478 != v469)
            {
              v479 = v478 + 8;
              if (v478 + 8 != v469)
              {
                do
                {
                  if (*(_DWORD *)v479 != v473)
                  {
                    v480 = *(_DWORD *)v479;
                    *((_WORD *)v478 + 2) = *((_WORD *)v479 + 2);
                    *(_DWORD *)v478 = v480;
                    v478 += 8;
                  }
                  v479 += 8;
                }
                while (v479 != v469);
                v467 = *v242;
                v469 = *(char **)(*v242 + 24 * v466 + 8);
              }
            }
            if (v478 != v469)
            {
              v481 = v478;
              v482 = (_BYTE *)*v470 - v469;
              if (*v470 != v469)
              {
                memmove(v478, v469, v482 - 2);
                v467 = *v535;
              }
              *v470 = (char *)v481 + v482;
              v242 = v535;
            }
LABEL_474:
            v483 = v467 + 24 * v473;
            v484 = *(char **)v483;
            v487 = *(char **)(v483 + 8);
            v486 = (const void **)(v483 + 8);
            v485 = v487;
            while (v484 != v485)
            {
              if (*(_DWORD *)v484 == v466)
              {
                if (v484 != v485)
                {
                  v488 = v484 + 8;
                  if (v484 + 8 != v485)
                  {
                    do
                    {
                      if (*(_DWORD *)v488 != v466)
                      {
                        v489 = *(_DWORD *)v488;
                        *((_WORD *)v484 + 2) = *((_WORD *)v488 + 2);
                        *(_DWORD *)v484 = v489;
                        v484 += 8;
                      }
                      v488 += 8;
                    }
                    while (v488 != v485);
                    v485 = *(char **)(*v242 + 24 * v473 + 8);
                  }
                }
                if (v484 != v485)
                {
                  v490 = (_BYTE *)*v486 - v485;
                  if (*v486 != v485)
                    memmove(v484, v485, v490 - 2);
                  *v486 = &v484[v490];
                }
                break;
              }
              v484 += 8;
            }
            ++v530;
            v532 = 1;
          }
        }
        v465 += 3;
      }
      while (v465 != v464);
      v465 = __p[0];
    }
    if (v465)
    {
      __p[1] = v465;
      operator delete(v465);
    }
  }
  while ((v532 & 1) != 0);
  *a10 = v530;
  *a11 = v534;
  v491 = (unsigned int **)*v242;
  v492 = (unsigned int **)v242[1];
  if ((unsigned int **)*v242 != v492)
  {
    do
    {
      __p[1] = 0;
      v559[0] = 0;
      __p[0] = &__p[1];
      v556 = 0;
      v555 = 0uLL;
      std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve((char **)&v555, ((char *)v491[1] - (char *)*v491) >> 3);
      v493 = *v491;
      v494 = v491[1];
      while (v493 != v494)
      {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)__p, v493, v493);
        if ((v495 & 1) != 0)
        {
          v496 = v555.i64[1];
          if (v555.i64[1] >= (unint64_t)v556)
          {
            v498 = (v555.i64[1] - v555.i64[0]) >> 3;
            if ((unint64_t)(v498 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v499 = (uint64_t)&v556[-v555.i64[0]] >> 2;
            if (v499 <= v498 + 1)
              v499 = v498 + 1;
            if ((unint64_t)&v556[-v555.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
              v500 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v500 = v499;
            if (v500)
              v501 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v556, v500);
            else
              v501 = 0;
            v502 = &v501[8 * v498];
            *(_QWORD *)v502 = *(_QWORD *)v493;
            v497 = v502 + 8;
            v503 = (_WORD *)v555.i64[1];
            v504 = (_WORD *)v555.i64[0];
            if (v555.i64[1] != v555.i64[0])
            {
              do
              {
                v505 = *((_DWORD *)v503 - 2);
                v503 -= 4;
                v506 = v503[2];
                *((_DWORD *)v502 - 2) = v505;
                v502 -= 8;
                *((_WORD *)v502 + 2) = v506;
              }
              while (v503 != v504);
              v503 = (_WORD *)v555.i64[0];
            }
            v555.i64[0] = (uint64_t)v502;
            v555.i64[1] = (uint64_t)v497;
            v556 = &v501[8 * v500];
            if (v503)
              operator delete(v503);
          }
          else
          {
            *(_QWORD *)v555.i64[1] = *(_QWORD *)v493;
            v497 = (char *)(v496 + 8);
          }
          v555.i64[1] = (uint64_t)v497;
        }
        v493 += 2;
      }
      std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit((uint64_t)&v555);
      v507 = *v491;
      *(int32x4_t *)v491 = v555;
      v508 = v491[2];
      v491[2] = (unsigned int *)v556;
      v555.i64[0] = (uint64_t)v507;
      v556 = (char *)v508;
      if (v507)
      {
        v555.i64[1] = (uint64_t)v507;
        operator delete(v507);
      }
      std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
      v491 += 3;
    }
    while (v491 != v492);
  }
  v509 = (uint64_t *)a9;
  if ((_DWORD)v529)
  {
    v510 = 0;
    v511 = 8;
    do
    {
      *(_OWORD *)__p = 0u;
      v555 = 0u;
      v554 = *(_OWORD *)(*v509 + v510);
      v512 = (float *)(*a8 + v510);
      v513 = *v512;
      v514 = v512[1];
      v515 = v512[2];
      v516 = v515 * v515;
      if (fabsf(*v512) <= fabsf(v514))
      {
        v521 = 1.0 / sqrtf(v516 + (float)(v514 * v514));
        *(float *)&v522 = v515 * v521;
        v519 = -(float)(v514 * v521);
        v520.i32[0] = 0;
        v520.i32[3] = 0;
        v520.i32[1] = v522;
      }
      else
      {
        v517 = 1.0 / sqrtf(v516 + (float)(v513 * v513));
        *(float *)&v518 = v515 * v517;
        v519 = -(float)(v513 * v517);
        v520.i32[3] = 0;
        v520.i64[0] = v518;
      }
      *(float *)&v520.i32[2] = v519;
      v555 = v520;
      *(float32x4_t *)__p = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v520, (int32x4_t)vextq_s8((int8x16_t)v520, (int8x16_t)v520, 0xCuLL)), v520), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)v512, *(int8x16_t *)v512, 4uLL), *(int32x4_t *)v512)), (float32x4_t)vzip2q_s32(vzip1q_s32(*(int32x4_t *)v512, (int32x4_t)vextq_s8(*(int8x16_t *)v512, *(int8x16_t *)v512, 0xCuLL)), *(int32x4_t *)v512), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v520, (int8x16_t)v520, 4uLL), v520));
      v523 = (unsigned int **)(*v535 + v511);
      v524 = *(v523 - 1);
      v525 = *v523;
      v526 = 126 - 2 * __clz(((char *)*v523 - (char *)v524) >> 3);
      v553[0] = (float32x4_t *)&v555;
      v553[1] = (float32x4_t *)__p;
      v509 = (uint64_t *)a9;
      v553[2] = (float32x4_t *)&v554;
      v553[3] = a9;
      if (v525 == v524)
        v527 = 0;
      else
        v527 = v526;
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,false>(v524, v525, v553, v527, 1);
      v510 += 16;
      v511 += 24;
    }
    while (16 * v529 != v510);
  }
  if (v560[0])
  {
    v560[1] = v560[0];
    operator delete(v560[0]);
  }
  if (v561[0])
  {
    v561[1] = v561[0];
    operator delete(v561[0]);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)v563, *(_QWORD **)&v563[2]);
  if (__x.__begin_)
  {
    __x.__end_ = __x.__begin_;
    operator delete(__x.__begin_);
  }
  if (v566.__begin_)
  {
    v566.__end_ = v566.__begin_;
    operator delete(v566.__begin_);
  }
  cv3d::cv::gess::internal::DisjointSets<unsigned int>::~DisjointSets((uint64_t)&v567);
  if (v570)
  {
    *(_QWORD *)&v571 = v570;
    operator delete(v570);
  }
  if (v572)
    operator delete(v572);
  return 1;
}

void sub_23C56CA94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(_QWORD *)(v1 - 192) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 176);
  if (v4)
    operator delete(v4);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<cv3d::cv::gess::internal::LabelledLink>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  __int16 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[8 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 2);
        v10 -= 8;
        v14 = *((_WORD *)v10 + 2);
        *((_DWORD *)v12 - 2) = v13;
        v12 -= 8;
        *((_WORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<cv3d::cv::gess::internal::LabelledLink>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  __int16 v14;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(_BYTE **)a1;
      v8 = *(_WORD **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(_WORD **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_DWORD *)v8 - 2);
          v8 -= 4;
          v14 = v8[2];
          *(_DWORD *)(v12 - 8) = v13;
          v12 -= 8;
          *(_WORD *)(v12 + 4) = v14;
        }
        while (v8 != (_WORD *)v4);
        v4 = *(_BYTE **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

unint64_t cv3d::cv::gess::internal::DisjointSets<unsigned int>::Unite(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  int v14;

  v4 = a2;
  v5 = a3;
  v6 = *a1;
  do
  {
    result = v4;
    v4 = *(unsigned int *)(v6 + 4 * v4);
  }
  while (result != v4);
  *(_DWORD *)(v6 + 4 * a2) = result;
  do
  {
    v8 = v5;
    v5 = *(unsigned int *)(v6 + 4 * v5);
  }
  while (v8 != v5);
  *(_DWORD *)(v6 + 4 * a3) = v8;
  if (result != v8)
  {
    v9 = a1[3];
    v10 = *(_DWORD *)(v9 + 4 * result);
    v11 = *(_DWORD *)(v9 + 4 * v8);
    v12 = result >= v8;
    if (result < v8)
      v13 = v8;
    else
      v13 = result;
    if (result < v8)
    {
      v14 = *(_DWORD *)(v9 + 4 * v8);
    }
    else
    {
      result = v8;
      v14 = v10;
    }
    if (v12)
      v10 = v11;
    *(_DWORD *)(v6 + 4 * v13) = result;
    if (v14 == v10)
      ++*(_DWORD *)(v9 + 4 * result);
  }
  return result;
}

uint64_t std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::shrink_to_fit(uint64_t result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = *(_QWORD *)result;
  v2 = *(int64x2_t *)(result + 8);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64(*(_QWORD *)result)), 3uLL);
  v4 = 0xAAAAAAAAAAAAAAABLL * v3.i64[0];
  v5 = v4;
  if (0xAAAAAAAAAAAAAAABLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = result + 16;
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v4);
    }
    v10 = v8;
    v11 = &v8[24 * v5];
    v12 = v11;
    v13 = &v8[24 * v9];
    std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__swap_out_circular_buffer(v6, &v10);
    return std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v10);
  }
  return result;
}

void sub_23C56CF88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23C56CF78);
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t cv3d::cv::gess::internal::DisjointSets<unsigned int>::~DisjointSets(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t cv3d::cv::gess::internal::ExtractQuadFaces(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _WORD *v36;
  _WORD *v37;
  const void **v38;
  _WORD *v39;
  _WORD *v40;
  BOOL v41;
  _WORD *v42;
  int v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  _DWORD *v51;
  void *__p;
  void *v53;
  uint64_t v54;
  void *v55;
  _BYTE *v56;
  uint64_t v57;
  unsigned int *v58[5];
  uint64_t v59[3];
  uint64_t *v60;
  uint64_t v61;

  v11 = (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  v61 = v11;
  v12 = v11;
  std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(a4, v11);
  v51 = a6;
  *a6 = 0;
  v60 = a1;
  memset(v59, 0, sizeof(v59));
  v58[0] = (unsigned int *)&v61;
  v58[1] = (unsigned int *)&v61 + 1;
  v58[2] = a4;
  v58[3] = (unsigned int *)a2;
  v58[4] = (unsigned int *)a3;
  v55 = 0;
  v56 = 0;
  v13 = 3;
  v57 = 0;
  do
  {
    while (!(_DWORD)v11)
    {
      if (++v13 == 9)
      {
        v18 = 0;
        goto LABEL_59;
      }
    }
    v14 = 0;
    v15 = *a1;
    do
    {
      if (*(_QWORD *)(v15 + 24 * v14 + 8) != *(_QWORD *)(v15 + 24 * v14))
      {
        LODWORD(v16) = 0;
        do
        {
          if ((cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_2::operator()(&v60, v14, v16, v13, (uint64_t)&v55) & 1) != 0)
          {
            __p = 0;
            v53 = 0;
            v54 = 0;
            cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_0::operator()(v58, &v55, (char **)&__p);
            v17 = __p;
            if (__p != v53)
            {
              std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](v59, (uint64_t)&__p);
              v17 = __p;
            }
            if (v17)
            {
              v53 = v17;
              operator delete(v17);
            }
          }
          v16 = (v16 + 1);
          v15 = *a1;
        }
        while (v16 < (uint64_t)(*(_QWORD *)(*a1 + 24 * v14 + 8) - *(_QWORD *)(*a1 + 24 * v14)) >> 3);
      }
      ++v14;
    }
    while (v14 != v11);
    ++v13;
  }
  while (v13 != 9);
  v19 = 0;
  v20 = *a1;
  do
  {
    v21 = *(_QWORD *)(v20 + 24 * v19);
    v22 = *(_QWORD *)(v20 + 24 * v19 + 8) - v21;
    if (v22)
    {
      v23 = 0;
      v24 = 0;
      v25 = v22 >> 3;
      do
      {
        if (!*(_BYTE *)(v21 + 8 * v23 + 4))
        {
          v26 = *(_QWORD *)(v20 + 24 * *(unsigned int *)(v21 + 8 * v23));
          v27 = *(_QWORD *)(v20 + 24 * *(unsigned int *)(v21 + 8 * v23) + 8);
          v28 = v27 - v26;
          if (v27 == v26)
LABEL_68:
            __assert_rtn("ExtractQuadFaces", "QuadExtract.cpp", 815, "found");
          v29 = 0;
          v30 = v28 >> 3;
          v31 = 1;
          while (v19 != *(_DWORD *)(v26 + 8 * v29))
          {
            v29 = v31;
            if (v30 <= v31++)
              goto LABEL_68;
          }
          v33 = v26 + 8 * v29;
          if (*(_BYTE *)(v33 + 4))
          {
            *(_BYTE *)(v21 + 8 * v23 + 5) = 1;
            *(_BYTE *)(v33 + 5) = 1;
          }
        }
        v23 = ++v24;
      }
      while (v25 > v24);
    }
    ++v19;
  }
  while (v19 != v11);
  v34 = 0;
  do
  {
    v35 = (_QWORD *)(*a1 + 24 * v34);
    v36 = (_WORD *)*v35;
    v39 = (_WORD *)v35[1];
    v38 = (const void **)(v35 + 1);
    v37 = v39;
    if (v36 != v39)
    {
      v40 = v36 + 4;
      while (*((_BYTE *)v40 - 3))
      {
        v41 = v40 == v37;
        v40 += 4;
        if (v41)
          goto LABEL_46;
      }
      v42 = v40 - 4;
      if (v40 - 4 != v37 && v40 != v37)
      {
        do
        {
          if (*((_BYTE *)v40 + 5))
          {
            v43 = *(_DWORD *)v40;
            v42[2] = v40[2];
            *(_DWORD *)v42 = v43;
            v42 += 4;
          }
          v40 += 4;
        }
        while (v40 != v37);
        v37 = *(_WORD **)(*a1 + 24 * v34 + 8);
      }
      if (v42 != v37)
      {
        v44 = (_BYTE *)*v38 - (_BYTE *)v37;
        if (*v38 != v37)
          memmove(v42, v37, v44 - 2);
        *v38 = (char *)v42 + v44;
      }
    }
LABEL_46:
    ++v34;
  }
  while (v34 != v12);
  v45 = 0;
  v18 = 0;
  v46 = *a1;
  do
  {
    if (*(_QWORD *)(v46 + 24 * v45 + 8) != *(_QWORD *)(v46 + 24 * v45))
    {
      LODWORD(v47) = 0;
      do
      {
        if ((cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_2::operator()(&v60, v45, v47, 0, (uint64_t)&v55) & 1) != 0&& (unint64_t)(v56 - (_BYTE *)v55) <= 0x30)
        {
          __p = 0;
          v53 = 0;
          v54 = 0;
          cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_0::operator()(v58, &v55, (char **)&__p);
          v48 = __p;
          if (__p != v53)
          {
            std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](v59, (uint64_t)&__p);
            v48 = __p;
          }
          if (v48)
          {
            v53 = v48;
            operator delete(v48);
          }
          ++v18;
        }
        v47 = (v47 + 1);
        v46 = *a1;
      }
      while (v47 < (uint64_t)(*(_QWORD *)(*a1 + 24 * v45 + 8) - *(_QWORD *)(*a1 + 24 * v45)) >> 3);
    }
    ++v45;
  }
  while (v45 != v12);
LABEL_59:
  *v51 = v18;
  if (HIDWORD(v61) != (uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 4)
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(a4, HIDWORD(v61));
  v49 = v61;
  if (v61 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a3, v61);
    v49 = v61;
  }
  if (v49 != (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4)
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a2, v49);
  std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::shrink_to_fit((uint64_t *)a4);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::shrink_to_fit(a3);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::shrink_to_fit(a2);
  cv3d::cv::gess::internal::ReorderMesh((uint64_t *)a4, (void **)a2, (void **)a3);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  v58[0] = (unsigned int *)v59;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)v58);
  return 1;
}

void sub_23C56D490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete(__p);
  a17 = &a22;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 16 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__append(a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_2::operator()(uint64_t **a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int *v28;
  int v29;
  char *v30;
  uint64_t result;
  unsigned int v32;
  uint64_t v33;

  v8 = a2;
  v9 = *(unint64_t **)a5;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  v10 = (_QWORD *)(a5 + 16);
  v11 = *(_QWORD *)(**a1 + 24 * a2);
  v12 = a2;
  do
  {
    if (*(_BYTE *)(v11 + 8 * a3 + 4) || a4 && a4 <= ((uint64_t)v9 - *(_QWORD *)a5) >> 3)
      goto LABEL_34;
    v13 = a3;
    v14 = v12 | ((unint64_t)a3 << 32);
    if ((unint64_t)v9 >= *v10)
    {
      v15 = ((uint64_t)v9 - *(_QWORD *)a5) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v16 = *v10 - *(_QWORD *)a5;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v10, v18);
      else
        v19 = 0;
      v20 = (unint64_t *)&v19[8 * v15];
      *v20 = v14;
      v9 = v20 + 1;
      v22 = *(unint64_t **)a5;
      v21 = *(unint64_t **)(a5 + 8);
      if (v21 != *(unint64_t **)a5)
      {
        do
        {
          v23 = *--v21;
          *--v20 = v23;
        }
        while (v21 != v22);
        v21 = *(unint64_t **)a5;
      }
      *(_QWORD *)a5 = v20;
      *(_QWORD *)(a5 + 8) = v9;
      *(_QWORD *)(a5 + 16) = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v9++ = v14;
    }
    v24 = **a1;
    v25 = *(unsigned int *)(*(_QWORD *)(v24 + 24 * v12) + 8 * v13);
    *(_QWORD *)(a5 + 8) = v9;
    v11 = *(_QWORD *)(v24 + 24 * v25);
    v26 = (unint64_t)(*(_QWORD *)(v24 + 24 * v25 + 8) - v11) >> 3;
    if (!(_DWORD)v26)
      goto LABEL_34;
    v27 = 0;
    v28 = *(int **)(v24 + 24 * v25);
    while (1)
    {
      v29 = *v28;
      v28 += 2;
      if (v29 == v12)
        break;
      if ((_DWORD)v26 == ++v27)
        goto LABEL_34;
    }
    if ((_DWORD)v26 == 1)
      goto LABEL_34;
    a3 = (v27 + 1) % v26;
    v12 = v25;
  }
  while (v25 != v8);
  v30 = *(char **)a5;
  if (a4 && a4 != ((char *)v9 - v30) >> 3)
  {
LABEL_34:
    result = 0;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
    return result;
  }
  if (v30 == (char *)v9)
    return 1;
  result = 1;
  do
  {
    v32 = *(_DWORD *)v30;
    v33 = *((unsigned int *)v30 + 1);
    v30 += 8;
    *(_BYTE *)(*(_QWORD *)(v24 + 24 * v32) + 8 * v33 + 4) = 1;
  }
  while (v30 != (char *)v9);
  return result;
}

void cv3d::cv::gess::internal::ExtractQuadFaces(std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>> &,float const&,unsigned int &)::$_0::operator()(unsigned int **a1, _QWORD *a2, char **a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  char **v6;
  unint64_t v8;
  unsigned int **v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  float v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  double v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *i;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float32x4_t v49;
  unsigned int v50;
  unsigned int *v51;
  float32x4_t v52;
  unsigned int v53;
  float32x4_t v54;
  uint64_t v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  _DWORD *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  float32x4_t v86;
  float32x4_t v89;

  a3[1] = *a3;
  v3 = (char *)*a2;
  v4 = (char *)a2[1];
  v5 = (unint64_t)&v4[-*a2];
  if (v5 >= 0x11)
  {
    v6 = (char **)a2;
    while (v5 != 32)
    {
      v8 = (uint64_t)v5 >> 3;
      v9 = a1;
      v10 = a1[3];
      v11 = *(_QWORD *)v10;
      if (v5 < 0x29)
      {
        v49 = 0uLL;
        v50 = 1;
        v51 = (unsigned int *)v3;
        v52 = 0uLL;
        do
        {
          v53 = *v51;
          v51 += 2;
          v49 = vaddq_f32(v49, *(float32x4_t *)(v11 + 16 * v53));
          v54 = *(float32x4_t *)(*(_QWORD *)a1[4] + 16 * v53);
          v52 = vaddq_f32(v52, v54);
        }
        while (v8 > v50++);
        v56 = **a1;
        v57 = (v56 + 1);
        **a1 = v57;
        if (v57 > (*((_QWORD *)v10 + 1) - v11) >> 4)
        {
          v89 = v52;
          v86 = v49;
          std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)v10, v57);
          std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a1[4], **a1);
          v49 = v86;
          v52 = v89;
          v3 = (char *)*a2;
          v4 = (char *)a2[1];
          v11 = *(_QWORD *)a1[3];
        }
        v54.f32[0] = (float)(unint64_t)((v4 - v3) >> 3);
        *(float32x4_t *)(v11 + 16 * v56) = vdivq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0));
        v58 = vmulq_f32(v52, v52);
        v58.i32[3] = 0;
        v59 = vpaddq_f32(v58, v58);
        v60 = vpaddq_f32(v59, v59);
        if (v60.f32[0] <= 0.0)
          v61 = (float32x4_t)xmmword_23C603EC0;
        else
          v61 = vdivq_f32(v52, vsqrtq_f32(v60));
        *(float32x4_t *)(*(_QWORD *)a1[4] + 16 * v56) = v61;
        v62 = (char *)*a2;
        v63 = a2[1];
        if (v63 != *a2)
        {
          v64 = 0;
          v65 = 0;
          v66 = (float)v56;
          do
          {
            v68 = v9[1];
            v67 = v9[2];
            v69 = *v68;
            v70 = (v69 + 1);
            *v68 = v70;
            v71 = *(_QWORD *)v67;
            if (v70 > (uint64_t)(*((_QWORD *)v67 + 1) - *(_QWORD *)v67) >> 4)
            {
              std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(v67, v70);
              v62 = (char *)*a2;
              v63 = a2[1];
              v71 = *(_QWORD *)v9[2];
            }
            v72 = (float)*(unsigned int *)&v62[8 * v64];
            v64 = (v65 + 1);
            v73 = (float)*(unsigned int *)&v62[8 * (v64 % ((v63 - (uint64_t)v62) >> 3))];
            v74 = (_DWORD *)(v71 + 16 * v69);
            *v74 = v72;
            v74[1] = v73;
            v74[2] = v66;
            v74[3] = v66;
            v76 = a3[1];
            v75 = (unint64_t)a3[2];
            if ((unint64_t)v76 >= v75)
            {
              v78 = *a3;
              v79 = (v76 - *a3) >> 2;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v81 = v75 - (_QWORD)v78;
              if (v81 >> 1 > v80)
                v80 = v81 >> 1;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                v82 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v82 = v80;
              if (v82)
              {
                v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v82);
                v78 = *a3;
                v76 = a3[1];
              }
              else
              {
                v83 = 0;
              }
              v84 = &v83[4 * v79];
              *(_DWORD *)v84 = v69;
              v77 = v84 + 4;
              while (v76 != v78)
              {
                v85 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v84 - 1) = v85;
                v84 -= 4;
              }
              *a3 = v84;
              a3[1] = v77;
              a3[2] = &v83[4 * v82];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_DWORD *)v76 = v69;
              v77 = v76 + 4;
            }
            a3[1] = v77;
            v62 = (char *)*a2;
            v63 = a2[1];
            ++v65;
          }
          while (v64 < (v63 - *a2) >> 3);
        }
        return;
      }
      v12 = 0;
      v13 = -1;
      v14 = INFINITY;
      do
      {
        v15 = 0;
        v16 = 0.0;
        do
        {
          v17 = v12 + v15;
          v18 = *(float32x4_t *)(v11 + 16 * *(unsigned int *)&v3[8 * ((v17 + 1) % v8)]);
          v19 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *(unsigned int *)&v3[8 * (v17 % v8)]), v18);
          v20 = vmulq_f32(v19, v19);
          v20.i32[3] = 0;
          v21 = vpaddq_f32(v20, v20);
          v22 = vpaddq_f32(v21, v21);
          v23 = (float32x4_t)xmmword_23C603EC0;
          if (v22.f32[0] > 0.0)
            v23 = vdivq_f32(v19, vsqrtq_f32(v22));
          v24 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *(unsigned int *)&v3[8 * ((v17 + 2) % v8)]), v18);
          v25 = vmulq_f32(v24, v24);
          v25.i32[3] = 0;
          v26 = vpaddq_f32(v25, v25);
          v27 = vpaddq_f32(v26, v26);
          v28 = (float32x4_t)xmmword_23C603EC0;
          if (v27.f32[0] > 0.0)
            v28 = vdivq_f32(v24, vsqrtq_f32(v27));
          v29 = vmulq_f32(v23, v28);
          v29.i32[3] = 0;
          v30 = (float)(acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))) * 180.0) / 3.14159265;
          v31 = fabs(v30 + -90.0) + v16;
          v16 = v31;
          ++v15;
        }
        while (v15 != 4);
        if (v14 > v16)
        {
          v13 = v12;
          v14 = v31;
        }
        ++v12;
      }
      while (v8 > v12);
      a1 = v9;
      v33 = v9[1];
      v32 = v9[2];
      v34 = *v33;
      v35 = (v34 + 1);
      *v33 = v35;
      v36 = *(_QWORD *)v32;
      v6 = (char **)a2;
      if (v35 > (uint64_t)(*((_QWORD *)v32 + 1) - *(_QWORD *)v32) >> 4)
      {
        std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(v32, v35);
        v3 = (char *)*a2;
        v4 = (char *)a2[1];
        v36 = *(_QWORD *)a1[2];
      }
      v37 = 0;
      v38 = v36 + 16 * v34;
      do
      {
        v39 = &v3[8 * ((v13 + v37) % (unint64_t)((v4 - v3) >> 3))];
        *(_DWORD *)(v38 + 4 * v37) = *(_DWORD *)v39;
        if ((_DWORD)v37 && (_DWORD)v37 != 3)
          *(_DWORD *)v39 = -1;
        ++v37;
      }
      while (v37 != 4);
      if (v3 != v4)
      {
        while (*(_DWORD *)v3 != -1)
        {
          v3 += 8;
          if (v3 == v4)
          {
            v3 = v4;
            goto LABEL_32;
          }
        }
        if (v3 != v4)
        {
          for (i = v3 + 8; i != v4; i += 8)
          {
            if (*(_DWORD *)i != -1)
            {
              *(_DWORD *)v3 = *(_DWORD *)i;
              *((_DWORD *)v3 + 1) = *((_DWORD *)i + 1);
              v3 += 8;
            }
          }
        }
      }
LABEL_32:
      std::vector<std::pair<unsigned int,unsigned int>>::erase((uint64_t)a2, v3, v4);
      v3 = (char *)*a2;
      v4 = (char *)a2[1];
      v5 = (unint64_t)&v4[-*a2];
      if (v5 <= 0x10)
        return;
    }
    v42 = a1[1];
    v41 = a1[2];
    v43 = *v42;
    v44 = (v43 + 1);
    *v42 = v44;
    v45 = *(_QWORD *)v41;
    if (v44 > (uint64_t)(*((_QWORD *)v41 + 1) - *(_QWORD *)v41) >> 4)
    {
      std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::resize(v41, v44);
      v3 = *v6;
      v45 = *(_QWORD *)a1[2];
    }
    v46 = 0;
    v47 = v45 + 16 * v43;
    do
    {
      v48 = *(_DWORD *)v3;
      v3 += 8;
      *(_DWORD *)(v47 + v46) = v48;
      v46 += 4;
    }
    while (v46 != 16);
  }
}

void std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::shrink_to_fit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *__p;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v3 = a1[2];
  v2 = (uint64_t)(a1 + 2);
  v4 = *a1;
  v5 = a1[1];
  v6 = (v5 - *a1) >> 4;
  if (v6 < (v3 - *a1) >> 4)
  {
    v13 = v2;
    if (v5 == v4)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v2, v6);
    }
    __p = v7;
    v10 = &v7[16 * v6];
    v11 = v10;
    v12 = &v7[16 * v8];
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(a1, &__p);
    if (v11 != v10)
      v11 += (v10 - v11 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_23C56DD2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23C56DD1CLL);
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 4;
  if (v6 < (v3 - (uint64_t)v4) >> 4)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 16 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[16 * v6];
      v11 = &v7[16 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_OWORD *)v8 - 1);
          v8 -= 16;
          *(_OWORD *)(v12 - 16) = v13;
          v12 -= 16;
        }
        while (v8 != v4);
        v4 = *(char **)a1;
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

BOOL cv3d::cv::gess::internal::ExtractQuadFacesByDiagonal(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v21;
  int v22;
  unsigned int v23;

  v2 = *a2;
  if (*a2 != -1)
  {
    v22 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>(a1, &v22, (unsigned __int8 *)__p);
    if (v21 < 0)
      operator delete(__p[0]);
    v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
    LOBYTE(v23) = 0;
    std::vector<BOOL>::vector(__p, v4, (unsigned __int8 *)&v23);
    if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128))
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = v5 >> 6;
        v8 = 1 << v5;
        if ((*((_QWORD *)__p[0] + (v5 >> 6)) & (1 << v5)) == 0)
        {
          v23 = v6 - 1;
          if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(a1 + 104, &v23) + 12) != -1)
          {
            *((_QWORD *)__p[0] + v7) |= v8;
            v23 = v6 - 1;
            v10 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v23);
            *(_QWORD *)((char *)__p[0] + (((unint64_t)*v10 >> 3) & 0x1FFFFFF8)) |= 1 << *v10;
            v23 = v6 - 1;
            v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v5);
            if ((*v11 & v12) == 0)
            {
              v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v23);
              v14 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v13);
              if ((*v14 & v16) == 0)
              {
                v23 = *a2;
                v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), &v23, v15);
                if (*(_QWORD *)(v17 + 48) <= v5)
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                if ((*(_QWORD *)(*(_QWORD *)(v17 + 40) + 8 * v7) & v8) != 0)
                {
                  v23 = v6 - 1;
                  cv3d::cv::gess::internal::FaceMergingByDiagonal(a1, &v23, &v22);
                }
              }
            }
          }
        }
        v5 = v6;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v6++);
    }
    if (__p[0])
      operator delete(__p[0]);
  }
  return v2 != -1;
}

void sub_23C56E070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FinalFaceMergingByDiagonal(uint64_t a1, float *a2, int *a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  _BYTE *v18;
  _BOOL4 v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  unsigned int *v25;
  float v26;
  unsigned int *v27;
  uint64_t v28;
  float v29;
  _BYTE v32[12];
  uint64_t v33;
  uint64_t v34;
  void *__p;
  _BYTE *v36;
  uint64_t v37;
  void *v38;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v38, v5, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 136) != *(_QWORD *)(a1 + 128))
  {
    v6 = 0;
    v7 = 1;
    do
    {
      if ((*((_QWORD *)v38 + (v6 >> 6)) & (1 << v6)) == 0)
      {
        LODWORD(__p) = v7 - 1;
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(a1 + 104, (unsigned int *)&__p) + 12) != -1)
        {
          *((_QWORD *)v38 + (v6 >> 6)) |= 1 << v6;
          LODWORD(__p) = v7 - 1;
          v9 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
          *(_QWORD *)((char *)v38 + (((unint64_t)*v9 >> 3) & 0x1FFFFFF8)) |= 1 << *v9;
          LODWORD(__p) = v7 - 1;
          v10 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v6);
          if ((*v10 & v11) == 0)
          {
            v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
            v13 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v12);
            if ((*v13 & v14) == 0)
            {
              __p = 0;
              v36 = 0;
              v37 = 0;
              *(_DWORD *)&v32[8] = 0;
              v33 = 0;
              v34 = 0;
              *(_QWORD *)v32 = v7 - 1;
              v15 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v32);
              cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges(a1, (unsigned int *)(v15 + 16), &__p);
              *(_DWORD *)v32 = v7 - 1;
              v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)v32);
              v17 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v16);
              cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges(a1, (unsigned int *)(v17 + 16), (void **)&v32[4]);
              v18 = __p;
              v20 = v36 - (_BYTE *)__p == 12 && v33 - *(_QWORD *)&v32[4] == 12;
              if (*(_QWORD *)&v32[4])
              {
                v33 = *(_QWORD *)&v32[4];
                operator delete(*(void **)&v32[4]);
                v18 = __p;
              }
              if (v18)
              {
                v36 = v18;
                operator delete(v18);
              }
              if (v20)
              {
                LODWORD(__p) = v7 - 1;
                v21 = cv3d::cv::gess::mesh::PolyMesh::HEdgeLength(a1, (unsigned int *)&__p);
                if (v21 > *a2 && *a2 + *a2 > v21)
                {
                  v22 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, __p);
                  v23 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
                  v24 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, *(_DWORD *)(v23 + 8));
                  v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
                  v26 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, *v25);
                  v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&__p);
                  v28 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v27);
                  v29 = v22 + cv3d::cv::gess::mesh::PolyMesh::Angle(a1, *(_DWORD *)(v28 + 8));
                  if (v29 > 60.0 && v29 < 120.0 && (float)(v24 + v26) > 60.0 && (float)(v24 + v26) < 120.0)
                    cv3d::cv::gess::internal::FaceMergingByDiagonal(a1, (unsigned int *)&__p, a3);
                }
              }
            }
          }
        }
      }
      v6 = v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v7++);
  }
  if (v38)
    operator delete(v38);
  return 1;
}

void sub_23C56E3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::mesh::PolyMesh::HEdgeLength(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v11;

  v4 = a1 + 104;
  v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v6 = cv3d::cv::gess::mesh::Topology::h(v4, v5);
  v11 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v6 + 12));
  v7 = cv3d::cv::gess::mesh::Topology::h(v4, a2);
  v8 = vsubq_f32(v11, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v7 + 12)));
  v9 = vmulq_f32(v8, v8);
  v9.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)));
}

_QWORD *std::__split_buffer<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge,std::allocator<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(20 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[20 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[20 * a2];
  return a1;
}

void std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_23C56E69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::internal::LabelledLink>>,std::reverse_iterator<std::vector<cv3d::cv::gess::internal::LabelledLink>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  int v16;
  float v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  float v25;
  unint64_t v26;
  __int128 v27;
  float v28;
  float v29;
  __int128 *v30;
  __int128 v31;
  BOOL v32;
  uint64_t v33;
  float v34;
  unint64_t v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  float v39;
  __int128 v40;
  float v41;
  float v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  _OWORD *v56;
  BOOL v58;
  uint64_t v59;
  _OWORD *v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  float v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  float v88;
  unint64_t v89;
  __int128 v90;
  float v92;
  float v93;
  _OWORD *v94;
  float v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(float *)(a2 - 4) < *(float *)(v8 + 16))
        {
          v111 = *(_DWORD *)(v8 + 16);
          v102 = *(_OWORD *)v8;
          v45 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(a2 - 4);
          *(_OWORD *)v8 = v45;
          *(_DWORD *)(a2 - 4) = v111;
          *(_OWORD *)(a2 - 20) = v102;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)v8, (float *)(v8 + 20), (float *)(a2 - 20));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(v8, v8 + 20, v8 + 40, a2 - 20);
        return;
      case 5:
        v46 = (__int128 *)(v8 + 20);
        v47 = (__int128 *)(v8 + 40);
        v48 = (__int128 *)(v8 + 60);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(v8, v8 + 20, v8 + 40, v8 + 60);
        if (*(float *)(a2 - 4) < *(float *)(v8 + 76))
        {
          v49 = *v48;
          v50 = *(_DWORD *)(v8 + 76);
          v51 = *(_DWORD *)(a2 - 4);
          *v48 = *(_OWORD *)(a2 - 20);
          *(_DWORD *)(v8 + 76) = v51;
          *(_DWORD *)(a2 - 4) = v50;
          *(_OWORD *)(a2 - 20) = v49;
          if (*(float *)(v8 + 76) < *(float *)(v8 + 56))
          {
            v52 = *(_DWORD *)(v8 + 56);
            v53 = *v47;
            *v47 = *v48;
            *(_DWORD *)(v8 + 56) = *(_DWORD *)(v8 + 76);
            *v48 = v53;
            *(_DWORD *)(v8 + 76) = v52;
            if (*(float *)(v8 + 56) < *(float *)(v8 + 36))
            {
              v54 = *(_DWORD *)(v8 + 36);
              v55 = *v46;
              *v46 = *v47;
              *(_DWORD *)(v8 + 36) = *(_DWORD *)(v8 + 56);
              *v47 = v55;
              *(_DWORD *)(v8 + 56) = v54;
              if (*(float *)(v8 + 36) < *(float *)(v8 + 16))
              {
                v112 = *(_DWORD *)(v8 + 16);
                v103 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v46;
                *(_DWORD *)(v8 + 16) = *(_DWORD *)(v8 + 36);
                *v46 = v103;
                *(_DWORD *)(v8 + 36) = v112;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 479)
        {
          v56 = (_OWORD *)(v8 + 20);
          v58 = v8 == a2 || v56 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (_OWORD *)v8;
              do
              {
                v61 = *((float *)v60 + 9);
                v62 = *((float *)v60 + 4);
                v60 = v56;
                if (v61 < v62)
                {
                  v104 = *v56;
                  v63 = v59;
                  while (1)
                  {
                    v64 = v8 + v63;
                    *(_OWORD *)(v64 + 20) = *(_OWORD *)(v8 + v63);
                    *(_DWORD *)(v64 + 36) = *(_DWORD *)(v8 + v63 + 16);
                    if (!v63)
                      break;
                    v63 -= 20;
                    if (v61 >= *(float *)(v64 - 4))
                    {
                      v65 = v8 + v63 + 20;
                      goto LABEL_78;
                    }
                  }
                  v65 = v8;
LABEL_78:
                  *(_OWORD *)v65 = v104;
                  *(float *)(v65 + 16) = v61;
                }
                v56 = (_OWORD *)((char *)v60 + 20);
                v59 += 20;
              }
              while ((_OWORD *)((char *)v60 + 20) != (_OWORD *)a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v92 = *(float *)(a1 + 36);
              v93 = *(float *)(a1 + 16);
              a1 = (uint64_t)v56;
              if (v92 < v93)
              {
                v107 = *v56;
                v94 = v56;
                do
                {
                  *v94 = *(_OWORD *)((char *)v94 - 20);
                  *((_DWORD *)v94 + 4) = *((_DWORD *)v94 - 1);
                  v95 = *((float *)v94 - 6);
                  v94 = (_OWORD *)((char *)v94 - 20);
                }
                while (v92 < v95);
                *v94 = v107;
                *((float *)v94 + 4) = v92;
              }
              v56 = (_OWORD *)((char *)v56 + 20);
            }
            while (a1 + 20 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = v8 + 20 * v69;
                if (2 * v68 + 2 < v10 && *(float *)(v8 + 20 * v69 + 16) < *(float *)(v70 + 36))
                {
                  v70 += 20;
                  v69 = 2 * v68 + 2;
                }
                v71 = *(float *)(v8 + 20 * v68 + 16);
                if (*(float *)(v70 + 16) >= v71)
                {
                  v72 = v8 + 20 * v68;
                  v105 = *(_OWORD *)v72;
                  do
                  {
                    v73 = v72;
                    v72 = v70;
                    v74 = *(_OWORD *)v70;
                    *(_DWORD *)(v73 + 16) = *(_DWORD *)(v70 + 16);
                    *(_OWORD *)v73 = v74;
                    if (v66 < v69)
                      break;
                    v75 = (2 * v69) | 1;
                    v70 = v8 + 20 * v75;
                    v76 = 2 * v69 + 2;
                    if (v76 < v10 && *(float *)(v8 + 20 * v75 + 16) < *(float *)(v70 + 36))
                    {
                      v70 += 20;
                      v75 = v76;
                    }
                    v69 = v75;
                  }
                  while (*(float *)(v70 + 16) >= v71);
                  *(_OWORD *)v72 = v105;
                  *(float *)(v72 + 16) = v71;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v77 = v9 / 0x14uLL;
            do
            {
              v78 = 0;
              v113 = *(_DWORD *)(v8 + 16);
              v106 = *(_OWORD *)v8;
              v79 = v8;
              do
              {
                v80 = v79;
                v81 = v78 + 1;
                v79 += 20 * (v78 + 1);
                v82 = 2 * v78;
                v78 = (2 * v78) | 1;
                v83 = v82 + 2;
                if (v83 < v77 && *(float *)(v80 + 20 * v81 + 16) < *(float *)(v79 + 36))
                {
                  v79 += 20;
                  v78 = v83;
                }
                v84 = *(_OWORD *)v79;
                *(_DWORD *)(v80 + 16) = *(_DWORD *)(v79 + 16);
                *(_OWORD *)v80 = v84;
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              a2 -= 20;
              if (v79 == a2)
              {
                *(_DWORD *)(v79 + 16) = v113;
                *(_OWORD *)v79 = v106;
              }
              else
              {
                v85 = *(_OWORD *)a2;
                *(_DWORD *)(v79 + 16) = *(_DWORD *)(a2 + 16);
                *(_OWORD *)v79 = v85;
                *(_DWORD *)(a2 + 16) = v113;
                *(_OWORD *)a2 = v106;
                v86 = v79 - v8 + 20;
                if (v86 >= 21)
                {
                  v87 = (v86 / 0x14uLL - 2) >> 1;
                  v88 = *(float *)(v79 + 16);
                  if (*(float *)(v8 + 20 * v87 + 16) < v88)
                  {
                    v98 = *(_OWORD *)v79;
                    do
                    {
                      v89 = v79;
                      v79 = v8 + 20 * v87;
                      v90 = *(_OWORD *)v79;
                      *(_DWORD *)(v89 + 16) = *(_DWORD *)(v79 + 16);
                      *(_OWORD *)v89 = v90;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                    }
                    while (*(float *)(v8 + 20 * v87 + 16) < v88);
                    *(_OWORD *)v79 = v98;
                    *(float *)(v79 + 16) = v88;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 20 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xA01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)(a1 + 20 * v11), (float *)a1, (float *)(a2 - 20));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)a1, (float *)(a1 + 20 * v11), (float *)(a2 - 20));
          v13 = 5 * v11;
          v14 = (float *)(a1 + 20 * v11 - 20);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)(a1 + 20), v14, (float *)(a2 - 40));
          v15 = (float *)(a1 + 20 + 4 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)(a1 + 40), v15, (float *)(a2 - 60));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)v14, (float *)v12, v15);
          v108 = *(_DWORD *)(a1 + 16);
          v99 = *(_OWORD *)a1;
          v16 = *(_DWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_DWORD *)(a1 + 16) = v16;
          *(_DWORD *)(v12 + 16) = v108;
          *(_OWORD *)v12 = v99;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(float *)(a1 + 16);
          if (*(float *)(a1 - 4) < v17)
            goto LABEL_11;
          v97 = *(_OWORD *)a1;
          if (v17 >= *(float *)(a2 - 4))
          {
            v35 = a1 + 20;
            do
            {
              v8 = v35;
              if (v35 >= a2)
                break;
              v36 = *(float *)(v35 + 16);
              v35 += 20;
            }
            while (v17 >= v36);
          }
          else
          {
            v33 = a1;
            do
            {
              v8 = v33 + 20;
              v34 = *(float *)(v33 + 36);
              v33 += 20;
            }
            while (v17 >= v34);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v38 = a2;
            do
            {
              v37 = v38 - 20;
              v39 = *(float *)(v38 - 4);
              v38 -= 20;
            }
            while (v17 < v39);
          }
          while (v8 < v37)
          {
            v110 = *(_DWORD *)(v8 + 16);
            v101 = *(_OWORD *)v8;
            v40 = *(_OWORD *)v37;
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v37 + 16);
            *(_OWORD *)v8 = v40;
            *(_DWORD *)(v37 + 16) = v110;
            *(_OWORD *)v37 = v101;
            do
            {
              v41 = *(float *)(v8 + 36);
              v8 += 20;
            }
            while (v17 >= v41);
            do
            {
              v42 = *(float *)(v37 - 4);
              v37 -= 20;
            }
            while (v17 < v42);
          }
          v43 = (__int128 *)(v8 - 20);
          if (v8 - 20 != a1)
          {
            v44 = *v43;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v8 - 4);
            *(_OWORD *)a1 = v44;
          }
          a4 = 0;
          *v43 = v97;
          *(float *)(v8 - 4) = v17;
          continue;
        }
        v17 = *(float *)(a1 + 16);
LABEL_11:
        v18 = 0;
        v96 = *(_OWORD *)a1;
        do
        {
          v19 = *(float *)(a1 + v18 + 36);
          v18 += 20;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 20)
        {
          v24 = a2;
          while (v20 < v24)
          {
            v22 = v24 - 20;
            v25 = *(float *)(v24 - 4);
            v24 -= 20;
            if (v25 < v17)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 20;
            v23 = *(float *)(v21 - 4);
            v21 -= 20;
          }
          while (v23 >= v17);
        }
LABEL_21:
        v8 = v20;
        if (v20 < v22)
        {
          v26 = v22;
          do
          {
            v109 = *(_DWORD *)(v8 + 16);
            v100 = *(_OWORD *)v8;
            v27 = *(_OWORD *)v26;
            *(_DWORD *)(v8 + 16) = *(_DWORD *)(v26 + 16);
            *(_OWORD *)v8 = v27;
            *(_DWORD *)(v26 + 16) = v109;
            *(_OWORD *)v26 = v100;
            do
            {
              v28 = *(float *)(v8 + 36);
              v8 += 20;
            }
            while (v28 < v17);
            do
            {
              v29 = *(float *)(v26 - 4);
              v26 -= 20;
            }
            while (v29 >= v17);
          }
          while (v8 < v26);
        }
        v30 = (__int128 *)(v8 - 20);
        if (v8 - 20 != a1)
        {
          v31 = *v30;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v8 - 4);
          *(_OWORD *)a1 = v31;
        }
        *v30 = v96;
        *(float *)(v8 - 4) = v17;
        if (v20 < v22)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*,false>(a1, v8 - 20, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(a1, v8 - 20);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(v8, a2))
        {
          if (v32)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 20;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v256 = a2 - 2;
  v250 = a2 - 6;
  v252 = a2 - 4;
  v9 = (char *)a1;
  v262 = a2;
  while (2)
  {
    a1 = (unsigned int *)v9;
    v10 = (char *)a2 - v9;
    v11 = ((char *)a2 - v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v102 = *(a2 - 2);
        v101 = a2 - 2;
        v103 = a3[2];
        v104 = a3[3]->i64[0];
        v105 = vsubq_f32(*(float32x4_t *)(v104 + 16 * v102), *v103);
        v267 = **a3;
        v106 = vmulq_f32(v105, v267);
        v106.i32[3] = 0;
        v282 = *a3[1];
        v296 = vsubq_f32(*(float32x4_t *)(v104 + 16 * *a1), *v103);
        v107 = vmulq_f32(v105, v282);
        v107.i32[3] = 0;
        v108 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v106, v106)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v107, v107)));
        v109 = vmulq_f32(v296, v267);
        v109.i32[3] = 0;
        v110 = vmulq_f32(v296, v282);
        v110.i32[3] = 0;
        if (v108 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v109, v109)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v110, v110))))
        {
          v111 = *(_QWORD *)a1;
          v112 = *v101;
          *((_WORD *)a1 + 2) = *((_WORD *)v101 + 2);
          *a1 = v112;
          *v101 = v111;
          *((_WORD *)v101 + 2) = WORD2(v111);
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, v256, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a1 + 4, v256, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,0>(a1, a1 + 2, a1 + 4, a1 + 6, v256, a3);
        return;
      default:
        if (v10 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 != a2)
            {
              v113 = a1 + 2;
              if (a1 + 2 != a2)
              {
                v114 = 0;
                v115 = *a3;
                v116 = a1;
                do
                {
                  v117 = v116[2];
                  v118 = *v116;
                  v116 = v113;
                  v119 = *a3[2];
                  v120 = a3[3]->i64[0];
                  v121 = vsubq_f32(*(float32x4_t *)(v120 + 16 * v117), v119);
                  v268 = *v115;
                  v283 = vsubq_f32(*(float32x4_t *)(v120 + 16 * v118), v119);
                  v122 = vmulq_f32(v121, *v115);
                  v122.i32[3] = 0;
                  v297 = *a3[1];
                  v123 = vmulq_f32(v121, v297);
                  v123.i32[3] = 0;
                  v124 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v122, v122)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v123, v123)));
                  v125 = vmulq_f32(v283, v268);
                  v125.i32[3] = 0;
                  v126 = vmulq_f32(v283, v297);
                  v126.i32[3] = 0;
                  if (v124 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v125, v125)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v126, v126))))
                  {
                    v127 = *(_QWORD *)v116;
                    v128 = *(_QWORD *)v116;
                    v129 = v114;
                    while (1)
                    {
                      v130 = (char *)a1 + v129;
                      *((_DWORD *)v130 + 2) = *(unsigned int *)((char *)a1 + v129);
                      *((_WORD *)v130 + 6) = *(_WORD *)((char *)a1 + v129 + 4);
                      if (!v129)
                        break;
                      v131 = a3[2];
                      v132 = a3[3]->i64[0];
                      v133 = vsubq_f32(*(float32x4_t *)(v132 + 16 * v128), *v131);
                      v269 = **a3;
                      v134 = vmulq_f32(v133, v269);
                      v134.i32[3] = 0;
                      v284 = *a3[1];
                      v298 = vsubq_f32(*(float32x4_t *)(v132 + 16 * *((unsigned int *)v130 - 2)), *v131);
                      v135 = vmulq_f32(v133, v284);
                      v135.i32[3] = 0;
                      v136 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v134, v134)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v135, v135)));
                      v137 = vmulq_f32(v298, v269);
                      v137.i32[3] = 0;
                      v138 = vmulq_f32(v298, v284);
                      v138.i32[3] = 0;
                      v129 -= 8;
                      if (v136 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v137, v137)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v138, v138))))
                      {
                        v139 = (uint64_t)a1 + v129 + 8;
                        goto LABEL_66;
                      }
                    }
                    v139 = (uint64_t)a1;
LABEL_66:
                    *(_DWORD *)v139 = v127;
                    *(_WORD *)(v139 + 4) = WORD2(v127);
                    v115 = *a3;
                  }
                  v113 = v116 + 2;
                  v114 += 8;
                }
                while (v116 + 2 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v225 = a1 + 2;
            if (a1 + 2 != a2)
            {
              v226 = *a3;
              do
              {
                v227 = a1[2];
                v228 = *a1;
                a1 = v225;
                v229 = *a3[2];
                v230 = a3[3]->i64[0];
                v231 = vsubq_f32(*(float32x4_t *)(v230 + 16 * v227), v229);
                v277 = *v226;
                v291 = vsubq_f32(*(float32x4_t *)(v230 + 16 * v228), v229);
                v232 = vmulq_f32(v231, *v226);
                v232.i32[3] = 0;
                v305 = *a3[1];
                v233 = vmulq_f32(v231, v305);
                v233.i32[3] = 0;
                v234 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v232, v232)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v233, v233)));
                v235 = vmulq_f32(v291, v277);
                v235.i32[3] = 0;
                v236 = vmulq_f32(v291, v305);
                v236.i32[3] = 0;
                if (v234 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v235, v235)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v236, v236))))
                {
                  v237 = *(_QWORD *)a1;
                  v238 = *(_QWORD *)a1;
                  v239 = a1;
                  do
                  {
                    v240 = v239;
                    v241 = *(v239 - 2);
                    v239 -= 2;
                    *v240 = v241;
                    *((_WORD *)v240 + 2) = *((_WORD *)v240 - 2);
                    v242 = a3[2];
                    v243 = a3[3]->i64[0];
                    v244 = vsubq_f32(*(float32x4_t *)(v243 + 16 * v238), *v242);
                    v278 = **a3;
                    v292 = vsubq_f32(*(float32x4_t *)(v243 + 16 * *(v240 - 4)), *v242);
                    v245 = vmulq_f32(v244, v278);
                    v245.i32[3] = 0;
                    v306 = *a3[1];
                    v246 = vmulq_f32(v244, v306);
                    v246.i32[3] = 0;
                    v247 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v245, v245)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v246, v246)));
                    v248 = vmulq_f32(v292, v278);
                    v248.i32[3] = 0;
                    v249 = vmulq_f32(v292, v306);
                    v249.i32[3] = 0;
                  }
                  while (v247 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v248, v248)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v249, v249))));
                  *v239 = v237;
                  *((_WORD *)v239 + 2) = WORD2(v237);
                  v226 = *a3;
                }
                v225 = a1 + 2;
              }
              while (a1 + 2 != a2);
            }
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v140 = (unint64_t)(v11 - 2) >> 1;
            v261 = v140;
            do
            {
              v141 = v140;
              if (v261 >= v140)
              {
                v142 = (2 * v140) | 1;
                v143 = &a1[2 * v142];
                v253 = v140;
                if (2 * v140 + 2 >= v11)
                {
                  v146 = a3[3]->i64[0];
                  v155 = *a3[2];
                  v154 = **a3;
                  v153 = *a3[1];
                }
                else
                {
                  v145 = a3[2];
                  v144 = a3[3];
                  v146 = v144->i64[0];
                  v147 = vsubq_f32(*(float32x4_t *)(v144->i64[0] + 16 * *v143), *v145);
                  v257 = *v145;
                  v270 = vsubq_f32(*(float32x4_t *)(v144->i64[0] + 16 * v143[2]), *v145);
                  v285 = **a3;
                  v148 = vmulq_f32(v147, v285);
                  v148.i32[3] = 0;
                  v299 = *a3[1];
                  v149 = vmulq_f32(v147, v299);
                  v149.i32[3] = 0;
                  v150 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v148, v148)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v149, v149)));
                  v151 = vmulq_f32(v270, v285);
                  v151.i32[3] = 0;
                  v152 = vmulq_f32(v270, v299);
                  v152.i32[3] = 0;
                  if (v150 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v151, v151)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v152, v152))))
                  {
                    v143 += 2;
                    v142 = 2 * v141 + 2;
                  }
                  v154 = v285;
                  v153 = v299;
                  v155 = v257;
                }
                v286 = v154;
                v300 = v153;
                v156 = &a1[2 * v141];
                v157 = vsubq_f32(*(float32x4_t *)(v146 + 16 * *v143), v155);
                v271 = vsubq_f32(*(float32x4_t *)(v146 + 16 * *v156), v155);
                v158 = vmulq_f32(v154, v157);
                v158.i32[3] = 0;
                v159 = vmulq_f32(v153, v157);
                v159.i32[3] = 0;
                v160 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v158, v158)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v159, v159)));
                v161 = vmulq_f32(v286, v271);
                v161.i32[3] = 0;
                v162 = vmulq_f32(v300, v271);
                v162.i32[3] = 0;
                if (v160 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v161, v161)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v162, v162))))
                {
                  v251 = *(_QWORD *)v156;
                  v258 = *(_QWORD *)v156;
                  do
                  {
                    v163 = v156;
                    v156 = v143;
                    v164 = *v143;
                    *((_WORD *)v163 + 2) = *((_WORD *)v143 + 2);
                    *v163 = v164;
                    if (v261 < v142)
                      break;
                    v165 = 2 * v142;
                    v166 = *a3[2];
                    v167 = **a3;
                    v142 = (2 * v142) | 1;
                    v143 = &a1[2 * v142];
                    v168 = v165 + 2;
                    v169 = a3[3]->i64[0];
                    v170 = *a3[1];
                    v287 = v167;
                    v301 = v170;
                    if (v165 + 2 < v11)
                    {
                      v171 = vsubq_f32(*(float32x4_t *)(v169 + 16 * *v143), v166);
                      v255 = vsubq_f32(*(float32x4_t *)(v169 + 16 * v143[2]), v166);
                      v172 = vmulq_f32(v167, v171);
                      v172.i32[3] = 0;
                      v173 = vmulq_f32(v170, v171);
                      v173.i32[3] = 0;
                      v272 = *a3[2];
                      v174 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v172, v172)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v173, v173)));
                      v175 = vmulq_f32(v287, v255);
                      v175.i32[3] = 0;
                      v176 = vmulq_f32(v301, v255);
                      v176.i32[3] = 0;
                      v177 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v175, v175)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v176, v176)));
                      v166 = v272;
                      v167 = v287;
                      v170 = v301;
                      if (v174 > v177)
                      {
                        v143 += 2;
                        v142 = v168;
                      }
                    }
                    v178 = vsubq_f32(*(float32x4_t *)(v169 + 16 * *v143), v166);
                    v273 = vsubq_f32(*(float32x4_t *)(v169 + 16 * v258), v166);
                    v179 = vmulq_f32(v167, v178);
                    v179.i32[3] = 0;
                    v180 = vmulq_f32(v170, v178);
                    v180.i32[3] = 0;
                    v181 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v179, v179)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v180, v180)));
                    v182 = vmulq_f32(v287, v273);
                    v182.i32[3] = 0;
                    v183 = vmulq_f32(v301, v273);
                    v183.i32[3] = 0;
                  }
                  while (v181 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v182, v182)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v183, v183))));
                  v141 = v253;
                  *v156 = v251;
                  *((_WORD *)v156 + 2) = WORD2(v251);
                  a2 = v262;
                }
              }
              v140 = v141 - 1;
            }
            while (v141);
            v184 = (unint64_t)v10 >> 3;
            do
            {
              v263 = a2;
              v185 = 0;
              v186 = *(_QWORD *)a1;
              v187 = a1;
              do
              {
                v188 = v187;
                v187 += 2 * v185 + 2;
                v189 = 2 * v185;
                v185 = (2 * v185) | 1;
                v190 = v189 + 2;
                if (v189 + 2 < v184)
                {
                  v191 = a3[2];
                  v192 = a3[3]->i64[0];
                  v193 = vsubq_f32(*(float32x4_t *)(v192 + 16 * *v187), *v191);
                  v274 = **a3;
                  v194 = vmulq_f32(v193, v274);
                  v194.i32[3] = 0;
                  v288 = *a3[1];
                  v302 = vsubq_f32(*(float32x4_t *)(v192 + 16 * v187[2]), *v191);
                  v195 = vmulq_f32(v193, v288);
                  v195.i32[3] = 0;
                  v196 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v194, v194)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v195, v195)));
                  v197 = vmulq_f32(v302, v274);
                  v197.i32[3] = 0;
                  v198 = vmulq_f32(v302, v288);
                  v198.i32[3] = 0;
                  if (v196 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v197, v197)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v198, v198))))
                  {
                    v187 += 2;
                    v185 = v190;
                  }
                }
                v199 = *v187;
                *((_WORD *)v188 + 2) = *((_WORD *)v187 + 2);
                *v188 = v199;
              }
              while (v185 <= (uint64_t)((unint64_t)(v184 - 2) >> 1));
              a2 = v263 - 2;
              if (v187 == v263 - 2)
              {
                *v187 = v186;
                *((_WORD *)v187 + 2) = WORD2(v186);
              }
              else
              {
                v200 = *a2;
                *((_WORD *)v187 + 2) = *((_WORD *)v263 - 2);
                *v187 = v200;
                *((_WORD *)v263 - 2) = WORD2(v186);
                *a2 = v186;
                v201 = (char *)v187 - (char *)a1 + 8;
                if (v201 >= 9)
                {
                  v202 = (((unint64_t)v201 >> 3) - 2) >> 1;
                  v203 = &a1[2 * v202];
                  v204 = a3[2];
                  v205 = a3[3]->i64[0];
                  v206 = vsubq_f32(*(float32x4_t *)(v205 + 16 * *v203), *v204);
                  v275 = **a3;
                  v207 = vmulq_f32(v206, v275);
                  v207.i32[3] = 0;
                  v289 = *a3[1];
                  v303 = vsubq_f32(*(float32x4_t *)(v205 + 16 * *v187), *v204);
                  v208 = vmulq_f32(v206, v289);
                  v208.i32[3] = 0;
                  v209 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v207, v207)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v208, v208)));
                  v210 = vmulq_f32(v303, v275);
                  v210.i32[3] = 0;
                  v211 = vmulq_f32(v303, v289);
                  v211.i32[3] = 0;
                  if (v209 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v210, v210)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v211, v211))))
                  {
                    v212 = *(_QWORD *)v187;
                    v213 = *(_QWORD *)v187;
                    do
                    {
                      v214 = v187;
                      v187 = v203;
                      v215 = *v203;
                      *((_WORD *)v214 + 2) = *((_WORD *)v203 + 2);
                      *v214 = v215;
                      if (!v202)
                        break;
                      v202 = (v202 - 1) >> 1;
                      v203 = &a1[2 * v202];
                      v216 = a3[2];
                      v217 = a3[3]->i64[0];
                      v218 = vsubq_f32(*(float32x4_t *)(v217 + 16 * *v203), *v216);
                      v276 = **a3;
                      v219 = vmulq_f32(v218, v276);
                      v219.i32[3] = 0;
                      v290 = *a3[1];
                      v304 = vsubq_f32(*(float32x4_t *)(v217 + 16 * v213), *v216);
                      v220 = vmulq_f32(v218, v290);
                      v220.i32[3] = 0;
                      v221 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v219, v219)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v220, v220)));
                      v222 = vmulq_f32(v304, v276);
                      v222.i32[3] = 0;
                      v223 = vmulq_f32(v304, v290);
                      v223.i32[3] = 0;
                    }
                    while (v221 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v222, v222)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v223, v223))));
                    *v187 = v212;
                    *((_WORD *)v187 + 2) = WORD2(v212);
                    a2 = v263 - 2;
                  }
                }
              }
            }
            while (v184-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(v13, a1, v256, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, v13, v256, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1 + 2, v13 - 2, v252, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1 + 4, &a1[2 * v12 + 2], v250, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(v13 - 2, v13, &a1[2 * v12 + 2], a3);
          v14 = *(_QWORD *)a1;
          v15 = *v13;
          *((_WORD *)a1 + 2) = *((_WORD *)v13 + 2);
          *a1 = v15;
          *v13 = v14;
          *((_WORD *)v13 + 2) = WORD2(v14);
        }
        --a4;
        v16 = a3[3]->i64[0];
        v17 = *a3[2];
        v18 = **a3;
        v19 = *a3[1];
        v264 = v17;
        v279 = v19;
        v293 = v18;
        if ((a5 & 1) == 0)
        {
          v20 = vsubq_f32(*(float32x4_t *)(v16 + 16 * *(a1 - 2)), v17);
          v254 = vsubq_f32(*(float32x4_t *)(v16 + 16 * *a1), v17);
          v21 = vmulq_f32(v20, v18);
          v21.i32[3] = 0;
          v22 = vmulq_f32(v20, v19);
          v22.i32[3] = 0;
          v23 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22)));
          v24 = vmulq_f32(v254, v293);
          v24.i32[3] = 0;
          v25 = vmulq_f32(v254, v279);
          v25.i32[3] = 0;
          v26 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)));
          v19 = v279;
          v18 = v293;
          v17 = v264;
          if (v23 <= v26)
          {
            v65 = *(_QWORD *)a1;
            v66 = vsubq_f32(*(float32x4_t *)(v16 + 16 * *(_QWORD *)a1), v264);
            v260 = vsubq_f32(*(float32x4_t *)(v16 + 16 * *v256), v264);
            v67 = vmulq_f32(v293, v66);
            v67.i32[3] = 0;
            v68 = vmulq_f32(v279, v66);
            v68.i32[3] = 0;
            v69 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v67, v67)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v68, v68)));
            v70 = vmulq_f32(v293, v260);
            v70.i32[3] = 0;
            v71 = vmulq_f32(v279, v260);
            v71.i32[3] = 0;
            if (v69 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v70, v70)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v71, v71))))
            {
              v76 = a1 + 2;
              do
              {
                v9 = (char *)v76;
                if (v76 >= a2)
                  break;
                v76 += 2;
                v77 = vsubq_f32(*(float32x4_t *)(v16 + 16 * *(unsigned int *)v9), v264);
                v78 = vmulq_f32(v293, v77);
                v78.i32[3] = 0;
                v79 = vmulq_f32(v279, v77);
                v79.i32[3] = 0;
              }
              while (v69 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v78, v78)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v79, v79))));
            }
            else
            {
              v9 = (char *)a1;
              do
              {
                v72 = *((_DWORD *)v9 + 2);
                v9 += 8;
                v73 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v72), v264);
                v74 = vmulq_f32(v293, v73);
                v74.i32[3] = 0;
                v75 = vmulq_f32(v279, v73);
                v75.i32[3] = 0;
              }
              while (v69 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v74, v74)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v75, v75))));
            }
            v80 = a2;
            if (v9 < (char *)a2)
            {
              v80 = a2;
              do
              {
                v81 = *(v80 - 2);
                v80 -= 2;
                v82 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v81), v264);
                v83 = vmulq_f32(v293, v82);
                v83.i32[3] = 0;
                v84 = vmulq_f32(v279, v82);
                v84.i32[3] = 0;
              }
              while (v69 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v83, v83)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v84, v84))));
            }
            while (v9 < (char *)v80)
            {
              v85 = *(_QWORD *)v9;
              v86 = *v80;
              *((_WORD *)v9 + 2) = *((_WORD *)v80 + 2);
              *(_DWORD *)v9 = v86;
              *v80 = v85;
              *((_WORD *)v80 + 2) = WORD2(v85);
              v87 = a3[3]->i64[0];
              v295 = *a3[2];
              v88 = vsubq_f32(*(float32x4_t *)(v87 + 16 * v65), v295);
              v281 = **a3;
              v89 = vmulq_f32(v88, v281);
              v89.i32[3] = 0;
              v266 = *a3[1];
              v90 = vmulq_f32(v88, v266);
              v90.i32[3] = 0;
              v91 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v89, v89)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v90, v90)));
              do
              {
                v92 = *((_DWORD *)v9 + 2);
                v9 += 8;
                v93 = vsubq_f32(*(float32x4_t *)(v87 + 16 * v92), v295);
                v94 = vmulq_f32(v281, v93);
                v94.i32[3] = 0;
                v95 = vmulq_f32(v266, v93);
                v95.i32[3] = 0;
              }
              while (v91 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v94, v94)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v95, v95))));
              do
              {
                v96 = *(v80 - 2);
                v80 -= 2;
                v97 = vsubq_f32(*(float32x4_t *)(v87 + 16 * v96), v295);
                v98 = vmulq_f32(v281, v97);
                v98.i32[3] = 0;
                v99 = vmulq_f32(v266, v97);
                v99.i32[3] = 0;
              }
              while (v91 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v98, v98)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v99, v99))));
            }
            if (v9 - 8 != (char *)a1)
            {
              v100 = *((_DWORD *)v9 - 2);
              *((_WORD *)a1 + 2) = *((_WORD *)v9 - 2);
              *a1 = v100;
            }
            a5 = 0;
            *((_DWORD *)v9 - 2) = v65;
            *((_WORD *)v9 - 2) = WORD2(v65);
            continue;
          }
        }
        v27 = *(_QWORD *)a1;
        v28 = *(_QWORD *)a1;
        v29 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v28), v17);
        v30 = vmulq_f32(v29, v18);
        v30.i32[3] = 0;
        v31 = vmulq_f32(v29, v19);
        v31.i32[3] = 0;
        v32 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31)));
        v33 = 0;
        do
        {
          v34 = vsubq_f32(*(float32x4_t *)(v16 + 16 * a1[v33 + 2]), v264);
          v35 = vmulq_f32(v293, v34);
          v35.i32[3] = 0;
          v36 = vmulq_f32(v279, v34);
          v36.i32[3] = 0;
          v33 += 2;
        }
        while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36))) > v32);
        v37 = &a1[v33];
        v38 = v262;
        if (v33 == 2)
        {
          v38 = v262;
          do
          {
            if (v37 >= v38)
              break;
            v43 = *(v38 - 2);
            v38 -= 2;
            v44 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v43), v264);
            v45 = vmulq_f32(v293, v44);
            v45.i32[3] = 0;
            v46 = vmulq_f32(v279, v44);
            v46.i32[3] = 0;
          }
          while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))) <= v32);
        }
        else
        {
          do
          {
            v39 = *(v38 - 2);
            v38 -= 2;
            v40 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v39), v264);
            v41 = vmulq_f32(v293, v40);
            v41.i32[3] = 0;
            v42 = vmulq_f32(v279, v40);
            v42.i32[3] = 0;
          }
          while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42))) <= v32);
        }
        v9 = (char *)&a1[v33];
        if (v37 < v38)
        {
          v47 = (unint64_t)v38;
          do
          {
            v48 = *(_QWORD *)v9;
            v49 = *(_DWORD *)v47;
            *((_WORD *)v9 + 2) = *(_WORD *)(v47 + 4);
            *(_DWORD *)v9 = v49;
            *(_DWORD *)v47 = v48;
            *(_WORD *)(v47 + 4) = WORD2(v48);
            v50 = a3[3]->i64[0];
            v294 = *a3[2];
            v51 = vsubq_f32(*(float32x4_t *)(v50 + 16 * v28), v294);
            v265 = *a3[1];
            v280 = **a3;
            v52 = vmulq_f32(v51, v280);
            v52.i32[3] = 0;
            v53 = vmulq_f32(v51, v265);
            v53.i32[3] = 0;
            v54 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v52, v52)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v53, v53)));
            do
            {
              v55 = *((_DWORD *)v9 + 2);
              v9 += 8;
              v56 = vsubq_f32(*(float32x4_t *)(v50 + 16 * v55), v294);
              v57 = vmulq_f32(v280, v56);
              v57.i32[3] = 0;
              v58 = vmulq_f32(v265, v56);
              v58.i32[3] = 0;
            }
            while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v57, v57)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v58, v58))) > v54);
            do
            {
              v59 = *(_DWORD *)(v47 - 8);
              v47 -= 8;
              v60 = vsubq_f32(*(float32x4_t *)(v50 + 16 * v59), v294);
              v61 = vmulq_f32(v280, v60);
              v61.i32[3] = 0;
              v62 = vmulq_f32(v265, v60);
              v62.i32[3] = 0;
            }
            while (atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v61, v61)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62))) <= v54);
          }
          while ((unint64_t)v9 < v47);
        }
        if (v9 - 8 != (char *)a1)
        {
          v63 = *((_DWORD *)v9 - 2);
          *((_WORD *)a1 + 2) = *((_WORD *)v9 - 2);
          *a1 = v63;
        }
        *((_DWORD *)v9 - 2) = v27;
        *((_WORD *)v9 - 2) = WORD2(v27);
        a2 = v262;
        if (v37 < v38)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,false>(a1, v9 - 8, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v64 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, (unsigned int *)v9 - 2, a3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>((unsigned int *)v9, v262, a3))
        {
          if (v64)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int *)(v9 - 8);
        if (!v64)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v44 = *(_QWORD *)(a2 - 8);
        v45 = *(_QWORD *)v8;
        if (*((float *)&v44 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v8)))
        {
          *(_DWORD *)v8 = v44;
          *(_DWORD *)(a2 - 8) = v45;
          v46 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v46;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v8, (float *)(v8 + 8), (float *)(a2 - 8));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), a2 - 8);
        return;
      case 5uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), v8 + 24);
        v47 = *(_QWORD *)(a2 - 8);
        v48 = *(_QWORD *)(v8 + 24);
        if (*((float *)&v47 + 1) > *((float *)&v48 + 1))
        {
          *(_DWORD *)(v8 + 24) = v47;
          *(_DWORD *)(a2 - 8) = v48;
          v49 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v49;
          v50 = *(_QWORD *)(v8 + 16);
          v51 = *(_QWORD *)(v8 + 24);
          v52 = HIDWORD(v51);
          if (*((float *)&v51 + 1) > *((float *)&v50 + 1))
          {
            *(_QWORD *)(v8 + 16) = v51;
            *(_QWORD *)(v8 + 24) = v50;
            v53 = *(_QWORD *)(v8 + 8);
            v54 = *(_QWORD *)(v8 + 16);
            if (*((float *)&v54 + 1) > *((float *)&v53 + 1))
            {
              *(_DWORD *)(v8 + 8) = v54;
              *(_DWORD *)(v8 + 12) = v52;
              *(_QWORD *)(v8 + 16) = v53;
              v55 = *(_QWORD *)v8;
              v56 = *(_QWORD *)(v8 + 8);
              v57 = HIDWORD(*(_QWORD *)v8);
              if (*((float *)&v56 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v8)))
              {
                *(_DWORD *)v8 = v56;
                *(_DWORD *)(v8 + 4) = v52;
                *(_DWORD *)(v8 + 8) = v55;
                *(_DWORD *)(v8 + 12) = v57;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 191)
        {
          v58 = v8 + 8;
          v60 = v8 == a2 || v58 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v8;
              do
              {
                v63 = v58;
                v64 = *(_QWORD *)v62;
                if (*(float *)(v62 + 12) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v62)))
                {
                  v65 = *(_DWORD *)(v62 + 8);
                  v66 = *(float *)(v62 + 12);
                  v67 = v61;
                  while (1)
                  {
                    v68 = v8 + v67;
                    *(_DWORD *)(v68 + 8) = v64;
                    *(_DWORD *)(v68 + 12) = *(_DWORD *)(v8 + v67 + 4);
                    if (!v67)
                      break;
                    v64 = *(_QWORD *)(v68 - 8);
                    v67 -= 8;
                    if (v66 <= *((float *)&v64 + 1))
                    {
                      v69 = v8 + v67 + 8;
                      goto LABEL_81;
                    }
                  }
                  v69 = v8;
LABEL_81:
                  *(_DWORD *)v69 = v65;
                  *(float *)(v69 + 4) = v66;
                }
                v58 = v63 + 8;
                v61 += 8;
                v62 = v63;
              }
              while (v63 + 8 != a2);
            }
          }
          else if (!v60)
          {
            v98 = (float *)(v8 + 12);
            do
            {
              v99 = v58;
              v100 = *(_QWORD *)a1;
              if (*(float *)(a1 + 12) > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
              {
                v101 = *(_DWORD *)(a1 + 8);
                v102 = *(float *)(a1 + 12);
                v103 = v98;
                do
                {
                  v104 = v103;
                  v105 = *((_DWORD *)v103 - 2);
                  v103 -= 2;
                  *((_DWORD *)v104 - 1) = v100;
                  *(_DWORD *)v104 = v105;
                  v100 = *(_QWORD *)(v104 - 5);
                }
                while (v102 > *((float *)&v100 + 1));
                *((_DWORD *)v103 - 1) = v101;
                *v103 = v102;
              }
              v58 = v99 + 8;
              v98 += 2;
              a1 = v99;
            }
            while (v99 + 8 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v70 = (v10 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = v8 + 8 * v73;
                if (2 * v72 + 2 < (uint64_t)v10 && *(float *)(v74 + 4) > *(float *)(v74 + 12))
                {
                  v74 += 8;
                  v73 = 2 * v72 + 2;
                }
                v75 = v8 + 8 * v72;
                v76 = *(_QWORD *)v74;
                v77 = *(float *)(v75 + 4);
                if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v74)) <= v77)
                {
                  v78 = *(_DWORD *)v75;
                  do
                  {
                    v79 = (_DWORD *)v75;
                    v75 = v74;
                    *v79 = v76;
                    v79[1] = *(_DWORD *)(v74 + 4);
                    if (v70 < v73)
                      break;
                    v80 = 2 * v73;
                    v73 = (2 * v73) | 1;
                    v74 = v8 + 8 * v73;
                    v81 = v80 + 2;
                    if (v81 < (uint64_t)v10 && *(float *)(v74 + 4) > *(float *)(v74 + 12))
                    {
                      v74 += 8;
                      v73 = v81;
                    }
                    v76 = *(_QWORD *)v74;
                  }
                  while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v74)) <= v77);
                  *(_DWORD *)v75 = v78;
                  *(float *)(v75 + 4) = v77;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v82 = (unint64_t)v9 >> 3;
            do
            {
              v83 = 0;
              v84 = *(float *)v8;
              v85 = *(_DWORD *)(v8 + 4);
              v86 = v8;
              do
              {
                v87 = (_DWORD *)v86;
                v86 += 8 * v83 + 8;
                v88 = 2 * v83;
                v83 = (2 * v83) | 1;
                v89 = v88 + 2;
                if (v89 < v82 && *(float *)(v86 + 4) > *(float *)(v86 + 12))
                {
                  v86 += 8;
                  v83 = v89;
                }
                *v87 = *(_DWORD *)v86;
                v87[1] = *(_DWORD *)(v86 + 4);
              }
              while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              if (v86 == a2 - 8)
              {
                *(float *)v86 = v84;
                *(_DWORD *)(v86 + 4) = v85;
              }
              else
              {
                *(_DWORD *)v86 = *(_DWORD *)(a2 - 8);
                *(_DWORD *)(v86 + 4) = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v84;
                *(_DWORD *)(a2 - 4) = v85;
                v90 = v86 - v8 + 8;
                if (v90 >= 9)
                {
                  v91 = (((unint64_t)v90 >> 3) - 2) >> 1;
                  v92 = v8 + 8 * v91;
                  v93 = *(_QWORD *)v92;
                  v94 = *(float *)(v86 + 4);
                  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v92)) > v94)
                  {
                    v95 = *(_DWORD *)v86;
                    do
                    {
                      v96 = (_DWORD *)v86;
                      v86 = v92;
                      *v96 = v93;
                      v96[1] = *(_DWORD *)(v92 + 4);
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = v8 + 8 * v91;
                      v93 = *(_QWORD *)v92;
                    }
                    while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v92)) > v94);
                    *(_DWORD *)v86 = v95;
                    *(float *)(v86 + 4) = v94;
                  }
                }
              }
              a2 -= 8;
            }
            while (v82-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 8 * (v10 >> 1);
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8 * (v10 >> 1)), (float *)a1, (float *)(a2 - 8));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8 * (v10 >> 1)), (float *)(a2 - 8));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8), (float *)(v12 - 8), (float *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v11), (float *)(a2 - 24));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(v12 - 8), (float *)v12, (float *)(a1 + 8 + 8 * v11));
          v13 = *(float *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v12;
          *(float *)v12 = v13;
          v14 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v12 + 4);
          *(_DWORD *)(v12 + 4) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)a1;
          v16 = *(float *)(a1 + 4);
          v17 = v16;
          if (*(float *)(a1 - 4) > v16)
            goto LABEL_11;
          if (v16 <= *(float *)(a2 - 4))
          {
            v34 = a1 + 8;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v35 = *(float *)(v34 + 4);
              v34 += 8;
            }
            while (v16 <= v35);
          }
          else
          {
            v32 = a1;
            do
            {
              v8 = v32 + 8;
              v33 = *(float *)(v32 + 12);
              v32 += 8;
            }
            while (v16 <= v33);
          }
          v36 = (_DWORD *)a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v36 = (_DWORD *)(v37 - 8);
              v38 = *(float *)(v37 - 4);
              v37 -= 8;
            }
            while (v16 > v38);
          }
          if (v8 < (unint64_t)v36)
          {
            v39 = *(float *)v8;
            v40 = *(float *)v36;
            do
            {
              *(float *)v8 = v40;
              *(float *)v36 = v39;
              v41 = *(_DWORD *)(v8 + 4);
              *(_DWORD *)(v8 + 4) = v36[1];
              v36[1] = v41;
              do
              {
                v42 = *(_QWORD *)(v8 + 8);
                v8 += 8;
                v39 = *(float *)&v42;
              }
              while (v16 <= *((float *)&v42 + 1));
              do
              {
                v43 = *((_QWORD *)v36 - 1);
                v36 -= 2;
                v40 = *(float *)&v43;
              }
              while (v16 > *((float *)&v43 + 1));
            }
            while (v8 < (unint64_t)v36);
          }
          if (v8 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 8) = v15;
          *(float *)(v8 - 4) = v16;
          continue;
        }
        v15 = *(float *)a1;
        v16 = *(float *)(a1 + 4);
        v17 = v16;
LABEL_11:
        v18 = 0;
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 8);
          v18 += 8;
        }
        while (v17 < *((float *)&v19 + 1));
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 8)
        {
          v24 = (float *)a2;
          while (v20 < (unint64_t)v24)
          {
            v22 = v24 - 2;
            v25 = *(v24 - 1);
            v24 -= 2;
            if (v17 < v25)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = (float *)(v21 - 8);
            v23 = *(float *)(v21 - 4);
            v21 -= 8;
          }
          while (v17 >= v23);
        }
LABEL_21:
        if (v20 >= (unint64_t)v22)
        {
          v8 = v20;
        }
        else
        {
          v26 = *(_DWORD *)v22;
          v8 = v20;
          v27 = v22;
          do
          {
            *(_DWORD *)v8 = v26;
            *(_DWORD *)v27 = v19;
            v28 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v27[1];
            *((_DWORD *)v27 + 1) = v28;
            do
            {
              v29 = *(_QWORD *)(v8 + 8);
              v8 += 8;
              LODWORD(v19) = v29;
            }
            while (v17 < *((float *)&v29 + 1));
            do
            {
              v30 = *((_QWORD *)v27 - 1);
              v27 -= 2;
              v26 = v30;
            }
            while (v17 >= *((float *)&v30 + 1));
          }
          while (v8 < (unint64_t)v27);
        }
        if (v8 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 8) = v15;
        *(float *)(v8 - 4) = v16;
        if (v20 < (unint64_t)v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(a1, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(a1, v8 - 8);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(v8, a2))
        {
          if (v31)
            continue;
          goto LABEL_34;
        }
        a2 = v8 - 8;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (uint64_t *)(a2 - 12);
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = a2 - i;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v54 = *(float *)(a2 - 8);
        v55 = *(float *)(i + 4);
        if (v54 > v55 || v54 > (float)(v55 + -0.000001) && *(float *)(a2 - 4) < *(float *)(i + 8))
        {
          v152 = *(_DWORD *)(i + 8);
          v146 = *(_QWORD *)i;
          v56 = *v8;
          *(_DWORD *)(i + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)i = v56;
          *(_DWORD *)(a2 - 4) = v152;
          *v8 = v146;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)i, (float *)(i + 12), (float *)(a2 - 12));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)i, (float *)(i + 12), (float *)(i + 24), (float *)(a2 - 12));
        return;
      case 5:
        v57 = (uint64_t *)(i + 12);
        v58 = (uint64_t *)(i + 24);
        v59 = (uint64_t *)(i + 36);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)i, (float *)(i + 12), (float *)(i + 24), (float *)(i + 36));
        v60 = *(float *)(a2 - 8);
        v61 = *(float *)(i + 40);
        if (v60 > v61 || v60 > (float)(v61 + -0.000001) && *(float *)(a2 - 4) < *(float *)(i + 44))
        {
          v62 = *v59;
          v63 = *(_DWORD *)(i + 44);
          v64 = *(_DWORD *)(a2 - 4);
          *v59 = *v8;
          *(_DWORD *)(i + 44) = v64;
          *(_DWORD *)(a2 - 4) = v63;
          *v8 = v62;
          v65 = *(float *)(i + 40);
          v66 = *(float *)(i + 28);
          if (v65 > v66 || v65 > (float)(v66 + -0.000001) && *(float *)(i + 44) < *(float *)(i + 32))
          {
            v67 = *(_DWORD *)(i + 32);
            v68 = *v58;
            *v58 = *v59;
            *(_DWORD *)(i + 32) = *(_DWORD *)(i + 44);
            *v59 = v68;
            *(_DWORD *)(i + 44) = v67;
            v69 = *(float *)(i + 28);
            v70 = *(float *)(i + 16);
            if (v69 > v70 || v69 > (float)(v70 + -0.000001) && *(float *)(i + 32) < *(float *)(i + 20))
            {
              v71 = *(_DWORD *)(i + 20);
              v72 = *v57;
              *v57 = *v58;
              *(_DWORD *)(i + 20) = *(_DWORD *)(i + 32);
              *v58 = v72;
              *(_DWORD *)(i + 32) = v71;
              v73 = *(float *)(i + 16);
              v74 = *(float *)(i + 4);
              if (v73 > v74 || v73 > (float)(v74 + -0.000001) && *(float *)(i + 20) < *(float *)(i + 8))
              {
                v153 = *(_DWORD *)(i + 8);
                v147 = *(_QWORD *)i;
                *(_QWORD *)i = *v57;
                *(_DWORD *)(i + 8) = *(_DWORD *)(i + 20);
                *v57 = v147;
                *(_DWORD *)(i + 20) = v153;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 287)
        {
          v75 = (_DWORD *)(i + 12);
          v77 = i == a2 || v75 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (v77)
              return;
            v78 = 0;
            v79 = (_DWORD *)i;
            while (1)
            {
              v80 = (float *)v79;
              v79 = v75;
              v81 = v80[4];
              v82 = v80[1];
              if (v81 > v82)
                break;
              if (v81 > (float)(v82 + -0.000001))
              {
                v83 = v80[5];
                if (v83 < v80[2])
                  goto LABEL_121;
              }
LABEL_134:
              v75 = v79 + 3;
              v78 += 12;
              if (v79 + 3 == (_DWORD *)a2)
                return;
            }
            v83 = v80[5];
LABEL_121:
            v85 = *((_DWORD *)v80 + 2);
            v84 = *((_DWORD *)v80 + 3);
            *(_QWORD *)v79 = *(_QWORD *)v80;
            v79[2] = v85;
            v86 = i;
            if (v80 != (float *)i)
            {
              v87 = v78;
              while (1)
              {
                v88 = i + v87;
                v89 = *(float *)(i + v87 - 8);
                if (v81 <= v89)
                {
                  if (v81 <= (float)(v89 + -0.000001))
                  {
                    v86 = i + v87;
                    goto LABEL_133;
                  }
                  if (v83 >= *(float *)(i + v87 - 4))
                    break;
                }
                v80 -= 3;
                *(_QWORD *)v88 = *(_QWORD *)(v88 - 12);
                *(_DWORD *)(v88 + 8) = *(_DWORD *)(v88 - 4);
                v87 -= 12;
                if (!v87)
                {
                  v86 = i;
                  goto LABEL_133;
                }
              }
              v86 = (unint64_t)v80;
            }
LABEL_133:
            *(_DWORD *)v86 = v84;
            *(float *)(v86 + 4) = v81;
            *(float *)(v86 + 8) = v83;
            goto LABEL_134;
          }
          if (v77)
            return;
          while (1)
          {
            v136 = a1;
            a1 = (uint64_t)v75;
            v137 = *(float *)(v136 + 16);
            v138 = *(float *)(v136 + 4);
            if (v137 > v138)
              break;
            if (v137 > (float)(v138 + -0.000001))
            {
              v139 = *(float *)(v136 + 20);
              if (v139 < *(float *)(v136 + 8))
                goto LABEL_197;
            }
LABEL_204:
            v75 += 3;
            if (a1 + 12 == a2)
              return;
          }
          v139 = *(float *)(v136 + 20);
LABEL_197:
          v140 = *v75;
          do
          {
            do
            {
              v141 = v136;
              *(_QWORD *)(v136 + 12) = *(_QWORD *)v136;
              *(_DWORD *)(v136 + 20) = *(_DWORD *)(v136 + 8);
              v136 -= 12;
              v142 = *(float *)(v141 - 8);
            }
            while (v137 > v142);
          }
          while (v137 > (float)(v142 + -0.000001) && v139 < *(float *)(v141 - 4));
          *(_DWORD *)v141 = v140;
          *(float *)(v141 + 4) = v137;
          *(float *)(v141 + 8) = v139;
          goto LABEL_204;
        }
        if (!a3)
        {
          if (i == a2)
            return;
          v90 = (unint64_t)(v11 - 2) >> 1;
          v91 = v90;
          while (1)
          {
            v92 = v91;
            if (v90 >= v91)
            {
              v93 = (2 * v91) | 1;
              v94 = i + 12 * v93;
              if (2 * v92 + 2 < v11)
              {
                v95 = *(float *)(i + 12 * v93 + 4);
                v96 = *(float *)(v94 + 16);
                if (v95 > v96 || v95 > (float)(v96 + -0.000001) && *(float *)(i + 12 * v93 + 8) < *(float *)(v94 + 20))
                {
                  v94 += 12;
                  v93 = 2 * v92 + 2;
                }
              }
              v97 = *(float *)(v94 + 4);
              v98 = *(float *)(i + 12 * v92 + 4);
              if (v97 <= v98)
              {
                v99 = i + 12 * v92;
                if (v97 <= (float)(v98 + -0.000001))
                {
                  v100 = *(float *)(v99 + 8);
LABEL_149:
                  v101 = *(_DWORD *)v99;
                  v102 = *(_QWORD *)v94;
                  *(_DWORD *)(v99 + 8) = *(_DWORD *)(v94 + 8);
                  *(_QWORD *)v99 = v102;
                  if (v90 >= v93)
                  {
                    while (1)
                    {
                      v104 = 2 * v93;
                      v93 = (2 * v93) | 1;
                      v103 = i + 12 * v93;
                      v105 = v104 + 2;
                      if (v105 < v11)
                      {
                        v106 = *(float *)(i + 12 * v93 + 4);
                        v107 = *(float *)(v103 + 16);
                        if (v106 > v107
                          || v106 > (float)(v107 + -0.000001) && *(float *)(i + 12 * v93 + 8) < *(float *)(v103 + 20))
                        {
                          v103 += 12;
                          v93 = v105;
                        }
                      }
                      v108 = *(float *)(v103 + 4);
                      if (v108 > v98 || v108 > (float)(v98 + -0.000001) && *(float *)(v103 + 8) < v100)
                        break;
                      v109 = *(_QWORD *)v103;
                      *(_DWORD *)(v94 + 8) = *(_DWORD *)(v103 + 8);
                      *(_QWORD *)v94 = v109;
                      v94 = v103;
                      if (v90 < v93)
                        goto LABEL_151;
                    }
                  }
                  v103 = v94;
LABEL_151:
                  *(_DWORD *)v103 = v101;
                  *(float *)(v103 + 4) = v98;
                  *(float *)(v103 + 8) = v100;
                  goto LABEL_152;
                }
                v100 = *(float *)(i + 12 * v92 + 8);
                if (*(float *)(v94 + 8) >= v100)
                  goto LABEL_149;
              }
            }
LABEL_152:
            v91 = v92 - 1;
            if (!v92)
            {
              v110 = v10 / 0xCuLL;
              while (1)
              {
                v111 = 0;
                v154 = *(_DWORD *)(i + 8);
                v148 = *(_QWORD *)i;
                v112 = i;
                do
                {
                  v113 = v112;
                  v114 = v111 + 1;
                  v112 += 12 * (v111 + 1);
                  v115 = 2 * v111;
                  v111 = (2 * v111) | 1;
                  v116 = v115 + 2;
                  if (v116 < v110)
                  {
                    v117 = *(float *)(v113 + 12 * v114 + 4);
                    v118 = *(float *)(v112 + 16);
                    if (v117 > v118
                      || v117 > (float)(v118 + -0.000001) && *(float *)(v113 + 12 * v114 + 8) < *(float *)(v112 + 20))
                    {
                      v112 += 12;
                      v111 = v116;
                    }
                  }
                  v119 = *(_QWORD *)v112;
                  *(_DWORD *)(v113 + 8) = *(_DWORD *)(v112 + 8);
                  *(_QWORD *)v113 = v119;
                }
                while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
                a2 -= 12;
                if (v112 == a2)
                {
                  *(_DWORD *)(v112 + 8) = v154;
                  *(_QWORD *)v112 = v148;
                }
                else
                {
                  v120 = *(_QWORD *)a2;
                  *(_DWORD *)(v112 + 8) = *(_DWORD *)(a2 + 8);
                  *(_QWORD *)v112 = v120;
                  *(_DWORD *)(a2 + 8) = v154;
                  *(_QWORD *)a2 = v148;
                  v121 = v112 - i + 12;
                  if (v121 >= 13)
                  {
                    v122 = v121 / 0xCuLL - 2;
                    v123 = v122 >> 1;
                    v124 = i + 12 * (v122 >> 1);
                    v125 = *(float *)(v124 + 4);
                    v126 = *(float *)(v112 + 4);
                    v127 = v126 + -0.000001;
                    if (v125 > v126)
                    {
                      v128 = *(float *)(v112 + 8);
LABEL_178:
                      v129 = *(_DWORD *)v112;
                      v130 = *(_QWORD *)v124;
                      *(_DWORD *)(v112 + 8) = *(_DWORD *)(v124 + 8);
                      *(_QWORD *)v112 = v130;
                      if (v122 >= 2)
                      {
                        while (1)
                        {
                          v132 = v123 - 1;
                          v123 = (v123 - 1) >> 1;
                          v131 = i + 12 * v123;
                          v133 = *(float *)(v131 + 4);
                          if (v133 <= v126 && (v133 <= v127 || *(float *)(i + 12 * v123 + 8) >= v128))
                            break;
                          v134 = *(_QWORD *)v131;
                          *(_DWORD *)(v124 + 8) = *(_DWORD *)(v131 + 8);
                          *(_QWORD *)v124 = v134;
                          v124 = i + 12 * v123;
                          if (v132 <= 1)
                            goto LABEL_184;
                        }
                      }
                      v131 = v124;
LABEL_184:
                      *(_DWORD *)v131 = v129;
                      *(float *)(v131 + 4) = v126;
                      *(float *)(v131 + 8) = v128;
                      goto LABEL_185;
                    }
                    if (v125 > v127)
                    {
                      v128 = *(float *)(v112 + 8);
                      if (*(float *)(i + 12 * v123 + 8) < v128)
                        goto LABEL_178;
                    }
                  }
                }
LABEL_185:
                if (v110-- <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = i + 12 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x601)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)(a1 + 12 * v12), (float *)a1, (float *)(a2 - 12));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12 * v12), (float *)(a2 - 12));
          v14 = 3 * v12;
          v15 = (float *)(a1 + 12 * v12 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)(a1 + 12), v15, (float *)(a2 - 24));
          v16 = (float *)(a1 + 12 + 4 * v14);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)(a1 + 24), v16, (float *)(a2 - 36));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(v15, (float *)v13, v16);
          v149 = *(_DWORD *)(a1 + 8);
          v143 = *(_QWORD *)a1;
          v17 = *(_DWORD *)(v13 + 8);
          *(_QWORD *)a1 = *(_QWORD *)v13;
          *(_DWORD *)(a1 + 8) = v17;
          *(_DWORD *)(v13 + 8) = v149;
          *(_QWORD *)v13 = v143;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(float *)(a1 - 8);
          v18 = *(float *)(a1 + 4);
          if (v19 > v18)
            goto LABEL_13;
          if (v19 <= (float)(v18 + -0.000001))
          {
            v20 = *(float *)(a1 + 8);
          }
          else
          {
            v20 = *(float *)(a1 + 8);
            if (*(float *)(a1 - 4) < v20)
              goto LABEL_13;
          }
          v40 = *(float *)(a2 - 8);
          if (v18 <= v40 && (v18 <= (float)(v40 + -0.000001) || v20 >= *(float *)(a2 - 4)))
          {
            for (i = a1 + 12; i < a2; i += 12)
            {
              v42 = *(float *)(i + 4);
              if (v18 > v42 || v18 > (float)(v42 + -0.000001) && v20 < *(float *)(i + 8))
                break;
            }
          }
          else
          {
            v41 = *(float *)(a1 + 16);
            if (v18 <= v41)
            {
              v43 = (float *)(a1 + 28);
              do
              {
                if (v18 > (float)(v41 + -0.000001) && v20 < *(v43 - 2))
                  break;
                v44 = *v43;
                v43 += 3;
                v41 = v44;
              }
              while (v18 <= v44);
              i = (unint64_t)(v43 - 4);
            }
            else
            {
              i = a1 + 12;
            }
          }
          v45 = *(float *)a1;
          v46 = (float *)a2;
          if (i < a2)
          {
            for (j = (float *)(a2 - 4); v18 > v40 || v18 > (float)(v40 + -0.000001) && v20 < *j; j -= 3)
              v40 = *(j - 4);
            v46 = j - 2;
          }
          while (i < (unint64_t)v46)
          {
            v151 = *(_DWORD *)(i + 8);
            v145 = *(_QWORD *)i;
            v48 = *(_QWORD *)v46;
            *(float *)(i + 8) = v46[2];
            *(_QWORD *)i = v48;
            *((_DWORD *)v46 + 2) = v151;
            *(_QWORD *)v46 = v145;
            v49 = *(float *)(i + 16);
            if (v18 <= v49)
            {
              v50 = (float *)(i + 28);
              do
              {
                if (v18 > (float)(v49 + -0.000001) && v20 < *(v50 - 2))
                  break;
                v51 = *v50;
                v50 += 3;
                v49 = v51;
              }
              while (v18 <= v51);
              i = (unint64_t)(v50 - 4);
            }
            else
            {
              i += 12;
            }
            do
            {
              do
              {
                v46 -= 3;
                v52 = v46[1];
              }
              while (v18 > v52);
            }
            while (v18 > (float)(v52 + -0.000001) && v20 < v46[2]);
          }
          if (i - 12 != a1)
          {
            v53 = *(_QWORD *)(i - 12);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 4);
            *(_QWORD *)a1 = v53;
          }
          a4 = 0;
          *(float *)(i - 12) = v45;
          *(float *)(i - 8) = v18;
          *(float *)(i - 4) = v20;
          continue;
        }
        v18 = *(float *)(a1 + 4);
LABEL_13:
        v21 = 0;
        v22 = *(float *)a1;
        v23 = *(float *)(a1 + 8);
        v24 = v18 + -0.000001;
        while (1)
        {
          v25 = *(float *)(a1 + v21 + 16);
          if (v25 <= v18 && (v25 <= v24 || *(float *)(a1 + v21 + 20) >= v23))
            break;
          v21 += 12;
        }
        v26 = a1 + v21 + 12;
        if (v21)
        {
          v27 = *(float *)(a2 - 8);
          v28 = (float *)(a2 - 4);
          v29 = (float *)(a2 - 12);
          if (v27 <= v18)
          {
            do
            {
              if (v27 > v24 && *v28 < v23)
                break;
              v27 = *(v28 - 4);
              v28 -= 3;
            }
            while (v27 <= v18);
LABEL_23:
            v29 = v28 - 2;
          }
        }
        else
        {
          v29 = (float *)a2;
          if (v26 < a2)
          {
            v30 = *(float *)(a2 - 8);
            v29 = (float *)(a2 - 12);
            if (v30 <= v18)
            {
              v28 = (float *)(a2 - 4);
              v29 = (float *)(a2 - 12);
              while (1)
              {
                v31 = v28 - 2;
                if (v30 <= v24)
                {
                  if (v26 >= (unint64_t)v31)
                  {
                    v29 = v28 - 2;
                    break;
                  }
                }
                else if (*v28 < v23 || v26 >= (unint64_t)v31)
                {
                  break;
                }
                v29 -= 3;
                v30 = *(v28 - 4);
                v28 -= 3;
                if (v30 > v18)
                  goto LABEL_23;
              }
            }
          }
        }
        i = v26;
        if (v26 < (unint64_t)v29)
        {
          v33 = v29;
          do
          {
            v150 = *(_DWORD *)(i + 8);
            v144 = *(_QWORD *)i;
            v34 = *(_QWORD *)v33;
            *(float *)(i + 8) = v33[2];
            *(_QWORD *)i = v34;
            *((_DWORD *)v33 + 2) = v150;
            *(_QWORD *)v33 = v144;
            do
            {
              do
              {
                i += 12;
                v35 = *(float *)(i + 4);
              }
              while (v35 > v18);
            }
            while (v35 > v24 && *(float *)(i + 8) < v23);
            v36 = *(v33 - 2);
            if (v36 <= v18)
            {
              v37 = v33 - 1;
              do
              {
                if (v36 > v24 && *v37 < v23)
                  break;
                v36 = *(v37 - 4);
                v37 -= 3;
              }
              while (v36 <= v18);
              v33 = v37 - 2;
            }
            else
            {
              v33 -= 3;
            }
          }
          while (i < (unint64_t)v33);
        }
        if (i - 12 != a1)
        {
          v38 = *(_QWORD *)(i - 12);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(i - 4);
          *(_QWORD *)a1 = v38;
        }
        *(float *)(i - 12) = v22;
        *(float *)(i - 8) = v18;
        *(float *)(i - 4) = v23;
        if (v26 < (unint64_t)v29)
        {
LABEL_57:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *,false>(a1, i - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v39 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(a1, i - 12);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(i, a2))
        {
          if (v39)
            continue;
          goto LABEL_57;
        }
        a2 = i - 12;
        if (!v39)
          goto LABEL_1;
        return;
    }
  }
}

  k = a2;
  v10 = a2 - 2;
  j = a1;
  while (2)
  {
    a1 = j;
    v12 = (char *)k - (char *)j;
    v13 = ((char *)k - (char *)j) >> 4;
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        v118 = (uint64_t)(*(_QWORD *)(*(a2 - 2) + 160) - *(_QWORD *)(*(a2 - 2) + 152)) >> 2;
        v119 = *(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152);
        if (v118 < v119 >> 2
          || v118 == v119 >> 2
          && (v120 = *a3,
              *(_QWORD *)&v238 = *(a2 - 2),
              v121 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v120, (unint64_t *)&v238), v122 = *a3, *(_QWORD *)&v236 = *a1, v121 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v122, (unint64_t *)&v236)))
        {
          v123 = *a1;
          *a1 = *(a2 - 2);
          *(a2 - 2) = v123;
          v124 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v124;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, v10, a3);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a1 + 4, v10, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, v10, a3);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 == k)
              return;
            v125 = a1 + 2;
            if (a1 + 2 == a2)
              return;
            v126 = 0;
            v127 = (__int128 *)a1;
            while (1)
            {
              v128 = v127;
              v127 = (__int128 *)v125;
              v129 = *((_QWORD *)v128 + 2);
              v130 = (uint64_t)(*(_QWORD *)(v129 + 160) - *(_QWORD *)(v129 + 152)) >> 2;
              v131 = *(_QWORD *)(*(_QWORD *)v128 + 160) - *(_QWORD *)(*(_QWORD *)v128 + 152);
              if (v130 < v131 >> 2)
                goto LABEL_115;
              if (v130 == v131 >> 2)
              {
                v140 = *a3;
                *(_QWORD *)&v238 = *((_QWORD *)v128 + 2);
                v141 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v140, (unint64_t *)&v238);
                v142 = *a3;
                *(_QWORD *)&v236 = *(_QWORD *)v128;
                if (v141 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v142, (unint64_t *)&v236))break;
              }
LABEL_131:
              v125 = (unint64_t *)(v127 + 1);
              v126 += 16;
              if (v127 + 1 == (__int128 *)a2)
                return;
            }
            v129 = *(_QWORD *)v127;
LABEL_115:
            v132 = *((_QWORD *)v128 + 3);
            *(_QWORD *)&v238 = v129;
            *((_QWORD *)&v238 + 1) = v132;
            *(_QWORD *)v127 = 0;
            *((_QWORD *)v127 + 1) = 0;
            std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v127, v128);
            v133 = (uint64_t)a1;
            if (v128 != (__int128 *)a1)
            {
              v134 = v126;
              while (1)
              {
                v135 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
                v136 = *(_QWORD *)(*(unint64_t *)((char *)a1 + v134 - 16) + 160)
                     - *(_QWORD *)(*(unint64_t *)((char *)a1 + v134 - 16) + 152);
                if (v135 >= v136 >> 2)
                {
                  if (v135 != v136 >> 2)
                    break;
                  v137 = *a3;
                  *(_QWORD *)&v236 = v238;
                  v138 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v137, (unint64_t *)&v236);
                  v139 = *a3;
                  v239 = *(unint64_t *)((char *)a1 + v134 - 16);
                  if (v138 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v139, &v239))
                    break;
                }
                std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v134, (__int128 *)((char *)a1 + v134 - 16));
                v134 -= 16;
                if (!v134)
                {
                  v133 = (uint64_t)a1;
                  goto LABEL_126;
                }
              }
              v133 = (uint64_t)a1 + v134;
            }
LABEL_126:
            std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v133, &v238);
            v143 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
            if (*((_QWORD *)&v238 + 1))
            {
              v144 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
              do
                v145 = __ldaxr(v144);
              while (__stlxr(v145 - 1, v144));
              if (!v145)
              {
                ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                std::__shared_weak_count::__release_weak(v143);
              }
            }
            goto LABEL_131;
          }
          if (a1 == k)
            return;
          v213 = a1 + 2;
          if (a1 + 2 == a2)
            return;
          while (1)
          {
            v214 = (__int128 *)a1;
            a1 = v213;
            v215 = *((_QWORD *)v214 + 2);
            v216 = (uint64_t)(*(_QWORD *)(v215 + 160) - *(_QWORD *)(v215 + 152)) >> 2;
            v217 = *(_QWORD *)(*(_QWORD *)v214 + 160) - *(_QWORD *)(*(_QWORD *)v214 + 152);
            if (v216 < v217 >> 2)
              goto LABEL_204;
            v218 = a2;
            if (v216 == v217 >> 2)
            {
              v219 = *a3;
              *(_QWORD *)&v238 = *((_QWORD *)v214 + 2);
              v220 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v219, (unint64_t *)&v238);
              v221 = *a3;
              *(_QWORD *)&v236 = *(_QWORD *)v214;
              if (v220 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v221, (unint64_t *)&v236))break;
            }
LABEL_214:
            v213 = a1 + 2;
            if (a1 + 2 == v218)
              return;
          }
          v215 = *a1;
LABEL_204:
          v222 = *((_QWORD *)v214 + 3);
          *(_QWORD *)&v238 = v215;
          *((_QWORD *)&v238 + 1) = v222;
          *a1 = 0;
          a1[1] = 0;
          do
          {
            do
            {
              v223 = (uint64_t)v214;
              std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)(v214 + 1), v214);
              v224 = *((_QWORD *)v214-- - 2);
              v225 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
              v226 = *(_QWORD *)(v224 + 160) - *(_QWORD *)(v224 + 152);
            }
            while (v225 < v226 >> 2);
            if (v225 != v226 >> 2)
              break;
            v227 = *a3;
            *(_QWORD *)&v236 = v238;
            v228 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v227, (unint64_t *)&v236);
            v229 = *a3;
            v239 = *(_QWORD *)(v223 - 16);
          }
          while (v228 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v229, &v239));
          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v223, &v238);
          v230 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
          if (*((_QWORD *)&v238 + 1))
          {
            v231 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
          v218 = a2;
          goto LABEL_214;
        }
        if (!a4)
        {
          if (a1 == k)
            return;
          v146 = (unint64_t)(v13 - 2) >> 1;
          v234 = v146;
          while (1)
          {
            v147 = v146;
            if (v234 >= v146)
            {
              v148 = (2 * v146) | 1;
              v149 = (__int128 *)&a1[2 * v148];
              if (2 * v146 + 2 < v13)
              {
                v150 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v149 + 160) - *(_QWORD *)(*(_QWORD *)v149 + 152)) >> 2;
                v151 = *(_QWORD *)(*((_QWORD *)v149 + 2) + 160) - *(_QWORD *)(*((_QWORD *)v149 + 2) + 152);
                if (v150 < v151 >> 2
                  || v150 == v151 >> 2
                  && (v152 = *a3,
                      *(_QWORD *)&v238 = *(_QWORD *)v149,
                      v153 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v152, (unint64_t *)&v238), v154 = *a3, *(_QWORD *)&v236 = *((_QWORD *)v149 + 2), v153 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v154, (unint64_t *)&v236)))
                {
                  ++v149;
                  v148 = 2 * v147 + 2;
                }
              }
              v155 = &a1[2 * v147];
              v156 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v149 + 160) - *(_QWORD *)(*(_QWORD *)v149 + 152)) >> 2;
              v157 = *v155;
              v158 = *(_QWORD *)(*v155 + 160) - *(_QWORD *)(*v155 + 152);
              if (v156 >= v158 >> 2)
              {
                if (v156 != v158 >> 2)
                  goto LABEL_145;
                v159 = *a3;
                *(_QWORD *)&v238 = *(_QWORD *)v149;
                v160 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v159, (unint64_t *)&v238);
                v161 = *a3;
                *(_QWORD *)&v236 = *v155;
                if (v160 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v161, (unint64_t *)&v236))break;
              }
            }
LABEL_162:
            v146 = v147 - 1;
            if (!v147)
            {
              v177 = (unint64_t)v12 >> 4;
              while (1)
              {
                v178 = 0;
                v236 = *(_OWORD *)a1;
                *a1 = 0;
                a1[1] = 0;
                v179 = a1;
                do
                {
                  v180 = (uint64_t)v179;
                  v179 += 2 * v178 + 2;
                  v181 = 2 * v178;
                  v178 = (2 * v178) | 1;
                  v182 = v181 + 2;
                  if (v181 + 2 < v177)
                  {
                    v183 = (uint64_t)(*(_QWORD *)(*v179 + 160) - *(_QWORD *)(*v179 + 152)) >> 2;
                    v184 = *(_QWORD *)(v179[2] + 160) - *(_QWORD *)(v179[2] + 152);
                    if (v183 < v184 >> 2
                      || v183 == v184 >> 2
                      && (v185 = *a3,
                          *(_QWORD *)&v238 = *v179,
                          v186 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v185, (unint64_t *)&v238), v187 = *a3, v239 = v179[2], v186 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v187, &v239)))
                    {
                      v179 += 2;
                      v178 = v182;
                    }
                  }
                  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v180, (__int128 *)v179);
                }
                while (v178 <= (uint64_t)((unint64_t)(v177 - 2) >> 1));
                v188 = (__int128 *)(a2 - 2);
                v189 = v179 == a2 - 2;
                a2 -= 2;
                if (v189)
                {
                  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v179, &v236);
                }
                else
                {
                  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v179, v188);
                  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v188, &v236);
                  v190 = (char *)v179 - (char *)a1 + 16;
                  if (v190 >= 17)
                  {
                    v191 = ((unint64_t)v190 >> 4) - 2;
                    v192 = v191 >> 1;
                    v193 = (uint64_t)&a1[2 * (v191 >> 1)];
                    v194 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v193 + 160) - *(_QWORD *)(*(_QWORD *)v193 + 152)) >> 2;
                    v195 = *v179;
                    v196 = *(_QWORD *)(*v179 + 160) - *(_QWORD *)(*v179 + 152);
                    if (v194 < v196 >> 2)
                      goto LABEL_174;
                    if (v194 == v196 >> 2)
                    {
                      v207 = *a3;
                      *(_QWORD *)&v238 = *(_QWORD *)v193;
                      v208 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v207, (unint64_t *)&v238);
                      v209 = *a3;
                      v239 = *v179;
                      if (v208 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v209, &v239))
                      {
                        v195 = *v179;
LABEL_174:
                        *(_QWORD *)&v238 = v195;
                        *((_QWORD *)&v238 + 1) = v179[1];
                        *v179 = 0;
                        v179[1] = 0;
                        std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v179, (__int128 *)&a1[2 * (v191 >> 1)]);
                        v197 = (uint64_t)&a1[2 * (v191 >> 1)];
                        while (v191 >= 2)
                        {
                          v191 = v192 - 1;
                          v192 = (v192 - 1) >> 1;
                          v197 = (uint64_t)&a1[2 * v192];
                          v198 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v197 + 160) - *(_QWORD *)(*(_QWORD *)v197 + 152)) >> 2;
                          v199 = *(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152);
                          if (v198 >= v199 >> 2)
                          {
                            if (v198 != v199 >> 2
                              || (v200 = *a3,
                                  v239 = *(_QWORD *)v197,
                                  v201 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v200, &v239), v202 = *a3, v237 = v238, v201 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v202, &v237)))
                            {
                              v197 = v193;
                              break;
                            }
                          }
                          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v193, (__int128 *)&a1[2 * v192]);
                          v193 = (uint64_t)&a1[2 * v192];
                        }
                        std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v197, &v238);
                        v210 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
                        if (*((_QWORD *)&v238 + 1))
                        {
                          v211 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
                          do
                            v212 = __ldaxr(v211);
                          while (__stlxr(v212 - 1, v211));
                          if (!v212)
                          {
                            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                            std::__shared_weak_count::__release_weak(v210);
                          }
                        }
                      }
                    }
                  }
                }
                v203 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
                if (*((_QWORD *)&v236 + 1))
                {
                  v204 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
                  do
                    v205 = __ldaxr(v204);
                  while (__stlxr(v205 - 1, v204));
                  if (!v205)
                  {
                    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                    std::__shared_weak_count::__release_weak(v203);
                  }
                }
                if (v177-- <= 2)
                  return;
              }
            }
          }
          v157 = *v155;
LABEL_145:
          *(_QWORD *)&v238 = v157;
          *((_QWORD *)&v238 + 1) = a1[2 * v147 + 1];
          *v155 = 0;
          v155[1] = 0;
          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&a1[2 * v147], v149);
          for (i = v149; ; v149 = i)
          {
            if (v234 < v148)
              goto LABEL_157;
            v163 = 2 * v148;
            v148 = (2 * v148) | 1;
            i = (__int128 *)&a1[2 * v148];
            v164 = v163 + 2;
            if (v163 + 2 < v13)
            {
              v165 = (uint64_t)(*(_QWORD *)(*(_QWORD *)i + 160) - *(_QWORD *)(*(_QWORD *)i + 152)) >> 2;
              v166 = *(_QWORD *)(*((_QWORD *)i + 2) + 160) - *(_QWORD *)(*((_QWORD *)i + 2) + 152);
              if (v165 < v166 >> 2
                || v165 == v166 >> 2
                && (v167 = *a3,
                    *(_QWORD *)&v236 = *(_QWORD *)i,
                    v233 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v167, (unint64_t *)&v236), v168 = *a3, v239 = *((_QWORD *)i + 2), v233 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v168, &v239)))
              {
                ++i;
                v148 = v164;
              }
            }
            v169 = (uint64_t)(*(_QWORD *)(*(_QWORD *)i + 160) - *(_QWORD *)(*(_QWORD *)i + 152)) >> 2;
            v170 = *(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152);
            if (v169 < v170 >> 2)
              break;
            if (v169 == v170 >> 2)
            {
              v171 = *a3;
              *(_QWORD *)&v236 = *(_QWORD *)i;
              v172 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v171, (unint64_t *)&v236);
              v173 = *a3;
              v239 = v238;
              if (v172 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v173, &v239))
                break;
            }
            std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v149, i);
          }
          i = v149;
LABEL_157:
          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)i, &v238);
          v174 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
          if (*((_QWORD *)&v238 + 1))
          {
            v175 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
          goto LABEL_162;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &a1[2 * ((unint64_t)v13 >> 1)];
        if ((unint64_t)v12 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(v15, a1, v10, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, v15, v10, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1 + 2, v15 - 2, a2 - 4, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1 + 4, &a1[2 * v14 + 2], a2 - 6, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(v15 - 2, v15, &a1[2 * v14 + 2], a3);
          v16 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v15;
          *(_OWORD *)v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v17 = (uint64_t)(*(_QWORD *)(*(a1 - 2) + 160) - *(_QWORD *)(*(a1 - 2) + 152)) >> 2;
          v18 = *(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152);
          if (v17 >= v18 >> 2)
          {
            if (v17 != v18 >> 2
              || (v19 = *a3,
                  *(_QWORD *)&v238 = *(a1 - 2),
                  v20 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v19, (unint64_t *)&v238), v21 = *a3, *(_QWORD *)&v236 = *a1, v20 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v21, (unint64_t *)&v236)))
            {
              v238 = *(_OWORD *)a1;
              v75 = v238;
              *a1 = 0;
              a1[1] = 0;
              v76 = v75;
              v77 = (uint64_t)(*(_QWORD *)(v75 + 160) - *(_QWORD *)(v75 + 152)) >> 2;
              v78 = *(_QWORD *)(*v10 + 160) - *(_QWORD *)(*v10 + 152);
              if (v77 >= v78 >> 2)
              {
                if (v77 != v78 >> 2
                  || (v110 = *a3,
                      *(_QWORD *)&v236 = v75,
                      v111 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v110, (unint64_t *)&v236), v112 = *a3, v239 = *v10, v111 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v112, &v239)))
                {
                  for (j = a1 + 2; j < k; j += 2)
                  {
                    v113 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
                    v114 = *(_QWORD *)(*j + 160) - *(_QWORD *)(*j + 152);
                    if (v113 < v114 >> 2)
                      break;
                    if (v113 == v114 >> 2)
                    {
                      v115 = *a3;
                      *(_QWORD *)&v236 = v238;
                      v116 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v115, (unint64_t *)&v236);
                      v117 = *a3;
                      v239 = *j;
                      if (v116 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v117, &v239))
                        break;
                    }
                  }
                  goto LABEL_67;
                }
                v76 = v238;
                v77 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
              }
              j = a1 + 2;
              v79 = *(_QWORD *)(a1[2] + 160) - *(_QWORD *)(a1[2] + 152);
              if (v77 >= v79 >> 2)
              {
                v80 = v79 >> 2;
                do
                {
                  if (v77 == v80)
                  {
                    v81 = *a3;
                    *(_QWORD *)&v236 = v76;
                    v82 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v81, (unint64_t *)&v236);
                    v83 = *a3;
                    v239 = *j;
                    if (v82 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v83, &v239))
                      break;
                    v76 = v238;
                  }
                  v84 = j[2];
                  j += 2;
                  v77 = (uint64_t)(*(_QWORD *)(v76 + 160) - *(_QWORD *)(v76 + 152)) >> 2;
                  v80 = (uint64_t)(*(_QWORD *)(v84 + 160) - *(_QWORD *)(v84 + 152)) >> 2;
                }
                while (v77 >= v80);
              }
LABEL_67:
              if (j < k)
              {
                for (k = a2 - 2; ; k -= 2)
                {
                  v85 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
                  v86 = *(_QWORD *)(*k + 160) - *(_QWORD *)(*k + 152);
                  if (v85 >= v86 >> 2)
                  {
                    if (v85 != v86 >> 2)
                      break;
                    v87 = *a3;
                    *(_QWORD *)&v236 = v238;
                    v88 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v87, (unint64_t *)&v236);
                    v89 = *a3;
                    v239 = *k;
                    if (v88 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v89, &v239))
                      break;
                  }
                }
              }
              while (j < k)
              {
                v90 = *j;
                *j = *k;
                *k = v90;
                v91 = j[1];
                j[1] = k[1];
                k[1] = v91;
                v92 = j[2];
                j += 2;
                v93 = v238;
                v94 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
                v95 = *(_QWORD *)(v92 + 160) - *(_QWORD *)(v92 + 152);
                if (v94 >= v95 >> 2)
                {
                  v96 = v95 >> 2;
                  do
                  {
                    if (v94 == v96)
                    {
                      v97 = *a3;
                      *(_QWORD *)&v236 = v93;
                      v98 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v97, (unint64_t *)&v236);
                      v99 = *a3;
                      v239 = *j;
                      if (v98 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v99, &v239))
                        goto LABEL_79;
                      v93 = v238;
                    }
                    v100 = j[2];
                    j += 2;
                    v94 = (uint64_t)(*(_QWORD *)(v93 + 160) - *(_QWORD *)(v93 + 152)) >> 2;
                    v96 = (uint64_t)(*(_QWORD *)(v100 + 160) - *(_QWORD *)(v100 + 152)) >> 2;
                  }
                  while (v94 >= v96);
                }
                do
                {
                  do
                  {
LABEL_79:
                    v101 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
                    v102 = *(k - 2);
                    k -= 2;
                    v103 = *(_QWORD *)(v102 + 160) - *(_QWORD *)(v102 + 152);
                  }
                  while (v101 < v103 >> 2);
                  if (v101 != v103 >> 2)
                    break;
                  v104 = *a3;
                  *(_QWORD *)&v236 = v238;
                  v105 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v104, (unint64_t *)&v236);
                  v106 = *a3;
                  v239 = *k;
                }
                while (v105 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v106, &v239));
              }
              if (j - 2 != a1)
                std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)j - 1);
              std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)(j - 2), &v238);
              v107 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
              k = a2;
              if (*((_QWORD *)&v238 + 1))
              {
                v108 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              a5 = 0;
              continue;
            }
          }
        }
        v238 = *(_OWORD *)a1;
        v22 = v238;
        *a1 = 0;
        a1[1] = 0;
        v23 = v22;
        v24 = a1;
        while (1)
        {
          do
          {
            v26 = v24[2];
            v24 += 2;
            v25 = v26;
            v27 = (uint64_t)(*(_QWORD *)(v26 + 160) - *(_QWORD *)(v26 + 152)) >> 2;
            v28 = *(_QWORD *)(v23 + 160) - *(_QWORD *)(v23 + 152);
          }
          while (v27 < v28 >> 2);
          if (v27 != v28 >> 2)
            break;
          v29 = *a3;
          *(_QWORD *)&v236 = v25;
          v30 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, (unint64_t *)&v236);
          v31 = *a3;
          v239 = v238;
          if (v30 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v31, &v239))
            break;
          v23 = v238;
        }
        v32 = (uint64_t)(v24 - 2);
        if (v24 - 2 == a1)
        {
          if (v24 < k)
          {
            v42 = *v10;
            v43 = (uint64_t)(*(_QWORD *)(*v10 + 160) - *(_QWORD *)(*v10 + 152)) >> 2;
            v44 = v238;
            v45 = *(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152);
            k = a2 - 2;
            if (v43 >= v45 >> 2)
            {
              v46 = v45 >> 2;
              k = a2 - 2;
              do
              {
                if (v43 == v46)
                {
                  v47 = *a3;
                  *(_QWORD *)&v236 = v42;
                  v48 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v47, (unint64_t *)&v236);
                  v49 = *a3;
                  v239 = v238;
                  v50 = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v49, &v239);
                  if (v24 >= k || v48 < *(_DWORD *)v50)
                    break;
                  v44 = v238;
                }
                else if (v24 >= k)
                {
                  break;
                }
                v51 = *(k - 2);
                k -= 2;
                v42 = v51;
                v43 = (uint64_t)(*(_QWORD *)(v51 + 160) - *(_QWORD *)(v51 + 152)) >> 2;
                v46 = (uint64_t)(*(_QWORD *)(v44 + 160) - *(_QWORD *)(v44 + 152)) >> 2;
              }
              while (v43 >= v46);
            }
          }
        }
        else
        {
          v33 = *v10;
          v34 = (uint64_t)(*(_QWORD *)(*v10 + 160) - *(_QWORD *)(*v10 + 152)) >> 2;
          v35 = v238;
          v36 = *(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152);
          k = a2 - 2;
          if (v34 >= v36 >> 2)
          {
            v37 = v36 >> 2;
            k = a2 - 2;
            do
            {
              if (v34 == v37)
              {
                v38 = *a3;
                *(_QWORD *)&v236 = v33;
                v39 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v38, (unint64_t *)&v236);
                v40 = *a3;
                v239 = v238;
                if (v39 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v40, &v239))
                  break;
                v35 = v238;
              }
              v41 = *(k - 2);
              k -= 2;
              v33 = v41;
              v34 = (uint64_t)(*(_QWORD *)(v41 + 160) - *(_QWORD *)(v41 + 152)) >> 2;
              v37 = (uint64_t)(*(_QWORD *)(v35 + 160) - *(_QWORD *)(v35 + 152)) >> 2;
            }
            while (v34 >= v37);
          }
        }
        if (v24 < k)
        {
          v52 = v24;
          v53 = k;
          do
          {
            v54 = *v52;
            *v52 = *v53;
            *v53 = v54;
            v55 = v52[1];
            v52[1] = v53[1];
            v53[1] = v55;
            while (1)
            {
              do
              {
                v52 += 2;
                v56 = (uint64_t)(*(_QWORD *)(*v52 + 160) - *(_QWORD *)(*v52 + 152)) >> 2;
                v57 = v238;
                v58 = *(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152);
              }
              while (v56 < v58 >> 2);
              v59 = v58 >> 2;
              if (v56 != v59)
                break;
              v60 = *a3;
              *(_QWORD *)&v236 = *v52;
              v61 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v60, (unint64_t *)&v236);
              v62 = *a3;
              v239 = v238;
              if (v61 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v62, &v239))
              {
                v57 = v238;
                v59 = (uint64_t)(*(_QWORD *)(v238 + 160) - *(_QWORD *)(v238 + 152)) >> 2;
                break;
              }
            }
            v64 = *(v53 - 2);
            v53 -= 2;
            v63 = v64;
            for (m = (uint64_t)(*(_QWORD *)(v64 + 160) - *(_QWORD *)(v64 + 152)) >> 2;
                  m >= v59;
                  v59 = (uint64_t)(*(_QWORD *)(v57 + 160) - *(_QWORD *)(v57 + 152)) >> 2)
            {
              if (m == v59)
              {
                v66 = *a3;
                *(_QWORD *)&v236 = v63;
                v67 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v66, (unint64_t *)&v236);
                v68 = *a3;
                v239 = v238;
                if (v67 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v68, &v239))
                  break;
                v57 = v238;
              }
              v69 = *(v53 - 2);
              v53 -= 2;
              v63 = v69;
              m = (uint64_t)(*(_QWORD *)(v69 + 160) - *(_QWORD *)(v69 + 152)) >> 2;
            }
          }
          while (v52 < v53);
          v32 = (uint64_t)(v52 - 2);
        }
        if ((unint64_t *)v32 != a1)
          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v32);
        std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v32, &v238);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
        if (*((_QWORD *)&v238 + 1))
        {
          v71 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = v24 >= k;
        k = a2;
        if (!v73)
        {
LABEL_59:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>(a1, v32, a3, a4, a5 & 1);
          a5 = 0;
          j = (unint64_t *)(v32 + 16);
          continue;
        }
        v74 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, (unint64_t *)v32, a3);
        j = (unint64_t *)(v32 + 16);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>((unint64_t *)(v32 + 16), a2, a3))
        {
          if (v74)
            continue;
          goto LABEL_59;
        }
        a2 = (unint64_t *)v32;
        if (!v74)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v38 = *(float *)(a2 - 8);
        v39 = *(float *)v8;
        if (v38 < *(float *)v8)
        {
          *(float *)v8 = v38;
          *(float *)(a2 - 8) = v39;
          v40 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v40;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v8, (float *)(v8 + 8), (float *)(a2 - 8));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v8, v8 + 8, v8 + 16, a2 - 8);
        return;
      case 5uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v8, v8 + 8, v8 + 16, v8 + 24);
        v41 = *(float *)(a2 - 8);
        v42 = *(float *)(v8 + 24);
        if (v41 < v42)
        {
          *(float *)(v8 + 24) = v41;
          *(float *)(a2 - 8) = v42;
          v43 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v43;
          v44 = *(float *)(v8 + 24);
          v45 = *(float *)(v8 + 16);
          if (v44 < v45)
          {
            v46 = *(_DWORD *)(v8 + 20);
            v47 = *(_DWORD *)(v8 + 28);
            *(float *)(v8 + 16) = v44;
            *(_DWORD *)(v8 + 20) = v47;
            *(float *)(v8 + 24) = v45;
            *(_DWORD *)(v8 + 28) = v46;
            v48 = *(float *)(v8 + 8);
            if (v44 < v48)
            {
              v49 = *(_DWORD *)(v8 + 12);
              *(float *)(v8 + 8) = v44;
              *(_DWORD *)(v8 + 12) = v47;
              *(float *)(v8 + 16) = v48;
              *(_DWORD *)(v8 + 20) = v49;
              v50 = *(float *)v8;
              if (v44 < *(float *)v8)
              {
                v51 = *(_DWORD *)(v8 + 4);
                *(float *)v8 = v44;
                *(_DWORD *)(v8 + 4) = v47;
                *(float *)(v8 + 8) = v50;
                *(_DWORD *)(v8 + 12) = v51;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 191)
        {
          v52 = v8 + 8;
          v54 = v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = v52;
                v58 = *(float *)(v56 + 8);
                v59 = *(float *)v56;
                if (v58 < *(float *)v56)
                {
                  v60 = *(_DWORD *)(v56 + 12);
                  v61 = v55;
                  while (1)
                  {
                    v62 = v8 + v61;
                    v63 = *(_DWORD *)(v8 + v61 + 4);
                    *(float *)(v62 + 8) = v59;
                    *(_DWORD *)(v62 + 12) = v63;
                    if (!v61)
                      break;
                    v59 = *(float *)(v62 - 8);
                    v61 -= 8;
                    if (v58 >= v59)
                    {
                      v64 = v8 + v61 + 8;
                      goto LABEL_78;
                    }
                  }
                  v64 = v8;
LABEL_78:
                  *(float *)v64 = v58;
                  *(_DWORD *)(v64 + 4) = v60;
                }
                v52 = v57 + 8;
                v55 += 8;
                v56 = v57;
              }
              while (v57 + 8 != a2);
            }
          }
          else if (!v54)
          {
            v93 = (float *)(v8 + 12);
            do
            {
              v94 = v52;
              v95 = *(float *)(a1 + 8);
              v96 = *(float *)a1;
              if (v95 < *(float *)a1)
              {
                v97 = *(_DWORD *)(a1 + 12);
                v98 = v93;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = v96;
                  v100 = *((_DWORD *)v98 - 2);
                  v98 -= 2;
                  *(_DWORD *)v99 = v100;
                  v96 = *(v99 - 5);
                }
                while (v95 < v96);
                *(v98 - 1) = v95;
                *(_DWORD *)v98 = v97;
              }
              v52 = v94 + 8;
              v93 += 2;
              a1 = v94;
            }
            while (v94 + 8 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 8 * v68;
                if (2 * v67 + 2 < (uint64_t)v10 && *(float *)v69 < *(float *)(v69 + 8))
                {
                  v69 += 8;
                  v68 = 2 * v67 + 2;
                }
                v70 = v8 + 8 * v67;
                v71 = *(float *)v69;
                v72 = *(float *)v70;
                if (*(float *)v69 >= *(float *)v70)
                {
                  v73 = *(_DWORD *)(v70 + 4);
                  do
                  {
                    v74 = (float *)v70;
                    v70 = v69;
                    *v74 = v71;
                    v74[1] = *(float *)(v69 + 4);
                    if (v65 < v68)
                      break;
                    v75 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = v8 + 8 * v68;
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v10 && *(float *)v69 < *(float *)(v69 + 8))
                    {
                      v69 += 8;
                      v68 = v76;
                    }
                    v71 = *(float *)v69;
                  }
                  while (*(float *)v69 >= v72);
                  *(float *)v70 = v72;
                  *(_DWORD *)(v70 + 4) = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v77 = (unint64_t)v9 >> 3;
            do
            {
              v78 = 0;
              v80 = *(float *)v8;
              v79 = *(_DWORD *)(v8 + 4);
              v81 = (_DWORD *)v8;
              do
              {
                v82 = v81;
                v81 += 2 * v78 + 2;
                v83 = 2 * v78;
                v78 = (2 * v78) | 1;
                v84 = v83 + 2;
                if (v84 < v77 && *(float *)v81 < *((float *)v81 + 2))
                {
                  v81 += 2;
                  v78 = v84;
                }
                *v82 = *v81;
                v82[1] = v81[1];
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v81 == (_DWORD *)(a2 - 8))
              {
                *(float *)v81 = v80;
                v81[1] = v79;
              }
              else
              {
                *v81 = *(_DWORD *)(a2 - 8);
                v81[1] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v80;
                *(_DWORD *)(a2 - 4) = v79;
                v85 = (uint64_t)v81 - v8 + 8;
                if (v85 >= 9)
                {
                  v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                  v87 = (float *)(v8 + 8 * v86);
                  v88 = *v87;
                  v89 = *(float *)v81;
                  if (*v87 < *(float *)v81)
                  {
                    v90 = v81[1];
                    do
                    {
                      v91 = (float *)v81;
                      v81 = v87;
                      *v91 = v88;
                      v91[1] = v87[1];
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = (float *)(v8 + 8 * v86);
                      v88 = *v87;
                    }
                    while (*v87 < v89);
                    *(float *)v81 = v89;
                    v81[1] = v90;
                  }
                }
              }
              a2 -= 8;
            }
            while (v77-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8 * (v10 >> 1)), (float *)a1, (float *)(a2 - 8));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8 * (v10 >> 1)), (float *)(a2 - 8));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8), v12 - 2, (float *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v11), (float *)(a2 - 24));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(v12 - 2, v12, (float *)(a1 + 8 + 8 * v11));
          v13 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 8) >= v14)
        {
          if (v14 >= *(float *)(a2 - 8))
          {
            v29 = a1 + 8;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v29 += 8;
            }
            while (v14 >= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v28 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v14 >= v28);
          }
          v30 = (float *)a2;
          if (v8 < a2)
          {
            v30 = (float *)a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v14 < v31);
          }
          v32 = *(_DWORD *)(a1 + 4);
          if (v8 < (unint64_t)v30)
          {
            v33 = *(float *)v8;
            v34 = *v30;
            do
            {
              *(float *)v8 = v34;
              *v30 = v33;
              v35 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v30[1];
              *((_DWORD *)v30 + 1) = v35;
              do
              {
                v36 = *(float *)(v8 + 8);
                v8 += 8;
                v33 = v36;
              }
              while (v14 >= v36);
              do
              {
                v37 = *(v30 - 2);
                v30 -= 2;
                v34 = v37;
              }
              while (v14 < v37);
            }
            while (v8 < (unint64_t)v30);
          }
          if (v8 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 8) = v14;
          *(_DWORD *)(v8 - 4) = v32;
          continue;
        }
        v15 = 0;
        v16 = *(_DWORD *)(a1 + 4);
        do
        {
          v17 = *(float *)(a1 + v15 + 8);
          v15 += 8;
        }
        while (v17 < v14);
        v18 = a1 + v15;
        v19 = (float *)a2;
        if (v15 == 8)
        {
          v19 = (float *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (v20 >= v14);
        }
        if (v18 >= (unint64_t)v19)
        {
          v8 = a1 + v15;
        }
        else
        {
          v22 = *v19;
          v8 = a1 + v15;
          v23 = v19;
          do
          {
            *(float *)v8 = v22;
            *v23 = v17;
            v24 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v23[1];
            *((_DWORD *)v23 + 1) = v24;
            do
            {
              v25 = *(float *)(v8 + 8);
              v8 += 8;
              v17 = v25;
            }
            while (v25 < v14);
            do
            {
              v26 = *(v23 - 2);
              v23 -= 2;
              v22 = v26;
            }
            while (v26 >= v14);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 8) = v14;
        *(_DWORD *)(v8 - 4) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_31:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*,false>(a1, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(a1, v8 - 8);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(v8, a2))
        {
          if (v27)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 8;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v38 = *(float *)(a2 - 8);
        v39 = *(float *)v8;
        if (v38 < *(float *)v8)
        {
          *(float *)v8 = v38;
          *(float *)(a2 - 8) = v39;
          v40 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v40;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v8, (float *)(v8 + 8), (float *)(a2 - 8));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v8, v8 + 8, v8 + 16, a2 - 8);
        return;
      case 5uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)v8, v8 + 8, v8 + 16, v8 + 24);
        v41 = *(float *)(a2 - 8);
        v42 = *(float *)(v8 + 24);
        if (v41 < v42)
        {
          *(float *)(v8 + 24) = v41;
          *(float *)(a2 - 8) = v42;
          v43 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v43;
          v44 = *(float *)(v8 + 24);
          v45 = *(float *)(v8 + 16);
          if (v44 < v45)
          {
            v46 = *(_DWORD *)(v8 + 20);
            v47 = *(_DWORD *)(v8 + 28);
            *(float *)(v8 + 16) = v44;
            *(_DWORD *)(v8 + 20) = v47;
            *(float *)(v8 + 24) = v45;
            *(_DWORD *)(v8 + 28) = v46;
            v48 = *(float *)(v8 + 8);
            if (v44 < v48)
            {
              v49 = *(_DWORD *)(v8 + 12);
              *(float *)(v8 + 8) = v44;
              *(_DWORD *)(v8 + 12) = v47;
              *(float *)(v8 + 16) = v48;
              *(_DWORD *)(v8 + 20) = v49;
              v50 = *(float *)v8;
              if (v44 < *(float *)v8)
              {
                v51 = *(_DWORD *)(v8 + 4);
                *(float *)v8 = v44;
                *(_DWORD *)(v8 + 4) = v47;
                *(float *)(v8 + 8) = v50;
                *(_DWORD *)(v8 + 12) = v51;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 191)
        {
          v52 = v8 + 8;
          v54 = v8 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = v8;
              do
              {
                v57 = v52;
                v58 = *(float *)(v56 + 8);
                v59 = *(float *)v56;
                if (v58 < *(float *)v56)
                {
                  v60 = *(_DWORD *)(v56 + 12);
                  v61 = v55;
                  while (1)
                  {
                    v62 = v8 + v61;
                    v63 = *(_DWORD *)(v8 + v61 + 4);
                    *(float *)(v62 + 8) = v59;
                    *(_DWORD *)(v62 + 12) = v63;
                    if (!v61)
                      break;
                    v59 = *(float *)(v62 - 8);
                    v61 -= 8;
                    if (v58 >= v59)
                    {
                      v64 = v8 + v61 + 8;
                      goto LABEL_78;
                    }
                  }
                  v64 = v8;
LABEL_78:
                  *(float *)v64 = v58;
                  *(_DWORD *)(v64 + 4) = v60;
                }
                v52 = v57 + 8;
                v55 += 8;
                v56 = v57;
              }
              while (v57 + 8 != a2);
            }
          }
          else if (!v54)
          {
            v93 = (float *)(v8 + 12);
            do
            {
              v94 = v52;
              v95 = *(float *)(a1 + 8);
              v96 = *(float *)a1;
              if (v95 < *(float *)a1)
              {
                v97 = *(_DWORD *)(a1 + 12);
                v98 = v93;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = v96;
                  v100 = *((_DWORD *)v98 - 2);
                  v98 -= 2;
                  *(_DWORD *)v99 = v100;
                  v96 = *(v99 - 5);
                }
                while (v95 < v96);
                *(v98 - 1) = v95;
                *(_DWORD *)v98 = v97;
              }
              v52 = v94 + 8;
              v93 += 2;
              a1 = v94;
            }
            while (v94 + 8 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 8 * v68;
                if (2 * v67 + 2 < (uint64_t)v10 && *(float *)v69 < *(float *)(v69 + 8))
                {
                  v69 += 8;
                  v68 = 2 * v67 + 2;
                }
                v70 = v8 + 8 * v67;
                v71 = *(float *)v69;
                v72 = *(float *)v70;
                if (*(float *)v69 >= *(float *)v70)
                {
                  v73 = *(_DWORD *)(v70 + 4);
                  do
                  {
                    v74 = (float *)v70;
                    v70 = v69;
                    *v74 = v71;
                    v74[1] = *(float *)(v69 + 4);
                    if (v65 < v68)
                      break;
                    v75 = 2 * v68;
                    v68 = (2 * v68) | 1;
                    v69 = v8 + 8 * v68;
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v10 && *(float *)v69 < *(float *)(v69 + 8))
                    {
                      v69 += 8;
                      v68 = v76;
                    }
                    v71 = *(float *)v69;
                  }
                  while (*(float *)v69 >= v72);
                  *(float *)v70 = v72;
                  *(_DWORD *)(v70 + 4) = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v77 = (unint64_t)v9 >> 3;
            do
            {
              v78 = 0;
              v80 = *(float *)v8;
              v79 = *(_DWORD *)(v8 + 4);
              v81 = (_DWORD *)v8;
              do
              {
                v82 = v81;
                v81 += 2 * v78 + 2;
                v83 = 2 * v78;
                v78 = (2 * v78) | 1;
                v84 = v83 + 2;
                if (v84 < v77 && *(float *)v81 < *((float *)v81 + 2))
                {
                  v81 += 2;
                  v78 = v84;
                }
                *v82 = *v81;
                v82[1] = v81[1];
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v81 == (_DWORD *)(a2 - 8))
              {
                *(float *)v81 = v80;
                v81[1] = v79;
              }
              else
              {
                *v81 = *(_DWORD *)(a2 - 8);
                v81[1] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v80;
                *(_DWORD *)(a2 - 4) = v79;
                v85 = (uint64_t)v81 - v8 + 8;
                if (v85 >= 9)
                {
                  v86 = (((unint64_t)v85 >> 3) - 2) >> 1;
                  v87 = (float *)(v8 + 8 * v86);
                  v88 = *v87;
                  v89 = *(float *)v81;
                  if (*v87 < *(float *)v81)
                  {
                    v90 = v81[1];
                    do
                    {
                      v91 = (float *)v81;
                      v81 = v87;
                      *v91 = v88;
                      v91[1] = v87[1];
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = (float *)(v8 + 8 * v86);
                      v88 = *v87;
                    }
                    while (*v87 < v89);
                    *(float *)v81 = v89;
                    v81[1] = v90;
                  }
                }
              }
              a2 -= 8;
            }
            while (v77-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 8 * (v10 >> 1));
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8 * (v10 >> 1)), (float *)a1, (float *)(a2 - 8));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8 * (v10 >> 1)), (float *)(a2 - 8));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 8), v12 - 2, (float *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v11), (float *)(a2 - 24));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(v12 - 2, v12, (float *)(a1 + 8 + 8 * v11));
          v13 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 8) >= v14)
        {
          if (v14 >= *(float *)(a2 - 8))
          {
            v29 = a1 + 8;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v29 += 8;
            }
            while (v14 >= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v28 = *(float *)(v8 + 8);
              v8 += 8;
            }
            while (v14 >= v28);
          }
          v30 = (float *)a2;
          if (v8 < a2)
          {
            v30 = (float *)a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v14 < v31);
          }
          v32 = *(_DWORD *)(a1 + 4);
          if (v8 < (unint64_t)v30)
          {
            v33 = *(float *)v8;
            v34 = *v30;
            do
            {
              *(float *)v8 = v34;
              *v30 = v33;
              v35 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v30[1];
              *((_DWORD *)v30 + 1) = v35;
              do
              {
                v36 = *(float *)(v8 + 8);
                v8 += 8;
                v33 = v36;
              }
              while (v14 >= v36);
              do
              {
                v37 = *(v30 - 2);
                v30 -= 2;
                v34 = v37;
              }
              while (v14 < v37);
            }
            while (v8 < (unint64_t)v30);
          }
          if (v8 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 8) = v14;
          *(_DWORD *)(v8 - 4) = v32;
          continue;
        }
        v15 = 0;
        v16 = *(_DWORD *)(a1 + 4);
        do
        {
          v17 = *(float *)(a1 + v15 + 8);
          v15 += 8;
        }
        while (v17 < v14);
        v18 = a1 + v15;
        v19 = (float *)a2;
        if (v15 == 8)
        {
          v19 = (float *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (v20 >= v14);
        }
        if (v18 >= (unint64_t)v19)
        {
          v8 = a1 + v15;
        }
        else
        {
          v22 = *v19;
          v8 = a1 + v15;
          v23 = v19;
          do
          {
            *(float *)v8 = v22;
            *v23 = v17;
            v24 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v23[1];
            *((_DWORD *)v23 + 1) = v24;
            do
            {
              v25 = *(float *)(v8 + 8);
              v8 += 8;
              v17 = v25;
            }
            while (v25 < v14);
            do
            {
              v26 = *(v23 - 2);
              v23 -= 2;
              v22 = v26;
            }
            while (v26 >= v14);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 8) = v14;
        *(_DWORD *)(v8 - 4) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_31:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*,false>(a1, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*>(a1, v8 - 8);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*>(v8, a2))
        {
          if (v27)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 8;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__int128 *)((char *)a2 - 24);
  v10 = (__int128 *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v30 = *a3;
        v31 = *((_QWORD *)a2 - 1);
        v41 = *(__int128 *)((char *)a2 - 24);
        v42 = v31;
        v32 = *((_QWORD *)v10 + 2);
        v39 = *v10;
        v40 = v32;
        if (v30(&v41, &v39))
        {
          v33 = *v10;
          v44 = *((_QWORD *)v10 + 2);
          v43 = v33;
          v34 = *v9;
          *((_QWORD *)v10 + 2) = *((_QWORD *)a2 - 1);
          *v10 = v34;
          *v9 = v43;
          *((_QWORD *)a2 - 1) = v44;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v10, (__int128 *)((char *)v10 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v10, (uint64_t)v10 + 24, (uint64_t)(v10 + 3), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v10, (uint64_t)v10 + 24, (uint64_t)(v10 + 3), (uint64_t)v10 + 72, (__int128 *)((char *)a2 - 24), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v10, (uint64_t)a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((uint64_t)v10, (uint64_t)a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (__int128 *)((char *)v10 + 24 * (v14 >> 1));
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((__int128 *)((char *)v10 + 24 * v15), v10, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v10, (__int128 *)((char *)v10 + 24 * v15), (__int128 *)((char *)a2 - 24), a3);
            v17 = 3 * v15;
            v18 = (__int128 *)((char *)v10 + 24 * v15 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>((__int128 *)((char *)v10 + 24), v18, a2 - 3, a3);
            v19 = v10 + 3;
            v20 = (__int128 *)((char *)v10 + 8 * v17 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v19, v20, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v18, v16, v20, a3);
            v21 = *(_OWORD *)a1;
            v44 = *(_QWORD *)(a1 + 16);
            v43 = v21;
            v22 = *v16;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v16 + 2);
            *(_OWORD *)a1 = v22;
            v23 = v43;
            *((_QWORD *)v16 + 2) = v44;
            *v16 = v23;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v24 = *a3;
          v25 = *(_QWORD *)(a1 - 8);
          v37 = *(_OWORD *)(a1 - 24);
          v38 = v25;
          v26 = *(_QWORD *)(a1 + 16);
          v35 = *(_OWORD *)a1;
          v36 = v26;
          if ((v24(&v37, &v35) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::MatrixElementT<double> *,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>)>((__int128 *)a1, (unint64_t)a2, a3);
          if ((v28 & 1) == 0)
            goto LABEL_14;
          v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(a1, v27, a3);
          v10 = (__int128 *)(v27 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*>(v27 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v29)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,false>(a1, v27, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v27 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(cv3d::cv::gess::math::MatrixElementT<double>,cv3d::cv::gess::math::MatrixElementT<double>),cv3d::cv::gess::math::MatrixElementT<double>*,cv3d::cv::gess::math::MatrixElementT<double>*>((__n128 *)v10, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, __int128 *))a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v44 = *(_QWORD *)(a2 - 8);
        v45 = *(_QWORD *)v8;
        if (*((float *)&v44 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v8)))
        {
          *(_DWORD *)v8 = v44;
          *(_DWORD *)(a2 - 8) = v45;
          v46 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v46;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v8, (float *)(v8 + 8), (float *)(a2 - 8));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), a2 - 8);
        return;
      case 5uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)v8, (float *)(v8 + 8), (float *)(v8 + 16), v8 + 24);
        v47 = *(_QWORD *)(a2 - 8);
        v48 = *(_QWORD *)(v8 + 24);
        if (*((float *)&v47 + 1) > *((float *)&v48 + 1))
        {
          *(_DWORD *)(v8 + 24) = v47;
          *(_DWORD *)(a2 - 8) = v48;
          v49 = *(_DWORD *)(v8 + 28);
          *(_DWORD *)(v8 + 28) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v49;
          v50 = *(_QWORD *)(v8 + 16);
          v51 = *(_QWORD *)(v8 + 24);
          v52 = HIDWORD(v51);
          if (*((float *)&v51 + 1) > *((float *)&v50 + 1))
          {
            *(_QWORD *)(v8 + 16) = v51;
            *(_QWORD *)(v8 + 24) = v50;
            v53 = *(_QWORD *)(v8 + 8);
            v54 = *(_QWORD *)(v8 + 16);
            if (*((float *)&v54 + 1) > *((float *)&v53 + 1))
            {
              *(_DWORD *)(v8 + 8) = v54;
              *(_DWORD *)(v8 + 12) = v52;
              *(_QWORD *)(v8 + 16) = v53;
              v55 = *(_QWORD *)v8;
              v56 = *(_QWORD *)(v8 + 8);
              v57 = HIDWORD(*(_QWORD *)v8);
              if (*((float *)&v56 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v8)))
              {
                *(_DWORD *)v8 = v56;
                *(_DWORD *)(v8 + 4) = v52;
                *(_DWORD *)(v8 + 8) = v55;
                *(_DWORD *)(v8 + 12) = v57;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 191)
        {
          v58 = v8 + 8;
          v60 = v8 == a2 || v58 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v8;
              do
              {
                v63 = v58;
                v64 = *(_QWORD *)v62;
                if (*(float *)(v62 + 12) > COERCE_FLOAT(HIDWORD(*(_QWORD *)v62)))
                {
                  v65 = *(_DWORD *)(v62 + 8);
                  v66 = *(float *)(v62 + 12);
                  v67 = v61;
                  while (1)
                  {
                    v68 = v8 + v67;
                    *(_DWORD *)(v68 + 8) = v64;
                    *(_DWORD *)(v68 + 12) = *(_DWORD *)(v8 + v67 + 4);
                    if (!v67)
                      break;
                    v64 = *(_QWORD *)(v68 - 8);
                    v67 -= 8;
                    if (v66 <= *((float *)&v64 + 1))
                    {
                      v69 = v8 + v67 + 8;
                      goto LABEL_81;
                    }
                  }
                  v69 = v8;
LABEL_81:
                  *(_DWORD *)v69 = v65;
                  *(float *)(v69 + 4) = v66;
                }
                v58 = v63 + 8;
                v61 += 8;
                v62 = v63;
              }
              while (v63 + 8 != a2);
            }
          }
          else if (!v60)
          {
            v98 = (float *)(v8 + 12);
            do
            {
              v99 = v58;
              v100 = *(_QWORD *)a1;
              if (*(float *)(a1 + 12) > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
              {
                v101 = *(_DWORD *)(a1 + 8);
                v102 = *(float *)(a1 + 12);
                v103 = v98;
                do
                {
                  v104 = v103;
                  v105 = *((_DWORD *)v103 - 2);
                  v103 -= 2;
                  *((_DWORD *)v104 - 1) = v100;
                  *(_DWORD *)v104 = v105;
                  v100 = *(_QWORD *)(v104 - 5);
                }
                while (v102 > *((float *)&v100 + 1));
                *((_DWORD *)v103 - 1) = v101;
                *v103 = v102;
              }
              v58 = v99 + 8;
              v98 += 2;
              a1 = v99;
            }
            while (v99 + 8 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v70 = (v10 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = v8 + 8 * v73;
                if (2 * v72 + 2 < (uint64_t)v10 && *(float *)(v74 + 4) > *(float *)(v74 + 12))
                {
                  v74 += 8;
                  v73 = 2 * v72 + 2;
                }
                v75 = v8 + 8 * v72;
                v76 = *(_QWORD *)v74;
                v77 = *(float *)(v75 + 4);
                if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v74)) <= v77)
                {
                  v78 = *(_DWORD *)v75;
                  do
                  {
                    v79 = (_DWORD *)v75;
                    v75 = v74;
                    *v79 = v76;
                    v79[1] = *(_DWORD *)(v74 + 4);
                    if (v70 < v73)
                      break;
                    v80 = 2 * v73;
                    v73 = (2 * v73) | 1;
                    v74 = v8 + 8 * v73;
                    v81 = v80 + 2;
                    if (v81 < (uint64_t)v10 && *(float *)(v74 + 4) > *(float *)(v74 + 12))
                    {
                      v74 += 8;
                      v73 = v81;
                    }
                    v76 = *(_QWORD *)v74;
                  }
                  while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v74)) <= v77);
                  *(_DWORD *)v75 = v78;
                  *(float *)(v75 + 4) = v77;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v82 = (unint64_t)v9 >> 3;
            do
            {
              v83 = 0;
              v84 = *(float *)v8;
              v85 = *(_DWORD *)(v8 + 4);
              v86 = v8;
              do
              {
                v87 = (_DWORD *)v86;
                v86 += 8 * v83 + 8;
                v88 = 2 * v83;
                v83 = (2 * v83) | 1;
                v89 = v88 + 2;
                if (v89 < v82 && *(float *)(v86 + 4) > *(float *)(v86 + 12))
                {
                  v86 += 8;
                  v83 = v89;
                }
                *v87 = *(_DWORD *)v86;
                v87[1] = *(_DWORD *)(v86 + 4);
              }
              while (v83 <= (uint64_t)((unint64_t)(v82 - 2) >> 1));
              if (v86 == a2 - 8)
              {
                *(float *)v86 = v84;
                *(_DWORD *)(v86 + 4) = v85;
              }
              else
              {
                *(_DWORD *)v86 = *(_DWORD *)(a2 - 8);
                *(_DWORD *)(v86 + 4) = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 8) = v84;
                *(_DWORD *)(a2 - 4) = v85;
                v90 = v86 - v8 + 8;
                if (v90 >= 9)
                {
                  v91 = (((unint64_t)v90 >> 3) - 2) >> 1;
                  v92 = v8 + 8 * v91;
                  v93 = *(_QWORD *)v92;
                  v94 = *(float *)(v86 + 4);
                  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)v92)) > v94)
                  {
                    v95 = *(_DWORD *)v86;
                    do
                    {
                      v96 = (_DWORD *)v86;
                      v86 = v92;
                      *v96 = v93;
                      v96[1] = *(_DWORD *)(v92 + 4);
                      if (!v91)
                        break;
                      v91 = (v91 - 1) >> 1;
                      v92 = v8 + 8 * v91;
                      v93 = *(_QWORD *)v92;
                    }
                    while (COERCE_FLOAT(HIDWORD(*(_QWORD *)v92)) > v94);
                    *(_DWORD *)v86 = v95;
                    *(float *)(v86 + 4) = v94;
                  }
                }
              }
              a2 -= 8;
            }
            while (v82-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 8 * (v10 >> 1);
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8 * (v10 >> 1)), (float *)a1, (float *)(a2 - 8));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8 * (v10 >> 1)), (float *)(a2 - 8));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 8), (float *)(v12 - 8), (float *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(a1 + 16), (float *)(a1 + 8 + 8 * v11), (float *)(a2 - 24));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)(v12 - 8), (float *)v12, (float *)(a1 + 8 + 8 * v11));
          v13 = *(float *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v12;
          *(float *)v12 = v13;
          v14 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v12 + 4);
          *(_DWORD *)(v12 + 4) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)a1;
          v16 = *(float *)(a1 + 4);
          v17 = v16;
          if (*(float *)(a1 - 4) > v16)
            goto LABEL_11;
          if (v16 <= *(float *)(a2 - 4))
          {
            v34 = a1 + 8;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v35 = *(float *)(v34 + 4);
              v34 += 8;
            }
            while (v16 <= v35);
          }
          else
          {
            v32 = a1;
            do
            {
              v8 = v32 + 8;
              v33 = *(float *)(v32 + 12);
              v32 += 8;
            }
            while (v16 <= v33);
          }
          v36 = (_DWORD *)a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v36 = (_DWORD *)(v37 - 8);
              v38 = *(float *)(v37 - 4);
              v37 -= 8;
            }
            while (v16 > v38);
          }
          if (v8 < (unint64_t)v36)
          {
            v39 = *(float *)v8;
            v40 = *(float *)v36;
            do
            {
              *(float *)v8 = v40;
              *(float *)v36 = v39;
              v41 = *(_DWORD *)(v8 + 4);
              *(_DWORD *)(v8 + 4) = v36[1];
              v36[1] = v41;
              do
              {
                v42 = *(_QWORD *)(v8 + 8);
                v8 += 8;
                v39 = *(float *)&v42;
              }
              while (v16 <= *((float *)&v42 + 1));
              do
              {
                v43 = *((_QWORD *)v36 - 1);
                v36 -= 2;
                v40 = *(float *)&v43;
              }
              while (v16 > *((float *)&v43 + 1));
            }
            while (v8 < (unint64_t)v36);
          }
          if (v8 - 8 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 8) = v15;
          *(float *)(v8 - 4) = v16;
          continue;
        }
        v15 = *(float *)a1;
        v16 = *(float *)(a1 + 4);
        v17 = v16;
LABEL_11:
        v18 = 0;
        do
        {
          v19 = *(_QWORD *)(a1 + v18 + 8);
          v18 += 8;
        }
        while (v17 < *((float *)&v19 + 1));
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 8)
        {
          v24 = (float *)a2;
          while (v20 < (unint64_t)v24)
          {
            v22 = v24 - 2;
            v25 = *(v24 - 1);
            v24 -= 2;
            if (v17 < v25)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = (float *)(v21 - 8);
            v23 = *(float *)(v21 - 4);
            v21 -= 8;
          }
          while (v17 >= v23);
        }
LABEL_21:
        if (v20 >= (unint64_t)v22)
        {
          v8 = v20;
        }
        else
        {
          v26 = *(_DWORD *)v22;
          v8 = v20;
          v27 = v22;
          do
          {
            *(_DWORD *)v8 = v26;
            *(_DWORD *)v27 = v19;
            v28 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v27[1];
            *((_DWORD *)v27 + 1) = v28;
            do
            {
              v29 = *(_QWORD *)(v8 + 8);
              v8 += 8;
              LODWORD(v19) = v29;
            }
            while (v17 < *((float *)&v29 + 1));
            do
            {
              v30 = *((_QWORD *)v27 - 1);
              v27 -= 2;
              v26 = v30;
            }
            while (v17 >= *((float *)&v30 + 1));
          }
          while (v8 < (unint64_t)v27);
        }
        if (v8 - 8 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 8) = v15;
        *(float *)(v8 - 4) = v16;
        if (v20 < (unint64_t)v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(a1, v8 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(a1, v8 - 8);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::alg::Parameterize(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,cv3d::cv::gess::alg::ParameterizeReport &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(v8, a2))
        {
          if (v31)
            continue;
          goto LABEL_34;
        }
        a2 = v8 - 8;
        if (!v31)
          goto LABEL_1;
        return;
    }
  }
}

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(__int128 *result, float *a2, float *a3)
{
  float v3;
  float v4;
  int v5;
  __int128 v6;
  int v7;
  int v8;
  __int128 v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;

  v3 = a2[4];
  v4 = a3[4];
  if (v3 >= *((float *)result + 4))
  {
    if (v4 < v3)
    {
      v8 = *((_DWORD *)a2 + 4);
      v9 = *(_OWORD *)a2;
      v10 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v10;
      *(_OWORD *)a3 = v9;
      *((_DWORD *)a3 + 4) = v8;
      if (a2[4] < *((float *)result + 4))
      {
        v11 = *((_DWORD *)result + 4);
        v12 = *result;
        v13 = *((_DWORD *)a2 + 4);
        *result = *(_OWORD *)a2;
        *((_DWORD *)result + 4) = v13;
        *(_OWORD *)a2 = v12;
        *((_DWORD *)a2 + 4) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_DWORD *)result + 4);
      v15 = *result;
      v16 = *((_DWORD *)a2 + 4);
      *result = *(_OWORD *)a2;
      *((_DWORD *)result + 4) = v16;
      *(_OWORD *)a2 = v15;
      *((_DWORD *)a2 + 4) = v14;
      if (a3[4] >= a2[4])
        return result;
      v5 = *((_DWORD *)a2 + 4);
      v6 = *(_OWORD *)a2;
      v17 = *((_DWORD *)a3 + 4);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_DWORD *)a2 + 4) = v17;
    }
    else
    {
      v5 = *((_DWORD *)result + 4);
      v6 = *result;
      v7 = *((_DWORD *)a3 + 4);
      *result = *(_OWORD *)a3;
      *((_DWORD *)result + 4) = v7;
    }
    *(_OWORD *)a3 = v6;
    *((_DWORD *)a3 + 4) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  __int128 v21;
  int v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(float *)(a2 - 4) < *(float *)(a1 + 16))
      {
        v6 = *(_DWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 20) = v7;
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)a1, (float *)(a1 + 20), (float *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      v17 = (__int128 *)(a1 + 20);
      v18 = (__int128 *)(a1 + 40);
      v19 = (__int128 *)(a1 + 60);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(a1, a1 + 20, a1 + 40, a1 + 60);
      if (*(float *)(a2 - 4) < *(float *)(a1 + 76))
      {
        v20 = *(_DWORD *)(a1 + 76);
        v21 = *v19;
        v22 = *(_DWORD *)(a2 - 4);
        *v19 = *(_OWORD *)(a2 - 20);
        *(_DWORD *)(a1 + 76) = v22;
        *(_OWORD *)(a2 - 20) = v21;
        *(_DWORD *)(a2 - 4) = v20;
        if (*(float *)(a1 + 76) < *(float *)(a1 + 56))
        {
          v23 = *(_DWORD *)(a1 + 56);
          v24 = *v18;
          *v18 = *v19;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
          *v19 = v24;
          *(_DWORD *)(a1 + 76) = v23;
          if (*(float *)(a1 + 56) < *(float *)(a1 + 36))
          {
            v25 = *(_DWORD *)(a1 + 36);
            v26 = *v17;
            *v17 = *v18;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
            *v18 = v26;
            *(_DWORD *)(a1 + 56) = v25;
            if (*(float *)(a1 + 36) < *(float *)(a1 + 16))
            {
              v27 = *(_DWORD *)(a1 + 16);
              v28 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
              *v17 = v28;
              *(_DWORD *)(a1 + 36) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)a1, (float *)(a1 + 20), (float *)(a1 + 40));
      v10 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 16);
    if (v13 < *(float *)(v9 + 16))
    {
      v29 = *(_OWORD *)v10;
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 60) = *(_OWORD *)(a1 + v14 + 40);
        *(_DWORD *)(v15 + 76) = *(_DWORD *)(a1 + v14 + 56);
        if (v14 == -40)
          break;
        v14 -= 20;
        if (v13 >= *(float *)(v15 + 36))
        {
          v16 = a1 + v14 + 60;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(_OWORD *)v16 = v29;
      *(float *)(v16 + 16) = v13;
      if (++v12 == 8)
        return v10 + 20 == a2;
    }
    v9 = v10;
    v11 += 20;
    v10 += 20;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge> &,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::WeightedEdge*>((__int128 *)a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 16);
  if (result.n128_f32[0] < *(float *)(a3 + 16))
  {
    v9 = *(_DWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_DWORD *)(a4 + 16) = v9;
    result.n128_u32[0] = *(_DWORD *)(a3 + 16);
    if (result.n128_f32[0] < *(float *)(a2 + 16))
    {
      v11 = *(_DWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_DWORD *)(a3 + 16) = v11;
      result.n128_u32[0] = *(_DWORD *)(a2 + 16);
      if (result.n128_f32[0] < *(float *)(a1 + 16))
      {
        v13 = *(_DWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v18 - 1) = v25;
        v18 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  unint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float *v26;
  int v27;
  int v28;
  int v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  unint64_t v34;
  float *v35;
  float v36;
  uint64_t v37;
  int v38;
  float v39;
  float v40;
  int v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  float v57;
  float v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  float v70;
  float v71;
  uint64_t v72;
  int v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  int v80;
  int v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  float *v89;
  float v90;
  float v91;
  uint64_t v92;
  int v93;
  float *v94;
  float *v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  int v101;
  float *v102;
  float *v103;
  int v104;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v46 = *(float *)(a2 - 16);
        v47 = *(float *)v8;
        if (v46 < *(float *)v8)
        {
          *(float *)v8 = v46;
          *(float *)(a2 - 16) = v47;
          v48 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v48;
          v49 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v49;
          v50 = *(_DWORD *)(v8 + 12);
          *(_DWORD *)(v8 + 12) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v50;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v8, v8 + 16, a2 - 16);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((float *)v8, (float *)(v8 + 16), (float *)(v8 + 32), (float *)(a2 - 16));
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,0>(v8, v8 + 16, v8 + 32, v8 + 48, (_DWORD *)(a2 - 16));
      default:
        if (v9 <= 383)
        {
          v51 = v8 + 16;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v56 = v51;
                v57 = *(float *)(v55 + 16);
                v58 = *(float *)v55;
                if (v57 < *(float *)v55)
                {
                  v59 = *(_QWORD *)(v55 + 20);
                  v60 = *(_DWORD *)(v55 + 28);
                  v61 = v54;
                  while (1)
                  {
                    v62 = v8 + v61;
                    *(float *)(v62 + 16) = v58;
                    *(_QWORD *)(v62 + 20) = *(_QWORD *)(v8 + v61 + 4);
                    *(_DWORD *)(v62 + 28) = *(_DWORD *)(v8 + v61 + 12);
                    if (!v61)
                      break;
                    v58 = *(float *)(v62 - 16);
                    v61 -= 16;
                    if (v57 >= v58)
                    {
                      v63 = v8 + v61 + 16;
                      goto LABEL_75;
                    }
                  }
                  v63 = v8;
LABEL_75:
                  *(float *)v63 = v57;
                  *(_QWORD *)(v63 + 4) = v59;
                  *(_DWORD *)(v63 + 12) = v60;
                }
                v51 = v56 + 16;
                v54 += 16;
                v55 = v56;
              }
              while (v56 + 16 != a2);
            }
          }
          else if (!v53)
          {
            v96 = (float *)(v8 + 28);
            do
            {
              v97 = v51;
              v98 = *(float *)(v7 + 16);
              v99 = *(float *)v7;
              if (v98 < *(float *)v7)
              {
                v100 = *(_QWORD *)(v7 + 20);
                v101 = *(_DWORD *)(v7 + 28);
                v102 = v96;
                do
                {
                  v103 = v102;
                  *(v102 - 3) = v99;
                  *((_QWORD *)v102 - 1) = *((_QWORD *)v102 - 3);
                  v104 = *((_DWORD *)v102 - 4);
                  v102 -= 4;
                  *(_DWORD *)v103 = v104;
                  v99 = *(v103 - 11);
                }
                while (v98 < v99);
                *(v102 - 3) = v98;
                *((_QWORD *)v102 - 1) = v100;
                *(_DWORD *)v102 = v101;
              }
              v51 = v97 + 16;
              v96 += 4;
              v7 = v97;
            }
            while (v97 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v64 = (v10 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = v8 + 16 * v67;
                if (2 * v66 + 2 < (uint64_t)v10 && *(float *)v68 < *(float *)(v68 + 16))
                {
                  v68 += 16;
                  v67 = 2 * v66 + 2;
                }
                v69 = v8 + 16 * v66;
                v70 = *(float *)v68;
                v71 = *(float *)v69;
                if (*(float *)v68 >= *(float *)v69)
                {
                  v72 = *(_QWORD *)(v69 + 4);
                  v73 = *(_DWORD *)(v69 + 12);
                  do
                  {
                    v74 = (float *)v69;
                    v69 = v68;
                    *v74 = v70;
                    v74[1] = *(float *)(v68 + 4);
                    v74[2] = *(float *)(v68 + 8);
                    v74[3] = *(float *)(v68 + 12);
                    if (v64 < v67)
                      break;
                    v75 = 2 * v67;
                    v67 = (2 * v67) | 1;
                    v68 = v8 + 16 * v67;
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v10 && *(float *)v68 < *(float *)(v68 + 16))
                    {
                      v68 += 16;
                      v67 = v76;
                    }
                    v70 = *(float *)v68;
                  }
                  while (*(float *)v68 >= v71);
                  *(float *)v69 = v71;
                  *(_QWORD *)(v69 + 4) = v72;
                  *(_DWORD *)(v69 + 12) = v73;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v77 = (unint64_t)v9 >> 4;
            do
            {
              v78 = 0;
              v79 = *(float *)v8;
              v80 = *(_DWORD *)(v8 + 4);
              v81 = *(_DWORD *)(v8 + 8);
              v82 = *(_DWORD *)(v8 + 12);
              v83 = (_DWORD *)v8;
              do
              {
                v84 = v83;
                v83 += 4 * v78 + 4;
                v85 = 2 * v78;
                v78 = (2 * v78) | 1;
                v86 = v85 + 2;
                if (v86 < v77 && *(float *)v83 < *((float *)v83 + 4))
                {
                  v83 += 4;
                  v78 = v86;
                }
                *v84 = *v83;
                v84[1] = v83[1];
                v84[2] = v83[2];
                v84[3] = v83[3];
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v83 == (_DWORD *)(a2 - 16))
              {
                *(float *)v83 = v79;
                v83[1] = v80;
                v83[2] = v81;
                v83[3] = v82;
              }
              else
              {
                *v83 = *(_DWORD *)(a2 - 16);
                v83[1] = *(_DWORD *)(a2 - 12);
                v83[2] = *(_DWORD *)(a2 - 8);
                v83[3] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 16) = v79;
                *(_DWORD *)(a2 - 12) = v80;
                *(_DWORD *)(a2 - 8) = v81;
                *(_DWORD *)(a2 - 4) = v82;
                v87 = (uint64_t)v83 - v8 + 16;
                if (v87 >= 17)
                {
                  v88 = (((unint64_t)v87 >> 4) - 2) >> 1;
                  v89 = (float *)(v8 + 16 * v88);
                  v90 = *v89;
                  v91 = *(float *)v83;
                  if (*v89 < *(float *)v83)
                  {
                    v92 = *(_QWORD *)(v83 + 1);
                    v93 = v83[3];
                    do
                    {
                      v94 = (float *)v83;
                      v83 = v89;
                      *v94 = v90;
                      v94[1] = v89[1];
                      v94[2] = v89[2];
                      v94[3] = v89[3];
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = (float *)(v8 + 16 * v88);
                      v90 = *v89;
                    }
                    while (*v89 < v91);
                    *(float *)v83 = v91;
                    *(_QWORD *)(v83 + 1) = v92;
                    v83[3] = v93;
                  }
                }
              }
              a2 -= 16;
            }
            while (v77-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v7 + 16 * (v10 >> 1), v7, a2 - 16);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v7, v7 + 16 * (v10 >> 1), a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v7 + 16, v12 - 16, a2 - 32);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v7 + 32, v7 + 16 + 16 * v11, a2 - 48);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v12 - 16, v12, v7 + 16 + 16 * v11);
          v13 = *(float *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(float *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 4);
          *(_QWORD *)(v7 + 4) = *(_QWORD *)(v12 + 4);
          *(_QWORD *)(v12 + 4) = v14;
          v15 = *(_DWORD *)(v7 + 12);
          *(_DWORD *)(v7 + 12) = *(_DWORD *)(v12 + 12);
          *(_DWORD *)(v12 + 12) = v15;
        }
        --a3;
        v16 = *(float *)v7;
        if ((a4 & 1) == 0 && *(float *)(v7 - 16) >= v16)
        {
          if (v16 >= *(float *)(a2 - 16))
          {
            v34 = v7 + 16;
            do
            {
              v8 = v34;
              if (v34 >= a2)
                break;
              v34 += 16;
            }
            while (v16 >= *(float *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v33 = *(float *)(v8 + 16);
              v8 += 16;
            }
            while (v16 >= v33);
          }
          v35 = (float *)a2;
          if (v8 < a2)
          {
            v35 = (float *)a2;
            do
            {
              v36 = *(v35 - 4);
              v35 -= 4;
            }
            while (v16 < v36);
          }
          v37 = *(_QWORD *)(v7 + 4);
          v38 = *(_DWORD *)(v7 + 12);
          if (v8 < (unint64_t)v35)
          {
            v39 = *(float *)v8;
            v40 = *v35;
            do
            {
              *(float *)v8 = v40;
              *v35 = v39;
              v41 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v35[1];
              *((_DWORD *)v35 + 1) = v41;
              v42 = *(_DWORD *)(v8 + 8);
              *(float *)(v8 + 8) = v35[2];
              *((_DWORD *)v35 + 2) = v42;
              v43 = *(_DWORD *)(v8 + 12);
              *(float *)(v8 + 12) = v35[3];
              *((_DWORD *)v35 + 3) = v43;
              do
              {
                v44 = *(float *)(v8 + 16);
                v8 += 16;
                v39 = v44;
              }
              while (v16 >= v44);
              do
              {
                v45 = *(v35 - 4);
                v35 -= 4;
                v40 = v45;
              }
              while (v16 < v45);
            }
            while (v8 < (unint64_t)v35);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 16) = v16;
          *(_QWORD *)(v8 - 12) = v37;
          *(_DWORD *)(v8 - 4) = v38;
          continue;
        }
        v17 = 0;
        v18 = *(_QWORD *)(v7 + 4);
        v19 = *(_DWORD *)(v7 + 12);
        do
        {
          v20 = *(float *)(v7 + v17 + 16);
          v17 += 16;
        }
        while (v20 < v16);
        v21 = v7 + v17;
        v22 = (float *)a2;
        if (v17 == 16)
        {
          v22 = (float *)a2;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v24 = *(v22 - 4);
            v22 -= 4;
          }
          while (v24 >= v16);
        }
        else
        {
          do
          {
            v23 = *(v22 - 4);
            v22 -= 4;
          }
          while (v23 >= v16);
        }
        if (v21 >= (unint64_t)v22)
        {
          v8 = v7 + v17;
        }
        else
        {
          v25 = *v22;
          v8 = v7 + v17;
          v26 = v22;
          do
          {
            *(float *)v8 = v25;
            *v26 = v20;
            v27 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v26[1];
            *((_DWORD *)v26 + 1) = v27;
            v28 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v26[2];
            *((_DWORD *)v26 + 2) = v28;
            v29 = *(_DWORD *)(v8 + 12);
            *(float *)(v8 + 12) = v26[3];
            *((_DWORD *)v26 + 3) = v29;
            do
            {
              v30 = *(float *)(v8 + 16);
              v8 += 16;
              v20 = v30;
            }
            while (v30 < v16);
            do
            {
              v31 = *(v26 - 4);
              v26 -= 4;
              v25 = v31;
            }
            while (v31 >= v16);
          }
          while (v8 < (unint64_t)v26);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 16) = v16;
        *(_QWORD *)(v8 - 12) = v18;
        *(_DWORD *)(v8 - 4) = v19;
        if (v21 < (unint64_t)v22)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,false>(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v7, v8 - 16);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 16;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;
  float v11;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  int v21;
  int v22;
  float v23;
  int v24;
  int v25;
  int v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((float *)a1, (float *)a2, (float *)a3, (float *)a4);
  v11 = *(float *)a4;
  if (*(float *)a5 < *(float *)a4)
  {
    *(_DWORD *)a4 = *a5;
    *(float *)a5 = v11;
    v12 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = a5[1];
    a5[1] = v12;
    v13 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = a5[2];
    a5[2] = v13;
    v14 = *(_DWORD *)(a4 + 12);
    *(_DWORD *)(a4 + 12) = a5[3];
    a5[3] = v14;
    v15 = *(float *)a3;
    if (*(float *)a4 < *(float *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v15;
      v16 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v16;
      v17 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v17;
      v18 = *(_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(a4 + 12);
      *(_DWORD *)(a4 + 12) = v18;
      v19 = *(float *)a2;
      if (*(float *)a3 < *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v19;
        v20 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v20;
        v21 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v21;
        v22 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
        *(_DWORD *)(a3 + 12) = v22;
        v23 = *(float *)a1;
        if (*(float *)a2 < *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(float *)a2 = v23;
          v24 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a2 + 4) = v24;
          v25 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v25;
          v26 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 < *(float *)result)
  {
    if (v5 >= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v16 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v16;
      v17 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      v6 = (int *)(a2 + 12);
      v18 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 8) = v17;
      v19 = *(_DWORD *)(result + 12);
      *(_DWORD *)(result + 12) = v18;
      *(_DWORD *)(a2 + 12) = v19;
      if (*(float *)a3 >= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      v20 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v20;
      v8 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    }
    else
    {
      v6 = (int *)(result + 12);
      *(float *)result = v5;
      *(float *)a3 = v4;
      v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v7;
      v8 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 8) = v8;
    v12 = (int *)(a3 + 12);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v9;
    v10 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v10;
    v12 = (int *)(a2 + 12);
    v11 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 12) = v11;
    v13 = *(float *)result;
    if (*(float *)a2 < *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v13;
      v14 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v14;
      v15 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v15;
      v6 = (int *)(result + 12);
LABEL_10:
      v21 = *v6;
      *v6 = *v12;
      *v12 = v21;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  int v9;
  int v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 16);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 16) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v9;
        v10 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v10;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((float *)a1, (float *)(a1 + 16), (float *)(a1 + 32), (float *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *,0>(a1, a1 + 16, a1 + 32, a1 + 48, (_DWORD *)(a2 - 16));
      return 1;
    default:
      v11 = (float *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(a1, a1 + 16, a1 + 32);
      v12 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(float *)v12;
    v16 = *v11;
    if (*(float *)v12 < *v11)
    {
      v17 = *(_QWORD *)(v12 + 4);
      v18 = *(_DWORD *)(v12 + 12);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(float *)(v20 + 48) = v16;
        *(_QWORD *)(v20 + 52) = *(_QWORD *)(a1 + v19 + 36);
        *(_DWORD *)(v20 + 60) = *(_DWORD *)(a1 + v19 + 44);
        if (v19 == -32)
          break;
        v16 = *(float *)(v20 + 16);
        v19 -= 16;
        if (v15 >= v16)
        {
          v21 = a1 + v19 + 48;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(float *)v21 = v15;
      *(_QWORD *)(v21 + 4) = v17;
      *(_DWORD *)(v21 + 12) = v18;
      if (++v14 == 8)
        return v12 + 16 == a2;
    }
    v11 = (float *)v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_1 &,std::tuple<float,unsigned int,unsigned int,unsigned int> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v10;
    v11 = *((_DWORD *)a3 + 2);
    a3[2] = a4[2];
    *((_DWORD *)a4 + 2) = v11;
    v12 = *((_DWORD *)a3 + 3);
    a3[3] = a4[3];
    *((_DWORD *)a4 + 3) = v12;
    v13 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v14;
      v15 = *((_DWORD *)a2 + 2);
      a2[2] = a3[2];
      *((_DWORD *)a3 + 2) = v15;
      v16 = *((_DWORD *)a2 + 3);
      a2[3] = a3[3];
      *((_DWORD *)a3 + 3) = v16;
      v17 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v17;
        v18 = *((_DWORD *)a1 + 1);
        a1[1] = a2[1];
        *((_DWORD *)a2 + 1) = v18;
        v19 = *((_DWORD *)a1 + 2);
        a1[2] = a2[2];
        *((_DWORD *)a2 + 2) = v19;
        v20 = *((_DWORD *)a1 + 3);
        a1[3] = a2[3];
        *((_DWORD *)a2 + 3) = v20;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  int v26;
  int v27;
  float v28;
  float v29;
  BOOL v30;
  float v31;
  unint64_t v32;
  float *v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  int v44;
  int v45;
  float v46;
  float v47;
  int v48;
  int v49;
  float v50;
  float v51;
  int v52;
  int v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  float v78;
  float v79;
  uint64_t v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  int64_t v85;
  float v86;
  int v87;
  int v88;
  _DWORD *v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  float *v95;
  float v96;
  float v97;
  uint64_t v98;
  float *v99;
  unint64_t v101;
  uint64_t v102;
  float v103;
  float v104;
  uint64_t v105;
  float *v106;
  float *v107;
  int v108;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(float *)(a2 - 12);
        v43 = *(float *)v8;
        if (v42 < *(float *)v8)
        {
          *(float *)v8 = v42;
          *(float *)(a2 - 12) = v43;
          v44 = *(_DWORD *)(v8 + 4);
          *(_DWORD *)(v8 + 4) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v44;
          v45 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v45;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v8, v8 + 12, a2 - 12);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)v8, (float *)(v8 + 12), (float *)(v8 + 24), (float *)(a2 - 12));
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)v8, (float *)(v8 + 12), (float *)(v8 + 24), (float *)(v8 + 36));
        v46 = *(float *)(a2 - 12);
        v47 = *(float *)(v8 + 36);
        if (v46 < v47)
        {
          *(float *)(v8 + 36) = v46;
          *(float *)(a2 - 12) = v47;
          v48 = *(_DWORD *)(v8 + 40);
          *(_DWORD *)(v8 + 40) = *(_DWORD *)(a2 - 8);
          *(_DWORD *)(a2 - 8) = v48;
          v49 = *(_DWORD *)(v8 + 44);
          *(_DWORD *)(v8 + 44) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v49;
          v50 = *(float *)(v8 + 36);
          v51 = *(float *)(v8 + 24);
          if (v50 < v51)
          {
            *(float *)(v8 + 24) = v50;
            *(float *)(v8 + 36) = v51;
            v52 = *(_DWORD *)(v8 + 40);
            v53 = *(_DWORD *)(v8 + 44);
            v54 = *(_QWORD *)(v8 + 28);
            *(_DWORD *)(v8 + 28) = v52;
            *(_DWORD *)(v8 + 32) = v53;
            *(_QWORD *)(v8 + 40) = v54;
            v55 = *(float *)(v8 + 12);
            if (v50 < v55)
            {
              *(float *)(v8 + 12) = v50;
              *(float *)(v8 + 24) = v55;
              v56 = *(_QWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v52;
              *(_DWORD *)(v8 + 20) = v53;
              *(_QWORD *)(v8 + 28) = v56;
              v57 = *(float *)v8;
              if (v50 < *(float *)v8)
              {
                *(float *)v8 = v50;
                *(float *)(v8 + 12) = v57;
                v58 = *(_QWORD *)(v8 + 4);
                *(_DWORD *)(v8 + 4) = v52;
                *(_DWORD *)(v8 + 8) = v53;
                *(_QWORD *)(v8 + 16) = v58;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v59 = v8 + 12;
          v61 = v8 == a2 || v59 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v61)
            {
              v62 = 0;
              v63 = v8;
              do
              {
                v64 = v59;
                v65 = *(float *)(v63 + 12);
                v66 = *(float *)v63;
                if (v65 < *(float *)v63)
                {
                  v67 = *(_QWORD *)(v63 + 16);
                  v68 = v62;
                  while (1)
                  {
                    v69 = v8 + v68;
                    *(float *)(v69 + 12) = v66;
                    v70 = *(_DWORD *)(v8 + v68 + 8);
                    *(_DWORD *)(v69 + 16) = *(_DWORD *)(v8 + v68 + 4);
                    *(_DWORD *)(v69 + 20) = v70;
                    if (!v68)
                      break;
                    v66 = *(float *)(v69 - 12);
                    v68 -= 12;
                    if (v65 >= v66)
                    {
                      v71 = v8 + v68 + 12;
                      goto LABEL_79;
                    }
                  }
                  v71 = v8;
LABEL_79:
                  *(float *)v71 = v65;
                  *(_QWORD *)(v71 + 4) = v67;
                }
                v59 = v64 + 12;
                v62 += 12;
                v63 = v64;
              }
              while (v64 + 12 != a2);
            }
          }
          else if (!v61)
          {
            v101 = v8 + 20;
            do
            {
              v102 = v59;
              v103 = *(float *)(v7 + 12);
              v104 = *(float *)v7;
              if (v103 < *(float *)v7)
              {
                v105 = *(_QWORD *)(v7 + 16);
                v106 = (float *)v101;
                do
                {
                  v107 = v106;
                  *(v106 - 2) = v104;
                  *(v106 - 1) = *(v106 - 4);
                  v108 = *((_DWORD *)v106 - 3);
                  v106 -= 3;
                  *(_DWORD *)v107 = v108;
                  v104 = *(v107 - 8);
                }
                while (v103 < v104);
                *(v106 - 2) = v103;
                *(_QWORD *)(v106 - 1) = v105;
              }
              v59 = v102 + 12;
              v101 += 12;
              v7 = v102;
            }
            while (v102 + 12 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v72 = (v10 - 2) >> 1;
            v73 = v72;
            do
            {
              v74 = v73;
              if (v72 >= v73)
              {
                v75 = (2 * v73) | 1;
                v76 = v8 + 12 * v75;
                if (2 * v74 + 2 < (uint64_t)v10 && *(float *)v76 < *(float *)(v76 + 12))
                {
                  v76 += 12;
                  v75 = 2 * v74 + 2;
                }
                v77 = v8 + 12 * v74;
                v78 = *(float *)v76;
                v79 = *(float *)v77;
                if (*(float *)v76 >= *(float *)v77)
                {
                  v80 = *(_QWORD *)(v77 + 4);
                  do
                  {
                    v81 = (float *)v77;
                    v77 = v76;
                    *v81 = v78;
                    v81[1] = *(float *)(v76 + 4);
                    v81[2] = *(float *)(v76 + 8);
                    if (v72 < v75)
                      break;
                    v82 = 2 * v75;
                    v75 = (2 * v75) | 1;
                    v76 = v8 + 12 * v75;
                    v83 = v82 + 2;
                    if (v83 < (uint64_t)v10 && *(float *)v76 < *(float *)(v76 + 12))
                    {
                      v76 += 12;
                      v75 = v83;
                    }
                    v78 = *(float *)v76;
                  }
                  while (*(float *)v76 >= v79);
                  *(float *)v77 = v79;
                  *(_QWORD *)(v77 + 4) = v80;
                }
              }
              v73 = v74 - 1;
            }
            while (v74);
            v84 = v9 / 0xCuLL;
            do
            {
              v85 = 0;
              v86 = *(float *)v8;
              v87 = *(_DWORD *)(v8 + 4);
              v88 = *(_DWORD *)(v8 + 8);
              v89 = (_DWORD *)v8;
              do
              {
                v90 = v89;
                v89 += 3 * v85 + 3;
                v91 = 2 * v85;
                result = (2 * v85) | 1;
                v85 = result;
                v92 = v91 + 2;
                if (v92 < v84)
                {
                  result = (uint64_t)(v89 + 3);
                  if (*(float *)v89 < *((float *)v89 + 3))
                  {
                    v89 += 3;
                    v85 = v92;
                  }
                }
                *v90 = *v89;
                v90[1] = v89[1];
                v90[2] = v89[2];
              }
              while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
              if (v89 == (_DWORD *)(a2 - 12))
              {
                *(float *)v89 = v86;
                v89[1] = v87;
                v89[2] = v88;
              }
              else
              {
                *v89 = *(_DWORD *)(a2 - 12);
                v89[1] = *(_DWORD *)(a2 - 8);
                v89[2] = *(_DWORD *)(a2 - 4);
                *(float *)(a2 - 12) = v86;
                *(_DWORD *)(a2 - 8) = v87;
                *(_DWORD *)(a2 - 4) = v88;
                v93 = (uint64_t)v89 - v8 + 12;
                if (v93 >= 13)
                {
                  v94 = (v93 / 0xCuLL - 2) >> 1;
                  v95 = (float *)(v8 + 12 * v94);
                  v96 = *v95;
                  v97 = *(float *)v89;
                  if (*v95 < *(float *)v89)
                  {
                    v98 = *(_QWORD *)(v89 + 1);
                    do
                    {
                      v99 = (float *)v89;
                      v89 = v95;
                      *v99 = v96;
                      v99[1] = v95[1];
                      v99[2] = v95[2];
                      if (!v94)
                        break;
                      v94 = (v94 - 1) >> 1;
                      v95 = (float *)(v8 + 12 * v94);
                      v96 = *v95;
                    }
                    while (*v95 < v97);
                    *(float *)v89 = v97;
                    *(_QWORD *)(v89 + 1) = v98;
                  }
                }
              }
              a2 -= 12;
            }
            while (v84-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = (_DWORD *)(v8 + 12 * (v10 >> 1));
        if ((unint64_t)v9 < 0x601)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v7 + 12 * (v10 >> 1), v7, a2 - 12);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v7, v7 + 12 * (v10 >> 1), a2 - 12);
          v13 = v7 + 12 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v7 + 12, v13 - 12, a2 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v7 + 24, v7 + 12 + 12 * v11, a2 - 36);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v13 - 12, (uint64_t)v12, v7 + 12 + 12 * v11);
          v14 = *(float *)v7;
          *(_DWORD *)v7 = *v12;
          *(float *)v12 = v14;
          v15 = *(_QWORD *)(v7 + 4);
          *(_QWORD *)(v7 + 4) = *(_QWORD *)(v13 + 4);
          *(_QWORD *)(v13 + 4) = v15;
        }
        --a3;
        v16 = *(float *)v7;
        if ((a4 & 1) == 0 && *(float *)(v7 - 12) >= v16)
        {
          if (v16 >= *(float *)(a2 - 12))
          {
            v32 = v7 + 12;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v32 += 12;
            }
            while (v16 >= *(float *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v31 = *(float *)(v8 + 12);
              v8 += 12;
            }
            while (v16 >= v31);
          }
          v33 = (float *)a2;
          if (v8 < a2)
          {
            v33 = (float *)a2;
            do
            {
              v34 = *(v33 - 3);
              v33 -= 3;
            }
            while (v16 < v34);
          }
          v35 = *(_QWORD *)(v7 + 4);
          if (v8 < (unint64_t)v33)
          {
            v36 = *(float *)v8;
            v37 = *v33;
            do
            {
              *(float *)v8 = v37;
              *v33 = v36;
              v38 = *(_DWORD *)(v8 + 4);
              *(float *)(v8 + 4) = v33[1];
              *((_DWORD *)v33 + 1) = v38;
              v39 = *(_DWORD *)(v8 + 8);
              *(float *)(v8 + 8) = v33[2];
              *((_DWORD *)v33 + 2) = v39;
              do
              {
                v40 = *(float *)(v8 + 12);
                v8 += 12;
                v36 = v40;
              }
              while (v16 >= v40);
              do
              {
                v41 = *(v33 - 3);
                v33 -= 3;
                v37 = v41;
              }
              while (v16 < v41);
            }
            while (v8 < (unint64_t)v33);
          }
          if (v8 - 12 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(float *)(v8 - 12) = v16;
          *(_QWORD *)(v8 - 8) = v35;
          continue;
        }
        v17 = 0;
        v18 = *(_QWORD *)(v7 + 4);
        do
        {
          v19 = *(float *)(v7 + v17 + 12);
          v17 += 12;
        }
        while (v19 < v16);
        v20 = v7 + v17;
        v21 = (float *)a2;
        if (v17 == 12)
        {
          v21 = (float *)a2;
          do
          {
            if (v20 >= (unint64_t)v21)
              break;
            v23 = *(v21 - 3);
            v21 -= 3;
          }
          while (v23 >= v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 3);
            v21 -= 3;
          }
          while (v22 >= v16);
        }
        if (v20 >= (unint64_t)v21)
        {
          v8 = v7 + v17;
        }
        else
        {
          v24 = *v21;
          v8 = v7 + v17;
          v25 = v21;
          do
          {
            *(float *)v8 = v24;
            *v25 = v19;
            v26 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v25[1];
            *((_DWORD *)v25 + 1) = v26;
            v27 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v25[2];
            *((_DWORD *)v25 + 2) = v27;
            do
            {
              v28 = *(float *)(v8 + 12);
              v8 += 12;
              v19 = v28;
            }
            while (v28 < v16);
            do
            {
              v29 = *(v25 - 3);
              v25 -= 3;
              v24 = v29;
            }
            while (v29 >= v16);
          }
          while (v8 < (unint64_t)v25);
        }
        if (v8 - 12 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
        }
        *(float *)(v8 - 12) = v16;
        *(_QWORD *)(v8 - 8) = v18;
        if (v20 < (unint64_t)v21)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *,false>(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v7, v8 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 12;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int *v10;
  float v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 < *(float *)result)
  {
    if (v5 >= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v13 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      v6 = (int *)(a2 + 8);
      v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 4) = v13;
      v15 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = v14;
      *(_DWORD *)(a2 + 8) = v15;
      if (*(float *)a3 >= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      v7 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    }
    else
    {
      v6 = (int *)(result + 8);
      *(float *)result = v5;
      *(float *)a3 = v4;
      v7 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a3 + 4);
    }
    *(_DWORD *)(a3 + 4) = v7;
    v10 = (int *)(a3 + 8);
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v8 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v8;
    v10 = (int *)(a2 + 8);
    v9 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v9;
    v11 = *(float *)result;
    if (*(float *)a2 < *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v11;
      v12 = *(_DWORD *)(result + 4);
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = v12;
      v6 = (int *)(result + 8);
LABEL_10:
      v16 = *v6;
      *v6 = *v10;
      *v10 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  int v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  int v23;
  int v24;
  float v25;
  float v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 12);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 12) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(a1, a1 + 12, a2 - 12);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a2 - 12));
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a1 + 36));
      v21 = *(float *)(a2 - 12);
      v22 = *(float *)(a1 + 36);
      if (v21 < v22)
      {
        *(float *)(a1 + 36) = v21;
        *(float *)(a2 - 12) = v22;
        v23 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v23;
        v24 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v24;
        v25 = *(float *)(a1 + 36);
        v26 = *(float *)(a1 + 24);
        if (v25 < v26)
        {
          *(float *)(a1 + 24) = v25;
          *(float *)(a1 + 36) = v26;
          v27 = *(_DWORD *)(a1 + 40);
          v28 = *(_DWORD *)(a1 + 44);
          v29 = *(_QWORD *)(a1 + 28);
          *(_DWORD *)(a1 + 28) = v27;
          *(_DWORD *)(a1 + 32) = v28;
          *(_QWORD *)(a1 + 40) = v29;
          v30 = *(float *)(a1 + 12);
          if (v25 < v30)
          {
            *(float *)(a1 + 12) = v25;
            *(float *)(a1 + 24) = v30;
            v31 = *(_QWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v27;
            *(_DWORD *)(a1 + 20) = v28;
            *(_QWORD *)(a1 + 28) = v31;
            v32 = *(float *)a1;
            if (v25 < *(float *)a1)
            {
              *(float *)a1 = v25;
              *(float *)(a1 + 12) = v32;
              v33 = *(_QWORD *)(a1 + 4);
              *(_DWORD *)(a1 + 4) = v27;
              *(_DWORD *)(a1 + 8) = v28;
              *(_QWORD *)(a1 + 16) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (float *)(a1 + 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(a1, a1 + 12, a1 + 24);
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)v11;
    v15 = *v10;
    if (*(float *)v11 < *v10)
    {
      v16 = *(_QWORD *)(v11 + 4);
      v17 = v12;
      while (1)
      {
        v18 = a1 + v17;
        *(float *)(v18 + 36) = v15;
        v19 = *(_DWORD *)(a1 + v17 + 32);
        *(_DWORD *)(v18 + 40) = *(_DWORD *)(a1 + v17 + 28);
        *(_DWORD *)(v18 + 44) = v19;
        if (v17 == -24)
          break;
        v15 = *(float *)(v18 + 12);
        v17 -= 12;
        if (v14 >= v15)
        {
          v20 = a1 + v17 + 36;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(float *)v20 = v14;
      *(_QWORD *)(v20 + 4) = v16;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = (float *)v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  int v10;
  int v11;
  float v12;
  int v13;
  int v14;
  float v15;
  int v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_8 &,std::pair<float,std::pair<unsigned int,unsigned int>> *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *((_DWORD *)a3 + 1);
    a3[1] = a4[1];
    *((_DWORD *)a4 + 1) = v10;
    v11 = *((_DWORD *)a3 + 2);
    a3[2] = a4[2];
    *((_DWORD *)a4 + 2) = v11;
    v12 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v13;
      v14 = *((_DWORD *)a2 + 2);
      a2[2] = a3[2];
      *((_DWORD *)a3 + 2) = v14;
      v15 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v15;
        v16 = *((_DWORD *)a1 + 1);
        a1[1] = a2[1];
        *((_DWORD *)a2 + 1) = v16;
        v17 = *((_DWORD *)a1 + 2);
        a1[2] = a2[2];
        *((_DWORD *)a2 + 2) = v17;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,false>(unsigned int *a1, unsigned int *a2, float32x4_t **a3, uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  unsigned int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unsigned int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  float32x4_t v70;
  float32x4_t v71;
  unsigned int v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  unsigned int *v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  unsigned int *v80;
  unsigned int v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  unsigned int v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  unsigned int v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  float32x4_t *v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int *v113;
  uint64_t v114;
  float32x4_t *v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t v118;
  float32x4_t v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  float32x4_t *v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  int64_t v140;
  int64_t v141;
  uint64_t v142;
  unsigned int *v143;
  float32x4_t *v144;
  float32x4_t *v145;
  uint64_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  unsigned int *v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float v160;
  float32x4_t v161;
  float32x4_t v162;
  unsigned int *v163;
  unsigned int v164;
  uint64_t v165;
  float32x4_t v166;
  float32x4_t v167;
  uint64_t v168;
  uint64_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float v174;
  float32x4_t v175;
  float32x4_t v176;
  float v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float v181;
  float32x4_t v182;
  float32x4_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  uint64_t v189;
  uint64_t v190;
  float32x4_t *v191;
  uint64_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float v196;
  float32x4_t v197;
  float32x4_t v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int *v203;
  float32x4_t *v204;
  uint64_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int *v214;
  unsigned int v215;
  float32x4_t *v216;
  uint64_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float v221;
  float32x4_t v222;
  float32x4_t v223;
  unsigned int *v225;
  float32x4_t *v226;
  uint64_t v227;
  uint64_t v228;
  float32x4_t v229;
  uint64_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float v234;
  float32x4_t v235;
  float32x4_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int *v239;
  unsigned int *v240;
  unsigned int v241;
  float32x4_t *v242;
  uint64_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float v247;
  float32x4_t v248;
  float32x4_t v249;
  unsigned int *v250;
  uint64_t v251;
  unsigned int *v252;
  int64_t v253;
  float32x4_t v254;
  float32x4_t v255;
  unsigned int *v256;
  float32x4_t v257;
  uint64_t v258;
  float32x4_t v260;
  int64_t v261;
  unsigned int *v262;
  unsigned int *v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,0>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, float32x4_t **a6)
{
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  unsigned int v21;
  float32x4_t *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  unsigned int v31;
  float32x4_t *v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  unsigned int v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  unsigned int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a2, a3, a4, a6);
  v12 = a6[2];
  v13 = a6[3]->i64[0];
  v14 = vsubq_f32(*(float32x4_t *)(v13 + 16 * *a5), *v12);
  v52 = **a6;
  v15 = vmulq_f32(v14, v52);
  v15.i32[3] = 0;
  v56 = *a6[1];
  v60 = vsubq_f32(*(float32x4_t *)(v13 + 16 * *a4), *v12);
  v16 = vmulq_f32(v14, v56);
  v16.i32[3] = 0;
  v17 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
  v18 = vmulq_f32(v60, v52);
  v18.i32[3] = 0;
  v19 = vmulq_f32(v60, v56);
  v19.i32[3] = 0;
  if (v17 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))))
  {
    v20 = *(_QWORD *)a4;
    v21 = *a5;
    *((_WORD *)a4 + 2) = *((_WORD *)a5 + 2);
    *a4 = v21;
    *a5 = v20;
    *((_WORD *)a5 + 2) = WORD2(v20);
    v22 = a6[2];
    v23 = a6[3]->i64[0];
    v24 = vsubq_f32(*(float32x4_t *)(v23 + 16 * *a4), *v22);
    v53 = **a6;
    v25 = vmulq_f32(v24, v53);
    v25.i32[3] = 0;
    v57 = *a6[1];
    v61 = vsubq_f32(*(float32x4_t *)(v23 + 16 * *a3), *v22);
    v26 = vmulq_f32(v24, v57);
    v26.i32[3] = 0;
    v27 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)));
    v28 = vmulq_f32(v61, v53);
    v28.i32[3] = 0;
    v29 = vmulq_f32(v61, v57);
    v29.i32[3] = 0;
    if (v27 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
    {
      v30 = *(_QWORD *)a3;
      v31 = *a4;
      *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
      *a3 = v31;
      *a4 = v30;
      *((_WORD *)a4 + 2) = WORD2(v30);
      v32 = a6[2];
      v33 = a6[3]->i64[0];
      v34 = vsubq_f32(*(float32x4_t *)(v33 + 16 * *a3), *v32);
      v54 = **a6;
      v35 = vmulq_f32(v34, v54);
      v35.i32[3] = 0;
      v58 = *a6[1];
      v62 = vsubq_f32(*(float32x4_t *)(v33 + 16 * *a2), *v32);
      v36 = vmulq_f32(v34, v58);
      v36.i32[3] = 0;
      v37 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)));
      v38 = vmulq_f32(v62, v54);
      v38.i32[3] = 0;
      v39 = vmulq_f32(v62, v58);
      v39.i32[3] = 0;
      if (v37 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39))))
      {
        v40 = *(_QWORD *)a2;
        v41 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v41;
        *a3 = v40;
        *((_WORD *)a3 + 2) = WORD2(v40);
        v42 = a6[2];
        v43 = a6[3]->i64[0];
        v44 = vsubq_f32(*(float32x4_t *)(v43 + 16 * *a2), *v42);
        v55 = **a6;
        v45 = vmulq_f32(v44, v55);
        v45.i32[3] = 0;
        v59 = *a6[1];
        v63 = vsubq_f32(*(float32x4_t *)(v43 + 16 * *a1), *v42);
        v46 = vmulq_f32(v44, v59);
        v46.i32[3] = 0;
        v47 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46)));
        v48 = vmulq_f32(v63, v55);
        v48.i32[3] = 0;
        v49 = vmulq_f32(v63, v59);
        v49.i32[3] = 0;
        if (v47 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v49, v49))))
        {
          v50 = *(_QWORD *)a1;
          v51 = *a2;
          *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
          *a1 = v51;
          *a2 = v50;
          *((_WORD *)a2 + 2) = WORD2(v50);
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, float32x4_t **a4)
{
  float32x4_t *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  float32x4_t *v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  float32x4_t *v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  unsigned int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;

  v8 = a4[2];
  v9 = a4[3]->i64[0];
  v10 = vsubq_f32(*(float32x4_t *)(v9 + 16 * *a2), *v8);
  v46 = vsubq_f32(*(float32x4_t *)(v9 + 16 * *a1), *v8);
  v47 = *v8;
  v50 = **a4;
  v11 = vmulq_f32(v10, v50);
  v11.i32[3] = 0;
  v53 = *a4[1];
  v12 = vmulq_f32(v10, v53);
  v12.i32[3] = 0;
  v13 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12)));
  v14 = vmulq_f32(v46, v50);
  v14.i32[3] = 0;
  v15 = vmulq_f32(v46, v53);
  v15.i32[3] = 0;
  v16 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)));
  v17 = vsubq_f32(*(float32x4_t *)(v9 + 16 * *a3), v47);
  v18 = vmulq_f32(v50, v17);
  v18.i32[3] = 0;
  v19 = vmulq_f32(v53, v17);
  v19.i32[3] = 0;
  v20 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19)));
  if (v13 <= v16)
  {
    if (v20 > v13)
    {
      v23 = *(_QWORD *)a2;
      v24 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v24;
      *a3 = v23;
      *((_WORD *)a3 + 2) = WORD2(v23);
      v25 = a4[2];
      v26 = a4[3]->i64[0];
      v27 = vsubq_f32(*(float32x4_t *)(v26 + 16 * *a2), *v25);
      v48 = **a4;
      v28 = vmulq_f32(v27, v48);
      v28.i32[3] = 0;
      v51 = *a4[1];
      v54 = vsubq_f32(*(float32x4_t *)(v26 + 16 * *a1), *v25);
      v29 = vmulq_f32(v27, v51);
      v29.i32[3] = 0;
      v30 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)));
      v31 = vmulq_f32(v54, v48);
      v31.i32[3] = 0;
      v32 = vmulq_f32(v54, v51);
      v32.i32[3] = 0;
      if (v30 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32))))
      {
        v33 = *(_QWORD *)a1;
        v34 = *a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *a1 = v34;
        *a2 = v33;
        *((_WORD *)a2 + 2) = WORD2(v33);
      }
    }
  }
  else
  {
    v21 = *(_QWORD *)a1;
    if (v20 <= v13)
    {
      v35 = *a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      *a1 = v35;
      *((_WORD *)a2 + 2) = WORD2(v21);
      *a2 = v21;
      v36 = a4[2];
      v37 = a4[3]->i64[0];
      v38 = vsubq_f32(*(float32x4_t *)(v37 + 16 * *a3), *v36);
      v49 = **a4;
      v39 = vmulq_f32(v38, v49);
      v39.i32[3] = 0;
      v52 = *a4[1];
      v55 = vsubq_f32(*(float32x4_t *)(v37 + 16 * v21), *v36);
      v40 = vmulq_f32(v38, v52);
      v40.i32[3] = 0;
      v41 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40)));
      v42 = vmulq_f32(v55, v49);
      v42.i32[3] = 0;
      v43 = vmulq_f32(v55, v52);
      v43.i32[3] = 0;
      if (v41 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43))))
      {
        v44 = *(_QWORD *)a2;
        v45 = *a3;
        *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
        *a2 = v45;
        *a3 = v44;
        *((_WORD *)a3 + 2) = WORD2(v44);
      }
    }
    else
    {
      v22 = *a3;
      *((_WORD *)a1 + 2) = *((_WORD *)a3 + 2);
      *a1 = v22;
      *((_WORD *)a3 + 2) = WORD2(v21);
      *a3 = v21;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(unsigned int *a1, unsigned int *a2, float32x4_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  float32x4_t *v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  float32x4_t *v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 2;
      v9 = a3[2];
      v10 = a3[3]->i64[0];
      v11 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *(a2 - 2)), *v9);
      v44 = **a3;
      v12 = vmulq_f32(v11, v44);
      v12.i32[3] = 0;
      v47 = *a3[1];
      v50 = vsubq_f32(*(float32x4_t *)(v10 + 16 * *a1), *v9);
      v13 = vmulq_f32(v11, v47);
      v13.i32[3] = 0;
      v14 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)));
      v15 = vmulq_f32(v50, v44);
      v15.i32[3] = 0;
      v16 = vmulq_f32(v50, v47);
      v16.i32[3] = 0;
      if (v14 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16))))
      {
        v17 = *(_QWORD *)a1;
        v18 = *v8;
        *((_WORD *)a1 + 2) = *((_WORD *)v8 + 2);
        *a1 = v18;
        *v8 = v17;
        *((_WORD *)v8 + 2) = WORD2(v17);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v19 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a1 + 2, a1 + 4, a3);
      v20 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      break;
  }
  while (1)
  {
    v23 = a3[2];
    v24 = a3[3]->i64[0];
    v25 = vsubq_f32(*(float32x4_t *)(v24 + 16 * *v20), *v23);
    v45 = **a3;
    v26 = vmulq_f32(v25, v45);
    v26.i32[3] = 0;
    v48 = *a3[1];
    v51 = vsubq_f32(*(float32x4_t *)(v24 + 16 * *v19), *v23);
    v27 = vmulq_f32(v25, v48);
    v27.i32[3] = 0;
    v28 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27)));
    v29 = vmulq_f32(v51, v45);
    v29.i32[3] = 0;
    v30 = vmulq_f32(v51, v48);
    v30.i32[3] = 0;
    if (v28 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30))))
    {
      v31 = *(_QWORD *)v20;
      v32 = *(_QWORD *)v20;
      v33 = v21;
      while (1)
      {
        v34 = (char *)a1 + v33;
        *((_DWORD *)v34 + 6) = *(unsigned int *)((char *)a1 + v33 + 16);
        *((_WORD *)v34 + 14) = *(_WORD *)((char *)a1 + v33 + 20);
        if (v33 == -16)
          break;
        v35 = a3[2];
        v36 = a3[3]->i64[0];
        v37 = vsubq_f32(*(float32x4_t *)(v36 + 16 * v32), *v35);
        v46 = **a3;
        v38 = vmulq_f32(v37, v46);
        v38.i32[3] = 0;
        v49 = *a3[1];
        v52 = vsubq_f32(*(float32x4_t *)(v36 + 16 * *((unsigned int *)v34 + 2)), *v35);
        v39 = vmulq_f32(v37, v49);
        v39.i32[3] = 0;
        v40 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v39, v39)));
        v41 = vmulq_f32(v52, v46);
        v41.i32[3] = 0;
        v42 = vmulq_f32(v52, v49);
        v42.i32[3] = 0;
        v33 -= 8;
        if (v40 <= atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v41, v41)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42))))
        {
          v43 = (uint64_t)a1 + v33 + 24;
          goto LABEL_12;
        }
      }
      v43 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)v43 = v31;
      *(_WORD *)(v43 + 4) = WORD2(v31);
      if (++v22 == 8)
        return v20 + 2 == a2;
    }
    v19 = v20;
    v21 += 8;
    v20 += 2;
    if (v20 == a2)
      return 1;
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, float32x4_t **a5)
{
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  unsigned int v19;
  float32x4_t *v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  float32x4_t *v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  unsigned int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::ClassifyAndCollapseEdges(cv3d::cv::gess::mesh::TriMesh &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,float const&,cv3d::cv::gess::mesh::HAttributeHandleT<BOOL> const&,std::vector<std::vector<cv3d::cv::gess::internal::LabelledLink>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,std::vector<cv3d::cv::gess::math::Vector3T<float>>&,unsigned int &,unsigned int &)::$_12 &,cv3d::cv::gess::internal::LabelledLink*>(a1, a2, a3, a5);
  v10 = a5[2];
  v11 = a5[3]->i64[0];
  v12 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *a4), *v10);
  v40 = **a5;
  v13 = vmulq_f32(v12, v40);
  v13.i32[3] = 0;
  v43 = *a5[1];
  v46 = vsubq_f32(*(float32x4_t *)(v11 + 16 * *a3), *v10);
  v14 = vmulq_f32(v12, v43);
  v14.i32[3] = 0;
  v15 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v13, v13)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
  v16 = vmulq_f32(v46, v40);
  v16.i32[3] = 0;
  v17 = vmulq_f32(v46, v43);
  v17.i32[3] = 0;
  if (v15 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17))))
  {
    v18 = *(_QWORD *)a3;
    v19 = *a4;
    *((_WORD *)a3 + 2) = *((_WORD *)a4 + 2);
    *a3 = v19;
    *a4 = v18;
    *((_WORD *)a4 + 2) = WORD2(v18);
    v20 = a5[2];
    v21 = a5[3]->i64[0];
    v22 = vsubq_f32(*(float32x4_t *)(v21 + 16 * *a3), *v20);
    v41 = **a5;
    v23 = vmulq_f32(v22, v41);
    v23.i32[3] = 0;
    v44 = *a5[1];
    v47 = vsubq_f32(*(float32x4_t *)(v21 + 16 * *a2), *v20);
    v24 = vmulq_f32(v22, v44);
    v24.i32[3] = 0;
    v25 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24)));
    v26 = vmulq_f32(v47, v41);
    v26.i32[3] = 0;
    v27 = vmulq_f32(v47, v44);
    v27.i32[3] = 0;
    if (v25 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27))))
    {
      v28 = *(_QWORD *)a2;
      v29 = *a3;
      *((_WORD *)a2 + 2) = *((_WORD *)a3 + 2);
      *a2 = v29;
      *a3 = v28;
      *((_WORD *)a3 + 2) = WORD2(v28);
      v30 = a5[2];
      v31 = a5[3]->i64[0];
      v32 = vsubq_f32(*(float32x4_t *)(v31 + 16 * *a2), *v30);
      v42 = **a5;
      v33 = vmulq_f32(v32, v42);
      v33.i32[3] = 0;
      v45 = *a5[1];
      v48 = vsubq_f32(*(float32x4_t *)(v31 + 16 * *a1), *v30);
      v34 = vmulq_f32(v32, v45);
      v34.i32[3] = 0;
      v35 = atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)));
      v36 = vmulq_f32(v48, v42);
      v36.i32[3] = 0;
      v37 = vmulq_f32(v48, v45);
      v37.i32[3] = 0;
      if (v35 > atan2f(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36)), vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37))))
      {
        v38 = *(_QWORD *)a1;
        v39 = *a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *a1 = v39;
        *a2 = v38;
        *((_WORD *)a2 + 2) = WORD2(v38);
      }
    }
  }
}

void std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    else
      v13 = 0;
    __p = v13;
    v15 = &v13[16 * v10];
    v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    v16 = &v15[16 * a2];
    std::vector<cv3d::cv::gess::math::Vector4T<unsigned int>>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15)
      v16 += (v15 - v16 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
}

void sub_23C572E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned int,unsigned int>>::erase(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;

  if (a2 != a3)
  {
    v3 = *(char **)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 8 * ((a3 - a2) >> 3);
      v4 = a2;
      do
      {
        v6 = *(_DWORD *)&v4[v5 + 4];
        *(_DWORD *)v4 = *(_DWORD *)&v4[v5];
        *((_DWORD *)v4 + 1) = v6;
        v4 += 8;
      }
      while (&v4[v5] != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

std::vector<unsigned int> *cv3d::cv::gess::internal::DisjointSets<unsigned int>::DisjointSets(std::vector<unsigned int> *a1, std::vector<unsigned int>::size_type __n)
{
  int v2;
  std::vector<unsigned int>::size_type v4;
  std::vector<unsigned int> *v5;
  uint64_t v6;
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer v8;

  v2 = __n;
  v4 = __n;
  v5 = std::vector<unsigned int>::vector(a1, __n);
  std::vector<unsigned int>::vector(v5 + 1, v4);
  if (v2)
  {
    v6 = 0;
    begin = a1->__begin_;
    v8 = a1[1].__begin_;
    do
    {
      begin[v6] = v6;
      v8[v6++] = 0;
    }
    while (v4 != v6);
  }
  return a1;
}

void sub_23C572F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::__tree<unsigned int>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

BOOL cv3d::cv::gess::internal::IsFaceFlipped(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v4 = a3[1];
  v5 = *a3 - *a2;
  v6 = v4 - a2[1];
  v7 = a3[2];
  v8 = v7 - a2[2];
  v9 = *a1 - *a3;
  v10 = a1[1] - v4;
  v11 = a1[2] - v7;
  v12 = v6 * v11 - v8 * v10;
  v13 = v8 * v9 - v5 * v11;
  v14 = v5 * v10 - v6 * v9;
  v15 = sqrt(v13 * v13 + v12 * v12 + v14 * v14);
  if (v15 == 0.0)
    return 0;
  v16 = a4[2] - v7;
  v17 = a4[1] - v4;
  v18 = -v6;
  v19 = *a4 - *a3;
  v20 = v17 * -v8 + v6 * v16;
  v21 = v16 * -v5 + v8 * v19;
  v22 = v19 * v18 + v5 * v17;
  v23 = sqrt(v21 * v21 + v20 * v20 + v22 * v22);
  return fabs(v23) < 1.0e-11
      || v13 / v15 * (v21 / v23) + v12 / v15 * (v20 / v23) + v14 / v15 * (v22 / v23) < 0.173648178;
}

BOOL cv3d::cv::gess::internal::IsElongated(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a2[2];
  v6 = a1[2];
  v7 = a3[1];
  v8 = a3[2];
  v9 = sqrt((v3 - v4) * (v3 - v4) + (*a2 - *a1) * (*a2 - *a1) + (v5 - v6) * (v5 - v6));
  v10 = sqrt((v7 - v3) * (v7 - v3) + (*a3 - *a2) * (*a3 - *a2) + (v8 - v5) * (v8 - v5));
  v11 = sqrt((v7 - v4) * (v7 - v4) + (*a3 - *a1) * (*a3 - *a1) + (v8 - v6) * (v8 - v6));
  return ((v11 + v9 + v10) * 0.5 - v11)
       * (((v11 + v9 + v10) * 0.5 - v10)
        * (((v11 + v9 + v10) * 0.5 - v9)
         * 8.0))
       / (v11
        * (v9
         * v10)) < 0.02;
}

uint64_t cv3d::cv::gess::internal::Simplify::Simplify(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  std::vector<unsigned int> *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  std::vector<unsigned int>::pointer begin;
  unint64_t v28;
  _BOOL4 is_boundary;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  std::vector<unsigned int> *v46;
  __int128 v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = a2;
  *(_OWORD *)(a1 + 72) = 0u;
  v41 = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = a1 + 88;
  *(_OWORD *)(a1 + 136) = 0u;
  v6 = (uint64_t *)(a1 + 136);
  v7 = (_QWORD *)(a1 + 112);
  v42 = a1 + 160;
  *(_OWORD *)(a1 + 184) = 0u;
  v45 = (_QWORD *)(a1 + 184);
  v46 = (std::vector<unsigned int> *)(a1 + 208);
  *(_OWORD *)(a1 + 232) = 0u;
  v8 = (std::vector<unsigned int> *)(a1 + 232);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)a3;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)v50 = 0u;
  v51 = 0;
  v56 = 0;
  v57 = 0;
  v53 = 0;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)&v54);
  v37 = a2[16];
  v39 = a2[17];
  v43 = (uint64_t)(a2[14] - a2[13]) >> 2;
  std::vector<cv3d::cv::gess::internal::Quadric>::resize(v5, v43);
  std::vector<cv3d::cv::gess::math::Vector3T<double>>::resize((uint64_t)v7, v43);
  if ((_DWORD)v43)
  {
    v9 = 0;
    do
    {
      v10 = (__int128 *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(_QWORD *)(a1 + 64), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 176), v9);
      v11 = 0;
      v47 = *v10;
      do
      {
        *(double *)&__p[v11] = *((float *)&__p[-2] + v11);
        ++v11;
      }
      while (v11 != 3);
      v12 = *v7 + 24 * v9;
      *(_OWORD *)v12 = *(_OWORD *)__p;
      *(_QWORD *)(v12 + 16) = v49;
      ++v9;
    }
    while (v9 != v43);
  }
  std::vector<BOOL>::resize((uint64_t)v6, v43, 0);
  v13 = -858993459 * ((v39 - v37) >> 2);
  v14 = v13 >> 1;
  std::vector<cv3d::cv::gess::internal::Quadric>::resize(v42, v14);
  std::vector<float>::resize((uint64_t)v45, v14);
  v15 = v13;
  std::vector<int>::resize(v46, v13);
  std::vector<int>::resize(v8, v14);
  v40 = v13 >> 1;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,std::vector<float> &,void>(v45, __p);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v41, (__int128 *)__p);
  v16 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v17 = (unint64_t *)((char *)__p[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  LOBYTE(v47) = 0;
  std::vector<BOOL>::vector(__p, v13, (unsigned __int8 *)&v47);
  v38 = v13 >> 1;
  if (v13)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(a1 + 64);
      LODWORD(v47) = v19;
      v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21 + 104, (unsigned int *)&v47);
      v23 = *v22;
      v24 = __p[0];
      v25 = v23 >> 6;
      v26 = 1 << v23;
      if ((v26 & *((_QWORD *)__p[0] + v25)) == 0)
      {
        *(_QWORD *)((char *)__p[0] + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        v24[v25] |= v26;
        begin = v46->__begin_;
        v46->__begin_[v19] = v20;
        begin[*v22] = v20;
        v8->__begin_[v20++] = v19;
      }
      ++v19;
    }
    while (v15 != v19);
  }
  else
  {
    v20 = 0;
  }
  if (v20 != v40)
  {
    v35 = "e_index == e_size";
    v36 = 46;
    goto LABEL_36;
  }
  if (*(_BYTE *)(a3 + 12))
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
    {
      std::vector<unsigned int>::resize((std::vector<unsigned int> *)a1, v43, cv3d::cv::gess::internal::INVALID_IMPORTANCE);
      goto LABEL_22;
    }
    v35 = "v_importances.size() == 0";
    v36 = 49;
LABEL_36:
    __assert_rtn("Simplify", "QEMSimplify.cpp", v36, v35);
  }
LABEL_22:
  if (*(_BYTE *)(a3 + 4) && (_DWORD)v43)
  {
    v28 = 0;
    do
    {
      LODWORD(v47) = v28;
      is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)a2, (uint64_t)&v47);
      v30 = *v6;
      v31 = v28 >> 6;
      v32 = 1 << v28;
      if (is_boundary)
        v33 = *(_QWORD *)(v30 + 8 * v31) | v32;
      else
        v33 = *(_QWORD *)(v30 + 8 * v31) & ~v32;
      *(_QWORD *)(v30 + 8 * v31) = v33;
      ++v28;
    }
    while (v43 != v28);
  }
  v56 = 4 * v15 + 105 * v43 + 112 * v38 + 8 * v38;
  v57 = 0;
  v53 = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)&v55);
  if (__p[0])
    operator delete(__p[0]);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  return a1;
}

void sub_23C5736A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, void **a17, void **a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void **v31;
  void **v32;
  void **v33;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;

  if (__p)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  v35 = *v33;
  if (*v33)
  {
    *(_QWORD *)(v30 + 240) = v35;
    operator delete(v35);
  }
  v36 = *a18;
  if (*a18)
  {
    *(_QWORD *)(v30 + 216) = v36;
    operator delete(v36);
  }
  v37 = *a17;
  if (*a17)
  {
    *(_QWORD *)(v30 + 192) = v37;
    operator delete(v37);
  }
  v38 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v30 + 168) = v38;
    operator delete(v38);
  }
  if (*v32)
    operator delete(*v32);
  v39 = *v31;
  if (*v31)
  {
    *(_QWORD *)(v30 + 120) = v39;
    operator delete(v39);
  }
  v40 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v30 + 96) = v40;
    operator delete(v40);
  }
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](a13);
  v41 = *(_QWORD **)(v30 + 48);
  if (v41 == (_QWORD *)(v30 + 24))
  {
    v42 = 4;
    v41 = (_QWORD *)(v30 + 24);
  }
  else
  {
    if (!v41)
      goto LABEL_24;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_24:
  v43 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::internal::Quadric>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::internal::Quadric>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 80 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<double>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void cv3d::cv::gess::internal::Simplify::Calculate(cv3d::cv::gess::internal::Simplify *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  cv3d::cv::gess::internal::EdgeErrorHeap *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  float64x2_t *v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t i;
  void *v68;
  int v69;
  const char *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  float64x2_t v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78[2];
  uint64_t v79;
  uint64_t v80;
  void *__p[3];
  __int128 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  _QWORD **v98;
  _QWORD *v99[2];
  void *v100;
  void *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v106;
  _BYTE v107[64];
  _BYTE v108[64];
  uint64_t v109;
  uint64_t v110;

  v106 = 0;
  v103 = 0u;
  v104 = 0;
  v109 = 0;
  v110 = 0;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v107);
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = v2[13];
  v4 = v2[14];
  v6 = v2[16];
  v5 = v2[17];
  v7 = llroundf(*((float *)this + 64) * (float)((v2[20] - v2[19]) >> 2));
  v8 = *((_QWORD *)this + 6);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    if (v7 < 1)
      v10 = 1;
    else
      v10 = v9;
    if ((v10 & 1) != 0)
      goto LABEL_74;
  }
  else if (v7 < 1)
  {
    goto LABEL_74;
  }
  cv3d::cv::gess::internal::Simplify::ComputeVertexQuadrics(this);
  v11 = *((_QWORD *)this + 6);
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) == 0)
  {
    v82 = *((_OWORD *)this + 4);
    v83 = -1;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = (char *)this + 88;
    v88 = (char *)this + 112;
    v89 = (char *)this + 136;
    v90 = (char *)this + 160;
    v91 = (char *)this + 184;
    v92 = (char *)this + 208;
    v93 = (char *)this + 232;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0;
    v98 = v99;
    v99[0] = 0;
    v99[1] = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v12 = -858993459 * ((v5 - v6) >> 2);
    LOBYTE(v78[0]) = 0;
    std::vector<BOOL>::vector(__p, v12, (unsigned __int8 *)v78);
    *(_QWORD *)v78 = 0;
    v79 = 0;
    v80 = 0;
    if (v12)
    {
      v73 = v4;
      v13 = 0;
      v14 = 1;
      while (1)
      {
        v77 = v13;
        v15 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 8) + 104, &v77);
        v16 = __p[0];
        v17 = v15 >> 6;
        v18 = 1 << v15;
        if ((v18 & *((_QWORD *)__p[0] + v17)) == 0)
        {
          *(_QWORD *)((char *)__p[0] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          v16[v17] |= v18;
          if (cv3d::cv::gess::internal::Collapser::EdgePlanCollapse((uint64_t)&v82, &v77, (uint64_t)v78))
            cv3d::cv::gess::internal::EdgeErrorHeap::Insert(*((cv3d::cv::gess::internal::EdgeErrorHeap **)this + 9), (unsigned int *)(*((_QWORD *)this + 26) + 4 * v77));
          v19 = *((_QWORD *)this + 6);
          if (v19)
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19))
              break;
          }
        }
        v14 = ++v13 < v12;
        if (v12 == v13)
        {
          v14 = 0;
          break;
        }
      }
      v4 = v73;
    }
    else
    {
      v14 = 0;
    }
    if (__p[0])
      operator delete(__p[0]);
    if (!v14)
    {
      v109 = 0;
      v110 = 0;
      v106 = std::chrono::system_clock::now().__d_.__rep_;
      cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v108);
      rep = std::chrono::system_clock::now().__d_.__rep_;
      cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v107);
      v20 = (_QWORD *)*((_QWORD *)this + 9);
      v21 = (_DWORD *)*v20;
      if (*(_DWORD *)*v20)
        v22 = v7 < 1;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v78[0] = 0;
          v23 = *(unsigned int *)(v20[3] + 32 * v21[1] + 20);
          v78[0] = v23;
          v24 = *(_DWORD *)(*((_QWORD *)this + 29) + 4 * v23);
          v77 = v24;
          if (v24 == -1)
            __assert_rtn("Calculate", "QEMSimplify.cpp", 136, "hh.Valid()");
          v25 = *((_QWORD *)this + 8) + 104;
          LODWORD(__p[0]) = v24;
          v26 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(v25, (unsigned int *)__p) + 12);
          v27 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*((_QWORD *)this + 9);
          if (v26 == -1 || *(_DWORD *)(*((_QWORD *)v27 + 3) + 32 * v78[0] + 20) == -1)
          {
            cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v27, v78);
          }
          else
          {
            if (*(float *)(*((_QWORD *)this + 23) + 4 * v78[0]) >= 3.4028e38)
              break;
            v28 = cv3d::cv::gess::mesh::Topology::h(*((_QWORD *)this + 8) + 104, &v77);
            v29 = *(unsigned int *)(v28 + 12);
            v76 = *(_DWORD *)(v28 + 12);
            v30 = *((_QWORD *)this + 8) + 104;
            v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v30, &v77);
            v32 = cv3d::cv::gess::mesh::Topology::h(v30, v31);
            v33 = *(unsigned int *)(v32 + 12);
            v75 = *(_DWORD *)(v32 + 12);
            v34 = cv3d::cv::gess::internal::Collapser::Collapse((_QWORD **)&v82, &v77);
            v35 = v34;
            if (*((_BYTE *)this + 268) && v34 >= 1)
              cv3d::cv::gess::internal::Simplify::UpdateImportance((uint64_t)this, &v76, &v75);
            if (*((_BYTE *)this + 269) && *((_DWORD *)this + 14) != -1 && v35 >= 1)
            {
              v36 = (_QWORD *)(*((_QWORD *)this + 8) + 104);
              LODWORD(__p[0]) = v29;
              if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v36, (unsigned int *)__p) != -1)
              {
                v37 = (_QWORD *)(*((_QWORD *)this + 8) + 104);
                LODWORD(__p[0]) = v33;
                if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v37, (unsigned int *)__p) != -1)
                {
                  v69 = 149;
                  v70 = "Calculate";
                  v71 = "QEMSimplify.cpp";
                  v72 = "mesh_.IsDangling(vhs) || mesh_.IsDangling(vhe)";
LABEL_81:
                  __assert_rtn(v70, v71, v69, v72);
                }
              }
              v38 = (_QWORD *)(*((_QWORD *)this + 8) + 104);
              LODWORD(__p[0]) = v29;
              if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v38, (unsigned int *)__p) != -1
                || (v47 = (_QWORD *)(*((_QWORD *)this + 8) + 104),
                    LODWORD(__p[0]) = v33,
                    *(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v47, (unsigned int *)__p) == -1))
              {
                v39 = (_QWORD *)(*((_QWORD *)this + 8) + 104);
                LODWORD(__p[0]) = v29;
                if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v39, (unsigned int *)__p) != -1)
                {
                  v40 = (_QWORD *)(*((_QWORD *)this + 8) + 104);
                  LODWORD(__p[0]) = v33;
                  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v40, (unsigned int *)__p) == -1)
                  {
                    v41 = *((_QWORD *)this + 8);
                    LODWORD(__p[0]) = *((_DWORD *)this + 14);
                    v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v41 + 8), (unsigned int *)__p);
                    v43 = *(_QWORD *)(v42 + 40);
                    if (v29 >= (*(_QWORD *)(v42 + 48) - v43) >> 2)
                      goto LABEL_79;
                    *(_DWORD *)(v43 + 4 * v29) = v29;
                    v44 = *((_QWORD *)this + 8);
                    LODWORD(__p[0]) = *((_DWORD *)this + 14);
                    v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v44 + 8), (unsigned int *)__p);
                    v46 = *(_QWORD *)(v45 + 40);
                    if (v33 >= (*(_QWORD *)(v45 + 48) - v46) >> 2)
                      goto LABEL_79;
                    *(_DWORD *)(v46 + 4 * v33) = v29;
                  }
                }
              }
              else
              {
                v48 = *((_QWORD *)this + 8);
                LODWORD(__p[0]) = *((_DWORD *)this + 14);
                v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v48 + 8), (unsigned int *)__p);
                v50 = *(_QWORD *)(v49 + 40);
                if (v29 >= (*(_QWORD *)(v49 + 48) - v50) >> 2
                  || (*(_DWORD *)(v50 + 4 * v29) = v33,
                      v51 = *((_QWORD *)this + 8),
                      LODWORD(__p[0]) = *((_DWORD *)this + 14),
                      v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v51 + 8), (unsigned int *)__p), v53 = *(_QWORD *)(v52 + 40), v33 >= (*(_QWORD *)(v52 + 48) - v53) >> 2))
                {
LABEL_79:
                  v69 = 182;
                  v70 = "operator[]";
                  v71 = "Attribute.h";
                  v72 = "index < data_.size()";
                  goto LABEL_81;
                }
                *(_DWORD *)(v53 + 4 * v33) = v33;
              }
            }
            v54 = *((_QWORD *)this + 6);
            if (v54 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 48))(v54) & 1) != 0)
              goto LABEL_68;
            v7 -= v35;
          }
          v20 = (_QWORD *)*((_QWORD *)this + 9);
          v21 = (_DWORD *)*v20;
          if (*(_DWORD *)*v20)
            v55 = v7 < 1;
          else
            v55 = 1;
        }
        while (!v55);
      }
      if (((v4 - v3) & 0x3FFFFFFFCLL) != 0)
      {
        v56 = 0;
        v57 = 0;
        while (1)
        {
          v58 = (_QWORD *)(*((_QWORD *)this + 8) + 104);
          LODWORD(__p[0]) = v57;
          if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v58, (unsigned int *)__p) != -1)
          {
            v59 = (float64x2_t *)(*((_QWORD *)this + 14) + v56);
            v74 = *v59;
            v60 = v59[1].f64[0];
            v61 = *((_QWORD *)this + 8);
            LODWORD(__p[0]) = *(_DWORD *)(v61 + 176);
            v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v61 + 8), (unsigned int *)__p);
            v63 = *(_QWORD *)(v62 + 40);
            if (v57 >= (*(_QWORD *)(v62 + 48) - v63) >> 4)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            *(float32x2_t *)&v64 = vcvt_f32_f64(v74);
            *(float *)&v65 = v60;
            *((_QWORD *)&v64 + 1) = v65;
            *(_OWORD *)(v63 + 16 * v57) = v64;
          }
          v66 = *((_QWORD *)this + 6);
          if (v66)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 48))(v66) & 1) != 0)
              break;
          }
          ++v57;
          v56 += 24;
          if (((unint64_t)(v4 - v3) >> 2) == v57)
            goto LABEL_67;
        }
      }
      else
      {
LABEL_67:
        v109 = 0;
        v110 = 0;
        v106 = std::chrono::system_clock::now().__d_.__rep_;
        cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory((cv3d::cv::gess::util::os::MemoryInfo *)v108);
      }
    }
LABEL_68:
    if (v100)
    {
      v101 = v100;
      operator delete(v100);
    }
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v98, v99[0]);
    for (i = 0; i != -48; i -= 24)
    {
      v68 = *(void **)((char *)&v95 + i + 8);
      if (v68)
      {
        *(_QWORD *)((char *)&v96 + i) = v68;
        operator delete(v68);
      }
    }
  }
LABEL_74:
  if (SHIBYTE(v104) < 0)
    operator delete((void *)v103);
}

void sub_23C573F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  cv3d::cv::gess::internal::Collapser::~Collapser((cv3d::cv::gess::internal::Collapser *)&a23);
  if (a54 < 0)
    operator delete(*(void **)(v54 + 208));
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::internal::Simplify::ComputeVertexQuadrics(cv3d::cv::gess::internal::Simplify *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30[10];
  _QWORD v31[3];

  v2 = (*(_QWORD *)(*((_QWORD *)this + 8) + 160) - *(_QWORD *)(*((_QWORD *)this + 8) + 152)) >> 2;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v31, 3uLL);
  if (!(_DWORD)v2)
  {
    v5 = (unsigned int *)v31[0];
    if (!v31[0])
      return;
    goto LABEL_10;
  }
  v3 = 0;
  do
  {
    v4 = *((_QWORD *)this + 8);
    LODWORD(v30[0]) = v3;
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v4, (unsigned int *)v30, v31);
    v5 = (unsigned int *)v31[0];
    v6 = *((_QWORD *)this + 14);
    v7 = (double *)(v6 + 24 * *(unsigned int *)(v31[0] + 4));
    v8 = (double *)(v6 + 24 * *(unsigned int *)v31[0]);
    v9 = v8[1];
    v10 = *v7 - *v8;
    v11 = v7[1] - v9;
    v12 = v8[2];
    v13 = v7[2] - v12;
    v14 = (double *)(v6 + 24 * *(unsigned int *)(v31[0] + 8));
    v15 = *v8 - *v14;
    v16 = v9 - v14[1];
    v17 = v12 - v14[2];
    v18 = v11 * v17 - v13 * v16;
    v19 = v13 * v15 - v10 * v17;
    v20 = v10 * v16 - v11 * v15;
    v21 = sqrt(v19 * v19 + v18 * v18 + v20 * v20);
    if (v21 != 0.0)
    {
      v22 = 0;
      v23 = v18 / v21;
      v24 = v19 / v21;
      v25 = v20 / v21;
      v26 = v9 * v24 + v23 * *v8 + v25 * v12;
      v30[0] = v23 * v23;
      v30[1] = v23 * v24;
      v30[2] = v23 * v25;
      v30[3] = v24 * v24;
      v30[4] = v24 * v25;
      v30[5] = v25 * v25;
      v30[6] = -(v26 * v23);
      v30[7] = -(v26 * v24);
      v30[8] = -(v26 * v25);
      v30[9] = v26 * v26;
      v27 = *((_QWORD *)this + 11);
      do
      {
        v28 = 0;
        v29 = v27 + 80 * v5[v22];
        do
        {
          *(float64x2_t *)(v29 + v28 * 8) = vaddq_f64(*(float64x2_t *)&v30[v28], *(float64x2_t *)(v29 + v28 * 8));
          v28 += 2;
        }
        while (v28 != 10);
        ++v22;
      }
      while (v22 != 3);
    }
    ++v3;
  }
  while (v3 != (_DWORD)v2);
  if (v5)
  {
LABEL_10:
    v31[1] = v5;
    operator delete(v5);
  }
}

void sub_23C574188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Insert(cv3d::cv::gess::internal::EdgeErrorHeap *this, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *((_QWORD *)this + 3) + 32 * v2;
  if (*(_DWORD *)(v3 + 20) != -1)
    cv3d::cv::gess::internal::EdgeErrorHeap::Insert();
  *(_DWORD *)v3 = *(_DWORD *)(**((_QWORD **)this + 2) + 4 * v2);
  *(_QWORD *)(v3 + 12) = -1;
  *(_QWORD *)(v3 + 4) = -1;
  *(_DWORD *)(v3 + 20) = v2;
  *(_DWORD *)(v3 + 24) = -1;
  *(_BYTE *)(v3 + 28) = 0;
  return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::insert(*(_QWORD *)this, *a2);
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Remove(cv3d::cv::gess::internal::EdgeErrorHeap *this, const unsigned int *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a2;
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 32 * v3 + 20) == -1)
    cv3d::cv::gess::internal::EdgeErrorHeap::Remove();
  v5 = *(_QWORD *)this;
  cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(*(_QWORD *)this, v3, -3.4028e38);
  result = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::extract_min(v5);
  v7 = *((_QWORD *)this + 3) + 32 * result;
  *(_DWORD *)v7 = 0;
  *(_QWORD *)(v7 + 4) = -1;
  *(_QWORD *)(v7 + 12) = -1;
  *(_QWORD *)(v7 + 20) = -1;
  *(_BYTE *)(v7 + 28) = 0;
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 32 * *a2 + 20) != -1)
    cv3d::cv::gess::internal::EdgeErrorHeap::Remove();
  return result;
}

_DWORD *cv3d::cv::gess::internal::Simplify::UpdateImportance(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *result;
  unsigned int v9;
  _DWORD v10[2];
  uint64_t v11;

  v4 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  ++*(_DWORD *)(a1 + 272);
  v5 = *a3;
  v10[0] = *a2;
  v10[1] = v5;
  do
  {
    v6 = v10[v4];
    v7 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 104);
    v9 = v10[v4];
    result = (_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v7, &v9);
    if (*result == -1)
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v6) = *(_DWORD *)(a1 + 272);
    ++v4;
  }
  while (v4 != 2);
  return result;
}

void cv3d::cv::gess::internal::Collapser::~Collapser(cv3d::cv::gess::internal::Collapser *this)
{
  void *v2;
  uint64_t i;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  for (i = 0; i != -48; i -= 24)
  {
    v4 = *(void **)((char *)this + i + 128);
    if (v4)
    {
      *(_QWORD *)((char *)this + i + 136) = v4;
      operator delete(v4);
    }
  }
}

BOOL cv3d::cv::gess::util::os::MemoryInfo::RecordCurrentMemory(cv3d::cv::gess::util::os::MemoryInfo *this)
{
  kern_return_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[3];
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_QWORD *)this = cv3d::cv::gess::util::os::ByteUsage(this);
  task_info_outCnt = 93;
  v2 = task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt);
  if (!v2)
  {
    v3 = *(_QWORD *)task_info_out;
    v4 = v11;
    *((_QWORD *)this + 1) = v10;
    *((_QWORD *)this + 2) = v3;
    *((_OWORD *)this + 2) = v13;
    v5 = v9;
    *((_QWORD *)this + 6) = v4;
    *((_QWORD *)this + 7) = v5;
    *((_QWORD *)this + 3) = v12;
  }
  return v2 == 0;
}

void std::vector<cv3d::cv::gess::internal::Quadric>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::internal::Quadric>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[80 * v8];
    v15 = &v12[80 * v11];
    v16 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 5) = *((_OWORD *)v18 - 5);
        v20 = *((_OWORD *)v18 - 4);
        v21 = *((_OWORD *)v18 - 3);
        v22 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v22;
        *((_OWORD *)v14 - 4) = v20;
        *((_OWORD *)v14 - 3) = v21;
        v14 -= 80;
        v18 -= 80;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::internal::Quadric>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

void std::vector<cv3d::cv::gess::math::Vector3T<double>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v18 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      v20 = v14;
    }
    else
    {
      do
      {
        v20 = v14 - 24;
        v21 = v19 - 24;
        v22 = -24;
        do
        {
          *(_QWORD *)&v14[v22] = *(_QWORD *)&v19[v22];
          v22 += 8;
        }
        while (v22);
        v19 -= 24;
        v14 -= 24;
      }
      while (v21 != v18);
    }
    *a1 = v20;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::insert(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = **(_QWORD **)(result + 16);
  v3 = v2 + 32 * a2;
  *(_DWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 4) = -1;
  *(_DWORD *)(v3 + 16) = -1;
  *(_BYTE *)(v3 + 28) = 0;
  v4 = *(unsigned int *)(result + 4);
  if ((_DWORD)v4 == -1)
  {
    *(int32x2_t *)(v3 + 8) = vdup_n_s32(a2);
  }
  else
  {
    v5 = v2 + 32 * v4;
    v6 = *(unsigned int *)(v5 + 8);
    *(_DWORD *)(v2 + 32 * v6 + 12) = a2;
    *(_DWORD *)(v3 + 8) = v6;
    *(_DWORD *)(v3 + 12) = v4;
    *(_DWORD *)(v5 + 8) = a2;
    if (*(float *)v3 >= *(float *)v5)
      goto LABEL_6;
  }
  *(_DWORD *)(result + 4) = a2;
LABEL_6:
  ++*(_DWORD *)result;
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(uint64_t result, unsigned int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v3 = a2;
  v4 = **(_QWORD **)(result + 16);
  v5 = v4 + 32 * a2;
  if (*(float *)v5 >= a3)
  {
    v7 = result;
    *(float *)v5 = a3;
    v8 = *(unsigned int *)(v5 + 4);
    if ((_DWORD)v8 != -1 && *(float *)(v4 + 32 * v8) > a3)
    {
      cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cut(result, a2, v8);
      result = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cascading_cut(v7, v8);
      v4 = **(_QWORD **)(v7 + 16);
      a3 = *(float *)(v4 + 32 * v3);
    }
    if (a3 < *(float *)(v4 + 32 * *(unsigned int *)(v7 + 4)))
      *(_DWORD *)(v7 + 4) = a2;
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::extract_min(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  std::vector<unsigned int>::pointer begin;
  uint64_t v11;
  uint64_t v12;
  std::vector<unsigned int>::pointer v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<unsigned int> v25;

  memset(&v25, 0, sizeof(v25));
  v1 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v1 != -1)
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = v3 + 32 * v1;
    v5 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v5 != -1)
    {
      std::vector<int>::resize(&v25, *(int *)(v4 + 24));
      v3 = **(_QWORD **)(a1 + 16);
      v6 = v3 + 32 * v1;
      v8 = *(_DWORD *)(v6 + 24);
      v7 = (unsigned int *)(v6 + 24);
      if (v8 >= 1)
      {
        v9 = 0;
        begin = v25.__begin_;
        do
        {
          begin[v9] = v5;
          v5 = *(unsigned int *)(v3 + 32 * v5 + 12);
          ++v9;
          v11 = (int)*v7;
        }
        while (v9 < v11);
        v12 = *v7;
        if ((int)v11 >= 1)
        {
          v13 = v25.__begin_;
          v14 = *(unsigned int *)(a1 + 4);
          v15 = v3 + 32 * v14;
          v18 = *(_DWORD *)(v15 + 8);
          v16 = (unsigned int *)(v15 + 8);
          v17 = v18;
          do
          {
            v19 = *v13++;
            *(_DWORD *)(v3 + 32 * v17 + 12) = v19;
            v20 = (_DWORD *)(v3 + 32 * v19);
            v20[2] = v17;
            v20[3] = v14;
            *v16 = v19;
            v20[1] = -1;
            v17 = v19;
            --v12;
          }
          while (v12);
        }
      }
    }
    v21 = v3 + 32 * v1;
    v22 = *(unsigned int *)(v21 + 8);
    *(_DWORD *)(v3 + 32 * v22 + 12) = *(_DWORD *)(v21 + 12);
    v23 = *(unsigned int *)(v21 + 12);
    *(_DWORD *)(v3 + 32 * v23 + 8) = v22;
    if ((_DWORD)v1 == (_DWORD)v23)
    {
      *(_DWORD *)(a1 + 4) = -1;
    }
    else
    {
      *(_DWORD *)(a1 + 4) = v23;
      cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::consolidate(a1);
    }
    --*(_DWORD *)a1;
    if (v25.__begin_)
    {
      v25.__end_ = v25.__begin_;
      operator delete(v25.__begin_);
    }
  }
  return v1;
}

void sub_23C5749F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cut(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = **(_QWORD **)(result + 16);
  v4 = v3 + 32 * a2;
  v5 = (_DWORD *)(v4 + 12);
  v6 = *(unsigned int *)(v4 + 12);
  if (*(_DWORD *)(v4 + 12) == a2)
  {
    v7 = a3;
    *(_DWORD *)(v3 + 32 * a3 + 16) = -1;
  }
  else
  {
    *(_DWORD *)(v3 + 32 * v6 + 8) = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v3 + 32 * *(unsigned int *)(v4 + 8) + 12) = v6;
    v7 = a3;
    v8 = v3 + 32 * a3;
    v10 = *(_DWORD *)(v8 + 16);
    v9 = (_DWORD *)(v8 + 16);
    if (v10 == a2)
      *v9 = *v5;
  }
  --*(_DWORD *)(v3 + 32 * v7 + 24);
  v11 = *(unsigned int *)(result + 4);
  v12 = v3 + 32 * v11;
  v13 = *(unsigned int *)(v12 + 12);
  *(_DWORD *)(v3 + 32 * v13 + 8) = a2;
  *v5 = v13;
  *(_DWORD *)(v12 + 12) = a2;
  v14 = v3 + 32 * a2;
  *(_DWORD *)(v14 + 4) = -1;
  *(_DWORD *)(v14 + 8) = v11;
  *(_BYTE *)(v14 + 28) = 0;
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cascading_cut(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;

  v2 = a2;
  v3 = **(_QWORD **)(result + 16);
  v4 = *(_DWORD *)(v3 + 32 * a2 + 4);
  if (v4 != -1)
  {
    v5 = result;
    while (1)
    {
      v6 = v3 + 32 * v2;
      v8 = *(unsigned __int8 *)(v6 + 28);
      v7 = (_BYTE *)(v6 + 28);
      if (!v8)
        break;
      v9 = v4;
      result = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::cut(v5, a2, v4);
      v2 = v9;
      v3 = **(_QWORD **)(v5 + 16);
      v4 = *(_DWORD *)(v3 + 32 * v9 + 4);
      a2 = v9;
      if (v4 == -1)
        return result;
    }
    *v7 = 1;
  }
  return result;
}

void cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::consolidate(uint64_t a1)
{
  int v2;
  int v3;
  std::vector<unsigned int>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  std::vector<unsigned int>::pointer begin;
  uint64_t v8;
  std::vector<unsigned int>::size_type v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int i;
  uint64_t v15;
  float v16;
  float v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::vector<unsigned int> __p;
  std::vector<unsigned int> v28;

  memset(&v28, 0, sizeof(v28));
  memset(&__p, 0, sizeof(__p));
  v2 = vcvtmd_s64_f64(log((double)*(int *)a1) / 0.481211825);
  v3 = v2 + 2;
  std::vector<int>::resize(&v28, v2 + 2);
  if (v2 >= -1)
    memset(v28.__begin_, 255, 4 * (v2 + 1) + 4);
  v4 = 0;
  v5 = *(unsigned int *)(a1 + 4);
  v6 = v5;
  do
  {
    v6 = *(unsigned int *)(**(_QWORD **)(a1 + 16) + 32 * v6 + 12);
    ++v4;
  }
  while (v6 != v5);
  std::vector<int>::resize(&__p, v4);
  begin = __p.__begin_;
  v8 = **(_QWORD **)(a1 + 16);
  v9 = v4;
  do
  {
    *begin++ = v5;
    v5 = *(unsigned int *)(v8 + 32 * v5 + 12);
    --v9;
  }
  while (v9);
  v10 = 0;
  v11 = v28.__begin_;
  do
  {
    v12 = __p.__begin_[v10];
    v13 = *(int *)(**(_QWORD **)(a1 + 16) + 32 * v12 + 24);
    for (i = v11[v13]; i != -1; i = v19[1])
    {
      v15 = **(_QWORD **)(a1 + 16);
      v16 = *(float *)(v15 + 32 * i);
      v17 = *(float *)(v15 + 32 * v12);
      if (v16 >= v17)
        v18 = i;
      else
        v18 = v12;
      if (v16 < v17)
        LODWORD(v12) = i;
      cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::fib_heap_link(a1, v18, v12);
      v11 = v28.__begin_;
      v19 = &v28.__begin_[v13];
      *v19 = -1;
      ++v13;
    }
    v11[v13] = v12;
    ++v10;
  }
  while (v4 != v10);
  *(_DWORD *)(a1 + 4) = -1;
  if (v2 >= -1)
  {
    if (v3 <= 1)
      v20 = 1;
    else
      v20 = v3;
    v21 = v11;
    v22 = 0xFFFFFFFFLL;
    do
    {
      v23 = *v21;
      if ((_DWORD)v23 != -1)
      {
        v24 = **(_QWORD **)(a1 + 16);
        if (v22 == 0xFFFFFFFFLL)
        {
          *(_DWORD *)(v24 + 32 * v23 + 12) = v23;
          *(_DWORD *)(v24 + 32 * *v21 + 8) = v23;
LABEL_26:
          *(_DWORD *)(a1 + 4) = v23;
          v22 = v23;
          goto LABEL_27;
        }
        v25 = v24 + 32 * v22;
        v26 = *(unsigned int *)(v25 + 8);
        *(_DWORD *)(v24 + 32 * v26 + 12) = v23;
        *(_DWORD *)(v24 + 32 * *v21 + 8) = v26;
        *(_DWORD *)(v25 + 8) = *v21;
        *(_DWORD *)(v24 + 32 * *v21 + 12) = v22;
        v23 = *v21;
        if (*(float *)(v24 + 32 * v23) < *(float *)v25)
          goto LABEL_26;
      }
LABEL_27:
      ++v21;
      --v20;
    }
    while (v20);
  }
  if (!__p.__begin_ || (__p.__end_ = __p.__begin_, operator delete(__p.__begin_), (v11 = v28.__begin_) != 0))
  {
    v28.__end_ = v11;
    operator delete(v11);
  }
}

void sub_23C574D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::fib_heap_link(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v3 = **(_QWORD **)(result + 16);
  v4 = v3 + 32 * a2;
  v6 = *(_DWORD *)(v4 + 12);
  v5 = (_DWORD *)(v4 + 12);
  v7 = v5 - 1;
  v8 = *(v5 - 1);
  *(_DWORD *)(v3 + 32 * v8 + 12) = v6;
  *(_DWORD *)(v3 + 32 * *v5 + 8) = v8;
  v9 = v3 + 32 * a3;
  v12 = *(_DWORD *)(v9 + 16);
  v11 = (unsigned int *)(v9 + 16);
  v10 = v12;
  if (v12 == -1)
  {
    *v11 = a2;
    LODWORD(v10) = a2;
  }
  else
  {
    v13 = v3 + 32 * v10;
    v14 = *(_DWORD *)(v13 + 8);
    *(_DWORD *)(v3 + 32 * v14 + 12) = a2;
    *v7 = v14;
    v7 = (unsigned int *)(v13 + 8);
  }
  *v7 = a2;
  *v5 = v10;
  v15 = v3 + 32 * a2;
  *(_DWORD *)(v15 + 4) = a3;
  ++*(_DWORD *)(v3 + 32 * a3 + 24);
  *(_BYTE *)(v15 + 28) = 0;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,std::vector<float> &,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_23C574E8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::allocator<cv3d::cv::gess::internal::EdgeErrorHeap>,0>(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A7D0;
  cv3d::cv::gess::internal::EdgeErrorHeap::EdgeErrorHeap(a1 + 3, a2);
  return a1;
}

void sub_23C574ED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::internal::EdgeErrorHeap>::__on_zero_shared(uint64_t a1)
{
  return std::__destroy_at[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,0>(a1 + 24);
}

_QWORD *cv3d::cv::gess::internal::EdgeErrorHeap::EdgeErrorHeap(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE v10[20];
  uint64_t v11;
  char v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = a2;
  a1[3] = 0;
  v3 = a1 + 3;
  a1[4] = 0;
  a1[5] = 0;
  v4 = (uint64_t)(a2[1] - *a2) >> 2;
  *(_DWORD *)v10 = 0;
  *(_QWORD *)&v10[4] = -1;
  *(_QWORD *)&v10[12] = -1;
  v11 = -1;
  v12 = 0;
  std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::resize((uint64_t)(a1 + 3), v4, v10);
  v5 = operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_250D4A808;
  v5[3] = 0xFFFFFFFF00000000;
  v5[5] = v3;
  *(_QWORD *)v10 = v5 + 3;
  *(_QWORD *)&v10[8] = v5;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)v10);
  v6 = *(std::__shared_weak_count **)&v10[8];
  if (*(_QWORD *)&v10[8])
  {
    v7 = (unint64_t *)(*(_QWORD *)&v10[8] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_23C575018(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode,std::allocator<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::FibNode>>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 5)
  {
    if (a2)
    {
      v16 = 32 * a2;
      v17 = &v9[2 * a2];
      do
      {
        v18 = a3[1];
        *v9 = *a3;
        v9[1] = v18;
        v9 += 2;
        v16 -= 32;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 5);
    if (v11 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 5;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 4 > v11)
      v11 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v6, v14);
    else
      v15 = 0;
    v19 = &v15[32 * v12];
    v20 = &v19[32 * a2];
    v21 = 32 * a2;
    v22 = v19;
    do
    {
      v23 = a3[1];
      *(_OWORD *)v22 = *a3;
      *((_OWORD *)v22 + 1) = v23;
      v22 += 32;
      v21 -= 32;
    }
    while (v21);
    v24 = &v15[32 * v14];
    v26 = (char *)*a1;
    v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        v27 = *((_OWORD *)v25 - 2);
        *(_OWORD *)(v19 - 19) = *(_OWORD *)(v25 - 19);
        *((_OWORD *)v19 - 2) = v27;
        v19 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      v25 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v24;
    if (v25)
      operator delete(v25);
  }
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

double std::__shared_ptr_emplace<cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>>::__on_zero_shared(uint64_t a1)
{
  double result;

  result = NAN;
  *(_QWORD *)(a1 + 24) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t std::__destroy_at[abi:ne180100]<cv3d::cv::gess::internal::EdgeErrorHeap,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](a1);
}

uint64_t cv3d::cv::gess::internal::Collapser::Collect(cv3d::cv::gess::internal::Collapser *this)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char *v13;
  _DWORD **v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BYTE v36[20];
  int v37;

  v2 = (_DWORD *)((char *)this + 16);
  v34 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, (unsigned int *)this + 4);
  v3 = *(_QWORD *)this + 104;
  v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)this + 4);
  v33 = cv3d::cv::gess::mesh::Topology::h(v3, v4);
  v5 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, (unsigned int *)this + 4);
  v6 = (char *)this + 104;
  v7 = *(_QWORD *)this + 104;
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, (unsigned int *)this + 4);
  v9 = cv3d::cv::gess::mesh::Topology::h(v7, v8);
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = v11;
    v13 = &v6[24 * v10];
    *((_QWORD *)v13 + 1) = *(_QWORD *)v13;
    v14 = (_DWORD **)(v13 + 8);
    v15 = (v11 & 1) == 0;
    v16 = v34;
    if (v15)
      v16 = v33;
    v37 = *(_DWORD *)(v16 + 12);
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v36, *(_QWORD *)this + 104, &v37);
    v35 = -1;
    result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v36);
    v35 = result;
    if ((_DWORD)result != -1)
    {
      v18 = &v6[24 * v10 + 16];
      do
      {
        if ((_DWORD)result != *v2)
        {
          v19 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, (unsigned int *)this + 4);
          if (v35 != *v19)
          {
            v20 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)this, *(_DWORD *)(*(_QWORD *)this + 180), v35);
            if ((v21 & *v20) != 0
              || *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, &v35) + 16) != *(_DWORD *)(v5 + 16)
              && *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, &v35) + 16) != *(_DWORD *)(v9 + 16))
            {
              v22 = *v14;
              if ((unint64_t)*v14 >= *(_QWORD *)v18)
              {
                v24 = ((uint64_t)v22 - *(_QWORD *)v13) >> 2;
                if ((unint64_t)(v24 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v25 = *(_QWORD *)v18 - *(_QWORD *)v13;
                v26 = v25 >> 1;
                if (v25 >> 1 <= (unint64_t)(v24 + 1))
                  v26 = v24 + 1;
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                  v27 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v27 = v26;
                if (v27)
                  v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v18, v27);
                else
                  v28 = 0;
                v29 = &v28[4 * v24];
                *(_DWORD *)v29 = v35;
                v23 = v29 + 4;
                v30 = *v14;
                v31 = *(_DWORD **)v13;
                if (*v14 != *(_DWORD **)v13)
                {
                  do
                  {
                    v32 = *--v30;
                    *((_DWORD *)v29 - 1) = v32;
                    v29 -= 4;
                  }
                  while (v30 != v31);
                  v30 = *(_DWORD **)v13;
                }
                *(_QWORD *)v13 = v29;
                *v14 = v23;
                *(_QWORD *)v18 = &v28[4 * v27];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *v22 = v35;
                v23 = v22 + 1;
              }
              *v14 = v23;
            }
          }
        }
        result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v36);
        v35 = result;
      }
      while ((_DWORD)result != -1);
    }
    v11 = 0;
    v10 = 1;
  }
  while ((v12 & 1) != 0);
  return result;
}

void cv3d::cv::gess::internal::Collapser::FindCoincideEdges(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  char **v7;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  char *v50;
  uint64_t i;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v6 = 0;
  v54 = 0u;
  v55 = 0u;
  v7 = (char **)(a1 + 13);
  v53 = 0u;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = (uint64_t *)&v53 + 3 * v6;
    if (&v53 != (__int128 *)v7)
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v53 + 24 * v6, v7[3 * v6], (uint64_t)v7[3 * v6 + 1], (v7[3 * v6 + 1] - v7[3 * v6]) >> 2);
    v11 = *v10;
    v12 = (unsigned int *)*((_QWORD *)&v53 + 3 * v6 + 1);
    v13 = 126 - 2 * __clz(((uint64_t)v12 - *v10) >> 2);
    v14 = v12 == (unsigned int *)*v10;
    v56 = a1;
    if (v14)
      v15 = 0;
    else
      v15 = v13;
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,false>(v11, v12, &v56, v15, 1);
    v8 = 0;
    v6 = 1;
  }
  while ((v9 & 1) != 0);
  v16 = (unsigned int *)v53;
  if ((_QWORD)v53 != *((_QWORD *)&v53 + 1))
  {
    v17 = (unsigned int *)*((_QWORD *)&v54 + 1);
    while (v17 != (unsigned int *)v55)
    {
      v18 = *a1 + 104;
      v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, v16);
      v20 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v18, v19) + 12);
      v21 = *a1 + 104;
      v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, v17);
      if (v20 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v21, v22) + 12))
      {
        v23 = *a1 + 104;
        v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v23, v17);
        v25 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v23, v24) + 12);
        v26 = *a1 + 104;
        v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, v16);
        if (v25 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12))
        {
          v28 = *a1 + 104;
          v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, v16);
          v30 = cv3d::cv::gess::mesh::Topology::h(v28, v29);
          v31 = *a1 + 104;
          v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, v17);
          if (*(_DWORD *)(v30 + 12) != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v31, v32) + 12))
            __assert_rtn("FindCoincideEdges", "Collapser.cpp", 50, "mesh_.HEdgeEnd(*it0) == mesh_.HEdgeEnd(*it1)");
          v33 = a1[25];
          v34 = (_DWORD *)a1[24];
          if ((unint64_t)v34 >= v33)
          {
            v38 = a1[23];
            v39 = ((uint64_t)v34 - v38) >> 4;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 60)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v41 = v33 - v38;
            if (v41 >> 3 > v40)
              v40 = v41 >> 3;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
              v42 = 0xFFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a1 + 25), v42);
            v44 = &v43[16 * v39];
            v46 = &v43[16 * v45];
            v47 = *v16;
            v48 = *v17;
            *(_DWORD *)v44 = a2;
            *((_DWORD *)v44 + 1) = a3;
            *((_DWORD *)v44 + 2) = v47;
            *((_DWORD *)v44 + 3) = v48;
            v37 = v44 + 16;
            v50 = (char *)a1[23];
            v49 = (char *)a1[24];
            if (v49 != v50)
            {
              do
              {
                *((_OWORD *)v44 - 1) = *((_OWORD *)v49 - 1);
                v44 -= 16;
                v49 -= 16;
              }
              while (v49 != v50);
              v49 = (char *)a1[23];
            }
            a1[23] = v44;
            a1[24] = v37;
            a1[25] = v46;
            if (v49)
              operator delete(v49);
          }
          else
          {
            v35 = *v16;
            v36 = *v17;
            *v34 = a2;
            v34[1] = a3;
            v34[2] = v35;
            v34[3] = v36;
            v37 = v34 + 4;
          }
          a1[24] = v37;
          break;
        }
        ++v17;
      }
      else
      {
        ++v16;
      }
      if (v16 == *((unsigned int **)&v53 + 1))
        break;
    }
  }
  for (i = 0; i != -48; i -= 24)
  {
    v52 = *(void **)((char *)&v54 + i + 8);
    if (v52)
    {
      *(_QWORD *)((char *)&v55 + i) = v52;
      operator delete(v52);
    }
  }
}

void sub_23C5757D8(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  void *v11;

  v10 = 0;
  while (1)
  {
    v11 = *(void **)((char *)&a9 + v10 + 24);
    if (v11)
    {
      *(uint64_t *)((char *)&a9 + v10 + 32) = (uint64_t)v11;
      operator delete(v11);
    }
    v10 -= 24;
    if (v10 == -48)
      _Unwind_Resume(exception_object);
  }
}

BOOL cv3d::cv::gess::internal::Collapser::EdgePlanCollapse(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  _QWORD *v25;
  float v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t *v35;
  double v36;
  float64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float v40;
  uint64_t v41;
  float64x2_t *v42;
  float64x2_t *v43;
  float64_t v44;
  uint64_t v50;
  float v51;
  int v52;
  double v53;
  _QWORD *v54;
  float v55;
  float64x2_t *v56;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)a1 + 104, a2);
  v7 = *(_QWORD *)a1 + 104;
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, a2);
  v9 = cv3d::cv::gess::mesh::Topology::h(v7, v8);
  v10 = v9;
  v11 = 0;
  v12 = *(unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * *a2);
  v13 = **(_QWORD **)(a1 + 48);
  v14 = (float64x2_t *)(v13 + 80 * *(unsigned int *)(v6 + 12));
  v15 = v13 + 80 * *(unsigned int *)(v9 + 12);
  v16 = **(_QWORD **)(a1 + 72);
  v17 = **(_QWORD **)(a1 + 80);
  v61 = v14[1];
  v62 = v14[2];
  v63 = v14[3];
  v64 = v14[4];
  v60 = *v14;
  do
  {
    *(float64x2_t *)((char *)&v60 + v11) = vaddq_f64(*(float64x2_t *)(v15 + v11), *(float64x2_t *)((char *)&v60 + v11));
    v11 += 16;
  }
  while (v11 != 80);
  v18 = (float64x2_t *)(v16 + 80 * v12);
  v18[1] = v61;
  v18[2] = v62;
  v18[3] = v63;
  v18[4] = v64;
  *v18 = v60;
  v19 = *(unsigned int *)(v6 + 12);
  v20 = **(_QWORD **)(a1 + 64);
  v21 = (1 << v19) & *(_QWORD *)(v20 + ((v19 >> 3) & 0x1FFFFFF8));
  v22 = *(unsigned int *)(v9 + 12);
  v23 = (1 << v22) & *(_QWORD *)(v20 + ((v22 >> 3) & 0x1FFFFFF8));
  if (v23)
    v24 = v21 != 0;
  else
    v24 = 0;
  if (!v24)
  {
    if ((v21 != 0) == (v23 != 0))
    {
      v27 = v18[2].f64[0];
      v28 = v18->f64[0] * (v18[1].f64[1] * v18[2].f64[1] - v27 * v27)
          - v18->f64[1] * (v18->f64[1] * v18[2].f64[1] - v27 * v18[1].f64[0])
          + v18[1].f64[0] * (v18->f64[1] * v27 - v18[1].f64[1] * v18[1].f64[0]);
      if (v28 == 0.0)
      {
        v41 = **(_QWORD **)(a1 + 56);
        v42 = (float64x2_t *)(v41 + 24 * v19);
        v43 = (float64x2_t *)(v41 + 24 * v22);
        v44 = (v42[1].f64[0] + v43[1].f64[0]) * 0.5;
        __asm { FMOV            V2.2D, #0.5 }
        *(float64x2_t *)a3 = vmulq_f64(vaddq_f64(*v42, *v43), _Q2);
        *(float64_t *)(a3 + 16) = v44;
        v50 = 0;
        v51 = cv3d::cv::gess::internal::Quadric::error(v18->f64, (double *)a3);
        *(float *)(v17 + 4 * v12) = v51;
        v52 = *(_DWORD *)(v10 + 12);
        LODWORD(v60.f64[0]) = *(_DWORD *)(v6 + 12);
        HIDWORD(v60.f64[0]) = v52;
        do
        {
          v53 = cv3d::cv::gess::internal::Quadric::error(v18->f64, (double *)(**(_QWORD **)(a1 + 56) + 24 * *(unsigned int *)((char *)v60.f64 + v50)));
          if (v53 < *(float *)(v17 + 4 * v12))
          {
            v54 = (_QWORD *)(**(_QWORD **)(a1 + 56) + 24 * *(unsigned int *)((char *)v60.f64 + v50));
            *(_QWORD *)a3 = *v54;
            *(_QWORD *)(a3 + 8) = v54[1];
            *(_QWORD *)(a3 + 16) = v54[2];
            v55 = v53;
            *(float *)(v17 + 4 * v12) = v55;
          }
          v50 += 4;
        }
        while (v50 != 8);
      }
      else
      {
        cv3d::cv::gess::internal::Quadric::optimal((cv3d::cv::gess::internal::Quadric *)v18, v28, v60.f64);
        v29 = 0;
        v30 = v61.f64[1];
        v31 = v61.f64[0];
        *(float64_t *)(a3 + 16) = v61.f64[0];
        *(float *)&v30 = v30;
        *(_DWORD *)(v17 + 4 * v12) = LODWORD(v30);
        v32 = v60;
        *(float64x2_t *)a3 = v60;
        v33 = **(_QWORD **)(a1 + 56);
        v34 = (float64x2_t *)(v33 + 24 * *(unsigned int *)(v10 + 12));
        v35 = (float64x2_t *)(v33 + 24 * *(unsigned int *)(v6 + 12));
        v36 = v35[1].f64[0];
        v37 = v34[1].f64[0] - v36;
        v38 = *v34;
        v39 = *v35;
        v60 = vsubq_f64(*v34, *v35);
        v61.f64[0] = v37;
        v58 = vsubq_f64(v32, v39);
        v59 = v31 - v36;
        while (1)
        {
          v40 = v58.f64[v29] / v60.f64[v29] + -0.5;
          if (fabsf(v40) > 20.0)
            break;
          if (++v29 == 3)
            return !v24;
        }
        if (v40 > 0.0)
        {
          v56 = v34;
        }
        else
        {
          v38.f64[0] = v39.f64[0];
          v56 = v35;
        }
        *(float64_t *)a3 = v38.f64[0];
        *(float64_t *)(a3 + 8) = v56->f64[1];
        *(float64_t *)(a3 + 16) = v56[1].f64[0];
      }
    }
    else
    {
      if (!v21)
        LODWORD(v19) = *(_DWORD *)(v9 + 12);
      v25 = (_QWORD *)(**(_QWORD **)(a1 + 56) + 24 * v19);
      *(_QWORD *)a3 = *v25;
      *(_QWORD *)(a3 + 8) = v25[1];
      *(_QWORD *)(a3 + 16) = v25[2];
      v26 = cv3d::cv::gess::internal::Quadric::error(v18->f64, (double *)a3);
      *(float *)(v17 + 4 * v12) = v26;
    }
  }
  return !v24;
}

double cv3d::cv::gess::internal::Quadric::error(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = a2[1];
  v3 = a2[2];
  return a1[9]
       + v2 * (v2 * a1[3] + a1[1] * *a2 + a1[4] * v3)
       + (a1[1] * v2 + *a1 * *a2 + a1[2] * v3) * *a2
       + (v2 * a1[4] + a1[2] * *a2 + a1[5] * v3) * v3
       + (v2 * a1[7] + a1[6] * *a2 + a1[8] * v3) * 2.0;
}

double cv3d::cv::gess::internal::Quadric::optimal@<D0>(cv3d::cv::gess::internal::Quadric *this@<X0>, double a2@<D0>, double *a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double result;

  if (a2 == 0.0)
    cv3d::cv::gess::internal::Quadric::optimal();
  v3 = 1.0 / a2;
  v5 = *((double *)this + 4);
  v4 = *((double *)this + 5);
  v7 = *((double *)this + 2);
  v6 = *((double *)this + 3);
  v8 = v3 * (v6 * v4 - v5 * v5);
  v9 = *((double *)this + 1);
  v10 = v3 * (v7 * v5 - v9 * v4);
  v11 = v3 * (v9 * v5 - v7 * v6);
  v12 = v3 * (*(double *)this * v4 - v7 * v7);
  v13 = v3 * (v9 * v7 - *(double *)this * v5);
  v14 = v3 * (*(double *)this * v6 - v9 * v9);
  v15 = *((double *)this + 6);
  v16 = *((double *)this + 7);
  v17 = *((double *)this + 8);
  v18 = *((double *)this + 9);
  v19 = v10 * v16 + v8 * v15 + v11 * v17;
  v20 = v12 * v16 + v10 * v15 + v13 * v17;
  v21 = v16 * v13 + v11 * v15 + v14 * v17;
  result = -v21;
  *a3 = -v19;
  a3[1] = -v20;
  a3[2] = -v21;
  a3[3] = v18 + -(v20 * v16) - v15 * v19 - v17 * v21;
  return result;
}

uint64_t cv3d::cv::gess::internal::Collapser::CollectAndUpdateDirtyHEdges(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *p_i;
  unsigned int *v5;
  uint64_t **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  BOOL v11;
  const unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  _QWORD v15[3];
  unsigned int i;
  _BYTE v17[16];

  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v17, *(_QWORD *)a1 + 104, a2);
  result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v17);
  for (i = result; (_DWORD)result != -1; i = result)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)
                   + 32 * *(unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * result)
                   + 20) == -1)
    {
      p_i = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)a1 + 104, &i);
      v6 = (uint64_t **)(a1 + 160);
      v5 = p_i;
    }
    else
    {
      p_i = &i;
      v5 = &i;
      v6 = (uint64_t **)(a1 + 160);
    }
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v6, p_i, v5);
    result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v17);
  }
  memset(v15, 0, sizeof(v15));
  v7 = *(unsigned int **)(a1 + 160);
  v8 = (unsigned int *)(a1 + 168);
  if (v7 != (unsigned int *)(a1 + 168))
  {
    do
    {
      result = cv3d::cv::gess::internal::Collapser::EdgePlanCollapse(a1, v7 + 7, (uint64_t)v15);
      v9 = (unsigned int *)*((_QWORD *)v7 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(unsigned int **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (unsigned int *)*((_QWORD *)v7 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != v8);
    v7 = *(unsigned int **)(a1 + 160);
  }
  if (v7 != v8)
  {
    do
    {
      result = *(_QWORD *)(a1 + 8);
      v12 = (const unsigned int *)(**(_QWORD **)(a1 + 88) + 4 * v7[7]);
      if (*(_DWORD *)(*(_QWORD *)(result + 24) + 32 * *v12 + 20) != -1)
        result = cv3d::cv::gess::internal::EdgeErrorHeap::Update((cv3d::cv::gess::internal::EdgeErrorHeap *)result, v12);
      v13 = (unsigned int *)*((_QWORD *)v7 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(unsigned int **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (unsigned int *)*((_QWORD *)v7 + 2);
          v11 = *(_QWORD *)v14 == (_QWORD)v7;
          v7 = v14;
        }
        while (!v11);
      }
      v7 = v14;
    }
    while (v14 != v8);
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Update(cv3d::cv::gess::internal::EdgeErrorHeap *this, const unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;

  v2 = *a2;
  v3 = *((_QWORD *)this + 3);
  if (v2 >= (*((_QWORD *)this + 4) - v3) >> 5)
    cv3d::cv::gess::internal::EdgeErrorHeap::Update();
  if (*(_DWORD *)(v3 + 32 * v2 + 20) == -1)
    cv3d::cv::gess::internal::EdgeErrorHeap::Update();
  v4 = *(float *)(**((_QWORD **)this + 2) + 4 * v2);
  v5 = *(_QWORD *)this;
  if (v4 <= *(float *)(v3 + 32 * v2))
    return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(v5, v2, v4);
  else
    return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::update_fibnode(v5, v2, v4);
}

uint64_t cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles(cv3d::cv::gess::internal::Collapser *this)
{
  uint64_t v2;
  unsigned int *v3;
  double *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL IsElongated;
  char *v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = 0;
  v26[1] = *MEMORY[0x24BDAC8D0];
  v24 = (char *)this + 104;
  v26[0] = 0x100000000;
  v3 = (unsigned int *)((char *)this + 16);
  v4 = (double *)((char *)this + 24);
  while (2)
  {
    v25 = v2;
    v5 = &v24[24 * *((unsigned __int8 *)v26 + 4 * v2)];
    v6 = *(unsigned int **)v5;
    v7 = (unsigned int *)*((_QWORD *)v5 + 1);
    while (v6 != v7)
    {
      v8 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, v6);
      if (*(_DWORD *)(v8 + 12) != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, v3) + 12))
      {
        v9 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, v6);
        v10 = *(_QWORD *)this + 104;
        v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10, v3);
        if (*(_DWORD *)(v9 + 12) != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v10, v11) + 12))
          cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles();
      }
      v12 = *(_QWORD *)this + 104;
      v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, v6);
      v14 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12);
      v15 = *(_QWORD *)this + 104;
      v16 = cv3d::cv::gess::mesh::Topology::h(v15, v6);
      v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v15, (unsigned int *)(v16 + 8));
      v18 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v15, v17) + 12);
      v14 *= 3;
      v19 = 3 * v18;
      LODWORD(v15) = cv3d::cv::gess::internal::IsElongated(v4, (double *)(**((_QWORD **)this + 7) + 8 * v14), (double *)(**((_QWORD **)this + 7) + 24 * v18));
      v20 = (_QWORD *)*((_QWORD *)this + 7);
      v21 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, v6);
      IsElongated = cv3d::cv::gess::internal::IsElongated((double *)(*v20 + 24 * *(unsigned int *)(v21 + 12)), (double *)(**((_QWORD **)this + 7) + 8 * v14), (double *)(**((_QWORD **)this + 7) + 8 * v19));
      if ((_DWORD)v15 && !IsElongated)
        return 0;
      ++v6;
    }
    v2 = v25 + 1;
    if (v25 != 1)
      continue;
    break;
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::Collapser::Collapse(_QWORD **a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  cv3d::cv::gess::internal::EdgeErrorHeap *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  _QWORD *v14;
  uint64_t v15;
  _BOOL4 is_boundary;
  _BOOL4 v17;
  cv3d::cv::gess::internal::EdgeErrorHeap *v18;
  _QWORD *v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  unsigned int *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  cv3d::cv::gess::internal::EdgeErrorHeap *v33;
  unsigned int *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  cv3d::cv::gess::internal::EdgeErrorHeap *v38;
  unsigned int *v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  _BOOL4 v43;
  BOOL v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  cv3d::cv::gess::internal::EdgeErrorHeap *v55;
  const unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD **v68;
  unsigned int *v69;
  unsigned int *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  cv3d::cv::gess::internal::EdgeErrorHeap *v89;
  const unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  cv3d::cv::gess::internal::EdgeErrorHeap *v93;
  const unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  cv3d::cv::gess::internal::EdgeErrorHeap *v98;
  const unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  cv3d::cv::gess::internal::EdgeErrorHeap *v109;
  unsigned int *v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  _QWORD v142[2];

  v142[1] = *MEMORY[0x24BDAC8D0];
  *((_DWORD *)a1 + 4) = *a2;
  v132 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), a2) + 12);
  v4 = (uint64_t)(*a1 + 13);
  v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, a2);
  v6 = cv3d::cv::gess::mesh::Topology::h(v4, v5);
  v7 = *(unsigned int *)(v6 + 12);
  v131 = *(_DWORD *)(v6 + 12);
  v8 = *a1[8];
  if (((*(_QWORD *)(v8 + (((unint64_t)v132 >> 3) & 0x1FFFFFF8)) >> v132) & 1) != 0
    && ((*(_QWORD *)(v8 + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
  {
    return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
  }
  cv3d::cv::gess::internal::Collapser::EdgePlanCollapse((uint64_t)a1, a2, (uint64_t)(a1 + 3));
  cv3d::cv::gess::internal::Collapser::Collect((cv3d::cv::gess::internal::Collapser *)a1);
  v10 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
  v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
  if ((v12 & *v11) != 0)
    return cv3d::cv::gess::internal::Collapser::CollapseBoundary((cv3d::cv::gess::internal::EdgeErrorHeap **)a1, a2);
  v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v10 + 104, a2);
  v14 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v10, *((_DWORD *)v10 + 45), *v13);
  if ((v15 & *v14) != 0)
    return cv3d::cv::gess::internal::Collapser::CollapseBoundary((cv3d::cv::gess::internal::EdgeErrorHeap **)a1, a2);
  is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)*a1, (uint64_t)&v132);
  v17 = cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)*a1, (uint64_t)&v131);
  if (is_boundary)
  {
    v130 = *a2;
    v129 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130);
    if (v17)
    {
      v18 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
      v19 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
      if ((v20 & *v19) != 0)
      {
        v21 = 1;
      }
      else
      {
        v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v18 + 104, a2);
        v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v18, *((_DWORD *)v18 + 45), *v23);
        v21 = (v25 & *v24) != 0;
      }
      v22 = !v21;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v130 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), a2);
    v22 = 0;
    v129 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130);
  }
  v26 = (uint64_t)(*a1 + 13);
  v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, &v130);
  HIDWORD(v128) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
  LODWORD(v128) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130) + 12);
  cv3d::cv::gess::internal::Collapser::FindCoincideEdges(a1, v128, SHIDWORD(v128));
  if (a1[23] != a1[24])
    return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
  if (v22)
  {
    v29 = 0;
    LOWORD(v127) = 0;
    v133 = __PAIR64__(v129, v130);
    v142[0] = 0x100000000;
    do
    {
      v30 = *((unsigned __int8 *)v142 + v29);
      v31 = (unsigned int *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v133 + v30) + 8);
      v32 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v133 + v30);
      v33 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
      v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), v31);
      v35 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v33, *((_DWORD *)v33 + 45), *v34);
      if ((v36 & *v35) != 0)
      {
        v37 = (unsigned int *)(v32 + 4);
        v38 = (cv3d::cv::gess::internal::EdgeErrorHeap *)*a1;
        v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), v37);
        v40 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v38, *((_DWORD *)v38 + 45), *v39);
        v42 = (v41 & *v40) != 0;
      }
      else
      {
        v42 = 0;
      }
      *((_BYTE *)&v127 + v30) = v42;
      v29 += 4;
    }
    while (v29 != 8);
    if ((_BYTE)v127)
    {
      v43 = v127 == BYTE1(v127);
    }
    else
    {
      if (!BYTE1(v127))
        return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
      v43 = 0;
    }
    v44 = !v43;
  }
  else
  {
    v43 = 0;
    v44 = 0;
  }
  if ((is_boundary || v17 || (char *)a1[14] - (char *)a1[13] != 4 || (char *)a1[17] - (char *)a1[16] != 4)
    && (cv3d::cv::gess::internal::Collapser::CheckGeom((cv3d::cv::gess::internal::Collapser *)a1) & 1) != 0)
  {
    v127 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130) + 16);
    v126 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v129) + 16);
    v125 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130) + 8);
    v124 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v125) + 8);
    v123 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v129) + 8);
    v122 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123) + 8);
    v45 = (uint64_t)(*a1 + 13);
    v46 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v45, &v125);
    v121 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v45, v46) + 12);
    v47 = (uint64_t)(*a1 + 13);
    v48 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v47, &v123);
    v49 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v47, v48) + 12);
    v120 = v49;
    v50 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
    v119 = v50;
    v51 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123);
    v118 = v51;
    v52 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v125);
    v117 = v52;
    v53 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v122);
    v116 = v53;
    if (v43)
    {
      v54 = 0;
      v133 = __PAIR64__(v125, v130);
      v134 = v124;
      v135 = v129;
      v136 = v123;
      v137 = v122;
      v138 = v50;
      v139 = v52;
      v140 = v51;
      v141 = v53;
      do
      {
        v55 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
        v56 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)&v133 + v54));
        if (*(_DWORD *)(*((_QWORD *)v55 + 3) + 32 * *v56 + 20) != -1)
          cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v55, v56);
        v57 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)((char *)&v133 + v54));
        *(_QWORD *)v57 = -1;
        *(_QWORD *)(v57 + 8) = -1;
        *(_DWORD *)(v57 + 16) = -1;
        v54 += 4;
      }
      while (v54 != 40);
      v59 = 0;
      v133 = v128;
      v134 = v121;
      v135 = v49;
      do
      {
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)((char *)&v133 + v59), v58) = -1;
        v59 += 4;
      }
      while (v59 != 16);
      v60 = 0;
      v133 = __PAIR64__(v126, v127);
      do
      {
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), (unsigned int *)((char *)&v133 + v60)) = -1;
        v60 += 4;
      }
      while (v60 != 8);
LABEL_75:
      v28 = (*((_DWORD *)a1 + 38) + 2);
      *((_DWORD *)a1 + 38) = v28;
      cv3d::cv::gess::internal::Collapser::Reset((cv3d::cv::gess::internal::Collapser *)a1);
      return v28;
    }
    if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary((uint64_t)*a1, (uint64_t)&v128 + 4)
      && a1[3 * is_boundary + 13] == a1[3 * is_boundary + 14])
    {
      v77 = (uint64_t)(*a1 + 13);
      v78 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v77, &v123);
      if (v121 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v77, v78) + 12))
        cv3d::cv::gess::internal::Collapser::Collapse();
      if (v50 != v123)
        cv3d::cv::gess::internal::Collapser::Collapse();
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v127) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v126) = -1;
      v79 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130);
      *(_QWORD *)v79 = -1;
      *(_QWORD *)(v79 + 8) = -1;
      *(_DWORD *)(v79 + 16) = -1;
      v80 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v125);
      *(_QWORD *)v80 = -1;
      *(_QWORD *)(v80 + 8) = -1;
      *(_DWORD *)(v80 + 16) = -1;
      v81 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
      *(_QWORD *)v81 = -1;
      *(_QWORD *)(v81 + 8) = -1;
      *(_DWORD *)(v81 + 16) = -1;
      v82 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v129);
      *(_QWORD *)v82 = -1;
      *(_QWORD *)(v82 + 8) = -1;
      *(_DWORD *)(v82 + 16) = -1;
      v83 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123);
      *(_QWORD *)v83 = -1;
      *(_QWORD *)(v83 + 8) = -1;
      *(_DWORD *)(v83 + 16) = -1;
      v84 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v122);
      *(_QWORD *)v84 = -1;
      *(_QWORD *)(v84 + 8) = -1;
      *(_DWORD *)(v84 + 16) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)&v128, v85) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)&v128 + 1, v86) = -1;
      v88 = 0;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, &v121, v87) = -1;
      v133 = __PAIR64__(v125, v130);
      v134 = v124;
      v135 = v129;
      v136 = v123;
      v137 = v122;
      do
      {
        v89 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
        v90 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)&v133 + v88));
        if (*(_DWORD *)(*((_QWORD *)v89 + 3) + 32 * *v90 + 20) != -1)
          cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v89, v90);
        v88 += 4;
      }
      while (v88 != 24);
      goto LABEL_75;
    }
    if ((cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles((cv3d::cv::gess::internal::Collapser *)a1) & 1) != 0)
    {
      v61 = v128;
      v62 = (_QWORD *)(*a1[7] + 24 * v128);
      *v62 = a1[3];
      v62[1] = a1[4];
      v62[2] = a1[5];
      v63 = (_OWORD *)(*a1[9] + 80 * *(unsigned int *)(*a1[11] + 4 * *((unsigned int *)a1 + 4)));
      v64 = (_OWORD *)(*a1[6] + 80 * v61);
      *v64 = *v63;
      v65 = v63[1];
      v66 = v63[2];
      v67 = v63[4];
      v64[3] = v63[3];
      v64[4] = v67;
      v64[1] = v65;
      v64[2] = v66;
      cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes(*a1, (unsigned int *)&v128, (unsigned int *)&v128 + 1);
      cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)(*a1 + 13), &v119, &v117);
      cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)(*a1 + 13), &v118, &v116);
      v68 = &a1[3 * is_boundary];
      v69 = (unsigned int *)v68[13];
      v70 = (unsigned int *)v68[14];
      while (v69 != v70)
        cv3d::cv::gess::mesh::Topology::SetStart(*a1 + 13, v69++, &v128);
      cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v121, &v117);
      cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v120, &v118);
      cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v128, &v119);
      cv3d::cv::gess::internal::Collapser::CollectAndUpdateDirtyHEdges((uint64_t)a1, (uint64_t)&v128);
      if (v44)
      {
        v71 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), v119);
        if ((v72 & *v71) != 0
          && (v73 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), v117), (v74 & *v73) != 0))
        {
          v75 = &v117;
          v76 = &v119;
        }
        else
        {
          v75 = &v118;
          v76 = &v116;
        }
        v91 = *v75;
        LODWORD(v133) = *v76;
        HIDWORD(v133) = v91;
        v115 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v133 + 1) + 12);
        v114 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v133) + 4);
        v113 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)&v133 + 1) + 8);
        cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)(*a1 + 13), &v114, &v113);
        cv3d::cv::gess::mesh::Topology::SetHEdge(*a1 + 13, &v128, &v113);
        v92 = 0;
        v142[0] = v133;
        do
        {
          v93 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
          v94 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)v142 + v92));
          if (*(_DWORD *)(*((_QWORD *)v93 + 3) + 32 * *v94 + 20) != -1)
            cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v93, v94);
          v95 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), (unsigned int *)((char *)v142 + v92));
          *(_QWORD *)v95 = -1;
          *(_QWORD *)(v95 + 8) = -1;
          *(_DWORD *)(v95 + 16) = -1;
          v92 += 4;
        }
        while (v92 != 8);
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, &v115, v96) = -1;
      }
      v97 = 0;
      v133 = __PAIR64__(v125, v130);
      v134 = v122;
      do
      {
        v98 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
        v99 = (const unsigned int *)(*a1[11] + 4 * *(unsigned int *)((char *)&v133 + v97));
        if (*(_DWORD *)(*((_QWORD *)v98 + 3) + 32 * *v99 + 20) != -1)
          cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v98, v99);
        v97 += 4;
      }
      while (v97 != 12);
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v127) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)(*a1 + 13), &v126) = -1;
      v100 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v130);
      *(_QWORD *)v100 = -1;
      *(_QWORD *)(v100 + 8) = -1;
      *(_DWORD *)(v100 + 16) = -1;
      v101 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v125);
      *(_QWORD *)v101 = -1;
      *(_QWORD *)(v101 + 8) = -1;
      *(_DWORD *)(v101 + 16) = -1;
      v102 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v124);
      *(_QWORD *)v102 = -1;
      *(_QWORD *)(v102 + 8) = -1;
      *(_DWORD *)(v102 + 16) = -1;
      v103 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v129);
      *(_QWORD *)v103 = -1;
      *(_QWORD *)(v103 + 8) = -1;
      *(_DWORD *)(v103 + 16) = -1;
      v104 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v123);
      *(_QWORD *)v104 = -1;
      *(_QWORD *)(v104 + 8) = -1;
      *(_DWORD *)(v104 + 16) = -1;
      v105 = cv3d::cv::gess::mesh::Topology::h((uint64_t)(*a1 + 13), &v122);
      *(_QWORD *)v105 = -1;
      *(_QWORD *)(v105 + 8) = -1;
      *(_DWORD *)(v105 + 16) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(*a1 + 13, (unsigned int *)&v128 + 1, v106) = -1;
      v107 = *a1[11];
      *(_DWORD *)(v107 + 4 * v117) = *(_DWORD *)(v107 + 4 * v119);
      *(_DWORD *)(v107 + 4 * v116) = *(_DWORD *)(v107 + 4 * v118);
      v108 = *a1[12];
      *(_DWORD *)(v108 + 4 * *(unsigned int *)(v107 + 4 * v119)) = v119;
      *(_DWORD *)(v108 + 4 * *(unsigned int *)(v107 + 4 * v118)) = v118;
      v109 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
      v110 = (unsigned int *)(v107 + 4 * v119);
      v111 = *((_QWORD *)v109 + 3);
      if (*(_DWORD *)(v111 + 32 * *v110 + 20) == -1)
      {
        cv3d::cv::gess::internal::EdgeErrorHeap::Insert(v109, v110);
        v109 = (cv3d::cv::gess::internal::EdgeErrorHeap *)a1[1];
        v107 = *a1[11];
        v111 = *((_QWORD *)v109 + 3);
      }
      v112 = (unsigned int *)(v107 + 4 * v118);
      if (*(_DWORD *)(v111 + 32 * *v112 + 20) == -1)
        cv3d::cv::gess::internal::EdgeErrorHeap::Insert(v109, v112);
      goto LABEL_75;
    }
  }
  return cv3d::cv::gess::internal::Collapser::Reject((cv3d::cv::gess::internal::EdgeErrorHeap **)a1);
}

uint64_t cv3d::cv::gess::internal::Collapser::Reject(cv3d::cv::gess::internal::EdgeErrorHeap **this)
{
  cv3d::cv::gess::internal::EdgeErrorHeap::Penalize(this[1], (const unsigned int *)(*(_QWORD *)this[11] + 4 * *((unsigned int *)this + 4)));
  if (*((_DWORD *)this + 38))
    cv3d::cv::gess::internal::Collapser::Reject();
  cv3d::cv::gess::internal::Collapser::Reset((cv3d::cv::gess::internal::Collapser *)this);
  return *((unsigned int *)this + 38);
}

uint64_t cv3d::cv::gess::internal::Collapser::CollapseBoundary(cv3d::cv::gess::internal::EdgeErrorHeap **a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  cv3d::cv::gess::internal::EdgeErrorHeap *v22;
  const unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  cv3d::cv::gess::internal::EdgeErrorHeap **v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v45;
  cv3d::cv::gess::internal::EdgeErrorHeap *v46;
  const unsigned int *v47;
  uint64_t v48;
  cv3d::cv::gess::internal::EdgeErrorHeap *v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
  v5 = a2;
  if ((v6 & v4) != 0)
    v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, a2);
  v67 = *v5;
  v7 = (uint64_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)*a1, *((_DWORD *)*a1 + 45), *a2);
  v9 = v8;
  v10 = *v7;
  v66 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67);
  v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v66) + 4);
  v65 = v11;
  v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v66) + 8);
  v64 = v12;
  v63 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67) + 8);
  v62 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67) + 4);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63) + 8) != v62)
    cv3d::cv::gess::internal::Collapser::CollapseBoundary();
  v55 = v9;
  v13 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v62);
  v61 = v13;
  v14 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63);
  v60 = v14;
  v59 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67) + 16);
  v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67) + 12);
  v58 = v15;
  v16 = (uint64_t)*a1 + 104;
  v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, &v67);
  v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v16, v17) + 12);
  v57 = v18;
  v56 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v62) + 12);
  v19 = (uint64_t)*a1 + 104;
  v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, &v63);
  if (v56 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v19, v20) + 12))
    cv3d::cv::gess::internal::Collapser::CollapseBoundary();
  if (v11 == v14 && v12 == v13)
  {
    v21 = 0;
    v68 = v67;
    v69 = v63;
    v70 = v62;
    v71 = v11;
    v72 = v66;
    v73 = v12;
    do
    {
      v22 = a1[1];
      v23 = (const unsigned int *)(*(_QWORD *)a1[11] + 4 * *(unsigned int *)((char *)&v68 + v21));
      if (*(_DWORD *)(*((_QWORD *)v22 + 3) + 32 * *v23 + 20) != -1)
        cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v22, v23);
      v21 += 4;
    }
    while (v21 != 24);
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)*a1 + 104, &v59) = -1;
    v24 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67);
    *(_QWORD *)v24 = -1;
    *(_QWORD *)(v24 + 8) = -1;
    *(_DWORD *)(v24 + 16) = -1;
    v25 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63);
    *(_QWORD *)v25 = -1;
    *(_QWORD *)(v25 + 8) = -1;
    *(_DWORD *)(v25 + 16) = -1;
    v26 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v62);
    *(_QWORD *)v26 = -1;
    *(_QWORD *)(v26 + 8) = -1;
    *(_DWORD *)(v26 + 16) = -1;
    v27 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v65);
    *(_QWORD *)v27 = -1;
    *(_QWORD *)(v27 + 8) = -1;
    *(_DWORD *)(v27 + 16) = -1;
    v28 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v66);
    *(_QWORD *)v28 = -1;
    *(_QWORD *)(v28 + 8) = -1;
    *(_DWORD *)(v28 + 16) = -1;
    v29 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v64);
    *(_QWORD *)v29 = -1;
    *(_QWORD *)(v29 + 8) = -1;
    *(_DWORD *)(v29 + 16) = -1;
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)*a1 + 13, &v56, v30) = -1;
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)*a1 + 13, &v58, v31) = -1;
  }
  else
  {
    cv3d::cv::gess::internal::Collapser::FindCoincideEdges(a1, v15, v18);
    if (a1[23] != a1[24]
      || (cv3d::cv::gess::internal::Collapser::CheckGeom((cv3d::cv::gess::internal::Collapser *)a1) & 1) == 0
      || (cv3d::cv::gess::internal::Collapser::CheckDegenerateTriangles((cv3d::cv::gess::internal::Collapser *)a1) & 1) == 0)
    {
      return cv3d::cv::gess::internal::Collapser::Reject(a1);
    }
    v34 = v58;
    v35 = (_QWORD *)(*(_QWORD *)a1[7] + 24 * v58);
    *v35 = a1[3];
    v35[1] = a1[4];
    v35[2] = a1[5];
    v36 = (_OWORD *)(*(_QWORD *)a1[9] + 80 * *(unsigned int *)(*(_QWORD *)a1[11] + 4 * *((unsigned int *)a1 + 4)));
    v37 = (_OWORD *)(*(_QWORD *)a1[6] + 80 * v34);
    *v37 = *v36;
    v38 = v36[1];
    v39 = v36[2];
    v40 = v36[4];
    v37[3] = v36[3];
    v37[4] = v40;
    v37[1] = v38;
    v37[2] = v39;
    cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes(*a1, &v58, (unsigned int *)&v57);
    cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)*a1 + 104, &v65, &v64);
    cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)*a1 + 104, &v61, &v60);
    v41 = &a1[3 * ((v55 & v10) == 0)];
    v42 = (unsigned int *)v41[13];
    v43 = (unsigned int *)v41[14];
    while (v42 != v43)
      cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)*a1 + 13, v42++, &v58);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)*a1 + 13, &v56, &v60);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)*a1 + 13, &v58, &v61);
    v45 = 0;
    v68 = v67;
    v69 = v63;
    do
    {
      v46 = a1[1];
      v47 = (const unsigned int *)(*(_QWORD *)a1[11] + 4 * *(unsigned int *)((char *)&v68 + v45));
      if (*(_DWORD *)(*((_QWORD *)v46 + 3) + 32 * *v47 + 20) != -1)
        cv3d::cv::gess::internal::EdgeErrorHeap::Remove(v46, v47);
      v45 += 4;
    }
    while (v45 != 8);
    v48 = *(_QWORD *)a1[11];
    *(_DWORD *)(v48 + 4 * v60) = *(_DWORD *)(v48 + 4 * v61);
    *(_DWORD *)(*(_QWORD *)a1[12] + 4 * *(unsigned int *)(v48 + 4 * v61)) = v61;
    v49 = a1[1];
    v50 = (unsigned int *)(v48 + 4 * v61);
    if (*(_DWORD *)(*((_QWORD *)v49 + 3) + 32 * *v50 + 20) == -1)
      cv3d::cv::gess::internal::EdgeErrorHeap::Insert(v49, v50);
    cv3d::cv::gess::internal::Collapser::CollectAndUpdateDirtyHEdges((uint64_t)a1, (uint64_t)&v58);
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)*a1 + 104, &v59) = -1;
    v51 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v67);
    *(_QWORD *)v51 = -1;
    *(_QWORD *)(v51 + 8) = -1;
    *(_DWORD *)(v51 + 16) = -1;
    v52 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v63);
    *(_QWORD *)v52 = -1;
    *(_QWORD *)(v52 + 8) = -1;
    *(_DWORD *)(v52 + 16) = -1;
    v53 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v62);
    *(_QWORD *)v53 = -1;
    *(_QWORD *)(v53 + 8) = -1;
    *(_DWORD *)(v53 + 16) = -1;
    v54 = cv3d::cv::gess::mesh::Topology::h((uint64_t)*a1 + 104, &v66);
    *(_QWORD *)v54 = -1;
    *(_QWORD *)(v54 + 8) = -1;
    *(_DWORD *)(v54 + 16) = -1;
  }
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)*a1 + 13, (unsigned int *)&v57, v32) = -1;
  v33 = (*((_DWORD *)a1 + 38) + 1);
  *((_DWORD *)a1 + 38) = v33;
  cv3d::cv::gess::internal::Collapser::Reset((cv3d::cv::gess::internal::Collapser *)a1);
  return v33;
}

uint64_t cv3d::cv::gess::internal::Collapser::CheckGeom(cv3d::cv::gess::internal::Collapser *this)
{
  uint64_t v2;
  char *v3;
  double *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  _QWORD v17[2];

  v2 = 0;
  v17[1] = *MEMORY[0x24BDAC8D0];
  v17[0] = 0x100000000;
  v3 = (char *)this + 104;
  v4 = (double *)((char *)this + 24);
  while (2)
  {
    v5 = &v3[24 * *((int *)v17 + v2)];
    v6 = *(unsigned int **)v5;
    v7 = (unsigned int *)*((_QWORD *)v5 + 1);
    while (v6 != v7)
    {
      v8 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, v6) + 12);
      v9 = *(_QWORD *)this + 104;
      v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, v6);
      v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v9, v10) + 12);
      v12 = *(_QWORD *)this + 104;
      v13 = cv3d::cv::gess::mesh::Topology::h(v12, v6);
      v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, (unsigned int *)(v13 + 8));
      v15 = cv3d::cv::gess::mesh::Topology::h(v12, v14);
      if (cv3d::cv::gess::internal::IsFaceFlipped((double *)(**((_QWORD **)this + 7) + 24 * v8), (double *)(**((_QWORD **)this + 7) + 24 * v11), (double *)(**((_QWORD **)this + 7) + 24 * *(unsigned int *)(v15 + 12)), v4))
      {
        return 0;
      }
      ++v6;
    }
    if (++v2 != 2)
      continue;
    break;
  }
  return 1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,false>(uint64_t result, unsigned int *a2, _QWORD **a3, uint64_t a4, uint64_t a5)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  _QWORD *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int *v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  BOOL v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int *v113;
  _QWORD *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int *v119;
  uint64_t v120;
  unsigned int *v121;
  _QWORD *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int *v127;
  BOOL v128;
  unsigned int *v129;
  int64_t v130;
  int64_t v131;
  uint64_t v132;
  unsigned int *v133;
  _QWORD *v134;
  uint64_t v135;
  unsigned int *v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int *v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int *v154;
  _QWORD *v155;
  uint64_t v156;
  unsigned int *v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  int64_t v164;
  unsigned int *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int *v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int *v184;
  _QWORD *v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int *v192;
  unsigned int *v193;
  _QWORD *v194;
  uint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int *v200;
  _QWORD *v201;
  uint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  uint64_t v205;
  unsigned int *v206;
  uint64_t v207;
  unsigned int *v208;
  unsigned int *v209;
  unsigned int v210;
  int64_t v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int *v214;
  unsigned int *v215;
  uint64_t v216;
  int64_t v217;
  uint64_t v218;
  unsigned int v219;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = a2 - 1;
  v209 = a2 - 2;
  v213 = a2;
  v208 = a2 - 3;
  while (2)
  {
    v10 = v213;
    v11 = (char *)v213 - (char *)v8;
    v12 = v213 - v8;
    switch(v213 - v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v101 = *a3;
        v102 = **a3 + 104;
        v103 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v102, v9);
        v104 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v102, v103) + 12);
        v105 = *v101 + 104;
        v106 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v105, v8);
        result = cv3d::cv::gess::mesh::Topology::h(v105, v106);
        if (v104 < *(_DWORD *)(result + 12))
        {
          v107 = *v8;
          *v8 = *v9;
          *v9 = v107;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v8, v8 + 1, v9, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,0>(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        v215 = v8;
        if (v11 <= 95)
        {
          v108 = v8 + 1;
          v110 = v8 == v213 || v108 == v213;
          if ((a5 & 1) != 0)
          {
            if (!v110)
            {
              v111 = 0;
              v112 = v8;
              do
              {
                v113 = v112;
                v112 = v108;
                v114 = *a3;
                v115 = **a3 + 104;
                v116 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v115, v108);
                v117 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v115, v116) + 12);
                v118 = *v114 + 104;
                v119 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v118, v113);
                result = cv3d::cv::gess::mesh::Topology::h(v118, v119);
                if (v117 < *(_DWORD *)(result + 12))
                {
                  v219 = *v112;
                  v120 = v111;
                  while (1)
                  {
                    *(unsigned int *)((char *)v8 + v120 + 4) = *(unsigned int *)((char *)v8 + v120);
                    if (!v120)
                      break;
                    v120 -= 4;
                    v121 = (unsigned int *)((char *)v8 + v120);
                    v122 = *a3;
                    v123 = **a3 + 104;
                    v124 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v123, &v219);
                    v125 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v123, v124) + 12);
                    v126 = *v122 + 104;
                    v127 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v126, v121);
                    result = cv3d::cv::gess::mesh::Topology::h(v126, v127);
                    v128 = v125 >= *(_DWORD *)(result + 12);
                    v8 = v215;
                    if (v128)
                    {
                      v129 = (unsigned int *)((char *)v215 + v120 + 4);
                      goto LABEL_74;
                    }
                  }
                  v129 = v8;
LABEL_74:
                  *v129 = v219;
                }
                v108 = v112 + 1;
                v111 += 4;
              }
              while (v112 + 1 != v213);
            }
          }
          else if (!v110)
          {
            v192 = v8 - 1;
            do
            {
              v193 = v8;
              v8 = v108;
              v194 = *a3;
              v195 = **a3 + 104;
              v196 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v195, v108);
              v197 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v195, v196) + 12);
              v198 = *v194 + 104;
              v199 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v198, v193);
              result = cv3d::cv::gess::mesh::Topology::h(v198, v199);
              if (v197 < *(_DWORD *)(result + 12))
              {
                v219 = *v8;
                v200 = v192;
                do
                {
                  v200[2] = v200[1];
                  v201 = *a3;
                  v202 = **a3 + 104;
                  v203 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v202, &v219);
                  v204 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v202, v203) + 12);
                  v205 = *v201 + 104;
                  v206 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v205, v200);
                  result = cv3d::cv::gess::mesh::Topology::h(v205, v206);
                  --v200;
                }
                while (v204 < *(_DWORD *)(result + 12));
                v200[2] = v219;
              }
              v108 = v8 + 1;
              ++v192;
            }
            while (v8 + 1 != v213);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v213)
          {
            v130 = (v12 - 2) >> 1;
            v217 = v130;
            v207 = (char *)v213 - (char *)v8;
            do
            {
              v131 = v130;
              if (v217 >= v130)
              {
                v132 = (2 * v130) | 1;
                v133 = &v8[v132];
                if (2 * v130 + 2 < (uint64_t)v12)
                {
                  v134 = *a3;
                  v135 = **a3 + 104;
                  v136 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v135, &v8[v132]);
                  v210 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v135, v136) + 12);
                  v137 = *v134 + 104;
                  v138 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v137, v133 + 1);
                  if (v210 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v137, v138) + 12))
                  {
                    ++v133;
                    v132 = 2 * v131 + 2;
                  }
                }
                v139 = &v8[v131];
                v140 = *a3;
                v141 = **a3 + 104;
                v142 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v141, v133);
                v143 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v141, v142) + 12);
                v144 = *v140 + 104;
                v145 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v144, v139);
                result = cv3d::cv::gess::mesh::Topology::h(v144, v145);
                v11 = v207;
                if (v143 >= *(_DWORD *)(result + 12))
                {
                  v211 = v131;
                  v219 = *v139;
                  do
                  {
                    v146 = v133;
                    *v139 = *v133;
                    if (v217 < v132)
                      break;
                    v147 = (2 * v132) | 1;
                    v133 = &v8[v147];
                    v148 = 2 * v132 + 2;
                    if (v148 < (uint64_t)v12)
                    {
                      v149 = *a3;
                      v150 = **a3 + 104;
                      v151 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v150, &v8[v147]);
                      v152 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v150, v151) + 12);
                      v153 = *v149 + 104;
                      v154 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v153, v133 + 1);
                      v128 = v152 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v153, v154) + 12);
                      v8 = v215;
                      if (!v128)
                      {
                        ++v133;
                        v147 = v148;
                      }
                    }
                    v155 = *a3;
                    v156 = **a3 + 104;
                    v157 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v156, v133);
                    v158 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v156, v157) + 12);
                    v159 = *v155 + 104;
                    v160 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v159, &v219);
                    result = cv3d::cv::gess::mesh::Topology::h(v159, v160);
                    v139 = v146;
                    v132 = v147;
                  }
                  while (v158 >= *(_DWORD *)(result + 12));
                  *v146 = v219;
                  v11 = v207;
                  v131 = v211;
                }
              }
              v130 = v131 - 1;
            }
            while (v131);
            v161 = (unint64_t)v11 >> 2;
            v162 = v213;
            do
            {
              v214 = v162;
              v163 = 0;
              v212 = *v8;
              v164 = (unint64_t)(v161 - 2) >> 1;
              v218 = v161;
              do
              {
                v165 = &v8[v163 + 1];
                v166 = (2 * v163) | 1;
                v167 = 2 * v163 + 2;
                if (v167 < v161)
                {
                  v168 = *a3;
                  v169 = **a3 + 104;
                  v170 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v169, v165);
                  v171 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v169, v170) + 12);
                  v172 = *v168 + 104;
                  v173 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v172, v165 + 1);
                  result = cv3d::cv::gess::mesh::Topology::h(v172, v173);
                  v161 = v218;
                  if (v171 < *(_DWORD *)(result + 12))
                  {
                    ++v165;
                    v166 = v167;
                  }
                }
                *v8 = *v165;
                v8 = v165;
                v163 = v166;
              }
              while (v166 <= v164);
              v162 = v214 - 1;
              if (v165 == v214 - 1)
              {
                *v165 = v212;
                v8 = v215;
              }
              else
              {
                *v165 = *v162;
                *v162 = v212;
                v8 = v215;
                v174 = (char *)v165 - (char *)v215 + 4;
                if (v174 >= 5)
                {
                  v175 = (((unint64_t)v174 >> 2) - 2) >> 1;
                  v176 = &v215[v175];
                  v177 = *a3;
                  v178 = **a3 + 104;
                  v179 = v161;
                  v180 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v178, v176);
                  v181 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v178, v180) + 12);
                  v182 = *v177 + 104;
                  v183 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v182, v165);
                  result = cv3d::cv::gess::mesh::Topology::h(v182, v183);
                  v161 = v179;
                  if (v181 < *(_DWORD *)(result + 12))
                  {
                    v219 = *v165;
                    do
                    {
                      v184 = v176;
                      *v165 = *v176;
                      if (!v175)
                        break;
                      v175 = (v175 - 1) >> 1;
                      v176 = &v215[v175];
                      v185 = *a3;
                      v186 = **a3 + 104;
                      v187 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v186, v176);
                      v188 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v186, v187) + 12);
                      v189 = *v185 + 104;
                      v190 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v189, &v219);
                      result = cv3d::cv::gess::mesh::Topology::h(v189, v190);
                      v165 = v184;
                    }
                    while (v188 < *(_DWORD *)(result + 12));
                    *v184 = v219;
                    v161 = v179;
                  }
                }
              }
            }
            while (v161-- > 2);
          }
          return result;
        }
        v13 = &v8[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(&v8[v12 >> 1], v8, v9, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v8, &v8[v12 >> 1], v9, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v8 + 1, v13 - 1, v209, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v8 + 2, &v8[(v12 >> 1) + 1], v208, a3);
          v10 = v213;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v13 - 1, v13, &v8[(v12 >> 1) + 1], a3);
          v14 = *v8;
          *v8 = *v13;
          *v13 = v14;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v15 = *a3;
          v16 = **a3 + 104;
          v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, v8 - 1);
          v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v16, v17) + 12);
          v19 = *v15 + 104;
          v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, v8);
          if (v18 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v19, v20) + 12))
          {
            v219 = *v8;
            v61 = *a3;
            v62 = **a3 + 104;
            v63 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v62, &v219);
            v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v62, v63) + 12);
            v65 = *v61 + 104;
            v66 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v65, v9);
            result = cv3d::cv::gess::mesh::Topology::h(v65, v66);
            if (v64 >= *(_DWORD *)(result + 12))
            {
              v73 = v8 + 1;
              do
              {
                v8 = v73;
                if (v73 >= v10)
                  break;
                v74 = *a3;
                v75 = **a3 + 104;
                v76 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v75, &v219);
                v77 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v75, v76) + 12);
                v78 = *v74 + 104;
                v79 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v78, v8);
                result = cv3d::cv::gess::mesh::Topology::h(v78, v79);
                v73 = v8 + 1;
              }
              while (v77 >= *(_DWORD *)(result + 12));
            }
            else
            {
              do
              {
                ++v8;
                v67 = *a3;
                v68 = **a3 + 104;
                v69 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v68, &v219);
                v70 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v68, v69) + 12);
                v71 = *v67 + 104;
                v72 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v71, v8);
                result = cv3d::cv::gess::mesh::Topology::h(v71, v72);
              }
              while (v70 >= *(_DWORD *)(result + 12));
            }
            v80 = v10;
            if (v8 < v10)
            {
              v80 = v10;
              do
              {
                --v80;
                v81 = *a3;
                v82 = **a3 + 104;
                v83 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v82, &v219);
                v84 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v82, v83) + 12);
                v85 = *v81 + 104;
                v86 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v85, v80);
                result = cv3d::cv::gess::mesh::Topology::h(v85, v86);
              }
              while (v84 < *(_DWORD *)(result + 12));
            }
            while (v8 < v80)
            {
              v87 = *v8;
              *v8 = *v80;
              *v80 = v87;
              do
              {
                ++v8;
                v88 = *a3;
                v89 = **a3 + 104;
                v90 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v89, &v219);
                v91 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v89, v90) + 12);
                v92 = *v88 + 104;
                v93 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v92, v8);
              }
              while (v91 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v92, v93) + 12));
              do
              {
                --v80;
                v94 = *a3;
                v95 = **a3 + 104;
                v96 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v95, &v219);
                v97 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v95, v96) + 12);
                v98 = *v94 + 104;
                v99 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v98, v80);
                result = cv3d::cv::gess::mesh::Topology::h(v98, v99);
              }
              while (v97 < *(_DWORD *)(result + 12));
            }
            v100 = v8 - 1;
            if (v8 - 1 != v215)
              *v215 = *v100;
            a5 = 0;
            *v100 = v219;
            continue;
          }
        }
        v21 = 0;
        v219 = *v8;
        do
        {
          ++v21;
          v22 = *a3;
          v23 = **a3 + 104;
          v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v23, &v8[v21]);
          v25 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v23, v24) + 12);
          v26 = *v22 + 104;
          v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, &v219);
        }
        while (v25 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12));
        v28 = &v8[v21];
        v29 = v10;
        if (v21 == 1)
        {
          v29 = v10;
          do
          {
            if (v28 >= v29)
              break;
            --v29;
            v36 = *a3;
            v37 = **a3 + 104;
            v38 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v37, v29);
            v39 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v37, v38) + 12);
            v40 = *v36 + 104;
            v41 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v40, &v219);
          }
          while (v39 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v40, v41) + 12));
        }
        else
        {
          do
          {
            --v29;
            v30 = *a3;
            v31 = **a3 + 104;
            v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, v29);
            v33 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v31, v32) + 12);
            v34 = *v30 + 104;
            v35 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v34, &v219);
          }
          while (v33 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v34, v35) + 12));
        }
        if (v28 >= v29)
        {
          v59 = v28 - 1;
        }
        else
        {
          v216 = a4;
          v42 = a5;
          v43 = v9;
          v44 = v28;
          v45 = v29;
          do
          {
            v46 = *v44;
            *v44 = *v45;
            *v45 = v46;
            do
            {
              ++v44;
              v47 = *a3;
              v48 = **a3 + 104;
              v49 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v48, v44);
              v50 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v48, v49) + 12);
              v51 = *v47 + 104;
              v52 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v51, &v219);
            }
            while (v50 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v51, v52) + 12));
            do
            {
              --v45;
              v53 = *a3;
              v54 = **a3 + 104;
              v55 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v54, v45);
              v56 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v54, v55) + 12);
              v57 = *v53 + 104;
              v58 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v57, &v219);
            }
            while (v56 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v57, v58) + 12));
          }
          while (v44 < v45);
          v59 = v44 - 1;
          v9 = v43;
          a5 = v42;
          a4 = v216;
        }
        if (v59 != v215)
          *v215 = *v59;
        *v59 = v219;
        if (v28 < v29)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,false>(v215, v59, a3, a4, a5 & 1);
          a5 = 0;
          v8 = v59 + 1;
          continue;
        }
        v60 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v215, v59, a3);
        v8 = v59 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(v59 + 1, v213, a3);
        if (!(_DWORD)result)
        {
          if (v60)
            continue;
          goto LABEL_32;
        }
        a2 = v59;
        v8 = v215;
        if (!v60)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,0>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, _QWORD **a6)
{
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t result;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = **a6 + 104;
  v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v13, a5);
  v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v13, v14) + 12);
  v16 = *v12 + 104;
  v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, a4);
  result = cv3d::cv::gess::mesh::Topology::h(v16, v17);
  if (v15 < *(_DWORD *)(result + 12))
  {
    v19 = *a4;
    *a4 = *a5;
    *a5 = v19;
    v20 = *a6;
    v21 = **a6 + 104;
    v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v21, a4);
    v23 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v21, v22) + 12);
    v24 = *v20 + 104;
    v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v24, a3);
    result = cv3d::cv::gess::mesh::Topology::h(v24, v25);
    if (v23 < *(_DWORD *)(result + 12))
    {
      v26 = *a3;
      *a3 = *a4;
      *a4 = v26;
      v27 = *a6;
      v28 = **a6 + 104;
      v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v28, a3);
      v30 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v28, v29) + 12);
      v31 = *v27 + 104;
      v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, a2);
      result = cv3d::cv::gess::mesh::Topology::h(v31, v32);
      if (v30 < *(_DWORD *)(result + 12))
      {
        v33 = *a2;
        *a2 = *a3;
        *a3 = v33;
        v34 = *a6;
        v35 = **a6 + 104;
        v36 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v35, a2);
        v37 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v35, v36) + 12);
        v38 = *v34 + 104;
        v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v38, a1);
        result = cv3d::cv::gess::mesh::Topology::h(v38, v39);
        if (v37 < *(_DWORD *)(result + 12))
        {
          v40 = *a1;
          *a1 = *a2;
          *a2 = v40;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, _QWORD **a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;

  v8 = *a4;
  v9 = **a4 + 104;
  v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, a2);
  v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v9, v10) + 12);
  v12 = *v8 + 104;
  v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, a1);
  v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12);
  v15 = *a4;
  v16 = **a4 + 104;
  v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v16, a3);
  v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v16, v17) + 12);
  v19 = *v15 + 104;
  v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, a2);
  result = cv3d::cv::gess::mesh::Topology::h(v19, v20);
  v22 = *(_DWORD *)(result + 12);
  if (v11 >= v14)
  {
    if (v18 < v22)
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = *a4;
      v26 = *v25 + 104;
      v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, a2);
      v28 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
      v29 = *v25 + 104;
      v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v29, a1);
      result = cv3d::cv::gess::mesh::Topology::h(v29, v30);
      if (v28 < *(_DWORD *)(result + 12))
      {
        v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  else
  {
    v23 = *a1;
    if (v18 >= v22)
    {
      *a1 = *a2;
      *a2 = v23;
      v32 = *a4;
      v33 = *v32 + 104;
      v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v33, a3);
      v35 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v33, v34) + 12);
      v36 = *v32 + 104;
      v37 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v36, a2);
      result = cv3d::cv::gess::mesh::Topology::h(v36, v37);
      if (v35 >= *(_DWORD *)(result + 12))
        return result;
      v23 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v23;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(unsigned int *a1, unsigned int *a2, _QWORD **a3)
{
  uint64_t v5;
  _BOOL8 result;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v34;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 1;
      v8 = *a3;
      v9 = **a3 + 104;
      v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v9, a2 - 1);
      v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v9, v10) + 12);
      v12 = *v8 + 104;
      v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v12, a1);
      if (v11 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v12, v13) + 12))
      {
        v14 = *a1;
        *a1 = *v7;
        *v7 = v14;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v15 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a1 + 1, a1 + 2, a3);
      v16 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *a3;
    v20 = **a3 + 104;
    v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, v16);
    v22 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v20, v21) + 12);
    v23 = *v19 + 104;
    v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v23, v15);
    if (v22 < *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v23, v24) + 12))
    {
      v34 = *v16;
      v25 = v17;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v25 + 12) = *(unsigned int *)((char *)a1 + v25 + 8);
        if (v25 == -8)
          break;
        v26 = *a3;
        v27 = **a3 + 104;
        v28 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v27, &v34);
        v29 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v27, v28) + 12);
        v30 = *v26 + 104;
        v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v30, (unsigned int *)((char *)a1 + v25 + 4));
        v25 -= 4;
        if (v29 >= *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v30, v31) + 12))
        {
          v32 = (unsigned int *)((char *)a1 + v25 + 12);
          goto LABEL_12;
        }
      }
      v32 = a1;
LABEL_12:
      *v32 = v34;
      if (++v18 == 8)
        return v16 + 1 == a2;
    }
    v15 = v16;
    v17 += 4;
    if (++v16 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD **a5)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t result;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Collapser::FindCoincideEdges(cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::VertexHandle)::$_0 &,cv3d::cv::gess::mesh::HEdgeHandle *>(a1, a2, a3, a5);
  v10 = *a5;
  v11 = **a5 + 104;
  v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v11, a4);
  v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v11, v12) + 12);
  v14 = *v10 + 104;
  v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v14, a3);
  result = cv3d::cv::gess::mesh::Topology::h(v14, v15);
  if (v13 < *(_DWORD *)(result + 12))
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    v18 = *a5;
    v19 = **a5 + 104;
    v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v19, a3);
    v21 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v19, v20) + 12);
    v22 = *v18 + 104;
    v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v22, a2);
    result = cv3d::cv::gess::mesh::Topology::h(v22, v23);
    if (v21 < *(_DWORD *)(result + 12))
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = *a5;
      v26 = **a5 + 104;
      v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v26, a2);
      v28 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v26, v27) + 12);
      v29 = *v25 + 104;
      v30 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v29, a1);
      result = cv3d::cv::gess::mesh::Topology::h(v29, v30);
      if (v28 < *(_DWORD *)(result + 12))
      {
        v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::update_fibnode(uint64_t a1, unsigned int a2, float a3)
{
  unsigned int min;

  cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::decrease_key(a1, a2, -3.4028e38);
  min = cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::extract_min(a1);
  *(float *)(**(_QWORD **)(a1 + 16) + 32 * min) = a3;
  return cv3d::cv::gess::internal::FibHeap<float,cv3d::cv::gess::internal::ErrorComparision>::insert(a1, min);
}

uint64_t cv3d::cv::gess::internal::EdgeErrorHeap::Penalize(cv3d::cv::gess::internal::EdgeErrorHeap *this, const unsigned int *a2)
{
  uint64_t v2;

  v2 = *a2;
  if (*(_DWORD *)(*((_QWORD *)this + 3) + 32 * v2 + 20) == -1)
    cv3d::cv::gess::internal::EdgeErrorHeap::Penalize();
  *(_DWORD *)(**((_QWORD **)this + 2) + 4 * v2) = 2139095039;
  return cv3d::cv::gess::internal::EdgeErrorHeap::Update(this, a2);
}

void cv3d::cv::gess::internal::Collapser::Reset(cv3d::cv::gess::internal::Collapser *this)
{
  _QWORD *v1;
  _QWORD *v2;

  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 4) = -1;
  v1 = (_QWORD *)((char *)this + 104);
  do
  {
    v1[1] = *v1;
    v1 += 3;
  }
  while (v1 != (_QWORD *)((char *)this + 152));
  v2 = (_QWORD *)((char *)this + 168);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  v2[3] = v2[2];
}

float32x4_t cv3d::cv::gess::alg::internal::OptimizePositionEnv(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t result)
{
  int32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  float v21;
  float32x4_t v22;
  float v23;

  v6 = (int32x4_t)vsubq_f32(*a4, *a3);
  v7 = (int32x4_t)vsubq_f32(*a5, *a4);
  v8 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL), v7);
  v9 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v6, (int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL)), v6), v8), (float32x4_t)vzip2q_s32(vzip1q_s32(v7, (int32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL)), v7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 4uLL), v6));
  v10 = vmulq_f32(v9, v9);
  v10.i32[3] = 0;
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  v10.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v10.f32));
  v11 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
  v12 = vmulq_f32(*a2, v11);
  v12.i32[3] = 0;
  v13 = vpaddq_f32(v12, v12);
  v13.f32[0] = vaddv_f32(*(float32x2_t *)v13.f32);
  v8.i32[0] = 0;
  v14 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v8, v13), 0), (int8x16_t)vnegq_f32(v11), (int8x16_t)v11);
  v15 = vmulq_f32(*a3, v14);
  v15.i32[3] = 0;
  v16 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v15, v15));
  v17 = vmulq_f32(*a4, v14);
  v17.i32[3] = 0;
  v18 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
  v19 = vmulq_f32(*a5, v14);
  v19.i32[3] = 0;
  v20 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  if (v18 > v16)
    v16 = v18;
  if (v20 <= v16)
    v21 = v16;
  else
    v21 = v20;
  v22 = vmulq_f32(v14, *a1);
  v22.i32[3] = 0;
  v23 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22));
  if (v21 > v23)
  {
    result = vaddq_f32(*a1, vmulq_n_f32(*a2, (float)(v21 - v23) + result.f32[0]));
    *a1 = result;
  }
  return result;
}

BOOL cv3d::cv::gess::alg::internal::GenerateEnvironmentOcclusionMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, cv3d::cv::gess::alg::MPSMeshIntersector *a5, float32_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10, uint64_t a11, unsigned __int8 a12)
{
  _QWORD *v16;
  unsigned int v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _BOOL8 v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  float32x4_t v32;
  GeometryQuality *v33;
  uint64_t v34;
  float32x4_t v35;
  float v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float *v49;
  float v50;
  float32x4_t v51;
  float32x4_t *v52;
  float v53;
  float v54;
  float v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int v64;
  std::vector<unsigned int>::pointer begin;
  uint64_t v66;
  double v67;
  __int32 v68;
  float v69;
  float64x2_t v70;
  __double2 v71;
  uint64_t v72;
  unint64_t v73;
  double v74;
  float v75;
  unsigned int v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  cv3d::cv::gess::alg::internal *v84;
  NSError *v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  cv3d::cv::gess::alg::internal *v101;
  NSError *v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  __int8 v112;
  int v114;
  BOOL v115;
  void *context;
  void *v118;
  void *v119;
  unsigned int v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v131;
  float v132;
  float32x4_t v133;
  unsigned int v134;
  __int32 v136;
  float v137;
  unint64_t v138;
  double v139;
  float32x4_t v141;
  float64x2_t v142;
  void *v143;
  unint64_t v144;
  int64x2_t v145;
  unint64_t v146;
  int64x2_t v147;
  unint64_t v148;
  int64x2_t v149;
  uint64_t v150;
  int64x2_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  unsigned int v156;
  void *__p[2];
  int v158;
  char v159;
  float32x4_t v160;
  float32x4_t v161;
  void *v162[3];
  std::vector<unsigned int> v163;
  id v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  float32x4_t v168;
  char v169;
  __int128 v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v167 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::getIntersectOptions((uint64_t)a5, (double *)&v167);
  v166 = 0x100000000;
  v16 = cv3d::cv::gess::alg::MPSMeshIntersector::setIntersectOptions(a5, &v166);
  v138 = (*(_DWORD *)(a2 + 8) * *(_DWORD *)(a2 + 4));
  v17 = v138 >> 7;
  if (v138 >> 7 >= 0x2000)
    v17 = 0x2000;
  v120 = v17;
  context = (void *)MEMORY[0x2426214AC](v16);
  cv3d::cv::gess::alg::MPSMeshIntersector::getMTLDeviceInternal(a5);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v124 = (void *)objc_msgSend(v18, "newCommandQueue");
  v165 = 0;
  v118 = v18;
  GetMTLLibrary(v18, (uint64_t)&v165, a10, a12);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v165;
  if (v19)
  {
    v20 = v19;
    if (a9)
      *(_DWORD *)(a8 + 384) = 5;
    if (*(_QWORD *)(a11 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      LODWORD(v163.__begin_) = 5;
      v21 = *(_QWORD *)(a11 + 24);
      if (!v21)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, std::vector<unsigned int> *, void **))(*(_QWORD *)v21 + 48))(v21, &v163, __p);
      if (v159 < 0)
        operator delete(__p[0]);
    }

    v22 = 0;
    v126 = 0;
    v127 = 0;
    v121 = 0;
    v122 = 0;
    v23 = 0;
    v123 = 0;
    goto LABEL_88;
  }
  v114 = a9;
  cv3d::cv::gess::alg::MPSMeshIntersector::getMPSRayIntersectorInternal(a5);
  v24 = objc_claimAutoreleasedReturnValue();
  cv3d::cv::gess::alg::MPSMeshIntersector::getMPSTriangleAccelerationStructureInternal(a5);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  v123 = (void *)v24;
  v25 = objc_alloc_init(MEMORY[0x24BDDD550]);
  objc_msgSend(v25, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
  v26 = (void *)objc_msgSend(v119, "newFunctionWithName:", CFSTR("rcdBOOL"));
  objc_msgSend(v25, "setComputeFunction:", v26);

  v164 = 0;
  v27 = objc_msgSend(v118, "newComputePipelineStateWithDescriptor:options:reflection:error:", v25, 0, 0, &v164);
  v28 = v164;
  v127 = (void *)v27;
  if (v27)
  {

    v131 = v120 << 7;
    v121 = (void *)objc_msgSend(v118, "newBufferWithLength:options:", 32 * v131, 0);
    v29 = objc_msgSend(v118, "newBufferWithLength:options:", 16 * v131, 32);
    v125 = (void *)objc_msgSend(v118, "newBufferWithLength:options:", v131, 0);
    v126 = (void *)v29;
    v30 = objc_msgSend(v121, "contents");
    std::vector<unsigned int>::vector(&v163, 2 * v120);
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v162, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v168 = 0uLL;
    v31 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v168, (unsigned __int8 *)__p);
    v115 = v31 != -1;
    if (v159 < 0)
      operator delete(__p[0]);
    LODWORD(__p[0]) = v31;
    v129 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    __p[0] = 0;
    __p[1] = 0;
    v158 = 0;
    v32.i64[0] = 0x80000000800000;
    v32.i64[1] = 0x80000000800000;
    v160 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v161 = v32;
    cv3d::cv::gess::alg::MeasureGeometryQuality((float32x4_t *)a1, (const cv3d::cv::gess::mesh::PolyMesh *)__p, v33);
    v34 = a2;
    v35 = vsubq_f32(v161, v160);
    v36 = v35.f32[1];
    if (v35.f32[0] >= v35.f32[1])
      v36 = v35.f32[0];
    v35.i32[0] = v35.i32[2];
    if (v36 >= v35.f32[2])
      v35.f32[0] = v36;
    if (*(_DWORD *)(a2 + 8))
    {
      v136 = v35.i32[0];
      v37 = 0;
      v38 = 0;
      v39 = v30 + 16;
      v40 = v138 >> 7;
      if (v138 >> 7 >= 0x2000)
        v40 = 0x2000;
      v128 = -128 * v40;
      v41 = 0.5;
      v42 = 1.0;
      v43 = -0.5;
      v137 = a6;
      while (1)
      {
        v44 = *(_DWORD *)(v34 + 4);
        if (!v44)
          goto LABEL_47;
        v45 = 0;
        v134 = v37;
        while (!*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v45 + v44 * v37)))
        {
LABEL_46:
          if (++v45 >= v44)
            goto LABEL_47;
        }
        v46 = *(_QWORD *)(a3 + 16);
        v47 = (v45 + *(_DWORD *)(a3 + 4) * v37) * *(_DWORD *)(a3 + 12);
        v156 = *(_DWORD *)(v46 + 16 * v47 + 4);
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v156, v162);
        v48 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v162[0]);
        v49 = (float *)(v46 + 16 * v47);
        v50 = v49[2];
        v49 += 2;
        v141 = v48;
        v51 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v162[0] + 1));
        v132 = v49[1];
        v133 = v51;
        v52 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v162[0] + 2));
        v53 = *v49;
        v54 = v49[1];
        v55 = (float)(1.0 - *v49) - v54;
        v155 = vaddq_f32(vaddq_f32(vmulq_n_f32(v141, v50), vmulq_n_f32(v133, v132)), vmulq_n_f32(*v52, v55));
        v56 = *(unsigned int *)v162[0];
        v57 = *(_QWORD *)(v129 + 40);
        v58 = (*(_QWORD *)(v129 + 48) - v57) >> 4;
        if (v58 <= v56)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v59 = *((unsigned int *)v162[0] + 1);
        if (v58 <= v59)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v60 = *((unsigned int *)v162[0] + 2);
        if (v58 <= v60)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v61 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v57 + 16 * v60), v55), vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v57 + 16 * v59), v54), vmulq_n_f32(*(float32x4_t *)(v57 + 16 * v56), v53)));
        v62 = vmulq_f32(v61, v61);
        v62.i32[3] = 0;
        v62.i64[0] = vpaddq_f32(v62, v62).u64[0];
        v62.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v62.f32));
        v154 = vdivq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0));
        v168 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v56);
        v153 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v162[0] + 1));
        v152 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v162[0] + 2));
        v63 = v152;
        v63.f32[0] = a6;
        cv3d::cv::gess::alg::internal::OptimizePositionEnv(&v155, &v154, &v168, &v153, &v152, v63);
        v64 = 0;
        begin = v163.__begin_;
        *(std::vector<unsigned int>::pointer)((char *)v163.__begin_ + ((v38 >> 4) & 0xFFFFFFFFFFFFFF8)) = v45;
        *(std::vector<unsigned int>::pointer)((char *)begin + ((v38 >> 4) & 0xFFFFFFFFFFFFFF8 | 4)) = v134;
        v66 = v155.i64[0];
        v67 = 0.0;
        v68 = v155.i32[2];
        do
        {
          v139 = v67;
          v69 = (v67 + v41) * -0.0625 + v42;
          v71 = __sincos_stret((v69 + v43 + v69 + v43) * 3.14159265);
          v70.f64[0] = v71.__cosval;
          v72 = 0;
          v70.f64[1] = v71.__sinval;
          v142 = v70;
          v73 = v39 + 32 * v38;
          v74 = 0.0;
          do
          {
            v75 = (v74 + 0.5) * -0.125 + 1.0;
            *(float *)&v76 = sin((v75 + -0.5) * 3.14159265);
            v77 = sqrt(1.0 - (float)(*(float *)&v76 * *(float *)&v76));
            *(float32x2_t *)v78.f32 = vcvt_f32_f64(vmulq_n_f64(v142, v77));
            v78.i64[1] = v76;
            v79 = vmulq_f32(v78, v78);
            v79.i32[3] = 0;
            v79.i64[0] = vpaddq_f32(v79, v79).u64[0];
            v79.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v79.f32));
            v80 = vdivq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 0));
            *(_QWORD *)(v73 - 16) = v66;
            *(_QWORD *)v73 = v80.i64[0];
            *(_DWORD *)(v73 - 8) = v68;
            *(float *)(v73 - 4) = v137;
            *(_DWORD *)(v73 + 8) = v80.i32[2];
            *(_DWORD *)(v73 + 12) = v136;
            v74 = v74 + 1.0;
            ++v72;
            v73 += 32;
          }
          while ((_DWORD)v72 != 8);
          v67 = v139 + 1.0;
          ++v64;
          v38 += v72;
          v41 = 0.5;
          v43 = -0.5;
          v42 = 1.0;
        }
        while (v64 != 16);
        a6 = v137;
        if (v38 + v128)
          goto LABEL_45;
        objc_msgSend(v124, "commandBuffer", v67);
        v143 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v123, "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v131, v122);
        v81 = objc_msgSend(v127, "maxTotalThreadsPerThreadgroup");
        v82 = v81 >= v131 ? v120 << 7 : v81;
        objc_msgSend(v143, "computeCommandEncoder");
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v83, "setBuffer:offset:atIndex:", v29, 0, 0);
        objc_msgSend(v83, "setBuffer:offset:atIndex:", v125, 0, 1);
        objc_msgSend(v83, "setComputePipelineState:", v127);
        v150 = v120 << 7;
        v151 = vdupq_n_s64(1uLL);
        v148 = v82;
        v149 = v151;
        objc_msgSend(v83, "dispatchThreads:threadsPerThreadgroup:", &v150, &v148);
        cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v83, "endEncoding"));
        objc_msgSend(v143, "commit");
        objc_msgSend(v143, "waitUntilCompleted");
        objc_msgSend(v143, "error");
        v84 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
        v86 = cv3d::cv::gess::alg::internal::GPUEncountersError(v84, v85);

        if (!v86)
          break;
        if (v114)
          *(_DWORD *)(a8 + 384) = 16;
        if (*(_QWORD *)(a11 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(&v168, (char *)&unk_23C62207F);
          v153.i32[0] = 16;
          v95 = *(_QWORD *)(a11 + 24);
          if (!v95)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)v95 + 48))(v95, &v153, &v168);
          if (v169 < 0)
            operator delete((void *)v168.i64[0]);
        }

        v115 = 0;
        v38 = v120 << 7;
        v37 = v134;
LABEL_47:
        ++v37;
        v34 = a2;
        if (v37 >= *(_DWORD *)(a2 + 8))
        {
          if (v115 && v38)
          {
            objc_msgSend(v124, "commandBuffer");
            v97 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v123, "encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:", v97, 1, v121, 0, v29, 0, v38, v122);
            v98 = objc_msgSend(v127, "maxTotalThreadsPerThreadgroup");
            if (v98 >= v38)
              v99 = v38;
            else
              v99 = v98;
            objc_msgSend(v97, "computeCommandEncoder");
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "setBuffer:offset:atIndex:", v126, 0, 0);
            objc_msgSend(v100, "setBuffer:offset:atIndex:", v125, 0, 1);
            objc_msgSend(v100, "setComputePipelineState:", v127);
            v146 = v38;
            v147 = vdupq_n_s64(1uLL);
            v144 = v99;
            v145 = v147;
            objc_msgSend(v100, "dispatchThreads:threadsPerThreadgroup:", &v146, &v144);
            cv3d::cv::gess::util::os::WaitUntilReadyForMetal((cv3d::cv::gess::util::os *)objc_msgSend(v100, "endEncoding"));
            objc_msgSend(v97, "commit");
            objc_msgSend(v97, "waitUntilCompleted");
            objc_msgSend(v97, "error");
            v101 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
            v103 = cv3d::cv::gess::alg::internal::GPUEncountersError(v101, v102);

            if (v103)
            {
              if (v114)
                *(_DWORD *)(a8 + 384) = 16;
              if (*(_QWORD *)(a11 + 24))
              {
                std::string::basic_string[abi:ne180100]<0>(&v168, (char *)&unk_23C62207F);
                v155.i32[0] = 16;
                v104 = *(_QWORD *)(a11 + 24);
                if (!v104)
                  std::__throw_bad_function_call[abi:ne180100]();
                (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)v104 + 48))(v104, &v155, &v168);
                if (v169 < 0)
                  operator delete((void *)v168.i64[0]);
              }
              v115 = 0;
            }
            else
            {
              v105 = objc_msgSend(v125, "contents");
              LODWORD(v106) = 0;
              do
              {
                v107 = 0;
                v108 = v105 + v106;
                v109 = v163.__begin_[v106 >> 6];
                v110 = v163.__begin_[(v106 >> 6) | 1];
                do
                {
                  v111 = 0;
                  v112 = 0;
                  do
                    v112 = *(_BYTE *)(v108 + v111++) | (2 * v112);
                  while (v111 != 8);
                  v168.i8[v107++] = v112;
                  v108 += 8;
                }
                while (v107 != 16);
                *(float32x4_t *)(*(_QWORD *)(a4 + 16) + 4 * (v109 + *(_DWORD *)(a4 + 4) * v110) * *(_DWORD *)(a4 + 12)) = v168;
                v106 = (v106 + 128);
              }
              while (v38 > v106);
            }

          }
          goto LABEL_83;
        }
      }
      v87 = objc_msgSend(v125, "contents");
      if (v120)
      {
        v88 = 0;
        do
        {
          v89 = 0;
          v90 = v163.__begin_[v88 >> 6];
          v91 = v163.__begin_[(v88 >> 6) | 1];
          v92 = v87;
          do
          {
            v93 = 0;
            v94 = 0;
            do
              v94 = *(_BYTE *)(v92 + v93++) | (2 * v94);
            while (v93 != 8);
            *((_BYTE *)&v170 + v89++) = v94;
            v92 += 8;
          }
          while (v89 != 16);
          *(_OWORD *)(*(_QWORD *)(a4 + 16) + 4 * (v90 + *(_DWORD *)(a4 + 4) * v91) * *(_DWORD *)(a4 + 12)) = v170;
          v88 += 128;
          v87 += 128;
        }
        while (v131 > v88);
      }

      v38 = 0;
LABEL_45:
      v44 = *(_DWORD *)(a2 + 4);
      v37 = v134;
      goto LABEL_46;
    }
LABEL_83:
    if (v162[0])
    {
      v162[1] = v162[0];
      operator delete(v162[0]);
    }
    if (v163.__begin_)
    {
      v163.__end_ = v163.__begin_;
      operator delete(v163.__begin_);
    }
    v23 = v115;
    v22 = v125;
  }
  else
  {
    if (a9)
      *(_DWORD *)(a8 + 384) = 5;
    if (*(_QWORD *)(a11 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      LODWORD(v163.__begin_) = 5;
      v96 = *(_QWORD *)(a11 + 24);
      if (!v96)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, std::vector<unsigned int> *, void **))(*(_QWORD *)v96 + 48))(v96, &v163, __p);
      if (v159 < 0)
        operator delete(__p[0]);
    }

    v22 = 0;
    v126 = 0;
    v127 = 0;
    v121 = 0;
    v23 = 0;
  }
LABEL_88:

  objc_autoreleasePoolPop(context);
  return v23;
}

void sub_23C579B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;
  void *v71;
  void *v72;
  void *v74;

  if (__p)
    operator delete(__p);
  v74 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v74;
    operator delete(v74);
  }

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::internal::IsChartBoundary(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t i;
  unsigned int v47;

  v8 = a1 + 104;
  v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v10 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v9);
  if ((v12 & *v10) != 0)
    return 1;
  v47 = *a3;
  v13 = (uint64_t *)(a1 + 56);
  v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v13, &v47, v11);
  v15 = cv3d::cv::gess::mesh::Topology::h(v8, a2);
  v18 = *(unsigned int *)(v15 + 16);
  v19 = *(_QWORD *)(v14 + 40);
  if (v18 >= (*(_QWORD *)(v14 + 48) - v19) >> 2)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v15, v16, v17);
  v20 = *(_DWORD *)(v19 + 4 * v18);
  v47 = *a3;
  v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v13, &v47, v17);
  v22 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, a2);
  v23 = cv3d::cv::gess::mesh::Topology::h(v8, v22);
  v26 = *(unsigned int *)(v23 + 16);
  v27 = *(_QWORD *)(v21 + 40);
  if (v26 >= (*(_QWORD *)(v21 + 48) - v27) >> 2)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v23, v24, v25);
  if (v20 != *(_DWORD *)(v27 + 4 * v26))
    return 1;
  v47 = *a4;
  v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v13, &v47, v25);
  v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, a2);
  v30 = cv3d::cv::gess::mesh::Topology::h(v8, v29);
  v33 = *(unsigned int *)(v30 + 16);
  v35 = v28 + 40;
  v34 = *(_QWORD *)(v28 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v35 + 8) - v34) >> 2) <= v33)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v30, v31, v32);
  v47 = *a4;
  v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v13, &v47, v32);
  v37 = cv3d::cv::gess::mesh::Topology::h(v8, a2);
  v40 = *(unsigned int *)(v37 + 16);
  v41 = *(_QWORD *)(v36 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v36 + 48) - v41) >> 2) <= v40)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v37, v38, v39);
  v42 = 0;
  v43 = 0;
  v44 = v41 + 12 * v40;
  do
  {
    for (i = 0; i != 12; i += 4)
    {
      if (*(_DWORD *)(v34 + 12 * v33 + 4 * v42) == *(_DWORD *)(v44 + i))
        ++v43;
    }
    ++v42;
  }
  while (v42 != 3);
  return v43 < 2u;
}

uint64_t cv3d::cv::gess::internal::CalculateFaceLabels(uint64_t a1, float *a2, std::vector<unsigned int> *a3, void **a4, _DWORD *a5)
{
  float v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float32x4_t *v20;
  std::vector<int>::pointer end;
  int *v22;
  std::vector<int>::pointer begin;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  int *v29;
  int v30;
  _DWORD *v31;
  unint64_t i;
  float32x4_t *v33;
  float32x4_t v34;
  std::vector<int>::pointer v35;
  int *v36;
  std::vector<int>::pointer v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int v44;
  float32x4_t v45;
  float32x4_t v46;
  unint64_t v47;
  float32x4_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  float32x4_t *v55;
  char *v56;
  char *v57;
  float32x4_t v58;
  std::vector<int>::pointer v59;
  std::vector<int>::pointer v60;
  unsigned int v61;
  float32x4_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  float v68;
  float32x4_t v69;
  float v70;
  uint64_t v71;
  unint64_t j;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t k;
  float32x4_t *v94;
  unsigned int v95;
  int v96;
  float v97;
  uint64_t v98;
  unsigned int *v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  float v106;
  float v107;
  std::vector<unsigned int>::pointer v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t m;
  int v112;
  unsigned int *v113;
  _QWORD *v114;
  uint64_t v115;
  unsigned int *v116;
  signed int v117;
  unsigned int v118;
  float32x4_t *v119;
  float32x4_t *v120;
  int v121;
  float v122;
  unsigned int *v123;
  _QWORD *v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float v132;
  float32x4_t v133;
  float v134;
  float v136;
  int v137;
  unsigned int *v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float v147;
  float32x4_t v148;
  float v149;
  float v151;
  std::vector<unsigned int>::pointer v152;
  std::vector<unsigned int>::pointer v153;
  _DWORD *v154;
  uint64_t v155;
  std::vector<unsigned int>::size_type __sz;
  float v158;
  float32x4_t v159;
  float32x4_t v160;
  uint64_t v161;
  float v162;
  float32x4_t v163;
  float32x4_t v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  signed int v168;
  void *__p[2];
  __int128 v170;
  __int128 v171;
  std::vector<unsigned int> v172;
  void *v173;
  char *v174;
  char *v175;
  std::vector<int> v176;
  char *v177;
  unint64_t v178;
  _DWORD *v179;
  _BYTE *v180;
  unsigned int v181[5];

  cv3d::cv::gess::util::os::IsFloatBitSizeDefault((cv3d::cv::gess::util::os *)a1);
  v10 = cosf(*a2);
  cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal((uint64_t **)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  v179 = 0;
  v180 = 0;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v179, (unsigned __int8 *)__p);
  v181[0] = v11;
  if (SBYTE7(v170) < 0)
    operator delete(__p[0]);
  if (v11 == -1)
    cv3d::cv::gess::internal::CalculateFaceLabels();
  v12 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  __sz = v12;
  std::vector<std::pair<cv3d::cv::gess::mesh::FaceHandle,float>>::vector(&v179, v12);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      LODWORD(__p[0]) = v13;
      v15 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)__p);
      v16 = (float *)&v179[v14];
      *v16 = *(float *)__p;
      v16[1] = v15;
      v14 += 2;
      ++v13;
    }
    while (2 * v12 != v14);
  }
  v17 = 126 - 2 * __clz((v180 - (_BYTE *)v179) >> 3);
  if (v180 == (_BYTE *)v179)
    v18 = 0;
  else
    v18 = v17;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>((uint64_t)v179, (unint64_t)v180, v18, 1);
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::reserve(a4, 0x32uLL);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v177, v12, (unsigned __int8 *)__p);
  memset(&v176, 0, sizeof(v176));
  std::vector<unsigned int>::reserve(&v176, (unint64_t)(float)((float)v12 * 0.5));
  if ((_DWORD)v12)
  {
    v19 = 0;
    do
    {
      if (((*(_QWORD *)&v177[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v19) & 1) != 0)
      {
        ++v19;
      }
      else
      {
        v176.__end_ = v176.__begin_;
        v20 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v181[0], v179[2 * v19]);
        v162 = *(float *)&v179[2 * v19 + 1];
        v159 = *v20;
        end = v176.__end_;
        if (v176.__end_ >= v176.__end_cap_.__value_)
        {
          begin = v176.__begin_;
          v24 = v176.__end_ - v176.__begin_;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v26 = (char *)v176.__end_cap_.__value_ - (char *)v176.__begin_;
          if (((char *)v176.__end_cap_.__value_ - (char *)v176.__begin_) >> 1 > v25)
            v25 = v26 >> 1;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
            v27 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v176.__end_cap_, v27);
            begin = v176.__begin_;
            end = v176.__end_;
          }
          else
          {
            v28 = 0;
          }
          v29 = (int *)&v28[4 * v24];
          *v29 = v19;
          v22 = v29 + 1;
          while (end != begin)
          {
            v30 = *--end;
            *--v29 = v30;
          }
          v176.__begin_ = v29;
          v176.__end_ = v22;
          v176.__end_cap_.__value_ = (int *)&v28[4 * v27];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v176.__end_ = v19;
          v22 = end + 1;
        }
        v160 = vaddq_f32(vmulq_n_f32(v159, v162), (float32x4_t)0);
        v176.__end_ = v22;
        ++v19;
        v31 = v179;
        for (i = v19; i < (v180 - (_BYTE *)v31) >> 3; ++i)
        {
          v33 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v181[0], v31[2 * i]);
          v163 = *v33;
          v34 = vmulq_f32(*v33, *v20);
          v34.i32[3] = 0;
          v31 = v179;
          if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)) > v10)
          {
            v158 = *(float *)&v179[2 * i + 1];
            v35 = v176.__end_;
            if (v176.__end_ >= v176.__end_cap_.__value_)
            {
              v37 = v176.__begin_;
              v38 = v176.__end_ - v176.__begin_;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v40 = (char *)v176.__end_cap_.__value_ - (char *)v176.__begin_;
              if (((char *)v176.__end_cap_.__value_ - (char *)v176.__begin_) >> 1 > v39)
                v39 = v40 >> 1;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
              {
                v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v176.__end_cap_, v41);
                v37 = v176.__begin_;
                v35 = v176.__end_;
              }
              else
              {
                v42 = 0;
              }
              v43 = (int *)&v42[4 * v38];
              *v43 = i;
              v36 = v43 + 1;
              while (v35 != v37)
              {
                v44 = *--v35;
                *--v43 = v44;
              }
              v176.__begin_ = v43;
              v176.__end_ = v36;
              v176.__end_cap_.__value_ = (int *)&v42[4 * v41];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *v176.__end_ = i;
              v36 = v35 + 1;
            }
            v160 = vaddq_f32(v160, vmulq_n_f32(v163, v158));
            v176.__end_ = v36;
            v31 = v179;
          }
        }
        v45 = vmulq_f32(v160, v160);
        v45.i32[3] = 0;
        v45.i64[0] = vpaddq_f32(v45, v45).u64[0];
        v45.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v45.f32));
        v46 = vdivq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0));
        v48 = (float32x4_t *)a4[1];
        v47 = (unint64_t)a4[2];
        v164 = v46;
        if ((unint64_t)v48 >= v47)
        {
          v50 = ((char *)v48 - (_BYTE *)*a4) >> 4;
          if ((unint64_t)(v50 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v51 = v47 - (_QWORD)*a4;
          v52 = v51 >> 3;
          if (v51 >> 3 <= (unint64_t)(v50 + 1))
            v52 = v50 + 1;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
            v53 = 0xFFFFFFFFFFFFFFFLL;
          else
            v53 = v52;
          if (v53)
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a4 + 2), v53);
          else
            v54 = 0;
          v55 = (float32x4_t *)&v54[16 * v50];
          *v55 = v164;
          v49 = (char *)&v55[1];
          v57 = (char *)*a4;
          v56 = (char *)a4[1];
          if (v56 != *a4)
          {
            do
            {
              v58 = *((float32x4_t *)v56 - 1);
              v56 -= 16;
              v55[-1] = v58;
              --v55;
            }
            while (v56 != v57);
            v56 = (char *)*a4;
          }
          *a4 = v55;
          a4[1] = v49;
          a4[2] = &v54[16 * v53];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v48 = v46;
          v49 = (char *)&v48[1];
        }
        a4[1] = v49;
        v59 = v176.__begin_;
        v60 = v176.__end_;
        if (v176.__begin_ != v176.__end_)
        {
          v61 = v181[0];
          do
          {
            v62 = vmulq_f32(v164, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v61, v179[2 * *v59]));
            v62.i32[3] = 0;
            if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62)) > v10)
              *(_QWORD *)&v177[((unint64_t)*v59 >> 3) & 0x1FFFFFF8] |= 1 << *v59;
            ++v59;
          }
          while (v59 != v60);
        }
      }
    }
    while (v19 != __sz);
  }
  v180 = v179;
  std::vector<int>::resize(a3, __sz);
  v63 = (unint64_t)((_BYTE *)a4[1] - (_BYTE *)*a4) >> 4;
  *a5 = v63;
  if (__sz)
  {
    v64 = 0;
    if ((_DWORD)v63)
      goto LABEL_76;
LABEL_81:
    v66 = 0;
    while (1)
    {
      a3->__begin_[v64++] = v66;
      if (v64 == __sz)
        break;
      if (!*a5)
        goto LABEL_81;
LABEL_76:
      v65 = 0;
      v66 = 0;
      v67 = v181[0];
      v68 = -3.4028e38;
      do
      {
        v69 = vmulq_f32(*(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v67, v64), *((float32x4_t *)*a4 + v65));
        v69.i32[3] = 0;
        v70 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69));
        if (v70 > v68)
        {
          v66 = v65;
          v68 = v70;
        }
        ++v65;
      }
      while (v65 < *a5);
    }
  }
  v173 = 0;
  v174 = 0;
  v175 = 0;
  std::vector<unsigned int>::vector(&v172, __sz);
  std::vector<BOOL>::resize((uint64_t)&v177, __sz, 0);
  if (v178)
  {
    __p[0] = v177;
    LODWORD(__p[1]) = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)__p, v178);
  }
  if (__sz)
  {
    for (j = 0; j != __sz; ++j)
    {
      if ((*(_QWORD *)&v177[8 * (j >> 6)] & (1 << j)) == 0)
      {
        v73 = v174;
        if (v174 >= v175)
        {
          v75 = (char *)v173;
          v76 = (v174 - (_BYTE *)v173) >> 2;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v78 = v175 - (_BYTE *)v173;
          if ((v175 - (_BYTE *)v173) >> 1 > v77)
            v77 = v78 >> 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v175, v79);
            v75 = (char *)v173;
            v73 = v174;
          }
          else
          {
            v80 = 0;
          }
          v81 = &v80[4 * v76];
          *(_DWORD *)v81 = 1;
          v74 = v81 + 4;
          while (v73 != v75)
          {
            v82 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v81 - 1) = v82;
            v81 -= 4;
          }
          v173 = v81;
          v174 = v74;
          v175 = &v80[4 * v79];
          if (v75)
            operator delete(v75);
        }
        else
        {
          *(_DWORD *)v174 = 1;
          v74 = v73 + 4;
        }
        v174 = v74;
        v83 = v173;
        v170 = 0u;
        v171 = 0u;
        *(_OWORD *)__p = 0u;
        v168 = j;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v168);
        v84 = ((unint64_t)(v74 - v83) >> 2) - 1;
        *(_QWORD *)&v177[8 * (j >> 6)] |= 1 << j;
        v172.__begin_[j] = v84;
        v85 = *((_QWORD *)&v171 + 1);
        if (*((_QWORD *)&v171 + 1))
        {
          v86 = a3->__begin_[j];
          do
          {
            v168 = *(_DWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v171 >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * (v171 & 0x3FF));
            *(_QWORD *)&v171 = v171 + 1;
            *((_QWORD *)&v171 + 1) = v85 - 1;
            if ((unint64_t)v171 >= 0x800)
            {
              operator delete(*(void **)__p[1]);
              __p[1] = (char *)__p[1] + 8;
              *(_QWORD *)&v171 = v171 - 1024;
            }
            v87 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v168);
            v167 = v87;
            do
            {
              v167 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v167) + 8);
              v88 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v167);
              v89 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v88);
              if ((*v89 & v90) == 0)
              {
                v91 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v167);
                v166 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v91) + 16);
                if (((*(_QWORD *)&v177[((unint64_t)v166 >> 3) & 0x1FFFFFF8] >> v166) & 1) == 0
                  && a3->__begin_[v166] == v86)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(__p, &v166);
                  v92 = v166;
                  *(_QWORD *)&v177[((unint64_t)v166 >> 3) & 0x1FFFFFF8] |= 1 << v166;
                  v172.__begin_[v92] = v84;
                  ++*((_DWORD *)v173 + v84);
                }
              }
            }
            while (v167 != v87);
            v85 = *((_QWORD *)&v171 + 1);
          }
          while (*((_QWORD *)&v171 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](__p);
      }
    }
    for (k = 0; k != __sz; ++k)
    {
      if (*((_DWORD *)v173 + v172.__begin_[k]) == 1)
      {
        v94 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v181[0], k);
        v95 = a3->__begin_[k];
        LODWORD(__p[0]) = k;
        v96 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v96;
        v97 = 0.5;
        v98 = 0xFFFFFFFFLL;
        do
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          v99 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          v100 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v99);
          if ((*v100 & v101) == 0)
          {
            v102 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v103 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v102);
            v104 = *(unsigned int *)(v103 + 16);
            v105 = vmulq_f32(*((float32x4_t *)*a4 + a3->__begin_[v104]), *v94);
            v105.i32[3] = 0;
            v106 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v105, v105));
            if (v106 > v97)
            {
              v107 = v106 * (float)*((unsigned int *)v173 + v172.__begin_[v104]);
              if (v107 > v10)
              {
                v98 = *(unsigned int *)(v103 + 16);
                v95 = a3->__begin_[v104];
                v97 = v107;
              }
            }
          }
        }
        while (LODWORD(__p[0]) != v96);
        if (a3->__begin_[k] != v95)
        {
          a3->__begin_[k] = v95;
          v108 = v172.__begin_;
          v109 = v173;
          *((_DWORD *)v173 + v172.__begin_[k]) = 0;
          v110 = v108[v98];
          v108[k] = v110;
          ++v109[v110];
        }
      }
    }
    for (m = 0; m != __sz; ++m)
    {
      if (*((_DWORD *)v173 + v172.__begin_[m]) == 2)
      {
        LODWORD(__p[0]) = m;
        v112 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v112;
        while (1)
        {
          LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
          v113 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          v114 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v113);
          if ((*v114 & v115) == 0)
          {
            v116 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v117 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v116) + 16);
            if (a3->__begin_[v117] == a3->__begin_[m])
              break;
          }
          if (LODWORD(__p[0]) == v112)
            goto LABEL_134;
        }
        if (v117 != -1)
        {
          v118 = v181[0];
          v119 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v181[0], m);
          v120 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, v118, v117);
          v165 = a3->__begin_[m];
          v168 = m;
          v121 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v168);
          LODWORD(__p[0]) = v121;
          v122 = 0.5;
          v161 = 0xFFFFFFFFLL;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            v123 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v124 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v123);
            if ((*v124 & v125) == 0)
            {
              v126 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              v127 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v126);
              v128 = *(unsigned int *)(v127 + 16);
              v129 = a3->__begin_[v128];
              if ((_DWORD)v129 != a3->__begin_[m])
              {
                v130 = *((float32x4_t *)*a4 + v129);
                v131 = vmulq_f32(*v119, v130);
                v131.i32[3] = 0;
                v132 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v131, v131));
                v133 = vmulq_f32(v130, *v120);
                v133.i32[3] = 0;
                v134 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v133, v133));
                if (v132 > v10 && v134 > v10)
                {
                  v136 = (float)(v132 + v134) * (float)*((unsigned int *)v173 + v172.__begin_[v128]);
                  if (v136 > v122)
                  {
                    v161 = *(unsigned int *)(v127 + 16);
                    v165 = a3->__begin_[v128];
                    v122 = v136;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v121);
          v168 = v117;
          v137 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v168);
          LODWORD(__p[0]) = v137;
          do
          {
            LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
            v138 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
            v139 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v138);
            if ((*v139 & v140) == 0)
            {
              v141 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
              v142 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v141);
              v143 = *(unsigned int *)(v142 + 16);
              v144 = a3->__begin_[v143];
              if ((_DWORD)v144 != a3->__begin_[v117])
              {
                v145 = *((float32x4_t *)*a4 + v144);
                v146 = vmulq_f32(*v119, v145);
                v146.i32[3] = 0;
                v147 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v146, v146));
                v148 = vmulq_f32(v145, *v120);
                v148.i32[3] = 0;
                v149 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v148, v148));
                if (v147 > v10 && v149 > v10)
                {
                  v151 = (float)(v147 + v149) * (float)*((unsigned int *)v173 + v172.__begin_[v143]);
                  if (v151 > v122)
                  {
                    v161 = *(unsigned int *)(v142 + 16);
                    v165 = a3->__begin_[v143];
                    v122 = v151;
                  }
                }
              }
            }
          }
          while (LODWORD(__p[0]) != v137);
          v152 = a3->__begin_;
          if (a3->__begin_[m] != v165 && v152[v117] != v165)
          {
            v152[v117] = v165;
            v152[m] = v165;
            v153 = v172.__begin_;
            v154 = v173;
            *((_DWORD *)v173 + v172.__begin_[m]) = 0;
            v155 = v153[v161];
            v153[v117] = v155;
            v153[m] = v155;
            v154[v155] += 2;
          }
        }
      }
LABEL_134:
      ;
    }
  }
  if (v181[0] != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), v181, v71);
  v181[0] = -1;
  if (v172.__begin_)
  {
    v172.__end_ = v172.__begin_;
    operator delete(v172.__begin_);
  }
  if (v173)
  {
    v174 = (char *)v173;
    operator delete(v173);
  }
  if (v176.__begin_)
  {
    v176.__end_ = v176.__begin_;
    operator delete(v176.__begin_);
  }
  if (v177)
    operator delete(v177);
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
  return 1;
}

void sub_23C57ADC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;

  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  if (*(_QWORD *)v37)
    operator delete(*(void **)v37);
  v39 = *(void **)(v37 + 24);
  if (v39)
  {
    *(_QWORD *)(v37 + 32) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 7) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF)) = *a2;
  ++a1[5];
}

uint64_t cv3d::cv::gess::internal::SeperateChartGroups(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, std::vector<unsigned int> *a6)
{
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::vector<unsigned int>::size_type v62;
  uint64_t v63;
  int v64;
  unint64_t v66;
  uint64_t **v67;
  std::vector<unsigned int> *v68;
  float32x4_t v71;
  unsigned int v72;
  unsigned int v73;
  void *__p;
  unsigned int v75;
  unsigned int v76;
  __int128 v77;
  __int128 v78;
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v75 = -1;
  v76 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v9 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v76, (unsigned __int8 *)&v80);
  v11 = v9;
  if (SBYTE7(v81) < 0)
  {
    operator delete((void *)v80);
    if (v11)
      goto LABEL_3;
  }
  else if (v9)
  {
LABEL_3:
    LODWORD(v80) = v76;
    v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v80, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a1, &v76, &v80);
  if (SBYTE7(v81) < 0)
    operator delete((void *)v80);
LABEL_7:
  std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v77) = 0;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v77, (unsigned __int8 *)&v80);
  v75 = v13;
  if (SBYTE7(v81) < 0)
    operator delete((void *)v80);
  if (v13 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a1, &v75, &v80);
    if (SBYTE7(v81) < 0)
      operator delete((void *)v80);
  }
  v66 = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  v14 = (v66 >> 2);
  LOBYTE(v80) = 0;
  std::vector<BOOL>::vector(&__p, v14, (unsigned __int8 *)&v80);
  v67 = (uint64_t **)(a1 + 56);
  v68 = a6;
  if ((v66 >> 2))
  {
    v16 = 0;
    v17 = (uint64_t *)(a1 + 80);
    do
    {
      if ((*((_QWORD *)__p + (v16 >> 6)) & (1 << v16)) == 0)
      {
        LODWORD(v80) = v76;
        v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v17, (unsigned int *)&v80, v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
        LODWORD(v80) = v76;
        v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v17, (unsigned int *)&v80, v19);
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v22 = (v21 - 1);
        std::to_string((std::string *)&v80, v21 - 1);
        v23 = std::string::insert((std::string *)&v80, 0, "g", 1uLL);
        v24 = v23->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v77 = v23->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v77 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v26 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(a1, v76, v22);
        v27 = v26;
        if (*(char *)(v26 + 23) < 0)
          operator delete(*(void **)v26);
        *(_QWORD *)v27 = v24;
        *(_QWORD *)(v27 + 8) = v77;
        *(_QWORD *)(v27 + 15) = *(_QWORD *)((char *)&v77 + 7);
        *(_BYTE *)(v27 + 23) = v25;
        if (SBYTE7(v81) < 0)
          operator delete((void *)v80);
        v81 = 0u;
        v82 = 0u;
        v80 = 0u;
        LODWORD(v77) = v16;
        std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(&v80, &v77);
        *((_QWORD *)__p + (v16 >> 6)) |= 1 << v16;
        v28 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          v29 = *(_DWORD *)(*a5 + 4 * v16);
          do
          {
            v30 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v80 + 1) + (((unint64_t)v82 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v82 & 0x3FF));
            LODWORD(v77) = v30;
            *(_QWORD *)&v82 = v82 + 1;
            *((_QWORD *)&v82 + 1) = v28 - 1;
            if ((unint64_t)v82 >= 0x800)
            {
              operator delete(**((void ***)&v80 + 1));
              *((_QWORD *)&v80 + 1) += 8;
              *(_QWORD *)&v82 = v82 - 1024;
              v30 = v77;
            }
            *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v75, v30) = v22;
            v31 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v77);
            v73 = v31;
            do
            {
              v73 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73) + 8);
              v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
              v33 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v32);
              if ((*v33 & v34) == 0)
              {
                v35 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
                v72 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v35) + 16);
                if (((*(_QWORD *)((char *)__p + (((unint64_t)v72 >> 3) & 0x1FFFFFF8)) >> v72) & 1) == 0
                  && *(_DWORD *)(*a5 + 4 * v72) == v29)
                {
                  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(&v80, &v72);
                  *(_QWORD *)((char *)__p + (((unint64_t)v72 >> 3) & 0x1FFFFFF8)) |= 1 << v72;
                }
              }
            }
            while (v73 != v31);
            v28 = *((_QWORD *)&v82 + 1);
          }
          while (*((_QWORD *)&v82 + 1));
        }
        std::deque<int>::~deque[abi:ne180100](&v80);
        v14 = (v66 >> 2);
        v17 = (uint64_t *)(a1 + 80);
      }
      ++v16;
    }
    while (v16 != v14);
  }
  *(_QWORD *)&v80 = &off_250D4A840;
  *((_QWORD *)&v80 + 1) = a5;
  *((_QWORD *)&v81 + 1) = &v80;
  cv3d::cv::gess::alg::SortFaceByGroupID(a1, (uint64_t)&v80);
  v36 = (__int128 *)*((_QWORD *)&v81 + 1);
  if (*((__int128 **)&v81 + 1) == &v80)
  {
    v37 = 4;
    v36 = &v80;
  }
  else
  {
    if (!*((_QWORD *)&v81 + 1))
      goto LABEL_37;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_37:
  v38 = *a3;
  if (a3[1] != *a3)
  {
    v39 = 0;
    v40 = 0;
    v41 = xmmword_23C60C4E0;
    v42 = unk_23C60C4F0;
    do
    {
      v43 = 0;
      v44 = *(float32x4_t *)(*a4 + 16 * v39);
      v45 = v38 + 36 * v39;
      v46 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL), (int32x4_t)v44);
      v47 = (int32x4_t)vmulq_f32(v44, (float32x4_t)xmmword_23C605200);
      v48 = vmulq_f32(v44, (float32x4_t)xmmword_23C605210);
      v48.i32[3] = 0;
      v71 = v48;
      v49 = vmlsq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v47, (int32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 0xCuLL)), v47), (float32x4_t)xmmword_23C605200, v46);
      v50 = vmulq_f32(v49, v49);
      v50.i32[3] = 0;
      LODWORD(v77) = 0;
      DWORD1(v77) = v49.i32[2];
      LODWORD(v78) = 0;
      *((float *)&v78 + 3) = -v49.f32[0];
      *((float32x2_t *)&v77 + 1) = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 4uLL));
      v51 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v50, v50));
      *(_QWORD *)((char *)&v78 + 4) = v49.i64[0];
      v79 = 0;
      *(_OWORD *)v45 = xmmword_23C603EC0;
      *(_OWORD *)(v45 + 16) = xmmword_23C603EC0;
      *(_DWORD *)(v45 + 32) = 1065353216;
      v80 = v41;
      v81 = v42;
      LODWORD(v82) = 1065353216;
      do
      {
        *(float *)((char *)&v80 + v43) = *(float *)(v38 + 36 * v40 + v43) + *(float *)((char *)&v77 + v43);
        v43 += 4;
      }
      while (v43 != 36);
      *(_OWORD *)v45 = v80;
      *(_OWORD *)(v45 + 16) = v81;
      *(_DWORD *)(v45 + 32) = v82;
      cv3d::cv::gess::math::Matrix3T<float>::operator*((float *)&v77, (uint64_t)&v77, (uint64_t)&v80);
      v52 = sqrtf(v51);
      v77 = v80;
      v78 = v81;
      v79 = v82;
      v42 = unk_23C60C4F0;
      v41 = xmmword_23C60C4E0;
      if (fabsf(v52) > 0.00000001)
      {
        v53 = 0;
        LODWORD(v82) = 1065353216;
        v54 = (1.0 - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v71, v71))) / (float)(v52 * v52);
        v80 = xmmword_23C60C4E0;
        v81 = unk_23C60C4F0;
        do
        {
          *(float *)((char *)&v80 + v53) = *(float *)((char *)&v77 + v53) * v54;
          v53 += 4;
        }
        while (v53 != 36);
        v77 = v80;
        v78 = v81;
        v79 = v82;
      }
      v55 = 0;
      LODWORD(v82) = 1065353216;
      v80 = xmmword_23C60C4E0;
      v81 = unk_23C60C4F0;
      do
      {
        *(float *)((char *)&v80 + v55) = *(float *)(v38 + 36 * v40 + v55) + *(float *)((char *)&v77 + v55);
        v55 += 4;
      }
      while (v55 != 36);
      *(_OWORD *)v45 = v80;
      *(_OWORD *)(v45 + 16) = v81;
      *(_DWORD *)(v45 + 32) = v82;
      v38 = *a3;
      v39 = ++v40;
    }
    while (0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 2) > v40);
  }
  v73 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  DWORD2(v77) = 0;
  *(_QWORD *)&v77 = 0;
  v56 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(v67, (uint64_t)&v77, (unsigned __int8 *)&v80);
  v73 = v56;
  if (SBYTE7(v81) < 0)
    operator delete((void *)v80);
  if (v56 != -1)
  {
    if (v73 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)v67, &v73);
    v73 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, &v73, &v80);
  if (SBYTE7(v81) < 0)
    operator delete((void *)v80);
  std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)&v77 = 0;
  v58 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v77, (unsigned __int8 *)&v80);
  if (SBYTE7(v81) < 0)
    operator delete((void *)v80);
  if (v58 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v80, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    *(_QWORD *)&v77 = 0;
    cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((char **)(a1 + 80), (uint64_t)&v77, &v80);
    if (SBYTE7(v81) < 0)
      operator delete((void *)v80);
  }
  else
  {
    LODWORD(v80) = v58;
    v59 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v80, v57);
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 40))(v59);
  }
  LODWORD(v80) = v76;
  v61 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v80, v60);
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
  std::vector<int>::resize(v68, v62);
  if ((v66 & 0x3FFFFFFFCLL) != 0)
  {
    v63 = 0;
    v64 = 0;
    do
    {
      if (v64 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v75, v63))
        v68->__begin_[v64++] = v63;
      ++v63;
    }
    while ((v66 >> 2) != v63);
  }
  if (__p)
    operator delete(__p);
  return 1;
}

void sub_23C57B81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  uint64_t v29;

  if (*(char *)(v29 - 153) < 0)
    operator delete(*(void **)(v29 - 176));
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), &v9);
  v7 = *(_QWORD *)(v4 + 40);
  if (a3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 2))
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 4 * a3;
}

BOOL cv3d::cv::gess::internal::PerformPacking(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8[4];
  void *__p;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 12);
  switch(v4)
  {
    case 2:
      v8[0] = *(unsigned __int8 *)(a2 + 8);
      cv3d::cv::gess::internal::XAtlasPacking(a1, (_DWORD *)(a2 + 4), v8, (float *)(a2 + 16), 0, 0);
      break;
    case 1:
      cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(v8, a1, a3, a2 + 4, a2 + 8, a2 + 16, 1, 0);
      cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)v8);
      cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)v8);
      break;
    case 0:
      cv3d::cv::gess::binpack::Binpack::Binpack((cv3d::cv::gess::binpack::Binpack *)v8, (cv3d::cv::gess::mesh::TriMesh *)a1, (const unsigned int *)(a2 + 4), (const unsigned __int8 *)(a2 + 8));
      cv3d::cv::gess::binpack::Binpack::BinpackTexture((cv3d::cv::gess::binpack::Binpack *)v8, v5, v6);
      if (__p)
      {
        v10 = __p;
        operator delete(__p);
      }
      break;
  }
  return *(_DWORD *)(a3 + 76) != 2;
}

void sub_23C57BAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::BlenderUV2Parameterize(uint64_t a1, float *a2, uint64_t a3)
{
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  BOOL *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  int v14;
  int v15;
  _QWORD *v16;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v19;
  uint64_t v20;
  std::vector<unsigned int>::pointer v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  float *v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  __int128 *v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  float v38;
  float *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  const unsigned int *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  std::vector<unsigned int>::size_type v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::vector<unsigned int>::pointer v58;
  std::vector<unsigned int>::pointer v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  std::chrono::system_clock::time_point v68;
  std::chrono::system_clock::time_point v69;
  uint64_t v70;
  std::chrono::system_clock::time_point v71;
  _BOOL8 v72;
  std::chrono::system_clock::time_point v73;
  int v75;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  unsigned int v80;
  char v81;
  unsigned int v82;
  unsigned int v83;
  std::vector<unsigned int> v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  std::vector<unsigned int> v88;
  unsigned int v89;
  void *v90;
  void *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  void *__p[2];
  __int128 v96;
  int v97;
  _DWORD v98[4];
  int v99;
  void *v100[3];
  std::vector<unsigned int> v101;
  unsigned int v102;
  void *v103;
  void *v104;
  uint64_t v105;
  std::vector<unsigned int> v106;
  char v107;

  rep = std::chrono::system_clock::now().__d_.__rep_;
  v107 = 0;
  v8 = cv3d::cv::gess::alg::RepairDegeneratedTriangles((float32x4_t *)a1, (cv3d::cv::gess::mesh::TriMesh *)1, 0.001, &v107, v7);
  memset(&v106, 0, sizeof(v106));
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v102 = 0;
  cv3d::cv::gess::internal::CalculateFaceLabels(a1, a2, &v106, &v103, &v102);
  memset(&v101, 0, sizeof(v101));
  std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(v100, v102);
  cv3d::cv::gess::internal::SeperateChartGroups(a1, v9, (uint64_t *)v100, &v103, &v106, &v101);
  v11 = -1;
  v99 = -1;
  v76 = rep;
  if (!v8)
    goto LABEL_14;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v12 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v99, (unsigned __int8 *)__p);
  v13 = v12;
  if (SBYTE7(v96) < 0)
  {
    operator delete(__p[0]);
    if (v13)
      goto LABEL_4;
    goto LABEL_13;
  }
  if (!v12)
  {
LABEL_13:
    v8 = 0;
LABEL_14:
    v15 = -1;
    v78 = -1;
    goto LABEL_15;
  }
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v93) = 0;
  v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v93, (unsigned __int8 *)__p);
  if (SBYTE7(v96) < 0)
    operator delete(__p[0]);
  if (v14 == -1)
  {
    v8 = 0;
    v15 = -1;
    v78 = -1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v94) = 0;
    v93 = 0;
    v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v93, (unsigned __int8 *)__p);
    if (SBYTE7(v96) < 0)
      operator delete(__p[0]);
    v78 = v14;
    if (v15 == -1)
    {
      v8 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      v93 = 0;
      v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v93, (unsigned __int8 *)__p);
      v8 = v11 != -1;
      if (SBYTE7(v96) < 0)
        operator delete(__p[0]);
    }
  }
LABEL_15:
  LODWORD(__p[0]) = v11;
  v79 = (uint64_t *)(a1 + 80);
  v16 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p, v10);
  v77 = (uint64_t)a2;
  v98[0] = v99;
  v98[1] = v78;
  v98[2] = v15;
  v98[3] = v11;
  *(_OWORD *)__p = 0u;
  v96 = 0u;
  v97 = 1065353216;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v93, 3uLL);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  begin = v101.__begin_;
  end = v101.__end_;
  LODWORD(v88.__begin_) = v99;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)&v88, v19);
  if (end - begin != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20))
    __assert_rtn("BlenderUV2Parameterize", "BlenderUV2.cpp", 441, "g_starts.size() == mesh.attribute(m_chart_g_ah).Size()");
  v21 = v101.__begin_;
  if (v101.__end_ != v101.__begin_)
  {
    v75 = v8;
    v22 = 0;
    v23 = 0;
    v81 = 0;
    v24 = v101.__end_ - v101.__begin_;
    v82 = v15;
    do
    {
      v89 = 0;
      v25 = v21[v22];
      v89 = v21[v22];
      v80 = v23;
      if (v23 >= (int)v24 - 1)
        v26 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
      else
        LODWORD(v26) = v21[v23 + 1];
      if (v25 < v26)
      {
        v27 = v106.__begin_[v25];
        v83 = v27;
        do
        {
          if (v106.__begin_[v25] != v27)
            __assert_rtn("BlenderUV2Parameterize", "BlenderUV2.cpp", 447, "face_labels[i] == label");
          v28 = (char *)v100[0];
          std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v88, 3uLL);
          LODWORD(v84.__begin_) = v25;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v84, &v88);
          v29 = 0;
          v87 = 0;
          v30 = (float *)&v28[36 * v27];
          v86 = 0;
          do
          {
            LODWORD(v84.__begin_) = v88.__begin_[v29];
            if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)&v84))
            {
              LODWORD(v84.__begin_) = v88.__begin_[v29];
              v31 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)&v84);
              if (!v31)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              *((_DWORD *)&v86 + v29) = *((_DWORD *)v31 + 5);
            }
            else
            {
              (*(void (**)(_QWORD *))(*v16 + 48))(v16);
              v32 = (*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
              LODWORD(v85) = v88.__begin_[v29];
              v84.__begin_ = (std::vector<unsigned int>::pointer)&v85;
              v33 = (v32 - 1);
              *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)__p, (unsigned int *)&v85, (uint64_t)&std::piecewise_construct, &v84.__begin_)+ 5) = v33;
              *((_DWORD *)&v86 + v29) = v33;
              v34 = (__int128 *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v88.__begin_[v29]);
              v35 = 0;
              v85 = *v34;
              v84.__begin_ = 0;
              v84.__end_ = 0;
              v36 = v30;
              do
              {
                v37 = 0;
                v38 = 0.0;
                v39 = v36;
                do
                {
                  v40 = *v39;
                  v39 += 3;
                  v38 = v38 + (float)(v40 * *(float *)((char *)&v85 + v37));
                  v37 += 4;
                }
                while (v37 != 12);
                *((float *)&v84.__begin_ + v35++) = v38;
                ++v36;
              }
              while (v35 != 3);
              v41 = v16[5];
              if (v33 >= (v16[6] - v41) >> 3)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_QWORD *)(v41 + 8 * v33) = v84.__begin_;
            }
            ++v29;
          }
          while (v29 != 3);
          v42 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v82, v25);
          *(_QWORD *)v42 = v86;
          *(_DWORD *)(v42 + 8) = v87;
          v27 = v83;
          if (v88.__begin_)
          {
            v88.__end_ = v88.__begin_;
            operator delete(v88.__begin_);
          }
          LODWORD(v25) = v25 + 1;
        }
        while ((_DWORD)v25 != (_DWORD)v26);
        LODWORD(v25) = v89;
      }
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v90, (v26 - v25));
      v43 = v89;
      if (v89 < v26)
      {
        do
        {
          *((_DWORD *)v90 + v43 - v89) = v43;
          ++v43;
        }
        while ((_DWORD)v26 != v43);
      }
      v45 = cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(a1, (unsigned int **)&v90, v98);
      if (v45)
      {
        LODWORD(v88.__begin_) = v26 - 1;
        cv3d::cv::gess::alg::SortFaceByGroupID32Bit((cv3d::cv::gess::alg *)a1, (cv3d::cv::gess::mesh::TriMesh *)&v89, (const unsigned int *)&v88, v44);
      }
      v81 |= v45;
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(__p);
      v22 = v80 + 1;
      v21 = v101.__begin_;
      v24 = v101.__end_ - v101.__begin_;
      v23 = v80 + 1;
    }
    while (v24 > v22);
    if ((v81 & 1) != 0)
    {
      LODWORD(v88.__begin_) = v98[0];
      v47 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v79, (unsigned int *)&v88, v46);
      v48 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
      std::vector<unsigned int>::vector(&v88, v48);
      if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
      {
        v49 = 0;
        v50 = 0;
        v51 = -1;
        v52 = 1;
        do
        {
          LODWORD(v84.__begin_) = v78;
          v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v84);
          v54 = *(_QWORD *)(v53 + 40);
          if (v49 >= (*(_QWORD *)(v53 + 48) - v54) >> 2)
LABEL_91:
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          if (v51 != *(_DWORD *)(v54 + 4 * v49))
          {
            LODWORD(v84.__begin_) = v78;
            v55 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v84);
            v56 = *(_QWORD *)(v55 + 40);
            if (v49 >= (*(_QWORD *)(v55 + 48) - v56) >> 2)
              goto LABEL_91;
            v51 = *(_DWORD *)(v56 + 4 * v49);
            v88.__begin_[v50++] = v51;
          }
          v49 = v52++;
        }
        while (v49 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
      }
      std::vector<unsigned int>::vector(&v84, v48);
      if (v48)
      {
        v57 = 0;
        v58 = v88.__begin_;
        v59 = v84.__begin_;
        do
        {
          v59[v58[v57]] = v57;
          ++v57;
        }
        while (v48 != v57);
      }
      v8 = v75;
      if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
      {
        v60 = 0;
        v61 = 1;
        do
        {
          LODWORD(v85) = v78;
          v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v85);
          v63 = *(_QWORD *)(v62 + 40);
          if (v60 >= (*(_QWORD *)(v62 + 48) - v63) >> 2)
LABEL_92:
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v64 = *(unsigned int *)(v63 + 4 * v60);
          v65 = v84.__begin_[v64];
          if (v65 != (_DWORD)v64)
          {
            LODWORD(v85) = v78;
            v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v85);
            v67 = *(_QWORD *)(v66 + 40);
            if (v60 >= (*(_QWORD *)(v66 + 48) - v67) >> 2)
              goto LABEL_92;
            *(_DWORD *)(v67 + 4 * v60) = v65;
          }
          v60 = v61++;
        }
        while (v60 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
      }
      if (v84.__begin_)
      {
        v84.__end_ = v84.__begin_;
        operator delete(v84.__begin_);
      }
      if (v88.__begin_)
      {
        v88.__end_ = v88.__begin_;
        operator delete(v88.__begin_);
      }
    }
  }
  v68.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(a3 + 80))
  {
    *(double *)a3 = (double)(v68.__d_.__rep_ - v76) / 1000000.0;
    LODWORD(v88.__begin_) = v99;
    v70 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v79, (unsigned int *)&v88, v69.__d_.__rep_);
    *(_QWORD *)(a3 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
  }
  v71.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (v8)
    v72 = cv3d::cv::gess::internal::PerformPacking((uint64_t **)a1, v77, a3);
  else
    v72 = 0;
  v73.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(a3 + 80))
  {
    *(double *)(a3 + 48) = (double)(v73.__d_.__rep_ - v71.__d_.__rep_) / 1000000.0;
    *(_QWORD *)(a3 + 56) = *(unsigned __int8 *)(v77 + 8);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v100[0])
  {
    v100[1] = v100[0];
    operator delete(v100[0]);
  }
  if (v101.__begin_)
  {
    v101.__end_ = v101.__begin_;
    operator delete(v101.__begin_);
  }
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (v106.__begin_)
  {
    v106.__end_ = v106.__begin_;
    operator delete(v106.__begin_);
  }
  return v72;
}

void sub_23C57C3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  v44 = *(void **)(v42 - 200);
  if (v44)
  {
    *(_QWORD *)(v42 - 192) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 176);
  if (v45)
  {
    *(_QWORD *)(v42 - 168) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v42 - 144);
  if (v46)
  {
    *(_QWORD *)(v42 - 136) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v42 - 120);
  if (v47)
  {
    *(_QWORD *)(v42 - 112) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(uint64_t a1, unsigned int **a2, _DWORD *a3)
{
  uint64_t v6;
  _DWORD *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  int v12;
  void *__p;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  v19 = -1;
  v20 = -1;
  v6 = cv3d::cv::gess::internal::CheckSelfIntersect(a1, a2, a3, &v20, &v19);
  if ((_DWORD)v6)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    __p = 0;
    v14 = 0;
    v15 = 0;
    cv3d::cv::gess::internal::BipartitionChart(a1, (uint64_t *)a2, (uint64_t)a3, &v20, &v19, (char **)&v16, (char **)&__p);
    v7 = v16;
    v8 = v17;
    if (v16 == v17 || (v9 = __p, __p == v14))
      __assert_rtn("CheckAndRepairSelfIntersectionForOneChart", "BlenderUV2.cpp", 982, "!sub_chart_group0.empty() && !sub_chart_group1.empty()");
    if (v17 - (_BYTE *)v16 < (unint64_t)(v14 - (_BYTE *)__p))
    {
      v16 = __p;
      v17 = v14;
      __p = v7;
      v14 = v8;
      v10 = v18;
      v18 = v15;
      v15 = v10;
      v7 = v9;
    }
    v12 = *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, a3[1], *v7);
    cv3d::cv::gess::internal::AssignChartToNewGroup(a1, &__p, a3, &v12);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(a1, &v16, a3);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart(a1, &__p, a3);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
  }
  return v6;
}

void sub_23C57C708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::ChartBoundaryEdge::Intersects(float *a1, float *a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = 0x3F50624DD2F1A9FCLL;
  v3 = 0x3EB0C6F7A0B5ED8DLL;
  return cv3d::cv::gess::alg::Edge2DIntersects(a1, a1 + 2, a2, a2 + 2, (double *)&v4, (double *)&v3) != 3;
}

uint64_t cv3d::cv::gess::internal::ContainUVID(_DWORD *a1, int *a2)
{
  int v2;
  int v3;
  int v5;

  v2 = *a2;
  if (*a2 == *a1)
  {
    LOBYTE(v3) = 1;
  }
  else
  {
    v5 = v2 == a1[1] || v2 == a1[2];
    v3 = v5 << 31 >> 31;
  }
  return v3 & 1;
}

uint64_t cv3d::cv::gess::internal::CheckNonManifoldOverlapping(uint64_t a1, uint64_t a2, unsigned int *a3, _DWORD *a4, int *a5, uint64_t a6)
{
  uint64_t v8;
  unsigned int HEdge;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  _BOOL4 v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  int v103;
  _DWORD *v104;
  void **v105;
  void **v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  void **v111;
  void **v112;
  void **v113;
  void *v114;
  void **v115;
  void **v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  float *v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  float v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  float v156;
  float *v157;
  float *v158;
  float v159;
  float v160;
  float v161;
  float v162;
  float v163;
  float v164;
  float *v165;
  float *v166;
  float *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  float *v173;
  float *v174;
  int v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  int v180;
  unint64_t v181;
  float *v182;
  unsigned int v183;
  unint64_t v184;
  float *v185;
  int v187;
  const char *v188;
  const char *v189;
  const char *v190;
  void *v194;
  float *v195;
  float *v196;
  void **v197;
  void **v198;
  void **v199;
  void *__p;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  char *v204;
  char *v205;
  unsigned int v206;
  _BYTE v207[20];
  unsigned int v208[3];

  v8 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v207, a1 + 104, a2);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v207);
  v206 = HEdge;
  v203 = 0;
  v204 = 0;
  v205 = 0;
  __p = 0;
  v201 = 0;
  v202 = 0;
  if (HEdge != -1)
  {
    while (1)
    {
      v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
      if ((*v11 & v13) != 0)
        break;
      v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v206);
      v22 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v21);
      v24 = *a5;
      if ((*v22 & v25) != 0)
      {
        LODWORD(v197) = a4[1];
        v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v197, v23);
        v27 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, &v206) + 16);
        v28 = *(_QWORD *)(v26 + 40);
        if (v27 >= (*(_QWORD *)(v26 + 48) - v28) >> 2)
          goto LABEL_185;
        if (v24 != *(_DWORD *)(v28 + 4 * v27))
          goto LABEL_84;
        v29 = v204;
        if (v204 >= v205)
        {
          v56 = (v204 - (_BYTE *)v203) >> 2;
          if ((unint64_t)(v56 + 1) >> 62)
            goto LABEL_196;
          v57 = (v205 - (_BYTE *)v203) >> 1;
          if (v57 <= v56 + 1)
            v57 = v56 + 1;
          if ((unint64_t)(v205 - (_BYTE *)v203) >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v57;
          if (v58)
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v205, v58);
          else
            v59 = 0;
          v64 = &v59[4 * v56];
          *(_DWORD *)v64 = v206;
          v30 = v64 + 4;
          v66 = (char *)v203;
          v65 = v204;
          if (v204 != v203)
          {
            do
            {
              v67 = *((_DWORD *)v65 - 1);
              v65 -= 4;
              *((_DWORD *)v64 - 1) = v67;
              v64 -= 4;
            }
            while (v65 != v66);
            v65 = (char *)v203;
          }
          v203 = v64;
          v204 = v30;
          v205 = &v59[4 * v58];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(_DWORD *)v204 = v206;
          v30 = v29 + 4;
        }
        goto LABEL_83;
      }
      LODWORD(v197) = a4[1];
      v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v197, v23);
      v37 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, &v206) + 16);
      v38 = *(_QWORD *)(v35 + 40);
      if (v37 >= (*(_QWORD *)(v35 + 48) - v38) >> 2)
        goto LABEL_185;
      if (v24 != *(_DWORD *)(v38 + 4 * v37))
      {
        v39 = *a5;
        LODWORD(v197) = a4[1];
        v40 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v197, v36);
        v41 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v206);
        v42 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v41) + 16);
        v43 = *(_QWORD *)(v40 + 40);
        if (v42 >= (*(_QWORD *)(v40 + 48) - v43) >> 2)
          goto LABEL_185;
        if (v39 == *(_DWORD *)(v43 + 4 * v42))
        {
          v44 = v204;
          if (v204 >= v205)
          {
            v68 = (v204 - (_BYTE *)v203) >> 2;
            if ((unint64_t)(v68 + 1) >> 62)
              goto LABEL_196;
            v69 = (v205 - (_BYTE *)v203) >> 1;
            if (v69 <= v68 + 1)
              v69 = v68 + 1;
            if ((unint64_t)(v205 - (_BYTE *)v203) >= 0x7FFFFFFFFFFFFFFCLL)
              v70 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v70 = v69;
            if (v70)
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v205, v70);
            else
              v71 = 0;
            v76 = &v71[4 * v68];
            *(_DWORD *)v76 = v206;
            v20 = v76 + 4;
            v78 = (char *)v203;
            v77 = v204;
            if (v204 != v203)
            {
              do
              {
                v79 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v76 - 1) = v79;
                v76 -= 4;
              }
              while (v77 != v78);
              v77 = (char *)v203;
            }
            v203 = v76;
            v204 = v20;
            v205 = &v71[4 * v70];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_DWORD *)v204 = v206;
            v20 = v44 + 4;
          }
LABEL_46:
          v204 = v20;
          LOBYTE(v197) = 0;
          std::vector<BOOL>::push_back((uint64_t)&__p, &v197);
          goto LABEL_84;
        }
      }
      v45 = *a5;
      LODWORD(v197) = a4[1];
      v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v197, v36);
      v48 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, &v206) + 16);
      v49 = *(_QWORD *)(v46 + 40);
      if (v48 >= (*(_QWORD *)(v46 + 48) - v49) >> 2)
        goto LABEL_185;
      if (v45 == *(_DWORD *)(v49 + 4 * v48))
      {
        v50 = *a5;
        LODWORD(v197) = a4[1];
        v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v197, v47);
        v52 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v206);
        v53 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v52) + 16);
        v54 = *(_QWORD *)(v51 + 40);
        if (v53 >= (*(_QWORD *)(v51 + 48) - v54) >> 2)
        {
LABEL_185:
          v187 = 187;
          v188 = "index < data_.size()";
          v189 = "Attribute.h";
          v190 = "operator[]";
          goto LABEL_186;
        }
        if (v50 != *(_DWORD *)(v54 + 4 * v53))
        {
          v55 = v204;
          if (v204 >= v205)
          {
            v72 = (v204 - (_BYTE *)v203) >> 2;
            if ((unint64_t)(v72 + 1) >> 62)
LABEL_196:
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v73 = (v205 - (_BYTE *)v203) >> 1;
            if (v73 <= v72 + 1)
              v73 = v72 + 1;
            if ((unint64_t)(v205 - (_BYTE *)v203) >= 0x7FFFFFFFFFFFFFFCLL)
              v74 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v74 = v73;
            if (v74)
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v205, v74);
            else
              v75 = 0;
            v80 = &v75[4 * v72];
            *(_DWORD *)v80 = v206;
            v30 = v80 + 4;
            v82 = (char *)v203;
            v81 = v204;
            if (v204 != v203)
            {
              do
              {
                v83 = *((_DWORD *)v81 - 1);
                v81 -= 4;
                *((_DWORD *)v80 - 1) = v83;
                v80 -= 4;
              }
              while (v81 != v82);
              v81 = (char *)v203;
            }
            v203 = v80;
            v204 = v30;
            v205 = &v75[4 * v74];
            if (v81)
              operator delete(v81);
          }
          else
          {
            *(_DWORD *)v204 = v206;
            v30 = v55 + 4;
          }
LABEL_83:
          v204 = v30;
          LOBYTE(v197) = 1;
          std::vector<BOOL>::push_back((uint64_t)&__p, &v197);
        }
      }
LABEL_84:
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v207);
      v206 = HEdge;
      if (HEdge == -1)
      {
        v84 = (char *)v203;
        v85 = v204;
        v86 = v201;
        goto LABEL_87;
      }
    }
    v14 = *a5;
    LODWORD(v197) = a4[1];
    v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), (unsigned int *)&v197, v12);
    v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v206);
    v17 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v16) + 16);
    v18 = *(_QWORD *)(v15 + 40);
    if (v17 >= (*(_QWORD *)(v15 + 48) - v18) >> 2)
      goto LABEL_185;
    if (v14 != *(_DWORD *)(v18 + 4 * v17))
      goto LABEL_84;
    v19 = v204;
    if (v204 >= v205)
    {
      v31 = (v204 - (_BYTE *)v203) >> 2;
      if ((unint64_t)(v31 + 1) >> 62)
        goto LABEL_196;
      v32 = (v205 - (_BYTE *)v203) >> 1;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if ((unint64_t)(v205 - (_BYTE *)v203) >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v205, v33);
      else
        v34 = 0;
      v60 = &v34[4 * v31];
      *(_DWORD *)v60 = v206;
      v20 = v60 + 4;
      v62 = (char *)v203;
      v61 = v204;
      if (v204 != v203)
      {
        do
        {
          v63 = *((_DWORD *)v61 - 1);
          v61 -= 4;
          *((_DWORD *)v60 - 1) = v63;
          v60 -= 4;
        }
        while (v61 != v62);
        v61 = (char *)v203;
      }
      v203 = v60;
      v204 = v20;
      v205 = &v34[4 * v33];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v204 = v206;
      v20 = v19 + 4;
    }
    goto LABEL_46;
  }
  v86 = 0;
  v84 = 0;
  v85 = 0;
LABEL_87:
  v87 = v85 - v84;
  if (v86 != v87 >> 2)
  {
    v188 = "chart_boundary_edges.size() == edges_in_chart.size()";
    v187 = 589;
LABEL_191:
    v189 = "BlenderUV2.cpp";
    v190 = "CheckNonManifoldOverlapping";
LABEL_186:
    __assert_rtn(v190, v189, v187, v188);
  }
  if ((v87 & 4) != 0)
  {
    v188 = "chart_boundary_edges.size() % 2 == 0";
    v187 = 590;
    goto LABEL_191;
  }
  v88 = __p;
  if (v87 == 8)
  {
    v89 = 0;
    if (!__p)
      goto LABEL_92;
    goto LABEL_91;
  }
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v91 = (*(_BYTE *)__p & 1) == 0;
  if (v204 == v84)
  {
    v115 = 0;
    v116 = 0;
  }
  else
  {
    LODWORD(v92) = 0;
    v93 = (v204 - v84) >> 2;
    do
    {
      LODWORD(v194) = *(_DWORD *)&v84[4 * (v92 | v91)];
      HIDWORD(v194) = *(_DWORD *)&v84[4 * (((v92 | v91) + 1) % v93)];
      v208[0] = a4[2];
      v94 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v208, v10);
      v96 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v194) + 16);
      v97 = *(_QWORD *)(v94 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v94 + 48) - v97) >> 2) <= v96)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v208[0] = a4[2];
      v98 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), v208, v95);
      v99 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v194 + 1);
      v100 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v99) + 16);
      v101 = *(_QWORD *)(v98 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v98 + 48) - v101) >> 2) <= v100)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v102 = (_DWORD *)(v97 + 12 * v96);
      v103 = *a3;
      if (*a3 == *v102 || v103 == v102[1] || v103 == v102[2])
      {
        v104 = (_DWORD *)(v101 + 12 * v100);
        if (v103 == *v104 || v103 == v104[1] || v103 == v104[2])
        {
          v105 = v198;
          if (v198 >= v199)
          {
            v107 = v198 - v197;
            if ((unint64_t)(v107 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v108 = ((char *)v199 - (char *)v197) >> 2;
            if (v108 <= v107 + 1)
              v108 = v107 + 1;
            if ((unint64_t)((char *)v199 - (char *)v197) >= 0x7FFFFFFFFFFFFFF8)
              v109 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v109 = v108;
            if (v109)
              v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v199, v109);
            else
              v110 = 0;
            v111 = (void **)&v110[8 * v107];
            *v111 = v194;
            v106 = v111 + 1;
            v113 = v197;
            v112 = v198;
            if (v198 != v197)
            {
              do
              {
                v114 = *--v112;
                *--v111 = v114;
              }
              while (v112 != v113);
              v112 = v197;
            }
            v197 = v111;
            v198 = v106;
            v199 = (void **)&v110[8 * v109];
            if (v112)
              operator delete(v112);
          }
          else
          {
            *v198 = v194;
            v106 = v105 + 1;
          }
          v198 = v106;
        }
      }
      v92 = (v92 + 2);
      v84 = (char *)v203;
      v93 = (v204 - (_BYTE *)v203) >> 2;
    }
    while (v93 > v92);
    v115 = v197;
    v116 = v198;
  }
  if ((unint64_t)((char *)v116 - (char *)v115) < 0x10)
  {
    v89 = 0;
    if (!v115)
      goto LABEL_128;
    goto LABEL_127;
  }
  v194 = 0;
  v195 = 0;
  v196 = 0;
  if (v198 == v115)
  {
    v176 = 0;
    v166 = 0;
LABEL_171:
    v177 = ((char *)v166 - v176) >> 3;
    if (v177 == 1)
    {
LABEL_179:
      v89 = 0;
    }
    else
    {
      v178 = 0;
      v179 = 0;
      v180 = 2;
      while (1)
      {
        v181 = v178;
        v178 = (v179 + 1);
        if (v177 > v178)
          break;
LABEL_178:
        ++v180;
        v179 = v178;
        if (v177 - 1 <= v178)
          goto LABEL_179;
      }
      v182 = (float *)&v176[8 * v181];
      v183 = v180;
      v184 = v178;
      while (1)
      {
        v185 = (float *)&v176[8 * v184];
        if (v182[1] >= (float)(*v185 + -0.000001) && *v182 <= (float)(v185[1] + 0.000001))
          break;
        v184 = v183;
        if (v177 <= v183++)
          goto LABEL_178;
      }
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize(a6, 2uLL);
      **(_DWORD **)a6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v197[v181]) + 16);
      *(_DWORD *)(*(_QWORD *)a6 + 4) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v197[v184])
                                                   + 16);
      v89 = 1;
    }
  }
  else
  {
    v117 = 0;
    v118 = 0;
    v119 = (uint64_t *)(a1 + 56);
    v120 = (uint64_t *)(a1 + 80);
    while (1)
    {
      v208[0] = a4[2];
      v121 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v119, v208, v10);
      v123 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v197[v117]) + 16);
      v124 = *(_QWORD *)(v121 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v121 + 48) - v124) >> 2) <= v123)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v208[0] = a4[2];
      v125 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v119, v208, v122);
      v126 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)&v197[v117] + 1);
      v128 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v126) + 16);
      v129 = *(_QWORD *)(v125 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v125 + 48) - v129) >> 2) <= v128)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v130 = 0;
      v131 = v124 + 12 * v123;
      v132 = *a3;
      v133 = v129 + 12 * v128;
      while (*(_DWORD *)(v131 + 4 * v130) != v132)
      {
        if (++v130 == 3)
        {
          v134 = 99;
          goto LABEL_139;
        }
      }
      v134 = *(unsigned int *)(v131 + 4 * ((v130 + 1) % 3u));
LABEL_139:
      v135 = 0;
      while (*(_DWORD *)(v133 + 4 * v135) != v132)
      {
        if (++v135 == 3)
          goto LABEL_179;
      }
      v89 = 0;
      if (v134 == 99)
        break;
      v136 = *(unsigned int *)(v133 + 4 * ((v135 + 2) % 3u));
      if ((_DWORD)v136 == 99)
        break;
      v208[0] = a4[3];
      v137 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v120, v208, v127);
      v139 = *(_QWORD *)(v137 + 40);
      if (v134 >= (*(_QWORD *)(v137 + 48) - v139) >> 3
        || (v208[0] = a4[3],
            v140 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v120, v208, v138), v142 = *a3, v143 = *(_QWORD *)(v140 + 40), v142 >= (*(_QWORD *)(v140 + 48) - v143) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      v144 = (float *)(v139 + 8 * v134);
      v145 = (float *)(v143 + 8 * v142);
      v146 = *v144;
      v147 = v144[1];
      v149 = *v145;
      v148 = v145[1];
      v208[0] = a4[3];
      v150 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v120, v208, v141);
      v152 = *(_QWORD *)(v150 + 40);
      if (v136 >= (*(_QWORD *)(v150 + 48) - v152) >> 3
        || (v208[0] = a4[3],
            v153 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v120, v208, v151), v154 = *a3, v155 = *(_QWORD *)(v153 + 40), v154 >= (*(_QWORD *)(v153 + 48) - v155) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      v156 = v147 - v148;
      v157 = (float *)(v152 + 8 * v136);
      v158 = (float *)(v155 + 8 * v154);
      v159 = *v157 - *v158;
      v160 = v157[1] - v158[1];
      v161 = atan2f(v156, v146 - v149);
      v162 = atan2f(v160, v159);
      if (v162 >= v161)
      {
        v164 = v162;
      }
      else
      {
        v163 = v162 + 6.28318531;
        v164 = v163;
      }
      v165 = v195;
      if (v195 >= v196)
      {
        v167 = (float *)v194;
        v168 = ((char *)v195 - (_BYTE *)v194) >> 3;
        v169 = v168 + 1;
        if ((unint64_t)(v168 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v170 = (char *)v196 - (_BYTE *)v194;
        if (((char *)v196 - (_BYTE *)v194) >> 2 > v169)
          v169 = v170 >> 2;
        if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
          v171 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v171 = v169;
        if (v171)
        {
          v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v196, v171);
          v167 = (float *)v194;
          v165 = v195;
        }
        else
        {
          v172 = 0;
        }
        v173 = (float *)&v172[8 * v168];
        *v173 = v161;
        v173[1] = v164;
        v174 = v173;
        while (v165 != v167)
        {
          v175 = *((_DWORD *)v165 - 2);
          v165 -= 2;
          *((_DWORD *)v174 - 2) = v175;
          v174 -= 2;
          v174[1] = v165[1];
        }
        v166 = v173 + 2;
        v194 = v174;
        v195 = v173 + 2;
        v196 = (float *)&v172[8 * v171];
        if (v167)
          operator delete(v167);
      }
      else
      {
        *v195 = v161;
        v165[1] = v164;
        v166 = v165 + 2;
      }
      v195 = v166;
      v117 = ++v118;
      if (v118 >= (unint64_t)(v198 - v197))
      {
        v176 = (char *)v194;
        goto LABEL_171;
      }
    }
  }
  if (v194)
  {
    v195 = (float *)v194;
    operator delete(v194);
  }
  v115 = v197;
  if (v197)
  {
LABEL_127:
    v198 = v115;
    operator delete(v115);
  }
LABEL_128:
  v88 = __p;
  if (__p)
LABEL_91:
    operator delete(v88);
LABEL_92:
  if (v203)
  {
    v204 = (char *)v203;
    operator delete(v203);
  }
  return v89;
}

void sub_23C57D62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::CheckSelfIntersect(uint64_t a1, unsigned int **a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  unsigned int v27;
  int v28;
  char *v29;
  uint64_t v30;
  unsigned int *v31;
  char *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  _DWORD *v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int *v45;
  _DWORD *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int *v54;
  int v55;
  unsigned int *v56;
  _DWORD *v57;
  int v58;
  char v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  BOOL v65;
  unsigned int *v66;
  unint64_t v67;
  __int128 *v68;
  uint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  int v140;
  int v142;
  const char *v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  _DWORD *v157;
  int v158;
  unsigned int *v159;
  unint64_t v160;
  uint64_t *v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  void *__p;
  _DWORD *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _DWORD *v172;
  __int128 v173;
  unsigned int *v174;
  char *v175;
  unint64_t v176;
  void *v177[3];
  int v178;
  unsigned int v179[3];

  if (*a2 == a2[1])
    return 0;
  v10 = a3 + 1;
  v178 = *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, a3[1], **a2);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v177, 3uLL);
  v174 = 0;
  v175 = 0;
  v176 = 0;
  v11 = (uint64_t)*a2;
  if (a2[1] == *a2)
    goto LABEL_122;
  v156 = a4;
  v157 = a5;
  v12 = 0;
  v13 = 0;
  v14 = a3 + 2;
  v161 = (uint64_t *)(a1 + 80);
  v162 = a3;
  do
  {
    v158 = v13;
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)(v11 + 4 * v12), v177);
    v15 = 0;
    do
    {
      if (cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)v177[0] + v15, v10, v14))
      {
        v16 = *(unsigned int *)(cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v14, (*a2)[v12])+ 4 * v15);
        v17 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v14, (*a2)[v12]);
        v19 = (v15 + 1);
        if (v15 == 2)
          v19 = 0;
        v20 = *(unsigned int *)(v17 + 4 * v19);
        LODWORD(v171) = v162[3];
        v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, (unsigned int *)&v171, v18);
        v23 = *(_QWORD *)(v21 + 40);
        if (v16 >= (*(_QWORD *)(v21 + 48) - v23) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        LODWORD(v171) = v162[3];
        v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, (unsigned int *)&v171, v22);
        v25 = *(_QWORD *)(v24 + 40);
        if (v20 >= (*(_QWORD *)(v24 + 48) - v25) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v26 = (int *)(v23 + 8 * v16);
        v27 = (*a2)[v12];
        v28 = *v26;
        v171 = *(_QWORD *)v26;
        v172 = *(_DWORD **)(v25 + 8 * v20);
        *(_QWORD *)&v173 = __PAIR64__(v20, v16);
        DWORD2(v173) = v27;
        HIDWORD(v173) = *((_DWORD *)v177[0] + v15);
        v29 = v175;
        if ((unint64_t)v175 >= v176)
        {
          v30 = std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge const&>((uint64_t *)&v174, (uint64_t)&v171);
        }
        else
        {
          *(_DWORD *)v175 = v28;
          *((_DWORD *)v29 + 1) = HIDWORD(v171);
          *((_QWORD *)v29 + 1) = v172;
          *((_OWORD *)v29 + 1) = v173;
          v30 = (uint64_t)(v29 + 32);
        }
        v175 = (char *)v30;
        ++v15;
      }
      else
      {
        ++v15;
      }
    }
    while (v15 != 3);
    v12 = (v158 + 1);
    v11 = (uint64_t)*a2;
    v13 = v158 + 1;
  }
  while (v12 < a2[1] - *a2);
  v31 = v174;
  v170 = 0x3F50624DD2F1A9FCLL;
  v169 = 0x3EB0C6F7A0B5ED8DLL;
  if (v174 == (unsigned int *)v175)
    goto LABEL_122;
  __p = 0;
  v167 = 0;
  v168 = 0;
  v32 = v175;
  if (v175 - (char *)v174 == 32)
  {
LABEL_19:
    v33 = 8;
    goto LABEL_118;
  }
  v35 = 0;
  v36 = 0;
  v37 = a1 + 104;
  while (1)
  {
    v38 = v35;
    v35 = ++v36;
    v39 = (v32 - (char *)v31) >> 5;
    if (v39 > v36)
      break;
LABEL_113:
    if (v39 - 1 <= v35)
      goto LABEL_19;
  }
  v144 = v36;
  v145 = v36;
  v160 = v38;
  while (1)
  {
    v40 = &v31[8 * v38];
    v41 = &v31[8 * v35];
    v42 = v40 + 6;
    v43 = v41 + 6;
    if (v40[6] != v41[6])
      break;
LABEL_111:
    v31 = v174;
    v32 = v175;
    v39 = (v175 - (char *)v174) >> 5;
    v35 = ++v36;
    if (v39 <= v36)
    {
      v36 = v145;
      v35 = v144;
      goto LABEL_113;
    }
  }
  v45 = v40 + 4;
  v44 = v40[4];
  v46 = v41 + 4;
  v47 = v41[4];
  if (v44 == v47
    || (v48 = v31[8 * v38 + 5], v49 = &v31[8 * v35], v52 = v49[5], v50 = (int *)(v49 + 5), v51 = v52, v48 == v52))
  {
    LODWORD(v163) = -1;
    v179[0] = 0;
    v53 = &v31[8 * v38 + 7];
    if (*v45 == *v46)
    {
      LODWORD(v163) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v37, v53) + 12);
      v179[0] = *v45;
      if ((_DWORD)v163 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v37, &v31[8 * v35 + 7]) + 12))
      {
        v142 = 715;
        v143 = "nonmani2d_vh.Index() == mesh.HEdgeStart(e1.hh).Index()";
        goto LABEL_131;
      }
    }
    else
    {
      v54 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v37, v53);
      v55 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v37, v54) + 12);
      LODWORD(v163) = v55;
      v179[0] = v31[8 * v160 + 5];
      v56 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v37, &v31[8 * v35 + 7]);
      if (v55 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v37, v56) + 12))
      {
        v142 = 719;
        v143 = "nonmani2d_vh.Index() == mesh.HEdgeEnd(e1.hh).Index()";
LABEL_131:
        __assert_rtn("CheckSelfIntersect", "BlenderUV2.cpp", v142, v143);
      }
    }
    v57 = __p;
    if (__p == v167)
    {
      v38 = v160;
    }
    else
    {
      v38 = v160;
      while (*v57 != (_DWORD)v163)
      {
        if (++v57 == v167)
        {
          v57 = v167;
          break;
        }
      }
    }
    if (v57 != v167)
      goto LABEL_111;
    v171 = 0;
    v172 = 0;
    *(_QWORD *)&v173 = 0;
    v58 = cv3d::cv::gess::internal::CheckNonManifoldOverlapping(a1, (uint64_t)&v163, v179, v162, &v178, (uint64_t)&v171);
    v59 = v58;
    if (v58)
    {
      v60 = (_DWORD *)v171;
      if ((_DWORD *)((char *)v172 - v171) != (_DWORD *)8)
        __assert_rtn("CheckSelfIntersect", "BlenderUV2.cpp", 732, "overlapped_fhs.size() == 2");
      *v156 = *(_DWORD *)v171;
      *v157 = v60[1];
      v33 = 1;
    }
    else
    {
      v62 = v167;
      if (v167 >= (_DWORD *)v168)
      {
        v133 = ((char *)v167 - (_BYTE *)__p) >> 2;
        if ((unint64_t)(v133 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v134 = (v168 - (_BYTE *)__p) >> 1;
        if (v134 <= v133 + 1)
          v134 = v133 + 1;
        if ((unint64_t)(v168 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
          v135 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v135 = v134;
        if (v135)
          v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v168, v135);
        else
          v136 = 0;
        v137 = &v136[4 * v133];
        *(_DWORD *)v137 = v163;
        v63 = v137 + 4;
        v139 = (char *)__p;
        v138 = (char *)v167;
        if (v167 != __p)
        {
          do
          {
            v140 = *((_DWORD *)v138 - 1);
            v138 -= 4;
            *((_DWORD *)v137 - 1) = v140;
            v137 -= 4;
          }
          while (v138 != v139);
          v138 = (char *)__p;
        }
        __p = v137;
        v167 = v63;
        v168 = &v136[4 * v135];
        if (v138)
          operator delete(v138);
      }
      else
      {
        *v167 = v163;
        v63 = v62 + 1;
      }
      v167 = v63;
      v60 = (_DWORD *)v171;
      v33 = 13;
      if (!v171)
      {
LABEL_110:
        v38 = v160;
        if ((v59 & 1) != 0)
          goto LABEL_118;
        goto LABEL_111;
      }
    }
    v172 = v60;
    operator delete(v60);
    goto LABEL_110;
  }
  if (v48 != v47 && v44 != v51)
  {
    v171 = 0x3F50624DD2F1A9FCLL;
    v163 = 0x3EB0C6F7A0B5ED8DLL;
    v61 = cv3d::cv::gess::alg::Edge2DIntersects((float *)v40, (float *)&v31[8 * v38 + 2], (float *)v41, (float *)&v31[8 * v35 + 2], (double *)&v171, (double *)&v163);
    v38 = v160;
    if (v61 != 3)
      goto LABEL_117;
    goto LABEL_111;
  }
  v171 = 0;
  v172 = 0;
  *(_QWORD *)&v173 = -1;
  *((_QWORD *)&v173 + 1) = -1;
  v163 = 0;
  v164 = 0;
  *(_QWORD *)&v165 = -1;
  *((_QWORD *)&v165 + 1) = -1;
  v64 = *v50;
  v65 = *v45 == v64;
  if (*v45 == v64)
    v66 = &v31[8 * v38];
  else
    v66 = &v31[8 * v35];
  if (v65)
    v67 = v38;
  else
    v67 = v35;
  if (v65)
    v68 = (__int128 *)(v40 + 4);
  else
    v68 = (__int128 *)(v41 + 4);
  if (v65)
    v69 = (uint64_t *)&v31[8 * v35];
  else
    v69 = (uint64_t *)&v31[8 * v38];
  if (v65)
    v70 = v35;
  else
    v70 = v38;
  if (!v65)
    v46 = v40 + 4;
  v71 = v66[1];
  LODWORD(v171) = *v66;
  HIDWORD(v171) = v71;
  v172 = *(_DWORD **)&v31[8 * v67 + 2];
  v173 = *v68;
  v163 = *v69;
  v164 = *(_QWORD *)&v31[8 * v70 + 2];
  v165 = *(_OWORD *)v46;
  if ((_DWORD)v173 != DWORD1(v165))
    __assert_rtn("CheckSelfIntersect", "BlenderUV2.cpp", 750, "ea.v0_uvid == eb.v1_uvid");
  v72 = *v14;
  v73 = cv3d::cv::gess::mesh::Topology::h(v37, (unsigned int *)&v173 + 3);
  v74 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v72, *(unsigned int *)(v73 + 16));
  v75 = *v14;
  v76 = cv3d::cv::gess::mesh::Topology::h(v37, (unsigned int *)&v165 + 3);
  v159 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v75, *(unsigned int *)(v76 + 16));
  v179[0] = v162[3];
  v78 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v77);
  v148 = *(_QWORD *)(v78 + 40);
  v152 = DWORD1(v173);
  if (DWORD1(v173) >= (unint64_t)((*(_QWORD *)(v78 + 48) - v148) >> 3))
    goto LABEL_128;
  v179[0] = v162[3];
  v80 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v79);
  v82 = *v159;
  v83 = *(_QWORD *)(v80 + 40);
  if (v82 >= (*(_QWORD *)(v80 + 48) - v83) >> 3)
    goto LABEL_128;
  v179[0] = v162[3];
  v84 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v81);
  v86 = v159[1];
  v87 = *(_QWORD *)(v84 + 40);
  if (v86 >= (*(_QWORD *)(v84 + 48) - v87) >> 3)
    goto LABEL_128;
  v179[0] = v162[3];
  v88 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v85);
  v89 = v159[2];
  v90 = *(_QWORD *)(v88 + 40);
  if (v89 >= (*(_QWORD *)(v88 + 48) - v90) >> 3)
    goto LABEL_128;
  if (cv3d::cv::gess::alg::IsPointInTriangle((float *)(v148 + 8 * v152), (float *)(v83 + 8 * v82), (float *)(v87 + 8 * v86), (float *)(v90 + 8 * v89)))
  {
    goto LABEL_117;
  }
  v179[0] = v162[3];
  v92 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v91);
  v149 = *(_QWORD *)(v92 + 40);
  v153 = v165;
  if (v165 >= (unint64_t)((*(_QWORD *)(v92 + 48) - v149) >> 3))
    goto LABEL_128;
  v179[0] = v162[3];
  v94 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v93);
  v96 = *v74;
  v97 = *(_QWORD *)(v94 + 40);
  if (v96 >= (*(_QWORD *)(v94 + 48) - v97) >> 3)
    goto LABEL_128;
  v179[0] = v162[3];
  v98 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v95);
  v100 = v74[1];
  v101 = *(_QWORD *)(v98 + 40);
  if (v100 >= (*(_QWORD *)(v98 + 48) - v101) >> 3
    || (v179[0] = v162[3],
        v102 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v99), v103 = v74[2], v104 = *(_QWORD *)(v102 + 40), v103 >= (*(_QWORD *)(v102 + 48) - v104) >> 3))
  {
LABEL_128:
    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
  }
  if (!cv3d::cv::gess::alg::IsPointInTriangle((float *)(v149 + 8 * v153), (float *)(v97 + 8 * v96), (float *)(v101 + 8 * v100), (float *)(v104 + 8 * v103)))
  {
    v106 = 0;
    while (v74[v106] != (_DWORD)v173)
    {
      if (++v106 == 3)
      {
        LOBYTE(v106) = 99;
        break;
      }
    }
    v107 = 0;
    while (v159[v107] != (_DWORD)v173)
    {
      if (++v107 == 3)
      {
        LOBYTE(v107) = 99;
        break;
      }
    }
    v179[0] = v162[3];
    v108 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v105);
    v150 = *(_QWORD *)(v108 + 40);
    v154 = v165;
    if (v165 >= (unint64_t)((*(_QWORD *)(v108 + 48) - v150) >> 3))
      goto LABEL_129;
    v179[0] = v162[3];
    v110 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v109);
    v146 = *(_QWORD *)(v110 + 40);
    v147 = DWORD1(v165);
    if (DWORD1(v165) >= (unint64_t)((*(_QWORD *)(v110 + 48) - v146) >> 3))
      goto LABEL_129;
    v179[0] = v162[3];
    v112 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v111);
    v114 = v74[(v106 + 1) % 3u];
    v115 = *(_QWORD *)(v112 + 40);
    if (v114 >= (*(_QWORD *)(v112 + 48) - v115) >> 3)
      goto LABEL_129;
    v179[0] = v162[3];
    v116 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v113);
    v117 = v74[(v106 + 2) % 3u];
    v118 = *(_QWORD *)(v116 + 40);
    if (v117 >= (*(_QWORD *)(v116 + 48) - v118) >> 3)
      goto LABEL_129;
    if (cv3d::cv::gess::alg::Edge2DIntersects((float *)(v150 + 8 * v154), (float *)(v146 + 8 * v147), (float *)(v115 + 8 * v114), (float *)(v118 + 8 * v117), (double *)&v170, (double *)&v169) != 3)goto LABEL_117;
    v179[0] = v162[3];
    v120 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v119);
    v151 = *(_QWORD *)(v120 + 40);
    v155 = v173;
    if (v173 >= (unint64_t)((*(_QWORD *)(v120 + 48) - v151) >> 3))
      goto LABEL_129;
    v179[0] = v162[3];
    v122 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v121);
    v124 = DWORD1(v173);
    v125 = *(_QWORD *)(v122 + 40);
    if (DWORD1(v173) >= (unint64_t)((*(_QWORD *)(v122 + 48) - v125) >> 3))
      goto LABEL_129;
    v179[0] = v162[3];
    v126 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v123);
    v128 = v159[(v107 + 1) % 3u];
    v129 = *(_QWORD *)(v126 + 40);
    if (v128 >= (*(_QWORD *)(v126 + 48) - v129) >> 3
      || (v179[0] = v162[3],
          v130 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v161, v179, v127), v131 = v159[(v107 + 2) % 3u], v132 = *(_QWORD *)(v130 + 40), v131 >= (*(_QWORD *)(v130 + 48) - v132) >> 3))
    {
LABEL_129:
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    if (cv3d::cv::gess::alg::Edge2DIntersects((float *)(v151 + 8 * v155), (float *)(v125 + 8 * v124), (float *)(v129 + 8 * v128), (float *)(v132 + 8 * v131), (double *)&v170, (double *)&v169) == 3)
    {
      v37 = a1 + 104;
      v38 = v160;
      goto LABEL_111;
    }
  }
LABEL_117:
  *v156 = *v42;
  *v157 = *v43;
  v33 = 1;
LABEL_118:
  if (__p)
  {
    v167 = __p;
    operator delete(__p);
  }
  if ((v33 & 7) != 0)
  {
    v34 = 1;
    goto LABEL_123;
  }
LABEL_122:
  v34 = 0;
LABEL_123:
  if (v174)
  {
    v175 = (char *)v174;
    operator delete(v174);
  }
  if (v177[0])
  {
    v177[1] = v177[0];
    operator delete(v177[0]);
  }
  return v34;
}

void sub_23C57E33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t v33;
  void *v35;
  void *v36;

  if (__p)
    operator delete(__p);
  v35 = *(void **)(v33 - 144);
  if (v35)
  {
    *(_QWORD *)(v33 - 136) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 120);
  if (v36)
  {
    *(_QWORD *)(v33 - 112) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 56), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (v3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 2))
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v4, v5, v6);
  return v7 + 4 * v3;
}

uint64_t cv3d::cv::gess::internal::BipartitionChart(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, char **a6, char **a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  _OWORD v67[2];
  __int128 v68;
  _OWORD v69[2];
  __int128 v70;

  if (*a4 == -1 || *a5 == -1)
    cv3d::cv::gess::internal::BipartitionChart();
  if (*a4 == *a5)
    cv3d::cv::gess::internal::BipartitionChart();
  if ((unint64_t)(a2[1] - *a2) <= 7)
    cv3d::cv::gess::internal::BipartitionChart();
  v70 = 0u;
  v68 = 0u;
  memset(v69, 0, sizeof(v69));
  memset(v67, 0, sizeof(v67));
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v69, a4);
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v67, a5);
  v14 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 160);
  v15 = v13 - v14;
  if (v13 == v14)
  {
    v16 = 0;
  }
  else
  {
    if (v15 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = operator new(v13 - v14);
    bzero(v16, v15 & 0xFFFFFFFFFFFFFFFCLL);
  }
  *((_DWORD *)v16 + *a4) = 1;
  *((_DWORD *)v16 + *a5) = 2;
  v17 = (unsigned int *)(a3 + 4);
  v18 = (unsigned int *)(a3 + 8);
  while (*((_QWORD *)&v70 + 1))
  {
    v66 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v69[0] + 1) + (((unint64_t)v70 >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * (v70 & 0x3FF));
    *(_QWORD *)&v70 = v70 + 1;
    --*((_QWORD *)&v70 + 1);
    if ((unint64_t)v70 >= 0x800)
    {
      operator delete(**((void ***)&v69[0] + 1));
      *((_QWORD *)&v69[0] + 1) += 8;
      *(_QWORD *)&v70 = v70 - 1024;
    }
    v19 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v66);
    v65 = v19;
    do
    {
      v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65) + 8);
      if (!cv3d::cv::gess::internal::IsChartBoundary(a1, &v65, v17, v18))
      {
        v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
        v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v20) + 16);
        if (!*((_DWORD *)v16 + v64))
        {
          std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v69, &v64);
          *((_DWORD *)v16 + v64) = 1;
        }
      }
    }
    while (v65 != v19);
    v21 = *((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
LABEL_21:
      v66 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v67[0] + 1) + (((unint64_t)v68 >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * (v68 & 0x3FF));
      *(_QWORD *)&v68 = v68 + 1;
      *((_QWORD *)&v68 + 1) = v21 - 1;
      if ((unint64_t)v68 >= 0x800)
      {
        operator delete(**((void ***)&v67[0] + 1));
        *((_QWORD *)&v67[0] + 1) += 8;
        *(_QWORD *)&v68 = v68 - 1024;
      }
      v22 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v66);
      v65 = v22;
      do
      {
        v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65) + 8);
        if (!cv3d::cv::gess::internal::IsChartBoundary(a1, &v65, v17, v18))
        {
          v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v65);
          v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v23) + 16);
          if (!*((_DWORD *)v16 + v64))
          {
            std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v67, &v64);
            *((_DWORD *)v16 + v64) = 2;
          }
        }
      }
      while (v65 != v22);
    }
  }
  v21 = *((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
    goto LABEL_21;
  a6[1] = *a6;
  v24 = *a7;
  a7[1] = *a7;
  v25 = *a2;
  if (a2[1] != *a2)
  {
    v26 = 0;
    while (1)
    {
      v27 = *(unsigned int *)(v25 + 4 * v26);
      v28 = *((_DWORD *)v16 + v27);
      if (v28 == 2)
      {
        v37 = a7[1];
        v36 = (unint64_t)a7[2];
        if ((unint64_t)v37 >= v36)
        {
          v41 = (v37 - *a7) >> 2;
          if ((unint64_t)(v41 + 1) >> 62)
            goto LABEL_91;
          v42 = v36 - (_QWORD)*a7;
          v43 = v42 >> 1;
          if (v42 >> 1 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
          {
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a7 + 2), v44);
            LODWORD(v27) = *(_DWORD *)(v25 + 4 * v26);
          }
          else
          {
            v45 = 0;
          }
          v53 = &v45[4 * v41];
          *(_DWORD *)v53 = v27;
          v38 = v53 + 4;
          v55 = *a7;
          v54 = a7[1];
          if (v54 != *a7)
          {
            do
            {
              v56 = *((_DWORD *)v54 - 1);
              v54 -= 4;
              *((_DWORD *)v53 - 1) = v56;
              v53 -= 4;
            }
            while (v54 != v55);
            v54 = *a7;
          }
          *a7 = v53;
          a7[1] = v38;
          a7[2] = &v45[4 * v44];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_DWORD *)v37 = v27;
          v38 = v37 + 4;
        }
        a7[1] = v38;
        goto LABEL_80;
      }
      if (v28 == 1)
      {
        v30 = a6[1];
        v29 = (unint64_t)a6[2];
        if ((unint64_t)v30 >= v29)
        {
          v31 = (v30 - *a6) >> 2;
          if ((unint64_t)(v31 + 1) >> 62)
            goto LABEL_91;
          v32 = v29 - (_QWORD)*a6;
          v33 = v32 >> 1;
          if (v32 >> 1 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a6 + 2), v34);
            LODWORD(v27) = *(_DWORD *)(v25 + 4 * v26);
          }
          else
          {
            v35 = 0;
          }
          v49 = &v35[4 * v31];
          *(_DWORD *)v49 = v27;
          v40 = v49 + 4;
          v51 = *a6;
          v50 = a6[1];
          if (v50 != *a6)
          {
            do
            {
              v52 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v49 - 1) = v52;
              v49 -= 4;
            }
            while (v50 != v51);
            goto LABEL_76;
          }
          goto LABEL_77;
        }
      }
      else
      {
        v30 = a6[1];
        v39 = (unint64_t)a6[2];
        if ((unint64_t)v30 >= v39)
        {
          v46 = (v30 - *a6) >> 2;
          if ((unint64_t)(v46 + 1) >> 62)
LABEL_91:
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v47 = v39 - (_QWORD)*a6;
          v48 = v47 >> 1;
          if (v47 >> 1 <= (unint64_t)(v46 + 1))
            v48 = v46 + 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v48;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a6 + 2), v34);
            LODWORD(v27) = *(_DWORD *)(v25 + 4 * v26);
          }
          else
          {
            v35 = 0;
          }
          v49 = &v35[4 * v46];
          *(_DWORD *)v49 = v27;
          v40 = v49 + 4;
          v57 = *a6;
          v50 = a6[1];
          if (v50 != *a6)
          {
            do
            {
              v58 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v49 - 1) = v58;
              v49 -= 4;
            }
            while (v50 != v57);
LABEL_76:
            v50 = *a6;
          }
LABEL_77:
          *a6 = v49;
          a6[1] = v40;
          a6[2] = &v35[4 * v34];
          if (v50)
            operator delete(v50);
          goto LABEL_79;
        }
      }
      *(_DWORD *)v30 = v27;
      v40 = v30 + 4;
LABEL_79:
      a6[1] = v40;
LABEL_80:
      ++v26;
      v25 = *a2;
      v59 = a2[1] - *a2;
      if (v26 >= v59 >> 2)
      {
        v60 = v59 >> 2;
        v24 = *a7;
        v61 = a7[1];
        goto LABEL_83;
      }
    }
  }
  v60 = 0;
  v61 = v24;
LABEL_83:
  if (((v61 - v24) >> 2) + ((a6[1] - *a6) >> 2) != v60)
    __assert_rtn("BipartitionChart", "BlenderUV2.cpp", 895, "out_chart_faces0.size() + out_chart_faces1.size() == chart_faces.size()");
  if (v16)
    operator delete(v16);
  std::deque<int>::~deque[abi:ne180100](v67);
  std::deque<int>::~deque[abi:ne180100](v69);
  return 1;
}

void sub_23C57E9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va);
  std::deque<int>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::internal::AssignChartToNewGroup(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  uint64_t i;
  unsigned int j;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unsigned int HEdge;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60[2];
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[16];
  uint64_t *v64;
  _QWORD v65[2];
  void *__p[3];
  void *v67[4];

  v5 = a3;
  LODWORD(v67[0]) = *a3;
  v8 = (uint64_t *)(a1 + 80);
  v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)v67, (uint64_t)a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  LODWORD(v67[0]) = *v5;
  v57 = v8;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v8, (unsigned int *)v67, v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) - 1;
  v13 = *a2;
  if (a2[1] != *a2)
  {
    v14 = 0;
    do
    {
      *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v5[1], *(_DWORD *)(v13 + 4 * v14++)) = v12;
      v13 = *a2;
    }
    while (v14 < (uint64_t)(a2[1] - *a2) >> 2);
  }
  v55 = v12;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v67, 3uLL);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v65[0] = 0;
  v65[1] = 0;
  v64 = v65;
  v15 = *a2;
  if (a2[1] == *a2)
  {
    v52 = 0;
  }
  else
  {
    v16 = 0;
    v58 = v5 + 2;
    v17 = v5 + 1;
    v53 = a2;
    do
    {
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)(v15 + 4 * v16), v67);
      v54 = v16;
      v56 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v58, *(unsigned int *)(*a2 + 4 * v16));
      v18 = 0;
      v19 = 0;
      do
      {
        v19 |= cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)((char *)v67[0] + v18), v17, v58);
        v18 += 4;
      }
      while (v18 != 12);
      if ((v19 & 1) != 0)
      {
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)(*v53 + 4 * v54), __p);
        for (i = 0; i != 3; ++i)
        {
          cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v63, a1 + 104, (char *)__p[0] + 4 * i);
          for (j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v63);
                ;
                j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v63))
          {
            v62 = j;
            if (j == -1)
              break;
            if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62) + 16) != -1)
            {
              v22 = *v17;
              v23 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v62);
              if (*(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, v22, *(_DWORD *)(v23 + 16)) == *a4)
              {
                v25 = *(_DWORD *)(v56 + 4 * i);
                v61 = v25;
                v26 = v65[0];
                if (!v65[0])
                  goto LABEL_24;
                v27 = v65;
                do
                {
                  v28 = (uint64_t *)v26;
                  v29 = v27;
                  v30 = *(_DWORD *)(v26 + 28);
                  v31 = (uint64_t *)(v26 + 8);
                  if (v30 >= v25)
                  {
                    v31 = v28;
                    v27 = v28;
                  }
                  v26 = *v31;
                }
                while (v26);
                if (v27 == v65)
                  goto LABEL_24;
                if (v30 < v25)
                  v28 = v29;
                if (v25 >= *((_DWORD *)v28 + 7))
                {
                  *(_DWORD *)(v56 + 4 * i) = *(_DWORD *)std::map<unsigned int,unsigned int>::at((uint64_t)&v64, &v61);
                }
                else
                {
LABEL_24:
                  LODWORD(v60[0]) = v5[3];
                  v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v57, (unsigned int *)v60, v24);
                  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
                  v33 = v5;
                  LODWORD(v60[0]) = v5[3];
                  v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v57, (unsigned int *)v60, v34);
                  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
                  LODWORD(v60[0]) = v5[3];
                  v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v57, (unsigned int *)v60, v37);
                  v40 = v61;
                  v41 = *(_QWORD *)(v38 + 40);
                  if (v61 >= (unint64_t)((*(_QWORD *)(v38 + 48) - v41) >> 3)
                    || (LODWORD(v60[0]) = v33[3],
                        v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v57, (unsigned int *)v60, v39), v43 = (v36 - 1), v44 = *(_QWORD *)(v42 + 40), v43 >= (*(_QWORD *)(v42 + 48) - v44) >> 3))
                  {
                    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                  }
                  v45 = (_DWORD *)(v41 + 8 * v40);
                  v46 = (_DWORD *)(v44 + 8 * v43);
                  *v46 = *v45;
                  v46[1] = v45[1];
                  v60[0] = &v61;
                  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v64, &v61, (uint64_t)&std::piecewise_construct, v60)+ 8) = v43;
                  *(_DWORD *)(v56 + 4 * i) = v43;
                  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v60, a1 + 104, (char *)__p[0] + 4 * i);
                  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v60);
                  v5 = v33;
                  while (1)
                  {
                    v59 = HEdge;
                    if (HEdge == -1)
                      break;
                    v48 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v59) + 16);
                    if ((_DWORD)v48 != -1
                      && *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, *v17, v48) == v55)
                    {
                      v49 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *v58, v48);
                      v50 = 0;
                      v51 = v61;
                      do
                      {
                        if (*(_DWORD *)(v49 + v50) == v51)
                          *(_DWORD *)(v49 + v50) = v43;
                        v50 += 4;
                      }
                      while (v50 != 12);
                    }
                    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v60);
                  }
                }
                break;
              }
            }
          }
        }
      }
      a2 = v53;
      v16 = v54 + 1;
      v15 = *v53;
    }
    while (v54 + 1 < (unint64_t)((uint64_t)(v53[1] - *v53) >> 2));
    v52 = (_QWORD *)v65[0];
  }
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v64, v52);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
}

void sub_23C57EEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<unsigned int,unsigned int>::at(uint64_t a1, unsigned int *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 4;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

_QWORD *std::vector<std::pair<cv3d::cv::gess::mesh::FaceHandle,float>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[a2];
    do
      *v4++ = 0xFFFFFFFFLL;
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C57EFEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  int v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  int v26;
  float *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  float v33;
  unint64_t v34;
  float v35;
  _DWORD *v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  float v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  float v94;
  int v95;
  _DWORD *v96;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  float v102;
  float *v103;
  float *v104;
  int v105;

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(float *a1, float *a2, float *a3)
{
  float v3;
  float result;
  unint64_t v5;
  float v6;
  float v7;
  float *v8;
  float *v9;
  float *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v3 = *a2;
  result = a2[1];
  v5 = *(_QWORD *)a3;
  LODWORD(v6) = HIDWORD(*(_QWORD *)a3);
  if (result > a1[1])
  {
    v7 = *a1;
    if (v6 <= result)
    {
      *a1 = v3;
      *a2 = v7;
      v13 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v13;
      v14 = *(_QWORD *)a2;
      LODWORD(result) = HIDWORD(*(_QWORD *)a3);
      if (result <= COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)))
        return result;
      *(_DWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)a3 = v14;
      v9 = a3 + 1;
      v8 = a2 + 1;
    }
    else
    {
      *(_DWORD *)a1 = v5;
      v8 = a1 + 1;
      *a3 = v7;
      v9 = a3 + 1;
    }
    v10 = v9;
    goto LABEL_10;
  }
  if (v6 > result)
  {
    *(_DWORD *)a2 = v5;
    *a3 = v3;
    v10 = a2 + 1;
    v11 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v11;
    v12 = *(_QWORD *)a1;
    LODWORD(result) = HIDWORD(*(_QWORD *)a2);
    if (result > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
    {
      *(_DWORD *)a1 = *(_QWORD *)a2;
      v8 = a1 + 1;
      *(_DWORD *)a2 = v12;
LABEL_10:
      result = *v8;
      *v8 = *v10;
      *v10 = result;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 8);
      v7 = *(_QWORD *)a1;
      if (*((float *)&v6 + 1) > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), a1 + 24);
      v19 = *(_QWORD *)(a2 - 8);
      v20 = *(_QWORD *)(a1 + 24);
      if (*((float *)&v19 + 1) <= *((float *)&v20 + 1))
        return 1;
      *(_DWORD *)(a1 + 24) = v19;
      *(_DWORD *)(a2 - 8) = v20;
      v21 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v21;
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 24);
      v24 = HIDWORD(v23);
      if (*((float *)&v23 + 1) <= *((float *)&v22 + 1))
        return 1;
      *(_QWORD *)(a1 + 16) = v23;
      *(_QWORD *)(a1 + 24) = v22;
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_QWORD *)(a1 + 16);
      if (*((float *)&v26 + 1) <= *((float *)&v25 + 1))
        return 1;
      *(_DWORD *)(a1 + 8) = v26;
      *(_DWORD *)(a1 + 12) = v24;
      *(_QWORD *)(a1 + 16) = v25;
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD *)(a1 + 8);
      v29 = HIDWORD(*(_QWORD *)a1);
      if (*((float *)&v28 + 1) <= COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
        return 1;
      *(_DWORD *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v24;
      result = 1;
      *(_DWORD *)(a1 + 8) = v27;
      *(_DWORD *)(a1 + 12) = v29;
      return result;
    default:
      v9 = (uint64_t *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 4);
    v14 = *v9;
    if (v13 > COERCE_FLOAT(HIDWORD(*v9)))
    {
      v15 = *(_DWORD *)v10;
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = *(_DWORD *)(a1 + v16 + 20);
        if (v16 == -16)
          break;
        v14 = *(_QWORD *)(v17 + 8);
        v16 -= 8;
        if (v13 <= *((float *)&v14 + 1))
        {
          v18 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v15;
      *(float *)(v18 + 4) = v13;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (uint64_t *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v8;
  float result;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::CalculateFaceLabels(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<unsigned int> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> &,unsigned int &)::$_0 &,std::pair<cv3d::cv::gess::mesh::FaceHandle,float> *>(a1, a2, a3);
  v8 = *(_QWORD *)a3;
  LODWORD(result) = HIDWORD(*(_QWORD *)a4);
  if (result > COERCE_FLOAT(HIDWORD(*(_QWORD *)a3)))
  {
    *(_DWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)a4 = v8;
    v10 = *((_DWORD *)a3 + 1);
    a3[1] = *(float *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    v11 = *(_QWORD *)a2;
    LODWORD(result) = HIDWORD(*(_QWORD *)a3);
    if (result > COERCE_FLOAT(HIDWORD(*(_QWORD *)a2)))
    {
      *(_DWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = *((_DWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_DWORD *)a3 + 1) = v12;
      v13 = *(_QWORD *)a1;
      LODWORD(result) = HIDWORD(*(_QWORD *)a2);
      if (result > COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)))
      {
        *(_DWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)a2 = v13;
        result = a1[1];
        a1[1] = a2[1];
        a2[1] = result;
      }
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  uint64_t j;
  void *v8;
  uint64_t k;
  void *v10;
  void *v11;
  cv3d::cv::gess::isochart::TetrisPacking *v12;
  uint64_t v13;
  void **v14;

  v2 = (void *)*((_QWORD *)this + 91);
  if (v2)
  {
    *((_QWORD *)this + 92) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 88);
  if (v3)
  {
    *((_QWORD *)this + 89) = v3;
    operator delete(v3);
  }
  v14 = (void **)((char *)this + 680);
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::__destroy_vector::operator()[abi:ne180100](&v14);
  v4 = (void *)*((_QWORD *)this + 79);
  if (v4)
  {
    *((_QWORD *)this + 80) = v4;
    operator delete(v4);
  }
  v14 = (void **)((char *)this + 608);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)((char *)this + 584);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v14);
  for (i = 0; i != -96; i -= 24)
  {
    v6 = *(void **)((char *)this + i + 560);
    if (v6)
    {
      *(_QWORD *)((char *)this + i + 568) = v6;
      operator delete(v6);
    }
  }
  for (j = 0; j != -96; j -= 24)
  {
    v8 = *(void **)((char *)this + j + 464);
    if (v8)
    {
      *(_QWORD *)((char *)this + j + 472) = v8;
      operator delete(v8);
    }
  }
  for (k = 0; k != -96; k -= 24)
  {
    v10 = *(void **)((char *)this + k + 368);
    if (v10)
    {
      *(_QWORD *)((char *)this + k + 376) = v10;
      operator delete(v10);
    }
  }
  v14 = (void **)((char *)this + 224);
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v11 = (void *)*((_QWORD *)this + 10);
  if (v11)
  {
    *((_QWORD *)this + 11) = v11;
    operator delete(v11);
  }
  v12 = (cv3d::cv::gess::isochart::TetrisPacking *)*((_QWORD *)this + 3);
  if (v12 == this)
  {
    v13 = 4;
    v12 = this;
  }
  else
  {
    if (!v12)
      return;
    v13 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
}

void std::vector<cv3d::cv::gess::isochart::ChartInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<cv3d::cv::gess::isochart::ChartInfo>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  void *v6;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 232)
  {
    for (j = 0; j != -216; j -= 72)
    {
      v6 = *(void **)(i + j - 24);
      if (v6)
      {
        *(_QWORD *)(i + j - 16) = v6;
        operator delete(v6);
      }
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::Matrix3T<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 36 * a2;
    v6 = 36 * a2;
    do
    {
      *(_DWORD *)(v4 + 32) = 1065353216;
      *(_OWORD *)v4 = xmmword_23C60C4E0;
      *(_OWORD *)(v4 + 16) = unk_23C60C4F0;
      v4 += 36;
      v6 -= 36;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C57FE78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::Matrix3T<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x71C71C71C71C71DLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Matrix3T<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[36 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Matrix3T<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(36 * a2);
}

uint64_t std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  __p = v10;
  v15 = v11;
  v17 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  v16 = v11 + 32;
  std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__swap_out_circular_buffer(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_23C58003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 32);
    v2 -= 32;
    *(_DWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<unsigned int>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void std::deque<cv3d::cv::gess::mesh::FaceHandle>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23C58045C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<unsigned int>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

void std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250D4A840;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250D4A840;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0,std::allocator<cv3d::cv::gess::internal::SeperateChartGroups(cv3d::cv::gess::mesh::TriMesh &,cv3d::cv::gess::alg::ParameterizeOption const&,std::vector<cv3d::cv::gess::math::Matrix3T<float>> &,std::vector<cv3d::cv::gess::math::Vector3T<float>> const&,std::vector<unsigned int> &,std::vector<unsigned int> &)::$_0>,void ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *a2;
  v4 = **(_QWORD **)(result + 8);
  v5 = *(_DWORD *)(v4 + 4 * v3);
  *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v4 + 4 * *a3);
  *(_DWORD *)(v4 + 4 * *a3) = v5;
  return result;
}

float *cv3d::cv::gess::math::Matrix3T<float>::operator*@<X0>(float *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float *v8;
  float v9;

  v3 = 0;
  *(_DWORD *)(a3 + 32) = 1065353216;
  *(_OWORD *)a3 = xmmword_23C60C4E0;
  *(_OWORD *)(a3 + 16) = unk_23C60C4F0;
  do
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = 0;
      v7 = 0.0;
      v8 = result;
      do
      {
        v9 = *v8;
        v8 += 3;
        v7 = v7 + (float)(v9 * *(float *)(v5 + v6));
        v6 += 4;
      }
      while (v6 != 12);
      *(float *)(a3 + 4 * (3 * v4++ + v3)) = v7;
      v5 += 12;
    }
    while (v4 != 3);
    ++v3;
    ++result;
  }
  while (v3 != 3);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23C580914(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

BOOL cv3d::cv::gess::internal::BlenderUV2ParameterizeWithDiagonal(uint64_t a1, float *a2, uint64_t a3)
{
  unsigned int v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t j;
  unsigned int *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  _BOOL4 v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  _BOOL4 v45;
  _QWORD *v46;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v49;
  uint64_t v50;
  std::vector<unsigned int>::pointer v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  int v62;
  unint64_t v63;
  __int128 *v64;
  uint64_t v65;
  float *v66;
  uint64_t v67;
  float v68;
  float *v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  cv3d::cv::gess::mesh::TriMesh *v74;
  std::chrono::system_clock::time_point v75;
  std::chrono::system_clock::time_point v76;
  uint64_t v77;
  std::chrono::system_clock::time_point v78;
  std::chrono::system_clock::time_point v79;
  std::chrono::system_clock::time_point v81;
  _BOOL4 v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  __int128 v90;
  _DWORD *v91[3];
  uint64_t v92;
  int v93;
  void *v94[3];
  void *v95;
  void *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *__p[2];
  __int128 v101;
  int v102;
  unsigned int v103[5];
  unsigned int v104;
  char *v105;
  char *v106;
  std::vector<unsigned int> v107;
  void *v108[3];
  unsigned int v109;
  void *v110;
  void *v111;
  uint64_t v112;
  std::vector<unsigned int> v113;
  char v114;

  v81.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v114 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:is_quadmesh_diagonal");
  LOBYTE(v113.__begin_) = 0;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)&v113, (unsigned __int8 *)__p);
  if (SBYTE7(v101) < 0)
    operator delete(__p[0]);
  if (v6 != -1)
    v114 = 1;
  memset(&v113, 0, sizeof(v113));
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v109 = 0;
  cv3d::cv::gess::internal::CalculateFaceLabels(a1, a2, &v113, &v110, &v109);
  v7 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  LOBYTE(__p[0]) = 0;
  std::vector<unsigned char>::vector(v108, v7, __p);
  if (v114 && v6 != -1)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
    LOBYTE(v107.__begin_) = 0;
    std::vector<BOOL>::vector(__p, v8, (unsigned __int8 *)&v107);
    v9 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
    LOBYTE(v105) = 0;
    std::vector<BOOL>::vector(&v107, v9, (unsigned __int8 *)&v105);
    v10 = a2;
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v105, 3uLL);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v11 = 0;
      v12 = 0;
      do
      {
        LODWORD(v98) = v12;
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)&v98, &v105);
        for (i = 0; i != 12; i += 4)
        {
          LODWORD(v98) = v6;
          v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)&v98, v13);
          v16 = *(unsigned int *)&v105[i];
          if (*(_QWORD *)(v15 + 48) <= v16)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          if (((*(_QWORD *)(*(_QWORD *)(v15 + 40) + ((v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1) != 0)
            ++*((_BYTE *)v108[0] + v11);
        }
        v18 = *(_QWORD *)(a1 + 152);
        v17 = *(_QWORD *)(a1 + 160);
        v11 = ++v12;
      }
      while (v12 < (unint64_t)((v17 - v18) >> 2));
      if (v17 != v18)
      {
        v19 = 0;
        v20 = 0;
        do
        {
          v21 = *(_QWORD *)&v107.__begin_[2 * (v19 >> 6)];
          if ((v21 & (1 << v19)) == 0)
          {
            *(_QWORD *)&v107.__begin_[2 * (v19 >> 6)] = v21 | (1 << v19);
            LODWORD(v98) = v20;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, (unsigned int *)&v98, &v105);
            if (*((unsigned __int8 *)v108[0] + v19) > 2u)
              __assert_rtn("BlenderUV2ParameterizeWithDiagonal", "BlenderUV2WithDiagonal.cpp", 57, "face_diagonal_count[fi] <= 2");
            for (j = 0; j != 12; j += 4)
            {
              v23 = (unsigned int *)&v105[j];
              v24 = *(unsigned int *)&v105[j];
              v25 = v24 >> 6;
              v26 = 1 << v24;
              v27 = *((_QWORD *)__p[0] + v25);
              if ((v26 & v27) == 0)
              {
                *((_QWORD *)__p[0] + v25) = v26 | v27;
                v28 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v23);
                *(_QWORD *)((char *)__p[0] + (((unint64_t)*v28 >> 3) & 0x1FFFFFF8)) |= 1 << *v28;
                v29 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v105[j]);
                v30 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v29);
                if ((*v30 & v32) == 0)
                {
                  LODWORD(v98) = v6;
                  v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), (unsigned int *)&v98, v31);
                  v34 = *(unsigned int *)&v105[j];
                  if (*(_QWORD *)(v33 + 48) <= v34)
                    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                  if (((*(_QWORD *)(*(_QWORD *)(v33 + 40) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
                  {
                    v35 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v105[j]);
                    v36 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v35) + 16);
                    v37 = v113.__begin_[v19];
                    v38 = v113.__begin_[v36];
                    if (v37 != v38)
                    {
                      if (*((_BYTE *)v108[0] + v36) == 2)
                      {
                        v113.__begin_[v19] = v38;
                      }
                      else
                      {
                        v113.__begin_[v36] = v37;
                        *(_QWORD *)((char *)v107.__begin_ + ((v36 >> 3) & 0x1FFFFFF8)) |= 1 << v36;
                      }
                    }
                  }
                }
              }
            }
            v18 = *(_QWORD *)(a1 + 152);
            v17 = *(_QWORD *)(a1 + 160);
          }
          v19 = ++v20;
        }
        while (v20 < (unint64_t)((v17 - v18) >> 2));
      }
    }
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    a2 = v10;
    if (v107.__begin_)
      operator delete(v107.__begin_);
    if (__p[0])
      operator delete(__p[0]);
  }
  memset(&v107, 0, sizeof(v107));
  std::vector<cv3d::cv::gess::math::Matrix3T<float>>::vector(&v105, v109);
  cv3d::cv::gess::internal::SeperateChartGroups(a1, (uint64_t)a2, (uint64_t *)&v105, &v110, &v113, &v107);
  v104 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v39 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v104, (unsigned __int8 *)__p);
  v41 = v39;
  if (SBYTE7(v101) < 0)
  {
    operator delete(__p[0]);
    if (v41)
      goto LABEL_39;
LABEL_48:
    v45 = 0;
    v44 = -1;
    v43 = -1;
    v42 = -1;
    goto LABEL_52;
  }
  if (!v39)
    goto LABEL_48;
LABEL_39:
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v98) = 0;
  v42 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 56), (uint64_t)&v98, (unsigned __int8 *)__p);
  if (SBYTE7(v101) < 0)
    operator delete(__p[0]);
  if (v42 == -1)
  {
    v45 = 0;
    v44 = -1;
    v43 = -1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v99) = 0;
    v98 = 0;
    v43 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v98, (unsigned __int8 *)__p);
    if (SBYTE7(v101) < 0)
      operator delete(__p[0]);
    if (v43 == -1)
    {
      v45 = 0;
      v44 = -1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      v98 = 0;
      v44 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v98, (unsigned __int8 *)__p);
      v45 = v44 != -1;
      if (SBYTE7(v101) < 0)
        operator delete(__p[0]);
    }
  }
LABEL_52:
  LODWORD(__p[0]) = v44;
  v46 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)__p, v40);
  v82 = v45;
  v83 = (uint64_t)a2;
  v103[0] = v104;
  v103[1] = v42;
  v103[2] = v43;
  v103[3] = v44;
  v103[4] = v6;
  *(_OWORD *)__p = 0u;
  v101 = 0u;
  v102 = 1065353216;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v98, 3uLL);
  v95 = 0;
  v96 = 0;
  v97 = 0;
  begin = v107.__begin_;
  end = v107.__end_;
  LODWORD(v94[0]) = v104;
  v50 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)v94, v49);
  if (end - begin != (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50))
    __assert_rtn("BlenderUV2ParameterizeWithDiagonal", "BlenderUV2WithDiagonal.cpp", 111, "g_starts.size() == mesh.attribute(m_chart_g_ah).Size()");
  v51 = v107.__begin_;
  if (v107.__end_ != v107.__begin_)
  {
    v52 = 0;
    v86 = 0;
    v53 = 0;
    v54 = v107.__end_ - v107.__begin_;
    v87 = v43;
    do
    {
      v85 = v53;
      if (v54 - 1 <= v52)
        v55 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
      else
        LODWORD(v55) = v51[v86 + 1];
      v56 = v51[v52];
      v84 = (v55 - v56);
      if (v55 > v56)
      {
        v89 = v113.__begin_[v56];
        v57 = v51[v52];
        v88 = v55;
        do
        {
          if (v113.__begin_[v57] != v89)
            __assert_rtn("BlenderUV2ParameterizeWithDiagonal", "BlenderUV2WithDiagonal.cpp", 117, "face_labels[i] == label");
          v58 = v105;
          std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v94, 3uLL);
          LODWORD(v91[0]) = v57;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)v91, v94);
          v59 = 0;
          v93 = 0;
          v60 = &v58[36 * v89];
          v92 = 0;
          do
          {
            LODWORD(v91[0]) = *((_DWORD *)v94[0] + v59);
            if (std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)v91))
            {
              LODWORD(v91[0]) = *((_DWORD *)v94[0] + v59);
              v61 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::__unordered_map_hasher<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::BakeErrorCode,std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>,std::equal_to<cv3d::cv::gess::alg::BakeErrorCode>,std::hash<cv3d::cv::gess::alg::BakeErrorCode>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::BakeErrorCode,std::string>>>::find<cv3d::cv::gess::alg::BakeErrorCode>(__p, (unsigned int *)v91);
              if (!v61)
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              *((_DWORD *)&v92 + v59) = *((float *)v61 + 5);
            }
            else
            {
              (*(void (**)(_QWORD *))(*v46 + 48))(v46);
              v62 = (*(uint64_t (**)(_QWORD *))(*v46 + 16))(v46);
              LODWORD(v90) = *((_DWORD *)v94[0] + v59);
              v91[0] = &v90;
              v63 = (v62 - 1);
              *((float *)std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)__p, (unsigned int *)&v90, (uint64_t)&std::piecewise_construct, v91)+ 5) = (float)v63;
              *((_DWORD *)&v92 + v59) = v63;
              v64 = (__int128 *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v94[0] + v59));
              v65 = 0;
              v90 = *v64;
              v91[0] = 0;
              v91[1] = 0;
              v66 = (float *)v60;
              do
              {
                v67 = 0;
                v68 = 0.0;
                v69 = v66;
                do
                {
                  v70 = *v69;
                  v69 += 3;
                  v68 = v68 + (float)(v70 * *(float *)((char *)&v91[-2] + v67));
                  v67 += 4;
                }
                while (v67 != 12);
                *((float *)v91 + v65++) = v68;
                ++v66;
              }
              while (v65 != 3);
              v71 = v46[5];
              if (v63 >= (v46[6] - v71) >> 3)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_DWORD **)(v71 + 8 * v63) = v91[0];
            }
            ++v59;
          }
          while (v59 != 3);
          v72 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, v87, v57);
          *(_QWORD *)v72 = v92;
          *(_DWORD *)(v72 + 8) = v93;
          LODWORD(v55) = v88;
          if (v94[0])
          {
            v94[1] = v94[0];
            operator delete(v94[0]);
          }
          ++v57;
        }
        while (v57 != v88);
      }
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v95, v84);
      if (v55 > v56)
      {
        v73 = 0;
        do
        {
          *((_DWORD *)v95 + v73) = v56 + v73;
          ++v73;
        }
        while (v56 - v55 + v73);
      }
      v53 = v85 | cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(a1, (uint64_t *)&v95, v108, v103, &v114);
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(__p);
      v51 = v107.__begin_;
      v54 = v107.__end_ - v107.__begin_;
      v52 = ++v86;
    }
    while (v54 > v86);
    if ((v53 & 1) != 0)
      cv3d::cv::gess::alg::SortFaceByGroupID32Bit((uint64_t **)a1, v74);
  }
  v75.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(a3 + 80))
  {
    *(double *)a3 = (double)(v75.__d_.__rep_ - v81.__d_.__rep_) / 1000000.0;
    LODWORD(v94[0]) = v104;
    v77 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), (unsigned int *)v94, v76.__d_.__rep_);
    *(_QWORD *)(a3 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
  }
  v78.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  cv3d::cv::gess::internal::PerformPacking((uint64_t **)a1, v83, a3);
  v79.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(a3 + 80))
  {
    *(double *)(a3 + 48) = (double)(v79.__d_.__rep_ - v78.__d_.__rep_) / 1000000.0;
    *(_QWORD *)(a3 + 56) = *(unsigned __int8 *)(v83 + 8);
  }
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
  if (v98)
  {
    v99 = v98;
    operator delete(v98);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  if (v107.__begin_)
  {
    v107.__end_ = v107.__begin_;
    operator delete(v107.__begin_);
  }
  if (v108[0])
  {
    v108[1] = v108[0];
    operator delete(v108[0]);
  }
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  if (v113.__begin_)
  {
    v113.__end_ = v113.__begin_;
    operator delete(v113.__begin_);
  }
  return v82;
}

void sub_23C581430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  if (a42 < 0)
    operator delete(__p);
  v44 = *(void **)(v42 - 224);
  if (v44)
  {
    *(_QWORD *)(v42 - 216) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 200);
  if (v45)
  {
    *(_QWORD *)(v42 - 192) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v42 - 176);
  if (v46)
  {
    *(_QWORD *)(v42 - 168) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v42 - 144);
  if (v47)
  {
    *(_QWORD *)(v42 - 136) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v42 - 120);
  if (v48)
  {
    *(_QWORD *)(v42 - 112) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4, _BYTE *a5)
{
  void *v10;
  void *v11;
  void *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  _BOOL8 v16;
  int v18;
  void *__p;
  void *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v25 = -1;
  v26 = -1;
  if (!cv3d::cv::gess::internal::CheckSelfIntersectWithDiagonal(a1, a2, a4, a5, &v26, &v25))
    return 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v20 = 0;
  v21 = 0;
  cv3d::cv::gess::internal::BipartitionChartWithDiagonal(a1, a2, a3, a4, &v26, &v25, a5, (char **)&v22, (char **)&__p);
  v10 = v22;
  v11 = v23;
  v13 = (unsigned int *)__p;
  v12 = v20;
  if (v23 - (_BYTE *)v22 >= (unint64_t)((_BYTE *)v20 - (_BYTE *)__p))
  {
    v15 = (unsigned int *)v22;
    v10 = __p;
  }
  else
  {
    v22 = __p;
    v23 = v20;
    __p = v10;
    v20 = v11;
    v14 = v24;
    v24 = v21;
    v21 = v14;
    v15 = v13;
    v12 = v11;
  }
  v16 = v10 != v12;
  if (v10 != v12)
  {
    v18 = *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(a1, a4[1], *v15);
    cv3d::cv::gess::internal::AssignChartToNewGroup(a1, &__p, a4, &v18);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(a1, &v22, a3, a4, a5);
    cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChartWithDiagonal(a1, &__p, a3, a4, a5);
    v12 = __p;
  }
  if (v12)
  {
    v20 = v12;
    operator delete(v12);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  return v16;
}

void sub_23C581750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::CheckSelfIntersectWithDiagonal(uint64_t a1, uint64_t *a2, unsigned int *a3, _BYTE *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  int v28;
  int v29;
  char *v30;
  uint64_t v31;
  unsigned int *v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  unint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  char *v47;
  unsigned int *v48;
  unsigned int *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t i;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v68;
  unsigned int *v69;
  _BYTE *v70;
  unsigned int *v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  void *__p[3];
  void *v78;
  void *v79;
  __int128 v80;
  void *v81;
  char *v82;
  unint64_t v83;
  void *v84[3];
  unsigned int v85[3];

  if (*a2 == a2[1])
    return 0;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v84, 3uLL);
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v10 = *a2;
  if (a2[1] == *a2)
    goto LABEL_26;
  v70 = a4;
  v71 = a5;
  v69 = a6;
  v11 = 0;
  v12 = 0;
  v13 = a1;
  v14 = a3 + 2;
  v15 = (uint64_t *)(a1 + 80);
  do
  {
    v72 = v12;
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v13, (unsigned int *)(v10 + 4 * v11), v84);
    v16 = 0;
    do
    {
      if (cv3d::cv::gess::internal::IsChartBoundary(v13, (unsigned int *)v84[0] + v16, a3 + 1, v14))
      {
        v17 = *(unsigned int *)(cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v13, *v14, *(unsigned int *)(*a2 + 4 * v11))+ 4 * v16);
        v18 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v13, *v14, *(unsigned int *)(*a2 + 4 * v11));
        v20 = (v16 + 1);
        if (v16 == 2)
          v20 = 0;
        v21 = *(unsigned int *)(v18 + 4 * v20);
        LODWORD(v78) = a3[3];
        v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v15, (unsigned int *)&v78, v19);
        v24 = *(_QWORD *)(v22 + 40);
        if (v17 >= (*(_QWORD *)(v22 + 48) - v24) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        LODWORD(v78) = a3[3];
        v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v15, (unsigned int *)&v78, v23);
        v26 = *(_QWORD *)(v25 + 40);
        if (v21 >= (*(_QWORD *)(v25 + 48) - v26) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v27 = (void **)(v24 + 8 * v17);
        v28 = *(_DWORD *)(*a2 + 4 * v11);
        v29 = *(_DWORD *)v27;
        v78 = *v27;
        v79 = *(void **)(v26 + 8 * v21);
        *(_QWORD *)&v80 = __PAIR64__(v21, v17);
        DWORD2(v80) = v28;
        HIDWORD(v80) = *((_DWORD *)v84[0] + v16);
        v30 = v82;
        if ((unint64_t)v82 >= v83)
        {
          v31 = std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge>((uint64_t *)&v81, (uint64_t)&v78);
        }
        else
        {
          *(_DWORD *)v82 = v29;
          *((_DWORD *)v30 + 1) = HIDWORD(v78);
          *((_QWORD *)v30 + 1) = v79;
          *((_OWORD *)v30 + 1) = v80;
          v31 = (uint64_t)(v30 + 32);
        }
        v82 = (char *)v31;
        ++v16;
        v13 = a1;
      }
      else
      {
        ++v16;
      }
    }
    while (v16 != 3);
    v11 = (v72 + 1);
    v10 = *a2;
    v12 = v72 + 1;
  }
  while (v11 < (a2[1] - *a2) >> 2);
  v33 = v70;
  v32 = v71;
  if (v81 == v82)
    goto LABEL_26;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v78, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  v34 = (char *)v81;
  v35 = v82;
  if (v82 - (_BYTE *)v81 == 32)
  {
LABEL_19:
    v36 = 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
    v41 = (uint64_t *)(a1 + 32);
    v42 = a1 + 104;
    while (1)
    {
      v74 = v39;
      v39 = ++v40;
      v43 = (v35 - v34) >> 5;
      if (v43 > v40)
        break;
LABEL_61:
      if (v43 - 1 <= v39)
        goto LABEL_19;
    }
    v44 = v40;
    v45 = v40;
    while (1)
    {
      v46 = &v34[32 * v74];
      v47 = &v34[32 * v44];
      v48 = (unsigned int *)(v46 + 24);
      v49 = (unsigned int *)(v47 + 24);
      if (*((_DWORD *)v46 + 6) != *((_DWORD *)v47 + 6))
      {
        v50 = *((_DWORD *)v46 + 4);
        v51 = *((_DWORD *)v47 + 4);
        if (v50 != v51)
        {
          v52 = *(_DWORD *)&v34[32 * v44 + 20];
          if (v50 != v52)
          {
            v53 = *(_DWORD *)&v34[32 * v74 + 20];
            if (v53 != v51
              && v53 != v52
              && cv3d::cv::gess::internal::ChartBoundaryEdge::Intersects((float *)v46, (float *)v47))
            {
              if (!*v33 || a3[4] == -1)
                break;
              v85[0] = *v48;
              cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v85, &v78);
              v68 = v39;
              v73 = v40;
              v85[0] = *v49;
              cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v85, __p);
              v54 = 0;
              v55 = 0;
              do
              {
                v85[0] = a3[4];
                v56 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v41, v85);
                v57 = *((unsigned int *)v78 + v54);
                if (*(_QWORD *)(v56 + 48) <= v57)
                  __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                if (((*(_QWORD *)(*(_QWORD *)(v56 + 40) + ((v57 >> 3) & 0x1FFFFFF8)) >> v57) & 1) != 0)
                {
                  for (i = 0; i != 12; i += 4)
                  {
                    v85[0] = a3[4];
                    v59 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v41, v85);
                    v60 = *(unsigned int *)((char *)__p[0] + i);
                    if (*(_QWORD *)(v59 + 48) <= v60)
                      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                    if (((*(_QWORD *)(*(_QWORD *)(v59 + 40) + ((v60 >> 3) & 0x1FFFFFF8)) >> v60) & 1) != 0)
                    {
                      v61 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(v42, (unsigned int *)v78 + v54);
                      if (*v61 == *(_DWORD *)((char *)__p[0] + i)
                        || (v62 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v42, (unsigned int *)v78 + v54),
                            v63 = cv3d::cv::gess::mesh::Topology::h(v42, v62),
                            v64 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v42, (unsigned int *)((char *)__p[0] + i)), *(_DWORD *)(v63 + 16) == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v42, v64) + 16)))
                      {
                        v85[0] = a3[4];
                        v65 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v41, v85);
                        v66 = *((unsigned int *)v78 + v54);
                        if (*(_QWORD *)(v65 + 48) <= v66)
                          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
                        v55 |= *(_QWORD *)(*(_QWORD *)(v65 + 40) + ((v66 >> 3) & 0x1FFFFFF8)) >> v66;
                      }
                    }
                  }
                }
              }
              while (v54++ < 2);
              v33 = v70;
              v32 = v71;
              v40 = v73;
              v39 = v68;
              if ((v55 & 1) == 0)
                break;
            }
          }
        }
      }
      v34 = (char *)v81;
      v35 = v82;
      v43 = (v82 - (_BYTE *)v81) >> 5;
      v44 = ++v45;
      if (v43 <= v45)
        goto LABEL_61;
    }
    *v32 = *v48;
    *v69 = *v49;
    v36 = 1;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if ((v36 & 1) == 0)
LABEL_26:
    v37 = 0;
  else
    v37 = 1;
  if (v81)
  {
    v82 = (char *)v81;
    operator delete(v81);
  }
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
  return v37;
}

void sub_23C581DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  v28 = *(void **)(v26 - 120);
  if (v28)
  {
    *(_QWORD *)(v26 - 112) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::BipartitionChartWithDiagonal(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, _BYTE *a7, char **a8, char **a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t i;
  unsigned int *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  int v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _BYTE *v81;
  void *__p[3];
  void *v86[3];
  _OWORD v87[2];
  __int128 v88;
  _OWORD v89[2];
  __int128 v90;
  unsigned int v91[3];

  if (*a5 == -1 || *a6 == -1)
    cv3d::cv::gess::internal::BipartitionChartWithDiagonal();
  if (*a5 == *a6)
    cv3d::cv::gess::internal::BipartitionChartWithDiagonal();
  if ((unint64_t)(a2[1] - *a2) <= 7)
    cv3d::cv::gess::internal::BipartitionChartWithDiagonal();
  v90 = 0u;
  v88 = 0u;
  memset(v89, 0, sizeof(v89));
  memset(v87, 0, sizeof(v87));
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v89, a5);
  std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v87, a6);
  v15 = *(_QWORD *)(a1 + 152);
  v14 = *(_QWORD *)(a1 + 160);
  v16 = v14 - v15;
  v81 = a7;
  if (v14 == v15)
  {
    v17 = 0;
  }
  else
  {
    if (v16 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = operator new(v14 - v15);
    bzero(v17, v16 & 0xFFFFFFFFFFFFFFFCLL);
  }
  *((_DWORD *)v17 + *a5) = 1;
  *((_DWORD *)v17 + *a6) = 2;
  v18 = a4 + 1;
  v19 = a4 + 2;
  while (*((_QWORD *)&v90 + 1))
  {
    LODWORD(v86[0]) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v89[0] + 1)
                                            + (((unint64_t)v90 >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * (v90 & 0x3FF));
    *(_QWORD *)&v90 = v90 + 1;
    --*((_QWORD *)&v90 + 1);
    if ((unint64_t)v90 >= 0x800)
    {
      operator delete(**((void ***)&v89[0] + 1));
      *((_QWORD *)&v89[0] + 1) += 8;
      *(_QWORD *)&v90 = v90 - 1024;
    }
    v20 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)v86);
    LODWORD(__p[0]) = v20;
    do
    {
      LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
      if (!cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)__p, v18, v19))
      {
        v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
        v91[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v21) + 16);
        if (!*((_DWORD *)v17 + v91[0]))
        {
          std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v89, v91);
          *((_DWORD *)v17 + v91[0]) = 1;
        }
      }
    }
    while (LODWORD(__p[0]) != v20);
    v22 = *((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1))
    {
LABEL_21:
      LODWORD(v86[0]) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v87[0] + 1)
                                              + (((unint64_t)v88 >> 7) & 0x1FFFFFFFFFFFFF8))
                                  + 4 * (v88 & 0x3FF));
      *(_QWORD *)&v88 = v88 + 1;
      *((_QWORD *)&v88 + 1) = v22 - 1;
      if ((unint64_t)v88 >= 0x800)
      {
        operator delete(**((void ***)&v87[0] + 1));
        *((_QWORD *)&v87[0] + 1) += 8;
        *(_QWORD *)&v88 = v88 - 1024;
      }
      v23 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)v86);
      LODWORD(__p[0]) = v23;
      do
      {
        LODWORD(__p[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p) + 8);
        if (!cv3d::cv::gess::internal::IsChartBoundary(a1, (unsigned int *)__p, v18, v19))
        {
          v24 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
          v91[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v24) + 16);
          if (!*((_DWORD *)v17 + v91[0]))
          {
            std::deque<cv3d::cv::gess::mesh::FaceHandle>::push_back(v87, v91);
            *((_DWORD *)v17 + v91[0]) = 2;
          }
        }
      }
      while (LODWORD(__p[0]) != v23);
    }
  }
  v22 = *((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
    goto LABEL_21;
  if (*v81 && a4[4] != -1)
  {
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v86, 3uLL);
    v25 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
    LOBYTE(v91[0]) = 0;
    std::vector<BOOL>::vector(__p, v25, (unsigned __int8 *)v91);
    v27 = *(_QWORD *)(a1 + 152);
    v26 = *(_QWORD *)(a1 + 160);
    if (v26 != v27)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = *((_QWORD *)__p[0] + (v28 >> 6));
        if ((v30 & (1 << v28)) == 0)
        {
          *((_QWORD *)__p[0] + (v28 >> 6)) = v30 | (1 << v28);
          if (*((_DWORD *)v17 + v28))
          {
            v91[0] = v29;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, v91, v86);
            for (i = 0; i != 12; i += 4)
            {
              v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v86[0] + i));
              v33 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v32);
              if ((*v33 & v35) == 0)
              {
                v91[0] = a4[4];
                v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), v91, v34);
                v37 = *(unsigned int *)((char *)v86[0] + i);
                if (*(_QWORD *)(v36 + 48) <= v37)
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                if (((*(_QWORD *)(*(_QWORD *)(v36 + 40) + ((v37 >> 3) & 0x1FFFFFF8)) >> v37) & 1) != 0)
                {
                  v38 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)v86[0] + i));
                  v39 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v38) + 16);
                  v40 = *((_DWORD *)v17 + v39);
                  if (v40)
                  {
                    v41 = *((_DWORD *)v17 + v28);
                    if (v40 != v41)
                    {
                      if (*(_BYTE *)(*a3 + v39) == 2)
                      {
                        *((_DWORD *)v17 + v28) = v40;
                      }
                      else
                      {
                        *((_DWORD *)v17 + v39) = v41;
                        *(_QWORD *)((char *)__p[0] + ((v39 >> 3) & 0x1FFFFFF8)) |= 1 << v39;
                      }
                    }
                  }
                }
              }
            }
            v27 = *(_QWORD *)(a1 + 152);
            v26 = *(_QWORD *)(a1 + 160);
          }
        }
        v28 = ++v29;
      }
      while (v29 < (unint64_t)((v26 - v27) >> 2));
    }
    if (__p[0])
      operator delete(__p[0]);
    if (v86[0])
    {
      v86[1] = v86[0];
      operator delete(v86[0]);
    }
  }
  a8[1] = *a8;
  v42 = *a9;
  a9[1] = *a9;
  v43 = *a2;
  if (a2[1] != *a2)
  {
    v44 = 0;
    while (1)
    {
      v45 = *(unsigned int *)(v43 + 4 * v44);
      v46 = *((_DWORD *)v17 + v45);
      if (v46 == 2)
      {
        v55 = a9[1];
        v54 = (unint64_t)a9[2];
        if ((unint64_t)v55 >= v54)
        {
          v59 = (v55 - *a9) >> 2;
          if ((unint64_t)(v59 + 1) >> 62)
            goto LABEL_114;
          v60 = v54 - (_QWORD)*a9;
          v61 = v60 >> 1;
          if (v60 >> 1 <= (unint64_t)(v59 + 1))
            v61 = v59 + 1;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a9 + 2), v62);
            LODWORD(v45) = *(_DWORD *)(v43 + 4 * v44);
          }
          else
          {
            v63 = 0;
          }
          v71 = &v63[4 * v59];
          *(_DWORD *)v71 = v45;
          v56 = v71 + 4;
          v73 = *a9;
          v72 = a9[1];
          if (v72 != *a9)
          {
            do
            {
              v74 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v71 - 1) = v74;
              v71 -= 4;
            }
            while (v72 != v73);
            v72 = *a9;
          }
          *a9 = v71;
          a9[1] = v56;
          a9[2] = &v63[4 * v62];
          if (v72)
            operator delete(v72);
        }
        else
        {
          *(_DWORD *)v55 = v45;
          v56 = v55 + 4;
        }
        a9[1] = v56;
        goto LABEL_102;
      }
      if (v46 == 1)
      {
        v48 = a8[1];
        v47 = (unint64_t)a8[2];
        if ((unint64_t)v48 >= v47)
        {
          v49 = (v48 - *a8) >> 2;
          if ((unint64_t)(v49 + 1) >> 62)
            goto LABEL_114;
          v50 = v47 - (_QWORD)*a8;
          v51 = v50 >> 1;
          if (v50 >> 1 <= (unint64_t)(v49 + 1))
            v51 = v49 + 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v51;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a8 + 2), v52);
            LODWORD(v45) = *(_DWORD *)(v43 + 4 * v44);
          }
          else
          {
            v53 = 0;
          }
          v67 = &v53[4 * v49];
          *(_DWORD *)v67 = v45;
          v58 = v67 + 4;
          v69 = *a8;
          v68 = a8[1];
          if (v68 != *a8)
          {
            do
            {
              v70 = *((_DWORD *)v68 - 1);
              v68 -= 4;
              *((_DWORD *)v67 - 1) = v70;
              v67 -= 4;
            }
            while (v68 != v69);
            goto LABEL_98;
          }
          goto LABEL_99;
        }
      }
      else
      {
        v48 = a8[1];
        v57 = (unint64_t)a8[2];
        if ((unint64_t)v48 >= v57)
        {
          v64 = (v48 - *a8) >> 2;
          if ((unint64_t)(v64 + 1) >> 62)
LABEL_114:
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v65 = v57 - (_QWORD)*a8;
          v66 = v65 >> 1;
          if (v65 >> 1 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
            v52 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v52 = v66;
          if (v52)
          {
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a8 + 2), v52);
            LODWORD(v45) = *(_DWORD *)(v43 + 4 * v44);
          }
          else
          {
            v53 = 0;
          }
          v67 = &v53[4 * v64];
          *(_DWORD *)v67 = v45;
          v58 = v67 + 4;
          v75 = *a8;
          v68 = a8[1];
          if (v68 != *a8)
          {
            do
            {
              v76 = *((_DWORD *)v68 - 1);
              v68 -= 4;
              *((_DWORD *)v67 - 1) = v76;
              v67 -= 4;
            }
            while (v68 != v75);
LABEL_98:
            v68 = *a8;
          }
LABEL_99:
          *a8 = v67;
          a8[1] = v58;
          a8[2] = &v53[4 * v52];
          if (v68)
            operator delete(v68);
          goto LABEL_101;
        }
      }
      *(_DWORD *)v48 = v45;
      v58 = v48 + 4;
LABEL_101:
      a8[1] = v58;
LABEL_102:
      ++v44;
      v43 = *a2;
      v77 = a2[1] - *a2;
      if (v44 >= v77 >> 2)
      {
        v78 = v77 >> 2;
        v42 = *a9;
        v79 = a9[1];
        goto LABEL_105;
      }
    }
  }
  v78 = 0;
  v79 = v42;
LABEL_105:
  if (((v79 - v42) >> 2) + ((a8[1] - *a8) >> 2) != v78)
    __assert_rtn("BipartitionChartWithDiagonal", "BlenderUV2WithDiagonal.cpp", 337, "out_chart_faces0.size() + out_chart_faces1.size() == chart_faces.size()");
  if (v17)
    operator delete(v17);
  std::deque<int>::~deque[abi:ne180100](v87);
  std::deque<int>::~deque[abi:ne180100](v89);
  return 1;
}

void sub_23C5825F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (__p)
    operator delete(__p);
  if (v25)
    operator delete(v25);
  std::deque<int>::~deque[abi:ne180100](&a19);
  std::deque<int>::~deque[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C5826F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__push_back_slow_path<cv3d::cv::gess::internal::ChartBoundaryEdge>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  __p = v10;
  v15 = v11;
  v17 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  v16 = v11 + 32;
  std::vector<cv3d::cv::gess::internal::ChartBoundaryEdge>::__swap_out_circular_buffer(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_23C582818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,float>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,float>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,float>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23C582A5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *cv3d::cv::gess::binpack::MaxBox2BinPack::MaxBox2BinPack(_QWORD *this)
{
  *this = 0;
  this[2] = this + 2;
  this[3] = this + 2;
  this[4] = 0;
  return this;
}

cv3d::cv::gess::binpack::MaxBox2BinPack *cv3d::cv::gess::binpack::MaxBox2BinPack::MaxBox2BinPack(cv3d::cv::gess::binpack::MaxBox2BinPack *this, int a2, int a3, char a4)
{
  char *v7;
  _QWORD *v8;
  uint64_t v9;

  v7 = (char *)this + 16;
  *((_QWORD *)this + 2) = (char *)this + 16;
  *((_QWORD *)this + 3) = (char *)this + 16;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 8) = a4;
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((_QWORD *)this + 2);
  v8 = operator new(0x28uLL);
  v8[1] = v7;
  v8[2] = 0;
  *((_DWORD *)v8 + 6) = a2;
  *((_DWORD *)v8 + 7) = a3;
  *((_BYTE *)v8 + 32) = 0;
  v9 = *((_QWORD *)this + 2);
  *v8 = v9;
  *(_QWORD *)(v9 + 8) = v8;
  *((_QWORD *)this + 2) = v8;
  ++*((_QWORD *)this + 4);
  return this;
}

void sub_23C582B00(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v1);
  _Unwind_Resume(a1);
}

__n128 std::list<cv3d::cv::gess::binpack::Box2bin>::push_back(__n128 **a1, __n128 *a2)
{
  __n128 *v4;
  __n128 result;
  unint64_t v6;

  v4 = (__n128 *)operator new(0x28uLL);
  result = *a2;
  v4[1] = *a2;
  v4[2].n128_u8[0] = a2[1].n128_u8[0];
  v6 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(_QWORD *)(v6 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

void cv3d::cv::gess::binpack::MaxBox2BinPack::~MaxBox2BinPack(cv3d::cv::gess::binpack::MaxBox2BinPack *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 16);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((_QWORD *)this + 2);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v1);
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int *v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v30;
  unsigned int v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  void *v39;
  uint64_t *v40;
  unint64_t v41;

  a3[1] = *a3;
  std::vector<cv3d::cv::gess::binpack::Box2bin>::resize(a3, (a2[1] - *a2) >> 4);
  v5 = (uint64_t *)&v39;
  v39 = &v39;
  v40 = (uint64_t *)&v39;
  v41 = 0;
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = v7 >> 4;
    v11 = (uint64_t *)&v39;
    do
    {
      v12 = operator new(0x20uLL);
      v12[1] = &v39;
      v12[2] = v6 + 16 * v8;
      *((_DWORD *)v12 + 6) = v9;
      *v12 = v11;
      v11[1] = (uint64_t)v12;
      v8 = ++v9;
      v11 = v12;
      v39 = v12;
      v41 = v9;
    }
    while (v10 > v9);
    v5 = v40;
  }
  else
  {
    v9 = 0;
  }
  std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(v5, (uint64_t *)&v39, v9);
  if (v41)
  {
    while (1)
    {
      v35 = 0x8000000080000000;
      v13 = v40;
      if (v40 == (uint64_t *)&v39)
        break;
      v14 = 0;
      v15 = 0;
      v30 = 0;
      v31 = 0x80000000;
      v16 = 0x7FFFFFFF;
      v17 = -1;
      v18 = 0x7FFFFFFF;
      v19 = 0x7FFFFFFF;
      v20 = 0x7FFFFFFF;
      v21 = 0x80000000;
      do
      {
        v22 = (int *)v13[2];
        v34 = 0;
        v32 = xmmword_23C60C530;
        v33 = 0;
        cv3d::cv::gess::binpack::MaxBox2BinPack::FindPositionForNewBoxBestAreaFit(a1, (uint64_t)&v32, (int *)&v34 + 1, (int *)&v34, *v22, v22[1]);
        if (HIDWORD(v32) != DWORD1(v32) && (SHIDWORD(v34) < v18 || HIDWORD(v34) == v18 && (int)v34 < v16))
        {
          v19 = v32;
          v21 = HIDWORD(v32);
          v20 = DWORD1(v32);
          v30 = v33;
          v31 = DWORD2(v32);
          v15 = v13;
          v18 = HIDWORD(v34);
          v16 = v34;
          v17 = *((_DWORD *)v13 + 6);
        }
        if (v14 >= 4 && v17 != -1)
        {
          v35 = __PAIR64__(v20, v19);
          v24 = v30;
          v23 = v31;
          v36 = v31;
          v37 = v21;
          v38 = v30;
          goto LABEL_20;
        }
        v13 = (uint64_t *)v13[1];
        v14 += 2;
      }
      while (v13 != (uint64_t *)&v39);
      v35 = __PAIR64__(v20, v19);
      v24 = v30;
      v23 = v31;
      v36 = v31;
      v37 = v21;
      v38 = v30;
      if (v17 == -1)
        break;
LABEL_20:
      cv3d::cv::gess::binpack::MaxBox2BinPack::PlaceBox(a1, (signed __int32 *)&v35);
      v25 = *a3 + 20 * v17;
      *(_DWORD *)v25 = v19;
      *(_DWORD *)(v25 + 4) = v20;
      *(_DWORD *)(v25 + 8) = v23;
      *(_DWORD *)(v25 + 12) = v21;
      *(_BYTE *)(v25 + 16) = v24;
      v26 = *v15;
      *(_QWORD *)(v26 + 8) = v15[1];
      *(_QWORD *)v15[1] = v26;
      --v41;
      operator delete(v15);
      if (!v41)
        goto LABEL_21;
    }
    v27 = 0;
  }
  else
  {
LABEL_21:
    v27 = 1;
  }
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(&v39);
  return v27;
}

void sub_23C582E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<cv3d::cv::gess::binpack::Box2bin>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::binpack::Box2bin>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::FindPositionForNewBoxBestAreaFit(uint64_t result, uint64_t a2, int *a3, int *a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;

  *a3 = 0x7FFFFFFF;
  *a4 = 0x7FFFFFFF;
  v6 = result + 16;
  v7 = *(_QWORD *)(result + 24);
  if (v7 != result + 16)
  {
    v8 = *(unsigned __int8 *)(result + 8);
    do
    {
      v10 = *(_DWORD *)(v7 + 16);
      v9 = *(_DWORD *)(v7 + 20);
      v11 = *(_DWORD *)(v7 + 24) - v10;
      v12 = *(_DWORD *)(v7 + 28) - v9;
      v13 = v12 * v11 - a6 * a5;
      v14 = __OFSUB__(v11, a5);
      v15 = v11 - a5;
      if (v15 < 0 == v14 && v12 >= a6)
      {
        v17 = v12 - a6;
        if (v17 >= v15)
          v17 = v15;
        if (v13 < *a3 || (v13 == *a3 ? (v18 = v17 < *a4) : (v18 = 0), v18))
        {
          result = (v9 + a6);
          *(_DWORD *)a2 = v10;
          *(_DWORD *)(a2 + 4) = v9;
          *(_DWORD *)(a2 + 8) = v10 + a5;
          *(_DWORD *)(a2 + 12) = result;
          *(_BYTE *)(a2 + 16) = 0;
          *a4 = v17;
          *a3 = v13;
        }
      }
      if (v8)
      {
        v19 = *(_DWORD *)(v7 + 16);
        v20 = *(_DWORD *)(v7 + 24) - v19;
        v21 = v20 - a6;
        if (v20 >= a6)
        {
          v22 = *(_DWORD *)(v7 + 20);
          v23 = *(_DWORD *)(v7 + 28) - v22;
          v14 = __OFSUB__(v23, a5);
          v24 = v23 - a5;
          if (v24 < 0 == v14)
          {
            if (v21 < 0)
              v21 = -v21;
            if (v24 < v21)
              v21 = v24;
            if (v13 < *a3 || (v13 == *a3 ? (v25 = v21 < *a4) : (v25 = 0), v25))
            {
              result = (v22 + a5);
              *(_DWORD *)a2 = v19;
              *(_DWORD *)(a2 + 4) = v22;
              *(_DWORD *)(a2 + 8) = v19 + a6;
              *(_DWORD *)(a2 + 12) = result;
              *(_BYTE *)(a2 + 16) = 1;
              *a4 = v21;
              *a3 = v13;
            }
          }
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  return result;
}

void cv3d::cv::gess::binpack::MaxBox2BinPack::PlaceBox(uint64_t a1, signed __int32 *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = a1 + 16;
  v3 = *(uint64_t **)(a1 + 24);
  if (v3 != (uint64_t *)(a1 + 16))
  {
    do
    {
      v6 = cv3d::cv::gess::binpack::MaxBox2BinPack::SplitFreeBox(a1, (uint64_t)(v3 + 2), a2);
      v7 = (uint64_t *)v3[1];
      if (v6)
      {
        v8 = *v3;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)v3[1] = v8;
        --*(_QWORD *)(a1 + 32);
        operator delete(v3);
      }
      v3 = v7;
    }
    while (v7 != (uint64_t *)v2);
  }
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::SplitFreeBox(uint64_t a1, uint64_t a2, signed __int32 *a3)
{
  signed int v5;
  signed __int32 v6;
  signed __int32 v7;
  signed __int32 v8;
  signed __int32 v9;
  unsigned __int32 v11;
  signed int v12;
  signed __int32 v13;
  signed __int32 v14;
  signed __int32 v15;
  unsigned int v16;
  __n128 v18;
  char v19;

  if (a3[2] <= *(_DWORD *)a2)
    return 0;
  v5 = *(_DWORD *)(a2 + 8);
  if (*a3 >= v5)
    return 0;
  v6 = a3[3];
  v7 = *(_DWORD *)(a2 + 4);
  if (v6 <= v7)
    return 0;
  v8 = a3[1];
  v9 = *(_DWORD *)(a2 + 12);
  if (v8 >= v9)
    return 0;
  if (v8 > v7)
  {
    v18.n128_u32[0] = *(_DWORD *)a2;
    *(unint64_t *)((char *)v18.n128_u64 + 4) = __PAIR64__(v5, v7);
    v19 = *(_BYTE *)(a2 + 16);
    v18.n128_u32[3] = v8;
    if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
    {
      std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
      v6 = a3[3];
      v9 = *(_DWORD *)(a2 + 12);
    }
  }
  if (v6 < v9)
  {
    v11 = *(_DWORD *)a2;
    v18.n128_u32[2] = *(_DWORD *)(a2 + 8);
    v18.n128_u32[3] = v9;
    v19 = *(_BYTE *)(a2 + 16);
    v18.n128_u64[0] = __PAIR64__(v6, v11);
    if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
    {
      std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
      v9 = *(_DWORD *)(a2 + 12);
    }
  }
  if (a3[1] < v9)
  {
    v12 = *(_DWORD *)(a2 + 4);
    if (a3[3] > v12)
    {
      v13 = *a3;
      v14 = *(_DWORD *)(a2 + 8);
      if (*a3 > *(_DWORD *)a2 && v13 < v14)
      {
        v18.n128_u32[0] = *(_DWORD *)a2;
        *(unint64_t *)((char *)v18.n128_u64 + 4) = __PAIR64__(v13, v12);
        v19 = *(_BYTE *)(a2 + 16);
        v18.n128_u32[3] = v9;
        if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
        {
          std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
          v14 = *(_DWORD *)(a2 + 8);
        }
      }
      v15 = a3[2];
      if (v15 < v14)
      {
        v16 = *(_DWORD *)(a2 + 4);
        v18.n128_u32[3] = *(_DWORD *)(a2 + 12);
        v19 = *(_BYTE *)(a2 + 16);
        v18.n128_u32[0] = v15;
        *(unint64_t *)((char *)v18.n128_u64 + 4) = __PAIR64__(v14, v16);
        if ((cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(a1, &v18, a2) & 1) == 0)
          std::list<cv3d::cv::gess::binpack::Box2bin>::push_back((__n128 **)(a1 + 16), &v18);
      }
    }
  }
  return 1;
}

uint64_t cv3d::cv::gess::binpack::MaxBox2BinPack::IfFreeBoxContainedByOthers(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 == a1 + 16)
    return 0;
  while (v3 + 16 == a3
       || *(_DWORD *)(v3 + 16) > *a2
       || *(_DWORD *)(v3 + 20) > a2[1]
       || *(_DWORD *)(v3 + 24) < a2[2]
       || *(_DWORD *)(v3 + 28) < a2[3])
  {
    v3 = *(_QWORD *)(v3 + 8);
    if (v3 == a1 + 16)
      return 0;
  }
  return 1;
}

uint64_t cv3d::cv::gess::binpack::Box2BinPacking(uint64_t *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v6;
  _BYTE v8[16];
  _QWORD v9[3];

  cv3d::cv::gess::binpack::MaxBox2BinPack::MaxBox2BinPack((cv3d::cv::gess::binpack::MaxBox2BinPack *)v8, a3, a4, 1);
  v6 = cv3d::cv::gess::binpack::MaxBox2BinPack::Insert((uint64_t)v8, a1, a2);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v9);
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(v9);
  return v6;
}

void sub_23C5832A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((_QWORD *)(v1 + 16));
  std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear((_QWORD *)(v1 + 16));
  _Unwind_Resume(a1);
}

cv3d::cv::gess::binpack::Binpack *cv3d::cv::gess::binpack::Binpack::Binpack(cv3d::cv::gess::binpack::Binpack *this, uint64_t **a2, const unsigned int *a3, const unsigned __int8 *a4)
{
  std::vector<int> *v6;
  _DWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  std::vector<int>::pointer begin;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  const char *v39;
  int v40;
  void *__p[2];
  char v42;
  uint64_t v43;
  int v44;

  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  v6 = (std::vector<int> *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = -1;
  v7 = (_DWORD *)((char *)this + 40);
  *((_QWORD *)this + 6) = -1;
  *((_DWORD *)this + 14) = -1;
  *((_DWORD *)this + 15) = *a3;
  *((_BYTE *)this + 64) = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v43 = 0;
  *v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(a2 + 10, (uint64_t)&v43, (unsigned __int8 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  v8 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v9 = (int *)((char *)this + 44);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v8, (_DWORD *)this + 11, (unsigned __int8 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  v10 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v43) = 0;
  *((_DWORD *)this + 12) = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v10 + 56), (uint64_t)&v43, (unsigned __int8 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  v11 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(v43) = 0;
  *((_DWORD *)this + 13) = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(v11 + 56), (uint64_t)&v43, (unsigned __int8 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  v12 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v44 = 0;
  v43 = 0;
  *((_DWORD *)this + 14) = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v12 + 56), (uint64_t)&v43, (unsigned __int8 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (*v7 == -1)
  {
    v39 = "uv_handle_.Valid()";
    v40 = 213;
    goto LABEL_46;
  }
  v14 = *v9;
  if (*v9 == -1)
  {
    v39 = "g_handle_.Valid()";
    v40 = 214;
    goto LABEL_46;
  }
  if (*((_DWORD *)this + 12) == -1)
  {
    v39 = "f_chart_gid_handle_.Valid()";
    v40 = 215;
    goto LABEL_46;
  }
  if (*((_DWORD *)this + 14) == -1)
  {
    v39 = "uv_ind_handle_.Valid()";
    v40 = 216;
LABEL_46:
    __assert_rtn("Binpack", "Binpack.cpp", v40, v39);
  }
  if (*((_DWORD *)this + 13) == -1)
  {
    v15 = *((_QWORD *)this + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>(v15, (_DWORD *)this + 13, (__int128 *)__p);
    if (v42 < 0)
      operator delete(__p[0]);
    v14 = *v9;
  }
  v16 = *((_QWORD *)this + 1);
  LODWORD(__p[0]) = v14;
  v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v16 + 80), (unsigned int *)__p, v13);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  v19 = *((_QWORD *)this + 1);
  v21 = *(_QWORD *)(v19 + 152);
  v20 = *(_QWORD *)(v19 + 160);
  v22 = v18;
  std::vector<unsigned int>::reserve(v6, v18);
  v23 = v20 - v21;
  if (((v20 - v21) & 0x3FFFFFFFCLL) != 0)
  {
    v24 = 0;
    v25 = 0;
    v26 = (v23 >> 2);
    do
    {
      if (v25 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(*((_QWORD *)this + 1), *((_DWORD *)this + 12), v24))
      {
        v28 = (_DWORD *)*((_QWORD *)this + 3);
        v27 = *((_QWORD *)this + 4);
        if ((unint64_t)v28 >= v27)
        {
          begin = v6->__begin_;
          v31 = v28 - v6->__begin_;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v33 = v27 - (_QWORD)begin;
          if (v33 >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 32, v34);
            begin = (std::vector<int>::pointer)*((_QWORD *)this + 2);
            v28 = (_DWORD *)*((_QWORD *)this + 3);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v31];
          *(_DWORD *)v36 = v24;
          v29 = v36 + 4;
          while (v28 != begin)
          {
            v37 = *--v28;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          *((_QWORD *)this + 2) = v36;
          *((_QWORD *)this + 3) = v29;
          *((_QWORD *)this + 4) = &v35[4 * v34];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v28 = v24;
          v29 = v28 + 1;
        }
        *((_QWORD *)this + 3) = v29;
        ++v25;
      }
      ++v24;
    }
    while (v24 != v26);
  }
  if (v22 != (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2)
    __assert_rtn("Binpack", "Binpack.cpp", 232, "g_starts_.size() == g_size");
  return this;
}

void sub_23C5836A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v15 + 24) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::binpack::Binpack::BinpackTexture(cv3d::cv::gess::binpack::Binpack *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  int *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  float v41;
  int v42;
  char v43;
  int *v44;
  char *v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  _BYTE *v49;
  _DWORD *v50;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  int v66;
  char *v67;
  float32x2_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  void *__p;
  _DWORD *v77;
  char *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  int *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;

  v4 = *((_QWORD *)this + 1);
  LODWORD(v85) = *((_DWORD *)this + 10);
  v5 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v4 + 80), (unsigned int *)&v85, a3);
  v6 = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
  v9 = cv3d::cv::gess::binpack::Binpack::MoveToOrigin(this, v7, v8);
  v74 = v6;
  if (v6)
  {
    v12 = (float32x2_t *)v5[5];
    v13 = (uint64_t)(v5[6] - (_QWORD)v12) >> 3;
    __asm { FMOV            V0.2S, #5.0 }
    v19 = v6;
    do
    {
      if (!v13)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v9, v10, v11);
      *v12 = vmul_f32(vmul_n_f32(*v12, (float)*((unsigned int *)this + 15)), _D0);
      ++v12;
      --v13;
      --v19;
    }
    while (v19);
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v79 = 0;
  v80 = 0;
  v20 = 199;
  v81 = 0;
  v73 = v5;
  while (1)
  {
    v75 = v20;
    cv3d::cv::gess::binpack::Binpack::ComputeAtlasSizeRect((uint64_t)this, &v82, *((unsigned int *)this + 15));
    v23 = (int *)v82;
    v22 = v83;
    if (v83 == v82)
      goto LABEL_16;
    v24 = ((char *)v83 - (_BYTE *)v82) >> 4;
    v25 = (unsigned int *)((char *)v82 + 4);
    v26 = 1;
    do
    {
      v27 = *(v25 - 1) + 4;
      v28 = *((_DWORD *)this + 15) - 1;
      if (v27 < v28)
      {
        v29 = *v25 + 4;
        if (v29 < v28)
        {
          *(v25 - 1) = v27;
          *v25 = v29;
        }
      }
      v25 += 4;
    }
    while (v24 > v26++);
    if (v22 == v23)
    {
LABEL_16:
      v31 = 0;
    }
    else
    {
      v31 = 0;
      do
      {
        v32 = *v23;
        v33 = v23[1];
        v23 += 4;
        v31 += v33 * v32;
      }
      while (v23 != v22);
    }
    v34 = *((_QWORD *)this + 1);
    LODWORD(__p) = *((_DWORD *)this + 11);
    v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v34 + 80), (unsigned int *)&__p, v21);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
    std::vector<cv3d::cv::gess::binpack::BoxSize>::resize((uint64_t)&v79, v36);
    v38 = *((_DWORD *)this + 15);
    v39 = *((unsigned __int8 *)this + 64);
    if (v31 > v38 * v38 * v39)
    {
      v40 = logf((float)v38 / sqrtf((float)v31 / (float)v39));
      v41 = pow(0.9, (double)(int)(v40 / -0.105360516));
      if (v41 > 0.9)
        v41 = *(float *)"fff?";
      goto LABEL_51;
    }
    v86 = v85;
    v41 = *(float *)"fff?";
    if (v39)
      break;
LABEL_51:
    if (v74)
    {
      v68 = (float32x2_t *)v5[5];
      v69 = (uint64_t)(v5[6] - (_QWORD)v68) >> 3;
      v70 = v74;
      do
      {
        if (!v69)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *v68 = vmul_n_f32(*v68, v41);
        ++v68;
        --v69;
        --v70;
      }
      while (v70);
    }
    v20 = v75 - 1;
    if (!(_WORD)v75)
      goto LABEL_58;
  }
  v42 = 0;
  while (1)
  {
    v43 = cv3d::cv::gess::binpack::Box2BinPacking((uint64_t *)&v82, (uint64_t *)&v85, *((_DWORD *)this + 15), *((_DWORD *)this + 15));
    __p = 0;
    v77 = 0;
    v78 = 0;
    v45 = (char *)v82;
    v44 = v83;
    if (v83 == v82)
    {
      v46 = 0;
      v67 = 0;
    }
    else
    {
      v46 = 0;
      v47 = 0;
      v48 = 0;
      do
      {
        v49 = v85;
        v50 = (char *)v85 + 20 * v47;
        if (*v50 == 0x7FFFFFFF)
        {
          v51 = &v45[16 * v47];
          if (v46 >= (_DWORD *)v78)
          {
            v55 = ((char *)v46 - (_BYTE *)__p) >> 4;
            if ((unint64_t)(v55 + 1) >> 60)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v56 = (v78 - (_BYTE *)__p) >> 3;
            if (v56 <= v55 + 1)
              v56 = v55 + 1;
            if ((unint64_t)(v78 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
              v57 = 0xFFFFFFFFFFFFFFFLL;
            else
              v57 = v56;
            if (v57)
              v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)&v78, v57);
            else
              v58 = 0;
            v59 = &v58[16 * v55];
            *(_DWORD *)v59 = *(_DWORD *)v51;
            *((_DWORD *)v59 + 1) = *((_DWORD *)v51 + 1);
            v60 = &v45[16 * v47];
            v61 = *((_DWORD *)v60 + 2);
            *(_DWORD *)(v59 + 11) = *(_DWORD *)(v60 + 11);
            *((_DWORD *)v59 + 2) = v61;
            v63 = __p;
            v62 = v77;
            v64 = v59;
            if (v77 != __p)
            {
              do
              {
                v65 = *(v62 - 4);
                v62 -= 4;
                *(v64 - 4) = v65;
                v64 -= 4;
                v64[1] = v62[1];
                v66 = v62[2];
                *(_DWORD *)((char *)v64 + 11) = *(_DWORD *)((char *)v62 + 11);
                v64[2] = v66;
              }
              while (v62 != v63);
              v62 = __p;
            }
            v46 = v59 + 16;
            __p = v64;
            v77 = v59 + 16;
            v78 = &v58[16 * v57];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v46 = *(_DWORD *)v51;
            v46[1] = *((_DWORD *)v51 + 1);
            v52 = *((_DWORD *)v51 + 2);
            *(_DWORD *)((char *)v46 + 11) = *(_DWORD *)(v51 + 11);
            v46[2] = v52;
            v46 += 4;
          }
          v77 = v46;
          v45 = (char *)v82;
          v44 = v83;
        }
        else
        {
          v53 = &v45[16 * v47];
          v54 = (char *)v79 + 16 * *((unsigned __int16 *)v53 + 4);
          *(_DWORD *)v54 = *v50;
          *((_DWORD *)v54 + 1) = v50[1];
          *((_DWORD *)v54 + 2) = *((_DWORD *)v53 + 2);
          *((_WORD *)v54 + 6) = v42;
          v54[14] = v49[20 * v47 + 16];
        }
        v47 = (unsigned __int16)++v48;
      }
      while ((unsigned __int16)v48 < (unint64_t)(((char *)v44 - v45) >> 4));
      v67 = (char *)__p;
    }
    std::vector<cv3d::cv::gess::binpack::BoxSize>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::binpack::BoxSize*,cv3d::cv::gess::binpack::BoxSize*>(&v82, v67, v46, ((char *)v46 - v67) >> 4);
    if (__p)
    {
      v77 = __p;
      operator delete(__p);
    }
    if ((v43 & 1) != 0)
      break;
    if (++v42 >= *((unsigned __int8 *)this + 64))
    {
      v41 = *(float *)"fff?";
      v5 = v73;
      goto LABEL_51;
    }
  }
  if ((_WORD)v75)
  {
LABEL_58:
    cv3d::cv::gess::binpack::Binpack::ApplyBinpack2OBJTexCoord((uint64_t)this, &v79, v37);
    v71 = 1;
    goto LABEL_60;
  }
  v71 = 0;
LABEL_60:
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v82)
  {
    v83 = (int *)v82;
    operator delete(v82);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  return v71;
}

void sub_23C583C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::binpack::Binpack::MoveToOrigin(cv3d::cv::gess::binpack::Binpack *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int32x2_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;

  v4 = *((_QWORD *)this + 1);
  LODWORD(v30) = *((_DWORD *)this + 10);
  v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v4 + 80), (unsigned int *)&v30, a3);
  v6 = *((_QWORD *)this + 1);
  LODWORD(v30) = *((_DWORD *)this + 11);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v6 + 80), (unsigned int *)&v30, v7);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 152);
  v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 160);
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  v29 = v9;
  if (v9)
  {
    v12 = 0;
    v13 = ((unint64_t)(v10 - v11) >> 2);
    v14 = v9 - 1;
    v15 = vdup_n_s32(0x7F7FFFFFu);
    do
    {
      v16 = *((_QWORD *)this + 2);
      v17 = v13;
      if (v12 != v14)
        v17 = *(unsigned int *)(v16 + 4 * v12 + 4);
      v18 = *(unsigned int *)(v16 + 4 * v12);
      v19 = (float32x2_t)v15;
      if (v18 < v17)
      {
        v19 = (float32x2_t)v15;
        do
        {
          v20 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((_QWORD *)this + 1), *((_DWORD *)this + 14), v18);
          for (i = 0; i != 12; i += 4)
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v30, (unsigned int *)(v20 + i), (_DWORD *)(v20 + i));
            v22 = *(unsigned int *)(v20 + i);
            v23 = *(_QWORD *)(v5 + 40);
            if (v22 >= (*(_QWORD *)(v5 + 48) - v23) >> 3)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, *(float32x2_t *)(v23 + 8 * v22)), *(int8x8_t *)(v23 + 8 * v22), (int8x8_t)v19);
          }
          ++v18;
        }
        while (v18 != v17);
      }
      v24 = (uint64_t **)v31;
      if ((_QWORD)v31)
      {
        v25 = *(_QWORD *)(v5 + 40);
        v26 = (*(_QWORD *)(v5 + 48) - v25) >> 3;
        do
        {
          v27 = *((unsigned int *)v24 + 4);
          if (v26 <= v27)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v25 + 8 * v27) = vsub_f32(*(float32x2_t *)(v25 + 8 * v27), v19);
          v24 = (uint64_t **)*v24;
        }
        while (v24);
      }
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(&v30);
      ++v12;
    }
    while (v12 != v29);
  }
  return 1;
}

void sub_23C583EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::binpack::Binpack::ComputeAtlasSizeRect(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  float v14;
  int32x2_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  float32x2_t *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  void *__p;
  int v46;

  v41 = a3;
  v5 = *(_QWORD *)(a1 + 8);
  LODWORD(__p) = *(_DWORD *)(a1 + 44);
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v5 + 80), (unsigned int *)&__p, a3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v8 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(v8 + 152);
  v9 = *(_QWORD *)(v8 + 160);
  a2[1] = *a2;
  v40 = a2;
  std::vector<cv3d::cv::gess::binpack::BoxSize>::resize((uint64_t)a2, v7);
  v39 = v7;
  if (v7)
  {
    v13 = 0;
    v14 = (float)(v41 - 1);
    v15 = vdup_n_s32(0x7F7FFFFFu);
    v37 = v7 - 1;
    v38 = ((unint64_t)(v9 - v10) >> 2);
    do
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = v38;
      if (v13 != v37)
        v17 = *(unsigned int *)(v16 + 4 * v13 + 4);
      v18 = *(unsigned int *)(v16 + 4 * v13);
      v19 = (float32x2_t)0x80000000800000;
      v20 = (float32x2_t)v15;
      if (v18 < v17)
      {
        v21 = *(unsigned int *)(v16 + 4 * v13);
        v20 = (float32x2_t)v15;
        do
        {
          v22 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 56), v21);
          v23 = 0;
          __p = *(void **)v22;
          v46 = *(_DWORD *)(v22 + 8);
          do
          {
            v24 = (float32x2_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 40), *(unsigned int *)((char *)&__p + v23));
            v23 += 4;
            *(float32x2_t *)&v12 = *v24;
            v20 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v20, *v24), (int8x8_t)*v24, (int8x8_t)v20);
            v19 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v24, v19), (int8x8_t)*v24, (int8x8_t)v19);
          }
          while (v23 != 12);
          ++v21;
        }
        while (v21 != v17);
      }
      LODWORD(v12) = 1.0;
      v42 = v12;
      if (v41 && *(_BYTE *)a1)
      {
        *(float32x2_t *)&v12 = vsub_f32(v19, v20);
        if (*(float *)&v12 > v14 || *((float *)&v12 + 1) > v14)
        {
          if (*(float *)&v12 < *((float *)&v12 + 1))
            *(float *)&v12 = *((float *)&v12 + 1);
          *(double *)&v12 = (double)(v41 - 1) / *(float *)&v12;
          *(float *)&v12 = *(double *)&v12;
          v42 = v12;
          *(double *)&v12 = *(float *)&v12;
          if (*(double *)&v12 < 0.00001)
          {
            LODWORD(v12) = 0;
            v42 = v12;
          }
        }
      }
      v26 = *(_QWORD *)(a1 + 8);
      LODWORD(v43) = *(_DWORD *)(a1 + 40);
      v27 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v26 + 80), (unsigned int *)&v43, v11);
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
      LOBYTE(v43) = 0;
      std::vector<BOOL>::vector(&__p, v28, (unsigned __int8 *)&v43);
      *((_QWORD *)&v12 + 1) = *((_QWORD *)&v42 + 1);
      if (*(float *)&v42 < 1.0)
      {
        if (v18 < v17)
        {
          do
          {
            v29 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 56), v18);
            v30 = 0;
            v43 = *(_QWORD *)v29;
            v44 = *(_DWORD *)(v29 + 8);
            v31 = __p;
            do
            {
              v11 = *(unsigned int *)((char *)&v43 + v30);
              v32 = v11 >> 6;
              v33 = 1 << v11;
              if (((1 << v11) & v31[v11 >> 6]) == 0)
              {
                v34 = (float32x2_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 40), v11);
                *v34 = vmul_n_f32(*v34, *(float *)&v42);
                v31 = __p;
                *((_QWORD *)__p + v32) |= v33;
              }
              v30 += 4;
            }
            while (v30 != 12);
            ++v18;
          }
          while (v18 != v17);
        }
        *((_QWORD *)&v12 + 1) = *((_QWORD *)&v42 + 1);
        v19 = vmul_n_f32(v19, *(float *)&v42);
      }
      v35 = *v40 + 16 * v13;
      *(uint32x2_t *)&v12 = vcvt_u32_f32(vrndp_f32(vsub_f32(v19, v20)));
      *(_QWORD *)v35 = v12;
      *(_DWORD *)(v35 + 8) = v13;
      if (__p)
        operator delete(__p);
      ++v13;
    }
    while (v13 != v39);
  }
  return 1;
}

void sub_23C5841C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::binpack::BoxSize>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::binpack::BoxSize>::__append((char **)a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::binpack::Binpack::ApplyBinpack2OBJTexCoord(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t i;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *__p[3];

  v5 = *(_QWORD *)(a1 + 8);
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 44);
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v5 + 80), (unsigned int *)__p, a3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v8 = *(uint64_t **)(a1 + 8);
  v9 = ((unint64_t)(v8[20] - v8[19]) >> 2);
  LODWORD(v38) = *(_DWORD *)(a1 + 40);
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v8 + 10, (unsigned int *)&v38, v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  LOBYTE(v38) = 0;
  std::vector<BOOL>::vector(__p, v12, (unsigned __int8 *)&v38);
  v37 = v7;
  if (v7)
  {
    v14 = 0;
    v35 = v9;
    v36 = v7 - 1;
    do
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (v14 != v36)
        v9 = *(unsigned int *)(v15 + 4 * v14 + 4);
      v16 = *(unsigned int *)(v15 + 4 * v14);
      if (v16 < v9)
      {
        do
        {
          v17 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 56), v16);
          v18 = 0;
          v38 = *(_QWORD *)v17;
          v39 = *(_DWORD *)(v17 + 8);
          v19 = __p[0];
          do
          {
            v13 = *(unsigned int *)((char *)&v38 + v18);
            v20 = v13 >> 6;
            v21 = 1 << v13;
            if (((1 << v13) & v19[v13 >> 6]) == 0)
            {
              v22 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 40), v13);
              v23 = *a2 + 16 * v14;
              v25 = *(float *)v22;
              v24 = *(float *)(v22 + 4);
              if (*(_BYTE *)(v23 + 14))
              {
                *(float *)v22 = v24;
                *(float *)(v22 + 4) = v25;
                v26 = v25;
              }
              else
              {
                v26 = *(float *)(v22 + 4);
                v24 = *(float *)v22;
              }
              v27 = (float)*(unsigned int *)(a1 + 60);
              v28 = (float)(v26 + (float)*(unsigned int *)(v23 + 4)) / v27;
              *(float *)v22 = (float)(v24 + (float)*(unsigned int *)v23) / v27;
              *(float *)(v22 + 4) = v28;
              v19 = __p[0];
              *((_QWORD *)__p[0] + v20) |= v21;
            }
            v18 += 4;
          }
          while (v18 != 12);
          ++v16;
        }
        while (v16 != v9);
      }
      ++v14;
      v9 = v35;
    }
    while (v14 != v37);
  }
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v30 = *(_WORD *)(*a2
                     + 16
                     * *(unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 48), i)+ 12);
      *(_WORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned short>(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 52), i) = v30;
    }
  }
  v31 = *(_QWORD *)(a1 + 8);
  LODWORD(v38) = *(_DWORD *)(a1 + 44);
  v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v31 + 80), (unsigned int *)&v38, v13);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 32))(v32, *(unsigned __int8 *)(a1 + 64));
  v33 = (unsigned int *)(a1 + 48);
  if (*(_DWORD *)(a1 + 48) != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>((uint64_t *)(*(_QWORD *)(a1 + 8) + 56), v33);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(unsigned __int8 *)(a1 + 64) >= 2u)
    cv3d::cv::gess::alg::SortFaceByGroupID(*(uint64_t ***)(a1 + 8), (cv3d::cv::gess::mesh::TriMesh *)v33);
  if (__p[0])
    operator delete(__p[0]);
  return 1;
}

void sub_23C5844B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector2T<float>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (v3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 3))
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 8 * v3;
}

_QWORD *std::__list_imp<cv3d::cv::gess::binpack::Box2bin>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::vector<cv3d::cv::gess::binpack::Box2bin>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 20 * a2;
      do
      {
        *(_OWORD *)v7 = xmmword_23C60C530;
        *(_BYTE *)(v7 + 16) = 0;
        v7 += 20;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    v20 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[20 * v8];
    __p = v12;
    v17 = v14;
    v19 = &v12[20 * v11];
    v15 = &v14[20 * a2];
    do
    {
      *(_OWORD *)v14 = xmmword_23C60C530;
      v14[16] = 0;
      v14 += 20;
    }
    while (v14 != v15);
    v18 = v15;
    std::vector<cv3d::cv::gess::binpack::Box2bin>::__swap_out_circular_buffer(a1, &__p);
    if (v18 != v17)
      v18 = &v17[(v18 - v17 - 20) % 0x14uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_23C584748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::binpack::Box2bin>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 20);
    v2 -= 20;
    *(_DWORD *)(v4 - 20) = v5;
    v4 -= 20;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<cv3d::cv::gess::binpack::BoxSize>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  int v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = *a1;
    v17 = a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_DWORD *)v17 - 4);
        v17 -= 16;
        *((_DWORD *)v14 - 4) = v19;
        v14 -= 16;
        *((_DWORD *)v14 + 1) = *((_DWORD *)v17 + 1);
        v20 = *((_DWORD *)v17 + 2);
        *(_DWORD *)(v14 + 11) = *(_DWORD *)(v17 + 11);
        *((_DWORD *)v14 + 2) = v20;
      }
      while (v17 != v18);
      v17 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_DWORD *std::vector<cv3d::cv::gess::binpack::BoxSize>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::binpack::BoxSize*,cv3d::cv::gess::binpack::BoxSize*>(_QWORD *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _DWORD *v6;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  unint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  int v20;
  char *v21;
  _DWORD *v22;
  int v23;
  int64_t v24;
  _DWORD *v25;
  int v26;

  v6 = a2;
  v8 = a1[2];
  result = (_DWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, v11);
    v13 = (_DWORD *)a1[1];
    v12 = (_DWORD **)(a1 + 1);
    result = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *v14 = *v6;
        v14[1] = v6[1];
        v15 = v6[2];
        *(_DWORD *)((char *)v14 + 11) = *(_DWORD *)((char *)v6 + 11);
        v14[2] = v15;
        v14 += 4;
        v6 += 4;
      }
      while (v6 != a3);
    }
LABEL_25:
    v24 = (char *)v14 - (char *)result;
    goto LABEL_26;
  }
  v17 = (_DWORD *)a1[1];
  v12 = (_DWORD **)(a1 + 1);
  v16 = v17;
  v18 = ((char *)v17 - (char *)result) >> 4;
  if (v18 >= a4)
  {
    v14 = result;
    if (a2 != a3)
    {
      v25 = result;
      do
      {
        *v25 = *v6;
        v25[1] = v6[1];
        v26 = v6[2];
        *(_DWORD *)((char *)v25 + 11) = *(_DWORD *)((char *)v6 + 11);
        v25[2] = v26;
        v14 += 4;
        v6 += 4;
        v25 += 4;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  v19 = &a2[4 * v18];
  if (v16 != result)
  {
    do
    {
      *result = *v6;
      result[1] = v6[1];
      v20 = v6[2];
      *(_DWORD *)((char *)result + 11) = *(_DWORD *)((char *)v6 + 11);
      result[2] = v20;
      v6 += 4;
      result += 4;
    }
    while (v6 != v19);
    result = *v12;
  }
  v21 = (char *)result;
  if (v19 != a3)
  {
    v21 = (char *)result;
    v22 = result;
    do
    {
      *v22 = *v19;
      v22[1] = v19[1];
      v23 = v19[2];
      *(_DWORD *)((char *)v22 + 11) = *(_DWORD *)((char *)v19 + 11);
      v22[2] = v23;
      v21 += 16;
      v19 += 4;
      v22 += 4;
    }
    while (v19 != a3);
  }
  v24 = v21 - (char *)result;
LABEL_26:
  *v12 = (_DWORD *)((char *)result + v24);
  return result;
}

uint64_t *std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = (uint64_t *)*a2;
      if (*(_DWORD *)(*(_QWORD *)(*a2 + 16) + 4) * **(_DWORD **)(*a2 + 16) > (*(_DWORD *)(result[2] + 4)
                                                                                             * *(_DWORD *)result[2]))
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      v11 = (uint64_t *)std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(result, v10, a3 >> 1);
      result = (uint64_t *)std::list<std::pair<cv3d::cv::gess::math::Vector2T<unsigned int> const*,unsigned int>>::__sort<cv3d::cv::gess::binpack::MaxBox2BinPack::Insert(std::vector<cv3d::cv::gess::binpack::BoxSize> &,std::vector<cv3d::cv::gess::binpack::Box2bin> &)::$_0>(v10, a2, a3 - v8);
      v12 = *(_DWORD *)(v11[2] + 4) * *(_DWORD *)v11[2];
      if (*(_DWORD *)(result[2] + 4) * *(_DWORD *)result[2] <= v12)
      {
        v14 = (uint64_t *)v11[1];
        i = result;
        result = v11;
      }
      else
      {
        for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (*(_DWORD *)(i[2] + 4) * *(_DWORD *)i[2] <= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *i;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *v11;
        v14 = (uint64_t *)v11[1];
        *(_QWORD *)(v17 + 8) = result;
        *result = v17;
        *v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = *(_DWORD *)(v14[2] + 4) * *(_DWORD *)v14[2];
          if (*(_DWORD *)(i[2] + 4) * *(_DWORD *)i[2] <= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (*(_DWORD *)(j[2] + 4) * *(_DWORD *)j[2] <= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *j;
            v22 = *i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

float cv3d::cv::gess::internal::CounterClockWise(float *a1, float *a2, float *a3)
{
  return (float)((float)((float)(*a2 - *a1) * (float)(a3[1] - a1[1]))
               - (float)((float)(a2[1] - a1[1]) * (float)(*a3 - *a1)))
       * 0.5;
}

uint64_t cv3d::cv::gess::internal::CalculateSurfaceAndParamArea(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float *v33;
  double v34;
  float v35;

  v8 = (*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3);
  v9 = *a1;
  v10 = a1[1];
  v11 = v10 - *a1;
  if (v10 != *a1)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    v14 = v8;
    v15 = v11 >> 2;
    v16 = a3[5];
    v17 = (a3[6] - v16) / 12;
    v18 = *a4;
    v19 = v16 + 8;
    do
    {
      v13 = (v13 + 1);
      v20 = v14;
      if (v15 != v13)
        v20 = *(unsigned int *)(v9 + 4 * v13);
      v21 = *(unsigned int *)(v9 + 4 * v12);
      v22 = 0.0;
      if (v21 < v20)
      {
        v23 = *(_QWORD *)(a2 + 40);
        v24 = (*(_QWORD *)(a2 + 48) - v23) >> 3;
        v25 = v17 - v21;
        if (v17 < v21)
          v25 = 0;
        v26 = v20 - v21;
        v27 = (unsigned int *)(v19 + 12 * v21);
        v28 = 0.0;
        v29 = 0.0;
        do
        {
          if (!v25)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v24, 0, v26);
          v30 = *(v27 - 2);
          if (v24 <= v30)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v24, v25, v26);
          v31 = *(v27 - 1);
          if (v24 <= v31)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v24, v25, v26);
          v32 = *v27;
          if (v24 <= v32)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v24, v25, v26);
          v33 = (float *)(v23 + 8 * v30);
          v34 = fabs(((*(float *)(v23 + 8 * v31) - *v33) * (*(float *)(v23 + 8 * v32 + 4) - v33[1])- (*(float *)(v23 + 8 * v31 + 4) - v33[1]) * (*(float *)(v23 + 8 * v32) - *v33))* 0.5)- v29;
          v22 = v28 + v34;
          v29 = v28 + v34 - v28 - v34;
          --v25;
          v27 += 3;
          v28 = v22;
          --v26;
        }
        while (v26);
      }
      v35 = v22;
      *(double *)(v18 + 8 * v12) = v35;
      v12 = v13;
    }
    while (v15 > v13);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::DrawLine(float *a1, float *a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  float v17;

  v3 = a2[1];
  v4 = *a1;
  v5 = a1[1];
  v6 = vabds_f32(*a2, *a1);
  v7 = vabds_f32(v3, v5);
  if (v6 < v7)
    v6 = v7;
  if (v6 >= 0.00001 && v6 > 0.0)
  {
    v8 = (float)(*a2 - v4) / v6;
    v9 = *(_DWORD *)(a3 + 4);
    v10 = *(_DWORD *)(a3 + 8) - 1;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_DWORD *)(a3 + 12);
    v13 = 1;
    v14 = (float)(v3 - v5) / v6;
    do
    {
      v15 = vcvtms_u32_f32(v4);
      if (v15 >= v9 - 1)
        v15 = v9 - 1;
      v16 = vcvtms_u32_f32(v5);
      if (v16 >= v10)
        v16 = v10;
      *(_BYTE *)(v11 + (v15 + v16 * v9) * v12) = 1;
      v4 = v8 + v4;
      v5 = v14 + v5;
      v17 = (float)v13++;
    }
    while (v6 > v17);
  }
  return v6 >= 0.00001;
}

uint64_t cv3d::cv::gess::internal::DrawTriangle(float *a1, float *a2, float *a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  float v35;

  v4 = *a1;
  v5 = a1[1];
  v6 = fminf(*a1, 3.4028e38);
  v7 = fminf(v5, 3.4028e38);
  v8 = fmaxf(*a1, -3.4028e38);
  v9 = fmaxf(v5, -3.4028e38);
  v10 = *a2;
  v11 = a2[1];
  if (*a2 >= v6)
    v12 = v6;
  else
    v12 = *a2;
  if (v11 >= v7)
    v13 = v7;
  else
    v13 = a2[1];
  if (v8 < v10)
    v8 = *a2;
  if (v9 < v11)
    v9 = a2[1];
  v14 = *a3;
  v15 = a3[1];
  if (*a3 < v12)
    v12 = *a3;
  if (v15 < v13)
    v13 = a3[1];
  if (v8 < v14)
    v8 = *a3;
  if (v9 < v15)
    v9 = a3[1];
  v16 = vcvtms_u32_f32(v12);
  v17 = *(_DWORD *)(a4 + 4);
  v18 = *(_DWORD *)(a4 + 8);
  v19 = v17 - 1;
  if (v16 >= v17 - 1)
    v16 = v17 - 1;
  v20 = vcvtps_u32_f32(v8);
  if (v20 < v19)
    v19 = v20;
  v21 = vcvtms_u32_f32(v13);
  v22 = v18 - 1;
  if (v21 >= v18 - 1)
    v23 = v18 - 1;
  else
    v23 = v21;
  v24 = vcvtps_u32_f32(v9);
  if (v24 >= v22)
    v24 = v22;
  if (v23 <= v24)
  {
    v25 = (float)((float)(v14 - v4) * (float)(v11 - v5)) - (float)((float)(v15 - v5) * (float)(v10 - v4));
    v26 = v16 + v17 * v23;
    do
    {
      if (v16 <= v19)
      {
        v27 = (double)v23 + 0.5;
        v28 = -(float)((float)(v27 - v11) * (float)(v14 - v10));
        v29 = -(float)((float)(v27 - v15) * (float)(v4 - v14));
        v30 = -(float)((float)(v27 - v5) * (float)(v10 - v4));
        v31 = *(_QWORD *)(a4 + 16);
        v32 = *(_DWORD *)(a4 + 12);
        v33 = v32 * v26;
        v34 = v16;
        do
        {
          v35 = (double)v34 + 0.5;
          if ((float)((float)(v28 + (float)((float)(v35 - v10) * (float)(v15 - v11))) / v25) >= 0.0
            && (float)((float)(v29 + (float)((float)(v35 - v14) * (float)(v5 - v15))) / v25) >= 0.0
            && (float)((float)(v30 + (float)((float)(v35 - v4) * (float)(v11 - v5))) / v25) >= 0.0)
          {
            *(_BYTE *)(v31 + v33) = 1;
          }
          ++v34;
          v33 += v32;
        }
        while (v34 <= v19);
      }
      ++v23;
      v26 += v17;
    }
    while (v23 <= v24);
  }
  return 1;
}

uint64_t cv3d::cv::gess::internal::CanBlit(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v14;
  int v15;
  unsigned int v16;
  int v17;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
    return 1;
  v5 = *(_DWORD *)(a1 + 4);
  if (!v5)
    return 1;
  v6 = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v7 = *(_DWORD *)(a2 + 8);
  if (v7 <= 8)
    v9 = 1;
  else
    v9 = 8;
  if (v8 <= 8)
    v10 = 1;
  else
    v10 = 8;
  while (1)
  {
    v11 = v6;
    v12 = v6 + a4;
    if (v12 < v4 && v5 > a3)
      break;
LABEL_20:
    v6 = v11 + v9;
    if (v11 + v9 >= v7)
    {
      v6 = (v11 & (v9 - 1)) + 1;
      if (v6 == v9)
        return 1;
    }
  }
  v14 = 0;
  v15 = v12 * v5;
  v16 = a3;
  while (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 12) * (v16 + v15))
       || !*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_DWORD *)(a2 + 12) * (v14 + v11 * v8)))
  {
    v17 = v14 + v10;
    if (v14 + v10 < v8 || (v17 = (v14 & (v10 - 1)) + 1, v17 != v10))
    {
      v16 = v17 + a3;
      v14 = v17;
      if (v17 + a3 < v5)
        continue;
    }
    goto LABEL_20;
  }
  return 0;
}

uint64_t cv3d::cv::gess::internal::AddChart(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  if (a8)
    a2 = a3;
  v9 = *(_DWORD *)(a2 + 8);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(unsigned int *)(a2 + 4);
    v13 = a4;
    v14 = a7;
    do
    {
      if (v11 + a7 >= 0 && (int)v12 >= 1)
      {
        v15 = *(_QWORD *)(a2 + 16);
        v16 = *(_DWORD *)(a2 + 12);
        v17 = *(_QWORD *)(result + 16);
        v18 = *(_DWORD *)(result + 12);
        v19 = v18 * (a6 + *(_DWORD *)(result + 4) * v14);
        v20 = v16 * v10;
        v21 = v12;
        v22 = a6;
        do
        {
          if ((v22 & 0x8000000000000000) == 0 && v11 + a7 < a5 && v22 < v13 && *(_BYTE *)(v15 + v20))
          {
            if (*(_BYTE *)(v17 + v19))
              cv3d::cv::gess::internal::AddChart();
            *(_BYTE *)(v17 + v19) = 1;
          }
          v19 += v18;
          ++v22;
          v20 += v16;
          --v21;
        }
        while (v21);
      }
      ++v11;
      ++v14;
      v10 += v12;
    }
    while (v11 != v9);
  }
  return result;
}

float cv3d::cv::gess::internal::TextureBoundingArea(unsigned int **a1, uint64_t a2, float *a3, float64x2_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float64x2_t v9;
  float64x2_t v10;
  __double2 v11;
  unsigned int *v12;
  unsigned int *v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  int8x16_t v18;
  unint64_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;

  a4.f64[0] = *a3;
  v24 = a4;
  v11 = __sincos_stret(a4.f64[0]);
  v9.f64[0] = v11.__cosval;
  v12 = *a1;
  v13 = a1[1];
  if (*a1 == v13)
    return INFINITY;
  v14.f64[0] = -v11.__sinval;
  v14.f64[1] = v11.__cosval;
  v9.f64[1] = v11.__sinval;
  v15 = *(_QWORD *)(a2 + 40);
  v16 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v17 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v10.f64[0] = 0.00000001;
  v18 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v24, v10).i64[0], 0);
  do
  {
    v19 = *v12;
    if ((*(_QWORD *)(a2 + 48) - v15) >> 3 <= v19)
      cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v6, v7, v8);
    v20 = vcvtq_f64_f32(*(float32x2_t *)(v15 + 8 * v19));
    v21 = (float64x2_t)vbslq_s8(v18, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64((float64x2_t)0, v9, v20.f64[0]), v14, v20, 1), (int8x16_t)v20);
    v16 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v16, v21), (int8x16_t)v21, (int8x16_t)v16);
    v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v21, v17), (int8x16_t)v21, (int8x16_t)v17);
    ++v12;
  }
  while (v12 != v13);
  v22 = vsubq_f64(v17, v16);
  return vmulq_laneq_f64(v22, v22, 1).f64[0];
}

float32x2_t cv3d::cv::gess::internal::RotateTexture(unsigned int **a1, uint64_t a2, float *a3)
{
  float32x2_t result;
  float64x2_t v6;
  __double2 v7;
  unsigned int *v8;
  unsigned int *v9;
  float64x2_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float *v14;

  *(double *)&result = *a3;
  if (*(double *)&result > 0.00000001)
  {
    v7 = __sincos_stret(*(double *)&result);
    v6.f64[0] = v7.__cosval;
    result = *(float32x2_t *)&v7.__sinval;
    v8 = *a1;
    v9 = a1[1];
    if (*a1 != v9)
    {
      v10.f64[0] = -v7.__sinval;
      v10.f64[1] = v7.__cosval;
      v6.f64[1] = v7.__sinval;
      v11 = *(_QWORD *)(a2 + 40);
      v12 = (*(_QWORD *)(a2 + 48) - v11) >> 3;
      do
      {
        v13 = *v8;
        if (v12 <= v13)
          cv3d::cv::gess::mesh::QuadMesh::InitVF();
        v14 = (float *)(v11 + 8 * v13);
        result = vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v6, *v14), v10, v14[1]));
        *(double *)v14 = *(double *)&result;
        ++v8;
      }
      while (v8 != v9);
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::SortCharts(unsigned int **a1, uint64_t *a2)
{
  unsigned int *v4;
  double *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  double *v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  int v19;
  void *__p;
  double *v22;

  std::vector<std::pair<unsigned int,double>>::vector(&__p, a1[1] - *a1);
  v4 = *a1;
  v5 = (double *)__p;
  v6 = (char *)a1[1] - (char *)*a1;
  if (v6)
  {
    v7 = v6 >> 2;
    v8 = *a2;
    if (v7 <= 1)
      v7 = 1;
    v9 = (char *)__p + 8;
    do
    {
      v10 = *v4++;
      v11 = *(_QWORD *)(v8 + 8 * v10);
      *((_DWORD *)v9 - 2) = v10;
      *v9 = v11;
      v9 += 2;
      --v7;
    }
    while (v7);
  }
  v12 = 126 - 2 * __clz(((char *)v22 - (char *)v5) >> 4);
  if (v22 == v5)
    v13 = 0;
  else
    v13 = v12;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *,false>(v5, (unint64_t)v22, v13, 1);
  v14 = *a1;
  v15 = (double *)__p;
  v16 = (char *)a1[1] - (char *)*a1;
  if (v16)
  {
    v17 = v16 >> 2;
    if (v17 <= 1)
      v17 = 1;
    v18 = (int *)__p;
    do
    {
      v19 = *v18;
      v18 += 4;
      *v14++ = v19;
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
  if (__p)
  {
LABEL_16:
    v22 = v15;
    operator delete(v15);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::PrepareMultiTexture(int **a1, double **a2, uint64_t *a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t *v5;
  double *v8;
  double v9;
  double v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  double *v17;
  double *v18;
  unint64_t v19;
  double v20;
  unsigned int v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  int *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD **v31;
  unint64_t v32;
  _QWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  int **v47;
  unint64_t v48;
  int *v49;
  int *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  unint64_t v59;
  BOOL v60;
  uint64_t *v62;

  v5 = a5;
  v8 = *a2;
  v9 = 0.0;
  while (v8 != a2[1])
  {
    v10 = *v8++;
    v9 = v9 + v10;
  }
  std::vector<std::vector<unsigned int>>::resize(a5, *a4);
  v59 = *a4;
  if ((_DWORD)v59)
  {
    LODWORD(v11) = v59 - 1;
    if ((_DWORD)v59 == 1)
    {
      std::vector<int>::resize((std::vector<unsigned int> *)*v5, ((char *)a1[1] - (char *)*a1) >> 4);
      v12 = *a1;
      v13 = (char *)a1[1] - (char *)*a1;
      if (v13)
      {
        v14 = v13 >> 4;
        v15 = *(_DWORD **)*v5;
        if (v14 <= 1)
          v14 = 1;
        do
        {
          v16 = *v12;
          v12 += 4;
          *v15++ = v16;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      v18 = *a2;
      v17 = a2[1];
      v19 = v17 - *a2;
      v62 = v5;
      if (v19 <= v59)
      {
        std::vector<std::vector<unsigned int>>::resize(v5, v19);
        if (v17 != v18)
        {
          v43 = 0;
          if (v19 <= 1)
            v19 = 1;
          do
          {
            v44 = *v5 + 24 * v43;
            v45 = &(*a1)[4 * v43];
            v47 = (int **)(v44 + 8);
            v46 = *(int **)(v44 + 8);
            v48 = *(_QWORD *)(v44 + 16);
            if ((unint64_t)v46 >= v48)
            {
              v50 = *(int **)v44;
              v51 = ((uint64_t)v46 - *(_QWORD *)v44) >> 2;
              v52 = v51 + 1;
              if ((unint64_t)(v51 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v53 = v48 - (_QWORD)v50;
              if (v53 >> 1 > v52)
                v52 = v53 >> 1;
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                v54 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v54 = v52;
              if (v54)
              {
                v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v44 + 16, v54);
                v46 = *v47;
                v50 = *(int **)v44;
              }
              else
              {
                v55 = 0;
              }
              v56 = &v55[4 * v51];
              *(_DWORD *)v56 = *v45;
              v49 = (int *)(v56 + 4);
              if (v46 == v50)
              {
                v5 = v62;
              }
              else
              {
                v5 = v62;
                do
                {
                  v57 = *--v46;
                  *((_DWORD *)v56 - 1) = v57;
                  v56 -= 4;
                }
                while (v46 != v50);
              }
              *(_QWORD *)v44 = v56;
              *v47 = v49;
              *(_QWORD *)(v44 + 16) = &v55[4 * v54];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *v46 = *v45;
              v49 = v46 + 1;
              v5 = v62;
            }
            *v47 = v49;
            ++v43;
          }
          while (v43 != v19);
        }
      }
      else
      {
        v20 = v9 / (double)v59;
        v60 = 0;
        v21 = 1;
        v22 = 0.0;
        v23 = *a4;
        while (1)
        {
          do
          {
            v24 = v11;
            if (v22 >= v20 && v23 > v21)
            {
              v9 = v9 - v22;
              v20 = v9 / (double)(v23 - v21);
              cv3d::cv::gess::internal::SortCharts((unsigned int **)(*v5 + 24 * (v21 - 1)), a3);
              v22 = 0.0;
              ++v21;
            }
            v26 = &(*a1)[4 * v24];
            v27 = *v26;
            v28 = (*a2)[v27];
            v29 = *v5 + 24 * (v21 - 1);
            v31 = (_DWORD **)(v29 + 8);
            v30 = *(_DWORD **)(v29 + 8);
            v33 = (_QWORD *)(v29 + 16);
            v32 = *(_QWORD *)(v29 + 16);
            if ((unint64_t)v30 >= v32)
            {
              v35 = *(_DWORD **)v29;
              v36 = ((uint64_t)v30 - *(_QWORD *)v29) >> 2;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v38 = v32 - (_QWORD)v35;
              if (v38 >> 1 > v37)
                v37 = v38 >> 1;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                v39 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v33, v39);
                v30 = *v31;
                v35 = *(_DWORD **)v29;
                LODWORD(v27) = *v26;
              }
              else
              {
                v40 = 0;
              }
              v41 = &v40[4 * v36];
              *(_DWORD *)v41 = v27;
              v34 = v41 + 4;
              if (v30 == v35)
              {
                v5 = v62;
              }
              else
              {
                v5 = v62;
                do
                {
                  v42 = *--v30;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }
                while (v30 != v35);
              }
              *(_QWORD *)v29 = v41;
              *v31 = v34;
              *v33 = &v40[4 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *v30 = v27;
              v34 = v30 + 1;
            }
            v22 = v22 + v28;
            *v31 = v34;
            v23 = *a4;
            v11 = *a4 + v24;
          }
          while (v19 > v11);
          if (v60)
            break;
          if (v24 % v23 + 1 == v23)
            LODWORD(v11) = 0;
          else
            LODWORD(v11) = v24 % v23 + 1;
          v60 = (_DWORD)v11 == (_DWORD)v59 - 2;
        }
        cv3d::cv::gess::internal::SortCharts((unsigned int **)(v5[1] - 24), a3);
        if (v21 < *a4)
          std::vector<std::vector<unsigned int>>::resize(v5, v21);
      }
    }
  }
  return (_DWORD)v59 != 0;
}

uint64_t cv3d::cv::gess::internal::SaveMaskImage(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  std::string __p;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = 0;
  v11 = *(_QWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 12);
  v10 = 1;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v10);
  v4 = v11;
  if ((_DWORD)v11)
  {
    v5 = 0;
    v6 = HIDWORD(v11);
    do
    {
      if (v6)
      {
        v7 = 0;
        do
        {
          *(_BYTE *)(v13 + (v5 + (_DWORD)v11 * v7) * v12) = -*(_BYTE *)(*(_QWORD *)(a1 + 16)
                                                                      + (v5 + *(_DWORD *)(a1 + 4) * v7)
                                                                      * *(_DWORD *)(a1 + 12));
          ++v7;
          v6 = HIDWORD(v11);
        }
        while (v7 < HIDWORD(v11));
        v4 = v11;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  cv3d::cv::gess::io::SavePng((char *)&__p, (uint64_t)&v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = v13;
  if (v13)
    return MEMORY[0x2426211A0](v13, 0x1000C8077774924);
  return result;
}

void sub_23C585A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  if (a17)
    MEMORY[0x2426211A0](a17, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::ResizeImage(_QWORD *a1, unsigned int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  __int128 v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;

  if (*(_DWORD *)(*a1 + 4) >= a2 || *(_DWORD *)(*a1 + 8) >= a2)
    return 0;
  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_250D4A888;
  *((_DWORD *)v4 + 7) = a2;
  *((_DWORD *)v4 + 8) = a2;
  *((_DWORD *)v4 + 9) = 1;
  v4[5] = 0;
  v28 = (std::__shared_weak_count *)v4;
  *((_DWORD *)v4 + 6) = 0;
  v27 = v4 + 3;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)(v4 + 3));
  v5 = (uint64_t)v27;
  bzero((void *)v27[2], (*((_DWORD *)v27 + 2) * *((_DWORD *)v27 + 1) * *((_DWORD *)v27 + 3)));
  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 4);
  if (v7)
  {
    v8 = 0;
    v9 = *(unsigned int *)(v6 + 8);
    do
    {
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD *)(v6 + 16);
        v11 = *(_DWORD *)(v6 + 12);
        v12 = *(_QWORD *)(v5 + 16);
        v13 = *(_DWORD *)(v5 + 12);
        v14 = v13 * v8;
        v15 = *(_DWORD *)(v5 + 4) * v13;
        v16 = v11 * v8;
        v17 = v7 * v11;
        v18 = v9;
        do
        {
          *(_BYTE *)(v12 + v14) = *(_BYTE *)(v10 + v16);
          v14 += v15;
          v16 += v17;
          --v18;
        }
        while (v18);
      }
      ++v8;
    }
    while (v8 != v7);
  }
  v26 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a1, &v26);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](a1, (uint64_t *)&v27);
  v22 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return 1;
}

void sub_23C585C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::FindChartLocationRandom(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, signed int *a6, int *a7, _DWORD *a8, _DWORD *a9, int *a10, int a11, cv3d::cv::gess::internal::KISSRng *a12)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  signed int Range;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  signed int v34;
  signed int v35;
  uint64_t v36;
  int CanBlit;
  int v39;
  char v41;
  int v46;
  int v49;
  int v51;

  v41 = 0;
  v39 = a5 * a4;
  if (a5 * a4 >= 4096)
    v12 = 4096;
  else
    v12 = a5 * a4;
  if (v12 <= 16)
    v13 = 16;
  else
    v13 = v12;
  v14 = a4 + 1;
  v15 = a5 + 1;
  v49 = 0x7FFFFFFF;
  v46 = a5 + 1;
  while (1)
  {
    v16 = *(_DWORD *)(a2 + 4);
    v17 = *(_DWORD *)(a2 + 8);
    v18 = *((_DWORD *)a12 + 1) ^ (*((_DWORD *)a12 + 1) << 13);
    v19 = v18 ^ (v18 >> 17);
    v20 = *((unsigned int *)a12 + 3) + 698769069 * *((unsigned int *)a12 + 2);
    v21 = v19 ^ (32 * v19);
    v22 = ((_BYTE)v19
         + -51 * *(_BYTE *)a12
         + 57
         + *((_DWORD *)a12 + 3)
         - 83 * *((_DWORD *)a12 + 2)) & 1;
    v51 = v22;
    *(_DWORD *)a12 = 69069 * *(_DWORD *)a12 + 12345;
    *((_DWORD *)a12 + 1) = v21;
    *((_QWORD *)a12 + 1) = v20;
    if (v22)
      v23 = v16;
    else
      v23 = v17;
    if (v22)
      v24 = v17;
    else
      v24 = v16;
    v25 = v15;
    v26 = v14;
    if (a11)
    {
      if (a11 - v24 >= v14)
        v26 = v14;
      else
        v26 = a11 - v24;
      if (a11 - v23 >= v15)
        v25 = v15;
      else
        v25 = a11 - v23;
    }
    Range = cv3d::cv::gess::internal::KISSRng::getRange(a12, v26);
    v28 = cv3d::cv::gess::internal::KISSRng::getRange(a12, v25);
    v29 = Range + v24;
    if (Range + v24 <= a4)
      v29 = a4;
    v30 = v28 + v23;
    if (v28 + v23 <= a5)
      v30 = a5;
    v31 = v30 * v29;
    if (v29 <= v30)
      v29 = v30;
    v32 = v31 + v29 * v29;
    if (v32 <= v49)
    {
      v33 = v28;
      if (v32 != v49)
        break;
      if (v28 >= Range)
        v34 = Range;
      else
        v34 = v28;
      v35 = *a7;
      if (*a7 >= *a6)
        v35 = *a6;
      if (v34 <= v35)
        break;
    }
    v15 = v46;
LABEL_41:
    if (!--v13)
      return v41 & 1;
  }
  if (v51)
    v36 = a3;
  else
    v36 = a2;
  CanBlit = cv3d::cv::gess::internal::CanBlit(a1, v36, Range, v28);
  v15 = v46;
  if (!CanBlit)
    goto LABEL_41;
  *a6 = Range;
  *a7 = v33;
  *a8 = v24;
  *a9 = v23;
  v41 = 1;
  v49 = v32;
  *a10 = v51;
  if (v31 != v39)
    goto LABEL_41;
  return v41 & 1;
}

uint64_t cv3d::cv::gess::internal::KISSRng::getRange(cv3d::cv::gess::internal::KISSRng *this, int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;

  if (!a2)
    return 0;
  v2 = 69069 * *(_DWORD *)this + 12345;
  v3 = *((_DWORD *)this + 1) ^ (*((_DWORD *)this + 1) << 13);
  v4 = v3 ^ (v3 >> 17) ^ (32 * (v3 ^ (v3 >> 17)));
  *(_DWORD *)this = v2;
  *((_DWORD *)this + 1) = v4;
  v5 = *((unsigned int *)this + 3) + 698769069 * *((unsigned int *)this + 2);
  *((_QWORD *)this + 1) = v5;
  return (v4 + v2 + (int)v5) % (a2 + 1);
}

BOOL cv3d::cv::gess::internal::Get2DConvexHull(char **a1, uint64_t a2, char **a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v10;
  uint64_t i;
  float *v12;
  float v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  float *v62;
  float v63;
  float v64;
  char *v65;
  float *v66;
  float *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  _DWORD *v75;
  int32x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  _DWORD *v83;
  uint64_t v84;
  char *v85;
  int v86;
  uint64_t v88;
  __int128 v89;
  char *v90;
  uint64_t v91;
  __int128 v92;

  v5 = *a1;
  v6 = (uint64_t)a1[1];
  v7 = v6 - (_QWORD)*a1;
  if ((unint64_t)v7 < 0xC)
    return 0;
  v10 = v7 >> 2;
  if (v7 == 12)
  {
    if (a3 != a1)
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)a3, v5, v6, v10);
    return 1;
  }
  else
  {
    for (i = *(unsigned int *)v5; v5 != (char *)v6; v5 += 4)
    {
      v12 = (float *)(a2 + 8 * *(unsigned int *)v5);
      v13 = v12[1];
      v14 = (float *)(a2 + 8 * i);
      v15 = v14[1];
      if (v13 < v15 || v13 < (float)(v15 + 0.000001) && *v12 < *v14)
        i = *(unsigned int *)v5;
    }
    v89 = 0uLL;
    if ((unint64_t)v7 >= 0x5555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    std::__split_buffer<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance,std::allocator<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance> &>::__split_buffer(&v90, v10, 0, (uint64_t)&v89 + 8);
    v16 = v89;
    v17 = v91;
    if ((_QWORD)v89)
    {
      do
      {
        v18 = *(_QWORD *)(v16 - 12);
        v16 -= 12;
        v19 = *(_DWORD *)(v16 + 8);
        *(_QWORD *)(v17 - 12) = v18;
        v17 -= 12;
        *(_DWORD *)(v17 + 8) = v19;
      }
      while (v16);
      v16 = v89;
    }
    v88 = v17;
    v20 = *((_QWORD *)&v89 + 1);
    v89 = v92;
    *(_QWORD *)&v92 = v16;
    *((_QWORD *)&v92 + 1) = v20;
    v90 = 0;
    v91 = 0;
    if (v16)
      *(_QWORD *)&v92 = (v16 - 12) % 0xCuLL;
    v22 = (unsigned int *)*a1;
    v21 = (unsigned int *)a1[1];
    if (v22 != v21)
    {
      v23 = (float *)(a2 + 8 * i);
      do
      {
        v24 = *v22;
        if (v24 != i)
        {
          v25 = (float *)(a2 + 8 * v24);
          v26 = *v25 - *v23;
          v27 = sqrtf((float)((float)(v25[1] - v23[1]) * (float)(v25[1] - v23[1])) + (float)(v26 * v26));
          v28 = v26 / v27;
          if (v27 <= 0.0)
            v29 = 1.0;
          else
            v29 = v28;
          if ((unint64_t)v89 >= *((_QWORD *)&v89 + 1))
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v89 - v88) >> 2);
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) > 0x1555555555555555)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((*((_QWORD *)&v89 + 1) - v88) >> 2) > v32)
              v32 = 0x5555555555555556 * ((*((_QWORD *)&v89 + 1) - v88) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&v89 + 1) - v88) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v33 = 0x1555555555555555;
            else
              v33 = v32;
            std::__split_buffer<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance,std::allocator<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance> &>::__split_buffer(&v90, v33, v31, (uint64_t)&v89 + 8);
            v34 = v92;
            *(_DWORD *)v92 = v24;
            *(float *)(v34 + 4) = v29;
            *(float *)(v34 + 8) = v27;
            v30 = v34 + 12;
            *(_QWORD *)&v92 = v34 + 12;
            v35 = (char *)v89;
            v36 = v91;
            if ((_QWORD)v89 == v88)
            {
              v39 = (char *)v89;
            }
            else
            {
              do
              {
                v37 = *(_QWORD *)(v35 - 12);
                v35 -= 12;
                v38 = *((_DWORD *)v35 + 2);
                *(_QWORD *)(v36 - 12) = v37;
                v36 -= 12;
                *(_DWORD *)(v36 + 8) = v38;
              }
              while (v35 != (char *)v88);
              v39 = (char *)v88;
              v35 = (char *)v89;
              v30 = v92;
            }
            v88 = v36;
            v40 = *((_QWORD *)&v89 + 1);
            *((_QWORD *)&v89 + 1) = *((_QWORD *)&v92 + 1);
            v90 = v39;
            *(_QWORD *)&v92 = v35;
            *((_QWORD *)&v92 + 1) = v40;
            v91 = (uint64_t)v39;
            if (v35 != v39)
              *(_QWORD *)&v92 = &v35[-12 - 12 * ((v35 - v39 - 12) / 0xCuLL)];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_DWORD *)v89 = v24;
            v30 = v89 + 12;
            *(float *)(v89 + 4) = v29;
            *(float *)(v89 + 8) = v27;
          }
          *(_QWORD *)&v89 = v30;
        }
        ++v22;
      }
      while (v22 != v21);
    }
    v41 = (unsigned int *)v88;
    v42 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v89 - v88) >> 2);
    v8 = v42 > 1;
    if (v42 > 1)
    {
      v43 = 126 - 2 * __clz(v42);
      if ((_QWORD)v89 == v88)
        v44 = 0;
      else
        v44 = v43;
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *,false>(v88, v89, v44, 1);
      v45 = *a3;
      a3[1] = *a3;
      v47 = a3 + 2;
      v46 = (unint64_t)a3[2];
      if ((unint64_t)v45 >= v46)
      {
        v49 = v46 - (_QWORD)v45;
        v50 = v49 >> 1;
        if ((unint64_t)(v49 >> 1) <= 1)
          v50 = 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v51);
        v53 = *a3;
        v54 = a3[1];
        v56 = &v52[4 * v55];
        *(_DWORD *)v52 = i;
        v48 = v52 + 4;
        while (v54 != v53)
        {
          v57 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v52 - 1) = v57;
          v52 -= 4;
        }
        *a3 = v52;
        a3[1] = v48;
        a3[2] = v56;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_DWORD *)v45 = i;
        v48 = v45 + 4;
      }
      a3[1] = v48;
      v41 = (unsigned int *)v88;
      if (v88 != (_QWORD)v89)
      {
        do
        {
          v58 = *v41;
          v59 = *a3;
          v60 = v48 - *a3;
          v61 = v60 >> 2;
          if ((unint64_t)v60 >= 5)
          {
            v62 = (float *)(a2 + 8 * v58);
            v63 = *v62;
            v64 = v62[1];
            do
            {
              v65 = &v59[4 * v61];
              v66 = (float *)(a2 + 8 * *((unsigned int *)v65 - 2));
              v67 = (float *)(a2 + 8 * *((unsigned int *)v65 - 1));
              if ((float)((float)((float)((float)(*v67 - *v66) * (float)(v64 - v66[1]))
                                 - (float)((float)(v67[1] - v66[1]) * (float)(v63 - *v66)))
                         * 0.5) >= 0.000001)
                break;
              v48 -= 4;
              a3[1] = v48;
              v60 -= 4;
              v61 = v60 >> 2;
            }
            while ((unint64_t)v60 > 4);
          }
          if ((unint64_t)v48 >= *v47)
          {
            v68 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v69 = *v47 - (_QWORD)v59;
            if (v69 >> 1 > v68)
              v68 = v69 >> 1;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
              v70 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v70 = v68;
            if (v70)
            {
              v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v70);
              v59 = *a3;
              v48 = a3[1];
            }
            else
            {
              v71 = 0;
            }
            v72 = &v71[4 * v61];
            *(_DWORD *)v72 = v58;
            v73 = v72 + 4;
            while (v48 != v59)
            {
              v74 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              *((_DWORD *)v72 - 1) = v74;
              v72 -= 4;
            }
            *a3 = v72;
            a3[1] = v73;
            a3[2] = &v71[4 * v70];
            if (v59)
              operator delete(v59);
            v48 = v73;
          }
          else
          {
            *(_DWORD *)v48 = v58;
            v48 += 4;
          }
          a3[1] = v48;
          v41 += 3;
        }
        while (v41 != (unsigned int *)v89);
        v41 = (unsigned int *)v88;
      }
      if (v48 - *a3 == 8)
      {
        v75 = (_DWORD *)(v89 - 24);
        if ((unint64_t)v48 >= *v47)
        {
          v77 = *v47 - (_QWORD)*a3;
          if ((unint64_t)(v77 >> 1) <= 3)
            v78 = 3;
          else
            v78 = v77 >> 1;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v79);
          v81 = *a3;
          v82 = a3[1];
          v83 = v80 + 8;
          v85 = &v80[4 * v84];
          *v83 = *v75;
          v76 = (int32x2_t *)(v83 + 1);
          while (v82 != v81)
          {
            v86 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            *--v83 = v86;
          }
          *a3 = (char *)v83;
          a3[1] = (char *)v76;
          a3[2] = v85;
          if (v81)
            operator delete(v81);
        }
        else
        {
          *(_DWORD *)v48 = *v75;
          v76 = (int32x2_t *)(v48 + 4);
        }
        a3[1] = (char *)v76;
        v76[-1] = vrev64_s32(v76[-1]);
        v41 = (unsigned int *)v88;
      }
    }
    if (v41)
      operator delete(v41);
  }
  return v8;
}

void sub_23C58649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::XAtlasPacking(uint64_t **a1, _DWORD *a2, unsigned int *a3, float *a4, int a5, char a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  const cv3d::cv::gess::mesh::BaseAttribute *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _DWORD *v23;
  unsigned int *v24;
  float *v25;
  __int128 *v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  int v33;
  unsigned int i;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  unsigned int j;
  uint64_t v41;
  uint64_t v42;
  uint64_t *p_context;
  uint64_t v44;
  __int128 *v45;
  uint64_t v46;
  cv3d::cv::gess::mesh::TriMesh *v47;
  uint64_t v48;
  uint64_t **v49;
  dispatch_semaphore_t v51;
  unsigned __int8 v52;
  _QWORD v53[3];
  _QWORD v54[3];
  void *__p;
  _BYTE *v56;
  _DWORD *v57;
  int v58;
  int v59;
  unsigned int v60;
  std::vector<int>::size_type v61;
  int v62;
  int v63;
  int v64;
  uint64_t context;
  int v66;
  uint64_t *v67;
  __int128 v68;
  char v69;
  __int128 *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v63 = -1;
  v64 = a5;
  v62 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v68, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  context = 0;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, (uint64_t)&context, (unsigned __int8 *)&v68);
  if (v69 < 0)
    operator delete((void *)v68);
  std::string::basic_string[abi:ne180100]<0>(&v68, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)a1, &v63, (unsigned __int8 *)&v68);
  if (v69 < 0)
    operator delete((void *)v68);
  std::string::basic_string[abi:ne180100]<0>(&v68, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(context) = 0;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(a1 + 7, (uint64_t)&context, (unsigned __int8 *)&v68);
  if (v69 < 0)
    operator delete((void *)v68);
  std::string::basic_string[abi:ne180100]<0>(&v68, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v66 = 0;
  context = 0;
  v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1 + 7, (uint64_t)&context, (unsigned __int8 *)&v68);
  if (v69 < 0)
    operator delete((void *)v68);
  std::string::basic_string[abi:ne180100]<0>(&v68, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(context) = 0;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(a1 + 7, (uint64_t)&context, (unsigned __int8 *)&v68);
  v62 = v13;
  if (v69 < 0)
  {
    operator delete((void *)v68);
    v13 = v62;
  }
  if (v13 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v68, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>((uint64_t)a1, &v62, &v68);
    if (v69 < 0)
      operator delete((void *)v68);
  }
  LODWORD(v68) = v10;
  v15 = (const cv3d::cv::gess::mesh::BaseAttribute *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)a1 + 10, (unsigned int *)&v68, v14);
  LODWORD(v68) = v63;
  v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)a1 + 10, (unsigned int *)&v68, v16);
  LODWORD(v68) = v11;
  v18 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)a1 + 7, (unsigned int *)&v68);
  LODWORD(v68) = v12;
  v20 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)a1 + 7, (unsigned int *)&v68, v19);
  LODWORD(v68) = v62;
  v22 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)a1 + 7, (unsigned int *)&v68, v21);
  v61 = 0;
  v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  v60 = 0;
  if ((a6 & 1) != 0)
  {
    v58 = 0;
    v59 = -1027081503;
    v23 = operator new(0xCuLL);
    v49 = a1;
    __p = v23;
    v57 = v23 + 3;
    *(_QWORD *)v23 = 0x3ECCCCCD3F0CCCCDLL;
    v23[2] = 1050253722;
    v56 = v23 + 3;
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::vector(v54, 3uLL, v15);
    v24 = a3;
    std::vector<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::vector(v53, (v56 - (_BYTE *)__p) >> 2, (uint64_t)v22);
    v25 = a4;
    v52 = 0;
    v51 = dispatch_semaphore_create(1);
    v26 = (__int128 *)operator new(0x80uLL);
    *(_QWORD *)v26 = &off_250D4A8C0;
    *((_QWORD *)v26 + 1) = &__p;
    v27 = (_QWORD *)v26 + 1;
    *((_QWORD *)v26 + 2) = v54;
    *((_QWORD *)v26 + 3) = v18;
    *((_QWORD *)v26 + 4) = v20;
    *((_QWORD *)v26 + 5) = v53;
    *((_QWORD *)v26 + 6) = &v61;
    *((_QWORD *)v26 + 7) = a2;
    *((_QWORD *)v26 + 8) = v24;
    *((_QWORD *)v26 + 9) = v25;
    *((_QWORD *)v26 + 10) = &v64;
    *((_QWORD *)v26 + 11) = &v59;
    *((_QWORD *)v26 + 12) = &v60;
    *((_QWORD *)v26 + 13) = &v58;
    *((_QWORD *)v26 + 14) = &v52;
    *((_QWORD *)v26 + 15) = &v51;
    v70 = v26;
    v28 = (char *)operator new(0x80uLL);
    v29 = *((_OWORD *)v27 + 5);
    *(_OWORD *)(v28 + 72) = *((_OWORD *)v27 + 4);
    *(_OWORD *)(v28 + 88) = v29;
    *(_OWORD *)(v28 + 104) = *((_OWORD *)v27 + 6);
    v30 = *((_OWORD *)v27 + 1);
    *(_OWORD *)(v28 + 8) = *(_OWORD *)v27;
    *(_OWORD *)(v28 + 24) = v30;
    v31 = *((_OWORD *)v27 + 3);
    *(_OWORD *)(v28 + 40) = *((_OWORD *)v27 + 2);
    *(_QWORD *)v28 = &off_250D4A8C0;
    *((_QWORD *)v28 + 15) = v27[14];
    *(_OWORD *)(v28 + 56) = v31;
    v67 = (uint64_t *)v28;
    v32 = dispatch_queue_create("com.gcd.task4", MEMORY[0x24BDAC9C0]);
    dispatch_apply_f((v56 - (_BYTE *)__p) >> 2, v32, &context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_1::__invoke);
    dispatch_release(v32);
    v33 = v52;
    a1 = v49;
    if (v52)
    {
      for (i = 0;
            (*(uint64_t (**)(const cv3d::cv::gess::mesh::BaseAttribute *))(*(_QWORD *)v15 + 16))(v15) > (unint64_t)i;
            ++i)
      {
        v35 = *(_QWORD *)(v54[0] + ((uint64_t)v58 << 6) + 40);
        if (i >= (unint64_t)((*(_QWORD *)(v54[0] + ((uint64_t)v58 << 6) + 48) - v35) >> 3)
          || (v36 = *((_QWORD *)v15 + 5), i >= (unint64_t)((*((_QWORD *)v15 + 6) - v36) >> 3)))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        v37 = (_DWORD *)(v35 + 8 * i);
        v38 = (_DWORD *)(v36 + 8 * i);
        *v38 = *v37;
        v38[1] = v37[1];
      }
      for (j = 0; (*(uint64_t (**)(_QWORD *))(*v22 + 16))(v22) > (unint64_t)j; ++j)
      {
        v41 = *(_QWORD *)(v53[0] + ((uint64_t)v58 << 6) + 40);
        if (j >= (unint64_t)((*(_QWORD *)(v53[0] + ((uint64_t)v58 << 6) + 48) - v41) >> 1)
          || (v42 = v22[5], j >= (unint64_t)((v22[6] - v42) >> 1)))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(_WORD *)(v42 + 2 * j) = *(_WORD *)(v41 + 2 * j);
      }
    }
    p_context = v67;
    if (v67 == &context)
    {
      v44 = 4;
      p_context = &context;
    }
    else
    {
      if (!v67)
        goto LABEL_33;
      v44 = 5;
    }
    (*(void (**)(void))(*p_context + 8 * v44))();
LABEL_33:
    v45 = v70;
    if (v70 == &v68)
    {
      v46 = 4;
      v45 = &v68;
    }
    else
    {
      if (!v70)
        goto LABEL_38;
      v46 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v45 + 8 * v46))();
LABEL_38:
    *(_QWORD *)&v68 = v53;
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    *(_QWORD *)&v68 = v54;
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    if (__p)
    {
      v56 = __p;
      operator delete(__p);
    }
    if (v33)
      goto LABEL_41;
    return 0;
  }
  LODWORD(v48) = v64;
  if ((cv3d::cv::gess::internal::XAtlasPacking(v15, v18, v20, (uint64_t)v22, &v61, a2, a3, a4, flt_23C60C568[v64 == 0], &v60, v48) & 1) == 0)return 0;
LABEL_41:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v60);
  if (v60)
    cv3d::cv::gess::alg::SortFaceByGroupID(a1, v47);
  return 1;
}

void sub_23C586AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::internal::XAtlasPacking(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, std::vector<int>::size_type *a5, _DWORD *a6, unsigned int *a7, float *a8, float a9, _DWORD *a10, uint64_t a11)
{
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::vector<int>::pointer end;
  int *v21;
  std::vector<int>::pointer begin;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  int *v28;
  int v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  float64x2_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD **v50;
  unint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  float v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  double v71;
  double *v72;
  double v73;
  unint64_t v74;
  unint64_t v75;
  float v76;
  std::vector<int>::pointer v77;
  int64_t v78;
  double v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  float32x2_t *v86;
  double *v87;
  double *v88;
  int64x2_t v89;
  int64x2_t v90;
  unint64_t v91;
  int *v92;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  float64x2_t v101;
  unsigned int **v102;
  unsigned int *v103;
  unsigned int *v104;
  unsigned int *i;
  unint64_t v106;
  float64x2_t v107;
  double v108;
  double v109;
  double v111;
  float v112;
  unsigned int *v113;
  unint64_t v114;
  float64x2_t v115;
  float64x2_t v116;
  unint64_t v117;
  float32x2_t v118;
  float64x2_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  char *v123;
  __int128 v124;
  __int128 v125;
  NSObject *v126;
  void ***v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v134;
  unint64_t *v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *__p[3];
  void *v142[3];
  unsigned int v143;
  void *v144;
  _QWORD v145[3];
  void *v146;
  double *v147;
  void *v148[3];
  std::vector<int> v149;
  unsigned int v150;
  double v151;
  void **context[3];
  void ***v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v151 = *a8 * 0.5;
  v15 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  v150 = v15;
  memset(&v149, 0, sizeof(v149));
  v135 = a5;
  std::vector<unsigned int>::reserve(&v149, *a5);
  v16 = v15;
  if (v15)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = a2[5];
      if (v17 >= (a2[6] - v19) >> 2)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      if (v18 == *(_DWORD *)(v19 + 4 * v17))
      {
        end = v149.__end_;
        if (v149.__end_ >= v149.__end_cap_.__value_)
        {
          begin = v149.__begin_;
          v23 = v149.__end_ - v149.__begin_;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v25 = (char *)v149.__end_cap_.__value_ - (char *)v149.__begin_;
          if (((char *)v149.__end_cap_.__value_ - (char *)v149.__begin_) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v149.__end_cap_, v26);
            begin = v149.__begin_;
            end = v149.__end_;
          }
          else
          {
            v27 = 0;
          }
          v28 = (int *)&v27[4 * v23];
          *v28 = v17;
          v21 = v28 + 1;
          while (end != begin)
          {
            v29 = *--end;
            *--v28 = v29;
          }
          v149.__begin_ = v28;
          v149.__end_ = v21;
          v149.__end_cap_.__value_ = (int *)&v27[4 * v26];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v149.__end_ = v17;
          v21 = end + 1;
        }
        v149.__end_ = v21;
        ++v18;
        v16 = v150;
      }
      ++v17;
    }
    while (v17 < v16);
  }
  v30 = v149.__end_ - v149.__begin_;
  v31 = v135;
  if (v30 != *v135)
    __assert_rtn("XAtlasPacking", "XAtlasPacking.cpp", 667, "g_starts.size() == chart_number");
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(v148, v30);
  std::vector<std::pair<unsigned int,double>>::vector(&v146, *v135);
  v32 = *v135;
  if (*v135)
  {
    LODWORD(v33) = 0;
    v34 = v146;
    do
    {
      *v34 = v33;
      v34 += 4;
      v33 = (v33 + 1);
    }
    while (v32 > v33);
  }
  std::vector<std::vector<unsigned int>>::vector(v145, v32);
  v35 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  LOBYTE(context[0]) = 0;
  std::vector<BOOL>::vector(&v144, v35, (unsigned __int8 *)context);
  v37 = *v135;
  if (*v135)
  {
    v38 = 0;
    v39 = 0;
    do
    {
      v40 = v149.__begin_[v38];
      v41 = (v39 + 1);
      v42 = (int *)&v150;
      if (v41 != v149.__end_ - v149.__begin_)
        v42 = &v149.__begin_[v41];
      v137 = *v42;
      if (v40 < v137)
      {
        v134 = v41;
        do
        {
          v43 = a3[5];
          if (0xAAAAAAAAAAAAAAABLL * ((a3[6] - v43) >> 2) <= v40)
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          v44 = 0;
          v45 = v43 + 12 * v40;
          v46 = (char *)v144;
          do
          {
            v47 = *(unsigned int *)(v45 + 4 * v44);
            if (((*(_QWORD *)&v46[(v47 >> 3) & 0x1FFFFFF8] >> v47) & 1) == 0)
            {
              v48 = v145[0] + 24 * v38;
              v50 = (_DWORD **)(v48 + 8);
              v49 = *(_DWORD **)(v48 + 8);
              v52 = (_QWORD *)(v48 + 16);
              v51 = *(_QWORD *)(v48 + 16);
              if ((unint64_t)v49 >= v51)
              {
                v54 = *(_DWORD **)v48;
                v55 = ((uint64_t)v49 - *(_QWORD *)v48) >> 2;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v57 = v51 - (_QWORD)v54;
                if (v57 >> 1 > v56)
                  v56 = v57 >> 1;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                  v58 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v52, v58);
                  v49 = *v50;
                  v54 = *(_DWORD **)v48;
                  LODWORD(v47) = *(_DWORD *)(v45 + 4 * v44);
                }
                else
                {
                  v59 = 0;
                }
                v60 = &v59[4 * v55];
                *(_DWORD *)v60 = v47;
                v53 = v60 + 4;
                while (v49 != v54)
                {
                  v61 = *--v49;
                  *((_DWORD *)v60 - 1) = v61;
                  v60 -= 4;
                }
                *(_QWORD *)v48 = v60;
                *v50 = v53;
                *v52 = &v59[4 * v58];
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *v49 = v47;
                v53 = v49 + 1;
              }
              *v50 = v53;
              v46 = (char *)v144;
              *(_QWORD *)((char *)v144 + (((unint64_t)*(unsigned int *)(v45 + 4 * v44) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v45 + 4 * v44);
            }
            ++v44;
          }
          while (v44 != 3);
          ++v40;
        }
        while (v40 != v137);
        v41 = v134;
        v37 = *v135;
      }
      v39 = v41;
      v38 = v41;
    }
    while (v37 > v41);
    if (v37)
    {
      v62 = 0;
      v63 = 0;
      do
      {
        v64 = 0;
        v65 = 0;
        v66 = 3.4028e38;
        do
        {
          v67 = v64;
          *(float *)v36.f64 = (float)v64 * 0.098175;
          *(float *)context = *(float *)v36.f64;
          *(float *)v36.f64 = cv3d::cv::gess::internal::TextureBoundingArea((unsigned int **)(v145[0] + 24 * v62), (uint64_t)a1, (float *)context, v36);
          if (*(float *)v36.f64 < v66)
          {
            v66 = *(float *)v36.f64;
            v65 = v64;
          }
          ++v64;
        }
        while (v67 < 0xF);
        *(float *)context = (float)v65 * 0.098175;
        if (v65)
          *(float32x2_t *)&v36.f64[0] = cv3d::cv::gess::internal::RotateTexture((unsigned int **)(v145[0] + 24 * v62), (uint64_t)a1, (float *)context);
        v68 = *v135;
        v62 = ++v63;
      }
      while (*v135 > v63);
    }
    else
    {
      v68 = 0;
    }
    v31 = v135;
  }
  else
  {
    v68 = 0;
  }
  v143 = *a6 + 2 * v151;
  std::vector<double>::vector(v142, v68);
  std::vector<double>::vector(__p, *v31);
  cv3d::cv::gess::internal::CalculateSurfaceAndParamArea((uint64_t *)&v149, (uint64_t)a1, a3, (uint64_t *)v142);
  v69 = *v31;
  if (!*v31)
    goto LABEL_114;
  v70 = 0;
  v71 = 0.0;
  v72 = (double *)v142[0];
  do
  {
    v73 = *((double *)v142[0] + v70);
    v71 = v71 + v73;
    ++v70;
  }
  while (v69 > v70);
  if (v71 <= 0.0)
  {
LABEL_114:
    v129 = 0;
    goto LABEL_115;
  }
  v74 = 0;
  LODWORD(v75) = 0;
  v76 = v71;
  v77 = v149.__begin_;
  v78 = v149.__end_ - v149.__begin_;
  v79 = sqrtf((float)(v143 * v143 * *a7) / (float)(v76 / a9));
  v80 = a3[5];
  v81 = (a3[6] - v80) / 12;
  v82 = v145[0];
  v83 = a1[5];
  v84 = (a1[6] - v83) >> 3;
  LODWORD(v73) = *a6;
  v85 = (double)*(unint64_t *)&v73 + -1.0;
  v86 = (float32x2_t *)v148[0];
  v87 = (double *)__p[0];
  v88 = (double *)v146;
  v89 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v90 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  do
  {
    v91 = v77[v74];
    v75 = (v75 + 1);
    v92 = &v77[v75];
    if (v78 == v75)
      v92 = (int *)&v150;
    v93 = *v92;
    v94 = (float64x2_t)v90;
    v95 = (float64x2_t)v89;
    if (v91 < v93)
    {
      v96 = a1[5];
      if (v81 <= v91)
        v97 = v77[v74];
      else
        v97 = v81;
      v98 = v80 + 12 * v91;
      v94 = (float64x2_t)v90;
      v95 = (float64x2_t)v89;
      do
      {
        if (v91 == v97)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v99 = 0;
        do
        {
          v100 = *(unsigned int *)(v98 + v99);
          if ((a1[6] - v96) >> 3 <= v100)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v99 += 4;
          v101 = vcvtq_f64_f32(*(float32x2_t *)(v96 + 8 * v100));
          v94 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v94, v101), (int8x16_t)v101, (int8x16_t)v94);
          v95 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v101, v95), (int8x16_t)v101, (int8x16_t)v95);
        }
        while (v99 != 12);
        ++v91;
        v98 += 12;
      }
      while (v91 != v93);
    }
    v102 = (unsigned int **)(v82 + 24 * v74);
    v103 = *v102;
    v104 = v102[1];
    for (i = v103; i != v104; ++i)
    {
      v106 = *i;
      if (v84 <= v106)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(float32x2_t *)(v83 + 8 * v106) = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(v83 + 8 * v106)), v94), v79));
    }
    v107 = vsubq_f64(v95, v94);
    v108 = v79 * v107.f64[0];
    v109 = vmuld_lane_f64(v79, v107, 1);
    if (v108 > v85 || v109 > v85)
    {
      if (v108 < v109)
        v108 = v109;
      v111 = v85 / v108;
      if (v103 != v104)
      {
        v113 = v103;
        do
        {
          v114 = *v113;
          if (v84 <= v114)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v112 = v111;
          *(float32x2_t *)(v83 + 8 * v114) = vmul_n_f32(*(float32x2_t *)(v83 + 8 * v114), v112);
          ++v113;
        }
        while (v113 != v104);
      }
      v72[v74] = v111 * v111 * v72[v74];
    }
    if (v103 == v104)
    {
      v116 = 0uLL;
    }
    else
    {
      v115 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v151 + 0.5), 0);
      v116 = 0uLL;
      do
      {
        v117 = *v103;
        if (v84 <= v117)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v118 = vcvt_f32_f64(vaddq_f64(v115, vcvtq_f64_f32(*(float32x2_t *)(v83 + 8 * v117))));
        v119 = vcvtq_f64_f32(v118);
        *(float32x2_t *)(v83 + 8 * v117) = v118;
        v116 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v119, v116), (int8x16_t)v119, (int8x16_t)v116);
        ++v103;
      }
      while (v103 != v104);
    }
    v86[v74] = vcvt_f32_f64(v116);
    v87[v74] = vaddvq_f64(v116);
    v88[2 * v74 + 1] = v72[v74];
    v74 = v75;
  }
  while (v69 > v75);
  v120 = 126 - 2 * __clz(((char *)v147 - (char *)v88) >> 4);
  if (v147 == v88)
    v121 = 0;
  else
    v121 = v120;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *,false>(v88, (unint64_t)v147, v121, 1);
  v138 = 0;
  v139 = 0;
  v140 = 0;
  cv3d::cv::gess::internal::PrepareMultiTexture((int **)&v146, (double **)v142, (uint64_t *)__p, a7, &v138);
  *a10 = -1431655765 * ((unint64_t)(v139 - v138) >> 3);
  v122 = operator new(0x60uLL);
  v122[1] = &v138;
  *v122 = &off_250D4A908;
  v122[2] = &v143;
  v122[3] = v148;
  v122[4] = &v151;
  v122[5] = &v149;
  v122[6] = &v150;
  v122[7] = a3;
  v122[8] = a1;
  v122[9] = v145;
  v122[10] = a4;
  v122[11] = &a11;
  v123 = (char *)operator new(0x60uLL);
  *(_QWORD *)v123 = &off_250D4A908;
  v124 = *(_OWORD *)(v122 + 7);
  *(_OWORD *)(v123 + 40) = *(_OWORD *)(v122 + 5);
  *(_OWORD *)(v123 + 56) = v124;
  *(_OWORD *)(v123 + 72) = *(_OWORD *)(v122 + 9);
  *((_QWORD *)v123 + 11) = v122[11];
  v125 = *(_OWORD *)(v122 + 3);
  *(_OWORD *)(v123 + 8) = *(_OWORD *)(v122 + 1);
  *(_OWORD *)(v123 + 24) = v125;
  v153 = (void ***)v123;
  v126 = dispatch_queue_create("com.gcd.task3", MEMORY[0x24BDAC9C0]);
  dispatch_apply_f(*a10, v126, context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_2::__invoke);
  dispatch_release(v126);
  v127 = v153;
  if (v153 == context)
  {
    v128 = 4;
    v127 = context;
    goto LABEL_131;
  }
  if (v153)
  {
    v128 = 5;
LABEL_131:
    ((void (*)(void))(*v127)[v128])();
  }
  (*(void (**)(_QWORD *))(*v122 + 40))(v122);
  context[0] = (void **)&v138;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](context);
  v129 = 1;
LABEL_115:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  if (v144)
    operator delete(v144);
  context[0] = (void **)v145;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](context);
  if (v146)
  {
    v147 = (double *)v146;
    operator delete(v146);
  }
  if (v148[0])
  {
    v148[1] = v148[0];
    operator delete(v148[0]);
  }
  if (v149.__begin_)
  {
    v149.__end_ = v149.__begin_;
    operator delete(v149.__begin_);
  }
  return v129;
}

void sub_23C5876B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  void *v38;
  uint64_t v39;
  void *v41;

  operator delete(v38);
  *(_QWORD *)(v39 - 160) = &a18;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 160));
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  if (a28)
    operator delete(a28);
  *(_QWORD *)(v39 - 160) = &a31;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 160));
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  v41 = *(void **)(v39 - 200);
  if (v41)
  {
    *(_QWORD *)(v39 - 192) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::XAtlasPacking(std::vector<unsigned int>::size_type *a1, unint64_t *a2, std::vector<int>::size_type *a3, _DWORD *a4, unsigned int *a5, float *a6, uint64_t a7, uint64_t a8, uint64_t a9, _WORD *a10, _DWORD *a11, int a12)
{
  std::vector<unsigned int>::size_type v19;
  uint64_t v20;
  unint64_t v21;
  std::vector<unsigned int>::pointer begin;
  int64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int *v36;
  int v37;
  std::vector<unsigned int>::size_type v38;
  __int16 *v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v44;
  void *v46[2];
  uint64_t v47;
  _BYTE v48[24];
  uint64_t v49;
  uint64_t (*(*v50)())();
  __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[24];
  uint64_t v55;
  uint64_t (*(*v56)())();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string __p;
  uint64_t v61;
  uint64_t (*(*v62)())();
  std::vector<unsigned int> v63;
  uint64_t (**v64)();
  std::string v65;
  uint64_t (*(*v66)())();
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  std::string::basic_string[abi:ne180100]<0>(&__p, "<unknown>");
  v64 = (uint64_t (**)())off_250D49588;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v66 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    v67 = 0;
    v64 = &off_250D4A178;
    v68 = 0;
    v69 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v65 = __p;
    v66 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    v67 = 0;
    v64 = &off_250D4A178;
    v68 = 0;
    v69 = 0;
  }
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::resize(&v67, *a2);
  std::string::basic_string[abi:ne180100]<0>(v54, "<unknown>");
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_250D49588;
  if ((v54[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p.__r_.__value_.__r.__words[1], *(const std::string::value_type **)v54, *(std::string::size_type *)&v54[8]);
    v62 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    memset(&v63, 0, sizeof(v63));
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250D49A90;
    if ((v54[23] & 0x80000000) != 0)
      operator delete(*(void **)v54);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)v54;
    v61 = *(_QWORD *)&v54[16];
    v62 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    memset(&v63, 0, sizeof(v63));
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250D49A90;
  }
  std::vector<int>::resize(&v63, *a1);
  std::string::basic_string[abi:ne180100]<0>(v48, "<unknown>");
  *(_QWORD *)v54 = off_250D49588;
  if ((v48[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v54[8], *(const std::string::value_type **)v48, *(std::string::size_type *)&v48[8]);
    v56 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    v57 = 0;
    *(_QWORD *)v54 = &off_250D499B0;
    v58 = 0;
    v59 = 0;
    if ((v48[23] & 0x80000000) != 0)
      operator delete(*(void **)v48);
  }
  else
  {
    *(_OWORD *)&v54[8] = *(_OWORD *)v48;
    v55 = *(_QWORD *)&v48[16];
    v56 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    v57 = 0;
    *(_QWORD *)v54 = &off_250D499B0;
    v58 = 0;
    v59 = 0;
  }
  std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::resize((uint64_t)&v57, *a1);
  v19 = *a1;
  if (*a1)
  {
    v20 = 0;
    v21 = 0;
    begin = v63.__begin_;
    v23 = v63.__end_ - v63.__begin_;
    v24 = v58;
    do
    {
      if (v23 == v21)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      begin[v21] = *(_DWORD *)(a7 + 4 * v21);
      if (0xAAAAAAAAAAAAAAABLL * ((v24 - v57) >> 2) <= v21)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v25 = *(_DWORD *)(a8 + v20 + 8);
      v26 = v57 + v20;
      *(_QWORD *)v26 = *(_QWORD *)(a8 + v20);
      *(_DWORD *)(v26 + 8) = v25;
      ++v21;
      v20 += 12;
    }
    while (v19 != v21);
  }
  v27 = *a2;
  if (*a2)
  {
    v28 = (v68 - v67) >> 3;
    v29 = (int *)(a9 + 4);
    v30 = (_DWORD *)(v67 + 4);
    do
    {
      if (!v28)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(v30 - 1) = *(v29 - 1);
      v31 = *v29;
      v29 += 2;
      *v30 = v31;
      v30 += 2;
      --v28;
      --v27;
    }
    while (v27);
  }
  std::string::basic_string[abi:ne180100]<0>(v46, "<unknown>");
  *(_QWORD *)v48 = off_250D49588;
  if (SHIBYTE(v47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v48[8], (const std::string::value_type *)v46[0], (std::string::size_type)v46[1]);
    v50 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    v51 = 0;
    *(_QWORD *)v48 = &off_250D4A418;
    v52 = 0;
    v53 = 0;
    if (SHIBYTE(v47) < 0)
      operator delete(v46[0]);
  }
  else
  {
    *(_OWORD *)&v48[8] = *(_OWORD *)v46;
    v49 = v47;
    v50 = cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
    v51 = 0;
    *(_QWORD *)v48 = &off_250D4A418;
    v52 = 0;
    v53 = 0;
  }
  std::vector<unsigned short>::resize((uint64_t)&v51, *a1);
  LODWORD(v44) = a12;
  v32 = cv3d::cv::gess::internal::XAtlasPacking(&v64, &__p, v54, (uint64_t)v48, a3, a4, a5, a6, 0.55, a11, v44);
  if ((_DWORD)v32)
  {
    v33 = *a2;
    if (*a2)
    {
      v34 = (v68 - v67) >> 3;
      v35 = (_DWORD *)(a9 + 4);
      v36 = (int *)(v67 + 4);
      do
      {
        if (!v34)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(v35 - 1) = *(v36 - 1);
        v37 = *v36;
        v36 += 2;
        *v35 = v37;
        v35 += 2;
        --v34;
        --v33;
      }
      while (v33);
    }
    v38 = *a1;
    if (*a1)
    {
      v40 = v51;
      v41 = (v52 - (uint64_t)v51) >> 1;
      do
      {
        if (!v41)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v42 = *v40++;
        *a10++ = v42;
        --v41;
        --v38;
      }
      while (v38);
    }
  }
  cv3d::cv::gess::mesh::AttributeT<unsigned short>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)v48);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)v54);
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&__p);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&v64);
  return v32;
}

void sub_23C587CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a18 < 0)
    operator delete(__p);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&a30);
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)&a41);
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT((cv3d::cv::gess::mesh::BaseAttribute *)(v46 - 152));
  _Unwind_Resume(a1);
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::UnknownAttributeType>;
}

_QWORD *std::vector<std::pair<unsigned int,double>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C587DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *,false>(double *result, unint64_t a2, uint64_t a3, char a4)
{
  double *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  double v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  int v48;
  double v49;
  double v50;
  int v51;
  int v52;
  double v53;
  int v54;
  double v55;
  int v56;
  double *v57;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  int v91;
  unint64_t v92;
  double *v94;
  double v95;
  double v96;
  int v97;
  double *v98;
  double *v99;
  uint64_t v100;

  v7 = result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (double *)v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(double *)(a2 - 8);
        v44 = *(double *)(v8 + 8);
        if (v43 > v44)
        {
          v45 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v45;
          *(double *)(v8 + 8) = v43;
          *(double *)(a2 - 8) = v44;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v8, (double *)(v8 + 16), (double *)(a2 - 16));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), a2 - 16);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), v8 + 48);
        v46 = *(double *)(a2 - 8);
        v47 = *(double *)(v8 + 56);
        if (v46 > v47)
        {
          v48 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v48;
          *(double *)(v8 + 56) = v46;
          *(double *)(a2 - 8) = v47;
          v49 = *(double *)(v8 + 56);
          v50 = *(double *)(v8 + 40);
          if (v49 > v50)
          {
            v51 = *(_DWORD *)(v8 + 32);
            v52 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v52;
            *(_DWORD *)(v8 + 48) = v51;
            *(double *)(v8 + 40) = v49;
            *(double *)(v8 + 56) = v50;
            v53 = *(double *)(v8 + 24);
            if (v49 > v53)
            {
              v54 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v52;
              *(_DWORD *)(v8 + 32) = v54;
              *(double *)(v8 + 24) = v49;
              *(double *)(v8 + 40) = v53;
              v55 = *(double *)(v8 + 8);
              if (v49 > v55)
              {
                v56 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v52;
                *(_DWORD *)(v8 + 16) = v56;
                *(double *)(v8 + 8) = v49;
                *(double *)(v8 + 24) = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v57 = (double *)(v8 + 16);
          v59 = v8 == a2 || v57 == (double *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = (double *)v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 > v63)
                {
                  v64 = *(_DWORD *)v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = v8 + v65;
                    *(_DWORD *)(v66 + 16) = *(_DWORD *)(v8 + v65);
                    *(_QWORD *)(v66 + 24) = *(_QWORD *)(v8 + v65 + 8);
                    if (!v65)
                      break;
                    v65 -= 16;
                    if (v62 <= *(double *)(v66 - 8))
                    {
                      v67 = v8 + v65 + 16;
                      goto LABEL_80;
                    }
                  }
                  v67 = v8;
LABEL_80:
                  *(_DWORD *)v67 = v64;
                  *(double *)(v67 + 8) = v62;
                }
                v57 = v61 + 2;
                v60 += 16;
              }
              while (v61 + 2 != (double *)a2);
            }
          }
          else if (!v59)
          {
            v94 = (double *)(v8 + 24);
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 > v96)
              {
                v97 = *(_DWORD *)v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *((_DWORD *)v98 - 2) = *((_DWORD *)v98 - 6);
                  v100 = *((_QWORD *)v98 - 2);
                  v98 -= 2;
                  *(_QWORD *)v99 = v100;
                }
                while (v95 > *(v99 - 4));
                *((_DWORD *)v98 - 2) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != (double *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = v8 + 16 * v71;
              if (2 * v70 + 2 < (uint64_t)v10 && *(double *)(v72 + 8) > *(double *)(v72 + 24))
              {
                v72 += 16;
                v71 = 2 * v70 + 2;
              }
              v73 = *(double *)(v72 + 8);
              v74 = *(double *)(v8 + 16 * v70 + 8);
              if (v73 <= v74)
              {
                v75 = v8 + 16 * v70;
                v76 = *(_DWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *(_DWORD *)v77 = *(_DWORD *)v72;
                  *(double *)(v77 + 8) = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = v8 + 16 * v71;
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && *(double *)(v72 + 8) > *(double *)(v72 + 24))
                  {
                    v72 += 16;
                    v71 = v79;
                  }
                  v73 = *(double *)(v72 + 8);
                }
                while (v73 <= v74);
                *(_DWORD *)v75 = v76;
                *(double *)(v75 + 8) = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 4;
          while (2)
          {
            v81 = 0;
            v82 = *(_DWORD *)v8;
            v83 = *(double *)(v8 + 8);
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 16 * (v81 + 1);
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && *(double *)(v84 + 8) > *(double *)(v84 + 24))
              {
                v84 += 16;
                v81 = v87;
              }
              *(_DWORD *)v85 = *(_DWORD *)v84;
              *(_QWORD *)(v85 + 8) = *(_QWORD *)(v84 + 8);
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 16)
            {
              *(_DWORD *)v84 = *(_DWORD *)(a2 - 16);
              *(_QWORD *)(v84 + 8) = *(_QWORD *)(a2 - 8);
              *(_DWORD *)(a2 - 16) = v82;
              *(double *)(a2 - 8) = v83;
              v88 = v84 - v8 + 16;
              if (v88 >= 17)
              {
                v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                v90 = *(double *)(v8 + 16 * v89 + 8);
                v83 = *(double *)(v84 + 8);
                if (v90 > v83)
                {
                  v91 = *(_DWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = v8 + 16 * v89;
                    *(_DWORD *)v92 = *(_DWORD *)v84;
                    *(double *)(v92 + 8) = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = *(double *)(v8 + 16 * v89 + 8);
                  }
                  while (v90 > v83);
                  *(_DWORD *)v84 = v91;
LABEL_112:
                  *(double *)(v84 + 8) = v83;
                }
              }
              a2 -= 16;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(_DWORD *)v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = (double *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(&v7[2 * (v10 >> 1)], v7, (double *)(a2 - 16));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v7, &v7[2 * (v10 >> 1)], (double *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v7 + 2, v12 - 2, (double *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v7 + 4, &v7[2 * v11 + 2], (double *)(a2 - 48));
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *((_QWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_QWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) > v15)
            goto LABEL_12;
          if (v15 <= *(double *)(a2 - 8))
          {
            v33 = v7 + 2;
            do
            {
              v8 = (unint64_t)v33;
              if ((unint64_t)v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 <= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = (unint64_t)(v31 + 2);
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 <= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 16;
              v37 = *(double *)(v36 - 8);
              v36 -= 16;
            }
            while (v15 > v37);
          }
          v38 = *(_DWORD *)v7;
          while (v8 < v35)
          {
            v39 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v35;
            *(_DWORD *)v35 = v39;
            v40 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v40;
            do
            {
              v41 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v15 <= v41);
            do
            {
              v42 = *(double *)(v35 - 8);
              v35 -= 16;
            }
            while (v15 > v42);
          }
          if ((double *)(v8 - 16) != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            v7[1] = *(double *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v38;
          *(double *)(v8 - 8) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *(_DWORD *)v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 > v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while ((unint64_t)v19 < v23)
          {
            v21 = v23 - 16;
            v24 = *(double *)(v23 - 8);
            v23 -= 16;
            if (v24 > v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 16;
            v22 = *(double *)(v20 - 8);
            v20 -= 16;
          }
          while (v22 <= v15);
        }
LABEL_22:
        v8 = (unint64_t)v19;
        if ((unint64_t)v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v26;
            v27 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v27;
            do
            {
              v28 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v28 > v15);
            do
            {
              v29 = *(double *)(v25 - 8);
              v25 -= 16;
            }
            while (v29 <= v15);
          }
          while (v8 < v25);
        }
        if ((double *)(v8 - 16) != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          v7[1] = *(double *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v17;
        *(double *)(v8 - 8) = v15;
        if ((unint64_t)v19 < v21)
        {
LABEL_33:
          result = (double *)std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *,false>(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((uint64_t)v7, v8 - 16);
        result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  double v8;
  double v9;
  int v10;
  double v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 > v9)
      {
        v10 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *(_DWORD *)result;
    if (v5 <= v3)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 <= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *(_DWORD *)result = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 8);
      v7 = *(double *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(double *)(a1 + 8) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a1 + 48);
      v18 = *(double *)(a2 - 8);
      v19 = *(double *)(a1 + 56);
      if (v18 > v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(double *)(a1 + 56) = v18;
        *(double *)(a2 - 8) = v19;
        v21 = *(double *)(a1 + 56);
        v22 = *(double *)(a1 + 40);
        if (v21 > v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(double *)(a1 + 40) = v21;
          *(double *)(a1 + 56) = v22;
          v25 = *(double *)(a1 + 24);
          if (v21 > v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(double *)(a1 + 24) = v21;
            *(double *)(a1 + 40) = v25;
            v27 = *(double *)(a1 + 8);
            if (v21 > v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(double *)(a1 + 8) = v21;
              *(double *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 > *(double *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

double *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(double *a1, double *a2, double *a3, uint64_t a4)
{
  double *result;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(a1, a2, a3);
  v9 = *(double *)(a4 + 8);
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    a3[1] = v9;
    *(double *)(a4 + 8) = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 > v13)
    {
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 > v16)
      {
        v17 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

_QWORD *std::__split_buffer<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance,std::allocator<cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance> &>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1555555555555556)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(12 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[12 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[12 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  float v27;
  float *v28;
  float *v29;
  float v30;
  float *v31;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  float *v37;
  uint64_t v38;
  BOOL v39;
  float v40;
  float v41;
  float v42;
  float *v43;
  float v44;
  float v45;
  float *v46;
  float *j;
  uint64_t v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  float v60;
  float v61;
  uint64_t v62;
  int v63;
  int v64;
  float v65;
  float v66;
  int v67;
  uint64_t v68;
  float v69;
  float v70;
  int v71;
  uint64_t v72;
  float v73;
  float v74;
  _DWORD *v75;
  BOOL v77;
  uint64_t v78;
  _DWORD *v79;
  float *v80;
  float v81;
  float v82;
  float v83;
  int v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  unint64_t v99;
  float v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float v107;
  float v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  float v117;
  float v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  float v125;
  float v126;
  float v127;
  float v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  float v133;
  uint64_t v134;
  uint64_t v136;
  float v137;
  float v138;
  float v139;
  int v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  int v6;
  uint64_t v7;
  int v8;
  float v9;
  int v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  float v21;
  float v22;
  int v23;

  v3 = a2[1];
  v4 = result[1];
  if (v3 <= v4 && (v3 <= (float)(v4 + -0.000001) || a2[2] >= result[2]))
  {
    v9 = a3[1];
    if (v9 > v3 || v9 > (float)(v3 + -0.000001) && a3[2] < a2[2])
    {
      v10 = *((_DWORD *)a2 + 2);
      v11 = *(_QWORD *)a2;
      v12 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v12;
      *(_QWORD *)a3 = v11;
      *((_DWORD *)a3 + 2) = v10;
      v13 = a2[1];
      v14 = result[1];
      if (v13 > v14 || v13 > (float)(v14 + -0.000001) && a2[2] < result[2])
      {
        v15 = *((_DWORD *)result + 2);
        v16 = *(_QWORD *)result;
        v17 = *((_DWORD *)a2 + 2);
        *(_QWORD *)result = *(_QWORD *)a2;
        *((_DWORD *)result + 2) = v17;
        *(_QWORD *)a2 = v16;
        *((_DWORD *)a2 + 2) = v15;
      }
    }
  }
  else
  {
    v5 = a3[1];
    if (v5 > v3 || v5 > (float)(v3 + -0.000001) && a3[2] < a2[2])
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *(_QWORD *)result;
      v8 = *((_DWORD *)a3 + 2);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v8;
LABEL_17:
      *(_QWORD *)a3 = v7;
      *((_DWORD *)a3 + 2) = v6;
      return result;
    }
    v18 = *((_DWORD *)result + 2);
    v19 = *(_QWORD *)result;
    v20 = *((_DWORD *)a2 + 2);
    *(_QWORD *)result = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = v20;
    *(_QWORD *)a2 = v19;
    *((_DWORD *)a2 + 2) = v18;
    v21 = a3[1];
    v22 = a2[1];
    if (v21 > v22 || v21 > (float)(v22 + -0.000001) && a3[2] < a2[2])
    {
      v6 = *((_DWORD *)a2 + 2);
      v7 = *(_QWORD *)a2;
      v23 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v23;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  float v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  float v27;
  float v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  float v33;
  float v34;
  int v35;
  uint64_t v36;
  float v37;
  float v38;
  int v39;
  uint64_t v40;
  float v41;
  float v42;
  int v43;
  uint64_t v44;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)(a1 + 4);
      if (v6 > v7 || v6 > (float)(v7 + -0.000001) && *(float *)(a2 - 4) < *(float *)(a1 + 8))
      {
        v8 = a2 - 12;
        v9 = *(_DWORD *)(a1 + 8);
        v10 = *(_QWORD *)a1;
        v11 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v11;
        *(_QWORD *)v8 = v10;
        *(_DWORD *)(v8 + 8) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a2 - 12));
      return 1;
    case 5uLL:
      v24 = (uint64_t *)(a1 + 12);
      v25 = (uint64_t *)(a1 + 24);
      v26 = (uint64_t *)(a1 + 36);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a1 + 36));
      v27 = *(float *)(a2 - 8);
      v28 = *(float *)(a1 + 40);
      if (v27 > v28 || v27 > (float)(v28 + -0.000001) && *(float *)(a2 - 4) < *(float *)(a1 + 44))
      {
        v29 = a2 - 12;
        v30 = *(_DWORD *)(a1 + 44);
        v31 = *v26;
        v32 = *(_DWORD *)(a2 - 4);
        *v26 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 44) = v32;
        *(_QWORD *)v29 = v31;
        *(_DWORD *)(v29 + 8) = v30;
        v33 = *(float *)(a1 + 40);
        v34 = *(float *)(a1 + 28);
        if (v33 > v34 || v33 > (float)(v34 + -0.000001) && *(float *)(a1 + 44) < *(float *)(a1 + 32))
        {
          v35 = *(_DWORD *)(a1 + 32);
          v36 = *v25;
          *v25 = *v26;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 44);
          *v26 = v36;
          *(_DWORD *)(a1 + 44) = v35;
          v37 = *(float *)(a1 + 28);
          v38 = *(float *)(a1 + 16);
          if (v37 > v38 || v37 > (float)(v38 + -0.000001) && *(float *)(a1 + 32) < *(float *)(a1 + 20))
          {
            v39 = *(_DWORD *)(a1 + 20);
            v40 = *v24;
            *v24 = *v25;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
            *v25 = v40;
            *(_DWORD *)(a1 + 32) = v39;
            v41 = *(float *)(a1 + 16);
            v42 = *(float *)(a1 + 4);
            if (v41 > v42 || v41 > (float)(v42 + -0.000001) && *(float *)(a1 + 20) < *(float *)(a1 + 8))
            {
              v43 = *(_DWORD *)(a1 + 8);
              v44 = *(_QWORD *)a1;
              *(_QWORD *)a1 = *v24;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
              *v24 = v44;
              *(_DWORD *)(a1 + 20) = v43;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v13 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *(float *)(v13 + 4);
    v17 = *(float *)(v12 + 4);
    if (v16 > v17)
      break;
    if (v16 > (float)(v17 + -0.000001))
    {
      v18 = *(float *)(v13 + 8);
      if (v18 < *(float *)(v12 + 8))
        goto LABEL_10;
    }
LABEL_20:
    v12 = v13;
    v14 += 12;
    v13 += 12;
    if (v13 == a2)
      return 1;
  }
  v18 = *(float *)(v13 + 8);
LABEL_10:
  v19 = *(_DWORD *)v13;
  *(_QWORD *)v13 = *(_QWORD *)v12;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
  v20 = a1;
  if (v12 != a1)
  {
    v21 = v14;
    while (1)
    {
      v22 = a1 + v21;
      v23 = *(float *)(a1 + v21 + 16);
      if (v16 <= v23)
      {
        if (v16 <= (float)(v23 + -0.000001))
        {
          v20 = v12;
          goto LABEL_19;
        }
        if (v18 >= *(float *)(a1 + v21 + 20))
          break;
      }
      v12 -= 12;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)(v22 + 12);
      *(_DWORD *)(v22 + 32) = *(_DWORD *)(v22 + 20);
      v21 -= 12;
      if (v21 == -24)
      {
        v20 = a1;
        goto LABEL_19;
      }
    }
    v20 = a1 + v21 + 24;
  }
LABEL_19:
  *(_DWORD *)v20 = v19;
  *(float *)(v20 + 4) = v16;
  *(float *)(v20 + 8) = v18;
  if (++v15 != 8)
    goto LABEL_20;
  return v13 + 12 == a2;
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(float *a1, float *a2, float *a3, float *a4)
{
  float result;
  float v9;
  int v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  uint64_t v15;
  int v16;
  float v17;
  int v18;
  uint64_t v19;
  int v20;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::$_0 &,cv3d::cv::gess::internal::Get2DConvexHull(std::vector<unsigned int> const&,cv3d::cv::gess::math::Vector2T<float> const*,std::vector<unsigned int>&)::PointPolarAngleDistance *>(a1, a2, a3);
  result = a4[1];
  v9 = a3[1];
  if (result > v9 || result > (float)(v9 + -0.000001) && (result = a4[2], result < a3[2]))
  {
    v10 = *((_DWORD *)a3 + 2);
    v11 = *(_QWORD *)a3;
    v12 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v12;
    *(_QWORD *)a4 = v11;
    *((_DWORD *)a4 + 2) = v10;
    result = a3[1];
    v13 = a2[1];
    if (result > v13 || result > (float)(v13 + -0.000001) && (result = a3[2], result < a2[2]))
    {
      v14 = *((_DWORD *)a2 + 2);
      v15 = *(_QWORD *)a2;
      v16 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v16;
      *(_QWORD *)a3 = v15;
      *((_DWORD *)a3 + 2) = v14;
      result = a2[1];
      v17 = a1[1];
      if (result > v17 || result > (float)(v17 + -0.000001) && (result = a2[2], result < a1[2]))
      {
        v18 = *((_DWORD *)a1 + 2);
        v19 = *(_QWORD *)a1;
        v20 = *((_DWORD *)a2 + 2);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_DWORD *)a1 + 2) = v20;
        *(_QWORD *)a2 = v19;
        *((_DWORD *)a2 + 2) = v18;
      }
    }
  }
  return result;
}

_QWORD *std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::vector(_QWORD *a1, unint64_t a2, const cv3d::cv::gess::mesh::BaseAttribute *a3)
{
  cv3d::cv::gess::mesh::BaseAttribute *v6;
  char *v7;
  unint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (cv3d::cv::gess::mesh::BaseAttribute *)a1[1];
    v7 = (char *)v6 + 64 * a2;
    v8 = a2 << 6;
    do
    {
      cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::AttributeT(v6, a3);
      v6 = (cv3d::cv::gess::mesh::BaseAttribute *)((char *)v6 + 64);
      v8 -= 64;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C589D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

void std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 64;
      v7 = v4 - 64;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 64;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  cv3d::cv::gess::mesh::BaseAttribute *v6;
  char *v7;
  unint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (cv3d::cv::gess::mesh::BaseAttribute *)a1[1];
    v7 = (char *)v6 + 64 * a2;
    v8 = a2 << 6;
    do
    {
      cv3d::cv::gess::mesh::AttributeT<unsigned short>::AttributeT(v6, a3);
      v6 = (cv3d::cv::gess::mesh::BaseAttribute *)((char *)v6 + 64);
      v8 -= 64;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C589EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_1::__invoke(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v6, a1);
  v5 = a2;
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, int *))(*(_QWORD *)v7 + 48))(v7, &v5);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_23C589FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C58A050(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C58A0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C58A164(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *,false>(double *result, unint64_t a2, uint64_t a3, char a4)
{
  double *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  double v18;
  double *v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  BOOL v30;
  double *v31;
  double v32;
  double *v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  double v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  int v45;
  double v46;
  double v47;
  int v48;
  double v49;
  double v50;
  int v51;
  int v52;
  double v53;
  int v54;
  double v55;
  int v56;
  double *v57;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  double v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  double v90;
  int v91;
  unint64_t v92;
  double *v94;
  double v95;
  double v96;
  int v97;
  double *v98;
  double *v99;
  uint64_t v100;

  v7 = result;
LABEL_2:
  v8 = (unint64_t)v7;
  while (2)
  {
    v7 = (double *)v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(double *)(a2 - 8);
        v44 = *(double *)(v8 + 8);
        if (v43 > v44)
        {
          v45 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v45;
          *(double *)(v8 + 8) = v43;
          *(double *)(a2 - 8) = v44;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v8, (double *)(v8 + 16), (double *)(a2 - 16));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), a2 - 16);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), v8 + 48);
        v46 = *(double *)(a2 - 8);
        v47 = *(double *)(v8 + 56);
        if (v46 > v47)
        {
          v48 = *(_DWORD *)(v8 + 48);
          *(_DWORD *)(v8 + 48) = *(_DWORD *)(a2 - 16);
          *(_DWORD *)(a2 - 16) = v48;
          *(double *)(v8 + 56) = v46;
          *(double *)(a2 - 8) = v47;
          v49 = *(double *)(v8 + 56);
          v50 = *(double *)(v8 + 40);
          if (v49 > v50)
          {
            v51 = *(_DWORD *)(v8 + 32);
            v52 = *(_DWORD *)(v8 + 48);
            *(_DWORD *)(v8 + 32) = v52;
            *(_DWORD *)(v8 + 48) = v51;
            *(double *)(v8 + 40) = v49;
            *(double *)(v8 + 56) = v50;
            v53 = *(double *)(v8 + 24);
            if (v49 > v53)
            {
              v54 = *(_DWORD *)(v8 + 16);
              *(_DWORD *)(v8 + 16) = v52;
              *(_DWORD *)(v8 + 32) = v54;
              *(double *)(v8 + 24) = v49;
              *(double *)(v8 + 40) = v53;
              v55 = *(double *)(v8 + 8);
              if (v49 > v55)
              {
                v56 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v52;
                *(_DWORD *)(v8 + 16) = v56;
                *(double *)(v8 + 8) = v49;
                *(double *)(v8 + 24) = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v57 = (double *)(v8 + 16);
          v59 = v8 == a2 || v57 == (double *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = (double *)v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 > v63)
                {
                  v64 = *(_DWORD *)v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = v8 + v65;
                    *(_DWORD *)(v66 + 16) = *(_DWORD *)(v8 + v65);
                    *(_QWORD *)(v66 + 24) = *(_QWORD *)(v8 + v65 + 8);
                    if (!v65)
                      break;
                    v65 -= 16;
                    if (v62 <= *(double *)(v66 - 8))
                    {
                      v67 = v8 + v65 + 16;
                      goto LABEL_80;
                    }
                  }
                  v67 = v8;
LABEL_80:
                  *(_DWORD *)v67 = v64;
                  *(double *)(v67 + 8) = v62;
                }
                v57 = v61 + 2;
                v60 += 16;
              }
              while (v61 + 2 != (double *)a2);
            }
          }
          else if (!v59)
          {
            v94 = (double *)(v8 + 24);
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 > v96)
              {
                v97 = *(_DWORD *)v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *((_DWORD *)v98 - 2) = *((_DWORD *)v98 - 6);
                  v100 = *((_QWORD *)v98 - 2);
                  v98 -= 2;
                  *(_QWORD *)v99 = v100;
                }
                while (v95 > *(v99 - 4));
                *((_DWORD *)v98 - 2) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != (double *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = v8 + 16 * v71;
              if (2 * v70 + 2 < (uint64_t)v10 && *(double *)(v72 + 8) > *(double *)(v72 + 24))
              {
                v72 += 16;
                v71 = 2 * v70 + 2;
              }
              v73 = *(double *)(v72 + 8);
              v74 = *(double *)(v8 + 16 * v70 + 8);
              if (v73 <= v74)
              {
                v75 = v8 + 16 * v70;
                v76 = *(_DWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *(_DWORD *)v77 = *(_DWORD *)v72;
                  *(double *)(v77 + 8) = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = v8 + 16 * v71;
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && *(double *)(v72 + 8) > *(double *)(v72 + 24))
                  {
                    v72 += 16;
                    v71 = v79;
                  }
                  v73 = *(double *)(v72 + 8);
                }
                while (v73 <= v74);
                *(_DWORD *)v75 = v76;
                *(double *)(v75 + 8) = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 4;
          while (2)
          {
            v81 = 0;
            v82 = *(_DWORD *)v8;
            v83 = *(double *)(v8 + 8);
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 16 * (v81 + 1);
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && *(double *)(v84 + 8) > *(double *)(v84 + 24))
              {
                v84 += 16;
                v81 = v87;
              }
              *(_DWORD *)v85 = *(_DWORD *)v84;
              *(_QWORD *)(v85 + 8) = *(_QWORD *)(v84 + 8);
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 16)
            {
              *(_DWORD *)v84 = *(_DWORD *)(a2 - 16);
              *(_QWORD *)(v84 + 8) = *(_QWORD *)(a2 - 8);
              *(_DWORD *)(a2 - 16) = v82;
              *(double *)(a2 - 8) = v83;
              v88 = v84 - v8 + 16;
              if (v88 >= 17)
              {
                v89 = (((unint64_t)v88 >> 4) - 2) >> 1;
                v90 = *(double *)(v8 + 16 * v89 + 8);
                v83 = *(double *)(v84 + 8);
                if (v90 > v83)
                {
                  v91 = *(_DWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = v8 + 16 * v89;
                    *(_DWORD *)v92 = *(_DWORD *)v84;
                    *(double *)(v92 + 8) = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = *(double *)(v8 + 16 * v89 + 8);
                  }
                  while (v90 > v83);
                  *(_DWORD *)v84 = v91;
LABEL_112:
                  *(double *)(v84 + 8) = v83;
                }
              }
              a2 -= 16;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *(_DWORD *)v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = (double *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(&v7[2 * (v10 >> 1)], v7, (double *)(a2 - 16));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v7, &v7[2 * (v10 >> 1)], (double *)(a2 - 16));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v7 + 2, v12 - 2, (double *)(a2 - 32));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v7 + 4, &v7[2 * v11 + 2], (double *)(a2 - 48));
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *((_QWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_QWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) > v15)
            goto LABEL_12;
          if (v15 <= *(double *)(a2 - 8))
          {
            v33 = v7 + 2;
            do
            {
              v8 = (unint64_t)v33;
              if ((unint64_t)v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 <= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = (unint64_t)(v31 + 2);
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 <= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 16;
              v37 = *(double *)(v36 - 8);
              v36 -= 16;
            }
            while (v15 > v37);
          }
          v38 = *(_DWORD *)v7;
          while (v8 < v35)
          {
            v39 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v35;
            *(_DWORD *)v35 = v39;
            v40 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v35 + 8);
            *(_QWORD *)(v35 + 8) = v40;
            do
            {
              v41 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v15 <= v41);
            do
            {
              v42 = *(double *)(v35 - 8);
              v35 -= 16;
            }
            while (v15 > v42);
          }
          if ((double *)(v8 - 16) != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            v7[1] = *(double *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v38;
          *(double *)(v8 - 8) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *(_DWORD *)v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 > v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while ((unint64_t)v19 < v23)
          {
            v21 = v23 - 16;
            v24 = *(double *)(v23 - 8);
            v23 -= 16;
            if (v24 > v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 16;
            v22 = *(double *)(v20 - 8);
            v20 -= 16;
          }
          while (v22 <= v15);
        }
LABEL_22:
        v8 = (unint64_t)v19;
        if ((unint64_t)v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v25;
            *(_DWORD *)v25 = v26;
            v27 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v27;
            do
            {
              v28 = *(double *)(v8 + 24);
              v8 += 16;
            }
            while (v28 > v15);
            do
            {
              v29 = *(double *)(v25 - 8);
              v25 -= 16;
            }
            while (v29 <= v15);
          }
          while (v8 < v25);
        }
        if ((double *)(v8 - 16) != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          v7[1] = *(double *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v17;
        *(double *)(v8 - 8) = v15;
        if ((unint64_t)v19 < v21)
        {
LABEL_33:
          result = (double *)std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *,false>(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *>((uint64_t)v7, v8 - 16);
        result = (double *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_0 &,std::pair<unsigned int,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(double *)(a2 - 8);
      v7 = *(double *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v8;
        *(double *)(a1 + 8) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), a1 + 48);
      v18 = *(double *)(a2 - 8);
      v19 = *(double *)(a1 + 56);
      if (v18 > v19)
      {
        v20 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 - 16);
        *(_DWORD *)(a2 - 16) = v20;
        *(double *)(a1 + 56) = v18;
        *(double *)(a2 - 8) = v19;
        v21 = *(double *)(a1 + 56);
        v22 = *(double *)(a1 + 40);
        if (v21 > v22)
        {
          v23 = *(_DWORD *)(a1 + 32);
          v24 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)(a1 + 32) = v24;
          *(_DWORD *)(a1 + 48) = v23;
          *(double *)(a1 + 40) = v21;
          *(double *)(a1 + 56) = v22;
          v25 = *(double *)(a1 + 24);
          if (v21 > v25)
          {
            v26 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v24;
            *(_DWORD *)(a1 + 32) = v26;
            *(double *)(a1 + 24) = v21;
            *(double *)(a1 + 40) = v25;
            v27 = *(double *)(a1 + 8);
            if (v21 > v27)
            {
              v28 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24;
              *(_DWORD *)(a1 + 16) = v28;
              *(double *)(a1 + 8) = v21;
              *(double *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::internal::SortCharts(std::vector<unsigned int> &,std::vector<double> const&)::$_0 &,std::pair<unsigned int,double> *>((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)(v10 + 8);
    if (v13 > *(double *)(v9 + 8))
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_DWORD *)(v16 + 48) = *(_DWORD *)(a1 + v15 + 32);
        *(_QWORD *)(v16 + 56) = *(_QWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(double *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

_QWORD *cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_2::__invoke(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v6, a1);
  v5 = a2;
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, int *))(*(_QWORD *)v7 + 48))(v7, &v5);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_23C58ABD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Imageb>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Imageb>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::util::Imageb>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    result = MEMORY[0x2426211A0](result, 0x1000C8077774924);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x80uLL);
  *(_QWORD *)v2 = &off_250D4A8C0;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *((_QWORD *)v2 + 15) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_250D4A8C0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

intptr_t std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::TriMesh &,unsigned int const&,unsigned int const&,float const&,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,BOOL)::$_0>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v3;
  _QWORD *v4;
  float v5;
  intptr_t result;
  unsigned int v7;
  float *v8;
  _DWORD *v9;
  uint64_t v10;
  float v11;
  unsigned int v12;

  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = *(float *)(**(_QWORD **)(a1 + 8) + 4 * *a2);
  v12 = 0;
  LODWORD(v10) = **(_DWORD **)(a1 + 80);
  result = cv3d::cv::gess::internal::XAtlasPacking((_QWORD *)(*v4 + ((uint64_t)v3 << 6)), *(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 32), **(_QWORD **)(a1 + 40) + ((uint64_t)v3 << 6), *(std::vector<int>::size_type **)(a1 + 48), *(_DWORD **)(a1 + 56), *(unsigned int **)(a1 + 64), *(float **)(a1 + 72), v5, &v12, v10);
  if ((_DWORD)result)
  {
    v11 = 0.0;
    v7 = v12;
    cv3d::cv::gess::isochart::MeasureUvUtilization(**(_QWORD **)(a1 + 16) + ((uint64_t)v3 << 6), *(_QWORD **)(a1 + 32), v12, &v11);
    dispatch_semaphore_wait(**(dispatch_semaphore_t **)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
    **(_BYTE **)(a1 + 112) = 1;
    v8 = *(float **)(a1 + 88);
    if (v11 > *v8)
    {
      *v8 = v11;
      v9 = *(_DWORD **)(a1 + 104);
      **(_DWORD **)(a1 + 96) = v7;
      *v9 = v3;
    }
    return dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 120));
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_250D4A908;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250D4A908;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1,std::allocator<cv3d::cv::gess::internal::XAtlasPacking(cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> &,cv3d::cv::gess::mesh::AttributeT<unsigned int> const&,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> const&,cv3d::cv::gess::mesh::AttributeT<unsigned short> &,unsigned long const&,unsigned int const&,unsigned int const&,float const&,unsigned int &,cv3d::cv::gess::alg::ParameterizeOption::OverlapCheckMode,float)::$_1>,void ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  int *v4;
  void *v5;
  int v6;
  __n128 v7;
  uint64_t v8;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  double v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char **v32;
  unsigned int *v33;
  float *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  _BYTE *v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int64x2_t v110;
  const double *v111;
  int32x2_t v112;
  unsigned int v113;
  unint64_t v114;
  int8x16_t v115;
  int64x2_t v116;
  float64x2_t v117;
  unsigned int *v119;
  float v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int **v127;
  unsigned int *v128;
  unsigned int *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  _WORD *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *p_shared_owners;
  unint64_t v144;
  int v145;
  unsigned int **v146;
  unsigned int **v147;
  unsigned int *v148;
  unsigned int *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  void *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;

  v3 = *a2;
  v4 = *(int **)(a1 + 16);
  v5 = operator new(0x30uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_250D4A888;
  v6 = *v4;
  *((_DWORD *)v5 + 6) = 0;
  *((_DWORD *)v5 + 7) = v6;
  *((_DWORD *)v5 + 8) = v6;
  *((_DWORD *)v5 + 9) = 1;
  *((_QWORD *)v5 + 5) = 0;
  v163 = (uint64_t)v5 + 24;
  v164 = (std::__shared_weak_count *)v5;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)v5 + 24);
  bzero(*((void **)v5 + 5), (*((_DWORD *)v5 + 8) * *((_DWORD *)v5 + 7) * *((_DWORD *)v5 + 9)));
  v8 = **(_QWORD **)(a1 + 8) + 24 * v3;
  v9 = *(unsigned int **)v8;
  v148 = *(unsigned int **)(v8 + 8);
  if (*(unsigned int **)v8 != v148)
  {
    v146 = (unsigned int **)(v8 + 8);
    v147 = (unsigned int **)(**(_QWORD **)(a1 + 8) + 24 * v3);
    v10 = 0;
    v11 = **(_DWORD **)(a1 + 16);
    while (1)
    {
      v160 = 0;
      *(_QWORD *)&v161 = 0;
      *((_QWORD *)&v161 + 1) = 0x100000000;
      v162 = 0;
      *(_QWORD *)&v159 = 0;
      *((_QWORD *)&v159 + 1) = 0x100000000;
      *(_QWORD *)&v157 = 0;
      *((_QWORD *)&v157 + 1) = 0x100000000;
      v158 = 0;
      *((_QWORD *)&v155 + 1) = 0x100000000;
      v156 = 0;
      *(_QWORD *)&v155 = 0;
      v12 = **(_QWORD **)(a1 + 24);
      v13 = **(double **)(a1 + 32);
      DWORD1(v161) = (v13 + *(float *)(v12 + 8 * *v9));
      v14 = (v13 + *(float *)(v12 + 8 * *v9 + 4));
      DWORD2(v161) = v14;
      if (DWORD1(v161))
      {
        if (!v14)
          goto LABEL_18;
      }
      else
      {
        DWORD1(v161) = 1;
        if (!v14)
LABEL_18:
          DWORD2(v161) = 1;
      }
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v161);
      bzero(v162, (DWORD2(v161) * DWORD1(v161) * HIDWORD(v161)));
      *(int32x2_t *)((char *)&v157 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v161 + 4));
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v157);
      v15 = *v9;
      v16 = (v15 + 1);
      v17 = *(uint64_t **)(a1 + 40);
      v18 = *v17;
      if (v16 == (v17[1] - *v17) >> 2)
        v19 = *(unsigned int **)(a1 + 48);
      else
        v19 = (unsigned int *)(v18 + 4 * v16);
      v20 = **(_DWORD **)(a1 + 88);
      v149 = v9;
      if (v20)
      {
        if (v20 == 2)
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *(_QWORD *)(v30 + 40);
          if (*(_QWORD *)(v30 + 48) == v31)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v32 = (char **)(**(_QWORD **)(a1 + 72) + 24 * v15);
          v153 = 0uLL;
          v154 = 0;
          cv3d::cv::gess::internal::Get2DConvexHull(v32, v31, (char **)&v153);
          v33 = (unsigned int *)v153;
          if (*((_QWORD *)&v153 + 1) - (_QWORD)v153 >= 9uLL)
          {
            v34 = (float *)(v31 + 8 * *(unsigned int *)v153);
            v35 = 2;
            v36 = 1;
            do
            {
              v37 = v35;
              cv3d::cv::gess::internal::DrawTriangle(v34, (float *)(v31 + 8 * v33[v36]), (float *)(v31 + 8 * v33[v35]), (uint64_t)&v161);
              cv3d::cv::gess::internal::DrawLine(v34, (float *)(v31 + 8 * *(unsigned int *)(v153 + 4 * v36)), (uint64_t)&v161);
              cv3d::cv::gess::internal::DrawLine((float *)(v31 + 8 * *(unsigned int *)(v153 + 4 * v36)), (float *)(v31 + 8 * *(unsigned int *)(v153 + 4 * v35)), (uint64_t)&v161);
              cv3d::cv::gess::internal::DrawLine((float *)(v31 + 8 * *(unsigned int *)(v153 + 4 * v35)), v34, (uint64_t)&v161);
              v33 = (unsigned int *)v153;
              v38 = ((uint64_t)(*((_QWORD *)&v153 + 1) - v153) >> 2) - 2 >= (unint64_t)v35++;
              v36 = v37;
            }
            while (v38);
          }
          if (v33)
          {
            *((_QWORD *)&v153 + 1) = v33;
            operator delete(v33);
          }
        }
        else if (v20 == 1)
        {
          v21 = DWORD1(v161) - 1;
          if (DWORD1(v161) != 1)
          {
            v22 = 0;
            v23 = 0;
            v24 = HIDWORD(v161);
            v25 = (DWORD2(v161) - 1);
            v26 = v162;
            v27 = DWORD1(v161) * HIDWORD(v161);
            do
            {
              v28 = v22;
              v29 = v25;
              if ((_DWORD)v25)
              {
                do
                {
                  v26[v28] = 1;
                  v28 += v27;
                  --v29;
                }
                while (v29);
              }
              ++v23;
              v22 += v24;
            }
            while (v23 != v21);
          }
        }
      }
      else
      {
        v39 = *(unsigned int *)(v18 + 4 * v15);
        v40 = *v19;
        if (v39 < v40)
        {
          v41 = 12 * v39;
          while (1)
          {
            v42 = *(_QWORD *)(a1 + 56);
            v43 = *(_QWORD *)(v42 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v42 + 48) - v43) >> 2) <= v39)
              break;
            v44 = *(unsigned int *)(v43 + v41);
            v45 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
            v46 = (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 48) - v45) >> 3;
            if (v46 <= v44)
              goto LABEL_107;
            v47 = v43 + v41;
            v48 = *(unsigned int *)(v43 + v41 + 4);
            if (v46 <= v48)
              goto LABEL_107;
            v49 = *(unsigned int *)(v47 + 8);
            if (v46 <= v49)
              goto LABEL_107;
            cv3d::cv::gess::internal::DrawTriangle((float *)(v45 + 8 * v44), (float *)(v45 + 8 * v48), (float *)(v45 + 8 * v49), (uint64_t)&v161);
            v50 = *(unsigned int *)(v43 + v41);
            v51 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
            v52 = (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 48) - v51) >> 3;
            if (v52 <= v50)
              goto LABEL_107;
            v53 = *(unsigned int *)(v47 + 4);
            if (v52 <= v53)
              goto LABEL_107;
            cv3d::cv::gess::internal::DrawLine((float *)(v51 + 8 * v50), (float *)(v51 + 8 * v53), (uint64_t)&v161);
            v54 = *(unsigned int *)(v47 + 4);
            v55 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
            v56 = (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 48) - v55) >> 3;
            if (v56 <= v54
              || (v57 = *(unsigned int *)(v47 + 8), v56 <= v57)
              || (cv3d::cv::gess::internal::DrawLine((float *)(v55 + 8 * v54), (float *)(v55 + 8 * v57), (uint64_t)&v161),
                  v58 = *(unsigned int *)(v47 + 8),
                  v59 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40),
                  v60 = (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 48) - v59) >> 3,
                  v60 <= v58)
              || (v61 = *(unsigned int *)(v43 + v41), v60 <= v61))
            {
LABEL_107:
              v145 = 182;
              goto LABEL_108;
            }
            cv3d::cv::gess::internal::DrawLine((float *)(v59 + 8 * v58), (float *)(v59 + 8 * v61), (uint64_t)&v161);
            ++v39;
            v41 += 12;
            if (v40 == v39)
              goto LABEL_39;
          }
          v145 = 187;
LABEL_108:
          __assert_rtn("operator[]", "Attribute.h", v145, "index < data_.size()");
        }
      }
LABEL_39:
      *(_QWORD *)((char *)&v159 + 4) = *(_QWORD *)((char *)&v161 + 4);
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v159);
      *(int32x2_t *)((char *)&v155 + 4) = vrev64_s32(*(int32x2_t *)((char *)&v161 + 4));
      cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory((uint64_t)&v155);
      v62 = DWORD1(v161);
      v63 = v162;
      if (DWORD1(v161))
      {
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v68 = DWORD2(v161);
        v69 = HIDWORD(v161);
        v70 = v160;
        v71 = HIDWORD(v159);
        v72 = v158;
        v73 = HIDWORD(v157);
        v74 = DWORD1(v157) * HIDWORD(v157);
        v75 = DWORD1(v159) * HIDWORD(v159);
        v76 = DWORD1(v161) * HIDWORD(v161);
        do
        {
          v77 = v64;
          v78 = v65;
          v79 = v66;
          v80 = v68;
          if ((_DWORD)v68)
          {
            do
            {
              *(_BYTE *)(v70 + v78) = v63[v77];
              *(_BYTE *)(v72 + v79) = v63[v77];
              v79 += v73;
              v78 += v75;
              v77 += v76;
              --v80;
            }
            while (v80);
          }
          ++v67;
          v66 += v74;
          v65 += v71;
          v64 += v69;
        }
        while (v67 != v62);
      }
      cv3d::cv::gess::util::ImageT<BOOL>::Dilate((uint64_t)&v159, v63, (int)**(double **)(a1 + 32));
      v81 = DWORD1(v161);
      if (DWORD1(v161))
      {
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = DWORD2(v161);
        v86 = v160;
        v87 = HIDWORD(v159);
        v88 = v156;
        v89 = HIDWORD(v155);
        v90 = DWORD1(v155) * HIDWORD(v155);
        v91 = DWORD1(v159) * HIDWORD(v159);
        do
        {
          v92 = v82;
          v93 = v83;
          v94 = v85;
          if ((_DWORD)v85)
          {
            do
            {
              *(_BYTE *)(v88 + v93) = *(_BYTE *)(v86 + v92);
              v93 += v89;
              v92 += v91;
              --v94;
            }
            while (v94);
          }
          ++v84;
          v83 += v90;
          v82 += v87;
        }
        while (v84 != v81);
      }
      v151 = 0;
      v152 = 0;
      v150 = 0;
      v153 = xmmword_23C60C5F0;
      v95 = v10;
      if ((cv3d::cv::gess::internal::FindChartLocationRandom(v163, (uint64_t)&v159, (uint64_t)&v155, v10, v10, (signed int *)&v152 + 1, (int *)&v152, (_DWORD *)&v151 + 1, &v151, &v150, v11, (cv3d::cv::gess::internal::KISSRng *)&v153) & 1) == 0)
      {
        do
        {
          if (DWORD1(v161) <= DWORD2(v161))
            v96 = DWORD2(v161);
          else
            v96 = DWORD1(v161);
          if (v10 <= v95)
            v97 = v95;
          else
            v97 = v10;
          v98 = v97 + v96 + 1;
          if (v98 >= v11)
          {
            if (v98 <= (float)((float)v11 * 1.1))
              v11 = (float)((float)v11 * 1.1);
            else
              v11 = v98;
            cv3d::cv::gess::internal::ResizeImage(&v163, v11);
          }
          v10 += v96;
          v95 += v96;
        }
        while (!cv3d::cv::gess::internal::FindChartLocationRandom(v163, (uint64_t)&v159, (uint64_t)&v155, v10, v95, (signed int *)&v152 + 1, (int *)&v152, (_DWORD *)&v151 + 1, &v151, &v150, v11, (cv3d::cv::gess::internal::KISSRng *)&v153));
      }
      v100 = v152;
      v99 = HIDWORD(v152);
      v101 = HIDWORD(v151) + HIDWORD(v152);
      if (v10 > HIDWORD(v151) + HIDWORD(v152))
        v101 = v10;
      v102 = v151 + v152;
      if (v95 > (int)v151 + (int)v152)
        v102 = v95;
      if (v101 <= v102)
        v10 = v102;
      else
        v10 = v101;
      v103 = v150;
      cv3d::cv::gess::internal::AddChart(v163, (uint64_t)&v159, (uint64_t)&v155, v10, v10, SHIDWORD(v152), v152, v150);
      v104 = *(_QWORD *)(**(_QWORD **)(a1 + 72) + 24 * *v149);
      v105 = *(_QWORD *)(**(_QWORD **)(a1 + 72) + 24 * *v149 + 8) - v104;
      if (v105)
      {
        v106 = 0;
        v107 = v105 >> 2;
        v108 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 40);
        v109 = (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 48) - v108) >> 3;
        v110.i64[0] = v99;
        v110.i64[1] = v100;
        v7 = (__n128)vcvtq_f64_s64(v110);
        v111 = *(const double **)(a1 + 32);
        v112 = vdup_n_s32(v103 == 0);
        v113 = 1;
        do
        {
          v114 = *(unsigned int *)(v104 + 4 * v106);
          if (v109 <= v114)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v115 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v108 + 8 * v114));
          v116.i64[0] = v112.u32[0];
          v116.i64[1] = v112.u32[1];
          v117 = vld1q_dup_f64(v111);
          *(float32x2_t *)(v108 + 8 * v114) = vcvt_f32_f64(vsubq_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v116, 0x3FuLL)), v115, vextq_s8(v115, v115, 8uLL)), (float64x2_t)v7), v117));
          v106 = v113;
        }
        while (v107 > v113++);
      }
      if (v156)
        MEMORY[0x2426211A0](v156, 0x1000C8077774924);
      if (v158)
        MEMORY[0x2426211A0](v158, 0x1000C8077774924);
      if (v160)
        MEMORY[0x2426211A0](v160, 0x1000C8077774924);
      if (v162)
        MEMORY[0x2426211A0](v162, 0x1000C8077774924);
      v9 = v149 + 1;
      if (v149 + 1 == v148)
      {
        v119 = *v147;
        v9 = *v146;
        v120 = (float)v10;
        goto LABEL_84;
      }
    }
  }
  v120 = 0.0;
  v119 = *(unsigned int **)v8;
LABEL_84:
  v121 = fabsf(v120);
  v7.n128_f32[0] = 1.0 / v120;
  if (v121 <= 0.00000001)
    v7.n128_f32[0] = 1.0;
  if (v119 != v9)
  {
    v122 = *(_QWORD *)(a1 + 64);
    v123 = **(_QWORD **)(a1 + 72);
    v124 = *(_QWORD **)(a1 + 40);
    v125 = *(_QWORD *)(a1 + 80);
    do
    {
      v126 = *v119;
      v127 = (unsigned int **)(v123 + 24 * v126);
      v128 = *v127;
      v129 = v127[1];
      if (v128 != v129)
      {
        v130 = *(_QWORD *)(v122 + 40);
        v131 = (*(_QWORD *)(v122 + 48) - v130) >> 3;
        do
        {
          v132 = *v128;
          if (v131 <= v132)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v130 + 8 * v132) = vmul_n_f32(*(float32x2_t *)(v130 + 8 * v132), v7.n128_f32[0]);
          ++v128;
        }
        while (v128 != v129);
      }
      v133 = *(unsigned int *)(*v124 + 4 * v126);
      v134 = (v126 + 1);
      if (v134 == (uint64_t)(v124[1] - *v124) >> 2)
        v135 = *(unsigned int **)(a1 + 48);
      else
        v135 = (unsigned int *)(*v124 + 4 * v134);
      v136 = *v135;
      if (v133 < v136)
      {
        v137 = *(_QWORD *)(v125 + 40);
        v138 = (*(_QWORD *)(v125 + 48) - v137) >> 1;
        v139 = v136 - v133;
        v140 = (_WORD *)(v137 + 2 * v133);
        v38 = v138 >= v133;
        v141 = v138 - v133;
        if (!v38)
          v141 = 0;
        do
        {
          if (!v141)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *v140++ = v3;
          --v141;
          --v139;
        }
        while (v139);
      }
      ++v119;
    }
    while (v119 != v9);
  }
  v142 = v164;
  if (v164)
  {
    p_shared_owners = (unint64_t *)&v164->__shared_owners_;
    do
      v144 = __ldaxr(p_shared_owners);
    while (__stlxr(v144 - 1, p_shared_owners));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v142->__on_zero_shared)(v142, v7);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
}

void sub_23C58B950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  v34 = *(std::__shared_weak_count **)(v32 + 32);
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::ImageT<BOOL>::Dilate(uint64_t a1, const void *a2, int a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  int v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  char *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  unint64_t v52;
  uint64_t v53;
  int v54;
  char *v55;
  void *v56;
  uint64_t *__p;
  uint64_t *v58;
  uint64_t *v59;
  void *v60;
  char *v61;
  char *v62;

  v54 = *(_DWORD *)(a1 + 4);
  v5 = (void *)operator new[]();
  v6 = a1;
  v7 = *(unsigned int *)(a1 + 4);
  v8 = *(unsigned int *)(a1 + 8);
  v9 = (v8 * v7);
  v56 = v5;
  v53 = a1;
  if ((_DWORD)v9)
  {
    memcpy(v5, a2, v9);
    v6 = a1;
    v5 = v56;
  }
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v10 = v54;
  if ((int)v8 >= 1)
  {
    v11 = 0;
    for (i = 0; i != v8; ++i)
    {
      if ((int)v7 >= 1)
      {
        v13 = 0;
        v14 = v10 * i;
        v15 = i << 32;
        do
        {
          if (*((_BYTE *)v5 + (v14 + v13)))
          {
            v16 = 0;
            while (1)
            {
              v17 = dword_23C60C5B0[v16] + v13;
              if (v17 >= 0 && v17 < (int)v7)
              {
                v18 = dword_23C60C5D0[v16] + i;
                if ((v18 & 0x80000000) == 0 && v18 < (int)v8 && !*((_BYTE *)v5 + (v17 + v18 * v10)))
                  break;
              }
              if (++v16 == 8)
                goto LABEL_34;
            }
            if (v11 >= v62)
            {
              v19 = (v11 - (_BYTE *)v60) >> 3;
              if ((unint64_t)(v19 + 1) >> 61)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v20 = (v62 - (_BYTE *)v60) >> 2;
              if (v20 <= v19 + 1)
                v20 = v19 + 1;
              if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
                v21 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v21 = v20;
              if (v21)
                v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v21);
              else
                v22 = 0;
              v23 = &v22[8 * v19];
              *(_QWORD *)v23 = v15 | v13;
              v11 = v23 + 8;
              v25 = (char *)v60;
              v24 = v61;
              if (v61 != v60)
              {
                do
                {
                  v26 = *((_QWORD *)v24 - 1);
                  v24 -= 8;
                  *((_QWORD *)v23 - 1) = v26;
                  v23 -= 8;
                }
                while (v24 != v25);
                v24 = (char *)v60;
              }
              v60 = v23;
              v61 = v11;
              v62 = &v22[8 * v21];
              if (v24)
                operator delete(v24);
              v5 = v56;
              v6 = v53;
              v10 = v54;
            }
            else
            {
              *(_QWORD *)v11 = v15 | v13;
              v11 += 8;
            }
            v61 = v11;
          }
LABEL_34:
          ++v13;
        }
        while (v13 != v7);
      }
    }
  }
  __p = 0;
  v59 = 0;
  while (1)
  {
    v27 = (char *)v60;
    if (v60 == v61)
      break;
    if ((a3 & 0x80000000) == 0)
    {
      if (!a3)
        break;
      --a3;
    }
    v28 = 0;
    v29 = __p;
    v58 = __p;
    v30 = (v61 - (_BYTE *)v60) >> 3;
    if (v30 <= 1)
      v30 = 1;
    v52 = v30;
    do
    {
      v31 = 0;
      v32 = (char *)v60 + 8 * v28;
      v55 = (char *)(*(_QWORD *)(v6 + 16) + ((*v32 + *(_DWORD *)(v6 + 4) * v32[1]) * *(_DWORD *)(v6 + 12)));
      v33 = v56;
      do
      {
        v34 = dword_23C60C5B0[v31];
        v35 = (v34 + *v32);
        if (v34 + *v32 >= 0 && (int)v35 < (int)v7)
        {
          v36 = (dword_23C60C5D0[v31] + v32[1]);
          if ((v36 & 0x80000000) == 0 && (int)v36 < (int)v8)
          {
            v37 = (v35 + v36 * v10);
            if (!v33[v37])
            {
              v33[v37] = 1;
              v38 = *(unsigned int *)(v6 + 12);
              if ((_DWORD)v38)
              {
                v39 = (_BYTE *)(*(_QWORD *)(v6 + 16) + ((v35 + *(_DWORD *)(v6 + 4) * v36) * v38));
                v40 = v55;
                do
                {
                  v41 = *v40++;
                  *v39++ = v41;
                  --v38;
                }
                while (v38);
              }
              if (v29 >= v59)
              {
                v42 = v29 - __p;
                if ((unint64_t)(v42 + 1) >> 61)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v43 = ((char *)v59 - (char *)__p) >> 2;
                if (v43 <= v42 + 1)
                  v43 = v42 + 1;
                if ((unint64_t)((char *)v59 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v44 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v44 = v43;
                if (v44)
                  v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v59, v44);
                else
                  v45 = 0;
                v46 = (uint64_t *)&v45[8 * v42];
                *v46 = v35 | (v36 << 32);
                v29 = v46 + 1;
                v47 = v58;
                if (v58 != __p)
                {
                  do
                  {
                    v48 = *--v47;
                    *--v46 = v48;
                  }
                  while (v47 != __p);
                  v47 = __p;
                }
                __p = v46;
                v59 = (uint64_t *)&v45[8 * v44];
                if (v47)
                  operator delete(v47);
                v33 = v56;
                v6 = v53;
                v10 = v54;
              }
              else
              {
                *v29++ = v35 | (v36 << 32);
                v33 = v56;
              }
              v58 = v29;
            }
          }
        }
        ++v31;
      }
      while (v31 != 8);
      ++v28;
    }
    while (v28 != v52);
    std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(&v60, __p, v29, v29 - __p);
    v10 = v54;
    v6 = v53;
  }
  if (__p)
  {
    operator delete(__p);
    v27 = (char *)v60;
  }
  v49 = v56;
  if (v27)
  {
    v61 = v27;
    operator delete(v27);
    v49 = v56;
  }
  MEMORY[0x2426211A0](v49, 0x1000C8077774924);
  return 1;
}

void sub_23C58BEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v22;

  v22 = a16;
  if (__p)
  {
    operator delete(__p);
    v22 = a16;
  }
  MEMORY[0x2426211A0](v22, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_QWORD *)v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_QWORD *)v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void cv3d::cv::gess::isochart::CalculateStretchThreshold(uint64_t **this, const cv3d::cv::gess::mesh::TriMesh *a2, float *a3, float *a4, float *a5)
{
  unsigned int v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  void *__p[2];
  char v16;
  int v17;

  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  v17 = 0;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>(this + 7, (uint64_t)&v17, (unsigned __int8 *)__p);
  if (v16 < 0)
    operator delete(__p[0]);
  if (v9 == -1 || this[20] == this[19])
  {
    v14 = *a3;
  }
  else
  {
    v10 = 0;
    v11 = 0.0;
    do
    {
      v11 = v11 + *(float *)cv3d::cv::gess::mesh::MeshProperty::attribute<float>((uint64_t)this, v9, v10++);
      v12 = (char *)this[20] - (char *)this[19];
    }
    while (v10 < v12 >> 2);
    v13 = *(float *)a2 * 100.0 * v11 / (float)(unint64_t)(v12 >> 2);
    *a4 = v13;
    v14 = *a3 * 0.333 + v13 * 0.667;
  }
  *a4 = v14;
}

void sub_23C58C1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<float>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;

  v7 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 56), &v7);
  v5 = *(_QWORD *)(v4 + 40);
  if (a3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v5) >> 2))
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  return v5 + 4 * a3;
}

void cv3d::cv::gess::isochart::IsoChart::InitialParameterize(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  cv3d::cv::gess::mesh::TriMesh *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  float *v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float *v17;
  int64x2_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  _BYTE v30[8];
  _QWORD v31[45];

  v31[44] = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v30, *(cv3d::cv::gess::mesh::TriMesh **)(a1 + 80), (const float *)(a1 + 96), (const float *)(a1 + 112), *(_BYTE *)(a1 + 152));
  if (*(_QWORD *)(a1 + 40))
    std::function<BOOL ()(void)>::operator=(v31, a1 + 16);
  if (cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization((cv3d::cv::gess::isochart::IsoChartMesh *)v30))
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (!v7 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) & 1) == 0)
    {
      v8 = 0;
      *(_WORD *)((char *)&v17 + 1) = 257;
      v18 = vdupq_n_s64(0xAuLL);
      v19 = 20;
      v20 = xmmword_23C60C620;
      v21 = 0x7F7FFFFFFF7FFFFFLL;
      v22 = -1;
      memset(v23, 0, sizeof(v23));
      v24 = 0;
      memset(v25, 0, sizeof(v25));
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v16 = 0;
      v29 = 0;
      v15 = 0.0;
      LOBYTE(v17) = *(_BYTE *)(a1 + 152);
      if (!*(_BYTE *)(a1 + 120))
        v8 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch((cv3d::cv::gess::isochart::IsoChartMesh *)v30, &v17, (float *)&v16 + 1, (float *)&v16, &v29, &v15, 1);
      v9 = *(_QWORD *)(a1 + 40);
      if (!v9 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) == 0)
      {
        if (v8)
        {
          v10 = (float *)*((_QWORD *)&v27 + 1);
          if ((_QWORD)v28 != *((_QWORD *)&v27 + 1))
          {
            v11 = 0;
            v12 = (uint64_t)(v28 - *((_QWORD *)&v27 + 1)) >> 2;
            if (v12 <= 1)
              v12 = 1;
            do
            {
              v13 = *v10;
              if (*v10 < 3.4028e38)
              {
                if (*(float *)a1 < v13)
                {
                  *(float *)a1 = v13;
                  v13 = *v10;
                }
                *(float *)(a1 + 4) = v13 + *(float *)(a1 + 4);
                ++v11;
              }
              ++v10;
              --v12;
            }
            while (v12);
            if (v11)
              *(float *)(a1 + 4) = *(float *)(a1 + 4) / (float)v11;
          }
          cv3d::cv::gess::isochart::AssignUvidByVid(*(uint64_t ***)(a1 + 80), v6);
        }
        else
        {
          if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
            __assert_rtn("InitialParameterize", "IsoChart.cpp", 74, "children_mesh.size() == 0");
          cv3d::cv::gess::isochart::IsoChartMesh::Partition((uint64_t)v30, (char **)a2, a3, (_DWORD *)(a1 + 116), *(unsigned __int8 *)(a1 + 152));
          v14 = *(_QWORD *)(a1 + 40);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        }
      }
      if (*((_QWORD *)&v27 + 1))
      {
        *(_QWORD *)&v28 = *((_QWORD *)&v27 + 1);
        operator delete(*((void **)&v27 + 1));
      }
      if ((_QWORD)v26)
      {
        *((_QWORD *)&v26 + 1) = v26;
        operator delete((void *)v26);
      }
      v29 = (unint64_t)v25 + 8;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v23);
    }
  }
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v30);
}

void sub_23C58C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)&a11);
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)&a35);
  _Unwind_Resume(a1);
}

_QWORD *std::function<BOOL ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo(cv3d::cv::gess::isochart::ChartOptimizeInfo *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 112);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v4);
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)this + 72);
}

void cv3d::cv::gess::isochart::IsoChart::RecursivelyParameterize(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t **v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  uint64_t **v21[2];
  void *__p[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  memset(__p, 0, sizeof(__p));
  v5 = *(uint64_t ***)(a2 + 8);
  v21[0] = *(uint64_t ***)a2;
  v21[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = cv3d::cv::gess::isochart::IsoChart::DoParameterize(a1, v21, a3, (uint64_t)&v23, (uint64_t)__p);
  if (v5)
  {
    v9 = (unint64_t *)(v5 + 1);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(uint64_t **))(*v5)[2])(v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
  }
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) == 0)
  {
    if ((v8 & 1) != 0)
    {
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)(a1 + 184), (__int128 *)a2);
    }
    else
    {
      v12 = v23;
      if (v24 != v23)
      {
        v13 = 0;
        do
        {
          v14 = *(_OWORD *)(v12 + 16 * v13);
          v20 = v14;
          if (*((_QWORD *)&v14 + 1))
          {
            v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          cv3d::cv::gess::isochart::IsoChart::RecursivelyParameterize(a1, &v20, (*(_QWORD *)((char *)__p[0] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1);
          v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
          if (*((_QWORD *)&v20 + 1))
          {
            v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          ++v13;
          v12 = v23;
        }
        while (v13 < (v24 - v23) >> 4);
      }
    }
  }
  if (__p[0])
    operator delete(__p[0]);
  __p[0] = &v23;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_23C58C77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char *__p, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  __p = &a16;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChart::DoParameterize(uint64_t a1, uint64_t ***a2, char a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v19;
  uint64_t v20;
  BOOL v21[16];
  int64x2_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  char v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float v33;
  unint64_t v34;
  _BYTE v35[8];
  _QWORD v36[45];

  v36[44] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
    cv3d::cv::gess::isochart::IsoChart::DoParameterize();
  if (*(_QWORD *)(a5 + 8))
    cv3d::cv::gess::isochart::IsoChart::DoParameterize();
  v33 = 0.0;
  cv3d::cv::gess::isochart::CalculateStretchThreshold(*a2, *(const cv3d::cv::gess::mesh::TriMesh **)(a1 + 104), (float *)(a1 + 112), &v33, (float *)a5);
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v35, (cv3d::cv::gess::mesh::TriMesh *)*a2, (const float *)(a1 + 96), &v33, *(_BYTE *)(a1 + 152));
  if (*(_QWORD *)(a1 + 40))
    std::function<BOOL ()(void)>::operator=(v36, a1 + 16);
  v10 = cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization((cv3d::cv::gess::isochart::IsoChartMesh *)v35);
  v11 = *(_QWORD *)(a1 + 40);
  if (v11 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) != 0)
    goto LABEL_22;
  if (!v10)
    goto LABEL_19;
  *(_WORD *)&v21[1] = 257;
  v22 = vdupq_n_s64(0xAuLL);
  v23 = 20;
  v24 = xmmword_23C60C620;
  v25 = 0x7F7FFFFFFF7FFFFFLL;
  v26 = -1;
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v20 = 0;
  v34 = 0;
  v19 = 0.0;
  v21[0] = *(_BYTE *)(a1 + 152);
  if ((a3 & 1) != 0)
  {
    v12 = 1;
    v13 = 1;
  }
  else
  {
    v14 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch((cv3d::cv::gess::isochart::IsoChartMesh *)v35, (float **)v21, (float *)&v20 + 1, (float *)&v20, &v34, &v19, 0);
    v15 = *(_QWORD *)(a1 + 40);
    if (v15 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) != 0)
    {
      v12 = 0;
      v13 = 0;
    }
    else
    {
      v13 = !v14;
      v12 = 1;
    }
  }
  if (*((_QWORD *)&v31 + 1))
  {
    *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  if ((_QWORD)v30)
  {
    *((_QWORD *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  v34 = (unint64_t)v29 + 8;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v27);
  if (v13)
  {
LABEL_19:
    cv3d::cv::gess::isochart::IsoChartMesh::Partition((uint64_t)v35, (char **)a4, (_QWORD *)a5, (_DWORD *)(a1 + 116), *(unsigned __int8 *)(a1 + 152));
    v17 = *(_QWORD *)(a1 + 40);
    if (v17 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17) & 1) != 0
      || *(_QWORD *)(a4 + 8) - *(_QWORD *)a4 > 0x10uLL)
    {
LABEL_22:
      v12 = 0;
      goto LABEL_26;
    }
    if (v36[22] <= 2uLL)
    {
      v21[0] = 0;
      cv3d::cv::gess::isochart::IsoChartMesh::ProcessPlaneLikeShape((uint64_t)v35, v21, v16);
    }
    v12 = 1;
  }
LABEL_26:
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v35);
  return v12;
}

void sub_23C58CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)&a37);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChart::Run(cv3d::cv::gess::isochart::IsoChart *this)
{
  std::chrono::system_clock::time_point v2;
  std::chrono::system_clock::time_point v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  cv3d::cv::gess::mesh::TriMesh *v7;
  cv3d::cv::gess::isochart **v8;
  char *v9;
  unint64_t v10;
  char *v11;
  cv3d::cv::gess::mesh::TriMesh *v12;
  std::chrono::system_clock::time_point v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  std::thread *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  std::thread *v24;
  std::thread *v25;
  std::thread *v26;
  _opaque_pthread_t *t;
  int64x2_t v28;
  char *v29;
  std::thread *i;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  unint64_t v46;
  char *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  std::chrono::system_clock::time_point v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  cv3d::cv::gess::mesh::TriMesh *v65;
  uint64_t ***v66;
  unint64_t v67;
  float v68;
  float v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  void *v84;
  float v85;
  uint64_t ***v86;
  uint64_t v87;
  uint64_t ***v88;
  uint64_t ***v89;
  cv3d::cv::gess::mesh::TriMesh *v90;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  cv3d::cv::gess::mesh::TriMesh *v92;
  uint64_t v93;
  _BOOL4 v94;
  uint64_t v95;
  _BOOL4 v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::chrono::system_clock::time_point v102;
  uint64_t **v103;
  _DWORD *v104;
  uint64_t v105;
  std::chrono::system_clock::time_point v106;
  uint64_t v107;
  __int128 v108;
  unint64_t v109;
  __int128 v110;
  void **v111;
  qos_class_t *v112;
  qos_class_t v113;
  void *__p[3];
  std::thread *v115[2];
  unint64_t v116;
  void *v117[3];
  char *v118;
  char *v119;
  uint64_t v120;
  void *v121;
  int64x2_t v122;
  char *v123;
  unint64_t *v124;
  void *v125[2];
  __int128 v126;
  __int128 v127;
  _BYTE v128[24];
  _BYTE *v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v3.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v4 = *((_QWORD *)this + 5);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4) & 1) != 0)
    return;
  cv3d::cv::gess::isochart::IsoChart::PrepareData((cv3d::cv::gess::isochart **)this, (cv3d::cv::gess::mesh::TriMesh *)v2.__d_.__rep_);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) != 0)
      return;
  }
  v118 = 0;
  v119 = 0;
  v120 = 0;
  cv3d::cv::gess::isochart::TrySplitMeshByComponents(*((_QWORD *)this + 10), &v118);
  v6 = *((_QWORD *)this + 5);
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) != 0)
    goto LABEL_142;
  LOBYTE(v125[0]) = 0;
  std::vector<BOOL>::vector(v117, (v119 - v118) >> 4, (unsigned __int8 *)v125);
  v8 = (cv3d::cv::gess::isochart **)v118;
  v9 = v119;
  if (v118 == v119)
  {
    cv3d::cv::gess::isochart::IsoChart::InitialParameterize((uint64_t)this, (uint64_t)&v118, v117);
    v31 = *((_QWORD *)this + 5);
    if (v31 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31) & 1) != 0)
      goto LABEL_140;
  }
  else
  {
    do
    {
      cv3d::cv::gess::isochart::CalculateVertexImportance(*v8, v7);
      v8 += 2;
    }
    while (v8 != (cv3d::cv::gess::isochart **)v9);
  }
  if (v119 != v118)
  {
    LODWORD(v10) = 0;
    do
    {
      cv3d::cv::gess::isochart::IsoChartMesh::ProcessSingleBoundaryLoopAndComponent(&v118, v10, 1, *((float *)this + 24), 0.0005);
      v10 = (v10 + 1);
    }
    while (v10 < (v119 - v118) >> 4);
  }
  v11 = (char *)this + 16;
  *(double *)(*((_QWORD *)this + 26) + 8) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v3.__d_.__rep_)
                                            / 1000000.0;
  if (v118 == v119)
  {
    cv3d::cv::gess::isochart::InitRootMeshGroup(*((cv3d::cv::gess::isochart **)this + 10), v12);
    goto LABEL_120;
  }
  v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*((_BYTE *)this + 233))
  {
    v126 = 0u;
    v127 = 0u;
    *(_OWORD *)v125 = 0u;
    v115[0] = 0;
    v115[1] = 0;
    v116 = 0;
    v14 = std::thread::hardware_concurrency();
    if (v14 <= 2)
      v15 = 2;
    else
      v15 = v14;
    LOBYTE(v121) = 0;
    std::vector<BOOL>::vector(__p, v15, (unsigned __int8 *)&v121);
    v113 = qos_class_self();
    *(_QWORD *)&v110 = this;
    *((_QWORD *)&v110 + 1) = v125;
    v111 = __p;
    v112 = &v113;
    std::mutex::lock((std::mutex *)((char *)this + 240));
    v16 = v118;
    if (v119 != v118)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v121 = (char *)v117[0] + 8 * (v18 >> 6);
        v122.i64[0] = 1 << v18;
        std::deque<cv3d::cv::gess::isochart::ParamTask>::emplace_back<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>>(v125, (uint64_t *)&v16[v17], (uint64_t)&v121);
        ++v18;
        v16 = v118;
        v17 += 16;
      }
      while (v18 < (v119 - v118) >> 4);
    }
    std::mutex::unlock((std::mutex *)((char *)this + 240));
    v109 = 0;
    v19 = v115[1];
    do
    {
      if ((unint64_t)v19 >= v116)
      {
        v20 = v19 - v115[0];
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v21 = (uint64_t)(v116 - (unint64_t)v115[0]) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if (v116 - (unint64_t)v115[0] >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        v124 = &v116;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v116, v22);
        else
          v23 = 0;
        v121 = v23;
        v122.i64[0] = (uint64_t)&v23[8 * v20];
        v122.i64[1] = v122.i64[0];
        v123 = &v23[8 * v22];
        std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0 const&,unsigned long &,void,void>((pthread_t *)v122.i64[0], &v110, &v109);
        v24 = (std::thread *)v122.i64[0];
        v19 = (std::thread *)(v122.i64[1] + 8);
        v122.i64[1] += 8;
        v26 = v115[0];
        v25 = v115[1];
        if (v115[1] == v115[0])
        {
          v28 = vdupq_n_s64((unint64_t)v115[1]);
        }
        else
        {
          do
          {
            t = v25[-1].__t_;
            --v25;
            v24[-1].__t_ = t;
            --v24;
            v25->__t_ = 0;
          }
          while (v25 != v26);
          v28 = *(int64x2_t *)v115;
          v19 = (std::thread *)v122.i64[1];
        }
        v115[0] = v24;
        v115[1] = v19;
        v122 = v28;
        v29 = (char *)v116;
        v116 = (unint64_t)v123;
        v123 = v29;
        v121 = (void *)v28.i64[0];
        std::__split_buffer<std::thread>::~__split_buffer((uint64_t)&v121);
      }
      else
      {
        std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0 const&,unsigned long &,void,void>(&v19->__t_, &v110, &v109);
        ++v19;
      }
      v115[1] = v19;
      ++v109;
    }
    while (v109 < v15);
    for (i = v115[0]; i != v19; ++i)
      std::thread::join(i);
    if (__p[0])
      operator delete(__p[0]);
    v121 = v115;
    std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    std::deque<cv3d::cv::gess::isochart::ParamTask>::~deque[abi:ne180100](v125);
  }
  else
  {
    v48 = v118;
    if (v119 != v118)
    {
      v49 = 0;
      do
      {
        v50 = *(_OWORD *)&v48[16 * v49];
        v108 = v50;
        if (*((_QWORD *)&v50 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        cv3d::cv::gess::isochart::IsoChart::RecursivelyParameterize((uint64_t)this, (uint64_t)&v108, (*(_QWORD *)((char *)v117[0] + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v49) & 1);
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
        if (*((_QWORD *)&v108 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v56 = *((_QWORD *)this + 5);
        if (v56 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 48))(v56) & 1) != 0)
          goto LABEL_140;
        ++v49;
        v48 = v118;
      }
      while (v49 < (v119 - v118) >> 4);
    }
  }
  *(double *)(*((_QWORD *)this + 26) + 16) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v13.__d_.__rep_)
                                             / 1000000.0;
  v32 = *((_QWORD *)this + 5);
  if (v32 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32) & 1) != 0)
    goto LABEL_140;
  v125[1] = 0;
  *(_QWORD *)&v126 = 0;
  v125[0] = &v125[1];
  v33 = (unint64_t *)*((_QWORD *)this + 23);
  v34 = (unint64_t *)*((_QWORD *)this + 24);
  v35 = (_QWORD *)((char *)this + 184);
  if (v34 == v33)
  {
    v46 = ((char *)v34 - (char *)v33) >> 4;
    v33 = (unint64_t *)*((_QWORD *)this + 24);
  }
  else
  {
    v36 = 0;
    v37 = 1;
    do
    {
      v38 = 16 * v36;
      v39 = v33[2 * v36];
      std::string::basic_string[abi:ne180100]<0>(&v121, "f:index_in_root");
      LODWORD(v110) = -1;
      v41 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v39 + 56), (uint64_t)&v110, (unsigned __int8 *)&v121);
      if (v122.i8[15] < 0)
        operator delete(v121);
      v42 = *(_QWORD *)(*v35 + v38);
      LODWORD(v121) = v41;
      v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v42 + 56), (unsigned int *)&v121, v40);
      v44 = *(int **)(v43 + 40);
      if (*(int **)(v43 + 48) == v44)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v45 = *v44;
      *(_QWORD *)&v110 = *(_QWORD *)(*v35 + v38);
      v121 = &v110;
      *((_DWORD *)std::__tree<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::__map_value_compare<cv3d::cv::gess::mesh::TriMesh *,std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::less<cv3d::cv::gess::mesh::TriMesh *>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::TriMesh *,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::TriMesh *&&>,std::tuple<>>((uint64_t **)v125, (unint64_t *)&v110, (uint64_t)&std::piecewise_construct, (_QWORD **)&v121)+ 10) = v45;
      v36 = v37;
      v33 = (unint64_t *)*((_QWORD *)this + 23);
      v34 = (unint64_t *)*((_QWORD *)this + 24);
      v46 = ((char *)v34 - (char *)v33) >> 4;
    }
    while (v46 > v37++);
    v11 = (char *)this + 16;
  }
  v121 = v125;
  v57 = 126 - 2 * __clz(v46);
  if (v34 == v33)
    v58 = 0;
  else
    v58 = v57;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>(v33, v34, (uint64_t *)&v121, v58, 1);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)v125, (_QWORD *)v125[1]);
  v59.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v60 = **((_QWORD **)this + 11);
  if (v60 >= (uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 4)
    goto LABEL_83;
  v61 = *((_QWORD *)this + 10);
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v128, (uint64_t)v11);
  cv3d::cv::gess::isochart::IsoChartMesh::MergeSmallCharts((_QWORD *)this + 23, v60, v61, (const float *)this + 24, (const float *)this + 28, (uint64_t)v128, *((_BYTE *)this + 152), *((_BYTE *)this + 233));
  v62 = v129;
  if (v129 == v128)
  {
    v63 = 4;
    v62 = v128;
    goto LABEL_80;
  }
  if (v129)
  {
    v63 = 5;
LABEL_80:
    (*(void (**)(void))(*v62 + 8 * v63))();
  }
  v64 = *((_QWORD *)this + 5);
  if (v64 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 48))(v64) & 1) != 0)
    goto LABEL_140;
LABEL_83:
  *(double *)(*((_QWORD *)this + 26) + 24) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v59.__d_.__rep_)
                                             / 1000000.0;
  v126 = 0u;
  v127 = 0u;
  *(_OWORD *)v125 = 0u;
  v66 = (uint64_t ***)*((_QWORD *)this + 24);
  if (v66 == *((uint64_t ****)this + 23))
  {
    v68 = 0.0;
    v86 = (uint64_t ***)*((_QWORD *)this + 24);
    goto LABEL_107;
  }
  v67 = 0;
  v68 = 0.0;
  v66 = (uint64_t ***)*((_QWORD *)this + 23);
  v69 = 0.0;
  do
  {
    v70 = (uint64_t *)&v66[2 * v67];
    v72 = *(_QWORD *)(*v70 + 152);
    v71 = *(_QWORD *)(*v70 + 160);
    v73 = (v71 - v72) >> 2;
    std::vector<float>::vector(&v121, v73);
    v74 = *v70;
    std::string::basic_string[abi:ne180100]<0>(&v110, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v115[0] = 0;
    v76 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v74 + 80), (uint64_t)v115, (unsigned __int8 *)&v110);
    if (SHIBYTE(v111) < 0)
      operator delete((void *)v110);
    v77 = *v70;
    LODWORD(v110) = v76;
    v78 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v77 + 80), (unsigned int *)&v110, v75);
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 16))(v78);
    v80 = *v70;
    if (v79 != (uint64_t)(*(_QWORD *)(*v70 + 112) - *(_QWORD *)(*v70 + 104)) >> 2)
      __assert_rtn("Run", "IsoChart.cpp", 385, "uvs.Size() == curr_mesh->VSize()");
    LODWORD(v110) = -1;
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateAllFaceStretch(v80, v78, &v121, 0, (unsigned int *)&v110);
    if (v71 == v72)
    {
      v84 = v121;
      if (!v121)
        goto LABEL_102;
    }
    else
    {
      v81 = 0;
      if (v73 <= 1)
        v73 = 1;
      do
      {
        v82 = *v70;
        LODWORD(v110) = v81;
        v83 = cv3d::cv::gess::mesh::TriMesh::Area(v82, (unsigned int *)&v110);
        v84 = v121;
        v85 = *((float *)v121 + v81);
        if (v85 >= 3.4028e38)
        {
          v68 = v68 + v83;
        }
        else
        {
          if (*(float *)this < v85)
          {
            *(float *)this = v85;
            std::deque<float>::push_back(v125, (float *)this);
            if (*((_QWORD *)&v127 + 1) >= 6uLL)
            {
              *(_QWORD *)&v127 = v127 + 1;
              --*((_QWORD *)&v127 + 1);
              if ((unint64_t)v127 >= 0x800)
              {
                operator delete(*(void **)v125[1]);
                v125[1] = (char *)v125[1] + 8;
                *(_QWORD *)&v127 = v127 - 1024;
              }
            }
          }
          v84 = v121;
          *((float *)this + 1) = *((float *)this + 1) + (float)(*((float *)v121 + v81) * v83);
          v69 = v69 + v83;
        }
        ++v81;
      }
      while (v73 != v81);
    }
    v122.i64[0] = (uint64_t)v84;
    operator delete(v84);
LABEL_102:
    ++v67;
    v66 = (uint64_t ***)*((_QWORD *)this + 23);
    v86 = (uint64_t ***)*((_QWORD *)this + 24);
  }
  while (v67 < ((char *)v86 - (char *)v66) >> 4);
  if (v69 > 0.0)
    *((float *)this + 1) = *((float *)this + 1) / v69;
  v11 = (char *)this + 16;
LABEL_107:
  if (*((_QWORD *)&v127 + 1) >= 5uLL)
    *(_DWORD *)this = *(_DWORD *)(*(_QWORD *)((char *)v125[1] + (((unint64_t)v127 >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * (v127 & 0x3FF));
  *((float *)this + 2) = v68 / *((float *)this + 24);
  v87 = *((_QWORD *)this + 5);
  if (v87)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 48))(v87) & 1) != 0)
    {
      std::deque<int>::~deque[abi:ne180100](v125);
      goto LABEL_140;
    }
    v66 = (uint64_t ***)*((_QWORD *)this + 23);
    v86 = (uint64_t ***)*((_QWORD *)this + 24);
  }
  while (v66 != v86)
  {
    cv3d::cv::gess::isochart::AssignUvidByVid(*v66, v65);
    v66 += 2;
  }
  if (*((_BYTE *)this + 152))
  {
    v88 = (uint64_t ***)*((_QWORD *)this + 23);
    v89 = (uint64_t ***)*((_QWORD *)this + 24);
    while (v88 != v89)
    {
      cv3d::cv::gess::isochart::RescaleCharts(*v88, v65);
      v88 += 2;
    }
  }
  cv3d::cv::gess::isochart::MergeToRootMesh((uint64_t *)this + 23, *((_QWORD *)this + 10));
  cv3d::cv::gess::alg::SortFaceByGroupID32Bit(*((uint64_t ***)this + 10), v90);
  std::deque<int>::~deque[abi:ne180100](v125);
LABEL_120:
  if (*((_BYTE *)this + 121))
  {
    rep = std::chrono::system_clock::now().__d_.__rep_;
    cv3d::cv::gess::isochart::CheckAndRepairSelfIntersectionForChartedMesh(*((uint64_t ***)this + 10), v92);
    *(double *)(*((_QWORD *)this + 26) + 32) = (double)(std::chrono::system_clock::now().__d_.__rep_ - rep)
                                               / 1000000.0;
  }
  **((double **)this + 26) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v3.__d_.__rep_) / 1000000.0;
  LODWORD(v110) = -1;
  v93 = *((_QWORD *)this + 10);
  std::string::basic_string[abi:ne180100]<0>(v125, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v94 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v93, &v110, (unsigned __int8 *)v125);
  v96 = v94;
  if (SBYTE7(v126) < 0)
  {
    operator delete(v125[0]);
    if (!v96)
      goto LABEL_126;
LABEL_124:
    v97 = *((_QWORD *)this + 10);
    LODWORD(v121) = v110;
    v98 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v97 + 80), (unsigned int *)&v121, v95);
    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v98 + 16))(v98);
  }
  else
  {
    if (v94)
      goto LABEL_124;
LABEL_126:
    v99 = (uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 4;
  }
  if (v99 <= 1)
    v100 = 1;
  else
    v100 = v99;
  *(_QWORD *)(*((_QWORD *)this + 26) + 40) = v100;
  v101 = *((_QWORD *)this + 5);
  if (!v101 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 48))(v101) & 1) == 0)
  {
    v102.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (**((_DWORD **)this + 27) == 2)
    {
      v103 = (uint64_t **)*((_QWORD *)this + 10);
      v104 = (_DWORD *)*((_QWORD *)this + 16);
      LODWORD(v125[0]) = **((unsigned __int8 **)this + 17);
      cv3d::cv::gess::internal::XAtlasPacking(v103, v104, (unsigned int *)v125, *((float **)this + 18), **((_DWORD **)this + 28), *((_BYTE *)this + 232));
    }
    else
    {
      cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(v125, *((_QWORD *)this + 10), *((_QWORD *)this + 26), *((_QWORD *)this + 16), *((_QWORD *)this + 17), *((_QWORD *)this + 18), *((unsigned __int8 *)this + 233), **((unsigned int **)this + 28));
      if (*((_QWORD *)this + 5))
        std::function<BOOL ()(void)>::operator=(v125, (uint64_t)v11);
      cv3d::cv::gess::isochart::TetrisPacking::Run((cv3d::cv::gess::isochart::TetrisPacking *)v125);
      cv3d::cv::gess::isochart::TetrisPacking::~TetrisPacking((cv3d::cv::gess::isochart::TetrisPacking *)v125);
    }
    v105 = *((_QWORD *)this + 5);
    if (!v105 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 48))(v105) & 1) == 0)
    {
      v106.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v107 = *((_QWORD *)this + 26);
      *(double *)(v107 + 48) = (double)(v106.__d_.__rep_ - v102.__d_.__rep_) / 1000000.0;
      *(_QWORD *)(v107 + 56) = **((unsigned __int8 **)this + 17);
      *(float32x2_t *)(v107 + 64) = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)this), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*((float *)this + 24)* 100.0/ (float)(unint64_t)((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 10) + 160)- *(_QWORD *)(*((_QWORD *)this + 10) + 152)) >> 2)), 0)));
      *(_DWORD *)(v107 + 72) = *((_DWORD *)this + 2);
    }
  }
LABEL_140:
  if (v117[0])
    operator delete(v117[0]);
LABEL_142:
  v125[0] = &v118;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)v125);
}

void sub_23C58D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,char *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;

  v51 = *(_QWORD **)(v49 - 136);
  if (v51 == v48)
  {
    v52 = 4;
    v51 = (_QWORD *)(v49 - 160);
  }
  else
  {
    if (!v51)
      goto LABEL_6;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_6:
  if (__p)
    operator delete(__p);
  a43 = &a32;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChart::PrepareData(cv3d::cv::gess::isochart **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  cv3d::cv::gess::mesh::TriMesh *v3;
  cv3d::cv::gess::mesh::TriMesh *v4;
  cv3d::cv::gess::isochart *v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  void *__p[3];
  void *v15;
  void *v16;
  void *v17[2];
  char v18;

  cv3d::cv::gess::isochart::InitializeVIDRoot(this[10], a2);
  *((float *)this + 24) = cv3d::cv::gess::isochart::CalculateTriMeshSurfaceArea(this[10], v3);
  cv3d::cv::gess::isochart::CalculateHEdgeLength(this[10], v4);
  v5 = this[10];
  v6 = *(float *)this[13]
     * 100.0
     * *((float *)this + 24)
     / (float)(unint64_t)((uint64_t)(*((_QWORD *)v5 + 20) - *((_QWORD *)v5 + 19)) >> 2);
  *((float *)this + 28) = v6;
  if (*((_BYTE *)this + 152))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "f:imt");
    v15 = 0;
    v16 = 0;
    v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)v5 + 7, (uint64_t)&v15, (unsigned __int8 *)v17);
    if (v18 < 0)
      operator delete(v17[0]);
    if (v7 == -1)
    {
      *((_BYTE *)this + 152) = 0;
    }
    else if (*((_BYTE *)this + 152))
    {
      std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v17, (uint64_t)(*((_QWORD *)this[10] + 20) - *((_QWORD *)this[10] + 19)) >> 1);
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v15, 3uLL);
      std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(__p, 3uLL);
      v8 = (uint64_t)this[10];
      if (*(_QWORD *)(v8 + 160) != *(_QWORD *)(v8 + 152))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v13.i32[0] = v10;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v8, (unsigned int *)&v13, &v15);
          v13 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this[10], *((_DWORD *)this[10] + 44), *(_DWORD *)v15);
          v12 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this[10], *((_DWORD *)this[10] + 44), *((_DWORD *)v15 + 1));
          v11 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this[10], *((_DWORD *)this[10] + 44), *((_DWORD *)v15 + 2));
          cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(&v13, &v12, &v11, (_QWORD *)__p[0], (uint64_t)__p[0] + 8, (float *)__p[0] + 4, (int32x4_t *)((char *)v17[0] + v9), (float32x4_t *)((char *)v17[0] + v9 + 16));
          ++v10;
          v8 = (uint64_t)this[10];
          v9 += 32;
        }
        while (v10 < (uint64_t)(*(_QWORD *)(v8 + 160) - *(_QWORD *)(v8 + 152)) >> 2);
      }
      cv3d::cv::gess::isochart::CalculateHEdgeSignalLength(v8, (uint64_t *)v17, v7);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v17[0])
      {
        v17[1] = v17[0];
        operator delete(v17[0]);
      }
    }
  }
}

void sub_23C58DA7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::CutTopData((uint64_t *)a1);
  }
  v3 = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::CutTopData(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(a1, 0, &v6);
  if (v6)
    v1 = *(unsigned int *)(v6 + 4);
  else
    v1 = 0xFFFFFFFFLL;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(uint64_t *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = a1[4];
  if (v4 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v4 - 1);
    v7 = a1[4] - 1;
    a1[4] = v7;
    v8 = *a1;
    v9 = *(_QWORD *)(*a1 + 16 * v7);
    *(_QWORD *)(v9 + 8) = -1;
    if (**(float **)(v8 + 16 * a2) >= *(float *)v9)
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(a1, a2);
    else
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::downheap(a1, a2);
    v10 = *(_OWORD *)(*a1 + 16 * a1[4]);
    *(_OWORD *)a3 = v10;
    if (*((_QWORD *)&v10 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

__n128 cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  if (a2 != a3)
  {
    v3 = *a1;
    result = *(__n128 *)(*a1 + 16 * a2);
    *(_OWORD *)(*a1 + 16 * a2) = *(_OWORD *)(*a1 + 16 * a3);
    *(__n128 *)(v3 + 16 * a3) = result;
    v5 = *a1;
    *(_QWORD *)(*(_QWORD *)(*a1 + 16 * a2) + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v5 + 16 * a3) + 8) = a3;
  }
  return result;
}

void cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::downheap(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  float v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1[4];
  if (v2 > a2)
  {
    do
    {
      v4 = (2 * a2) | 1;
      v5 = *a1;
      v6 = **(float **)(*a1 + 16 * a2);
      if (v4 >= v2)
      {
        v7 = a2;
      }
      else
      {
        v7 = a2;
        if (**(float **)(v5 + 16 * v4) > v6)
        {
          v7 = (2 * a2) | 1;
          v6 = **(float **)(v5 + 16 * v4);
        }
      }
      v8 = 2 * a2 + 2;
      if (v8 < v2 && **(float **)(v5 + 16 * v8) > v6)
        v7 = 2 * a2 + 2;
      if (v7 == a2)
        break;
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, v7);
      v2 = a1[4];
      a2 = v7;
    }
    while (v7 < v2);
  }
}

void cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  if (a2)
  {
    do
    {
      v3 = a2 - 1;
      v4 = (unint64_t)(a2 - 1) >> 1;
      if (**(float **)(*a1 + 16 * a2) <= **(float **)(*a1 + 16 * v4))
        break;
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::swapnode(a1, a2, (unint64_t)(a2 - 1) >> 1);
      a2 = v4;
    }
    while (v3 > 1);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  cv3d::cv::gess::isochart::IsoChartMesh *v8;
  uint64_t v9;
  void **v10;

  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {
    *((_QWORD *)this + 40) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 36);
  if (v4)
  {
    *((_QWORD *)this + 37) = v4;
    operator delete(v4);
  }
  v10 = (void **)((char *)this + 256);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v5 = (void *)*((_QWORD *)this + 29);
  if (v5)
  {
    *((_QWORD *)this + 30) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 26);
  if (v6)
    operator delete(v6);
  cv3d::cv::gess::isochart::IsoMap::~IsoMap((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120));
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (cv3d::cv::gess::isochart::IsoChartMesh *)*((_QWORD *)this + 4);
  if (v8 == (cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 8))
  {
    v9 = 4;
    v8 = (cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 8);
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::emplace_back<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<cv3d::cv::gess::isochart::ParamTask>::__add_back_capacity(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = *(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
  }
  std::construct_at[abi:ne180100]<cv3d::cv::gess::isochart::ParamTask,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>,cv3d::cv::gess::isochart::ParamTask*>(v10, a2, a3);
  v11 = a1[4];
  v12 = a1[5] + 1;
  a1[5] = v12;
  v13 = v11 + v12;
  v14 = a1[1];
  v15 = (_QWORD *)(v14 + 8 * (v13 / 0xAA));
  v16 = *v15 + 24 * (v13 % 0xAA);
  if (a1[2] == v14)
    v16 = 0;
  if (v16 == *v15)
    v16 = *(v15 - 1) + 4080;
  return v16 - 24;
}

void std::deque<cv3d::cv::gess::isochart::ParamTask>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23C58E28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<cv3d::cv::gess::isochart::ParamTask,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>,cv3d::cv::gess::isochart::ParamTask*>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a3 + 8) & **(_QWORD **)a3;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_BYTE *)(a1 + 16) = v8 != 0;
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v8 != 0;
  }
  return a1;
}

uint64_t **std::allocator_traits<std::allocator<std::thread>>::construct[abi:ne180100]<std::thread,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0 const&,unsigned long &,void,void>(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t *v11;

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  *(_QWORD *)v7 = v6;
  v8 = a2[1];
  *(_OWORD *)(v7 + 8) = *a2;
  *(_OWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 40) = *a3;
  v11 = (uint64_t *)v7;
  v9 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>, (void *)v7);
  if (v9)
  {
    std::__throw_system_error(v9, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x23C58E444);
  }
  v11 = 0;
  return std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>::~unique_ptr[abi:ne180100](&v11);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  const void **v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void **v31;
  _QWORD v32[2];
  __int128 v33;
  void *__p[3];
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  char v39;

  v31 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v31;
  *v31 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = v31;
  v4 = (uint64_t)v31[1];
  v5 = (unint64_t)v31[5];
  pthread_set_qos_class_self_np(*(qos_class_t *)v31[4], 0);
  v6 = v5 >> 6;
  while (1)
  {
    v7 = *(_QWORD *)(v4 + 40);
    if (v7)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) & 1) != 0)
        break;
    }
    v38 = 0uLL;
    v39 = 0;
    std::mutex::lock((std::mutex *)(v4 + 240));
    v8 = v3[2];
    if (v8[5])
    {
      v9 = *(_QWORD *)(v8[1] + 8 * (v8[4] / 0xAAuLL)) + 24 * (v8[4] % 0xAAuLL);
      std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](&v38, (uint64_t *)v9);
      v39 = *(_BYTE *)(v9 + 16);
      std::deque<cv3d::cv::gess::isochart::ParamTask>::pop_front((int64x2_t *)v3[2]);
      *(_QWORD *)(*(_QWORD *)v3[3] + 8 * v6) &= ~(1 << v5);
    }
    std::mutex::unlock((std::mutex *)(v4 + 240));
    if ((_QWORD)v38)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      memset(__p, 0, sizeof(__p));
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      v33 = v38;
      if (*((_QWORD *)&v38 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = cv3d::cv::gess::isochart::IsoChart::DoParameterize(v4, (uint64_t ***)&v33, v39, (uint64_t)&v35, (uint64_t)__p);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v16 = *(_QWORD *)(v4 + 40);
      if (!v16 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16) & 1) == 0)
      {
        if (v13)
        {
          std::mutex::lock((std::mutex *)(v4 + 240));
          std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)(v4 + 184), &v38);
        }
        else
        {
          std::mutex::lock((std::mutex *)(v4 + 240));
          v22 = v35;
          if (v36 != v35)
          {
            v23 = 0;
            v24 = 0;
            do
            {
              v25 = v3[2];
              v32[0] = (char *)__p[0] + 8 * (v24 >> 6);
              v32[1] = 1 << v24;
              std::deque<cv3d::cv::gess::isochart::ParamTask>::emplace_back<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> &,std::__bit_reference<std::vector<BOOL>,true>>(v25, (uint64_t *)(v22 + v23), (uint64_t)v32);
              ++v24;
              v22 = v35;
              v23 += 16;
            }
            while (v24 < (uint64_t)(v36 - v35) >> 4);
          }
        }
        std::mutex::unlock((std::mutex *)(v4 + 240));
        if (__p[0])
          operator delete(__p[0]);
        __p[0] = &v35;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_34;
      }
      if (__p[0])
        operator delete(__p[0]);
      __p[0] = &v35;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    else
    {
      v35 = 100;
      std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000l>>(&v35);
      std::mutex::lock((std::mutex *)(v4 + 240));
      *(_QWORD *)(*(_QWORD *)v3[3] + 8 * v6) |= 1 << v5;
      std::mutex::unlock((std::mutex *)(v4 + 240));
      std::mutex::lock((std::mutex *)(v4 + 240));
      v17 = (uint64_t *)v3[3];
      v18 = v17[1];
      if (v18)
      {
        v19 = 0;
        v20 = *v17;
        v21 = 1;
        do
        {
          v21 &= *(_QWORD *)(v20 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19;
          ++v19;
        }
        while (v18 != v19);
        if ((v21 & 1) == 0)
          goto LABEL_27;
      }
      if (*((_QWORD *)v3[2] + 5))
      {
LABEL_27:
        std::mutex::unlock((std::mutex *)(v4 + 240));
LABEL_34:
        v26 = 1;
        goto LABEL_37;
      }
      std::mutex::unlock((std::mutex *)(v4 + 240));
    }
    v26 = 0;
LABEL_37:
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
    if (!*((_QWORD *)&v38 + 1))
      goto LABEL_41;
    v28 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if ((v26 & 1) == 0)
        break;
    }
    else
    {
LABEL_41:
      if ((v26 & 1) == 0)
        break;
    }
  }
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>::~unique_ptr[abi:ne180100]((uint64_t **)&v31);
  return 0;
}

void sub_23C58E7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>::~unique_ptr[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_0,unsigned long>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x2426211B8](v2, 0x1030C408CF434AALL);
  }
  return a1;
}

void std::this_thread::sleep_for[abi:ne180100]<long long,std::ratio<1l,1000l>>(unint64_t *a1)
{
  unint64_t v1;
  int v2;
  BOOL v3;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;
  std::chrono::nanoseconds __ns;

  v1 = *a1;
  if ((uint64_t)*a1 >= 1)
  {
    if (v1 == 0x8637BD057A0)
      v2 = 0;
    else
      v2 = -127;
    if (v1 > 0x8637BD057A0)
      v2 = 1;
    if (v1 < 0x8637BD057A0)
      v2 = -1;
    v3 = v2 >= 0 || v2 == -127;
    v4 = 1000000 * v1;
    if (v3)
      v4 = 0x7FFFFFFFFFFFFFFFLL;
    __ns.__rep_ = v4;
    std::this_thread::sleep_for (&__ns);
  }
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::pop_front(int64x2_t *a1)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](*(_QWORD *)(a1->i64[1]
                                                                                            + 8
                                                                                            * (a1[2].i64[0]
                                                                                             / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_23C60C630);
  return std::deque<cv3d::cv::gess::isochart::ParamTask>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

uint64_t std::__split_buffer<std::thread>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::thread::~thread((std::thread *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::deque<cv3d::cv::gess::isochart::ParamTask>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (uint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        v7 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v7) + 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<int *>::~__split_buffer((uint64_t)a1);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,false>(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t *k;
  unint64_t *v10;
  unint64_t *j;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t m;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  __int128 *v127;
  __int128 *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int64_t v146;
  int64_t v147;
  uint64_t v148;
  __int128 *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  __int128 *i;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  __int128 *v188;
  BOOL v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  __int128 *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  unsigned int v233;
  int64_t v234;
  __int128 v236;
  unint64_t v237;
  __int128 v238;
  unint64_t v239;

void sub_23C58FE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,0>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  unint64_t *result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = (uint64_t)(*(_QWORD *)(*a5 + 160) - *(_QWORD *)(*a5 + 152)) >> 2;
  v15 = *a4;
  v16 = *(_QWORD *)(*a4 + 160) - *(_QWORD *)(*a4 + 152);
  if (v14 >= v16 >> 2)
  {
    if (v14 != v16 >> 2)
      return result;
    v33 = *a6;
    v46 = *a5;
    v34 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v33, &v46);
    v35 = *a6;
    v45 = *a4;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v35, &v45);
    if (v34 >= *(_DWORD *)result)
      return result;
    v15 = *a4;
    v13 = *a5;
  }
  *a4 = v13;
  *a5 = v15;
  v17 = a4[1];
  a4[1] = a5[1];
  a5[1] = v17;
  v18 = *a4;
  v19 = (uint64_t)(*(_QWORD *)(*a4 + 160) - *(_QWORD *)(*a4 + 152)) >> 2;
  v20 = *a3;
  v21 = *(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152);
  if (v19 >= v21 >> 2)
  {
    if (v19 != v21 >> 2)
      return result;
    v36 = *a6;
    v46 = *a4;
    v37 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v36, &v46);
    v38 = *a6;
    v45 = *a3;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v38, &v45);
    if (v37 >= *(_DWORD *)result)
      return result;
    v20 = *a3;
    v18 = *a4;
  }
  *a3 = v18;
  *a4 = v20;
  v22 = a3[1];
  a3[1] = a4[1];
  a4[1] = v22;
  v23 = *a3;
  v24 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  v25 = *a2;
  v26 = *(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152);
  if (v24 >= v26 >> 2)
  {
    if (v24 != v26 >> 2)
      return result;
    v39 = *a6;
    v46 = *a3;
    v40 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v39, &v46);
    v41 = *a6;
    v45 = *a2;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v41, &v45);
    if (v40 >= *(_DWORD *)result)
      return result;
    v25 = *a2;
    v23 = *a3;
  }
  *a2 = v23;
  *a3 = v25;
  v27 = a2[1];
  a2[1] = a3[1];
  a3[1] = v27;
  v28 = *a2;
  v29 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  v30 = *a1;
  v31 = *(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152);
  if (v29 < v31 >> 2)
  {
LABEL_5:
    *a1 = v28;
    *a2 = v30;
    v32 = a1[1];
    a1[1] = a2[1];
    a2[1] = v32;
    return result;
  }
  if (v29 == v31 >> 2)
  {
    v42 = *a6;
    v46 = *a2;
    v43 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v42, &v46);
    v44 = *a6;
    v45 = *a1;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v44, &v45);
    if (v43 < *(_DWORD *)result)
    {
      v30 = *a1;
      v28 = *a2;
      goto LABEL_5;
    }
  }
  return result;
}

unint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(unint64_t *result, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v7 = result;
  v8 = *a2;
  v9 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  v10 = *(_QWORD *)(*result + 160) - *(_QWORD *)(*result + 152);
  if (v9 >= v10 >> 2)
  {
    if (v9 != v10 >> 2)
      goto LABEL_6;
    v11 = *a4;
    v45 = *a2;
    v12 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v11, &v45);
    v13 = *a4;
    v44 = *v7;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v13, &v44);
    v8 = *a2;
    v9 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
    if (v12 >= *(_DWORD *)result)
    {
LABEL_6:
      v18 = *a3;
      v19 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
      if (v19 >= v9)
      {
        if (v19 != v9)
          return result;
        v32 = *a4;
        v45 = *a3;
        v33 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v32, &v45);
        v34 = *a4;
        v44 = *a2;
        result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v34, &v44);
        if (v33 >= *(_DWORD *)result)
          return result;
        v8 = *a2;
        v18 = *a3;
      }
      *a2 = v18;
      *a3 = v8;
      v20 = a2[1];
      a2[1] = a3[1];
      a3[1] = v20;
      v21 = *a2;
      v22 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
      v23 = *v7;
      v24 = *(_QWORD *)(*v7 + 160) - *(_QWORD *)(*v7 + 152);
      if (v22 >= v24 >> 2)
      {
        if (v22 != v24 >> 2)
          return result;
        v25 = *a4;
        v45 = *a2;
        v26 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v25, &v45);
        v27 = *a4;
        v44 = *v7;
        result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v44);
        if (v26 >= *(_DWORD *)result)
          return result;
        v23 = *v7;
        v21 = *a2;
      }
      *v7 = v21;
      *a2 = v23;
      v28 = v7[1];
      v7[1] = a2[1];
      a2[1] = v28;
      return result;
    }
  }
  v14 = *a3;
  v15 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  if (v15 < v9)
  {
LABEL_5:
    v16 = *v7;
    *v7 = v14;
    *a3 = v16;
    v17 = v7[1];
    v7[1] = a3[1];
LABEL_24:
    a3[1] = v17;
    return result;
  }
  if (v15 == v9)
  {
    v29 = *a4;
    v45 = *a3;
    v30 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, &v45);
    v31 = *a4;
    v44 = *a2;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v31, &v44);
    if (v30 < *(_DWORD *)result)
    {
      v14 = *a3;
      goto LABEL_5;
    }
    v8 = *a2;
  }
  v35 = *v7;
  *v7 = v8;
  *a2 = v35;
  v36 = v7[1];
  v7[1] = a2[1];
  a2[1] = v36;
  v37 = *a3;
  v38 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  v39 = *a2;
  v40 = *(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152);
  if (v38 < v40 >> 2)
  {
LABEL_23:
    *a2 = v37;
    *a3 = v39;
    v17 = a2[1];
    a2[1] = a3[1];
    goto LABEL_24;
  }
  if (v38 == v40 >> 2)
  {
    v41 = *a4;
    v45 = *a3;
    v42 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v41, &v45);
    v43 = *a4;
    v44 = *a2;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v43, &v44);
    if (v42 < *(_DWORD *)result)
    {
      v39 = *a2;
      v37 = *a3;
      goto LABEL_23;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 2);
      v9 = (uint64_t)(*(_QWORD *)(v8 + 160) - *(_QWORD *)(v8 + 152)) >> 2;
      v10 = *a1;
      v11 = *(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152);
      if (v9 < v11 >> 2)
        goto LABEL_3;
      if (v9 != v11 >> 2)
        return result;
      v34 = *a3;
      *(_QWORD *)&v37 = *(a2 - 2);
      v35 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v34, (unint64_t *)&v37);
      v36 = *a3;
      v39 = *a1;
      if (v35 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v36, &v39))
      {
        v10 = *a1;
        v8 = *(a2 - 2);
LABEL_3:
        *a1 = v8;
        *(a2 - 2) = v10;
        v12 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v12;
        return 1;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v13 = (__int128 *)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a1 + 2, a1 + 4, a3);
      v14 = (__int128 *)(a1 + 6);
      if (a1 + 6 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_QWORD *)v14;
    v18 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v14 + 160) - *(_QWORD *)(*(_QWORD *)v14 + 152)) >> 2;
    v19 = *(_QWORD *)(*(_QWORD *)v13 + 160) - *(_QWORD *)(*(_QWORD *)v13 + 152);
    if (v18 < v19 >> 2)
      break;
    if (v18 == v19 >> 2)
    {
      v28 = *a3;
      *(_QWORD *)&v37 = *(_QWORD *)v14;
      v29 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v28, (unint64_t *)&v37);
      v30 = *a3;
      v39 = *(_QWORD *)v13;
      if (v29 < *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v30, &v39))
      {
        v17 = *(_QWORD *)v14;
        break;
      }
    }
LABEL_24:
    v13 = v14;
    v15 += 16;
    if (++v14 == (__int128 *)a2)
      return 1;
  }
  v20 = *((_QWORD *)v14 + 1);
  *(_QWORD *)&v37 = v17;
  *((_QWORD *)&v37 + 1) = v20;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v14, v13);
  v21 = (uint64_t)a1;
  if (v13 != (__int128 *)a1)
  {
    v22 = v15;
    while (1)
    {
      v23 = (uint64_t)(*(_QWORD *)(v37 + 160) - *(_QWORD *)(v37 + 152)) >> 2;
      v24 = *(_QWORD *)(*(unint64_t *)((char *)a1 + v22 + 16) + 160)
          - *(_QWORD *)(*(unint64_t *)((char *)a1 + v22 + 16) + 152);
      if (v23 >= v24 >> 2)
      {
        if (v23 != v24 >> 2)
          break;
        v25 = *a3;
        v39 = v37;
        v26 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v25, &v39);
        v27 = *a3;
        v38 = *(unint64_t *)((char *)a1 + v22 + 16);
        if (v26 >= *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v38))
          break;
      }
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a1 + v22 + 32, (__int128 *)((char *)a1 + v22 + 16));
      v22 -= 16;
      if (v22 == -32)
      {
        v21 = (uint64_t)a1;
        goto LABEL_18;
      }
    }
    v21 = (uint64_t)a1 + v22 + 32;
  }
LABEL_18:
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v21, &v37);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (++v16 != 8)
    goto LABEL_24;
  return v14 + 1 == (__int128 *)a2;
}

void sub_23C59079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

unint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChart::Run(void)::$_1 &,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh> *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = (uint64_t)(*(_QWORD *)(*a4 + 160) - *(_QWORD *)(*a4 + 152)) >> 2;
  v13 = *a3;
  v14 = *(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152);
  if (v12 >= v14 >> 2)
  {
    if (v12 != v14 >> 2)
      return result;
    v29 = *a5;
    v36 = *a4;
    v30 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v29, &v36);
    v31 = *a5;
    v35 = *a3;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v31, &v35);
    if (v30 >= *(_DWORD *)result)
      return result;
    v13 = *a3;
    v11 = *a4;
  }
  *a3 = v11;
  *a4 = v13;
  v15 = a3[1];
  a3[1] = a4[1];
  a4[1] = v15;
  v16 = *a3;
  v17 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  v18 = *a2;
  v19 = *(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152);
  if (v17 >= v19 >> 2)
  {
    if (v17 != v19 >> 2)
      return result;
    v32 = *a5;
    v36 = *a3;
    v33 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v32, &v36);
    v34 = *a5;
    v35 = *a2;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v34, &v35);
    if (v33 >= *(_DWORD *)result)
      return result;
    v18 = *a2;
    v16 = *a3;
  }
  *a2 = v16;
  *a3 = v18;
  v20 = a2[1];
  a2[1] = a3[1];
  a3[1] = v20;
  v21 = *a2;
  v22 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  v23 = *a1;
  v24 = *(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152);
  if (v22 < v24 >> 2)
  {
LABEL_7:
    *a1 = v21;
    *a2 = v23;
    v28 = a1[1];
    a1[1] = a2[1];
    a2[1] = v28;
    return result;
  }
  if (v22 == v24 >> 2)
  {
    v25 = *a5;
    v36 = *a2;
    v26 = *(_DWORD *)std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v25, &v36);
    v27 = *a5;
    v35 = *a1;
    result = std::map<cv3d::cv::gess::mesh::TriMesh *,unsigned int>::at(v27, &v35);
    if (v26 < *(_DWORD *)result)
    {
      v23 = *a1;
      v21 = *a2;
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<float>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<float>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<float>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<float>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  v4 = *(_QWORD *)(v3 + 16 * v2);
  if (!v4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<float>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

_QWORD *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C590D5C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>;
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::__map_value_compare<cv3d::cv::gess::mesh::TriMesh *,std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>,std::less<cv3d::cv::gess::mesh::TriMesh *>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::TriMesh *,unsigned int>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::TriMesh *,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::TriMesh *&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

float std::deque<float>::push_back(_QWORD *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<float>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(float *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void std::deque<float>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_23C591380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_1_4(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_2_3()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

double cv3d::cv::gess::isochart::IsoMap::IsoMap(cv3d::cv::gess::isochart::IsoMap *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void cv3d::cv::gess::isochart::IsoMap::~IsoMap(cv3d::cv::gess::isochart::IsoMap *this)
{
  cv3d::cv::gess::isochart::IsoMap::Clear(this);
}

double cv3d::cv::gess::isochart::IsoMap::Clear(cv3d::cv::gess::isochart::IsoMap *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    MEMORY[0x2426211A0](v2, 0x1000C8052888210);
    *((_QWORD *)this + 4) = 0;
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    MEMORY[0x2426211A0](v3, 0x1000C8052888210);
    *((_QWORD *)this + 5) = 0;
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    MEMORY[0x2426211A0](v4, 0x1000C8052888210);
    *((_QWORD *)this + 6) = 0;
  }
  *((_DWORD *)this + 14) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

float *cv3d::cv::gess::isochart::IsoMap::Init(cv3d::cv::gess::isochart::IsoMap *this, unint64_t a2, float *a3)
{
  size_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  size_t v10;
  float *result;
  float *v12;
  void *v13;
  uint64_t v14;
  float v15;
  float *v16;
  float v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;

  cv3d::cv::gess::isochart::IsoMap::Clear(this);
  if (!a3)
    cv3d::cv::gess::isochart::IsoMap::Init();
  if (*((_QWORD *)this + 1))
    cv3d::cv::gess::isochart::IsoMap::Init();
  if (*((float *)this + 14) != 0.0)
    cv3d::cv::gess::isochart::IsoMap::Init();
  if (*((_QWORD *)this + 2))
    cv3d::cv::gess::isochart::IsoMap::Init();
  if (*((_QWORD *)this + 3))
    cv3d::cv::gess::isochart::IsoMap::Init();
  *((_QWORD *)this + 3) = a3;
  *(_QWORD *)this = a2;
  v6 = 4 * a2;
  if (a2)
  {
    v7 = 0;
    v8 = a3;
    do
    {
      v9 = 0;
      do
      {
        v8[v9] = v8[v9] * v8[v9];
        ++v9;
      }
      while (a2 != v9);
      ++v7;
      v8 = (float *)((char *)v8 + v6);
    }
    while (v7 != a2);
  }
  if (a2 >> 62)
    v10 = -1;
  else
    v10 = 4 * a2;
  result = (float *)operator new[](v10, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v12 = result;
    v13 = operator new[](v10, MEMORY[0x24BEDB6B8]);
    *((_QWORD *)this + 6) = v13;
    if (v13)
    {
      if (a2)
      {
        v14 = 0;
        v15 = (float)a2;
        v16 = a3;
        do
        {
          v17 = 0.0;
          v18 = v16;
          v19 = a2;
          do
          {
            v17 = *v18 + v17;
            v18 = (float *)((char *)v18 + v6);
            --v19;
          }
          while (v19);
          v12[v14++] = v17 / v15;
          ++v16;
        }
        while (v14 != a2);
        memcpy(v13, v12, 4 * a2);
        v20 = 0;
        v21 = a3;
        do
        {
          v22 = 0;
          do
          {
            v21[v22] = v21[v22] - v12[v22];
            ++v22;
          }
          while (a2 != v22);
          ++v20;
          v21 = (float *)((char *)v21 + v6);
        }
        while (v20 != a2);
        v23 = 0;
        v24 = a3;
        do
        {
          v25 = 0;
          v26 = 0.0;
          do
            v26 = v24[v25++] + v26;
          while (a2 != v25);
          v12[v23++] = v26 / v15;
          v24 = (float *)((char *)v24 + v6);
        }
        while (v23 != a2);
        v27 = 0;
        v28 = a3;
        do
        {
          v29 = 0;
          v30 = v12[v27];
          do
          {
            v28[v29] = v28[v29] - v30;
            ++v29;
          }
          while (a2 != v29);
          ++v27;
          v28 = (float *)((char *)v28 + v6);
        }
        while (v27 != a2);
        v31 = 0;
        do
        {
          v32 = 0;
          do
          {
            a3[v32] = a3[v32] * -0.5;
            ++v32;
          }
          while (a2 != v32);
          ++v31;
          a3 = (float *)((char *)a3 + v6);
        }
        while (v31 != a2);
      }
      else
      {
        memcpy(v13, v12, v6);
      }
    }
    JUMPOUT(0x2426211A0);
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen(cv3d::cv::gess::isochart::IsoMap *this, unint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  size_t v7;
  const std::nothrow_t *v8;
  double *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  const std::nothrow_t *v14;
  void *v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  void *__p[3];

  if (!*((_QWORD *)this + 3))
    cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen();
  if (!*((_QWORD *)this + 6))
    cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen();
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this < a2)
    cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen();
  if (v5 >> 61)
    v7 = -1;
  else
    v7 = 8 * v5;
  v8 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v9 = (double *)operator new[](v7, MEMORY[0x24BEDB6B8]);
  if ((v5 * v5) >> 61)
    v10 = -1;
  else
    v10 = 8 * v5 * v5;
  v11 = operator new[](v10, v8);
  v12 = v11;
  if (!v9)
    goto LABEL_44;
  if (v11)
  {
    if (a2 >> 62)
      v13 = -1;
    else
      v13 = 4 * a2;
    v14 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
    v15 = operator new[](v13, MEMORY[0x24BEDB6B8]);
    *((_QWORD *)this + 4) = v15;
    if ((v5 * a2) >> 62)
      v16 = -1;
    else
      v16 = 4 * v5 * a2;
    v17 = operator new[](v16, v14);
    *((_QWORD *)this + 5) = v17;
    if (!v15 || !v17)
    {
LABEL_45:
      MEMORY[0x2426211A0](v12, 0x1000C8000313F17);
LABEL_46:
      if (!v9)
        return;
      goto LABEL_47;
    }
    std::vector<double>::vector(__p, v5 * v5);
    v18 = *(_QWORD *)this;
    v19 = (double *)__p[0];
    if (v18 * v18)
    {
      v20 = 0;
      v21 = *((_QWORD *)this + 3);
      do
      {
        v19[v20] = *(float *)(v21 + 4 * v20);
        ++v20;
      }
      while (v18 * v18 > v20);
    }
    if (cv3d::cv::gess::isochart::CSymmetricMatrix<double>::GetEigen(v18, v19, (uint64_t)v9, v12, a2, 0.000000999999997))
    {
      if (a2)
      {
        v22 = 0;
        v23 = *((_QWORD *)this + 4);
        do
        {
          v24 = v9[v22];
          *(float *)(v23 + 4 * v22++) = v24;
        }
        while (a2 > v22);
      }
      v25 = *(_QWORD *)this * a2;
      if (v25)
      {
        v26 = 0;
        v27 = *((_QWORD *)this + 5);
        do
        {
          v28 = *(double *)&v12[v26];
          *(float *)(v27 + 4 * v26++) = v28;
        }
        while (v25 > v26);
      }
      *((_DWORD *)this + 14) = 0;
      *a3 = 0;
      v29 = 0;
      if (a2)
      {
        v30 = *((_QWORD *)this + 4);
        v31 = 0.0;
        do
        {
          v32 = *(float *)(v30 + 4 * v29);
          if (v32 < 0.00000001)
            break;
          if (v29)
          {
            if (v32 != 0.0 && v32 < (float)(*(float *)(v30 + 4 * v29 - 4) * 0.00000001))
              break;
          }
          v31 = v32 + v31;
          *((float *)this + 14) = v31;
          *a3 = ++v29;
        }
        while (a2 != v29);
        if (a2 == 2)
        {
          v29 = 2;
          *a3 = 2;
        }
      }
      *((_QWORD *)this + 1) = v29;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
LABEL_44:
    if (!v12)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_47:
  MEMORY[0x2426211A0](v9, 0x1000C8000313F17);
}

void sub_23C5919A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426211A0](v12, 0x1000C8000313F17);
  MEMORY[0x2426211A0](v11, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::CSymmetricMatrix<double>::GetEigen(unint64_t a1, const void *a2, uint64_t a3, _QWORD *a4, uint64_t a5, double a6)
{
  uint64_t v6;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t i;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  double *v62;
  double *v63;
  unint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  uint64_t *v69;
  _QWORD *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double *v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  double v86;
  double *v87;
  uint64_t v88;
  double v89;
  double v90;
  uint64_t v91;
  _QWORD *v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  double v100;
  unint64_t v101;
  double v102;
  double v103;
  double v104;
  unint64_t v105;
  double *v106;
  unint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  unint64_t v116;
  double v117;
  double v118;
  double v119;
  unint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  unint64_t v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  double v147;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t j;
  uint64_t *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void *__p;
  void *v166;
  void *v167[3];

  v6 = 0;
  if (a2 && a3 && a4 && a5 - 1 < a1)
  {
    v13 = (a1 + 3) * a1;
    if (v13 >> 61)
      v14 = -1;
    else
      v14 = 8 * v13;
    v15 = (char *)operator new[](v14, MEMORY[0x24BEDB6B8]);
    if (v15)
    {
      v16 = v15;
      v17 = 8 * a1;
      if (a1 >> 61)
        v18 = -1;
      else
        v18 = 8 * a1;
      v19 = (uint64_t *)operator new[](v18, MEMORY[0x24BEDB6B8]);
      v6 = v19 != 0;
      if (v19)
      {
        v20 = v19;
        v161 = a4;
        v162 = a5;
        v21 = v16;
        v22 = &v16[8 * a1 * a1];
        v23 = &v22[8 * a1];
        v24 = &v23[8 * a1];
        bzero(v22, 8 * a1);
        memcpy(v21, a2, 8 * a1 * a1);
        v25 = 0;
        v163 = v21;
        do
        {
          v20[v25++] = (uint64_t)v21;
          v21 += v17;
        }
        while (a1 != v25);
        v26 = a1 - 1;
        memcpy(&v22[8 * a1], (const void *)v20[a1 - 1], 8 * a1);
        __p = 0;
        std::vector<double>::vector(v167, a1 * a1, &__p);
        if (a1 != 1)
        {
          do
          {
            v27 = 0;
            v28 = 0.0;
            do
              v28 = v28 + fabs(*(double *)&v23[8 * v27++]);
            while (v26 != v27);
            if (v28 >= a6)
            {
              if (COERCE__INT64(fabs(1.0 / v28)) > 0x7FEFFFFFFFFFFFFFLL)
                __assert_rtn("VectorScale", "SymmetricMatrix.hpp", 37, "isfinite(double(scale))");
              v38 = 0;
              do
              {
                *(double *)&v23[8 * v38] = 1.0 / v28 * *(double *)&v23[8 * v38];
                ++v38;
              }
              while (v26 != v38);
              v39 = 0;
              v40 = 0.0;
              do
              {
                v40 = v40 + *(double *)&v23[8 * v39] * *(double *)&v23[8 * v39];
                ++v39;
              }
              while (v26 != v39);
              v29 = v26 - 1;
              v41 = sqrt(v40);
              if (v40 < 0.0)
                v41 = 0.0;
              if (*(double *)&v23[8 * v26 - 8] >= 0.0)
                v42 = v41;
              else
                v42 = -v41;
              *(double *)&v22[8 * v26] = -(v28 * v42);
              v43 = *(double *)&v23[8 * v29];
              *(double *)&v23[8 * v29] = v42 + v43;
              bzero(&v23[8 * a1], 8 * v26);
              v164 = 0;
              std::vector<double>::vector(&__p, a1, &v164);
              v44 = 0;
              v37 = v40 + v43 * v42;
              v45 = (double *)__p;
              do
              {
                v46 = v20[v44];
                *(_QWORD *)(v46 + 8 * v26) = *(_QWORD *)&v23[8 * v44];
                v47 = *(double *)(v46 + 8 * v44) * *(double *)&v23[8 * v44] - v45[v44];
                v48 = *(double *)&v24[8 * v44];
                v45[v44] = v48 + v47 - v48 - v47;
                *(double *)&v24[8 * v44] = v48 + v47;
                if (v44)
                {
                  for (i = 0; i != v44; ++i)
                  {
                    v50 = *(double *)(v46 + 8 * i) * *(double *)&v23[8 * i] - v45[v44];
                    v51 = *(double *)&v24[8 * v44];
                    v45[v44] = v51 + v50 - v51 - v50;
                    *(double *)&v24[8 * v44] = v51 + v50;
                    v52 = *(double *)(v46 + 8 * i) * *(double *)&v23[8 * v44] - v45[i];
                    v53 = *(double *)&v24[8 * i];
                    v45[i] = v53 + v52 - v53 - v52;
                    *(double *)&v24[8 * i] = v53 + v52;
                  }
                }
                ++v44;
              }
              while (v44 != v26);
              if (COERCE__INT64(fabs(1.0 / v37)) > 0x7FEFFFFFFFFFFFFFLL)
                __assert_rtn("VectorScale", "SymmetricMatrix.hpp", 37, "isfinite(double(scale))");
              v54 = 0;
              do
              {
                *(double *)&v24[8 * v54] = 1.0 / v37 * *(double *)&v24[8 * v54];
                ++v54;
              }
              while (v26 != v54);
              v55 = 0;
              v56 = 0.0;
              do
              {
                v56 = v56 + *(double *)&v23[8 * v55] * *(double *)&v24[8 * v55];
                ++v55;
              }
              while (v26 != v55);
              v57 = 0;
              v58 = -v56 / (v37 + v37);
              do
              {
                v59 = v58 * *(double *)&v23[8 * v57] - v45[v57];
                v60 = *(double *)&v24[8 * v57];
                v45[v57] = v60 + v59 - v60 - v59;
                *(double *)&v24[8 * v57++] = v60 + v59;
              }
              while (v26 != v57);
              v61 = 0;
              v62 = (double *)v167[0];
              do
              {
                v63 = v62;
                v64 = v61;
                do
                {
                  v65 = v20[v64];
                  v66 = -(*(double *)&v24[8 * v61] * *(double *)&v23[8 * v64]
                        + *(double *)&v24[8 * v64] * *(double *)&v23[8 * v61])
                      - *v63;
                  v67 = *(double *)(v65 + 8 * v61);
                  *v63 = v67 + v66 - v67 - v66;
                  if (fabs(v67 + v66) >= a6)
                    v68 = v67 + v66;
                  else
                    v68 = 0.0;
                  *(double *)(v65 + 8 * v61) = v68;
                  ++v64;
                  v63 = (double *)((char *)v63 + v17);
                }
                while (v64 < v26);
                ++v61;
                v62 = (double *)((char *)v62 + v17 + 8);
              }
              while (v61 != v26);
              v69 = (uint64_t *)v20[v29];
              v70 = (_QWORD *)v20[v26];
              v71 = &v22[8 * a1];
              v72 = v26;
              do
              {
                v73 = *v69++;
                *(_QWORD *)v71 = v73;
                v71 += 8;
                *v70++ = 0;
                --v72;
              }
              while (v72);
              if (v45)
              {
                v166 = v45;
                operator delete(v45);
              }
            }
            else
            {
              *(_QWORD *)&v23[8 * v26] = 0;
              v29 = v26 - 1;
              v30 = (uint64_t *)v20[v26 - 1];
              v31 = (_QWORD *)v20[v26];
              v32 = &v22[8 * a1];
              v33 = v20;
              v34 = v26;
              do
              {
                v35 = *v30++;
                *(_QWORD *)v32 = v35;
                v32 += 8;
                *v31++ = 0;
                v36 = *v33++;
                *(_QWORD *)(v36 + 8 * v26) = 0;
                --v34;
              }
              while (v34);
              v37 = 0.0;
            }
            *(double *)&v23[8 * v26] = v37;
            v26 = v29;
          }
          while (v29);
          v74 = 0;
          v75 = (double *)v167[0];
          v76 = 1;
          v26 = a1 - 1;
          do
          {
            v77 = v20[v74];
            *(_QWORD *)(a3 + 8 * v74) = *(_QWORD *)(v77 + 8 * v74);
            *(_QWORD *)(v77 + 8 * v74++) = 0x3FF0000000000000;
            if (fabs(*(double *)&v23[8 * v74]) > a6)
            {
              v78 = 0;
              v79 = v75;
              do
              {
                v80 = 0;
                v81 = 0.0;
                v82 = 0.0;
                do
                {
                  v83 = v81;
                  v84 = *(double *)(v20[v80] + 8 * v78) * *(double *)(v20[v80] + 8 * v74) - v82;
                  v81 = v81 + v84;
                  v82 = v81 - v83 - v84;
                  ++v80;
                }
                while (v76 != v80);
                v85 = 0;
                v86 = -v81;
                v87 = v79;
                do
                {
                  v88 = v20[v85];
                  v89 = *(double *)(v88 + 8 * v74) * v86 / *(double *)&v23[8 * v74] - *v87;
                  v90 = *(double *)(v88 + 8 * v78);
                  *v87 = v90 + v89 - v90 - v89;
                  *(double *)(v88 + 8 * v78) = v90 + v89;
                  ++v85;
                  v87 = (double *)((char *)v87 + v17);
                }
                while (v76 != v85);
                ++v78;
                ++v79;
              }
              while (v78 != v76);
            }
            v91 = 0;
            do
              *(_QWORD *)(v20[v91++] + 8 * v74) = 0;
            while (v76 != v91);
            ++v76;
          }
          while (v74 != a1 - 1);
        }
        v92 = (_QWORD *)v20[v26];
        *(_QWORD *)(a3 + 8 * v26) = v92[v26];
        v92[v26] = 0x3FF0000000000000;
        bzero(v92, 8 * v26);
        memmove(v22, v22 + 8, 8 * v26);
        *(_QWORD *)&v22[8 * v26] = 0;
        v164 = 0;
        std::vector<double>::vector(&__p, a1, &v164);
        v96 = 0;
        if (a1 <= 1)
          v97 = 1;
        else
          v97 = a1;
        v93.n128_u64[0] = 0;
        v98 = 1;
        v94.n128_u64[0] = -4.0;
        v95.n128_u64[0] = 0.5;
        v99 = 0.0;
        v100 = 0.0;
        do
        {
          if (a1 <= v98)
            v101 = v98;
          else
            v101 = a1;
          v102 = *(double *)(a3 + 8 * v96);
          v103 = fabs(v102) + fabs(*(double *)&v22[8 * v96]);
          if (v99 < v103)
            v99 = v103;
          v104 = v99 * a6;
          v105 = v96 + 1;
          v106 = (double *)__p;
          while (1)
          {
            v107 = v96;
            while (1)
            {
              v108 = fabs(*(double *)&v22[8 * v107]);
              if (v108 <= v104)
                break;
              if (++v107 >= a1)
              {
                v107 = v101;
                break;
              }
            }
            if (v107 == v96)
              break;
            v109 = *(double *)(a3 + 8 * v105);
            v110 = v102 + v109;
            v111 = (v102 * v109 - *(double *)&v22[8 * v96] * *(double *)&v22[8 * v96]) * -4.0 + v110 * v110;
            v112 = sqrt(v111);
            if (v111 >= 0.0)
              v113 = v112;
            else
              v113 = 0.0;
            v114 = (v110 + v113) * 0.5;
            v115 = (v110 - v113) * 0.5;
            if (vabdd_f64(v102, v114) <= vabdd_f64(v102, v115))
              v115 = v114;
            v116 = v96;
            do
            {
              v117 = -v115 - v106[v116];
              v118 = *(double *)(a3 + 8 * v116);
              v106[v116] = v118 + v117 - v118 - v117;
              *(double *)(a3 + 8 * v116++) = v118 + v117;
            }
            while (v116 < a1);
            v119 = *(double *)(a3 + 8 * v107);
            v120 = v107 - 1;
            v121 = *(double *)&v22[8 * v107 - 8];
            v122 = sqrt(v121 * v121 + v119 * v119);
            v123 = v119 / v122;
            v124 = v121 / v122;
            v125 = *(double *)(a3 + 8 * (v107 - 1));
            v126 = v119 * (v123 * v123) + v124 * v124 * v125 + v123 * (v124 + v124) * v121;
            v127 = v125 * (v123 * v123);
            v128 = (v125 - v119) * (v124 * v123);
            *(double *)(a3 + 8 * v107) = v126;
            v129 = v20;
            v130 = v97;
            do
            {
              v131 = *v129++;
              v132 = *(double *)(v131 + 8 * v107);
              v133 = *(double *)(v131 + 8 * v120);
              *(double *)(v131 + 8 * v107) = v123 * v132 + v124 * v133;
              *(double *)(v131 + 8 * v120) = v132 * -v124 + v123 * v133;
              --v130;
            }
            while (v130);
            v102 = v127 + v124 * v124 * v119 + -(v123 * (v124 + v124)) * v121;
            v134 = v128 + (v123 * v123 - v124 * v124) * v121;
            if (v107 > v105 && v120 > v96)
            {
              v135 = v124 * *(double *)&v22[8 * v107 - 16];
              do
              {
                v136 = v120 - 1;
                v137 = v123 * *(double *)&v22[8 * v120 - 8];
                *(double *)&v22[8 * v120 - 8] = v137;
                v138 = sqrt(v135 * v135 + v134 * v134);
                v123 = v134 / v138;
                v139 = v135 / v138;
                *(double *)&v22[8 * v120] = v135 * v139 + v123 * v134;
                v140 = v139 * v139;
                v141 = *(double *)(a3 + 8 * (v120 - 1));
                v142 = v123 * (v139 + v139);
                *(double *)(a3 + 8 * v120) = v102 * (v123 * v123) + v139 * v139 * v141 + v142 * v137;
                if (v120 != 1)
                  v135 = v139 * *(double *)&v22[8 * v120 - 16];
                v134 = v139 * v123 * (v141 - v102) + -(v140 - v123 * v123) * v137;
                v102 = v123 * v123 * v141 + v140 * v102 - v142 * v137;
                v143 = v20;
                v144 = v97;
                do
                {
                  v145 = *v143++;
                  v146 = *(double *)(v145 + 8 * v120);
                  v147 = *(double *)(v145 + 8 * v136);
                  *(double *)(v145 + 8 * v120) = v123 * v146 + v139 * v147;
                  *(double *)(v145 + 8 * v136) = v146 * -v139 + v123 * v147;
                  --v144;
                }
                while (v144);
                --v120;
              }
              while (v136 > v96);
            }
            v100 = v100 + v115;
            *(double *)(a3 + 8 * v96) = v102;
            *(double *)&v22[8 * v96] = v134;
            if (v108 <= v104)
              *(_QWORD *)&v22[8 * v107] = 0;
          }
          *(double *)(a3 + 8 * v96) = v100 + v102;
          *(_QWORD *)&v22[8 * v96] = 0;
          ++v98;
          ++v96;
        }
        while (v105 != v97);
        v16 = v163;
        v6 = v6;
        v148 = v161;
        if (v26)
        {
          v149 = 0;
          do
          {
            v150 = v149++;
            if (v149 < a1)
            {
              v151 = v149;
              do
              {
                v93.n128_u64[0] = *(_QWORD *)(a3 + 8 * v151);
                v94.n128_u64[0] = *(_QWORD *)(a3 + 8 * v150);
                if (v93.n128_f64[0] > v94.n128_f64[0])
                {
                  *(_QWORD *)(a3 + 8 * v150) = v93.n128_u64[0];
                  *(_QWORD *)(a3 + 8 * v151) = v94.n128_u64[0];
                  v152 = v20;
                  v153 = a1;
                  do
                  {
                    v154 = *v152++;
                    v93.n128_u64[0] = *(_QWORD *)(v154 + 8 * v150);
                    v94.n128_u64[0] = *(_QWORD *)(v154 + 8 * v151);
                    *(_QWORD *)(v154 + 8 * v150) = v94.n128_u64[0];
                    *(_QWORD *)(v154 + 8 * v151) = v93.n128_u64[0];
                    --v153;
                  }
                  while (v153);
                }
                ++v151;
              }
              while (v151 != a1);
            }
          }
          while (v149 != v26);
        }
        if (v162)
        {
          for (j = 0; j != v162; ++j)
          {
            v156 = v20;
            v157 = v148;
            v158 = v97;
            do
            {
              v159 = *v156++;
              v93.n128_u64[0] = *(_QWORD *)(v159 + 8 * j);
              *v157++ = v93.n128_u64[0];
              --v158;
            }
            while (v158);
            v148 = (_QWORD *)((char *)v148 + v17);
          }
        }
        if (__p)
        {
          v166 = __p;
          operator delete(__p);
        }
        if (v167[0])
        {
          v167[1] = v167[0];
          operator delete(v167[0]);
        }
        MEMORY[0x2426211A0](v20, 0x80C80B8603338, v93, v94, v95);
      }
      MEMORY[0x2426211A0](v16, 0x1000C8000313F17);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_23C5923DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  MEMORY[0x2426211A0](v19, 0x80C80B8603338);
  MEMORY[0x2426211A0](a13, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void *cv3d::cv::gess::isochart::IsoMap::GetPrimaryEnergyDimension(void *this, float a2, unint64_t *a3)
{
  float v5;
  float *v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  unint64_t v25;

  v5 = *((float *)this + 14);
  if (fabsf(v5) < 0.00000001)
  {
    *a3 = 0;
    return this;
  }
  if (a2 >= 1.0)
    *a3 = *((_QWORD *)this + 1);
  v6 = (float *)*((_QWORD *)this + 4);
  v7 = *v6;
  v8 = *v6 + v6[1];
  if (v8 >= (float)(v5 * 0.99))
  {
    v10 = 2;
  }
  else
  {
    v9 = *((_QWORD *)this + 1);
    v10 = 2;
    if (v9 <= 2)
      v9 = 2;
    v11 = *v6 + v6[1];
    while (v9 != v10)
    {
      v11 = v11 + v6[v10++];
      if (v11 >= (float)(v5 * 0.99))
        goto LABEL_14;
    }
    v10 = v9;
  }
LABEL_14:
  *((_QWORD *)this + 2) = v10;
  v12 = v10 - 1;
  if ((v10 - 1) >> 62)
    v13 = -1;
  else
    v13 = 4 * (v10 - 1);
  this = operator new[](v13, MEMORY[0x24BEDB6B8]);
  if (this)
  {
    if (v10 == 1)
    {
      v17 = 2;
    }
    else
    {
      v14 = 0;
      do
      {
        v15 = sqrtf(v7);
        if (v7 < 0.0)
          v15 = 0.0;
        v7 = v6[v14 + 1];
        v16 = sqrtf(v7);
        if (v7 < 0.0)
          v16 = 0.0;
        *((float *)this + v14++) = v15 - v16;
      }
      while (v12 != v14);
      v17 = 2;
      if (v8 < (float)(v5 * a2) && v10 >= 3)
      {
        v17 = 2;
        do
          v8 = v8 + v6[v17++];
        while (v8 < (float)(v5 * a2) && v17 < v10);
      }
    }
    if (a2 >= 0.91)
    {
      v25 = 2;
      if (v17 > 2)
        v25 = v17;
LABEL_51:
      *a3 = v25;
      JUMPOUT(0x2426211A0);
    }
    v19 = v17 - 1;
    if (v17 - 1 <= v12)
    {
LABEL_50:
      v25 = 2;
      goto LABEL_51;
    }
    v20 = 0;
    v21 = 0;
    v22 = (uint64_t)this + 4 * v17 - 4;
    v23 = 0.0;
    while (1)
    {
      if (v20)
      {
        v24 = *(float *)(v22 + 4 * v20);
        if (v23 >= v24)
          goto LABEL_44;
      }
      else
      {
        v24 = *((float *)this + v19);
      }
      v21 = v19 + v20;
      v23 = v24;
LABEL_44:
      ++v20;
      if (v19 + v20 <= v12)
      {
        if (v21)
        {
          v25 = v21 + 1;
          goto LABEL_51;
        }
        goto LABEL_50;
      }
    }
  }
  return this;
}

BOOL cv3d::cv::gess::isochart::IsoMap::GetDestineVectors(cv3d::cv::gess::isochart::IsoMap *this, unint64_t a2, float *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float *v11;

  v3 = *(_QWORD *)this;
  if (a2 - 1 < *(_QWORD *)this)
  {
    v4 = 0;
    v6 = *((_QWORD *)this + 4);
    v5 = *((_QWORD *)this + 5);
    do
    {
      v7 = *(float *)(v6 + 4 * v4);
      if (v7 < 0.0)
      {
        *(_DWORD *)(v6 + 4 * v4) = 0;
        v7 = 0.0;
      }
      v8 = 0;
      v9 = sqrtf(v7);
      if (v7 >= 0.0)
        v10 = v9;
      else
        v10 = 0.0;
      v11 = a3;
      do
      {
        *v11 = v10 * *(float *)(v5 + 4 * v8++);
        v11 += a2;
      }
      while (v3 != v8);
      ++v4;
      ++a3;
      v5 += 4 * v3;
    }
    while (v4 != a2);
  }
  return v3 >= a2;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C592768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeBoundaryByAngle(_QWORD *a1, uint64_t *a2, unint64_t a3, _BYTE *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::vector<unsigned int>::size_type v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *__p[2];
  char v30;
  __int128 v31;
  float v32;
  void *v33[3];
  void *v34[3];
  std::vector<unsigned int> v35;
  int v36;

  if (a3 >= 2 && a1[33] - a1[32] >= 0x20uLL)
  {
    v8 = (_QWORD *)a1[5];
    v10 = v8[16];
    v9 = v8[17];
    v11 = ((v8[20] - v8[19]) >> 2);
    std::vector<unsigned int>::vector(&v35, v11);
    std::vector<BOOL>::vector(v34, v11);
    std::vector<float>::vector(v33, -858993459 * ((unint64_t)(v9 - v10) >> 2));
    v32 = 0.0;
    if (cv3d::cv::gess::isochart::IsoChartMesh::CalculateEdgeAngleDistance((uint64_t)a1, (uint64_t *)v33, &v32))
    {
      v12 = a1[32];
      if (a1[33] != v12)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = *(_OWORD *)(v12 + 16 * v13);
          v31 = v15;
          v16 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
          if (*((_QWORD *)&v15 + 1))
          {
            v17 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = v15;
          cv3d::cv::gess::isochart::IsoChartMesh::CalculateFuzzyRegion(v15, v34);
          v20 = *(_QWORD *)(v19 + 40);
          std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_father");
          v36 = -1;
          v22 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v20 + 56), (uint64_t)&v36, (unsigned __int8 *)__p);
          if (v30 < 0)
            operator delete(__p[0]);
          v23 = *(uint64_t **)(v19 + 40);
          if (v23[20] != v23[19])
          {
            v24 = 0;
            do
            {
              LODWORD(__p[0]) = v22;
              v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v23 + 7, (unsigned int *)__p, v21);
              v26 = *(_QWORD *)(v25 + 40);
              if (v24 >= (*(_QWORD *)(v25 + 48) - v26) >> 2)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_DWORD *)(*a2 + 4 * *(unsigned int *)(v26 + 4 * v24++)) = v14;
              v23 = *(uint64_t **)(v31 + 40);
            }
            while (v24 < (v23[20] - v23[19]) >> 2);
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
          }
          if (v16)
          {
            p_shared_owners = (unint64_t *)&v16->__shared_owners_;
            do
              v28 = __ldaxr(p_shared_owners);
            while (__stlxr(v28 - 1, p_shared_owners));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          v12 = a1[32];
          v13 = ++v14;
        }
        while (v14 < (unint64_t)((a1[33] - v12) >> 4));
      }
      cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByAngle((uint64_t)a1, a2, v34, (uint64_t)v33, v32);
      cv3d::cv::gess::isochart::IsoChartMesh::ApplyBoundaryOptResult((uint64_t)a1, a2, &v35.__begin_, a3, a4);
    }
    if (v33[0])
    {
      v33[1] = v33[0];
      operator delete(v33[0]);
    }
    if (v34[0])
      operator delete(v34[0]);
    if (v35.__begin_)
    {
      v35.__end_ = v35.__begin_;
      operator delete(v35.__begin_);
    }
  }
}

void sub_23C592A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::IsoChartMesh::CalculateEdgeAngleDistance(uint64_t a1, uint64_t *a2, float *a3)
{
  float *v3;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  float32x4_t v22;
  uint64_t v23;
  float v24;
  _BOOL8 v25;
  int v27;
  const char *v28;
  float *v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  void *__p;

  v3 = a3;
  *a3 = 0.0;
  v6 = -858993459
     * ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 136) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128)) >> 2);
  v32.i8[0] = 0;
  std::vector<BOOL>::vector(&__p, v6, (unsigned __int8 *)&v32);
  if (!(_DWORD)v6)
    goto LABEL_13;
  v7 = 0;
  v29 = v3;
  v30 = 0;
  v8 = __p;
  do
  {
    if ((v8[v7 >> 6] & (1 << v7)) != 0)
      goto LABEL_10;
    v33 = v7;
    v9 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v33);
    v10 = *a2;
    *(_DWORD *)(*a2 + 4 * v7) = 0;
    *(_DWORD *)(v10 + 4 * v9) = 0;
    v11 = *(_QWORD *)(a1 + 40);
    v12 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v11, *(_DWORD *)(v11 + 180), v33);
    if ((*v12 & v13) == 0)
    {
      v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v11 + 104, &v33);
      v15 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v11, *(_DWORD *)(v11 + 180), *v14);
      if ((*v15 & v16) == 0)
      {
        v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v33) + 16);
        v18 = *(_QWORD *)(a1 + 40) + 104;
        v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, &v33);
        v20 = cv3d::cv::gess::mesh::Topology::h(v18, v19);
        if (v17 == -1)
        {
          v27 = 84;
          v28 = "fh1.Valid()";
        }
        else
        {
          v21 = *(_DWORD *)(v20 + 16);
          if (v21 != -1)
          {
            cv3d::cv::gess::math::FaceNormal(*(_QWORD *)(a1 + 40), v17, &v32);
            cv3d::cv::gess::math::FaceNormal(*(_QWORD *)(a1 + 40), v21, &v31);
            v22 = vmulq_f32(v32, v31);
            v22.i32[3] = 0;
            v23 = *a2;
            *(float *)(*a2 + 4 * v7) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v22, v22));
            v22.f32[0] = 1.0 - *(float *)(v23 + 4 * v7);
            *(_DWORD *)(v23 + 4 * v7) = v22.i32[0];
            v3 = v29;
            *v29 = v22.f32[0] + *v29;
            ++v30;
            *(_DWORD *)(v23 + 4 * v9) = *(_DWORD *)(v23 + 4 * v7);
            goto LABEL_9;
          }
          v27 = 85;
          v28 = "fh2.Valid()";
        }
        __assert_rtn("CalculateEdgeAngleDistance", "MeshOptimizeBoundaries.cpp", v27, v28);
      }
    }
LABEL_9:
    v8 = __p;
    *((_QWORD *)__p + (v7 >> 6)) |= 1 << v7;
    *(_QWORD *)((char *)v8 + ((v9 >> 3) & 0x1FFFFFF8)) |= 1 << v9;
LABEL_10:
    ++v7;
  }
  while (v6 != v7);
  if (v30)
  {
    v24 = *v3 / (float)v30;
    *v3 = v24;
    v25 = fabsf(v24) > 0.00000001;
    goto LABEL_14;
  }
LABEL_13:
  v25 = 0;
LABEL_14:
  if (__p)
    operator delete(__p);
  return v25;
}

void sub_23C592CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateFuzzyRegion(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  unsigned int k;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37[5];
  int v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  void *v45[3];
  unsigned int v46;

  v4 = ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2);
  LOBYTE(v42) = 0;
  std::vector<BOOL>::vector(v45, v4, (unsigned __int8 *)&v42);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::FindNewBoundaryVert(a1, (uint64_t)&v42, v45);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(v5 + 152);
  v6 = *(_QWORD *)(v5 + 160);
  std::string::basic_string[abi:ne180100]<0>(&__p, "f:index_in_father");
  v37[0] = -1;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v5 + 56), (uint64_t)v37, (unsigned __int8 *)&__p);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  if (v9 == -1)
    __assert_rtn("CalculateFuzzyRegion", "MeshOptimizeBoundaries.cpp", 123, "f_id_father_ah.Valid()");
  v10 = ((unint64_t)(v6 - v7) >> 2);
  if (v42 == v43 && v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v12 = *(_QWORD *)(a1 + 40);
      LODWORD(__p) = v9;
      v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v12 + 56), (unsigned int *)&__p, v8);
      v14 = *(_QWORD *)(v13 + 40);
      if (i >= (*(_QWORD *)(v13 + 48) - v14) >> 2)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v14 + 4 * i) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v14 + 4 * i));
    }
  }
  __p = 0;
  v40 = 0;
  v41 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::SpreadFuzzyVert(a1, (char **)&v42, (uint64_t)&__p, v45);
  v16 = (unsigned int *)__p;
  v17 = v40 - (_BYTE *)__p;
  if (v40 == __p)
    __assert_rtn("CalculateFuzzyRegion", "MeshOptimizeBoundaries.cpp", 136, "max_level > 0");
  v18 = v17 >> 2;
  v19 = (v17 >> 2) - 1;
  if (!v19)
  {
LABEL_31:
    if (!v16)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v18 == 2)
  {
    v20 = 0;
    if (!v10)
      goto LABEL_22;
  }
  else
  {
    v21 = (float)((float)(unint64_t)v18 * 0.3) + 0.5;
    if (v19 >= (unint64_t)v21)
      v20 = (unint64_t)v21;
    else
      v20 = v19;
    if (!v10)
      goto LABEL_22;
  }
  for (j = 0; j != v10; ++j)
  {
    v23 = *(_QWORD *)(a1 + 40);
    v37[0] = v9;
    v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v23 + 56), v37, v15);
    v25 = *(_QWORD *)(v24 + 40);
    if (j >= (*(_QWORD *)(v24 + 48) - v25) >> 2)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v25 + 4 * j) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v25 + 4 * j);
  }
  v16 = (unsigned int *)__p;
LABEL_22:
  v26 = v16[v20];
  v27 = v42;
  if (v26 < (v43 - (_BYTE *)v42) >> 2)
  {
    do
    {
      v38 = v27[v26];
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v37, *(_QWORD *)(a1 + 40) + 104, &v38);
      for (k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v37);
            ;
            k = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v37))
      {
        v36 = k;
        if (k == -1)
          break;
        v29 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), k);
        if ((*v29 & v30) == 0)
        {
          v31 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v36) + 16);
          v32 = *(_QWORD *)(a1 + 40);
          v46 = v9;
          v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v32 + 56), &v46, v33);
          v35 = *(_QWORD *)(v34 + 40);
          if (v31 >= (*(_QWORD *)(v34 + 48) - v35) >> 2)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v35 + 4 * v31) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v35 + 4 * v31));
        }
      }
      ++v26;
      v27 = v42;
    }
    while (v26 < (v43 - (_BYTE *)v42) >> 2);
    v16 = (unsigned int *)__p;
    goto LABEL_31;
  }
LABEL_32:
  v40 = v16;
  operator delete(v16);
LABEL_33:
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v45[0])
    operator delete(v45[0]);
}

void sub_23C5930E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByAngle(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, float a5)
{
  char v10;
  char v11;
  void *__p;
  void *v13;
  uint64_t v14;
  std::vector<unsigned int> v15;
  _BYTE v16[192];

  cv3d::cv::gess::isochart::CGraphcut::CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v16);
  std::vector<unsigned int>::vector(&v15, ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2));
  v10 = 1;
  do
  {
    v11 = v10;
    __p = 0;
    v13 = 0;
    v14 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
    cv3d::cv::gess::isochart::IsoChartMesh::DriveGraphCutByAngle(a1, (cv3d::cv::gess::isochart::CGraphcut *)v16, (uint64_t *)&v15, a2, a3, &__p, a5);
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    v10 = 0;
  }
  while ((v11 & 1) != 0);
  if (v15.__begin_)
  {
    v15.__end_ = v15.__begin_;
    operator delete(v15.__begin_);
  }
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v16);
}

void sub_23C593250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)&a15);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ApplyBoundaryOptResult(uint64_t a1, uint64_t *a2, _DWORD **a3, unint64_t a4, _BYTE *a5)
{
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int v8;
  int *v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;

  v12 = a4;
  *a5 = 1;
  v5 = ((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2);
  if (v5 < 2)
  {
LABEL_5:
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2))
    {
      v9 = (int *)*a2;
      v10 = *a3;
      do
      {
        v11 = *v9++;
        *v10++ = v11;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v6 = (int *)(*a2 + 4);
    v7 = v5 - 1;
    while (1)
    {
      v8 = *v6++;
      if (*(_DWORD *)*a2 != v8)
        break;
      if (!--v7)
        goto LABEL_5;
    }
  }
  cv3d::cv::gess::isochart::IsoChartMesh::MakePartitionValid(a1, &v12, a2, a5);
}

void cv3d::cv::gess::isochart::IsoChartMesh::FindNewBoundaryVert(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *HEdge;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int *v33;
  _DWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  void *__p[2];
  char v46;
  int v47;
  unsigned int v48;
  unsigned int v49;

  v47 = -1;
  v6 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  v49 = -1;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v6 + 8), (uint64_t)&v49, (unsigned __int8 *)__p);
  if (v46 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 40);
  LODWORD(__p[0]) = v8;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v9 + 8), (unsigned int *)__p, v7);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
  if ((v11 & 0x3FFFFFFFCLL) != 0)
  {
    v12 = v10;
    v13 = 0;
    v14 = (v11 >> 2);
    while (1)
    {
      v48 = v13;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(__p, *(_QWORD *)(a1 + 40) + 104, &v48);
      v49 = -1;
      HEdge = (_QWORD *)cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
      if ((_DWORD)HEdge != -1)
        break;
LABEL_9:
      if (v49 != -1)
        goto LABEL_12;
LABEL_35:
      if (++v13 == v14)
        return;
    }
    v18 = HEdge;
    while (1)
    {
      HEdge = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v18);
      if ((v16 & *HEdge) != 0)
        break;
      HEdge = (_QWORD *)cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
      v18 = HEdge;
      if ((_DWORD)HEdge == -1)
        goto LABEL_9;
    }
    v49 = v18;
LABEL_12:
    v19 = *(_QWORD *)(v12 + 40);
    if (v48 >= (unint64_t)((*(_QWORD *)(v12 + 48) - v19) >> 2))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)HEdge, v16, v17);
    v47 = *(_DWORD *)(v19 + 4 * v48);
    if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40), (uint64_t)&v47))
      goto LABEL_18;
    v20 = *(_QWORD *)(a1 + 40) + 104;
    v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, &v49);
    v22 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v20, v21) + 12);
    v23 = *(_QWORD *)(a1 + 40) + 104;
    v24 = cv3d::cv::gess::mesh::Topology::h(v23, &v49);
    v25 = cv3d::cv::gess::mesh::Topology::h(v23, (unsigned int *)(v24 + 4));
    v28 = *(_QWORD *)(v12 + 40);
    v29 = (*(_QWORD *)(v12 + 48) - v28) >> 2;
    if (v29 <= v22)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v25, v26, v27);
    v30 = *(unsigned int *)(v25 + 12);
    v44 = *(_DWORD *)(v28 + 4 * v22);
    if (v29 <= v30)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v25, v26, v27);
    v43 = *(_DWORD *)(v28 + 4 * v30);
    if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40), (uint64_t)&v44)
      || !cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40), (uint64_t)&v43))
    {
LABEL_18:
      *(_QWORD *)(*a3 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v31 = v48;
      v33 = *(unsigned int **)(a2 + 8);
      v32 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v33 >= v32)
      {
        v35 = *(unsigned int **)a2;
        v36 = ((uint64_t)v33 - *(_QWORD *)a2) >> 2;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v39);
          v35 = *(unsigned int **)a2;
          v33 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[4 * v36];
        *(_DWORD *)v41 = v31;
        v34 = v41 + 4;
        while (v33 != v35)
        {
          v42 = *--v33;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }
        *(_QWORD *)a2 = v41;
        *(_QWORD *)(a2 + 8) = v34;
        *(_QWORD *)(a2 + 16) = &v40[4 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v33 = v48;
        v34 = v33 + 1;
      }
      *(_QWORD *)(a2 + 8) = v34;
    }
    goto LABEL_35;
  }
}

void sub_23C593618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::SpreadFuzzyVert(uint64_t a1, char **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  unsigned int Vertex;
  unsigned int i;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  _QWORD v39[3];
  unsigned int v40;

  v5 = a3;
  v7 = 0;
  v8 = ((unint64_t)(a2[1] - *a2) >> 2);
  v40 = -1;
  v36 = a3 + 16;
  v9 = (uint64_t)(a2 + 2);
  do
  {
    v10 = v8;
    v12 = *(_DWORD **)(v5 + 8);
    v11 = *(_QWORD *)(v5 + 16);
    if ((unint64_t)v12 >= v11)
    {
      v14 = *(_DWORD **)v5;
      v15 = ((uint64_t)v12 - *(_QWORD *)v5) >> 2;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 1 > v16)
        v16 = v17 >> 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v18 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v36, v18);
        v14 = *(_DWORD **)v5;
        v12 = *(_DWORD **)(v5 + 8);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[4 * v15];
      *(_DWORD *)v20 = v10;
      v13 = v20 + 4;
      while (v12 != v14)
      {
        v21 = *--v12;
        *((_DWORD *)v20 - 1) = v21;
        v20 -= 4;
      }
      *(_QWORD *)v5 = v20;
      *(_QWORD *)(v5 + 8) = v13;
      *(_QWORD *)(v5 + 16) = &v19[4 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    *(_QWORD *)(v5 + 8) = v13;
    if (v7 < v10)
    {
      do
      {
        v40 = *(_DWORD *)&(*a2)[4 * v7];
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v39, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v40);
        Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v39);
        if (Vertex != -1)
        {
          for (i = Vertex;
                i != -1;
                i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v39))
          {
            v24 = (unint64_t)i >> 6;
            if ((*(_QWORD *)(*a4 + 8 * v24) & (1 << i)) == 0)
            {
              v26 = a2[1];
              v25 = (unint64_t)a2[2];
              if ((unint64_t)v26 >= v25)
              {
                v28 = *a2;
                v29 = (v26 - *a2) >> 2;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v31 = v25 - (_QWORD)v28;
                if (v31 >> 1 > v30)
                  v30 = v31 >> 1;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                  v32 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                {
                  v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v32);
                  v28 = *a2;
                  v26 = a2[1];
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[4 * v29];
                *(_DWORD *)v34 = i;
                v27 = v34 + 4;
                while (v26 != v28)
                {
                  v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                *a2 = v34;
                a2[1] = v27;
                a2[2] = &v33[4 * v32];
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *(_DWORD *)v26 = i;
                v27 = v26 + 4;
              }
              a2[1] = v27;
              *(_QWORD *)(*a4 + 8 * v24) |= 1 << i;
            }
          }
        }
        ++v7;
      }
      while (v7 != v10);
    }
    v8 = ((unint64_t)(a2[1] - *a2) >> 2);
    v7 = v10;
    v5 = a3;
  }
  while (v10 != v8);
}

void cv3d::cv::gess::isochart::IsoChartMesh::DriveGraphCutByAngle(uint64_t a1, cv3d::cv::gess::isochart::CGraphcut *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, float a7)
{
  uint64_t v7;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;

  v7 = *(_QWORD *)(a1 + 256);
  if (*(_QWORD *)(a1 + 264) != v7)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_OWORD *)(v7 + 16 * v15);
      v18 = *(std::__shared_weak_count **)(v7 + 16 * v15 + 8);
      if (*((_QWORD *)&v17 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateSubChartAdjacentChart((_QWORD *)v17, v16, a4);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v7 = *(_QWORD *)(a1 + 256);
      v23 = *(_QWORD *)(a1 + 264);
      v15 = ++v16;
    }
    while (v16 < (unint64_t)((v23 - v7) >> 4));
    if (v23 != v7)
    {
      v24 = 0;
      v25 = 0;
      do
      {
        v26 = (uint64_t *)(v7 + 16 * v24);
        v27 = *v26;
        v28 = *(_QWORD *)(*v26 + 232);
        if (*(_QWORD *)(*v26 + 240) != v28)
        {
          v29 = 0;
          do
          {
            v30 = *(_DWORD *)(v28 + 4 * v29);
            if (v25 < v30)
            {
              cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle(a1, v25, v30, a2, a3, a4, a5, a6, a7);
              v27 = *v26;
            }
            ++v29;
            v28 = *(_QWORD *)(v27 + 232);
          }
          while (v29 < (*(_QWORD *)(v27 + 240) - v28) >> 2);
          v7 = *(_QWORD *)(a1 + 256);
          v23 = *(_QWORD *)(a1 + 264);
        }
        v24 = ++v25;
      }
      while (v25 < (unint64_t)((v23 - v7) >> 4));
    }
  }
}

void sub_23C593A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateSubChartAdjacentChart(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  __int32 v23;
  unsigned int HEdge;
  void *__p[2];
  char v26;
  int v27;

  v6 = (uint64_t)(a1 + 29);
  a1[30] = a1[29];
  v7 = a1[5];
  v9 = *(_QWORD *)(v7 + 104);
  v8 = *(_QWORD *)(v7 + 112);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  v27 = -1;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v7 + 8), (uint64_t)&v27, (unsigned __int8 *)__p);
  v12 = v8 - v9;
  if (v26 < 0)
    operator delete(__p[0]);
  v13 = (v12 >> 2);
  if ((v12 >> 2))
  {
    v14 = 0;
    do
    {
      v15 = a1[5];
      LODWORD(__p[0]) = v11;
      v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v15 + 8), (unsigned int *)__p, v10);
      v19 = *(_QWORD *)(v16 + 40);
      if (v14 >= (*(_QWORD *)(v16 + 48) - v19) >> 2)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v16, v17, v18);
      v27 = *(_DWORD *)(v19 + 4 * v14);
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(__p, *(_QWORD *)(a1[35] + 40) + 104, &v27);
      while (1)
      {
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)__p);
        if (HEdge == -1)
          break;
        v20 = *(_QWORD *)(a1[35] + 40) + 104;
        v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v20, &HEdge);
        v22 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v20, v21) + 16);
        if ((_DWORD)v22 != -1)
        {
          v23 = *(_DWORD *)(*a3 + 4 * v22);
          if (v23 != a2)
            cv3d::cv::gess::isochart::AddNoduplicateItem(v6, v23);
        }
      }
      ++v14;
    }
    while (v14 != v13);
  }
}

void sub_23C593BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle(uint64_t a1, int a2, int a3, cv3d::cv::gess::isochart::CGraphcut *this, uint64_t *a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, float a9)
{
  unint64_t v9;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t i;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  int v53;
  const char *v54;
  uint64_t v55;
  unsigned int v58;
  void *v59[3];
  unsigned int v60;
  std::vector<int> v61;
  void *__p;
  char *v63;
  char *v64;

  __p = 0;
  v63 = 0;
  v64 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    v17 = 0;
    v18 = 0;
    v19 = (v9 >> 2);
    do
    {
      v20 = *a5;
      *(_DWORD *)(*a5 + 4 * v18) = -1;
      if (((*(_QWORD *)(*a7 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
      {
        v21 = *(_DWORD *)(*a6 + 4 * v18);
        if (v21 == a2 || v21 == a3)
        {
          v23 = (char *)__p;
          v24 = (v17 - (_BYTE *)__p) >> 2;
          *(_DWORD *)(v20 + 4 * v18) = v24;
          if (v17 >= v64)
          {
            v26 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v27 = v64 - v23;
            if ((v64 - v23) >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v64, v28);
              v23 = (char *)__p;
              v17 = v63;
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[4 * v24];
            *(_DWORD *)v30 = v18;
            v25 = v30 + 4;
            while (v17 != v23)
            {
              v31 = *((_DWORD *)v17 - 1);
              v17 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            __p = v30;
            v63 = v25;
            v64 = &v29[4 * v28];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_DWORD *)v17 = v18;
            v25 = v17 + 4;
          }
          v63 = v25;
          v17 = v25;
        }
      }
      ++v18;
    }
    while (v18 != v19);
    if (__p != v17)
    {
      cv3d::cv::gess::isochart::CGraphcut::Clear(this);
      v32 = v17 - (_BYTE *)__p;
      v33 = ((unint64_t)(v17 - (_BYTE *)__p) >> 2);
      cv3d::cv::gess::isochart::CMaxFlow::InitGraphCut(this, v33, 0, 6);
      std::vector<int>::vector(&v61, v33);
      v34 = v32 >> 2;
      v55 = 4 * v33;
      if ((v32 >> 2))
      {
        v35 = 0;
        do
        {
          v36 = cv3d::cv::gess::isochart::CGraphcut::AddNode(this);
          v61.__begin_[v35 / 4] = v36;
          v35 += 4;
        }
        while (v55 != v35);
        if (v33)
        {
          v37 = 0;
          do
          {
            v60 = *((_DWORD *)__p + v37);
            std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v59, 3uLL);
            v38 = v33;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(_QWORD *)(a1 + 40), &v60, v59);
            for (i = 0; i != 12; i += 4)
            {
              v58 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)((char *)v59[0] + i));
              v40 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v58);
              if ((*v40 & v41) == 0)
              {
                v42 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, &v58) + 16);
                if (((*(_QWORD *)(*a7 + ((v42 >> 3) & 0x1FFFFFF8)) >> v42) & 1) != 0)
                {
                  v43 = *(unsigned int *)(*a5 + 4 * v42);
                  if ((_DWORD)v43 != -1)
                  {
                    v44 = *(unsigned int *)(*a5 + 4 * v60);
                    if (v44 >= v34)
                    {
                      v53 = 317;
                      v54 = "face_graph_node_id[father_fh.Index()] < node_number";
                      goto LABEL_66;
                    }
                    if (v43 >= v34)
                    {
                      v53 = 318;
                      v54 = "face_graph_node_id[adj_fh.Index()] < node_number";
LABEL_66:
                      __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", v53, v54);
                    }
                    cv3d::cv::gess::isochart::CGraphcut::AddEges(this, v61.__begin_[v44], v61.__begin_[v43], 1.0 / (float)((float)(*(float *)(*a8 + 4 * v58) / a9) + 1.0), 1.0 / (float)((float)(*(float *)(*a8 + 4 * v58) / a9) + 1.0));
                  }
                }
                else
                {
                  v45 = *(unsigned int *)(*a5 + 4 * v60);
                  if (v45 >= v34)
                    __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 322, "face_graph_node_id[father_fh.Index()] < node_number");
                  v46 = 3.4028e38;
                  if (*(_DWORD *)(*a6 + 4 * v42) == a2)
                    v47 = 3.4028e38;
                  else
                    v47 = 0.0;
                  if (*(_DWORD *)(*a6 + 4 * v42) == a2)
                    v46 = 0.0;
                  cv3d::cv::gess::isochart::CGraphcut::SetWeights(this, v61.__begin_[v45], v47, v46);
                }
              }
            }
            if (v59[0])
            {
              v59[1] = v59[0];
              operator delete(v59[0]);
            }
            ++v37;
            v33 = v38;
          }
          while (v37 != v38);
        }
      }
      LODWORD(v59[0]) = 0;
      cv3d::cv::gess::isochart::CGraphcut::CutGraph(this, (float *)v59);
      if (v33)
      {
        v48 = 0;
        do
        {
          v49 = *(unsigned int *)((char *)__p + v48);
          v50 = *(unsigned int *)(*a5 + 4 * v49);
          if (v50 >= v34)
            __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 339, "face_graph_node_id[face_id] < node_number");
          v51 = cv3d::cv::gess::isochart::CGraphcut::IsInSourceDomain(this, v61.__begin_[v50]);
          v52 = a3;
          if (v51)
            v52 = a2;
          *(_DWORD *)(*a6 + 4 * v49) = v52;
          v48 += 4;
        }
        while (v55 != v48);
      }
      if (v61.__begin_)
      {
        v61.__end_ = v61.__begin_;
        operator delete(v61.__begin_);
      }
      v17 = (char *)__p;
    }
    if (v17)
    {
      v63 = v17;
      operator delete(v17);
    }
  }
}

void sub_23C594050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::AddNoduplicateItem(uint64_t a1, __int32 a2)
{
  __int32 *v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;
  unint64_t v8;
  _DWORD *v9;
  __int32 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int32 *v16;
  char *v17;
  __int32 v18;

  v4 = *(__int32 **)(a1 + 8);
  v5 = wmemchr(*(__int32 **)a1, a2, ((uint64_t)v4 - *(_QWORD *)a1) >> 2);
  if (v5)
    v6 = v5;
  else
    v6 = v4;
  v7 = *(__int32 **)(a1 + 8);
  if (v6 == v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v6 >= v8)
    {
      v10 = *(__int32 **)a1;
      v11 = ((uint64_t)v7 - *(_QWORD *)a1) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = v8 - (_QWORD)v10;
      if (v13 >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 16, v14);
        v10 = *(__int32 **)a1;
        v6 = *(__int32 **)(a1 + 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = (__int32 *)&v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = a2;
      v9 = v16 + 1;
      while (v6 != v10)
      {
        v18 = *--v6;
        *--v16 = v18;
      }
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v17;
      if (v10)
        operator delete(v10);
    }
    else
    {
      *v6 = a2;
      v9 = v6 + 1;
    }
    *(_QWORD *)(a1 + 8) = v9;
  }
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeBoundaryByStretch(std::vector<unsigned int> *a1, uint64_t *a2, uint64_t a3, unint64_t a4, _BYTE *a5)
{
  unsigned int *value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  float v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23[3];
  std::vector<unsigned int> v24;
  void *v25[3];
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;

  *a5 = 0;
  if (a4 >= 2
    && (std::vector<unsigned int>::pointer)((char *)a1[11].__begin_ - (char *)a1[10].__end_cap_.__value_) >= (std::vector<unsigned int>::pointer)0x20)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    value = a1[1].__end_cap_.__value_;
    v12 = *((_QWORD *)value + 19);
    v11 = *((_QWORD *)value + 20);
    v14 = *((_QWORD *)value + 13);
    v13 = *((_QWORD *)value + 14);
    std::vector<float>::vector(v25, -858993459 * ((*((_QWORD *)value + 17) - *((_QWORD *)value + 16)) >> 2));
    std::vector<unsigned int>::vector(&v24, ((char *)a1[11].__begin_ - (char *)a1[10].__end_cap_.__value_) >> 4);
    std::vector<BOOL>::vector(v23, ((unint64_t)(v11 - v12) >> 2));
    v20 = 0;
    v21 = 0;
    v22 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v20, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    __p = 0;
    v18 = 0;
    v19 = 0;
    v16 = 0.0;
    if (cv3d::cv::gess::isochart::IsoChartMesh::CalculateEdgeAngleDistance((uint64_t)a1, (uint64_t *)v25, &v16))
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsFuzzyRegion(a1, (uint64_t)&v26, (uint64_t *)a3, v23, &v24);
      std::vector<float>::resize((uint64_t)&__p, ((v27 - v26) >> 2) * ((unint64_t)(v13 - v14) >> 2));
      cv3d::cv::gess::isochart::IsoChartMesh::CalParamDistanceToAllLandmarks(a1, a2, &__p, &v26);
      v15 = 0;
      cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV(a1, (uint64_t *)&__p, (uint64_t *)&v26, &v15);
      if (v15)
      {
        cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByStretch(a1, (v27 - v26) >> 2, (_QWORD *)a3, v23, &v24, 2uLL, (uint64_t *)&__p, v25, v16);
        cv3d::cv::gess::isochart::IsoChartMesh::ApplyBoundaryOptResult((uint64_t)a1, (uint64_t *)a3, (_DWORD **)&v20, a4, a5);
      }
    }
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v23[0])
      operator delete(v23[0]);
    if (v24.__begin_)
    {
      v24.__end_ = v24.__begin_;
      operator delete(v24.__begin_);
    }
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
}

void sub_23C5943F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v23 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsFuzzyRegion(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  _QWORD *v48;
  void *__p[2];
  char v52;
  void *v53;
  int v54;

  std::vector<BOOL>::vector(&v53, ((*(_QWORD *)(a1[5] + 112) - *(_QWORD *)(a1[5] + 104)) >> 2));
  v7 = a1[32];
  v48 = a1;
  if (a1[33] != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (uint64_t **)(v7 + 16 * v8);
      v11 = (*v10)[5];
      std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_father");
      v54 = -1;
      v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v11 + 56), (uint64_t)&v54, (unsigned __int8 *)__p);
      if (v52 < 0)
        operator delete(__p[0]);
      v14 = (*v10)[5];
      LODWORD(__p[0]) = v13;
      v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v14 + 56), (unsigned int *)__p, v12);
      v16 = *v10;
      v17 = *(_QWORD *)((*v10)[5] + 160) - *(_QWORD *)((*v10)[5] + 152);
      if (v17)
      {
        v18 = v17 >> 2;
        v20 = v15 + 40;
        v19 = *(unsigned int **)(v15 + 40);
        v21 = (uint64_t)(*(_QWORD *)(v20 + 8) - (_QWORD)v19) >> 2;
        v22 = *a3;
        if (v18 <= 1)
          v18 = 1;
        do
        {
          if (!v21)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v23 = *v19++;
          *(_DWORD *)(v22 + 4 * v23) = v9;
          --v21;
          --v18;
        }
        while (v18);
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion(v16, a4, (_DWORD *)(*a5 + 4 * v8));
      v24 = (*v10)[5];
      std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
      v54 = -1;
      v26 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v24 + 8), (uint64_t)&v54, (unsigned __int8 *)__p);
      if (v52 < 0)
        operator delete(__p[0]);
      if (v26 == -1)
        __assert_rtn("CalSubchartsFuzzyRegion", "MeshOptimizeBoundaries.cpp", 464, "v_id_father_ah.Valid()");
      v27 = (*v10)[5];
      LODWORD(__p[0]) = v26;
      v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v27 + 8), (unsigned int *)__p, v25);
      v29 = *v10;
      v30 = (*v10)[9];
      if ((*v10)[10] != v30)
      {
        v31 = v28;
        v32 = 0;
        do
        {
          v33 = *(unsigned int *)(v30 + 4 * v32);
          v34 = *(_QWORD *)(v31 + 40);
          if (v33 >= (*(_QWORD *)(v31 + 48) - v34) >> 2)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v35 = *(unsigned int *)(v34 + 4 * v33);
          if (((1 << v35) & *((_QWORD *)v53 + (v35 >> 6))) == 0)
          {
            v37 = *(_DWORD **)(a2 + 8);
            v36 = *(_QWORD *)(a2 + 16);
            if ((unint64_t)v37 >= v36)
            {
              v39 = *(_DWORD **)a2;
              v40 = ((uint64_t)v37 - *(_QWORD *)a2) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v43);
                v39 = *(_DWORD **)a2;
                v37 = *(_DWORD **)(a2 + 8);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = v35;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *--v37;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *(_QWORD *)a2 = v45;
              *(_QWORD *)(a2 + 8) = v38;
              *(_QWORD *)(a2 + 16) = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v37 = v35;
              v38 = v37 + 1;
            }
            *(_QWORD *)(a2 + 8) = v38;
            *((_QWORD *)v53 + (v35 >> 6)) |= 1 << v35;
            v29 = *v10;
          }
          ++v32;
          v30 = v29[9];
        }
        while (v32 < (v29[10] - v30) >> 2);
      }
      v7 = v48[32];
      v8 = ++v9;
    }
    while (v9 < (unint64_t)((v48[33] - v7) >> 4));
  }
  if (v53)
    operator delete(v53);
}

void sub_23C5947E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalParamDistanceToAllLandmarks(_QWORD *a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  _DWORD *v4;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v44;
  unsigned int *v45;
  char *v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  int *v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  unsigned int *v57;
  int v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int *v61;
  void *__p;
  char *v63;
  char *v64;

  __p = 0;
  v63 = 0;
  v64 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v4 = (_DWORD *)a4[1];
  if (v4 == (_DWORD *)*a4)
  {
    v45 = 0;
    v46 = 0;
    v44 = a4[1];
  }
  else
  {
    v9 = 0;
    v10 = ((*(_QWORD *)(a1[5] + 112) - *(_QWORD *)(a1[5] + 104)) >> 2);
    v11 = 4 * v10;
    v4 = (_DWORD *)*a4;
    do
    {
      v12 = v4[v9];
      if (((*(_QWORD *)(a1[26] + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) != 0)
      {
        v14 = (char *)a1[9];
        v13 = (char *)a1[10];
        v15 = v13 - v14;
        if (v13 != v14)
        {
          v16 = 0;
          v17 = v15 >> 2;
          if (v17 <= 1)
            v17 = 1;
          while (1)
          {
            v18 = *(_DWORD *)v14;
            v14 += 4;
            if (v18 == (_DWORD)v12)
              break;
            v16 += v11;
            if (!--v17)
              goto LABEL_47;
          }
          v21 = __p;
          v22 = v63;
          v23 = (v63 - (_BYTE *)__p) >> 2;
          if (v10)
          {
            v24 = *a2;
            v25 = (_DWORD *)(*a3 + v11 * v23);
            v26 = v10;
            do
            {
              *v25++ = *(_DWORD *)(v24 + v16);
              v24 += 4;
              --v26;
            }
            while (v26);
          }
          if (v22 >= v64)
          {
            if ((unint64_t)(v23 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v32 = v64 - v21;
            v33 = v32 >> 1;
            if (v32 >> 1 <= (unint64_t)(v23 + 1))
              v33 = v23 + 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v34 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v64, v34);
            else
              v35 = 0;
            v40 = &v35[4 * v23];
            *(_DWORD *)v40 = v12;
            v27 = v40 + 4;
            v42 = (char *)__p;
            v41 = v63;
            if (v63 != __p)
            {
              do
              {
                v43 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v40 - 1) = v43;
                v40 -= 4;
              }
              while (v41 != v42);
              v41 = (char *)__p;
            }
            __p = v40;
            v63 = v27;
            v64 = &v35[4 * v34];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_DWORD *)v22 = v12;
            v27 = v22 + 4;
          }
          v63 = v27;
        }
      }
      else
      {
        v19 = v60;
        if (v60 >= v61)
        {
          v28 = v60 - v59;
          if ((unint64_t)(v28 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v29 = ((char *)v61 - (char *)v59) >> 1;
          if (v29 <= v28 + 1)
            v29 = v28 + 1;
          if ((unint64_t)((char *)v61 - (char *)v59) >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v29;
          if (v30)
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v61, v30);
          else
            v31 = 0;
          v36 = (unsigned int *)&v31[4 * v28];
          *v36 = v12;
          v20 = v36 + 1;
          v38 = v59;
          v37 = v60;
          if (v60 != v59)
          {
            do
            {
              v39 = *--v37;
              *--v36 = v39;
            }
            while (v37 != v38);
            v37 = v59;
          }
          v59 = v36;
          v60 = v20;
          v61 = (unsigned int *)&v31[4 * v30];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v60 = v12;
          v20 = v19 + 1;
        }
        v60 = v20;
      }
LABEL_47:
      ++v9;
      v4 = (_DWORD *)*a4;
      v44 = a4[1];
    }
    while (v9 < (v44 - *a4) >> 2);
    v45 = v60;
    v46 = (char *)__p;
    if (v59 != v60)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistance((uint64_t)a1, &v59, (float *)(*a3 + 4 * ((unint64_t)(v63 - (_BYTE *)__p) >> 2) * v10));
      v4 = (_DWORD *)*a4;
      v44 = a4[1];
      v46 = (char *)__p;
      v45 = v59;
    }
  }
  v47 = v44 - (_QWORD)v4;
  v48 = v60;
  v49 = v60 - v45;
  if (v49 + ((v63 - v46) >> 2) != v47 >> 2)
    __assert_rtn("CalParamDistanceToAllLandmarks", "MeshOptimizeBoundaries.cpp", 592, "all_landmark.size() == old_landmark.size() + new_landmark.size()");
  v50 = (v63 - v46) >> 2;
  if (v63 != v46)
  {
    if (v50 <= 1)
      v51 = 1;
    else
      v51 = (v63 - v46) >> 2;
    v52 = v4;
    v53 = (int *)v46;
    do
    {
      v54 = *v53++;
      *v52++ = v54;
      --v51;
    }
    while (v51);
  }
  if (v48 == v45)
  {
    if (!v45)
      goto LABEL_67;
  }
  else
  {
    if (v49 <= 1)
      v55 = 1;
    else
      v55 = v49;
    v56 = &v4[v50];
    v57 = v45;
    do
    {
      v58 = *v57++;
      *v56++ = v58;
      --v55;
    }
    while (v55);
  }
  v60 = v45;
  operator delete(v45);
  v46 = (char *)__p;
LABEL_67:
  if (v46)
  {
    v63 = v46;
    operator delete(v46);
  }
}

void sub_23C594BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV(std::vector<unsigned int> *a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  std::vector<unsigned int> *v8;
  std::vector<unsigned int>::size_type v9;
  std::vector<unsigned int> **value;
  std::vector<unsigned int> **begin;
  std::vector<unsigned int>::size_type v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<unsigned int>::pointer v18;
  unsigned int *v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer v37;
  uint64_t v38;
  unint64_t v39;
  void *__p[2];
  char v41;
  int v42;

  *a4 = 0;
  v8 = a1 + 12;
  v9 = ((*((_QWORD *)a1[1].__end_cap_.__value_ + 14) - *((_QWORD *)a1[1].__end_cap_.__value_ + 13)) >> 2);
  if (v9 != a1[12].__end_ - a1[12].__begin_)
    std::vector<int>::resize(a1 + 12, v9);
  value = (std::vector<unsigned int> **)a1[10].__end_cap_.__value_;
  begin = (std::vector<unsigned int> **)a1[11].__begin_;
  while (value != begin)
  {
    v12 = (uint64_t)(*((_QWORD *)(*value)[1].__end_cap_.__value_ + 14) - *((_QWORD *)(*value)[1].__end_cap_.__value_ + 13)) >> 2;
    if (v12 != (*value)[12].__end_ - (*value)[12].__begin_)
      std::vector<int>::resize(*value + 12, v12);
    value += 2;
  }
  v13 = *a3;
  v14 = a3[1];
  v15 = v14 - *a3;
  if (v14 != *a3)
  {
    v16 = 0;
    v17 = v15 >> 2;
    v18 = v8->__begin_;
    if (v17 <= 1)
      v17 = 1;
    do
    {
      v18[*(unsigned int *)(v13 + 4 * v16)] = v16;
      ++v16;
    }
    while (v17 != v16);
  }
  v19 = a1[10].__end_cap_.__value_;
  if (a1[11].__begin_ == v19)
    goto LABEL_27;
  v20 = 0;
  do
  {
    v21 = &v19[4 * v20];
    v22 = *(_QWORD *)(*(_QWORD *)v21 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
    v42 = -1;
    v24 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v22 + 8), (uint64_t)&v42, (unsigned __int8 *)__p);
    if (v41 < 0)
      operator delete(__p[0]);
    v25 = *(_QWORD *)(*(_QWORD *)v21 + 40);
    LODWORD(__p[0]) = v24;
    v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v25 + 8), (unsigned int *)__p, v23);
    if (a1[3].__end_ == a1[3].__begin_)
      cv3d::cv::gess::isochart::IsoChartMesh::CalSubchartsLandmarkUV();
    v29 = *(_QWORD *)v21;
    v30 = *(unsigned int **)(*(_QWORD *)v21 + 72);
    v31 = *(_QWORD *)(*(_QWORD *)v21 + 80) - (_QWORD)v30;
    if (v31)
    {
      v32 = v31 >> 2;
      v33 = *(_QWORD *)(v26 + 40);
      v34 = (*(_QWORD *)(v26 + 48) - v33) >> 2;
      if (v32 <= 1)
        v32 = 1;
      do
      {
        v36 = *v30++;
        v35 = v36;
        if (v34 <= v36)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v26, v27, v28);
        *(_DWORD *)(*(_QWORD *)(v29 + 288) + 4 * v35) = v8->__begin_[*(unsigned int *)(v33 + 4 * v35)];
        --v32;
      }
      while (v32);
    }
    ++v20;
    v19 = a1[10].__end_cap_.__value_;
    v37 = a1[11].__begin_;
  }
  while (v20 < ((char *)v37 - (char *)v19) >> 4);
  __p[0] = 0;
  if (v37 == v19)
  {
LABEL_27:
    *a4 = 1;
  }
  else
  {
    v38 = 0;
    v39 = 0;
    while (1)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV(*(_QWORD *)&v19[v38], a2, 2uLL, (unint64_t *)__p);
      if (__p[0] != (void *)2)
        break;
      ++v39;
      v19 = a1[10].__end_cap_.__value_;
      v38 += 4;
      if (v39 >= ((char *)a1[11].__begin_ - (char *)v19) >> 4)
        goto LABEL_27;
    }
  }
}

void sub_23C594E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::ApplyGraphCutByStretch(_QWORD *a1, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unint64_t a6, uint64_t *a7, _QWORD *a8, float a9)
{
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  std::vector<unsigned int> v37;
  void *__p[3];
  void *v39[3];
  _BYTE v40[200];

  cv3d::cv::gess::isochart::CGraphcut::CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v40);
  v17 = (uint64_t *)a1[32];
  v18 = a1[33] - (_QWORD)v17;
  if (v18)
  {
    v19 = v18 >> 4;
    if (v19 <= 1)
      v19 = 1;
    do
    {
      v20 = *v17;
      v17 += 2;
      v21 = (uint64_t)(*(_QWORD *)(v20 + 80) - *(_QWORD *)(v20 + 72)) >> 2;
      if (a2 <= v21)
        a2 = v21;
      --v19;
    }
    while (v19);
  }
  v22 = a1[5];
  v24 = *(_QWORD *)(v22 + 152);
  v23 = *(_QWORD *)(v22 + 160);
  std::vector<float>::vector(v39, a2);
  std::vector<float>::vector(__p, (v23 - v24) >> 2);
  std::vector<unsigned int>::vector(&v37, (v23 - v24) >> 2);
  v25 = a1[32];
  if (a1[33] != v25)
  {
    v26 = 0;
    v27 = 0;
    do
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateSubChartAdjacentChart(*(_QWORD **)(v25 + 16 * v26), v27, a3);
      v25 = a1[32];
      v28 = a1[33];
      v26 = ++v27;
    }
    while (v27 < (unint64_t)((v28 - v25) >> 4));
    if (v28 != v25)
    {
      v29 = 0;
      v30 = 0;
      do
      {
        v31 = (uint64_t *)(v25 + 16 * v29);
        v32 = *v31;
        v33 = *(_QWORD *)(*v31 + 232);
        if (*(_QWORD *)(*v31 + 240) != v33)
        {
          v34 = 0;
          do
          {
            v35 = *(unsigned int *)(v33 + 4 * v34);
            if (v30 < v35 && (*(_DWORD *)(*a5 + 4 * v29) || *(_DWORD *)(*a5 + 4 * v35)))
            {
              cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle((uint64_t)a1, v30, v35, (cv3d::cv::gess::isochart::CGraphcut *)v40, (uint64_t *)&v37, a3, a4, a6, a9, a7, a8, (float **)v39, __p);
              v32 = *v31;
            }
            ++v34;
            v33 = *(_QWORD *)(v32 + 232);
          }
          while (v34 < (*(_QWORD *)(v32 + 240) - v33) >> 2);
          v25 = a1[32];
          v28 = a1[33];
        }
        v29 = ++v30;
      }
      while (v30 < (unint64_t)((v28 - v25) >> 4));
    }
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)v40);
}

void sub_23C595074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  cv3d::cv::gess::isochart::CGraphcut::~CGraphcut((cv3d::cv::gess::isochart::CGraphcut *)&a24);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *i;
  unsigned int j;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54[5];
  int v55;
  void *__p;
  _BYTE *v57;
  uint64_t v58;
  void *v59[3];
  void *v60;
  _BYTE *v61;
  uint64_t v62;
  unsigned int v63;

  cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks((cv3d::cv::gess::isochart::IsoChartMesh *)a1);
  if (!a1[35])
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkAndFuzzyRegion();
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v6 = (_QWORD *)a1[5];
  v7 = (uint64_t)(v6[14] - v6[13]) >> 2;
  v9 = v6[19];
  v8 = v6[20];
  std::vector<BOOL>::vector(v59, v7);
  cv3d::cv::gess::isochart::IsoChartMesh::FindNewBoundaryVert((uint64_t)a1, (uint64_t)&v60, v59);
  v10 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(&__p, "f:index_in_father");
  v54[0] = -1;
  v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v10 + 56), (uint64_t)v54, (unsigned __int8 *)&__p);
  if (SHIBYTE(v58) < 0)
    operator delete(__p);
  v13 = v8 - v9;
  if (v60 == v61)
  {
    v27 = (v13 >> 2);
    if ((v13 >> 2))
    {
      v28 = 0;
      do
      {
        v29 = a1[5];
        LODWORD(__p) = v12;
        v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v29 + 56), (unsigned int *)&__p, v11);
        v31 = *(_QWORD *)(v30 + 40);
        if (v28 >= (*(_QWORD *)(v30 + 48) - v31) >> 2)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v31 + 4 * v28) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v31 + 4 * v28));
        ++v28;
      }
      while (v27 != v28);
    }
    *a3 = 0;
  }
  else
  {
    __p = 0;
    v57 = 0;
    v58 = 0;
    cv3d::cv::gess::isochart::IsoChartMesh::SpreadFuzzyVert((uint64_t)a1, (char **)&v60, (uint64_t)&__p, v59);
    if (v57 == __p)
      __assert_rtn("CalculateLandmarkAndFuzzyRegion", "MeshOptimizeBoundaries.cpp", 509, "max_level > 0");
    v14 = (v57 - (_BYTE *)__p) >> 2;
    v15 = (float)((float)(unint64_t)v14 * 0.3) + 0.5;
    v16 = v14 - 1;
    if (v16 >= (unint64_t)v15)
      v17 = (unint64_t)v15;
    else
      v17 = v16;
    do
    {
      v18 = v17;
      v19 = *((unsigned int *)__p + v17);
      v20 = v7 - v19;
      --v17;
    }
    while (v18 && v20 < 0x19);
    if (v20 <= 0x18)
    {
      if ((_DWORD)v7)
      {
        v32 = 0;
        v33 = (char *)v59[0];
        do
        {
          *(_QWORD *)&v33[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v32);
          ++v32;
        }
        while (v7 != v32);
      }
    }
    else
    {
      v21 = (v61 - (_BYTE *)v60) >> 2;
      v22 = v21 > v19;
      v23 = v21 - v19;
      if (v22)
      {
        v24 = (char *)v59[0];
        v25 = (unsigned int *)((char *)v60 + 4 * v19);
        do
        {
          v26 = *v25++;
          *(_QWORD *)&v24[((unint64_t)v26 >> 3) & 0x1FFFFFF8] &= ~(1 << v26);
          --v23;
        }
        while (v23);
      }
    }
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks((uint64_t)a1, v59);
    if (v18)
    {
      *a3 = v17;
      if ((v13 >> 2))
      {
        v35 = 0;
        do
        {
          v36 = a1[5];
          v54[0] = v12;
          v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v36 + 56), v54, v34);
          v38 = *(_QWORD *)(v37 + 40);
          if (v35 >= (*(_QWORD *)(v37 + 48) - v38) >> 2)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v38 + 4 * v35) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v38 + 4 * v35);
          ++v35;
        }
        while ((v13 >> 2) != v35);
      }
      v39 = *((unsigned int *)__p + v17 + 1);
      for (i = v60; v39 < (v61 - (_BYTE *)v60) >> 2; i = v60)
      {
        v55 = i[v39];
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v54, a1[5] + 104, &v55);
        for (j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v54);
              ;
              j = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v54))
        {
          v53 = j;
          if (j == -1)
            break;
          v42 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1[5], *(_DWORD *)(a1[5] + 180), j);
          if ((*v42 & v43) == 0)
          {
            v44 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1[5] + 104, &v53) + 16);
            v45 = a1[5];
            v63 = v12;
            v47 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v45 + 56), &v63, v46);
            v48 = *(_QWORD *)(v47 + 40);
            if (v44 >= (*(_QWORD *)(v47 + 48) - v48) >> 2)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v48 + 4 * v44) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v48 + 4 * v44));
          }
        }
        ++v39;
      }
    }
    else
    {
      *a3 = 0;
      if ((v13 >> 2))
      {
        v49 = 0;
        do
        {
          v50 = a1[5];
          v54[0] = v12;
          v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v50 + 56), v54, v34);
          v52 = *(_QWORD *)(v51 + 40);
          if (v49 >= (*(_QWORD *)(v51 + 48) - v52) >> 2)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(*a2 + (((unint64_t)*(unsigned int *)(v52 + 4 * v49) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v52 + 4 * v49));
          ++v49;
        }
        while ((v13 >> 2) != v49);
      }
    }
    if (__p)
    {
      v57 = __p;
      operator delete(__p);
    }
  }
  if (v59[0])
    operator delete(v59[0]);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
}

void sub_23C5955B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  float *v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int *v32;
  float *v33;
  float *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  float v38;
  float *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float *v56[3];
  void *__p[2];
  char v58;
  unsigned int v59;

  if (*a2 == a2[1])
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV();
  if (!*(_QWORD *)(a1 + 280))
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarkUV();
  v8 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  LODWORD(v56[0]) = -1;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v8 + 8), (uint64_t)v56, (unsigned __int8 *)__p);
  if (v58 < 0)
    operator delete(__p[0]);
  v11 = *(_QWORD *)(a1 + 40);
  LODWORD(__p[0]) = v10;
  v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v11 + 8), (unsigned int *)__p, v9);
  v14 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v15 = (v13 - v14) >> 2;
  std::vector<float>::vector(__p, v15 * v15);
  v16 = (float *)__p[0];
  if (v13 != v14)
  {
    v17 = 0;
    v18 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40) + 112)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40) + 104)) >> 2;
    v19 = *(_QWORD *)(v12 + 40);
    v20 = (*(_QWORD *)(v12 + 48) - v19) >> 2;
    v21 = *(_QWORD *)(a1 + 72);
    v22 = v15 - 1;
    if (v15 <= 1)
      v23 = 1;
    else
      v23 = (v13 - v14) >> 2;
    v24 = (float *)((char *)__p[0] + 4);
    v25 = 4 * v15 + 4;
    v26 = (float *)((char *)__p[0] + 4 * v15);
    v27 = (unsigned int *)(v21 + 4);
    do
    {
      v28 = *(unsigned int *)(v21 + 4 * v17);
      v16[v17 + v17 * v15] = 0.0;
      if (++v17 < v15)
      {
        v29 = *(_QWORD *)(a1 + 288);
        v30 = *(_DWORD *)(v29 + 4 * v28) * v18;
        v31 = *a2;
        v32 = v27;
        v33 = v26;
        v34 = v24;
        v35 = v22;
        do
        {
          v37 = *v32++;
          v36 = v37;
          if (v20 <= v37)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          if (v20 <= v28)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v38 = *(float *)(v31 + 4 * (*(_DWORD *)(v19 + 4 * v28) + *(_DWORD *)(v29 + 4 * v36) * v18));
          if (v38 >= *(float *)(v31 + 4 * (*(_DWORD *)(v19 + 4 * v36) + v30)))
            v38 = *(float *)(v31 + 4 * (*(_DWORD *)(v19 + 4 * v36) + v30));
          *v33 = v38;
          *v34++ = v38;
          v33 += v15;
          --v35;
        }
        while (v35);
      }
      --v22;
      v24 = (float *)((char *)v24 + v25);
      v26 = (float *)((char *)v26 + v25);
      ++v27;
    }
    while (v17 != v23);
  }
  cv3d::cv::gess::isochart::IsoMap::Init((cv3d::cv::gess::isochart::IsoMap *)(a1 + 120), (v13 - v14) >> 2, v16);
  cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen((cv3d::cv::gess::isochart::IsoMap *)(a1 + 120), a3, a4);
  if (*a4 != a3)
    __assert_rtn("CalculateLandmarkUV", "MeshOptimizeBoundaries.cpp", 679, "select_primary_dimension == calculated_primary_dimension");
  std::vector<float>::vector(v56, v15 * a3);
  cv3d::cv::gess::isochart::IsoMap::GetDestineVectors((cv3d::cv::gess::isochart::IsoMap *)(a1 + 120), a3, v56[0]);
  v39 = v56[0];
  v40 = *(_QWORD *)(a1 + 40);
  v59 = *(_DWORD *)(a1 + 192);
  v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v40 + 80), &v59, v41);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 32))(v42, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2);
  if (v13 != v14)
  {
    v44 = 0;
    if (v15 <= 1)
      v15 = 1;
    v45 = (int *)(v39 + 1);
    do
    {
      v46 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v44);
      v47 = *(v45 - 1);
      v48 = *(_QWORD *)(a1 + 40);
      v59 = *(_DWORD *)(a1 + 192);
      v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v48 + 80), &v59, v43);
      v51 = *(_QWORD *)(v49 + 40);
      if (v46 >= (*(_QWORD *)(v49 + 48) - v51) >> 3
        || (*(_DWORD *)(v51 + 8 * v46) = v47,
            v52 = *v45,
            v53 = *(_QWORD *)(a1 + 40),
            v59 = *(_DWORD *)(a1 + 192),
            v54 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v53 + 80), &v59, v50), v55 = *(_QWORD *)(v54 + 40), v46 >= (*(_QWORD *)(v54 + 48) - v55) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v55 + 8 * v46 + 4) = v52;
      ++v44;
      v45 += a3;
    }
    while (v15 != v44);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23C5959F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::OptimizeOneBoundaryByAngle(uint64_t a1, unsigned int a2, unsigned int a3, cv3d::cv::gess::isochart::CGraphcut *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, unint64_t a8, float a9, uint64_t *a10, _QWORD *a11, float **a12, _QWORD *a13)
{
  uint64_t v13;
  unint64_t v14;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  std::vector<int>::size_type v38;
  uint64_t v39;
  float v40;
  uint64_t *v41;
  uint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  float v46;
  int v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  unsigned int *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unint64_t v56;
  std::vector<int>::size_type v57;
  std::vector<int>::size_type v58;
  float v59;
  float v60;
  std::vector<int>::size_type v61;
  float v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  std::vector<int>::size_type v66;
  unsigned int v67;
  int v68;
  const char *v69;
  cv3d::cv::gess::isochart::CGraphcut *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v75;
  unsigned int v76;
  void *__p[3];
  unsigned int v78;
  std::vector<int> v79;
  void *v80;
  char *v81;
  char *v82;

  v13 = *(_QWORD *)(a1 + 256);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    v22 = 0;
    v23 = 0;
    v24 = (v14 >> 2);
    v71 = (uint64_t *)(v13 + 16 * a3);
    v72 = (uint64_t *)(v13 + 16 * a2);
    do
    {
      v25 = *a5;
      *(_DWORD *)(*a5 + 4 * v23) = -1;
      if (((*(_QWORD *)(*a7 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v26 = *(_DWORD *)(*a6 + 4 * v23);
        if (v26 == a2 || v26 == a3)
        {
          v28 = (char *)v80;
          v29 = (v22 - (_BYTE *)v80) >> 2;
          *(_DWORD *)(v25 + 4 * v23) = v29;
          if (v22 >= v82)
          {
            v31 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v32 = v82 - v28;
            if ((v82 - v28) >> 1 > v31)
              v31 = v32 >> 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
              v33 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v82, v33);
              v28 = (char *)v80;
              v22 = v81;
            }
            else
            {
              v34 = 0;
            }
            v35 = &v34[4 * v29];
            *(_DWORD *)v35 = v23;
            v30 = v35 + 4;
            while (v22 != v28)
            {
              v36 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v35 - 1) = v36;
              v35 -= 4;
            }
            v80 = v35;
            v81 = v30;
            v82 = &v34[4 * v33];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_DWORD *)v22 = v23;
            v30 = v22 + 4;
          }
          v81 = v30;
          v22 = v30;
        }
      }
      ++v23;
    }
    while (v23 != v24);
    if (v80 != v22)
    {
      v70 = a4;
      v37 = 0;
      v38 = (v22 - (_BYTE *)v80) >> 2;
      if (v38 <= 1)
        v39 = 1;
      else
        v39 = (v22 - (_BYTE *)v80) >> 2;
      v75 = v39;
      v40 = 0.0;
      v41 = a10;
      do
      {
        v42 = *((unsigned int *)v80 + v37);
        v43 = cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion(a1, *((_DWORD *)v80 + v37), *v72, a12, a8, v41);
        v44 = vabds_f32(v43, cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion(a1, v42, *v71, a12, a8, v41));
        *(float *)(*a13 + 4 * v42) = v44;
        v40 = v40 + v44;
        ++v37;
        v41 = a10;
      }
      while (v75 != v37);
      std::vector<int>::vector(&v79, v38);
      cv3d::cv::gess::isochart::CGraphcut::Clear(v70);
      cv3d::cv::gess::isochart::CMaxFlow::InitGraphCut(v70, v38, 0, 6);
      v45 = 0;
      do
      {
        v47 = cv3d::cv::gess::isochart::CGraphcut::AddNode(v70);
        v79.__begin_[v45++] = v47;
      }
      while (v75 != v45);
      v48 = 0;
      do
      {
        v78 = *((_DWORD *)v80 + v48);
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
        cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(*(_QWORD *)(a1 + 40), &v78, __p);
        for (i = 0; i != 12; i += 4)
        {
          v76 = *(_DWORD *)((char *)__p[0] + i);
          v50 = *(_QWORD *)(a1 + 40);
          v51 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v50 + 104, &v76);
          v52 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v50, *(_DWORD *)(v50 + 180), *v51);
          if ((*v52 & v53) == 0)
          {
            v54 = *(_QWORD *)(a1 + 40) + 104;
            v55 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v54, &v76);
            v56 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v54, v55) + 16);
            if (((*(_QWORD *)(*a7 + ((v56 >> 3) & 0x1FFFFFF8)) >> v56) & 1) != 0)
            {
              v57 = *(unsigned int *)(*a5 + 4 * v56);
              if ((_DWORD)v57 != -1)
              {
                if (v38 <= v57)
                {
                  v68 = 811;
                  v69 = "face_graph_node_id[adjacent_face_id] < node_number";
                  goto LABEL_69;
                }
                v58 = *(unsigned int *)(*a5 + 4 * v78);
                if (v38 <= v58)
                {
                  v68 = 812;
                  v69 = "face_graph_node_id[father_fh.Index()] < node_number";
LABEL_69:
                  __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", v68, v69);
                }
                v59 = 0.650000006 / ((float)(*(float *)(*a11 + 4 * v76) / a9) + 1.0);
                v46 = (v40 + v40) / (float)v38;
                v60 = v59
                    + (float)((float)((float)(*(float *)(*a13 + 4 * v78) + *(float *)(*a13 + 4 * v56)) / v46) * 0.35);
                cv3d::cv::gess::isochart::CGraphcut::AddEges(v70, v79.__begin_[v58], v79.__begin_[v57], v60, v60);
              }
            }
            else
            {
              v61 = *(unsigned int *)(*a5 + 4 * v78);
              if (v38 <= v61)
                __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 817, "face_graph_node_id[father_fh.Index()] < node_number");
              v62 = 3.4028e38;
              if (*(_DWORD *)(*a6 + 4 * v56) == a2)
                v63 = 3.4028e38;
              else
                v63 = 0.0;
              if (*(_DWORD *)(*a6 + 4 * v56) == a2)
                v62 = 0.0;
              cv3d::cv::gess::isochart::CGraphcut::SetWeights(v70, v79.__begin_[v61], v63, v62);
            }
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        ++v48;
      }
      while (v48 != v75);
      LODWORD(__p[0]) = 0;
      cv3d::cv::gess::isochart::CGraphcut::CutGraph(v70, (float *)__p);
      v64 = 0;
      do
      {
        v65 = *((unsigned int *)v80 + v64);
        v66 = *(unsigned int *)(*a5 + 4 * v65);
        if (v38 <= v66)
          __assert_rtn("OptimizeOneBoundaryByAngle", "MeshOptimizeBoundaries.cpp", 836, "face_graph_node_id[face_id] < node_number");
        if (cv3d::cv::gess::isochart::CGraphcut::IsInSourceDomain(v70, v79.__begin_[v66]))
          v67 = a2;
        else
          v67 = a3;
        *(_DWORD *)(*a6 + 4 * v65) = v67;
        ++v64;
      }
      while (v75 != v64);
      if (v79.__begin_)
      {
        v79.__end_ = v79.__begin_;
        operator delete(v79.__begin_);
      }
      v22 = (char *)v80;
    }
    if (v22)
    {
      v81 = v22;
      operator delete(v22);
    }
  }
}

void sub_23C596008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion(uint64_t a1, unsigned int a2, uint64_t a3, float **a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v12;
  float *v13;
  float *v14;
  uint64_t v15;
  float v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  uint64_t v33;
  float v34;
  void *__p[3];
  void *v37[3];
  void *v38[3];
  unsigned int v39;
  unsigned int v40;

  v39 = a2;
  if (a5 >= 0x1A)
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateFaceGeodesicDistortion();
  v7 = a5;
  std::vector<float>::vector(v38, 0x19uLL);
  std::vector<float>::vector(v37, 0x19uLL);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(*(_QWORD *)(a1 + 40), &v39, __p);
  for (i = 0; i != 3; ++i)
  {
    while (1)
    {
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertGeodesicCoord(a1, (uint64_t *)v38, *((_DWORD *)__p[0] + i), (_QWORD *)a3, a4, v7, a6);
      if (v7)
        break;
      if (++i == 3)
        goto LABEL_11;
    }
    v13 = (float *)v38[0];
    v14 = (float *)v37[0];
    v15 = v7;
    do
    {
      v16 = *v13++;
      *v14 = v16 + *v14;
      ++v14;
      --v15;
    }
    while (v15);
  }
  v17 = (float *)v37[0];
  do
  {
    *v17 = *v17 / 3.0;
    ++v17;
    --v7;
  }
  while (v7);
LABEL_11:
  v19 = *(_QWORD *)(a3 + 72);
  v18 = *(_QWORD *)(a3 + 80);
  v20 = *(_QWORD *)(a3 + 40);
  v40 = *(_DWORD *)(a3 + 192);
  v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v20 + 80), &v40, v12);
  v22 = (v18 - v19) >> 2;
  if (v18 == v19)
  {
    v28 = 0.0;
    if (!__p[0])
      goto LABEL_23;
  }
  else
  {
    v23 = 0;
    v25 = v21 + 40;
    v24 = *(_QWORD *)(v21 + 40);
    v26 = (*(_QWORD *)(v25 + 8) - v24) >> 3;
    if (v22 <= 1)
      v27 = 1;
    else
      v27 = (v18 - v19) >> 2;
    v28 = 0.0;
    do
    {
      v29 = *(unsigned int *)(*(_QWORD *)(a3 + 72) + 4 * v23);
      if (v26 <= v29)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v30 = 0;
      v31 = 0.0;
      v32 = (float)((float)((float)(*(float *)v37[0] - *(float *)(v24 + 8 * v29))
                          * (float)(*(float *)v37[0] - *(float *)(v24 + 8 * v29)))
                  + 0.0)
          + (float)((float)(*((float *)v37[0] + 1) - *(float *)(v24 + 8 * v29 + 4))
                  * (float)(*((float *)v37[0] + 1) - *(float *)(v24 + 8 * v29 + 4)));
      v33 = ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2)
          * *(unsigned int *)(*(_QWORD *)(a3 + 288) + 4 * v29);
      do
      {
        v31 = v31 + *(float *)(*a6 + 4 * (v33 + *(unsigned int *)((char *)__p[0] + v30)));
        v30 += 4;
      }
      while (v30 != 12);
      v34 = sqrtf(v32) + (float)(v31 / -3.0);
      v28 = v28 + (float)(v34 * v34);
      ++v23;
    }
    while (v23 != v27);
  }
  __p[1] = __p[0];
  operator delete(__p[0]);
LABEL_23:
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  return v28 / (float)v22;
}

void sub_23C5962EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertGeodesicCoord(uint64_t result, uint64_t *a2, int a3, _QWORD *a4, float **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;

  v8 = a4[9];
  v7 = a4[10];
  v9 = (v7 - v8) >> 2;
  if (v7 != v8)
  {
    v10 = (float *)a4[21];
    v11 = (*(_QWORD *)(*(_QWORD *)(result + 40) + 112) - *(_QWORD *)(*(_QWORD *)(result + 40) + 104)) >> 2;
    v12 = *(_QWORD *)(result + 288);
    v13 = *a7;
    v14 = *a5;
    if (v9 <= 1)
      v15 = 1;
    else
      v15 = (v7 - v8) >> 2;
    v16 = (unsigned int *)a4[9];
    do
    {
      v17 = *v16++;
      result = (a3 + *(_DWORD *)(v12 + 4 * v17) * v11);
      v18 = *(float *)(v13 + 4 * result) * *(float *)(v13 + 4 * result);
      *v14 = v18;
      v19 = *v10++;
      *v14++ = v19 - v18;
      --v15;
    }
    while (v15);
  }
  if (a6)
  {
    v20 = 0;
    v21 = a4[19];
    v22 = a4[20];
    v23 = *a2;
    v24 = *a5;
    if (v9 <= 1)
      v25 = 1;
    else
      v25 = (v7 - v8) >> 2;
    v26 = 4 * v9;
    do
    {
      *(_DWORD *)(v23 + 4 * v20) = 0;
      v27 = 0.0;
      if (v7 != v8)
      {
        v28 = v24;
        result = v22;
        v29 = v25;
        do
        {
          v30 = *v28++;
          v31 = v30;
          v32 = *(float *)result;
          result += 4;
          v27 = v27 + (float)(v31 * v32);
          *(float *)(v23 + 4 * v20) = v27;
          --v29;
        }
        while (v29);
      }
      v33 = *(float *)(v21 + 4 * v20);
      v34 = sqrtf(v33);
      v35 = v34 + v34;
      if (v33 >= 0.0)
        v36 = v35;
      else
        v36 = 0.0;
      *(float *)(v23 + 4 * v20++) = v27 / v36;
      v22 += v26;
    }
    while (v20 != a6);
  }
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

BOOL cv3d::cv::gess::isochart::IfNewPositionAcceptable(uint64_t a1, float *a2, _DWORD *a3, int *a4, _DWORD *a5)
{
  float v5;
  float v6;
  int v7;

  v5 = *a2;
  v6 = *(float *)(a1 + 28);
  if (*a2 < v6 && (*a3 | 2) == 2 || v5 > v6 && (*a3 | 2) == 3)
    return 1;
  if (vabds_f32(v5, v6) >= 0.000001)
    return 0;
  v7 = *(_DWORD *)(a1 + 8);
  if (*a4 < v7)
    return 1;
  return fabsf((float)(*a4 - v7)) < (float)((float)v7 * 0.05) && *(_DWORD *)(a1 + 16) < *a5;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::TetrisPacking(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, char a7, int a8)
{
  int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unsigned int v39;
  float v40;
  const char *v42;
  int v43;
  unsigned int v44;
  void *__p[2];
  char v46;
  uint64_t v47;
  int v48;

  v10 = *a6;
  *(_QWORD *)(a1 + 80) = 0;
  v11 = a1 + 80;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 76) = v10;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = -1;
  v12 = (_DWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = 1058642330;
  *(_WORD *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 752) = a7;
  *(_DWORD *)(a1 + 756) = a8;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v47 = 0;
  *v12 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v47, (unsigned __int8 *)__p);
  if (v46 < 0)
    operator delete(__p[0]);
  v13 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v13, (_DWORD *)(v11 + 28), (unsigned __int8 *)__p);
  if (v46 < 0)
    operator delete(__p[0]);
  v14 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v47) = 0;
  *(_DWORD *)(a1 + 112) = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v14 + 56), (uint64_t)&v47, (unsigned __int8 *)__p);
  if (v46 < 0)
    operator delete(__p[0]);
  v15 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v48 = 0;
  v47 = 0;
  *(_DWORD *)(a1 + 116) = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v15 + 56), (uint64_t)&v47, (unsigned __int8 *)__p);
  if (v46 < 0)
    operator delete(__p[0]);
  if (*v12 == -1)
  {
    v42 = "uvs_ah_.Valid()";
    v43 = 75;
    goto LABEL_44;
  }
  if (*(_DWORD *)(v11 + 28) == -1)
  {
    v42 = "g_ah_.Valid()";
    v43 = 76;
    goto LABEL_44;
  }
  if (*(_DWORD *)(a1 + 112) == -1)
  {
    v42 = "f_gid_ah_.Valid()";
    v43 = 77;
    goto LABEL_44;
  }
  if (*(_DWORD *)(a1 + 116) == -1)
  {
    v42 = "uv_ind_ah_.Valid()";
    v43 = 78;
LABEL_44:
    __assert_rtn("TetrisPacking", "TetrisPacking.cpp", v43, v42);
  }
  v17 = *(_QWORD *)(a1 + 32);
  LODWORD(v47) = *(_DWORD *)(v11 + 28);
  v18 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v17 + 80), (unsigned int *)&v47, v16);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  v20 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(v20 + 152);
  v21 = *(_QWORD *)(v20 + 160);
  v44 = v19;
  v23 = v19;
  std::vector<unsigned int>::reserve((std::vector<int> *)v11, v19);
  v24 = v21 - v22;
  if (((v21 - v22) & 0x3FFFFFFFCLL) != 0)
  {
    v25 = 0;
    v26 = 0;
    v27 = (v24 >> 2);
    do
    {
      if (v26 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 112), v25))
      {
        v29 = *(_DWORD **)(a1 + 88);
        v28 = *(_QWORD *)(a1 + 96);
        if ((unint64_t)v29 >= v28)
        {
          v31 = *(_DWORD **)v11;
          v32 = ((uint64_t)v29 - *(_QWORD *)v11) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v34 = v28 - (_QWORD)v31;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v35);
            v31 = *(_DWORD **)(a1 + 80);
            v29 = *(_DWORD **)(a1 + 88);
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * v32];
          *(_DWORD *)v37 = v25;
          v30 = v37 + 4;
          while (v29 != v31)
          {
            v38 = *--v29;
            *((_DWORD *)v37 - 1) = v38;
            v37 -= 4;
          }
          *(_QWORD *)(a1 + 80) = v37;
          *(_QWORD *)(a1 + 88) = v30;
          *(_QWORD *)(a1 + 96) = &v36[4 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v29 = v25;
          v30 = v29 + 1;
        }
        *(_QWORD *)(a1 + 88) = v30;
        ++v26;
      }
      ++v25;
    }
    while (v25 != v27);
  }
  if (v23 != (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2)
    __assert_rtn("TetrisPacking", "TetrisPacking.cpp", 91, "g_starts_.size() == g_size");
  *(_DWORD *)(a1 + 72) = v44;
  v39 = **(_DWORD **)(a1 + 48);
  if (**(_DWORD **)(a1 + 56) < v39)
    v39 = **(_DWORD **)(a1 + 56);
  v40 = (float)v39 * 0.0078125;
  if (v40 >= *(float *)(a1 + 76))
    v40 = *(float *)(a1 + 76);
  *(float *)(a1 + 76) = v40;
  return a1;
}

void sub_23C596BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  void **v18;
  void *v20;
  void *v21;
  void *v22;
  uint64_t i;
  void *v24;
  uint64_t j;
  void *v26;
  uint64_t k;
  void *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;

  v20 = (void *)v17[91];
  if (v20)
  {
    v17[92] = v20;
    operator delete(v20);
  }
  v21 = (void *)v17[88];
  if (v21)
  {
    v17[89] = v21;
    operator delete(v21);
  }
  __p = a9;
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v22 = (void *)v17[79];
  if (v22)
  {
    v17[80] = v22;
    operator delete(v22);
  }
  __p = v18 + 66;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v18 + 63;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -12; i -= 3)
  {
    v24 = (void *)v17[i + 70];
    if (v24)
    {
      v17[i + 71] = v24;
      operator delete(v24);
    }
  }
  for (j = 0; j != -12; j -= 3)
  {
    v26 = (void *)v17[j + 58];
    if (v26)
    {
      v17[j + 59] = v26;
      operator delete(v26);
    }
  }
  for (k = 0; k != -12; k -= 3)
  {
    v28 = (void *)v17[k + 46];
    if (v28)
    {
      v17[k + 47] = v28;
      operator delete(v28);
    }
  }
  __p = a10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v29 = *v18;
  if (*v18)
  {
    v17[11] = v29;
    operator delete(v29);
  }
  v30 = (_QWORD *)v17[3];
  if (v30 == v17)
  {
    v31 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_26;
    v31 = 5;
    v17 = (_QWORD *)v17[3];
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v31))(v17);
LABEL_26:
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::TetrisPacking::Run(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  std::vector<unsigned int>::pointer begin;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  cv3d::cv::gess::mesh::TriMesh *v64;
  void *__p[2];
  char v66;
  int v67;
  std::vector<unsigned int> v68;
  __int16 v69;

  cv3d::cv::gess::isochart::TetrisPacking::Initialize(this);
  v2 = *((_QWORD *)this + 3);
  if (!v2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 79);
    v4 = *((_QWORD *)this + 80) - v3;
    if (v4)
    {
      v5 = 0;
      v6 = v4 >> 2;
LABEL_5:
      *((_QWORD *)this + 82) = *(unsigned int *)(v3 + 4 * v5);
      v7 = v5++ == v6 - 1;
      v8 = (unsigned int *)(v3 + 4 * v5);
      if (v7)
        v8 = (unsigned int *)((char *)this + 72);
      *((_QWORD *)this + 83) = *v8;
      v9 = *((_QWORD *)this + 3);
      if (!v9 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) == 0)
      {
        std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)this + 73);
        std::vector<std::vector<unsigned char>>::resize((uint64_t *)this + 73, *((_QWORD *)this + 33));
        v10 = *((_QWORD *)this + 33);
        if (v10)
        {
          v11 = 0;
          for (i = 0; i < v10; ++i)
          {
            v13 = (unint64_t *)(*((_QWORD *)this + 73) + v11);
            v14 = *((_QWORD *)this + 32);
            v15 = v13[1] - *v13;
            if (v14 <= v15)
            {
              if (v14 < v15)
                v13[1] = *v13 + v14;
            }
            else
            {
              std::vector<unsigned char>::__append(v13, v14 - v15);
              v10 = *((_QWORD *)this + 33);
            }
            v11 += 24;
          }
        }
        *(float *)&v16 = cv3d::cv::gess::isochart::TetrisPacking::InitialSpacePercent(this);
        while (1)
        {
          *((_BYTE *)this + 124) = 0;
          *(float *)&v16 = cv3d::cv::gess::isochart::TetrisPacking::CreateUVAtlas(this, v16, v17, v18, v19);
          v20 = *((_QWORD *)this + 3);
          if (v20)
          {
            if (((*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v20 + 48))(v20, *(float *)&v16) & 1) != 0)
              break;
          }
          if (*((_BYTE *)this + 124))
          {
            ++*((_DWORD *)this + 41);
            cv3d::cv::gess::isochart::TetrisPacking::AdjustEstimatedPercent((uint64_t)this);
          }
          if (*((_BYTE *)this + 125))
            break;
          if (!*((_BYTE *)this + 124))
          {
            cv3d::cv::gess::isochart::TetrisPacking::ComputeFinalAtlasRect((uint64_t)this);
            cv3d::cv::gess::isochart::TetrisPacking::Normalize(this, v21, v22);
            *((_DWORD *)this + 41) = 0;
            v3 = *((_QWORD *)this + 79);
            v6 = (*((_QWORD *)this + 80) - v3) >> 2;
            if (v5 < v6)
              goto LABEL_5;
            goto LABEL_24;
          }
        }
      }
    }
    else
    {
LABEL_24:
      v23 = *((_QWORD *)this + 3);
      if (!v23 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23) & 1) == 0)
      {
        std::vector<unsigned int>::vector(&v68, *((unsigned int *)this + 18));
        v24 = *((_QWORD *)this + 79);
        v25 = *((_QWORD *)this + 80) - v24;
        if (v25)
        {
          v26 = 0;
          v27 = v25 >> 2;
          v28 = v25 >> 2 != 0;
          v29 = (v25 >> 2) - 1;
          begin = v68.__begin_;
          if (v29 == 0 || !v28)
            v27 = 1;
          do
          {
            v31 = *(unsigned int *)(v24 + 4 * v26);
            v32 = v26 + 1;
            v33 = (unsigned int *)(v24 + 4 * (v26 + 1));
            if (v26 == v29)
              v33 = (unsigned int *)((char *)this + 72);
            v34 = *v33;
            if (v31 < v34)
            {
              v35 = v34 - v31;
              v36 = (int *)(*((_QWORD *)this + 88) + 4 * v31);
              do
              {
                v37 = *v36++;
                begin[v37] = v26;
                --v35;
              }
              while (v35);
            }
            ++v26;
          }
          while (v32 != v27);
        }
        v38 = (uint64_t *)*((_QWORD *)this + 4);
        if (v38[20] != v38[19])
        {
          v39 = 0;
          v40 = 1;
          do
          {
            LODWORD(__p[0]) = *((_DWORD *)this + 28);
            v41 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v38 + 7, (unsigned int *)__p);
            v42 = *(_QWORD *)(v41 + 40);
            if (v39 >= (*(_QWORD *)(v41 + 48) - v42) >> 2
              || (v43 = v68.__begin_[*(unsigned int *)(v42 + 4 * v39)],
                  v44 = *((_QWORD *)this + 4),
                  LODWORD(__p[0]) = *((_DWORD *)this + 28),
                  v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v44 + 56), (unsigned int *)__p), v46 = *(_QWORD *)(v45 + 40), v39 >= (*(_QWORD *)(v45 + 48) - v46) >> 2))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_DWORD *)(v46 + 4 * v39) = v43;
            v39 = v40;
            v38 = (uint64_t *)*((_QWORD *)this + 4);
            ++v40;
          }
          while (v39 < (v38[20] - v38[19]) >> 2);
        }
        v67 = -1;
        std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
        v69 = 0;
        v48 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)v38 + 7, (uint64_t)&v69, (unsigned __int8 *)__p);
        v67 = v48;
        if (v66 < 0)
          operator delete(__p[0]);
        if (v48 == -1)
        {
          v49 = *((_QWORD *)this + 4);
          std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
          cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>(v49, &v67, (__int128 *)__p);
          if (v66 < 0)
            operator delete(__p[0]);
        }
        if (v67 == -1)
          __assert_rtn("Run", "TetrisPacking.cpp", 155, "face_gid_ah.Valid()");
        v50 = (uint64_t *)*((_QWORD *)this + 4);
        if (v50[20] != v50[19])
        {
          v51 = 0;
          v52 = 1;
          do
          {
            LODWORD(__p[0]) = *((_DWORD *)this + 28);
            v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v50 + 7, (unsigned int *)__p);
            v55 = *(_QWORD *)(v53 + 40);
            if (v51 >= (*(_QWORD *)(v53 + 48) - v55) >> 2
              || (v56 = *(_DWORD *)(v55 + 4 * v51),
                  v57 = *((_QWORD *)this + 4),
                  LODWORD(__p[0]) = v67,
                  v58 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)(v57 + 56), (unsigned int *)__p, v54), v59 = *(_QWORD *)(v58 + 40), v51 >= (*(_QWORD *)(v58 + 48) - v59) >> 1))
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            *(_WORD *)(v59 + 2 * v51) = v56;
            v51 = v52;
            v50 = (uint64_t *)*((_QWORD *)this + 4);
            ++v52;
          }
          while (v51 < (v50[20] - v50[19]) >> 2);
        }
        if (*((_DWORD *)this + 28) != -1)
        {
          cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>(v50 + 7, (unsigned int *)this + 28);
          v50 = (uint64_t *)*((_QWORD *)this + 4);
        }
        *((_DWORD *)this + 28) = -1;
        LODWORD(__p[0]) = *((_DWORD *)this + 27);
        v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v50 + 10, (unsigned int *)__p, v47);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 32))(v60, (uint64_t)(*((_QWORD *)this + 80) - *((_QWORD *)this + 79)) >> 2);
        v61 = *((_QWORD *)this + 4);
        LODWORD(__p[0]) = *((_DWORD *)this + 27);
        v63 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v61 + 80), (unsigned int *)__p, v62);
        if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 16))(v63) >= 2)
          cv3d::cv::gess::alg::SortFaceByGroupID(*((uint64_t ***)this + 4), v64);
        if (v68.__begin_)
        {
          v68.__end_ = v68.__begin_;
          operator delete(v68.__begin_);
        }
      }
    }
  }
}

void sub_23C5971F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::TetrisPacking::Initialize(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  float v2;
  float v3;
  uint64_t v4;
  uint64_t v5;

  *((float *)this + 33) = (float)**((unsigned int **)this + 7) / (float)**((unsigned int **)this + 6);
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::resize((uint64_t *)this + 85, *((unsigned int *)this + 18));
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 704), *((unsigned int *)this + 18));
  std::vector<cv3d::cv::gess::math::Matrix4T<float>>::resize((uint64_t *)this + 91, *((unsigned int *)this + 18));
  v2 = *((float *)this + 19);
  v3 = (float)(2 * (unint64_t)**((unsigned int **)this + 7)) + (float)(v2 * 2.0);
  *((_QWORD *)this + 32) = (unint64_t)(float)((float)(2 * (unint64_t)**((unsigned int **)this + 6))
                                                   + (float)(v2 * 2.0));
  *((_QWORD *)this + 33) = (unint64_t)v3;
  cv3d::cv::gess::isochart::TetrisPacking::PrepareChartsInfo(this, v4, v5);
  cv3d::cv::gess::isochart::TetrisPacking::SortCharts(this);
  cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture(this);
}

float cv3d::cv::gess::isochart::TetrisPacking::InitialSpacePercent(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  signed int v7;
  signed int v8;
  float *v9;
  float i;
  float v11;

  *((_DWORD *)this + 30) = 1058642330;
  *((_DWORD *)this + 168) = 0;
  v1 = *((_QWORD *)this + 82);
  v2 = *((_QWORD *)this + 83);
  if (v1 >= v2)
  {
    v3 = *((_QWORD *)this + 88);
    v4 = *((_QWORD *)this + 85);
    result = 0.0;
  }
  else
  {
    v3 = *((_QWORD *)this + 88);
    v4 = *((_QWORD *)this + 85);
    result = 0.0;
    v6 = *((_QWORD *)this + 82);
    do
      result = *(float *)(v4 + 232 * *(unsigned int *)(v3 + 4 * v6++) + 8) + result;
    while (v2 != v6);
    *((float *)this + 168) = result;
  }
  v7 = **((_DWORD **)this + 6);
  v8 = **((_DWORD **)this + 7);
  v9 = (float *)(v4 + 232 * *(unsigned int *)(v3 + 4 * v1) + 16);
  for (i = 0.6; ; *((float *)this + 30) = i)
  {
    v11 = sqrtf(result / (float)(i * (float)(v8 * v7)));
    *((float *)this + 72) = v11;
    if (v7 >= (int)vcvtps_s32_f32((float)(v9[4] - v9[2]) / v11)
      && v8 >= (int)vcvtps_s32_f32((float)(v9[5] - v9[3]) / v11))
    {
      break;
    }
    i = i / 1.01;
  }
  return result;
}

float cv3d::cv::gess::isochart::TetrisPacking::CreateUVAtlas(cv3d::cv::gess::isochart::TetrisPacking *this, double a2, double a3, double a4, double a5)
{
  __n128 v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t i;
  uint64_t v15;

  cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack(this, a2, a3, a4, a5);
  v11 = *((_QWORD *)this + 82);
  v12 = *((_QWORD *)this + 88);
  LODWORD(v13) = *(_DWORD *)(*((_QWORD *)this + 85) + 232 * *(unsigned int *)(v12 + 4 * v11) + 8);
  *((_DWORD *)this + 35) = LODWORD(v13);
  *((_DWORD *)this + 36) = 1;
  for (i = v11 + 1; i < *((_QWORD *)this + 83); ++i)
  {
    v15 = *((_QWORD *)this + 3);
    if (v15)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) != 0)
        return *(float *)&v13;
      v12 = *((_QWORD *)this + 88);
    }
    cv3d::cv::gess::isochart::TetrisPacking::PutChart((uint64_t)this, *(unsigned int *)(v12 + 4 * i), v13, v6, v7, v8, v9, v10);
    if (*((_BYTE *)this + 124))
      break;
    ++*((_DWORD *)this + 36);
    v12 = *((_QWORD *)this + 88);
    v6.n128_u32[0] = *((_DWORD *)this + 35);
    *(float *)&v13 = *(float *)(*((_QWORD *)this + 85) + 232 * *(unsigned int *)(v12 + 4 * i) + 8) + v6.n128_f32[0];
    *((_DWORD *)this + 35) = LODWORD(v13);
  }
  return *(float *)&v13;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::AdjustEstimatedPercent(uint64_t this)
{
  float v1;
  unsigned int v2;
  float v3;
  float v4;

  v1 = *(float *)(this + 120);
  v2 = *(_DWORD *)(this + 72);
  if (v2 > 0x1D)
  {
    v4 = (float)((float)(1.0 - (float)(*(float *)(this + 140) / *(float *)(this + 672))) * 0.25)
       + (float)((float)(1.0 - (float)((float)*(int *)(this + 144) / (float)v2)) / 10.0);
    if (v4 < 0.02)
      v4 = 0.01;
    if (v4 > 0.2)
      v4 = 0.2;
    v3 = v1 - v4;
    *(float *)(this + 120) = v3;
    if (*(_DWORD *)(this + 164) >= 0xC9u)
    {
      *(_BYTE *)(this + 125) = 1;
      *(_DWORD *)(*(_QWORD *)(this + 40) + 76) = 2;
      return this;
    }
  }
  else
  {
    v3 = (float)(v1 * *(float *)(this + 136)) + -0.005;
    *(float *)(this + 120) = v3;
  }
  if (v3 <= 0.0)
  {
    v3 = v1 * 0.9;
    *(float *)(this + 120) = v1 * 0.9;
  }
  *(float *)(this + 288) = sqrtf(*(float *)(this + 672)/ (float)(v3 * (float)(**(_DWORD **)(this + 56) * **(_DWORD **)(this + 48))));
  return this;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::ComputeFinalAtlasRect(uint64_t this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int v7;
  int v8;
  int v9;

  v1 = *(float *)(this + 76);
  v2 = (float)(*(_DWORD *)(this + 152) - *(_DWORD *)(this + 148)) - (float)(v1 * 2.0);
  v3 = (float)(*(_DWORD *)(this + 160) - *(_DWORD *)(this + 156)) - (float)(v1 * 2.0);
  v4 = (float)(int)v3;
  v5 = (float)(int)v2;
  v6 = *(float *)(this + 132);
  if ((float)(v4 / v5) <= v6)
  {
    v7 = (int)v2;
    v9 = vcvtms_s32_f32((float)(v5 * v6) + 0.5);
    v8 = (int)v2;
  }
  else
  {
    v7 = (int)v3;
    v8 = vcvtms_s32_f32((float)(v4 / v6) + 0.5);
    v9 = (int)v3;
  }
  *(_DWORD *)(this + 248) = v7;
  *(_QWORD *)(this + 272) = v8;
  *(_QWORD *)(this + 280) = v9;
  return this;
}

void cv3d::cv::gess::isochart::TetrisPacking::Normalize(cv3d::cv::gess::isochart::TetrisPacking *this, uint64_t a2, uint64_t a3)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  _OWORD v48[4];
  _OWORD v49[4];
  void *__p;
  float v51;
  __int128 v52;
  float v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  float v58;
  float v59;
  uint64_t v60;

  v4 = *((float *)this + 72);
  v5 = *((float *)this + 19);
  v6 = (float)*((int *)this + 39);
  v58 = -(float)(v4 * (float)(v5 + (float)*((int *)this + 37)));
  v59 = -(float)(v4 * (float)(v5 + v6));
  v57[0] = xmmword_23C603EC0;
  v57[1] = xmmword_23C605200;
  v57[2] = xmmword_23C605210;
  v60 = 0x3F80000000000000;
  v51 = (float)(1.0 / v4) / (float)*((int *)this + 62);
  v53 = v51;
  v52 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0x3F80000000000000;
  v7 = *((_QWORD *)this + 4);
  LODWORD(v49[0]) = *((_DWORD *)this + 26);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v7 + 80), (unsigned int *)v49, a3);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  LOBYTE(v49[0]) = 0;
  std::vector<BOOL>::vector(&__p, v9, (unsigned __int8 *)v49);
  v10 = *((_QWORD *)this + 82);
  if (v10 < *((_QWORD *)this + 83))
  {
    v11 = "Attribute.h";
    v12 = "operator[]";
    do
    {
      v13 = *(unsigned int *)(*((_QWORD *)this + 88) + 4 * v10);
      v14 = *((_QWORD *)this + 10);
      if ((_DWORD)v13 == *((_DWORD *)this + 18) - 1)
        v15 = ((*(_QWORD *)(*((_QWORD *)this + 4) + 160) - *(_QWORD *)(*((_QWORD *)this + 4) + 152)) >> 2);
      else
        v15 = *(unsigned int *)(v14 + 4 * (v13 + 1));
      v16 = *(unsigned int *)(v14 + 4 * v13);
      if (*(_BYTE *)(*((_QWORD *)this + 85) + 232 * v13 + 4))
      {
        cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)&v51, (uint64_t)v57, v48);
        cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)v48, *((_QWORD *)this + 91) + (v13 << 6), v49);
        if (v16 >= v15)
          goto LABEL_24;
        v46 = (float32x4_t)v49[1];
        v47 = (float32x4_t)v49[0];
        v44 = (float32x4_t)v49[3];
        v45 = (float32x4_t)v49[2];
        while (1)
        {
          v18 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((_QWORD *)this + 4), *((_DWORD *)this + 29), v16);
          for (i = 0; i != 12; i += 4)
          {
            v20 = *(unsigned int *)(v18 + i);
            v21 = v20 >> 6;
            v22 = 1 << v20;
            v23 = *((_QWORD *)__p + v21);
            if ((v22 & v23) == 0)
            {
              *((_QWORD *)__p + v21) = v22 | v23;
              v24 = *((_QWORD *)this + 4);
              LODWORD(v49[0]) = *((_DWORD *)this + 26);
              v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v24 + 80), (unsigned int *)v49, v17);
              v26 = *(unsigned int *)(v18 + i);
              v27 = *(_QWORD *)(v25 + 40);
              if (v26 >= (*(_QWORD *)(v25 + 48) - v27) >> 3)
              {
                v42 = 182;
                v43 = "index < data_.size()";
                goto LABEL_30;
              }
              v28 = (float *)(v27 + 8 * v26);
              v29 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v44, v47, *v28), v46, v28[1]), (float32x4_t)0, v45);
              v30 = vdivq_f32(v29, (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3));
              if (fabsf(v30.f32[2]) > 0.0000001)
              {
                v42 = 256;
                v12 = "Normalize";
                v11 = "TetrisPacking.cpp";
                v43 = "std::fabs(curr_uv_3.Z()) <= 10e-8";
LABEL_30:
                __assert_rtn(v12, v11, v42, v43);
              }
              *(_QWORD *)v28 = v30.i64[0];
            }
          }
          if (++v16 == v15)
            goto LABEL_24;
        }
      }
      if (v16 < v15)
      {
        do
        {
          v32 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((_QWORD *)this + 4), *((_DWORD *)this + 29), v16);
          for (j = 0; j != 12; j += 4)
          {
            v34 = *(unsigned int *)(v32 + j);
            v35 = v34 >> 6;
            v36 = 1 << v34;
            v37 = *((_QWORD *)__p + v35);
            if ((v36 & v37) == 0)
            {
              *((_QWORD *)__p + v35) = v36 | v37;
              v38 = *((_QWORD *)this + 4);
              LODWORD(v49[0]) = *((_DWORD *)this + 26);
              v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v38 + 80), (unsigned int *)v49, v31);
              v40 = *(unsigned int *)(v32 + j);
              v41 = *(_QWORD *)(v39 + 40);
              if (v40 >= (*(_QWORD *)(v39 + 48) - v41) >> 3)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(_QWORD *)(v41 + 8 * v40) = 0;
            }
          }
          ++v16;
        }
        while (v16 != v15);
      }
LABEL_24:
      ++v10;
    }
    while (v10 < *((_QWORD *)this + 83));
  }
  if (__p)
    operator delete(__p);
}

void sub_23C5979E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::isochart::ChartInfo>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<cv3d::cv::gess::isochart::ChartInfo>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 232 * a2);
  }
}

void std::vector<cv3d::cv::gess::math::Matrix4T<float>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 6;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + (a2 << 6);
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__append(a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::PrepareChartsInfo(cv3d::cv::gess::isochart::TetrisPacking *this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float ChartArea;
  float v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  float v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  unint64_t j;
  float v53;
  __float2 v54;
  __float2 v55;
  uint64_t **v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  int8x16_t v67;
  uint64_t **v68;
  float32x2_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  float32x2_t v81;
  float32x2_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float32x2_t v87;
  float v88;
  uint64_t v89;
  float v90;
  uint64_t **v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  unint64_t v97;
  float v98;
  __float2 v99;
  __float2 v100;
  uint64_t **v101;
  float32x2_t v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float32x2_t v111;
  uint64_t v112;
  float *v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t k;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  float32x4_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  int v167;
  uint64_t m;
  _BYTE *v169;
  unsigned int *v170;
  unint64_t v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  uint64_t *v175;
  __int32 *v176;
  float32x4_t v177;
  float32x4_t v178;
  _QWORD *v179;
  void *v180;
  unint64_t v181;
  unint64_t v182;
  int v184;
  float v185;
  uint64_t v186;
  unint64_t v187;
  float32x2_t v188;
  int8x16_t v189;
  unint64_t v190;
  float32x2_t v191;
  float v192;
  float v193;
  float v194;
  float32x2_t v195;
  void *v196;
  unint64_t v197;
  unint64_t v198;
  void *v199;
  _BYTE *v200;
  uint64_t v201;
  float32x4_t v202;
  int8x16_t v203;
  void *v204;
  void *__p;
  char *v206;
  char *v207;
  void *v208[3];
  void *v209[3];
  void *v210[3];
  __int128 v211;
  __int128 v212;
  int v213;

  v5 = *((_QWORD *)this + 4);
  LODWORD(v211) = *((_DWORD *)this + 26);
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v5 + 80), (unsigned int *)&v211, a3);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = 0;
      v11 = 1;
      do
      {
        v12 = v11;
        v13 = *((_QWORD *)this + 4);
        LODWORD(v211) = *((_DWORD *)this + 26);
        v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v13 + 80), (unsigned int *)&v211, v7);
        v17 = *(_QWORD *)(v14 + 40);
        if (v8 >= (*(_QWORD *)(v14 + 48) - v17) >> 3)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v14, v15, v16);
        if (fabsf(*(float *)(v17 + 8 * v8 + 4 * v10)) == INFINITY)
        {
          v18 = *((_QWORD *)this + 4);
          LODWORD(v211) = *((_DWORD *)this + 26);
          v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v18 + 80), (unsigned int *)&v211, v16);
          v21 = *(_QWORD *)(v19 + 40);
          if (v8 >= (*(_QWORD *)(v19 + 48) - v21) >> 3)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v19, v20, v7);
          *(_DWORD *)(v21 + 8 * v8 + 4 * v10) = 0;
        }
        else
        {
          v22 = *((_QWORD *)this + 4);
          LODWORD(v211) = *((_DWORD *)this + 26);
          v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v22 + 80), (unsigned int *)&v211, v16);
          if (v8 >= (uint64_t)(*(_QWORD *)(v23 + 48) - *(_QWORD *)(v23 + 40)) >> 3)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v23, v24, v7);
        }
        v11 = 0;
        v10 = 1;
      }
      while ((v12 & 1) != 0);
      v25 = *((_QWORD *)this + 4);
      LODWORD(v211) = *((_DWORD *)this + 26);
      v26 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v25 + 80), (unsigned int *)&v211, v7);
      v8 = ++v9;
    }
    while ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26) > (unint64_t)v9);
  }
  if (*((_DWORD *)this + 18))
  {
    v27 = 0;
    v28 = 8;
    do
    {
      ChartArea = cv3d::cv::gess::isochart::TetrisPacking::GetChartArea(this, v27);
      *(float *)(*((_QWORD *)this + 85) + v28) = ChartArea;
      v30 = ChartArea + *((float *)this + 32);
      *((float *)this + 32) = v30;
      ++v27;
      v28 += 232;
    }
    while (v27 < *((unsigned int *)this + 18));
  }
  else
  {
    v30 = *((float *)this + 32);
  }
  LOBYTE(v3) = **((_BYTE **)this + 8);
  v211 = 0u;
  v212 = 0u;
  v213 = 1065353216;
  v31 = *((_QWORD *)this + 4);
  v202.i32[0] = *((_DWORD *)this + 26);
  v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v31 + 80), (unsigned int *)&v202, v7);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::vector(v210, v33);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v209, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v208, 3uLL);
  v34 = *((_DWORD *)this + 18);
  if (v34)
  {
    v35 = 0;
    v36 = "index < data_.size()";
    v37 = "Attribute.h";
    v38 = "operator[]";
    v39 = 136;
    v40 = 5.0;
    v185 = sqrtf(v30 / (float)v3);
    while (1)
    {
      v186 = v39;
      v41 = v35;
      v42 = *((_QWORD *)this + 10);
      if (v35 == v34 - 1)
        v43 = ((*(_QWORD *)(*((_QWORD *)this + 4) + 160) - *(_QWORD *)(*((_QWORD *)this + 4) + 152)) >> 2);
      else
        v43 = *(unsigned int *)(v42 + 4 * (v35 + 1));
      v190 = v43;
      v187 = *(unsigned int *)(v42 + 4 * v35);
      if (v187 < v43)
      {
        v44 = *(unsigned int *)(v42 + 4 * v35);
        do
        {
          v45 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((_QWORD *)this + 4), *((_DWORD *)this + 29), v44);
          v46 = *((_QWORD *)this + 4);
          v202.i32[0] = v44;
          cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v46, (unsigned int *)&v202, v209);
          for (i = 0; i != 12; i += 4)
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>((uint64_t)&v211, (unsigned int *)(v45 + i), (_DWORD *)(v45 + i));
          ++v44;
        }
        while (v44 != v190);
      }
      v48 = *((_QWORD *)this + 4);
      v202.i32[0] = *((_DWORD *)this + 28);
      v49 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v48 + 56), (unsigned int *)&v202);
      v50 = *(_QWORD *)(v49 + 40);
      if (v187 >= (*(_QWORD *)(v49 + 48) - v50) >> 2)
        break;
      if (*(_DWORD *)(v50 + 4 * v187) != v41)
      {
        v184 = 1147;
        v38 = "PrepareChartsInfo";
        v37 = "TetrisPacking.cpp";
        v36 = "mesh_.attribute(f_gid_ah_)[fs] == curr_chart_id";
LABEL_167:
        __assert_rtn(v38, v37, v184, v36);
      }
      v51 = 3.4028e38;
      v189 = (int8x16_t)xmmword_23C60C6C0;
      for (j = 1; j != 19; ++j)
      {
        v53 = (float)((float)((float)j * v40) / 180.0) * 3.14159265;
        if (v53 > 1.57079633)
          v53 = 1.5708;
        v55 = __sincosf_stret(v53);
        v56 = (uint64_t **)v212;
        if ((_QWORD)v212)
        {
          v57.f32[0] = -v55.__sinval;
          v57.i32[1] = LODWORD(v55.__cosval);
          v191 = v57;
          v58 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v59 = (float32x2_t)0x80000000800000;
          do
          {
            v60 = *((unsigned int *)v56 + 4);
            v61 = *((_QWORD *)this + 4);
            v202.i32[0] = *((_DWORD *)this + 26);
            v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v61 + 80), (unsigned int *)&v202, *(_QWORD *)&v54);
            v63 = *(_QWORD *)(v62 + 40);
            if (v60 >= (*(_QWORD *)(v62 + 48) - v63) >> 3)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v64 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v55.__sinval), LODWORD(v55.__cosval)), *(float *)(v63 + 8 * v60)), v191, *(float *)(v63 + 8 * v60 + 4));
            v58 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v58, v64), (int8x8_t)v64, (int8x8_t)v58);
            v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v64, v59), (int8x8_t)v64, (int8x8_t)v59);
            v56 = (uint64_t **)*v56;
          }
          while (v56);
          v65 = vsub_f32(v59, v58);
          v66 = vmul_lane_f32(v65, v65, 1).f32[0];
          if (v66 < v51)
          {
            v67.i64[0] = __PAIR64__(LODWORD(v55.__sinval), LODWORD(v55.__cosval));
            v67.u64[1] = (unint64_t)v191;
            v189 = v67;
            v51 = v66;
          }
        }
      }
      v68 = (uint64_t **)v212;
      v69 = (float32x2_t)0x7F0000007FLL;
      if ((_QWORD)v212)
      {
        v188 = (float32x2_t)vextq_s8(v189, v189, 8uLL).u64[0];
        v70 = v190;
        do
        {
          v71 = *((unsigned int *)v68 + 4);
          v72 = *((_QWORD *)this + 4);
          v202.i32[0] = *((_DWORD *)this + 26);
          v73 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v72 + 80), (unsigned int *)&v202, *(_QWORD *)&v54);
          v75 = *(_QWORD *)(v73 + 40);
          if (v71 >= (*(_QWORD *)(v73 + 48) - v75) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v76 = (float *)(v75 + 8 * v71);
          v192 = *v76;
          v193 = v76[1];
          v77 = *((_QWORD *)this + 4);
          v202.i32[0] = *((_DWORD *)this + 26);
          v78 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v77 + 80), (unsigned int *)&v202, v74);
          v79 = *(_QWORD *)(v78 + 40);
          if (v71 >= (*(_QWORD *)(v78 + 48) - v79) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v79 + 8 * v71) = vmla_n_f32(vmla_n_f32(0, *(float32x2_t *)v189.i8, v192), v188, v193);
          v68 = (uint64_t **)*v68;
        }
        while (v68);
        v80 = (uint64_t **)v212;
        v69 = (float32x2_t)0x7F0000007FLL;
        if ((_QWORD)v212)
        {
          v81 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
          v82 = (float32x2_t)0x80000000800000;
          do
          {
            v83 = *((unsigned int *)v80 + 4);
            v84 = *((_QWORD *)this + 4);
            v202.i32[0] = *((_DWORD *)this + 26);
            v85 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v84 + 80), (unsigned int *)&v202, *(_QWORD *)&v54);
            v86 = *(_QWORD *)(v85 + 40);
            if (v83 >= (*(_QWORD *)(v85 + 48) - v86) >> 3)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v87 = *(float32x2_t *)(v86 + 8 * v83);
            v81 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v81, v87), (int8x8_t)v87, (int8x8_t)v81);
            v82 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v87, v82), (int8x8_t)v87, (int8x8_t)v82);
            v80 = (uint64_t **)*v80;
          }
          while (v80);
          v69 = vsub_f32(v82, v81);
        }
      }
      else
      {
        v70 = v190;
      }
      v88 = v69.f32[1];
      if (v69.f32[0] >= v69.f32[1])
        v88 = v69.f32[0];
      v89 = *((_QWORD *)this + 85);
      if (v88 > v185)
      {
        v90 = *(float *)(v89 + 232 * v41 + 8);
        v91 = (uint64_t **)v212;
        v194 = v185 / v88;
        if ((_QWORD)v212)
        {
          do
          {
            v92 = *((unsigned int *)v91 + 4);
            v93 = *((_QWORD *)this + 4);
            v202.i32[0] = *((_DWORD *)this + 26);
            v94 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v93 + 80), (unsigned int *)&v202, *(_QWORD *)&v54);
            v95 = *(_QWORD *)(v94 + 40);
            if (v92 >= (*(_QWORD *)(v94 + 48) - v95) >> 3)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            *(float32x2_t *)(v95 + 8 * v92) = vmul_n_f32(*(float32x2_t *)(v95 + 8 * v92), v194);
            v91 = (uint64_t **)*v91;
          }
          while (v91);
          v89 = *((_QWORD *)this + 85);
        }
        v96 = v194 * (float)(v194 * v90);
        *(float *)(v89 + 232 * v41 + 8) = v96;
        *((float *)this + 32) = *((float *)this + 32) - (float)(v90 - v96);
      }
      v97 = 0;
      *(_BYTE *)(v89 + 232 * v41 + 4) = 1;
      do
      {
        v98 = (float)v97 * 3.14159265 / 3.0 * 0.5;
        v100 = __sincosf_stret(v98);
        v101 = (uint64_t **)v212;
        if ((_QWORD)v212)
        {
          v102.f32[0] = -v100.__sinval;
          v102.i32[1] = LODWORD(v100.__cosval);
          v195 = v102;
          v103 = -3.4028e38;
          v104 = 3.4028e38;
          v105 = 3.4028e38;
          v106 = -3.4028e38;
          do
          {
            v107 = *((unsigned int *)v101 + 4);
            v108 = *((_QWORD *)this + 4);
            v202.i32[0] = *((_DWORD *)this + 26);
            v109 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v108 + 80), (unsigned int *)&v202, *(_QWORD *)&v99);
            v110 = *(_QWORD *)(v109 + 40);
            if (v107 >= (*(_QWORD *)(v109 + 48) - v110) >> 3)
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            v111 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v100.__sinval), LODWORD(v100.__cosval)), *(float *)(v110 + 8 * v107)), v195, *(float *)(v110 + 8 * v107 + 4));
            if (v111.f32[0] < v104)
              v104 = v111.f32[0];
            if (v111.f32[1] < v105)
              v105 = v111.f32[1];
            if (v103 < v111.f32[0])
              v103 = v111.f32[0];
            if (v106 < v111.f32[1])
              v106 = v111.f32[1];
            *((float32x2_t *)v210[0] + v107) = v111;
            v101 = (uint64_t **)*v101;
          }
          while (v101);
        }
        else
        {
          v105 = 3.4028e38;
          v106 = -3.4028e38;
          v103 = -3.4028e38;
          v104 = 3.4028e38;
        }
        v112 = *((_QWORD *)this + 85);
        v113 = (float *)(v112 + 232 * v41 + 72 * v97);
        v113[14] = v98;
        v113[8] = v103;
        v113[9] = v106;
        v113[6] = v104;
        v113[7] = v105;
        if (!v97)
        {
          v114 = v103 - v104;
          if ((float)(v103 - v104) < (float)(v106 - v105))
            v114 = v106 - v105;
          *(float *)(v112 + 232 * v41) = v114;
        }
        __p = 0;
        v206 = 0;
        v207 = 0;
        v115 = *((_QWORD *)this + 4);
        v202.i32[0] = *((_DWORD *)this + 26);
        v116 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v115 + 80), (unsigned int *)&v202, *(_QWORD *)&v99);
        v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 16))(v116);
        v202.i8[0] = 0;
        std::vector<BOOL>::vector(&v204, v117, (unsigned __int8 *)&v202);
        v40 = 5.0;
        v118 = v187;
        if (v187 < v70)
        {
          do
          {
            v119 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((_QWORD *)this + 4), *((_DWORD *)this + 29), v118);
            v120 = *((_QWORD *)this + 4);
            v202.i32[0] = v118;
            cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v120, (unsigned int *)&v202, v208);
            for (k = 0; k != 3; ++k)
            {
              v122 = *((_QWORD *)this + 4) + 104;
              v123 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v122, (unsigned int *)v208[0] + k);
              v124 = cv3d::cv::gess::mesh::Topology::h(v122, v123);
              if (*(_DWORD *)(v124 + 16) == -1)
                goto LABEL_171;
              v125 = *((_QWORD *)this + 4);
              v202.i32[0] = *((_DWORD *)this + 28);
              v126 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v125 + 56), (unsigned int *)&v202);
              v128 = *(unsigned int *)(v124 + 16);
              v129 = *(_QWORD *)(v126 + 40);
              if (v128 >= (*(_QWORD *)(v126 + 48) - v129) >> 2)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              if (*(_DWORD *)(v129 + 4 * v128) != v41)
                goto LABEL_171;
              v130 = *((_QWORD *)this + 4);
              v202.i32[0] = *((_DWORD *)this + 29);
              v131 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(v130 + 56), (unsigned int *)&v202, v127);
              v132 = *(unsigned int *)(v124 + 16);
              v133 = *(_QWORD *)(v131 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v131 + 48) - v133) >> 2) <= v132)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              v134 = (_DWORD *)(v133 + 12 * v132);
              v135 = *(_DWORD *)(v119 + 4 * k);
              if (*v134 != v135 && v134[1] != v135 && v134[2] != v135)
              {
LABEL_171:
                v136 = (unsigned __int16)(k + 1) % 3u;
                v137 = (uint64_t *)((char *)v210[0] + 8 * *(unsigned int *)(v119 + 4 * v136));
                v138 = *((_QWORD *)this + 85) + 232 * v41 + 16;
                v202.i64[0] = *((_QWORD *)v210[0] + *(unsigned int *)(v119 + 4 * k));
                v202.i64[1] = *v137;
                v139.i64[0] = v202.i64[1];
                v139.i64[1] = v202.i64[0];
                v203 = vbslq_s8((int8x16_t)vcgtq_f32(v202, v139), (int8x16_t)vdupq_lane_s64(v202.i64[1], 0), (int8x16_t)vdupq_lane_s64(v202.i64[0], 0));
                v140 = v138 + 72 * v97;
                v141 = *(_QWORD *)(v140 + 56);
                v142 = *(_QWORD *)(v140 + 64);
                v143 = (uint64_t *)(v140 + 56);
                if (v141 >= v142)
                {
                  v144 = std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeInfo>((uint64_t *)(v138 + 72 * v97 + 48), &v202);
                }
                else
                {
                  *(float32x4_t *)v141 = v202;
                  *(int8x16_t *)(v141 + 16) = v203;
                  v144 = v141 + 32;
                }
                *v143 = v144;
                if (*((_DWORD *)this + 189) == 2)
                {
                  v145 = *(unsigned int *)(v119 + 4 * k);
                  v146 = (char *)v204;
                  if (((*(_QWORD *)((char *)v204 + ((v145 >> 3) & 0x1FFFFFF8)) >> v145) & 1) == 0)
                  {
                    v147 = v206;
                    if (v206 >= v207)
                    {
                      v149 = (char *)__p;
                      v150 = (v206 - (_BYTE *)__p) >> 2;
                      v151 = v150 + 1;
                      if ((unint64_t)(v150 + 1) >> 62)
                        goto LABEL_168;
                      v152 = v207 - (_BYTE *)__p;
                      if ((v207 - (_BYTE *)__p) >> 1 > v151)
                        v151 = v152 >> 1;
                      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL)
                        v153 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v153 = v151;
                      if (v153)
                      {
                        v154 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v207, v153);
                        v149 = (char *)__p;
                        v147 = v206;
                        LODWORD(v145) = *(_DWORD *)(v119 + 4 * k);
                      }
                      else
                      {
                        v154 = 0;
                      }
                      v155 = &v154[4 * v150];
                      *(_DWORD *)v155 = v145;
                      v148 = v155 + 4;
                      while (v147 != v149)
                      {
                        v156 = *((_DWORD *)v147 - 1);
                        v147 -= 4;
                        *((_DWORD *)v155 - 1) = v156;
                        v155 -= 4;
                      }
                      __p = v155;
                      v206 = v148;
                      v207 = &v154[4 * v153];
                      if (v149)
                        operator delete(v149);
                    }
                    else
                    {
                      *(_DWORD *)v206 = v145;
                      v148 = v147 + 4;
                    }
                    v206 = v148;
                    v146 = (char *)v204;
                    *(_QWORD *)((char *)v204 + (((unint64_t)*(unsigned int *)(v119 + 4 * k) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v119 + 4 * k);
                  }
                  v157 = *(unsigned int *)(v119 + 4 * v136);
                  if (((*(_QWORD *)&v146[(v157 >> 3) & 0x1FFFFFF8] >> v157) & 1) == 0)
                  {
                    v158 = v206;
                    if (v206 >= v207)
                    {
                      v160 = (char *)__p;
                      v161 = (v206 - (_BYTE *)__p) >> 2;
                      v162 = v161 + 1;
                      if ((unint64_t)(v161 + 1) >> 62)
LABEL_168:
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v163 = v207 - (_BYTE *)__p;
                      if ((v207 - (_BYTE *)__p) >> 1 > v162)
                        v162 = v163 >> 1;
                      if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                        v164 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v164 = v162;
                      if (v164)
                      {
                        v165 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v207, v164);
                        v160 = (char *)__p;
                        v158 = v206;
                        LODWORD(v157) = *(_DWORD *)(v119 + 4 * v136);
                      }
                      else
                      {
                        v165 = 0;
                      }
                      v166 = &v165[4 * v161];
                      *(_DWORD *)v166 = v157;
                      v159 = v166 + 4;
                      while (v158 != v160)
                      {
                        v167 = *((_DWORD *)v158 - 1);
                        v158 -= 4;
                        *((_DWORD *)v166 - 1) = v167;
                        v166 -= 4;
                      }
                      __p = v166;
                      v206 = v159;
                      v207 = &v165[4 * v164];
                      if (v160)
                        operator delete(v160);
                    }
                    else
                    {
                      *(_DWORD *)v206 = v157;
                      v159 = v158 + 4;
                    }
                    v206 = v159;
                    *(_QWORD *)((char *)v204 + (((unint64_t)*(unsigned int *)(v119 + 4 * v136) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v119 + 4 * v136);
                  }
                }
              }
            }
            ++v118;
            v70 = v190;
          }
          while (v118 != v190);
        }
        if (!v97)
        {
          for (m = 0; m != 144; m += 72)
            std::vector<cv3d::cv::gess::isochart::EdgeInfo>::reserve((uint64_t *)(*((_QWORD *)this + 85) + v186 + m), (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 85) + 232 * v41 + 72)- *(_QWORD *)(*((_QWORD *)this + 85) + 232 * v41 + 64)) >> 5);
        }
        if (*((_DWORD *)this + 189) == 2)
        {
          v199 = 0;
          v200 = 0;
          v201 = 0;
          cv3d::cv::gess::internal::Get2DConvexHull((char **)&__p, (uint64_t)v210[0], (char **)&v199);
          v196 = 0;
          v197 = 0;
          v198 = 0;
          std::vector<cv3d::cv::gess::isochart::EdgeInfo>::reserve((uint64_t *)&v196, (v200 - (_BYTE *)v199) >> 2);
          v170 = (unsigned int *)v199;
          v169 = v200;
          if (v200 != v199)
          {
            v171 = 0;
            v172 = (v200 - (_BYTE *)v199) >> 2;
            v173 = 1;
            v174 = v197;
            do
            {
              v175 = (uint64_t *)((char *)v210[0] + 8 * v170[v171]);
              v171 = v173;
              v176 = (__int32 *)((char *)v210[0] + 8 * v170[v173 % v172]);
              v202.i64[0] = *v175;
              v177.i32[0] = *v176;
              v202.i32[2] = v177.i32[0];
              v178.i64[0] = v202.i64[0];
              v178.i32[2] = v177.i32[0];
              v177.i64[1] = v202.i64[0];
              v202.i32[3] = v176[1];
              v177.i32[1] = v202.i32[3];
              v178.i32[3] = v202.i32[3];
              v203 = vbslq_s8((int8x16_t)vcgtq_f32(v178, v177), (int8x16_t)vdupq_lane_s64(v177.i64[0], 0), (int8x16_t)vdupq_lane_s64(v202.i64[0], 0));
              if (v174 >= v198)
              {
                v174 = std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeInfo>((uint64_t *)&v196, &v202);
                v170 = (unsigned int *)v199;
                v169 = v200;
              }
              else
              {
                *(float32x4_t *)v174 = v202;
                *(int8x16_t *)(v174 + 16) = v203;
                v174 += 32;
              }
              v197 = v174;
              v172 = (v169 - (_BYTE *)v170) >> 2;
              v173 = v171 + 1;
            }
            while (v172 > v171);
          }
          v179 = (_QWORD *)(*((_QWORD *)this + 85) + 232 * v41 + 72 * v97);
          v180 = (void *)v179[8];
          v179[8] = v196;
          v196 = v180;
          v181 = v179[9];
          v179[9] = v197;
          v197 = v181;
          v182 = v179[10];
          v179[10] = v198;
          v198 = v182;
          if (v196)
          {
            v197 = (unint64_t)v196;
            operator delete(v196);
          }
          if (v199)
          {
            v200 = v199;
            operator delete(v199);
          }
        }
        if (v204)
          operator delete(v204);
        if (__p)
        {
          v206 = (char *)__p;
          operator delete(__p);
        }
        ++v97;
      }
      while (v97 != 3);
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::clear(&v211);
      v35 = v41 + 1;
      v34 = *((_DWORD *)this + 18);
      v39 = v186 + 232;
      v36 = "index < data_.size()";
      v37 = "Attribute.h";
      v38 = "operator[]";
      if (v41 + 1 >= v34)
        goto LABEL_147;
    }
    v184 = 182;
    goto LABEL_167;
  }
LABEL_147:
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
  if (v209[0])
  {
    v209[1] = v209[0];
    operator delete(v209[0]);
  }
  if (v210[0])
  {
    v210[1] = v210[0];
    operator delete(v210[0]);
  }
}

void sub_23C598A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;

  if (__p)
    operator delete(__p);
  v45 = *(void **)(v43 - 256);
  if (v45)
  {
    *(_QWORD *)(v43 - 248) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v43 - 232);
  if (v46)
  {
    *(_QWORD *)(v43 - 224) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(a1);
}

unsigned int *cv3d::cv::gess::isochart::TetrisPacking::SortCharts(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  cv3d::cv::gess::isochart::TetrisPacking *v10;

  v2 = (unsigned int *)*((_QWORD *)this + 89);
  v3 = (unsigned int *)*((_QWORD *)this + 88);
  v4 = v2 - v3;
  v5 = *((unsigned int *)this + 18);
  if (v4 != v5)
    cv3d::cv::gess::isochart::TetrisPacking::SortCharts();
  if ((_DWORD)v5)
  {
    v6 = 0;
    do
    {
      v3[v6] = v6;
      ++v6;
    }
    while (v6 < *((unsigned int *)this + 18));
  }
  v10 = this;
  v7 = 126 - 2 * __clz(v4);
  if (v2 == v3)
    v8 = 0;
  else
    v8 = v7;
  return std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *,false>(v3, v2, (uint64_t)&v10, v8, 1);
}

void cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  std::vector<unsigned int> *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  std::vector<unsigned int>::size_type v5;
  _DWORD *v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  float v10;
  float v11;
  unsigned int v12;
  float v13;
  unint64_t v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  unint64_t v18;
  std::vector<unsigned int>::pointer begin;

  if (*((float *)this + 32) <= 0.0)
    cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture();
  v2 = (std::vector<unsigned int> *)((char *)this + 632);
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 632), **((unsigned __int8 **)this + 8));
  v3 = (unsigned __int8 *)*((_QWORD *)this + 8);
  v4 = *v3;
  if (v4 == 1)
  {
    *v2->__begin_ = 0;
  }
  else
  {
    v5 = *((unsigned int *)this + 18);
    if (v5 <= v4)
    {
      std::vector<int>::resize(v2, v5);
      if (*((_DWORD *)this + 18))
      {
        v18 = 0;
        begin = v2->__begin_;
        do
        {
          begin[v18] = v18;
          ++v18;
        }
        while (v18 < *((unsigned int *)this + 18));
      }
    }
    else
    {
      v6 = (_DWORD *)*((_QWORD *)this + 79);
      *v6 = 0;
      v7 = *((unsigned int *)this + 18);
      if (v7 <= 1)
        cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture();
      v8 = (unsigned int *)*((_QWORD *)this + 88);
      v9 = *((_QWORD *)this + 85);
      v10 = *(float *)(v9 + 232 * *v8 + 8);
      v11 = *((float *)this + 32);
      v12 = *v3;
      v13 = v11 / (float)v12;
      v14 = 1;
      v15 = 1;
      do
      {
        v16 = *(float *)(v9 + 232 * v8[v14] + 8);
        if (v16 <= 0.0)
          cv3d::cv::gess::isochart::TetrisPacking::PrepareMultiTexture();
        if (v10 >= v13)
        {
          v6[v15] = v14;
          v17 = v15 + 1;
          v12 = *v3;
          if (v15 + 1 >= v12)
            break;
          v11 = v11 - v10;
          v13 = v11 / (float)(v12 - v15);
          v16 = *(float *)(v9 + 232 * v8[v14] + 8);
          v7 = *((unsigned int *)this + 18);
          v10 = 0.0;
          ++v15;
        }
        else
        {
          v17 = v15;
        }
        v10 = v10 + v16;
        ++v14;
      }
      while (v14 < v7);
      if (v17 < v12)
        std::vector<int>::resize(v2, v17);
    }
  }
}

_QWORD *cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack(cv3d::cv::gess::isochart::TetrisPacking *this, double a2, double a3, double a4, double a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::vector<unsigned int>::size_type v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  _DWORD *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;

  v6 = *(unsigned int *)(*((_QWORD *)this + 88) + 4 * *((_QWORD *)this + 82));
  cv3d::cv::gess::isochart::TetrisPacking::ComputeChartsLengthInPixel((uint64_t)this, a2, a3, a4, a5);
  v7 = *((_QWORD *)this + 85) + 232 * v6;
  v9 = *(_DWORD *)(v7 + 40);
  v8 = *(_DWORD *)(v7 + 44);
  if (v9 <= v8)
    v10 = *(_DWORD *)(v7 + 44);
  else
    v10 = *(_DWORD *)(v7 + 40);
  if (v10 <= 0)
    cv3d::cv::gess::isochart::TetrisPacking::PrepareRepack();
  v11 = (2 * v10);
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)this + 76);
  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)this + 28);
  std::vector<std::vector<unsigned char>>::resize((uint64_t *)this + 76, v11);
  std::vector<std::vector<unsigned char>>::resize((uint64_t *)this + 28, v11);
  v12 = *((_QWORD *)this + 76);
  if (*((_QWORD *)this + 77) != v12)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (unint64_t *)(v12 + v13);
      v16 = *(_QWORD *)(v12 + v13);
      v17 = v15[1] - v16;
      if (v11 <= v17)
      {
        if (v11 < v17)
          v15[1] = v16 + v11;
      }
      else
      {
        std::vector<unsigned char>::__append(v15, v11 - v17);
      }
      v18 = (unint64_t *)(*((_QWORD *)this + 28) + v13);
      v19 = v18[1] - *v18;
      if (v11 <= v19)
      {
        if (v11 < v19)
          v18[1] = *v18 + v11;
      }
      else
      {
        std::vector<unsigned char>::__append(v18, v11 - v19);
      }
      ++v14;
      v12 = *((_QWORD *)this + 76);
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 77) - v12) >> 3));
  }
  v20 = -96;
  do
  {
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + v20 + 488), v11);
    if (*((_QWORD *)this + 32) <= *((_QWORD *)this + 33))
      v21 = *((_QWORD *)this + 33);
    else
      v21 = *((_QWORD *)this + 32);
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + v20 + 392), v21);
    v20 += 24;
  }
  while (v20);
  cv3d::cv::gess::isochart::TetrisPacking::DoTessellation(this, v6, 0, v22, v23, v24, v25, v26, v27);
  *((float *)this + 46) = (float)v8 / (float)v9;
  v28 = (_DWORD *)*((_QWORD *)this + 73);
  if (v8 >= 0)
    v29 = v8;
  else
    v29 = v8 + 1;
  v30 = (int)(-1431655765 * ((*((_QWORD *)this + 74) - (_QWORD)v28) >> 3)) / 2 - (v29 >> 1);
  v31 = v30 + v8;
  *((_DWORD *)this + 39) = v30;
  *((_DWORD *)this + 40) = v30 + v8;
  v32 = (v28[2] - *v28) / 2;
  if (v9 >= 0)
    v33 = v9;
  else
    v33 = v9 + 1;
  v34 = v32 - (v33 >> 1);
  LODWORD(v35) = v34 + v9;
  *((_DWORD *)this + 37) = v34;
  *((_DWORD *)this + 38) = v34 + v9;
  if (v8 >= 1)
  {
    v36 = v30;
    do
    {
      v37 = *((int *)this + 37);
      if ((int)v37 < (int)v35)
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 73) + 24 * v36) + v37) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76)
                                                                                                  + 24 * (v36 - *((int *)this + 39)))
                                                                                      - *((int *)this + 37)
                                                                                      + v37);
          ++v37;
          v35 = *((int *)this + 38);
        }
        while (v37 < v35);
        v31 = *((_DWORD *)this + 40);
      }
      ++v36;
    }
    while (v36 < v31);
    v34 = *((_DWORD *)this + 37);
    v30 = *((_DWORD *)this + 39);
  }
  v38 = *((_QWORD *)this + 91) + (v6 << 6);
  v39 = *((float *)this + 72);
  v40 = *((_QWORD *)this + 85) + 232 * v6;
  v41 = *(float *)(v40 + 20);
  *(float *)(v38 + 48) = -(float)(*(float *)(v40 + 16) - (float)(v39 * (float)v34));
  *(float *)(v38 + 52) = -(float)(v41 - (float)(v39 * (float)v30));
  *(_OWORD *)v38 = xmmword_23C603EC0;
  *(_OWORD *)(v38 + 16) = xmmword_23C605200;
  *(_OWORD *)(v38 + 32) = xmmword_23C605210;
  *(_QWORD *)(v38 + 56) = 0x3F80000000000000;
  return cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo((uint64_t)this, (uint64_t)this + 296, (uint64_t)this + 584, v34, v35, v30, v31, 0);
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::PutChart(uint64_t this, uint64_t a2, double a3, __n128 a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  int *v21;
  uint64_t i;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  int *v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  int *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  int *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int *v40;
  int *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t (***v48)();
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t j;
  __n128 *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t (***v59)();
  uint64_t v60;
  _OWORD v61[2];
  unsigned int v62;
  uint64_t (**context)();
  __int128 v64;
  uint64_t (***p_context)();
  int8x8_t *v66;
  unsigned int v67;
  _BYTE *v68;
  int8x8_t v69;
  uint64_t (**v70)();
  __int128 v71;
  uint64_t (***v72)();
  _BYTE v73[256];
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(this + 680);
  if (*(_BYTE *)(v8 + 232 * a2 + 4))
  {
    v9 = a2;
    v10 = this;
    v11 = a2;
    *(_DWORD *)(this + 200) = 0x7FFFFFFF;
    LODWORD(a3) = *(_DWORD *)(this + 184);
    a4.n128_u32[0] = *(_DWORD *)(this + 132);
    if (*(float *)&a3 <= a4.n128_f32[0])
    {
      if (*(float *)&a3 < a4.n128_f32[0])
      {
        v13 = 1;
      }
      else
      {
        v12 = rand();
        a4.n128_u32[0] = 0.5;
        *(float *)&a3 = (float)v12 + 0.5;
        v13 = vcvtms_s32_f32(*(float *)&a3);
      }
      v62 = v13;
    }
    else
    {
      v62 = 0;
    }
    v14 = 0;
    *(_QWORD *)&v61[0] = 0;
    DWORD2(v61[0]) = 0x7FFFFFFF;
    memset((char *)v61 + 12, 0, 20);
    do
    {
      v15 = &v73[v14];
      *(_QWORD *)v15 = 0;
      *((_DWORD *)v15 + 2) = 0x7FFFFFFF;
      *(_QWORD *)(v15 + 20) = 0;
      *(_QWORD *)(v15 + 12) = 0;
      v14 += 32;
      *((_DWORD *)v15 + 7) = 0;
    }
    while (v14 != 256);
    v16 = 0;
    v17 = v8 + 232 * v11 + 16;
    while (1)
    {
      cv3d::cv::gess::isochart::TetrisPacking::DoTessellation((cv3d::cv::gess::isochart::TetrisPacking *)v10, v9, v16, a3, a4.n128_f64[0], a5, a6, a7, a8);
      v18 = v17 + 72 * v16;
      v20 = *(_DWORD *)(v18 + 24);
      v19 = (int *)(v18 + 24);
      v21 = v19 + 1;
      cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(v10, v10 + 392, v10 + 608, 0, v20, 0, v19[1], 1);
      for (i = 0; i != 96; i += 24)
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)(v10 + i + 488), *(char **)(v10 + i + 392), *(_QWORD *)(v10 + i + 400), (uint64_t)(*(_QWORD *)(v10 + i + 400) - *(_QWORD *)(v10 + i + 392)) >> 2);
      v23 = *v21;
      if (v23 >= 2)
      {
        v24 = v23 >> 1;
        v25 = *(int **)(v10 + 560);
        v26 = &v25[v23 - 1];
        do
        {
          v27 = *v25;
          *v25++ = *v26;
          *v26-- = v27;
          --v24;
        }
        while (v24);
      }
      v28 = *v19;
      if (v28 >= 2)
      {
        v29 = v28 >> 1;
        v30 = *(int **)(v10 + 536);
        v31 = &v30[v28 - 1];
        do
        {
          v32 = *v30;
          *v30++ = *v31;
          *v31-- = v32;
          --v29;
        }
        while (v29);
      }
      v33 = *v21;
      if (v33 >= 2)
      {
        v34 = v33 >> 1;
        v35 = *(int **)(v10 + 512);
        v36 = &v35[v33 - 1];
        do
        {
          v37 = *v35;
          *v35++ = *v36;
          *v36-- = v37;
          --v34;
        }
        while (v34);
      }
      v38 = *v19;
      if (v38 >= 2)
      {
        v39 = v38 >> 1;
        v40 = *(int **)(v10 + 488);
        v41 = &v40[v38 - 1];
        do
        {
          v42 = *v40;
          *v40++ = *v41;
          *v41-- = v42;
          --v39;
        }
        while (v39);
      }
      v70 = &off_250D4A950;
      *(_QWORD *)&v71 = v10;
      *((_QWORD *)&v71 + 1) = v17 + 72 * v16;
      v72 = &v70;
      *(_DWORD *)(v10 + 188) = v16;
      v43 = v62;
      if (!v16)
      {
        v44 = 0;
        if (v62)
        {
          HIDWORD(v61[1]) = 1343554297;
          do
          {
            *(_DWORD *)&v73[v44 + 28] = 1343554297;
            v44 += 32;
          }
          while (v44 != 256);
        }
        else
        {
          HIDWORD(v61[1]) = -803929351;
          do
          {
            *(_DWORD *)&v73[v44 + 28] = -803929351;
            v44 += 32;
          }
          while (v44 != 256);
        }
      }
      v45 = v17;
      v46 = v9;
      v69 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v43 == 0), 0x1FuLL)), (int8x8_t)0x100000003, (int8x8_t)0x200000000);
      if (*(_BYTE *)(v10 + 752))
      {
        context = &off_250D4A950;
        v64 = v71;
        p_context = &context;
        v66 = &v69;
        v67 = v43;
        v68 = v73;
        v47 = dispatch_queue_create("com.gcd.task2", MEMORY[0x24BDAC9C0]);
        dispatch_apply_f(8uLL, v47, &context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::isochart::TetrisPacking::PutChart::$_1::__invoke);
        dispatch_release(v47);
        v48 = p_context;
        if (p_context == &context)
        {
          v48 = &context;
          v49 = 4;
          goto LABEL_41;
        }
        if (p_context)
        {
          v49 = 5;
LABEL_41:
          (*v48)[v49]();
        }
      }
      else
      {
        v50 = 0;
        v51 = v73;
        do
        {
          LODWORD(context) = v50 >> 1;
          if (!v72)
            std::__throw_bad_function_call[abi:ne180100]();
          ((void (*)(uint64_t (***)(), uint64_t (***)(), unint64_t, unsigned int *, _BYTE *))(*v72)[6])(v72, &context, (unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v50++ & 1)), &v62, v51);
          v51 += 32;
        }
        while (v50 != 8);
      }
      for (j = 0; j != 256; j += 32)
      {
        v53 = (__n128 *)&v73[j];
        if (cv3d::cv::gess::isochart::IfNewPositionAcceptable((uint64_t)v61, (float *)&v73[j + 28], &v73[j + 24], (int *)&v73[j + 8], &v73[j + 16]))
        {
          a4 = v53[1];
          v61[0] = *v53;
          v61[1] = a4;
        }
      }
      v54 = *(_QWORD *)&v61[0];
      *(_QWORD *)(v10 + 192) = *(_QWORD *)&v61[0];
      *(_DWORD *)(v10 + 220) = HIDWORD(v61[1]);
      a3 = *((double *)v61 + 1);
      *(_OWORD *)(v10 + 200) = *(_OWORD *)((char *)v61 + 8);
      *(_DWORD *)(v10 + 216) = DWORD2(v61[1]);
      v9 = v46;
      v17 = v45;
      if (v54 == v16)
      {
        v55 = *v21;
        if (*v21)
        {
          v56 = 0;
          LODWORD(v57) = *v19;
          do
          {
            if ((_DWORD)v57)
            {
              v58 = 0;
              do
              {
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 224) + 24 * v56) + v58) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 608) + 24 * v56)
                                                                                            + v58);
                ++v58;
                v57 = *v19;
              }
              while (v58 < v57);
              v55 = *v21;
            }
            ++v56;
          }
          while (v56 < v55);
        }
      }
      v59 = v72;
      if (v72 == &v70)
      {
        v59 = &v70;
        v60 = 4;
        goto LABEL_58;
      }
      if (v72)
      {
        v60 = 5;
LABEL_58:
        (*v59)[v60]();
      }
      if (++v16 == 3)
        return cv3d::cv::gess::isochart::TetrisPacking::PutChartInPosition((cv3d::cv::gess::isochart::TetrisPacking *)v10, v9);
    }
  }
  return this;
}

void sub_23C599520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v31;
  uint64_t v32;

  v31 = a30;
  if (a30 == &a27)
  {
    v32 = 4;
    v31 = &a27;
  }
  else
  {
    if (!a30)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v31 + 8 * v32))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::DoTessellation(cv3d::cv::gess::isochart::TetrisPacking *this, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  float32x2_t v26;
  float32x2_t *v27;
  float32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  int v32;
  float v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  int v41;
  float v42;
  int v43;

  v9 = *((_QWORD *)this + 85) + 232 * a2 + 16;
  v10 = v9 + 72 * a3;
  v11 = *(_DWORD *)(v10 + 24);
  v12 = -1431655765 * ((*((_QWORD *)this + 77) - *((_QWORD *)this + 76)) >> 3);
  if ((int)v11 > v12)
    cv3d::cv::gess::isochart::TetrisPacking::DoTessellation();
  v13 = *(int *)(v10 + 28);
  if ((int)v13 > v12)
    cv3d::cv::gess::isochart::TetrisPacking::DoTessellation();
  v14 = (float32x2_t *)(v9 + 72 * a3);
  v15 = v14[1];
  v16 = v14[4];
  if ((_DWORD)v13)
  {
    v17 = 0;
    if (v11 <= 1)
      v18 = 1;
    else
      v18 = v11;
    do
    {
      if (v11)
      {
        for (i = 0; i != v18; *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76) + 24 * v17) + i++) = 0)
          ;
      }
      ++v17;
    }
    while (v17 != v13);
  }
  v20 = v9 + 72 * a3;
  v23 = *(_QWORD *)(v20 + 48);
  v21 = (uint64_t *)(v20 + 48);
  v22 = v23;
  if (v21[1] == v23)
    goto LABEL_36;
  v24 = 0;
  v25 = 0;
  v26 = vsub_f32(v15, v16);
  do
  {
    v27 = (float32x2_t *)(v22 + 32 * v24);
    LODWORD(a9) = *((_DWORD *)this + 72);
    v28 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v29 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(v27[2], v26), v28)));
    v30 = vcvt_s32_f32(vrndp_f32(vdiv_f32(vsub_f32(v27[3], v26), v28)));
    v31 = vcgt_s32((int32x2_t)0x200000002, vsub_s32(v30, v29));
    if ((v31.i32[0] & v31.i32[1] & 1) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76)
                           + 24 * (unint64_t)(float)(*((float *)this + 19) + (float)v29.i32[1]))
               + (unint64_t)(float)(*((float *)this + 19) + (float)v29.i32[0])) = 1;
      ++v25;
    }
    else if ((v31.i8[0] & 1) != 0)
    {
      v32 = v29.i32[1] + 1;
      if (v29.i32[1] + 1 < v30.i32[1])
      {
        v33 = (float)(int)floorf((float)(v27->f32[0] - v26.f32[0]) / *(float *)&a9);
        do
        {
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76)
                               + 24 * (unint64_t)(float)(*((float *)this + 19) + (float)v32))
                   + (unint64_t)(float)(*((float *)this + 19) + v33)) = 1;
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76)
                               + 24 * (unint64_t)(float)((float)(*((float *)this + 19) + (float)v32) + -1.0))
                   + (unint64_t)(float)(*((float *)this + 19) + v33)) = 1;
          v25 += 2;
          ++v32;
        }
        while (v30.i32[1] != v32);
      }
    }
    else if ((v31.i8[4] & 1) != 0)
    {
      v34 = v29.i32[0] + 1;
      if (v29.i32[0] + 1 < v30.i32[0])
      {
        v35 = (float)(int)floorf((float)(v27->f32[1] - v26.f32[1]) / *(float *)&a9);
        do
        {
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v35))
                   + (unint64_t)(float)(*((float *)this + 19) + (float)v34)) = 1;
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v35))
                   + (unint64_t)(float)((float)(*((float *)this + 19) + (float)v34) + -1.0)) = 1;
          v25 += 2;
          ++v34;
        }
        while (v30.i32[0] != v34);
      }
    }
    else
    {
      v36 = v27->f32[1];
      v37 = (float)(v27[1].f32[1] - v36) / (float)(v27[1].f32[0] - v27->f32[0]);
      v38 = v36 - (float)(v27->f32[0] * v37);
      if (fabsf(v37) >= 1.0)
      {
        v41 = v29.i32[1] + 1;
        if (v29.i32[1] + 1 < v30.i32[1])
        {
          do
          {
            v42 = (float)(int)floorf((float)((float)((float)((float)(v26.f32[1] + (float)((float)v41 * *((float *)this + 72)))- v38)/ v37)- v26.f32[0])/ *((float *)this + 72));
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76)
                                 + 24 * (unint64_t)(float)(*((float *)this + 19) + (float)v41))
                     + (unint64_t)(float)(*((float *)this + 19) + v42)) = 1;
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76)
                                 + 24 * (unint64_t)(float)((float)(*((float *)this + 19) + (float)v41) + -1.0))
                     + (unint64_t)(float)(*((float *)this + 19) + v42)) = 1;
            v25 += 2;
            ++v41;
          }
          while (v30.i32[1] != v41);
        }
      }
      else
      {
        v39 = v29.i32[0] + 1;
        if (v29.i32[0] + 1 < v30.i32[0])
        {
          do
          {
            v40 = (float)(int)floorf((float)((float)(v38+ (float)(v37* (float)(v26.f32[0] + (float)((float)v39 * *((float *)this + 72)))))- v26.f32[1])/ *((float *)this + 72));
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v40))
                     + (unint64_t)(float)(*((float *)this + 19) + (float)v39)) = 1;
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 76) + 24 * (unint64_t)(float)(*((float *)this + 19) + v40))
                     + (unint64_t)(float)((float)(*((float *)this + 19) + (float)v39) + -1.0)) = 1;
            v25 += 2;
            ++v39;
          }
          while (v30.i32[0] != v39);
        }
      }
    }
    ++v24;
    v22 = *v21;
  }
  while (v24 < (v21[1] - *v21) >> 5);
  if (!v25)
  {
LABEL_36:
    v43 = (int)*((float *)this + 19);
    if (v11 != 2 * v43 && (_DWORD)v13 != 2 * v43)
      return 0;
  }
  else
  {
    v43 = (int)*((float *)this + 19);
  }
  cv3d::cv::gess::isochart::TetrisPacking::GrowChart(this, a2, a3, v43);
  return 1;
}

_QWORD *cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, char a8)
{
  _QWORD *v12;
  char *v13;
  char *v14;
  __int128 v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int i;
  _QWORD *result;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _DWORD context[6];
  _DWORD *v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v26 = a5;
  v27 = a4;
  v24 = a7;
  v25 = a6;
  v12 = operator new(0x40uLL);
  v12[1] = &v27;
  v13 = (char *)(v12 + 1);
  *v12 = &off_250D4A998;
  v12[2] = &v26;
  v12[3] = &v25;
  v12[4] = &v24;
  *((_BYTE *)v12 + 40) = a8;
  v12[6] = a3;
  v12[7] = a2;
  v32 = v12;
  if (*(_BYTE *)(a1 + 752))
  {
    v14 = (char *)operator new(0x40uLL);
    *(_QWORD *)v14 = &off_250D4A998;
    v15 = *((_OWORD *)v13 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)v13;
    *(_OWORD *)(v14 + 24) = v15;
    *(_OWORD *)(v14 + 40) = *((_OWORD *)v13 + 2);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v13 + 6);
    v29 = v14;
    v30 = 0x100000001;
    v16 = dispatch_queue_create("com.gcd.task2", MEMORY[0x24BDAC9C0]);
    v17 = 4;
    dispatch_apply_f(4uLL, v16, context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_1::__invoke);
    dispatch_release(v16);
    v20 = v29;
    if (v29 == context)
    {
      v20 = context;
    }
    else
    {
      if (!v29)
        goto LABEL_11;
      v17 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v20 + 8 * v17))(v20, v18);
  }
  else
  {
    context[0] = 0;
    for (i = 1; ; ++i)
    {
      (*(void (**)(_QWORD *, _DWORD *))(*v12 + 48))(v12, context);
      if (i == 4)
        break;
      v12 = v32;
      context[0] = i;
      if (!v32)
        std::__throw_bad_function_call[abi:ne180100]();
    }
  }
LABEL_11:
  result = v32;
  if (v32 == v31)
  {
    v23 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 8 * v23))(result, v18, v19);
}

void sub_23C599B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::PutChartInPosition(cv3d::cv::gess::isochart::TetrisPacking *this, unsigned int a2)
{
  uint64_t result;
  uint64_t v5;
  float32x2_t *v6;
  float v7;
  int v8;
  double v9;
  float v10;
  __float2 v11;
  float32x2_t v12;
  float v13;
  __float2 v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD v48[4];
  int v49;
  __int128 v50;
  _BYTE v51[24];
  uint64_t v52;
  _BYTE v53[12];
  _DWORD v54[2];
  uint64_t v55;
  float v56;
  float cosval;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;

  cv3d::cv::gess::isochart::TetrisPacking::GetChartPutPosition((uint64_t)this, a2);
  result = cv3d::cv::gess::isochart::TetrisPacking::CheckAtlasRange(this);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 85) + 232 * a2 + 72 * *((_QWORD *)this + 24);
    v7 = *(float *)(v5 + 16);
    v6 = (float32x2_t *)(v5 + 16);
    v8 = *((_DWORD *)this + 53);
    v9 = (float)((float)v8 / 180.0);
    v10 = v9 * 3.14159265;
    v11 = __sincosf_stret(v10);
    v12.f32[0] = -v11.__sinval;
    v12.i32[1] = LODWORD(v11.__cosval);
    *v6 = vmla_n_f32(vmla_n_f32(0, (float32x2_t)__PAIR64__(LODWORD(v11.__sinval), LODWORD(v11.__cosval)), v7), v12, v6->f32[1]);
    v13 = v6[5].f32[0] + v9 * 3.14159265;
    v14 = __sincosf_stret(v13);
    v54[0] = LODWORD(v14.__cosval);
    v54[1] = LODWORD(v14.__sinval);
    v56 = -v14.__sinval;
    cosval = v14.__cosval;
    v55 = 0;
    v58 = 0;
    v59 = 0;
    v60 = xmmword_23C603EC0;
    v61 = 0x3F80000000000000;
    v49 = 1065353216;
    v50 = 0uLL;
    *(_DWORD *)v51 = 1065353216;
    *(_OWORD *)&v51[4] = 0uLL;
    *(_DWORD *)&v51[20] = 1065353216;
    *(_QWORD *)v53 = 0;
    v52 = 0;
    *(_DWORD *)&v53[8] = 1065353216;
    *((_DWORD *)this + 46) = *((_DWORD *)this + 55);
    if (v8 > 179)
    {
      if (v8 == 180)
      {
        v39 = *((_DWORD *)this + 45);
        v40 = *((int *)this + 44);
        if ((int)v40 >= v39)
        {
          v41 = *((_DWORD *)this + 43);
        }
        else
        {
          v41 = *((_DWORD *)this + 43);
          do
          {
            v42 = *((int *)this + 42);
            if ((int)v42 < v41)
            {
              v43 = ~(_DWORD)v42;
              do
              {
                v44 = *(_QWORD *)(*((_QWORD *)this + 73) + 24 * v40);
                if (*(_BYTE *)(v44 + v42) != 1)
                {
                  v45 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 28) + 24 * (*((_DWORD *)this + 45) + ~(_DWORD)v40))
                                 + v41
                                 + v43);
                  if (v45)
                  {
                    *(_BYTE *)(v44 + v42) = v45;
                    v41 = *((_DWORD *)this + 43);
                  }
                }
                ++v42;
                --v43;
              }
              while (v42 < v41);
              v39 = *((_DWORD *)this + 45);
            }
            ++v40;
          }
          while (v40 < v39);
        }
        v29 = *((float *)this + 72);
        v30 = v6->f32[1];
        v31 = -(float)(v6->f32[0] - (float)(v29 * (float)v41));
        v32 = (float)v39;
      }
      else
      {
        if (v8 != 270)
          goto LABEL_56;
        v22 = *((_DWORD *)this + 45);
        v23 = *((int *)this + 44);
        if ((int)v23 < v22)
        {
          v24 = *((_DWORD *)this + 43);
          do
          {
            v25 = *((int *)this + 42);
            if ((int)v25 < v24)
            {
              v26 = 24 * v25;
              do
              {
                v27 = *(_QWORD *)(*((_QWORD *)this + 73) + 24 * v23);
                if (*(_BYTE *)(v27 + v25) != 1)
                {
                  v28 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 28) - 24 * *((int *)this + 42) + v26)
                                 + *((_DWORD *)this + 45)
                                 + ~(_DWORD)v23);
                  if (v28)
                  {
                    *(_BYTE *)(v27 + v25) = v28;
                    v24 = *((_DWORD *)this + 43);
                  }
                }
                ++v25;
                v26 += 24;
              }
              while (v25 < v24);
              v22 = *((_DWORD *)this + 45);
            }
            ++v23;
          }
          while (v23 < v22);
        }
        v29 = *((float *)this + 72);
        v30 = v6->f32[1];
        v31 = -(float)(v6->f32[0] - (float)(v29 * (float)*((int *)this + 42)));
        v32 = (float)v22;
      }
    }
    else if (v8)
    {
      if (v8 != 90)
        goto LABEL_56;
      LODWORD(v15) = *((_DWORD *)this + 44);
      v16 = *((_DWORD *)this + 45);
      if ((int)v15 >= v16)
      {
        v17 = *((_DWORD *)this + 43);
      }
      else
      {
        v15 = (int)v15;
        v17 = *((_DWORD *)this + 43);
        do
        {
          v18 = *((int *)this + 42);
          if ((int)v18 < v17)
          {
            v19 = ~(_DWORD)v18;
            do
            {
              v20 = *(_QWORD *)(*((_QWORD *)this + 73) + 24 * v15);
              if (*(_BYTE *)(v20 + v18) != 1)
              {
                v21 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 28) + 24 * (v17 + v19)) + v15 - *((int *)this + 44));
                if (v21)
                {
                  *(_BYTE *)(v20 + v18) = v21;
                  v17 = *((_DWORD *)this + 43);
                }
              }
              ++v18;
              --v19;
            }
            while (v18 < v17);
            v16 = *((_DWORD *)this + 45);
          }
          ++v15;
        }
        while (v15 < v16);
        LODWORD(v15) = *((_DWORD *)this + 44);
      }
      v29 = *((float *)this + 72);
      v30 = v6->f32[1];
      v31 = -(float)(v6->f32[0] - (float)(v29 * (float)v17));
      v32 = (float)(int)v15;
    }
    else
    {
      LODWORD(v33) = *((_DWORD *)this + 44);
      v34 = *((_DWORD *)this + 45);
      if ((int)v33 < v34)
      {
        v33 = (int)v33;
        v35 = *((_DWORD *)this + 43);
        do
        {
          v36 = *((int *)this + 42);
          if ((int)v36 < v35)
          {
            do
            {
              v37 = *(_QWORD *)(*((_QWORD *)this + 73) + 24 * v33);
              if (*(_BYTE *)(v37 + v36) != 1)
              {
                v38 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 28) + 24 * (v33 - *((int *)this + 44)))
                               - *((int *)this + 42)
                               + v36);
                if (v38)
                {
                  *(_BYTE *)(v37 + v36) = v38;
                  v35 = *((_DWORD *)this + 43);
                }
              }
              ++v36;
            }
            while (v36 < v35);
            v34 = *((_DWORD *)this + 45);
          }
          ++v33;
        }
        while (v33 < v34);
        LODWORD(v33) = *((_DWORD *)this + 44);
      }
      v29 = *((float *)this + 72);
      v30 = v6->f32[1];
      v31 = -(float)(v6->f32[0] - (float)(v29 * (float)*((int *)this + 42)));
      v32 = (float)(int)v33;
    }
    v49 = 1065353216;
    v50 = 0uLL;
    *((float *)&v52 + 1) = v31;
    *(float *)v53 = -(float)(v30 - (float)(v29 * v32));
    *(_QWORD *)&v51[16] = 0x3F80000000000000;
    *(_OWORD *)v51 = xmmword_23C603EC0;
    LODWORD(v52) = 0;
    *(_QWORD *)&v53[4] = 0x3F80000000000000;
LABEL_56:
    cv3d::cv::gess::math::Matrix4T<float>::operator*((uint64_t)&v49, (uint64_t)v54, v48);
    v46 = 0;
    v47 = *((_QWORD *)this + 91) + ((unint64_t)a2 << 6);
    do
    {
      *(_DWORD *)(v47 + v46) = *(_DWORD *)((char *)v48 + v46);
      v46 += 4;
    }
    while (v46 != 64);
    return cv3d::cv::gess::isochart::TetrisPacking::UpdateSpaceInfo((uint64_t)this, *((_DWORD *)this + 54));
  }
  return result;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::TryPut(uint64_t result, _QWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  int v10;
  int v11;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  float v19;
  float v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  int v25;
  int *v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  float v34;
  int v35;
  float v36;
  float v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v43;
  float v44;
  int v45;
  int v46;
  int v47;

  v43 = result;
  v47 = a3;
  v10 = a8 - a7;
  v11 = a8 - a9;
  if (a8 - a7 >= a9 && v11 >= a7)
  {
    v41 = (_QWORD *)(result + 24 * a3 + 296);
    v15 = *(float *)(result + 76);
    v16 = (float)a9 - v15;
    v17 = (float)(int)v15;
    v18 = a3 & 0xFFFFFFFD;
    v19 = (float)v10;
    v40 = a6 + a5;
    v20 = (float)v10 / (float)a6;
    v21 = a7;
    v22 = v11 + 1;
    v23 = 4 * ((int)v15 + (uint64_t)a7);
    v39 = *a2 + 4 * (int)v15;
    v38 = (int)v15 + 1;
    v24 = (float)a6 / (float)v10;
    do
    {
      v25 = 0;
      if (v16 <= v17)
      {
        v29 = 100000000;
      }
      else
      {
        v26 = (int *)(*v41 + v23);
        v27 = v38;
        v28 = (int *)v39;
        v29 = 100000000;
        do
        {
          v31 = *v26++;
          v30 = v31;
          v32 = *v28++;
          v33 = v32 + v30;
          v25 += v33;
          if (v33 < v29)
            v29 = v33;
          v34 = (float)v27++;
        }
        while (v16 > v34);
      }
      v35 = v25 - v29 * a9;
      v45 = v35;
      v46 = v29;
      if (v29 <= a5)
      {
        v37 = (float)(v40 - v29);
        if (v18)
          v36 = v19 / v37;
        else
          v36 = v37 / v19;
        v44 = v36;
      }
      else if (v18)
      {
        v44 = v20;
        v36 = v20;
      }
      else
      {
        v44 = v24;
        v36 = v24;
      }
      result = cv3d::cv::gess::isochart::IfNewPositionAcceptable(a10, &v44, &v47, &v45, &v46);
      if ((_DWORD)result)
      {
        *(_QWORD *)a10 = *(int *)(v43 + 188);
        *(float *)(a10 + 28) = v36;
        *(_DWORD *)(a10 + 8) = v35;
        *(_DWORD *)(a10 + 12) = v21;
        *(_DWORD *)(a10 + 16) = v29;
        *(_DWORD *)(a10 + 20) = a4;
        *(_DWORD *)(a10 + 24) = a3;
      }
      ++v21;
      v23 += 4;
    }
    while (v22 != v21);
  }
  return result;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::GetChartPutPosition(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int *v18;

  v2 = *(_QWORD *)(this + 680) + 232 * a2 + 16;
  v3 = *(_QWORD *)(this + 192);
  switch(*(_DWORD *)(this + 216))
  {
    case 0:
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 204);
      v4 = *(_DWORD *)(this + 212);
      if (v4 == 180 || v4 == 0)
        v11 = *(_DWORD *)(v2 + 72 * v3 + 28);
      else
        v11 = *(_DWORD *)(v2 + 72 * v3 + 24);
      v8 = *(_DWORD *)(this + 156) - v11 + *(_DWORD *)(this + 208);
      goto LABEL_17;
    case 1:
      v6 = *(_DWORD *)(this + 204);
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 152) - *(_DWORD *)(this + 208);
      *(_DWORD *)(this + 176) = v6;
      break;
    case 2:
      v7 = *(_DWORD *)(this + 208);
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 204);
      v8 = *(_DWORD *)(this + 160) - v7;
LABEL_17:
      *(_DWORD *)(this + 176) = v8;
      break;
    case 3:
      *(_DWORD *)(this + 176) = *(_DWORD *)(this + 204);
      v9 = *(_DWORD *)(this + 212);
      if (v9 == 180 || v9 == 0)
        v12 = *(_DWORD *)(v2 + 72 * v3 + 24);
      else
        v12 = *(_DWORD *)(v2 + 72 * v3 + 28);
      *(_DWORD *)(this + 168) = *(_DWORD *)(this + 208) + *(_DWORD *)(this + 148) - v12;
      break;
    default:
      break;
  }
  v13 = *(_DWORD *)(this + 212);
  if (v13 <= 179)
  {
    if (v13)
    {
      if (v13 != 90)
        return this;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v13 == 270)
  {
LABEL_27:
    v14 = *(_DWORD *)(this + 168);
    v18 = (int *)(v2 + 72 * v3 + 24);
    v16 = *v18;
    v17 = v18[1];
    goto LABEL_28;
  }
  if (v13 == 180)
  {
LABEL_25:
    v14 = *(_DWORD *)(this + 168);
    v15 = v2 + 72 * v3;
    v17 = *(_DWORD *)(v15 + 24);
    v16 = *(_DWORD *)(v15 + 28);
LABEL_28:
    *(_DWORD *)(this + 172) = v17 + v14;
    *(_DWORD *)(this + 180) = v16 + *(_DWORD *)(this + 176);
  }
  return this;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::CheckAtlasRange(cv3d::cv::gess::isochart::TetrisPacking *this)
{
  int v1;
  int v2;
  int v3;
  int v4;
  float v5;
  int v6;
  int v7;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  float v11;

  v1 = *((_DWORD *)this + 42);
  v2 = *((_DWORD *)this + 43);
  if (v1 >= *((_DWORD *)this + 37))
    v1 = *((_DWORD *)this + 37);
  v3 = *((_DWORD *)this + 44);
  if (v3 >= *((_DWORD *)this + 39))
    v3 = *((_DWORD *)this + 39);
  if (v2 <= *((_DWORD *)this + 38))
    v2 = *((_DWORD *)this + 38);
  if (*((_DWORD *)this + 45) <= *((_DWORD *)this + 40))
    v4 = *((_DWORD *)this + 40);
  else
    v4 = *((_DWORD *)this + 45);
  v5 = *((float *)this + 19);
  v6 = (int)(float)((float)(v2 - v1) + (float)(v5 * -2.0));
  v7 = (int)(float)((float)(v4 - v3) + (float)(v5 * -2.0));
  v8 = **((_DWORD **)this + 6);
  if ((int)v8 < v6)
  {
    *((_BYTE *)this + 124) = 1;
    if (*((_DWORD *)this + 18) < 0x1Eu)
    {
      *((float *)this + 34) = (float)v8 / (float)v6;
      v9 = **((_DWORD **)this + 7);
      goto LABEL_15;
    }
    return 0;
  }
  v9 = **((_DWORD **)this + 7);
  v10 = 1;
  if (v9 >= v7)
    return v10;
  *((_BYTE *)this + 124) = 1;
  if (*((_DWORD *)this + 18) >= 0x1Eu)
    return 0;
LABEL_15:
  if (v9 >= v7)
    v11 = *((float *)this + 34);
  else
    v11 = (float)v9 / (float)v7;
  v10 = 0;
  *((float *)this + 34) = v11 * v11;
  return v10;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::UpdateSpaceInfo(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;

  LODWORD(v2) = *(_DWORD *)(this + 168);
  v3 = *(_DWORD *)(this + 172);
  v4 = *(_DWORD *)(this + 152);
  v5 = *(int *)(this + 148);
  if ((int)v2 >= (int)v5)
    v6 = *(_DWORD *)(this + 148);
  else
    v6 = *(_DWORD *)(this + 168);
  LODWORD(v7) = *(_DWORD *)(this + 176);
  v8 = *(_DWORD *)(this + 180);
  v9 = *(_DWORD *)(this + 160);
  v10 = *(int *)(this + 156);
  if ((int)v7 >= (int)v10)
    v11 = *(_DWORD *)(this + 156);
  else
    v11 = *(_DWORD *)(this + 176);
  if (v3 <= v4)
    v12 = *(_DWORD *)(this + 152);
  else
    v12 = *(_DWORD *)(this + 172);
  if (v8 <= v9)
    v13 = *(_DWORD *)(this + 160);
  else
    v13 = *(_DWORD *)(this + 180);
  switch(a2)
  {
    case 0:
      if ((int)v7 < (int)v10)
      {
        if ((int)v5 < (int)v2)
        {
          v14 = *(_QWORD *)(this + 296);
          do
          {
            *(_DWORD *)(v14 + 4 * v5++) += *(_DWORD *)(this + 156) - *(_DWORD *)(this + 176);
            v2 = *(int *)(this + 168);
          }
          while (v5 < v2);
          v3 = *(_DWORD *)(this + 172);
          v4 = *(_DWORD *)(this + 152);
        }
        if (v3 < v4)
        {
          v15 = *(_QWORD *)(this + 296);
          v16 = v3;
          do
            *(_DWORD *)(v15 + 4 * v16++) += *(_DWORD *)(this + 156) - *(_DWORD *)(this + 176);
          while (v16 < *(int *)(this + 152));
          LODWORD(v2) = *(_DWORD *)(this + 168);
          v3 = *(_DWORD *)(this + 172);
        }
      }
      if ((int)v2 < v3)
      {
        v17 = *(_QWORD *)(this + 296);
        v2 = (int)v2;
        do
        {
          v18 = 0;
          v19 = 24 * v11;
          do
          {
            if (v11 + v18 >= v13)
              break;
            v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + v19) + v2);
            ++v18;
            v19 += 24;
          }
          while (!v20);
          *(_DWORD *)(v17 + 4 * v2++) = v11 + v18 + ~v11;
        }
        while (v2 < *(int *)(this + 172));
      }
      v21 = *(int *)(this + 176);
      if ((int)v21 < *(_DWORD *)(this + 180))
      {
        v22 = *(_QWORD *)(this + 368);
        v23 = *(_QWORD *)(this + 320);
        do
        {
          v24 = 0;
          do
          {
            if (v6 + v24 >= v12)
              break;
          }
          while (!*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + 24 * v21) + v6 + v24++));
          *(_DWORD *)(v22 + 4 * v21) = v6 + v24 + ~v6;
          v26 = v12;
          v27 = v12;
          while (v26 > v6)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(this + 584) + 24 * v21) + v26--;
            --v27;
            if (*(_BYTE *)(v28 - 1))
              goto LABEL_39;
          }
          v27 = v26;
LABEL_39:
          *(_DWORD *)(v23 + 4 * v21++) = v12 + ~v27;
        }
        while (v21 < *(int *)(this + 180));
      }
      break;
    case 1:
      if (v3 > v4)
      {
        if ((int)v10 < (int)v7)
        {
          v61 = *(_QWORD *)(this + 320);
          do
          {
            *(_DWORD *)(v61 + 4 * v10++) += *(_DWORD *)(this + 172) - *(_DWORD *)(this + 152);
            v7 = *(int *)(this + 176);
          }
          while (v10 < v7);
          v8 = *(_DWORD *)(this + 180);
          v9 = *(_DWORD *)(this + 160);
        }
        if (v8 < v9)
        {
          v62 = *(_QWORD *)(this + 320);
          v63 = v8;
          do
            *(_DWORD *)(v62 + 4 * v63++) += *(_DWORD *)(this + 172) - *(_DWORD *)(this + 152);
          while (v63 < *(int *)(this + 160));
          LODWORD(v7) = *(_DWORD *)(this + 176);
          v8 = *(_DWORD *)(this + 180);
        }
      }
      if ((int)v7 < v8)
      {
        v64 = *(_QWORD *)(this + 320);
        v7 = (int)v7;
        do
        {
          v65 = v12;
          v66 = v12;
          while (v65 > v6)
          {
            v67 = *(_QWORD *)(*(_QWORD *)(this + 584) + 24 * v7) + v65--;
            --v66;
            if (*(_BYTE *)(v67 - 1))
              goto LABEL_113;
          }
          v66 = v65;
LABEL_113:
          *(_DWORD *)(v64 + 4 * v7++) = v12 + ~v66;
        }
        while (v7 < *(int *)(this + 180));
      }
      v68 = *(int *)(this + 168);
      if ((int)v68 < *(_DWORD *)(this + 172))
      {
        v69 = *(_QWORD *)(this + 296);
        v70 = *(_QWORD *)(this + 344);
        do
        {
          v71 = 0;
          v72 = 24 * v11;
          do
          {
            if (v11 + v71 >= v13)
              break;
            v73 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + v72) + v68);
            ++v71;
            v72 += 24;
          }
          while (!v73);
          *(_DWORD *)(v69 + 4 * v68) = v11 + v71 + ~v11;
          v74 = 24 * v13 - 24;
          v75 = v13;
          v76 = v13;
          while (v75 > v11)
          {
            --v75;
            --v76;
            v77 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + v74) + v68);
            v74 -= 24;
            if (v77)
              goto LABEL_124;
          }
          v76 = v75;
LABEL_124:
          *(_DWORD *)(v70 + 4 * v68++) = v13 + ~v76;
        }
        while (v68 < *(int *)(this + 172));
      }
      break;
    case 2:
      if (v8 > v9)
      {
        if ((int)v5 < (int)v2)
        {
          v29 = *(_QWORD *)(this + 344);
          do
            *(_DWORD *)(v29 + 4 * v5++) += *(_DWORD *)(this + 180) - *(_DWORD *)(this + 160);
          while (v5 < *(int *)(this + 168));
          v3 = *(_DWORD *)(this + 172);
          v4 = *(_DWORD *)(this + 152);
          LODWORD(v2) = *(_DWORD *)(this + 168);
        }
        if (v3 < v4)
        {
          v30 = *(_QWORD *)(this + 344);
          v31 = v3;
          do
            *(_DWORD *)(v30 + 4 * v31++) += *(_DWORD *)(this + 180) - *(_DWORD *)(this + 160);
          while (v31 < *(int *)(this + 152));
          LODWORD(v2) = *(_DWORD *)(this + 168);
          v3 = *(_DWORD *)(this + 172);
        }
      }
      if ((int)v2 < v3)
      {
        v32 = *(_QWORD *)(this + 344);
        v2 = (int)v2;
        do
        {
          v33 = 24 * v13 - 24;
          v34 = v13;
          v35 = v13;
          while (v34 > v11)
          {
            --v34;
            --v35;
            v36 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + v33) + v2);
            v33 -= 24;
            if (v36)
              goto LABEL_57;
          }
          v35 = v34;
LABEL_57:
          *(_DWORD *)(v32 + 4 * v2++) = v13 + ~v35;
        }
        while (v2 < *(int *)(this + 172));
      }
      v37 = *(int *)(this + 176);
      if ((int)v37 < *(_DWORD *)(this + 180))
      {
        v38 = *(_QWORD *)(this + 368);
        v39 = *(_QWORD *)(this + 320);
        do
        {
          v40 = 0;
          do
          {
            if (v6 + v40 >= v12)
              break;
          }
          while (!*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + 24 * v37) + v6 + v40++));
          *(_DWORD *)(v38 + 4 * v37) = v6 + v40 + ~v6;
          v42 = v12;
          v43 = v12;
          while (v42 > v6)
          {
            v44 = *(_QWORD *)(*(_QWORD *)(this + 584) + 24 * v37) + v42--;
            --v43;
            if (*(_BYTE *)(v44 - 1))
              goto LABEL_68;
          }
          v43 = v42;
LABEL_68:
          *(_DWORD *)(v39 + 4 * v37++) = v12 + ~v43;
        }
        while (v37 < *(int *)(this + 180));
      }
      break;
    case 3:
      if ((int)v2 < (int)v5)
      {
        if ((int)v10 < (int)v7)
        {
          v45 = *(_QWORD *)(this + 368);
          do
          {
            *(_DWORD *)(v45 + 4 * v10++) += *(_DWORD *)(this + 148) - *(_DWORD *)(this + 168);
            v7 = *(int *)(this + 176);
          }
          while (v10 < v7);
          v8 = *(_DWORD *)(this + 180);
          v9 = *(_DWORD *)(this + 160);
        }
        if (v8 < v9)
        {
          v46 = *(_QWORD *)(this + 368);
          v47 = v8;
          do
            *(_DWORD *)(v46 + 4 * v47++) += *(_DWORD *)(this + 148) - *(_DWORD *)(this + 168);
          while (v47 < *(int *)(this + 160));
          LODWORD(v7) = *(_DWORD *)(this + 176);
          v8 = *(_DWORD *)(this + 180);
        }
      }
      if ((int)v7 < v8)
      {
        v48 = *(_QWORD *)(this + 368);
        v7 = (int)v7;
        do
        {
          v49 = 0;
          do
          {
            if (v6 + v49 >= v12)
              break;
          }
          while (!*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + 24 * v7) + v6 + v49++));
          *(_DWORD *)(v48 + 4 * v7++) = v6 + v49 + ~v6;
        }
        while (v7 < *(int *)(this + 180));
      }
      v51 = *(int *)(this + 168);
      if ((int)v51 < *(_DWORD *)(this + 172))
      {
        v52 = *(_QWORD *)(this + 296);
        v53 = *(_QWORD *)(this + 344);
        do
        {
          v54 = 0;
          v55 = 24 * v11;
          do
          {
            if (v11 + v54 >= v13)
              break;
            v56 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + v55) + v51);
            ++v54;
            v55 += 24;
          }
          while (!v56);
          *(_DWORD *)(v52 + 4 * v51) = v11 + v54 + ~v11;
          v57 = 24 * v13 - 24;
          v58 = v13;
          v59 = v13;
          while (v58 > v11)
          {
            --v58;
            --v59;
            v60 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(this + 584) + v57) + v51);
            v57 -= 24;
            if (v60)
              goto LABEL_95;
          }
          v59 = v58;
LABEL_95:
          *(_DWORD *)(v53 + 4 * v51++) = v13 + ~v59;
        }
        while (v51 < *(int *)(this + 172));
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(this + 148) = v6;
  *(_DWORD *)(this + 152) = v12;
  *(_DWORD *)(this + 156) = v11;
  *(_DWORD *)(this + 160) = v13;
  return this;
}

uint64_t cv3d::cv::gess::isochart::TetrisPacking::ComputeChartsLengthInPixel(uint64_t this, double a2, double a3, double a4, double a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  const float *v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;

  v5 = *(_QWORD *)(this + 656);
  v6 = *(_QWORD *)(this + 664);
  if (v5 < v6)
  {
    v7 = *(_QWORD *)(this + 704);
    v8 = *(_QWORD *)(this + 680);
    do
    {
      v9 = *(_DWORD *)(v7 + 4 * v5);
      if (*(_BYTE *)(v8 + 232 * v9 + 4))
      {
        v10 = 0;
        v11 = v8 + 232 * v9;
        do
        {
          v12 = v11 + v10;
          LODWORD(a5) = *(_DWORD *)(this + 288);
          v13 = *(float32x2_t *)(v11 + v10 + 24);
          v14 = vsub_f32(*(float32x2_t *)(v11 + v10 + 32), v13);
          v15 = (const float *)(this + 288);
          v16 = vcvt_f32_s32((int32x2_t)vmax_u32((uint32x2_t)vcvt_s32_f32(vrndp_f32(vdiv_f32(v14, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0)))), (uint32x2_t)0x100000001));
          v17 = vmla_n_f32(vneg_f32(v14), v16, *(float *)&a5);
          v18 = vmul_f32(v17, (float32x2_t)0x3F0000003F000000);
          *(float32x2_t *)(v12 + 48) = v18;
          v17.i32[0] = *(_DWORD *)(this + 76);
          v19 = vld1_dup_f32(v15);
          *(float32x2_t *)(v12 + 16) = vsub_f32(vmls_lane_f32(v13, v19, v17, 0), v18);
          a5 = COERCE_DOUBLE(vcvt_s32_f32(vmla_n_f32(v16, (float32x2_t)0x4000000040000000, *(float *)(this + 76))));
          *(double *)(v12 + 40) = a5;
          v10 += 72;
        }
        while (v10 != 216);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return this;
}

_QWORD *cv3d::cv::gess::isochart::TetrisPacking::GrowChart(_QWORD *this, unsigned int a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t i;
  int j;
  unsigned int v15;
  int k;
  uint64_t v17;
  uint64_t v18;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = this[85] + 232 * a2 + 72 * a3;
    v6 = *(_DWORD *)(v5 + 40);
    v7 = *(_DWORD *)(v5 + 44);
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = v6;
    if (v7 <= 1)
      v9 = 1;
    else
      v9 = v7;
    do
    {
      v10 = v4 + 1;
      if (v7)
      {
        v11 = 0;
        v12 = v4 + 2;
        do
        {
          if (v6)
          {
            for (i = 0; i != v8; ++i)
            {
              if (v10 == *(unsigned __int8 *)(*(_QWORD *)(this[76] + 24 * v11) + i))
              {
                for (j = -1; j != 2; ++j)
                {
                  v15 = j + v11;
                  if (j + (int)v11 >= 0 && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(this[77] - this[76]) >> 3) > v15)
                  {
                    for (k = -1; k != 2; ++k)
                    {
                      v17 = (i + k);
                      if ((int)i + k >= 0)
                      {
                        v18 = *(_QWORD *)(this[76] + 24 * v15);
                        if (*(_QWORD *)(this[76] + 24 * v15 + 8) - v18 > (unint64_t)v17
                          && !*(_BYTE *)(v18 + v17))
                        {
                          *(_BYTE *)(v18 + v17) = v12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          ++v11;
        }
        while (v11 != v9);
      }
      v4 = v10;
    }
    while (v10 != a4);
  }
  return this;
}

float cv3d::cv::gess::isochart::TetrisPacking::GetChartArea(cv3d::cv::gess::isochart::TetrisPacking *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v3 = *((_QWORD *)this + 10);
  v4 = *(unsigned int *)(v3 + 4 * a2);
  if (*((_DWORD *)this + 18) - 1 == a2)
    v3 = (*(_QWORD *)(*((_QWORD *)this + 4) + 160) - *(_QWORD *)(*((_QWORD *)this + 4) + 152)) >> 2;
  else
    LODWORD(v3) = *(_DWORD *)(v3 + 4 * (a2 + 1));
  v5 = 0.0;
  if (v4 < v3)
  {
    v6 = v3;
    do
    {
      v7 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(*((_QWORD *)this + 4), *((_DWORD *)this + 29), v4);
      v8 = *((_QWORD *)this + 4);
      v29 = *((_DWORD *)this + 26);
      v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v8 + 80), &v29, v9);
      v13 = *v7;
      v14 = *(_QWORD *)(v10 + 40);
      if (v13 >= (*(_QWORD *)(v10 + 48) - v14) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v10, v11, v12);
      v15 = *((_QWORD *)this + 4);
      v30 = *((_DWORD *)this + 26);
      v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v15 + 80), &v30, v12);
      v19 = v7[1];
      v20 = *(_QWORD *)(v16 + 40);
      if (v19 >= (*(_QWORD *)(v16 + 48) - v20) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v16, v17, v18);
      v21 = *((_QWORD *)this + 4);
      v31 = *((_DWORD *)this + 26);
      v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v21 + 80), &v31, v18);
      v25 = v7[2];
      v26 = *(_QWORD *)(v22 + 40);
      if (v25 >= (*(_QWORD *)(v22 + 48) - v26) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v22, v23, v24);
      v27 = (float *)(v14 + 8 * v13);
      v5 = v5
         + (float)(fabsf((float)((float)(*(float *)(v20 + 8 * v19) - *v27) * (float)(*(float *)(v26 + 8 * v25 + 4) - v27[1]))- (float)((float)(*(float *)(v20 + 8 * v19 + 4) - v27[1]) * (float)(*(float *)(v26 + 8 * v25) - *v27)))* 0.5);
      ++v4;
    }
    while (v6 != v4);
  }
  return v5;
}

void std::vector<cv3d::cv::gess::isochart::EdgeInfo>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 32 * v6;
    std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 += (v8 - v9 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
}

void sub_23C59AFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cv3d::cv::gess::isochart::ChartInfo>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x34F72C234F72C235 * ((v6 - v7) >> 3) >= a2)
    return std::vector<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end((uint64_t)a1, a2);
  v8 = 0x34F72C234F72C235 * ((v7 - *a1) >> 3);
  v9 = v8 + a2;
  if (v8 + a2 > 0x11A7B9611A7B961)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v10 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x8D3DCB08D3DCB0)
    v11 = 0x11A7B9611A7B961;
  else
    v11 = v9;
  v18 = v4;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>>(v4, v11);
  else
    v12 = 0;
  v14 = v12;
  v15 = &v12[232 * v8];
  v16 = v15;
  v17 = &v12[232 * v11];
  std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end((uint64_t)&v14, a2);
  std::vector<cv3d::cv::gess::isochart::ChartInfo>::__swap_out_circular_buffer(a1, &v14);
  return std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::~__split_buffer((uint64_t)&v14);
}

void sub_23C59B0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = v2 + 232 * a2;
    do
    {
      v4 = 0;
      *(_DWORD *)v2 = 0;
      *(_BYTE *)(v2 + 4) = 0;
      *(_DWORD *)(v2 + 8) = 0;
      do
      {
        v5 = (_QWORD *)(v2 + v4);
        v5[6] = 0;
        v5[9] = 0;
        v5[10] = 0;
        v5[8] = 0;
        v5[3] = 0;
        v5[4] = 0;
        v4 += 72;
        v5[2] = 0;
      }
      while (v4 != 216);
      v2 += 232;
    }
    while (v2 != v3);
    v2 = v3;
  }
  *(_QWORD *)(result + 8) = v2;
  return result;
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__construct_at_end(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(result + 16);
  if (a2)
  {
    v3 = v2 + 232 * a2;
    do
    {
      v4 = 0;
      *(_DWORD *)v2 = 0;
      *(_BYTE *)(v2 + 4) = 0;
      *(_DWORD *)(v2 + 8) = 0;
      do
      {
        v5 = (_QWORD *)(v2 + v4);
        v5[6] = 0;
        v5[9] = 0;
        v5[10] = 0;
        v5[8] = 0;
        v5[3] = 0;
        v5[4] = 0;
        v4 += 72;
        v5[2] = 0;
      }
      while (v4 != 216);
      v2 += 232;
    }
    while (v2 != v3);
    v2 = v3;
  }
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t std::vector<cv3d::cv::gess::isochart::ChartInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(232 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 232);
      v9 -= 232;
      *(_DWORD *)(v7 - 224) = *(_DWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 232) = v10;
      std::array<cv3d::cv::gess::isochart::PositionInfo,3ul>::array(v7 - 216, v9 + 16);
      v7 = *((_QWORD *)&v16 + 1) - 232;
      *((_QWORD *)&v16 + 1) -= 232;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_23C59B334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::array<cv3d::cv::gess::isochart::PositionInfo,3ul>::array(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  int v6;
  _QWORD *v7;

  for (i = 0; i != 216; i += 72)
  {
    v5 = a1 + i;
    *(_DWORD *)v5 = *(_DWORD *)(a2 + i);
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(a2 + i + 4);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + i + 8);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(a2 + i + 12);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + i + 16);
    *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + i + 20);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + i + 24);
    *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + i + 32);
    *(_DWORD *)(v5 + 36) = *(_DWORD *)(a2 + i + 36);
    v6 = *(_DWORD *)(a2 + i + 40);
    *(_QWORD *)(v5 + 48) = 0;
    v7 = (_QWORD *)(a1 + i + 48);
    *((_DWORD *)v7 - 2) = v6;
    v7[1] = 0;
    v7[2] = 0;
    std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__init_with_size[abi:ne180100]<cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>(v7, *(_DWORD **)(a2 + i + 48), *(_DWORD **)(a2 + i + 56), (uint64_t)(*(_QWORD *)(a2 + i + 56) - *(_QWORD *)(a2 + i + 48)) >> 5);
  }
  return a1;
}

void sub_23C59B3F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  for (; v2; v2 -= 72)
  {
    v4 = *(void **)(v1 + v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v1 + v2 - 16) = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__init_with_size[abi:ne180100]<cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<tinyexr::OffsetData>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C59B474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  *(_QWORD *)(v1 + 8) = v2;
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*,cv3d::cv::gess::isochart::EdgeInfo*>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *result;

  result = a4;
  while (a2 != a3)
  {
    *result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    result[3] = a2[3];
    result[4] = a2[4];
    result[5] = a2[5];
    result[6] = a2[6];
    result[7] = a2[7];
    result += 8;
    a2 += 8;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<cv3d::cv::gess::isochart::ChartInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::ChartInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = 0;
      v4 = v1 + 232;
      do
      {
        v5 = *(void **)(v1 + v3 + 208);
        if (v5)
        {
          *(_QWORD *)(v1 + v3 + 216) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != -216);
      v1 += 232;
    }
    while (v4 != v2);
  }
}

uint64_t std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<cv3d::cv::gess::isochart::ChartInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  void *v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    *(_QWORD *)(a1 + 16) = i - 232;
    do
    {
      v6 = *(void **)(i + v5 - 24);
      if (v6)
      {
        *(_QWORD *)(i + v5 - 16) = v6;
        operator delete(v6);
      }
      v5 -= 72;
    }
    while (v5 != -216);
  }
}

void std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _OWORD *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 6)
  {
    if (a2)
    {
      v14 = &v7[4 * a2];
      v15 = a2 << 6;
      do
      {
        *v7 = xmmword_23C60C6F8;
        v7[1] = unk_23C60C708;
        v7[2] = xmmword_23C60C718;
        v7[3] = unk_23C60C728;
        v7 += 4;
        v15 -= 64;
      }
      while (v15);
      v7 = v14;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 6);
    if (v9 >> 58)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 6;
    v11 = v5 - *a1;
    if (v11 >> 5 > v9)
      v9 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v23 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>(v4, v12);
    else
      v13 = 0;
    v16 = &v13[64 * v10];
    __p = v13;
    v20 = v16;
    v22 = &v13[64 * v12];
    v17 = a2 << 6;
    v18 = &v16[64 * a2];
    do
    {
      *(_OWORD *)v16 = xmmword_23C60C6F8;
      *((_OWORD *)v16 + 1) = unk_23C60C708;
      *((_OWORD *)v16 + 2) = xmmword_23C60C718;
      *((_OWORD *)v16 + 3) = unk_23C60C728;
      v16 += 64;
      v17 -= 64;
    }
    while (v17);
    v21 = v18;
    std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__swap_out_circular_buffer(a1, &__p);
    if (v21 != v20)
      v21 += (v20 - v21 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (__p)
      operator delete(__p);
  }
}

void sub_23C59B780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::math::Matrix4T<float>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 64;
      v6 = v3 - 64;
      *(_OWORD *)(v4 - 64) = xmmword_23C60C6F8;
      *(_OWORD *)(v4 - 48) = unk_23C60C708;
      v7 = -64;
      *(_OWORD *)(v4 - 32) = xmmword_23C60C718;
      *(_OWORD *)(v4 - 16) = unk_23C60C728;
      do
      {
        *(_DWORD *)(v4 + v7) = *(_DWORD *)(v3 + v7);
        v7 += 4;
      }
      while (v7);
      v3 -= 64;
      v4 -= 64;
    }
    while (v6 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

_QWORD *cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_1::__invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  int v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v9, a1);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = a2 >> 1;
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, int *, unint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 48))(v10, &v8, v4 + 4 * (a2 & 1), a1 + 40, v5 + 32 * a2);
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_23C59B920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

_QWORD *cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_1::__invoke(uint64_t a1, int a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v6, a1);
  v5 = a2;
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, int *))(*(_QWORD *)v7 + 48))(v7, &v5);
  result = v7;
  if (v7 == v6)
  {
    v4 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_23C59BA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__push_back_slow_path<cv3d::cv::gess::isochart::EdgeInfo>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  v11 = &v10[32 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[32 * v12];
  *(_DWORD *)v11 = *a2;
  *((_DWORD *)v11 + 1) = a2[1];
  *((_DWORD *)v11 + 2) = a2[2];
  *((_DWORD *)v11 + 3) = a2[3];
  *((_DWORD *)v11 + 4) = a2[4];
  *((_DWORD *)v11 + 5) = a2[5];
  *((_DWORD *)v11 + 6) = a2[6];
  *((_DWORD *)v11 + 7) = a2[7];
  v17 = v11 + 32;
  std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_23C59BB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<cv3d::cv::gess::isochart::EdgeInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

float std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<cv3d::cv::gess::isochart::EdgeInfo>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>,std::reverse_iterator<cv3d::cv::gess::isochart::EdgeInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  float result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 16;
    do
    {
      v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 16) = v9;
      *(_DWORD *)(v8 - 12) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(v8 - 4) = *(_DWORD *)(a3 + 12);
      *(_DWORD *)v8 = *(_DWORD *)(a3 + 16);
      *(_DWORD *)(v8 + 4) = *(_DWORD *)(a3 + 20);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a3 + 24);
      result = *(float *)(a3 + 28);
      *(float *)(v8 + 12) = result;
      v8 -= 32;
      v7 -= 32;
    }
    while (a3 != a5);
  }
  return result;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *,false>(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  float v62;
  uint64_t v63;
  unsigned int *v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  float v92;
  unsigned int *v93;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  float v100;
  unsigned int *v101;
  unsigned int *v102;

  v9 = result;
LABEL_2:
  v102 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 1);
        v44 = *v10;
        if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680) + 232 * v43) > *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680)
                                                                                     + 232 * *v10))
        {
          *v10 = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v10, v10 + 1, v102, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v10, v10 + 1, v10 + 2, v102, a3);
      case 5uLL:
        v45 = v10 + 2;
        v46 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v47 = *(a2 - 1);
        v48 = v10[3];
        v49 = *(_QWORD *)(*(_QWORD *)a3 + 680);
        if (*(float *)(v49 + 232 * v47) > *(float *)(v49 + 232 * v48))
        {
          *v46 = v47;
          *(a2 - 1) = v48;
          v50 = *v46;
          v51 = *v45;
          v52 = *(float *)(v49 + 232 * *v46);
          if (v52 > *(float *)(v49 + 232 * *v45))
          {
            *v45 = v50;
            *v46 = v51;
            v53 = v10[1];
            if (v52 > *(float *)(v49 + 232 * v53))
            {
              v10[1] = v50;
              v10[2] = v53;
              v54 = *v10;
              if (v52 > *(float *)(v49 + 232 * *v10))
              {
                *v10 = v50;
                v10[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v55 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v56 = 0;
                v57 = *(_QWORD *)(*(_QWORD *)a3 + 680);
                v58 = v10;
                do
                {
                  v60 = *v58;
                  v59 = v58[1];
                  v58 = v55;
                  v61 = v60;
                  v62 = *(float *)(v57 + 232 * v59);
                  if (v62 > *(float *)(v57 + 232 * v60))
                  {
                    v63 = v56;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v63 + 4) = v61;
                      if (!v63)
                        break;
                      v61 = *(unsigned int *)((char *)v10 + v63 - 4);
                      v63 -= 4;
                      if (v62 <= *(float *)(v57 + 232 * v61))
                      {
                        v64 = (unsigned int *)((char *)v10 + v63 + 4);
                        goto LABEL_75;
                      }
                    }
                    v64 = v10;
LABEL_75:
                    *v64 = v59;
                  }
                  v55 = v58 + 1;
                  v56 += 4;
                }
                while (v58 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v95 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v96 = *(_QWORD *)(*(_QWORD *)a3 + 680);
              do
              {
                v98 = *v9;
                v97 = v9[1];
                v9 = v95;
                v99 = v98;
                v100 = *(float *)(v96 + 232 * v97);
                if (v100 > *(float *)(v96 + 232 * v98))
                {
                  v101 = v9;
                  do
                  {
                    *v101 = v99;
                    v99 = *(v101 - 2);
                    --v101;
                  }
                  while (v100 > *(float *)(v96 + 232 * v99));
                  *v101 = v97;
                }
                v95 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v65 = (v12 - 2) >> 1;
            v66 = *(_QWORD *)a3;
            v67 = v65;
            do
            {
              v68 = v67;
              if (v65 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v10[v69];
                if (2 * v68 + 2 >= (uint64_t)v12)
                {
                  v71 = *(_QWORD *)(v66 + 680);
                }
                else
                {
                  v71 = *(_QWORD *)(v66 + 680);
                  if (*(float *)(v71 + 232 * *v70) > *(float *)(v71 + 232 * v70[1]))
                  {
                    ++v70;
                    v69 = 2 * v68 + 2;
                  }
                }
                v72 = &v10[v68];
                v73 = *v70;
                v74 = *v72;
                result = (unsigned int *)(232 * *v72);
                v75 = *(float *)((char *)result + v71);
                if (*(float *)(v71 + 232 * *v70) <= v75)
                {
                  do
                  {
                    result = v70;
                    *v72 = v73;
                    if (v65 < v69)
                      break;
                    v76 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = &v10[v69];
                    v77 = v76 + 2;
                    if (v77 < (uint64_t)v12 && *(float *)(v71 + 232 * *v70) > *(float *)(v71 + 232 * v70[1]))
                    {
                      ++v70;
                      v69 = v77;
                    }
                    v73 = *v70;
                    v72 = result;
                  }
                  while (*(float *)(v71 + 232 * *v70) <= v75);
                  *result = v74;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v78 = (unint64_t)v11 >> 2;
            do
            {
              v79 = 0;
              v80 = *v10;
              v81 = *(_QWORD *)a3;
              v82 = v10;
              do
              {
                v83 = v82;
                v82 += v79 + 1;
                v84 = 2 * v79;
                v79 = (2 * v79) | 1;
                v85 = v84 + 2;
                if (v85 < v78)
                {
                  result = (unsigned int *)(232 * v82[1]);
                  if (*(float *)(*(_QWORD *)(v81 + 680) + 232 * *v82) > *(float *)((char *)result
                                                                                    + *(_QWORD *)(v81 + 680)))
                  {
                    ++v82;
                    v79 = v85;
                  }
                }
                *v83 = *v82;
              }
              while (v79 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v80;
              }
              else
              {
                *v82 = *a2;
                *a2 = v80;
                v86 = (char *)v82 - (char *)v10 + 4;
                if (v86 >= 5)
                {
                  v87 = (((unint64_t)v86 >> 2) - 2) >> 1;
                  v88 = &v10[v87];
                  v89 = *v88;
                  v90 = *v82;
                  v91 = *(_QWORD *)(v81 + 680);
                  v92 = *(float *)(v91 + 232 * *v82);
                  if (*(float *)(v91 + 232 * *v88) > v92)
                  {
                    do
                    {
                      v93 = v88;
                      *v82 = v89;
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = &v10[v87];
                      v89 = *v88;
                      v82 = v93;
                    }
                    while (*(float *)(v91 + 232 * *v88) > v92);
                    *v93 = v90;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(&v9[v12 >> 1], v9, v102, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v9, &v9[v12 >> 1], v102, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v18 = *(_QWORD *)(v17 + 680);
          v19 = *(float *)(v18 + 232 * v16);
          if (*(float *)(v18 + 232 * *(v9 - 1)) > v19)
            goto LABEL_12;
          if (v19 <= *(float *)(v18 + 232 * *v102))
          {
            v35 = v9 + 1;
            do
            {
              v10 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v19 <= *(float *)(v18 + 232 * *v10));
          }
          else
          {
            v10 = v9;
            do
            {
              v34 = v10[1];
              ++v10;
            }
            while (v19 <= *(float *)(v18 + 232 * v34));
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v19 > *(float *)(v18 + 232 * v37));
          }
          if (v10 < v36)
          {
            v38 = *v10;
            v39 = *v36;
            do
            {
              *v10 = v39;
              *v36 = v38;
              do
              {
                v40 = v10[1];
                ++v10;
                v38 = v40;
              }
              while (v19 <= *(float *)(v18 + 232 * v40));
              do
              {
                v41 = *--v36;
                v39 = v41;
              }
              while (v19 > *(float *)(v18 + 232 * v41));
            }
            while (v10 < v36);
          }
          v42 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v42;
          a5 = 0;
          *v42 = v16;
          continue;
        }
        v18 = *(_QWORD *)(v17 + 680);
        v19 = *(float *)(v18 + 232 * v16);
LABEL_12:
        v20 = 0;
        do
          v21 = v9[++v20];
        while (*(float *)(v18 + 232 * v21) > v19);
        v22 = &v9[v20];
        v23 = a2;
        if (v20 == 1)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v25 = *--v23;
          }
          while (*(float *)(v18 + 232 * v25) <= v19);
        }
        else
        {
          do
            v24 = *--v23;
          while (*(float *)(v18 + 232 * v24) <= v19);
        }
        if (v22 >= v23)
        {
          v32 = v22 - 1;
        }
        else
        {
          v26 = *v23;
          v27 = v21;
          v28 = &v9[v20];
          v29 = v23;
          do
          {
            *v28 = v26;
            *v29 = v27;
            do
            {
              v30 = v28[1];
              ++v28;
              v27 = v30;
            }
            while (*(float *)(v18 + 232 * v30) > v19);
            do
            {
              v31 = *--v29;
              v26 = v31;
            }
            while (*(float *)(v18 + 232 * v31) <= v19);
          }
          while (v28 < v29);
          v32 = v28 - 1;
        }
        if (v32 != v9)
          *v9 = *v32;
        *v32 = v16;
        if (v22 < v23)
        {
LABEL_33:
          result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *,false>(v9, v32, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v32 + 1;
          continue;
        }
        v33 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v9, v32, a3);
        v10 = v32 + 1;
        result = (unsigned int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(v32 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v32;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 680);
  v7 = *(float *)(v6 + 232 * *a2);
  v8 = *(float *)(v6 + 232 * *result);
  v9 = *a3;
  v10 = *(float *)(v6 + 232 * *a3);
  if (v7 <= v8)
  {
    if (v10 > v7)
    {
      *a2 = v9;
      *a3 = v4;
      v11 = *result;
      if (*(float *)(v6 + 232 * *a2) > *(float *)(v6 + 232 * *result))
      {
        *result = *a2;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v4;
      *a2 = v5;
      if (*(float *)(v6 + 232 * *a3) <= v8)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v9;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  unsigned int v29;
  unsigned int v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680) + 232 * v8) > *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680)
                                                                                  + 232 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = *(_QWORD *)(*(_QWORD *)a3 + 680);
      if (*(float *)(v25 + 232 * v23) > *(float *)(v25 + 232 * v24))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(float *)(v25 + 232 * *v22);
        if (v28 > *(float *)(v25 + 232 * *v21))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 > *(float *)(v25 + 232 * v29))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 > *(float *)(v25 + 232 * *a1))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 680);
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(float *)(v13 + 232 * *v11);
    if (v17 > *(float *)(v13 + 232 * *v10))
    {
      v18 = v14;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(unsigned int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(float *)(v13 + 232 * v16))
        {
          v20 = (unsigned int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *result;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::TetrisPacking::SortCharts(void)::$_0 &,unsigned int *>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 680);
  if (*(float *)(v12 + 232 * *a4) > *(float *)(v12 + 232 * *a3))
  {
    *a3 = *a4;
    *a4 = v11;
    v13 = *a2;
    if (*(float *)(v12 + 232 * *a3) > *(float *)(v12 + 232 * *a2))
    {
      *a2 = *a3;
      *a3 = v13;
      v14 = *a1;
      if (*(float *)(v12 + 232 * *a2) > *(float *)(v12 + 232 * *a1))
      {
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

void std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250D4A950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D4A950;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PutChart(unsigned int)::$_0>,void ()(int const&,int const&,int const&,cv3d::cv::gess::isochart::PutChartRuntimeInfo &)>::operator()(uint64_t a1, int *a2, int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *a2;
  v8 = *a3;
  if (*a2 == v8)
  {
    v9 = 1;
  }
  else
  {
    switch(v8)
    {
      case 0:
      case 2:
        v10 = v7 - v8 == 1;
        goto LABEL_6;
      case 1:
      case 3:
        v10 = v7 - v8 == -1;
LABEL_6:
        v9 = v10;
        break;
      default:
        v9 = 0;
        break;
    }
  }
  v11 = *(_QWORD *)(a1 + 16);
  if ((v7 | 2) == 3)
    v12 = (int *)(v11 + 24);
  else
    v12 = (int *)(v11 + 28);
  v13 = *v12;
  v14 = (int *)(v11 + 28);
  v15 = (int *)(v11 + 24);
  if ((v7 | 2) == 3)
    v15 = v14;
  v16 = *v15;
  v17 = v8 - v7 + 6;
  v18 = v17 & 3;
  v20 = -v17;
  v19 = v20 < 0;
  v21 = v20 & 3;
  if (v19)
    v22 = v18;
  else
    v22 = -v21;
  v23 = 156;
  if (*a4)
    v24 = 156;
  else
    v24 = 148;
  if (*a4)
    v25 = 160;
  else
    v25 = 152;
  v26 = *(_DWORD *)(v6 + v25);
  v27 = *(_DWORD *)(v6 + v24);
  if (*a4)
    v23 = 148;
  v28 = *(_DWORD *)(v6 + v23);
  if (*a4)
    v29 = 152;
  else
    v29 = 160;
  v10 = v9 == 0;
  v30 = 392;
  if (!v10)
    v30 = 488;
  return cv3d::cv::gess::isochart::TetrisPacking::TryPut(v6, (_QWORD *)(v6 + v30 + 24 * v7), v8, 90 * v22, v13, v26 - v27, v28, *(_DWORD *)(v6 + v29), v16, a5);
}

void std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250D4A998;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250D4A998;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0,std::allocator<cv3d::cv::gess::isochart::TetrisPacking::PrepareSpaceInfo(std::vector<int> (&)[4],std::vector<std::vector<unsigned char>> const&,int,int,int,int,BOOL)::$_0>,void ()(int)>::operator()(uint64_t result, _DWORD *a2)
{
  int *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int *v48;
  int *v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;

  switch(*a2)
  {
    case 0:
      v2 = *(int **)(result + 16);
      v3 = **(int **)(result + 8);
      if ((int)v3 < *v2)
      {
        v4 = *(unsigned __int8 *)(result + 40);
        v5 = **(_QWORD **)(result + 56);
        v6 = *(int **)(result + 24);
        v7 = *(int **)(result + 32);
        do
        {
          v8 = *v6;
          v9 = *v7;
          if (*v7 <= *v6)
            v9 = *v6;
          v10 = *(_QWORD **)(result + 48);
          v11 = 24 * v8;
          v12 = v9 - (uint64_t)v8;
          v13 = *v6;
          if (v4)
          {
            while (v12)
            {
              v14 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + v11) + v3);
              v11 += 24;
              ++v13;
              --v12;
              if (v14 == 1)
                goto LABEL_14;
            }
          }
          else
          {
            while (v12)
            {
              v15 = *(unsigned __int8 *)(*(_QWORD *)(*v10 + v11) + v3);
              v11 += 24;
              ++v13;
              --v12;
              if (v15)
                goto LABEL_14;
            }
          }
          v13 = v9;
LABEL_14:
          *(_DWORD *)(v5 + 4 * v3++) = v13 + ~v8;
        }
        while (v3 < *v2);
      }
      break;
    case 1:
      v44 = *(int **)(result + 32);
      v45 = **(int **)(result + 24);
      if ((int)v45 < *v44)
      {
        v46 = *(unsigned __int8 *)(result + 40);
        v47 = *(_QWORD *)(*(_QWORD *)(result + 56) + 24);
        v49 = *(int **)(result + 8);
        v48 = *(int **)(result + 16);
        do
        {
          v50 = *v49;
          if ((int)v50 >= *v48)
            v51 = *v48;
          else
            v51 = *v49;
          v52 = *(_QWORD **)(result + 48);
          v53 = *v48;
          v54 = v53;
          if (v46)
          {
            while (v53 > v50)
            {
              v55 = v53 - 1;
              v56 = *(unsigned __int8 *)(*(_QWORD *)(*v52 + 24 * v45) + v53-- - 1);
              if (v56 == 1)
              {
                v51 = v55;
                break;
              }
            }
          }
          else
          {
            while (v54 > v50)
            {
              v57 = v54 - 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v52 + 24 * v45) + v54-- - 1))
              {
                v51 = v57;
                break;
              }
            }
          }
          *(_DWORD *)(v47 + 4 * v45++) = *v48 + ~v51;
        }
        while (v45 < *v44);
      }
      break;
    case 2:
      v16 = *(int **)(result + 16);
      v17 = **(int **)(result + 8);
      if ((int)v17 < *v16)
      {
        v18 = *(unsigned __int8 *)(result + 40);
        v19 = *(_QWORD *)(*(_QWORD *)(result + 56) + 48);
        v21 = *(int **)(result + 24);
        v20 = *(int **)(result + 32);
        do
        {
          v22 = *v20;
          v23 = *v21;
          if ((int)v23 >= *v20)
            v24 = *v20;
          else
            v24 = *v21;
          v25 = *(_QWORD **)(result + 48);
          v26 = 24 * v22 - 24;
          v27 = *v20;
          if (v18)
          {
            while (v27 > v23)
            {
              --v27;
              v28 = *(unsigned __int8 *)(*(_QWORD *)(*v25 + v26) + v17);
              v26 -= 24;
              if (v28 == 1)
                goto LABEL_27;
            }
          }
          else
          {
            while (v27 > v23)
            {
              --v27;
              v29 = *(unsigned __int8 *)(*(_QWORD *)(*v25 + v26) + v17);
              v26 -= 24;
              if (v29)
              {
LABEL_27:
                v24 = v27;
                break;
              }
            }
          }
          *(_DWORD *)(v19 + 4 * v17++) = v22 + ~v24;
        }
        while (v17 < *v16);
      }
      break;
    case 3:
      v30 = *(int **)(result + 32);
      v31 = **(int **)(result + 24);
      if ((int)v31 < *v30)
      {
        v32 = *(unsigned __int8 *)(result + 40);
        v33 = *(_QWORD *)(*(_QWORD *)(result + 56) + 72);
        v34 = *(int **)(result + 8);
        v35 = *(int **)(result + 16);
        do
        {
          v36 = *v35;
          if (*v35 <= *v34)
            v36 = *v34;
          v37 = *(_QWORD **)(result + 48);
          v38 = *v34;
          v39 = v38;
          if (v32)
          {
            while (v36 != v38)
            {
              v40 = v38 + 1;
              v41 = *(unsigned __int8 *)(*(_QWORD *)(*v37 + 24 * v31) + v38++);
              if (v41 == 1)
              {
                v36 = v40;
                break;
              }
            }
          }
          else
          {
            while (v36 != v39)
            {
              v42 = v39 + 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(*v37 + 24 * v31) + v39++))
              {
                v36 = v42;
                break;
              }
            }
          }
          *(_DWORD *)(v33 + 4 * v31++) = v36 + ~*v34;
        }
        while (v31 < *v30);
      }
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int &>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_23C59D044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CalculateLandmarkVertices(uint64_t a1, unsigned int **a2, char *a3, _WORD *a4)
{
  unint64_t v6;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  __int16 v17;
  cv3d::cv::gess::mesh::PolyMesh *v18;
  std::__shared_weak_count *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*a4)
  {
    v6 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    if ((unsigned __int16)*a4 >= (v6 >> 2))
    {
      std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)a2, (v6 >> 2));
      if ((v6 >> 2))
      {
        v13 = 0;
        do
        {
          (*a2)[v13] = v13;
          ++v13;
        }
        while ((v6 >> 2) != v13);
      }
    }
    else
    {
      _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v18);
      cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)v18, (void **)a1);
      v16 = 1065353216;
      v15 = 0;
      v17 = 1;
      v14 = 1065353216;
      cv3d::cv::gess::internal::Simplify::Simplify(&v20, v18, &v14);
      cv3d::cv::gess::internal::Simplify::Calculate((cv3d::cv::gess::internal::Simplify *)&v20);
      v9 = (v6 >> 2);
      if (v9 != (v21 - (uint64_t)v20) >> 2)
        __assert_rtn("CalculateLandmarkVertices", "IsoChartLandmark.cpp", 29, "simplifier.v_importances.size() == v_size");
      if (&v20 != (char **)a3)
        std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(a3, v20, v21, v9);
      cv3d::cv::gess::isochart::CollectLandmarkVertices(a1, &v20, a4, a2);
      cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)&v20);
      v10 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
}

void sub_23C59D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CollectLandmarkVertices(uint64_t a1, _QWORD *a2, _WORD *a3, unsigned int **a4)
{
  unsigned int v4;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned int v26;
  float32x4_t *v27;
  float32x4_t v28;
  char *v29;
  unint64_t v30;
  float32x4_t v31;
  float v32;
  _QWORD *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  float32x4_t v37;
  float32x4_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  char *v49;
  unint64_t i;
  unsigned int v51;
  unint64_t v52;
  unsigned int *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unsigned int *v61;
  unsigned int *v62;
  int v63;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  unsigned __int8 v69;
  void *__p;
  void *v71;
  char *v72;
  char *v73;

  v71 = 0;
  v72 = 0;
  v73 = 0;
  v8 = ((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::reserve(&v71, v8);
  if (v8)
  {
    v9 = 0;
    v10 = v72;
    do
    {
      v11 = *(unsigned int *)(*a2 + 4 * v9);
      if (v10 >= v73)
      {
        v12 = (v10 - (_BYTE *)v71) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v13 = (v73 - (_BYTE *)v71) >> 2;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)(v73 - (_BYTE *)v71) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v73, v14);
        else
          v15 = 0;
        v16 = &v15[8 * v12];
        *(_QWORD *)v16 = v9 | (v11 << 32);
        v10 = v16 + 8;
        v18 = (char *)v71;
        v17 = v72;
        if (v72 != v71)
        {
          do
          {
            v19 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *((_QWORD *)v16 - 1) = v19;
            v16 -= 8;
          }
          while (v17 != v18);
          v17 = (char *)v71;
        }
        v71 = v16;
        v72 = v10;
        v73 = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v10 = v9 | (v11 << 32);
        v10 += 8;
      }
      v72 = v10;
      ++v9;
    }
    while (v9 != v8);
  }
  else
  {
    v10 = v72;
  }
  v20 = 126 - 2 * __clz((v10 - (_BYTE *)v71) >> 3);
  if (v10 == v71)
    v21 = 0;
  else
    v21 = v20;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>((uint64_t)v71, (uint64_t *)v10, v21, 1);
  v22 = v72 - (_BYTE *)v71;
  if ((unint64_t)(v72 - (_BYTE *)v71) <= 0xF)
    __assert_rtn("CollectLandmarkVertices", "IsoChartLandmark.cpp", 50, "vh_importance_pairs.size() >= 2");
  a4[1] = *a4;
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 104))
  {
    v28.i64[0] = 0x7F0000007FLL;
    v28.i64[1] = 0x7F0000007FLL;
  }
  else
  {
    LODWORD(v23) = 0;
    v24 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v25.i64[0] = 0x80000000800000;
    v25.i64[1] = 0x80000000800000;
    v26 = 1;
    do
    {
      v65 = v25;
      v66 = v24;
      v27 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v23);
      v24 = vminq_f32(v66, *v27);
      v25 = vmaxq_f32(v65, *v27);
      v23 = v26++;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    v22 = v72 - (_BYTE *)v71;
    v28 = vsubq_f32(v25, v24);
  }
  v67 = v28;
  LOWORD(v4) = *a3;
  v69 = 0;
  std::vector<BOOL>::vector(&__p, v22 >> 3, &v69);
  v29 = (char *)v71;
  if (v72 != v71)
  {
    v30 = 0;
    v31 = vmulq_f32(v67, v67);
    v31.i32[3] = 0;
    v32 = (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31))) / (float)v4) * 0.5;
    v33 = a4 + 2;
    do
    {
      v34 = *(_DWORD *)&v29[8 * v30];
      v36 = *a4;
      v35 = a4[1];
      if (*a4 == v35)
      {
LABEL_37:
        if ((unint64_t)v36 >= *v33)
        {
          v40 = v36 - *a4;
          if ((unint64_t)(v40 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v41 = *v33 - (_QWORD)*a4;
          v42 = v41 >> 1;
          if (v41 >> 1 <= (unint64_t)(v40 + 1))
            v42 = v40 + 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v43);
          else
            v44 = 0;
          v45 = (unsigned int *)&v44[4 * v40];
          *v45 = v34;
          v39 = v45 + 1;
          v47 = *a4;
          v46 = a4[1];
          if (v46 != *a4)
          {
            do
            {
              v48 = *--v46;
              *--v45 = v48;
            }
            while (v46 != v47);
            v46 = *a4;
          }
          *a4 = v45;
          a4[1] = v39;
          a4[2] = (unsigned int *)&v44[4 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v36 = v34;
          v39 = v36 + 1;
        }
        a4[1] = v39;
        *(_QWORD *)((char *)__p + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
        if ((unsigned __int16)*a3 <= (unint64_t)(v39 - *a4))
          goto LABEL_77;
      }
      else
      {
        while (1)
        {
          v68 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v34);
          v37 = vsubq_f32(v68, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v36));
          v38 = vmulq_f32(v37, v37);
          v38.i32[3] = 0;
          if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v38, v38))) < v32)
            break;
          if (++v36 == v35)
          {
            v36 = a4[1];
            goto LABEL_37;
          }
        }
      }
      ++v30;
      v29 = (char *)v71;
      v49 = v72;
    }
    while (v30 < (v72 - (_BYTE *)v71) >> 3);
    if (v72 != v71)
    {
      for (i = 0; i < (v49 - v29) >> 3; ++i)
      {
        if (((*(_QWORD *)((char *)__p + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          v51 = *(_DWORD *)&v29[8 * i];
          v53 = a4[1];
          v52 = (unint64_t)a4[2];
          if ((unint64_t)v53 >= v52)
          {
            v55 = v53 - *a4;
            if ((unint64_t)(v55 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v56 = v52 - (_QWORD)*a4;
            v57 = v56 >> 1;
            if (v56 >> 1 <= (unint64_t)(v55 + 1))
              v57 = v55 + 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v58 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v58 = v57;
            if (v58)
              v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v58);
            else
              v59 = 0;
            v60 = &v59[4 * v55];
            *(_DWORD *)v60 = v51;
            v54 = (unsigned int *)(v60 + 4);
            v62 = *a4;
            v61 = a4[1];
            if (v61 != *a4)
            {
              do
              {
                v63 = *--v61;
                *((_DWORD *)v60 - 1) = v63;
                v60 -= 4;
              }
              while (v61 != v62);
              v61 = *a4;
            }
            *a4 = (unsigned int *)v60;
            a4[1] = v54;
            a4[2] = (unsigned int *)&v59[4 * v58];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *v53 = v51;
            v54 = v53 + 1;
          }
          a4[1] = v54;
          if ((unsigned __int16)*a3 <= (unint64_t)(v54 - *a4))
            break;
          v29 = (char *)v71;
          v49 = v72;
        }
      }
    }
  }
LABEL_77:
  if (__p)
    operator delete(__p);
  if (v71)
  {
    v72 = (char *)v71;
    operator delete(v71);
  }
}

void sub_23C59D760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void cv3d::cv::gess::isochart::CalculateVertexImportance(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p[2];
  char v17;
  int v18;
  int v19;
  char v20;
  int v21;
  __int16 v22;
  cv3d::cv::gess::mesh::PolyMesh *v23;
  std::__shared_weak_count *v24;
  int v25;
  _QWORD v26[36];

  v26[35] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 13);
  v3 = *((_QWORD *)this + 14);
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v23);
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)v23, (void **)this);
  v21 = 1065353216;
  v20 = 0;
  v22 = 1;
  v19 = 1065353216;
  cv3d::cv::gess::internal::Simplify::Simplify(v26, v23, &v19);
  cv3d::cv::gess::internal::Simplify::Calculate((cv3d::cv::gess::internal::Simplify *)v26);
  v5 = v3 - v4;
  v6 = ((unint64_t)(v3 - v4) >> 2);
  if (v6 != (uint64_t)(v26[1] - v26[0]) >> 2)
    __assert_rtn("CalculateVertexImportance", "IsoChartLandmark.cpp", 98, "simplifier.v_importances.size() == v_size");
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  v7 = (uint64_t *)((char *)this + 8);
  v25 = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)this + 1, (uint64_t)&v25, (unsigned __int8 *)__p);
  v18 = v8;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v8 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>((uint64_t)this, &v18, (__int128 *)__p);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    v9 = 0;
    do
    {
      v10 = *(_DWORD *)(v26[0] + 4 * v9);
      LODWORD(__p[0]) = v18;
      v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v7, (unsigned int *)__p);
      v12 = *(_QWORD *)(v11 + 40);
      if (v9 >= (*(_QWORD *)(v11 + 48) - v12) >> 2)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      *(_DWORD *)(v12 + 4 * v9++) = v10;
    }
    while (v6 != v9);
  }
  cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)v26);
  v13 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23C59DA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  cv3d::cv::gess::internal::Simplify::~Simplify((cv3d::cv::gess::internal::Simplify *)&a22);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CollectLandmarks(uint64_t a1, _WORD *a2, unsigned int **a3)
{
  unint64_t v6;
  unsigned __int8 v7;
  void *__p[3];

  v6 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  v7 = 0;
  std::vector<BOOL>::vector(__p, v6, &v7);
  cv3d::cv::gess::isochart::CollectLandmarks(a1, a2, __p, a3);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_23C59DB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CollectLandmarks(uint64_t a1, _WORD *a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int v4;
  cv3d::cv::gess::mesh::TriMesh *v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t i;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unsigned int v23;
  float32x4_t *v24;
  float32x4_t v25;
  _BYTE *v26;
  unint64_t v27;
  float32x4_t v28;
  float v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  float32x4_t v33;
  float32x4_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t *v47;
  unint64_t j;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  unsigned __int8 v67;
  void *v68[3];
  void *__p;
  uint64_t *v70;
  char v71;

  std::string::basic_string[abi:ne180100]<0>(&__p, "v:importance");
  LODWORD(v68[0]) = 0;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 8), (uint64_t)v68, (unsigned __int8 *)&__p);
  if (v71 < 0)
    operator delete(__p);
  if (v10 == -1)
  {
    cv3d::cv::gess::isochart::CalculateVertexImportance((cv3d::cv::gess::isochart *)a1, v9);
    std::string::basic_string[abi:ne180100]<0>(&__p, "v:importance");
    LODWORD(v68[0]) = 0;
    v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a1 + 8), (uint64_t)v68, (unsigned __int8 *)&__p);
    if (v71 < 0)
      operator delete(__p);
    if (v10 == -1)
      cv3d::cv::gess::isochart::CollectLandmarks();
  }
  v11 = ((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::vector(&__p, v11);
  v12 = (uint64_t *)__p;
  if (v11)
  {
    v13 = 0;
    for (i = 0; i != v11; ++i)
    {
      LODWORD(v12[v13]) = i;
      LODWORD(v68[0]) = v10;
      v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(a1 + 8), (unsigned int *)v68);
      v16 = *(_QWORD *)(v15 + 40);
      if (i >= (*(_QWORD *)(v15 + 48) - v16) >> 2)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v12 = (uint64_t *)__p;
      *(_DWORD *)((char *)__p + v13 * 8 + 4) = *(_DWORD *)(v16 + 4 * i);
      ++v13;
    }
  }
  v17 = 126 - 2 * __clz(v70 - v12);
  if (v70 == v12)
    v18 = 0;
  else
    v18 = v17;
  std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>((uint64_t)v12, v70, v18, 1);
  v19 = (char *)v70 - (_BYTE *)__p;
  if ((unint64_t)((char *)v70 - (_BYTE *)__p) <= 0xF)
    __assert_rtn("CollectLandmarks", "IsoChartLandmark.cpp", 135, "vh_importance_pairs.size() >= 2");
  a4[1] = *a4;
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 104))
  {
    v25.i64[0] = 0x7F0000007FLL;
    v25.i64[1] = 0x7F0000007FLL;
  }
  else
  {
    LODWORD(v20) = 0;
    v21 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v22.i64[0] = 0x80000000800000;
    v22.i64[1] = 0x80000000800000;
    v23 = 1;
    do
    {
      v62 = v22;
      v64 = v21;
      v24 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v20);
      v21 = vminq_f32(v64, *v24);
      v22 = vmaxq_f32(v62, *v24);
      v20 = v23++;
    }
    while (v20 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    v19 = (char *)v70 - (_BYTE *)__p;
    v25 = vsubq_f32(v22, v21);
  }
  v65 = v25;
  LOWORD(v4) = *a2;
  v67 = 0;
  std::vector<BOOL>::vector(v68, v19 >> 3, &v67);
  v26 = __p;
  if (v70 != __p)
  {
    v27 = 0;
    v28 = vmulq_f32(v65, v65);
    v28.i32[3] = 0;
    v29 = (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28))) / (float)v4) * 0.3;
    v63 = (uint64_t)(a4 + 2);
    while (2)
    {
      v30 = *(unsigned int *)&v26[8 * v27];
      v31 = *a4;
      v32 = a4[1];
      while (v31 != v32)
      {
        v66 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v30);
        v33 = vsubq_f32(v66, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v31));
        v34 = vmulq_f32(v33, v33);
        v34.i32[3] = 0;
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34))) < v29)
          goto LABEL_44;
        ++v31;
      }
      if (((*(_QWORD *)(*a3 + ((v30 >> 3) & 0x1FFFFFF8)) >> v30) & 1) == 0)
      {
        v36 = a4[1];
        v35 = (unint64_t)a4[2];
        if ((unint64_t)v36 >= v35)
        {
          v38 = v36 - *a4;
          if ((unint64_t)(v38 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v39 = v35 - (_QWORD)*a4;
          v40 = v39 >> 1;
          if (v39 >> 1 <= (unint64_t)(v38 + 1))
            v40 = v38 + 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v41 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v41 = v40;
          if (v41)
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v63, v41);
          else
            v42 = 0;
          v43 = (unsigned int *)&v42[4 * v38];
          *v43 = v30;
          v37 = v43 + 1;
          v45 = *a4;
          v44 = a4[1];
          if (v44 != *a4)
          {
            do
            {
              v46 = *--v44;
              *--v43 = v46;
            }
            while (v44 != v45);
            v44 = *a4;
          }
          *a4 = v43;
          a4[1] = v37;
          a4[2] = (unsigned int *)&v42[4 * v41];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *v36 = v30;
          v37 = v36 + 1;
        }
        a4[1] = v37;
        *(_QWORD *)((char *)v68[0] + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
        if ((unsigned __int16)*a2 <= (unint64_t)(v37 - *a4))
          goto LABEL_68;
      }
LABEL_44:
      ++v27;
      v26 = __p;
      v47 = v70;
      if (v27 < ((char *)v70 - (_BYTE *)__p) >> 3)
        continue;
      break;
    }
    if (v70 != __p)
    {
      for (j = 0; j < ((char *)v47 - v26) >> 3; ++j)
      {
        if (((*(_QWORD *)((char *)v68[0] + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) == 0)
        {
          v49 = *(unsigned int *)&v26[8 * j];
          if (((*(_QWORD *)(*a3 + ((v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) == 0)
          {
            v51 = a4[1];
            v50 = (unint64_t)a4[2];
            if ((unint64_t)v51 >= v50)
            {
              v53 = v51 - *a4;
              if ((unint64_t)(v53 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v54 = v50 - (_QWORD)*a4;
              v55 = v54 >> 1;
              if (v54 >> 1 <= (unint64_t)(v53 + 1))
                v55 = v53 + 1;
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
                v56 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v56 = v55;
              if (v56)
                v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v63, v56);
              else
                v57 = 0;
              v58 = (unsigned int *)&v57[4 * v53];
              *v58 = v49;
              v52 = v58 + 1;
              v60 = *a4;
              v59 = a4[1];
              if (v59 != *a4)
              {
                do
                {
                  v61 = *--v59;
                  *--v58 = v61;
                }
                while (v59 != v60);
                v59 = *a4;
              }
              *a4 = v58;
              a4[1] = v52;
              a4[2] = (unsigned int *)&v57[4 * v56];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *v51 = v49;
              v52 = v51 + 1;
            }
            a4[1] = v52;
            if ((unsigned __int16)*a2 <= (unint64_t)(v52 - *a4))
              break;
            v26 = __p;
            v47 = v70;
          }
        }
      }
    }
  }
LABEL_68:
  if (v68[0])
    operator delete(v68[0]);
  if (__p)
  {
    v70 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_23C59E0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::internal::Simplify::~Simplify(cv3d::cv::gess::internal::Simplify *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  cv3d::cv::gess::internal::Simplify *v9;
  uint64_t v10;
  void *v11;

  v2 = (void *)*((_QWORD *)this + 29);
  if (v2)
  {
    *((_QWORD *)this + 30) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 23);
  if (v4)
  {
    *((_QWORD *)this + 24) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 20);
  if (v5)
  {
    *((_QWORD *)this + 21) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
    operator delete(v6);
  v7 = (void *)*((_QWORD *)this + 14);
  if (v7)
  {
    *((_QWORD *)this + 15) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
  }
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  v9 = (cv3d::cv::gess::internal::Simplify *)*((_QWORD *)this + 6);
  if (v9 == (cv3d::cv::gess::internal::Simplify *)((char *)this + 24))
  {
    v10 = 4;
    v9 = (cv3d::cv::gess::internal::Simplify *)((char *)this + 24);
  }
  else
  {
    if (!v9)
      goto LABEL_20;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_20:
  v11 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v11;
    operator delete(v11);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  int v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int *v30;
  unsigned int v31;
  int *v32;
  unsigned int v33;
  int *v34;
  uint64_t *v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  int *v71;
  unint64_t v72;
  int *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;

  v7 = (int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = *(_QWORD *)v8;
        if (HIDWORD(*(_QWORD *)v8) < HIDWORD(v42))
        {
          *v8 = v42;
          *((_DWORD *)a2 - 2) = v43;
          v44 = v8[1];
          v8[1] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v8, v8 + 2, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v8, v8 + 2, (uint64_t)(v8 + 4), (uint64_t)(a2 - 1));
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v8, v8 + 2, (uint64_t)(v8 + 4), (uint64_t)(v8 + 6));
        v45 = *(a2 - 1);
        v46 = *((_QWORD *)v8 + 3);
        if (HIDWORD(v46) < HIDWORD(v45))
        {
          v8[6] = v45;
          *((_DWORD *)a2 - 2) = v46;
          v47 = v8[7];
          v8[7] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v47;
          v48 = *((_QWORD *)v8 + 2);
          v49 = *((_QWORD *)v8 + 3);
          v50 = HIDWORD(v49);
          if (HIDWORD(v48) < HIDWORD(v49))
          {
            *((_QWORD *)v8 + 2) = v49;
            *((_QWORD *)v8 + 3) = v48;
            v51 = *((_QWORD *)v8 + 1);
            v52 = *((_QWORD *)v8 + 2);
            if (HIDWORD(v51) < HIDWORD(v52))
            {
              v8[2] = v52;
              v8[3] = v50;
              *((_QWORD *)v8 + 2) = v51;
              v53 = *(_QWORD *)v8;
              v54 = *((_QWORD *)v8 + 1);
              v55 = HIDWORD(*(_QWORD *)v8);
              if (v55 < HIDWORD(v54))
              {
                *v8 = v54;
                v8[1] = v50;
                v8[2] = v53;
                v8[3] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v56 = (uint64_t *)(v8 + 2);
          v58 = v8 == (int *)a2 || v56 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (uint64_t *)v8;
              do
              {
                v62 = *v60;
                v61 = v60[1];
                v60 = v56;
                if (HIDWORD(v62) < HIDWORD(v61))
                {
                  v63 = v59;
                  while (1)
                  {
                    v64 = (char *)v8 + v63;
                    v65 = *(int *)((char *)v8 + v63 + 4);
                    *((_DWORD *)v64 + 2) = v62;
                    *((_DWORD *)v64 + 3) = v65;
                    if (!v63)
                      break;
                    v62 = *((_QWORD *)v64 - 1);
                    v63 -= 8;
                    if (HIDWORD(v62) >= HIDWORD(v61))
                    {
                      v66 = (int *)((char *)v8 + v63 + 8);
                      goto LABEL_82;
                    }
                  }
                  v66 = v8;
LABEL_82:
                  *(_QWORD *)v66 = v61;
                }
                ++v56;
                v59 += 8;
              }
              while (v60 + 1 != a2);
            }
          }
          else if (!v58)
          {
            v94 = v8 + 3;
            do
            {
              v96 = *(_QWORD *)v7;
              v95 = *((_QWORD *)v7 + 1);
              v7 = (int *)v56;
              if (HIDWORD(v96) < HIDWORD(v95))
              {
                v97 = v94;
                do
                {
                  v98 = v97;
                  *(v97 - 1) = v96;
                  v99 = *(v97 - 2);
                  v97 -= 2;
                  *v98 = v99;
                  v96 = *(_QWORD *)(v98 - 5);
                }
                while (HIDWORD(v96) < HIDWORD(v95));
                *(_QWORD *)(v97 - 1) = v95;
              }
              ++v56;
              v94 += 2;
            }
            while (v7 + 2 != (int *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (int *)a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = &v8[2 * v70];
                v72 = *(_QWORD *)v71;
                if (2 * v69 + 2 < (uint64_t)v10)
                {
                  result = HIDWORD(v72);
                  if (HIDWORD(*((_QWORD *)v71 + 1)) < HIDWORD(v72))
                  {
                    v72 = *((_QWORD *)v71 + 1);
                    v71 += 2;
                    v70 = 2 * v69 + 2;
                  }
                }
                v73 = &v8[2 * v69];
                v74 = *(_QWORD *)v73;
                v75 = HIDWORD(v72);
                v76 = HIDWORD(*(_QWORD *)v73);
                if (v76 >= v75)
                {
                  LODWORD(v77) = *v71;
                  do
                  {
                    result = (uint64_t)v73;
                    v73 = v71;
                    *(_DWORD *)result = v77;
                    *(_DWORD *)(result + 4) = v71[1];
                    if (v67 < v70)
                      break;
                    v78 = (2 * v70) | 1;
                    v71 = &v8[2 * v78];
                    v70 = 2 * v70 + 2;
                    v77 = *(_QWORD *)v71;
                    if (v70 >= (uint64_t)v10)
                    {
                      v70 = v78;
                    }
                    else if (HIDWORD(*((_QWORD *)v71 + 1)) >= HIDWORD(v77))
                    {
                      v70 = v78;
                    }
                    else
                    {
                      v77 = *((_QWORD *)v71 + 1);
                      v71 += 2;
                    }
                    result = HIDWORD(v77);
                  }
                  while (v76 >= HIDWORD(v77));
                  *v73 = v74;
                  v73[1] = v76;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v79 = (unint64_t)v9 >> 3;
            do
            {
              v80 = 0;
              v81 = *(_QWORD *)v8;
              v82 = v8;
              do
              {
                v83 = (uint64_t *)&v82[2 * v80 + 2];
                v84 = (2 * v80) | 1;
                v85 = 2 * v80 + 2;
                if (v85 < v79 && *((_DWORD *)v83 + 3) < *((_DWORD *)v83 + 1))
                {
                  ++v83;
                  v84 = v85;
                }
                *v82 = *(_DWORD *)v83;
                v82[1] = *((_DWORD *)v83 + 1);
                v82 = v83;
                v80 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v83 == a2 - 1)
              {
                *v83 = v81;
              }
              else
              {
                *(_DWORD *)v83 = *((_DWORD *)a2 - 2);
                *((_DWORD *)v83 + 1) = *((_DWORD *)a2 - 1);
                *(a2 - 1) = v81;
                v86 = (char *)v83 - (char *)v8 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = (uint64_t *)&v8[2 * v87];
                  v89 = *v88;
                  v90 = *v83;
                  v91 = HIDWORD(*v83);
                  if (v91 < HIDWORD(*v88))
                  {
                    do
                    {
                      v92 = v83;
                      v83 = v88;
                      *(_DWORD *)v92 = v89;
                      *((_DWORD *)v92 + 1) = *((_DWORD *)v88 + 1);
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = (uint64_t *)&v8[2 * v87];
                      v89 = *v88;
                    }
                    while (v91 < HIDWORD(*v88));
                    *(_DWORD *)v83 = v90;
                    *((_DWORD *)v83 + 1) = v91;
                  }
                }
              }
              --a2;
            }
            while (v79-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(&v7[2 * (v10 >> 1)], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v7, &v7[2 * (v10 >> 1)], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v7 + 2, v12 - 2, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v12 - 2, v12, (uint64_t *)&v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD *)v7;
        if ((a4 & 1) == 0)
        {
          v15 = HIDWORD(v14);
          if (HIDWORD(v14) < *(v7 - 1))
            goto LABEL_12;
          if (*((_DWORD *)a2 - 1) >= HIDWORD(v14))
          {
            v32 = v7 + 2;
            do
            {
              v8 = v32;
              if (v32 >= (int *)a2)
                break;
              v33 = v32[1];
              v32 += 2;
            }
            while (v33 >= HIDWORD(v14));
          }
          else
          {
            v30 = v7;
            do
            {
              v8 = v30 + 2;
              v31 = v30[3];
              v30 += 2;
            }
            while (v31 >= HIDWORD(v14));
          }
          v34 = (int *)a2;
          if (v8 < (int *)a2)
          {
            v35 = a2;
            do
            {
              v34 = (int *)(v35 - 1);
              v36 = *((_DWORD *)v35-- - 1);
            }
            while (v36 < HIDWORD(v14));
          }
          if (v8 < v34)
          {
            v37 = *v8;
            v38 = *v34;
            do
            {
              *v8 = v38;
              *v34 = v37;
              v39 = v8[1];
              v8[1] = v34[1];
              v34[1] = v39;
              do
              {
                v40 = *((_QWORD *)v8 + 1);
                v8 += 2;
                v37 = v40;
              }
              while (HIDWORD(v40) >= HIDWORD(v14));
              do
              {
                v41 = *((_QWORD *)v34 - 1);
                v34 -= 2;
                v38 = v41;
              }
              while (HIDWORD(v41) < HIDWORD(v14));
            }
            while (v8 < v34);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v14;
          continue;
        }
        v15 = HIDWORD(v14);
LABEL_12:
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)&v7[v16 + 2];
          v16 += 2;
        }
        while (v15 < HIDWORD(v17));
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 2)
        {
          v22 = a2;
          while (v18 < (int *)v22)
          {
            v20 = v22 - 1;
            v23 = *((_DWORD *)v22-- - 1);
            if (v15 < v23)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 1;
            v21 = *((_DWORD *)v19-- - 1);
          }
          while (v15 >= v21);
        }
LABEL_22:
        if (v18 >= (int *)v20)
        {
          v8 = v18;
        }
        else
        {
          v24 = *(_DWORD *)v20;
          v8 = v18;
          v25 = (int *)v20;
          do
          {
            *v8 = v24;
            *v25 = v17;
            v26 = v8[1];
            v8[1] = v25[1];
            v25[1] = v26;
            do
            {
              v27 = *((_QWORD *)v8 + 1);
              v8 += 2;
              LODWORD(v17) = v27;
            }
            while (v15 < HIDWORD(v27));
            do
            {
              v28 = *((_QWORD *)v25 - 1);
              v25 -= 2;
              v24 = v28;
            }
            while (v15 >= HIDWORD(v28));
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v14;
        *(v8 - 1) = v15;
        if (v18 < (int *)v20)
        {
LABEL_35:
          result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v7, (uint64_t *)v8 - 1);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_35;
        }
        a2 = (uint64_t *)(v8 - 2);
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(int *result, int *a2, uint64_t *a3)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a3;
  v6 = HIDWORD(*a3);
  if (result[1] < v4)
  {
    v7 = *result;
    if (v4 >= v6)
    {
      *result = v3;
      *a2 = v7;
      v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      v13 = *(_QWORD *)a2;
      if (HIDWORD(*(_QWORD *)a2) >= HIDWORD(*a3))
        return result;
      *a2 = *a3;
      *(_DWORD *)a3 = v13;
      v8 = (int *)a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *(_DWORD *)a3 = v7;
      v8 = (int *)a3 + 1;
    }
    v9 = v8;
    goto LABEL_10;
  }
  if (v4 < v6)
  {
    *a2 = v5;
    *(_DWORD *)a3 = v3;
    v9 = a2 + 1;
    v10 = a2[1];
    a2[1] = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = v10;
    v11 = *(_QWORD *)result;
    if (HIDWORD(*(_QWORD *)result) < HIDWORD(*(_QWORD *)a2))
    {
      *result++ = *(_QWORD *)a2;
      *a2 = v11;
LABEL_10:
      v14 = *result;
      *result = *v9;
      *v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (HIDWORD(*a1) < HIDWORD(v6))
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3));
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (HIDWORD(v21) >= HIDWORD(v20))
        return 1;
      *((_DWORD *)a1 + 6) = v20;
      *((_DWORD *)a2 - 2) = v21;
      v22 = *((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 7) = *((_DWORD *)a2 - 1);
      *((_DWORD *)a2 - 1) = v22;
      v23 = a1[2];
      v24 = a1[3];
      v25 = HIDWORD(v24);
      if (HIDWORD(v23) >= HIDWORD(v24))
        return 1;
      a1[2] = v24;
      a1[3] = v23;
      v26 = a1[1];
      v27 = a1[2];
      if (HIDWORD(v26) >= HIDWORD(v27))
        return 1;
      *((_DWORD *)a1 + 2) = v27;
      *((_DWORD *)a1 + 3) = v25;
      a1[2] = v26;
      v28 = *a1;
      v29 = a1[1];
      v30 = HIDWORD(*a1);
      if (v30 >= HIDWORD(v29))
        return 1;
      *(_DWORD *)a1 = v29;
      *((_DWORD *)a1 + 1) = v25;
      result = 1;
      *((_DWORD *)a1 + 2) = v28;
      *((_DWORD *)a1 + 3) = v30;
      return result;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    v15 = HIDWORD(*v10);
    if (HIDWORD(*v9) < v15)
    {
      v16 = v11;
      while (1)
      {
        v17 = (uint64_t)a1 + v16;
        v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(_QWORD *)(v17 + 8);
        v16 -= 8;
        if (HIDWORD(v14) >= v15)
        {
          v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v13;
      v19[1] = v15;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(int *a1, int *a2, uint64_t a3, uint64_t a4)
{
  int *result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(a1, a2, (uint64_t *)a3);
  v9 = *(_QWORD *)a3;
  if (HIDWORD(*(_QWORD *)a3) < HIDWORD(*(_QWORD *)a4))
  {
    *(_DWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    v11 = *(_QWORD *)a2;
    if (HIDWORD(*(_QWORD *)a2) < HIDWORD(*(_QWORD *)a3))
    {
      *a2 = *(_QWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = a2[1];
      a2[1] = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      v13 = *(_QWORD *)a1;
      if (HIDWORD(*(_QWORD *)a1) < HIDWORD(*(_QWORD *)a2))
      {
        *a1 = *(_QWORD *)a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

_QWORD *std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[a2];
    v6 = 8 * a2;
    do
    {
      *v4++ = 0xFFFFFFFFLL;
      v6 -= 8;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C59ED68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  int v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int *v30;
  unsigned int v31;
  int *v32;
  unsigned int v33;
  int *v34;
  uint64_t *v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  int *v71;
  unint64_t v72;
  int *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int *v98;
  int v99;

  v7 = (int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 1);
        v43 = *(_QWORD *)v8;
        if (HIDWORD(*(_QWORD *)v8) < HIDWORD(v42))
        {
          *v8 = v42;
          *((_DWORD *)a2 - 2) = v43;
          v44 = v8[1];
          v8[1] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v8, v8 + 2, a2 - 1);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v8, v8 + 2, (uint64_t)(v8 + 4), (uint64_t)(a2 - 1));
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v8, v8 + 2, (uint64_t)(v8 + 4), (uint64_t)(v8 + 6));
        v45 = *(a2 - 1);
        v46 = *((_QWORD *)v8 + 3);
        if (HIDWORD(v46) < HIDWORD(v45))
        {
          v8[6] = v45;
          *((_DWORD *)a2 - 2) = v46;
          v47 = v8[7];
          v8[7] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v47;
          v48 = *((_QWORD *)v8 + 2);
          v49 = *((_QWORD *)v8 + 3);
          v50 = HIDWORD(v49);
          if (HIDWORD(v48) < HIDWORD(v49))
          {
            *((_QWORD *)v8 + 2) = v49;
            *((_QWORD *)v8 + 3) = v48;
            v51 = *((_QWORD *)v8 + 1);
            v52 = *((_QWORD *)v8 + 2);
            if (HIDWORD(v51) < HIDWORD(v52))
            {
              v8[2] = v52;
              v8[3] = v50;
              *((_QWORD *)v8 + 2) = v51;
              v53 = *(_QWORD *)v8;
              v54 = *((_QWORD *)v8 + 1);
              v55 = HIDWORD(*(_QWORD *)v8);
              if (v55 < HIDWORD(v54))
              {
                *v8 = v54;
                v8[1] = v50;
                v8[2] = v53;
                v8[3] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v56 = (uint64_t *)(v8 + 2);
          v58 = v8 == (int *)a2 || v56 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = (uint64_t *)v8;
              do
              {
                v62 = *v60;
                v61 = v60[1];
                v60 = v56;
                if (HIDWORD(v62) < HIDWORD(v61))
                {
                  v63 = v59;
                  while (1)
                  {
                    v64 = (char *)v8 + v63;
                    v65 = *(int *)((char *)v8 + v63 + 4);
                    *((_DWORD *)v64 + 2) = v62;
                    *((_DWORD *)v64 + 3) = v65;
                    if (!v63)
                      break;
                    v62 = *((_QWORD *)v64 - 1);
                    v63 -= 8;
                    if (HIDWORD(v62) >= HIDWORD(v61))
                    {
                      v66 = (int *)((char *)v8 + v63 + 8);
                      goto LABEL_82;
                    }
                  }
                  v66 = v8;
LABEL_82:
                  *(_QWORD *)v66 = v61;
                }
                ++v56;
                v59 += 8;
              }
              while (v60 + 1 != a2);
            }
          }
          else if (!v58)
          {
            v94 = v8 + 3;
            do
            {
              v96 = *(_QWORD *)v7;
              v95 = *((_QWORD *)v7 + 1);
              v7 = (int *)v56;
              if (HIDWORD(v96) < HIDWORD(v95))
              {
                v97 = v94;
                do
                {
                  v98 = v97;
                  *(v97 - 1) = v96;
                  v99 = *(v97 - 2);
                  v97 -= 2;
                  *v98 = v99;
                  v96 = *(_QWORD *)(v98 - 5);
                }
                while (HIDWORD(v96) < HIDWORD(v95));
                *(_QWORD *)(v97 - 1) = v95;
              }
              ++v56;
              v94 += 2;
            }
            while (v7 + 2 != (int *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (int *)a2)
          {
            v67 = (v10 - 2) >> 1;
            v68 = v67;
            do
            {
              v69 = v68;
              if (v67 >= v68)
              {
                v70 = (2 * v68) | 1;
                v71 = &v8[2 * v70];
                v72 = *(_QWORD *)v71;
                if (2 * v69 + 2 < (uint64_t)v10)
                {
                  result = HIDWORD(v72);
                  if (HIDWORD(*((_QWORD *)v71 + 1)) < HIDWORD(v72))
                  {
                    v72 = *((_QWORD *)v71 + 1);
                    v71 += 2;
                    v70 = 2 * v69 + 2;
                  }
                }
                v73 = &v8[2 * v69];
                v74 = *(_QWORD *)v73;
                v75 = HIDWORD(v72);
                v76 = HIDWORD(*(_QWORD *)v73);
                if (v76 >= v75)
                {
                  LODWORD(v77) = *v71;
                  do
                  {
                    result = (uint64_t)v73;
                    v73 = v71;
                    *(_DWORD *)result = v77;
                    *(_DWORD *)(result + 4) = v71[1];
                    if (v67 < v70)
                      break;
                    v78 = (2 * v70) | 1;
                    v71 = &v8[2 * v78];
                    v70 = 2 * v70 + 2;
                    v77 = *(_QWORD *)v71;
                    if (v70 >= (uint64_t)v10)
                    {
                      v70 = v78;
                    }
                    else if (HIDWORD(*((_QWORD *)v71 + 1)) >= HIDWORD(v77))
                    {
                      v70 = v78;
                    }
                    else
                    {
                      v77 = *((_QWORD *)v71 + 1);
                      v71 += 2;
                    }
                    result = HIDWORD(v77);
                  }
                  while (v76 >= HIDWORD(v77));
                  *v73 = v74;
                  v73[1] = v76;
                }
              }
              v68 = v69 - 1;
            }
            while (v69);
            v79 = (unint64_t)v9 >> 3;
            do
            {
              v80 = 0;
              v81 = *(_QWORD *)v8;
              v82 = v8;
              do
              {
                v83 = (uint64_t *)&v82[2 * v80 + 2];
                v84 = (2 * v80) | 1;
                v85 = 2 * v80 + 2;
                if (v85 < v79 && *((_DWORD *)v83 + 3) < *((_DWORD *)v83 + 1))
                {
                  ++v83;
                  v84 = v85;
                }
                *v82 = *(_DWORD *)v83;
                v82[1] = *((_DWORD *)v83 + 1);
                v82 = v83;
                v80 = v84;
              }
              while (v84 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
              if (v83 == a2 - 1)
              {
                *v83 = v81;
              }
              else
              {
                *(_DWORD *)v83 = *((_DWORD *)a2 - 2);
                *((_DWORD *)v83 + 1) = *((_DWORD *)a2 - 1);
                *(a2 - 1) = v81;
                v86 = (char *)v83 - (char *)v8 + 8;
                if (v86 >= 9)
                {
                  v87 = (((unint64_t)v86 >> 3) - 2) >> 1;
                  v88 = (uint64_t *)&v8[2 * v87];
                  v89 = *v88;
                  v90 = *v83;
                  v91 = HIDWORD(*v83);
                  if (v91 < HIDWORD(*v88))
                  {
                    do
                    {
                      v92 = v83;
                      v83 = v88;
                      *(_DWORD *)v92 = v89;
                      *((_DWORD *)v92 + 1) = *((_DWORD *)v88 + 1);
                      if (!v87)
                        break;
                      v87 = (v87 - 1) >> 1;
                      v88 = (uint64_t *)&v8[2 * v87];
                      v89 = *v88;
                    }
                    while (v91 < HIDWORD(*v88));
                    *(_DWORD *)v83 = v90;
                    *((_DWORD *)v83 + 1) = v91;
                  }
                }
              }
              --a2;
            }
            while (v79-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(&v7[2 * (v10 >> 1)], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v7, &v7[2 * (v10 >> 1)], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v7 + 2, v12 - 2, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 3);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(v12 - 2, v12, (uint64_t *)&v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD *)v7;
        if ((a4 & 1) == 0)
        {
          v15 = HIDWORD(v14);
          if (HIDWORD(v14) < *(v7 - 1))
            goto LABEL_12;
          if (*((_DWORD *)a2 - 1) >= HIDWORD(v14))
          {
            v32 = v7 + 2;
            do
            {
              v8 = v32;
              if (v32 >= (int *)a2)
                break;
              v33 = v32[1];
              v32 += 2;
            }
            while (v33 >= HIDWORD(v14));
          }
          else
          {
            v30 = v7;
            do
            {
              v8 = v30 + 2;
              v31 = v30[3];
              v30 += 2;
            }
            while (v31 >= HIDWORD(v14));
          }
          v34 = (int *)a2;
          if (v8 < (int *)a2)
          {
            v35 = a2;
            do
            {
              v34 = (int *)(v35 - 1);
              v36 = *((_DWORD *)v35-- - 1);
            }
            while (v36 < HIDWORD(v14));
          }
          if (v8 < v34)
          {
            v37 = *v8;
            v38 = *v34;
            do
            {
              *v8 = v38;
              *v34 = v37;
              v39 = v8[1];
              v8[1] = v34[1];
              v34[1] = v39;
              do
              {
                v40 = *((_QWORD *)v8 + 1);
                v8 += 2;
                v37 = v40;
              }
              while (HIDWORD(v40) >= HIDWORD(v14));
              do
              {
                v41 = *((_QWORD *)v34 - 1);
                v34 -= 2;
                v38 = v41;
              }
              while (HIDWORD(v41) < HIDWORD(v14));
            }
            while (v8 < v34);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v14;
          continue;
        }
        v15 = HIDWORD(v14);
LABEL_12:
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)&v7[v16 + 2];
          v16 += 2;
        }
        while (v15 < HIDWORD(v17));
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 2)
        {
          v22 = a2;
          while (v18 < (int *)v22)
          {
            v20 = v22 - 1;
            v23 = *((_DWORD *)v22-- - 1);
            if (v15 < v23)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 1;
            v21 = *((_DWORD *)v19-- - 1);
          }
          while (v15 >= v21);
        }
LABEL_22:
        if (v18 >= (int *)v20)
        {
          v8 = v18;
        }
        else
        {
          v24 = *(_DWORD *)v20;
          v8 = v18;
          v25 = (int *)v20;
          do
          {
            *v8 = v24;
            *v25 = v17;
            v26 = v8[1];
            v8[1] = v25[1];
            v25[1] = v26;
            do
            {
              v27 = *((_QWORD *)v8 + 1);
              v8 += 2;
              LODWORD(v17) = v27;
            }
            while (v15 < HIDWORD(v27));
            do
            {
              v28 = *((_QWORD *)v25 - 1);
              v25 -= 2;
              v24 = v28;
            }
            while (v15 >= HIDWORD(v28));
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v14;
        *(v8 - 1) = v15;
        if (v18 < (int *)v20)
        {
LABEL_35:
          result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v7, (uint64_t *)v8 - 1);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((uint64_t *)v8, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_35;
        }
        a2 = (uint64_t *)(v8 - 2);
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarks(cv3d::cv::gess::mesh::TriMesh &,unsigned short const&,std::vector<BOOL> const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (HIDWORD(*a1) < HIDWORD(v6))
      {
        *(_DWORD *)a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = *((_DWORD *)a1 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, (uint64_t)(a1 + 2), (uint64_t)(a1 + 3));
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (HIDWORD(v21) >= HIDWORD(v20))
        return 1;
      *((_DWORD *)a1 + 6) = v20;
      *((_DWORD *)a2 - 2) = v21;
      v22 = *((_DWORD *)a1 + 7);
      *((_DWORD *)a1 + 7) = *((_DWORD *)a2 - 1);
      *((_DWORD *)a2 - 1) = v22;
      v23 = a1[2];
      v24 = a1[3];
      v25 = HIDWORD(v24);
      if (HIDWORD(v23) >= HIDWORD(v24))
        return 1;
      a1[2] = v24;
      a1[3] = v23;
      v26 = a1[1];
      v27 = a1[2];
      if (HIDWORD(v26) >= HIDWORD(v27))
        return 1;
      *((_DWORD *)a1 + 2) = v27;
      *((_DWORD *)a1 + 3) = v25;
      a1[2] = v26;
      v28 = *a1;
      v29 = a1[1];
      v30 = HIDWORD(*a1);
      if (v30 >= HIDWORD(v29))
        return 1;
      *(_DWORD *)a1 = v29;
      *((_DWORD *)a1 + 1) = v25;
      result = 1;
      *((_DWORD *)a1 + 2) = v28;
      *((_DWORD *)a1 + 3) = v30;
      return result;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::CollectLandmarkVertices(cv3d::cv::gess::mesh::TriMesh const&,std::vector<unsigned int> const&,unsigned short const&,std::vector<cv3d::cv::gess::mesh::VertexHandle> &)::$_0 &,std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int> *>((int *)a1, (int *)a1 + 2, a1 + 2);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v10;
    v14 = *v9;
    v15 = HIDWORD(*v10);
    if (HIDWORD(*v9) < v15)
    {
      v16 = v11;
      while (1)
      {
        v17 = (uint64_t)a1 + v16;
        v18 = *(_DWORD *)((char *)a1 + v16 + 20);
        *(_DWORD *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(_QWORD *)(v17 + 8);
        v16 -= 8;
        if (HIDWORD(v14) >= v15)
        {
          v19 = (_DWORD *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v13;
      v19[1] = v15;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

_QWORD *cv3d::cv::gess::isochart::GetSubFaceVid(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;

  v2 = *result;
  if (result[1] - *result != 768)
    cv3d::cv::gess::isochart::GetSubFaceVid();
  *(_OWORD *)v2 = xmmword_23C60C770;
  *(_OWORD *)(v2 + 16) = xmmword_23C60C780;
  *(_OWORD *)(v2 + 32) = xmmword_23C60C790;
  *(_OWORD *)(v2 + 48) = xmmword_23C60C7A0;
  *(_OWORD *)(v2 + 64) = xmmword_23C60C7B0;
  *(_OWORD *)(v2 + 80) = xmmword_23C60C7C0;
  *(_OWORD *)(v2 + 96) = xmmword_23C60C7D0;
  *(_OWORD *)(v2 + 112) = xmmword_23C60C7E0;
  *(_OWORD *)(v2 + 128) = xmmword_23C60C7F0;
  *(_OWORD *)(v2 + 144) = xmmword_23C60C800;
  *(_OWORD *)(v2 + 160) = xmmword_23C60C810;
  *(_OWORD *)(v2 + 176) = xmmword_23C60C820;
  *(_OWORD *)(v2 + 192) = xmmword_23C60C830;
  *(_OWORD *)(v2 + 208) = xmmword_23C60C840;
  *(_OWORD *)(v2 + 224) = xmmword_23C60C850;
  *(_OWORD *)(v2 + 240) = xmmword_23C60C860;
  *(_OWORD *)(v2 + 256) = xmmword_23C60C870;
  *(_OWORD *)(v2 + 272) = xmmword_23C60C880;
  *(_OWORD *)(v2 + 288) = xmmword_23C60C890;
  *(_OWORD *)(v2 + 304) = xmmword_23C60C8A0;
  *(_OWORD *)(v2 + 320) = xmmword_23C60C8B0;
  *(_OWORD *)(v2 + 336) = xmmword_23C60C8C0;
  *(_OWORD *)(v2 + 352) = xmmword_23C60C8D0;
  *(_OWORD *)(v2 + 368) = xmmword_23C60C8E0;
  *(_OWORD *)(v2 + 384) = xmmword_23C60C8F0;
  *(_QWORD *)(v2 + 400) = 0x1A00000019;
  v3 = *result;
  v4 = result[1];
  v5 = (_OWORD *)(*result + 696);
  v6 = (_OWORD *)(*result + 408);
  *v6 = xmmword_23C60C900;
  v6[1] = xmmword_23C60C910;
  v6[2] = xmmword_23C60C920;
  v6[3] = xmmword_23C60C930;
  v6[4] = xmmword_23C60C940;
  v6[5] = xmmword_23C60C950;
  v6[6] = xmmword_23C60C960;
  v6[7] = xmmword_23C60C970;
  v6[8] = xmmword_23C60C980;
  v6[9] = xmmword_23C60C990;
  v6[10] = xmmword_23C60C9A0;
  v6[11] = xmmword_23C60C9B0;
  v6[12] = xmmword_23C60C9C0;
  v6[13] = xmmword_23C60C9D0;
  v6[14] = xmmword_23C60C9E0;
  v6[15] = xmmword_23C60C9F0;
  v6[16] = xmmword_23C60CA00;
  v6[17] = xmmword_23C60CA10;
  *v5 = xmmword_23C60CA20;
  v5[1] = xmmword_23C60CA30;
  v5[2] = xmmword_23C60CA40;
  v5[3] = xmmword_23C60CA50;
  *(_QWORD *)(v3 + 760) = 0x2C0000002BLL;
  v7 = v4 - v3;
  if (v4 != v3)
  {
    v8 = 0;
    v9 = v7 / 12;
    if (v9 <= 1)
      v9 = 1;
    do
    {
      for (i = 0; i != 12; i += 4)
        *(_DWORD *)(v3 + i) += a2;
      ++v8;
      v3 += 12;
    }
    while (v8 != v9);
  }
  return result;
}

float cv3d::cv::gess::isochart::Face2DArea(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  unsigned int v18;

  v6 = (unsigned int *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1, *a3, *a2);
  v18 = *a4;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), &v18, v7);
  v11 = *v6;
  v12 = *(_QWORD *)(v8 + 40);
  v13 = (*(_QWORD *)(v8 + 48) - v12) >> 3;
  if (v13 <= v11)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
  v14 = v6[1];
  if (v13 <= v14)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
  v15 = v6[2];
  if (v13 <= v15)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
  v16 = (float *)(v12 + 8 * v11);
  return fabsf((float)((float)((float)(*(float *)(v12 + 8 * v14) - *v16) * (float)(*(float *)(v12 + 8 * v15 + 4) - v16[1]))- (float)((float)(*(float *)(v12 + 8 * v14 + 4) - v16[1]) * (float)(*(float *)(v12 + 8 * v15) - *v16)))* 0.5);
}

uint64_t cv3d::cv::gess::isochart::ComputeIMTFromHighMesh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const cv3d::cv::gess::mesh::PolyMesh *v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unsigned int v21;
  unsigned int i;
  unsigned int v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  unsigned int v35;
  float v36;
  float v37;
  float v38;
  float *v39;
  unint64_t v40;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v65;
  int v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  void *v72;
  void *v73;
  void *__p;
  void *v75;
  char v76;
  unsigned int v77;
  unsigned int v78;
  void *v79[3];
  void *v80;
  void *v81;
  uint64_t v82;
  void *v83;
  _BYTE *v84;
  uint64_t v85;
  float32x4_t v86[2];
  uint64_t v87;
  void *v88[3];
  float32x4_t *v89;
  float32x4_t *v90;
  __int128 v91;
  char v92;
  unsigned int v93;
  unsigned int v94;

  v93 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v91, "f:imt");
  v89 = 0;
  v90 = 0;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 56), (uint64_t)&v89, (unsigned __int8 *)&v91);
  v93 = v6;
  if (v92 < 0)
  {
    operator delete((void *)v91);
    v6 = v93;
  }
  if (v6 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v91, "f:imt");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v93, &v91);
    if (v92 < 0)
      operator delete((void *)v91);
    v6 = v93;
  }
  LODWORD(v91) = v6;
  v7 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), (unsigned int *)&v91);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
  {
    v8 = 0;
    do
    {
      LODWORD(v91) = v93;
      v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), (unsigned int *)&v91);
      v10 = *(_QWORD *)(v9 + 40);
      if (v8 >= (*(_QWORD *)(v9 + 48) - v10) >> 4)
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      v11 = (_QWORD *)(v10 + 16 * v8);
      *v11 = 0;
      v11[1] = 0;
      ++v8;
      LODWORD(v91) = v93;
      v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), (unsigned int *)&v91);
    }
    while (v8 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12));
  }
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v91, 45 * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2));
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(&v89, 45 * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v88, 3uLL);
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v86[0].i32[0] = v15;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)v86, v88);
      v70 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)v88[0]);
      v68 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v88[0] + 1));
      v67 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)v88[0] + 2));
      cv3d::cv::gess::math::FaceNormal(a1, v15, v86);
      v16 = 0;
      v17 = 0;
      v18.i64[0] = 0x3E0000003E000000;
      v18.i64[1] = 0x3E0000003E000000;
      v19 = vmulq_f32(vsubq_f32(v68, v70), v18);
      v20 = vmulq_f32(vsubq_f32(v67, v70), v18);
      do
      {
        v21 = 0;
        for (i = v16; i != -1; --i)
        {
          v23 = v14 + v17 + v21;
          *(float32x4_t *)(v91 + 16 * v23) = vaddq_f32(vmulq_n_f32(v20, (float)i), vaddq_f32(v70, vmulq_n_f32(v19, (float)v21)));
          v89[v23] = v86[0];
          ++v21;
        }
        ++v16;
        v17 += v21;
      }
      while (v16 != 9);
      if (v17 != 45)
        __assert_rtn("ComputeIMTFromHighMesh", "IMTComputation.cpp", 133, "cur_index == SUBDIV_VERTEX_NUMBER");
      ++v15;
      v14 += 45;
    }
    while (v15 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  cv3d::cv::gess::alg::ComputeAverageEdgeLength((float32x4_t *)a1, v13);
  v25 = v24;
  v87 = 0;
  cv3d::cv::gess::alg::MPSMeshIntersector::MPSMeshIntersector(v86, a2, &v87, a3);
  if ((cv3d::cv::gess::alg::MPSMeshIntersector::initialized((cv3d::cv::gess::alg::MPSMeshIntersector *)v86) & 1) != 0)
  {
    v27 = (*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
    v83 = 0;
    v84 = 0;
    v85 = 0;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    cv3d::cv::gess::internal::TwoWayRaycast(&v91, (uint64_t)&v89, v86, v27, (uint64_t)&v83, (uint64_t)&v80, v25);
    if ((v84 - (_BYTE *)v83) >> 2 != (uint64_t)(*((_QWORD *)&v91 + 1) - v91) >> 4)
      __assert_rtn("ComputeIMTFromHighMesh", "IMTComputation.cpp", 152, "intersect_high_fhs.size() == positions.size()");
    v90 = v89;
    std::vector<float>::vector(v79, (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
    v77 = -1;
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v73) = 0;
    v72 = 0;
    v28 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a2 + 56), (uint64_t)&v72, (unsigned __int8 *)&__p);
    v78 = v28;
    if (v76 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v72 = 0;
    v30 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v72, (unsigned __int8 *)&__p);
    v77 = v30;
    if (v76 < 0)
      operator delete(__p);
    v31 = v28 == -1 || v30 == -1;
    v32 = !v31;
    if (!v31)
    {
      std::vector<float>::vector(&__p, (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
      std::vector<float>::vector(&v72, (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
      if (*(_QWORD *)(a2 + 160) == *(_QWORD *)(a2 + 152))
      {
        v40 = 0;
        v36 = 0.0;
        v34 = 0.0;
      }
      else
      {
        v33 = 0;
        v34 = 0.0;
        v35 = 1;
        v36 = 0.0;
        do
        {
          v94 = v35 - 1;
          v37 = cv3d::cv::gess::isochart::Face2DArea(a2, &v94, &v78, &v77);
          *((float *)__p + v33) = v37;
          v94 = v35 - 1;
          v38 = cv3d::cv::gess::mesh::TriMesh::Area(a2, &v94);
          v39 = (float *)v72;
          *((float *)v72 + v33) = v38;
          v36 = v36 + *((float *)__p + v33);
          v34 = v34 + v39[v33];
          v33 = v35;
          v40 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        }
        while (v40 > v35++);
      }
      if (v34 <= 1.0e-16)
        v42 = 1.0;
      else
        v42 = v36 / v34;
      if (v40)
      {
        v43 = 0;
        do
        {
          v44 = *((float *)v72 + v43);
          if (v44 <= 1.0e-16)
          {
            *((float *)v79[0] + v43) = v42;
          }
          else
          {
            v45 = *((float *)__p + v43) / v44;
            if (v42 * 0.001 > v45 || v42 * 1000.0 < v45)
              v45 = v42;
            *((float *)v79[0] + v43) = v45;
          }
          ++v43;
        }
        while (v40 > v43);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      if (__p)
      {
        v75 = __p;
        operator delete(__p);
      }
      v48 = *(_QWORD *)(a1 + 152);
      v47 = *(_QWORD *)(a1 + 160);
      v49 = 45 * ((v47 - v48) >> 2);
      std::vector<float>::vector(&__p, v49);
      v50 = (unsigned int *)v83;
      if (v49 == (v84 - (_BYTE *)v83) >> 2)
      {
        if (v49 == (uint64_t)(*((_QWORD *)&v91 + 1) - v91) >> 4)
        {
          if (v47 != v48)
          {
            v51 = (float *)v79[0];
            v52 = (float *)__p;
            if (v49 <= 1)
              v53 = 1;
            else
              v53 = 45 * ((v47 - v48) >> 2);
            do
            {
              v55 = *v50++;
              v54 = v55;
              if (v55 == -1)
                v56 = 1.0;
              else
                v56 = v51[v54] / v42;
              *v52++ = v56;
              --v53;
            }
            while (v53);
          }
          std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::vector(&v72, 0x40uLL);
          if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
          {
            v57 = 0;
            v69 = (float32x4_t)vdupq_n_s32(0x3C800000u);
            do
            {
              cv3d::cv::gess::isochart::GetSubFaceVid(&v72, 45 * v57);
              v58 = 0;
              v59 = 0uLL;
              do
              {
                v60 = (float)((float)(*((float *)__p + *(unsigned int *)((char *)v72 + v58))
                                    + *((float *)__p + *(unsigned int *)((char *)v72 + v58 + 4)))
                            + *((float *)__p + *(unsigned int *)((char *)v72 + v58 + 8)))
                    / 3.0;
                v61.i32[1] = 0;
                v61.i32[3] = 0;
                v61.f32[0] = v60 * v60;
                v61.f32[2] = v60 * v60;
                v59 = vaddq_f32(v59, vmulq_f32(v61, v69));
                v58 += 12;
              }
              while (v58 != 768);
              v71 = v59;
              v94 = v93;
              v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v94);
              v63 = *(_QWORD *)(v62 + 40);
              if (v57 >= (*(_QWORD *)(v62 + 48) - v63) >> 4)
                __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
              *(float32x4_t *)(v63 + 16 * v57++) = v71;
            }
            while (v57 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
          }
          if (v72)
          {
            v73 = v72;
            operator delete(v72);
          }
          if (__p)
          {
            v75 = __p;
            operator delete(__p);
          }
LABEL_81:
          if (v79[0])
          {
            v79[1] = v79[0];
            operator delete(v79[0]);
          }
          if (v80)
          {
            v81 = v80;
            operator delete(v80);
          }
          if (v83)
          {
            v84 = v83;
            operator delete(v83);
          }
          goto LABEL_87;
        }
        v65 = "positions.size() == vertex_signal_count";
        v66 = 225;
      }
      else
      {
        v65 = "intersect_high_fhs.size() == vertex_signal_count";
        v66 = 224;
      }
      __assert_rtn("ComputeIMTFromHighMesh", "IMTComputation.cpp", v66, v65);
    }
    if (v93 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v93, v29);
    v93 = -1;
    goto LABEL_81;
  }
  if (v93 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v93, v26);
  v32 = 0;
  v93 = -1;
LABEL_87:
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector((cv3d::cv::gess::alg::MPSMeshIntersector *)v86);
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if ((_QWORD)v91)
  {
    *((_QWORD *)&v91 + 1) = v91;
    operator delete((void *)v91);
  }
  return v32;
}

void sub_23C5A02A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v36;
  void *v37;
  void *v38;

  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  cv3d::cv::gess::alg::MPSMeshIntersector::~MPSMeshIntersector((cv3d::cv::gess::alg::MPSMeshIntersector *)&a34);
  v36 = *(void **)(v34 - 168);
  if (v36)
  {
    *(_QWORD *)(v34 - 160) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 144);
  if (v37)
  {
    *(_QWORD *)(v34 - 136) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v34 - 112);
  if (v38)
  {
    *(_QWORD *)(v34 - 104) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CalIMTFromPerVertexSignal(float32x4_t *a1, float *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  float v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float32x4_t v25;
  int32x4_t v26;
  void *__p[3];
  void *v28[3];
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];

  v4 = a4;
  v34[1] = *MEMORY[0x24BDAC8D0];
  std::vector<float>::vector(v28, a4);
  std::vector<float>::vector(__p, v4);
  v32 = 0;
  v33 = 0;
  v34[0] = 0;
  v25 = 0u;
  v26 = 0u;
  cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(a1, a1 + 1, a1 + 2, &v32, (uint64_t)&v33, (float *)v34, &v26, &v25);
  v8 = fabsf((float)((float)((float)(*(float *)&v33 - *(float *)&v32) * (float)(*((float *)v34 + 1) - *((float *)&v32 + 1)))- (float)((float)(*((float *)&v33 + 1) - *((float *)&v32 + 1)) * (float)(*(float *)v34 - *(float *)&v32)))* 0.5);
  if (v8 >= 1.0e-16 && v4)
  {
    v9 = 0;
    v10 = (float *)v28[0];
    v11 = (float *)__p[0];
    do
    {
      v12 = 0;
      v13 = a2;
      do
      {
        *(float *)((char *)&v29 + v12) = *v13;
        v12 += 4;
        v13 += v4;
      }
      while (v12 != 12);
      v14 = v29;
      v15 = v30;
      v16 = v31;
      v10[v9] = (float)((float)((float)(v30 * (float)(*((float *)v34 + 1) - *((float *)&v32 + 1)))
                              + (float)(v29 * (float)(*((float *)&v33 + 1) - *((float *)v34 + 1))))
                      + (float)(v31 * (float)(*((float *)&v32 + 1) - *((float *)&v33 + 1))))
              / v8;
      v11[v9++] = (float)((float)((float)(v15 * (float)(*(float *)&v32 - *(float *)v34))
                                + (float)(v14 * (float)(*(float *)v34 - *(float *)&v33)))
                        + (float)(v16 * (float)(*(float *)&v33 - *(float *)&v32)))
                / v8;
      ++a2;
    }
    while (v9 != v4);
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = 0;
    v17 = 0.0;
    v18 = (float *)v28[0];
    v19 = 0.0;
    v20 = 0.0;
    v21 = (float *)__p[0];
    do
    {
      v17 = v17 + (float)(*v18 * *v18);
      *(float *)a3 = v17;
      v19 = v19 + (float)(*v21 * *v21);
      *(float *)(a3 + 8) = v19;
      v22 = *v18++;
      v23 = v22;
      v24 = *v21++;
      v20 = v20 + (float)(v23 * v24);
      *(float *)(a3 + 4) = v20;
      --v4;
    }
    while (v4);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
}

void sub_23C5A05F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::Vertex3DTo2D(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float result;

  v5 = vsubq_f32(*a1, *a2);
  v6 = vmulq_f32(v5, *a3);
  v6.i32[3] = 0;
  *a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6));
  v7 = vmulq_f32(v5, *a4);
  v7.i32[3] = 0;
  result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7));
  a5[1] = result;
  return result;
}

float cv3d::cv::gess::isochart::CalculateSignalLengthOnOneFace(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float *a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v6 = vsubq_f32(*a1, *a3);
  v7 = vmulq_f32(v6, *a4);
  v7.i32[3] = 0;
  v8 = vmulq_f32(v6, *a5);
  v8.i32[3] = 0;
  v9 = vsubq_f32(*a2, *a3);
  v10 = vmulq_f32(*a4, v9);
  v10.i32[3] = 0;
  v11 = vmulq_f32(*a5, v9);
  v11.i32[3] = 0;
  v10.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7));
  v11.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v11, v11))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  return sqrtf((float)((float)(v11.f32[0] * (float)(v11.f32[0] * a6[2])) + (float)((float)(v10.f32[0] * *a6) * v10.f32[0]))+ (float)((float)(v10.f32[0] * (float)(a6[1] + a6[1])) * v11.f32[0]));
}

float cv3d::cv::gess::isochart::HEdgeSignalLength(uint64_t a1, unsigned int *a2, uint64_t *a3, unsigned int *a4)
{
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  void *__p[3];
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;

  v8 = -1;
  v52 = -1;
  v53 = -1;
  v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v10 & *v9) == 0)
  {
    v8 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 16);
    v53 = v8;
  }
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v12 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v11);
  if ((v13 & *v12) != 0)
  {
    if (v8 != -1)
    {
      v14 = -1;
      goto LABEL_8;
    }
LABEL_17:
    cv3d::cv::gess::isochart::HEdgeSignalLength();
  }
  v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v15) + 16);
  v52 = v14;
  if (v8 == -1)
  {
    v52 = -1;
    v53 = v14;
    v16 = v14 == -1;
    v14 = -1;
    if (v16)
      goto LABEL_17;
  }
LABEL_8:
  v17 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v50 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v17 + 12));
  v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v19 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v18);
  v49 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v19 + 12));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v53, __p);
  v47 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
  v20 = v53;
  v21 = *a3;
  v54 = *a4;
  v22 = (uint64_t *)(a1 + 56);
  v23 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v54);
  v24 = *(_QWORD *)(v23 + 40);
  if (v53 >= (unint64_t)((*(_QWORD *)(v23 + 48) - v24) >> 4))
    __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
  v25 = vsubq_f32(v50, v47);
  v26 = *(float32x4_t *)(v21 + 32 * v20);
  v27 = vmulq_f32(v25, v26);
  v27.i32[3] = 0;
  v28 = *(float32x4_t *)(v21 + 16 * ((2 * v20) | 1));
  v29 = vmulq_f32(v25, v28);
  v29.i32[3] = 0;
  v30 = vsubq_f32(v49, v47);
  v31 = vmulq_f32(v30, v26);
  v31.i32[3] = 0;
  v32 = vmulq_f32(v30, v28);
  v32.i32[3] = 0;
  v31.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27));
  v29.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
  v33 = sqrtf((float)((float)(v29.f32[0] * (float)(v29.f32[0] * *(float *)(v24 + 16 * v53 + 8)))+ (float)((float)(v31.f32[0] * *(float *)(v24 + 16 * v53)) * v31.f32[0]))+ (float)((float)(v31.f32[0] * (float)(*(float *)(v24 + 16 * v53 + 4) + *(float *)(v24 + 16 * v53 + 4)))* v29.f32[0]));
  if (v14 != -1)
  {
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v52, __p);
    v48 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
    v34 = v52;
    v35 = *a3;
    v54 = *a4;
    v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v22, &v54);
    v37 = *(_QWORD *)(v36 + 40);
    if (v52 >= (unint64_t)((*(_QWORD *)(v36 + 48) - v37) >> 4))
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    v38 = vsubq_f32(v50, v48);
    v39 = *(float32x4_t *)(v35 + 32 * v34);
    v40 = vmulq_f32(v38, v39);
    v40.i32[3] = 0;
    v41 = *(float32x4_t *)(v35 + 16 * ((2 * v34) | 1));
    v42 = vmulq_f32(v38, v41);
    v42.i32[3] = 0;
    v43 = vsubq_f32(v49, v48);
    v44 = vmulq_f32(v43, v39);
    v44.i32[3] = 0;
    v45 = vmulq_f32(v43, v41);
    v45.i32[3] = 0;
    v44.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44))
               - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40));
    v42.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45))
               - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42));
    v33 = (float)(v33
                + sqrtf((float)((float)(v42.f32[0] * (float)(v42.f32[0] * *(float *)(v37 + 16 * v52 + 8)))+ (float)((float)(v44.f32[0] * *(float *)(v37 + 16 * v52)) * v44.f32[0]))+ (float)((float)(v44.f32[0]* (float)(*(float *)(v37 + 16 * v52 + 4) + *(float *)(v37 + 16 * v52 + 4)))* v42.f32[0])))* 0.5;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v33;
}

void sub_23C5A0AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5A0B68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::InitializeVIDRoot(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *__p[2];
  char v21;
  int v22;

  v22 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t)this, &v22, (__int128 *)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v22;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)this + 1, (unsigned int *)__p, v3);
  v7 = *((_QWORD *)this + 14) - *((_QWORD *)this + 13);
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    v8 = 0;
    v9 = (v7 >> 2);
    do
    {
      v10 = *(_QWORD *)(v4 + 40);
      if (v8 >= (*(_QWORD *)(v4 + 48) - v10) >> 2)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
      *(_DWORD *)(v10 + 4 * v8) = v8;
      ++v8;
    }
    while (v9 != v8);
  }
  v19 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t)this, &v19, (__int128 *)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v19;
  result = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)this + 7, (unsigned int *)__p, v11);
  v15 = *((_QWORD *)this + 20) - *((_QWORD *)this + 19);
  if ((v15 & 0x3FFFFFFFCLL) != 0)
  {
    v16 = 0;
    v17 = (v15 >> 2);
    do
    {
      v18 = *(_QWORD *)(result + 40);
      if (v16 >= (*(_QWORD *)(result + 48) - v18) >> 2)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(result, v13, v14);
      *(_DWORD *)(v18 + 4 * v16) = v16;
      ++v16;
    }
    while (v17 != v16);
  }
  return result;
}

void sub_23C5A0CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  int v6;

  v6 = -1;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::VertexHandle>((char **)(a1 + 8), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  int v6;

  v6 = -1;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::FaceHandle>((char **)(a1 + 56), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

uint64_t cv3d::cv::gess::isochart::MergeToRootMesh(uint64_t *a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  std::string __p;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87[4];
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v85 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v3 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a2, &v85, (unsigned __int8 *)&__p);
  v5 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_7;
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a2, &v85, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
  LODWORD(__p.__r_.__value_.__l.__data_) = v85;
  v79 = (uint64_t *)(a2 + 80);
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a2 + 80), (unsigned int *)&__p, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, (a1[1] - *a1) >> 4);
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      std::to_string(&__p, v8);
      v9 = std::string::insert(&__p, 0, "g", 1uLL);
      v10 = v9->__r_.__value_.__r.__words[0];
      *(_QWORD *)v87 = v9->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v87[1] + 3) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v86 = v85;
      v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v79, &v86, v12);
      v14 = *(_QWORD *)(v13 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v13 + 48) - v14) >> 3) <= v8)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v15 = v14 + v7;
      if (*(char *)(v14 + v7 + 23) < 0)
        operator delete(*(void **)v15);
      *(_QWORD *)v15 = v10;
      *(_QWORD *)(v15 + 8) = *(_QWORD *)v87;
      *(_QWORD *)(v15 + 15) = *(_QWORD *)((char *)&v87[1] + 3);
      *(_BYTE *)(v15 + 23) = v11;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v8;
      v7 += 24;
    }
    while (v8 < (a1[1] - *a1) >> 4);
  }
  v86 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v87[0] = 0;
  v80 = (uint64_t *)(a2 + 56);
  v16 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(a2 + 56), (uint64_t)v87, (unsigned __int8 *)&__p);
  v86 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v16 != -1)
  {
    if (v86 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>(v80, &v86);
    v86 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a2, &v86, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v82 = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  *(_QWORD *)&v87[1] = 0;
  v87[0] = 0;
  v17 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)v80, (uint64_t)v87, (unsigned __int8 *)&__p);
  v83 = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v17 != -1)
  {
    if (v83 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector2T<unsigned int>>(v80, &v83);
    v83 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(a2, &v83, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)v87 = 0;
  v19 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)v79, (uint64_t)v87, (unsigned __int8 *)&__p);
  v82 = v19;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v19 != -1)
  {
    if (v82 != -1)
      cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(v79, &v82, v18);
    v82 = -1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)v87 = 0;
  v82 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((char **)v79, (uint64_t)v87, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v83 == -1)
    cv3d::cv::gess::isochart::MergeToRootMesh();
  if (v82 == -1)
    cv3d::cv::gess::isochart::MergeToRootMesh();
  LODWORD(__p.__r_.__value_.__l.__data_) = v82;
  v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v79, (unsigned int *)&__p, v20);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  v23 = *a1;
  if (a1[1] != *a1)
  {
    v24 = 0;
    do
    {
      v78 = v24;
      v25 = *(uint64_t **)(v23 + 16 * v24);
      std::string::basic_string[abi:ne180100]<0>(&__p, "f:index_in_root");
      v26 = v25 + 7;
      v87[0] = -1;
      v81 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)v25 + 7, (uint64_t)v87, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v73 = v25[19];
      v74 = v25[20];
      v75 = (v74 - v73) >> 2;
      if (v74 != v73)
      {
        v28 = 0;
        if (v75 <= 1)
          v29 = 1;
        else
          v29 = (v74 - v73) >> 2;
        do
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = v81;
          v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v25 + 7, (unsigned int *)&__p, v27);
          v33 = *(_QWORD *)(v30 + 40);
          if (v28 >= (*(_QWORD *)(v30 + 48) - v33) >> 2)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v30, v31, v32);
          v34 = *(unsigned int *)(v33 + 4 * v28);
          LODWORD(__p.__r_.__value_.__l.__data_) = v86;
          v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v80, (unsigned int *)&__p);
          v37 = *(_QWORD *)(v35 + 40);
          if (v34 >= (*(_QWORD *)(v35 + 48) - v37) >> 2)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v35, v36, v27);
          *(_DWORD *)(v37 + 4 * v34) = v78;
          ++v28;
        }
        while (v29 != v28);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
      *(_QWORD *)&v87[1] = 0;
      v87[0] = 0;
      v77 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)v25 + 7, (uint64_t)v87, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      v38 = v25 + 10;
      *(_QWORD *)v87 = 0;
      v40 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)v25 + 10, (uint64_t)v87, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      LODWORD(__p.__r_.__value_.__l.__data_) = v82;
      v41 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v79, (unsigned int *)&__p, v39);
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
      LODWORD(__p.__r_.__value_.__l.__data_) = v40;
      v44 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v25 + 10, (unsigned int *)&__p, v43);
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
      LODWORD(__p.__r_.__value_.__l.__data_) = v82;
      v47 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v79, (unsigned int *)&__p, v46);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, v45 + v42);
      if (v45)
      {
        v49 = 0;
        for (i = 0; i != v45; ++i)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = v40;
          v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v38, (unsigned int *)&__p, v48);
          v54 = *(_QWORD *)(v51 + 40);
          if (i >= (*(_QWORD *)(v51 + 48) - v54) >> 3)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v51, v52, v53);
          LODWORD(__p.__r_.__value_.__l.__data_) = v82;
          result = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v79, (unsigned int *)&__p, v53);
          v56 = *(_QWORD *)(result + 40);
          if (v42 + i >= (*(_QWORD *)(result + 48) - v56) >> 3)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(result, v55, v48);
          v57 = (_DWORD *)(v56 + 8 * v42 + v49);
          *v57 = *(_DWORD *)(v54 + v49);
          v57[1] = *(_DWORD *)(v54 + v49 + 4);
          v49 += 8;
        }
      }
      if (v74 != v73)
      {
        v58 = 0;
        if (v75 <= 1)
          v59 = 1;
        else
          v59 = (v74 - v73) >> 2;
        while (1)
        {
          v87[0] = v77;
          v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v26, v87, v48);
          v63 = *(_QWORD *)(v60 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v60 + 48) - v63) >> 2) <= v58)
            cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v60, v61, v62);
          v64 = 0;
          v65 = v63 + 12 * v58;
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v65;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v65 + 8);
          do
          {
            *(_DWORD *)((char *)&__p.__r_.__value_.__l.__data_ + v64) += v42;
            v64 += 4;
          }
          while (v64 != 12);
          v87[0] = v81;
          v66 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v26, v87, v62);
          v68 = *(_QWORD *)(v66 + 40);
          if (v58 >= (*(_QWORD *)(v66 + 48) - v68) >> 2)
            break;
          v69 = *(unsigned int *)(v68 + 4 * v58);
          v87[0] = v83;
          result = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v80, v87, v67);
          v70 = *(_QWORD *)(result + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(result + 48) - v70) >> 2) <= v69)
          {
            v72 = 182;
LABEL_80:
            __assert_rtn("operator[]", "Attribute.h", v72, "index < data_.size()");
          }
          v71 = v70 + 12 * v69;
          *(_QWORD *)v71 = __p.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v71 + 8) = __p.__r_.__value_.__r.__words[1];
          if (++v58 == v59)
            goto LABEL_71;
        }
        v72 = 187;
        goto LABEL_80;
      }
LABEL_71:
      v24 = v78 + 1;
      v23 = *a1;
    }
    while (v78 + 1 < (unint64_t)((a1[1] - *a1) >> 4));
  }
  return result;
}

void sub_23C5A15BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::InitRootMeshGroup(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *__p[2];
  char v22;
  int v23;
  int v24;

  v23 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v3 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v23, (unsigned __int8 *)__p);
  v5 = v3;
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_7;
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>((uint64_t)this, &v23, (__int128 *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
LABEL_7:
  LODWORD(__p[0]) = v23;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p, v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 1);
  LODWORD(__p[0]) = v23;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p, v7);
  v11 = *(uint64_t **)(v8 + 40);
  if (*(uint64_t **)(v8 + 48) == v11)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v8, v9, v10);
  if (*((char *)v11 + 23) < 0)
  {
    v11[1] = 2;
    v11 = (uint64_t *)*v11;
  }
  else
  {
    *((_BYTE *)v11 + 23) = 2;
  }
  strcpy((char *)v11, "g0");
  v13 = *((_QWORD *)this + 19);
  v12 = *((_QWORD *)this + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v24 = 0;
  v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)this + 7, (uint64_t)&v24, (unsigned __int8 *)__p);
  v20 = v14;
  if (v22 < 0)
    operator delete(__p[0]);
  if (v14 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>((uint64_t)this, &v20, (__int128 *)__p);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (((unint64_t)(v12 - v13) >> 2))
  {
    v15 = 0;
    do
    {
      LODWORD(__p[0]) = v20;
      v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)__p);
      v19 = *(_QWORD *)(v16 + 40);
      if (v15 >= (*(_QWORD *)(v16 + 48) - v19) >> 2)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v16, v17, v18);
      *(_DWORD *)(v19 + 4 * v15++) = 0;
    }
    while (((unint64_t)(v12 - v13) >> 2) != v15);
  }
}

void sub_23C5A1814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::TrySplitMeshByComponents(uint64_t a1, char **a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  __int128 v46;
  unsigned int v47;
  void *__p;
  char *v49;
  char *v50;
  void *v51;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v51, v3, (unsigned __int8 *)&__p);
  v5 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  if (v4 == v5)
  {
    v45 = 0;
    goto LABEL_47;
  }
  v6 = 0;
  v7 = 0;
  v45 = 0;
  while (1)
  {
    v8 = v6 >> 6;
    v9 = 1 << v6;
    v10 = *((_QWORD *)v51 + v8);
    if ((v10 & v9) == 0)
      break;
LABEL_43:
    v6 = ++v7;
    if (v7 >= (unint64_t)((v4 - v5) >> 2))
      goto LABEL_47;
  }
  *((_QWORD *)v51 + v8) = v10 | v9;
  __p = 0;
  v49 = 0;
  v50 = 0;
  v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50, 1uLL);
  v13 = v11;
  *v11 = v7;
  v14 = (char *)(v11 + 1);
  v16 = (char *)__p;
  v15 = v49;
  if (v49 != __p)
  {
    do
    {
      v17 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *--v11 = v17;
    }
    while (v15 != v16);
    v15 = (char *)__p;
  }
  v44 = v7;
  __p = v11;
  v49 = v14;
  v50 = (char *)&v13[v12];
  if (v15)
  {
    operator delete(v15);
    v11 = __p;
  }
  v18 = 0;
  ++v45;
  v49 = v14;
  do
  {
    LODWORD(v46) = v11[v18];
    v19 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, (unsigned int *)&v46);
    v47 = v19;
    do
    {
      v47 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v47) + 4);
      v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v47);
      v21 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v20);
      if ((*v21 & v22) == 0)
      {
        v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v47);
        v24 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v23) + 16);
        if (((1 << v24) & *((_QWORD *)v51 + (v24 >> 6))) == 0)
        {
          v25 = v49;
          if (v49 >= v50)
          {
            v27 = (v49 - (_BYTE *)__p) >> 2;
            if ((unint64_t)(v27 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v28 = (v50 - (_BYTE *)__p) >> 1;
            if (v28 <= v27 + 1)
              v28 = v27 + 1;
            if ((unint64_t)(v50 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
              v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50, v29);
            else
              v30 = 0;
            v31 = &v30[4 * v27];
            *(_DWORD *)v31 = v24;
            v26 = v31 + 4;
            v33 = (char *)__p;
            v32 = v49;
            if (v49 != __p)
            {
              do
              {
                v34 = *((_DWORD *)v32 - 1);
                v32 -= 4;
                *((_DWORD *)v31 - 1) = v34;
                v31 -= 4;
              }
              while (v32 != v33);
              v32 = (char *)__p;
            }
            __p = v31;
            v49 = v26;
            v50 = &v30[4 * v29];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_DWORD *)v49 = v24;
            v26 = v25 + 4;
          }
          v49 = v26;
          *((_QWORD *)v51 + (v24 >> 6)) |= 1 << v24;
        }
      }
    }
    while (v47 != v19);
    ++v18;
    v11 = __p;
    v35 = v49 - (_BYTE *)__p;
  }
  while (v18 < ((unint64_t)(v49 - (_BYTE *)__p) >> 2));
  v36 = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  v37 = v45;
  if (v35 < v36)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v46);
    cv3d::cv::gess::isochart::GenerateMeshFromFaceList(a1, (unsigned int **)&__p, v46);
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](a2, &v46);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v11 = __p;
    v37 = v43;
  }
  if (v11)
  {
    v49 = (char *)v11;
    operator delete(v11);
  }
  if (v35 < v36)
  {
    v5 = *(_QWORD *)(a1 + 152);
    v4 = *(_QWORD *)(a1 + 160);
    v43 = v37;
    v7 = v44;
    goto LABEL_43;
  }
  v45 = v37;
LABEL_47:
  if (v51)
    operator delete(v51);
  return v45;
}

void sub_23C5A1B9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
  __break(1u);
}

void sub_23C5A1BF0()
{
  __cxa_end_catch();
  JUMPOUT(0x23C5A1C08);
}

void sub_23C5A1C18()
{
  JUMPOUT(0x23C5A1C30);
}

void cv3d::cv::gess::isochart::GenerateMeshFromFaceList(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int *v23;
  int *v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  int v44;
  char *v45;
  unsigned int *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  const char *v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  const char *v90;
  const char *v91;
  const char *v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t *v107;
  int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t i;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unint64_t v140;
  uint64_t v141;
  float v142;
  unsigned int *v143;
  uint64_t v144;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v147;
  unsigned int *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  const char *v179;
  const char *v180;
  const char *v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t **v190;
  int v191;
  uint64_t *v192;
  uint64_t v193;
  unsigned int *v194;
  uint64_t *v195;
  unsigned int *v196;
  uint64_t *v197;
  int v198;
  uint64_t v199;
  float32x4_t v201;
  void *v202[2];
  char v203;
  int v204;
  void *v205;
  void *v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  void *__p[2];
  char v215;
  int v216;
  void *v217;
  unsigned int *v218;
  std::vector<int> v219;
  char *v220;
  char *v221;
  char *v222;
  unsigned int *v223;
  char *v224;
  char *v225;
  void *v226[3];
  char *v227;
  char *v228;
  char *v229;
  int v230[3];

  v227 = 0;
  v228 = 0;
  v229 = 0;
  v199 = a1 + 104;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v226, (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  v223 = 0;
  v224 = 0;
  v225 = 0;
  v220 = 0;
  v221 = 0;
  v222 = 0;
  memset(&v219, 0, sizeof(v219));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v217, 3uLL);
  std::vector<unsigned int>::reserve(&v219, (((char *)a2[1] - (char *)*a2) >> 1) + a2[1] - *a2);
  v5 = *a2;
  v194 = a2[1];
  if (*a2 == v194)
    goto LABEL_86;
  do
  {
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, v5, &v217);
    v196 = v5;
    v6 = (unsigned int *)v217;
    v7 = v218;
    while (v6 != v7)
    {
      v8 = *v6;
      v9 = *((_DWORD *)v226[0] + v8);
      if (v9 == -1)
      {
        v17 = v228;
        if (v228 >= v229)
        {
          v19 = (v228 - v227) >> 2;
          if ((unint64_t)(v19 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v20 = (v229 - v227) >> 1;
          if (v20 <= v19 + 1)
            v20 = v19 + 1;
          if ((unint64_t)(v229 - v227) >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v229, v21);
            LODWORD(v8) = *v6;
          }
          else
          {
            v22 = 0;
          }
          v26 = &v22[4 * v19];
          *(_DWORD *)v26 = v8;
          v18 = v26 + 4;
          v28 = v227;
          v27 = v228;
          if (v228 != v227)
          {
            do
            {
              v29 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v26 - 1) = v29;
              v26 -= 4;
            }
            while (v27 != v28);
            v27 = v227;
          }
          v227 = v26;
          v228 = v18;
          v229 = &v22[4 * v21];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_DWORD *)v228 = v8;
          v18 = v17 + 4;
        }
        v228 = v18;
        v9 = ((unint64_t)(v18 - v227) >> 2) - 1;
        *((_DWORD *)v226[0] + *v6) = v9;
        v30 = 0;
        *(_OWORD *)__p = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v6);
        v31 = v221;
        do
        {
          if (v31 >= v222)
          {
            v33 = v220;
            v34 = (v31 - v220) >> 2;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v36 = v222 - v220;
            if ((v222 - v220) >> 1 > v35)
              v35 = v36 >> 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
              v37 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            if (v37)
            {
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v222, v37);
              v33 = v220;
              v31 = v221;
            }
            else
            {
              v38 = 0;
            }
            v39 = &v38[4 * v34];
            *(_DWORD *)v39 = *((_DWORD *)__p + v30);
            v32 = v39 + 4;
            while (v31 != v33)
            {
              v40 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v39 - 1) = v40;
              v39 -= 4;
            }
            v220 = v39;
            v221 = v32;
            v222 = &v38[4 * v37];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v31 = *((_DWORD *)__p + v30);
            v32 = v31 + 4;
          }
          v221 = v32;
          ++v30;
          v31 = v32;
        }
        while (v30 != 3);
        end = v219.__end_;
        if (v219.__end_ < v219.__end_cap_.__value_)
        {
LABEL_53:
          *end = v9;
          v24 = end + 1;
          goto LABEL_68;
        }
        begin = v219.__begin_;
        v41 = v219.__end_ - v219.__begin_;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v43 = (char *)v219.__end_cap_.__value_ - (char *)v219.__begin_;
        if (((char *)v219.__end_cap_.__value_ - (char *)v219.__begin_) >> 1 > v42)
          v42 = v43 >> 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v42;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v219.__end_cap_, v15);
          begin = v219.__begin_;
          end = v219.__end_;
        }
        else
        {
          v16 = 0;
        }
        v23 = (int *)&v16[4 * v41];
        *v23 = v9;
        v24 = v23 + 1;
        while (end != begin)
        {
          v44 = *--end;
          *--v23 = v44;
        }
      }
      else
      {
        end = v219.__end_;
        if (v219.__end_ < v219.__end_cap_.__value_)
          goto LABEL_53;
        begin = v219.__begin_;
        v12 = v219.__end_ - v219.__begin_;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v14 = (char *)v219.__end_cap_.__value_ - (char *)v219.__begin_;
        if (((char *)v219.__end_cap_.__value_ - (char *)v219.__begin_) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v219.__end_cap_, v15);
          begin = v219.__begin_;
          end = v219.__end_;
        }
        else
        {
          v16 = 0;
        }
        v23 = (int *)&v16[4 * v12];
        *v23 = v9;
        v24 = v23 + 1;
        while (end != begin)
        {
          v25 = *--end;
          *--v23 = v25;
        }
      }
      v219.__begin_ = v23;
      v219.__end_ = v24;
      v219.__end_cap_.__value_ = (int *)&v16[4 * v15];
      if (begin)
        operator delete(begin);
LABEL_68:
      v219.__end_ = v24;
      ++v6;
    }
    v45 = v224;
    if (v224 >= v225)
    {
      v48 = (v224 - (char *)v223) >> 2;
      v46 = v196;
      if ((unint64_t)(v48 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v49 = (v225 - (char *)v223) >> 1;
      if (v49 <= v48 + 1)
        v49 = v48 + 1;
      if ((unint64_t)(v225 - (char *)v223) >= 0x7FFFFFFFFFFFFFFCLL)
        v50 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v225, v50);
      else
        v51 = 0;
      v52 = (unsigned int *)&v51[4 * v48];
      *v52 = *v196;
      v47 = (char *)(v52 + 1);
      v54 = v223;
      v53 = (unsigned int *)v224;
      if (v224 != (char *)v223)
      {
        do
        {
          v55 = *--v53;
          *--v52 = v55;
        }
        while (v53 != v54);
        v53 = v223;
      }
      v223 = v52;
      v224 = v47;
      v225 = &v51[4 * v50];
      if (v53)
        operator delete(v53);
    }
    else
    {
      v46 = v196;
      *(_DWORD *)v224 = *v196;
      v47 = v45 + 4;
    }
    v224 = v47;
    v5 = v46 + 1;
  }
  while (v5 != v194);
LABEL_86:
  cv3d::cv::gess::io::MeshFromArray<float,unsigned int>(a3, &v220, &v219);
  v216 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(a3, &v216, (__int128 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v216;
  v195 = (uint64_t *)(a3 + 8);
  v57 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(a3 + 8), (unsigned int *)__p, v56);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  LODWORD(v205) = -1;
  v59 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(a1 + 8), (uint64_t)&v205, (unsigned __int8 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  if (v59 == -1)
    __assert_rtn("GenerateMeshFromFaceList", "IsoChartUtils.cpp", 205, "v_id_root_father_ah.Valid()");
  LODWORD(__p[0]) = v59;
  v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(a1 + 8), (unsigned int *)__p, v58);
  v61 = (*(_QWORD *)(a3 + 112) - *(_QWORD *)(a3 + 104)) >> 2;
  v62 = v61;
  if ((_DWORD)v61)
  {
    v63 = 0;
    while (1)
    {
      v64 = *(unsigned int *)&v227[4 * v63];
      v65 = *(_QWORD *)(v60 + 40);
      if (v64 >= (*(_QWORD *)(v60 + 48) - v65) >> 2)
        break;
      v66 = *(_QWORD *)(v57 + 40);
      if (v63 >= (*(_QWORD *)(v57 + 48) - v66) >> 2)
      {
        v182 = 182;
LABEL_214:
        __assert_rtn("operator[]", "Attribute.h", v182, "index < data_.size()");
      }
      *(_DWORD *)(v66 + 4 * v63++) = *(_DWORD *)(v65 + 4 * v64);
      if (v61 == v63)
        goto LABEL_96;
    }
    v182 = 187;
    goto LABEL_214;
  }
LABEL_96:
  v213 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(a3, &v213, (__int128 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v213;
  v197 = (uint64_t *)(a3 + 56);
  v68 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(a3 + 56), (unsigned int *)__p, v67);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  v69 = (uint64_t *)(a1 + 56);
  LODWORD(v205) = -1;
  v71 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(a1 + 56), (uint64_t)&v205, (unsigned __int8 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  if (v71 == -1)
    __assert_rtn("GenerateMeshFromFaceList", "IsoChartUtils.cpp", 218, "f_id_root_father_ah.Valid()");
  LODWORD(__p[0]) = v71;
  v72 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v69, (unsigned int *)__p, v70);
  v73 = (*(_QWORD *)(a3 + 160) - *(_QWORD *)(a3 + 152)) >> 2;
  v74 = v73;
  if ((_DWORD)v73)
  {
    v75 = 0;
    while (1)
    {
      v76 = v223[v75];
      v77 = *(_QWORD *)(v72 + 40);
      if (v76 >= (*(_QWORD *)(v72 + 48) - v77) >> 2)
        break;
      v78 = *(_QWORD *)(v68 + 40);
      if (v75 >= (*(_QWORD *)(v68 + 48) - v78) >> 2)
      {
        v183 = 182;
LABEL_217:
        __assert_rtn("operator[]", "Attribute.h", v183, "index < data_.size()");
      }
      *(_DWORD *)(v78 + 4 * v75++) = *(_DWORD *)(v77 + 4 * v76);
      if (v74 == v75)
        goto LABEL_106;
    }
    v183 = 187;
    goto LABEL_217;
  }
LABEL_106:
  v212 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_father");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>(a3, &v212, (__int128 *)__p);
  v192 = (uint64_t *)(a1 + 56);
  v193 = v74;
  v190 = (uint64_t **)(a1 + 8);
  if (v215 < 0)
    operator delete(__p[0]);
  v189 = v61;
  if ((_DWORD)v61)
  {
    v80 = 0;
    v81 = "vhs_new[ii].Index() < mesh.VSize()";
    v82 = "IsoChartUtils.cpp";
    v83 = "GenerateMeshFromFaceList";
    while (1)
    {
      v84 = v62;
      v85 = v227;
      if (*(unsigned int *)&v227[4 * v80] >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2))
        break;
      LODWORD(__p[0]) = v212;
      v86 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(v195, (unsigned int *)__p, v79);
      v87 = *(_QWORD *)(v86 + 40);
      if (v80 >= (*(_QWORD *)(v86 + 48) - v87) >> 2)
      {
        v184 = 182;
        v83 = "operator[]";
        v82 = "Attribute.h";
        v81 = "index < data_.size()";
LABEL_220:
        __assert_rtn(v83, v82, v184, v81);
      }
      *(_DWORD *)(v87 + 4 * v80) = *(_DWORD *)&v85[4 * v80];
      ++v80;
      v62 = v84;
      if (v84 == v80)
        goto LABEL_113;
    }
    v184 = 229;
    goto LABEL_220;
  }
LABEL_113:
  v211 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_father");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>(a3, &v211, (__int128 *)__p);
  v188 = v62;
  if (v215 < 0)
  {
    operator delete(__p[0]);
    if (!v74)
      goto LABEL_121;
LABEL_117:
    v89 = 0;
    v90 = "fhs_new[ii].Index() < mesh.FSize()";
    v91 = "IsoChartUtils.cpp";
    v92 = "GenerateMeshFromFaceList";
    while (1)
    {
      v93 = v223;
      if (v223[v89] >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2))
        break;
      LODWORD(__p[0]) = v211;
      v94 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v197, (unsigned int *)__p, v88);
      v95 = *(_QWORD *)(v94 + 40);
      if (v89 >= (*(_QWORD *)(v94 + 48) - v95) >> 2)
      {
        v185 = 182;
        v92 = "operator[]";
        v91 = "Attribute.h";
        v90 = "index < data_.size()";
LABEL_223:
        __assert_rtn(v92, v91, v185, v90);
      }
      *(_DWORD *)(v95 + 4 * v89) = v93[v89];
      if (v74 == ++v89)
        goto LABEL_121;
    }
    v185 = 237;
    goto LABEL_223;
  }
  if (v74)
    goto LABEL_117;
LABEL_121:
  v209 = -1;
  v210 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  v205 = 0;
  v206 = 0;
  v96 = (uint64_t *)(a1 + 56);
  v97 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)v69, (uint64_t)&v205, (unsigned __int8 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  if (v97 == -1)
  {
    v98 = 0;
LABEL_134:
    v198 = -1;
    goto LABEL_141;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  LODWORD(v205) = 0;
  v198 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 32), (uint64_t)&v205, (unsigned __int8 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  if (v198 == -1)
  {
    v98 = 0;
    goto LABEL_134;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a3, &v210, (__int128 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a3, &v209, (__int128 *)__p);
  if (v215 < 0)
  {
    operator delete(__p[0]);
    if (!v74)
      goto LABEL_140;
LABEL_136:
    v99 = 0;
    while (1)
    {
      LODWORD(__p[0]) = v97;
      v100 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v192, (unsigned int *)__p);
      v101 = v223[v99];
      v102 = *(_QWORD *)(v100 + 40);
      if (v101 >= (*(_QWORD *)(v100 + 48) - v102) >> 4)
        break;
      LODWORD(__p[0]) = v210;
      v103 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v197, (unsigned int *)__p);
      v104 = *(_QWORD *)(v103 + 40);
      if (v99 >= (*(_QWORD *)(v103 + 48) - v104) >> 4)
      {
        v187 = 182;
LABEL_229:
        __assert_rtn("operator[]", "Attribute.h", v187, "index < data_.size()");
      }
      *(_OWORD *)(v104 + 16 * v99++) = *(_OWORD *)(v102 + 16 * v101);
      if (v193 == v99)
        goto LABEL_140;
    }
    v187 = 187;
    goto LABEL_229;
  }
  if (v74)
    goto LABEL_136;
LABEL_140:
  v98 = 1;
LABEL_141:
  v208 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v205) = 0;
  v105 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v197, (uint64_t)&v205, (unsigned __int8 *)__p);
  v208 = v105;
  if (v215 < 0)
    operator delete(__p[0]);
  if (v105 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a3, &v208, (__int128 *)__p);
    if (v215 < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v205) = 0;
  v191 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v192, (uint64_t)&v205, (unsigned __int8 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  v207 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v205) = 0;
  v106 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a3 + 32), (uint64_t)&v205, (unsigned __int8 *)__p);
  v207 = v106;
  if (v215 < 0)
    operator delete(__p[0]);
  if (v106 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a3, &v207, (__int128 *)__p);
    if (v215 < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  v107 = (uint64_t *)(a1 + 32);
  LODWORD(v205) = 0;
  v108 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 32), (uint64_t)&v205, (unsigned __int8 *)__p);
  if (v215 < 0)
    operator delete(__p[0]);
  if (v108 == -1)
    __assert_rtn("GenerateMeshFromFaceList", "IsoChartUtils.cpp", 274, "h_length_father_ah.Valid()");
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v205, 3uLL);
  if (v193)
  {
    v109 = 0;
    while (1)
    {
      LODWORD(v202[0]) = v191;
      v110 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v96, (unsigned int *)v202);
      v112 = v223[v109];
      v113 = *(_QWORD *)(v110 + 40);
      if (v112 >= (*(_QWORD *)(v110 + 48) - v113) >> 2)
        break;
      v114 = *(_DWORD *)(v113 + 4 * v112);
      LODWORD(v202[0]) = v208;
      v115 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v197, (unsigned int *)v202, v111);
      v116 = *(_QWORD *)(v115 + 40);
      if (v109 >= (*(_QWORD *)(v115 + 48) - v116) >> 2)
      {
LABEL_206:
        v178 = 182;
LABEL_208:
        v179 = "Attribute.h";
        v180 = "operator[]";
        v181 = "index < data_.size()";
        goto LABEL_209;
      }
      *(_DWORD *)(v116 + 4 * v109) = v114;
      LODWORD(v202[0]) = v109;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a3, (unsigned int *)v202, __p);
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, &v223[v109], &v205);
      for (i = 0; i != 12; i += 4)
      {
        LODWORD(v202[0]) = v108;
        v118 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v107, (unsigned int *)v202);
        v120 = *(unsigned int *)((char *)v205 + i);
        v121 = *(_QWORD *)(v118 + 40);
        if (v120 >= (*(_QWORD *)(v118 + 48) - v121) >> 2)
          goto LABEL_207;
        v122 = *(_DWORD *)(v121 + 4 * v120);
        LODWORD(v202[0]) = v207;
        v123 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v119);
        v124 = (char *)__p[0];
        v125 = *(unsigned int *)((char *)__p[0] + i);
        v126 = *(_QWORD *)(v123 + 40);
        if (v125 >= (*(_QWORD *)(v123 + 48) - v126) >> 2)
          goto LABEL_206;
        *(_DWORD *)(v126 + 4 * v125) = v122;
        if (v98)
        {
          LODWORD(v202[0]) = v198;
          v127 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v107, (unsigned int *)v202);
          v129 = *(unsigned int *)((char *)v205 + i);
          v130 = *(_QWORD *)(v127 + 40);
          if (v129 >= (*(_QWORD *)(v127 + 48) - v130) >> 2)
            goto LABEL_207;
          v131 = *(_DWORD *)(v130 + 4 * v129);
          LODWORD(v202[0]) = v209;
          v132 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v128);
          v124 = (char *)__p[0];
          v133 = *(unsigned int *)((char *)__p[0] + i);
          v134 = *(_QWORD *)(v132 + 40);
          if (v133 >= (*(_QWORD *)(v132 + 48) - v134) >> 2)
            goto LABEL_206;
          *(_DWORD *)(v134 + 4 * v133) = v131;
        }
        v135 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)&v124[i]) + 12);
        v136 = v227;
        if (*(_DWORD *)&v136[4 * v135] != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v199, (unsigned int *)((char *)v205 + i))+ 12))
        {
          v178 = 291;
          v180 = "GenerateMeshFromFaceList";
          v179 = "IsoChartUtils.cpp";
          v181 = "vhs_new[generated_mesh.HEdgeStart(hhs[j]).Index()] == mesh.HEdgeStart(hhs_father[j])";
          goto LABEL_209;
        }
        LODWORD(v202[0]) = v207;
        v138 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v137);
        v139 = (unsigned int *)((char *)__p[0] + i);
        v140 = *(unsigned int *)((char *)__p[0] + i);
        v141 = *(_QWORD *)(v138 + 40);
        if (v140 >= (*(_QWORD *)(v138 + 48) - v141) >> 2)
          goto LABEL_206;
        v142 = *(float *)(v141 + 4 * v140);
        v143 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
        v144 = cv3d::cv::gess::mesh::Topology::h(a3 + 104, v143);
        v201 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a3, *(_DWORD *)(a3 + 176), *(_DWORD *)(v144 + 12));
        v145 = cv3d::cv::gess::mesh::Topology::h(a3 + 104, v139);
        v146 = vsubq_f32(v201, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a3, *(_DWORD *)(a3 + 176), *(_DWORD *)(v145 + 12)));
        v147 = vmulq_f32(v146, v146);
        v147.i32[3] = 0;
        if (vabds_f32(v142, sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v147, v147)))) >= 0.0001)
        {
          v178 = 293;
          v180 = "GenerateMeshFromFaceList";
          v179 = "IsoChartUtils.cpp";
          v181 = "std::fabs(generated_mesh.attribute(h_length_ah)[hhs[j].Index()] - HEdgeLength(generated_mesh, hhs[j])) < 10e-5";
LABEL_209:
          __assert_rtn(v180, v179, v178, v181);
        }
        v148 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
        v149 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a3, *(_DWORD *)(a3 + 180), *v148);
        if ((*v149 & v151) != 0)
        {
          LODWORD(v202[0]) = v207;
          v152 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v150);
          v154 = *(unsigned int *)((char *)__p[0] + i);
          v155 = *(_QWORD *)(v152 + 40);
          if (v154 >= (*(_QWORD *)(v152 + 48) - v155) >> 2)
            goto LABEL_206;
          v156 = *(_DWORD *)(v155 + 4 * v154);
          LODWORD(v202[0]) = v207;
          v157 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v153);
          v159 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
          v160 = *(_QWORD *)(v157 + 40);
          if (v159 >= (*(_QWORD *)(v157 + 48) - v160) >> 2)
            goto LABEL_206;
          *(_DWORD *)(v160 + 4 * v159) = v156;
          if (v98)
          {
            LODWORD(v202[0]) = v209;
            v161 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v158);
            v163 = *(unsigned int *)((char *)__p[0] + i);
            v164 = *(_QWORD *)(v161 + 40);
            if (v163 >= (*(_QWORD *)(v161 + 48) - v164) >> 2)
              goto LABEL_206;
            v165 = *(_DWORD *)(v164 + 4 * v163);
            LODWORD(v202[0]) = v209;
            v166 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a3 + 32), (unsigned int *)v202, v162);
            v167 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a3 + 104, (unsigned int *)((char *)__p[0] + i));
            v168 = *(_QWORD *)(v166 + 40);
            if (v167 >= (*(_QWORD *)(v166 + 48) - v168) >> 2)
              goto LABEL_206;
            *(_DWORD *)(v168 + 4 * v167) = v165;
          }
        }
      }
      ++v109;
      v96 = (uint64_t *)(a1 + 56);
      if (v109 == v193)
        goto LABEL_179;
    }
LABEL_207:
    v178 = 187;
    goto LABEL_208;
  }
LABEL_179:
  v204 = -1;
  std::string::basic_string[abi:ne180100]<0>(v202, "v:importance");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(a3, &v204, (__int128 *)v202);
  if (v203 < 0)
    operator delete(v202[0]);
  std::string::basic_string[abi:ne180100]<0>(v202, "v:importance");
  v230[0] = 0;
  v170 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(v190, (uint64_t)v230, (unsigned __int8 *)v202);
  if (v203 < 0)
    operator delete(v202[0]);
  if (v170 != -1 && v189)
  {
    v171 = 0;
    while (1)
    {
      LODWORD(v202[0]) = v170;
      v172 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v190, (unsigned int *)v202, v169);
      v173 = *(unsigned int *)&v227[4 * v171];
      v174 = *(_QWORD *)(v172 + 40);
      if (v173 >= (*(_QWORD *)(v172 + 48) - v174) >> 2)
        break;
      v175 = *(_DWORD *)(v174 + 4 * v173);
      LODWORD(v202[0]) = v204;
      v176 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(v195, (unsigned int *)v202);
      v177 = *(_QWORD *)(v176 + 40);
      if (v171 >= (*(_QWORD *)(v176 + 48) - v177) >> 2)
      {
        v186 = 182;
LABEL_226:
        __assert_rtn("operator[]", "Attribute.h", v186, "index < data_.size()");
      }
      *(_DWORD *)(v177 + 4 * v171++) = v175;
      if (v188 == v171)
        goto LABEL_189;
    }
    v186 = 187;
    goto LABEL_226;
  }
LABEL_189:
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v217)
  {
    v218 = (unsigned int *)v217;
    operator delete(v217);
  }
  if (v219.__begin_)
  {
    v219.__end_ = v219.__begin_;
    operator delete(v219.__begin_);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v223)
  {
    v224 = (char *)v223;
    operator delete(v223);
  }
  if (v226[0])
  {
    v226[1] = v226[0];
    operator delete(v226[0]);
  }
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
}

void sub_23C5A2EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  if (a43 < 0)
    operator delete(__p);
  if (a45)
    operator delete(a45);
  v48 = *(void **)(v46 - 232);
  if (v48)
  {
    *(_QWORD *)(v46 - 224) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(v46 - 208);
  if (v49)
  {
    *(_QWORD *)(v46 - 200) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v46 - 184);
  if (v50)
  {
    *(_QWORD *)(v46 - 176) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v46 - 160);
  if (v51)
  {
    *(_QWORD *)(v46 - 152) = v51;
    operator delete(v51);
  }
  v52 = *(void **)(v46 - 136);
  if (v52)
  {
    *(_QWORD *)(v46 - 128) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  int v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<float>((char **)(a1 + 32), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v4);
}

{
  uint64_t v4;
  int v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<float>((char **)(a1 + 56), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

uint64_t cv3d::cv::gess::isochart::FindAllBoundaries(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  char **v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v34;
  uint64_t *v35;
  void *__p;
  void *v37;
  uint64_t v38;
  void *v39;

  v3 = a1 + 104;
  if (a3[1] - *a3 != *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104))
    cv3d::cv::gess::isochart::FindAllBoundaries();
  v7 = -858993459 * ((*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  LOBYTE(__p) = 0;
  std::vector<BOOL>::vector(&v39, v7, (unsigned __int8 *)&__p);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    v34 = v7;
    v35 = a2;
    do
    {
      if (((*(_QWORD *)((char *)v39 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0
        || (v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v8),
            (*v11 & v12) == 0))
      {
        v10 = v9;
      }
      else
      {
        __p = 0;
        v37 = 0;
        v38 = 0;
        std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::push_back[abi:ne180100](a2, (uint64_t)&__p);
        if (__p)
        {
          v37 = __p;
          operator delete(__p);
        }
        LODWORD(__p) = v8;
        v13 = a2[1];
        v14 = (char **)(v13 - 24);
        LODWORD(v15) = v8;
        v16 = (char **)(v13 - 16);
        v17 = (_QWORD *)(v13 - 8);
        do
        {
          v18 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v15);
          if ((*v18 & v19) == 0)
            __assert_rtn("FindAllBoundaries", "IsoChartUtils.cpp", 335, "mesh.is_boundary(cur)");
          v20 = (int)__p;
          *(_QWORD *)((char *)v39 + (((unint64_t)__p >> 3) & 0x1FFFFFF8)) |= 1 << (char)__p;
          v21 = *v16;
          if ((unint64_t)*v16 >= *v17)
          {
            v23 = (v21 - *v14) >> 2;
            if ((unint64_t)(v23 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v24 = *v17 - (_QWORD)*v14;
            v25 = v24 >> 1;
            if (v24 >> 1 <= (unint64_t)(v23 + 1))
              v25 = v23 + 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v26 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v17, v26);
              v20 = (int)__p;
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[4 * v23];
            *(_DWORD *)v28 = v20;
            v22 = v28 + 4;
            v29 = *v16;
            v30 = *v14;
            if (*v16 != *v14)
            {
              do
              {
                v31 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v28 - 1) = v31;
                v28 -= 4;
              }
              while (v29 != v30);
              v29 = *v14;
            }
            *v14 = v28;
            *v16 = v22;
            *v17 = &v27[4 * v26];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *(_DWORD *)v21 = v20;
            v22 = v21 + 4;
          }
          *v16 = v22;
          *(_DWORD *)(*a3 + 4 * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)&__p) + 12)) = v9;
          v15 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)&__p) + 8);
          LODWORD(__p) = v15;
        }
        while ((_DWORD)v15 != -1 && v8 != v15);
        v7 = v34;
        a2 = v35;
        v10 = (v9 + 1);
      }
      ++v8;
      v9 = v10;
    }
    while (v8 != v7);
  }
  else
  {
    v10 = 0;
  }
  if (v39)
    operator delete(v39);
  return v10;
}

void sub_23C5A3400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::NormalizeUVCoords(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *__p[2];
  char v48;
  uint64_t v49;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v3 = (uint64_t **)((char *)this + 80);
  v49 = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v3, (uint64_t)&v49, (unsigned __int8 *)__p);
  if (v48 < 0)
    operator delete(__p[0]);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v49 = 0;
    v5 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((char **)v3, (uint64_t)&v49, (__int128 *)__p);
    if (v48 < 0)
      operator delete(__p[0]);
  }
  LODWORD(__p[0]) = v5;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v4);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
  {
    v8 = 0;
    v9 = 0;
    v10 = -3.4028e38;
    v11 = 3.4028e38;
    v12 = 3.4028e38;
    v13 = -3.4028e38;
    do
    {
      LODWORD(__p[0]) = v5;
      v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v7);
      v17 = *(_QWORD *)(v14 + 40);
      if (v9 >= (*(_QWORD *)(v14 + 48) - v17) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v14, v15, v16);
      v18 = (float *)(v17 + v8);
      v19 = v18[1];
      if (*v18 < v11)
        v11 = *v18;
      if (v19 < v12)
        v12 = v18[1];
      if (v10 < *v18)
        v10 = *v18;
      if (v13 < v19)
        v13 = v18[1];
      ++v9;
      LODWORD(__p[0]) = v5;
      v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v16);
      v8 += 8;
    }
    while (v9 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20));
  }
  else
  {
    v12 = 3.4028e38;
    v13 = -3.4028e38;
    v10 = -3.4028e38;
    v11 = 3.4028e38;
  }
  LODWORD(__p[0]) = v5;
  v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  if (result)
  {
    v24 = 0;
    v25 = 0;
    v26 = v10 - v11;
    v27 = v13 - v12;
    do
    {
      LODWORD(__p[0]) = v5;
      v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v23);
      v31 = *(_QWORD *)(v28 + 40);
      if (v25 >= (*(_QWORD *)(v28 + 48) - v31) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v28, v29, v30);
      v32 = *(float *)(v31 + v24);
      LODWORD(__p[0]) = v5;
      v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v30);
      v36 = *(_QWORD *)(v33 + 40);
      if (v25 >= (*(_QWORD *)(v33 + 48) - v36) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, v34, v35);
      *(float *)(v36 + v24) = (float)(v32 - v11) / v26;
      LODWORD(__p[0]) = v5;
      v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v35);
      v40 = *(_QWORD *)(v37 + 40);
      if (v25 >= (*(_QWORD *)(v37 + 48) - v40) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v37, v38, v39);
      v41 = *(float *)(v40 + v24 + 4);
      LODWORD(__p[0]) = v5;
      v42 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v39);
      v45 = *(_QWORD *)(v42 + 40);
      if (v25 >= (*(_QWORD *)(v42 + 48) - v45) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v42, v43, v44);
      *(float *)(v45 + v24 + 4) = (float)(v41 - v12) / v27;
      ++v25;
      LODWORD(__p[0]) = v5;
      v46 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v44);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 16))(v46);
      v24 += 8;
    }
    while (v25 < result);
  }
  return result;
}

void sub_23C5A36E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::RescaleCharts(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float *v25;
  float *v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  unint64_t result;
  uint64_t v41;
  unint64_t i;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  uint64_t v52;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v3 = (uint64_t *)(this + 10);
  v51 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v51, (unsigned __int8 *)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v52) = 0;
  v51 = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v51, (unsigned __int8 *)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  v51 = 0;
  v52 = 0;
  v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 7, (uint64_t)&v51, (unsigned __int8 *)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v4;
  v9 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p, v6);
  if (this[20] == this[19])
  {
    v14 = 0.0;
    v13 = 0.0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      LODWORD(__p[0]) = v5;
      v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p, v8);
      v18 = *(_QWORD *)(v15 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v15 + 48) - v18) >> 2) <= v12)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, v16, v17);
      v19 = *(unsigned int *)(v18 + v11);
      v20 = v9[5];
      v21 = (v9[6] - v20) >> 3;
      if (v21 <= v19)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v15, v16, v17);
      v22 = v18 + v11;
      v23 = *(unsigned int *)(v18 + v11 + 4);
      if (v21 <= v23)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v15, v16, v17);
      v24 = *(unsigned int *)(v22 + 8);
      if (v21 <= v24)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v15, v16, v17);
      v47 = v14;
      v25 = (float *)(v20 + 8 * v19);
      v26 = (float *)(v20 + 8 * v23);
      v27 = (float *)(v20 + 8 * v24);
      v29 = *v26;
      v28 = v26[1];
      v31 = *v25;
      v30 = v25[1];
      v33 = *v27;
      v32 = v27[1];
      LODWORD(__p[0]) = v12;
      v34 = cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)this, (unsigned int *)__p);
      LODWORD(__p[0]) = v7;
      v35 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 7, (unsigned int *)__p);
      v38 = *(_QWORD *)(v35 + 40);
      if (v12 >= (*(_QWORD *)(v35 + 48) - v38) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v35, v36, v37);
      v13 = v13
          + fabsf((float)((float)((float)(v29 - v31) * (float)(v32 - v30)) - (float)((float)(v28 - v30) * (float)(v33 - v31)))* 0.5);
      v14 = v47 + (float)(v34 * powf(*(float *)(v38 + v10), 0.25));
      ++v12;
      v11 += 12;
      v10 += 16;
    }
    while (v12 < ((char *)this[20] - (char *)this[19]) >> 2);
  }
  v39 = v14 / v13;
  if (v13 <= 0.00000001)
    v39 = 1.0;
  v48 = v39;
  result = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      LODWORD(__p[0]) = v4;
      v43 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v3, (unsigned int *)__p, v41);
      v46 = *(_QWORD *)(v43 + 40);
      if (i >= (*(_QWORD *)(v43 + 48) - v46) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v43, v44, v45);
      *(float32x2_t *)(v46 + 8 * i) = vmul_n_f32(*(float32x2_t *)(v46 + 8 * i), v48);
      result = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  return result;
}

void sub_23C5A3A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::AssignUvidByVid(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  int v14;
  uint64_t v15;
  int v16;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v16 = 0;
  v15 = 0;
  v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v15, (unsigned __int8 *)__p);
  v14 = v3;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v3 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t)this, &v14, (__int128 *)__p);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (this[20] != this[19])
  {
    v4 = 0;
    v5 = 0;
    do
    {
      LODWORD(v15) = v5;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)this, (unsigned int *)&v15, __p);
      v6 = *(_QWORD *)__p[0];
      v7 = *((_DWORD *)__p[0] + 2);
      LODWORD(v15) = v14;
      v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)&v15, v8);
      v10 = *(_QWORD *)(v9 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 48) - v10) >> 2) <= v5)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v11 = v10 + v4;
      *(_QWORD *)v11 = v6;
      *(_DWORD *)(v11 + 8) = v7;
      ++v5;
      v4 += 12;
    }
    while (v5 < ((char *)this[20] - (char *)this[19]) >> 2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23C5A3BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::ResetUV(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  uint64_t v22;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v3 = (uint64_t **)((char *)this + 80);
  v22 = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v3, (uint64_t)&v22, (unsigned __int8 *)__p);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v5 == -1)
    cv3d::cv::gess::isochart::ResetUV();
  LODWORD(__p[0]) = v5;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (result)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      LODWORD(__p[0]) = v5;
      v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v8);
      v14 = *(_QWORD *)(v11 + 40);
      if (v10 >= (*(_QWORD *)(v11 + 48) - v14) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v11, v12, v13);
      *(_DWORD *)(v14 + v9) = 0;
      LODWORD(__p[0]) = v5;
      v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v13);
      v18 = *(_QWORD *)(v15 + 40);
      if (v10 >= (*(_QWORD *)(v15 + 48) - v18) >> 3)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, v16, v17);
      *(_DWORD *)(v18 + v9 + 4) = 0;
      ++v10;
      LODWORD(__p[0]) = v5;
      v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v3, (unsigned int *)__p, v17);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      v9 += 8;
    }
    while (v10 < result);
  }
  return result;
}

void sub_23C5A3D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsochartCountBoundaryLoops(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v17;
  void *__p;

  std::vector<BOOL>::vector(&__p, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2));
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 128))
    goto LABEL_18;
  v2 = 0;
  v3 = 1;
  do
  {
    v4 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v2);
    if ((*v4 & v5) != 0)
      *(_QWORD *)((char *)__p + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v2);
    v7 = *(_QWORD *)(a1 + 128);
    v6 = *(_QWORD *)(a1 + 136);
    v2 = v3;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) > v3++);
  if (v6 == v7)
  {
LABEL_18:
    v11 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v9);
      if ((*v12 & v13) != 0 && ((*(_QWORD *)((char *)__p + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      {
        v11 = (v11 + 1);
        v17 = v10;
        v14 = v10;
        do
        {
          *(_QWORD *)((char *)__p + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) |= 1 << v14;
          v14 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v17) + 8);
          v17 = v14;
        }
        while (v14 != -1 && v14 != v10);
      }
      v9 = ++v10;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) > v10);
  }
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_23C5A3ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsochartCountGenus(_QWORD *a1, int a2, int a3)
{
  int v3;

  v3 = ((a1[14] - a1[13]) >> 2) + a3 - (int)(-858993459 * ((a1[17] - a1[16]) >> 2)) / 2 + ((a1[20] - a1[19]) >> 2);
  return (a2 - v3 / 2) & ~((a2 - v3 / 2) >> 31);
}

uint64_t cv3d::cv::gess::isochart::CalculateMaxAvgStretch(uint64_t a1, float *a2, float *a3, _QWORD *a4)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;

  *a4 = 0;
  *a2 = -3.4028e38;
  *a3 = 0.0;
  v4 = *(float **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
    return 0;
  v7 = 0;
  v8 = v6 >> 2;
  if (v8 <= 1)
    v8 = 1;
  v9 = 0.0;
  do
  {
    v10 = *v4;
    if (*v4 < 3.4028e38)
    {
      if (*a2 < v10)
      {
        *a2 = v10;
        v10 = *v4;
        v9 = *a3;
      }
      v9 = v10 + v9;
      *a3 = v9;
      *a4 = ++v7;
    }
    ++v4;
    --v8;
  }
  while (v8);
  if (!v7)
    return 0;
  *a3 = v9 / (float)v7;
  return 1;
}

float cv3d::cv::gess::isochart::CalculateTriMeshSurfaceArea(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  int v18;
  int v19;

  v4 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  v19 = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)this + 7, (uint64_t)&v19, (unsigned __int8 *)__p);
  v18 = v5;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)this, &v18, (__int128 *)__p);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  if (v3 == v4)
    return 0.0;
  v6 = 0;
  if ((unint64_t)((v3 - v4) >> 2) <= 1)
    v7 = 1;
  else
    v7 = (v3 - v4) >> 2;
  v8 = 0.0;
  do
  {
    LODWORD(__p[0]) = v6;
    v9 = cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)this, (unsigned int *)__p);
    LODWORD(__p[0]) = v18;
    v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)this + 7, (unsigned int *)__p, v10);
    v14 = *(_QWORD *)(v11 + 40);
    if (v6 >= (*(_QWORD *)(v11 + 48) - v14) >> 2)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v11, v12, v13);
    *(float *)(v14 + 4 * v6) = v9;
    v8 = v8 + v9;
    ++v6;
  }
  while (v7 != v6);
  return v8;
}

void sub_23C5A4110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CalculateHEdgeLength(cv3d::cv::gess::isochart *this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  void *__p[2];
  char v25;
  int v26;
  void *v27;
  int v28;

  v4 = *((_QWORD *)this + 16);
  v3 = *((_QWORD *)this + 17);
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - v4) >> 2);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v27, v5, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  v28 = 0;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)this + 4, (uint64_t)&v28, (unsigned __int8 *)__p);
  v26 = v6;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v6 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)this, &v26, (__int128 *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v7 = v27;
  if (v3 == v4)
  {
    if (!v27)
      return;
  }
  else
  {
    v8 = 0;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      if ((v7[v8 >> 6] & (1 << v8)) == 0)
      {
        LODWORD(__p[0]) = v8;
        v9 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v8;
        v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
        v11 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, v10);
        v23 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v11 + 12));
        v12 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, (unsigned int *)__p);
        v22 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, *((_DWORD *)this + 44), *(_DWORD *)(v12 + 12));
        LODWORD(__p[0]) = v26;
        v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)this + 4, (unsigned int *)__p, v13);
        v16 = *(_QWORD *)(v14 + 40);
        if (v8 >= (*(_QWORD *)(v14 + 48) - v16) >> 2)
          goto LABEL_18;
        v17 = vsubq_f32(v23, v22);
        v18 = vmulq_f32(v17, v17);
        v18.i32[3] = 0;
        v19 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18)));
        *(float *)(v16 + 4 * v8) = v19;
        LODWORD(__p[0]) = v26;
        v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)this + 4, (unsigned int *)__p, v15);
        v21 = *(_QWORD *)(v20 + 40);
        if (v9 >= (*(_QWORD *)(v20 + 48) - v21) >> 2)
LABEL_18:
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(float *)(v21 + 4 * v9) = v19;
        v7 = v27;
        *((_QWORD *)v27 + (v8 >> 6)) |= 1 << v8;
        *(_QWORD *)((char *)v7 + ((v9 >> 3) & 0x1FFFFFF8)) |= 1 << v9;
      }
      ++v8;
    }
    while (v5 != v8);
  }
  operator delete(v7);
}

void sub_23C5A4390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20)
{
  if (a18 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::CalculateHEdgeSignalLength(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  int v21;
  void *v22;
  unsigned int v23;
  int v24;

  v23 = a3;
  v6 = *(_QWORD *)(a1 + 128);
  v5 = *(_QWORD *)(a1 + 136);
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 2);
  LOBYTE(__p[0]) = 0;
  std::vector<BOOL>::vector(&v22, v7, (unsigned __int8 *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  v24 = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(a1 + 32), (uint64_t)&v24, (unsigned __int8 *)__p);
  v21 = v8;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v8 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(a1, &v21, (__int128 *)__p);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v9 = v22;
  if (v5 == v6)
  {
    if (!v22)
      return;
  }
  else
  {
    v10 = 0;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      if ((v9[v10 >> 6] & (1 << v10)) == 0)
      {
        LODWORD(__p[0]) = v10;
        v11 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p);
        LODWORD(__p[0]) = v10;
        v12 = cv3d::cv::gess::isochart::HEdgeSignalLength(a1, (unsigned int *)__p, a2, &v23);
        LODWORD(__p[0]) = v21;
        v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 32), (unsigned int *)__p, v13);
        v16 = *(_QWORD *)(v14 + 40);
        if (v10 >= (*(_QWORD *)(v14 + 48) - v16) >> 2
          || (*(float *)(v16 + 4 * v10) = v12,
              LODWORD(__p[0]) = v21,
              v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(a1 + 32), (unsigned int *)__p, v15), v18 = *(_QWORD *)(v17 + 40), v11 >= (*(_QWORD *)(v17 + 48) - v18) >> 2))
        {
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        }
        *(float *)(v18 + 4 * v11) = v12;
        v9 = v22;
        *((_QWORD *)v22 + (v10 >> 6)) |= 1 << v10;
        *(_QWORD *)((char *)v9 + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
      }
      ++v10;
    }
    while (v7 != v10);
  }
  operator delete(v9);
}

void sub_23C5A45E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

float cv3d::cv::gess::isochart::CalculateInfiniteStretchArea(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  float v9;
  unsigned int v11;

  v3 = *(_QWORD *)(a1 + 152);
  v2 = *(_QWORD *)(a1 + 160);
  v4 = (v2 - v3) >> 2;
  if (v4 != (uint64_t)(a2[1] - *a2) >> 2)
    cv3d::cv::gess::isochart::CalculateInfiniteStretchArea();
  if (v2 == v3)
    return 0.0;
  v7 = 0;
  if (v4 <= 1)
    v8 = 1;
  else
    v8 = (v2 - v3) >> 2;
  v9 = 0.0;
  do
  {
    if (*(float *)(*a2 + 4 * v7) >= 3.4028e38)
    {
      v11 = v7;
      v9 = v9 + cv3d::cv::gess::mesh::TriMesh::Area(a1, &v11);
    }
    ++v7;
  }
  while (v8 != v7);
  return v9;
}

float cv3d::cv::gess::isochart::CalculateInfiniteStretch2DAreaRatio(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  void *__p[3];
  unsigned int v29;

  v4 = a1[19];
  v3 = a1[20];
  v5 = (v3 - v4) >> 2;
  if (v5 != (uint64_t)(a3[1] - *a3) >> 2)
    cv3d::cv::gess::isochart::CalculateInfiniteStretch2DAreaRatio();
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (v3 == v4)
    goto LABEL_18;
  v9 = 0;
  if (v5 <= 1)
    v5 = 1;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    v29 = v9;
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)a1, &v29, __p);
    v29 = a2;
    v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, &v29, v12);
    v15 = *(unsigned int *)__p[0];
    v16 = *(_QWORD *)(v13 + 40);
    if (v15 >= (*(_QWORD *)(v13 + 48) - v16) >> 3)
      goto LABEL_16;
    v29 = a2;
    v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, &v29, v14);
    v19 = *((unsigned int *)__p[0] + 1);
    v20 = *(_QWORD *)(v17 + 40);
    if (v19 >= (*(_QWORD *)(v17 + 48) - v20) >> 3
      || (v29 = a2,
          v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(a1 + 10, &v29, v18), v22 = *((unsigned int *)__p[0] + 2), v24 = v21 + 40, v23 = *(_QWORD *)(v21 + 40), v22 >= (*(_QWORD *)(v24 + 8) - v23) >> 3))
    {
LABEL_16:
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    v25 = (float *)(v16 + 8 * v15);
    v26 = fabsf((float)((float)((float)(*(float *)(v20 + 8 * v19) - *v25) * (float)(*(float *)(v23 + 8 * v22 + 4) - v25[1]))- (float)((float)(*(float *)(v20 + 8 * v19 + 4) - v25[1]) * (float)(*(float *)(v23 + 8 * v22) - *v25)))* 0.5);
    v10 = v10 + v26;
    if (*(float *)(*a3 + 4 * v9) < 3.4028e38)
      v26 = -0.0;
    v11 = v11 + v26;
    ++v9;
  }
  while (v5 != v9);
  if (v10 <= 0.0)
LABEL_18:
    __assert_rtn("CalculateInfiniteStretch2DAreaRatio", "IsoChartUtils.cpp", 563, "total_area > 0.0f");
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v11 / v10;
}

void sub_23C5A48F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::IsVertexManifold(cv3d::cv::gess::isochart *this, const cv3d::cv::gess::mesh::TriMesh *a2)
{
  char *v2;
  char *v3;
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v6 = 0;
  v7 = 0;
  cv3d::cv::gess::alg::FindNonManifoldVertices((uint64_t)this, &v11, (unsigned int **)&v8, (unsigned int **)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  v2 = v11;
  v3 = v12;
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return v2 == v3;
}

void sub_23C5A499C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  cv3d::cv::gess::isochart::IsVertexManifold((uint64_t)&__p, (uint64_t)&a13, v13 - 40);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::CalculateFaceL2Stretch(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8;
  float v9;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  __int128 v26;
  __int128 v27;
  void *__p[3];

  if (fabsf(*a7) >= 1.0e-16)
  {
    v8 = *a8;
    if (*a8 >= 0.0)
    {
      v9 = fabsf(v8);
      if (v9 >= 0.00000001 || v8 >= (float)(*a7 * 0.5))
      {
        v26 = 0u;
        v27 = 0u;
        if (v9 > 1.0e-16)
        {
          std::vector<float>::vector(__p, 3uLL);
          v17 = 0;
          v18 = (float *)__p[0];
          v19 = v8 + v8;
          do
          {
            v20 = *(float *)(a1 + v17);
            *v18 = v20;
            v21 = *(float *)(a2 + v17);
            v18[1] = v21;
            v22 = *(float *)(a3 + v17);
            v18[2] = v22;
            v23 = *a6;
            v24 = *a5;
            v25 = *a4;
            *(float *)((char *)&__p[-1] + v17) = (float)((float)((float)(v21 * (float)(a6[1] - a4[1]))
                                                               + (float)(v20 * (float)(a5[1] - a6[1])))
                                                       + (float)(v22 * (float)(a4[1] - a5[1])))
                                               / v19;
            *(float *)((char *)&v26 + v17) = (float)((float)((float)(v21 * (float)(v25 - v23))
                                                           + (float)(v20 * (float)(v23 - v24)))
                                                   + (float)(v22 * (float)(v24 - v25)))
                                           / v19;
            v17 += 4;
          }
          while (v17 != 12);
          __p[1] = v18;
          operator delete(v18);
        }
      }
    }
  }
}

void cv3d::cv::gess::isochart::CalculateFaceLnStretch(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8;
  float v9;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  float v32;
  float32x4_t v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  void *__p[3];

  v8 = *a7;
  if (*a7 > 0.0)
  {
    v9 = *a8;
    if (*a8 >= 0.0 && (v9 >= 1.0e-16 || v8 * 0.5 <= v9))
    {
      v17 = fabsf(v9);
      if (fabsf(v8) >= 1.0e-16 || v17 >= 1.0e-16)
      {
        v18 = 0uLL;
        v35 = 0u;
        v36 = 0u;
        v19 = 0uLL;
        if (v17 > 1.0e-16)
        {
          std::vector<float>::vector(__p, 3uLL);
          v20 = 0;
          v21 = (float *)__p[0];
          v22 = v9 + v9;
          do
          {
            v23 = *(float *)(a1 + v20 * 4);
            *v21 = v23;
            v24 = *(float *)(a2 + v20 * 4);
            v21[1] = v24;
            v25 = *(float *)(a3 + v20 * 4);
            v21[2] = v25;
            v26 = *a6;
            v27 = *a5;
            v28 = *a4;
            v36.f32[v20] = (float)((float)((float)(v24 * (float)(a6[1] - a4[1])) + (float)(v23 * (float)(a5[1] - a6[1])))
                                 + (float)(v25 * (float)(a4[1] - a5[1])))
                         / v22;
            v35.f32[v20++] = (float)((float)((float)(v24 * (float)(v28 - v26)) + (float)(v23 * (float)(v26 - v27)))
                                   + (float)(v25 * (float)(v27 - v28)))
                           / v22;
          }
          while (v20 != 3);
          __p[1] = v21;
          operator delete(v21);
          v18 = v35;
          v19 = v36;
        }
        v29 = vmulq_f32(v19, v19);
        v29.i32[3] = 0;
        v30 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
        v31 = vmulq_f32(v18, v18);
        v31.i32[3] = 0;
        v32 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
        v33 = vmulq_f32(v19, v18);
        v33.i32[3] = 0;
        v33.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33));
        v34 = (float)(v33.f32[0] * (float)(v33.f32[0] * 4.0)) + (float)((float)(v30 - v32) * (float)(v30 - v32));
        if (v34 < 0.0)
          cv3d::cv::gess::isochart::CalculateFaceLnStretch();
        if ((float)((float)((float)(v30 + v32) + sqrtf(v34)) * 0.5) < 0.0)
          cv3d::cv::gess::isochart::CalculateFaceLnStretch();
      }
    }
  }
}

float cv3d::cv::gess::isochart::CalculateFaceSigL2Stretch(float *a1, float *a2, float *a3, float *a4, float *a5, uint64_t a6, float *a7)
{
  float result;
  float v8;
  float v10[4];
  uint64_t __b;
  uint64_t v12;

  result = 0.0;
  if (fabsf(*a4) >= 1.0e-16)
  {
    v8 = *a5;
    if (*a5 >= 0.0 && fabsf(v8) >= 1.0e-16)
    {
      __b = 0;
      v12 = 0;
      cv3d::cv::gess::isochart::AffineIMTOn2D(a1, a2, a3, (float *)&__b, a6, a6 + 8, a6 + 16, a7, v8, v10);
      return (float)(*(float *)&__b + *(float *)&v12) * 0.5 * *a4;
    }
    else
    {
      return 3.4028e38;
    }
  }
  return result;
}

float cv3d::cv::gess::isochart::AffineIMTOn2D(float *a1, float *a2, float *a3, float *__b, uint64_t a5, uint64_t a6, uint64_t a7, float *a8, float a9, float *a10)
{
  float v12;
  float result;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;
  uint64_t v26;
  float *v27;
  float v28;
  char v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[3];

  v12 = fabsf(a9);
  if (v12 >= 1.0e-16)
  {
    v15 = 0.0;
    v37 = 0;
    v38 = 0;
    v16 = v12 > 1.0e-16;
    v17 = 0.0;
    v18 = 0.0;
    v19 = 0.0;
    if (v16)
    {
      std::vector<float>::vector(__p, 3uLL);
      v26 = 0;
      v27 = (float *)__p[0];
      v28 = a9 + a9;
      v29 = 1;
      do
      {
        v30 = *(float *)(a5 + 4 * v26);
        *v27 = v30;
        v31 = *(float *)(a6 + 4 * v26);
        v27[1] = v31;
        v32 = *(float *)(a7 + 4 * v26);
        v27[2] = v32;
        v33 = *a3;
        v34 = *a2;
        v35 = *a1;
        *((float *)&__p[-1] + v26) = (float)((float)((float)(v31 * (float)(a3[1] - a1[1]))
                                                   + (float)(v30 * (float)(a2[1] - a3[1])))
                                           + (float)(v32 * (float)(a1[1] - a2[1])))
                                   / v28;
        v36 = v29;
        *((float *)&v37 + v26) = (float)((float)((float)(v31 * (float)(v35 - v33)) + (float)(v30 * (float)(v33 - v34)))
                                       + (float)(v32 * (float)(v34 - v35)))
                               / v28;
        v26 = 1;
        v29 = 0;
      }
      while ((v36 & 1) != 0);
      __p[1] = v27;
      operator delete(v27);
      v18 = *((float *)&v38 + 1);
      v19 = *(float *)&v38;
      v15 = *((float *)&v37 + 1);
      v17 = *(float *)&v37;
    }
    *a10 = (float)(v18 * v18) + (float)(v19 * v19);
    a10[1] = (float)(v18 * v15) + (float)(v19 * v17);
    a10[2] = (float)(v15 * v15) + (float)(v17 * v17);
    *__b = (float)((float)((float)(v18 * v18) * a8[2]) + (float)((float)(v19 * v19) * *a8))
         + (float)((float)((float)(v19 + v19) * v18) * a8[1]);
    __b[2] = (float)((float)((float)(v15 * v15) * a8[2]) + (float)((float)(v17 * v17) * *a8))
           + (float)((float)((float)(v17 + v17) * v15) * a8[1]);
    result = (float)((float)((float)(v18 * v15) * a8[2]) + (float)((float)(v19 * v17) * *a8))
           + (float)((float)((float)(v18 * v17) + (float)(v19 * v15)) * a8[1]);
    __b[1] = result;
  }
  else
  {
    memset_pattern16(__b, &unk_23C60C3A0, 0xCuLL);
  }
  return result;
}

BOOL cv3d::cv::gess::isochart::MeasureTriMeshStretch(uint64_t a1, float *a2, float *a3, uint64_t a4, _QWORD *a5)
{
  unsigned int v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  unint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  int v58;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  float v64;
  float v65;
  void *__p[2];
  char v67;
  unsigned int v68[3];

  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  *(_QWORD *)&v63 = 0;
  v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v63, (unsigned __int8 *)__p);
  if (v67 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  DWORD2(v63) = 0;
  *(_QWORD *)&v63 = 0;
  v58 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v63, (unsigned __int8 *)__p);
  if (v67 < 0)
    operator delete(__p[0]);
  v8 = 0;
  if (v7 != -1 && v58 != -1)
  {
    *a3 = 0.0;
    *a2 = 0.0;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    v9 = (uint64_t)(a5[1] - *a5) >> 2;
    if (v9 != (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2)
      __assert_rtn("MeasureTriMeshStretch", "IsoChartUtils.cpp", 666, "f_stretchs.size() == mesh.FSize()");
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    std::vector<std::pair<cv3d::cv::gess::mesh::VertexHandle,unsigned int>>::reserve((void **)a4, v9);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
      v10 = 0;
      do
      {
        LODWORD(v63) = v10;
        v11 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)&v63);
        v65 = v11;
        LODWORD(v63) = v10;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v63, __p);
        LODWORD(v63) = v58;
        v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), (unsigned int *)&v63, v12);
        v15 = *(_QWORD *)(v13 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v13 + 48) - v15) >> 2) <= v10)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        LODWORD(v63) = v7;
        v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v63, v14);
        v18 = (unsigned int *)(v15 + 12 * v10);
        v19 = *v18;
        v20 = *(_QWORD *)(v16 + 40);
        if (v19 >= (*(_QWORD *)(v16 + 48) - v20) >> 3)
          goto LABEL_44;
        LODWORD(v63) = v7;
        v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v63, v17);
        v23 = v18[1];
        v24 = *(_QWORD *)(v21 + 40);
        if (v23 >= (*(_QWORD *)(v21 + 48) - v24) >> 3
          || (LODWORD(v63) = v7,
              v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v63, v22), v26 = v18[2], v27 = *(_QWORD *)(v25 + 40), v26 >= (*(_QWORD *)(v25 + 48) - v27) >> 3))
        {
LABEL_44:
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        v28 = (float *)(v20 + 8 * v19);
        v64 = fabsf((float)((float)((float)(*(float *)(v24 + 8 * v23) - *v28)* (float)(*(float *)(v27 + 8 * v26 + 4) - v28[1]))- (float)((float)(*(float *)(v24 + 8 * v23 + 4) - v28[1])* (float)(*(float *)(v27 + 8 * v26) - *v28)))* 0.5);
        v63 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
        v62 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 1));
        v61 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
        v68[0] = v7;
        v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v68, v29);
        v32 = *v18;
        v33 = *(_QWORD *)(v30 + 40);
        if (v32 >= (*(_QWORD *)(v30 + 48) - v33) >> 3)
          goto LABEL_45;
        v68[0] = v7;
        v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v68, v31);
        v36 = v18[1];
        v37 = *(_QWORD *)(v34 + 40);
        if (v36 >= (*(_QWORD *)(v34 + 48) - v37) >> 3
          || (v68[0] = v7,
              v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v68, v35), v39 = v18[2], v40 = *(_QWORD *)(v38 + 40), v39 >= (*(_QWORD *)(v38 + 48) - v40) >> 3))
        {
LABEL_45:
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        }
        cv3d::cv::gess::isochart::CalculateFaceL2Stretch((uint64_t)&v63, (uint64_t)&v62, (uint64_t)&v61, (float *)(v33 + 8 * v32), (float *)(v37 + 8 * v36), (float *)(v40 + 8 * v39), &v65, &v64);
        v42 = v41;
        if (v41 >= 3.4028e38)
        {
          *a3 = v11 + *a3;
        }
        else
        {
          v44 = *(float **)(a4 + 8);
          v43 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v44 >= v43)
          {
            v46 = *(float **)a4;
            v47 = ((uint64_t)v44 - *(_QWORD *)a4) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v49 = v43 - (_QWORD)v46;
            if (v49 >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4 + 16, v50);
              v46 = *(float **)a4;
              v44 = *(float **)(a4 + 8);
            }
            else
            {
              v51 = 0;
            }
            v52 = (float *)&v51[8 * v47];
            *v52 = v42;
            v52[1] = v11;
            v53 = v52;
            if (v44 != v46)
            {
              do
              {
                v54 = *((_QWORD *)v44 - 1);
                v44 -= 2;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 2;
              }
              while (v44 != v46);
              v46 = *(float **)a4;
            }
            v45 = v52 + 2;
            *(_QWORD *)a4 = v53;
            *(_QWORD *)(a4 + 8) = v52 + 2;
            *(_QWORD *)(a4 + 16) = &v51[8 * v50];
            if (v46)
            {
              operator delete(v46);
              v11 = v65;
            }
          }
          else
          {
            *v44 = v41;
            v44[1] = v11;
            v45 = v44 + 2;
          }
          *(_QWORD *)(a4 + 8) = v45;
        }
        *a2 = v11 + *a2;
        *(float *)(*a5 + 4 * v10++) = v42;
      }
      while (v10 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
    }
    v55 = *(_QWORD *)(a4 + 8);
    v8 = v55 != *(_QWORD *)a4;
    if (v55 != *(_QWORD *)a4)
      std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*,false>(*(_QWORD *)a4, v55, 126 - 2 * __clz((uint64_t)(v55 - *(_QWORD *)a4) >> 3), 1);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v8;
}

void sub_23C5A557C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::isochart *this, const cv3d::cv::gess::mesh::TriMesh *a2, float *a3, float *a4, float *a5, float *a6)
{
  _BOOL8 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  double v22;
  float v23;
  void *__p[3];
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  float v29;
  float v30;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<float>::vector(__p, (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2);
  v30 = 0.0;
  v29 = 0.0;
  v11 = cv3d::cv::gess::isochart::MeasureTriMeshStretch((uint64_t)this, &v30, &v29, (uint64_t)&v26, __p);
  if (v11)
  {
    v12 = (char *)v26;
    v13 = (v27 - (_BYTE *)v26) >> 3;
    v14 = v13 - v13 / 0x1388;
    if (v14 <= 1)
      __assert_rtn("MeasureTriMeshStretch", "IsoChartUtils.cpp", 709, "statistic_avg_count > 1");
    *(_DWORD *)a2 = *((_DWORD *)v26 + 2 * v14 - 2);
    v15 = v13 / 0x1388;
    *a4 = *(float *)&v12[(4 * v14) & 0xFFFFFFFFFFFFFFF8];
    *a3 = 0.0;
    if (v13 / 0x1388 < v14)
    {
      v16 = v13 - 2 * v15;
      v17 = (float *)&v12[8 * v15 + 4];
      v18 = 0.0;
      v19 = 0.0;
      do
      {
        v19 = v19 + (float)(*(v17 - 1) * *v17);
        *a3 = v19;
        v20 = *v17;
        v17 += 2;
        v18 = v18 + v20;
        --v16;
      }
      while (v16);
      if (v18 > 0.0)
        *a3 = v19 / v18;
    }
    v21 = v30;
    v22 = v30 * 0.01;
    v23 = *(float *)a2 / v22;
    *(float *)a2 = v23;
    *(float *)&v22 = *a3 / v22;
    *a3 = *(float *)&v22;
    *a5 = v29 / v21;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  return v11;
}

void sub_23C5A5794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(uint64_t a1, uint64_t *a2, _QWORD *a3, float *a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  float v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  int v58;
  unint64_t v59;
  float *v60;
  _DWORD *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v74;
  uint64_t *v77;
  int v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  void *__p[3];
  void *v83;
  void *v84;
  void *v85[2];
  char v86;
  unsigned int v87[3];

  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(v85, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v83 = 0;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v83, (unsigned __int8 *)v85);
  if (v86 < 0)
    operator delete(v85[0]);
  std::string::basic_string[abi:ne180100]<0>(v85, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v84) = 0;
  v83 = 0;
  v77 = (uint64_t *)(a1 + 56);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v83, (unsigned __int8 *)v85);
  if (v86 < 0)
    operator delete(v85[0]);
  if (v6 == -1)
    return 0;
  if (v8 == -1)
  {
    LODWORD(v85[0]) = v6;
    v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)v85, v7);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) != (uint64_t)(*(_QWORD *)(a1 + 112)
                                                                                    - *(_QWORD *)(a1 + 104)) >> 2)
      cv3d::cv::gess::isochart::MeasureTriMeshLnStretch();
  }
  std::vector<float>::vector(v85, (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  std::vector<float>::vector(&v83, (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    goto LABEL_53;
  v74 = a2;
  v11 = 0;
  v12 = 0;
  v13 = 0.0;
  v14 = 0.0;
  v78 = v8;
  do
  {
    if (v8 == -1)
    {
      LODWORD(v81) = v12;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v81, __p);
      v18 = (unsigned int *)__p[0];
    }
    else
    {
      LODWORD(v81) = v8;
      v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v77, (unsigned int *)&v81, v10);
      v17 = *(_QWORD *)(v15 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v15 + 48) - v17) >> 2) <= v12)
        goto LABEL_61;
      v18 = (unsigned int *)(v17 + v11);
    }
    v19 = v18[2];
    v20 = v18[1];
    v21 = *v18;
    LODWORD(v81) = v6;
    v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v81, v16);
    v24 = *(_QWORD *)(v22 + 40);
    if (v21 >= (*(_QWORD *)(v22 + 48) - v24) >> 3
      || (LODWORD(v81) = v6,
          v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v81, v23), v27 = *(_QWORD *)(v25 + 40), v20 >= (*(_QWORD *)(v25 + 48) - v27) >> 3)|| (LODWORD(v81) = v6, v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v81, v26), v29 = *(_QWORD *)(v28 + 40), v19 >= (*(_QWORD *)(v28 + 48) - v29) >> 3))
    {
LABEL_61:
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    }
    v30 = (float *)(v24 + 8 * v21);
    *((float *)v85[0] + v12) = fabsf((float)((float)((float)(*(float *)(v27 + 8 * v20) - *v30)* (float)(*(float *)(v29 + 8 * v19 + 4) - v30[1]))- (float)((float)(*(float *)(v27 + 8 * v20 + 4) - v30[1])* (float)(*(float *)(v29 + 8 * v19) - *v30)))* 0.5);
    LODWORD(v81) = v12;
    v31 = cv3d::cv::gess::mesh::TriMesh::Area(a1, (unsigned int *)&v81);
    v32 = (float *)v83;
    *((float *)v83 + v12) = v31;
    v13 = v13 + v32[v12];
    v14 = v14 + *((float *)v85[0] + v12++);
    v34 = *(_QWORD *)(a1 + 152);
    v33 = *(_QWORD *)(a1 + 160);
    v11 += 12;
    v8 = v78;
  }
  while (v12 < (v33 - v34) >> 2);
  if (v13 < 1.0e-16)
    goto LABEL_53;
  v35 = sqrtf(v14 / v13);
  v36 = 0.0;
  if ((float)(v14 / v13) >= 0.0)
    v36 = v35;
  *a4 = v36;
  v37 = v74;
  if (v33 != v34)
  {
    v38 = 0;
    do
    {
      LODWORD(v81) = v38;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v81, __p);
      if (v78 == -1)
      {
        LODWORD(v81) = v38;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)&v81, __p);
        v43 = (unsigned int *)__p[0];
        v42 = (unsigned int *)__p[0];
      }
      else
      {
        LODWORD(v81) = v78;
        v40 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v77, (unsigned int *)&v81, v39);
        v41 = *(_QWORD *)(v40 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v40 + 48) - v41) >> 2) <= v38)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v42 = (unsigned int *)(v41 + 12 * v38);
        v43 = (unsigned int *)__p[0];
      }
      v45 = v42[1];
      v44 = v42[2];
      v46 = *v42;
      v81 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *v43);
      v80 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 1));
      v79 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
      v87[0] = v6;
      v48 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v87, v47);
      v50 = *(_QWORD *)(v48 + 40);
      if (v46 >= (*(_QWORD *)(v48 + 48) - v50) >> 3
        || (v87[0] = v6,
            v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v87, v49), v53 = *(_QWORD *)(v51 + 40), v45 >= (*(_QWORD *)(v51 + 48) - v53) >> 3)|| (v87[0] = v6, v54 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), v87, v52), v55 = *(_QWORD *)(v54 + 40), v44 >= (*(_QWORD *)(v54 + 48) - v55) >> 3))
      {
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      }
      cv3d::cv::gess::isochart::CalculateFaceLnStretch((uint64_t)&v81, (uint64_t)&v80, (uint64_t)&v79, (float *)(v50 + 8 * v46), (float *)(v53 + 8 * v45), (float *)(v55 + 8 * v44), (float *)v83 + v38, (float *)v85[0] + v38);
      v57 = v56;
      v37 = v74;
      if (v56 < 3.4028e38)
      {
        v58 = *((_DWORD *)v83 + v38);
        v60 = (float *)v74[1];
        v59 = v74[2];
        if ((unint64_t)v60 >= v59)
        {
          v62 = (float *)*v74;
          v63 = ((uint64_t)v60 - *v74) >> 3;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v65 = v59 - (_QWORD)v62;
          if (v65 >> 2 > v64)
            v64 = v65 >> 2;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v74 + 2), v66);
            v62 = (float *)*v74;
            v60 = (float *)v74[1];
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[8 * v63];
          *(float *)v68 = v57;
          *((_DWORD *)v68 + 1) = v58;
          v69 = v68;
          if (v60 != v62)
          {
            do
            {
              v70 = *((_QWORD *)v60 - 1);
              v60 -= 2;
              *((_QWORD *)v69 - 1) = v70;
              v69 -= 8;
            }
            while (v60 != v62);
            v62 = (float *)*v74;
          }
          v61 = v68 + 8;
          *v74 = (uint64_t)v69;
          v74[1] = (uint64_t)(v68 + 8);
          v74[2] = (uint64_t)&v67[8 * v66];
          if (v62)
            operator delete(v62);
        }
        else
        {
          *v60 = v56;
          *((_DWORD *)v60 + 1) = v58;
          v61 = v60 + 2;
        }
        v74[1] = (uint64_t)v61;
      }
      *(float *)(*a3 + 4 * v38++) = v57;
    }
    while (v38 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  v71 = v37[1];
  if (v71 == *v37)
  {
LABEL_53:
    v72 = 0;
  }
  else
  {
    v72 = 1;
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*,false>(*v37, v71, 126 - 2 * __clz((uint64_t)(v71 - *v37) >> 3), 1);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v85[0])
  {
    v85[1] = v85[0];
    operator delete(v85[0]);
  }
  return v72;
}

void sub_23C5A5E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  v30 = *(void **)(v28 - 152);
  if (v30)
  {
    *(_QWORD *)(v28 - 144) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::VisualizeVertexStretch(uint64_t a1, float *a2, _DWORD *a3)
{
  unint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  float *v12;
  float *v13;
  int v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  float v28;
  void *__p[2];
  char v30;
  int v31;
  void *v32;
  int *v33;
  void *v34;
  void *v35;
  int v36;
  void *v37[3];
  void *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v41 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<float>::vector(v37, (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  v36 = 0;
  if (!*a3)
  {
    if (cv3d::cv::gess::isochart::MeasureTriMeshStretch(a1, (float *)&v41 + 1, (float *)&v41, (uint64_t)&v38, v37))
      goto LABEL_3;
LABEL_20:
    v20 = 0;
    goto LABEL_36;
  }
  if (!cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(a1, (uint64_t *)&v38, v37, (float *)&v36))
    goto LABEL_20;
LABEL_3:
  v6 = ((v39 - (_BYTE *)v38) >> 3) - ((v39 - (_BYTE *)v38) >> 3) / 0x1388uLL;
  if (v6 < 2)
    __assert_rtn("VisualizeVertexStretch", "IsoChartUtils.cpp", 810, "statistic_avg_count > 1");
  v7 = *((float *)v38 + 2 * v6 - 2);
  v8 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2;
  LODWORD(v32) = 0;
  std::vector<float>::vector(&v34, v8, &v32);
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&v32, 3uLL);
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    v9 = 0;
    do
    {
      if (*((float *)v37[0] + v9) <= v7)
      {
        LODWORD(__p[0]) = v9;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, (unsigned int *)__p, &v32);
        v10 = (int *)v32;
        v11 = v33;
        if (v32 != v33)
        {
          v12 = (float *)v37[0];
          v13 = (float *)v34;
          do
          {
            v14 = *v10++;
            v13[v14] = v12[v9] + v13[v14];
          }
          while (v10 != v11);
        }
      }
      ++v9;
    }
    while (v9 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  v15 = (float *)v34;
  if (v34 == v35)
  {
    v17 = 3.4028e38;
    v16 = -3.4028e38;
  }
  else
  {
    v16 = -3.4028e38;
    v17 = 3.4028e38;
    do
    {
      v18 = *v15++;
      v19 = v18;
      if (v16 < v18)
        v16 = v19;
      if (v17 > v19)
        v17 = v19;
    }
    while (v15 != v35);
  }
  v31 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  v42[0] = 0;
  v42[1] = 0;
  v21 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)v42, (unsigned __int8 *)__p);
  v31 = v21;
  if (v30 < 0)
    operator delete(__p[0]);
  if (v21 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(a1, &v31, (__int128 *)__p);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
  {
    v22 = 0;
    v23 = v16 - v17;
    do
    {
      v28 = powf((float)(*((float *)v34 + v22) - v17) / v23, *a2);
      LODWORD(__p[0]) = v31;
      v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
      v25 = *(_QWORD *)(v24 + 40);
      if (v22 >= (*(_QWORD *)(v24 + 48) - v25) >> 4)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      HIDWORD(v26) = 0;
      *(_QWORD *)&v26 = LODWORD(v28);
      *((float *)&v26 + 2) = 1.0 - v28;
      *(_OWORD *)(v25 + 16 * v22++) = v26;
    }
    while (v22 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  }
  if (v32)
  {
    v33 = (int *)v32;
    operator delete(v32);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  v20 = 1;
LABEL_36:
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  return v20;
}

void sub_23C5A6228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (a16 < 0)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::isochart::MeetLnStretchCriteria(cv3d::cv::gess::isochart *this, const cv3d::cv::gess::mesh::TriMesh *a2)
{
  unint64_t v3;
  float *v4;
  float v5;
  float v6;
  _BOOL8 v7;
  float v9;
  void *__p;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  std::vector<float>::vector(&__p, (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2);
  v9 = 0.0;
  if ((cv3d::cv::gess::isochart::MeasureTriMeshLnStretch((uint64_t)this, (uint64_t *)&v12, &__p, &v9) & 1) != 0)
  {
    if (__p == v11)
    {
      v6 = 0.0;
    }
    else
    {
      v3 = 0;
      v4 = (float *)__p;
      do
      {
        v5 = *v4++;
        if (v5 > (float)(v9 * 200000000.0))
          ++v3;
      }
      while (v4 != v11);
      v6 = (float)v3;
    }
    v7 = (float)((float)(unint64_t)((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2) * 0.01) > v6;
    if (__p)
      goto LABEL_12;
  }
  else
  {
    v7 = 0;
    if (__p)
    {
LABEL_12:
      v11 = __p;
      operator delete(__p);
    }
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v7;
}

void sub_23C5A63B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::isochart::MeasureUvUtilization(uint64_t a1, _QWORD *a2, unint64_t a3, float *a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;

  result = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  if (result)
  {
    result = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
    if (result)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0.0;
      do
      {
        v14 = a2[5];
        if (0xAAAAAAAAAAAAAAABLL * ((a2[6] - v14) >> 2) <= v12)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(result, v9, v10);
        v15 = *(unsigned int *)(v14 + v11);
        v16 = *(_QWORD *)(a1 + 40);
        v17 = (*(_QWORD *)(a1 + 48) - v16) >> 3;
        if (v17 <= v15)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(result, v9, v10);
        v18 = v14 + v11;
        v19 = *(unsigned int *)(v14 + v11 + 4);
        if (v17 <= v19)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(result, v9, v10);
        v20 = *(unsigned int *)(v18 + 8);
        if (v17 <= v20)
          cv3d::cv::gess::io::MeshToArray<float,unsigned int>(result, v9, v10);
        v21 = (float *)(v16 + 8 * v15);
        v13 = v13
            + fabsf((float)((float)((float)(*(float *)(v16 + 8 * v19) - *v21)* (float)(*(float *)(v16 + 8 * v20 + 4) - v21[1]))- (float)((float)(*(float *)(v16 + 8 * v19 + 4) - v21[1])* (float)(*(float *)(v16 + 8 * v20) - *v21)))* 0.5);
        ++v12;
        result = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
        v11 += 12;
      }
      while (v12 < result);
    }
    else
    {
      v13 = 0.0;
    }
    *a4 = v13 / (float)a3;
  }
  return result;
}

unint64_t cv3d::cv::gess::isochart::MeasureUvUtilization(unint64_t this, const cv3d::cv::gess::mesh::TriMesh *a2, float *a3)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *__p[2];
  char v16;
  int v17;
  uint64_t v18;
  int v19;

  if (*(_QWORD *)(this + 160) != *(_QWORD *)(this + 152))
  {
    v4 = this;
    v17 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v5 = (uint64_t *)(v4 + 80);
    v18 = 0;
    v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v4 + 80), (uint64_t)&v18, (unsigned __int8 *)__p);
    if (v16 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    v19 = 0;
    v18 = 0;
    v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v4 + 56), (uint64_t)&v18, (unsigned __int8 *)__p);
    if (v16 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v4, &v17, (unsigned __int8 *)__p);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v6 == -1)
      cv3d::cv::gess::isochart::MeasureUvUtilization();
    if (v7 == -1)
      cv3d::cv::gess::isochart::MeasureUvUtilization();
    if (v17 == -1)
      cv3d::cv::gess::isochart::MeasureUvUtilization();
    LODWORD(__p[0]) = v6;
    v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v4 + 80), (unsigned int *)__p, v8);
    LODWORD(__p[0]) = v7;
    v11 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(v4 + 56), (unsigned int *)__p, v10);
    LODWORD(__p[0]) = v17;
    v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v5, (unsigned int *)__p, v12);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    return cv3d::cv::gess::isochart::MeasureUvUtilization(v9, v11, v14, (float *)a2);
  }
  return this;
}

void sub_23C5A66C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32x4_t cv3d::cv::gess::isochart::NormalizeMeshPosition(uint64_t a1, _QWORD *a2)
{
  float32x4_t result;
  unint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  unsigned int v36;

  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a2, (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
  {
    v5 = 0;
    v6 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v7.i64[0] = 0x80000000800000;
    v7.i64[1] = 0x80000000800000;
    do
    {
      v32 = v7;
      v34 = v6;
      v36 = *(_DWORD *)(a1 + 176);
      v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v36);
      v11 = *(_QWORD *)(v8 + 40);
      if (v5 >= (*(_QWORD *)(v8 + 48) - v11) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v8, v9, v10);
      *(_OWORD *)(*a2 + 16 * v5) = *(_OWORD *)(v11 + 16 * v5);
      v36 = *(_DWORD *)(a1 + 176);
      v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v36);
      v15 = *(_QWORD *)(v12 + 40);
      if (v5 >= (*(_QWORD *)(v12 + 48) - v15) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v12, v13, v14);
      result = *(float32x4_t *)(v15 + 16 * v5);
      v6 = vminq_f32(v34, result);
      v7 = vmaxq_f32(v32, result);
      ++v5;
      v17 = *(_QWORD *)(a1 + 104);
      v16 = *(_QWORD *)(a1 + 112);
    }
    while (v5 < (v16 - v17) >> 2);
    if (v16 != v17)
    {
      v18 = 0;
      v19.i64[0] = 0x3F0000003F000000;
      v19.i64[1] = 0x3F0000003F000000;
      v20 = vmulq_f32(vaddq_f32(v6, v7), v19);
      v21 = vsubq_f32(v7, v6);
      v22 = v21.f32[1];
      if (v21.f32[0] >= v21.f32[1])
        v22 = v21.f32[0];
      v21.i32[0] = v21.i32[2];
      if (v22 >= v21.f32[2])
        v21.f32[0] = v22;
      if (v21.f32[0] <= 0.0)
        v23 = 2.0;
      else
        v23 = 2.0 / v21.f32[0];
      v33 = v23;
      v35 = v20;
      do
      {
        v36 = *(_DWORD *)(a1 + 176);
        v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v36);
        v27 = *(_QWORD *)(v24 + 40);
        if (v18 >= (*(_QWORD *)(v24 + 48) - v27) >> 4)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v24, v25, v26);
        *(float32x4_t *)(v27 + 16 * v18) = vsubq_f32(*(float32x4_t *)(v27 + 16 * v18), v35);
        v36 = *(_DWORD *)(a1 + 176);
        v28 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v36);
        v31 = *(_QWORD *)(v28 + 40);
        if (v18 >= (*(_QWORD *)(v28 + 48) - v31) >> 4)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v28, v29, v30);
        result = vmulq_n_f32(*(float32x4_t *)(v31 + 16 * v18), v33);
        *(float32x4_t *)(v31 + 16 * v18++) = result;
      }
      while (v18 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::ExportFaceColorMap(uint64_t a1, const void **a2, const void **a3, _QWORD *a4, unsigned int a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  unsigned int *v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  _DWORD *v52;
  unint64_t v53;
  _BYTE *v54;
  int v55;
  uint64_t j;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  std::string::size_type v62;
  std::string::value_type *v63;
  int v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v72;
  int v73;
  uint64_t *v74;
  std::string v75;
  std::string v76;
  std::string v77;
  _DWORD v78[2];
  std::string __p;
  int v80;
  void *v81[2];
  char v82;

  if ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2 != (uint64_t)(a4[1] - *a4) >> 4)
    cv3d::cv::gess::isochart::ExportFaceColorMap();
  std::string::basic_string[abi:ne180100]<0>(v81, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  __p.__r_.__value_.__r.__words[0] = 0;
  v74 = (uint64_t *)(a1 + 80);
  v73 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&__p, (unsigned __int8 *)v81);
  if (v82 < 0)
    operator delete(v81[0]);
  v80 = -1;
  std::string::basic_string[abi:ne180100]<0>(v81, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a1, &v80, (unsigned __int8 *)v81);
  if (v82 < 0)
    operator delete(v81[0]);
  std::string::basic_string[abi:ne180100]<0>(v81, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v8 = (uint64_t *)(a1 + 56);
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  __p.__r_.__value_.__r.__words[0] = 0;
  v69 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&__p, (unsigned __int8 *)v81);
  if (v82 < 0)
    operator delete(v81[0]);
  std::string::basic_string[abi:ne180100]<0>(v81, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(__p.__r_.__value_.__l.__data_) = 0;
  v72 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a1 + 56), (uint64_t)&__p, (unsigned __int8 *)v81);
  if (v82 < 0)
    operator delete(v81[0]);
  LODWORD(v81[0]) = v80;
  v10 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v74, (unsigned int *)v81, v9);
  v11 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::vector<std::shared_ptr<cv3d::cv::gess::util::Image>>::vector(v81, v11);
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v14 = operator new[]();
      v15 = operator new(0x30uLL);
      v15[1] = 0;
      v15[2] = 0;
      *v15 = &off_250D49E30;
      *((_DWORD *)v15 + 6) = 0;
      *((_DWORD *)v15 + 7) = a5;
      *((_DWORD *)v15 + 8) = a5;
      *((_DWORD *)v15 + 9) = 3;
      v15[5] = v14;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v15 + 3);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v81[0] + 16 * i, (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
  {
    v19 = 0;
    v20 = (float)a5;
    v21 = 0xFFFFFFFFLL;
    v68 = a5;
    v66 = (uint64_t *)(a1 + 56);
    v67 = a1;
    v65 = v11;
    do
    {
      LODWORD(v77.__r_.__value_.__l.__data_) = v72;
      v22 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v8, (unsigned int *)&v77, v12);
      v24 = *(_QWORD *)(v22 + 40);
      if (v19 >= (*(_QWORD *)(v22 + 48) - v24) >> 1)
LABEL_77:
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      if ((int)v21 < *(unsigned __int16 *)(v24 + 2 * v19))
      {
        LODWORD(v77.__r_.__value_.__l.__data_) = v72;
        v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v8, (unsigned int *)&v77, v23);
        v26 = *(_QWORD *)(v25 + 40);
        if (v19 >= (*(_QWORD *)(v25 + 48) - v26) >> 1)
          goto LABEL_77;
        v21 = *(unsigned __int16 *)(v26 + 2 * v19);
      }
      LODWORD(v77.__r_.__value_.__l.__data_) = v69;
      v27 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v8, (unsigned int *)&v77, v23);
      v28 = *(_QWORD *)(v27 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v27 + 48) - v28) >> 2) <= v19)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      std::vector<cv3d::cv::gess::math::Vector2T<int>>::vector(&__p, 3uLL);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v33 = v28 + 12 * v19;
      v34 = -1;
      v35 = -1;
      do
      {
        LODWORD(v77.__r_.__value_.__l.__data_) = v73;
        v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v74, (unsigned int *)&v77, v12);
        v38 = *(unsigned int *)(v33 + 4 * v30);
        v39 = *(_QWORD *)(v36 + 40);
        if (v38 >= (*(_QWORD *)(v36 + 48) - v39) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v40 = *(float *)(v39 + 8 * v38);
        LODWORD(v77.__r_.__value_.__l.__data_) = v73;
        v41 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v74, (unsigned int *)&v77, v37);
        v42 = *(unsigned int *)(v33 + 4 * v30);
        v43 = *(_QWORD *)(v41 + 40);
        if (v42 >= (*(_QWORD *)(v41 + 48) - v43) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v44 = (int)(float)(v40 * v20);
        v45 = (int)(float)(*(float *)(v43 + 8 * v42 + 4) * v20);
        v46 = (void *)__p.__r_.__value_.__r.__words[0];
        v47 = (unsigned int *)(__p.__r_.__value_.__r.__words[0] + v29);
        *v47 = v44;
        v47[1] = v45;
        if (v44 < v35)
          v35 = (int)(float)(v40 * v20);
        if (v45 < v34)
          v34 = v45;
        if (v32 <= v44)
          v32 = (int)(float)(v40 * v20);
        if (v31 <= v45)
          v31 = v45;
        ++v30;
        v29 += 8;
      }
      while (v30 != 3);
      if (v32 <= v35)
        goto LABEL_49;
      v48 = (v31 - v34) * (v32 - v35);
      do
      {
        v49 = v34;
        if (v31 > v34)
        {
          do
          {
            v50 = 0;
            v51 = 0;
            v52 = (_DWORD *)(__p.__r_.__value_.__r.__words[0] + 4);
            do
            {
              v53 = v50 - 2;
              if (v50 < 2)
                v53 = v50 + 1;
              v51 += (int)fabs((double)(int)((*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v53) - v35)
                                           * (v49 - *v52)
                                           + (*(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 8 * v53 + 4) - v49)
                                           * (*(v52 - 1) - v35)));
              v52 += 2;
              ++v50;
            }
            while (v50 != 3);
            if (v51 <= v48)
            {
              v54 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)v81[0] + 2 * v21) + 16)
                            + (v35 + *(_DWORD *)(*((_QWORD *)v81[0] + 2 * v21) + 4) * (~v49 + v68))
                            * *(_DWORD *)(*((_QWORD *)v81[0] + 2 * v21) + 12));
              *v54 = (int)(*(float *)(*a4 + 16 * v19) * 255.999);
              v54[1] = (int)(*(float *)(*a4 + 16 * v19 + 4) * 255.999);
              v54[2] = (int)(*(float *)(*a4 + 16 * v19 + 8) * 255.999);
            }
            ++v49;
          }
          while (v49 != v31);
        }
        ++v35;
      }
      while (v35 != v32);
      v46 = (void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
LABEL_49:
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
        operator delete(v46);
      }
      ++v19;
      v11 = v65;
      v8 = v66;
    }
    while (v19 < (uint64_t)(*(_QWORD *)(v67 + 160) - *(_QWORD *)(v67 + 152)) >> 2);
  }
  if (v11)
  {
    v55 = 0;
    for (j = 0; 16 * v11 != j; j += 16)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a3, (uint64_t)&v77);
      std::to_string(&v76, v55);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v76;
      else
        v57 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      else
        v58 = v76.__r_.__value_.__l.__size_;
      v59 = std::string::append(&v77, (const std::string::value_type *)v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = std::string::append(&__p, ".jpg", 4uLL);
      v63 = (std::string::value_type *)v61->__r_.__value_.__r.__words[0];
      v62 = v61->__r_.__value_.__l.__size_;
      v78[0] = v61->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v78 + 3) = *(_DWORD *)((char *)&v61->__r_.__value_.__r.__words[2] + 3);
      v64 = SHIBYTE(v61->__r_.__value_.__r.__words[2]);
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v77.__r_.__value_.__l.__data_);
        if ((v64 & 0x80000000) == 0)
        {
LABEL_65:
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          v75.__r_.__value_.__l.__size_ = v62;
          LODWORD(v75.__r_.__value_.__r.__words[2]) = v78[0];
          *(_DWORD *)((char *)&v75.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v78 + 3);
          *((_BYTE *)&v75.__r_.__value_.__s + 23) = v64;
          goto LABEL_68;
        }
      }
      else if ((v64 & 0x80000000) == 0)
      {
        goto LABEL_65;
      }
      std::string::__init_copy_ctor_external(&v75, v63, v62);
LABEL_68:
      cv3d::cv::gess::io::SaveJpeg((char *)&v75, *(_QWORD *)((char *)v81[0] + j), 100);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v75.__r_.__value_.__l.__data_);
        if (v64 < 0)
LABEL_73:
          operator delete(v63);
      }
      else if (v64 < 0)
      {
        goto LABEL_73;
      }
      ++v55;
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_23C5A6FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

float32x4_t *cv3d::cv::gess::isochart::CalculateCanonicalCoordinates(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, _QWORD *a4, uint64_t a5, float *a6, int32x4_t *a7, float32x4_t *a8)
{
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  *(float32x4_t *)a7 = vsubq_f32(*a2, *result);
  v8 = (int32x4_t)vsubq_f32(*a3, *result);
  *a8 = (float32x4_t)v8;
  v9 = *(float32x4_t *)a7;
  v10 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL), v8), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL)), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(v8, (int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL)), v8), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), *a7));
  v11 = vmulq_f32(v10, v10);
  v11.i32[3] = 0;
  v12 = vpaddq_f32(v11, v11);
  v13 = vpaddq_f32(v12, v12);
  v14 = (float32x4_t)xmmword_23C603EC0;
  v15 = (int32x4_t)xmmword_23C603EC0;
  if (v13.f32[0] > 0.0)
    v15 = (int32x4_t)vdivq_f32(v10, vsqrtq_f32(v13));
  v16 = vmulq_f32(v9, v9);
  v16.i32[3] = 0;
  v17 = vpaddq_f32(v16, v16);
  v18 = vpaddq_f32(v17, v17);
  v19 = (int32x4_t)xmmword_23C603EC0;
  if (v18.f32[0] > 0.0)
    v19 = (int32x4_t)vdivq_f32(v9, vsqrtq_f32(v18));
  *a7 = v19;
  v20 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v15, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), v15), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), v19)), (float32x4_t)vzip2q_s32(vzip1q_s32(v19, (int32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL)), v19), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), v15));
  v21 = vmulq_f32(v20, v20);
  v21.i32[3] = 0;
  v22 = vpaddq_f32(v21, v21);
  v23 = vpaddq_f32(v22, v22);
  if (v23.f32[0] > 0.0)
    v14 = vdivq_f32(v20, vsqrtq_f32(v23));
  *a8 = v14;
  *a4 = 0;
  v24 = vmulq_f32(vsubq_f32(*a2, *result), *(float32x4_t *)a7);
  v24.i32[3] = 0;
  *(float *)a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24));
  *(_DWORD *)(a5 + 4) = 0;
  v25 = vsubq_f32(*a3, *result);
  v26 = vmulq_f32(v25, *(float32x4_t *)a7);
  v26.i32[3] = 0;
  v27 = vmulq_f32(v25, *a8);
  v27.i32[3] = 0;
  *a6 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26));
  a6[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27));
  v28 = vsubq_f32(*a3, *a2);
  v29 = vmulq_f32(v28, v28);
  v29.i32[3] = 0;
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) < 1.0e-16)
    a6[1] = 0.0;
  return result;
}

uint64_t cv3d::cv::gess::isochart::CheckAndRepairSelfIntersectionForChartedMesh(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::vector<unsigned int>::size_type v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int *end;
  unint64_t v15;
  unsigned int v16;
  char v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int begin;
  uint64_t v22;
  const unsigned int *v23;
  int v24;
  uint64_t v25;
  std::vector<unsigned int>::size_type v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::vector<unsigned int>::pointer v36;
  std::vector<unsigned int>::pointer v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  std::vector<unsigned int> v47;
  std::vector<unsigned int> v48;
  _DWORD v49[4];
  int v50;
  std::vector<unsigned int> __p;
  unsigned int v52;

  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v48.__end_) = 0;
  v48.__begin_ = 0;
  v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v48, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (v3 == -1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LODWORD(v48.__begin_) = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>(this + 7, (uint64_t)&v48, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  v50 = -1;
  if (v4 == -1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  v5 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v50, (unsigned __int8 *)&__p);
  v6 = v5;
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
  {
    operator delete(__p.__begin_);
    if (!v6)
      return 0;
  }
  else if (!v5)
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v48.__begin_ = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v48, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (v8 == -1)
    return 0;
  v49[0] = v50;
  v49[1] = v4;
  v49[2] = v3;
  v49[3] = v8;
  LODWORD(v48.__begin_) = v50;
  v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)&v48, v7);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  std::vector<unsigned int>::vector(&__p, v10);
  if (this[20] != this[19])
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (v13 == *(_DWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned int>((uint64_t)this, v4, v11))
        __p.__begin_[v13++] = v12;
      v11 = ++v12;
    }
    while (v12 < (unint64_t)(((char *)this[20] - (char *)this[19]) >> 2));
  }
  end = __p.__end_;
  if (__p.__end_ != __p.__begin_)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = __p.__end_ - __p.__begin_;
    end = __p.__begin_;
    do
    {
      LODWORD(v47.__begin_) = 0;
      v19 = end[v15];
      LODWORD(v47.__begin_) = v19;
      if (v18 - 1 <= v15)
        v20 = (unint64_t)((char *)this[20] - (char *)this[19]) >> 2;
      else
        LODWORD(v20) = end[v16 + 1];
      std::vector<cv3d::cv::gess::mesh::FaceHandle>::vector(&v48, v20 - v19);
      begin = v47.__begin_;
      if (LODWORD(v47.__begin_) < v20)
      {
        do
        {
          v48.__begin_[begin - LODWORD(v47.__begin_)] = begin;
          ++begin;
        }
        while ((_DWORD)v20 != begin);
      }
      v24 = cv3d::cv::gess::internal::CheckAndRepairSelfIntersectionForOneChart((uint64_t)this, &v48.__begin_, v49);
      if (v24)
      {
        v52 = v20 - 1;
        cv3d::cv::gess::alg::SortFaceByGroupID32Bit((cv3d::cv::gess::alg *)this, (cv3d::cv::gess::mesh::TriMesh *)&v47, &v52, v23);
      }
      if (v48.__begin_)
      {
        v48.__end_ = v48.__begin_;
        operator delete(v48.__begin_);
      }
      v17 |= v24;
      end = __p.__begin_;
      v18 = __p.__end_ - __p.__begin_;
      v15 = ++v16;
    }
    while (v18 > v16);
    if ((v17 & 1) != 0)
    {
      LODWORD(v48.__begin_) = v49[0];
      v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)&v48, v22);
      v26 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      std::vector<unsigned int>::vector(&v48, v26);
      if (this[20] != this[19])
      {
        v27 = 0;
        v28 = 0;
        v29 = -1;
        v30 = 1;
        do
        {
          LODWORD(v47.__begin_) = v4;
          v31 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)&v47);
          v32 = *(_QWORD *)(v31 + 40);
          if (v27 >= (*(_QWORD *)(v31 + 48) - v32) >> 2)
LABEL_58:
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          if (v29 != *(_DWORD *)(v32 + 4 * v27))
          {
            LODWORD(v47.__begin_) = v4;
            v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, (unsigned int *)&v47);
            v34 = *(_QWORD *)(v33 + 40);
            if (v27 >= (*(_QWORD *)(v33 + 48) - v34) >> 2)
              goto LABEL_58;
            v29 = *(_DWORD *)(v34 + 4 * v27);
            v48.__begin_[v28++] = v29;
          }
          v27 = v30++;
        }
        while (v27 < ((char *)this[20] - (char *)this[19]) >> 2);
      }
      std::vector<unsigned int>::vector(&v47, v26);
      if (v26)
      {
        v35 = 0;
        v36 = v48.__begin_;
        v37 = v47.__begin_;
        do
        {
          v37[v36[v35]] = v35;
          ++v35;
        }
        while (v26 != v35);
      }
      if (this[20] != this[19])
      {
        v38 = 0;
        v39 = 1;
        do
        {
          v52 = v4;
          v40 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, &v52);
          v41 = *(_QWORD *)(v40 + 40);
          if (v38 >= (*(_QWORD *)(v40 + 48) - v41) >> 2)
LABEL_59:
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v42 = *(unsigned int *)(v41 + 4 * v38);
          v43 = v47.__begin_[v42];
          if (v43 != (_DWORD)v42)
          {
            v52 = v4;
            v44 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)this + 7, &v52);
            v45 = *(_QWORD *)(v44 + 40);
            if (v38 >= (*(_QWORD *)(v44 + 48) - v45) >> 2)
              goto LABEL_59;
            *(_DWORD *)(v45 + 4 * v38) = v43;
          }
          v38 = v39++;
        }
        while (v38 < ((char *)this[20] - (char *)this[19]) >> 2);
      }
      if (v47.__begin_)
      {
        v47.__end_ = v47.__begin_;
        operator delete(v47.__begin_);
      }
      if (v48.__begin_)
      {
        v48.__end_ = v48.__begin_;
        operator delete(v48.__begin_);
      }
      end = __p.__begin_;
    }
  }
  if (end)
  {
    __p.__end_ = end;
    operator delete(end);
  }
  return 1;
}

void sub_23C5A77EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  float v17;
  unint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  int v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  int v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  int v47;
  float v48;
  int v49;
  float v50;
  int v51;
  unint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  int v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float *v87;
  float v88;
  float v89;
  int v90;
  float *v91;
  float *v93;
  uint64_t v94;
  float v95;
  float v96;
  int v97;
  float *v98;
  float *v99;
  int v100;

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(float *a1, float *a2, float *a3)
{
  float result;
  float v4;
  float v5;
  float *v6;
  float *v7;
  float *v8;
  int v9;
  float v10;
  int v11;

  result = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 >= result)
    {
      *a1 = result;
      *a2 = v4;
      v11 = *((_DWORD *)a1 + 1);
      a1[1] = a2[1];
      *((_DWORD *)a2 + 1) = v11;
      result = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = result;
      v7 = a3 + 1;
      v6 = a2 + 1;
    }
    else
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
    }
    v8 = v7;
    goto LABEL_10;
  }
  if (v5 < result)
  {
    *a2 = v5;
    *a3 = result;
    v8 = a2 + 1;
    v9 = *((_DWORD *)a2 + 1);
    a2[1] = a3[1];
    *((_DWORD *)a3 + 1) = v9;
    result = *a2;
    v10 = *a1;
    if (*a2 < *a1)
    {
      *a1 = result;
      v6 = a1 + 1;
      *a2 = v10;
LABEL_10:
      result = *v6;
      *v6 = *v8;
      *v8 = result;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;
  float v27;
  int v28;
  float v29;
  int v30;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a1 + 24);
      v20 = *(float *)(a2 - 8);
      v21 = *(float *)(a1 + 24);
      if (v20 < v21)
      {
        *(float *)(a1 + 24) = v20;
        *(float *)(a2 - 8) = v21;
        v22 = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v22;
        v23 = *(float *)(a1 + 24);
        v24 = *(float *)(a1 + 16);
        if (v23 < v24)
        {
          v25 = *(_DWORD *)(a1 + 20);
          v26 = *(_DWORD *)(a1 + 28);
          *(float *)(a1 + 16) = v23;
          *(_DWORD *)(a1 + 20) = v26;
          *(float *)(a1 + 24) = v24;
          *(_DWORD *)(a1 + 28) = v25;
          v27 = *(float *)(a1 + 8);
          if (v23 < v27)
          {
            v28 = *(_DWORD *)(a1 + 12);
            *(float *)(a1 + 8) = v23;
            *(_DWORD *)(a1 + 12) = v26;
            *(float *)(a1 + 16) = v27;
            *(_DWORD *)(a1 + 20) = v28;
            v29 = *(float *)a1;
            if (v23 < *(float *)a1)
            {
              v30 = *(_DWORD *)(a1 + 4);
              *(float *)a1 = v23;
              *(_DWORD *)(a1 + 4) = v26;
              *(float *)(a1 + 8) = v29;
              *(_DWORD *)(a1 + 12) = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)v10;
    v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      v15 = *(_DWORD *)(v10 + 4);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          v19 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(float *)v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float result;
  float v9;
  int v10;
  float v11;
  int v12;
  float v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>(a1, (float *)a2, (float *)a3);
  result = *(float *)a4;
  v9 = *(float *)a3;
  if (*(float *)a4 < *(float *)a3)
  {
    *(float *)a3 = result;
    *(float *)a4 = v9;
    v10 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v10;
    result = *(float *)a3;
    v11 = *(float *)a2;
    if (*(float *)a3 < *(float *)a2)
    {
      *(float *)a2 = result;
      *(float *)a3 = v11;
      v12 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v12;
      result = *(float *)a2;
      v13 = *a1;
      if (*(float *)a2 < *a1)
      {
        *a1 = result;
        *(float *)a2 = v13;
        result = a1[1];
        a1[1] = *(float *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  int v16;
  float v17;
  unint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  int v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  unint64_t v29;
  float *v30;
  float v31;
  int v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  int v47;
  float v48;
  int v49;
  float v50;
  int v51;
  unint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  float v58;
  float v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float v71;
  float v72;
  int v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  float *v87;
  float v88;
  float v89;
  int v90;
  float *v91;
  float *v93;
  uint64_t v94;
  float v95;
  float v96;
  int v97;
  float *v98;
  float *v99;
  int v100;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshLnStretch(cv3d::cv::gess::mesh::TriMesh const&,std::vector<std::pair<float,float>> &,std::vector<float> &,float &)::$_0 &,std::pair<float,float>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  int v25;
  int v26;
  float v27;
  int v28;
  float v29;
  int v30;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, a1 + 8, a1 + 16, a1 + 24);
      v20 = *(float *)(a2 - 8);
      v21 = *(float *)(a1 + 24);
      if (v20 < v21)
      {
        *(float *)(a1 + 24) = v20;
        *(float *)(a2 - 8) = v21;
        v22 = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v22;
        v23 = *(float *)(a1 + 24);
        v24 = *(float *)(a1 + 16);
        if (v23 < v24)
        {
          v25 = *(_DWORD *)(a1 + 20);
          v26 = *(_DWORD *)(a1 + 28);
          *(float *)(a1 + 16) = v23;
          *(_DWORD *)(a1 + 20) = v26;
          *(float *)(a1 + 24) = v24;
          *(_DWORD *)(a1 + 28) = v25;
          v27 = *(float *)(a1 + 8);
          if (v23 < v27)
          {
            v28 = *(_DWORD *)(a1 + 12);
            *(float *)(a1 + 8) = v23;
            *(_DWORD *)(a1 + 12) = v26;
            *(float *)(a1 + 16) = v27;
            *(_DWORD *)(a1 + 20) = v28;
            v29 = *(float *)a1;
            if (v23 < *(float *)a1)
            {
              v30 = *(_DWORD *)(a1 + 4);
              *(float *)a1 = v23;
              *(_DWORD *)(a1 + 4) = v26;
              *(float *)(a1 + 8) = v29;
              *(_DWORD *)(a1 + 12) = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (float *)(a1 + 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::MeasureTriMeshStretch(cv3d::cv::gess::mesh::TriMesh const&,float &,float &,std::vector<std::pair<float,float>> &,std::vector<float> &)::$_0 &,std::pair<float,float>*>((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      v10 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)v10;
    v14 = *v9;
    if (*(float *)v10 < *v9)
    {
      v15 = *(_DWORD *)(v10 + 4);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_DWORD *)(a1 + v16 + 20);
        *(float *)(v17 + 24) = v14;
        *(_DWORD *)(v17 + 28) = v18;
        if (v16 == -16)
          break;
        v14 = *(float *)(v17 + 8);
        v16 -= 8;
        if (v13 >= v14)
        {
          v19 = a1 + v16 + 24;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(float *)v19 = v13;
      *(_DWORD *)(v19 + 4) = v15;
      if (++v12 == 8)
        return v10 + 8 == a2;
    }
    v9 = (float *)v10;
    v11 += 8;
    v10 += 8;
    if (v10 == a2)
      return 1;
  }
}

_QWORD *std::vector<std::shared_ptr<cv3d::cv::gess::util::Image>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C5A8C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::math::Vector2T<int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C5A8CB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<cv3d::cv::gess::mesh::FaceHandle>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_23C5A8D28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::VertexHandle>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::VertexHandle>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5A8EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C5A8F50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A9E0;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5A8F98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A9E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A9E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4AA18;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::mesh::Vertex>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize(a1 + 40, a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = a1[7];
  v2 = (uint64_t)(a1 + 7);
  v3 = v4;
  v5 = *(_DWORD **)(v2 - 8);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (void **)(v2 - 16);
    v8 = *(_QWORD *)(v2 - 16);
    v9 = ((uint64_t)v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v3 - v8;
    v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = -1;
    v6 = v14 + 4;
    v17 = (char *)a1[5];
    v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    a1[5] = v14;
    a1[6] = v6;
    a1[7] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = -1;
    v6 = v5 + 1;
  }
  a1[6] = v6;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::Clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,void>(a2, (uint64_t)v4);
}

void sub_23C5A9234(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4AA18;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D4AA18;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::VertexHandle*,cv3d::cv::gess::mesh::VertexHandle*>((_QWORD *)v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  return a1;
}

void sub_23C5A92F0(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::mesh::VertexHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::VertexHandle*,cv3d::cv::gess::mesh::VertexHandle*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C5A9360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4AA88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5A93D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::VertexHandle>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::mesh::FaceHandle>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::mesh::FaceHandle>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5A95E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C5A9640(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4AAC0;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5A9688(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4AAF8;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::mesh::Vertex>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize(a1 + 40, a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v4 = a1[7];
  v2 = (uint64_t)(a1 + 7);
  v3 = v4;
  v5 = *(_DWORD **)(v2 - 8);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (void **)(v2 - 16);
    v8 = *(_QWORD *)(v2 - 16);
    v9 = ((uint64_t)v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v3 - v8;
    v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = -1;
    v6 = v14 + 4;
    v17 = (char *)a1[5];
    v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    a1[5] = v14;
    a1[6] = v6;
    a1[7] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = -1;
    v6 = v5 + 1;
  }
  a1[6] = v6;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::Clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,void>(a2, (uint64_t)v4);
}

void sub_23C5A9924(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4AAF8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D4AAF8;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::mesh::FaceHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle*>((_QWORD *)v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  return a1;
}

void sub_23C5A99E0(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::mesh::FaceHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::FaceHandle*,cv3d::cv::gess::mesh::FaceHandle*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C5A9A50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4AB68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5A9AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::mesh::FaceHandle>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<float>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<float>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5A9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C5A9E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4ABA0;
  cv3d::cv::gess::mesh::AttributeT<float>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5A9EC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ABA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ABA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<float>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<float>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4ABD8;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<float>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<float>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<float>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<float>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<float>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<float>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<float>::resize(a1 + 40, a2);
}

void cv3d::cv::gess::mesh::AttributeT<float>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<float>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = (v4 - v6) >> 2;
    if ((unint64_t)(v7 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 1;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v10);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *(_DWORD *)v12 = 0;
    v5 = v12 + 4;
    while (v4 != v6)
    {
      v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v4 = 0;
    v5 = v4 + 4;
  }
  a1[6] = v5;
}

float cv3d::cv::gess::mesh::AttributeT<float>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(float *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(float *)(v3 + 4 * a3) = result;
  return result;
}

float cv3d::cv::gess::mesh::AttributeT<float>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(float *)(v3 + 4 * a2);
  *(float *)(v3 + 4 * a3) = result;
  return result;
}

float cv3d::cv::gess::mesh::AttributeT<float>::Blend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 40);
  result = (float)(*(float *)(v3 + 4 * a2) + *(float *)(v3 + 4 * a3)) * 0.5;
  *(float *)(v3 + 4 * a2) = result;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<float>::Clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<float>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,void>(a2, (uint64_t)v4);
}

void sub_23C5AA174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x1093C40855A9725);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<float>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<float>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4ABD8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<float>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D4ABD8;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  return a1;
}

void sub_23C5AA2C4(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<float>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4AC48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5AA32C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<float> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<float> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<float>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<float>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void cv3d::cv::gess::isochart::IsoChartMesh::MergeSmallCharts(_QWORD *a1, unint64_t a2, uint64_t a3, const float *a4, const float *a5, uint64_t a6, BOOL a7, char a8)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t i;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  void **v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v46 = a7;
  v10 = (_QWORD *)*a1;
  v11 = (_QWORD *)a1[1];
  v12 = (uint64_t)v11 - *a1;
  if ((unint64_t)v12 >= 0x50)
  {
    v43 = 0;
    v44 = 0;
    v45 = 0;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__init_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>((char *)&v43, v10, v11, v12 >> 4);
    v39 = a2;
    v19 = *(_QWORD *)(a3 + 152);
    v18 = *(_QWORD *)(a3 + 160);
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::vector(&v41, (uint64_t)(a1[1] - *a1) >> 4);
    v20 = v43;
    if (v44 != v43)
    {
      v21 = 0;
      do
      {
        std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,void>(*(cv3d::cv::gess::mesh::TriMesh **)(v20 + 16 * v21), a4, a5, &v46, &v40);
        std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&v41[2 * v21], &v40);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        ++v21;
        v20 = v43;
      }
      while (v21 < (v44 - v43) >> 4);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::CalAdjacentChartsForEachChart((uint64_t *)&v41, a3, (v18 - v19) >> 2);
    v25 = *(_QWORD *)(a6 + 24);
    if (v25 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25) & 1) != 0)
    {
LABEL_35:
      *(_QWORD *)&v40 = &v41;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      v41 = (void **)&v43;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v41);
      return;
    }
    v27 = (_QWORD *)*a1;
    for (i = a1[1];
          (_QWORD *)i != v27;
    a1[1] = v27;
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v47, a6);
    cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging((uint64_t *)&v41, &v43, v39, (v18 - v19) >> 2, a4, a5, (uint64_t)v47, v46, a8);
    v28 = v48;
    if (v48 == v47)
    {
      v29 = 4;
      v28 = v47;
    }
    else
    {
      if (!v48)
        goto LABEL_20;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_20:
    v30 = *(_QWORD *)(a6 + 24);
    if (!v30 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30) & 1) == 0)
    {
      v31 = v41;
      v32 = 0;
      if (v42 != v41)
      {
        v33 = ((char *)v42 - (char *)v41) >> 4;
        if (v33 <= 1)
          v33 = 1;
        do
        {
          v34 = *v31;
          v31 += 2;
          if (v34)
            ++v32;
          --v33;
        }
        while (v33);
      }
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize((uint64_t)a1, v32);
      v35 = v43;
      if (v44 != v43)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        do
        {
          if (*(_QWORD *)(v35 + v36 * 8))
          {
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*a1 + 16 * v38), (uint64_t *)(v35 + v36 * 8));
            v35 = v43;
            if ((*(_QWORD *)(v43 + v36 * 8) != 0) != (v41[v36] != 0))
              goto LABEL_37;
            ++v38;
          }
          else if (v41[v36])
          {
LABEL_37:
            __assert_rtn("MergeSmallCharts", "MergeCharts.cpp", 76, "!chart_mesh_list_backup[i] == !children[i]");
          }
          ++v37;
          v36 += 2;
        }
        while (v37 < (v44 - v35) >> 4);
      }
    }
    goto LABEL_35;
  }
}

void sub_23C5AA758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ***a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a11 = &a13;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalAdjacentChartsForEachChart(uint64_t *a1, uint64_t a2, std::vector<unsigned int>::size_type __n)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *__p[2];
  char v20;
  std::vector<unsigned int> v21;
  int v22;

  std::vector<unsigned int>::vector(&v21, __n);
  v5 = *a1;
  if (a1[1] != *a1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = 16 * v6;
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 16 * v6) + 40);
      std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
      v22 = -1;
      v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v9 + 56), (uint64_t)&v22, (unsigned __int8 *)__p);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v11 == -1)
        __assert_rtn("CalAdjacentChartsForEachChart", "MergeCharts.cpp", 90, "f_id_root_ah.Valid()");
      v5 = *a1;
      v12 = *(uint64_t **)(*(_QWORD *)(*a1 + v8) + 40);
      if (v12[20] != v12[19])
      {
        v13 = 0;
        do
        {
          LODWORD(__p[0]) = v11;
          v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v12 + 7, (unsigned int *)__p, v10);
          v15 = *(_QWORD *)(v14 + 40);
          if (v13 >= (*(_QWORD *)(v14 + 48) - v15) >> 2)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v21.__begin_[*(unsigned int *)(v15 + 4 * v13)] = v7;
          v5 = *a1;
          ++v13;
          v12 = *(uint64_t **)(*(_QWORD *)(*a1 + v8) + 40);
        }
        while (v13 < (v12[20] - v12[19]) >> 2);
      }
      v16 = a1[1];
      v6 = ++v7;
    }
    while (v7 < (unint64_t)((v16 - v5) >> 4));
    if (v16 != v5)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        cv3d::cv::gess::isochart::IsoChartMesh::CalculateAdjacentChart(*(_QWORD **)(v5 + 16 * v17), v18, &v21, a2);
        v5 = *a1;
        v17 = ++v18;
      }
      while (v18 < (unint64_t)((a1[1] - *a1) >> 4));
    }
  }
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
}

void sub_23C5AA9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(uint64_t *a1, _QWORD *a2, unint64_t a3, unint64_t a4, const float *a5, const float *a6, uint64_t a7, BOOL a8, char a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *j;
  char **v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *k;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t m;
  uint64_t v59;
  _QWORD *v60;
  __int128 *v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  NSObject *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unsigned int v71;
  char *v72;
  __int32 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  __int128 v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  __int32 *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned int *n;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  unsigned int *v107;
  unsigned int v108;
  char *v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  __int32 *v113;
  int v114;
  __int128 *p_context;
  uint64_t v116;
  __int32 *v117;
  uint64_t v118;
  void ***v119;
  float v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  __int128 v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  __int32 *v133;
  __int32 *v134;
  __int32 *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  float v138;
  uint64_t sig;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  int v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v150;
  __int128 v154;
  void *v155;
  char *v156;
  char *v157;
  void *__p;
  char *v159;
  char *v160;
  void *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int128 v174;
  __int128 v175;
  void *v176[3];
  void *v177[3];
  _QWORD v178[3];
  int v179;
  uint64_t v180[3];
  char v181;
  uint64_t v182;
  BOOL v183;
  unint64_t v184;
  __int32 v185;
  __int128 context;
  __int128 *v187;
  uint64_t *v188;
  __int32 v189[6];
  __int32 *v190;
  std::mutex v191;
  std::mutex v192;
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  v184 = a4;
  v183 = a8;
  v182 = 0;
  memset(v180, 0, sizeof(v180));
  v181 = 0;
  v179 = 0x7FFFFFFF;
  v12 = *a1;
  v11 = a1[1];
  v13 = v11 - *a1;
  v14 = v13 >> 4;
  if (a3 && v14 > a3)
    v179 = ((unint64_t)v13 >> 4) - a3;
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize((uint64_t)v180, v14);
  v15 = *(_QWORD *)(a7 + 24);
  if (!v15 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) == 0)
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(v178, v14);
    v150 = a7;
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::vector(v177, v14);
    LOBYTE(v192.__m_.__sig) = 1;
    std::vector<BOOL>::vector(v176, v14, (unsigned __int8 *)&v192);
    if (v11 != v12)
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = (uint64_t *)(*a1 + 16 * v16);
        cv3d::cv::gess::isochart::IsoChartMesh::CalculateAverageNormal(*v18, (float32x4_t *)v177[0] + v16);
        if (*(_QWORD *)(*v18 + 232) != *(_QWORD *)(*v18 + 240)
          && *(_QWORD *)(*(_QWORD *)(*v18 + 40) + 160) != *(_QWORD *)(*(_QWORD *)(*v18 + 40) + 152))
        {
          v19 = operator new(0x28uLL);
          v19[1] = 0;
          v19[2] = 0;
          *((_DWORD *)v19 + 6) = 0;
          *v19 = &off_250D4ACB8;
          v19[4] = -1;
          v192.__m_.__sig = (uint64_t)(v19 + 3);
          *(_QWORD *)v192.__m_.__opaque = v19;
          std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v178[0] + 16 * v16, (__int128 *)&v192.__m_.__sig);
          v20 = *(std::__shared_weak_count **)v192.__m_.__opaque;
          if (*(_QWORD *)v192.__m_.__opaque)
          {
            v21 = (unint64_t *)(*(_QWORD *)v192.__m_.__opaque + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v23 = *(_OWORD *)(v178[0] + 16 * v16);
          v24 = *(_QWORD *)(v178[0] + 16 * v16);
          *(float *)v24 = -(float)((float)((float)v17 / (float)v14)
                                 + (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*v18 + 40) + 160)
                                                                     - *(_QWORD *)(*(_QWORD *)(*v18 + 40) + 152)) >> 2));
          *(_DWORD *)(v24 + 4) = v17;
          v175 = v23;
          if (*((_QWORD *)&v23 + 1))
          {
            v25 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
          }
          cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)v180, &v175);
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
          if (*((_QWORD *)&v175 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
        v16 = ++v17;
      }
      while (v14 > v17);
    }
    v30 = a7;
    v31 = *(_QWORD *)(a7 + 24);
    if (!v31 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 48))(v31) & 1) == 0)
    {
      memset(v192.__m_.__opaque, 0, sizeof(v192.__m_.__opaque));
      v192.__m_.__sig = 850045863;
      if ((a9 & 1) != 0)
      {
        v171 = 0;
        v172 = 0;
        v173 = 0;
        v168 = 0;
        v169 = 0;
        v170 = 0;
        v165 = 0;
        v166 = 0;
        v167 = 0;
        memset(v191.__m_.__opaque, 0, sizeof(v191.__m_.__opaque));
        v191.__m_.__sig = 850045863;
        if (v182)
        {
          do
          {
            v32 = *(_QWORD *)(v30 + 24);
            if (v32 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32) & 1) != 0)
              break;
            v33 = std::thread::hardware_concurrency();
            if (v33 <= 2)
              v34 = 2;
            else
              v34 = v33;
            v36 = v168;
            for (i = v169;
                  i != v36;
            v169 = v36;
            v38 = v165;
            v37 = v166;
            if ((_QWORD *)v166 != v165)
            {
              do
                v37 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v37 - 16);
              while ((_QWORD *)v37 != v38);
              v36 = v169;
            }
            v166 = (uint64_t)v38;
            if (v34 > (v36 - v168) >> 4)
            {
              while (1)
              {
                v38 = (_QWORD *)v166;
                if (v34 < (v166 - (uint64_t)v165) >> 4 || v182 == 0)
                  break;
                cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(v180, 0, &context);
                if (!(_QWORD)context)
                  __assert_rtn("PerformMerging", "MergeCharts.cpp", 379, "top != nullptr");
                v40 = *(unsigned int *)(context + 4);
                if ((_QWORD)context != *(_QWORD *)(v178[0] + 16 * v40))
                  __assert_rtn("PerformMerging", "MergeCharts.cpp", 382, "top == heap_items[index]");
                v41 = *(_QWORD *)(*a1 + 16 * v40);
                if (v41)
                {
                  v42 = v168;
LABEL_48:
                  if (v42 == v169)
                  {
                    v47 = (char **)&v168;
                  }
                  else
                  {
                    v43 = *(_QWORD *)(*a1 + 16 * *(unsigned int *)(*(_QWORD *)v42 + 4));
                    v44 = *(_DWORD **)(v43 + 232);
                    v45 = *(_DWORD **)(v43 + 240);
                    while (1)
                    {
                      if (v44 == v45)
                      {
                        v42 += 16;
                        goto LABEL_48;
                      }
                      if (*v44 == (_DWORD)v40)
                        break;
                      for (j = *(_DWORD **)(v41 + 232); j != *(_DWORD **)(v41 + 240); ++j)
                      {
                        if (*v44 == *j)
                          goto LABEL_58;
                      }
                      ++v44;
                    }
LABEL_58:
                    v47 = (char **)&v165;
                  }
                  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::emplace_back<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>&>(v47, &context);
                }
                v48 = (std::__shared_weak_count *)*((_QWORD *)&context + 1);
                if (*((_QWORD *)&context + 1))
                {
                  v49 = (unint64_t *)(*((_QWORD *)&context + 1) + 8);
                  do
                    v50 = __ldaxr(v49);
                  while (__stlxr(v50 - 1, v49));
                  if (!v50)
                  {
                    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                    std::__shared_weak_count::__release_weak(v48);
                  }
                }
                if (v34 <= (v169 - v168) >> 4)
                {
                  v38 = (_QWORD *)v166;
                  break;
                }
              }
            }
            for (k = v165; k != v38; k += 2)
            {
              v52 = k[1];
              *(_QWORD *)&v164 = *k;
              *((_QWORD *)&v164 + 1) = v52;
              if (v52)
              {
                v53 = (unint64_t *)(v52 + 8);
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
              }
              cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)v180, &v164);
              v55 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
              if (*((_QWORD *)&v164 + 1))
              {
                v56 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
            }
            v59 = v171;
            for (m = v172; m != v59; std::thread::~thread((std::thread *)(m - 8)))
              ;
            v172 = v59;
            v161 = 0;
            v162 = 0;
            v163 = 0;
            v60 = operator new(0x68uLL);
            *v60 = &off_250D4ACF0;
            v60[1] = a1;
            v61 = (__int128 *)(v60 + 1);
            v60[2] = a2;
            v60[3] = &v184;
            v60[4] = v176;
            v60[5] = v177;
            v60[6] = a5;
            v60[7] = a6;
            v60[8] = v180;
            v60[9] = &v179;
            v60[10] = &v191;
            v60[11] = &v183;
            v60[12] = &v161;
            v190 = (__int32 *)v60;
            v62 = (__int128 *)operator new(0x68uLL);
            v63 = v61[3];
            *(__int128 *)((char *)v62 + 40) = v61[2];
            *(__int128 *)((char *)v62 + 56) = v63;
            v64 = v61[5];
            *(__int128 *)((char *)v62 + 72) = v61[4];
            *(__int128 *)((char *)v62 + 88) = v64;
            v65 = v61[1];
            *(__int128 *)((char *)v62 + 8) = *v61;
            *(_QWORD *)v62 = &off_250D4ACF0;
            *(__int128 *)((char *)v62 + 24) = v65;
            v187 = v62;
            v188 = &v168;
            v66 = dispatch_queue_create("com.gcd.task1", MEMORY[0x24BDAC9C0]);
            dispatch_apply_f((v169 - v168) >> 4, v66, &context, (void (__cdecl *)(void *, size_t))cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke);
            dispatch_release(v66);
            v67 = 126 - 2 * __clz((v162 - (_BYTE *)v161) >> 3);
            if (v162 == v161)
              v68 = 0;
            else
              v68 = v67;
            std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *,false>((uint64_t)v161, (unsigned int *)v162, v68, 1);
            v69 = (char *)v161;
            if (v162 != v161)
            {
              v70 = 0;
              v71 = 0;
              do
              {
                v72 = &v69[8 * v70];
                v74 = *(unsigned int *)v72;
                v73 = *((_DWORD *)v72 + 1);
                v75 = *a1 + 16 * v74;
                __p = 0;
                v159 = 0;
                v160 = 0;
                v155 = 0;
                v156 = 0;
                v157 = 0;
                v76 = *(_QWORD *)(*(_QWORD *)v75 + 232);
                if (*(_QWORD *)(*(_QWORD *)v75 + 240) == v76)
                {
                  v109 = 0;
                }
                else
                {
                  v77 = 0;
                  v78 = 0;
                  do
                  {
                    v79 = *(unsigned int *)(v76 + 4 * v77);
                    v80 = *(_OWORD *)(*a1 + 16 * v79);
                    v154 = v80;
                    if (*((_QWORD *)&v80 + 1))
                    {
                      v81 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
                      do
                        v82 = __ldxr(v81);
                      while (__stxr(v82 + 1, v81));
                    }
                    v83 = v80;
                    if ((_QWORD)v80)
                      goto LABEL_93;
                    for (n = (unsigned int *)v161; ; n += 2)
                    {
                      if (n == (unsigned int *)v162)
                        goto LABEL_96;
                      if (n[1] == (_DWORD)v79)
                        break;
                    }
                    v89 = v159;
                    if (v159 >= v160)
                    {
                      v91 = (char *)__p;
                      v92 = (v159 - (_BYTE *)__p) >> 2;
                      v93 = v92 + 1;
                      if ((unint64_t)(v92 + 1) >> 62)
                        goto LABEL_222;
                      v94 = v160 - (_BYTE *)__p;
                      if ((v160 - (_BYTE *)__p) >> 1 > v93)
                        v93 = v94 >> 1;
                      if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                        v95 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v95 = v93;
                      if (v95)
                      {
                        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v160, v95);
                        v91 = (char *)__p;
                        v89 = v159;
                        LODWORD(v79) = n[1];
                      }
                      else
                      {
                        v96 = 0;
                      }
                      v97 = &v96[4 * v92];
                      *(_DWORD *)v97 = v79;
                      v90 = v97 + 4;
                      while (v89 != v91)
                      {
                        v98 = *((_DWORD *)v89 - 1);
                        v89 -= 4;
                        *((_DWORD *)v97 - 1) = v98;
                        v97 -= 4;
                      }
                      __p = v97;
                      v159 = v90;
                      v160 = &v96[4 * v95];
                      if (v91)
                        operator delete(v91);
                    }
                    else
                    {
                      *(_DWORD *)v159 = v79;
                      v90 = v89 + 4;
                    }
                    v159 = v90;
                    v99 = v156;
                    if (v156 >= v157)
                    {
                      v101 = (char *)v155;
                      v102 = (v156 - (_BYTE *)v155) >> 2;
                      v103 = v102 + 1;
                      if ((unint64_t)(v102 + 1) >> 62)
LABEL_222:
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v104 = v157 - (_BYTE *)v155;
                      if ((v157 - (_BYTE *)v155) >> 1 > v103)
                        v103 = v104 >> 1;
                      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                        v105 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v105 = v103;
                      if (v105)
                      {
                        v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v157, v105);
                        v101 = (char *)v155;
                        v99 = v156;
                      }
                      else
                      {
                        v106 = 0;
                      }
                      v107 = (unsigned int *)&v106[4 * v102];
                      *v107 = *n;
                      v100 = (char *)(v107 + 1);
                      while (v99 != v101)
                      {
                        v108 = *((_DWORD *)v99 - 1);
                        v99 -= 4;
                        *--v107 = v108;
                      }
                      v155 = v107;
                      v156 = v100;
                      v157 = &v106[4 * v105];
                      if (v101)
                        operator delete(v101);
                    }
                    else
                    {
                      *(_DWORD *)v156 = *n;
                      v100 = v99 + 4;
                    }
                    v156 = v100;
                    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](&v154, (uint64_t *)(*a1 + 16 * *n));
                    v83 = v154;
                    if ((_QWORD)v154)
                    {
LABEL_93:
                      v185 = v73;
                      v84 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*(__int32 **)(v83 + 232), *(__int32 **)(v83 + 240), &v185);
                      if (*(__int32 **)(v83 + 240) != v84)
                        *(_QWORD *)(v83 + 240) = v84;
                      cv3d::cv::gess::isochart::AddNoduplicateItem(v154 + 232, v74);
                    }
LABEL_96:
                    v85 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
                    if (*((_QWORD *)&v154 + 1))
                    {
                      v86 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
                      do
                        v87 = __ldaxr(v86);
                      while (__stlxr(v87 - 1, v86));
                      if (!v87)
                      {
                        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                        std::__shared_weak_count::__release_weak(v85);
                      }
                    }
                    v76 = *(_QWORD *)(*(_QWORD *)v75 + 232);
                    v77 = ++v78;
                  }
                  while (v78 < (unint64_t)((*(_QWORD *)(*(_QWORD *)v75 + 240) - v76) >> 2));
                  v109 = v159;
                  if (v159 != __p)
                  {
                    v110 = 0;
                    v111 = 1;
                    v109 = (char *)__p;
                    do
                    {
                      v112 = *(_QWORD *)v75;
                      LODWORD(v154) = *(_DWORD *)&v109[4 * v110];
                      v113 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(*(__int32 **)(v112 + 232), *(__int32 **)(v112 + 240), (__int32 *)&v154);
                      if (*(__int32 **)(v112 + 240) != v113)
                        *(_QWORD *)(v112 + 240) = v113;
                      cv3d::cv::gess::isochart::AddNoduplicateItem(*(_QWORD *)v75 + 232, *((_DWORD *)v155 + v110));
                      v110 = v111;
                      v109 = (char *)__p;
                      ++v111;
                    }
                    while (v110 < (v159 - (_BYTE *)__p) >> 2);
                  }
                }
                if (v155)
                {
                  v156 = (char *)v155;
                  operator delete(v155);
                  v109 = (char *)__p;
                }
                if (v109)
                {
                  v159 = v109;
                  operator delete(v109);
                }
                v69 = (char *)v161;
                v70 = ++v71;
              }
              while (v71 < (unint64_t)((v162 - (_BYTE *)v161) >> 3));
            }
            v114 = v179;
            p_context = v187;
            if (v187 == &context)
            {
              p_context = &context;
              v116 = 4;
              v30 = a7;
            }
            else
            {
              v30 = a7;
              if (!v187)
                goto LABEL_158;
              v116 = 5;
            }
            (*(void (**)(void))(*(_QWORD *)p_context + 8 * v116))();
LABEL_158:
            v117 = v190;
            if (v190 == v189)
            {
              v117 = v189;
              v118 = 4;
              goto LABEL_162;
            }
            if (v190)
            {
              v118 = 5;
LABEL_162:
              (*(void (**)(void))(*(_QWORD *)v117 + 8 * v118))();
            }
            if (v161)
            {
              v162 = (char *)v161;
              operator delete(v161);
            }
          }
          while (v114 >= 1 && v182);
        }
        std::mutex::~mutex(&v191);
        v191.__m_.__sig = (uint64_t)&v165;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v119);
        v191.__m_.__sig = (uint64_t)&v168;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
        v191.__m_.__sig = (uint64_t)&v171;
        std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
      }
      else if (v182)
      {
        v120 = (float)v14;
        do
        {
          v121 = *(_QWORD *)(v30 + 24);
          if (v121 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 48))(v121) & 1) != 0)
            break;
          cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(v180, 0, &v191);
          if (!v191.__m_.__sig)
            __assert_rtn("PerformMerging", "MergeCharts.cpp", 178, "top != nullptr");
          v122 = *(unsigned int *)(v191.__m_.__sig + 4);
          if (v191.__m_.__sig != *(_QWORD *)(v178[0] + 16 * v122))
            __assert_rtn("PerformMerging", "MergeCharts.cpp", 181, "top == heap_items[index]");
          if (*(_QWORD *)(*a1 + 16 * v122))
          {
            LOBYTE(v168) = 0;
            LODWORD(v171) = 0;
            cv3d::cv::gess::isochart::IsoChartMesh::MergeAdjacentChart(a1, a2, v122, v184, v176, (uint64_t *)v177, &v168, &v171, &v192, a5, a6, v183);
            if (!(_BYTE)v168)
              goto LABEL_201;
            v123 = *a1 + 16 * v122;
            v124 = *(_QWORD *)v123;
            v125 = *(_QWORD *)(*(_QWORD *)v123 + 232);
            if (*(_QWORD *)(*(_QWORD *)v123 + 240) != v125)
            {
              v126 = 0;
              v127 = 0;
              do
              {
                v128 = *(_OWORD *)(*a1 + 16 * *(unsigned int *)(v125 + 4 * v126));
                context = v128;
                v129 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
                if (*((_QWORD *)&v128 + 1))
                {
                  v130 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
                  do
                    v131 = __ldxr(v130);
                  while (__stxr(v131 + 1, v130));
                }
                v132 = v128;
                if ((_QWORD)v128)
                {
                  v133 = *(__int32 **)(v128 + 232);
                  v134 = *(__int32 **)(v128 + 240);
                  v189[0] = v171;
                  v135 = std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(v133, v134, v189);
                  if (*(__int32 **)(v132 + 240) != v135)
                    *(_QWORD *)(v132 + 240) = v135;
                  cv3d::cv::gess::isochart::AddNoduplicateItem(v132 + 232, v122);
                }
                if (v129)
                {
                  p_shared_owners = (unint64_t *)&v129->__shared_owners_;
                  do
                    v137 = __ldaxr(p_shared_owners);
                  while (__stlxr(v137 - 1, p_shared_owners));
                  if (!v137)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
                v125 = *(_QWORD *)(*(_QWORD *)v123 + 232);
                v126 = ++v127;
              }
              while (v127 < (unint64_t)((*(_QWORD *)(*(_QWORD *)v123 + 240) - v125) >> 2));
              v124 = *(_QWORD *)(*a1 + 16 * v122);
              v30 = v150;
            }
            v138 = -(float)((float)((float)v122 / v120)
                          + (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v124 + 40) + 160)
                                                              - *(_QWORD *)(*(_QWORD *)(v124 + 40) + 152)) >> 2));
            sig = v191.__m_.__sig;
            *(float *)v191.__m_.__sig = v138;
            v174 = __PAIR128__(*(unint64_t *)v191.__m_.__opaque, sig);
            if (*(_QWORD *)v191.__m_.__opaque)
            {
              v140 = (unint64_t *)(*(_QWORD *)v191.__m_.__opaque + 8);
              do
                v141 = __ldxr(v140);
              while (__stxr(v141 + 1, v140));
            }
            cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)v180, (__int128 *)&v174);
            v142 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
            if (*((_QWORD *)&v174 + 1))
            {
              v143 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v142);
              }
            }
            if (!--v179)
              v145 = 6;
            else
LABEL_201:
              v145 = 0;
          }
          else
          {
            v145 = 5;
          }
          v146 = *(std::__shared_weak_count **)v191.__m_.__opaque;
          if (*(_QWORD *)v191.__m_.__opaque)
          {
            v147 = (unint64_t *)(*(_QWORD *)v191.__m_.__opaque + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
        }
        while (v145 != 6 && v182);
      }
      std::mutex::~mutex(&v192);
    }
    if (v176[0])
      operator delete(v176[0]);
    if (v177[0])
    {
      v177[1] = v177[0];
      operator delete(v177[0]);
    }
    v192.__m_.__sig = (uint64_t)v178;
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v192);
  }
  return cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)v180);
}

void sub_23C5AB81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (__p)
    operator delete(__p);
  if (a48)
    operator delete(a48);
  *(_QWORD *)(v55 - 184) = &a51;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 184));
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (v3 - *(_QWORD *)a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *(_QWORD *)a1 + 16 * a2;
      while (v3 != v5)
        v3 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v3 - 16);
      *(_QWORD *)(a1 + 8) = v5;
    }
  }
  else
  {
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__append((char **)a1, a2 - v4);
  }
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateAdjacentChart(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  unsigned int *v23;
  uint64_t v24;
  __int32 v25;
  void *__p[2];
  char v27;
  int v28;

  v8 = (uint64_t)(a1 + 29);
  a1[30] = a1[29];
  v9 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  v28 = -1;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v9 + 56), (uint64_t)&v28, (unsigned __int8 *)__p);
  if (v27 < 0)
    operator delete(__p[0]);
  v12 = a1[5];
  LODWORD(__p[0]) = v11;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)(v12 + 56), (unsigned int *)__p, v10);
  v14 = a1[5];
  v16 = *(_QWORD *)(v14 + 152);
  v15 = *(_QWORD *)(v14 + 160);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    v18 = 0;
    v19 = v17 >> 2;
    if (v19 <= 1)
      v20 = 1;
    else
      v20 = v19;
    do
    {
      v21 = *(_QWORD *)(v13 + 40);
      if (v18 >= (*(_QWORD *)(v13 + 48) - v21) >> 2)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a4, (unsigned int *)(v21 + 4 * v18), __p);
      for (i = 0; i != 12; i += 4)
      {
        v23 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a4 + 104, (unsigned int *)((char *)__p[0] + i));
        v24 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(a4 + 104, v23) + 16);
        if ((_DWORD)v24 != -1)
        {
          v25 = *(_DWORD *)(*a3 + 4 * v24);
          if (v25 != a2)
            cv3d::cv::gess::isochart::AddNoduplicateItem(v8, v25);
        }
      }
      ++v18;
    }
    while (v18 != v20);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23C5ABC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize(uint64_t a1, unint64_t a2)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::resize(a1, a2);
  return 1;
}

void sub_23C5ABCB8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23C5ABCB0);
}

float32x4_t cv3d::cv::gess::isochart::IsoChartMesh::CalculateAverageNormal(uint64_t a1, float32x4_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t result;
  float32x4_t v11;
  float32x4_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  if (v3)
  {
    v5 = 0;
    v6 = v3 >> 2;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = 0uLL;
    do
    {
      v11 = v8;
      cv3d::cv::gess::math::FaceNormal(*(_QWORD *)(a1 + 40), v5, &v12);
      v8 = vaddq_f32(v11, v12);
      ++v5;
    }
    while (v7 != v5);
  }
  else
  {
    v8 = 0uLL;
  }
  v9 = vmulq_f32(v8, v8);
  v9.i32[3] = 0;
  v9.i64[0] = vpaddq_f32(v9, v9).u64[0];
  v9.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v9.f32));
  result = vdivq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
  *a2 = result;
  return result;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4)
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100]((char **)a1, a2);
  else
    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)a1 + 16 * v4), (uint64_t *)a2);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)a2 + 8) = v5;
  *(_QWORD *)(a1 + 32) = v5 + 1;
  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap((uint64_t *)a1, v5);
  return 1;
}

void cv3d::cv::gess::isochart::IsoChartMesh::MergeAdjacentChart(uint64_t *a1, _QWORD *a2, unsigned int a3, unint64_t a4, _QWORD *a5, uint64_t *a6, _BYTE *a7, _DWORD *a8, std::mutex *a9, const float *a10, const float *a11, BOOL a12)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const char *v69;
  int v70;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  cv3d::cv::gess::isochart::IsoChartMesh *v79;
  std::__shared_weak_count *v80;

  *a7 = 0;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 16 * a3);
  v14 = *v13;
  v15 = *(_QWORD *)(*v13 + 232);
  v16 = *(_QWORD *)(*v13 + 240) - v15;
  if (!v16)
    return;
  v19 = a3;
  v20 = v16 >> 2;
  if (v20 != 1)
  {
    v21 = 0;
    v22 = (_DWORD *)(v15 + 4);
    v23 = v20 - 1;
    do
    {
      v24 = v21 + 1;
      if (*(_QWORD *)(v12 + 16 * *(unsigned int *)(v15 + 4 * v21)))
        v25 = v24 >= v20;
      else
        v25 = 1;
      if (!v25)
      {
        v26 = *a6;
        v27 = v22;
        v28 = v23;
        do
        {
          v29 = *v27;
          if (*(_QWORD *)(v12 + 16 * v29))
          {
            v30 = *(unsigned int *)(v15 + 4 * v21);
            v31 = *(float32x4_t *)(v26 + 16 * v19);
            v32 = vmulq_f32(v31, *(float32x4_t *)(v26 + 16 * v30));
            v32.i32[3] = 0;
            v33 = vmulq_f32(v31, *(float32x4_t *)(v26 + 16 * v29));
            v33.i32[3] = 0;
            if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)) < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)))
            {
              *(_DWORD *)(v15 + 4 * v21) = v29;
              *v27 = v30;
            }
          }
          ++v27;
          --v28;
        }
        while (v28);
      }
      --v23;
      ++v22;
      ++v21;
    }
    while (v24 != v20 - 1);
  }
  v34 = 0;
  v35 = (float)a4 * 0.7;
  *a8 = -1;
  if ((unint64_t)v35 <= 0x2BC)
    v36 = 700;
  else
    v36 = (unint64_t)v35;
  v79 = 0;
  v80 = 0;
  v77 = 0;
  v78 = 0;
  v75 = 0;
  v76 = 0;
  if (v20 <= 1)
    v37 = 1;
  else
    v37 = v20;
  while (1)
  {
    v38 = *(unsigned int *)(*(_QWORD *)(v14 + 232) + 4 * v34);
    if (((*(_QWORD *)(*a5 + ((v38 >> 3) & 0x1FFFFFF8)) >> v38) & 1) != 0)
    {
      std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](&v75, (uint64_t *)(*a1 + 16 * v38));
      if (v75)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v75 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(v75 + 40) + 152);
        if (v39)
        {
          if (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*v13 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v13 + 40) + 152)) >> 2)
             + (v39 >> 2) <= v36)
          {
            cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart(a1, v13, (uint64_t)&v75, &v79, &v77, a10, a11, a12);
            if (v79)
              break;
          }
        }
      }
    }
LABEL_36:
    if (++v34 == v37)
      goto LABEL_37;
  }
  LOBYTE(v74) = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::TryParameterize(v79, (BOOL *)&v74);
  if (!(_BYTE)v74)
  {
    v40 = v80;
    v79 = 0;
    v80 = 0;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v78;
    v77 = 0;
    v78 = 0;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    goto LABEL_36;
  }
  *a8 = v38;
LABEL_37:
  if (!v79)
  {
    std::mutex::lock(a9);
    *(_QWORD *)(*a5 + ((v19 >> 3) & 0x1FFFFFF8)) &= ~(1 << v19);
    *a7 = 0;
    std::mutex::unlock(a9);
    goto LABEL_62;
  }
  v46 = *a8;
  v47 = *a1 + 16 * v46;
  if (*(_QWORD *)(*(_QWORD *)v47 + 40) != *(_QWORD *)(*a2 + 16 * v46))
  {
    v69 = "&(children[additional_chart_id]->mesh_) == &(*children_mesh[additional_chart_id])";
    v70 = 636;
    goto LABEL_81;
  }
  if (*(_QWORD *)(*(_QWORD *)(*a1 + 16 * v19) + 40) != *(_QWORD *)(*a2 + 16 * v19))
  {
    v69 = "&(children[main_chart_id]->mesh_) == &(*children_mesh[main_chart_id])";
    v70 = 637;
LABEL_81:
    __assert_rtn("MergeAdjacentChart", "MergeCharts.cpp", v70, v69);
  }
  v74 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v47, &v74);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v74 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](*a1 + 16 * v19, &v74);
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v74 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](*a2 + 16 * *a8, &v74);
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v74 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](*a2 + 16 * v19, &v74);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*a1 + 16 * v19), (uint64_t *)&v79);
  std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100]((_QWORD *)(*a2 + 16 * v19), &v77);
  *a7 = 1;
LABEL_62:
  v60 = v76;
  if (v76)
  {
    v61 = (unint64_t *)&v76->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v78;
  if (v78)
  {
    v64 = (unint64_t *)&v78->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v80;
  if (v80)
  {
    v67 = (unint64_t *)&v80->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_23C5AC368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::emplace_back<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>&>(char **a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v32 = v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v30 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v31 = v27;
    v29 = v26.i64[0];
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return v11 - 16;
}

void cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart(_QWORD *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, const float *a6, const float *a7, BOOL a8)
{
  std::__shared_weak_count *end;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const cv3d::cv::gess::mesh::TriMesh *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  cv3d::cv::gess::isochart *v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  char v53;
  char v54;
  void *__p;
  void *v56;
  uint64_t v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  void *v61[3];
  std::vector<unsigned int> v62;

  if (!*a2)
    cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart();
  if (!*(_QWORD *)a3)
    cv3d::cv::gess::isochart::IsoChartMesh::TryMergeChart();
  v62.__begin_ = 0;
  v62.__end_ = 0;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a4, (__int128 *)&v62);
  end = (std::__shared_weak_count *)v62.__end_;
  if (v62.__end_)
  {
    v17 = (unint64_t *)(v62.__end_ + 2);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
      std::__shared_weak_count::__release_weak(end);
    }
  }
  std::vector<unsigned int>::vector(&v62, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*a2 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 104)) >> 2);
  std::vector<BOOL>::vector(v61, (uint64_t)(*(_QWORD *)(*(_QWORD *)(*a2 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 104)) >> 2);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  __p = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts((uint64_t)a2, a3, &v62, v61, &v58, &__p, &v54);
  if (v54)
  {
    v19 = v59 - (_BYTE *)v58;
    if ((unint64_t)(v59 - (_BYTE *)v58) >= 8)
    {
      v53 = 0;
      cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology((uint64_t)&v58, *(_QWORD *)(*a2 + 40), &v53);
      if (v53)
      {
        cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology((uint64_t)&__p, *(_QWORD *)(*(_QWORD *)a3 + 40), &v53);
        if (v53)
        {
          v51 = 0;
          v52 = 0;
          v49 = 0;
          v50 = 0;
          cv3d::cv::gess::isochart::IsoChartMesh::MergeTwoCharts(a2, a3, (uint64_t *)&v62, v61, v19 >> 2, (uint64_t)&v51, &v49, a6, a7, a8);
          if (cv3d::cv::gess::isochart::IsVertexManifold(v49, v20)
            && cv3d::cv::gess::isochart::IsochartCountBoundaryLoops((uint64_t)v49) <= 1)
          {
            v21 = v51;
            v22 = v51 + 29;
            v23 = *(_QWORD *)a3;
            v24 = *(_QWORD *)(*(_QWORD *)a3 + 232);
            if (*(_QWORD *)(*(_QWORD *)a3 + 240) != v24)
            {
              v25 = 0;
              v48 = (uint64_t)(v51 + 31);
              do
              {
                v26 = *(unsigned int *)(v24 + 4 * v25);
                if (*(_QWORD *)(*a1 + 16 * v26) != *a2)
                {
                  v28 = (_DWORD *)v21[30];
                  v27 = v21[31];
                  if ((unint64_t)v28 >= v27)
                  {
                    v30 = (_DWORD *)*v22;
                    v31 = ((uint64_t)v28 - *v22) >> 2;
                    v32 = v31 + 1;
                    if ((unint64_t)(v31 + 1) >> 62)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    v33 = v27 - (_QWORD)v30;
                    if (v33 >> 1 > v32)
                      v32 = v33 >> 1;
                    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                      v34 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v34 = v32;
                    if (v34)
                    {
                      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v48, v34);
                      v30 = (_DWORD *)v21[29];
                      v28 = (_DWORD *)v21[30];
                      LODWORD(v26) = *(_DWORD *)(v24 + 4 * v25);
                    }
                    else
                    {
                      v35 = 0;
                    }
                    v36 = &v35[4 * v31];
                    *(_DWORD *)v36 = v26;
                    v29 = v36 + 4;
                    while (v28 != v30)
                    {
                      v37 = *--v28;
                      *((_DWORD *)v36 - 1) = v37;
                      v36 -= 4;
                    }
                    v21[29] = v36;
                    v21[30] = v29;
                    v21[31] = &v35[4 * v34];
                    if (v30)
                      operator delete(v30);
                  }
                  else
                  {
                    *v28 = v26;
                    v29 = v28 + 1;
                  }
                  v21[30] = v29;
                  v23 = *(_QWORD *)a3;
                }
                ++v25;
                v24 = *(_QWORD *)(v23 + 232);
              }
              while (v25 < (*(_QWORD *)(v23 + 240) - v24) >> 2);
            }
            v38 = *a2;
            v39 = *(_QWORD *)(*a2 + 232);
            if (*(_QWORD *)(*a2 + 240) != v39)
            {
              v40 = 0;
              do
              {
                v41 = *(unsigned int *)(v39 + 4 * v40);
                if (*(_QWORD *)(*a1 + 16 * v41) != *(_QWORD *)a3)
                {
                  cv3d::cv::gess::isochart::AddNoduplicateItem((uint64_t)v22, v41);
                  v38 = *a2;
                }
                ++v40;
                v39 = *(_QWORD *)(v38 + 232);
              }
              while (v40 < (*(_QWORD *)(v38 + 240) - v39) >> 2);
            }
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](a4, (uint64_t *)&v51);
            std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](a5, (uint64_t *)&v49);
          }
          v42 = v50;
          if (v50)
          {
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = v52;
          if (v52)
          {
            v46 = (unint64_t *)&v52->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
      }
    }
  }
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v61[0])
    operator delete(v61[0]);
  if (v62.__begin_)
  {
    v62.__end_ = v62.__begin_;
    operator delete(v62.__begin_);
  }
}

void sub_23C5AC8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t v24;
  void *v26;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21)
  {
    a22 = (uint64_t)a21;
    operator delete(a21);
  }
  if (a24)
    operator delete(a24);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::TryParameterize(cv3d::cv::gess::isochart::IsoChartMesh *this, BOOL *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float *v9;
  int64x2_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  *a2 = 0;
  result = cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization(this);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 4);
    if (!v5 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5), (result & 1) == 0))
    {
      LOWORD(v9) = 256;
      BYTE2(v9) = 1;
      v10 = vdupq_n_s64(0xAuLL);
      v11 = 20;
      v12 = xmmword_23C60C620;
      v13 = 0x7F7FFFFFFF7FFFFFLL;
      v14 = -1;
      memset(v15, 0, sizeof(v15));
      v16 = 0;
      memset(v17, 0, sizeof(v17));
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v8 = 0;
      v21 = 0;
      v7 = 0.0;
      *a2 = cv3d::cv::gess::isochart::IsoChartMesh::OptimizeChartL2Stretch(this, &v9, (float *)&v8 + 1, (float *)&v8, &v21, &v7, 0);
      v6 = *((_QWORD *)this + 4);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      if (*((_QWORD *)&v19 + 1))
      {
        *(_QWORD *)&v20 = *((_QWORD *)&v19 + 1);
        operator delete(*((void **)&v19 + 1));
      }
      if ((_QWORD)v18)
      {
        *((_QWORD *)&v18 + 1) = v18;
        operator delete((void *)v18);
      }
      v21 = (unint64_t)v17 + 8;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      return cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::~MaxHeap((uint64_t)v15);
    }
  }
  return result;
}

void sub_23C5ACA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  cv3d::cv::gess::isochart::ChartOptimizeInfo::~ChartOptimizeInfo((cv3d::cv::gess::isochart::ChartOptimizeInfo *)va);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _BYTE *a7)
{
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 is_boundary;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  int **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int *v50;
  char *v51;
  int *v52;
  int v53;
  unint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  char *v65;
  char *v66;
  unsigned int v67;
  unsigned int **v68;
  uint64_t v69;
  _QWORD *v70;
  _BYTE *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void *__p[2];
  char v77;
  unsigned int v78;

  *a7 = 0;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  v78 = -1;
  v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v13 + 8), (uint64_t)&v78, (unsigned __int8 *)__p);
  if (v77 < 0)
    operator delete(__p[0]);
  v15 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  v78 = -1;
  v17 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v15 + 8), (uint64_t)&v78, (unsigned __int8 *)__p);
  if (v77 < 0)
    operator delete(__p[0]);
  if (v14 == -1)
    cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts();
  if (v17 == -1)
    cv3d::cv::gess::isochart::IsoChartMesh::CollectSharedVerts();
  v71 = a7;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  LODWORD(__p[0]) = v14;
  v74 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v18 + 8), (unsigned int *)__p, v16);
  v19 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  LODWORD(__p[0]) = v17;
  v73 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)(v19 + 8), (unsigned int *)__p, v20);
  v21 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 112)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 104)) >> 2;
  std::vector<BOOL>::vector(__p, v21);
  v22 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  if (*(_QWORD *)(v22 + 112) != *(_QWORD *)(v22 + 104))
  {
    v23 = 0;
    do
    {
      v78 = v23;
      is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(v22, (uint64_t)&v78);
      v25 = v23 >> 6;
      v26 = 1 << v23;
      if (is_boundary)
        v27 = *((_QWORD *)__p[0] + v25) | v26;
      else
        v27 = *((_QWORD *)__p[0] + v25) & ~v26;
      *((_QWORD *)__p[0] + v25) = v27;
      ++v23;
      v22 = *(_QWORD *)(*(_QWORD *)a2 + 40);
    }
    while (v23 < (uint64_t)(*(_QWORD *)(v22 + 112) - *(_QWORD *)(v22 + 104)) >> 2);
  }
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (*(_QWORD *)(v28 + 112) != *(_QWORD *)(v28 + 104))
  {
    v29 = 0;
    v69 = (uint64_t)(a5 + 2);
    v70 = a6 + 2;
    v72 = a5;
    do
    {
      v78 = v29;
      *(_QWORD *)(*a4 + 8 * (v29 >> 6)) |= 1 << v29;
      if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(v28, (uint64_t)&v78))
      {
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 112)
            - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 104);
        if (!v30)
          goto LABEL_34;
        v31 = 0;
        v32 = 0;
        v33 = v29 >> 6;
        v34 = v30 >> 2;
        v35 = *(_QWORD *)(v74 + 40);
        v36 = *(_QWORD *)(v73 + 40);
        v37 = -1;
        v38 = 1;
        do
        {
          if (((*(_QWORD *)((char *)__p[0] + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) != 0)
          {
            if ((*(_QWORD *)(v74 + 48) - v35) >> 2 <= (unint64_t)v78
              || (*(_QWORD *)(v73 + 48) - v36) >> 2 <= v31)
            {
              __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
            }
            if (*(_DWORD *)(v35 + 4 * v78) == *(_DWORD *)(v36 + 4 * v31))
            {
              if (v32)
                goto LABEL_72;
              v37 = v38 - 1;
              v32 = 1;
            }
          }
          v31 = v38;
        }
        while (v34 > v38++);
        if (v32 == 1)
        {
          v40 = (int *)*a6;
          v41 = (int *)a6[1];
          v42 = (int *)*a6;
          if ((int *)*a6 != v41)
          {
            while (*v42 != v37)
            {
              if (++v42 == v41)
              {
                v42 = (int *)a6[1];
                break;
              }
            }
          }
          if (v42 != v41)
            goto LABEL_72;
          if ((unint64_t)v41 >= *v70)
          {
            v45 = v41 - v40;
            if ((unint64_t)(v45 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v46 = *v70 - (_QWORD)v40;
            v47 = v46 >> 1;
            if (v46 >> 1 <= (unint64_t)(v45 + 1))
              v47 = v45 + 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v47;
            if (v48)
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v70, v48);
            else
              v49 = 0;
            v50 = (int *)&v49[4 * v45];
            *v50 = v37;
            v43 = v50 + 1;
            v52 = (int *)*a6;
            v51 = (char *)a6[1];
            if (v51 == (char *)*a6)
            {
              v44 = (int **)a6;
            }
            else
            {
              do
              {
                v53 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *--v50 = v53;
              }
              while (v51 != (char *)v52);
              v44 = (int **)a6;
              v51 = (char *)*a6;
            }
            *v44 = v50;
            v44[1] = v43;
            v44[2] = (int *)&v49[4 * v48];
            if (v51)
            {
              operator delete(v51);
              v44 = (int **)a6;
            }
            v33 = v29 >> 6;
            a5 = v72;
          }
          else
          {
            *v41 = v37;
            v43 = v41 + 1;
            v44 = (int **)a6;
          }
          v44[1] = v43;
          v55 = (unsigned int *)a5[1];
          v54 = a5[2];
          if ((unint64_t)v55 >= v54)
          {
            v57 = *a5;
            v58 = ((uint64_t)v55 - *a5) >> 2;
            if ((unint64_t)(v58 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v59 = v33;
            v60 = v54 - v57;
            v61 = v60 >> 1;
            if (v60 >> 1 <= (unint64_t)(v58 + 1))
              v61 = v58 + 1;
            if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
              v62 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v62 = v61;
            if (v62)
              v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v69, v62);
            else
              v63 = 0;
            v64 = (unsigned int *)&v63[4 * v58];
            *v64 = v78;
            v56 = v64 + 1;
            v66 = (char *)*v72;
            v65 = (char *)v72[1];
            if (v65 == (char *)*v72)
            {
              v68 = (unsigned int **)v72;
            }
            else
            {
              do
              {
                v67 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *--v64 = v67;
              }
              while (v65 != v66);
              v68 = (unsigned int **)v72;
              v65 = (char *)*v72;
            }
            *v68 = v64;
            v68[1] = v56;
            v68[2] = (unsigned int *)&v63[4 * v62];
            if (v65)
              operator delete(v65);
            v33 = v59;
            a5 = v72;
          }
          else
          {
            *v55 = v78;
            v56 = v55 + 1;
          }
          a5[1] = v56;
          *(_DWORD *)(*a3 + 4 * v29) = v37;
          *(_QWORD *)(*a4 + 8 * v33) &= ~(1 << v29);
        }
        else
        {
LABEL_34:
          *(_DWORD *)(*a3 + 4 * v29) = v21++;
        }
      }
      else
      {
        *(_DWORD *)(*a3 + 4 * v29) = v21++;
      }
      ++v29;
      v28 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    }
    while (v29 < (uint64_t)(*(_QWORD *)(v28 + 112) - *(_QWORD *)(v28 + 104)) >> 2);
  }
  *v71 = 1;
LABEL_72:
  if (__p[0])
    operator delete(__p[0]);
}

void sub_23C5ACFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned int *v3;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  unsigned int *v19;
  _QWORD *v20;
  size_t v21;
  unsigned int i;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  unsigned int v42;
  void *__dst;
  unsigned int *v44;
  char *v45;

  v3 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    cv3d::cv::gess::isochart::IsoChartMesh::CheckMergingTopology();
  *a3 = 0;
  __dst = 0;
  v44 = 0;
  v45 = 0;
  v42 = *v3;
  v7 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v45, 1uLL);
  v9 = (char *)&v7[v8];
  *v7 = v42;
  v10 = v7 + 1;
  v12 = (char *)__dst;
  v11 = (char *)v44;
  if (v44 != __dst)
  {
    do
    {
      v13 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--v7 = v13;
    }
    while (v11 != v12);
    v11 = (char *)__dst;
  }
  __dst = v7;
  v44 = v10;
  v45 = v9;
  if (v11)
    operator delete(v11);
  v44 = v10;
  v15 = *(unsigned int **)a1;
  v14 = *(_BYTE **)(a1 + 8);
  v16 = (_BYTE *)(*(_QWORD *)a1 + 4);
  v17 = v14 - v16;
  if (v14 != v16)
  {
    memmove(*(void **)a1, v16, v14 - v16);
    v10 = v44;
  }
  v18 = (char *)v15 + v17;
  *(_QWORD *)(a1 + 8) = (char *)v15 + v17;
  v19 = (unsigned int *)__dst;
  if (__dst != v10)
  {
    v20 = (_QWORD *)(a2 + 104);
    do
    {
      v42 = *v19;
      v21 = (char *)v10 - (char *)(v19 + 1);
      if (v21)
        memmove(v19, v19 + 1, v21);
      v44 = (unsigned int *)((char *)v19 + v21);
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v41, v20, &v42);
      for (i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v41);
            i != -1;
            i = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v41))
      {
        v23 = *(unsigned int **)a1;
        v24 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
        if (v24)
        {
          v25 = 0;
          v26 = v24 >> 2;
          if (v26 <= 1)
            v26 = 1;
          while (v23[v25] != i)
          {
            ++v25;
            if (!--v26)
              goto LABEL_40;
          }
          v27 = v44;
          if (v44 >= (unsigned int *)v45)
          {
            v29 = ((char *)v44 - (_BYTE *)__dst) >> 2;
            if ((unint64_t)(v29 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v30 = (v45 - (_BYTE *)__dst) >> 1;
            if (v30 <= v29 + 1)
              v30 = v29 + 1;
            if ((unint64_t)(v45 - (_BYTE *)__dst) >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v45, v31);
              i = v23[v25];
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[4 * v29];
            *(_DWORD *)v33 = i;
            v28 = (unsigned int *)(v33 + 4);
            v35 = (char *)__dst;
            v34 = (char *)v44;
            if (v44 != __dst)
            {
              do
              {
                v36 = *((_DWORD *)v34 - 1);
                v34 -= 4;
                *((_DWORD *)v33 - 1) = v36;
                v33 -= 4;
              }
              while (v34 != v35);
              v34 = (char *)__dst;
            }
            __dst = v33;
            v44 = v28;
            v45 = &v32[4 * v31];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v44 = i;
            v28 = v27 + 1;
          }
          v44 = v28;
          v37 = *(_QWORD *)(a1 + 8);
          v38 = *(_QWORD *)a1 + v25 * 4;
          v39 = v37 - *(_QWORD *)a1 - v25 * 4;
          v40 = v39 - 4;
          if (v38 + 4 != v37)
            memmove((void *)v38, (const void *)(v38 + 4), v39 - 4);
          *(_QWORD *)(a1 + 8) = v38 + (v40 & 0xFFFFFFFFFFFFFFFCLL);
        }
LABEL_40:
        ;
      }
      v19 = (unsigned int *)__dst;
      v10 = v44;
    }
    while (__dst != v44);
    v18 = *(char **)(a1 + 8);
    v10 = (unsigned int *)__dst;
  }
  if (*(char **)a1 == v18)
    *a3 = 1;
  if (v10)
  {
    v44 = v10;
    operator delete(v10);
  }
}

void sub_23C5AD2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::MergeTwoCharts(uint64_t *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, cv3d::cv::gess::mesh::TriMesh **a7, const float *a8, const float *a9, BOOL a10)
{
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  cv3d::cv::gess::mesh::TriMesh *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  char *v71;
  _DWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _DWORD *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  std::vector<int>::pointer end;
  int v113;
  int *v114;
  std::vector<int>::pointer begin;
  uint64_t v116;
  unint64_t v117;
  int64_t v118;
  unint64_t v119;
  char *v120;
  int *v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  std::vector<int>::pointer v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  std::vector<int>::pointer v130;
  uint64_t v131;
  unint64_t v132;
  int64_t v133;
  unint64_t v134;
  char *v135;
  int *v136;
  int v137;
  cv3d::cv::gess::mesh::TriMesh *v138;
  cv3d::cv::gess::mesh::TriMesh *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  cv3d::cv::gess::mesh::TriMesh *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  cv3d::cv::gess::mesh::TriMesh *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  const char *v168;
  const char *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  cv3d::cv::gess::mesh::TriMesh *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  cv3d::cv::gess::mesh::TriMesh *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  cv3d::cv::gess::mesh::TriMesh *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  cv3d::cv::gess::mesh::TriMesh *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  cv3d::cv::gess::mesh::TriMesh *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  cv3d::cv::gess::mesh::TriMesh *v211;
  unsigned int v212;
  cv3d::cv::gess::mesh::TriMesh *v213;
  cv3d::cv::gess::mesh::TriMesh *v214;
  unsigned int v215;
  cv3d::cv::gess::mesh::TriMesh *v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  unsigned int v228;
  cv3d::cv::gess::mesh::TriMesh *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  cv3d::cv::gess::mesh::TriMesh *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  cv3d::cv::gess::mesh::TriMesh *v245;
  uint64_t v246;
  uint64_t v247;
  cv3d::cv::gess::mesh::TriMesh *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t i;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  int v257;
  cv3d::cv::gess::mesh::TriMesh *v258;
  uint64_t v259;
  unsigned int *v260;
  unint64_t v261;
  uint64_t v262;
  cv3d::cv::gess::mesh::TriMesh *v263;
  unsigned int *v264;
  _QWORD *v265;
  uint64_t v266;
  cv3d::cv::gess::mesh::TriMesh *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  int v272;
  cv3d::cv::gess::mesh::TriMesh *v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  int v282;
  cv3d::cv::gess::mesh::TriMesh *v283;
  uint64_t v284;
  unsigned int *v285;
  unint64_t v286;
  uint64_t v287;
  cv3d::cv::gess::mesh::TriMesh *v288;
  unsigned int *v289;
  _QWORD *v290;
  uint64_t v291;
  cv3d::cv::gess::mesh::TriMesh *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  int v297;
  cv3d::cv::gess::mesh::TriMesh *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  cv3d::cv::gess::mesh::TriMesh *v302;
  uint64_t v303;
  uint64_t v304;
  float v305;
  cv3d::cv::gess::mesh::TriMesh *v306;
  uint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  cv3d::cv::gess::mesh::TriMesh *v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  cv3d::cv::gess::mesh::TriMesh *v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  cv3d::cv::gess::mesh::TriMesh *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t j;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  int v334;
  cv3d::cv::gess::mesh::TriMesh *v335;
  uint64_t v336;
  unsigned int *v337;
  unint64_t v338;
  uint64_t v339;
  cv3d::cv::gess::mesh::TriMesh *v340;
  unsigned int *v341;
  _QWORD *v342;
  uint64_t v343;
  cv3d::cv::gess::mesh::TriMesh *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  int v349;
  cv3d::cv::gess::mesh::TriMesh *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  int v359;
  cv3d::cv::gess::mesh::TriMesh *v360;
  uint64_t v361;
  unsigned int *v362;
  unint64_t v363;
  uint64_t v364;
  cv3d::cv::gess::mesh::TriMesh *v365;
  unsigned int *v366;
  _QWORD *v367;
  uint64_t v368;
  cv3d::cv::gess::mesh::TriMesh *v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  int v374;
  cv3d::cv::gess::mesh::TriMesh *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  cv3d::cv::gess::mesh::TriMesh *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  float v383;
  cv3d::cv::gess::mesh::TriMesh *v384;
  int v385;
  const char *v386;
  int v387;
  const char *v388;
  int v389;
  const char *v390;
  int v391;
  unsigned int v392;
  unsigned int v394;
  void *v397;
  void *v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  int v402;
  void *__p[2];
  char v404;
  int v405;
  int v406;
  void *v407[3];
  std::vector<int> v408;
  __int128 v409;
  char *v410;
  unsigned int v411;
  BOOL v412;
  unsigned int v413[3];

  v412 = a10;
  _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4mesh7TriMeshENS_9allocatorIS5_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v409);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)a7, &v409);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
  if (*((_QWORD *)&v409 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v411 = -1;
  if (v412)
  {
    v18 = *a7;
    std::string::basic_string[abi:ne180100]<0>(&v409, "f:imt");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v18, &v411, &v409);
    if (SHIBYTE(v410) < 0)
      operator delete((void *)v409);
  }
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,void>(*a7, a8, a9, &v412, &v409);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](a6, &v409);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v409 + 1);
  if (*((_QWORD *)&v409 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v409 = 0uLL;
  v410 = 0;
  memset(&v408, 0, sizeof(v408));
  std::vector<float>::reserve((void **)&v409, 3* (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 112)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 104)) >> 2)- a5+ ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 104)) >> 2)));
  std::vector<unsigned int>::reserve(&v408, 3* (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 152)) >> 2)+ ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 160)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 152)) >> 2)));
  v22 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  if (*(_QWORD *)(v22 + 112) != *(_QWORD *)(v22 + 104))
  {
    v23 = 0;
    do
    {
      LODWORD(v407[0]) = *(_DWORD *)(v22 + 176);
      v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v22 + 8), (unsigned int *)v407);
      v25 = *(_QWORD *)(v24 + 40);
      if (v23 >= (*(_QWORD *)(v24 + 48) - v25) >> 4)
        goto LABEL_315;
      v26 = (_DWORD *)(v25 + 16 * v23);
      v27 = (char *)*((_QWORD *)&v409 + 1);
      if (*((_QWORD *)&v409 + 1) >= (unint64_t)v410)
      {
        v29 = (char *)v409;
        v30 = (uint64_t)(*((_QWORD *)&v409 + 1) - v409) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          goto LABEL_338;
        v32 = (uint64_t)&v410[-v409];
        if ((uint64_t)&v410[-v409] >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v410, v33);
          v27 = (char *)*((_QWORD *)&v409 + 1);
          v29 = (char *)v409;
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[4 * v30];
        *(_DWORD *)v35 = *v26;
        v28 = v35 + 4;
        while (v27 != v29)
        {
          v36 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *(_QWORD *)&v409 = v35;
        *((_QWORD *)&v409 + 1) = v28;
        v410 = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        **((_DWORD **)&v409 + 1) = *v26;
        v28 = v27 + 4;
      }
      *((_QWORD *)&v409 + 1) = v28;
      v37 = *(_QWORD *)(*(_QWORD *)a2 + 40);
      LODWORD(v407[0]) = *(_DWORD *)(v37 + 176);
      v38 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v37 + 8), (unsigned int *)v407);
      v39 = *(_QWORD *)(v38 + 40);
      if (v23 >= (*(_QWORD *)(v38 + 48) - v39) >> 4)
        goto LABEL_315;
      v40 = v39 + 16 * v23;
      v41 = (char *)*((_QWORD *)&v409 + 1);
      if (*((_QWORD *)&v409 + 1) >= (unint64_t)v410)
      {
        v43 = (char *)v409;
        v44 = (uint64_t)(*((_QWORD *)&v409 + 1) - v409) >> 2;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
          goto LABEL_338;
        v46 = (uint64_t)&v410[-v409];
        if ((uint64_t)&v410[-v409] >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v410, v47);
          v41 = (char *)*((_QWORD *)&v409 + 1);
          v43 = (char *)v409;
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[4 * v44];
        *(_DWORD *)v49 = *(_DWORD *)(v40 + 4);
        v42 = v49 + 4;
        while (v41 != v43)
        {
          v50 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v49 - 1) = v50;
          v49 -= 4;
        }
        *(_QWORD *)&v409 = v49;
        *((_QWORD *)&v409 + 1) = v42;
        v410 = &v48[4 * v47];
        if (v43)
          operator delete(v43);
      }
      else
      {
        **((_DWORD **)&v409 + 1) = *(_DWORD *)(v40 + 4);
        v42 = v41 + 4;
      }
      *((_QWORD *)&v409 + 1) = v42;
      v51 = *(_QWORD *)(*(_QWORD *)a2 + 40);
      LODWORD(v407[0]) = *(_DWORD *)(v51 + 176);
      v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v51 + 8), (unsigned int *)v407);
      v53 = *(_QWORD *)(v52 + 40);
      if (v23 >= (*(_QWORD *)(v52 + 48) - v53) >> 4)
LABEL_315:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v54 = v53 + 16 * v23;
      v55 = (char *)*((_QWORD *)&v409 + 1);
      if (*((_QWORD *)&v409 + 1) >= (unint64_t)v410)
      {
        v57 = (char *)v409;
        v58 = (uint64_t)(*((_QWORD *)&v409 + 1) - v409) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
LABEL_338:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v60 = (uint64_t)&v410[-v409];
        if ((uint64_t)&v410[-v409] >> 1 > v59)
          v59 = v60 >> 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v410, v61);
          v55 = (char *)*((_QWORD *)&v409 + 1);
          v57 = (char *)v409;
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[4 * v58];
        *(_DWORD *)v63 = *(_DWORD *)(v54 + 8);
        v56 = v63 + 4;
        while (v55 != v57)
        {
          v64 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v63 - 1) = v64;
          v63 -= 4;
        }
        *(_QWORD *)&v409 = v63;
        *((_QWORD *)&v409 + 1) = v56;
        v410 = &v62[4 * v61];
        if (v57)
          operator delete(v57);
      }
      else
      {
        **((_DWORD **)&v409 + 1) = *(_DWORD *)(v54 + 8);
        v56 = v55 + 4;
      }
      *((_QWORD *)&v409 + 1) = v56;
      ++v23;
      v22 = *(_QWORD *)(*(_QWORD *)a2 + 40);
    }
    while (v23 < (uint64_t)(*(_QWORD *)(v22 + 112) - *(_QWORD *)(v22 + 104)) >> 2);
  }
  v65 = *a1;
  v66 = *(_QWORD *)(*a1 + 40);
  if (*(_QWORD *)(v66 + 112) != *(_QWORD *)(v66 + 104))
  {
    v67 = 0;
    do
    {
      if (((*(_QWORD *)(*a4 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v67) & 1) != 0)
      {
        LODWORD(v407[0]) = *(_DWORD *)(v66 + 176);
        v68 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v66 + 8), (unsigned int *)v407);
        v69 = *(_QWORD *)(v68 + 40);
        if (v67 >= (*(_QWORD *)(v68 + 48) - v69) >> 4)
          goto LABEL_318;
        v70 = (_DWORD *)(v69 + 16 * v67);
        v71 = (char *)*((_QWORD *)&v409 + 1);
        if (*((_QWORD *)&v409 + 1) >= (unint64_t)v410)
        {
          v73 = (char *)v409;
          v74 = (uint64_t)(*((_QWORD *)&v409 + 1) - v409) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            goto LABEL_339;
          v76 = (uint64_t)&v410[-v409];
          if ((uint64_t)&v410[-v409] >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v410, v77);
            v71 = (char *)*((_QWORD *)&v409 + 1);
            v73 = (char *)v409;
          }
          else
          {
            v78 = 0;
          }
          v79 = &v78[4 * v74];
          *(_DWORD *)v79 = *v70;
          v72 = v79 + 4;
          while (v71 != v73)
          {
            v80 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }
          *(_QWORD *)&v409 = v79;
          *((_QWORD *)&v409 + 1) = v72;
          v410 = &v78[4 * v77];
          if (v73)
            operator delete(v73);
        }
        else
        {
          **((_DWORD **)&v409 + 1) = *v70;
          v72 = v71 + 4;
        }
        *((_QWORD *)&v409 + 1) = v72;
        v81 = *(_QWORD *)(*a1 + 40);
        LODWORD(v407[0]) = *(_DWORD *)(v81 + 176);
        v82 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v81 + 8), (unsigned int *)v407);
        v83 = *(_QWORD *)(v82 + 40);
        if (v67 >= (*(_QWORD *)(v82 + 48) - v83) >> 4)
          goto LABEL_318;
        v84 = v83 + 16 * v67;
        v85 = (char *)*((_QWORD *)&v409 + 1);
        if (*((_QWORD *)&v409 + 1) >= (unint64_t)v410)
        {
          v87 = (char *)v409;
          v88 = (uint64_t)(*((_QWORD *)&v409 + 1) - v409) >> 2;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 62)
            goto LABEL_339;
          v90 = (uint64_t)&v410[-v409];
          if ((uint64_t)&v410[-v409] >> 1 > v89)
            v89 = v90 >> 1;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
            v91 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v410, v91);
            v85 = (char *)*((_QWORD *)&v409 + 1);
            v87 = (char *)v409;
          }
          else
          {
            v92 = 0;
          }
          v93 = &v92[4 * v88];
          *(_DWORD *)v93 = *(_DWORD *)(v84 + 4);
          v86 = v93 + 4;
          while (v85 != v87)
          {
            v94 = *((_DWORD *)v85 - 1);
            v85 -= 4;
            *((_DWORD *)v93 - 1) = v94;
            v93 -= 4;
          }
          *(_QWORD *)&v409 = v93;
          *((_QWORD *)&v409 + 1) = v86;
          v410 = &v92[4 * v91];
          if (v87)
            operator delete(v87);
        }
        else
        {
          **((_DWORD **)&v409 + 1) = *(_DWORD *)(v84 + 4);
          v86 = v85 + 4;
        }
        *((_QWORD *)&v409 + 1) = v86;
        v95 = *(_QWORD *)(*a1 + 40);
        LODWORD(v407[0]) = *(_DWORD *)(v95 + 176);
        v96 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v95 + 8), (unsigned int *)v407);
        v97 = *(_QWORD *)(v96 + 40);
        if (v67 >= (*(_QWORD *)(v96 + 48) - v97) >> 4)
LABEL_318:
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v98 = v97 + 16 * v67;
        v99 = (char *)*((_QWORD *)&v409 + 1);
        if (*((_QWORD *)&v409 + 1) >= (unint64_t)v410)
        {
          v101 = (char *)v409;
          v102 = (uint64_t)(*((_QWORD *)&v409 + 1) - v409) >> 2;
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 62)
LABEL_339:
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v104 = (uint64_t)&v410[-v409];
          if ((uint64_t)&v410[-v409] >> 1 > v103)
            v103 = v104 >> 1;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
            v105 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v105 = v103;
          if (v105)
          {
            v106 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v410, v105);
            v99 = (char *)*((_QWORD *)&v409 + 1);
            v101 = (char *)v409;
          }
          else
          {
            v106 = 0;
          }
          v107 = &v106[4 * v102];
          *(_DWORD *)v107 = *(_DWORD *)(v98 + 8);
          v100 = v107 + 4;
          while (v99 != v101)
          {
            v108 = *((_DWORD *)v99 - 1);
            v99 -= 4;
            *((_DWORD *)v107 - 1) = v108;
            v107 -= 4;
          }
          *(_QWORD *)&v409 = v107;
          *((_QWORD *)&v409 + 1) = v100;
          v410 = &v106[4 * v105];
          if (v101)
            operator delete(v101);
        }
        else
        {
          **((_DWORD **)&v409 + 1) = *(_DWORD *)(v98 + 8);
          v100 = v99 + 4;
        }
        *((_QWORD *)&v409 + 1) = v100;
        v65 = *a1;
      }
      ++v67;
      v66 = *(_QWORD *)(v65 + 40);
    }
    while (v67 < (uint64_t)(*(_QWORD *)(v66 + 112) - *(_QWORD *)(v66 + 104)) >> 2);
  }
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v407, 3uLL);
  v109 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  if (*(_QWORD *)(v109 + 160) != *(_QWORD *)(v109 + 152))
  {
    v110 = 0;
    do
    {
      LODWORD(__p[0]) = v110;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v109, (unsigned int *)__p, v407);
      v111 = 0;
      end = v408.__end_;
      do
      {
        v113 = *((_DWORD *)v407[0] + v111);
        if (end >= v408.__end_cap_.__value_)
        {
          begin = v408.__begin_;
          v116 = end - v408.__begin_;
          v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v118 = (char *)v408.__end_cap_.__value_ - (char *)v408.__begin_;
          if (((char *)v408.__end_cap_.__value_ - (char *)v408.__begin_) >> 1 > v117)
            v117 = v118 >> 1;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
            v119 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v119 = v117;
          if (v119)
          {
            v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v408.__end_cap_, v119);
            begin = v408.__begin_;
            end = v408.__end_;
          }
          else
          {
            v120 = 0;
          }
          v121 = (int *)&v120[4 * v116];
          *v121 = v113;
          v114 = v121 + 1;
          while (end != begin)
          {
            v122 = *--end;
            *--v121 = v122;
          }
          v408.__begin_ = v121;
          v408.__end_ = v114;
          v408.__end_cap_.__value_ = (int *)&v120[4 * v119];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v113;
          v114 = end + 1;
        }
        v408.__end_ = v114;
        ++v111;
        end = v114;
      }
      while (v111 != 3);
      ++v110;
      v109 = *(_QWORD *)(*(_QWORD *)a2 + 40);
    }
    while (v110 < (uint64_t)(*(_QWORD *)(v109 + 160) - *(_QWORD *)(v109 + 152)) >> 2);
  }
  v123 = *(_QWORD *)(*a1 + 40);
  if (*(_QWORD *)(v123 + 160) != *(_QWORD *)(v123 + 152))
  {
    v124 = 0;
    do
    {
      LODWORD(__p[0]) = v124;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v123, (unsigned int *)__p, v407);
      v125 = 0;
      v126 = v408.__end_;
      do
      {
        v127 = *((unsigned int *)v407[0] + v125);
        v128 = *a3;
        if (v126 >= v408.__end_cap_.__value_)
        {
          v130 = v408.__begin_;
          v131 = v126 - v408.__begin_;
          v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v133 = (char *)v408.__end_cap_.__value_ - (char *)v408.__begin_;
          if (((char *)v408.__end_cap_.__value_ - (char *)v408.__begin_) >> 1 > v132)
            v132 = v133 >> 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
            v134 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v134 = v132;
          if (v134)
          {
            v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v408.__end_cap_, v134);
            v130 = v408.__begin_;
            v126 = v408.__end_;
          }
          else
          {
            v135 = 0;
          }
          v136 = (int *)&v135[4 * v131];
          *v136 = *(_DWORD *)(v128 + 4 * v127);
          v129 = v136 + 1;
          while (v126 != v130)
          {
            v137 = *--v126;
            *--v136 = v137;
          }
          v408.__begin_ = v136;
          v408.__end_ = v129;
          v408.__end_cap_.__value_ = (int *)&v135[4 * v134];
          if (v130)
            operator delete(v130);
        }
        else
        {
          *v126 = *(_DWORD *)(v128 + 4 * v127);
          v129 = v126 + 1;
        }
        v408.__end_ = v129;
        ++v125;
        v126 = v129;
      }
      while (v125 != 3);
      ++v124;
      v123 = *(_QWORD *)(*a1 + 40);
    }
    while (v124 < (uint64_t)(*(_QWORD *)(v123 + 160) - *(_QWORD *)(v123 + 152)) >> 2);
  }
  cv3d::cv::gess::io::MeshFromArray<float,unsigned int>(*a7, &v409, &v408);
  v138 = *a7;
  if (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 160)
                - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 152)) >> 2)
     + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 152)) >> 2) != (uint64_t)(*((_QWORD *)*a7 + 20) - *((_QWORD *)*a7 + 19)) >> 2)
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", 877, "new_mesh->FSize() == (chart1->mesh_.FSize() + chart2->mesh_.FSize())");
  v405 = -1;
  v406 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t)v138, &v406, (__int128 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v139 = *a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>((uint64_t)v139, &v405, (__int128 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v140 = *(_QWORD *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  LODWORD(v397) = -1;
  v141 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v140 + 8), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v142 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:index_in_root");
  LODWORD(v397) = -1;
  v143 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::VertexHandle>((uint64_t **)(v142 + 8), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v144 = *(_QWORD *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  LODWORD(v397) = 0;
  v145 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v144 + 8), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v146 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "v:importance");
  LODWORD(v397) = 0;
  v148 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned int>((uint64_t **)(v146 + 8), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  if (v141 == -1)
  {
    v386 = "v_id_root_mesh1_ah.Valid()";
    v387 = 892;
    goto LABEL_327;
  }
  if (v143 == -1)
  {
    v386 = "v_id_root_mesh2_ah.Valid()";
    v387 = 893;
LABEL_327:
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", v387, v386);
  }
  v149 = *(uint64_t **)(*(_QWORD *)a2 + 40);
  if (v149[14] != v149[13])
  {
    v150 = 0;
    do
    {
      LODWORD(__p[0]) = v143;
      v151 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(v149 + 1, (unsigned int *)__p, v147);
      v153 = *(_QWORD *)(v151 + 40);
      if (v150 >= (*(_QWORD *)(v151 + 48) - v153) >> 2)
        goto LABEL_314;
      v154 = *a7;
      LODWORD(__p[0]) = v406;
      v155 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)v154 + 1, (unsigned int *)__p, v152);
      v156 = *(_QWORD *)(v155 + 40);
      if (v150 >= (*(_QWORD *)(v155 + 48) - v156) >> 2)
        goto LABEL_314;
      *(_DWORD *)(v156 + 4 * v150) = *(_DWORD *)(v153 + 4 * v150);
      v157 = *(_QWORD *)(*(_QWORD *)a2 + 40);
      LODWORD(__p[0]) = v148;
      v158 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v157 + 8), (unsigned int *)__p);
      v159 = *(_QWORD *)(v158 + 40);
      if (v150 >= (*(_QWORD *)(v158 + 48) - v159) >> 2
        || (v160 = *(_DWORD *)(v159 + 4 * v150),
            v161 = *a7,
            LODWORD(__p[0]) = v405,
            v162 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v161 + 1, (unsigned int *)__p), v163 = *(_QWORD *)(v162 + 40), v150 >= (*(_QWORD *)(v162 + 48) - v163) >> 2))
      {
LABEL_314:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v163 + 4 * v150++) = v160;
      v149 = *(uint64_t **)(*(_QWORD *)a2 + 40);
    }
    while (v150 < (v149[14] - v149[13]) >> 2);
  }
  v164 = *a1;
  v165 = *(uint64_t **)(*a1 + 40);
  if (v165[14] != v165[13])
  {
    v166 = 0;
    v167 = 0;
    v168 = "index < data_.size()";
    v169 = "Attribute.h";
    v170 = "operator[]";
    do
    {
      if (((*(_QWORD *)(*a4 + ((v167 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v167) & 1) != 0)
      {
        LODWORD(__p[0]) = v141;
        v171 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>(v165 + 1, (unsigned int *)__p, v147);
        v173 = *(_QWORD *)(v171 + 40);
        if (v167 >= (*(_QWORD *)(v171 + 48) - v173) >> 2)
          goto LABEL_316;
        v174 = *a7;
        LODWORD(__p[0]) = v406;
        v175 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::VertexHandle>((uint64_t *)v174 + 1, (unsigned int *)__p, v172);
        v176 = *(unsigned int *)(*a3 + 4 * v167);
        v177 = *(_QWORD *)(v175 + 40);
        if (v176 >= (*(_QWORD *)(v175 + 48) - v177) >> 2)
          goto LABEL_316;
        *(_DWORD *)(v177 + 4 * v176) = *(_DWORD *)(v173 + 4 * v167);
        v178 = *(_QWORD *)(*a1 + 40);
        LODWORD(__p[0]) = v145;
        v179 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)(v178 + 8), (unsigned int *)__p);
        v180 = *(_QWORD *)(v179 + 40);
        if (v167 >= (*(_QWORD *)(v179 + 48) - v180) >> 2
          || (v181 = *(_DWORD *)(v180 + 4 * v167),
              v182 = *a7,
              LODWORD(__p[0]) = v405,
              v183 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>((uint64_t *)v182 + 1, (unsigned int *)__p), v184 = *a3, v185 = *(unsigned int *)(*a3 + 4 * v167), v186 = *(_QWORD *)(v183 + 40), v185 >= (*(_QWORD *)(v183 + 48) - v186) >> 2))
        {
LABEL_316:
          v385 = 182;
          goto LABEL_317;
        }
        *(_DWORD *)(v186 + 4 * v185) = v181;
        if (v166
           + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 112)
                      - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 104)) >> 2) != *(_DWORD *)(v184 + 4 * v167))
        {
          v385 = 904;
          v170 = "MergeTwoCharts";
          v169 = "MergeCharts.cpp";
          v168 = "vert_map[i] == j + chart2->mesh_.VSize()";
LABEL_317:
          __assert_rtn(v170, v169, v385, v168);
        }
        ++v166;
        v164 = *a1;
      }
      ++v167;
      v165 = *(uint64_t **)(v164 + 40);
    }
    while (v167 < (v165[14] - v165[13]) >> 2);
  }
  v402 = -1;
  v187 = *a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t)v187, &v402, (__int128 *)__p);
  v188 = a2;
  if (v404 < 0)
    operator delete(__p[0]);
  v189 = *(_QWORD *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  LODWORD(v397) = -1;
  v190 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v189 + 56), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v191 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:index_in_root");
  LODWORD(v397) = -1;
  v193 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::mesh::FaceHandle>((uint64_t **)(v191 + 56), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  if (v190 == -1)
  {
    v388 = "f_id_root_mesh1_ah.Valid()";
    v389 = 916;
    goto LABEL_330;
  }
  if (v193 == -1)
  {
    v388 = "f_id_root_mesh2_ah.Valid()";
    v389 = 917;
LABEL_330:
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", v389, v388);
  }
  v194 = *(uint64_t **)(*(_QWORD *)a2 + 40);
  if (v194[20] != v194[19])
  {
    v195 = 0;
    do
    {
      LODWORD(__p[0]) = v193;
      v196 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v194 + 7, (unsigned int *)__p, v192);
      v198 = *(_QWORD *)(v196 + 40);
      if (v195 >= (*(_QWORD *)(v196 + 48) - v198) >> 2
        || (v199 = *a7,
            LODWORD(__p[0]) = v402,
            v200 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)v199 + 7, (unsigned int *)__p, v197), v201 = *(_QWORD *)(v200 + 40), v195 >= (*(_QWORD *)(v200 + 48) - v201) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v201 + 4 * v195) = *(_DWORD *)(v198 + 4 * v195);
      ++v195;
      v194 = *(uint64_t **)(*(_QWORD *)a2 + 40);
    }
    while (v195 < (v194[20] - v194[19]) >> 2);
  }
  v202 = *(uint64_t **)(*a1 + 40);
  if (v202[20] != v202[19])
  {
    v203 = 0;
    do
    {
      LODWORD(__p[0]) = v190;
      v204 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>(v202 + 7, (unsigned int *)__p, v192);
      v206 = *(_QWORD *)(v204 + 40);
      if (v203 >= (*(_QWORD *)(v204 + 48) - v206) >> 2
        || (v207 = *a7,
            LODWORD(__p[0]) = v402,
            v208 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::mesh::FaceHandle>((uint64_t *)v207 + 7, (unsigned int *)__p, v205), v209 = v203+ ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 160)- *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 40) + 152)) >> 2), v210 = *(_QWORD *)(v208 + 40), v209 >= (*(_QWORD *)(v208 + 48) - v210) >> 2))
      {
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      }
      *(_DWORD *)(v210 + 4 * v209) = *(_DWORD *)(v206 + 4 * v203++);
      v202 = *(uint64_t **)(*a1 + 40);
    }
    while (v203 < (v202[20] - v202[19]) >> 2);
  }
  v401 = -1;
  v211 = *a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v397) = 0;
  v212 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v211 + 7, (uint64_t)&v397, (unsigned __int8 *)__p);
  v401 = v212;
  if (v404 < 0)
    operator delete(__p[0]);
  if (v212 == -1)
  {
    v213 = *a7;
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)v213, &v401, (__int128 *)__p);
    if (v404 < 0)
      operator delete(__p[0]);
  }
  v400 = -1;
  v214 = *a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v397) = 0;
  v215 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)v214 + 4, (uint64_t)&v397, (unsigned __int8 *)__p);
  v400 = v215;
  if (v404 < 0)
    operator delete(__p[0]);
  if (v215 == -1)
  {
    v216 = *a7;
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)v216, &v400, (__int128 *)__p);
    if (v404 < 0)
      operator delete(__p[0]);
  }
  v217 = *(_QWORD *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v397) = 0;
  v218 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v217 + 56), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v219 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v397) = 0;
  v220 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v219 + 56), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v221 = *(_QWORD *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  v397 = 0;
  v398 = 0;
  v222 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v221 + 56), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v223 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
  v397 = 0;
  v398 = 0;
  v394 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v223 + 56), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v224 = *(_QWORD *)(*a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v397) = 0;
  v225 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v224 + 32), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  v392 = v222;
  v226 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v397) = 0;
  v227 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v226 + 32), (uint64_t)&v397, (unsigned __int8 *)__p);
  if (v404 < 0)
    operator delete(__p[0]);
  if (v218 == -1)
  {
    v390 = "f_area_chart1_ah.Valid()";
    v391 = 947;
    goto LABEL_335;
  }
  if (v220 == -1)
  {
    v390 = "f_area_chart2_ah.Valid()";
    v391 = 948;
    goto LABEL_335;
  }
  if (v225 == -1)
  {
    v390 = "h_length_chart1_ah.Valid()";
    v391 = 949;
    goto LABEL_335;
  }
  if (v227 == -1)
  {
    v390 = "h_length_chart2_ah.Valid()";
    v391 = 950;
LABEL_335:
    __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", v391, v390);
  }
  v228 = -1;
  v399 = -1;
  if (v412)
  {
    v229 = *a7;
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>((uint64_t)v229, &v399, (__int128 *)__p);
    if (v404 < 0)
      operator delete(__p[0]);
    v230 = *(_QWORD *)(*a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    LODWORD(v397) = 0;
    cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v230 + 32), (uint64_t)&v397, (unsigned __int8 *)__p);
    if (v404 < 0)
      operator delete(__p[0]);
    v231 = *(_QWORD *)(*(_QWORD *)a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    LODWORD(v397) = 0;
    v228 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v231 + 32), (uint64_t)&v397, (unsigned __int8 *)__p);
    if (v404 < 0)
      operator delete(__p[0]);
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, 3uLL);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&v397, 3uLL);
  v233 = *(uint64_t **)(*(_QWORD *)a2 + 40);
  if (v233[20] != v233[19])
  {
    v234 = 0;
    do
    {
      v413[0] = v220;
      v235 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v233 + 7, v413, v232);
      v237 = *(_QWORD *)(v235 + 40);
      if (v234 >= (*(_QWORD *)(v235 + 48) - v237) >> 2)
        goto LABEL_312;
      v238 = *(_DWORD *)(v237 + 4 * v234);
      v239 = *a7;
      v413[0] = v401;
      v240 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v239 + 7, v413, v236);
      v241 = *(_QWORD *)(v240 + 40);
      if (v234 >= (*(_QWORD *)(v240 + 48) - v241) >> 2)
        goto LABEL_312;
      *(_DWORD *)(v241 + 4 * v234) = v238;
      if (v411 != -1)
      {
        v242 = *(_QWORD *)(*(_QWORD *)a2 + 40);
        v413[0] = v394;
        v243 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v242 + 56), v413);
        v244 = *(_QWORD *)(v243 + 40);
        if (v234 >= (*(_QWORD *)(v243 + 48) - v244) >> 4)
          goto LABEL_312;
        v245 = *a7;
        v413[0] = v411;
        v246 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v245 + 7, v413);
        v247 = *(_QWORD *)(v246 + 40);
        if (v234 >= (*(_QWORD *)(v246 + 48) - v247) >> 4)
          goto LABEL_312;
        *(_OWORD *)(v247 + 16 * v234) = *(_OWORD *)(v244 + 16 * v234);
      }
      v248 = *a7;
      v413[0] = v234;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges((uint64_t)v248, v413, __p);
      v249 = *(_QWORD *)(*(_QWORD *)a2 + 40);
      v413[0] = v234;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v249, v413, &v397);
      for (i = 0; i != 12; i += 4)
      {
        v252 = *(_QWORD *)(*(_QWORD *)a2 + 40);
        v413[0] = v227;
        v253 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v252 + 32), v413, v250);
        v255 = *(unsigned int *)((char *)v397 + i);
        v256 = *(_QWORD *)(v253 + 40);
        if (v255 >= (*(_QWORD *)(v253 + 48) - v256) >> 2)
          goto LABEL_312;
        v257 = *(_DWORD *)(v256 + 4 * v255);
        v258 = *a7;
        v413[0] = v400;
        v259 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v258 + 4, v413, v254);
        v260 = (unsigned int *)((char *)__p[0] + i);
        v261 = *(unsigned int *)((char *)__p[0] + i);
        v262 = *(_QWORD *)(v259 + 40);
        if (v261 >= (*(_QWORD *)(v259 + 48) - v262) >> 2)
          goto LABEL_312;
        *(_DWORD *)(v262 + 4 * v261) = v257;
        v263 = *a7;
        v264 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v260);
        v265 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v263, *((_DWORD *)v263 + 45), *v264);
        if ((*v265 & v266) != 0)
        {
          v267 = *a7;
          v413[0] = v400;
          v268 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v267 + 4, v413, v250);
          v270 = *(unsigned int *)((char *)__p[0] + i);
          v271 = *(_QWORD *)(v268 + 40);
          if (v270 >= (*(_QWORD *)(v268 + 48) - v271) >> 2)
            goto LABEL_312;
          v272 = *(_DWORD *)(v271 + 4 * v270);
          v273 = *a7;
          v413[0] = v400;
          v274 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v273 + 4, v413, v269);
          v275 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + i));
          v276 = *(_QWORD *)(v274 + 40);
          if (v275 >= (*(_QWORD *)(v274 + 48) - v276) >> 2)
            goto LABEL_312;
          *(_DWORD *)(v276 + 4 * v275) = v272;
        }
        if (v412)
        {
          v277 = *(_QWORD *)(*(_QWORD *)a2 + 40);
          v413[0] = v228;
          v278 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v277 + 32), v413, v250);
          v280 = *(unsigned int *)((char *)v397 + i);
          v281 = *(_QWORD *)(v278 + 40);
          if (v280 >= (*(_QWORD *)(v278 + 48) - v281) >> 2)
            goto LABEL_312;
          v282 = *(_DWORD *)(v281 + 4 * v280);
          v283 = *a7;
          v413[0] = v399;
          v284 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v283 + 4, v413, v279);
          v285 = (unsigned int *)((char *)__p[0] + i);
          v286 = *(unsigned int *)((char *)__p[0] + i);
          v287 = *(_QWORD *)(v284 + 40);
          if (v286 >= (*(_QWORD *)(v284 + 48) - v287) >> 2)
            goto LABEL_312;
          *(_DWORD *)(v287 + 4 * v286) = v282;
          v288 = *a7;
          v289 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v285);
          v290 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v288, *((_DWORD *)v288 + 45), *v289);
          if ((*v290 & v291) != 0)
          {
            v292 = *a7;
            v413[0] = v399;
            v293 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v292 + 4, v413, v250);
            v295 = *(unsigned int *)((char *)__p[0] + i);
            v296 = *(_QWORD *)(v293 + 40);
            if (v295 >= (*(_QWORD *)(v293 + 48) - v296) >> 2)
              goto LABEL_312;
            v297 = *(_DWORD *)(v296 + 4 * v295);
            v298 = *a7;
            v413[0] = v399;
            v299 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v298 + 4, v413, v294);
            v300 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + i));
            v301 = *(_QWORD *)(v299 + 40);
            if (v300 >= (*(_QWORD *)(v299 + 48) - v301) >> 2)
              goto LABEL_312;
            *(_DWORD *)(v301 + 4 * v300) = v297;
          }
        }
      }
      v302 = *a7;
      v413[0] = v401;
      v303 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v302 + 7, v413, v250);
      v304 = *(_QWORD *)(v303 + 40);
      if (v234 >= (*(_QWORD *)(v303 + 48) - v304) >> 2)
LABEL_312:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v305 = *(float *)(v304 + 4 * v234);
      v306 = *a7;
      v413[0] = v234;
      v188 = a2;
      if (vabds_f32(v305, cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)v306, v413)) >= 0.0001)
        __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", 987, "std::fabs(new_mesh->attribute(f_area_ah)[i] - new_mesh->Area(mesh::FaceHandle(static_cast<uint32_t>(i)))) < 10e-5");
      ++v234;
      v233 = *(uint64_t **)(*(_QWORD *)a2 + 40);
    }
    while (v234 < (v233[20] - v233[19]) >> 2);
  }
  v307 = *(uint64_t **)(*a1 + 40);
  if (v307[20] != v307[19])
  {
    v308 = 0;
    do
    {
      v413[0] = v218;
      v309 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>(v307 + 7, v413, v232);
      v311 = *(_QWORD *)(v309 + 40);
      if (v308 >= (*(_QWORD *)(v309 + 48) - v311) >> 2)
        goto LABEL_313;
      v312 = *(_DWORD *)(v311 + 4 * v308);
      v313 = *a7;
      v413[0] = v401;
      v314 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v313 + 7, v413, v310);
      v315 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 160)
           - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 152);
      v316 = v308 + (v315 >> 2);
      v317 = *(_QWORD *)(v314 + 40);
      if (v316 >= (*(_QWORD *)(v314 + 48) - v317) >> 2)
        goto LABEL_313;
      *(_DWORD *)(v317 + 4 * v316) = v312;
      if (v411 != -1)
      {
        v318 = *(_QWORD *)(*a1 + 40);
        v413[0] = v392;
        v319 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v318 + 56), v413);
        v320 = *(_QWORD *)(v319 + 40);
        if (v308 >= (*(_QWORD *)(v319 + 48) - v320) >> 4)
          goto LABEL_313;
        v321 = *a7;
        v413[0] = v411;
        v322 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v321 + 7, v413);
        v323 = v308
             + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 160)
                        - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 152)) >> 2);
        v324 = *(_QWORD *)(v322 + 40);
        if (v323 >= (*(_QWORD *)(v322 + 48) - v324) >> 4)
          goto LABEL_313;
        *(_OWORD *)(v324 + 16 * v323) = *(_OWORD *)(v320 + 16 * v308);
        v315 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 160)
             - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 152);
      }
      v325 = *a7;
      v413[0] = ((unint64_t)v315 >> 2) + v308;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges((uint64_t)v325, v413, __p);
      v326 = *(_QWORD *)(*a1 + 40);
      v413[0] = v308;
      cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(v326, v413, &v397);
      for (j = 0; j != 12; j += 4)
      {
        v329 = *(_QWORD *)(*a1 + 40);
        v413[0] = v225;
        v330 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v329 + 32), v413, v327);
        v332 = *(unsigned int *)((char *)v397 + j);
        v333 = *(_QWORD *)(v330 + 40);
        if (v332 >= (*(_QWORD *)(v330 + 48) - v333) >> 2)
          goto LABEL_313;
        v334 = *(_DWORD *)(v333 + 4 * v332);
        v335 = *a7;
        v413[0] = v400;
        v336 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v335 + 4, v413, v331);
        v337 = (unsigned int *)((char *)__p[0] + j);
        v338 = *(unsigned int *)((char *)__p[0] + j);
        v339 = *(_QWORD *)(v336 + 40);
        if (v338 >= (*(_QWORD *)(v336 + 48) - v339) >> 2)
          goto LABEL_313;
        *(_DWORD *)(v339 + 4 * v338) = v334;
        v340 = *a7;
        v341 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v337);
        v342 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v340, *((_DWORD *)v340 + 45), *v341);
        if ((*v342 & v343) != 0)
        {
          v344 = *a7;
          v413[0] = v400;
          v345 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v344 + 4, v413, v327);
          v347 = *(unsigned int *)((char *)__p[0] + j);
          v348 = *(_QWORD *)(v345 + 40);
          if (v347 >= (*(_QWORD *)(v345 + 48) - v348) >> 2)
            goto LABEL_313;
          v349 = *(_DWORD *)(v348 + 4 * v347);
          v350 = *a7;
          v413[0] = v400;
          v351 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v350 + 4, v413, v346);
          v352 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + j));
          v353 = *(_QWORD *)(v351 + 40);
          if (v352 >= (*(_QWORD *)(v351 + 48) - v353) >> 2)
            goto LABEL_313;
          *(_DWORD *)(v353 + 4 * v352) = v349;
        }
        if (v412)
        {
          v354 = *(_QWORD *)(*a1 + 40);
          v413[0] = v228;
          v355 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v354 + 32), v413, v327);
          v357 = *(unsigned int *)((char *)v397 + j);
          v358 = *(_QWORD *)(v355 + 40);
          if (v357 >= (*(_QWORD *)(v355 + 48) - v358) >> 2)
            goto LABEL_313;
          v359 = *(_DWORD *)(v358 + 4 * v357);
          v360 = *a7;
          v413[0] = v399;
          v361 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v360 + 4, v413, v356);
          v362 = (unsigned int *)((char *)__p[0] + j);
          v363 = *(unsigned int *)((char *)__p[0] + j);
          v364 = *(_QWORD *)(v361 + 40);
          if (v363 >= (*(_QWORD *)(v361 + 48) - v364) >> 2)
            goto LABEL_313;
          *(_DWORD *)(v364 + 4 * v363) = v359;
          v365 = *a7;
          v366 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, v362);
          v367 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)v365, *((_DWORD *)v365 + 45), *v366);
          if ((*v367 & v368) != 0)
          {
            v369 = *a7;
            v413[0] = v399;
            v370 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v369 + 4, v413, v327);
            v372 = *(unsigned int *)((char *)__p[0] + j);
            v373 = *(_QWORD *)(v370 + 40);
            if (v372 >= (*(_QWORD *)(v370 + 48) - v373) >> 2)
              goto LABEL_313;
            v374 = *(_DWORD *)(v373 + 4 * v372);
            v375 = *a7;
            v413[0] = v399;
            v376 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v375 + 4, v413, v371);
            v377 = *(unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)*a7 + 104, (unsigned int *)((char *)__p[0] + j));
            v378 = *(_QWORD *)(v376 + 40);
            if (v377 >= (*(_QWORD *)(v376 + 48) - v378) >> 2)
              goto LABEL_313;
            *(_DWORD *)(v378 + 4 * v377) = v374;
          }
        }
      }
      v379 = *a7;
      v413[0] = v401;
      v380 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)v379 + 7, v413, v327);
      v381 = v308
           + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 160)
                      - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 152)) >> 2);
      v382 = *(_QWORD *)(v380 + 40);
      if (v381 >= (*(_QWORD *)(v380 + 48) - v382) >> 2)
LABEL_313:
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v383 = *(float *)(v382 + 4 * v381);
      v384 = *a7;
      v413[0] = v308
              + ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 160)
                         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v188 + 40) + 152)) >> 2);
      if (vabds_f32(v383, cv3d::cv::gess::mesh::TriMesh::Area((uint64_t)v384, v413)) >= 0.0001)
        __assert_rtn("MergeTwoCharts", "MergeCharts.cpp", 1014, "std::fabs(new_mesh->attribute(f_area_ah)[i + chart2->mesh_.FSize()] - new_mesh->Area(mesh::FaceHandle(static_cast<uint32_t>(i + chart2->mesh_.FSize())))) < 10e-5");
      ++v308;
      v307 = *(uint64_t **)(*a1 + 40);
    }
    while (v308 < (v307[20] - v307[19]) >> 2);
  }
  if (v397)
  {
    v398 = v397;
    operator delete(v397);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v407[0])
  {
    v407[1] = v407[0];
    operator delete(v407[0]);
  }
  if (v408.__begin_)
  {
    v408.__end_ = v408.__begin_;
    operator delete(v408.__begin_);
  }
  if ((_QWORD)v409)
  {
    *((_QWORD *)&v409 + 1) = v409;
    operator delete((void *)v409);
  }
}

void sub_23C5AF128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  if (a24 < 0)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  if (a29)
    operator delete(a29);
  v32 = *(void **)(v30 - 144);
  if (v32)
  {
    *(_QWORD *)(v30 - 136) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__init_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C5AF38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C5AF408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v25 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    v24 = v15;
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v23.i64[1] = (uint64_t)v16;
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v15 = v24;
    }
    *a1 = v14;
    a1[1] = v16;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v15;
    v24 = v21;
    v22 = v20.i64[0];
    std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v22);
  }
}

_QWORD *std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C5AF5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__int32 *std::remove[abi:ne180100]<std::__wrap_iter<unsigned int *>,unsigned int>(__int32 *a1, __int32 *a2, __int32 *a3)
{
  __int32 *result;
  __int32 *v6;

  result = wmemchr(a1, *a3, a2 - a1);
  if (!result)
    result = a2;
  v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      if (*v6 != *a3)
        *result++ = *v6;
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

_QWORD *cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *result;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v13, a1);
  v4 = *(_OWORD *)(**(_QWORD **)(a1 + 32) + 16 * a2);
  v12 = v4;
  if (*((_QWORD *)&v4 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v14 + 48))(v14, &v12);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v14;
  if (v14 == v13)
  {
    v11 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v11))(result);
}

void sub_23C5AF740(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  _QWORD *v4;
  va_list va;

  va_start(va, a4);
  if (a3)
    cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(a3);
  cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_2::__invoke(v4, (uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  BOOL v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  char *v61;
  int v62;
  unsigned int *v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v37 = *(a2 - 2);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 2) = v38;
          v39 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v40 = *(a2 - 2);
        v41 = v8[6];
        if (v40 < v41)
        {
          v8[6] = v40;
          *(a2 - 2) = v41;
          v42 = v8[7];
          v8[7] = *(a2 - 1);
          *(a2 - 1) = v42;
          v43 = v8[6];
          v44 = v8[4];
          if (v43 < v44)
          {
            v45 = v8[5];
            v46 = v8[7];
            v8[4] = v43;
            v8[5] = v46;
            v8[6] = v44;
            v8[7] = v45;
            v47 = v8[2];
            if (v43 < v47)
            {
              v48 = v8[3];
              v8[2] = v43;
              v8[3] = v46;
              v8[4] = v47;
              v8[5] = v48;
              v49 = *v8;
              if (v43 < *v8)
              {
                v50 = v8[1];
                *v8 = v43;
                v8[1] = v46;
                v8[2] = v49;
                v8[3] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 2;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 0;
              v55 = v8;
              do
              {
                v56 = v55[2];
                v57 = *v55;
                v55 = v51;
                if (v56 < v57)
                {
                  v59 = *v51;
                  v58 = v51[1];
                  v60 = v54;
                  while (1)
                  {
                    v61 = (char *)v8 + v60;
                    v62 = *(unsigned int *)((char *)v8 + v60 + 4);
                    *((_DWORD *)v61 + 2) = v57;
                    *((_DWORD *)v61 + 3) = v62;
                    if (!v60)
                      break;
                    v57 = *((_DWORD *)v61 - 2);
                    v60 -= 8;
                    if (v57 <= v59)
                    {
                      v63 = (unsigned int *)((char *)v8 + v60 + 8);
                      goto LABEL_79;
                    }
                  }
                  v63 = v8;
LABEL_79:
                  *v63 = v59;
                  v63[1] = v58;
                }
                v51 = v55 + 2;
                v54 += 8;
              }
              while (v55 + 2 != a2);
            }
          }
          else if (!v53)
          {
            v91 = v8 + 3;
            do
            {
              v92 = v7[2];
              v93 = *v7;
              v7 = v51;
              if (v92 < v93)
              {
                v94 = *(_QWORD *)v51;
                v95 = v91;
                do
                {
                  v96 = v95;
                  *(v95 - 1) = v93;
                  v97 = *(v95 - 2);
                  v95 -= 2;
                  *v96 = v97;
                  v93 = *(v96 - 5);
                }
                while (v93 > v94);
                *(_QWORD *)(v95 - 1) = v94;
              }
              v51 = v7 + 2;
              v91 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v64 = (v10 - 2) >> 1;
            v65 = v64;
            do
            {
              v66 = v65;
              if (v64 >= v65)
              {
                v67 = (2 * v65) | 1;
                v68 = &v8[2 * v67];
                if (2 * v66 + 2 >= (uint64_t)v10)
                {
                  v69 = *v68;
                }
                else
                {
                  v69 = *v68;
                  v70 = v68[2];
                  if (*v68 <= v70)
                    v69 = v68[2];
                  if (*v68 < v70)
                  {
                    v68 += 2;
                    v67 = 2 * v66 + 2;
                  }
                }
                v71 = &v8[2 * v66];
                if (v69 >= *v71)
                {
                  v72 = *v71;
                  v73 = v71[1];
                  do
                  {
                    result = (uint64_t)v71;
                    v71 = v68;
                    *(_DWORD *)result = v69;
                    *(_DWORD *)(result + 4) = v68[1];
                    if (v64 < v67)
                      break;
                    result = (2 * v67) | 1;
                    v68 = &v8[2 * result];
                    v67 = 2 * v67 + 2;
                    if (v67 >= (uint64_t)v10)
                    {
                      v69 = *v68;
                      v67 = result;
                    }
                    else
                    {
                      v69 = *v68;
                      v74 = v68[2];
                      if (*v68 <= v74)
                        v69 = v68[2];
                      if (*v68 >= v74)
                        v67 = result;
                      else
                        v68 += 2;
                    }
                  }
                  while (v69 >= v72);
                  *v71 = v72;
                  v71[1] = v73;
                }
              }
              v65 = v66 - 1;
            }
            while (v66);
            v75 = (unint64_t)v9 >> 3;
            do
            {
              v76 = 0;
              v77 = *(_QWORD *)v8;
              v78 = v8;
              do
              {
                v79 = &v78[2 * v76 + 2];
                v80 = (2 * v76) | 1;
                v76 = 2 * v76 + 2;
                if (v76 >= v75)
                {
                  v81 = *v79;
                  v76 = v80;
                }
                else
                {
                  v81 = *v79;
                  v82 = v79[2];
                  if (*v79 <= v82)
                    v81 = v79[2];
                  if (*v79 >= v82)
                    v76 = v80;
                  else
                    v79 += 2;
                }
                *v78 = v81;
                v78[1] = v79[1];
                v78 = v79;
              }
              while (v76 <= (uint64_t)((unint64_t)(v75 - 2) >> 1));
              if (v79 == a2 - 2)
              {
                *(_QWORD *)v79 = v77;
              }
              else
              {
                *v79 = *(a2 - 2);
                v79[1] = *(a2 - 1);
                *((_QWORD *)a2 - 1) = v77;
                v83 = (char *)v79 - (char *)v8 + 8;
                if (v83 >= 9)
                {
                  v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
                  v85 = &v8[2 * v84];
                  v86 = *v85;
                  if (*v85 < *v79)
                  {
                    v87 = *v79;
                    v88 = v79[1];
                    do
                    {
                      v89 = v79;
                      v79 = v85;
                      *v89 = v86;
                      v89[1] = v85[1];
                      if (!v84)
                        break;
                      v84 = (v84 - 1) >> 1;
                      v85 = &v8[2 * v84];
                      v86 = *v85;
                    }
                    while (*v85 < v87);
                    *v79 = v87;
                    v79[1] = v88;
                  }
                }
              }
              a2 -= 2;
            }
            while (v75-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        if ((a4 & 1) == 0 && *(v7 - 2) >= *v7)
        {
          v27 = *(_QWORD *)v7;
          if (*(a2 - 2) <= *(_QWORD *)v7)
          {
            v29 = v7 + 2;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v29 += 2;
            }
            while (*v8 <= v27);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[2];
              v8 += 2;
            }
            while (v28 <= v27);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
            {
              v31 = *(v30 - 2);
              v30 -= 2;
            }
            while (v31 > v27);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              v34 = v8[1];
              v8[1] = v30[1];
              v30[1] = v34;
              do
              {
                v35 = v8[2];
                v8 += 2;
                v32 = v35;
              }
              while (v35 <= v27);
              do
              {
                v36 = *(v30 - 2);
                v30 -= 2;
                v33 = v36;
              }
              while (v36 > v27);
            }
            while (v8 < v30);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v27;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)v7;
        do
        {
          v16 = v7[v14 + 2];
          v14 += 2;
        }
        while (v16 < v15);
        v17 = &v7[v14];
        v18 = a2;
        if (v14 == 2)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v15);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v15);
        }
        if (v17 >= v18)
        {
          v8 = &v7[v14];
        }
        else
        {
          v21 = *v18;
          v8 = &v7[v14];
          v22 = v18;
          do
          {
            *v8 = v21;
            *v22 = v16;
            v23 = v8[1];
            v8[1] = v22[1];
            v22[1] = v23;
            do
            {
              v24 = v8[2];
              v8 += 2;
              v16 = v24;
            }
            while (v24 < v15);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
              v21 = v25;
            }
            while (v25 >= v15);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *((_QWORD *)v8 - 1) = v15;
        if (v17 < v18)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v7, v8 - 2);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 < *result)
  {
    if (v5 >= v3)
    {
      *result = v3;
      *a2 = v4;
      v10 = result[1];
      result[1] = a2[1];
      a2[1] = v10;
      v11 = *a2;
      if (*a3 >= *a2)
        return result;
      *a2 = *a3;
      *a3 = v11;
      v6 = a3 + 1;
      result = a2 + 1;
    }
    else
    {
      *result++ = v5;
      *a3 = v4;
      v6 = a3 + 1;
    }
    v7 = v6;
    goto LABEL_10;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v7 = a2 + 1;
    v8 = a2[1];
    a2[1] = a3[1];
    a3[1] = v8;
    v9 = *result;
    if (*a2 < *result)
    {
      *result++ = *a2;
      *a2 = v9;
LABEL_10:
      v12 = *result;
      *result = *v7;
      *v7 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v20 = *(a2 - 2);
      v21 = a1[6];
      if (v20 < v21)
      {
        a1[6] = v20;
        *(a2 - 2) = v21;
        v22 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v22;
        v23 = a1[6];
        v24 = a1[4];
        if (v23 < v24)
        {
          v25 = a1[5];
          v26 = a1[7];
          a1[4] = v23;
          a1[5] = v26;
          a1[6] = v24;
          a1[7] = v25;
          v27 = a1[2];
          if (v23 < v27)
          {
            v28 = a1[3];
            a1[2] = v23;
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v28;
            v29 = *a1;
            if (v23 < *a1)
            {
              v30 = a1[1];
              *a1 = v23;
              a1[1] = v26;
              a1[2] = v29;
              a1[3] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *v9;
    if (*v10 < *v9)
    {
      v15 = *v10;
      v14 = v10[1];
      v16 = v11;
      while (1)
      {
        v17 = (unsigned int *)((char *)a1 + v16);
        v18 = *(unsigned int *)((char *)a1 + v16 + 20);
        v17[6] = v13;
        v17[7] = v18;
        if (v16 == -16)
          break;
        v13 = v17[2];
        v16 -= 8;
        if (v13 <= v15)
        {
          v19 = (unsigned int *)((char *)a1 + v16 + 24);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v15;
      v19[1] = v14;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_0 &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      v13 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,void>@<X0>(cv3d::cv::gess::mesh::TriMesh *a1@<X1>, const float *a2@<X2>, const float *a3@<X3>, BOOL *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x180uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23C5B0248(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL const&,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(_QWORD *a1, cv3d::cv::gess::mesh::TriMesh *a2, const float *a3, const float *a4, BOOL *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4AC80;
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)(a1 + 3), a2, a3, a4, *a5);
  return a1;
}

void sub_23C5B0294(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4AC80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__on_zero_shared(uint64_t a1)
{
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)(a1 + 24));
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
      cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::CutTopData((uint64_t *)a1);
  }
  v3 = (void **)a1;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::CutTopData(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at(a1, 0, &v6);
  if (v6)
    v1 = *(unsigned int *)(v6 + 4);
  else
    v1 = 0;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ACB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4ACB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

void std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_250D4ACF0;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250D4ACF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh::PerformMerging(std::vector<std::shared_ptr<cv3d::cv::gess::isochart::IsoChartMesh>> &,std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>> &,unsigned long,unsigned long,float const&,float const&,std::function<BOOL ()(void)>,BOOL,BOOL)::$_1>,void ()(std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::mutex *v5;
  void **v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  unsigned int v31;
  char v32;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v32 = 0;
  v31 = 0;
  cv3d::cv::gess::isochart::IsoChartMesh::MergeAdjacentChart(*(uint64_t **)(a1 + 8), *(_QWORD **)(a1 + 16), *(_DWORD *)(v4 + 4), **(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 32), *(uint64_t **)(a1 + 40), &v32, &v31, *(std::mutex **)(a1 + 80), *(const float **)(a1 + 48), *(const float **)(a1 + 56), **(_BYTE **)(a1 + 88));
  if (v32)
  {
    v5 = *(std::mutex **)(a1 + 80);
    std::mutex::lock(v5);
    v6 = *(void ***)(a1 + 96);
    v7 = *(unsigned int *)(v4 + 4) | ((unint64_t)v31 << 32);
    v8 = (unint64_t *)v6[1];
    v9 = (unint64_t)v6[2];
    if ((unint64_t)v8 >= v9)
    {
      v11 = ((char *)v8 - (_BYTE *)*v6) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = v9 - (_QWORD)*v6;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v6 + 2), v14);
      else
        v15 = 0;
      v16 = (unint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)*v6;
      v18 = (char *)v6[1];
      if (v18 != *v6)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = (char *)*v6;
      }
      *v6 = v16;
      v6[1] = v10;
      v6[2] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v8 = v7;
      v10 = v8 + 1;
    }
    v6[1] = v10;
    v21 = *(_QWORD **)(a1 + 8);
    *(float *)v4 = -(float)((float)((float)*(unsigned int *)(v4 + 4)
                                  / (float)(unint64_t)((uint64_t)(v21[1] - *v21) >> 4))
                          + (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v21
                                                                                                  + 16 * *(unsigned int *)(v4 + 4))
                                                                                      + 40)
                                                                          + 160)
                                                              - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v21
                                                                                                  + 16 * *(unsigned int *)(v4 + 4))
                                                                                      + 40)
                                                                          + 152)) >> 2));
    v22 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)&v30 = v4;
    *((_QWORD *)&v30 + 1) = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert(v22, &v30);
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    --**(_DWORD **)(a1 + 72);
    std::mutex::unlock(v5);
  }
  if (v3)
  {
    v28 = (unint64_t *)&v3->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_23C5B071C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::__shared_weak_count *v15;
  std::mutex *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;

  std::mutex::unlock(v16);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::isochart::IsoChartMesh,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,void>@<X0>(cv3d::cv::gess::mesh::TriMesh *a1@<X1>, const float *a2@<X2>, const float *a3@<X3>, BOOL *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x180uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23C5B0810(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::isochart::IsoChartMesh>::__shared_ptr_emplace[abi:ne180100]<cv3d::cv::gess::mesh::TriMesh &,float const&,float const&,BOOL &,std::allocator<cv3d::cv::gess::isochart::IsoChartMesh>,0>(_QWORD *a1, cv3d::cv::gess::mesh::TriMesh *a2, const float *a3, const float *a4, BOOL *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4AC80;
  cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)(a1 + 3), a2, a3, a4, *a5);
  return a1;
}

void sub_23C5B085C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::isochart::IsoChartMesh *cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh(cv3d::cv::gess::isochart::IsoChartMesh *this, cv3d::cv::gess::mesh::TriMesh *a2, const float *a3, const float *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *__p[2];
  char v25;
  _QWORD v26[2];

  *(_WORD *)this = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = a3;
  *((_QWORD *)this + 7) = a4;
  *((_BYTE *)this + 64) = a5;
  *((_DWORD *)this + 17) = -1;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *((_QWORD *)this + 14) = 0;
  cv3d::cv::gess::isochart::IsoMap::IsoMap((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120));
  *((_QWORD *)this + 24) = -1;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 25) = -1;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_QWORD *)this + 44) = 0;
  v6 = *((_QWORD *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v26[0] = 0;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v6 + 80), (uint64_t)v26, (unsigned __int8 *)__p);
  *((_DWORD *)this + 48) = v8;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v8 == -1)
  {
    v9 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v26[0] = 0;
    *((_DWORD *)this + 48) = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((char **)(v9 + 80), (uint64_t)v26, (__int128 *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v10 = *((_QWORD *)this + 5);
  LODWORD(v26[0]) = *((_DWORD *)this + 48);
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v10 + 80), (unsigned int *)v26, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 5) + 112) - *(_QWORD *)(*((_QWORD *)this + 5) + 104)) >> 2);
  v12 = *((_QWORD *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
  LODWORD(v26[0]) = 0;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v12 + 56), (uint64_t)v26, (unsigned __int8 *)__p);
  *((_DWORD *)this + 49) = v13;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v13 == -1)
  {
    v14 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "f:area");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v14, (_DWORD *)this + 49, (__int128 *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v15 = *((_QWORD *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
  LODWORD(v26[0]) = 0;
  v16 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v15 + 32), (uint64_t)v26, (unsigned __int8 *)__p);
  *((_DWORD *)this + 50) = v16;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v16 == -1)
  {
    v17 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v17, (_DWORD *)this + 50, (__int128 *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v18 = *((_QWORD *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
  LODWORD(v26[0]) = 0;
  v19 = cv3d::cv::gess::mesh::AttributeContainer::handle<float>((uint64_t **)(v18 + 32), (uint64_t)v26, (unsigned __int8 *)__p);
  *((_DWORD *)this + 51) = v19;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v19 == -1)
  {
    v20 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "h:signal_length");
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<float>(v20, (_DWORD *)this + 51, (__int128 *)__p);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  if (*((_BYTE *)this + 64))
  {
    v21 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(__p, "f:imt");
    v26[0] = 0;
    v26[1] = 0;
    v22 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v21 + 56), (uint64_t)v26, (unsigned __int8 *)__p);
    *((_DWORD *)this + 17) = v22;
    if (v25 < 0)
    {
      operator delete(__p[0]);
      v22 = *((_DWORD *)this + 17);
    }
    if (v22 == -1)
      *((_BYTE *)this + 64) = 0;
  }
  return this;
}

void sub_23C5B0BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, cv3d::cv::gess::isochart::IsoMap *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  _QWORD *v17;
  _QWORD **v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  v21 = (void *)v17[42];
  if (v21)
  {
    v17[43] = v21;
    operator delete(v21);
  }
  v22 = (void *)v17[39];
  if (v22)
  {
    v17[40] = v22;
    operator delete(v22);
  }
  v23 = (void *)v17[36];
  if (v23)
  {
    v17[37] = v23;
    operator delete(v23);
  }
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v24 = (void *)v17[29];
  if (v24)
  {
    v17[30] = v24;
    operator delete(v24);
  }
  if (*v19)
    operator delete(*v19);
  cv3d::cv::gess::isochart::IsoMap::~IsoMap(a9);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(v15, *v18);
  v25 = *v16;
  if (*v16)
  {
    v17[10] = v25;
    operator delete(v25);
  }
  v26 = (_QWORD *)v17[4];
  if (v26 == v17 + 1)
  {
    v27 = 4;
    v26 = v17 + 1;
  }
  else
  {
    if (!v26)
      goto LABEL_20;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_20:
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::IsomapParameterization(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  void *__p;
  void *v22;

  v2 = *((_QWORD *)this + 10) - *((_QWORD *)this + 9);
  if ((unint64_t)v2 < 8)
    return 0;
  v3 = v2 >> 2;
  v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 5) + 112) - *(_QWORD *)(*((_QWORD *)this + 5) + 104)) >> 2;
  *((_QWORD *)this + 27) = 0;
  std::vector<BOOL>::resize((uint64_t)this + 208, v4, 0);
  v5 = (unsigned int *)*((_QWORD *)this + 9);
  v6 = *((_QWORD *)this + 26);
  v7 = v3 <= 1 ? 1 : v3;
  do
  {
    v8 = *v5++;
    *(_QWORD *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) |= 1 << v8;
    --v7;
  }
  while (v7);
  *((_QWORD *)this + 40) = *((_QWORD *)this + 39);
  std::vector<float>::resize((uint64_t)this + 312, v4 * v3);
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistance((uint64_t)this, (unsigned int **)this + 9, *((float **)this + 39));
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) != 0)
      return 0;
  }
  std::vector<float>::vector(&__p, v3 * v3);
  cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicMatrix(this, &__p);
  if (v3 >= 0x19)
    v11 = 25;
  else
    v11 = v3;
  v20 = 0;
  cv3d::cv::gess::isochart::IsoMap::Init((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120), v3, (float *)__p);
  cv3d::cv::gess::isochart::IsoMap::ComputeLargestEigen((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120), v11, &v20);
  v22 = __p;
  if (v11 < v20)
    __assert_rtn("IsomapParameterization", "IsoChartMesh.cpp", 89, "max_eigen_dimension >= calculated_dimension");
  v12 = *((_QWORD *)this + 4);
  if (v12 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) & 1) != 0
    || (v13 = (unint64_t *)((char *)this + 184),
        cv3d::cv::gess::isochart::IsoMap::GetPrimaryEnergyDimension((char *)this + 120, 0.9, (unint64_t *)this + 23), (v14 = *((_QWORD *)this + 4)) != 0)&& ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14) & 1) != 0|| (v15 = *v13) == 0)
  {
    v10 = 0;
  }
  else
  {
    if (v15 <= 2 && v20 >= 3)
    {
      v15 = 3;
      *v13 = 3;
    }
    v16 = *((_QWORD *)this + 42);
    if (v16 != *((_QWORD *)this + 43))
      *((_QWORD *)this + 43) = v16;
    std::vector<float>::resize((uint64_t)this + 336, v15 * v4);
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord(this, v17, v18);
    v10 = 1;
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_23C5B0F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistance(uint64_t a1, unsigned int **a2, float *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  uint64_t v18;
  int *v19;
  float *v20;
  uint64_t v21;
  int v22;
  int v23;
  int *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  float *v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  float v36;
  unsigned int *v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t v40;
  void *__p;
  void *v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  void *v48[3];

  v6 = *a2;
  v5 = a2[1];
  v7 = v5 - *a2;
  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(v8 + 104);
  v9 = *(_QWORD *)(v8 + 112);
  v11 = (v9 - v10) >> 2;
  std::vector<float>::vector(v48, v11);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  __p = 0;
  v43 = 0;
  v44 = 0;
  if (*(_BYTE *)(a1 + 64))
  {
    std::vector<float>::resize((uint64_t)&v45, (v9 - v10) >> 2);
    std::vector<float>::resize((uint64_t)&__p, v11 * v7);
  }
  v12 = 4 * v11;
  if (v5 == v6)
  {
    if (*(_BYTE *)(a1 + 64))
LABEL_23:
      cv3d::cv::gess::isochart::CombineGeodesicAndSignalDistance(a3, (float **)&__p, v11 * v7);
LABEL_24:
    if (v5 != v6)
    {
      v28 = 0;
      v29 = *a2;
      if (v7 <= 1)
        v30 = 1;
      else
        v30 = v7;
      do
      {
        v31 = &a3[v29[v28]];
        v32 = v29;
        v33 = v30;
        do
        {
          v34 = *v32++;
          v35 = v28 * v11 + v34;
          v36 = *v31;
          if (*v31 >= a3[v35])
            v36 = a3[v35];
          *v31 = v36;
          a3[v35] = v36;
          v31 = (float *)((char *)v31 + v12);
          --v33;
        }
        while (v33);
        ++v28;
      }
      while (v28 != v30);
    }
  }
  else
  {
    v37 = v6;
    v38 = v5;
    v13 = 0;
    v14 = 0;
    if (v11 <= 1)
      v15 = 1;
    else
      v15 = (v9 - v10) >> 2;
    if (v7 <= 1)
      v16 = 1;
    else
      v16 = v7;
    v39 = v7;
    v40 = v16;
    v17 = a3;
    while (1)
    {
      v18 = *(_QWORD *)(a1 + 32);
      if (v18)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18) & 1) != 0)
          break;
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra(a1, &(*a2)[v14], (uint64_t *)v48, (uint64_t)&v45);
      if (v9 != v10)
      {
        v19 = (int *)v48[0];
        v20 = v17;
        v21 = v15;
        do
        {
          v22 = *v19++;
          *(_DWORD *)v20++ = v22;
          --v21;
        }
        while (v21);
      }
      v23 = *(unsigned __int8 *)(a1 + 64);
      if (*(_BYTE *)(a1 + 64))
      {
        v24 = (int *)v45;
        if (v11 != (v46 - (_BYTE *)v45) >> 2)
          __assert_rtn("CalculateGeodesicDistance", "IsoChartMesh.cpp", 166, "signal_distances.size() == v_size");
        if (v9 != v10)
        {
          v25 = (char *)__p + v13;
          v26 = v15;
          do
          {
            v27 = *v24++;
            *v25++ = v27;
            --v26;
          }
          while (v26);
        }
      }
      ++v14;
      v17 = (float *)((char *)v17 + v12);
      v13 += v12;
      if (v14 == v40)
      {
        v5 = v38;
        v7 = v39;
        v6 = v37;
        if (!v23)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
}

void sub_23C5B11B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicMatrix(_QWORD *result, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int v14;

  v2 = (char *)result[9];
  v3 = (char *)result[10];
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v5 = 0;
    v6 = v4 >> 2;
    v7 = (uint64_t)(*(_QWORD *)(result[5] + 112) - *(_QWORD *)(result[5] + 104)) >> 2;
    v8 = result[39];
    v9 = (_DWORD *)*a2;
    if (v6 <= 1)
      v10 = 1;
    else
      v10 = v6;
    v11 = 4 * v6;
    do
    {
      v12 = (unsigned int *)v2;
      v13 = v9;
      result = (_QWORD *)v10;
      do
      {
        v14 = *v12++;
        *v13++ = *(_DWORD *)(v8 + 4 * (v5 * v7 + v14));
        result = (_QWORD *)((char *)result - 1);
      }
      while (result);
      ++v5;
      v9 = (_DWORD *)((char *)v9 + v11);
    }
    while (v5 != v10);
  }
  return result;
}

float *cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord(cv3d::cv::gess::isochart::IsoChartMesh *this, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  float *result;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  float *v41;
  float *v42;
  uint64_t v43;
  float v44;
  float v45;
  float *v46;
  float *v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t v71;
  int32x4_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  float32x4_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float *v83;
  unint64_t v84;
  float *v85;
  uint64_t v86;
  uint64_t v87;
  void *__p[3];
  void *v89[3];
  void *v90[3];
  unsigned int v91;

  if (*((_QWORD *)this + 23) <= 1uLL)
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateVertMappingCoord();
  v4 = (uint64_t *)*((_QWORD *)this + 5);
  v86 = v4[13];
  v87 = v4[14];
  v6 = *((_QWORD *)this + 9);
  v5 = *((_QWORD *)this + 10);
  v7 = (v5 - v6) >> 2;
  LODWORD(v90[0]) = *((_DWORD *)this + 48);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v4 + 10, (unsigned int *)v90, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, (v87 - v86) >> 2);
  v9 = *((_QWORD *)this + 23);
  if ((v9 * v7) >> 62)
    v10 = -1;
  else
    v10 = 4 * v9 * v7;
  result = (float *)operator new[](v10, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v12 = result;
    cv3d::cv::gess::isochart::IsoMap::GetDestineVectors((cv3d::cv::gess::isochart::IsoChartMesh *)((char *)this + 120), v9, result);
    v84 = (v87 - v86) >> 2;
    v85 = v12;
    std::vector<float>::vector(v90, *((_QWORD *)this + 23));
    if (v5 != v6)
    {
      v14 = 0;
      if (v7 <= 1)
        v15 = 1;
      else
        v15 = (v5 - v6) >> 2;
      v16 = *((_QWORD *)this + 23);
      v17 = v85;
      do
      {
        v18 = *(unsigned int *)(*((_QWORD *)this + 9) + 4 * v14);
        if (v16)
        {
          v19 = 0;
          v20 = 0;
          do
          {
            v21 = v17[v19];
            if (fabsf(v21) == INFINITY)
              __assert_rtn("CalculateVertMappingCoord", "IsoChartMesh.cpp", 362, "!std::isinf(pf_coords[jj])");
            *(float *)(*((_QWORD *)this + 42) + 4
                                              * ((_DWORD)v18 * (_DWORD)v16 + (unsigned __int16)v20++)) = v21;
            v19 = (unsigned __int16)v20;
          }
          while (v16 > (unsigned __int16)v20);
        }
        v22 = *(_QWORD *)v17;
        v23 = *((_QWORD *)this + 5);
        LODWORD(v89[0]) = *((_DWORD *)this + 48);
        v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v23 + 80), (unsigned int *)v89, v13);
        v25 = *(_QWORD *)(v24 + 40);
        if (v18 >= (*(_QWORD *)(v24 + 48) - v25) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(_QWORD *)(v25 + 8 * v18) = v22;
        v16 = *((_QWORD *)this + 23);
        v17 += v16;
        ++v14;
      }
      while (v14 != v15);
    }
    v26 = (float *)*((_QWORD *)this + 21);
    std::vector<float>::vector(v89, (v5 - v6) >> 2);
    if (v87 != v86)
    {
      v28 = 0;
      v29 = 0;
      if (v7 <= 1)
        v30 = 1;
      else
        v30 = (v5 - v6) >> 2;
      if (v84 <= 1)
        v31 = 1;
      else
        v31 = (v87 - v86) >> 2;
      v32 = 4 * v7;
      do
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 26) + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
        {
          if (v5 != v6)
          {
            v33 = (float *)v89[0];
            v34 = (float *)(*((_QWORD *)this + 39) + v28);
            v35 = v26;
            v36 = v30;
            do
            {
              v37 = *v35++;
              *v33++ = v37 - (float)(*v34 * *v34);
              v34 += v84;
              --v36;
            }
            while (v36);
          }
          v38 = *((_QWORD *)this + 23);
          v39 = (_QWORD *)(*((_QWORD *)this + 42) + 4 * v38 * v29);
          if (v38)
          {
            v40 = 0;
            v41 = (float *)v89[0];
            v43 = *((_QWORD *)this + 19);
            v42 = (float *)*((_QWORD *)this + 20);
            do
            {
              *((_DWORD *)v39 + v40) = 0;
              v44 = 0.0;
              v45 = 0.0;
              if (v5 != v6)
              {
                v46 = v41;
                v47 = v42;
                v48 = v30;
                do
                {
                  v49 = *v46++;
                  v50 = v49;
                  v51 = *v47++;
                  v45 = v45 + (float)(v50 * v51);
                  *((float *)v39 + v40) = v45;
                  --v48;
                }
                while (v48);
              }
              v52 = *(float *)(v43 + 4 * v40);
              if (v52 > 0.0)
              {
                v53 = sqrtf(v52);
                v54 = v53 + v53;
                if (v52 < 0.0)
                  v54 = 0.0;
                v44 = v45 / v54;
              }
              *((float *)v39 + v40++) = v44;
              v42 = (float *)((char *)v42 + v32);
            }
            while (v40 != v38);
          }
          v55 = *v39;
          v56 = *((_QWORD *)this + 5);
          LODWORD(__p[0]) = *((_DWORD *)this + 48);
          v57 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v56 + 80), (unsigned int *)__p, v27);
          v58 = *(_QWORD *)(v57 + 40);
          if (v29 >= (*(_QWORD *)(v57 + 48) - v58) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(_QWORD *)(v58 + 8 * v29) = v55;
        }
        ++v29;
        v28 += 4;
      }
      while (v29 != v31);
    }
    v59 = *((_QWORD *)this + 5);
    v61 = *(_QWORD *)(v59 + 152);
    v60 = *(_QWORD *)(v59 + 160);
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    v62 = *((_QWORD *)this + 5);
    v91 = *((_DWORD *)this + 48);
    v64 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v62 + 80), &v91, v63);
    v66 = (v60 - v61) >> 2;
    if (v60 == v61)
    {
      v68 = 0;
    }
    else
    {
      v67 = 0;
      v68 = 0;
      if (v66 <= 1)
        v69 = 1;
      else
        v69 = v66;
      do
      {
        v70 = *((_QWORD *)this + 5);
        v91 = v67;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v70, &v91, __p);
        v73 = *((unsigned int *)__p[0] + 1);
        v74 = *(_QWORD *)(v64 + 40);
        v75 = (*(_QWORD *)(v64 + 48) - v74) >> 3;
        if (v75 <= v73 || (v76 = *(unsigned int *)__p[0], v75 <= v76))
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v77 = *((unsigned int *)__p[0] + 2);
        if (v75 <= v77)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v71.i64[0] = *(_QWORD *)(v74 + 8 * v76);
        *(float32x2_t *)v72.i8 = vsub_f32(*(float32x2_t *)(v74 + 8 * v73), *(float32x2_t *)v71.i8);
        *(float32x2_t *)v71.i8 = vsub_f32(*(float32x2_t *)(v74 + 8 * v77), *(float32x2_t *)v71.i8);
        v78 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL), v71);
        v65 = (__n128)vzip2q_s32(vzip1q_s32(v71, (int32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL)), v71);
        v65.n128_f32[0] = COERCE_FLOAT(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v72, (int32x4_t)vextq_s8(*(int8x16_t *)&v72, *(int8x16_t *)&v72, 0xCuLL)), v72), v78), *(float32x4_t *)&v65, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v72, *(int8x16_t *)&v72, 4uLL), v72)).i32[2]);
        if (v65.n128_f32[0] >= 0.0)
          ++v68;
        ++v67;
      }
      while (v69 != v67);
    }
    if (v68 < v66 - v68 && v87 != v86)
    {
      v80 = *(_QWORD *)(v64 + 40);
      v81 = (*(_QWORD *)(v64 + 48) - v80) >> 3;
      v82 = (v87 - v86) >> 2;
      if (v84 <= 1)
        v82 = 1;
      v83 = (float *)(v80 + 4);
      do
      {
        if (!v81)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v65.n128_f32[0] = -*v83;
        *v83 = v65.n128_f32[0];
        v83 += 2;
        --v81;
        --v82;
      }
      while (v82);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v89[0])
    {
      v89[1] = v89[0];
      operator delete(v89[0]);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    return (float *)MEMORY[0x2426211A0](v85, 0x1000C8052888210, v65);
  }
  return result;
}

void sub_23C5B17E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  MEMORY[0x2426211A0](a10, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateLandmarks(uint64_t a1, _QWORD *a2)
{
}

float *cv3d::cv::gess::isochart::CombineGeodesicAndSignalDistance(float *result, float **a2, unint64_t a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float v10;

  if (a3)
  {
    v3 = 0;
    v4 = 0.0;
    v5 = 0.0;
    do
    {
      v5 = v5 + (*a2)[v3];
      v4 = v4 + result[v3++];
    }
    while (a3 != v3);
    v6 = v5 / (float)a3;
    if (v6 > 0.00000001)
    {
      v7 = (float)(v4 / (float)a3) / v6;
      v8 = *a2;
      do
      {
        v9 = *v8++;
        v10 = (float)((float)(v7 * v9) * 0.3) + *result * 0.699999988;
        *result++ = v10;
        --a3;
      }
      while (a3);
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  _DWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unsigned int v56[5];
  unsigned int HEdge;
  _BYTE v58[20];
  unsigned int v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  _QWORD v67[3];
  void *v68[4];

  v4 = (a3[1] - *a3) >> 2;
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(v5 + 104);
  v6 = *(_QWORD *)(v5 + 112);
  if (v4 != (v6 - v7) >> 2)
    cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceToVertexDijkstra();
  LOBYTE(v63) = 0;
  std::vector<BOOL>::vector(v68, v4, (unsigned __int8 *)&v63);
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(v67, v4);
  v51 = v6;
  if (v6 != v7)
  {
    v11 = 0;
    if (v4 <= 1)
      v12 = 1;
    else
      v12 = v4;
    do
    {
      v13 = operator new(0x28uLL);
      v13[1] = 0;
      v13[2] = 0;
      *((_DWORD *)v13 + 6) = 0;
      *v13 = &off_250D4ACB8;
      v13[4] = -1;
      *(_QWORD *)&v63 = v13 + 3;
      *((_QWORD *)&v63 + 1) = v13;
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v67[0] + 16 * v11, &v63);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      if (*((_QWORD *)&v63 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v66 = 0;
  v64 = 0;
  v63 = 0uLL;
  v65 = 0;
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize((uint64_t)&v63, v4);
  v17 = (_DWORD *)*a3;
  v18 = a3[1] - *a3;
  if (v18 >= 1)
    memset_pattern16((void *)*a3, &unk_23C60C3A0, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
  v19 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v20 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v20 >= 1)
      memset_pattern16(*(void **)a4, &unk_23C60C3A0, 4 * (((unint64_t)v20 >> 2) - ((unint64_t)v20 > 3)) + 4);
  }
  v21 = *a2;
  *(_QWORD *)((char *)v68[0] + ((v21 >> 3) & 0x1FFFFFF8)) |= 1 << v21;
  v17[v21] = 0;
  if (v19)
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v21) = 0;
  v22 = *(_OWORD *)(v67[0] + 16 * v21);
  v23 = *(_DWORD **)(v67[0] + 16 * v21);
  *v23 = 0;
  v23[1] = v21;
  v62 = v22;
  if (*((_QWORD *)&v22 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)&v63, &v62);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v51 != v7)
  {
    v29 = 0;
    if (v4 <= 1)
      v30 = 1;
    else
      v30 = v4;
    do
    {
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at((uint64_t *)&v63, 0, &v60);
      v59 = *(_DWORD *)(v60 + 4);
      *(_QWORD *)((char *)v68[0] + (((unint64_t)v59 >> 3) & 0x1FFFFFF8)) |= 1 << v59;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v58, *(_QWORD *)(a1 + 40) + 104, &v59);
      HEdge = -1;
      while (1)
      {
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v58);
        if (HEdge == -1)
          break;
        v31 = *(_QWORD *)(a1 + 40) + 104;
        v32 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, &HEdge);
        v56[0] = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v31, v32) + 12);
        if (((*(_QWORD *)((char *)v68[0] + (((unint64_t)v56[0] >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v56[0])) & 1) == 0)
          cv3d::cv::gess::isochart::IsoChartMesh::UpdateAdjacentVertexGeodistance(a1, &v59, v56, &HEdge, v68, a3, (_QWORD *)a4);
      }
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v56, *(_QWORD *)(a1 + 40) + 104, &v59);
      while (1)
      {
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v56);
        if (HEdge == -1)
          break;
        v33 = *(_QWORD *)(a1 + 40) + 104;
        v34 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v33, &HEdge);
        v35 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v33, v34) + 12);
        if (((*(_QWORD *)((char *)v68[0] + ((v35 >> 3) & 0x1FFFFFF8)) >> v35) & 1) == 0)
        {
          v36 = v67[0];
          v37 = *(_QWORD *)(v67[0] + 16 * v35);
          if (*(_QWORD *)(v37 + 8) == -1)
          {
            *(_DWORD *)(v37 + 4) = v35;
            *(float *)v37 = -*(float *)(*a3 + 4 * v35);
            *(_QWORD *)&v53 = v37;
            v44 = *(_QWORD *)(v36 + 16 * v35 + 8);
            *((_QWORD *)&v53 + 1) = v44;
            if (v44)
            {
              v45 = (unint64_t *)(v44 + 8);
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)&v63, &v53);
            v41 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
            if (*((_QWORD *)&v53 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
              do
                v43 = __ldaxr(v47);
              while (__stlxr(v43 - 1, v47));
              goto LABEL_52;
            }
          }
          else
          {
            v54 = *(_QWORD *)(v67[0] + 16 * v35);
            v38 = *(std::__shared_weak_count **)(v67[0] + 16 * v35 + 8);
            v55 = v38;
            if (v38)
            {
              p_shared_owners = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldxr(p_shared_owners);
              while (__stxr(v40 + 1, p_shared_owners));
            }
            cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update((uint64_t *)&v63, &v54, -*(float *)(*a3 + 4 * v35));
            v41 = v55;
            if (v55)
            {
              v42 = (unint64_t *)&v55->__shared_owners_;
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
LABEL_52:
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
        }
      }
      v48 = v61;
      if (v61)
      {
        v49 = (unint64_t *)&v61->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      ++v29;
    }
    while (v29 != v30);
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&v63);
  *(_QWORD *)&v63 = v67;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v68[0])
    operator delete(v68[0]);
}

void sub_23C5B1E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void **a25)
{
  uint64_t v25;
  void *v27;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&a25);
  a25 = (void **)(v25 - 136);
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a25);
  v27 = *(void **)(v25 - 112);
  if (v27)
    operator delete(v27);
  _Unwind_Resume(a1);
}

float32x4_t *cv3d::cv::gess::isochart::IsoChartMesh::UpdateAdjacentVertexGeodistance(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int *v38;
  float32x4_t *result;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned __int32 v48;
  unsigned int v49;
  unsigned int v50;

  v14 = *(_QWORD *)(a1 + 40);
  v49 = *(_DWORD *)(a1 + 200);
  v15 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v14 + 32), &v49, (uint64_t)a3);
  v18 = *a4;
  v19 = *(_QWORD *)(v15 + 40);
  if (v18 >= (*(_QWORD *)(v15 + 48) - v19) >> 2)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v15, v16, v17);
  v20 = *(_QWORD *)(a1 + 40);
  v50 = *(_DWORD *)(a1 + 204);
  v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v20 + 32), &v50, v17);
  v24 = *a4;
  v25 = *(_QWORD *)(v21 + 40);
  if (v24 >= (*(_QWORD *)(v21 + 48) - v25) >> 2)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v21, v22, v23);
  v26 = *a3;
  v27 = *a2;
  v28 = *(float *)(*a6 + 4 * v27) + *(float *)(v19 + 4 * v18);
  if (*(float *)(*a6 + 4 * v26) > v28)
  {
    *(float *)(*a6 + 4 * v26) = v28;
    if (*(_BYTE *)(a1 + 64))
      *(float *)(*a7 + 4 * v26) = *(float *)(*a7 + 4 * v27) + *(float *)(v25 + 4 * v24);
  }
  v29 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), *a4);
  if ((v30 & *v29) == 0)
  {
    v31 = *(_QWORD *)(a1 + 40) + 104;
    v32 = cv3d::cv::gess::mesh::Topology::h(v31, a4);
    v33 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v31, (unsigned int *)(v32 + 8));
    v48 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v31, v33) + 12);
    if (((*(_QWORD *)(*a5 + (((unint64_t)v48 >> 3) & 0x1FFFFFF8)) >> v48) & 1) != 0)
    {
      if (*(float *)(*a6 + 4 * v48) <= *(float *)(*a6 + 4 * *a2))
      {
        v36 = &v48;
        v35 = a1;
        v34 = a2;
      }
      else
      {
        v34 = &v48;
        v35 = a1;
        v36 = a2;
      }
      cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceABC(v35, v36, v34, a3, a6);
    }
  }
  v37 = *(_QWORD *)(a1 + 40);
  v38 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v37 + 104, a4);
  result = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(v37, *(_DWORD *)(v37 + 180), *v38);
  if ((v40 & result->i64[0]) == 0)
  {
    v41 = *(_QWORD *)(a1 + 40) + 104;
    v42 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v41, a4);
    v43 = cv3d::cv::gess::mesh::Topology::h(v41, v42);
    v44 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v41, (unsigned int *)(v43 + 8));
    result = (float32x4_t *)cv3d::cv::gess::mesh::Topology::h(v41, v44);
    v48 = result->u32[3];
    if (((*(_QWORD *)(*a5 + (((unint64_t)v48 >> 3) & 0x1FFFFFF8)) >> v48) & 1) != 0)
    {
      if (*(float *)(*a6 + 4 * v48) <= *(float *)(*a6 + 4 * *a2))
      {
        v47 = &v48;
        v46 = a1;
        v45 = a2;
      }
      else
      {
        v45 = &v48;
        v46 = a1;
        v47 = a2;
      }
      return cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceABC(v46, v47, v45, a3, a6);
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update(uint64_t *a1, uint64_t *a2, float a3)
{
  uint64_t v3;
  unint64_t v4;
  float v5;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4 < a1[4])
    {
      v5 = *(float *)v3;
      *(float *)v3 = a3;
      if (v5 <= a3)
        cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::upheap(a1, v4);
      else
        cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::downheap(a1, v4);
    }
  }
}

float32x4_t *cv3d::cv::gess::isochart::IsoChartMesh::CalculateGeodesicDistanceABC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5)
{
  uint64_t v9;
  float v10;
  float v11;
  float32x4_t *result;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  BOOL v29;
  float v30;
  uint64_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;

  v9 = *a3;
  v10 = *(float *)(*a5 + 4 * v9);
  v11 = *(float *)(*a5 + 4 * *a2);
  v35 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 176), v9);
  v36 = vsubq_f32(v35, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 176), *a4));
  v34 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 176), *a2);
  result = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 176), *a4);
  v13 = vsubq_f32(v34, *result);
  v14 = vmulq_f32(v36, v36);
  v14.i32[3] = 0;
  v15 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14)));
  v16 = vmulq_f32(v13, v13);
  v16.i32[3] = 0;
  v17 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16)));
  v18 = v15 * v17;
  if (fabsf(v15 * v17) >= 0.00000001)
  {
    v19 = v10 - v11;
    v20 = vmulq_f32(v13, v36);
    v20.i32[3] = 0;
    v21 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20)) / v18;
    v22 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL), (int32x4_t)v13), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v36, (int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL)), (int32x4_t)v36)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v13, (int32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL)), (int32x4_t)v13), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (int32x4_t)v36));
    v23 = vmulq_f32(v22, v22);
    v23.i32[3] = 0;
    v22.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23))) / v18;
    v24 = (float)((float)(v17 * v17) + (float)(v15 * v15)) + (float)((float)((float)(v15 * -2.0) * v17) * v21);
    v25 = (float)((float)(v10 - v11) * (float)(v17 + v17)) * (float)-(float)(v17 - (float)(v15 * v21));
    v26 = (float)((float)(v24 * -4.0)
                * (float)((float)(v17 * v17)
                        * (float)((float)(v22.f32[0] * (float)((float)-(float)(v15 * v15) * v22.f32[0]))
                                + (float)(v19 * v19))))
        + (float)(v25 * v25);
    if (v26 >= 0.0 && fabsf(v24) >= 0.00000001)
    {
      v27 = (float)(sqrtf(v26) - v25) / (float)(v24 + v24);
      if (v27 >= v19 && fabsf(v27) >= 0.00000001)
      {
        v28 = (float)(v17 * (float)(v27 - v19)) / v27;
        v29 = v28 <= (float)(v15 / v21) || v21 <= 0.00000001;
        v30 = v15 * v21;
        if (v29 && v28 >= v30)
        {
          v32 = *a4;
          v33 = v27 + *(float *)(*a5 + 4 * *a2);
          if (*(float *)(*a5 + 4 * v32) > v33)
            *(float *)(*a5 + 4 * v32) = v33;
        }
      }
    }
  }
  return result;
}

void cv3d::cv::gess::isochart::IsoChartMesh::Partition(uint64_t a1, char **a2, _QWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v10;
  cv3d::cv::gess::mesh::PolyMesh *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unsigned int *v15;
  std::vector<unsigned int>::pointer v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  const cv3d::cv::gess::mesh::PolyMesh *v38;
  uint64_t v39;
  char v40;
  char v41;
  std::vector<unsigned int> *v42;
  char *v43;
  uint64_t v44;
  std::vector<unsigned int> v45;
  std::vector<unsigned int> **v46;

  cv3d::cv::gess::isochart::IsoChartMesh::CollectRepresentativeVertices((cv3d::cv::gess::isochart::IsoChartMesh *)a1);
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) & 1) == 0)
  {
    v41 = 0;
    LODWORD(v45.__begin_) = a5;
    cv3d::cv::gess::isochart::IsoChartMesh::PartitionGeneralShape(a1, a2, (unsigned int *)&v45, *a4 != 0, &v41);
    v12 = *(_QWORD *)(a1 + 32);
    if (!v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) & 1) == 0)
    {
      if (!v41)
      {
        v13 = *a2;
        v14 = a2[1];
        if (*a2 != v14)
        {
          do
          {
            v16 = *(std::vector<unsigned int>::pointer *)v13;
            v15 = (unsigned int *)*((_QWORD *)v13 + 1);
            v45.__begin_ = *(std::vector<unsigned int>::pointer *)v13;
            v45.__end_ = v15;
            if (v15)
            {
              v17 = (unint64_t *)(v15 + 2);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            if (!cv3d::cv::gess::isochart::IsVertexManifold((cv3d::cv::gess::isochart *)v16, v11))
            {
              cv3d::cv::gess::alg::FixNonManifoldVertices((cv3d::cv::gess::alg *)v16, v11);
              v41 = 1;
            }
            if (v15)
            {
              v19 = (unint64_t *)(v15 + 2);
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              if (!v20)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v15);
              }
            }
            v13 += 16;
          }
          while (v13 != v14);
        }
      }
      v21 = *(_QWORD *)(a1 + 32);
      if (!v21 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 48))(v21) & 1) == 0)
      {
        v40 = a5;
        memset(&v45, 0, sizeof(v45));
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>>::__init_with_size[abi:ne180100]<std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*,std::shared_ptr<cv3d::cv::gess::mesh::TriMesh>*>((char *)&v45, *a2, a2[1], (a2[1] - *a2) >> 4);
        v22 = (char *)v45.__end_ - (char *)v45.__begin_;
        if (v45.__end_ != v45.__begin_)
        {
          v23 = v22 >> 4;
          v24 = (v22 & 0xFFFFFFFFFFFFFFF0) - 16;
          do
          {
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v25 = v23 - 1;
            cv3d::cv::gess::isochart::TrySplitMeshByComponents(*(_QWORD *)&v45.__begin_[4 * v23 - 4], (char **)&v42);
            if (v42 != (std::vector<unsigned int> *)v43)
            {
              v26 = a2[1];
              v27 = (uint64_t)&(*a2)[16 * v23];
              v28 = (char *)(v27 - 16);
              if ((char *)v27 != v26)
              {
                v29 = v27 - 16;
                v28 = &(*a2)[v24];
                do
                {
                  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v29, (__int128 *)(v29 + 16));
                  v28 += 16;
                  v30 = v29 + 32;
                  v29 += 16;
                }
                while ((char *)v30 != v26);
                v27 = (uint64_t)a2[1];
              }
              while ((char *)v27 != v28)
                v27 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v27 - 16);
              a2[1] = v28;
              v32 = (__int128 *)v42;
              v31 = (__int128 *)v43;
              while (v32 != v31)
                std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](a2, v32++);
            }
            v46 = &v42;
            std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
            v24 -= 16;
            v23 = v25;
          }
          while (v25);
        }
        v42 = &v45;
        std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
        v33 = *(_QWORD *)(a1 + 32);
        if (!v33 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 48))(v33) & 1) == 0)
        {
          a3[1] = 0;
          std::vector<BOOL>::resize((uint64_t)a3, (a2[1] - *a2) >> 4, 0);
          std::vector<unsigned int>::vector(&v45, (a2[1] - *a2) >> 4);
          v34 = *a2;
          if (a2[1] != *a2)
          {
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = cv3d::cv::gess::isochart::IsochartCountBoundaryLoops(*(_QWORD *)&v34[v35]);
              v45.__begin_[v36] = v37;
              if (cv3d::cv::gess::alg::CountConnectedComponents(*(cv3d::cv::gess::alg **)&(*a2)[v35], v38) != 1)__assert_rtn("Partition", "IsoChartMesh.cpp", 458, "1 == alg::CountConnectedComponents(*children_mesh[i])");
              if ((int)cv3d::cv::gess::isochart::IsochartCountGenus(*(_QWORD **)&(*a2)[v35], 1, v45.__begin_[v36]) >= 1)
                *(_QWORD *)(*a3 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
              if (v45.__begin_[v36] >= 2)
              {
                cv3d::cv::gess::isochart::IsoChartMesh::ProcessSingleBoundaryLoopAndComponent(a2, v36, v40, **(float **)(a1 + 48), 0.0005);
                v39 = a2[1] - *a2;
                if (a3[1] != v39 >> 4)
                  std::vector<BOOL>::resize((uint64_t)a3, v39 >> 4, 0);
              }
              ++v36;
              v34 = *a2;
              v35 += 16;
            }
            while (v36 < (a2[1] - *a2) >> 4);
          }
          if (v45.__begin_)
          {
            v45.__end_ = v45.__begin_;
            operator delete(v45.__begin_);
          }
        }
      }
    }
  }
}

void sub_23C5B278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CollectRepresentativeVertices(cv3d::cv::gess::isochart::IsoChartMesh *this)
{
  _QWORD *v2;
  uint64_t **v3;
  unint64_t v4;
  unint64_t i;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  unsigned int v16;
  unsigned int v17;

  v2 = (_QWORD *)((char *)this + 104);
  v3 = (uint64_t **)((char *)this + 96);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  v4 = v2[10];
  if (v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v16 = -1;
      v17 = -1;
      v6 = (unsigned int *)*((_QWORD *)this + 9);
      v7 = (unsigned int *)*((_QWORD *)this + 10);
      if (v6 != v7)
      {
        v8 = *((_QWORD *)this + 42);
        v9 = -1;
        v10 = 3.4028e38;
        v11 = -3.4028e38;
        v12 = -1;
        do
        {
          v13 = *v6;
          v14 = i + v4 * v13;
          v15 = *(float *)(v8 + 4 * v14);
          if (v15 > v11)
          {
            v17 = *v6;
            v15 = *(float *)(v8 + 4 * v14);
            v12 = v13;
            v11 = v15;
          }
          if (v15 < v10)
          {
            v9 = *v6;
            v16 = *v6;
            v10 = *(float *)(v8 + 4 * v14);
          }
          ++v6;
        }
        while (v6 != v7);
        if (v12 != -1 && v9 != -1)
        {
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v3, &v17, &v17);
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>(v3, &v16, &v16);
          v4 = *((_QWORD *)this + 23);
        }
      }
    }
  }
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::ProcessSingleBoundaryLoopAndComponent(char **a1, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int AllBoundaries;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  void *exception;
  std::vector<unsigned int> v15;
  void **v16[3];
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  float v21;
  float v22;
  _BYTE v23[360];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v21 = a5;
  v22 = a4;
  v20 = 0;
  v7 = a2;
  v8 = 16 * a2;
  do
  {
    cv3d::cv::gess::isochart::IsoChartMesh::IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v23, *(cv3d::cv::gess::mesh::TriMesh **)&(*a1)[v8], &v22, &v21, a3);
    if (cv3d::cv::gess::isochart::IsoChartMesh::CheckAndCutMultipleBoundaries((cv3d::cv::gess::isochart::IsoChartMesh *)v23, &v20))
    {
      AllBoundaries = v20;
    }
    else
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      cv3d::cv::gess::isochart::TrySplitMeshByComponents(*(_QWORD *)&(*a1)[v8], &v17);
      if (v18 == v17 || (unint64_t)(v18 - v17) < 0x11)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x242620E28](exception, "Unexpected boundary status.");
      }
      std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](&(*a1)[16 * v7], (uint64_t *)v17);
      v10 = v17;
      if ((unint64_t)(v18 - v17) >= 0x11)
      {
        v11 = 2;
        v12 = 1;
        do
        {
          std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](a1, (__int128 *)&v10[16 * v12]);
          v12 = v11;
          v10 = v17;
          ++v11;
        }
        while (v12 < (v18 - v17) >> 4);
      }
      memset(v16, 0, sizeof(v16));
      std::vector<unsigned int>::vector(&v15, (uint64_t)(*(_QWORD *)(*(_QWORD *)&(*a1)[v8] + 112) - *(_QWORD *)(*(_QWORD *)&(*a1)[v8] + 104)) >> 2);
      AllBoundaries = cv3d::cv::gess::isochart::FindAllBoundaries(*(_QWORD *)&(*a1)[v8], (uint64_t *)v16, &v15);
      v20 = AllBoundaries;
      if (v15.__begin_)
      {
        v15.__end_ = v15.__begin_;
        operator delete(v15.__begin_);
      }
      v15.__begin_ = (std::vector<unsigned int>::pointer)v16;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      v16[0] = (void **)&v17;
      std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](v16);
    }
    cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)v23);
  }
  while (AllBoundaries > 1);
  return 1;
}

void sub_23C5B2AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  a13 = &a16;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  cv3d::cv::gess::isochart::IsoChartMesh::~IsoChartMesh((cv3d::cv::gess::isochart::IsoChartMesh *)&a21);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::CheckAndCutMultipleBoundaries(cv3d::cv::gess::isochart::IsoChartMesh *this, unsigned int *a2)
{
  std::vector<unsigned int>::size_type v4;
  unsigned int AllBoundaries;
  uint64_t v6;
  std::vector<unsigned int> __p;
  uint64_t v9[3];

  *a2 = 0;
  v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 5) + 112) - *(_QWORD *)(*((_QWORD *)this + 5) + 104)) >> 2;
  memset(v9, 0, sizeof(v9));
  AllBoundaries = cv3d::cv::gess::isochart::FindAllBoundaries(*((_QWORD *)this + 5), v9, &__p);
  *a2 = AllBoundaries;
  if (AllBoundaries < 2)
    goto LABEL_4;
  if ((cv3d::cv::gess::isochart::IsoChartMesh::DecreaseBoundary((uint64_t)this, v9, &__p) & 1) != 0)
  {
    --*a2;
LABEL_4:
    v6 = 1;
    goto LABEL_6;
  }
  v6 = 0;
LABEL_6:
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  __p.__begin_ = (std::vector<unsigned int>::pointer)v9;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v6;
}

void sub_23C5B2C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12)
{
  __p = &a12;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::isochart::IsoChartMesh::DecreaseBoundary(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  void *__p;
  void *v7;
  uint64_t v8;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) < 2)
    return 1;
  __p = 0;
  v7 = 0;
  v8 = 0;
  v3 = cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathBetweenBoundaries(a1, a2, a3, (uint64_t)&__p);
  if ((v3 & 1) != 0)
    cv3d::cv::gess::isochart::IsoChartMesh::CutChartAlongPath(a1, (uint64_t *)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_23C5B2CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::isochart::IsoChartMesh::CalMinPathToOtherBoundary(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  _DWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int HEdge;
  int v38;
  char *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float v60;
  unsigned int v61;
  float v62;
  float v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  int v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  const char *v86;
  uint64_t v87;
  uint64_t v90;
  __int128 v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  char *v96;
  void *__p;
  unint64_t v98;
  _BYTE v99[20];
  unsigned int v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  __int128 v103;
  void *v104[3];
  __int128 v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _QWORD v109[3];
  char *v110;
  unsigned int v111[3];

  v10 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(v10 + 104);
  v11 = *(_QWORD *)(v10 + 112);
  v13 = (v11 - v12) >> 2;
  LOBYTE(v105) = 0;
  std::vector<BOOL>::vector(&v110, v13, (unsigned __int8 *)&v105);
  std::vector<std::shared_ptr<cv3d::cv::gess::isochart::MaxHeapItem<float,unsigned int>>>::vector(v109, v13);
  v87 = v11;
  if (v11 != v12)
  {
    v14 = 0;
    if (v13 <= 1)
      v15 = 1;
    else
      v15 = v13;
    do
    {
      v16 = operator new(0x28uLL);
      v16[1] = 0;
      v16[2] = 0;
      *((_DWORD *)v16 + 6) = 0;
      *v16 = &off_250D4ACB8;
      v16[4] = -1;
      *(_QWORD *)&v105 = v16 + 3;
      *((_QWORD *)&v105 + 1) = v16;
      std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v109[0] + 16 * v14, &v105);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v108 = 0;
  v106 = 0;
  v105 = 0uLL;
  v107 = 0;
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::resize((uint64_t)&v105, v13);
  LODWORD(v96) = 2139095039;
  std::vector<float>::vector(v104, v13, &v96);
  v20 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v13 != v20 >> 2)
    __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", 538, "next_vid_on_path.size() == v_size");
  if (v20 >= 1)
    memset(*(void **)a5, 255, 4 * (((unint64_t)v20 >> 2) - ((unint64_t)v20 > 3)) + 4);
  v21 = *a2 + 24 * a3;
  v22 = *(unsigned int **)(v21 + 8);
  if (v22 != *(unsigned int **)v21)
  {
    v23 = 0;
    v22 = *(unsigned int **)v21;
    do
    {
      v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 180), v22[v23]);
      if ((*v24 & v25) == 0)
        __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", 544, "mesh_.is_boundary(boundaries[i])");
      v26 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)(*(_QWORD *)v21 + 4 * v23))+ 12);
      *(_QWORD *)&v110[(v26 >> 3) & 0x1FFFFFF8] |= 1 << v26;
      *((_DWORD *)v104[0] + v26) = 0;
      v27 = *(_OWORD *)(v109[0] + 16 * v26);
      v28 = *(_DWORD **)(v109[0] + 16 * v26);
      *v28 = 0x80000000;
      v28[1] = v26;
      v103 = v27;
      if (*((_QWORD *)&v27 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)&v105, &v103);
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      ++v23;
      v22 = *(unsigned int **)v21;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(v21 + 8) - *(_QWORD *)v21) >> 2);
  }
  v90 = *(unsigned int *)(*a4
                        + 4
                        * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)(a1 + 40) + 104, v22) + 12));
  if (v90 != a3)
    __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", 555, "curr_boundary_id == curr_boundary_index");
  if (v87 != v12)
  {
    v34 = 0;
    if (v13 <= 1)
      v35 = 1;
    else
      v35 = v13;
    while (1)
    {
      cv3d::cv::gess::isochart::MaxHeap<float,cv3d::cv::gess::mesh::VertexHandle>::remove_at((uint64_t *)&v105, 0, &v101);
      if (v101)
      {
        v100 = *(_DWORD *)(v101 + 4);
        *(_QWORD *)&v110[((unint64_t)v100 >> 3) & 0x1FFFFFF8] |= 1 << v100;
        if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(a1 + 40), (uint64_t)&v100)
          && (v36 = v100, *(_DWORD *)(*a4 + 4 * v100) != (_DWORD)v90))
        {
          *a6 = v100;
          *a7 = *((_DWORD *)v104[0] + v36);
          if (*(_DWORD *)(*(_QWORD *)a5 + 4 * v36) == -1)
          {
            v85 = 567;
            v86 = "next_vid_on_path[curr_vh.Index()] != INVALID_INDEX";
            goto LABEL_107;
          }
          if (!cv3d::cv::gess::mesh::PolyMesh::is_boundary(*(_QWORD *)(a1 + 40), (uint64_t)&v100))
          {
            v85 = 568;
            v86 = "mesh_.is_boundary(curr_vh)";
LABEL_107:
            __assert_rtn("CalMinPathToOtherBoundary", "IsoChartMesh.cpp", v85, v86);
          }
          v81 = 1;
        }
        else
        {
          cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v99, *(_QWORD *)(a1 + 40) + 104, &v100);
          v96 = 0;
          __p = 0;
          v98 = 0;
          while (1)
          {
            HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v99);
            v38 = HEdge;
            v39 = (char *)__p;
            if (HEdge == -1)
              break;
            if ((unint64_t)__p >= v98)
            {
              v41 = ((_BYTE *)__p - v96) >> 2;
              if ((unint64_t)(v41 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v42 = (uint64_t)(v98 - (_QWORD)v96) >> 1;
              if (v42 <= v41 + 1)
                v42 = v41 + 1;
              if (v98 - (unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v42;
              if (v43)
                v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v98, v43);
              else
                v44 = 0;
              v45 = &v44[4 * v41];
              *(_DWORD *)v45 = v38;
              v40 = v45 + 4;
              v47 = v96;
              v46 = (char *)__p;
              if (__p != v96)
              {
                do
                {
                  v48 = *((_DWORD *)v46 - 1);
                  v46 -= 4;
                  *((_DWORD *)v45 - 1) = v48;
                  v45 -= 4;
                }
                while (v46 != v47);
                v46 = v96;
              }
              v96 = v45;
              __p = v40;
              v98 = (unint64_t)&v44[4 * v43];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)__p = HEdge;
              v40 = v39 + 4;
            }
            __p = v40;
          }
          if (__p != v96)
          {
            v49 = v35;
            v50 = 0;
            v51 = 0;
            v39 = v96;
            do
            {
              v52 = *(_QWORD *)(a1 + 40) + 104;
              v53 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v52, (unsigned int *)&v39[v50]);
              v55 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v52, v53) + 12);
              if (((*(_QWORD *)&v110[(v55 >> 3) & 0x1FFFFFF8] >> v55) & 1) == 0)
              {
                v56 = *(_QWORD *)(a1 + 40);
                v111[0] = *(_DWORD *)(a1 + 200);
                v57 = cv3d::cv::gess::mesh::AttributeContainer::attribute<float>((uint64_t *)(v56 + 32), v111, v54);
                v58 = *(unsigned int *)&v39[4 * v51];
                v59 = *(_QWORD *)(v57 + 40);
                if (v58 >= (*(_QWORD *)(v57 + 48) - v59) >> 2)
                  __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
                v60 = *(float *)(v59 + 4 * v58);
                v61 = v100;
                v62 = *((float *)v104[0] + v100);
                if (v60 < (float)(v62 * 0.0000001))
                  v60 = v62 * 0.0000001;
                v63 = v62 + v60;
                if (*((float *)v104[0] + v55) > v63)
                {
                  *((float *)v104[0] + v55) = v63;
                  *(_DWORD *)(*(_QWORD *)a5 + 4 * v55) = v61;
                }
              }
              ++v51;
              v39 = v96;
              v50 += 4;
            }
            while (v51 < ((_BYTE *)__p - v96) >> 2);
            if (__p != v96)
            {
              v64 = 0;
              v35 = v49;
              while (1)
              {
                v65 = (unsigned int *)&v39[4 * v64];
                v66 = *(_QWORD *)(a1 + 40) + 104;
                v67 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v66, v65);
                v68 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v66, v67) + 12);
                if (((*(_QWORD *)&v110[(v68 >> 3) & 0x1FFFFFF8] >> v68) & 1) == 0)
                {
                  v69 = v109[0];
                  v70 = *(_QWORD *)(v109[0] + 16 * v68);
                  if (*(_QWORD *)(v70 + 8) == -1)
                  {
                    *(_DWORD *)(v70 + 4) = v68;
                    *(float *)v70 = -*((float *)v104[0] + v68);
                    *(_QWORD *)&v93 = v70;
                    v77 = *(_QWORD *)(v69 + 16 * v68 + 8);
                    *((_QWORD *)&v93 + 1) = v77;
                    if (v77)
                    {
                      v78 = (unint64_t *)(v77 + 8);
                      do
                        v79 = __ldxr(v78);
                      while (__stxr(v79 + 1, v78));
                    }
                    cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::insert((uint64_t)&v105, &v93);
                    v74 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
                    if (!*((_QWORD *)&v93 + 1))
                      goto LABEL_65;
                    v80 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
                    do
                      v76 = __ldaxr(v80);
                    while (__stlxr(v76 - 1, v80));
                  }
                  else
                  {
                    v94 = *(_QWORD *)(v109[0] + 16 * v68);
                    v71 = *(std::__shared_weak_count **)(v109[0] + 16 * v68 + 8);
                    v95 = v71;
                    if (v71)
                    {
                      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                      do
                        v73 = __ldxr(p_shared_owners);
                      while (__stxr(v73 + 1, p_shared_owners));
                    }
                    cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::update((uint64_t *)&v105, &v94, -*((float *)v104[0] + v68));
                    v74 = v95;
                    if (!v95)
                      goto LABEL_65;
                    v75 = (unint64_t *)&v95->__shared_owners_;
                    do
                      v76 = __ldaxr(v75);
                    while (__stlxr(v76 - 1, v75));
                  }
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                  }
                }
LABEL_65:
                ++v64;
                v39 = v96;
                if (v64 >= ((_BYTE *)__p - v96) >> 2)
                  goto LABEL_88;
              }
            }
            v35 = v49;
          }
LABEL_88:
          if (v39)
          {
            __p = v39;
            operator delete(v39);
          }
          v81 = 0;
        }
      }
      else
      {
        v81 = 8;
      }
      v82 = v102;
      if (v102)
      {
        v83 = (unint64_t *)&v102->__shared_owners_;
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (!v81 && ++v34 != v35)
        continue;
      break;
    }
  }
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  cv3d::cv::gess::isochart::MaxHeap<float,unsigned int>::~MaxHeap((uint64_t)&v105);
  *(_QWORD *)&v105 = v109;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v105);
  if (v110)
    operator delete(v110);
}

