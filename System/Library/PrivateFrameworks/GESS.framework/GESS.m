uint64_t mz_adler32(unint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;

  if (!a2)
    return 1;
  v3 = a1 >> 16;
  v4 = (unsigned __int16)a1;
  if (a3)
  {
    v5 = a3 % 0x15B0;
    do
    {
      if (v5 < 8)
      {
        v21 = 0;
      }
      else
      {
        v6 = 0;
        do
        {
          v7 = v4 + a2[v6];
          v8 = v7 + v3;
          v9 = v7 + a2[v6 + 1];
          v10 = v8 + v9;
          v11 = v9 + a2[v6 + 2];
          v12 = v10 + v11;
          v13 = v11 + a2[v6 + 3];
          v14 = v12 + v13;
          v15 = v13 + a2[v6 + 4];
          v16 = v14 + v15;
          v17 = v15 + a2[v6 + 5];
          v18 = v16 + v17;
          v19 = v17 + a2[v6 + 6];
          v20 = v18 + v19;
          v4 = v19 + a2[v6 + 7];
          LODWORD(v3) = v20 + v4;
          v6 += 8;
        }
        while ((int)v6 + 7 < v5);
        v21 = v6;
        a2 += v6;
      }
      v22 = v5 - v21;
      if (v5 > v21)
      {
        v23 = v5 - v21;
        v24 = a2;
        do
        {
          v25 = *v24++;
          v4 += v25;
          LODWORD(v3) = v4 + v3;
          --v23;
        }
        while (v23);
        a2 += v22;
      }
      v4 %= 0xFFF1u;
      LODWORD(v3) = v3 % 0xFFF1;
      a3 -= v5;
      v5 = 5552;
    }
    while (a3);
  }
  return v4 | ((_DWORD)v3 << 16);
}

uint64_t mz_crc32(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a3)
  {
    v3 = ~(_DWORD)result;
    do
    {
      v4 = *a2++;
      v5 = mz_crc32::s_crc32[(v3 ^ v4) & 0xF] ^ (v3 >> 4);
      v3 = mz_crc32::s_crc32[v5 & 0xF ^ (v4 >> 4)] ^ (v5 >> 4);
      --a3;
    }
    while (a3);
    LODWORD(result) = ~v3;
  }
  return result;
}

const char *mz_version()
{
  return "9.1.15";
}

uint64_t mz_deflateInit(uint64_t a1, int a2)
{
  return mz_deflateInit2(a1, a2, 8, 15, 9, 0);
}

uint64_t mz_deflateInit2(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  int comp_flags_from_zip_params;
  int v11;
  uint64_t result;
  void *(*v13)(tinyexr::miniz *, void *, uint64_t);
  uint64_t v14;

  comp_flags_from_zip_params = tdefl_create_comp_flags_from_zip_params(a2, a4, a6);
  if (!a1)
    return 4294967294;
  v11 = comp_flags_from_zip_params;
  result = 4294957296;
  if (a3 == 8 && (a5 - 10) >= 0xFFFFFFF7 && (a4 == 15 || a4 == -15))
  {
    *(_DWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 96) = xmmword_23C603270;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    v13 = *(void *(**)(tinyexr::miniz *, void *, uint64_t))(a1 + 64);
    if (!v13)
    {
      v13 = tinyexr::miniz::def_alloc_func;
      *(_QWORD *)(a1 + 64) = tinyexr::miniz::def_alloc_func;
    }
    if (!*(_QWORD *)(a1 + 72))
      *(_QWORD *)(a1 + 72) = tinyexr::miniz::def_free_func;
    v14 = (uint64_t)v13(*(tinyexr::miniz **)(a1 + 80), (void *)1, 319352);
    if (v14)
    {
      *(_QWORD *)(a1 + 56) = v14;
      tdefl_init(v14, 0, 0, v11 | 0x2000);
      return 0;
    }
    else
    {
      return 4294967292;
    }
  }
  return result;
}

uint64_t tdefl_create_comp_flags_from_zip_params(int a1, int a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t result;

  if (a1 >= 10)
    v4 = 10;
  else
    v4 = a1;
  if (a1 < 0)
    v4 = 6;
  v5 = tdefl_write_image_to_png_file_in_memory_ex::s_tdefl_png_num_probes[v4] | ((a1 < 4) << 14);
  if (a2 <= 0)
    result = v5;
  else
    result = v5 | 0x1000;
  if (!a1)
    return result | 0x80000;
  switch(a3)
  {
    case 1:
      result = result | 0x20000;
      break;
    case 2:
      result = result & 0xFFFFF000;
      break;
    case 3:
      result = result | 0x10000;
      break;
    case 4:
      result = result | 0x40000;
      break;
    default:
      return result;
  }
  return result;
}

void *tinyexr::miniz::def_alloc_func(tinyexr::miniz *this, void *a2, uint64_t a3)
{
  return malloc_type_malloc(a3 * (_QWORD)a2, 0xE563D92BuLL);
}

void tinyexr::miniz::def_free_func(tinyexr::miniz *this, void *a2, void *a3)
{
  free(a2);
}

uint64_t tdefl_init(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = ((21846 * (a4 & 0xFFF) + 43692) >> 16) + 1;
  *(_DWORD *)(a1 + 24) = ((21846 * ((a4 >> 2) & 0x3FF) + 43692) >> 16) + 1;
  *(_DWORD *)(a1 + 28) = (a4 >> 14) & 1;
  if ((a4 & 0x8000) == 0)
    bzero((void *)(a1 + 168618), 0x10000uLL);
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 37547;
  *(_QWORD *)(a1 + 56) = a1 + 37546;
  *(_DWORD *)(a1 + 80) = 8;
  *(_QWORD *)(a1 + 64) = a1 + 234154;
  *(_QWORD *)(a1 + 72) = a1 + 234154;
  *(_DWORD *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_23C603270;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  bzero((void *)(a1 + 33226), 0x280uLL);
  return 0;
}

uint64_t mz_deflateEnd(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4294967294;
  if (!*(_QWORD *)(a1 + 56))
    return 0;
  (*(void (**)(_QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80));
  result = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t mz_deflateReset(_QWORD *a1)
{
  uint64_t v1;

  if (!a1)
    return 4294967294;
  v1 = a1[7];
  if (!v1 || !a1[8] || !a1[9])
    return 4294967294;
  a1[5] = 0;
  a1[2] = 0;
  tdefl_init(v1, 0, 0, *(_DWORD *)(v1 + 16));
  return 0;
}

uint64_t mz_deflate(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24[7];

  v4 = 4294967294;
  if (a1)
  {
    if (a2 <= 4)
    {
      v24[5] = v2;
      v24[6] = v3;
      v6 = *(_QWORD *)(a1 + 56);
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 24);
        if (v7)
        {
          v8 = *(_DWORD *)(a1 + 32);
          if (!v8)
            return 4294967291;
          if (a2 == 1)
            v9 = 2;
          else
            v9 = a2;
          if (*(_DWORD *)(v6 + 132) == 1)
          {
            if (v9 == 4)
              return 1;
            else
              return 4294967291;
          }
          v10 = *(_QWORD *)(a1 + 16);
          v11 = *(_QWORD *)(a1 + 40);
          v12 = *(_DWORD *)(a1 + 8);
          v13 = *(unsigned __int8 **)a1;
          while (1)
          {
            v23 = v8;
            v24[0] = v12;
            v4 = tdefl_compress(v6, v13, v24, v7, (unint64_t)&v23, v9);
            v15 = v23;
            v14 = v24[0];
            v13 = (unsigned __int8 *)(*(_QWORD *)a1 + LODWORD(v24[0]));
            *(_QWORD *)a1 = v13;
            v16 = *(_DWORD *)(a1 + 8);
            v12 = v16 - v14;
            *(_DWORD *)(a1 + 8) = v16 - v14;
            v17 = *(_QWORD *)(a1 + 24);
            v18 = *(_QWORD *)(a1 + 16) + v14;
            *(_QWORD *)(a1 + 16) = v18;
            v6 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 96) = *(unsigned int *)(v6 + 32);
            v7 = v17 + v15;
            *(_QWORD *)(a1 + 24) = v7;
            v19 = *(_DWORD *)(a1 + 32);
            v8 = v19 - v15;
            *(_DWORD *)(a1 + 32) = v19 - v15;
            v20 = *(_QWORD *)(a1 + 40) + v15;
            *(_QWORD *)(a1 + 40) = v20;
            if ((v4 & 0x80000000) != 0)
              break;
            if ((_DWORD)v4 == 1)
              return v4;
            if (v19 == v15)
              return 0;
            if (v9 != 4 && v16 == v14)
            {
              if (v9)
                return 0;
              if (v20 == v11 && v18 == v10)
                return 4294967291;
              else
                return 0;
            }
          }
        }
        return 4294967294;
      }
    }
  }
  return v4;
}

uint64_t tdefl_compress(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t result;
  int v11;
  _BOOL4 v12;

  if (a1)
  {
    *(_QWORD *)(a1 + 136) = a2;
    *(_QWORD *)(a1 + 144) = a4;
    *(_QWORD *)(a1 + 152) = a3;
    *(_QWORD *)(a1 + 160) = a5;
    *(_QWORD *)(a1 + 176) = a2;
    if (a3)
      v9 = *a3;
    else
      v9 = 0;
    *(_QWORD *)(a1 + 184) = v9;
    *(_QWORD *)(a1 + 192) = 0;
    *(_DWORD *)(a1 + 168) = a6;
    if (((a4 | a5) != 0) != (*(_QWORD *)a1 == 0))
      goto LABEL_14;
    if (*(_DWORD *)(a1 + 132))
      goto LABEL_14;
    v11 = *(_DWORD *)(a1 + 128);
    if (a6 != 4)
    {
      if (v11)
        goto LABEL_14;
    }
    if (a3 && !a2 && *a3)
      goto LABEL_15;
    if (a5 && !a4 && *(_QWORD *)a5)
    {
LABEL_14:
      if (!a3)
      {
LABEL_16:
        if (a5)
          *(_QWORD *)a5 = 0;
        result = 4294967294;
        goto LABEL_19;
      }
LABEL_15:
      *a3 = 0;
      goto LABEL_16;
    }
    v12 = a6 == 4;
    *(_DWORD *)(a1 + 128) = v11 | v12;
    if (*(_DWORD *)(a1 + 116) || *(_DWORD *)(a1 + 120))
    {
LABEL_28:
      result = tinyexr::miniz::tdefl_flush_output_buffer(a1);
LABEL_19:
      *(_DWORD *)(a1 + 132) = result;
      return result;
    }
    if (tinyexr::miniz::tdefl_compress_normal(a1, (uint64_t)a2, (uint64_t)a3))
    {
      if (a2 && (*(_DWORD *)(a1 + 16) & 0x3000) != 0)
        *(_DWORD *)(a1 + 32) = mz_adler32(*(unsigned int *)(a1 + 32), a2, *(_QWORD *)(a1 + 176) - (_QWORD)a2);
      if (!a6 || *(_DWORD *)(a1 + 40) || *(_QWORD *)(a1 + 184) || *(_DWORD *)(a1 + 116))
        goto LABEL_28;
      if ((tinyexr::miniz::tdefl_flush_block(a1, a6) & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 120) = v12;
        if (a6 == 3)
        {
          *(_DWORD *)(a1 + 44) = 0;
          bzero((void *)(a1 + 103082), 0x20000uLL);
        }
        goto LABEL_28;
      }
    }
    return *(unsigned int *)(a1 + 132);
  }
  else
  {
    if (a3)
      *a3 = 0;
    if (a5)
      *(_QWORD *)a5 = 0;
    return 4294967294;
  }
}

uint64_t tdefl_get_adler32(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

unint64_t mz_deflateBound(uint64_t a1, unint64_t a2)
{
  if (110 * a2 / 0x64 + 128 <= (unint64_t)(a2
                                                 + 5 * (((a2 >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64)
                                                 + 133))
    return a2 + 5 * (((a2 >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64) + 133;
  else
    return 110 * a2 / 0x64 + 128;
}

uint64_t mz_compress2(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = 0;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v5 = *a2;
  if ((*a2 | a4) >> 32)
    return 4294957296;
  v11 = a3;
  LODWORD(v12) = a4;
  *(_QWORD *)&v13 = a1;
  DWORD2(v13) = v5;
  result = mz_deflateInit2((uint64_t)&v11, a5, 8, 15, 9, 0);
  if (!(_DWORD)result)
  {
    v8 = mz_deflate((uint64_t)&v11, 4u);
    if (v8 == 1)
    {
      v9 = v15;
      *a2 = v14;
      if (v9)
        ((void (*)(_QWORD))v16)(*((_QWORD *)&v16 + 1));
      return 0;
    }
    else
    {
      v10 = v8;
      if ((_QWORD)v15)
        ((void (*)(_QWORD))v16)(*((_QWORD *)&v16 + 1));
      if (v10)
        return v10;
      else
        return 4294967291;
    }
  }
  return result;
}

uint64_t mz_compress(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  return mz_compress2(a1, a2, a3, a4, -1);
}

unint64_t mz_compressBound(unint64_t a1)
{
  if (110 * a1 / 0x64 + 128 <= (unint64_t)(a1
                                                 + 5 * (((a1 >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64)
                                                 + 133))
    return a1 + 5 * (((a1 >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64) + 133;
  else
    return 110 * a1 / 0x64 + 128;
}

uint64_t mz_inflateInit2(uint64_t a1, int a2)
{
  void *(*v4)(tinyexr::miniz *, void *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!a1)
    return 4294967294;
  if (a2 != 15 && a2 != -15)
    return 4294957296;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v4 = *(void *(**)(tinyexr::miniz *, void *, uint64_t))(a1 + 64);
  if (!v4)
  {
    v4 = tinyexr::miniz::def_alloc_func;
    *(_QWORD *)(a1 + 64) = tinyexr::miniz::def_alloc_func;
  }
  if (!*(_QWORD *)(a1 + 72))
    *(_QWORD *)(a1 + 72) = tinyexr::miniz::def_free_func;
  v5 = (uint64_t)v4(*(tinyexr::miniz **)(a1 + 80), (void *)1, 43792);
  if (!v5)
    return 4294967292;
  v6 = v5;
  result = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_DWORD *)v6 = 0;
  *(_DWORD *)(v6 + 43788) = 1;
  *(_OWORD *)(v6 + 11000) = xmmword_23C603280;
  *(_DWORD *)(v6 + 11016) = a2;
  return result;
}

uint64_t mz_inflateInit(uint64_t a1)
{
  return mz_inflateInit2(a1, 15);
}

uint64_t mz_inflate(uint64_t a1, unsigned int a2)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;

  if (!a1)
    return 4294967294;
  v3 = *(_DWORD **)(a1 + 56);
  if (!v3)
    return 4294967294;
  if (a2 == 1)
    v4 = 2;
  else
    v4 = a2;
  result = 4294967294;
  if (v4 <= 4 && ((1 << v4) & 0x15) != 0)
  {
    if ((int)v3[2754] <= 0)
      v6 = 8;
    else
      v6 = 9;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v3[2752];
    v3[2752] = 0;
    v9 = v3 + 10947;
    if ((v3[10947] & 0x80000000) != 0)
      return 4294967293;
    v10 = v3[2753];
    if (v4 != 4 && v10)
      return result;
    v3[2753] = v10 | (v4 == 4);
    if (v4 == 4 && v8)
    {
      v31 = *(unsigned int *)(a1 + 32);
      v32 = v7;
      v11 = tinfl_decompress((uint64_t)v3, *(unsigned __int8 **)a1, &v32, *(_QWORD *)(a1 + 24), *(char **)(a1 + 24), &v31, v6 | 4u);
      *v9 = v11;
      v12 = v32;
      *(_QWORD *)a1 += v32;
      *(_DWORD *)(a1 + 8) -= v12;
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) += v12;
      *(_QWORD *)(a1 + 96) = v3[7];
      v14 = v31;
      *(_QWORD *)(a1 + 24) = v13 + v31;
      *(_DWORD *)(a1 + 32) -= v14;
      *(_QWORD *)(a1 + 40) += v14;
      if ((v11 & 0x80000000) == 0)
      {
        if (!v11)
          return 1;
        *v9 = -1;
        return 4294967291;
      }
      return 4294967293;
    }
    if (v4 == 4)
      v15 = v6;
    else
      v15 = v6 | 2;
    v16 = v3[2751];
    if (!v16)
    {
      v20 = (char *)(v3 + 2755);
      v21 = v3[2750];
      v22 = v7;
      while (1)
      {
        v31 = 0x8000 - v21;
        v32 = v22;
        v23 = tinfl_decompress((uint64_t)v3, *(unsigned __int8 **)a1, &v32, (unint64_t)(v3 + 2755), &v20[v21], &v31, v15);
        *v9 = v23;
        v24 = v32;
        *(_QWORD *)a1 += v32;
        *(_DWORD *)(a1 + 8) -= v24;
        *(_QWORD *)(a1 + 16) += v24;
        *(_QWORD *)(a1 + 96) = v3[7];
        v25 = v31;
        v3[2751] = v31;
        v26 = *(_DWORD *)(a1 + 32);
        v27 = v26 >= v25 ? v25 : v26;
        memcpy(*(void **)(a1 + 24), &v20[v3[2750]], v27);
        *(_QWORD *)(a1 + 24) += v27;
        v28 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v28 - v27;
        *(_QWORD *)(a1 + 40) += v27;
        v29 = v3[2751];
        v3[2751] = v29 - v27;
        v21 = ((unsigned __int16)v3[2750] + (_WORD)v27) & 0x7FFF;
        v3[2750] = v21;
        if (v23 < 0)
          break;
        if (v23 == 1 && !v7)
          return 4294967291;
        if (v4 == 4)
        {
          if (!v23)
          {
            if (v29 == (_DWORD)v27)
              return 1;
            else
              return 4294967291;
          }
          if (v28 == (_DWORD)v27)
            return 4294967291;
          v22 = *(unsigned int *)(a1 + 8);
        }
        else
        {
          if (!v23)
            return v29 == (_DWORD)v27;
          result = 0;
          v22 = *(unsigned int *)(a1 + 8);
          if (!(_DWORD)v22 || v28 == (_DWORD)v27 || v29 != (_DWORD)v27)
            return result;
        }
      }
      return 4294967293;
    }
    v17 = *(_DWORD *)(a1 + 32);
    if (v16 >= v17)
      v18 = v17;
    else
      v18 = v16;
    memcpy(*(void **)(a1 + 24), (char *)v3 + v3[2750] + 11020, v18);
    *(_QWORD *)(a1 + 24) += v18;
    *(_DWORD *)(a1 + 32) -= v18;
    *(_QWORD *)(a1 + 40) += v18;
    v19 = v3[2751];
    v3[2751] = v19 - v18;
    v3[2750] = ((unsigned __int16)v3[2750] + (_WORD)v18) & 0x7FFF;
    return !*v9 && v19 == (_DWORD)v18;
  }
  return result;
}

uint64_t tinfl_decompress(uint64_t a1, unsigned __int8 *__src, uint64_t *a3, unint64_t a4, char *__dst, _QWORD *a6, char a7)
{
  char *v7;
  uint64_t v8;
  char *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  char *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  uint64_t v54;
  char v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  size_t v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  unsigned int i;
  unsigned int v76;
  unsigned int v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  size_t v110;
  size_t v111;
  unsigned int v112;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  int v135;
  char *v136;
  char *v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  int v161;
  int v162;
  unint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned __int8 *v166;
  _WORD *v167;
  unsigned __int8 *v168;
  unint64_t v171;
  char *v172;
  unsigned __int8 *v173;
  char v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _OWORD v179[4];
  _QWORD v180[11];

  v180[9] = *MEMORY[0x24BDAC8D0];
  v7 = &__dst[*a6];
  if ((a7 & 4) != 0)
    v8 = -1;
  else
    v8 = (uint64_t)&v7[~a4];
  if ((unint64_t)__dst < a4 || ((v8 + 1) & v8) != 0)
  {
    *a6 = 0;
    *a3 = 0;
    return 4294967293;
  }
  v9 = __dst;
  v11 = 0;
  v13 = *(unsigned int *)(a1 + 32);
  v12 = *(unsigned int *)(a1 + 36);
  v14 = *(unsigned int *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v17 = *(_DWORD *)a1;
  v18 = *(unsigned int *)(a1 + 4);
  result = 0xFFFFFFFFLL;
  v165 = v8;
  v171 = a4;
  v172 = v7;
  v167 = (_WORD *)(a1 + 10536);
  v168 = __src;
  v20 = *a3;
  v21 = &__src[*a3];
  v22 = 0;
  v23 = __src;
  v24 = v9;
  v174 = a7;
  v173 = v21;
  switch(v17)
  {
    case 0:
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 28) = 1;
      *(_DWORD *)(a1 + 16) = 1;
      if ((a7 & 1) == 0)
      {
        LODWORD(v18) = 0;
        v13 = 0;
        LODWORD(v12) = 0;
        v14 = 0;
        v16 = 0;
        v23 = __src;
        goto LABEL_91;
      }
      if (v20 > 0)
      {
        LODWORD(v18) = 0;
        v13 = 0;
        LODWORD(v12) = 0;
        v14 = 0;
        v16 = 0;
        goto LABEL_57;
      }
      LODWORD(v18) = 0;
      v13 = 0;
      LODWORD(v12) = 0;
      v14 = 0;
      v16 = 0;
      goto LABEL_70;
    case 1:
      if (v20 >= 1)
      {
LABEL_57:
        v23 = __src + 1;
        *(_DWORD *)(a1 + 8) = *__src;
        goto LABEL_72;
      }
LABEL_70:
      if ((a7 & 2) != 0)
      {
        v22 = 0;
        v17 = 1;
        v11 = 1;
        goto LABEL_96;
      }
      *(_DWORD *)(a1 + 8) = 0;
      v23 = __src;
LABEL_72:
      if (v23 < v21)
      {
LABEL_14:
        v25 = *v23++;
        v22 = v25;
        goto LABEL_74;
      }
LABEL_73:
      v22 = 0;
      if ((a7 & 2) != 0)
      {
        v11 = 1;
        v17 = 2;
        result = 1;
LABEL_98:
        v24 = v9;
        goto LABEL_382;
      }
LABEL_74:
      *(_DWORD *)(a1 + 12) = v22;
      v41 = *(unsigned int *)(a1 + 8);
      if (((v22 | ((_DWORD)v41 << 8)) % 0x1F) | v22 & 0x20)
        v42 = 0;
      else
        v42 = (*(_DWORD *)(a1 + 8) & 0xF) == 8;
      v43 = !v42;
      if ((a7 & 4) != 0)
      {
        if ((v43 & 1) != 0)
        {
LABEL_88:
          v11 = 0;
          v22 = 0;
          LODWORD(v12) = 1;
          v17 = 36;
          goto LABEL_98;
        }
      }
      else
      {
        v44 = v41 >> 4;
        v45 = 256 << v44;
        v46 = (unint64_t)(v8 + 1) >> (v44 + 8);
        if (v45 > 0x8000 || v46 == 0)
          v43 = 1;
        if ((v43 & 1) != 0)
          goto LABEL_88;
      }
      LODWORD(v12) = 0;
LABEL_91:
      v24 = v9;
      while (1)
      {
        if (v18 <= 2)
        {
          do
          {
            if (v23 < v21)
            {
LABEL_16:
              v26 = *v23++;
              v22 = v26;
            }
            else
            {
LABEL_186:
              v22 = 0;
              if ((a7 & 2) != 0)
              {
                v11 = 1;
                v17 = 3;
                goto LABEL_381;
              }
            }
            v16 |= (unint64_t)v22 << v18;
            LODWORD(v18) = v18 + 8;
          }
          while (v18 < 3);
        }
        v70 = v16;
        v71 = v16 & 7;
        v16 >>= 3;
        LODWORD(v18) = v18 - 3;
        v72 = (v70 >> 1) & 3;
        *(_DWORD *)(a1 + 20) = v71;
        *(_DWORD *)(a1 + 24) = v72;
        if (v71 >= 2)
          break;
LABEL_151:
        v28 = (unint64_t)v172;
        LODWORD(v12) = 0;
        v16 >>= v18 & 7;
        v18 = v18 & 0xFFFFFFF8;
        while (v12 <= 3)
        {
          if ((_DWORD)v18)
          {
            if (v18 <= 7)
            {
              while (v23 >= v21)
              {
LABEL_167:
                v22 = 0;
                if ((a7 & 2) != 0)
                {
                  v11 = 1;
                  v17 = 6;
                  goto LABEL_381;
                }
LABEL_168:
                v69 = v18;
                v16 |= (unint64_t)v22 << v18;
                LODWORD(v18) = v18 + 8;
                if (v69 <= 0xFFFFFFF7)
                  goto LABEL_169;
              }
              v68 = *v23++;
              v16 |= (unint64_t)v68 << v18;
              LODWORD(v18) = v18 + 8;
            }
LABEL_169:
            *(_BYTE *)(a1 + v12 + 10536) = v16;
            v16 >>= 8;
            v18 = (v18 - 8);
          }
          else if (v23 >= v21)
          {
LABEL_161:
            if ((a7 & 2) != 0)
            {
              v22 = 0;
              v11 = 1;
              v17 = 7;
              goto LABEL_381;
            }
            *(_BYTE *)(a1 + v12 + 10536) = 0;
          }
          else
          {
            v18 = 0;
            v67 = *v23++;
            *(_BYTE *)(a1 + v12 + 10536) = v67;
          }
LABEL_170:
          LODWORD(v12) = v12 + 1;
        }
        LODWORD(v12) = (unsigned __int16)*v167;
        if ((_DWORD)v12 != (*(unsigned __int16 *)(a1 + 10538) ^ 0xFFFF))
        {
          v11 = 0;
          v22 = 0;
          result = 0xFFFFFFFFLL;
          v17 = 39;
          goto LABEL_382;
        }
        if (*v167)
        {
          do
          {
            if (!(_DWORD)v18)
              break;
            if (v18 <= 7)
            {
              while (v23 >= v21)
              {
LABEL_196:
                v22 = 0;
                if ((a7 & 2) != 0)
                {
                  v11 = 1;
                  v17 = 51;
                  goto LABEL_381;
                }
LABEL_197:
                v77 = v18;
                v16 |= (unint64_t)v22 << v18;
                LODWORD(v18) = v18 + 8;
                if (v77 <= 0xFFFFFFF7)
                  goto LABEL_198;
              }
              v76 = *v23++;
              v16 |= (unint64_t)v76 << v18;
              LODWORD(v18) = v18 + 8;
            }
LABEL_198:
            v13 = v16;
            v16 >>= 8;
            v18 = (v18 - 8);
LABEL_199:
            if ((unint64_t)v24 >= v28)
            {
              v22 = 0;
              result = 2;
              v11 = 1;
              v17 = 52;
              goto LABEL_382;
            }
            *v24++ = v13;
            LODWORD(v12) = v12 - 1;
          }
          while ((_DWORD)v12);
        }
        for (; (_DWORD)v12; v14 = v177)
        {
          a7 = v174;
          v21 = v173;
LABEL_99:
          v39 = v172;
          if (v24 >= v172)
          {
            v22 = 0;
            result = 2;
            v11 = 1;
            v17 = 9;
            goto LABEL_382;
          }
LABEL_100:
          if (v23 >= v21)
          {
            if ((a7 & 2) != 0)
            {
              v22 = 0;
              v11 = 1;
              v17 = 38;
              goto LABEL_381;
            }
LABEL_110:
            v11 = 0;
            v22 = 0;
            result = 0xFFFFFFFFLL;
            v17 = 40;
            goto LABEL_382;
          }
          v48 = v39 - v24;
          if (v48 >= v21 - v23)
            v48 = v21 - v23;
          v175 = v18;
          v177 = v14;
          v49 = v13;
          v50 = v15;
          if (v48 >= v12)
            v51 = v12;
          else
            v51 = v48;
          v52 = __src;
          memcpy(v24, v23, v51);
          a4 = v171;
          __src = v52;
          v23 += v51;
          v24 += v51;
          LODWORD(v12) = v12 - v51;
          v15 = v50;
          v13 = v49;
          v18 = v175;
        }
        a7 = v174;
        v21 = v173;
LABEL_319:
        if ((*(_BYTE *)(a1 + 20) & 1) != 0)
        {
          if ((a7 & 1) != 0)
          {
LABEL_321:
            LODWORD(v12) = 0;
            v16 >>= v18 & 7;
            LODWORD(v18) = v18 & 0xFFFFFFF8;
            while (v12 <= 3)
            {
              if ((_DWORD)v18)
              {
                if (v18 <= 7)
                {
                  while (1)
                  {
                    if (v23 < v21)
                    {
                      v129 = *v23++;
                      v16 |= (unint64_t)v129 << v18;
                      LODWORD(v18) = v18 + 8;
                      goto LABEL_342;
                    }
LABEL_339:
                    if ((a7 & 2) != 0)
                      break;
                    v40 = 0;
LABEL_341:
                    v130 = v18;
                    v16 |= v40 << v18;
                    LODWORD(v18) = v18 + 8;
                    if (v130 <= 0xFFFFFFF7)
                      goto LABEL_342;
                  }
                  v22 = 0;
                  v11 = 1;
                  v17 = 41;
                  goto LABEL_381;
                }
LABEL_342:
                v22 = v16;
                v16 >>= 8;
                LODWORD(v18) = v18 - 8;
              }
              else if (v23 >= v21)
              {
LABEL_334:
                v22 = 0;
                if ((a7 & 2) != 0)
                {
                  v11 = 1;
                  v17 = 42;
                  goto LABEL_381;
                }
              }
              else
              {
                LODWORD(v18) = 0;
                v128 = *v23++;
                v22 = v128;
              }
LABEL_343:
              *(_DWORD *)(a1 + 16) = v22 | (*(_DWORD *)(a1 + 16) << 8);
              LODWORD(v12) = v12 + 1;
            }
          }
          result = 0;
          v11 = 1;
          v17 = 34;
          v22 = 1;
          goto LABEL_382;
        }
      }
      if (v72 == 1)
      {
        *(_QWORD *)&v73 = 0x808080808080808;
        *((_QWORD *)&v73 + 1) = 0x808080808080808;
        *(_OWORD *)(a1 + 72) = v73;
        *(_QWORD *)(a1 + 44) = 0x2000000120;
        *(_QWORD *)&v74 = 0x505050505050505;
        *((_QWORD *)&v74 + 1) = 0x505050505050505;
        *(_OWORD *)(a1 + 3560) = v74;
        *(_OWORD *)(a1 + 3576) = v74;
        *(_OWORD *)(a1 + 88) = v73;
        *(_OWORD *)(a1 + 104) = v73;
        *(_OWORD *)(a1 + 120) = v73;
        *(_OWORD *)(a1 + 136) = v73;
        *(_OWORD *)(a1 + 152) = v73;
        *(_OWORD *)(a1 + 168) = v73;
        *(_OWORD *)(a1 + 184) = v73;
        *(_OWORD *)(a1 + 200) = v73;
        *(_QWORD *)&v74 = 0x909090909090909;
        *((_QWORD *)&v74 + 1) = 0x909090909090909;
        *(_OWORD *)(a1 + 216) = v74;
        *(_OWORD *)(a1 + 232) = v74;
        *(_OWORD *)(a1 + 248) = v74;
        *(_OWORD *)(a1 + 264) = v74;
        *(_OWORD *)(a1 + 280) = v74;
        *(_OWORD *)(a1 + 296) = v74;
        memset((void *)(a1 + 328), 7, 24);
        *(_QWORD *)(a1 + 352) = 0x808080808080808;
        i = 1;
        *(_OWORD *)(a1 + 312) = v74;
        goto LABEL_214;
      }
      if (v72 == 3)
      {
        v11 = 0;
        v22 = 0;
        result = 0xFFFFFFFFLL;
        v17 = 10;
        goto LABEL_382;
      }
      LODWORD(v12) = 0;
      while (v12 <= 2)
      {
        v54 = v12;
        v53 = asc_23C6220F4[v12];
        v55 = asc_23C6220F4[v12];
        if (v18 < v53)
        {
          while (1)
          {
            if (v23 < v21)
            {
LABEL_25:
              v29 = *v23++;
              v22 = v29;
            }
            else
            {
LABEL_180:
              v22 = 0;
              if ((a7 & 2) != 0)
              {
                v11 = 1;
                v17 = 11;
                goto LABEL_381;
              }
            }
            v16 |= (unint64_t)v22 << v18;
            LODWORD(v18) = v18 + 8;
            v53 = asc_23C6220F4[v12];
            if (v18 >= v53)
            {
              v54 = v12;
              v55 = asc_23C6220F4[v12];
              break;
            }
          }
        }
        v56 = v16 & ~(-1 << v55);
        v16 >>= v53;
        LODWORD(v18) = v18 - v53;
        *(_DWORD *)(a1 + 4 * v54 + 44) = v56 + tinfl_decompress::s_min_table_sizes[v54];
        LODWORD(v12) = v12 + 1;
      }
      LODWORD(v12) = 0;
      *(_OWORD *)(a1 + 7320) = 0u;
      *(_OWORD *)(a1 + 7304) = 0u;
      *(_OWORD *)(a1 + 7288) = 0u;
      *(_OWORD *)(a1 + 7272) = 0u;
      *(_OWORD *)(a1 + 7256) = 0u;
      *(_OWORD *)(a1 + 7240) = 0u;
      *(_OWORD *)(a1 + 7224) = 0u;
      *(_OWORD *)(a1 + 7208) = 0u;
      *(_OWORD *)(a1 + 7192) = 0u;
      *(_OWORD *)(a1 + 7176) = 0u;
      *(_OWORD *)(a1 + 7160) = 0u;
      *(_OWORD *)(a1 + 7144) = 0u;
      *(_OWORD *)(a1 + 7128) = 0u;
      *(_OWORD *)(a1 + 7112) = 0u;
      *(_OWORD *)(a1 + 7096) = 0u;
      *(_OWORD *)(a1 + 7080) = 0u;
      *(_OWORD *)(a1 + 7064) = 0u;
      *(_OWORD *)(a1 + 7048) = 0u;
      while (v12 < *(_DWORD *)(a1 + 52))
      {
        if (v18 <= 2)
        {
          do
          {
            if (v23 < v21)
            {
LABEL_27:
              v30 = *v23++;
              v22 = v30;
            }
            else
            {
LABEL_210:
              v22 = 0;
              if ((a7 & 2) != 0)
              {
                v11 = 1;
                v17 = 14;
                goto LABEL_381;
              }
            }
            v16 |= (unint64_t)v22 << v18;
            LODWORD(v18) = v18 + 8;
          }
          while (v18 < 3);
        }
        v78 = v16 & 7;
        v16 >>= 3;
        LODWORD(v18) = v18 - 3;
        *(_BYTE *)(a1 + tinyexr::miniz::s_tdefl_packed_code_size_syms_swizzle[v12] + 7048) = v78;
        LODWORD(v12) = v12 + 1;
      }
      *(_DWORD *)(a1 + 52) = 19;
      for (i = *(_DWORD *)(a1 + 24); (i & 0x80000000) == 0; v14 = v178)
      {
LABEL_214:
        v164 = v13;
        v166 = v23;
        v176 = v15;
        v178 = v14;
        v79 = i;
        v80 = a1 + 3488 * i;
        v81 = (unsigned __int8 *)(v80 + 72);
        memset(v179, 0, sizeof(v179));
        v82 = i;
        v83 = a1 + 4 * i;
        bzero((void *)(v80 + 360), 0xC80uLL);
        v84 = *(unsigned int *)(v83 + 44);
        if ((_DWORD)v84)
        {
          v85 = *(unsigned int *)(v83 + 44);
          v86 = v81;
          do
          {
            v87 = *v86++;
            ++*((_DWORD *)v179 + v87);
            --v85;
          }
          while (v85);
        }
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v180[0] = 0;
        v15 = v176;
        do
        {
          v91 = *(_DWORD *)((char *)v179 + v88 + 4);
          v90 += v91;
          v89 = 2 * (v91 + v89);
          *(_DWORD *)((char *)&v180[1] + v88) = v89;
          v88 += 4;
        }
        while (v88 != 60);
        v92 = v89 != 0x10000 && v90 > 1;
        if (v92)
        {
          v11 = 0;
          v22 = 0;
          result = 0xFFFFFFFFLL;
          v17 = 35;
          a7 = v174;
          __src = v168;
          LODWORD(v14) = v178;
          v23 = v166;
          LODWORD(v13) = v164;
          goto LABEL_382;
        }
        if ((_DWORD)v84)
        {
          v93 = 0;
          v94 = 0xFFFFFFFFLL;
          do
          {
            v95 = v81[v93];
            if (v81[v93])
            {
              LODWORD(v96) = 0;
              v97 = *((_DWORD *)v180 + v95);
              *((_DWORD *)v180 + v95) = v97 + 1;
              v98 = v95;
              do
              {
                v99 = 2 * v96;
                v96 = (2 * (_DWORD)v96) | v97 & 1;
                v97 >>= 1;
                --v98;
              }
              while (v98);
              if (v95 > 0xA)
              {
                v102 = a1 + 3488 * v79 + 2 * (v96 & 0x3FF);
                v103 = *(__int16 *)(v102 + 360);
                if (*(_WORD *)(v102 + 360))
                {
                  v104 = v94;
                  LODWORD(v94) = v103;
                }
                else
                {
                  *(_WORD *)(v102 + 360) = v94;
                  v104 = (v94 - 2);
                }
                v105 = v99 >> 9;
                if (v95 < 0xC)
                {
                  v108 = v104;
                }
                else
                {
                  do
                  {
                    v106 = a1 + 3488 * v79 + 2 * (int)(((v105 >> 1) & 1) + ~(_DWORD)v94);
                    v107 = *(__int16 *)(v106 + 2408);
                    if (*(_WORD *)(v106 + 2408))
                    {
                      v108 = v104;
                      LODWORD(v104) = v107;
                    }
                    else
                    {
                      *(_WORD *)(v106 + 2408) = v104;
                      v108 = (v104 - 2);
                    }
                    LODWORD(v94) = v104;
                    v105 >>= 1;
                    LODWORD(v95) = v95 - 1;
                    v104 = v108;
                  }
                  while (v95 > 0xB);
                }
                *(_WORD *)(a1 + 3488 * v79 + 2 * (int)(((v105 >> 1) & 1) + ~(_DWORD)v94) + 2408) = v93;
                v94 = v108;
              }
              else if (v96 <= 0x3FF)
              {
                v100 = 1 << v95;
                v101 = v93 | ((_WORD)v95 << 9);
                do
                {
                  *(_WORD *)(a1 + 3488 * v79 + 360 + 2 * v96) = v101;
                  v96 += v100;
                }
                while (v96 < 0x400);
              }
            }
            ++v93;
          }
          while (v93 != v84);
        }
        if (v82 == 2)
        {
          LODWORD(v12) = 0;
          v23 = v166;
          v13 = v164;
          while (1)
          {
            v110 = *(unsigned int *)(a1 + 44);
            v111 = *(unsigned int *)(a1 + 48);
            if (v12 >= (int)v111 + (int)v110)
              break;
            if (v18 > 0xE)
            {
              a7 = v174;
              __src = v168;
              v15 = v176;
              v14 = v178;
              v21 = v173;
            }
            else
            {
              v21 = v173;
              a7 = v174;
              __src = v168;
              v15 = v176;
              v14 = v178;
              if (v173 - v23 <= 1)
              {
                do
                {
                  v112 = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 7336);
                  if ((v112 & 0x80000000) != 0)
                  {
                    if (v18 >= 0xB)
                    {
                      v114 = 12;
                      do
                      {
                        v112 = *(__int16 *)(a1 + 2 * (((v16 >> (v114 - 2)) & 1) + (int)~v112) + 9384);
                        if ((v112 & 0x80000000) == 0)
                          break;
                        v63 = v18 >= v114++;
                      }
                      while (v63);
                      if ((v112 & 0x80000000) == 0)
                        break;
                    }
                  }
                  else if (v112 >= 0x200 && v18 >= v112 >> 9)
                  {
                    break;
                  }
                  if (v23 < v21)
                  {
LABEL_29:
                    v31 = *v23++;
                    v22 = v31;
                  }
                  else
                  {
LABEL_272:
                    v22 = 0;
                    if ((a7 & 2) != 0)
                    {
                      v11 = 1;
                      v17 = 16;
                      goto LABEL_381;
                    }
                  }
                  v16 |= (unint64_t)v22 << v18;
                  LODWORD(v18) = v18 + 8;
                }
                while (v18 < 0xF);
              }
              else
              {
                v16 |= ((unint64_t)*v23 << v18) | ((unint64_t)v23[1] << (v18 + 8));
                v23 += 2;
                LODWORD(v18) = v18 + 16;
              }
            }
            LODWORD(v13) = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 7336);
            if ((v13 & 0x80000000) != 0)
            {
              v116 = 10;
              do
              {
                v115 = v116 + 1;
                v13 = *(__int16 *)(a1 + 2 * (((v16 >> v116++) & 1) + ~(_DWORD)v13) + 9384);
              }
              while ((v13 & 0x80000000) != 0);
            }
            else
            {
              v115 = v13 >> 9;
              v13 &= 0x1FFu;
            }
            v16 >>= v115;
            LODWORD(v18) = v18 - v115;
            if (v13 > 0xF)
            {
              v57 = (v13 - 16);
              if ((_DWORD)v13 == 16 && (_DWORD)v12 == 0)
              {
                v11 = 0;
                v22 = 0;
                LODWORD(v12) = 0;
                LODWORD(v13) = 16;
                result = 0xFFFFFFFFLL;
                v17 = 17;
                goto LABEL_382;
              }
              v14 = asc_23C6220F8[v57];
              if (v18 < v14)
              {
                do
                {
                  if (v23 < v21)
                  {
LABEL_31:
                    v32 = *v23++;
                    v22 = v32;
                  }
                  else
                  {
LABEL_286:
                    v22 = 0;
                    if ((a7 & 2) != 0)
                    {
                      v11 = 1;
                      v17 = 18;
                      goto LABEL_381;
                    }
                  }
                  v16 |= (unint64_t)v22 << v18;
                  LODWORD(v18) = v18 + 8;
                }
                while (v18 < v14);
                v57 = (v13 - 16);
              }
              v176 = v15;
              v178 = v14;
              v58 = 0;
              v59 = v16 & ~(-1 << v14);
              v16 >>= v14;
              LODWORD(v18) = v18 - v14;
              v60 = (v59 + asc_23C6220FC[v57]);
              if ((_DWORD)v13 == 16)
                v58 = *(unsigned __int8 *)(a1 + (v12 - 1) + 10540);
              memset((void *)(a1 + v12 + 10540), v58, v60);
              LODWORD(v12) = v60 + v12;
            }
            else
            {
              v176 = v15;
              v178 = v14;
              *(_BYTE *)(a1 + v12 + 10540) = v13;
              LODWORD(v12) = v12 + 1;
            }
          }
          if ((_DWORD)v111 + (_DWORD)v110 != (_DWORD)v12)
          {
            v11 = 0;
            v22 = 0;
            result = 0xFFFFFFFFLL;
            v17 = 21;
            a7 = v174;
            __src = v168;
            v15 = v176;
            LODWORD(v14) = v178;
            goto LABEL_382;
          }
          memcpy((void *)(a1 + 72), (const void *)(a1 + 10540), v110);
          memcpy((void *)(a1 + 3560), (const void *)(a1 + 10540 + v110), v111);
          v109 = *(_DWORD *)(a1 + 24);
          v15 = v176;
        }
        else
        {
          v109 = v82;
          v23 = v166;
          v13 = v164;
        }
        v21 = v173;
        a4 = v171;
        i = v109 - 1;
        *(_DWORD *)(a1 + 24) = i;
        a7 = v174;
        __src = v168;
      }
      v33 = (unint64_t)v172;
      v8 = v165;
      while (1)
      {
LABEL_345:
        while (1)
        {
          v61 = v18;
          while (v21 - v23 >= 4 && (uint64_t)(v33 - (_QWORD)v24) > 1)
          {
            if (v61 <= 0x1D)
            {
              v119 = *(_DWORD *)v23;
              v23 += 4;
              v16 |= (unint64_t)v119 << v61;
              v61 += 32;
            }
            LODWORD(v12) = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 360);
            if ((v12 & 0x80000000) != 0)
            {
              v121 = 10;
              do
              {
                v120 = v121 + 1;
                LODWORD(v12) = *(__int16 *)(a1 + 2 * (((v16 >> v121++) & 1) + ~(_DWORD)v12) + 2408);
              }
              while ((v12 & 0x80000000) != 0);
            }
            else
            {
              v120 = v12 >> 9;
            }
            v16 >>= v120;
            v61 -= v120;
            if ((v12 & 0x100) != 0)
              goto LABEL_317;
            v122 = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 360);
            if ((v122 & 0x80000000) != 0)
            {
              v124 = 10;
              do
              {
                v123 = v124 + 1;
                v122 = *(__int16 *)(a1 + 2 * (((v16 >> v124++) & 1) + (int)~v122) + 2408);
              }
              while ((v122 & 0x80000000) != 0);
            }
            else
            {
              v123 = v122 >> 9;
            }
            v16 >>= v123;
            v61 -= v123;
            *v24 = v12;
            if ((v122 & 0x100) != 0)
            {
              ++v24;
              LOWORD(v12) = v122;
              goto LABEL_317;
            }
            v24[1] = v122;
            v24 += 2;
          }
          if (v61 <= 0xE)
          {
            if (v21 - v23 <= 1)
            {
              LODWORD(v18) = v61;
              while (1)
              {
                v62 = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 360);
                if ((v62 & 0x80000000) != 0)
                {
                  if (v18 >= 0xB)
                  {
                    v64 = 12;
                    do
                    {
                      v62 = *(__int16 *)(a1 + 2 * (((v16 >> (v64 - 2)) & 1) + (int)~v62) + 2408);
                      if ((v62 & 0x80000000) == 0)
                        break;
                      v63 = v18 >= v64++;
                    }
                    while (v63);
                    if ((v62 & 0x80000000) == 0)
                    {
LABEL_132:
                      v61 = v18;
                      goto LABEL_312;
                    }
                  }
                }
                else
                {
                  v63 = v62 >= 0x200 && v18 >= v62 >> 9;
                  if (v63)
                    goto LABEL_132;
                }
                if (v23 < v21)
                {
LABEL_33:
                  v34 = *v23++;
                  v22 = v34;
                }
                else
                {
LABEL_134:
                  v22 = 0;
                  if ((a7 & 2) != 0)
                  {
                    v11 = 1;
                    v17 = 23;
                    goto LABEL_381;
                  }
                }
                v16 |= (unint64_t)v22 << v18;
                LODWORD(v18) = v18 + 8;
                v61 = v18;
                if (v18 >= 0xF)
                  goto LABEL_312;
              }
            }
            v16 |= ((unint64_t)*v23 << v61) | ((unint64_t)v23[1] << (v61 + 8));
            v23 += 2;
            v61 += 16;
          }
LABEL_312:
          LODWORD(v12) = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 360);
          if ((v12 & 0x80000000) != 0)
          {
            v126 = 10;
            do
            {
              v125 = v126 + 1;
              LODWORD(v12) = *(__int16 *)(a1 + 2 * (((v16 >> v126++) & 1) + ~(_DWORD)v12) + 2408);
            }
            while ((v12 & 0x80000000) != 0);
          }
          else
          {
            v125 = v12 >> 9;
            LODWORD(v12) = v12 & 0x1FF;
          }
          v16 >>= v125;
          LODWORD(v18) = v61 - v125;
          v61 -= v125;
          if (v12 > 0xFF)
            break;
LABEL_322:
          if ((unint64_t)v24 >= v33)
          {
            v22 = 0;
            result = 2;
            v11 = 1;
            v17 = 24;
            goto LABEL_382;
          }
          *v24++ = v12;
        }
LABEL_317:
        if ((v12 & 0x1FF) == 0x100)
        {
          LODWORD(v12) = 256;
          LODWORD(v18) = v61;
          goto LABEL_319;
        }
        v127 = (v12 & 0x1FF) - 257;
        LODWORD(v12) = tinfl_decompress::s_length_base[v127];
        if ((unint64_t)(v127 - 28) >= 0xFFFFFFFFFFFFFFECLL)
        {
          LODWORD(v14) = tinfl_decompress::s_length_extra[v127];
          while (v61 < v14)
          {
            LODWORD(v18) = v61;
            if (v23 < v21)
            {
LABEL_36:
              v35 = *v23++;
              v22 = v35;
            }
            else
            {
LABEL_348:
              v22 = 0;
              if ((a7 & 2) != 0)
              {
                v11 = 1;
                v17 = 25;
                goto LABEL_381;
              }
            }
            v16 |= (unint64_t)v22 << v18;
            v61 = v18 + 8;
          }
          v131 = v16 & ~(-1 << v14);
          v16 >>= v14;
          v61 -= v14;
          LODWORD(v12) = v131 + v12;
        }
        else
        {
          LODWORD(v14) = 0;
        }
        if (v61 <= 0xE)
        {
          if (v21 - v23 <= 1)
          {
            LODWORD(v18) = v61;
            while (1)
            {
              v65 = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 3848);
              if ((v65 & 0x80000000) != 0)
              {
                if (v18 >= 0xB)
                {
                  v66 = 12;
                  do
                  {
                    v65 = *(__int16 *)(a1 + 2 * (((v16 >> (v66 - 2)) & 1) + (int)~v65) + 5896);
                    if ((v65 & 0x80000000) == 0)
                      break;
                    v63 = v18 >= v66++;
                  }
                  while (v63);
                  if ((v65 & 0x80000000) == 0)
                  {
LABEL_146:
                    v61 = v18;
                    goto LABEL_355;
                  }
                }
              }
              else if (v65 >= 0x200 && v18 >= v65 >> 9)
              {
                goto LABEL_146;
              }
              if (v23 < v21)
              {
LABEL_38:
                v36 = *v23++;
                v22 = v36;
              }
              else
              {
LABEL_148:
                v22 = 0;
                if ((a7 & 2) != 0)
                {
                  v11 = 1;
                  v17 = 26;
                  goto LABEL_381;
                }
              }
              v16 |= (unint64_t)v22 << v18;
              LODWORD(v18) = v18 + 8;
              v61 = v18;
              if (v18 >= 0xF)
                goto LABEL_355;
            }
          }
          v16 |= ((unint64_t)*v23 << v61) | ((unint64_t)v23[1] << (v61 + 8));
          v23 += 2;
          v61 += 16;
        }
LABEL_355:
        v132 = *(__int16 *)(a1 + 2 * (v16 & 0x3FF) + 3848);
        if ((v132 & 0x80000000) != 0)
        {
          v134 = 10;
          do
          {
            v133 = v134 + 1;
            v132 = *(__int16 *)(a1 + 2 * (((v16 >> v134++) & 1) + (int)~v132) + 5896);
          }
          while ((v132 & 0x80000000) != 0);
        }
        else
        {
          v133 = v132 >> 9;
          v132 &= 0x1FFu;
        }
        v16 >>= v133;
        LODWORD(v18) = v61 - v133;
        v13 = tinfl_decompress::s_dist_base[v132];
        if ((unint64_t)v132 - 30 >= 0xFFFFFFFFFFFFFFE6)
          break;
        v14 = 0;
LABEL_368:
        v15 = (unint64_t)&v24[-a4];
        if ((a7 & 4) != 0 && v15 < v13)
        {
          v11 = 0;
          v22 = 0;
          result = 0xFFFFFFFFLL;
          v17 = 37;
          goto LABEL_382;
        }
        v136 = (char *)(a4 + ((v15 - v13) & v8));
        if (v24 <= v136)
          v137 = (char *)(a4 + ((v15 - v13) & v8));
        else
          v137 = v24;
        if ((unint64_t)&v137[v12] > v33)
        {
          while (1)
          {
            if (!(_DWORD)v12)
            {
              LODWORD(v12) = -1;
              goto LABEL_345;
            }
            LODWORD(v12) = v12 - 1;
LABEL_405:
            if ((unint64_t)v24 >= v33)
              break;
            v163 = v15 - v13;
            ++v15;
            *v24++ = *(_BYTE *)(a4 + (v163 & v8));
          }
          v22 = 0;
          result = 2;
          v11 = 1;
          v17 = 53;
          goto LABEL_382;
        }
        do
        {
          *v24 = *v136;
          v24[1] = v136[1];
          v24[2] = v136[2];
          v24 += 3;
          v136 += 3;
          LODWORD(v12) = v12 - 3;
        }
        while ((int)v12 > 2);
        if ((int)v12 >= 1)
        {
          *v24 = *v136;
          if ((_DWORD)v12 != 1)
            v24[1] = v136[1];
          v24 += v12;
        }
      }
      v14 = tinfl_decompress::s_dist_extra[v132];
      while (1)
      {
        if (v18 >= v14)
        {
          v135 = v16 & ~(-1 << v14);
          v16 >>= v14;
          LODWORD(v18) = v18 - v14;
          v13 = (v135 + v13);
          goto LABEL_368;
        }
        if (v23 < v21)
        {
LABEL_40:
          v37 = *v23++;
          v22 = v37;
          goto LABEL_366;
        }
LABEL_365:
        v22 = 0;
        if ((a7 & 2) != 0)
          break;
LABEL_366:
        v16 |= (unint64_t)v22 << v18;
        LODWORD(v18) = v18 + 8;
      }
      v11 = 1;
      v17 = 27;
LABEL_381:
      result = 1;
LABEL_382:
      *(_DWORD *)a1 = v17;
LABEL_383:
      *(_DWORD *)(a1 + 4) = v18;
      *(_DWORD *)(a1 + 32) = v13;
      *(_DWORD *)(a1 + 36) = v12;
      *(_DWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v16;
      *(_QWORD *)(a1 + 64) = v15;
      *a3 = v23 - __src;
      v138 = v24 - v9;
      *a6 = v24 - v9;
      if ((a7 & 9) != 0 && v11)
      {
        v139 = (unsigned __int16)*(_DWORD *)(a1 + 28);
        v140 = HIWORD(*(_DWORD *)(a1 + 28));
        if (v138)
        {
          v141 = v138 % 0x15B0;
          do
          {
            if (v141 < 8)
            {
              v157 = 0;
            }
            else
            {
              v142 = 0;
              do
              {
                v143 = v139 + v9[v142];
                v144 = v143 + v140;
                v145 = v143 + v9[v142 + 1];
                v146 = v144 + v145;
                v147 = v145 + v9[v142 + 2];
                v148 = v146 + v147;
                v149 = v147 + v9[v142 + 3];
                v150 = v148 + v149;
                v151 = v149 + v9[v142 + 4];
                v152 = v150 + v151;
                v153 = v151 + v9[v142 + 5];
                v154 = v152 + v153;
                v155 = v153 + v9[v142 + 6];
                v156 = v154 + v155;
                v139 = v155 + v9[v142 + 7];
                v140 = v156 + v139;
                v142 += 8;
              }
              while ((int)v142 + 7 < v141);
              v157 = v142;
              v9 += v142;
            }
            v158 = v141 - v157;
            if (v141 > v157)
            {
              v159 = v141 - v157;
              v160 = (unsigned __int8 *)v9;
              do
              {
                v161 = *v160++;
                v139 += v161;
                v140 += v139;
                --v159;
              }
              while (v159);
              v9 += v158;
            }
            v139 %= 0xFFF1u;
            v140 %= 0xFFF1u;
            v138 -= v141;
            v141 = 5552;
          }
          while (v138);
        }
        v162 = v139 | (v140 << 16);
        *(_DWORD *)(a1 + 28) = v162;
        if (v22)
        {
          if ((a7 & 1) != 0)
          {
            if (v162 == *(_DWORD *)(a1 + 16))
              return 0;
            else
              return 4294967294;
          }
          else
          {
            return 0;
          }
        }
      }
      return result;
    case 2:
      v23 = __src;
      if (v20 >= 1)
        goto LABEL_14;
      goto LABEL_73;
    case 3:
      v23 = __src;
      v24 = v9;
      if (v20 >= 1)
        goto LABEL_16;
      goto LABEL_186;
    case 4:
    case 8:
    case 12:
    case 13:
    case 15:
    case 19:
    case 20:
    case 22:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      goto LABEL_383;
    case 5:
      if (v20 >= 1)
      {
        v23 = __src + 1;
        v27 = *__src;
LABEL_60:
        v16 |= v27 << v18;
        LODWORD(v18) = v18 + 8;
        v24 = v9;
        goto LABEL_151;
      }
      if ((a7 & 2) == 0)
      {
        v27 = 0;
        v23 = __src;
        goto LABEL_60;
      }
      v22 = 0;
      v11 = 1;
      v17 = 5;
      goto LABEL_96;
    case 6:
      v23 = __src;
      if (v20 >= 1)
      {
        v23 = __src + 1;
        v22 = *__src;
        v24 = v9;
        v28 = (unint64_t)v172;
        goto LABEL_168;
      }
      v24 = v9;
      v28 = (unint64_t)v172;
      goto LABEL_167;
    case 7:
      v23 = __src;
      if (v20 >= 1)
      {
        v23 = __src + 1;
        *(_BYTE *)(a1 + v12 + 10536) = *__src;
        v24 = v9;
        v28 = (unint64_t)v172;
        goto LABEL_170;
      }
      v24 = v9;
      v28 = (unint64_t)v172;
      goto LABEL_161;
    case 9:
      v23 = __src;
      v24 = v9;
      goto LABEL_99;
    case 10:
    case 17:
    case 21:
    case 35:
    case 36:
    case 37:
    case 39:
      goto LABEL_382;
    case 11:
      v23 = __src;
      v24 = v9;
      if (v20 >= 1)
        goto LABEL_25;
      goto LABEL_180;
    case 14:
      v23 = __src;
      v24 = v9;
      if (v20 >= 1)
        goto LABEL_27;
      goto LABEL_210;
    case 16:
      v23 = __src;
      v24 = v9;
      if (v20 >= 1)
        goto LABEL_29;
      goto LABEL_272;
    case 18:
      v23 = __src;
      v24 = v9;
      if (v20 >= 1)
        goto LABEL_31;
      goto LABEL_286;
    case 23:
      v23 = __src;
      v24 = v9;
      v92 = v20 < 1;
      v33 = (unint64_t)v172;
      if (!v92)
        goto LABEL_33;
      goto LABEL_134;
    case 24:
      v23 = __src;
      v24 = v9;
      v33 = (unint64_t)v172;
      goto LABEL_322;
    case 25:
      v23 = __src;
      v24 = v9;
      v92 = v20 < 1;
      v33 = (unint64_t)v172;
      if (!v92)
        goto LABEL_36;
      goto LABEL_348;
    case 26:
      v23 = __src;
      v24 = v9;
      v92 = v20 < 1;
      v33 = (unint64_t)v172;
      if (!v92)
        goto LABEL_38;
      goto LABEL_148;
    case 27:
      v23 = __src;
      v24 = v9;
      v92 = v20 < 1;
      v33 = (unint64_t)v172;
      if (!v92)
        goto LABEL_40;
      goto LABEL_365;
    case 32:
      if (v20 < 1)
      {
        if ((a7 & 2) != 0)
        {
          v22 = 0;
          v11 = 1;
          v17 = 32;
LABEL_96:
          result = 1;
LABEL_97:
          v23 = __src;
          goto LABEL_98;
        }
        v38 = 0;
        v23 = __src;
      }
      else
      {
        v23 = __src + 1;
        v38 = *__src;
      }
      v16 |= v38 << v18;
      LODWORD(v18) = v18 + 8;
      v24 = v9;
      goto LABEL_321;
    case 34:
      result = 0;
      v11 = 1;
      v22 = 1;
      goto LABEL_97;
    case 38:
      v23 = __src;
      v24 = v9;
      v39 = v172;
      goto LABEL_100;
    case 40:
      v23 = __src;
      v24 = v9;
      goto LABEL_110;
    case 41:
      v23 = __src;
      if (v20 >= 1)
      {
        v23 = __src + 1;
        v40 = *__src;
        v24 = v9;
        goto LABEL_341;
      }
      v24 = v9;
      goto LABEL_339;
    case 42:
      v23 = __src;
      if (v20 >= 1)
      {
        v23 = __src + 1;
        v22 = *__src;
        v24 = v9;
        goto LABEL_343;
      }
      v24 = v9;
      goto LABEL_334;
    case 51:
      v23 = __src;
      if (v20 >= 1)
      {
        v23 = __src + 1;
        v22 = *__src;
        v24 = v9;
        v28 = (unint64_t)v172;
        goto LABEL_197;
      }
      v24 = v9;
      v28 = (unint64_t)v172;
      goto LABEL_196;
    case 52:
      v23 = __src;
      v24 = v9;
      v28 = (unint64_t)v172;
      goto LABEL_199;
    case 53:
      v23 = __src;
      v24 = v9;
      v33 = (unint64_t)v172;
      goto LABEL_405;
    default:
      v22 = 0;
      v23 = __src;
      v24 = v9;
      goto LABEL_383;
  }
}

uint64_t mz_uncompress(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = 0;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v4 = *a2;
  if ((*a2 | a4) >> 32)
    return 4294957296;
  v11 = a3;
  LODWORD(v12) = a4;
  *(_QWORD *)&v13 = a1;
  DWORD2(v13) = v4;
  result = mz_inflateInit2((uint64_t)&v11, 15);
  if (!(_DWORD)result)
  {
    v7 = mz_inflate((uint64_t)&v11, 4u);
    if (v7 == 1)
    {
      v8 = v15;
      *a2 = v14;
      if (v8)
        ((void (*)(_QWORD))v16)(*((_QWORD *)&v16 + 1));
      return 0;
    }
    else
    {
      v9 = v7;
      if ((_QWORD)v15)
        ((void (*)(_QWORD))v16)(*((_QWORD *)&v16 + 1));
      if ((_DWORD)v12)
        v10 = 0;
      else
        v10 = v9 == -5;
      if (v10)
        return 4294967293;
      else
        return v9;
    }
  }
  return result;
}

uint64_t mz_error(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (mz_error::s_error_descs[v1] != a1)
  {
    v1 += 4;
    if (v1 == 40)
      return 0;
  }
  return *(_QWORD *)&mz_error::s_error_descs[v1 + 2];
}

char *tinfl_decompress_mem_to_heap()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  char v10;
  char v11;
  char *v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  size_t v18;
  uint64_t v19;
  int v20[2750];
  uint64_t v21;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  *v1 = 0;
  v20[0] = 0;
  v11 = v10 & 0xF9 | 4;
  while (1)
  {
    v19 = v4 - v8;
    v18 = v9 - v6;
    v12 = &v7[v6];
    v13 = v7 ? v12 : 0;
    v14 = tinfl_decompress((uint64_t)v20, (unsigned __int8 *)(v5 + v8), &v19, (unint64_t)v7, v13, &v18, v11);
    if (v14 < 0 || v14 == 1)
      break;
    v15 = v19;
    *v2 += v18;
    if (!v14)
      return v7;
    if (2 * v9 <= 0x80)
      v9 = 128;
    else
      v9 *= 2;
    v16 = (char *)malloc_type_realloc(v7, v9, 0x133896F9uLL);
    if (!v16)
      break;
    v8 += v15;
    v6 = *v2;
    v7 = v16;
  }
  free(v7);
  v7 = 0;
  *v2 = 0;
  return v7;
}

uint64_t tinfl_decompress_mem_to_mem()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  _DWORD v8[2750];
  uint64_t v9;

  v0 = (char *)MEMORY[0x24BDAC7A8]();
  v9 = *MEMORY[0x24BDAC8D0];
  v6 = v2;
  v7 = v1;
  v8[0] = 0;
  if (tinfl_decompress((uint64_t)v8, v4, &v6, (unint64_t)v0, v0, &v7, v3 & 0xF9 | 4u))
    return -1;
  else
    return v7;
}

uint64_t tinfl_decompress_mem_to_callback()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  unsigned int (*v4)(char *, uint64_t, uint64_t);
  unsigned int (*v5)(char *, uint64_t, uint64_t);
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  _BOOL8 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21[2750];
  uint64_t v22;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v18 = v3;
  v5 = v4;
  v7 = v6;
  v8 = v0;
  v22 = *MEMORY[0x24BDAC8D0];
  v9 = (char *)malloc_type_malloc(0x8000uLL, 0xA56D949DuLL);
  if (!v9)
    return 0xFFFFFFFFLL;
  v10 = v9;
  v11 = 0;
  v12 = 0;
  v21[0] = 0;
  v13 = v2 & 0xF9;
  while (1)
  {
    v20 = *v7 - v11;
    v19 = 0x8000 - v12;
    v14 = tinfl_decompress((uint64_t)v21, (unsigned __int8 *)(v8 + v11), &v20, (unint64_t)v10, &v10[v12], &v19, v13);
    v15 = v19;
    v11 += v20;
    if (v19)
    {
      if (!v5(&v10[v12], v19, v18))
        break;
    }
    if (v14 != 2)
    {
      v16 = v14 == 0;
      goto LABEL_10;
    }
    v12 = (v15 + (int)v12) & 0x7FFFLL;
  }
  v16 = 0;
LABEL_10:
  free(v10);
  *v7 = v11;
  return v16;
}

BOOL tinyexr::miniz::tdefl_flush_output_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  int v7;
  size_t v8;

  v2 = *(_QWORD **)(a1 + 152);
  if (v2)
    *v2 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD **)(a1 + 160);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 192);
    v5 = *v3 - v4;
    if (v5 >= *(unsigned int *)(a1 + 116))
      v6 = *(unsigned int *)(a1 + 116);
    else
      v6 = v5;
    memcpy((void *)(*(_QWORD *)(a1 + 144) + v4), (const void *)(a1 + 234154 + *(unsigned int *)(a1 + 112)), v6);
    v7 = *(_DWORD *)(a1 + 116) - v6;
    *(_DWORD *)(a1 + 112) += v6;
    *(_DWORD *)(a1 + 116) = v7;
    v8 = *(_QWORD *)(a1 + 192) + v6;
    *(_QWORD *)(a1 + 192) = v8;
    **(_QWORD **)(a1 + 160) = v8;
  }
  return *(_DWORD *)(a1 + 120) && *(_DWORD *)(a1 + 116) == 0;
}

BOOL tinyexr::miniz::tdefl_compress_normal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  __int16 v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  __int16 v44;
  unsigned __int16 v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  unint64_t v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int v85;
  int v86;
  int v88;

  v3 = a1;
  v4 = a1 + 200;
  v5 = a1 + 33226;
  v6 = *(unsigned __int8 **)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  v88 = a1 + 37546;
  v8 = *(_DWORD *)(a1 + 168);
  v9 = a1 + 103074;
  while (1)
  {
    if (v7)
    {
      v11 = *(_DWORD *)(v3 + 40);
      v10 = *(_DWORD *)(v3 + 44);
      if (v10 + v11 <= 1)
      {
        v12 = 0;
        if (v11 <= 0x102)
          v13 = 258;
        else
          v13 = *(_DWORD *)(v3 + 40);
        while (v13 - v11 != (_DWORD)v12)
        {
          v14 = v6[v12];
          v15 = *(unsigned int *)(v3 + 36);
          v16 = ((_WORD)v11 + (_WORD)v12 + (_WORD)v15) & 0x7FFF;
          a2 = v3 + v16;
          *(_BYTE *)(v3 + v16 + 200) = v14;
          if (v16 <= 0x100)
            *(_BYTE *)(v3 + (v16 | 0x8000) + 200) = v14;
          *(_DWORD *)(v3 + 40) = v11 + v12 + 1;
          a1 = v11 + v10 + 1 + v12;
          if (a1 >= 3)
          {
            a1 = v11 - 2 + v12 + v15;
            a3 = (unint64_t)(*(_BYTE *)(v3 + 200 + (a1 & 0x7FFF)) & 0x1F) << 10;
            v17 = v3
                + 2
                * (v14 ^ (32
                        * *(unsigned __int8 *)(v3 + 200 + (((_WORD)v11 + 0x7FFF + (_WORD)v12 + (_WORD)v15) & 0x7FFF))) ^ a3);
            a2 = v3 + 2 * (a1 & 0x7FFF);
            *(_WORD *)(a2 + 103082) = *(_WORD *)(v17 + 168618);
            *(_WORD *)(v17 + 168618) = a1;
          }
          if (v7 == ++v12)
          {
            v7 = 0;
            v13 = v11 + v12;
            v6 += v12;
            goto LABEL_28;
          }
        }
        if (0x8000 - v13 >= v10)
          v28 = v10;
        else
          v28 = 0x8000 - v13;
        *(_DWORD *)(v3 + 44) = v28;
        v6 += v12;
        v7 -= v12;
        goto LABEL_38;
      }
      goto LABEL_18;
    }
    if (!v8)
      break;
    v13 = *(_DWORD *)(v3 + 40);
    if (!v13)
      break;
    v10 = *(_DWORD *)(v3 + 44);
    if (v10 + v13 <= 1)
    {
      v7 = 0;
      goto LABEL_28;
    }
    v11 = *(_DWORD *)(v3 + 40);
LABEL_18:
    LODWORD(v18) = *(_DWORD *)(v3 + 36) + v11;
    v19 = v18 - 2;
    v20 = *(unsigned __int8 *)(v3 + 200 + (((_DWORD)v18 - 2) & 0x7FFF));
    v21 = *(unsigned __int8 *)(v3 + 200 + ((*(_WORD *)(v3 + 36) + (_WORD)v11 - 1) & 0x7FFF));
    if (v7 >= 258 - v11)
      v22 = 258 - v11;
    else
      v22 = v7;
    v7 -= v22;
    v13 = v11 + v22;
    *(_DWORD *)(v3 + 40) = v11 + v22;
    if (v22)
    {
      v23 = &v6[v22];
      LOWORD(v24) = v21 ^ (32 * v20);
      do
      {
        v18 &= 0x7FFFu;
        v26 = *v6++;
        v25 = v26;
        *(_BYTE *)(v3 + v18 + 200) = v26;
        if (v18 <= 0x100)
          *(_BYTE *)(v3 + (v18 | 0x8000) + 200) = v25;
        v24 = (32 * (v24 & 0x3FF)) ^ v25;
        v27 = v3 + 2 * v24;
        *(_WORD *)(v3 + 2 * (v19 & 0x7FFF) + 103082) = *(_WORD *)(v27 + 168618);
        *(_WORD *)(v27 + 168618) = v19;
        LOWORD(v18) = v18 + 1;
        ++v19;
        --v22;
      }
      while (v22);
      v6 = v23;
    }
LABEL_28:
    if (0x8000 - v13 >= v10)
      v28 = v10;
    else
      v28 = 0x8000 - v13;
    *(_DWORD *)(v3 + 44) = v28;
    if (!v8 && v13 < 0x102)
      goto LABEL_143;
LABEL_38:
    v29 = v13;
    v30 = *(_DWORD *)(v3 + 104);
    if (v30)
      v31 = *(_DWORD *)(v3 + 104);
    else
      v31 = 2;
    v32 = *(_DWORD *)(v3 + 36);
    v33 = v32 & 0x7FFF;
    v34 = *(_DWORD *)(v3 + 16);
    if ((v34 & 0x90000) != 0)
    {
      v35 = 0;
      if (v28 && (v34 & 0x80000) == 0)
      {
        if (v13)
        {
          v36 = 0;
          while (*(unsigned __int8 *)(v3 + (*(_DWORD *)(v3 + 36) & 0x7FFF) + v36 + 200) == *(unsigned __int8 *)(v3 + (((unsigned __int16)*(_DWORD *)(v3 + 36) - 1) & 0x7FFF) + 200))
          {
            if (v13 == ++v36)
              goto LABEL_83;
          }
          v29 = v36;
        }
        else
        {
          v29 = 0;
        }
LABEL_83:
        v35 = v29 > 2;
        if (v29 <= 2)
          v31 = 0;
        else
          v31 = v29;
      }
    }
    else
    {
      if (v13 >= 0x103)
        tinyexr::miniz::tdefl_compress_normal();
      if (v31 < v13)
      {
        v37 = *(_DWORD *)(v3 + 4 * (v31 > 0x1F) + 20);
        v38 = v37 - 1;
        if (v37 != 1)
        {
          v35 = 0;
          a2 = *(unsigned __int8 *)(v3 + 200 + v33 + v31 - 1);
          a1 = *(unsigned __int8 *)(v3 + 200 + v33 + v31);
          LODWORD(v39) = *(_DWORD *)(v3 + 36) & 0x7FFF;
          v40 = v31;
LABEL_53:
          a3 = (1 - v38);
          while (1)
          {
            v41 = *(unsigned __int16 *)(v3 + 2 * v39 + 103082);
            if (!v41)
              goto LABEL_86;
            LOWORD(v42) = v32 - v41;
            if (v28 < (unsigned __int16)(v32 - v41))
              goto LABEL_86;
            v39 = v41 & 0x7FFF;
            v43 = v40 + v39;
            if (*(unsigned __int8 *)(v3 + v43 + 200) == (_DWORD)a1
              && *(unsigned __int8 *)(v3 + (v43 - 1) + 200) == (_DWORD)a2)
            {
              goto LABEL_68;
            }
            v44 = *(_WORD *)(v3 + 2 * v39 + 103082);
            if (!v44)
              goto LABEL_86;
            v45 = v32 - v44;
            if (v28 < (unsigned __int16)(v32 - v44))
              goto LABEL_86;
            v46 = v44 & 0x7FFF;
            v47 = v40 + (v44 & 0x7FFF);
            if (*(unsigned __int8 *)(v3 + v47 + 200) == (_DWORD)a1
              && *(unsigned __int8 *)(v3 + (v47 - 1) + 200) == (_DWORD)a2)
            {
              break;
            }
            v48 = *(_WORD *)(v3 + 2 * v46 + 103082);
            if (!v48)
              goto LABEL_86;
            LOWORD(v42) = v32 - v48;
            if (v28 < (unsigned __int16)(v32 - v48))
              goto LABEL_86;
            LODWORD(v39) = v48 & 0x7FFF;
            v49 = v40 + v39;
            if (*(unsigned __int8 *)(v3 + v49 + 200) == (_DWORD)a1
              && *(unsigned __int8 *)(v3 + (v49 - 1) + 200) == (_DWORD)a2)
            {
LABEL_68:
              v42 = (unsigned __int16)v42;
              if (!(_WORD)v42)
                goto LABEL_86;
LABEL_71:
              v50 = 0;
              while (*(unsigned __int8 *)(v4 + v33 + v50) == *(unsigned __int8 *)(v4 + v39 + v50))
              {
                if (v13 == (_DWORD)++v50)
                {
                  LODWORD(v50) = v13;
                  break;
                }
              }
              if (v50 > v40)
              {
                if ((_DWORD)v50 == v13)
                {
                  v35 = v42;
                  v31 = v13;
                  goto LABEL_86;
                }
                a1 = *(unsigned __int8 *)(v3 + 200 + (v50 + v33));
                a2 = *(unsigned __int8 *)(v3 + 200 + (v50 + v33 - 1));
                v35 = v42;
                v31 = v50;
                v40 = v50;
              }
              v38 = -(int)a3;
              if ((_DWORD)a3)
                goto LABEL_53;
              goto LABEL_86;
            }
            a3 = (a3 + 1);
            if ((_DWORD)a3 == 1)
              goto LABEL_86;
          }
          v42 = v45;
          LODWORD(v39) = v46;
          if (!v42)
            goto LABEL_86;
          goto LABEL_71;
        }
      }
      v35 = 0;
    }
LABEL_86:
    v51 = (v35 & 0xFFFFE000) != 0 && v31 == 3;
    if (v51 || (_DWORD)v33 == v35 || (v34 & 0x20000) != 0 && v31 < 6)
    {
      if (!v30)
        goto LABEL_124;
LABEL_94:
      v52 = v30 - 3;
      if (v30 < 3 || (v53 = *(_DWORD *)(v3 + 100), (v53 - 32769) <= 0xFFFF7FFF))
        tinyexr::miniz::tdefl_compress_normal(a1, a2, a3);
      *(_DWORD *)(v3 + 84) += v30;
      **(_BYTE **)(v3 + 48) = v52;
      v54 = (v53 - 1);
      *(_WORD *)(*(_QWORD *)(v3 + 48) + 1) = v54;
      v55 = *(_BYTE **)(v3 + 56);
      *(_QWORD *)(v3 + 48) += 3;
      *v55 = (*v55 >> 1) | 0x80;
      v56 = *(_DWORD *)(v3 + 80) - 1;
      *(_DWORD *)(v3 + 80) = v56;
      if (!v56)
      {
        *(_DWORD *)(v3 + 80) = 8;
        v57 = *(_QWORD *)(v3 + 48);
        *(_QWORD *)(v3 + 48) = v57 + 1;
        *(_QWORD *)(v3 + 56) = v57;
      }
      if (v54 >= 0x200)
        v58 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_large_dist_sym + (v54 >> 8);
      else
        v58 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_small_dist_sym + (v54 & 0x1FF);
      ++*(_WORD *)(v3 + 2 * *v58 + 33802);
      v59 = tinyexr::miniz::s_tdefl_len_sym[v52];
      ++*(_WORD *)(v5 + 2 * v59);
      v31 = *(_DWORD *)(v3 + 104) - 1;
      goto LABEL_102;
    }
    if (!v30)
    {
      if (v35)
      {
        if (*(_DWORD *)(v3 + 28) || (v34 & 0x10000) != 0 || v31 >= 0x80)
        {
          v69 = v31 - 3;
          if (v31 < 3 || v35 > 0x8000)
            tinyexr::miniz::tdefl_compress_normal(a1, a2, a3);
          *(_DWORD *)(v3 + 84) += v31;
          **(_BYTE **)(v3 + 48) = v69;
          v70 = v35 - 1;
          *(_BYTE *)(*(_QWORD *)(v3 + 48) + 1) = v35 - 1;
          v71 = v70 >> 8;
          *(_BYTE *)(*(_QWORD *)(v3 + 48) + 2) = BYTE1(v70);
          v72 = *(_BYTE **)(v3 + 56);
          *(_QWORD *)(v3 + 48) += 3;
          *v72 = (*v72 >> 1) | 0x80;
          v73 = *(_DWORD *)(v3 + 80) - 1;
          *(_DWORD *)(v3 + 80) = v73;
          if (!v73)
          {
            *(_DWORD *)(v3 + 80) = 8;
            v74 = *(_QWORD *)(v3 + 48);
            *(_QWORD *)(v3 + 48) = v74 + 1;
            *(_QWORD *)(v3 + 56) = v74;
          }
          v75 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_small_dist_sym + (((_WORD)v35 - 1) & 0x1FF);
          v76 = (char *)&tinyexr::miniz::s_tdefl_large_dist_sym + v71;
          if (v35 >= 0x201)
            v75 = (unsigned __int8 *)v76;
          ++*(_WORD *)(v3 + 2 * *v75 + 33802);
          v77 = tinyexr::miniz::s_tdefl_len_sym[v69];
          ++*(_WORD *)(v5 + 2 * v77);
          goto LABEL_128;
        }
LABEL_140:
        v86 = *(unsigned __int8 *)(v3 + (v32 & 0x7FFF) + 200);
        *(_DWORD *)(v3 + 104) = v31;
        *(_DWORD *)(v3 + 108) = v86;
        *(_DWORD *)(v3 + 100) = v35;
      }
      else
      {
LABEL_124:
        v78 = *(unsigned __int8 *)(v3 + (v32 & 0x7FFF) + 200);
        ++*(_DWORD *)(v3 + 84);
        v79 = *(_BYTE **)(v3 + 48);
        *(_QWORD *)(v3 + 48) = v79 + 1;
        *v79 = v78;
        **(_BYTE **)(v3 + 56) >>= 1;
        LODWORD(v79) = *(_DWORD *)(v3 + 80) - 1;
        *(_DWORD *)(v3 + 80) = (_DWORD)v79;
        if (!(_DWORD)v79)
        {
          *(_DWORD *)(v3 + 80) = 8;
          v80 = *(_QWORD *)(v3 + 48);
          *(_QWORD *)(v3 + 48) = v80 + 1;
          *(_QWORD *)(v3 + 56) = v80;
        }
        ++*(_WORD *)(v5 + 2 * v78);
      }
      v31 = 1;
      goto LABEL_128;
    }
    if (v31 <= v30)
      goto LABEL_94;
    v60 = *(_DWORD *)(v3 + 108);
    ++*(_DWORD *)(v3 + 84);
    v61 = *(_BYTE **)(v3 + 48);
    *(_QWORD *)(v3 + 48) = v61 + 1;
    *v61 = v60;
    **(_BYTE **)(v3 + 56) >>= 1;
    LODWORD(v61) = *(_DWORD *)(v3 + 80) - 1;
    *(_DWORD *)(v3 + 80) = (_DWORD)v61;
    if (!(_DWORD)v61)
    {
      *(_DWORD *)(v3 + 80) = 8;
      v62 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = v62 + 1;
      *(_QWORD *)(v3 + 56) = v62;
    }
    ++*(_WORD *)(v5 + 2 * v60);
    if (v31 < 0x80)
      goto LABEL_140;
    if (v35 - 32769 <= 0xFFFF7FFF)
      tinyexr::miniz::tdefl_compress_normal(a1, a2, a3);
    *(_DWORD *)(v3 + 84) += v31;
    **(_BYTE **)(v3 + 48) = v31 - 3;
    v63 = v35 - 1;
    *(_WORD *)(*(_QWORD *)(v3 + 48) + 1) = v35 - 1;
    v64 = *(_BYTE **)(v3 + 56);
    *(_QWORD *)(v3 + 48) += 3;
    *v64 = (*v64 >> 1) | 0x80;
    v65 = *(_DWORD *)(v3 + 80) - 1;
    *(_DWORD *)(v3 + 80) = v65;
    if (!v65)
    {
      *(_DWORD *)(v3 + 80) = 8;
      v66 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = v66 + 1;
      *(_QWORD *)(v3 + 56) = v66;
    }
    if (v63 >= 0x200)
      v67 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_large_dist_sym + (v63 >> 8);
    else
      v67 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_small_dist_sym + (((_WORD)v35 - 1) & 0x1FF);
    ++*(_WORD *)(v3 + 2 * *v67 + 33802);
    v68 = tinyexr::miniz::s_tdefl_len_sym[v31 - 3];
    ++*(_WORD *)(v5 + 2 * v68);
LABEL_102:
    *(_DWORD *)(v3 + 104) = 0;
LABEL_128:
    v81 = *(_DWORD *)(v3 + 40);
    *(_DWORD *)(v3 + 36) += v31;
    v82 = v81 - v31;
    if (v81 < v31)
      tinyexr::miniz::tdefl_compress_normal();
    v83 = *(_DWORD *)(v3 + 44) + v31;
    if (v83 >= 0x8000)
      v83 = 0x8000;
    *(_DWORD *)(v3 + 40) = v82;
    *(_DWORD *)(v3 + 44) = v83;
    v84 = *(_QWORD *)(v3 + 48);
    if (v84 <= v9)
    {
      v85 = *(_DWORD *)(v3 + 84);
      if (v85 < 0x7C01 || v85 > (115 * (v84 - v88)) >> 7 && (*(_BYTE *)(v3 + 18) & 8) == 0)
        continue;
    }
    *(_QWORD *)(v3 + 176) = v6;
    *(_QWORD *)(v3 + 184) = v7;
    a1 = tinyexr::miniz::tdefl_flush_block(v3, 0);
    if ((_DWORD)a1)
      return (int)a1 >= 0;
  }
  v7 = 0;
LABEL_143:
  *(_QWORD *)(v3 + 176) = v6;
  *(_QWORD *)(v3 + 184) = v7;
  return 1;
}

uint64_t tinyexr::miniz::tdefl_flush_block(uint64_t a1, int a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE *v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE *v24;
  int v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned __int16 v41;
  int v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int (*v46)(uint64_t, unint64_t, _QWORD);
  uint64_t result;
  uint64_t v48;
  uint64_t v49;

  v4 = (*(_BYTE *)(a1 + 18) & 8) != 0
    && (*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 88)) <= *(_DWORD *)(a1 + 44);
  if (*(_QWORD *)a1 || (v5 = *(_QWORD *)(a1 + 192), (unint64_t)(**(_QWORD **)(a1 + 160) - v5) < 0x14CCC))
    v6 = a1 + 234154;
  else
    v6 = *(_QWORD *)(a1 + 144) + v5;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = v6 + 85180;
  if (*(_DWORD *)(a1 + 116))
    tinyexr::miniz::tdefl_flush_block();
  *(_QWORD *)(a1 + 112) = 0;
  **(_BYTE **)(a1 + 56) = **(unsigned __int8 **)(a1 + 56) >> *(_DWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 48) -= *(_DWORD *)(a1 + 80) == 8;
  if ((*(_BYTE *)(a1 + 17) & 0x10) != 0 && !*(_DWORD *)(a1 + 124))
  {
    v7 = *(_DWORD *)(a1 + 92);
    v8 = *(_DWORD *)(a1 + 96) | (120 << v7);
    v9 = v7 + 8;
    *(_DWORD *)(a1 + 92) = v7 + 8;
    *(_DWORD *)(a1 + 96) = v8;
    if (v7 <= 0xFFFFFFF7)
    {
      do
      {
        v10 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v10 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v10 + 1;
          *v10 = v8;
          v9 = *(_DWORD *)(a1 + 92);
          v8 = *(_DWORD *)(a1 + 96);
        }
        v8 >>= 8;
        v9 -= 8;
        *(_DWORD *)(a1 + 92) = v9;
        *(_DWORD *)(a1 + 96) = v8;
      }
      while (v9 > 7);
    }
    v11 = v8 | (1 << v9);
    v12 = v9 + 8;
    *(_DWORD *)(a1 + 92) = v12;
    *(_DWORD *)(a1 + 96) = v11;
    do
    {
      v13 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v13 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v13 + 1;
        *v13 = v11;
        v12 = *(_DWORD *)(a1 + 92);
        v11 = *(_DWORD *)(a1 + 96);
      }
      v11 >>= 8;
      v12 -= 8;
      *(_DWORD *)(a1 + 92) = v12;
      *(_DWORD *)(a1 + 96) = v11;
    }
    while (v12 > 7);
  }
  v14 = *(_DWORD *)(a1 + 92);
  v15 = *(_DWORD *)(a1 + 96) | ((a2 == 4) << v14);
  v16 = v14 + 1;
  *(_DWORD *)(a1 + 92) = v14 + 1;
  *(_DWORD *)(a1 + 96) = v15;
  if ((v14 + 1) >= 8)
  {
    do
    {
      v17 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v17 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v17 + 1;
        *v17 = v15;
        v16 = *(_DWORD *)(a1 + 92);
        v15 = *(_DWORD *)(a1 + 96);
      }
      v15 >>= 8;
      v16 -= 8;
      *(_DWORD *)(a1 + 92) = v16;
      *(_DWORD *)(a1 + 96) = v15;
    }
    while (v16 > 7);
  }
  v18 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v19 = 0;
  }
  else
  {
    v20 = (*(_BYTE *)(a1 + 18) & 4) != 0 || *(_DWORD *)(a1 + 84) < 0x30u;
    v19 = tinyexr::miniz::tdefl_compress_block(a1, v20);
    v21 = *(unsigned int *)(a1 + 84);
    if (!(_DWORD)v21 || *(_QWORD *)(a1 + 64) - v18 + 1 < v21)
    {
LABEL_31:
      if (!v19)
      {
        *(_QWORD *)(a1 + 64) = v18;
        *(_DWORD *)(a1 + 92) = v16;
        *(_DWORD *)(a1 + 96) = v15;
        tinyexr::miniz::tdefl_compress_block(a1, 1);
      }
      goto LABEL_55;
    }
  }
  if ((*(_DWORD *)(a1 + 36) - *(_DWORD *)(a1 + 88)) > *(_DWORD *)(a1 + 44))
    goto LABEL_31;
  *(_QWORD *)(a1 + 64) = v18;
  v22 = v16 + 2;
  *(_DWORD *)(a1 + 92) = v16 + 2;
  *(_DWORD *)(a1 + 96) = v15;
  if (v16 < 6)
    goto LABEL_38;
  do
  {
    v23 = *(_BYTE **)(a1 + 64);
    if ((unint64_t)v23 < *(_QWORD *)(a1 + 72))
    {
      *(_QWORD *)(a1 + 64) = v23 + 1;
      *v23 = v15;
      v22 = *(_DWORD *)(a1 + 92);
      v15 = *(_DWORD *)(a1 + 96);
    }
    v15 >>= 8;
    v22 -= 8;
    *(_DWORD *)(a1 + 92) = v22;
    *(_DWORD *)(a1 + 96) = v15;
  }
  while (v22 > 7);
  if (v22)
  {
LABEL_38:
    v22 = 8;
    *(_DWORD *)(a1 + 92) = 8;
    do
    {
      v24 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v24 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v24 + 1;
        *v24 = v15;
        v22 = *(_DWORD *)(a1 + 92);
        v15 = *(_DWORD *)(a1 + 96);
      }
      v15 >>= 8;
      v22 -= 8;
      *(_DWORD *)(a1 + 92) = v22;
      *(_DWORD *)(a1 + 96) = v15;
    }
    while (v22 > 7);
  }
  LOWORD(v25) = *(_WORD *)(a1 + 84);
  v26 = 2;
  do
  {
    v15 |= (unsigned __int16)v25 << v22;
    v22 += 16;
    *(_DWORD *)(a1 + 92) = v22;
    *(_DWORD *)(a1 + 96) = v15;
    do
    {
      v27 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v27 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v27 + 1;
        *v27 = v15;
        v22 = *(_DWORD *)(a1 + 92);
        v15 = *(_DWORD *)(a1 + 96);
      }
      v15 >>= 8;
      v22 -= 8;
      *(_DWORD *)(a1 + 92) = v22;
      *(_DWORD *)(a1 + 96) = v15;
    }
    while (v22 > 7);
    v25 = *(_DWORD *)(a1 + 84) ^ 0xFFFF;
    *(_DWORD *)(a1 + 84) = v25;
    --v26;
  }
  while (v26);
  if (v25)
  {
    v28 = 0;
    do
    {
      v15 |= *(unsigned __int8 *)(a1 + (((unsigned __int16)*(_DWORD *)(a1 + 88) + (_WORD)v28) & 0x7FFF) + 200) << v22;
      v22 += 8;
      *(_DWORD *)(a1 + 92) = v22;
      *(_DWORD *)(a1 + 96) = v15;
      do
      {
        v29 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v29 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v29 + 1;
          *v29 = v15;
          v22 = *(_DWORD *)(a1 + 92);
          v15 = *(_DWORD *)(a1 + 96);
        }
        v15 >>= 8;
        v22 -= 8;
        *(_DWORD *)(a1 + 92) = v22;
        *(_DWORD *)(a1 + 96) = v15;
      }
      while (v22 > 7);
      ++v28;
    }
    while (v28 < *(_DWORD *)(a1 + 84));
  }
LABEL_55:
  if (a2)
  {
    v30 = *(_DWORD *)(a1 + 92);
    if (a2 == 4)
    {
      if (v30)
      {
        v30 = 8;
        *(_DWORD *)(a1 + 92) = 8;
        v31 = *(_DWORD *)(a1 + 96);
        do
        {
          v32 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v32 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v32 + 1;
            *v32 = v31;
            v30 = *(_DWORD *)(a1 + 92);
            v31 = *(_DWORD *)(a1 + 96);
          }
          v31 >>= 8;
          v30 -= 8;
          *(_DWORD *)(a1 + 92) = v30;
          *(_DWORD *)(a1 + 96) = v31;
        }
        while (v30 > 7);
      }
      if ((*(_BYTE *)(a1 + 17) & 0x10) != 0)
      {
        v33 = 0;
        v34 = *(_DWORD *)(a1 + 32);
        v35 = *(_DWORD *)(a1 + 96);
        do
        {
          v35 |= HIBYTE(v34) << v30;
          v30 += 8;
          *(_DWORD *)(a1 + 92) = v30;
          *(_DWORD *)(a1 + 96) = v35;
          do
          {
            v36 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v36 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v36 + 1;
              *v36 = v35;
              v30 = *(_DWORD *)(a1 + 92);
              v35 = *(_DWORD *)(a1 + 96);
            }
            v35 >>= 8;
            v30 -= 8;
            *(_DWORD *)(a1 + 92) = v30;
            *(_DWORD *)(a1 + 96) = v35;
          }
          while (v30 > 7);
          v34 <<= 8;
          ++v33;
        }
        while (v33 != 4);
      }
    }
    else
    {
      v37 = v30 + 3;
      *(_DWORD *)(a1 + 92) = v30 + 3;
      v38 = *(_DWORD *)(a1 + 96);
      if (v37 >= 8)
      {
        do
        {
          v39 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v39 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v39 + 1;
            *v39 = v38;
            v37 = *(_DWORD *)(a1 + 92);
            v38 = *(_DWORD *)(a1 + 96);
          }
          v38 >>= 8;
          v37 -= 8;
          *(_DWORD *)(a1 + 92) = v37;
          *(_DWORD *)(a1 + 96) = v38;
        }
        while (v37 > 7);
      }
      if (v37)
      {
        v37 = 8;
        *(_DWORD *)(a1 + 92) = 8;
        do
        {
          v40 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v40 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v40 + 1;
            *v40 = v38;
            v37 = *(_DWORD *)(a1 + 92);
            v38 = *(_DWORD *)(a1 + 96);
          }
          v38 >>= 8;
          v37 -= 8;
          *(_DWORD *)(a1 + 92) = v37;
          *(_DWORD *)(a1 + 96) = v38;
        }
        while (v37 > 7);
      }
      v41 = 0;
      v42 = 2;
      do
      {
        v38 |= v41 << v37;
        v37 += 16;
        *(_DWORD *)(a1 + 92) = v37;
        *(_DWORD *)(a1 + 96) = v38;
        do
        {
          v43 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v43 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v43 + 1;
            *v43 = v38;
            v37 = *(_DWORD *)(a1 + 92);
            v38 = *(_DWORD *)(a1 + 96);
          }
          v38 >>= 8;
          v37 -= 8;
          *(_DWORD *)(a1 + 92) = v37;
          *(_DWORD *)(a1 + 96) = v38;
        }
        while (v37 > 7);
        v41 = ~v41;
        --v42;
      }
      while (v42);
    }
  }
  v44 = *(_QWORD *)(a1 + 64);
  if (v44 >= *(_QWORD *)(a1 + 72))
    tinyexr::miniz::tdefl_flush_block();
  bzero((void *)(a1 + 33226), 0x280uLL);
  *(_QWORD *)(a1 + 48) = a1 + 37547;
  *(_QWORD *)(a1 + 56) = a1 + 37546;
  *(_DWORD *)(a1 + 88) += *(_DWORD *)(a1 + 84);
  *(_QWORD *)(a1 + 80) = 8;
  ++*(_DWORD *)(a1 + 124);
  v45 = v44 - v6;
  if ((_DWORD)v45)
  {
    v46 = *(unsigned int (**)(uint64_t, unint64_t, _QWORD))a1;
    if (*(_QWORD *)a1)
    {
      **(_QWORD **)(a1 + 152) = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 136);
      if (!v46(a1 + 234154, v45, *(_QWORD *)(a1 + 8)))
      {
        result = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 132) = -1;
        return result;
      }
    }
    else if (v6 == a1 + 234154)
    {
      v48 = *(_QWORD *)(a1 + 192);
      if ((int)v45 >= (unint64_t)(**(_QWORD **)(a1 + 160) - v48))
        v49 = **(_QWORD **)(a1 + 160) - v48;
      else
        LODWORD(v49) = v45;
      memcpy((void *)(*(_QWORD *)(a1 + 144) + v48), (const void *)(a1 + 234154), (int)v49);
      *(_QWORD *)(a1 + 192) += (int)v49;
      if ((_DWORD)v45 != (_DWORD)v49)
      {
        *(_DWORD *)(a1 + 112) = v49;
        *(_DWORD *)(a1 + 116) = v45 - v49;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 192) += (int)v45;
    }
  }
  return *(unsigned int *)(a1 + 116);
}

uint64_t tdefl_compress_buffer(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  uint64_t v5;

  v5 = a3;
  if (!*a1)
    tdefl_compress_buffer_cold_1();
  return tdefl_compress((uint64_t)a1, a2, &v5, 0, 0, a4);
}

uint64_t tdefl_get_prev_return_status(uint64_t a1)
{
  return *(unsigned int *)(a1 + 132);
}

BOOL tdefl_compress_mem_to_output(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  BOOL v5;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL8 v14;

  if (a2)
    v5 = a1 == 0;
  else
    v5 = 0;
  if (v5 || a3 == 0)
    return 0;
  v12 = malloc_type_malloc(0x4DF78uLL, 0x10D00400C0B6517uLL);
  if (!v12)
    return 0;
  v13 = v12;
  tdefl_init((uint64_t)v12, a3, a4, a5);
  v14 = tdefl_compress_buffer(v13, a1, a2, 4) == 1;
  free(v13);
  return v14;
}

uint64_t tdefl_compress_mem_to_heap(unsigned __int8 *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t result;
  __int128 v6;
  __int128 v7;

  v6 = 0u;
  v7 = 0u;
  if (!a3)
    return 0;
  *a3 = 0;
  DWORD2(v7) = 1;
  if (!tdefl_compress_mem_to_output(a1, a2, (uint64_t)tinyexr::miniz::tdefl_output_buffer_putter, (uint64_t)&v6, a4))
    return 0;
  result = v7;
  *a3 = v6;
  return result;
}

uint64_t tinyexr::miniz::tdefl_output_buffer_putter(tinyexr::miniz *this, const void *a2, size_t *a3, void *a4)
{
  int v5;
  size_t v7;
  size_t v8;
  size_t v9;
  uint64_t result;

  v5 = (int)a2;
  v7 = *a3;
  v8 = a3[1];
  v9 = *a3 + (int)a2;
  if (v9 <= v8)
  {
    result = a3[2];
    goto LABEL_10;
  }
  if (!*((_DWORD *)a3 + 6))
    return 0;
  do
  {
    if (2 * v8 <= 0x80)
      v8 = 128;
    else
      v8 *= 2;
  }
  while (v9 > v8);
  result = (uint64_t)malloc_type_realloc((void *)a3[2], v8, 0x53D9846FuLL);
  if (result)
  {
    a3[1] = v8;
    a3[2] = result;
    v7 = *a3;
LABEL_10:
    memcpy((void *)(result + v7), this, v5);
    *a3 = v9;
    return 1;
  }
  return result;
}

uint64_t tdefl_compress_mem_to_mem(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned int a5)
{
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  if (result)
  {
    *((_QWORD *)&v5 + 1) = a2;
    *(_QWORD *)&v6 = result;
    if (tdefl_compress_mem_to_output(a3, a4, (uint64_t)tinyexr::miniz::tdefl_output_buffer_putter, (uint64_t)&v5, a5))
      return v5;
    else
      return 0;
  }
  return result;
}

_QWORD *tdefl_write_image_to_png_file_in_memory_ex(uint64_t a1, int a2, int a3, int a4, _QWORD *a5, unsigned int a6, int a7)
{
  _QWORD *result;
  _QWORD *v15;
  int v16;
  void *v17;
  int i;
  int v19;
  int v20;
  int v21;
  int v22;
  void *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t j;
  _OWORD *v31;
  __int128 v32;
  int v33;
  uint64_t k;
  void *v35;
  _QWORD *v36;
  int v37;
  __int128 v38;
  void *v39[2];
  __int128 v40;
  _BYTE v41[25];
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  result = malloc_type_malloc(0x4DF78uLL, 0x10D00400C0B6517uLL);
  *a5 = 0;
  if (result)
  {
    v15 = result;
    v38 = 0u;
    *(_OWORD *)v39 = 0u;
    LODWORD(v39[1]) = 1;
    v16 = a3 + a3 * a4 * a2;
    if (v16 <= 64)
      v16 = 64;
    *((_QWORD *)&v38 + 1) = (v16 + 57);
    v39[0] = malloc_type_malloc(*((size_t *)&v38 + 1), 0x2DDFEBB9uLL);
    if (v39[0])
    {
      v36 = a5;
      v37 = 41;
      for (i = 40; i != -1; --i)
      {
        tinyexr::miniz::tdefl_output_buffer_putter((tinyexr::miniz *)&v37, (const void *)1, (size_t *)&v38, v17);
        v37 = i;
      }
      if (a6 >= 0xA)
        v19 = 10;
      else
        v19 = a6;
      tdefl_init((uint64_t)v15, (uint64_t)tinyexr::miniz::tdefl_output_buffer_putter, (uint64_t)&v38, tdefl_write_image_to_png_file_in_memory_ex::s_tdefl_png_num_probes[v19] | 0x1000);
      v20 = a3 - 1;
      if (a3 >= 1)
      {
        v21 = 0;
        do
        {
          tdefl_compress_buffer(v15, (unsigned __int8 *)&v37, 1, 0);
          if (a7)
            v22 = v20;
          else
            v22 = v21;
          tdefl_compress_buffer(v15, (unsigned __int8 *)(a1 + v22 * a4 * a2), a4 * a2, 0);
          ++v21;
          --v20;
        }
        while (v20 != -1);
      }
      if (tdefl_compress_buffer(v15, 0, 0, 4) == 1)
      {
        v24 = v38 - 41;
        *v36 = v38 - 41;
        v40 = xmmword_23C603290;
        *(_WORD *)v41 = 0;
        v41[2] = BYTE1(a2);
        v41[3] = a2;
        *(_WORD *)&v41[4] = 0;
        v41[6] = BYTE1(a3);
        v41[7] = a3;
        v41[8] = 8;
        v41[9] = tdefl_write_image_to_png_file_in_memory_ex::chans[a4];
        *(_DWORD *)&v41[10] = 0;
        *(_DWORD *)&v41[13] = 0;
        v41[17] = HIBYTE(v24);
        v41[18] = BYTE2(v24);
        v41[19] = BYTE1(v24);
        v41[20] = v24;
        v25 = -1;
        v26 = 12;
        *(_DWORD *)&v41[21] = 1413563465;
        do
        {
          v27 = v41[v26 - 16];
          v28 = mz_crc32::s_crc32[(v25 ^ v27) & 0xF] ^ (v25 >> 4);
          v25 = mz_crc32::s_crc32[v28 & 0xF ^ (v27 >> 4)] ^ (v28 >> 4);
          ++v26;
        }
        while (v26 != 29);
        v29 = ~v25;
        for (j = 29; j != 33; ++j)
        {
          v41[j - 16] = HIBYTE(v29);
          v29 <<= 8;
        }
        v31 = v39[0];
        v32 = *(_OWORD *)v41;
        *(_OWORD *)v39[0] = v40;
        v31[1] = v32;
        *(_OWORD *)((char *)v31 + 25) = *(_OWORD *)&v41[9];
        if (tinyexr::miniz::tdefl_output_buffer_putter((tinyexr::miniz *)&unk_23C60358D, (const void *)0x10, (size_t *)&v38, v23))
        {
          v33 = mz_crc32(0, (unsigned __int8 *)v39[0] + 37, *v36 + 4);
          for (k = -16; k != -12; ++k)
          {
            *((_BYTE *)v39[0] + v38 + k) = HIBYTE(v33);
            v33 <<= 8;
          }
          *v36 += 57;
          free(v15);
          return v39[0];
        }
        *v36 = 0;
      }
      free(v15);
      v35 = v39[0];
    }
    else
    {
      v35 = v15;
    }
    free(v35);
    return 0;
  }
  return result;
}

_QWORD *tdefl_write_image_to_png_file_in_memory(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  return tdefl_write_image_to_png_file_in_memory_ex(a1, a2, a3, a4, a5, 6u, 0);
}

uint64_t tinyexr::LevelIndex(uint64_t this, int a2, uint64_t a3, int a4)
{
  if (!(_DWORD)a3)
    return a3;
  if ((_DWORD)a3 == 2)
    return (this + a4 * a2);
  if ((_DWORD)a3 != 1)
    tinyexr::LevelIndex();
  return this;
}

uint64_t EXRLayers(char *__filename, void **a2, _DWORD *a3, char **a4)
{
  uint64_t v8;
  int v9;
  const char *p_p;
  int v11;
  const char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  void *__p;
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[12];
  uint64_t v23;
  void **v24;
  _OWORD v25[24];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v8 = ParseEXRVersionFromFile((uint64_t)v22, __filename);
  if ((_DWORD)v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid EXR header.");
    v9 = SHIBYTE(v21);
    if (a4)
    {
      if (v21 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      *a4 = strdup(p_p);
    }
    if (v9 < 0)
      operator delete(__p);
  }
  else if (v23)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Loading multipart or DeepImage is not supported  in LoadEXR() API");
    v11 = SHIBYTE(v21);
    if (a4)
    {
      if (v21 >= 0)
        v12 = (const char *)&__p;
      else
        v12 = (const char *)__p;
      *a4 = strdup(v12);
    }
    if (v11 < 0)
      operator delete(__p);
    return 4294967292;
  }
  else
  {
    v8 = ParseEXRHeaderFromFile((int8x8_t *)v25, (uint64_t)v22, __filename, a4);
    if ((_DWORD)v8)
    {
      FreeEXRHeader((uint64_t)v25);
    }
    else
    {
      __p = 0;
      v20 = 0;
      v21 = 0;
      tinyexr::GetLayers((uint64_t)v25, (uint64_t *)&__p);
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)__p) >> 3);
      *a3 = v13;
      *a2 = malloc_type_malloc(8 * v13, 0x50040EE9192B6uLL);
      v14 = (char *)__p;
      if (v20 != __p)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = &v14[v15];
          if (v14[v15 + 23] < 0)
            v17 = *(const char **)v17;
          *((_QWORD *)*a2 + v16++) = strdup(v17);
          v14 = (char *)__p;
          v15 += 24;
        }
        while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)__p) >> 3));
      }
      FreeEXRHeader((uint64_t)v25);
      v24 = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v24);
      return 0;
    }
  }
  return v8;
}

void sub_23C4EE98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double InitEXRHeader(uint64_t a1)
{
  double result;

  if (a1)
  {
    *(_QWORD *)(a1 + 384) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t ParseEXRVersionFromFile(uint64_t a1, char *__filename)
{
  FILE *v3;
  FILE *v4;
  unint64_t v5;
  size_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  if (!__filename)
    return 4294967293;
  v3 = fopen(__filename, "rb");
  if (!v3)
    return 4294967289;
  v4 = v3;
  fseek(v3, 0, 2);
  v5 = MEMORY[0x2426213A4](v4);
  fseek(v4, 0, 0);
  if (v5 >= 8 && (v6 = fread(v8, 1uLL, 8uLL, v4), fclose(v4), v6 == 8))
    return ParseEXRVersionFromMemory(a1, (uint64_t)v8, 8uLL);
  else
    return 4294967291;
}

uint64_t ParseEXRHeaderFromFile(int8x8_t *a1, uint64_t a2, char *__filename, char **a4)
{
  FILE *v8;
  FILE *v9;
  size_t v10;
  uint64_t v11;
  int v12;
  std::string *v13;
  std::string *v14;
  int v15;
  std::string *p_ptr;
  std::string v18;
  std::string __ptr;

  if (a1 && a2 && __filename)
  {
    v8 = fopen(__filename, "rb");
    if (v8)
    {
      v9 = v8;
      fseek(v8, 0, 2);
      v10 = MEMORY[0x2426213A4](v9);
      fseek(v9, 0, 0);
      std::vector<unsigned char>::vector(&__ptr, v10);
      if (fread(__ptr.__r_.__value_.__l.__data_, 1uLL, v10, v9) != v10)
        __assert_rtn("ParseEXRHeaderFromFile", "tinyexr.h", 14412, "ret == filesize");
      fclose(v9);
      if (__ptr.__r_.__value_.__l.__size_ == __ptr.__r_.__value_.__r.__words[0])
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v11 = ParseEXRHeaderFromMemory(a1, a2, (uint64_t)__ptr.__r_.__value_.__l.__data_, v10, a4);
      if (__ptr.__r_.__value_.__r.__words[0])
      {
        __ptr.__r_.__value_.__l.__size_ = __ptr.__r_.__value_.__r.__words[0];
        operator delete(__ptr.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v18, __filename);
      v14 = std::string::insert(&v18, 0, "Cannot read file ", 0x11uLL);
      __ptr = *v14;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v15 = SHIBYTE(__ptr.__r_.__value_.__r.__words[2]);
      if (a4)
      {
        if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_ptr = &__ptr;
        else
          p_ptr = (std::string *)__ptr.__r_.__value_.__r.__words[0];
        *a4 = strdup((const char *)p_ptr);
      }
      if (v15 < 0)
        operator delete(__ptr.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      return 4294967289;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__ptr, "Invalid argument for ParseEXRHeaderFromFile");
    v12 = SHIBYTE(__ptr.__r_.__value_.__r.__words[2]);
    if (a4)
    {
      if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &__ptr;
      else
        v13 = (std::string *)__ptr.__r_.__value_.__r.__words[0];
      *a4 = strdup((const char *)v13);
    }
    if (v12 < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    return 4294967293;
  }
  return v11;
}

void sub_23C4EECCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FreeEXRHeader(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t result;
  _OWORD *v11;

  if (!a1)
    return 4294967293;
  v2 = *(void **)(a1 + 104);
  if (v2)
    free(v2);
  v3 = *(void **)(a1 + 112);
  if (v3)
    free(v3);
  v4 = *(void **)(a1 + 128);
  if (v4)
    free(v4);
  v5 = *(_DWORD *)(a1 + 92);
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = 512;
    do
    {
      v8 = *(void **)(*(_QWORD *)(a1 + 96) + v7);
      if (v8)
      {
        free(v8);
        v5 = *(_DWORD *)(a1 + 92);
      }
      ++v6;
      v7 += 528;
    }
    while (v6 < v5);
  }
  v9 = *(void **)(a1 + 96);
  if (v9)
    free(v9);
  result = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  v11 = (_OWORD *)(a1 + 136);
  v11[14] = 0u;
  v11[15] = 0u;
  v11[12] = 0u;
  v11[13] = 0u;
  v11[10] = 0u;
  v11[11] = 0u;
  v11[8] = 0u;
  v11[9] = 0u;
  v11[6] = 0u;
  v11[7] = 0u;
  v11[4] = 0u;
  v11[5] = 0u;
  v11[2] = 0u;
  v11[3] = 0u;
  v11[1] = 0u;
  return result;
}

void tinyexr::GetLayers(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::string::size_type size;
  std::string *p_p;
  char *v7;
  std::string::size_type v8;
  int v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  std::string __p;

  std::vector<std::string>::__clear[abi:ne180100](a2);
  if (*(int *)(a1 + 120) >= 1)
  {
    v4 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*(_QWORD *)(a1 + 104) + 272 * v4));
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        v7 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
        v8 = size;
        while (v8)
        {
          v9 = v7[v8--];
          if (v9 == 46)
          {
            if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && v8 + 1 < size)
            {
              std::string::erase(&__p, v8, 0xFFFFFFFFFFFFFFFFLL);
              v10 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a2, a2[1], (unsigned __int8 **)&__p);
              if (v10 == (std::string *)a2[1])
              {
                v11 = v10;
                if ((unint64_t)v10 >= a2[2])
                {
                  v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&__p);
                }
                else
                {
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                    v10->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
                  }
                  v13 = (uint64_t)&v11[1];
                  a2[1] = (uint64_t)&v11[1];
                }
                a2[1] = v13;
              }
            }
            break;
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v4;
    }
    while (v4 < *(int *)(a1 + 120));
  }
}

void sub_23C4EEF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LoadEXR(float32x4_t **a1, _DWORD *a2, _DWORD *a3, char *a4, char **a5)
{
  return LoadEXRWithLayer(a1, a2, a3, a4, 0, a5);
}

uint64_t LoadEXRWithLayer(float32x4_t **a1, _DWORD *a2, _DWORD *a3, char *__filename, char *a5, char **a6)
{
  float32x4_t **v11;
  uint64_t EXRImageFromFile;
  _QWORD *v13;
  int v14;
  std::string *p_p;
  std::string::size_type v16;
  int v17;
  void **v18;
  int v19;
  std::string *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *i;
  std::string::size_type v28;
  uint64_t v29;
  int64_t v30;
  std::string *v31;
  int v32;
  void *v33;
  std::string *v34;
  int64_t v35;
  char *v36;
  char *v37;
  std::string::size_type size;
  std::string *v39;
  char *v40;
  std::string::size_type v41;
  int v42;
  uint64_t v43;
  int v44;
  std::string *v45;
  int64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  int v63;
  float32x4_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float v86;
  int v87;
  std::string *v88;
  uint64_t v89;
  float32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  std::string *v111;
  uint64_t v112;
  const float *v113;
  float32x4_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float *v122;
  float v123;
  _DWORD *v124;
  _DWORD *v125;
  float32x4_t **v126;
  void *v127;
  uint64_t v128;
  unsigned __int8 v129;
  char *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133[3];
  std::string v134;
  _QWORD v135[10];
  char v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  _BYTE v141[12];
  uint64_t v142;
  std::string v143;
  std::string __p;
  char v145;
  void *v146[2];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v11 = a1;
    v170 = 0;
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    *(_OWORD *)v146 = 0u;
    v147 = 0u;
    v139 = 0u;
    v140 = 0u;
    v138 = 0u;
    EXRImageFromFile = ParseEXRVersionFromFile((uint64_t)v141, __filename);
    if ((_DWORD)EXRImageFromFile)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v134);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v134.__r_.__value_.__r.__words[2], (uint64_t)"Failed to open EXR file or read version info from EXR file. code(", 65);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)")", 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v135, &__p);
      v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a6)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *a6 = strdup((const char *)p_p);
      }
      if (v14 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v134.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
      v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(std::string::size_type *)((char *)v134.__r_.__value_.__r.__words
                                + *(_QWORD *)(v134.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v134.__r_.__value_.__r.__words[2] = v16;
      v135[0] = MEMORY[0x24BEDB848] + 16;
      if (v136 < 0)
        operator delete((void *)v135[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x242621128](&v137);
      return EXRImageFromFile;
    }
    if (v142)
    {
      std::string::basic_string[abi:ne180100]<0>(&v134, "Loading multipart or DeepImage is not supported  in LoadEXR() API");
      v19 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
      if (a6)
      {
        if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = &v134;
        else
          v20 = (std::string *)v134.__r_.__value_.__r.__words[0];
        *a6 = strdup((const char *)v20);
      }
      if (v19 < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      return 4294967292;
    }
    EXRImageFromFile = ParseEXRHeaderFromFile((int8x8_t *)v146, (uint64_t)v141, __filename, a6);
    if ((_DWORD)EXRImageFromFile)
      goto LABEL_37;
    v21 = DWORD2(v153);
    if (SDWORD2(v153) >= 1)
    {
      v22 = 0;
      v23 = v153;
      v24 = v154;
      do
      {
        if (*(_DWORD *)(v23 + 4 * v22) == 1)
        {
          *(_DWORD *)(v24 + 4 * v22) = 2;
          v21 = DWORD2(v153);
        }
        ++v22;
      }
      while (v22 < v21);
    }
    EXRImageFromFile = LoadEXRImageFromFile((uint64_t)&v138, v146, __filename, a6);
    if ((_DWORD)EXRImageFromFile)
    {
LABEL_37:
      FreeEXRHeader((uint64_t)v146);
      return EXRImageFromFile;
    }
    memset(v133, 0, sizeof(v133));
    tinyexr::GetLayers((uint64_t)v146, v133);
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v124 = a2;
    v125 = a3;
    if (a5)
      std::string::basic_string[abi:ne180100]<0>(&v127, a5);
    else
      std::string::basic_string[abi:ne180100]<0>(&v127, (char *)&unk_23C62207F);
    v26 = v130;
    for (i = v131; i != v26; i -= 32)
    {
      if (*(i - 1) < 0)
        operator delete(*((void **)i - 3));
    }
    v131 = v26;
    if (SDWORD2(v153) >= 1)
    {
      v28 = 0;
      v126 = v11;
      while (1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)(*((_QWORD *)&v152 + 1) + 272 * v28));
        v29 = v129;
        if ((v129 & 0x80u) != 0)
          v29 = v128;
        if (!v29)
        {
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v39 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          {
            size = __p.__r_.__value_.__l.__size_;
            v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            v40 = (char *)&v39[-1].__r_.__value_.__r.__words[2] + 7;
            v41 = size;
            while (v41)
            {
              v42 = v40[v41--];
              if (v42 == 46)
              {
                if (v41 >= size)
                  goto LABEL_96;
                std::string::basic_string(&v134, &__p, v41 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v145);
                goto LABEL_93;
              }
            }
          }
          goto LABEL_96;
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v127, 46, (uint64_t)&v134);
        v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v31 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v32 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
        v33 = (void *)v134.__r_.__value_.__r.__words[0];
        v34 = (v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v134
            : (std::string *)v134.__r_.__value_.__r.__words[0];
        v35 = (v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v134.__r_.__value_.__r.__words[2])
            : v134.__r_.__value_.__l.__size_;
        if (!v35)
          break;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v30 = __p.__r_.__value_.__l.__size_;
        v36 = (char *)v31 + v30;
        if (v30 >= v35)
        {
          v44 = v34->__r_.__value_.__s.__data_[0];
          v45 = v31;
          do
          {
            v46 = v30 - v35;
            if (v46 == -1)
              break;
            v47 = (char *)memchr(v45, v44, v46 + 1);
            if (!v47)
              break;
            v37 = v47;
            if (!memcmp(v47, v34, v35))
              goto LABEL_82;
            v45 = (std::string *)(v37 + 1);
            v30 = v36 - (v37 + 1);
          }
          while (v30 >= v35);
          v37 = v36;
LABEL_82:
          v11 = v126;
        }
        else
        {
          v37 = (char *)v31 + v30;
        }
        if (v37 == v36)
          v43 = -1;
        else
          v43 = v37 - (char *)v31;
        if (v32 < 0)
          goto LABEL_87;
LABEL_88:
        if (v43 != -1)
        {
          if (!v43)
          {
            v48 = v129;
            if ((v129 & 0x80u) != 0)
              v48 = v128;
            std::string::basic_string(&v134, &__p, v48 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v145);
LABEL_93:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p = v134;
          }
LABEL_96:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v143, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v143 = __p;
          v134.__r_.__value_.__r.__words[0] = v28;
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v134.__r_.__value_.__r.__words[1], v143.__r_.__value_.__l.__data_, v143.__r_.__value_.__l.__size_);
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
          }
          else
          {
            *(_OWORD *)&v134.__r_.__value_.__r.__words[1] = *(_OWORD *)&v143.__r_.__value_.__l.__data_;
            v135[0] = *((_QWORD *)&v143.__r_.__value_.__l + 2);
          }
          v49 = v131;
          if ((unint64_t)v131 >= v132)
          {
            v52 = std::vector<tinyexr::LayerChannel>::__push_back_slow_path<tinyexr::LayerChannel const&>((uint64_t *)&v130, (uint64_t)&v134);
          }
          else
          {
            *(_QWORD *)v131 = v134.__r_.__value_.__r.__words[0];
            v50 = (std::string *)(v49 + 8);
            if (SHIBYTE(v135[0]) < 0)
            {
              std::string::__init_copy_ctor_external(v50, (const std::string::value_type *)v134.__r_.__value_.__l.__size_, v134.__r_.__value_.__r.__words[2]);
            }
            else
            {
              v51 = *(_OWORD *)&v134.__r_.__value_.__r.__words[1];
              *((_QWORD *)v49 + 3) = v135[0];
              *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
            }
            v52 = (uint64_t)(v49 + 32);
          }
          v131 = (char *)v52;
          if (SHIBYTE(v135[0]) < 0)
            operator delete((void *)v134.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if ((uint64_t)++v28 >= SDWORD2(v153))
          goto LABEL_114;
      }
      v43 = 0;
      if ((SHIBYTE(v134.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_88;
LABEL_87:
      operator delete(v33);
      goto LABEL_88;
    }
LABEL_114:
    if ((char)v129 < 0)
      operator delete(v127);
    v53 = v131 - v130;
    if (v131 == v130)
    {
      std::string::basic_string[abi:ne180100]<0>(&v134, "Layer Not Found");
      v87 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
      if (a6)
      {
        if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v88 = &v134;
        else
          v88 = (std::string *)v134.__r_.__value_.__r.__words[0];
        *a6 = strdup((const char *)v88);
      }
      if (v87 < 0)
        operator delete(v134.__r_.__value_.__l.__data_);
      EXRImageFromFile = 4294967283;
      goto LABEL_194;
    }
    v54 = v53 >> 5;
    if ((unint64_t)(v53 >> 5) >= 4)
      v54 = 4;
    if (v54)
    {
      v55 = -1;
      v56 = v130;
      v57 = -1;
      v58 = -1;
      v59 = -1;
      do
      {
        v60 = v56[31];
        v61 = (char)v60;
        if ((v60 & 0x80u) != 0)
          v60 = *((_QWORD *)v56 + 2);
        if (v60 == 1)
        {
          if (v61 >= 0)
            v62 = (unsigned __int8 *)(v56 + 8);
          else
            v62 = (unsigned __int8 *)*((_QWORD *)v56 + 1);
          v63 = *v62;
          if (v63 > 70)
          {
            if (v63 == 71)
            {
              v58 = *(_DWORD *)v56;
            }
            else if (v63 == 82)
            {
              v59 = *(_DWORD *)v56;
            }
          }
          else if (v63 == 65)
          {
            v55 = *(_DWORD *)v56;
          }
          else if (v63 == 66)
          {
            v57 = *(_DWORD *)v56;
          }
        }
        v56 += 32;
        --v54;
      }
      while (v54);
      if (v53 != 32)
      {
        if (v59 != -1)
        {
          if (v58 == -1)
          {
            std::string::basic_string[abi:ne180100]<0>(&v134, "G channel not found");
          }
          else
          {
            if (v57 != -1)
            {
              v64 = (float32x4_t *)malloc_type_malloc(16 * (int)v140 * (uint64_t)SDWORD1(v140), 0xE08ABC61uLL);
              *v11 = v64;
              if (DWORD2(v149))
              {
                v65 = HIDWORD(v140);
                if (SHIDWORD(v140) >= 1)
                {
                  v66 = 0;
                  v67 = v59;
                  v68 = v150;
                  v69 = HIDWORD(v149);
                  v70 = v58;
                  v71 = v57;
                  v72 = 4 * SHIDWORD(v149);
                  v73 = 4 * HIDWORD(v149);
                  v74 = 4 * HIDWORD(v149);
                  do
                  {
                    if ((int)v68 >= 1)
                    {
                      v75 = 0;
                      v76 = 0;
                      v77 = (_DWORD *)(v138 + 32 * v66);
                      v78 = (int)v140;
                      v79 = (uint64_t *)(v77 + 6);
                      v80 = 4 * v140;
                      do
                      {
                        if (v69 >= 1)
                        {
                          v81 = 0;
                          v82 = v77[1] * v68 + v76;
                          v83 = *v77 * v69;
                          v84 = v80 * v82 + v73 * *v77;
                          do
                          {
                            if (v83 < v78 && v82 < SDWORD1(v140))
                            {
                              v85 = *v79;
                              v64->i32[v84 + (int)v81] = *(_DWORD *)(*(_QWORD *)(*v79 + 8 * v67) + v75 + v81);
                              v64->i32[v84 + 1 + (int)v81] = *(_DWORD *)(*(_QWORD *)(v85 + 8 * v70) + v75 + v81);
                              v64->i32[v84 + 2 + (int)v81] = *(_DWORD *)(*(_QWORD *)(v85 + 8 * v71) + v75 + v81);
                              if (v55 == -1)
                                v86 = 1.0;
                              else
                                v86 = *(float *)(*(_QWORD *)(v85 + 8 * v55) + v75 + v81);
                              v64->f32[v84 + 3 + (int)v81] = v86;
                            }
                            v81 += 4;
                            ++v83;
                          }
                          while (v74 != v81);
                        }
                        ++v76;
                        v75 += v72;
                      }
                      while (v76 != v68);
                    }
                    ++v66;
                  }
                  while (v66 != v65);
                }
              }
              else if (DWORD1(v140) * (int)v140 >= 1)
              {
                v116 = 0;
                v117 = *((_QWORD *)&v139 + 1);
                v118 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * v59);
                v119 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * v58);
                v120 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * v57);
                v121 = 4 * (DWORD1(v140) * v140);
                v122 = &v64->f32[2];
                do
                {
                  *(v122 - 2) = *(float *)(v118 + v116);
                  *(v122 - 1) = *(float *)(v119 + v116);
                  *v122 = *(float *)(v120 + v116);
                  if (v55 == -1)
                    v123 = 1.0;
                  else
                    v123 = *(float *)(*(_QWORD *)(v117 + 8 * v55) + v116);
                  v122[1] = v123;
                  v116 += 4;
                  v122 += 4;
                }
                while (v121 != v116);
              }
LABEL_193:
              EXRImageFromFile = 0;
              v115 = DWORD1(v140);
              *v124 = v140;
              *v125 = v115;
LABEL_194:
              FreeEXRHeader((uint64_t)v146);
              FreeEXRImage((uint64_t)&v138);
              v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
              std::vector<tinyexr::LayerChannel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
              v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
              return EXRImageFromFile;
            }
            std::string::basic_string[abi:ne180100]<0>(&v134, "B channel not found");
          }
LABEL_182:
          v110 = SHIBYTE(v134.__r_.__value_.__r.__words[2]);
          if (a6)
          {
            if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v111 = &v134;
            else
              v111 = (std::string *)v134.__r_.__value_.__r.__words[0];
            *a6 = strdup((const char *)v111);
          }
          if (v110 < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          EXRImageFromFile = 4294967292;
          goto LABEL_194;
        }
LABEL_181:
        std::string::basic_string[abi:ne180100]<0>(&v134, "R channel not found");
        goto LABEL_182;
      }
    }
    else if (v53 != 32)
    {
      goto LABEL_181;
    }
    v89 = *(_QWORD *)v130;
    v90 = (float32x4_t *)malloc_type_malloc(16 * (int)v140 * (uint64_t)SDWORD1(v140), 0x7D263DD8uLL);
    *v11 = v90;
    if (DWORD2(v149))
    {
      v91 = HIDWORD(v140);
      if (SHIDWORD(v140) >= 1)
      {
        v92 = 0;
        v93 = (int)v89;
        v94 = v150;
        v95 = HIDWORD(v149);
        v96 = 4 * SHIDWORD(v149);
        v97 = 4 * HIDWORD(v149);
        v98 = 4 * HIDWORD(v149);
        do
        {
          if ((int)v94 >= 1)
          {
            v99 = 0;
            v100 = 0;
            v101 = v138 + 32 * v92;
            v102 = (int)v140;
            v103 = 4 * v140;
            do
            {
              if (v95 >= 1)
              {
                v104 = 0;
                v105 = *(_DWORD *)(v101 + 4) * v94 + v100;
                v106 = *(_DWORD *)v101 * v95;
                v107 = v103 * v105 + v97 * *(_DWORD *)v101;
                do
                {
                  if (v106 < v102 && v105 < SDWORD1(v140))
                  {
                    v108 = *(_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v93) + v99;
                    v109 = v107 + v104;
                    v90->i32[v109] = *(_DWORD *)(v108 + v104);
                    v90->i32[v109 + 1] = *(_DWORD *)(v108 + v104);
                    v90->i32[v109 + 2] = *(_DWORD *)(v108 + v104);
                    v90->i32[v109 + 3] = *(_DWORD *)(v108 + v104);
                  }
                  v104 += 4;
                  ++v106;
                }
                while (v98 != v104);
              }
              ++v100;
              v99 += v96;
            }
            while (v100 != v94);
          }
          ++v92;
        }
        while (v92 != v91);
      }
    }
    else
    {
      v112 = (DWORD1(v140) * v140);
      if ((int)v112 >= 1)
      {
        v113 = *(const float **)(*((_QWORD *)&v139 + 1) + 8 * (int)v89);
        do
        {
          v114 = vld1q_dup_f32(v113++);
          *v90++ = v114;
          --v112;
        }
        while (v112);
      }
    }
    goto LABEL_193;
  }
  std::string::basic_string[abi:ne180100]<0>(v146, "Invalid argument for LoadEXR()");
  v17 = SBYTE7(v147);
  if (a6)
  {
    if ((SBYTE7(v147) & 0x80u) == 0)
      v18 = v146;
    else
      v18 = (void **)v146[0];
    *a6 = strdup((const char *)v18);
  }
  if (v17 < 0)
    operator delete(v146[0]);
  return 4294967293;
}

void sub_23C4EFA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  a24 = (uint64_t)&a18;
  std::vector<tinyexr::LayerChannel>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (uint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

double InitEXRImage(_OWORD *a1)
{
  double result;

  if (a1)
  {
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_23C4EFC8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x242621128](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x242621128](a1 + 128);
  return a1;
}

uint64_t LoadEXRImageFromFile(uint64_t a1, _DWORD *a2, char *__filename, char **a4)
{
  FILE *v8;
  FILE *v9;
  size_t v10;
  std::string *v11;
  int v12;
  std::string *p_p;
  uint64_t EXRImageFromMemory;
  int v15;
  std::string *v16;
  std::string *v17;
  int v18;
  std::string *v19;
  std::string v21;
  std::string __p;

  if (a1)
  {
    v8 = fopen(__filename, "rb");
    if (v8)
    {
      v9 = v8;
      fseek(v8, 0, 2);
      v10 = MEMORY[0x2426213A4](v9);
      fseek(v9, 0, 0);
      if (v10 > 0xF)
      {
        std::vector<unsigned char>::vector(&__p, v10);
        if (fread(__p.__r_.__value_.__l.__data_, 1uLL, v10, v9) != v10)
          __assert_rtn("LoadEXRImageFromFile", "tinyexr.h", 12769, "ret == filesize");
        fclose(v9);
        if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0])
          std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
        EXRImageFromMemory = LoadEXRImageFromMemory(a1, a2, __p.__r_.__value_.__r.__words[0], v10, a4);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v21, __filename);
        v11 = std::string::insert(&v21, 0, "File size too short ", 0x14uLL);
        __p = *v11;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (a4)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *a4 = strdup((const char *)p_p);
        }
        if (v12 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        return 4294967291;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, __filename);
      v17 = std::string::insert(&v21, 0, "Cannot read file ", 0x11uLL);
      __p = *v17;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a4)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &__p;
        else
          v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *a4 = strdup((const char *)v19);
      }
      if (v18 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      return 4294967289;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid argument for LoadEXRImageFromFile");
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (a4)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &__p;
      else
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *a4 = strdup((const char *)v16);
    }
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 4294967293;
  }
  return EXRImageFromMemory;
}

void sub_23C4EFFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t FreeEXRImage(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t j;
  uint64_t v12;
  void *v13;
  void *v14;

  if (!a1)
    return 4294967293;
  if (*(_QWORD *)(a1 + 8))
  {
    FreeEXRImage();
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
      MEMORY[0x2426211B8](v2, 0x10A0C404FE9ED91);
  }
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (v5)
      {
        v6 = *(void **)(v5 + 8 * i);
        if (v6)
        {
          free(v6);
          v3 = *(_DWORD *)(a1 + 40);
        }
      }
    }
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
    free(v7);
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(int *)(a1 + 44) >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(_DWORD *)(a1 + 40);
        if (v10 >= 1)
        {
          for (j = 0; j < v10; ++j)
          {
            v12 = *(_QWORD *)(*(_QWORD *)a1 + 32 * v9 + 24);
            if (v12)
            {
              v13 = *(void **)(v12 + 8 * j);
              if (v13)
              {
                free(v13);
                v10 = *(_DWORD *)(a1 + 40);
              }
            }
          }
        }
        v14 = *(void **)(*(_QWORD *)a1 + 32 * v9 + 24);
        if (v14)
          free(v14);
        ++v9;
      }
      while (v9 < *(int *)(a1 + 44));
      result = *(_QWORD *)a1;
    }
    free((void *)result);
    return 0;
  }
  return result;
}

uint64_t IsEXR(char *__filename)
{
  _BYTE v2[20];

  return ParseEXRVersionFromFile((uint64_t)v2, __filename);
}

uint64_t ParseEXRHeaderFromMemory(int8x8_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  int v6;
  void **v7;
  uint64_t v8;
  int v9;
  void **v10;
  char *v13;
  size_t v14;
  uint64_t v15;
  std::string::size_type size;
  std::string *v17;
  std::string v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a1 && a3)
  {
    if (a4 > 7)
    {
      v21 = 0u;
      v22 = 0u;
      v13 = (char *)(a3 + 8);
      v14 = a4 - 8;
      *(_OWORD *)__p = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      tinyexr::HeaderInfo::clear((tinyexr::HeaderInfo *)__p);
      memset(&v19, 0, sizeof(v19));
      v15 = tinyexr::ParseEXRHeader((uint64_t)__p, 0, (_DWORD *)a2, &v19, v13, v14);
      v8 = v15;
      if (a5 && (_DWORD)v15)
      {
        size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v19.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v19;
          else
            v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
          *a5 = strdup((const char *)v17);
        }
      }
      tinyexr::ConvertHeader((uint64_t)a1, (uint64_t *)__p);
      a1[10] = vbic_s8((int8x8_t)0x100000001, (int8x8_t)vceqz_s32(*(int32x2_t *)(a2 + 12)));
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25) < 0)
        operator delete(*((void **)&v24 + 1));
      if (SBYTE7(v24) < 0)
        operator delete((void *)v23);
      if (*((_QWORD *)&v21 + 1))
      {
        *(_QWORD *)&v22 = *((_QWORD *)&v21 + 1);
        operator delete(*((void **)&v21 + 1));
      }
      v19.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Insufficient header/data size.\n");
      v6 = SBYTE7(v21);
      if (a5)
      {
        if ((SBYTE7(v21) & 0x80u) == 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *a5 = strdup((const char *)v7);
      }
      if (v6 < 0)
        operator delete(__p[0]);
      return 4294967292;
    }
  }
  else
  {
    v9 = SBYTE7(v21);
    if (a5)
    {
      if ((SBYTE7(v21) & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *a5 = strdup((const char *)v10);
    }
    if (v9 < 0)
      operator delete(__p[0]);
    return 4294967293;
  }
  return v8;
}

void sub_23C4F02EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0)
    operator delete(__p);
  tinyexr::HeaderInfo::~HeaderInfo(&a16);
  _Unwind_Resume(a1);
}

void tinyexr::HeaderInfo::clear(tinyexr::HeaderInfo *this)
{
  std::vector<tinyexr::ChannelInfo>::__clear[abi:ne180100]((uint64_t *)this);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  if (*((char *)this + 159) < 0)
  {
    **((_BYTE **)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
  }
  else
  {
    *((_BYTE *)this + 136) = 0;
    *((_BYTE *)this + 159) = 0;
  }
  if (*((char *)this + 183) < 0)
  {
    **((_BYTE **)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
  }
  else
  {
    *((_BYTE *)this + 160) = 0;
    *((_BYTE *)this + 183) = 0;
  }
}

uint64_t tinyexr::ParseEXRHeader(uint64_t a1, _BYTE *a2, _DWORD *a3, std::string *this, char *__s1, size_t __n)
{
  uint64_t v6;
  char *v7;
  uint64_t v11;
  uint64_t v17;
  size_t v18;
  std::string *v19;
  void **v20;
  void *v21;
  char v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  _DWORD *v32;
  _DWORD *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  _QWORD *v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  _QWORD *v48;
  const std::locale::facet *v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  _BOOL4 v54;
  std::string::size_type size;
  std::string *v56;
  std::string::size_type v57;
  uint64_t v58;
  std::string *v60;
  std::string *v61;
  int v62;
  char v63;
  size_t v64;
  char __na;
  size_t __nb;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *__p;
  _BYTE *v73;
  uint64_t v74;
  void *v75[2];
  uint64_t v76;
  std::string v77;
  char __dst[16];
  uint64_t v79;
  _QWORD v80[10];
  char v81;
  _BYTE v82[128];
  char v83[256];
  void *v84;
  int v85;
  uint64_t v86;

  v7 = __s1;
  v86 = *MEMORY[0x24BDAC8D0];
  if (a2)
    *a2 = 0;
  if (!__n || !a3[4] || *__s1)
  {
    if (*(char *)(a1 + 159) < 0)
    {
      **(_BYTE **)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 136) = 0;
      *(_BYTE *)(a1 + 159) = 0;
    }
    v60 = (std::string *)(a1 + 160);
    v61 = (std::string *)(a1 + 136);
    if (*(char *)(a1 + 183) < 0)
    {
      **(_BYTE **)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 160) = 0;
      *(_BYTE *)(a1 + 183) = 0;
    }
    v63 = 0;
    __na = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v11 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 76) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)(a1 + 92) = _D0;
    v62 = __n;
    v17 = 1024;
    *(_DWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 108) = -1;
    *(_QWORD *)(a1 + 116) = -1;
    *(_QWORD *)(a1 + 32) = v11;
    v18 = __n;
    while (1)
    {
      if (!v18)
      {
        if (this)
          std::string::append(this, "Insufficient data size for attributes.\n", 0x27uLL);
        return 4294967292;
      }
      if (!*v7)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__dst);
        LODWORD(v18) = v18 - 1;
LABEL_100:
        if ((v70 & 0x100000000) == 0)
        {
          v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"compression\" attribute not found in the header.", 48);
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
          v35 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v70 & 1) == 0)
        {
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"channels\" attribute not found in the header.", 45);
          std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(_QWORD *)(*v36 - 24)));
          v37 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v68 & 0x100000000) == 0)
        {
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"lineOrder\" attribute not found in the header.", 46);
          std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
          v39 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v69 & 1) == 0)
        {
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"displayWindow\" attribute not found in the header.", 50);
          std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
          v41 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v69 & 0x100000000) == 0)
        {
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"dataWindow\" attribute not found in the header or invalid.", 58);
          std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(_QWORD *)(*v42 - 24)));
          v43 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v68 & 1) == 0)
        {
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"pixelAspectRatio\" attribute not found in the header.", 53);
          std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(_QWORD *)(*v44 - 24)));
          v45 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v67 & 1) == 0)
        {
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"screenWindowWidth\" attribute not found in the header.", 54);
          std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
          v47 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if ((v67 & 0x100000000) == 0)
        {
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"screenWindowCenter\" attribute not found in the header.", 55);
          std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
          v49 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v49->__vftable[2].~facet_0)(v49, 10);
          std::locale::~locale((std::locale *)&v77);
          std::ostream::put();
          std::ostream::flush();
        }
        if (a3[4] || a3[3])
        {
          if ((__na & 1) == 0)
          {
            v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"name\" attribute not found in the header.", 41);
            std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
            v51 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
            std::locale::~locale((std::locale *)&v77);
            std::ostream::put();
            std::ostream::flush();
          }
          if ((v63 & 1) == 0)
          {
            v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"\"type\" attribute not found in the header.", 41);
            std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(*v52 - 24)));
            v53 = std::locale::use_facet((const std::locale *)&v77, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
            std::locale::~locale((std::locale *)&v77);
            std::ostream::put();
            std::ostream::flush();
          }
        }
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v80, &v77);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        {
          size = v77.__r_.__value_.__l.__size_;
          operator delete(v77.__r_.__value_.__l.__data_);
          v54 = size == 0;
          if (size)
            v6 = 4294967287;
          else
            v6 = v6;
          if (!size)
            goto LABEL_144;
        }
        else
        {
          v54 = SHIBYTE(v77.__r_.__value_.__r.__words[2]) == 0;
          if (*((_BYTE *)&v77.__r_.__value_.__s + 23))
            v6 = 4294967287;
          else
            v6 = v6;
          if (!*((_BYTE *)&v77.__r_.__value_.__s + 23))
          {
LABEL_144:
            *(_QWORD *)__dst = *MEMORY[0x24BEDB7F0];
            v58 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
            *(_QWORD *)&__dst[*(_QWORD *)(*(_QWORD *)__dst - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
            v79 = v58;
            v80[0] = MEMORY[0x24BEDB848] + 16;
            if (v81 < 0)
              operator delete((void *)v80[8]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x242621128](v82);
            if (v54)
            {
              v6 = 0;
              *(_DWORD *)(a1 + 124) = v62 - v18;
            }
            return v6;
          }
        }
        if (this)
        {
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v80, &v77);
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v77;
          else
            v56 = (std::string *)v77.__r_.__value_.__r.__words[0];
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v57 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
          else
            v57 = v77.__r_.__value_.__l.__size_;
          std::string::append(this, (const std::string::value_type *)v56, v57);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          v54 = 0;
          v6 = 4294967287;
        }
        goto LABEL_144;
      }
      memset(&v77, 0, sizeof(v77));
      v75[0] = 0;
      v75[1] = 0;
      v76 = 0;
      __p = 0;
      v73 = 0;
      v74 = 0;
      v71 = 0;
      if ((tinyexr::ReadAttribute((uint64_t)&v77, (uint64_t)v75, (unint64_t *)&__p, &v71, v7, v18) & 1) == 0)
        break;
      v7 += v71;
      v18 -= v71;
      if ((a3[1] || a3[4] || a3[3]) && !std::string::compare(&v77, "tiles"))
      {
        if (v73 - (_BYTE *)__p != 9)
          __assert_rtn("ParseEXRHeader", "tinyexr.h", 10706, "data.size() == 9");
        v23 = *(_DWORD *)__p;
        if ((*(_DWORD *)__p & 0x80000000) != 0 || (v24 = *((_DWORD *)__p + 1), v24 < 0))
        {
          if (this)
            std::string::__assign_external(this, "Tile sizes were invalid.", 0x18uLL);
          goto LABEL_77;
        }
        v25 = *((unsigned __int8 *)__p + 8);
        *(_DWORD *)(a1 + 112) = v24;
        *(_DWORD *)(a1 + 116) = v25 & 3;
        *(_DWORD *)(a1 + 120) = (v25 >> 4) & 1;
        v22 = 1;
        *(_DWORD *)(a1 + 104) = 1;
        *(_DWORD *)(a1 + 108) = v23;
      }
      else if (!std::string::compare(&v77, "compression"))
      {
        v26 = *(unsigned __int8 *)__p;
        if (v26 >= 5)
        {
          if (v26 == 128)
          {
            if (this)
            {
              v30 = "ZFP compression is not supported.";
              v31 = 33;
              goto LABEL_76;
            }
          }
          else if (this)
          {
            v30 = "Unknown compression type.";
            v31 = 25;
LABEL_76:
            std::string::__assign_external(this, v30, v31);
          }
LABEL_77:
          v22 = 0;
          v6 = 4294967288;
          goto LABEL_43;
        }
        *(_DWORD *)(a1 + 128) = v26;
        v22 = 1;
        BYTE4(v70) = 1;
      }
      else
      {
        if (!std::string::compare(&v77, "channels"))
        {
          if (tinyexr::ReadChannelInfo((uint64_t *)a1, (uint64_t)&__p))
          {
            if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
            {
              v22 = 1;
              LOBYTE(v70) = 1;
              goto LABEL_43;
            }
            if (this)
            {
              v28 = "# of channels is zero.\n";
              v29 = 23;
LABEL_80:
              std::string::append(this, v28, v29);
            }
          }
          else if (this)
          {
            v28 = "Failed to parse channel info.\n";
            v29 = 30;
            goto LABEL_80;
          }
LABEL_42:
          v22 = 0;
          v6 = 4294967292;
          goto LABEL_43;
        }
        if (!std::string::compare(&v77, "dataWindow"))
        {
          v27 = __p;
          if ((unint64_t)(v73 - (_BYTE *)__p) < 0x10)
            goto LABEL_95;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)__p;
          *(_DWORD *)(a1 + 52) = v27[1];
          *(_DWORD *)(a1 + 56) = v27[2];
          *(_DWORD *)(a1 + 60) = v27[3];
          v22 = 1;
          BYTE4(v69) = 1;
        }
        else if (!std::string::compare(&v77, "displayWindow"))
        {
          v32 = __p;
          if ((unint64_t)(v73 - (_BYTE *)__p) < 0x10)
            goto LABEL_95;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)__p;
          *(_DWORD *)(a1 + 72) = v32[1];
          *(_DWORD *)(a1 + 76) = v32[2];
          *(_DWORD *)(a1 + 80) = v32[3];
          v22 = 1;
          LOBYTE(v69) = 1;
        }
        else if (!std::string::compare(&v77, "lineOrder"))
        {
          if (v73 == __p)
            goto LABEL_95;
          *(_DWORD *)(a1 + 64) = *(unsigned __int8 *)__p;
          v22 = 1;
          BYTE4(v68) = 1;
        }
        else if (!std::string::compare(&v77, "pixelAspectRatio"))
        {
          if ((unint64_t)(v73 - (_BYTE *)__p) < 4)
            goto LABEL_95;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)__p;
          v22 = 1;
          LOBYTE(v68) = 1;
        }
        else if (!std::string::compare(&v77, "screenWindowCenter"))
        {
          v33 = __p;
          if ((unint64_t)(v73 - (_BYTE *)__p) < 8)
            goto LABEL_95;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)__p;
          *(_DWORD *)(a1 + 88) = v33[1];
          v22 = 1;
          BYTE4(v67) = 1;
        }
        else if (!std::string::compare(&v77, "screenWindowWidth"))
        {
          if ((unint64_t)(v73 - (_BYTE *)__p) < 4)
            goto LABEL_95;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)__p;
          v22 = 1;
          LOBYTE(v67) = 1;
        }
        else
        {
          if (!std::string::compare(&v77, "chunkCount"))
          {
            if ((unint64_t)(v73 - (_BYTE *)__p) >= 4)
              *(_DWORD *)(a1 + 100) = *(_DWORD *)__p;
            goto LABEL_95;
          }
          if (!std::string::compare(&v77, "name"))
          {
            if (__p == v73 || !*(_BYTE *)__p)
              goto LABEL_95;
            __dst[0] = 0;
            std::vector<unsigned char>::push_back[abi:ne180100]((unint64_t *)&__p, __dst);
            __nb = strlen((const char *)__p);
            std::string::resize(v61, __nb, 0);
            std::string::__assign_external(v61, (const std::string::value_type *)__p, __nb);
            v22 = 1;
            __na = 1;
          }
          else
          {
            if (std::string::compare(&v77, "type"))
            {
              if ((unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4)) <= 0x7F)
              {
                if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v19 = &v77;
                else
                  v19 = (std::string *)v77.__r_.__value_.__r.__words[0];
                strncpy(__dst, (const char *)v19, 0xFFuLL);
                if (v76 >= 0)
                  v20 = v75;
                else
                  v20 = (void **)v75[0];
                strncpy(v83, (const char *)v20, 0xFFuLL);
                v82[127] = 0;
                v83[255] = 0;
                v85 = (_DWORD)v73 - (_DWORD)__p;
                v21 = malloc_type_malloc(v73 - (_BYTE *)__p, 0x7B0921C8uLL);
                v84 = v21;
                if (v73 == __p)
                  std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
                memcpy(v21, __p, v73 - (_BYTE *)__p);
                std::vector<_EXRAttribute>::push_back[abi:ne180100]((void **)(a1 + 24), __dst);
              }
LABEL_95:
              v22 = 1;
              goto LABEL_43;
            }
            if (__p == v73 || !*(_BYTE *)__p)
              goto LABEL_95;
            __dst[0] = 0;
            std::vector<unsigned char>::push_back[abi:ne180100]((unint64_t *)&__p, __dst);
            v64 = strlen((const char *)__p);
            std::string::resize(v60, v64, 0);
            std::string::__assign_external(v60, (const std::string::value_type *)__p, v64);
            v22 = 1;
            v63 = 1;
          }
        }
      }
LABEL_43:
      if (__p)
      {
        v73 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v76) < 0)
        operator delete(v75[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((v22 & 1) == 0)
        return v6;
      if (!--v17)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__dst);
        goto LABEL_100;
      }
    }
    if (this)
      std::string::append(this, "Failed to read attribute.\n", 0x1AuLL);
    goto LABEL_42;
  }
  v6 = 0;
  if (a2)
    *a2 = 1;
  return v6;
}

void sub_23C4F10B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::locale a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (__p)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29.__locale_);
  _Unwind_Resume(exception_object);
}

_DWORD *tinyexr::ConvertHeader(uint64_t a1, uint64_t *a2)
{
  const char *v4;
  void *v5;
  size_t v6;
  size_t v7;
  int v8;
  size_t v9;
  const void **v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  size_t v28;
  _DWORD *v29;
  unint64_t v30;
  int *v31;
  int v32;
  unint64_t v33;
  size_t v34;
  _DWORD *result;
  unint64_t v36;
  int *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _OWORD *v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  __int128 v73;

  *(_DWORD *)a1 = *((_DWORD *)a2 + 24);
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 21);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 22);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 23);
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 25);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)((char *)a2 + 68);
  *(_OWORD *)(a1 + 8) = *((_OWORD *)a2 + 3);
  *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 16);
  *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 + 32);
  v73 = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 56) = v73;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 30);
  v4 = (const char *)(a2 + 17);
  if (*((char *)a2 + 159) < 0)
  {
    v4 = *(const char **)v4;
    *(_OWORD *)(a1 + 136) = 0u;
    v5 = (void *)(a1 + 136);
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    if (!v4)
      goto LABEL_9;
  }
  else
  {
    *(_OWORD *)(a1 + 136) = 0u;
    v5 = (void *)(a1 + 136);
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
  }
  v6 = strlen(v4);
  if (v6 >= 0xFF)
    v7 = 255;
  else
    v7 = v6;
  if (v7)
    memcpy(v5, v4, v7);
LABEL_9:
  v8 = *((char *)a2 + 183);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)a2 + 183);
  else
    v9 = a2[21];
  v10 = (const void **)(a2 + 20);
  switch(v9)
  {
    case 8uLL:
      if (v8 >= 0)
        v11 = a2 + 20;
      else
        v11 = *v10;
      if (memcmp(v11, "deeptile", v9))
        goto LABEL_67;
      *(_DWORD *)(a1 + 80) = 1;
      if (!(_DWORD)v73)
        tinyexr::ConvertHeader();
      return result;
    case 9uLL:
    case 0xBuLL:
      goto LABEL_67;
    case 0xAuLL:
      if (v8 >= 0)
        v12 = a2 + 20;
      else
        v12 = *v10;
      if (memcmp(v12, "tiledimage", v9))
        goto LABEL_67;
      if (!(_DWORD)v73)
        tinyexr::ConvertHeader();
      return result;
    case 0xCuLL:
      if (v8 >= 0)
        v13 = a2 + 20;
      else
        v13 = *v10;
      if (memcmp(v13, "deepscanline", v9))
        goto LABEL_67;
      *(_DWORD *)(a1 + 80) = 1;
      if ((_DWORD)v73)
        tinyexr::ConvertHeader();
      return result;
    case 0xDuLL:
      if (v8 >= 0)
        v14 = a2 + 20;
      else
        v14 = (uint64_t *)*v10;
      v15 = *v14;
      v16 = *(uint64_t *)((char *)v14 + 5);
      if (v15 != 0x656E696C6E616373 || v16 != 0x6567616D69656E69)
        goto LABEL_67;
      if ((_DWORD)v73)
        tinyexr::ConvertHeader();
      return result;
    default:
      if (v9)
LABEL_67:
        tinyexr::ConvertHeader();
      return result;
  }
  v18 = -858993459 * ((a2[1] - *a2) >> 3);
  *(_DWORD *)(a1 + 120) = v18;
  v19 = (char *)malloc_type_malloc(272 * v18, 0x1000040881B329AuLL);
  *(_QWORD *)(a1 + 104) = v19;
  if (*(_DWORD *)(a1 + 120))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = *a2;
    do
    {
      v24 = (const char *)(v23 + v20);
      if (*(char *)(v23 + v20 + 23) < 0)
        v24 = *(const char **)v24;
      strncpy(&v19[v21], v24, 0xFFuLL);
      *(_BYTE *)(*(_QWORD *)(a1 + 104) + v21 + 255) = 0;
      v23 = *a2;
      v25 = *a2 + v20;
      v19 = *(char **)(a1 + 104);
      v26 = &v19[v21];
      v26[268] = *(_BYTE *)(v25 + 36);
      *((_QWORD *)v26 + 32) = *(_QWORD *)(v25 + 24);
      *((_DWORD *)v26 + 66) = *(_DWORD *)(v25 + 32);
      ++v22;
      v27 = *(int *)(a1 + 120);
      v21 += 272;
      v20 += 40;
    }
    while (v22 < v27);
    v28 = 4 * v27;
  }
  else
  {
    v28 = 0;
  }
  v29 = malloc_type_malloc(v28, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 112) = v29;
  if (*(_DWORD *)(a1 + 120))
  {
    v30 = 0;
    v31 = (int *)(*a2 + 24);
    do
    {
      v32 = *v31;
      v31 += 10;
      v29[v30++] = v32;
      v33 = *(int *)(a1 + 120);
    }
    while (v30 < v33);
    v34 = 4 * v33;
  }
  else
  {
    v34 = 0;
  }
  result = malloc_type_malloc(v34, 0x100004052888210uLL);
  *(_QWORD *)(a1 + 128) = result;
  if (*(_DWORD *)(a1 + 120))
  {
    v36 = 0;
    v37 = (int *)(*a2 + 24);
    do
    {
      v38 = *v37;
      v37 += 10;
      result[v36++] = v38;
    }
    while (v36 < *(int *)(a1 + 120));
  }
  v39 = 0xF83E0F83E0F83E1 * ((a2[4] - a2[3]) >> 4);
  *(_DWORD *)(a1 + 92) = v39;
  if ((int)v39 <= 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  else
  {
    if (v39 >= 0x81)
    {
      LODWORD(v39) = 128;
      *(_DWORD *)(a1 + 92) = 128;
    }
    result = malloc_type_malloc(528 * v39, 0x10100400824DDA7uLL);
    *(_QWORD *)(a1 + 96) = result;
    v40 = a2[3];
    if (a2[4] != v40)
    {
      v41 = 0;
      v42 = 0;
      do
      {
        v43 = &result[v41 / 4];
        v44 = (__int128 *)(v40 + v41);
        v45 = *v44;
        v46 = v44[1];
        v47 = v44[3];
        v43[2] = v44[2];
        v43[3] = v47;
        *v43 = v45;
        v43[1] = v46;
        v48 = v44[4];
        v49 = v44[5];
        v50 = v44[7];
        v43[6] = v44[6];
        v43[7] = v50;
        v43[4] = v48;
        v43[5] = v49;
        v51 = v44[8];
        v52 = v44[9];
        v53 = v44[11];
        v43[10] = v44[10];
        v43[11] = v53;
        v43[8] = v51;
        v43[9] = v52;
        v54 = v44[12];
        v55 = v44[13];
        v56 = v44[15];
        v43[14] = v44[14];
        v43[15] = v56;
        v43[12] = v54;
        v43[13] = v55;
        v57 = (_OWORD *)(*(_QWORD *)(a1 + 96) + v41);
        v58 = (_OWORD *)(a2[3] + v41);
        v59 = v58[23];
        v61 = v58[20];
        v60 = v58[21];
        v57[22] = v58[22];
        v57[23] = v59;
        v57[20] = v61;
        v57[21] = v60;
        v62 = v58[27];
        v64 = v58[24];
        v63 = v58[25];
        v57[26] = v58[26];
        v57[27] = v62;
        v57[24] = v64;
        v57[25] = v63;
        v65 = v58[31];
        v67 = v58[28];
        v66 = v58[29];
        v57[30] = v58[30];
        v57[31] = v65;
        v57[28] = v67;
        v57[29] = v66;
        v68 = v58[16];
        v69 = v58[17];
        v70 = v58[19];
        v57[18] = v58[18];
        v57[19] = v70;
        v57[16] = v68;
        v57[17] = v69;
        v40 = a2[3];
        v71 = a2[4];
        result = *(_DWORD **)(a1 + 96);
        v72 = (char *)&result[v41 / 4];
        *((_DWORD *)v72 + 130) = *(_DWORD *)(v40 + v41 + 520);
        *((_QWORD *)v72 + 64) = *(_QWORD *)(v40 + v41 + 512);
        ++v42;
        v41 += 528;
      }
      while (v42 < 0xF83E0F83E0F83E1 * ((v71 - v40) >> 4));
    }
  }
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 31);
  return result;
}

void tinyexr::HeaderInfo::~HeaderInfo(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  v3 = this;
  std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t LoadEXRFromMemory(float32x4_t **a1, _DWORD *a2, _DWORD *a3, unint64_t a4, unint64_t a5, char **a6)
{
  uint64_t v12;
  uint64_t EXRImageFromMemory;
  _QWORD *v14;
  int v15;
  void **v16;
  uint64_t v17;
  int v18;
  void **v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  int v29;
  float32x4_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  float32x4_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  float v69;
  int v70;
  void **v71;
  uint64_t v72;
  const float *v73;
  float32x4_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  float v83;
  int v84;
  int v85;
  void *__p[2];
  char v87;
  void *v88[2];
  uint64_t v89;
  _QWORD v90[10];
  char v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[23];
  void *v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char *__s1[2];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  if (a1 && a4)
  {
    v121 = 0;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    *(_OWORD *)__s1 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    *(_OWORD *)v97 = 0u;
    v98 = 0u;
    v12 = ParseEXRVersionFromMemory((uint64_t)v96, a4, a5);
    if ((_DWORD)v12)
    {
      EXRImageFromMemory = v12;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"Failed to parse EXR version. code(", 34);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v90, __p);
      v15 = v87;
      if (a6)
      {
        if (v87 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        *a6 = strdup((const char *)v16);
      }
      if (v15 < 0)
        operator delete(__p[0]);
      v88[0] = *(void **)MEMORY[0x24BEDB7F0];
      v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(void **)((char *)v88 + *((_QWORD *)v88[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
      v89 = v17;
      v90[0] = MEMORY[0x24BEDB848] + 16;
      if (v91 < 0)
        operator delete((void *)v90[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x242621128](&v92);
      return EXRImageFromMemory;
    }
    EXRImageFromMemory = ParseEXRHeaderFromMemory((int8x8_t *)v97, (uint64_t)v96, a4, a5, a6);
    if (!(_DWORD)EXRImageFromMemory)
    {
      v21 = DWORD2(v104);
      if (SDWORD2(v104) >= 1)
      {
        v22 = 0;
        v23 = v104;
        v24 = v105;
        do
        {
          if (*(_DWORD *)(v23 + 4 * v22) == 1)
          {
            *(_DWORD *)(v24 + 4 * v22) = 2;
            v21 = DWORD2(v104);
          }
          ++v22;
        }
        while (v22 < v21);
      }
      v94 = 0u;
      v95 = 0u;
      v93 = 0u;
      EXRImageFromMemory = LoadEXRImageFromMemory((uint64_t)&v93, v97, a4, a5, a6);
      if (!(_DWORD)EXRImageFromMemory)
      {
        v25 = DWORD2(v104);
        if (SDWORD2(v104) < 1)
          goto LABEL_77;
        v26 = 0;
        v27 = __s1[1];
        v28 = -1;
        v84 = -1;
        v85 = -1;
        v29 = -1;
        do
        {
          if (!strcmp(v27, "R"))
          {
            v29 = v26;
          }
          else if (!strcmp(v27, "G"))
          {
            v85 = v26;
          }
          else if (!strcmp(v27, "B"))
          {
            v84 = v26;
          }
          else if (!strcmp(v27, "A"))
          {
            v28 = v26;
          }
          ++v26;
          v27 += 272;
        }
        while (v25 != v26);
        if ((_DWORD)v25 == 1)
        {
          v30 = (float32x4_t *)malloc_type_malloc(16 * (int)v95 * (uint64_t)SDWORD1(v95), 0x30950EE1uLL);
          *a1 = v30;
          if (DWORD2(v100))
          {
            v31 = HIDWORD(v95);
            if (SHIDWORD(v95) >= 1)
            {
              v32 = 0;
              v33 = v101;
              v34 = HIDWORD(v100);
              v35 = 4 * SHIDWORD(v100);
              v36 = 4 * HIDWORD(v100);
              v37 = 4 * HIDWORD(v100);
              do
              {
                if ((int)v33 >= 1)
                {
                  v38 = 0;
                  v39 = 0;
                  v40 = v93 + 32 * v32;
                  v41 = (int)v95;
                  v42 = 4 * v95;
                  do
                  {
                    if (v34 >= 1)
                    {
                      v43 = 0;
                      v44 = *(_DWORD *)(v40 + 4) * v33 + v39;
                      v45 = *(_DWORD *)v40 * v34;
                      v46 = v42 * v44 + v36 * *(_DWORD *)v40;
                      do
                      {
                        if (v45 < v41 && v44 < SDWORD1(v95))
                        {
                          v47 = **(_QWORD **)(v40 + 24) + v38;
                          v48 = v46 + v43;
                          v30->i32[v48] = *(_DWORD *)(v47 + v43);
                          v30->i32[v48 + 1] = *(_DWORD *)(v47 + v43);
                          v30->i32[v48 + 2] = *(_DWORD *)(v47 + v43);
                          v30->i32[v48 + 3] = *(_DWORD *)(v47 + v43);
                        }
                        v43 += 4;
                        ++v45;
                      }
                      while (v37 != v43);
                    }
                    ++v39;
                    v38 += v35;
                  }
                  while (v39 != v33);
                }
                ++v32;
              }
              while (v32 != v31);
            }
          }
          else
          {
            v72 = (DWORD1(v95) * v95);
            if ((int)v72 >= 1)
            {
              v73 = (const float *)**((_QWORD **)&v94 + 1);
              do
              {
                v74 = vld1q_dup_f32(v73++);
                *v30++ = v74;
                --v72;
              }
              while (v72);
            }
          }
LABEL_89:
          v75 = DWORD1(v95);
          *a2 = v95;
          *a3 = v75;
          FreeEXRHeader((uint64_t)v97);
          FreeEXRImage((uint64_t)&v93);
          return 0;
        }
        if (v29 == -1)
        {
LABEL_77:
          std::string::basic_string[abi:ne180100]<0>(v88, "R channel not found");
        }
        else if (v85 == -1)
        {
          std::string::basic_string[abi:ne180100]<0>(v88, "G channel not found");
        }
        else
        {
          if (v84 != -1)
          {
            v49 = (float32x4_t *)malloc_type_malloc(16 * (int)v95 * (uint64_t)SDWORD1(v95), 0xF573E9BFuLL);
            *a1 = v49;
            if (DWORD2(v100))
            {
              v50 = HIDWORD(v95);
              if (SHIDWORD(v95) >= 1)
              {
                v51 = 0;
                v52 = v29;
                v53 = v101;
                v54 = HIDWORD(v100);
                v55 = 4 * SHIDWORD(v100);
                v56 = 4 * HIDWORD(v100);
                v57 = 4 * HIDWORD(v100);
                do
                {
                  if ((int)v53 >= 1)
                  {
                    v58 = 0;
                    v59 = 0;
                    v60 = (_DWORD *)(v93 + 32 * v51);
                    v61 = (int)v95;
                    v62 = (uint64_t *)(v60 + 6);
                    v63 = 4 * v95;
                    do
                    {
                      if (v54 >= 1)
                      {
                        v64 = 0;
                        v65 = v60[1] * v53 + v59;
                        v66 = *v60 * v54;
                        v67 = v63 * v65 + v56 * *v60;
                        do
                        {
                          if (v66 < v61 && v65 < SDWORD1(v95))
                          {
                            v68 = *v62;
                            v49->i32[v67 + (int)v64] = *(_DWORD *)(*(_QWORD *)(*v62 + 8 * v52) + v58 + v64);
                            v49->i32[v67 + 1 + (int)v64] = *(_DWORD *)(*(_QWORD *)(v68 + 8 * v85) + v58 + v64);
                            v49->i32[v67 + 2 + (int)v64] = *(_DWORD *)(*(_QWORD *)(v68 + 8 * v84) + v58 + v64);
                            if (v28 == -1)
                              v69 = 1.0;
                            else
                              v69 = *(float *)(*(_QWORD *)(v68 + 8 * v28) + v58 + v64);
                            v49->f32[v67 + 3 + (int)v64] = v69;
                          }
                          v64 += 4;
                          ++v66;
                        }
                        while (v57 != v64);
                      }
                      ++v59;
                      v58 += v55;
                    }
                    while (v59 != v53);
                  }
                  ++v51;
                }
                while (v51 != v50);
              }
            }
            else if (DWORD1(v95) * (int)v95 >= 1)
            {
              v76 = 0;
              v77 = *((_QWORD *)&v94 + 1);
              v78 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * v29);
              v79 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * v85);
              v80 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * v84);
              v81 = 4 * (DWORD1(v95) * v95);
              v82 = &v49->f32[2];
              do
              {
                *(v82 - 2) = *(float *)(v78 + v76);
                *(v82 - 1) = *(float *)(v79 + v76);
                *v82 = *(float *)(v80 + v76);
                if (v28 == -1)
                  v83 = 1.0;
                else
                  v83 = *(float *)(*(_QWORD *)(v77 + 8 * v28) + v76);
                v82[1] = v83;
                v76 += 4;
                v82 += 4;
              }
              while (v81 != v76);
            }
            goto LABEL_89;
          }
          std::string::basic_string[abi:ne180100]<0>(v88, "B channel not found");
        }
        v70 = SHIBYTE(v89);
        if (a6)
        {
          if (v89 >= 0)
            v71 = v88;
          else
            v71 = (void **)v88[0];
          *a6 = strdup((const char *)v71);
        }
        if (v70 < 0)
          operator delete(v88[0]);
        return 4294967292;
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v97, "Invalid argument for LoadEXRFromMemory");
    v18 = SBYTE7(v98);
    if (a6)
    {
      if ((SBYTE7(v98) & 0x80u) == 0)
        v19 = v97;
      else
        v19 = (void **)v97[0];
      *a6 = strdup((const char *)v19);
    }
    if (v18 < 0)
      operator delete(v97[0]);
    return 4294967293;
  }
  return EXRImageFromMemory;
}

void sub_23C4F1E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ParseEXRVersionFromMemory(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  v3 = 4294967293;
  if (a1 && a2)
  {
    if (a3 < 8)
      return 4294967292;
    if (*(_DWORD *)a2 != 20000630)
      return 0xFFFFFFFFLL;
    *(_QWORD *)(a1 + 4) = 0;
    *(_QWORD *)(a1 + 12) = 0;
    if (*(_BYTE *)(a2 + 4) != 2)
      return 4294967294;
    *(_DWORD *)a1 = 2;
    v4 = *(_BYTE *)(a2 + 5);
    if ((v4 & 2) != 0)
    {
      *(_DWORD *)(a1 + 4) = 1;
      v4 = *(_BYTE *)(a2 + 5);
      if ((v4 & 4) == 0)
      {
LABEL_10:
        if ((v4 & 8) == 0)
          goto LABEL_11;
        goto LABEL_16;
      }
    }
    else if ((*(_BYTE *)(a2 + 5) & 4) == 0)
    {
      goto LABEL_10;
    }
    *(_DWORD *)(a1 + 8) = 1;
    v4 = *(_BYTE *)(a2 + 5);
    if ((v4 & 8) == 0)
    {
LABEL_11:
      if ((v4 & 0x10) == 0)
        return 0;
LABEL_17:
      v3 = 0;
      *(_DWORD *)(a1 + 16) = 1;
      return v3;
    }
LABEL_16:
    *(_DWORD *)(a1 + 12) = 1;
    if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
      return 0;
    goto LABEL_17;
  }
  return v3;
}

uint64_t LoadEXRImageFromMemory(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t a4, char **a5)
{
  uint64_t v9;
  char *v10;
  int v11;
  void **v12;
  uint64_t Offsets;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  char *v22;
  int v23;
  void **v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  int inited;
  uint64_t v30;
  int v31;
  void **v32;
  std::vector<unsigned int>::pointer begin;
  int v34;
  unint64_t v35;
  std::vector<unsigned int>::pointer value_high;
  const char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  void *v48[2];
  char v49;
  std::vector<unsigned int> v50;
  std::vector<unsigned int> v51;
  void *__p[2];
  __int128 v53;
  uint64_t v54;

  if (!a1 || !a3 || a4 <= 7)
  {
    v10 = "Invalid argument for LoadEXRImageFromMemory";
    goto LABEL_9;
  }
  v9 = a2[22];
  if (!(_DWORD)v9)
  {
    v10 = "EXRHeader variable is not initialized.";
    goto LABEL_9;
  }
  v54 = a3 + v9 + 8;
  if (a4 <= 8)
  {
    v10 = "Invalid argument for DecodeEXRImage().";
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(__p, v10);
    v11 = SBYTE7(v53);
    if (a5)
    {
      if ((SBYTE7(v53) & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *a5 = strdup((const char *)v12);
    }
    if (v11 < 0)
      operator delete(__p[0]);
    return 4294967293;
  }
  v16 = a2[31];
  v17 = 16;
  if (v16 != 3 && v16 != 128)
  {
    if (v16 == 4)
      v17 = 32;
    else
      v17 = 1;
  }
  v18 = a2[4];
  v19 = a2[2];
  v20 = __OFSUB__(v18, v19);
  v21 = v18 - v19;
  if (v21 < 0 == v20 && v21 != 0x7FFFFFFF)
  {
    v25 = a2[5];
    v26 = a2[3];
    v20 = __OFSUB__(v25, v26);
    v27 = v25 - v26;
    if (v27 < 0 != v20 || v27 == 0x7FFFFFFF)
    {
      v22 = "Invalid data height value";
      goto LABEL_26;
    }
    if (v21 >= 0x800000)
    {
      v22 = "data width too large.";
      goto LABEL_26;
    }
    if (v27 >= 0x800000)
    {
      v22 = "data height too large.";
      goto LABEL_26;
    }
    if (a2[14])
    {
      if ((int)a2[15] > 0x800000)
      {
        v22 = "tile width too large.";
        goto LABEL_26;
      }
      if ((int)a2[16] > 0x800000)
      {
        v22 = "tile height too large.";
        goto LABEL_26;
      }
      *(_OWORD *)__p = 0u;
      v53 = 0u;
      memset(&v51, 0, sizeof(v51));
      memset(&v50, 0, sizeof(v50));
      tinyexr::PrecalculateTileInfo(&v51, &v50, a2);
      inited = tinyexr::InitTileOffsets((uint64_t)__p, (uint64_t)a2, &v51, &v50);
      v28 = inited;
      v30 = a2[13];
      if ((int)v30 >= 1 && v30 != inited)
      {
        std::string::basic_string[abi:ne180100]<0>(v48, "Invalid offset table size.");
        v31 = v49;
        if (a5)
        {
          if (v49 >= 0)
            v32 = v48;
          else
            v32 = (void **)v48[0];
          *a5 = strdup((const char *)v32);
        }
        if (v31 < 0)
          operator delete(v48[0]);
        if (v50.__begin_)
        {
          v50.__end_ = v50.__begin_;
          operator delete(v50.__begin_);
        }
        begin = v51.__begin_;
        if (v51.__begin_)
        {
          v51.__end_ = v51.__begin_;
LABEL_103:
          operator delete(begin);
        }
        goto LABEL_104;
      }
      if (v50.__begin_)
      {
        v50.__end_ = v50.__begin_;
        operator delete(v50.__begin_);
      }
      if (v51.__begin_)
      {
        v51.__end_ = v51.__begin_;
        operator delete(v51.__begin_);
      }
      Offsets = tinyexr::ReadOffsets((uint64_t *)__p, a3, (unint64_t *)&v54, a4, a5);
      if ((_DWORD)Offsets)
        goto LABEL_105;
      if (tinyexr::IsAnyOffsetsAreInvalid((uint64_t *)__p))
        tinyexr::ReconstructTileOffsets((uint64_t)__p, (uint64_t)a2, a3, v54, a2[21] != 0, a2[20] != 0);
    }
    else
    {
      *(_OWORD *)__p = 0u;
      v53 = 0u;
      v28 = a2[13];
      if ((int)v28 < 1)
      {
        v34 = v27 + 1;
        v35 = v34 / v17;
        if (v35 * v17 >= v34)
          v28 = v34 / v17;
        else
          v28 = v35 + 1;
        tinyexr::InitSingleResolutionOffsets((uint64_t *)__p, v28);
      }
      else
      {
        tinyexr::InitSingleResolutionOffsets((uint64_t *)__p, a2[13]);
      }
    }
    if (a2[14] || !v28)
    {
LABEL_66:
      memset(&v51, 0, sizeof(v51));
      Offsets = tinyexr::DecodeChunk(a1, (uint64_t)a2, (uint64_t)__p, a3, a4, (std::string *)&v51);
      if ((_DWORD)Offsets)
      {
        value_high = (std::vector<unsigned int>::pointer)HIBYTE(v51.__end_cap_.__value_);
        if (SHIBYTE(v51.__end_cap_.__value_) < 0)
          value_high = v51.__end_;
        if (a5 && value_high)
        {
          if (SHIBYTE(v51.__end_cap_.__value_) >= 0)
            v37 = (const char *)&v51;
          else
            v37 = (const char *)v51.__begin_;
          *a5 = strdup(v37);
        }
        FreeEXRImage(a1);
      }
      if (SHIBYTE(v51.__end_cap_.__value_) < 0)
        operator delete(v51.__begin_);
      goto LABEL_105;
    }
    v38 = 0;
    v39 = *(uint64_t **)__p[0];
    v40 = v54;
    v41 = v28;
    do
    {
      v42 = (unint64_t *)(v40 + v38);
      if (v40 + v38 + 8 >= a3 + a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "Insufficient data size in offset table.");
        goto LABEL_96;
      }
      v43 = *v42;
      if (*v42 >= a4)
      {
        std::string::basic_string[abi:ne180100]<0>(&v51, "Invalid offset value in DecodeEXRImage.");
        goto LABEL_96;
      }
      v44 = *v39;
      *(_QWORD *)(*v39 + v38) = v43;
      v38 += 8;
      --v41;
    }
    while (v41);
    v45 = 0;
    v54 = v40 + v38;
    while (*(_QWORD *)(v44 + 8 * v45))
    {
      if (v28 == ++v45)
        goto LABEL_66;
    }
    if (tinyexr::ReconstructLineOffsets(v39, v28, a3, v40 + v38, a4))
      goto LABEL_66;
    std::string::basic_string[abi:ne180100]<0>(&v51, "Cannot reconstruct lineOffset table in DecodeEXRImage.");
LABEL_96:
    v46 = SHIBYTE(v51.__end_cap_.__value_);
    if (a5)
    {
      if (SHIBYTE(v51.__end_cap_.__value_) >= 0)
        v47 = (const char *)&v51;
      else
        v47 = (const char *)v51.__begin_;
      *a5 = strdup(v47);
    }
    if (v46 < 0)
    {
      begin = v51.__begin_;
      goto LABEL_103;
    }
LABEL_104:
    Offsets = 4294967292;
LABEL_105:
    v51.__begin_ = (std::vector<unsigned int>::pointer)__p;
    std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    return Offsets;
  }
  v22 = "Invalid data width value";
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(__p, v22);
  v23 = SBYTE7(v53);
  if (a5)
  {
    if ((SBYTE7(v53) & 0x80u) == 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    *a5 = strdup((const char *)v24);
  }
  if (v23 < 0)
    operator delete(__p[0]);
  return 4294967292;
}

void sub_23C4F23EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

size_t SaveEXRImageToMemory(int32x2_t *a1, uint64_t a2, _QWORD *a3, char **a4)
{
  uint64_t v5;

  v5 = a2;
  return tinyexr::SaveEXRNPartImageToMemory(a1, (uint64_t)&v5, 1u, a3, a4);
}

size_t tinyexr::SaveEXRNPartImageToMemory(int32x2_t *a1, uint64_t a2, unsigned int a3, _QWORD *a4, char **a5)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int32x2_t v13;
  int v14;
  std::string *p_src;
  size_t v16;
  unint64_t v18;
  uint64_t v19;
  int inited;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  const char *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  size_t v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int32x2_t *v56;
  uint64_t v57;
  std::string::value_type v58;
  size_t v59;
  int v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  size_t v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  char v77;
  _BYTE *v78;
  _BYTE *v79;
  int v80;
  std::string *v81;
  unint64_t v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  size_t v86;
  _BYTE *v87;
  char *v88;
  char *v89;
  _BYTE *v90;
  _BYTE *v91;
  char v92;
  _BYTE *v93;
  uint64_t v94;
  size_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  std::vector<unsigned int>::pointer v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  int32x2_t *v108;
  _DWORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  int v115;
  __int32 v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int32x2_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  int *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  size_t *v145;
  _QWORD *v146;
  unint64_t v147;
  char v148;
  std::string::size_type size;
  std::string *v150;
  uint64_t *v151;
  int v152;
  int v153;
  uint64_t v154;
  int32x2_t *v155;
  int v156;
  int v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  int v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  size_t *v169;
  _QWORD *v170;
  char v171;
  char v172;
  size_t v173;
  std::string::size_type v174;
  std::string *v175;
  void *v176;
  uint64_t v177;
  size_t v178;
  _DWORD *v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  const void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::vector<int>::pointer begin;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  size_t v198;
  int v199;
  std::string *v200;
  int v201;
  const char *v202;
  int v203;
  _QWORD *v204;
  size_t v205;
  uint64_t v206;
  unint64_t v208;
  size_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  int32x2_t *v218;
  uint64_t v219;
  size_t **v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int *v224;
  unint64_t v225;
  uint64_t *v226;
  int32x2_t *v227;
  int *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t *v233;
  uint64_t v234;
  std::string v235;
  _QWORD v236[3];
  _QWORD v237[3];
  std::vector<int> v238;
  _BYTE *v239;
  _BYTE *v240;
  unint64_t v241;
  std::string v242;
  std::string __src;
  int v244;
  uint64_t v245;
  char v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
  if (!a1 || (v5 = a2) == 0 || !a4)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(&__src, "Invalid argument for SaveEXRNPartImageToMemory");
    goto LABEL_13;
  }
  v7 = a3;
  if (a3)
  {
    v9 = a3;
    v10 = a2;
    while (1)
    {
      v11 = *(_DWORD *)(*(_QWORD *)v10 + 124);
      if (v11 < 0)
        goto LABEL_12;
      if (v11 == 128)
        break;
      v10 += 8;
      if (!--v9)
        goto LABEL_9;
    }
    std::string::basic_string[abi:ne180100]<0>(&__src, "ZFP compression is not supported in this build");
LABEL_13:
    v14 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
    if (a5)
    {
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_src = &__src;
      else
        p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      *a5 = strdup((const char *)p_src);
    }
    if (v14 < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
    return 0;
  }
LABEL_9:
  v239 = 0;
  v240 = 0;
  v241 = 0;
  LODWORD(__src.__r_.__value_.__l.__data_) = 20000630;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<char const*,char const*>((void **)&v239, 0, &__src, &__src.__r_.__value_.__s.__data_[4], 4);
  v12 = *(_DWORD *)(*(_QWORD *)v5 + 76);
  LODWORD(__src.__r_.__value_.__l.__data_) = 2;
  if (v7 == 1)
  {
    v13 = *a1;
    if (*a1)
    {
      v13.i8[0] = 2;
      __src.__r_.__value_.__s.__data_[1] = 2;
    }
  }
  else
  {
    v13.i8[0] = 0;
  }
  if (v12)
  {
    v13.i8[0] |= 4u;
    __src.__r_.__value_.__s.__data_[1] = v13.i8[0];
  }
  if (v7 >= 2)
    __src.__r_.__value_.__s.__data_[1] = v13.i8[0] | 0x10;
  v204 = a4;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<char const*,char const*>((void **)&v239, v240, &__src, &__src.__r_.__value_.__s.__data_[4], 4);
  v18 = v7;
  std::vector<int>::vector(&v238, v7);
  std::vector<tinyexr::OffsetData>::vector(v237, v7);
  v218 = a1;
  v214 = v7;
  if (v7)
  {
    v19 = 0;
    v7 = 0;
    do
    {
      if (v218[6 * v19])
      {
        memset(&__src, 0, sizeof(__src));
        memset(&v242, 0, sizeof(v242));
        tinyexr::PrecalculateTileInfo((std::vector<unsigned int> *)&__src, (std::vector<unsigned int> *)&v242, *(_DWORD **)(v5 + 8 * v19));
        inited = tinyexr::InitTileOffsets(v237[0] + 32 * v19, *(_QWORD *)(v5 + 8 * v19), &__src, &v242);
        v238.__begin_[v19] = inited;
        if (v242.__r_.__value_.__r.__words[0])
        {
          v242.__r_.__value_.__l.__size_ = v242.__r_.__value_.__r.__words[0];
          operator delete(v242.__r_.__value_.__l.__data_);
        }
        if (__src.__r_.__value_.__r.__words[0])
        {
          __src.__r_.__value_.__l.__size_ = __src.__r_.__value_.__r.__words[0];
          operator delete(__src.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        v21 = *(_DWORD *)(*(_QWORD *)(v5 + 8 * v19) + 124);
        if (v21 == 4)
          v22 = 32;
        else
          v22 = 1;
        if (v21 == 128)
          v22 = 16;
        if (v21 == 3)
          v23 = 16;
        else
          v23 = v22;
        v24 = (v23 + v218[6 * v19 + 4].i32[1] - 1) / v23;
        v238.__begin_[v19] = v24;
        tinyexr::InitSingleResolutionOffsets((uint64_t *)(v237[0] + 32 * v19), v24);
        inited = v238.__begin_[v19];
      }
      v7 += inited;
      ++v19;
    }
    while (v19 != v18);
  }
  std::vector<std::vector<tinyexr::ChannelInfo>>::vector(v236, v18);
  *(_OWORD *)&v242.__r_.__value_.__r.__words[1] = 0uLL;
  v242.__r_.__value_.__r.__words[0] = (std::string::size_type)&v242.__r_.__value_.__l.__size_;
  v216 = v18;
  v217 = v5;
  if (v214)
  {
    v232 = v7;
    v25 = 0;
    v26 = "box2i";
    do
    {
      v247 = 0;
      v248 = 0;
      v249 = 0;
      v27 = *(_QWORD *)(v5 + 8 * v25);
      if (*(int *)(v27 + 120) >= 1)
      {
        v28 = 0;
        v29 = 0;
        do
        {
          memset(&__src, 0, sizeof(__src));
          v246 = 0;
          v244 = *(_DWORD *)(*(_QWORD *)(v27 + 128) + 4 * v29);
          v245 = 0x100000001;
          std::string::basic_string[abi:ne180100]<0>(&v235, (char *)(*(_QWORD *)(v27 + 104) + v28));
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__src.__r_.__value_.__l.__data_);
          __src = v235;
          v30 = (uint64_t *)(v236[0] + 24 * v25);
          v31 = v30 + 1;
          v32 = v30[1];
          if (v32 >= v30[2])
          {
            v33 = std::vector<tinyexr::ChannelInfo>::__push_back_slow_path<tinyexr::ChannelInfo const&>(v30, (__int128 *)&__src);
          }
          else
          {
            std::vector<tinyexr::ChannelInfo>::__construct_one_at_end[abi:ne180100]<tinyexr::ChannelInfo const&>((uint64_t)v30, (__int128 *)&__src);
            v33 = v32 + 40;
          }
          *v31 = v33;
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__src.__r_.__value_.__l.__data_);
          ++v29;
          v27 = *(_QWORD *)(v5 + 8 * v25);
          v28 += 272;
        }
        while (v29 < *(int *)(v27 + 120));
      }
      v34 = (uint64_t *)(v236[0] + 24 * v25);
      v36 = v34[1];
      v35 = v34 + 1;
      v37 = *v34;
      v38 = v36 - *v34;
      if (v36 == *v34)
      {
        v43 = 1;
      }
      else
      {
        v39 = 0;
        v40 = v38 / 40;
        if (v40 <= 1)
          v41 = 1;
        else
          v41 = v40;
        do
        {
          v42 = (const char *)v37;
          if (*(char *)(v37 + 23) < 0)
            v42 = *(const char **)v37;
          v39 += strlen(v42) + 17;
          v37 += 40;
          --v41;
        }
        while (v41);
        v43 = v39 + 1;
      }
      v45 = v247;
      v44 = v248;
      if (v43 <= v248 - v247)
      {
        if (v43 < v248 - v247)
        {
          v44 = &v247[v43];
          v248 = &v247[v43];
        }
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)&v247, v43 - (v248 - v247));
        v45 = v247;
        v44 = v248;
      }
      if (v44 == v45)
        goto LABEL_314;
      v46 = (char *)v26;
      v47 = *v34;
      if (*v35 != *v34)
      {
        v48 = 0;
        v49 = 0;
        do
        {
          v50 = (const char *)(v47 + v48);
          if (*(char *)(v47 + v48 + 23) < 0)
            v50 = *(const char **)v50;
          v51 = strlen(v50);
          memcpy(v45, v50, v51);
          v52 = (const char *)(*v34 + v48);
          if (v52[23] < 0)
            v52 = *(const char **)v52;
          v53 = &v45[strlen(v52)];
          *v53 = 0;
          v54 = *v34 + v48;
          v55 = *(_QWORD *)(v54 + 28);
          *(_DWORD *)(v53 + 1) = *(_DWORD *)(v54 + 24);
          v53[5] = *(_BYTE *)(*v34 + v48 + 36);
          *(_QWORD *)(v53 + 9) = v55;
          v45 = v53 + 17;
          ++v49;
          v47 = *v34;
          v48 += 40;
        }
        while (v49 < 0xCCCCCCCCCCCCCCCDLL * ((*v35 - *v34) >> 3));
      }
      *v45 = 0;
      v5 = v217;
      if (v248 == v247)
LABEL_314:
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v26 = v46;
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "channels", "chlist", v247, (_DWORD)v248 - (_DWORD)v247);
      if (v247)
      {
        v248 = v247;
        operator delete(v247);
      }
      LODWORD(__src.__r_.__value_.__l.__data_) = *(_DWORD *)(*(_QWORD *)(v217 + 8 * v25) + 124);
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "compression", "compression", (char *)&__src, 1);
      __src.__r_.__value_.__r.__words[0] = 0;
      v56 = &v218[6 * v25];
      __src.__r_.__value_.__r.__words[1] = (std::string::size_type)vadd_s32(v56[4], (int32x2_t)-1);
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "dataWindow", v46, (char *)&__src, 16);
      v247 = 0;
      v248 = (char *)vadd_s32(v218[4], (int32x2_t)-1);
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "displayWindow", v46, (char *)&v247, 16);
      __src.__r_.__value_.__s.__data_[0] = 0;
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "lineOrder", "lineOrder", (char *)&__src, 1);
      LODWORD(__src.__r_.__value_.__l.__data_) = 1065353216;
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "pixelAspectRatio", "float", (char *)&__src, 4);
      __src.__r_.__value_.__r.__words[0] = 0;
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "screenWindowCenter", "v2f", (char *)&__src, 8);
      LODWORD(__src.__r_.__value_.__l.__data_) = 1065353216;
      tinyexr::WriteAttributeToMemory((uint64_t)&v239, "screenWindowWidth", "float", (char *)&__src, 4);
      if (*v56)
      {
        v57 = *(_QWORD *)(v217 + 8 * v25);
        if (*(_DWORD *)(v57 + 72))
          v58 = *(_BYTE *)(v57 + 68) & 3 | 0x10;
        else
          v58 = *(_BYTE *)(v57 + 68) & 3;
        LODWORD(__src.__r_.__value_.__r.__words[1]) = 0;
        __src.__r_.__value_.__r.__words[0] = *(_QWORD *)(v57 + 60);
        __src.__r_.__value_.__s.__data_[8] = v58;
        tinyexr::WriteAttributeToMemory((uint64_t)&v239, "tiles", "tiledesc", (char *)&__src, 9);
      }
      if (v214 >= 2)
      {
        v59 = strlen((const char *)(*(_QWORD *)(v217 + 8 * v25) + 136));
        if (!v59)
        {
          std::string::basic_string[abi:ne180100]<0>(&__src, "Invalid 'name' attribute for a multi-part file");
LABEL_127:
          v80 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
          if (a5)
          {
            if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v81 = &__src;
            else
              v81 = (std::string *)__src.__r_.__value_.__r.__words[0];
            *a5 = strdup((const char *)v81);
          }
          if (v80 < 0)
            operator delete(__src.__r_.__value_.__l.__data_);
          std::__tree<std::string>::destroy((uint64_t)&v242, (char *)v242.__r_.__value_.__l.__size_);
          v16 = 0;
          goto LABEL_297;
        }
        v60 = v59;
        std::string::basic_string[abi:ne180100]<0>(&__src, (char *)(*(_QWORD *)(v217 + 8 * v25) + 136));
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v242, (void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&__src);
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__src.__r_.__value_.__l.__data_);
        if (v242.__r_.__value_.__r.__words[2] != v25 + 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&__src, "'name' attributes must be unique for a multi-part file");
          goto LABEL_127;
        }
        tinyexr::WriteAttributeToMemory((uint64_t)&v239, "name", "string", (char *)(*(_QWORD *)(v217 + 8 * v25) + 136), v60);
        if (*v56)
          v61 = "tiledimage";
        else
          v61 = "scanlineimage";
        if (*v56)
          v62 = 10;
        else
          v62 = 13;
        tinyexr::WriteAttributeToMemory((uint64_t)&v239, "type", "string", v61, v62);
        tinyexr::WriteAttributeToMemory((uint64_t)&v239, "chunkCount", "int", (char *)&v238.__begin_[v25], 4);
      }
      v63 = *(_QWORD *)(v217 + 8 * v25);
      if (*(int *)(v63 + 92) >= 1)
      {
        v64 = 0;
        v65 = 0;
        do
        {
          tinyexr::WriteAttributeToMemory((uint64_t)&v239, (char *)(*(_QWORD *)(v63 + 96) + v64), (char *)(*(_QWORD *)(v63 + 96) + v64 + 256), *(char **)(*(_QWORD *)(v63 + 96) + v64 + 512), *(_DWORD *)(*(_QWORD *)(v63 + 96) + v64 + 520));
          ++v65;
          v63 = *(_QWORD *)(v217 + 8 * v25);
          v64 += 528;
        }
        while (v65 < *(int *)(v63 + 92));
      }
      v66 = v240;
      if ((unint64_t)v240 >= v241)
      {
        v68 = (unint64_t)v239;
        v69 = v240 - v239;
        v70 = v240 - v239 + 1;
        if (v70 < 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v71 = v241 - (_QWORD)v239;
        if (2 * (v241 - (unint64_t)v239) > v70)
          v70 = 2 * v71;
        if (v71 >= 0x3FFFFFFFFFFFFFFFLL)
          v72 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
          v73 = operator new(v72);
        else
          v73 = 0;
        v74 = &v73[v69];
        v75 = &v73[v69];
        *v75 = 0;
        v67 = v75 + 1;
        if (v66 != (_BYTE *)v68)
        {
          v76 = &v66[~v68];
          do
          {
            v77 = *--v66;
            (v76--)[(_QWORD)v73] = v77;
          }
          while (v66 != (_BYTE *)v68);
          v66 = v239;
          v74 = v73;
        }
        v239 = v74;
        v240 = v67;
        v241 = (unint64_t)&v73[v72];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *v240 = 0;
        v67 = v66 + 1;
      }
      v240 = v67;
      ++v25;
      v18 = v216;
    }
    while (v25 != v216);
    std::__tree<std::string>::destroy((uint64_t)&v242, (char *)v242.__r_.__value_.__l.__size_);
    v78 = v240;
    if (v214 < 2)
    {
      v7 = v232;
    }
    else
    {
      v7 = v232;
      if ((unint64_t)v240 >= v241)
      {
        v82 = (unint64_t)v239;
        v83 = v240 - v239;
        v84 = v240 - v239 + 1;
        if (v84 < 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v85 = v241 - (_QWORD)v239;
        if (2 * (v241 - (unint64_t)v239) > v84)
          v84 = 2 * v85;
        if (v85 >= 0x3FFFFFFFFFFFFFFFLL)
          v86 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        if (v86)
          v87 = operator new(v86);
        else
          v87 = 0;
        v88 = &v87[v83];
        v89 = &v87[v86];
        v90 = &v87[v83];
        *v90 = 0;
        v79 = v90 + 1;
        if (v78 == (_BYTE *)v82)
        {
          v87 = v88;
        }
        else
        {
          v91 = &v78[~v82];
          do
          {
            v92 = *--v78;
            (v91--)[(_QWORD)v87] = v92;
          }
          while (v78 != (_BYTE *)v82);
          v78 = v239;
        }
        v239 = v87;
        v240 = v79;
        v241 = (unint64_t)v89;
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v240 = 0;
        v79 = v78 + 1;
      }
      v240 = v79;
      v78 = v79;
    }
  }
  else
  {
    std::__tree<std::string>::destroy((uint64_t)&v242, 0);
    v78 = v240;
  }
  v93 = v239;
  std::vector<std::vector<std::vector<unsigned char>>>::vector(&v247, v18);
  if (!v214)
    goto LABEL_288;
  v94 = 0;
  v95 = 0;
  v209 = &v78[8 * v7] - v93;
  v206 = 4 * (v214 > 1);
  do
  {
    memset(&v235, 0, sizeof(v235));
    v96 = *(_DWORD *)(*(_QWORD *)(v5 + 8 * v94) + 124);
    v97 = 16;
    if (v96 != 3 && v96 != 128)
    {
      if (v96 == 4)
        v97 = 32;
      else
        v97 = 1;
    }
    v98 = v236[0];
    v99 = *(_QWORD *)(v5 + 8 * v94);
    v100 = v237[0];
    v233 = (uint64_t *)&v247[24 * v94];
    v208 = v238.__begin_[v94];
    std::vector<std::vector<unsigned char>>::resize(v233, v208);
    std::vector<unsigned long>::vector(&__src, *(int *)(v99 + 120));
    v101 = *(int *)(v99 + 120);
    v230 = v99;
    if ((_DWORD)v101)
    {
      v102 = 0;
      v103 = 0;
      v104 = (std::vector<unsigned int>::pointer)__src.__r_.__value_.__r.__words[0];
      v105 = *(int **)(v99 + 128);
      do
      {
        *(_QWORD *)v104 = v102;
        v107 = *v105++;
        v106 = v107;
        if (v107 >= 3)
          __assert_rtn("EncodeChunk", "tinyexr.h", 13190, "0");
        v103 += dword_23C603E20[v106];
        v102 += qword_23C603E30[v106];
        v104 += 2;
        --v101;
      }
      while (v101);
    }
    else
    {
      v103 = 0;
    }
    v108 = &v218[6 * v94];
    v229 = (_QWORD *)(v98 + 24 * v94);
    v213 = v94;
    if (!*(_QWORD *)v108)
    {
      v220 = **(size_t ****)(v100 + 32 * v94);
      v151 = v233;
      if ((int)v208 >= 1)
      {
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v155 = &v218[6 * v94];
        v226 = (uint64_t *)&v155[3];
        v228 = (int *)&v155[4] + 1;
        v222 = v103;
        v224 = (int *)&v155[4];
        v156 = v97;
        do
        {
          v157 = *v228;
          v158 = *v226;
          v159 = (unint64_t *)(*v151 + v154);
          v160 = v159[1] - *v159;
          if (v160 > 7)
          {
            if (v160 != 8)
              v159[1] = *v159 + 8;
          }
          else
          {
            std::vector<unsigned char>::__append(v159, 8 - v160);
          }
          if (v157 >= v156)
            v161 = v156;
          else
            v161 = v157;
          v151 = v233;
          v162 = (uint64_t *)(*v233 + v154);
          v164 = *v162;
          v163 = v162[1];
          tinyexr::EncodePixelData((uint64_t)v162, v158, *(_QWORD *)(v230 + 128), *(_DWORD *)(v230 + 124), *v224, *v224, v153, v161 + v152, v222, v229, &__src);
          v165 = *(int **)(*v233 + v154);
          v166 = *(_QWORD *)(*v233 + v154 + 8) - (_QWORD)v165;
          if (v166 <= v163 - v164)
            __assert_rtn("EncodeChunk", "tinyexr.h", 13328, "data_list[i].size() > data_header_size");
          *v165 = v153;
          v167 = *(_QWORD *)(*v233 + v154);
          v154 += 24;
          *(_DWORD *)(v167 + 4) = v166 - (v163 - v164);
          v153 += v97;
          v152 -= v97;
          v156 += v97;
        }
        while (24 * v208 != v154);
      }
      v168 = v208;
      if (!(_DWORD)v208)
      {
        v171 = 1;
        v95 = v209;
        v18 = v216;
        v5 = v217;
        v94 = v213;
        goto LABEL_243;
      }
      v169 = *v220;
      v170 = (_QWORD *)(*v233 + 8);
      v95 = v209;
      v18 = v216;
      v5 = v217;
      v94 = v213;
      do
      {
        *v169++ = v95;
        v95 = v95 + v206 + *v170 - *(v170 - 1);
        v170 += 3;
        --v168;
      }
      while (v168);
LABEL_238:
      v171 = 1;
      goto LABEL_243;
    }
    v211 = v100 + 32 * v94;
    v109 = (_DWORD *)v99;
    if (*(_DWORD *)(v99 + 68) == 2)
      v110 = *(_DWORD *)(v211 + 28);
    else
      v110 = 1;
    v210 = (v110 * *(_DWORD *)(v211 + 24));
    if ((int)v210 < 1)
    {
      v111 = 0;
      v95 = v209;
LABEL_237:
      if (v111 != v208)
        __assert_rtn("EncodeChunk", "tinyexr.h", 13275, "block_idx == num_blocks");
      goto LABEL_238;
    }
    v205 = v95;
    v111 = 0;
    v221 = v103;
    v112 = 0;
    v95 = v209;
    v113 = v233;
    v114 = (_QWORD *)v211;
    while (1)
    {
      if (!v108)
      {
        std::string::append(&v235, "Invalid number of tiled levels for EncodeChunk\n", 0x2FuLL);
        goto LABEL_242;
      }
      v219 = v112;
      v115 = v109[17];
      if (v115)
      {
        v116 = v108[2].i32[0];
        if (v115 == 2)
        {
          v116 += v108[2].i32[1] * *(_DWORD *)(v211 + 24);
        }
        else if (v115 != 1)
        {
          __assert_rtn("LevelIndex", "tinyexr.h", 11071, "false");
        }
      }
      else
      {
        v116 = 0;
      }
      if (v219 != v116)
        break;
      v117 = *(_QWORD **)(*v114 + 24 * v219);
      v118 = (uint64_t)(*(_QWORD *)(*v114 + 24 * v219 + 8) - (_QWORD)v117) >> 3;
      v119 = -1431655765 * v118;
      if (!(-1431655765 * (_DWORD)v118))
        __assert_rtn("EncodeChunk", "tinyexr.h", 13242, "num_y_tiles");
      v120 = *(_QWORD *)(*(_QWORD *)(*v114 + 24 * v219) + 8) - *v117;
      v121 = v120 >> 3;
      if (!(v120 >> 3))
        __assert_rtn("EncodeChunk", "tinyexr.h", 13244, "num_x_tiles");
      memset(&v242, 0, sizeof(v242));
      v122 = v121 * v119;
      if ((_DWORD)v121 * v119 != v108[5].i32[1])
      {
        v201 = 13039;
        v202 = "num_tiles == level_image->num_tiles";
        goto LABEL_302;
      }
      v227 = v108;
      if (v109[15] <= v108[4].i32[0] && v109[16] <= v108[4].i32[1] || v108[2].i32[0] || v108[2].i32[1])
      {
        v212 = v120;
        v215 = 0xAAAAAAAAAAAAAAABLL * v118;
        if (v122 >= 1)
        {
          v123 = 0;
          v124 = 0;
          v125 = 0;
          v223 = 24 * v122;
          v225 = v120 >> 3;
          v126 = 24 * v111;
          while (1)
          {
            v127 = *v108;
            v128 = *(_QWORD *)(*(_QWORD *)v108 + v124 + 24);
            v129 = *v113;
            v130 = (unint64_t *)(*v113 + v126 + v125);
            v132 = *v130;
            v131 = v130[1];
            v133 = v131 - *v130;
            if (v133 > 0x13)
            {
              if (v133 != 20)
              {
                v131 = v132 + 20;
                v130[1] = v132 + 20;
              }
            }
            else
            {
              v134 = *(_QWORD *)(*(_QWORD *)v108 + v124 + 24);
              std::vector<unsigned char>::__append(v130, 20 - v133);
              v129 = *v233;
              v135 = (unint64_t *)(*v233 + v126 + v125);
              v132 = *v135;
              v131 = v135[1];
              v128 = v134;
            }
            tinyexr::EncodePixelData(v129 + v126 + v125, v128, *(_QWORD *)(v230 + 128), *(_DWORD *)(v230 + 124), *(_DWORD *)(*(_QWORD *)&v127 + v124 + 16), *(_DWORD *)(v230 + 60), 0, *(_DWORD *)(*(_QWORD *)&v127 + v124 + 20), v221, v229, &__src);
            v136 = v131 - v132;
            v113 = v233;
            v137 = *v233 + v126 + v125;
            v138 = *(int **)v137;
            v139 = *(_QWORD *)(v137 + 8) - *(_QWORD *)v137;
            if (v139 <= v136)
              break;
            v108 = v227;
            *v138 = v123 % (int)v225;
            *(_DWORD *)(*(_QWORD *)(*v233 + v126 + v125) + 4) = v123 / (int)v225;
            *(_DWORD *)(*(_QWORD *)(*v233 + v126 + v125) + 8) = v227[2].i32[0];
            *(_DWORD *)(*(_QWORD *)(*v233 + v126 + v125) + 12) = v227[2].i32[1];
            *(_DWORD *)(*(_QWORD *)(*v233 + v126 + v125) + 16) = v139 - v136;
            v125 += 24;
            v124 += 32;
            ++v123;
            if (v223 == v125)
              goto LABEL_194;
          }
          v201 = 13110;
          v202 = "data_list[data_idx].size() > data_header_size";
LABEL_302:
          __assert_rtn("EncodeTiledLevel", "tinyexr.h", v201, v202);
        }
LABEL_194:
        if (v215 << 32)
        {
          v140 = 0;
          v141 = (int)v215;
          v114 = (_QWORD *)v211;
          v142 = (int)(v212 >> 3);
          v143 = (_QWORD *)(*(_QWORD *)v211 + 24 * v219);
          if (v142 <= 1)
            v142 = 1;
          if ((unint64_t)(int)v215 <= 1)
            v141 = 1;
          v144 = *v113 + 8;
          v18 = v216;
          v5 = v217;
          v94 = v213;
          do
          {
            if (v212 << 29)
            {
              v145 = *(size_t **)(*v143 + 24 * v140);
              v146 = (_QWORD *)(v144 + 24 * v111);
              v147 = v142;
              do
              {
                *v145++ = v95;
                v95 += v206 + *v146 - *(v146 - 1);
                ++v111;
                v146 += 3;
                --v147;
              }
              while (v147);
            }
            ++v140;
          }
          while (v140 != v141);
        }
        else
        {
          v18 = v216;
          v5 = v217;
          v94 = v213;
          v114 = (_QWORD *)v211;
        }
        v227 = (int32x2_t *)v108[1];
        v148 = 1;
        v109 = (_DWORD *)v230;
      }
      else
      {
        std::string::append(&v242, "Failed to encode tile data.\n", 0x1CuLL);
        if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v242.__r_.__value_.__r.__words[2]);
        else
          size = v242.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v150 = &v242;
          else
            v150 = (std::string *)v242.__r_.__value_.__r.__words[0];
          std::string::append(&v235, (const std::string::value_type *)v150, size);
        }
        v148 = 0;
      }
      if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v242.__r_.__value_.__l.__data_);
      if ((v148 & 1) == 0)
        goto LABEL_242;
      v112 = v219 + 1;
      v108 = v227;
      if (v219 + 1 == v210)
        goto LABEL_237;
    }
    std::string::append(&v235, "Incorrect level ordering in tiled image\n", 0x28uLL);
LABEL_242:
    v171 = 0;
    v95 = v205;
LABEL_243:
    if (__src.__r_.__value_.__r.__words[0])
    {
      __src.__r_.__value_.__l.__size_ = __src.__r_.__value_.__r.__words[0];
      operator delete(__src.__r_.__value_.__l.__data_);
    }
    v172 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
    v173 = v95;
    if ((v171 & 1) != 0)
    {
      if ((*((_BYTE *)&v235.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_247;
    }
    else
    {
      if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v174 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      else
        v174 = v235.__r_.__value_.__l.__size_;
      if (a5 && v174)
      {
        if ((v235.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v175 = &v235;
        else
          v175 = (std::string *)v235.__r_.__value_.__r.__words[0];
        *a5 = strdup((const char *)v175);
      }
      v173 = v209;
      if ((v172 & 0x80) == 0)
      {
LABEL_247:
        if ((v171 & 1) == 0)
          goto LABEL_295;
        goto LABEL_260;
      }
    }
    operator delete(v235.__r_.__value_.__l.__data_);
    if ((v171 & 1) == 0)
      goto LABEL_295;
LABEL_260:
    ++v94;
    v209 = v173;
  }
  while (v94 != v18);
  if (v95)
  {
    v16 = v95;
    v176 = malloc_type_malloc(v95, 0xD2EF6589uLL);
    *v204 = v176;
    memcpy(v176, v239, v240 - v239);
    v177 = 0;
    v178 = v240 - v239;
    v179 = (_DWORD *)(*v204 + v240 - v239);
    do
    {
      v180 = 32 * v177;
      v231 = v177;
      if (v218[6 * v177])
      {
        v181 = *(_DWORD *)(*(_QWORD *)(v5 + 8 * v177) + 68);
        v182 = v237[0];
        v183 = v237[0] + 32 * v177;
        v184 = *(_DWORD *)(v183 + 24);
        if (v181 == 2)
          v184 *= *(_DWORD *)(v183 + 28);
        if (v184 >= 1)
        {
          v185 = 0;
          v234 = v184;
          do
          {
            v186 = *(_QWORD *)(*(_QWORD *)(v182 + v180) + 24 * v185);
            if (*(_QWORD *)(*(_QWORD *)(v182 + v180) + 24 * v185 + 8) != v186)
            {
              v187 = 0;
              v188 = 0;
              do
              {
                v189 = *(const void **)(v186 + v187);
                v190 = *(_QWORD *)(v186 + v187 + 8) - (_QWORD)v189;
                v178 += v190;
                if (v178 > v95)
                  __assert_rtn("SaveEXRNPartImageToMemory", "tinyexr.h", 13670, "sum <= total_size");
                memcpy(v179, v189, *(_QWORD *)(v186 + v187 + 8) - (_QWORD)v189);
                v179 = (_DWORD *)((char *)v179 + v190);
                ++v188;
                v182 = v237[0];
                v186 = *(_QWORD *)(*(_QWORD *)(v237[0] + v180) + 24 * v185);
                v187 += 24;
              }
              while (v188 < 0xAAAAAAAAAAAAAAABLL
                           * ((*(_QWORD *)(*(_QWORD *)(v237[0] + v180) + 24 * v185 + 8) - v186) >> 3));
            }
            ++v185;
          }
          while (v185 != v234);
        }
      }
      else
      {
        v191 = v238.__begin_[v177];
        v178 += 8 * v191;
        if (v178 > v95)
          __assert_rtn("SaveEXRNPartImageToMemory", "tinyexr.h", 13681, "sum <= total_size");
        v192 = 8 * v191;
        memcpy(v179, ***(const void ****)(v237[0] + 32 * v177), 8 * v191);
        v179 = (_DWORD *)((char *)v179 + v192);
      }
      v177 = v231 + 1;
      v5 = v217;
    }
    while (v231 + 1 != v216);
    v193 = 0;
    begin = v238.__begin_;
    do
    {
      if (begin[v193])
      {
        v195 = 0;
        v196 = 0;
        do
        {
          if (v214 >= 2)
          {
            v178 += 4;
            if (v178 > v95)
            {
              v203 = 13693;
LABEL_310:
              __assert_rtn("SaveEXRNPartImageToMemory", "tinyexr.h", v203, "sum <= total_size");
            }
            *v179++ = v193;
          }
          v197 = *(_QWORD *)&v247[24 * v193] + v195;
          v198 = *(_QWORD *)(v197 + 8) - *(_QWORD *)v197;
          v178 += v198;
          if (v178 > v95)
          {
            v203 = 13700;
            goto LABEL_310;
          }
          memcpy(v179, *(const void **)v197, v198);
          v179 = (_DWORD *)((char *)v179
                          + *(_QWORD *)(*(_QWORD *)&v247[24 * v193] + v195 + 8)
                          - *(_QWORD *)(*(_QWORD *)&v247[24 * v193] + v195));
          ++v196;
          begin = v238.__begin_;
          v195 += 24;
        }
        while (v196 < v238.__begin_[v193]);
      }
      ++v193;
    }
    while (v193 != v216);
    if (v178 != v95)
      __assert_rtn("SaveEXRNPartImageToMemory", "tinyexr.h", 13705, "sum == total_size");
    goto LABEL_296;
  }
LABEL_288:
  std::string::basic_string[abi:ne180100]<0>(&__src, "Output memory size is zero");
  v199 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
  if (a5)
  {
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v200 = &__src;
    else
      v200 = (std::string *)__src.__r_.__value_.__r.__words[0];
    *a5 = strdup((const char *)v200);
  }
  if (v199 < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
LABEL_295:
  v16 = 0;
LABEL_296:
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v247;
  std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
LABEL_297:
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v236;
  std::vector<std::vector<tinyexr::ChannelInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v237;
  std::vector<tinyexr::OffsetData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  if (v238.__begin_)
  {
    v238.__end_ = v238.__begin_;
    operator delete(v238.__begin_);
  }
  if (v239)
  {
    v240 = v239;
    operator delete(v239);
  }
  return v16;
}

void sub_23C4F3AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;
  void *v48;
  void *v49;

  *(_QWORD *)(v46 - 200) = v46 - 136;
  std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 200));
  *(_QWORD *)(v46 - 200) = &a43;
  std::vector<std::vector<tinyexr::ChannelInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 200));
  *(_QWORD *)(v46 - 200) = &a46;
  std::vector<tinyexr::OffsetData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 200));
  v48 = *(void **)(v46 - 248);
  if (v48)
  {
    *(_QWORD *)(v46 - 240) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(v46 - 224);
  if (v49)
  {
    *(_QWORD *)(v46 - 216) = v49;
    operator delete(v49);
  }
  _Unwind_Resume(a1);
}

uint64_t SaveEXRImageToFile(int32x2_t *a1, std::string::size_type a2, char *__filename, char **a4)
{
  int v7;
  int v8;
  std::string *p_p;
  int v11;
  std::string *v12;
  FILE *v14;
  FILE *v15;
  size_t v16;
  size_t v17;
  void *v18;
  size_t v19;
  std::string *v20;
  int v21;
  std::string *v22;
  void *v23;
  int v24;
  std::string *v25;
  std::string __ptr;
  std::string __p;

  if (a1)
  {
    if (__filename)
    {
      v7 = *(_DWORD *)(a2 + 124);
      if ((v7 & 0x80000000) == 0)
      {
        if (v7 == 128)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ZFP compression is not supported in this build");
          v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if (a4)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *a4 = strdup((const char *)p_p);
          }
          if (v8 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return 4294967286;
        }
        v14 = fopen(__filename, "wb");
        if (v14)
        {
          v15 = v14;
          __ptr.__r_.__value_.__r.__words[0] = 0;
          __p.__r_.__value_.__r.__words[0] = a2;
          v16 = tinyexr::SaveEXRNPartImageToMemory(a1, (uint64_t)&__p, 1u, &__ptr, a4);
          if (!v16)
            return 4294967284;
          v17 = v16;
          v18 = (void *)__ptr.__r_.__value_.__r.__words[0];
          if (__ptr.__r_.__value_.__r.__words[0])
          {
            v19 = fwrite(__ptr.__r_.__value_.__l.__data_, 1uLL, v17, v15);
            v18 = (void *)__ptr.__r_.__value_.__r.__words[0];
          }
          else
          {
            v19 = 0;
          }
          free(v18);
          fclose(v15);
          if (v19 == v17)
            return 0;
          std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot write a file");
          v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if (a4)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &__p;
            else
              v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *a4 = strdup((const char *)v25);
          }
          if ((v24 & 0x80000000) == 0)
            return 4294967285;
          v23 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__ptr, __filename);
          v20 = std::string::insert(&__ptr, 0, "Cannot write a file: ", 0x15uLL);
          __p = *v20;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if (a4)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &__p;
            else
              v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *a4 = strdup((const char *)v22);
          }
          if (v21 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return 4294967285;
          v23 = (void *)__ptr.__r_.__value_.__r.__words[0];
        }
        operator delete(v23);
        return 4294967285;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid argument for SaveEXRImageToFile");
  v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (a4)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &__p;
    else
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *a4 = strdup((const char *)v12);
  }
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 4294967293;
}

void sub_23C4F3F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t SaveEXRMultipartImageToMemory(int32x2_t *a1, uint64_t a2, unsigned int a3, _QWORD *a4, char **a5)
{
  int v7;
  void **v8;
  void *__p[2];
  char v10;

  if (a1 && a2 && a3 >= 2 && a4)
    return tinyexr::SaveEXRNPartImageToMemory(a1, a2, a3, a4, a5);
  std::string::basic_string[abi:ne180100]<0>(__p, "Invalid argument for SaveEXRNPartImageToMemory");
  v7 = v10;
  if (a5)
  {
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *a5 = strdup((const char *)v8);
  }
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t SaveEXRMultipartImageToFile(int32x2_t *a1, uint64_t a2, unsigned int a3, char *__filename, char **a5)
{
  FILE *v10;
  FILE *v11;
  size_t v12;
  size_t v13;
  void *v14;
  size_t v15;
  int v16;
  std::string *v17;
  std::string *v19;
  int v20;
  std::string *v21;
  void *v22;
  int v23;
  std::string *p_p;
  std::string __ptr;
  std::string __p;

  if (a1 && a2 && a3 > 1)
  {
    v10 = fopen(__filename, "wb");
    if (v10)
    {
      v11 = v10;
      __ptr.__r_.__value_.__r.__words[0] = 0;
      v12 = SaveEXRMultipartImageToMemory(a1, a2, a3, &__ptr, a5);
      if (!v12)
        return 4294967284;
      v13 = v12;
      v14 = (void *)__ptr.__r_.__value_.__r.__words[0];
      if (__ptr.__r_.__value_.__r.__words[0])
      {
        v15 = fwrite(__ptr.__r_.__value_.__l.__data_, 1uLL, v13, v11);
        v14 = (void *)__ptr.__r_.__value_.__r.__words[0];
      }
      else
      {
        v15 = 0;
      }
      free(v14);
      fclose(v11);
      if (v15 == v13)
        return 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "Cannot write a file");
      v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a5)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *a5 = strdup((const char *)p_p);
      }
      if ((v23 & 0x80000000) == 0)
        return 4294967285;
      v22 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__ptr, __filename);
      v19 = std::string::insert(&__ptr, 0, "Cannot write a file: ", 0x15uLL);
      __p = *v19;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a5)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &__p;
        else
          v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *a5 = strdup((const char *)v21);
      }
      if (v20 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 4294967285;
      v22 = (void *)__ptr.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    return 4294967285;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid argument for SaveEXRMultipartImageToFile");
  v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (a5)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *a5 = strdup((const char *)v17);
  }
  if (v16 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 4294967293;
}

void sub_23C4F418C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LoadDeepEXR(uint64_t a1, char *__filename, char **a3)
{
  FILE *v6;
  FILE *v7;
  std::vector<char>::size_type v8;
  std::vector<char>::pointer begin;
  int v10;
  std::string *v11;
  uint64_t v12;
  int v13;
  std::string *p_p;
  std::string *v15;
  std::string *v16;
  int v17;
  std::string *v18;
  std::string *v19;
  std::string *v20;
  int v21;
  std::string *v22;
  int v23;
  std::string *v24;
  std::vector<char>::pointer v26;
  size_t v27;
  unsigned int v28;
  int v29;
  const char *v30;
  char v31;
  int value_high;
  const char *v33;
  int v34;
  int v35;
  std::string *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  int *v53;
  std::vector<int>::pointer v54;
  _DWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  std::vector<int>::pointer v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  uint64_t v68;
  int v69;
  size_t v70;
  uint64_t v71;
  int *v72;
  char *v73;
  unint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  float v79;
  int v80;
  float v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  int v95;
  const char *v96;
  const char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int __n;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  size_t v110;
  int v111;
  int v112;
  uint64_t v113;
  std::vector<int> v114;
  std::string __p;
  _BYTE v116[264];
  uint64_t v117;
  unsigned __int8 v118[8];
  int *v119;
  uint64_t v120;
  std::vector<int> v121;
  std::string v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::vector<char> v126;

  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid argument for LoadDeepEXR");
    v13 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (a3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *a3 = strdup((const char *)p_p);
    }
    if (v13 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return 4294967293;
  }
  v6 = fopen(__filename, "rb");
  if (!v6)
  {
    v15 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v126, __filename);
    v16 = std::string::insert(v15, 0, "Cannot read a file ", 0x13uLL);
    __p = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (a3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *a3 = strdup((const char *)v18);
    }
    if (v17 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__end_cap_.__value_) < 0)
      operator delete(v126.__begin_);
    return 4294967289;
  }
  v7 = v6;
  fseek(v6, 0, 2);
  v8 = MEMORY[0x2426213A4](v7);
  fseek(v7, 0, 0);
  if (!v8)
  {
    fclose(v7);
    v19 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v126, __filename);
    v20 = std::string::insert(v19, 0, "File size is zero : ", 0x14uLL);
    __p = *v20;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v21 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (a3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &__p;
      else
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *a3 = strdup((const char *)v22);
    }
    if (v21 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__end_cap_.__value_) < 0)
      operator delete(v126.__begin_);
    return 4294967291;
  }
  std::vector<char>::vector(&v126, v8);
  if (fread(v126.__begin_, 1uLL, v8, v7) != v8)
    __assert_rtn("LoadDeepEXR", "tinyexr.h", 13906, "ret == filesize");
  fclose(v7);
  begin = v126.__begin_;
  if (*(_DWORD *)v126.__begin_ != 20000630)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid magic number");
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (a3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &__p;
      else
        v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *a3 = strdup((const char *)v11);
    }
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = 0xFFFFFFFFLL;
    goto LABEL_54;
  }
  if (v126.__begin_[4] != 2 || v126.__begin_[5] != 8 || v126.__begin_[6] || v126.__begin_[7])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Unsupported version or scanline");
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (a3)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &__p;
      else
        v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *a3 = strdup((const char *)v24);
    }
    if (v23 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v12 = 4294967288;
    goto LABEL_54;
  }
  v26 = v126.__begin_ + 8;
  v27 = v8 - 8;
  v123 = 0;
  v124 = 0;
  v112 = 1;
  v125 = 0;
  v107 = -1;
  __n = -1;
  v105 = -1;
  v109 = -1;
  v28 = -1;
  v103 = -1;
  v12 = 0xFFFFFFFFLL;
  while (1)
  {
    if (!v27)
    {
      v12 = 4294967292;
      goto LABEL_203;
    }
    if (!*v26)
      break;
    memset(&v122, 0, sizeof(v122));
    memset(&v121, 0, sizeof(v121));
    *(_QWORD *)v118 = 0;
    v119 = 0;
    v120 = 0;
    v117 = 0;
    if ((tinyexr::ReadAttribute((uint64_t)&v122, (uint64_t)&v121, (unint64_t *)v118, &v117, v26, v27) & 1) != 0)
    {
      v26 += v117;
      v27 -= v117;
      if (!std::string::compare(&v122, "compression"))
      {
        v28 = **(_BYTE **)v118;
        if (v28 >= 5)
        {
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Unsupported compression type : ", 31);
          std::ostream::operator<<();
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v116, &v114);
          value_high = SHIBYTE(v114.__end_cap_.__value_);
          if (a3)
          {
            if (SHIBYTE(v114.__end_cap_.__value_) >= 0)
              v33 = (const char *)&v114;
            else
              v33 = (const char *)v114.__begin_;
            *a3 = strdup(v33);
          }
          if (value_high < 0)
            operator delete(v114.__begin_);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
          v31 = 0;
          v12 = 4294967288;
          goto LABEL_94;
        }
        v34 = v112;
        if (v28 == 3)
          v34 = 16;
        v112 = v34;
LABEL_91:
        v31 = 1;
        goto LABEL_94;
      }
      if (std::string::compare(&v122, "channels"))
      {
        if (!std::string::compare(&v122, "dataWindow"))
        {
          if ((unint64_t)v119 - *(_QWORD *)v118 <= 0xC)
            std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
          v109 = **(_DWORD **)v118;
          v105 = *(_DWORD *)(*(_QWORD *)v118 + 4);
          v31 = 1;
          __n = *(_DWORD *)(*(_QWORD *)v118 + 8);
          v107 = *(_DWORD *)(*(_QWORD *)v118 + 12);
          goto LABEL_94;
        }
        if (!std::string::compare(&v122, "displayWindow") && (unint64_t)v119 - *(_QWORD *)v118 <= 0xC)
          std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
        goto LABEL_91;
      }
      if (tinyexr::ReadChannelInfo(&v123, (uint64_t)v118))
      {
        v103 = -858993459 * ((unint64_t)(v124 - v123) >> 3);
        if (v103 > 0)
          goto LABEL_91;
        std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid channels format");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Failed to parse channel info");
      }
      v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (a3)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &__p;
        else
          v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *a3 = strdup((const char *)v36);
      }
      if (v35 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Failed to parse attribute\n", 26);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v116, &v114);
      v29 = SHIBYTE(v114.__end_cap_.__value_);
      if (a3)
      {
        if (SHIBYTE(v114.__end_cap_.__value_) >= 0)
          v30 = (const char *)&v114;
        else
          v30 = (const char *)v114.__begin_;
        *a3 = strdup(v30);
      }
      if (v29 < 0)
        operator delete(v114.__begin_);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&__p);
    }
    v31 = 0;
    v12 = 4294967292;
LABEL_94:
    if (*(_QWORD *)v118)
    {
      v119 = *(int **)v118;
      operator delete(*(void **)v118);
    }
    if (SHIBYTE(v121.__end_cap_.__value_) < 0)
      operator delete(v121.__begin_);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    if ((v31 & 1) == 0)
      goto LABEL_203;
  }
  if (v109 < 0)
  {
    v97 = "dx >= 0";
    v98 = 14030;
    goto LABEL_212;
  }
  if (v105 < 0)
  {
    v97 = "dy >= 0";
    v98 = 14031;
    goto LABEL_212;
  }
  if (__n < 0)
  {
    v97 = "dw >= 0";
    v98 = 14032;
    goto LABEL_212;
  }
  if (v107 < 0)
  {
    v97 = "dh >= 0";
    v98 = 14033;
    goto LABEL_212;
  }
  if (v103 <= 0)
  {
    v97 = "num_channels >= 1";
    v98 = 14034;
LABEL_212:
    __assert_rtn("LoadDeepEXR", "tinyexr.h", v98, v97);
  }
  v37 = v107 - v105;
  v38 = v107 - v105 + 1;
  v102 = __n - v109 + 1;
  std::vector<float>::vector(&__p, 4 * v38 * v102);
  v101 = v38;
  v39 = v38 / v112;
  if (v38 / v112 * v112 <= v107 - v105)
    ++v39;
  v40 = v39;
  std::vector<long long>::vector(&v122, v39);
  v106 = v40;
  if ((_DWORD)v40)
  {
    v41 = (uint64_t *)(v26 + 1);
    v42 = (_QWORD *)v122.__r_.__value_.__r.__words[0];
    v43 = v40;
    do
    {
      v44 = *v41++;
      *v42++ = v44;
      --v43;
    }
    while (v43);
  }
  if (v28 >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v121, "Unsupported compression format");
    v95 = SHIBYTE(v121.__end_cap_.__value_);
    if (a3)
    {
      if (SHIBYTE(v121.__end_cap_.__value_) >= 0)
        v96 = (const char *)&v121;
      else
        v96 = (const char *)v121.__begin_;
      *a3 = strdup(v96);
    }
    if (v95 < 0)
      operator delete(v121.__begin_);
    v12 = 4294967288;
    goto LABEL_199;
  }
  v45 = 0;
  *(_QWORD *)(a1 + 8) = malloc_type_malloc(8 * v103, 0x80040B8603338uLL);
  v46 = 8 * (int)v101;
  do
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v45++) = malloc_type_malloc(v46, 0x80040B8603338uLL);
  while (v103 != v45);
  *(_QWORD *)(a1 + 16) = malloc_type_malloc(v46, 0x10040436913F5uLL);
  if ((v37 & 0x80000000) == 0)
  {
    v47 = 0;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v47++) = malloc_type_malloc(4 * v102, 0x100004052888210uLL);
    while (v101 != v47);
  }
  if (!(_DWORD)v40)
  {
LABEL_184:
    *(_DWORD *)(a1 + 28) = v102;
    *(_DWORD *)(a1 + 32) = v101;
    v91 = 0;
    v92 = 0;
    *(_QWORD *)a1 = malloc_type_malloc(8 * v103, 0x50040EE9192B6uLL);
    if ((unint64_t)v103 <= 1)
      v93 = 1;
    else
      v93 = v103;
    do
    {
      v94 = (const char *)(v123 + v91);
      if (*(char *)(v123 + v91 + 23) < 0)
        v94 = *(const char **)v94;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v92++) = strdup(v94);
      v91 += 40;
    }
    while (v93 != v92);
    v12 = 0;
    *(_DWORD *)(a1 + 24) = v103;
    goto LABEL_199;
  }
  v48 = 0;
  v49 = v102;
  if ((unint64_t)v102 <= 1)
    v49 = 1;
  v99 = v49;
  v100 = __n - v109;
  v50 = v103;
  if ((unint64_t)v103 <= 1)
    v50 = 1;
  v113 = v50;
  while (2)
  {
    v51 = &begin[*(_QWORD *)(v122.__r_.__value_.__r.__words[0] + 8 * v48)];
    v110 = *(_QWORD *)(v51 + 4);
    v52 = *(_QWORD *)(v51 + 12);
    v53 = *(int **)(v51 + 20);
    std::vector<int>::vector(&v121, v102);
    *(_QWORD *)v118 = (char *)v121.__end_ - (char *)v121.__begin_;
    if (v121.__end_ == v121.__begin_)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (!tinyexr::DecompressZip((tinyexr *)v121.__begin_, v118, v51 + 28, v110))
    {
      v12 = 0;
      v90 = 1;
      goto LABEL_180;
    }
    v54 = v121.__begin_;
    if (*(_QWORD *)v118 != (char *)v121.__end_ - (char *)v121.__begin_)
      __assert_rtn("LoadDeepEXR", "tinyexr.h", 14135, "dstLen == pixelOffsetTable.size() * sizeof(int)");
    if (v102)
    {
      v55 = *(_DWORD **)(*(_QWORD *)(a1 + 16) + 8 * v48);
      v56 = v99;
      do
      {
        v57 = *v54++;
        *v55++ = v57;
        --v56;
      }
      while (v56);
    }
    std::vector<unsigned char>::vector(v118, (size_t)v53);
    v114.__begin_ = v53;
    if (v53)
    {
      if (v119 == *(int **)v118)
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      if (!tinyexr::DecompressZip(*(tinyexr **)v118, (unsigned __int8 *)&v114, &v51[v110 + 28], v52))
      {
        v12 = 0;
        v90 = 1;
        goto LABEL_178;
      }
      if (v114.__begin_ != v53)
        __assert_rtn("LoadDeepEXR", "tinyexr.h", 14154, "dstLen == static_cast<unsigned long>(unpackedSampleDataSize)");
    }
    std::vector<int>::vector(&v114, v103);
    LODWORD(v58) = 0;
    v60 = v113;
    v59 = v114.__begin_;
    v61 = (int *)(v123 + 24);
    do
    {
      *v59 = v58;
      v63 = *v61;
      v61 += 10;
      v62 = v63;
      if (v63 >= 3)
        __assert_rtn("LoadDeepEXR", "tinyexr.h", 14173, "0");
      v58 = (int)dword_23C603E20[v62] + (uint64_t)(int)v58;
      ++v59;
      --v60;
    }
    while (v60);
    v64 = v121.__begin_[v100];
    if ((int *)((char *)v119 - *(_QWORD *)v118) != (int *)(v64 * v58))
      __assert_rtn("LoadDeepEXR", "tinyexr.h", 14182, "static_cast<size_t>( pixelOffsetTable[static_cast<size_t>(data_width - 1)] * sampleSize) == sample_data.size()");
    v65 = 0;
    v66 = 0;
    v67 = 4 * v64;
    v108 = 2 * v64;
    v111 = v121.__begin_[v100];
    if (v64 <= 1)
      v68 = 1;
    else
      v68 = v121.__begin_[v100];
    while (2)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v65) + 8 * v48) = malloc_type_malloc(v67, 0x100004052888210uLL);
      v69 = *(_DWORD *)(v123 + 40 * v65 + 24);
      if (!v69)
      {
        v70 = v67;
        if (!v111)
          goto LABEL_172;
        v82 = 0;
        v83 = (char *)v119 - *(_QWORD *)v118;
        v84 = *(_QWORD *)v118 + v66;
        v85 = v66;
        do
        {
          if ((unint64_t)v83 <= v85)
            std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
          *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v65) + 8 * v48) + 4 * v82) = (float)*(unsigned int *)(v84 + 4 * v82);
          ++v82;
          v85 += 4;
        }
        while (v68 != v82);
LABEL_171:
        v70 = v67;
        goto LABEL_172;
      }
      if (v69 != 1)
      {
        v70 = v67;
        if (!v111)
          goto LABEL_172;
        v86 = 0;
        v87 = (char *)v119 - *(_QWORD *)v118;
        v88 = *(_QWORD *)v118 + v66;
        v89 = v66;
        do
        {
          if ((unint64_t)v87 <= v89)
            std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v65) + 8 * v48) + 4 * v86) = *(_DWORD *)(v88 + 4 * v86);
          ++v86;
          v89 += 4;
        }
        while (v68 != v86);
        goto LABEL_171;
      }
      v70 = v108;
      if (v111)
      {
        v71 = 0;
        v72 = *(int **)v118;
        v73 = (char *)v119 - *(_QWORD *)v118;
        v74 = v66;
        do
        {
          if ((unint64_t)v73 <= v74)
            std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
          v75 = *((unsigned __int8 *)v72 + v74 + 1);
          v76 = (char)v75;
          v75 <<= 21;
          v77 = v75 | (*((unsigned __int8 *)v72 + v74) << 13);
          v78 = v75 & 0xF800000;
          v79 = COERCE_FLOAT((v77 & 0xFFFE000) + 947912704) + -0.000061035;
          if (v78)
            LODWORD(v79) = (v77 & 0xFFFE000) + 939524096;
          v80 = v77 | 0x70000000;
          if (v78 == 260046848)
            v81 = *(float *)&v80;
          else
            v81 = v79;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v65) + 8 * v48) + 4 * v71++) = LODWORD(v81) | v76 & 0x80000000;
          v74 += 2;
        }
        while (v68 != v71);
        v70 = v108;
      }
LABEL_172:
      v66 += v70;
      if (++v65 != v113)
        continue;
      break;
    }
    if (v114.__begin_)
    {
      v114.__end_ = v114.__begin_;
      operator delete(v114.__begin_);
    }
    v90 = 0;
LABEL_178:
    if (*(_QWORD *)v118)
    {
      v119 = *(int **)v118;
      operator delete(*(void **)v118);
    }
LABEL_180:
    if (v121.__begin_)
    {
      v121.__end_ = v121.__begin_;
      operator delete(v121.__begin_);
    }
    if (!v90)
    {
      if (++v48 == v106)
        goto LABEL_184;
      continue;
    }
    break;
  }
LABEL_199:
  if (v122.__r_.__value_.__r.__words[0])
  {
    v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
    operator delete(v122.__r_.__value_.__l.__data_);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_203:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_54:
  if (v126.__begin_)
  {
    v126.__end_ = v126.__begin_;
    operator delete(v126.__begin_);
  }
  return v12;
}

void sub_23C4F4EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  v28 = *(void **)(v26 - 168);
  if (v28)
  {
    *(_QWORD *)(v26 - 160) = v28;
    operator delete(v28);
  }
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  __p = (void *)(v26 - 144);
  std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v29 = *(void **)(v26 - 120);
  if (v29)
  {
    *(_QWORD *)(v26 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t tinyexr::ReadAttribute(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4, char *__s1, size_t __n)
{
  size_t v12;
  size_t v13;
  char *v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  BOOL v20;
  size_t v21;
  char *v22;
  size_t v23;
  char *v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  __int128 __dst;
  uint64_t v30;

  v12 = strnlen(__s1, __n);
  if (v12 == __n)
    return 0;
  v13 = v12;
  std::string::basic_string[abi:ne180100](&__dst, __s1, v12);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v30;
  v14 = &__s1[v13 + 1];
  v15 = __n - (v13 + 1);
  v16 = strnlen(v14, v15);
  if (v16 == v15)
    return 0;
  v17 = v16;
  std::string::basic_string[abi:ne180100](&__dst, v14, v16);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v30;
  v18 = v17 + 1;
  v19 = v15 - (v17 + 1);
  v20 = v19 >= 4;
  v21 = v19 - 4;
  if (!v20)
    return 0;
  v22 = &v14[v18];
  v23 = *(unsigned int *)&v14[v18];
  if (!(_DWORD)v23)
  {
    if (!std::string::compare((const std::string *)a2, "string"))
    {
      *a4 = v13 + v17 + 6;
      v27 = 1;
      std::vector<unsigned char>::resize(a3, 1uLL);
      *(_BYTE *)*a3 = 0;
      return v27;
    }
    return 0;
  }
  if (v21 < v23)
    return 0;
  v24 = (char *)*a3;
  v25 = (char *)a3[1];
  v26 = (size_t)&v25[-*a3];
  if (v23 <= v26)
  {
    if (v23 < v26)
    {
      v25 = &v24[v23];
      a3[1] = (unint64_t)&v24[v23];
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a3, v23 - v26);
    v24 = (char *)*a3;
    v25 = (char *)a3[1];
  }
  if (v25 == v24)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  memcpy(v24, v22 + 4, v23);
  *a4 = v13 + v17 + v23 + 6;
  return 1;
}

BOOL tinyexr::ReadChannelInfo(uint64_t *a1, uint64_t a2)
{
  char *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char v20;
  __int128 v21;
  uint64_t v22;

  v3 = *(char **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  while (1)
  {
    v5 = *v3;
    if (!*v3)
      return v5 == 0;
    __p[0] = 0;
    __p[1] = 0;
    v16 = 0;
    v6 = *(_QWORD *)(a2 + 8) - (_QWORD)v3;
    if (v6 >= 0)
    {
      if (v6)
      {
        if (!*v3)
        {
          v8 = 0;
          v10 = v3;
LABEL_18:
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v21, v3, v10, v8);
          if (SHIBYTE(v16) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = v21;
          v16 = v22;
          v3 = v10 + 17;
          if ((unint64_t)(v10 + 17) >= *(_QWORD *)(a2 + 8))
          {
            v11 = 0;
            v3 = v10 + 1;
          }
          else
          {
            v17 = *(_DWORD *)(v10 + 1);
            v20 = v10[5];
            v18 = *(_DWORD *)(v10 + 9);
            v19 = *(_DWORD *)(v10 + 13);
            v12 = a1[1];
            if (v12 >= a1[2])
            {
              v13 = std::vector<tinyexr::ChannelInfo>::__push_back_slow_path<tinyexr::ChannelInfo const&>(a1, (__int128 *)__p);
            }
            else
            {
              std::vector<tinyexr::ChannelInfo>::__construct_one_at_end[abi:ne180100]<tinyexr::ChannelInfo const&>((uint64_t)a1, (__int128 *)__p);
              v13 = v12 + 40;
            }
            a1[1] = v13;
            v11 = 1;
          }
          goto LABEL_12;
        }
        v7 = 0;
        while (1)
        {
          v8 = v7 + 1;
          if (v7 + 1 >= (unint64_t)v6)
            break;
          if (!v3[++v7])
          {
            v10 = &v3[v8];
            goto LABEL_18;
          }
        }
      }
      v3 = 0;
    }
    v11 = 0;
LABEL_12:
    if (SHIBYTE(v16) < 0)
    {
      operator delete(__p[0]);
      if ((v11 & 1) == 0)
        return v5 == 0;
    }
    else if ((v11 & 1) == 0)
    {
      return v5 == 0;
    }
  }
}

void sub_23C4F5384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL tinyexr::DecompressZip(tinyexr *this, unsigned __int8 *a2, void *__src, size_t __n)
{
  tinyexr *v7;
  size_t v8;
  _BOOL8 v9;
  int v10;
  _BYTE *v11;
  _BYTE *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  tinyexr *v18;
  unint64_t v19;
  _BYTE *v20;
  tinyexr *v21;
  char v22;
  void *__p;
  _BYTE *v24;

  v7 = this;
  v8 = *(_QWORD *)a2;
  if (v8 == __n)
  {
    memcpy(this, __src, __n);
    return 1;
  }
  else
  {
    std::vector<unsigned char>::vector(&__p, v8);
    if (v24 == __p)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    v10 = mz_uncompress((uint64_t)__p, (uint64_t *)a2, (uint64_t)__src, __n);
    v9 = v10 == 0;
    v11 = __p;
    if (!v10)
    {
      v13 = v24;
      if (v24 == __p)
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      if (*(uint64_t *)a2 >= 2)
      {
        v14 = (char *)__p + *(_QWORD *)a2;
        v15 = (char *)__p + 1;
        v16 = *(unsigned __int8 *)__p;
        do
        {
          v16 = (*v15 + v16) ^ 0xFFFFFF80;
          *v15++ = v16;
        }
        while (v15 < v14);
        v11 = __p;
        v13 = v24;
      }
      if (v13 == v11)
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v17 = *(_QWORD *)a2;
      if (*(uint64_t *)a2 >= 1)
      {
        v18 = (tinyexr *)((char *)v7 + v17);
        v19 = (unint64_t)(v17 + 1) >> 1;
        v20 = v11;
        do
        {
          *(_BYTE *)v7 = *v20;
          v21 = (tinyexr *)((char *)v7 + 1);
          if (v21 >= v18)
            break;
          v22 = v20[v19];
          ++v20;
          *(_BYTE *)v21 = v22;
          v7 = (tinyexr *)((char *)v21 + 1);
        }
        while (v7 < v18);
      }
    }
    if (v11)
    {
      v24 = v11;
      operator delete(v11);
    }
  }
  return v9;
}

void sub_23C4F54F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FreeEXRErrorMessage(void *a1)
{
  if (a1)
    free(a1);
}

char *EXRSetNameAttr(char *result, char *__s)
{
  void *v3;
  size_t v4;

  if (result)
  {
    *(_OWORD *)(result + 136) = 0u;
    v3 = result + 136;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    if (__s)
    {
      result = (char *)strlen(__s);
      if ((unint64_t)result >= 0xFF)
        v4 = 255;
      else
        v4 = (size_t)result;
      if (v4)
        return (char *)memcpy(v3, __s, v4);
    }
  }
  return result;
}

uint64_t EXRNumLevels(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return 1;
  do
  {
    a1 = *(_QWORD *)(a1 + 8);
    v1 = (v1 + 1);
  }
  while (a1);
  return v1;
}

uint64_t ParseEXRMultipartHeaderFromMemory(void **a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unint64_t a5, char **a6)
{
  uint64_t v6;
  int v9;
  void **v10;
  int v11;
  void **v12;
  char *v14;
  size_t v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  tinyexr::HeaderInfo *v19;
  tinyexr::HeaderInfo *v20;
  int v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  void *v30[2];
  char v31;
  char v32;
  std::string v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  tinyexr::HeaderInfo *v42;
  tinyexr::HeaderInfo *v43;
  unint64_t v44;

  if (a3 && a2 && a1 && a4)
  {
    if (a5 > 7)
    {
      v14 = (char *)(a4 + 8);
      v15 = a5 - 8;
      v42 = 0;
      v43 = 0;
      v44 = 0;
      do
      {
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)__p = 0u;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        tinyexr::HeaderInfo::clear((tinyexr::HeaderInfo *)__p);
        memset(&v33, 0, sizeof(v33));
        v32 = 0;
        v16 = tinyexr::ParseEXRHeader((uint64_t)__p, &v32, a3, &v33, v14, v15);
        if ((_DWORD)v16)
        {
          if (a6)
          {
            if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v17 = &v33;
            else
              v17 = (std::string *)v33.__r_.__value_.__r.__words[0];
            *a6 = strdup((const char *)v17);
          }
          v18 = 1;
          v6 = v16;
        }
        else if (v32)
        {
          ++v14;
          v18 = 2;
        }
        else if (v37)
        {
          v19 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v20 = (tinyexr::HeaderInfo *)std::vector<tinyexr::HeaderInfo>::__push_back_slow_path<tinyexr::HeaderInfo const&>((uint64_t *)&v42, (const tinyexr::HeaderInfo *)__p);
          }
          else
          {
            tinyexr::HeaderInfo::HeaderInfo(v43, (const tinyexr::HeaderInfo *)__p);
            v20 = (tinyexr::HeaderInfo *)((char *)v19 + 184);
          }
          v18 = 0;
          v43 = v20;
          v14 += v38;
        }
        else
        {
          v21 = v31;
          if (a6)
          {
            if (v31 >= 0)
              v22 = v30;
            else
              v22 = (void **)v30[0];
            *a6 = strdup((const char *)v22);
          }
          if (v21 < 0)
            operator delete(v30[0]);
          v18 = 1;
          v6 = 4294967292;
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41) < 0)
          operator delete(*((void **)&v40 + 1));
        if (SBYTE7(v40) < 0)
          operator delete((void *)v39);
        if (*((_QWORD *)&v35 + 1))
        {
          *(_QWORD *)&v36 = *((_QWORD *)&v35 + 1);
          operator delete(*((void **)&v35 + 1));
        }
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
      }
      while (!v18);
      if (v18 == 2)
      {
        *a1 = malloc_type_malloc(0x9BD37A6F4DE9BD38 * ((unint64_t)(v43 - v42) >> 3), 0x2004093837F09uLL);
        if (v43 == v42)
        {
          LODWORD(v27) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = malloc_type_malloc(0x188uLL, 0x10300407F37539EuLL);
            v25[48] = 0;
            *((_OWORD *)v25 + 22) = 0u;
            *((_OWORD *)v25 + 23) = 0u;
            *((_OWORD *)v25 + 20) = 0u;
            *((_OWORD *)v25 + 21) = 0u;
            *((_OWORD *)v25 + 18) = 0u;
            *((_OWORD *)v25 + 19) = 0u;
            *((_OWORD *)v25 + 16) = 0u;
            *((_OWORD *)v25 + 17) = 0u;
            *((_OWORD *)v25 + 14) = 0u;
            *((_OWORD *)v25 + 15) = 0u;
            *((_OWORD *)v25 + 12) = 0u;
            *((_OWORD *)v25 + 13) = 0u;
            *((_OWORD *)v25 + 10) = 0u;
            *((_OWORD *)v25 + 11) = 0u;
            *((_OWORD *)v25 + 8) = 0u;
            *((_OWORD *)v25 + 9) = 0u;
            *((_OWORD *)v25 + 6) = 0u;
            *((_OWORD *)v25 + 7) = 0u;
            *((_OWORD *)v25 + 4) = 0u;
            *((_OWORD *)v25 + 5) = 0u;
            *((_OWORD *)v25 + 2) = 0u;
            *((_OWORD *)v25 + 3) = 0u;
            v26 = (uint64_t *)((char *)v42 + v23);
            *(_OWORD *)v25 = 0u;
            *((_OWORD *)v25 + 1) = 0u;
            tinyexr::ConvertHeader((uint64_t)v25, v26);
            *((_DWORD *)v25 + 21) = a3[4] != 0;
            *((_QWORD *)*a1 + v24++) = v25;
            v27 = 0xD37A6F4DE9BD37A7 * ((v43 - v42) >> 3);
            v23 += 184;
          }
          while (v24 < v27);
        }
        v6 = 0;
        *a2 = v27;
      }
      __p[0] = &v42;
      std::vector<tinyexr::HeaderInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Data size too short");
      v9 = SBYTE7(v35);
      if (a6)
      {
        if ((SBYTE7(v35) & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *a6 = strdup((const char *)v10);
      }
      if (v9 < 0)
        operator delete(__p[0]);
      return 4294967292;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid argument for ParseEXRMultipartHeaderFromMemory");
    v11 = SBYTE7(v35);
    if (a6)
    {
      if ((SBYTE7(v35) & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *a6 = strdup((const char *)v12);
    }
    if (v11 < 0)
      operator delete(__p[0]);
    return 4294967293;
  }
  return v6;
}

void sub_23C4F5968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  uint64_t v20;

  a20 = v20 - 112;
  std::vector<tinyexr::HeaderInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t ParseEXRMultipartHeaderFromFile(void **a1, _DWORD *a2, _DWORD *a3, char *__filename, char **a5)
{
  FILE *v10;
  FILE *v11;
  size_t v12;
  uint64_t v13;
  int v14;
  std::string *v15;
  std::string *v16;
  int v17;
  std::string *p_ptr;
  std::string v20;
  std::string __ptr;

  if (a1 && a2 && a3 && __filename)
  {
    v10 = fopen(__filename, "rb");
    if (v10)
    {
      v11 = v10;
      fseek(v10, 0, 2);
      v12 = MEMORY[0x2426213A4](v11);
      fseek(v11, 0, 0);
      std::vector<unsigned char>::vector(&__ptr, v12);
      if (fread(__ptr.__r_.__value_.__l.__data_, 1uLL, v12, v11) != v12)
        __assert_rtn("ParseEXRMultipartHeaderFromFile", "tinyexr.h", 14542, "ret == filesize");
      fclose(v11);
      if (__ptr.__r_.__value_.__l.__size_ == __ptr.__r_.__value_.__r.__words[0])
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v13 = ParseEXRMultipartHeaderFromMemory(a1, a2, a3, (uint64_t)__ptr.__r_.__value_.__l.__data_, v12, a5);
      if (__ptr.__r_.__value_.__r.__words[0])
      {
        __ptr.__r_.__value_.__l.__size_ = __ptr.__r_.__value_.__r.__words[0];
        operator delete(__ptr.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, __filename);
      v16 = std::string::insert(&v20, 0, "Cannot read file ", 0x11uLL);
      __ptr = *v16;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v17 = SHIBYTE(__ptr.__r_.__value_.__r.__words[2]);
      if (a5)
      {
        if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_ptr = &__ptr;
        else
          p_ptr = (std::string *)__ptr.__r_.__value_.__r.__words[0];
        *a5 = strdup((const char *)p_ptr);
      }
      if (v17 < 0)
        operator delete(__ptr.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      return 4294967289;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__ptr, "Invalid argument for ParseEXRMultipartHeaderFromFile()");
    v14 = SHIBYTE(__ptr.__r_.__value_.__r.__words[2]);
    if (a5)
    {
      if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__ptr;
      else
        v15 = (std::string *)__ptr.__r_.__value_.__r.__words[0];
      *a5 = strdup((const char *)v15);
    }
    if (v14 < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    return 4294967293;
  }
  return v13;
}

void sub_23C4F5BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LoadEXRMultipartImageFromMemory(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, char **a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD ***v19;
  _DWORD *v20;
  int inited;
  int v22;
  int v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  const char *v48;
  int value_high;
  const char *begin;
  int v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  std::vector<unsigned int>::pointer v74;
  const char *v75;
  int v76;
  const char *v77;
  BOOL v80;
  int v81[2];
  unint64_t v82;
  void *__p[2];
  char v84;
  std::vector<unsigned int> v85;
  std::vector<unsigned int> v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;

  if (!a1 || !a2 || !a3 || (v8 = a4) == 0 || a5 < 9)
  {
    v46 = "Invalid argument for LoadEXRMultipartImageFromMemory()";
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(&v87, v46);
    v47 = SHIBYTE(v89);
    if (a6)
    {
      if (v89 >= 0)
        v48 = (const char *)&v87;
      else
        v48 = (const char *)v87;
      *a6 = strdup(v48);
    }
    if (v47 < 0)
      operator delete(v87);
    return 4294967293;
  }
  v10 = 0;
  v11 = a3;
  v12 = a2;
  do
  {
    v13 = *(unsigned int *)(*(_QWORD *)v12 + 88);
    if (!(_DWORD)v13)
    {
      v46 = "EXRHeader variable is not initialized.";
      goto LABEL_46;
    }
    v10 += v13;
    v12 += 8;
    --v11;
  }
  while (v11);
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v82 = a3;
  std::vector<tinyexr::OffsetData>::reserve((uint64_t *)&v87, a3);
  v14 = 0;
  v15 = (unint64_t *)(v8 + v10 + 9);
  v16 = 4294967293;
  v17 = 1;
  while (1)
  {
    std::vector<tinyexr::OffsetData>::resize((uint64_t *)&v87, ((v88 - (uint64_t)v87) >> 5) + 1);
    v18 = v88;
    v19 = (_QWORD ***)(v88 - 32);
    v20 = *(_DWORD **)(a2 + 8 * v14);
    if (!v20[14] || !v20[17])
      break;
    *(_QWORD *)v81 = v8;
    memset(&v86, 0, sizeof(v86));
    memset(&v85, 0, sizeof(v85));
    tinyexr::PrecalculateTileInfo(&v86, &v85, v20);
    v80 = v17;
    inited = tinyexr::InitTileOffsets((uint64_t)v19, *(_QWORD *)(a2 + 8 * v14), &v86, &v85);
    v22 = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v14) + 52);
    if (inited != v22)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Invalid offset table size.");
      v23 = v84;
      if (a6)
      {
        if (v84 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        *a6 = strdup((const char *)v24);
      }
      if (v23 < 0)
        operator delete(__p[0]);
      v16 = 4294967292;
    }
    if (v85.__begin_)
    {
      v85.__end_ = v85.__begin_;
      operator delete(v85.__begin_);
    }
    if (v86.__begin_)
    {
      v86.__end_ = v86.__begin_;
      operator delete(v86.__begin_);
    }
    if (inited != v22)
      goto LABEL_105;
    v25 = *(_QWORD *)(v18 - 32);
    v26 = *(_QWORD *)(v18 - 24) - v25;
    if (v26)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
      while (1)
      {
        v31 = (uint64_t *)(v25 + 24 * v27);
        v30 = *v31;
        v32 = v31[1] - *v31;
        if (v32)
          break;
LABEL_35:
        v27 = ++v28;
        if (v29 <= v28)
        {
          v8 = *(_QWORD *)v81;
          goto LABEL_42;
        }
      }
      v33 = 0;
      v34 = 0;
      v35 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 3);
      v8 = *(_QWORD *)v81;
      while (1)
      {
        v37 = (uint64_t *)(v30 + 24 * v33);
        v36 = *v37;
        v38 = v37[1] - *v37;
        if (v38)
          break;
LABEL_34:
        v33 = ++v34;
        if (v35 <= v34)
          goto LABEL_35;
      }
      v39 = 0;
      v40 = v38 >> 3;
      v41 = 1;
      while (*v15 < a5)
      {
        *(_QWORD *)(v36 + 8 * v39) = *v15++ + 4;
        v39 = v41;
        v42 = v40 > v41++;
        if (!v42)
          goto LABEL_34;
      }
      std::string::basic_string[abi:ne180100]<0>(&v86, "Invalid offset size in EXR header chunks.");
      value_high = SHIBYTE(v86.__end_cap_.__value_);
      if (a6)
      {
        if (SHIBYTE(v86.__end_cap_.__value_) >= 0)
          begin = (const char *)&v86;
        else
          begin = (const char *)v86.__begin_;
        *a6 = strdup(begin);
      }
      if (value_high < 0)
        operator delete(v86.__begin_);
      v16 = 4294967292;
      if (v80)
        goto LABEL_105;
LABEL_71:
      v53 = 0;
      v54 = v16;
      while (1)
      {
        v55 = (char *)v87 + 32 * v53;
        v56 = v55[1] - *v55;
        if (v56)
          break;
LABEL_82:
        memset(&v86, 0, sizeof(v86));
        v72 = tinyexr::DecodeChunk(a1 + 48 * v53, *(_QWORD *)(a2 + 8 * v53), (uint64_t)v55, v8, a5, (std::string *)&v86);
        v16 = v72;
        v73 = HIBYTE(v86.__end_cap_.__value_);
        if ((_DWORD)v72)
        {
          v74 = SHIBYTE(v86.__end_cap_.__value_) >= 0
              ? (std::vector<unsigned int>::pointer)HIBYTE(v86.__end_cap_.__value_)
              : v86.__end_;
          v54 = v72;
          if (a6)
          {
            v54 = v72;
            if (v74)
            {
              if (SHIBYTE(v86.__end_cap_.__value_) >= 0)
                v75 = (const char *)&v86;
              else
                v75 = (const char *)v86.__begin_;
              *a6 = strdup(v75);
              v54 = v16;
            }
          }
        }
        if (v73 < 0)
          operator delete(v86.__begin_);
        if ((_DWORD)v16)
        {
          v16 = v54;
          goto LABEL_105;
        }
        if (++v53 == v82)
          goto LABEL_105;
      }
      v57 = 0;
      v58 = 0;
      v59 = 0xAAAAAAAAAAAAAAABLL * (v56 >> 3);
      while (1)
      {
        v61 = (uint64_t *)(*v55 + 24 * v57);
        v60 = *v61;
        v62 = v61[1] - *v61;
        if (v62)
          break;
LABEL_81:
        v57 = ++v58;
        if (v59 <= v58)
          goto LABEL_82;
      }
      v63 = 0;
      v64 = 0;
      v65 = 0xAAAAAAAAAAAAAAABLL * (v62 >> 3);
      while (1)
      {
        v67 = (uint64_t *)(v60 + 24 * v63);
        v66 = *v67;
        v68 = v67[1] - *v67;
        if (v68)
          break;
LABEL_80:
        v63 = ++v64;
        if (v65 <= v64)
          goto LABEL_81;
      }
      v69 = 0;
      v70 = v68 >> 3;
      v71 = 1;
      while (v53 == *(_DWORD *)(v8 - 4 + *(_QWORD *)(v66 + 8 * v69)))
      {
        v69 = v71;
        v42 = v70 > v71++;
        if (!v42)
          goto LABEL_80;
      }
      v76 = SHIBYTE(v86.__end_cap_.__value_);
      if (a6)
      {
        if (SHIBYTE(v86.__end_cap_.__value_) >= 0)
          v77 = (const char *)&v86;
        else
          v77 = (const char *)v86.__begin_;
        *a6 = strdup(v77);
      }
      if (v76 < 0)
        operator delete(v86.__begin_);
      v16 = 4294967292;
      goto LABEL_105;
    }
LABEL_42:
    v17 = ++v14 < v82;
    if (v14 == v82)
      goto LABEL_71;
  }
  tinyexr::InitSingleResolutionOffsets((uint64_t *)(v88 - 32), (int)v20[13]);
  v43 = (_QWORD *)***v19;
  v44 = (**v19)[1] - (_QWORD)v43;
  if (!v44)
    goto LABEL_42;
  v45 = v44 >> 3;
  if (v45 <= 1)
    v45 = 1;
  while (*v15 < a5)
  {
    *v43++ = *v15++ + 4;
    if (!--v45)
      goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(&v86, "Invalid offset size in EXR header chunks.");
  v51 = SHIBYTE(v86.__end_cap_.__value_);
  if (a6)
  {
    if (SHIBYTE(v86.__end_cap_.__value_) >= 0)
      v52 = (const char *)&v86;
    else
      v52 = (const char *)v86.__begin_;
    *a6 = strdup(v52);
  }
  if (v51 < 0)
    operator delete(v86.__begin_);
  v16 = 4294967292;
  if (!v17)
    goto LABEL_71;
LABEL_105:
  v86.__begin_ = (std::vector<unsigned int>::pointer)&v87;
  std::vector<tinyexr::OffsetData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  return v16;
}

void sub_23C4F6164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
    operator delete(__p);
  __p = &a25;
  std::vector<tinyexr::OffsetData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void **std::vector<tinyexr::OffsetData>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<tinyexr::OffsetData>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<tinyexr::OffsetData>::~__split_buffer(v7);
  }
  return result;
}

void sub_23C4F6254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<tinyexr::OffsetData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<tinyexr::OffsetData>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;

  v3 = (void **)a1[1];
  v4 = ((uint64_t)v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != (void **)v5)
      {
        v3 -= 4;
        v6 = v3;
        std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<tinyexr::OffsetData>::__append(a1, a2 - v4);
  }
}

double tinyexr::InitSingleResolutionOffsets(uint64_t *a1, unint64_t a2)
{
  double result;

  std::vector<std::vector<std::vector<unsigned long long>>>::resize(a1, 1uLL);
  std::vector<std::vector<unsigned long long>>::resize((uint64_t *)*a1, 1uLL);
  std::vector<unsigned long long>::resize(*(_QWORD *)*a1, a2);
  *(_QWORD *)&result = 0x100000001;
  a1[3] = 0x100000001;
  return result;
}

uint64_t *tinyexr::PrecalculateTileInfo(std::vector<unsigned int> *this, std::vector<unsigned int> *a2, _DWORD *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;

  v7 = a3[2];
  v6 = a3[3];
  v9 = a3[4];
  v8 = a3[5];
  v10 = a3[17];
  if (v10)
  {
    if (v10 == 2)
    {
      v18 = v9 - v7 + 1;
      v12 = a3[18];
      if (v12)
      {
        if (v18 < 2)
        {
          v20 = v8 - v6 + 1;
          v16 = 1;
          if (v20 > 1)
          {
LABEL_36:
            v21 = 0;
            v22 = 0;
            do
            {
              if ((v20 & 1) != 0)
                v21 = 1;
              ++v22;
              v15 = v20 > 3;
              v20 >>= 1;
            }
            while (v15);
LABEL_50:
            v24 = v21 + v22;
LABEL_61:
            v17 = v24 + 1;
            goto LABEL_62;
          }
LABEL_60:
          v24 = 0;
          goto LABEL_61;
        }
        v13 = 0;
        v14 = 0;
        do
        {
          if ((v18 & 1) != 0)
            v13 = 1;
          ++v14;
          v15 = v18 > 3;
          v18 >>= 1;
        }
        while (v15);
LABEL_21:
        v19 = v13 + v14;
        goto LABEL_30;
      }
      if (v18 < 2)
      {
        v20 = v8 - v6 + 1;
        v16 = 1;
        if (v20 <= 1)
          goto LABEL_60;
        goto LABEL_56;
      }
      v19 = 0;
      do
      {
        ++v19;
        v15 = v18 > 3;
        v18 >>= 1;
      }
      while (v15);
    }
    else
    {
      if (v10 != 1)
        tinyexr::PrecalculateTileInfo();
      if (v9 - v7 + 1 <= v8 - v6 + 1)
        v11 = v8 - v6 + 1;
      else
        v11 = v9 - v7 + 1;
      v12 = a3[18];
      if (v12)
      {
        if (v11 < 2)
        {
          v16 = 1;
          v12 = 1;
          goto LABEL_42;
        }
        v13 = 0;
        v14 = 0;
        do
        {
          if ((v11 & 1) != 0)
            v13 = 1;
          ++v14;
          v15 = v11 > 3;
          v11 >>= 1;
        }
        while (v15);
        goto LABEL_21;
      }
      if (v11 < 2)
      {
        v12 = 0;
        v16 = 1;
        goto LABEL_42;
      }
      v19 = 0;
      do
      {
        ++v19;
        v15 = v11 > 3;
        v11 >>= 1;
      }
      while (v15);
    }
    v12 = 0;
LABEL_30:
    v16 = v19 + 1;
    if (v10 == 2)
    {
      v20 = v8 - v6 + 1;
      if (v12)
      {
        if (v20 < 2)
          goto LABEL_60;
        goto LABEL_36;
      }
      if (v20 < 2)
        goto LABEL_60;
LABEL_56:
      v24 = 0;
      do
      {
        ++v24;
        v15 = v20 > 3;
        v20 >>= 1;
      }
      while (v15);
      goto LABEL_61;
    }
LABEL_42:
    v23 = v9 - v7 + 1;
    if ((int)v23 <= v8 - v6 + 1)
      v23 = v8 - v6 + 1;
    if (!v12)
    {
      if (v23 >= 2)
      {
        v24 = 0;
        do
        {
          ++v24;
          v15 = v23 > 3;
          v23 >>= 1;
        }
        while (v15);
        goto LABEL_61;
      }
      goto LABEL_60;
    }
    if (v23 >= 2)
    {
      v21 = 0;
      v22 = 0;
      do
      {
        if ((v23 & 1) != 0)
          v21 = 1;
        ++v22;
        v15 = v23 > 3;
        v23 >>= 1;
      }
      while (v15);
      goto LABEL_50;
    }
    goto LABEL_60;
  }
  v16 = 1;
  v17 = 1;
LABEL_62:
  std::vector<int>::resize(this, v16);
  std::vector<int>::resize(a2, v17);
  tinyexr::CalculateNumTiles((uint64_t *)this, (tinyexr *)(v9 - v7 + 1), a3[15], a3[18]);
  return tinyexr::CalculateNumTiles((uint64_t *)a2, (tinyexr *)(v8 - v6 + 1), a3[16], a3[18]);
}

uint64_t tinyexr::InitTileOffsets(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;

  v6 = a3[1] - *a3;
  v7 = (unint64_t)v6 >> 2;
  v8 = (a4[1] - *a4) >> 2;
  *(_DWORD *)(a1 + 24) = (unint64_t)v6 >> 2;
  *(_DWORD *)(a1 + 28) = v8;
  v9 = *(_DWORD *)(a2 + 68);
  if (v9 < 2)
  {
    if ((_DWORD)v7 != (_DWORD)v8)
      tinyexr::InitTileOffsets();
    std::vector<std::vector<std::vector<unsigned long long>>>::resize((uint64_t *)a1, (int)(v6 >> 2));
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        std::vector<std::vector<unsigned long long>>::resize((uint64_t *)(v10 + 24 * v11), *(int *)(*a4 + 4 * v11));
        v10 = *(_QWORD *)a1;
        v14 = (uint64_t *)(*(_QWORD *)a1 + 24 * v11);
        v15 = *v14;
        if (v14[1] != *v14)
        {
          v16 = 0;
          v17 = *(_DWORD *)(*a3 + 4 * v11);
          v18 = 1;
          do
          {
            std::vector<unsigned long long>::resize(v15 + 24 * v16, v17);
            v17 = *(_DWORD *)(*a3 + 4 * v11);
            v13 = (v17 + v13);
            v16 = v18;
            v10 = *(_QWORD *)a1;
            v15 = *(_QWORD *)(*(_QWORD *)a1 + 24 * v11);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)a1 + 24 * v11 + 8) - v15) >> 3) > v18++);
        }
        v11 = ++v12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 8) - v10) >> 3) > v12);
      return v13;
    }
    return 0;
  }
  if (v9 != 2)
    tinyexr::InitTileOffsets();
  std::vector<std::vector<std::vector<unsigned long long>>>::resize((uint64_t *)a1, (int)v8 * (uint64_t)(int)v7);
  v20 = *(_DWORD *)(a1 + 28);
  if (v20 < 1)
    return 0;
  v21 = 0;
  v13 = 0;
  LODWORD(v22) = *(_DWORD *)(a1 + 24);
  do
  {
    if ((int)v22 >= 1)
    {
      v23 = 0;
      v24 = *(_QWORD *)a1;
      do
      {
        v25 = v23 + v22 * v21;
        std::vector<std::vector<unsigned long long>>::resize((uint64_t *)(v24 + 24 * v25), *(int *)(*a4 + 4 * v21));
        v24 = *(_QWORD *)a1;
        v26 = (uint64_t *)(*(_QWORD *)a1 + 24 * v25);
        v27 = *v26;
        if (v26[1] != *v26)
        {
          v28 = 0;
          v29 = 0;
          v30 = *(_DWORD *)(*a3 + 4 * v23);
          do
          {
            std::vector<unsigned long long>::resize(v27 + v28, v30);
            v30 = *(_DWORD *)(*a3 + 4 * v23);
            v13 = (v30 + v13);
            ++v29;
            v24 = *(_QWORD *)a1;
            v27 = *(_QWORD *)(*(_QWORD *)a1 + 24 * v25);
            v28 += 24;
          }
          while (v29 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)a1 + 24 * v25 + 8) - v27) >> 3));
        }
        ++v23;
        v22 = *(int *)(a1 + 24);
      }
      while (v23 < v22);
      v20 = *(_DWORD *)(a1 + 28);
    }
    ++v21;
  }
  while (v21 < v20);
  return v13;
}

uint64_t tinyexr::DecodeChunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, std::string *this)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v20;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  const std::string::value_type *locale;
  std::string::size_type v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  std::locale::__imp *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  _OWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  _QWORD *v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  int *v67;
  size_t v68;
  uint64_t v69;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  signed int v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  void *v92;
  std::string::size_type v93;
  unsigned __int8 v94;
  std::locale v95;
  std::locale::__imp *v96;
  uint64_t v97;
  _QWORD v98[2];
  uint64_t v99;
  _QWORD v100[10];
  char v101;
  uint64_t v102;

  v7 = *(_DWORD *)(a2 + 124);
  if (v7 == 4)
    v8 = 32;
  else
    v8 = 1;
  if (v7 == 128)
    v8 = 16;
  if (v7 == 3)
    v9 = 16;
  else
    v9 = v8;
  v10 = *(_DWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 8);
  v12 = __OFSUB__(v10, v11);
  v13 = v10 - v11;
  if (v13 < 0 != v12
    || (v15 = *(_DWORD *)(a2 + 20),
        v16 = *(_DWORD *)(a2 + 12),
        v12 = __OFSUB__(v15, v16),
        v17 = v15 - v16,
        (v17 < 0) ^ v12))
  {
    if (this)
      std::string::append(this, "Invalid data window.\n", 0x15uLL);
    return 4294967292;
  }
  v20 = v17 + 1;
  if (v13 >= 0x800000 || v17 >= 0x800000)
  {
    if (this)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v98);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"data_with or data_height too large. data_width: ", 48);
      v31 = (_QWORD *)std::ostream::operator<<();
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"data_height = ", 14);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
      v34 = std::locale::use_facet(&v95, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale(&v95);
      std::ostream::put();
      std::ostream::flush();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v100, &v95);
      if (v97 >= 0)
        locale = (const std::string::value_type *)&v95;
      else
        locale = (const std::string::value_type *)v95.__locale_;
      if (v97 >= 0)
        v30 = HIBYTE(v97);
      else
        v30 = (std::string::size_type)v96;
      goto LABEL_35;
    }
    return 4294967292;
  }
  v24 = *(_DWORD *)(a2 + 120);
  if (*(_DWORD *)(a2 + 56) && (*(int *)(a2 + 60) > 0x800000 || *(int *)(a2 + 64) > 0x800000))
  {
    if (this)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v98);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"tile with or tile height too large. tile width: ", 48);
      v25 = (_QWORD *)std::ostream::operator<<();
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"tile height = ", 14);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
      v28 = std::locale::use_facet(&v95, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v95);
      std::ostream::put();
      std::ostream::flush();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v100, &v95);
      if (v97 >= 0)
        locale = (const std::string::value_type *)&v95;
      else
        locale = (const std::string::value_type *)v95.__locale_;
      if (v97 >= 0)
        v30 = HIBYTE(v97);
      else
        v30 = (std::string::size_type)v96;
LABEL_35:
      std::string::append(this, locale, v30);
      if (SHIBYTE(v97) < 0)
        operator delete(v95.__locale_);
      v98[0] = *MEMORY[0x24BEDB7F0];
      v35 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      *(_QWORD *)((char *)v98 + *(_QWORD *)(v98[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v99 = v35;
      v100[0] = MEMORY[0x24BEDB848] + 16;
      if (v101 < 0)
        operator delete((void *)v100[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x242621128](&v102);
      return 4294967292;
    }
    return 4294967292;
  }
  v90 = v13 + 1;
  v36 = v24;
  v37 = **(_QWORD ***)a3;
  v85 = v37;
  v86 = *v37;
  v87 = v37[1];
  v95.__locale_ = 0;
  v96 = 0;
  v97 = 0;
  v38 = *(_QWORD *)(a2 + 104);
  std::vector<unsigned long long>::resize((uint64_t)&v95, v24);
  v88 = v24;
  v89 = v20;
  if (v24)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = v95.__locale_;
    v44 = (int *)(v38 + 256);
    v45 = a1;
    do
    {
      *((_QWORD *)v43 + v42) = v39;
      v46 = *v44;
      if (v46 > 2)
        break;
      v44 += 68;
      v40 += dword_23C603E20[v46];
      v39 += qword_23C603E30[v46];
      v41 = ++v42 >= v36;
    }
    while (v36 != v42);
    if (!v41)
    {
      if (this)
        std::string::append(this, "Failed to compute channel layout.\n", 0x22uLL);
      goto LABEL_100;
    }
  }
  else
  {
    v40 = 0;
    v45 = a1;
  }
  if (!*(_DWORD *)(a2 + 56))
  {
    if ((unint64_t)((int)v36 * (uint64_t)v90 * v89 - 0x4000000000) > 0xFFFFFFC000000000)
    {
      *(_QWORD *)(v45 + 24) = tinyexr::AllocateImage(v88, *(_QWORD *)(a2 + 104), *(_DWORD **)(a2 + 128), v90, v89);
      if ((int)((unint64_t)(v87 - v86) >> 3) < 1)
        goto LABEL_118;
      v62 = 0;
      v63 = 0;
      v64 = v40;
      do
      {
        v65 = *(_QWORD *)(*v85 + 8 * v62);
        v66 = a5 - (v65 + 8);
        if (a5 < v65 + 8)
          goto LABEL_94;
        v67 = (int *)(a4 + v65);
        v68 = v67[1];
        if (v66 < v68)
          goto LABEL_94;
        v69 = *v67;
        if ((v69 - 2097153) < 0xFFBFFFFF || (_DWORD)v68 == 0)
          goto LABEL_94;
        v71 = v69 + v9;
        v72 = *(_DWORD *)(a2 + 20);
        if (v72 + 1 < (int)v69 + v9)
          v71 = v72 + 1;
        v73 = v71 - v69;
        if (v73 < 1
          || (v74 = *(int *)(a2 + 12), (unint64_t)(v69 - v74 - 0x80000000) < 0xFFFFFFFF00000001)
          || (v75 = v69 - v74, v75 < 0))
        {
LABEL_94:
          v63 = 1;
        }
        else
        {
          v76 = v64;
          v63 |= !tinyexr::DecodePixelData(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 128), v67 + 2, v68, *(_DWORD *)(a2 + 124), *(_DWORD *)(a2 + 4), v90, v89, v90, v62, v75, v73, v64, *(int *)(a2 + 120), *(_QWORD *)(a2 + 104), (uint64_t *)&v95);
          v64 = v76;
        }
        ++v62;
      }
      while (((unint64_t)(v87 - v86) >> 3) != v62);
      if ((v63 & 1) == 0)
      {
LABEL_118:
        if (*(int *)(a2 + 120) >= 1)
        {
          v82 = 0;
          v83 = *(_QWORD *)(a2 + 128);
          v84 = *(_QWORD *)(a2 + 112);
          do
          {
            *(_DWORD *)(v84 + 4 * v82) = *(_DWORD *)(v83 + 4 * v82);
            ++v82;
          }
          while (v82 < *(int *)(a2 + 120));
        }
        v18 = 0;
        *(_DWORD *)(a1 + 32) = v90;
        *(_DWORD *)(a1 + 36) = v89;
        *(_DWORD *)(a1 + 40) = v88;
        goto LABEL_122;
      }
      if (this)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v98);
        std::string::append(this, "Invalid data found when decoding pixels.\n", 0x29uLL);
LABEL_99:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v98);
      }
    }
    else if (this)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v98);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Image data size is zero or too large: width = ", 46);
      v54 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", height = ", 11);
      v55 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", channels = ", 13);
      v56 = (_QWORD *)std::ostream::operator<<();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v56);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v100, &v92);
      if ((v94 & 0x80u) == 0)
        v57 = (const std::string::value_type *)&v92;
      else
        v57 = (const std::string::value_type *)v92;
      if ((v94 & 0x80u) == 0)
        v58 = v94;
      else
        v58 = v93;
      std::string::append(this, v57, v58);
      if ((char)v94 < 0)
        operator delete(v92);
      goto LABEL_99;
    }
LABEL_100:
    v18 = 4294967292;
    goto LABEL_122;
  }
  if ((*(_DWORD *)(a2 + 60) & 0x80000000) != 0)
  {
    if (this)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v98);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Invalid tile size x : ", 22);
      v59 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"\n", 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v100, &v92);
      if ((v94 & 0x80u) == 0)
        v60 = (const std::string::value_type *)&v92;
      else
        v60 = (const std::string::value_type *)v92;
      if ((v94 & 0x80u) == 0)
        v61 = v94;
      else
        v61 = v93;
      goto LABEL_108;
    }
  }
  else
  {
    if ((*(_DWORD *)(a2 + 64) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a2 + 68) == 2)
      {
        v47 = *(_DWORD *)(a3 + 28);
        if (v47 >= 1)
        {
          v48 = 0;
          v49 = 0;
          v50 = *(_DWORD *)(a3 + 24);
          while (v50 < 1)
          {
LABEL_61:
            if (++v48 >= v47)
              goto LABEL_118;
          }
          v51 = 0;
          while (1)
          {
            v52 = a1;
            if (v49)
            {
              v53 = (_OWORD *)operator new();
              *(_QWORD *)(v49 + 8) = v53;
              v53[1] = 0u;
              v53[2] = 0u;
              *v53 = 0u;
              v52 = *(_QWORD *)(v49 + 8);
            }
            *(_DWORD *)(v52 + 32) = tinyexr::LevelSize((tinyexr *)(*(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8) + 1), v51, *(_DWORD *)(a2 + 72));
            *(_DWORD *)(v52 + 36) = tinyexr::LevelSize((tinyexr *)(*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 12) + 1), v48, *(_DWORD *)(a2 + 72));
            *(_DWORD *)(v52 + 16) = v51;
            *(_DWORD *)(v52 + 20) = v48;
            v18 = tinyexr::DecodeTiledLevel((uint64_t *)v52, a2, a3, (uint64_t *)&v95, v40, a4, a5, this);
            if ((_DWORD)v18)
              goto LABEL_122;
            ++v51;
            v50 = *(_DWORD *)(a3 + 24);
            v49 = v52;
            if (v51 >= v50)
            {
              v47 = *(_DWORD *)(a3 + 28);
              v49 = v52;
              goto LABEL_61;
            }
          }
        }
      }
      else if (*(int *)(a3 + 24) >= 1)
      {
        v78 = 0;
        v79 = 0;
        while (1)
        {
          v80 = a1;
          if (v79)
          {
            v81 = (_OWORD *)operator new();
            *(_QWORD *)(v79 + 8) = v81;
            v81[1] = 0u;
            v81[2] = 0u;
            *v81 = 0u;
            v80 = *(_QWORD *)(v79 + 8);
          }
          *(_DWORD *)(v80 + 32) = tinyexr::LevelSize((tinyexr *)(*(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8) + 1), v78, *(_DWORD *)(a2 + 72));
          *(_DWORD *)(v80 + 36) = tinyexr::LevelSize((tinyexr *)(*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 12) + 1), v78, *(_DWORD *)(a2 + 72));
          *(_DWORD *)(v80 + 16) = v78;
          *(_DWORD *)(v80 + 20) = v78;
          v18 = tinyexr::DecodeTiledLevel((uint64_t *)v80, a2, a3, (uint64_t *)&v95, v40, a4, a5, this);
          if ((_DWORD)v18)
            goto LABEL_122;
          ++v78;
          v79 = v80;
          if (v78 >= *(_DWORD *)(a3 + 24))
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
    if (this)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v98);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v99, (uint64_t)"Invalid tile size y : ", 22);
      v77 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"\n", 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v100, &v92);
      if ((v94 & 0x80u) == 0)
        v60 = (const std::string::value_type *)&v92;
      else
        v60 = (const std::string::value_type *)v92;
      if ((v94 & 0x80u) == 0)
        v61 = v94;
      else
        v61 = v93;
LABEL_108:
      std::string::append(this, v60, v61);
      if ((char)v94 < 0)
        operator delete(v92);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v98);
    }
  }
  v18 = 4294967287;
LABEL_122:
  if (v95.__locale_)
  {
    v96 = v95.__locale_;
    operator delete(v95.__locale_);
  }
  return v18;
}

void sub_23C4F71E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t LoadEXRMultipartImageFromFile(uint64_t a1, uint64_t a2, unsigned int a3, char *__filename, char **a5)
{
  FILE *v10;
  FILE *v11;
  size_t v12;
  uint64_t EXRMultipartImageFromMemory;
  int v14;
  std::string *v15;
  std::string *v16;
  int v17;
  std::string *p_ptr;
  std::string v20;
  std::string __ptr;

  if (a1 && a2 && a3)
  {
    v10 = fopen(__filename, "rb");
    if (v10)
    {
      v11 = v10;
      fseek(v10, 0, 2);
      v12 = MEMORY[0x2426213A4](v11);
      fseek(v11, 0, 0);
      std::vector<unsigned char>::vector(&__ptr, v12);
      if (fread(__ptr.__r_.__value_.__l.__data_, 1uLL, v12, v11) != v12)
        __assert_rtn("LoadEXRMultipartImageFromFile", "tinyexr.h", 14826, "ret == filesize");
      fclose(v11);
      if (__ptr.__r_.__value_.__l.__size_ == __ptr.__r_.__value_.__r.__words[0])
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      EXRMultipartImageFromMemory = LoadEXRMultipartImageFromMemory(a1, a2, a3, (uint64_t)__ptr.__r_.__value_.__l.__data_, v12, a5);
      if (__ptr.__r_.__value_.__r.__words[0])
      {
        __ptr.__r_.__value_.__l.__size_ = __ptr.__r_.__value_.__r.__words[0];
        operator delete(__ptr.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, __filename);
      v16 = std::string::insert(&v20, 0, "Cannot read file ", 0x11uLL);
      __ptr = *v16;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v17 = SHIBYTE(__ptr.__r_.__value_.__r.__words[2]);
      if (a5)
      {
        if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_ptr = &__ptr;
        else
          p_ptr = (std::string *)__ptr.__r_.__value_.__r.__words[0];
        *a5 = strdup((const char *)p_ptr);
      }
      if (v17 < 0)
        operator delete(__ptr.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      return 4294967289;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__ptr, "Invalid argument for LoadEXRMultipartImageFromFile");
    v14 = SHIBYTE(__ptr.__r_.__value_.__r.__words[2]);
    if (a5)
    {
      if ((__ptr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__ptr;
      else
        v15 = (std::string *)__ptr.__r_.__value_.__r.__words[0];
      *a5 = strdup((const char *)v15);
    }
    if (v14 < 0)
      operator delete(__ptr.__r_.__value_.__l.__data_);
    return 4294967293;
  }
  return EXRMultipartImageFromMemory;
}

void sub_23C4F74AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SaveEXR(_DWORD *a1, int a2, int a3, int a4, int a5, char *a6, char **a7)
{
  int v14;
  int v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  int v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t i;
  void *v36;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__dst[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[4];
  void *__p[2];
  void *v53[2];
  void *v54[2];
  void *v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 4 && ((1 << a4) & 0x1A) != 0)
  {
    v71 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)v55 = 0u;
    v56 = 0u;
    *(_OWORD *)v53 = 0u;
    *(_OWORD *)v54 = 0u;
    *(_OWORD *)__p = 0u;
    v50 = 0u;
    memset(v51, 0, sizeof(v51));
    if (a3 < 16 && a2 < 16)
      v14 = 0;
    else
      v14 = 3;
    HIDWORD(v54[1]) = v14;
    v40 = 0uLL;
    v41 = 0uLL;
    v39 = 0uLL;
    DWORD2(v41) = a4;
    v48 = 0uLL;
    v49 = 0uLL;
    v46 = 0uLL;
    v47 = 0uLL;
    v15 = a3 * a2;
    v16 = a3 * a2;
    *(_OWORD *)__dst = 0uLL;
    v45 = 0uLL;
    if (a4 == 1)
    {
      std::vector<float>::resize((uint64_t)__dst, v15);
      memcpy(__dst[0], a1, 4 * v16);
      *((_QWORD *)&v42 + 1) = 0;
      v43 = 0uLL;
      if (__dst[1] != __dst[0])
      {
        *(void **)&v42 = __dst[0];
LABEL_38:
        *((_QWORD *)&v40 + 1) = &v42;
        *(_QWORD *)&v41 = __PAIR64__(a3, a2);
        LODWORD(v54[1]) = a4;
        v28 = malloc_type_malloc(272 * a4, 0x1000040881B329AuLL);
        v29 = v28;
        v53[1] = v28;
        if (a4 == 4)
        {
          strncpy(v28, "A", 0xFFuLL);
          strncpy(v29 + 272, "B", 0xFFuLL);
          strncpy(v29 + 544, "G", 0xFFuLL);
          strncpy(v29 + 816, "R", 0xFFuLL);
          v29[1] = 0;
          v29[273] = 0;
          v30 = v29 + 817;
          v29[545] = 0;
        }
        else if (a4 == 3)
        {
          strncpy(v28, "B", 0xFFuLL);
          strncpy(v29 + 272, "G", 0xFFuLL);
          strncpy(v29 + 544, "R", 0xFFuLL);
          v29[1] = 0;
          v29[273] = 0;
          v30 = v29 + 545;
        }
        else
        {
          strncpy(v28, "A", 0xFFuLL);
          v30 = v29 + 1;
        }
        *v30 = 0;
        v31 = malloc_type_malloc(4 * a4, 0x100004052888210uLL);
        v54[0] = v31;
        v32 = malloc_type_malloc(4 * a4, 0x100004052888210uLL);
        v55[0] = v32;
        if (a4 >= 1)
        {
          v33 = 0;
          if (a5 >= 1)
            v34 = 1;
          else
            v34 = 2;
          do
          {
            *((_DWORD *)v31 + v33) = 2;
            *((_DWORD *)v32 + v33++) = v34;
          }
          while (v33 < a4);
        }
        v27 = SaveEXRImageToFile((int32x2_t *)&v39, (std::string::size_type)&v50, a6, a7);
        if (!(_DWORD)v27)
        {
          free(v53[1]);
          free(v54[0]);
          free(v55[0]);
        }
        for (i = 0; i != -96; i -= 24)
        {
          v36 = *(void **)((char *)&v48 + i + 8);
          if (v36)
          {
            *(_QWORD *)((char *)&v49 + i) = v36;
            operator delete(v36);
          }
        }
        return v27;
      }
    }
    else
    {
      std::vector<float>::resize((uint64_t)__dst, v15);
      std::vector<float>::resize((uint64_t)&v45 + 8, v16);
      std::vector<float>::resize((uint64_t)&v47, v16);
      std::vector<float>::resize((uint64_t)&v48 + 8, v16);
      if ((_DWORD)v16)
      {
        v17 = __dst[0];
        v18 = (_DWORD *)*((_QWORD *)&v45 + 1);
        v19 = (_DWORD *)v47;
        v20 = (_DWORD *)*((_QWORD *)&v48 + 1);
        v21 = a1 + 2;
        do
        {
          *v17 = *(v21 - 2);
          *v18 = *(v21 - 1);
          *v19 = *v21;
          if (a4 == 4)
            *v20 = v21[1];
          ++v20;
          ++v19;
          ++v18;
          v21 += a4;
          ++v17;
          --v16;
        }
        while (v16);
      }
      v42 = 0u;
      v43 = 0u;
      if (a4 == 4)
      {
        if ((_QWORD)v49 != *((_QWORD *)&v48 + 1))
        {
          *(_QWORD *)&v42 = *((_QWORD *)&v48 + 1);
          if (*((_QWORD *)&v47 + 1) != (_QWORD)v47)
          {
            *((_QWORD *)&v42 + 1) = v47;
            if ((_QWORD)v46 != *((_QWORD *)&v45 + 1))
            {
              *(_QWORD *)&v43 = *((_QWORD *)&v45 + 1);
              if (__dst[1] != __dst[0])
              {
                *((void **)&v43 + 1) = __dst[0];
                goto LABEL_38;
              }
            }
          }
        }
      }
      else
      {
        if (a4 != 3)
          goto LABEL_38;
        if (*((_QWORD *)&v47 + 1) != (_QWORD)v47)
        {
          *(_QWORD *)&v42 = v47;
          if ((_QWORD)v46 != *((_QWORD *)&v45 + 1))
          {
            *((_QWORD *)&v42 + 1) = *((_QWORD *)&v45 + 1);
            if (__dst[1] != __dst[0])
            {
              *(void **)&v43 = __dst[0];
              goto LABEL_38;
            }
          }
        }
      }
    }
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Unsupported component value : ", 30);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet((const std::locale *)__dst, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale((std::locale *)__dst);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51 + 8, __dst);
  v24 = SBYTE7(v45);
  if (a7)
  {
    if ((SBYTE7(v45) & 0x80u) == 0)
      v25 = __dst;
    else
      v25 = (void **)__dst[0];
    *a7 = strdup((const char *)v25);
  }
  if (v24 < 0)
    operator delete(__dst[0]);
  *(_QWORD *)&v50 = *MEMORY[0x24BEDB7F0];
  v26 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v51[-1] + *(_QWORD *)(v50 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&v51[0] = v26;
  *((_QWORD *)&v51[0] + 1) = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v53[1]) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x242621128](v55);
  return 4294967293;
}

void sub_23C4F7A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  _Unwind_Resume(a1);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_23C4F7B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

BOOL tinyexr::miniz::tdefl_compress_block(uint64_t a1, int a2)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _WORD *v23;
  char v24;
  char v25;
  int v26;
  unsigned int v27;
  char v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE *v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  _BYTE *v77;
  unsigned int v78;
  unsigned __int8 *v79;
  char *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  _BYTE *v88;
  unsigned int v89;
  _BYTE *v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  _BYTE *v95;
  _BYTE v97[320];
  _BYTE __dst[320];
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 34378;
  if (a2)
  {
    *(_QWORD *)&v4 = 0x808080808080808;
    *((_QWORD *)&v4 + 1) = 0x808080808080808;
    *(_OWORD *)(a1 + 36794) = v4;
    *(_OWORD *)(a1 + 36810) = v4;
    *(_OWORD *)(a1 + 36762) = v4;
    *(_OWORD *)(a1 + 36778) = v4;
    *(_OWORD *)(a1 + 36730) = v4;
    *(_OWORD *)(a1 + 36746) = v4;
    *(_OWORD *)(a1 + 36698) = v4;
    *(_OWORD *)(a1 + 36714) = v4;
    *(_OWORD *)(a1 + 36682) = v4;
    *(_QWORD *)&v4 = 0x909090909090909;
    *((_QWORD *)&v4 + 1) = 0x909090909090909;
    *(_OWORD *)(a1 + 36826) = v4;
    *(_OWORD *)(a1 + 36842) = v4;
    *(_OWORD *)(a1 + 36858) = v4;
    *(_OWORD *)(a1 + 36874) = v4;
    *(_OWORD *)(a1 + 36890) = v4;
    *(_OWORD *)(a1 + 36906) = v4;
    *(_OWORD *)(a1 + 36922) = v4;
    memset((void *)(a1 + 36938), 7, 24);
    *(_QWORD *)(a1 + 36962) = 0x808080808080808;
    *(_QWORD *)&v4 = 0x505050505050505;
    *((_QWORD *)&v4 + 1) = 0x505050505050505;
    *(_OWORD *)(a1 + 36970) = v4;
    *(_OWORD *)(a1 + 36986) = v4;
    tinyexr::miniz::tdefl_optimize_huffman_table();
    tinyexr::miniz::tdefl_optimize_huffman_table();
    v5 = *(_DWORD *)(a1 + 92);
    v6 = *(_DWORD *)(a1 + 96) | (1 << v5);
    v7 = v5 + 2;
    *(_DWORD *)(a1 + 92) = v7;
    *(_DWORD *)(a1 + 96) = v6;
    if (v7 >= 8)
    {
      do
      {
        v8 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v8 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v8 + 1;
          *v8 = v6;
          v7 = *(_DWORD *)(a1 + 92);
          v6 = *(_DWORD *)(a1 + 96);
        }
        v6 >>= 8;
        v7 -= 8;
        *(_DWORD *)(a1 + 92) = v7;
        *(_DWORD *)(a1 + 96) = v6;
      }
      while (v7 > 7);
    }
    goto LABEL_125;
  }
  *(_WORD *)(a1 + 33738) = 1;
  tinyexr::miniz::tdefl_optimize_huffman_table();
  tinyexr::miniz::tdefl_optimize_huffman_table();
  v9 = 0;
  v10 = 287;
  while ((unint64_t)(v9 + 286) >= 0x102)
  {
    v11 = *(unsigned __int8 *)(a1 + 36967 + v9);
    --v10;
    --v9;
    if (v11)
      goto LABEL_12;
  }
  v10 = 257;
LABEL_12:
  v12 = 0;
  v13 = 31;
  while ((unint64_t)(v12 + 30) >= 2)
  {
    v14 = *(unsigned __int8 *)(a1 + 36999 + v12);
    --v13;
    --v12;
    if (v14)
      goto LABEL_17;
  }
  v13 = 1;
LABEL_17:
  memcpy(__dst, (const void *)(a1 + 36682), v10);
  memcpy(&__dst[v10], (const void *)(a1 + 36970), v13);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)(v3 + 30) = 0;
  if (!(v13 + v10))
  {
    v27 = 0;
    goto LABEL_77;
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (_WORD *)(v3 + 36);
  LODWORD(v20) = 255;
  do
  {
    v21 = v20;
    v20 = __dst[v15];
    if (__dst[v15])
    {
      if (v17)
      {
        if (v17 > 2)
        {
          v22 = (v18 + 2);
          if (v17 >= 0xB)
            v23 = (_WORD *)(v3 + 36);
          else
            v23 = (_WORD *)(v3 + 34);
          if (v17 < 0xB)
            v24 = 17;
          else
            v24 = 18;
          if (v17 >= 0xB)
            v25 = -11;
          else
            v25 = -3;
          ++*v23;
          v97[v18] = v24;
          v97[(v18 + 1)] = v25 + v17;
        }
        else
        {
          *(_WORD *)v3 += v17;
          do
          {
            v22 = (v18 + 1);
            v97[v18] = 0;
            LODWORD(v18) = v18 + 1;
            --v17;
          }
          while (v17);
        }
      }
      else
      {
        v22 = v18;
      }
      if ((_DWORD)v20 == v21)
      {
        if (++v16 != 6)
        {
          v17 = 0;
LABEL_53:
          v18 = v22;
          goto LABEL_59;
        }
        v17 = 0;
        v16 = 0;
        ++*(_WORD *)(v3 + 32);
        v97[v22] = 16;
        v97[(v22 + 1)] = 3;
        v18 = (v22 + 2);
      }
      else
      {
        if (v16)
        {
          if (v16 > 2)
          {
            ++*(_WORD *)(v3 + 32);
            v97[v22] = 16;
            v26 = v22 + 2;
            v97[(v22 + 1)] = v16 - 3;
          }
          else
          {
            *(_WORD *)(a1 + 2 * v21 + 34378) += v16;
            do
            {
              v26 = v22 + 1;
              v97[v22] = v21;
              LODWORD(v22) = v22 + 1;
              --v16;
            }
            while (v16);
          }
        }
        else
        {
          v26 = v22;
        }
        v17 = 0;
        v16 = 0;
        ++*(_WORD *)(a1 + 2 * v20 + 34378);
        v18 = (v26 + 1);
        v97[v26] = v20;
      }
    }
    else
    {
      if (v16)
      {
        if (v16 > 2)
        {
          ++*(_WORD *)(v3 + 32);
          v97[v18] = 16;
          v22 = (v18 + 2);
          v97[(v18 + 1)] = v16 - 3;
        }
        else
        {
          *(_WORD *)(a1 + 2 * v21 + 34378) += v16;
          do
          {
            v22 = (v18 + 1);
            v97[v18] = v21;
            LODWORD(v18) = v18 + 1;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v22 = v18;
      }
      if (++v17 != 138)
      {
        v16 = 0;
        goto LABEL_53;
      }
      v17 = 0;
      v16 = 0;
      ++*v19;
      v97[v22] = 18;
      v18 = (v22 + 2);
      v97[(v22 + 1)] = 127;
    }
LABEL_59:
    ++v15;
  }
  while (v15 != v13 + v10);
  if (v16)
  {
    if (v16 > 2)
    {
      ++*(_WORD *)(v3 + 32);
      v97[v18] = 16;
      v27 = v18 + 2;
      v97[(v18 + 1)] = v16 - 3;
    }
    else
    {
      *(_WORD *)(a1 + 2 * v20 + 34378) += v16;
      do
      {
        v27 = v18 + 1;
        v97[v18] = v20;
        LODWORD(v18) = v18 + 1;
        --v16;
      }
      while (v16);
    }
  }
  else if (v17)
  {
    if (v17 > 2)
    {
      v27 = v18 + 2;
      if (v17 > 0xA)
      {
        ++*v19;
        v97[v18] = 18;
        v28 = v17 - 11;
      }
      else
      {
        ++*(_WORD *)(v3 + 34);
        v97[v18] = 17;
        v28 = v17 - 3;
      }
      v97[(v18 + 1)] = v28;
    }
    else
    {
      *(_WORD *)v3 += v17;
      do
      {
        v27 = v18 + 1;
        v97[v18] = 0;
        LODWORD(v18) = v18 + 1;
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    v27 = v18;
  }
LABEL_77:
  tinyexr::miniz::tdefl_optimize_huffman_table();
  v29 = *(_DWORD *)(a1 + 92);
  v30 = *(_DWORD *)(a1 + 96) | (2 << v29);
  v31 = v29 + 2;
  *(_DWORD *)(a1 + 92) = v31;
  *(_DWORD *)(a1 + 96) = v30;
  if (v31 >= 8)
  {
    do
    {
      v32 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v32 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v32 + 1;
        *v32 = v30;
        v31 = *(_DWORD *)(a1 + 92);
        v30 = *(_DWORD *)(a1 + 96);
      }
      v30 >>= 8;
      v31 -= 8;
      *(_DWORD *)(a1 + 92) = v31;
      *(_DWORD *)(a1 + 96) = v30;
    }
    while (v31 > 7);
  }
  if ((v10 - 257) >= 0x20)
    tinyexr::miniz::tdefl_compress_block();
  v33 = ((v10 - 257) << v31) | v30;
  v34 = v31 + 5;
  *(_DWORD *)(a1 + 92) = v31 + 5;
  *(_DWORD *)(a1 + 96) = v33;
  if (v31 >= 3)
  {
    do
    {
      v35 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v35 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v35 + 1;
        *v35 = v33;
        v34 = *(_DWORD *)(a1 + 92);
        v33 = *(_DWORD *)(a1 + 96);
      }
      v33 >>= 8;
      v34 -= 8;
      *(_DWORD *)(a1 + 92) = v34;
      *(_DWORD *)(a1 + 96) = v33;
    }
    while (v34 > 7);
  }
  if ((v13 - 1) >= 0x20)
    tinyexr::miniz::tdefl_compress_block();
  v36 = ((v13 - 1) << v34) | v33;
  v37 = v34 + 5;
  *(_DWORD *)(a1 + 92) = v34 + 5;
  *(_DWORD *)(a1 + 96) = v36;
  if (v34 >= 3)
  {
    do
    {
      v38 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v38 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v38 + 1;
        *v38 = v36;
        v37 = *(_DWORD *)(a1 + 92);
        v36 = *(_DWORD *)(a1 + 96);
      }
      v36 >>= 8;
      v37 -= 8;
      *(_DWORD *)(a1 + 92) = v37;
      *(_DWORD *)(a1 + 96) = v36;
    }
    while (v37 > 7);
  }
  LODWORD(v39) = 0x12u;
  do
  {
    if (*(_BYTE *)(a1
                  + tinyexr::miniz::s_tdefl_packed_code_size_syms_swizzle[v39]
                  + 37258))
      break;
    LODWORD(v39) = v39 - 1;
  }
  while ((_DWORD)v39 != -1);
  if ((int)v39 <= 3)
    v39 = 3;
  else
    v39 = v39;
  if ((v39 - 3) >= 0x10)
    tinyexr::miniz::tdefl_compress_block();
  v6 = (((_DWORD)v39 - 3) << v37) | v36;
  v7 = v37 + 4;
  *(_DWORD *)(a1 + 92) = v7;
  *(_DWORD *)(a1 + 96) = v6;
  if (v7 >= 8)
  {
    do
    {
      v40 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v40 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v40 + 1;
        *v40 = v6;
        v7 = *(_DWORD *)(a1 + 92);
        v6 = *(_DWORD *)(a1 + 96);
      }
      v6 >>= 8;
      v7 -= 8;
      *(_DWORD *)(a1 + 92) = v7;
      *(_DWORD *)(a1 + 96) = v6;
    }
    while (v7 > 7);
  }
  v41 = 0;
  do
  {
    v42 = *(unsigned __int8 *)(a1 + tinyexr::miniz::s_tdefl_packed_code_size_syms_swizzle[v41] + 37258);
    if (v42 >= 8)
      tinyexr::miniz::tdefl_compress_block();
    v6 |= v42 << v7;
    v7 += 3;
    *(_DWORD *)(a1 + 92) = v7;
    *(_DWORD *)(a1 + 96) = v6;
    if (v7 >= 8)
    {
      do
      {
        v43 = *(_BYTE **)(a1 + 64);
        if ((unint64_t)v43 < *(_QWORD *)(a1 + 72))
        {
          *(_QWORD *)(a1 + 64) = v43 + 1;
          *v43 = v6;
          v7 = *(_DWORD *)(a1 + 92);
          v6 = *(_DWORD *)(a1 + 96);
        }
        v6 >>= 8;
        v7 -= 8;
        *(_DWORD *)(a1 + 92) = v7;
        *(_DWORD *)(a1 + 96) = v6;
      }
      while (v7 > 7);
    }
  }
  while (v41++ != v39);
  if (v27)
  {
    v45 = 0;
    do
    {
      v46 = v97[v45];
      if (v46 >= 0x13)
        tinyexr::miniz::tdefl_compress_block();
      v47 = *(unsigned __int16 *)(a1 + 2 * v46 + 36106);
      v48 = *(unsigned __int8 *)(a1 + v46 + 37258);
      if (v47 >> v48)
        tinyexr::miniz::tdefl_compress_block();
      v6 |= v47 << v7;
      v7 += v48;
      *(_DWORD *)(a1 + 92) = v7;
      *(_DWORD *)(a1 + 96) = v6;
      if (v7 >= 8)
      {
        do
        {
          v49 = *(_BYTE **)(a1 + 64);
          if ((unint64_t)v49 < *(_QWORD *)(a1 + 72))
          {
            *(_QWORD *)(a1 + 64) = v49 + 1;
            *v49 = v6;
            v7 = *(_DWORD *)(a1 + 92);
            v6 = *(_DWORD *)(a1 + 96);
          }
          v6 >>= 8;
          v7 -= 8;
          *(_DWORD *)(a1 + 92) = v7;
          *(_DWORD *)(a1 + 96) = v6;
        }
        while (v7 > 7);
      }
      v50 = v45 + 1;
      if (v46 >= 0x10)
      {
        v51 = v97[v50];
        v52 = asc_23C6220F8[(v46 - 16)];
        if (v51 >> v52)
          tinyexr::miniz::tdefl_compress_block();
        LODWORD(v50) = v45 + 2;
        v6 |= v51 << v7;
        v7 += v52;
        *(_DWORD *)(a1 + 92) = v7;
        *(_DWORD *)(a1 + 96) = v6;
        if (v7 >= 8)
        {
          do
          {
            v53 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v53 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v53 + 1;
              *v53 = v6;
              v7 = *(_DWORD *)(a1 + 92);
              v6 = *(_DWORD *)(a1 + 96);
            }
            v6 >>= 8;
            v7 -= 8;
            *(_DWORD *)(a1 + 92) = v7;
            *(_DWORD *)(a1 + 96) = v6;
          }
          while (v7 > 7);
        }
      }
      v45 = v50;
    }
    while (v50 < v27);
  }
LABEL_125:
  v54 = (unsigned __int8 *)(a1 + 37546);
  if ((unint64_t)(a1 + 37546) < *(_QWORD *)(a1 + 48))
  {
    v55 = a1 + 36682;
    v56 = a1 + 34954;
    v57 = 1;
    do
    {
      if (v57 == 1)
      {
        v58 = *v54++;
        v57 = v58 | 0x100;
      }
      if ((v57 & 1) != 0)
      {
        v64 = *v54;
        v65 = tinyexr::miniz::s_tdefl_len_sym[v64];
        v66 = *(unsigned __int8 *)(v55 + v65);
        if (!*(_BYTE *)(v55 + v65))
          tinyexr::miniz::tdefl_compress_block();
        v67 = *(unsigned __int16 *)(v56 + 2 * v65);
        if (v67 >> v66)
          tinyexr::miniz::tdefl_compress_block();
        v68 = v54[1];
        v69 = v54[2];
        v70 = v6 | (v67 << v7);
        v71 = v7 + v66;
        *(_DWORD *)(a1 + 92) = v71;
        *(_DWORD *)(a1 + 96) = v70;
        if (v71 >= 8)
        {
          do
          {
            v72 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v72 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v72 + 1;
              *v72 = v70;
              v71 = *(_DWORD *)(a1 + 92);
              v70 = *(_DWORD *)(a1 + 96);
            }
            v70 >>= 8;
            v71 -= 8;
            *(_DWORD *)(a1 + 92) = v71;
            *(_DWORD *)(a1 + 96) = v70;
          }
          while (v71 > 7);
        }
        v73 = tinyexr::miniz::s_tdefl_len_extra[v64];
        v74 = tinyexr::miniz::mz_bitmasks[tinyexr::miniz::s_tdefl_len_extra[v64]] & v64;
        if (v74 >> v73)
          tinyexr::miniz::tdefl_compress_block();
        v75 = (v74 << v71) | v70;
        v76 = v71 + v73;
        *(_DWORD *)(a1 + 92) = v71 + v73;
        *(_DWORD *)(a1 + 96) = v75;
        if (v71 + v73 >= 8)
        {
          do
          {
            v77 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v77 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v77 + 1;
              *v77 = v75;
              v76 = *(_DWORD *)(a1 + 92);
              v75 = *(_DWORD *)(a1 + 96);
            }
            v75 >>= 8;
            v76 -= 8;
            *(_DWORD *)(a1 + 92) = v76;
            *(_DWORD *)(a1 + 96) = v75;
          }
          while (v76 > 7);
        }
        v78 = v68 | ((_DWORD)v69 << 8);
        v79 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_small_dist_sym + v78;
        v80 = (char *)&tinyexr::miniz::s_tdefl_large_dist_sym + v69;
        v81 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_large_dist_extra + v69;
        if (v78 < 0x200)
          v81 = (unsigned __int8 *)&tinyexr::miniz::s_tdefl_small_dist_extra + v78;
        else
          v79 = (unsigned __int8 *)v80;
        v82 = *v79;
        v83 = *(unsigned __int8 *)(a1 + v82 + 36970);
        if (!*(_BYTE *)(a1 + v82 + 36970))
          tinyexr::miniz::tdefl_compress_block();
        v84 = *(unsigned __int16 *)(a1 + 2 * v82 + 35530);
        if (v84 >> v83)
          tinyexr::miniz::tdefl_compress_block();
        v85 = *v81;
        v86 = (v84 << v76) | v75;
        v87 = v76 + v83;
        *(_DWORD *)(a1 + 92) = v87;
        *(_DWORD *)(a1 + 96) = v86;
        if (v87 >= 8)
        {
          do
          {
            v88 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v88 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v88 + 1;
              *v88 = v86;
              v87 = *(_DWORD *)(a1 + 92);
              v86 = *(_DWORD *)(a1 + 96);
            }
            v86 >>= 8;
            v87 -= 8;
            *(_DWORD *)(a1 + 92) = v87;
            *(_DWORD *)(a1 + 96) = v86;
          }
          while (v87 > 7);
        }
        v89 = tinyexr::miniz::mz_bitmasks[v85] & v78;
        if (v89 >> v85)
          tinyexr::miniz::tdefl_compress_block();
        v54 += 3;
        v6 = (v89 << v87) | v86;
        v7 = v87 + v85;
        *(_DWORD *)(a1 + 92) = v87 + v85;
        *(_DWORD *)(a1 + 96) = v6;
        if (v87 + v85 >= 8)
        {
          do
          {
            v90 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v90 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v90 + 1;
              *v90 = v6;
              v7 = *(_DWORD *)(a1 + 92);
              v6 = *(_DWORD *)(a1 + 96);
            }
            v6 >>= 8;
            v7 -= 8;
            *(_DWORD *)(a1 + 92) = v7;
            *(_DWORD *)(a1 + 96) = v6;
          }
          while (v7 > 7);
        }
      }
      else
      {
        v60 = *v54++;
        v59 = v60;
        v61 = *(unsigned __int8 *)(v55 + v60);
        if (!*(_BYTE *)(v55 + v60))
          tinyexr::miniz::tdefl_compress_block();
        v62 = *(unsigned __int16 *)(v56 + 2 * v59);
        if (v62 >> v61)
          tinyexr::miniz::tdefl_compress_block();
        v6 |= v62 << v7;
        v7 += v61;
        *(_DWORD *)(a1 + 92) = v7;
        *(_DWORD *)(a1 + 96) = v6;
        if (v7 >= 8)
        {
          do
          {
            v63 = *(_BYTE **)(a1 + 64);
            if ((unint64_t)v63 < *(_QWORD *)(a1 + 72))
            {
              *(_QWORD *)(a1 + 64) = v63 + 1;
              *v63 = v6;
              v7 = *(_DWORD *)(a1 + 92);
              v6 = *(_DWORD *)(a1 + 96);
            }
            v6 >>= 8;
            v7 -= 8;
            *(_DWORD *)(a1 + 92) = v7;
            *(_DWORD *)(a1 + 96) = v6;
          }
          while (v7 > 7);
        }
      }
      v57 >>= 1;
    }
    while ((unint64_t)v54 < *(_QWORD *)(a1 + 48));
  }
  v91 = *(unsigned __int16 *)(v3 + 1088);
  v92 = *(unsigned __int8 *)(v3 + 2560);
  if (v91 >> v92)
    tinyexr::miniz::tdefl_compress_block();
  v93 = v6 | (v91 << v7);
  v94 = v7 + v92;
  *(_DWORD *)(a1 + 92) = v94;
  *(_DWORD *)(a1 + 96) = v93;
  if (v94 >= 8)
  {
    do
    {
      v95 = *(_BYTE **)(a1 + 64);
      if ((unint64_t)v95 < *(_QWORD *)(a1 + 72))
      {
        *(_QWORD *)(a1 + 64) = v95 + 1;
        *v95 = v93;
        v94 = *(_DWORD *)(a1 + 92);
        v93 = *(_DWORD *)(a1 + 96);
      }
      v93 >>= 8;
      v94 -= 8;
      *(_DWORD *)(a1 + 92) = v94;
      *(_DWORD *)(a1 + 96) = v93;
    }
    while (v94 > 7);
  }
  return *(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 72);
}

void tinyexr::miniz::tdefl_optimize_huffman_table()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned int v18;
  char v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  int v69;
  _OWORD *v70;
  uint64_t v71;
  int v72;
  unsigned __int16 *v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int *v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t i;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  char v88;
  uint64_t v89;
  _DWORD v90[288];
  _OWORD v91[8];
  int v92;
  unsigned int v93[256];
  _DWORD v94[1];
  int v95;
  uint64_t v96;
  _DWORD v97[256];
  uint64_t v98;

  v0 = MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v5 = v2;
  v6 = v0;
  v98 = *MEMORY[0x24BDAC8D0];
  memset(v91, 0, sizeof(v91));
  v92 = 0;
  v7 = v1;
  if (v8)
  {
    if (v2 >= 1)
    {
      v9 = v2;
      v10 = (unsigned __int8 *)(v0 + 288 * v1 + 36682);
      do
      {
        v11 = *v10++;
        ++*((_DWORD *)v91 + v11);
        --v9;
      }
      while (v9);
    }
    goto LABEL_81;
  }
  if (v2 <= 0)
  {
    bzero(v94, 0x800uLL);
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = v0 + 576 * v1 + 33226;
    do
    {
      if (*(_WORD *)(v14 + 2 * v12))
      {
        v15 = &v90[v13];
        *v15 = *(_WORD *)(v14 + 2 * v12);
        ++v13;
        v15[1] = v12;
      }
      ++v12;
    }
    while (v2 != v12);
    bzero(v94, 0x800uLL);
    if (v13)
    {
      v16 = v13;
      v17 = (unsigned __int16 *)v90;
      do
      {
        v18 = *v17;
        v17 += 2;
        ++v94[v18];
        ++*(_DWORD *)((char *)v97 + (((unint64_t)v18 >> 6) & 0x3FC));
        --v16;
      }
      while (v16);
      v19 = 0;
      v20 = v97[0];
      goto LABEL_17;
    }
  }
  v20 = 0;
  v19 = 1;
LABEL_17:
  v21 = v20 == v13;
  v22 = 2;
  do
  {
    v23 = v22;
    v24 = v21;
    v22 = 1;
    v21 = 0;
  }
  while (v24);
  v25 = 0;
  v26 = 0;
  v27 = (unsigned __int16 *)v90;
  v28 = (unsigned __int16 *)&v89;
  v29 = v94;
  v30 = v13;
  do
  {
    v31 = 0;
    v32 = 0;
    v33 = v27;
    v27 = v28;
    do
    {
      v93[v31] = v32;
      v32 += *(_DWORD *)&v29[v31 * 4];
      ++v31;
    }
    while (v31 != 256);
    v34 = v33;
    v35 = v13;
    if ((v19 & 1) == 0)
    {
      do
      {
        v36 = v93[(*v34 >> v26)];
        v93[(*v34 >> v26)] = v36 + 1;
        v37 = *(_DWORD *)v34;
        v34 += 2;
        *(_DWORD *)&v28[2 * v36] = v37;
        --v35;
      }
      while (v35);
    }
    ++v25;
    v26 += 8;
    v29 += 1024;
    v28 = v33;
  }
  while (v25 != v23);
  if (v13)
  {
    v38 = (v13 - 1);
    if (v13 == 1)
    {
      *v27 = 1;
LABEL_60:
      v56 = v27;
      do
      {
        v57 = *v56;
        v56 += 2;
        ++*((_DWORD *)v91 + v57);
        --v30;
      }
      while (v30);
      if (v13 > 1)
      {
        if (v4 > 31)
          goto LABEL_67;
        v58 = *((_DWORD *)v91 + v4);
        v59 = v4;
        do
        {
          v58 += *((_DWORD *)v91 + v59 + 1);
          *((_DWORD *)v91 + v4) = v58;
          ++v59;
        }
        while (v59 != 32);
        if (v4 < 1)
        {
          LODWORD(v61) = 0;
        }
        else
        {
LABEL_67:
          v60 = 0;
          LODWORD(v61) = 0;
          v62 = v4;
          do
            LODWORD(v61) = (*((_DWORD *)v91 + v62) << v60++) + v61;
          while (v62-- > 1);
        }
        if (1 << v4 != v61)
        {
          do
          {
            --*((_DWORD *)v91 + v4);
            v64 = v4;
            while ((int)v64 >= 2)
            {
              v65 = v64 - 1;
              v66 = *((_DWORD *)v91 + --v64);
              if (v66)
              {
                v67 = (_DWORD *)v91 + v65;
                v68 = v66 - 1;
                v69 = v67[1] + 2;
                *v67 = v68;
                v67[1] = v69;
                break;
              }
            }
            v61 = (v61 - 1);
          }
          while (1 << v4 != v61);
        }
      }
      goto LABEL_75;
    }
    *v27 += v27[2];
    if (v13 <= 2)
    {
      v49 = v13 - 2;
      v27[2 * v49] = 0;
LABEL_47:
      v51 = 0;
      v52 = 1;
      do
      {
        if ((v49 & 0x80000000) != 0)
        {
          v54 = 0;
        }
        else
        {
          v53 = 0;
          v54 = v49 + 1;
          while (v51 == v27[2 * v49])
          {
            ++v53;
            LODWORD(v49) = v49 - 1;
            if (v54 == v53)
            {
              LODWORD(v49) = -1;
              goto LABEL_55;
            }
          }
          v54 = v53;
        }
LABEL_55:
        if (v52 > v54)
        {
          v55 = &v27[2 * (int)v38];
          LODWORD(v38) = v38 + v54 - v52;
          do
          {
            *v55 = v51;
            v55 -= 2;
            --v52;
          }
          while (v52 > v54);
        }
        v52 = 2 * v54;
        ++v51;
      }
      while (v54);
      if (v13 < 1)
        goto LABEL_75;
      goto LABEL_60;
    }
    v39 = 0;
    v40 = v27 + 2;
    v41 = 2;
    v42 = 1;
    while (1)
    {
      v43 = &v27[2 * v39];
      v44 = *v43;
      if (v41 < v13 && (v45 = v27[2 * v41], v44 >= v45))
      {
        v46 = v39;
        ++v41;
        *v40 = v45;
      }
      else
      {
        *v40 = v44;
        ++v39;
        *v43 = v42;
        v46 = v39;
      }
      v47 = 2 * v46;
      if (v41 >= v13)
      {
        LOWORD(v46) = v27[2 * v46];
      }
      else
      {
        if (v42 <= v46)
        {
          LOWORD(v48) = v27[2 * v41];
LABEL_41:
          ++v41;
          *v40 += v48;
          goto LABEL_42;
        }
        LODWORD(v46) = v27[2 * v46];
        v48 = v27[2 * v41];
        if (v46 >= v48)
          goto LABEL_41;
      }
      *v40 += v46;
      ++v39;
      v27[v47] = v42;
LABEL_42:
      ++v42;
      v40 += 2;
      if (v38 == v42)
      {
        v49 = v13 - 2;
        v27[2 * v49] = 0;
        v50 = 2 * (v13 - 3);
        do
        {
          v27[v50] = v27[2 * v27[v50]] + 1;
          v50 -= 2;
        }
        while (v50 != -2);
        goto LABEL_47;
      }
    }
  }
LABEL_75:
  v70 = (_OWORD *)(v6 + 288 * v7 + 36682);
  v70[16] = 0u;
  v70[17] = 0u;
  v70[14] = 0u;
  v70[15] = 0u;
  v70[12] = 0u;
  v70[13] = 0u;
  v70[10] = 0u;
  v70[11] = 0u;
  v70[8] = 0u;
  v70[9] = 0u;
  v70[6] = 0u;
  v70[7] = 0u;
  v70[4] = 0u;
  v70[5] = 0u;
  v70[2] = 0u;
  v70[3] = 0u;
  *v70 = 0u;
  v70[1] = 0u;
  bzero((void *)(v6 + 576 * v7 + 34954), 0x240uLL);
  if (v4 >= 1)
  {
    v71 = 1;
    do
    {
      v72 = *((_DWORD *)v91 + v71);
      if (v72 >= 1)
      {
        v73 = &v27[2 * v13 - 1];
        v74 = v72 + 1;
        v13 -= v72;
        do
        {
          v75 = *v73;
          v73 -= 2;
          *(_BYTE *)(v6 + 288 * v7 + v75 + 36682) = v71;
          --v74;
        }
        while (v74 > 1);
      }
      ++v71;
    }
    while (v71 != v4 + 1);
  }
LABEL_81:
  v95 = 0;
  if (v4 > 1)
  {
    v76 = 0;
    v77 = (int *)v91 + 1;
    v78 = (int *)&v96;
    v79 = (v4 + 1) - 2;
    do
    {
      v80 = *v77++;
      v76 = 2 * (v80 + v76);
      *v78++ = v76;
      --v79;
    }
    while (v79);
  }
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      v82 = v6 + 288 * v7 + i;
      v83 = *(unsigned __int8 *)(v82 + 36682);
      if (*(_BYTE *)(v82 + 36682))
      {
        v84 = 0;
        v85 = v94[v83];
        v94[v83] = v85 + 1;
        v86 = v83 + 1;
        do
        {
          v87 = v84;
          v88 = v85;
          v85 >>= 1;
          v84 = v88 & 1 | (2 * v87);
          --v86;
        }
        while (v86 > 1);
        *(_WORD *)(v6 + 576 * v7 + 2 * i + 34954) = v84;
      }
    }
  }
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_23C4F8F0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_23C4F9004(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_23C4F91FC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

void std::vector<tinyexr::LayerChannel>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::vector<tinyexr::LayerChannel>::__push_back_slow_path<tinyexr::LayerChannel const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v17;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v17 = v11 + 32;
  std::vector<tinyexr::LayerChannel>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<tinyexr::LayerChannel>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_23C4F979C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<tinyexr::LayerChannel>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<tinyexr::LayerChannel>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::LayerChannel>,std::reverse_iterator<tinyexr::LayerChannel*>,std::reverse_iterator<tinyexr::LayerChannel*>,std::reverse_iterator<tinyexr::LayerChannel*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::LayerChannel>,std::reverse_iterator<tinyexr::LayerChannel*>,std::reverse_iterator<tinyexr::LayerChannel*>,std::reverse_iterator<tinyexr::LayerChannel*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::LayerChannel>,std::reverse_iterator<tinyexr::LayerChannel*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::LayerChannel>,std::reverse_iterator<tinyexr::LayerChannel*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::LayerChannel>,std::reverse_iterator<tinyexr::LayerChannel*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::LayerChannel>,std::reverse_iterator<tinyexr::LayerChannel*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t std::__split_buffer<tinyexr::LayerChannel>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<tinyexr::LayerChannel>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<tinyexr::LayerChannel>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<tinyexr::LayerChannel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<tinyexr::LayerChannel>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<tinyexr::ChannelInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

void std::vector<unsigned char>::push_back[abi:ne180100](unint64_t *a1, _BYTE *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = *a2;
    v6 = (uint64_t)&v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::vector<_EXRAttribute>::push_back[abi:ne180100](void **a1, void *__src)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v9 = 0xF83E0F83E0F83E1 * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    if ((unint64_t)(v9 + 1) > 0x7C1F07C1F07C1FLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xF83E0F83E0F83E1 * ((v5 - (_BYTE *)*a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x3E0F83E0F83E0FLL)
      v12 = 0x7C1F07C1F07C1FLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_EXRAttribute>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[528 * v9];
    v15 = &v13[528 * v12];
    memcpy(v14, __src, 0x210uLL);
    v8 = v14 + 528;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v16 -= 528;
        v14 -= 528;
        memcpy(v14, v16, 0x210uLL);
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    memcpy(*(void **)(v4 - 8), __src, 0x210uLL);
    v8 = (char *)(v7 + 528);
  }
  a1[1] = v8;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_EXRAttribute>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7C1F07C1F07C20)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(528 * a2);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_23C4F9E14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t tinyexr::ReadOffsets(uint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t a4, char **a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v22;
  int v23;
  void **v24;
  void *__p[2];
  char v26;

  v5 = *a1;
  v6 = a1[1];
  if (v6 == *a1)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = a2 + a4;
  while (1)
  {
    v11 = (uint64_t *)(v5 + 24 * v8);
    v12 = *v11;
    if (v11[1] != *v11)
      break;
LABEL_12:
    v8 = ++v9;
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) <= v9)
      return 0;
  }
  v13 = 0;
  v14 = 0;
  while (*(_QWORD *)(v12 + 24 * v13 + 8) == *(_QWORD *)(v12 + 24 * v13))
  {
LABEL_10:
    v13 = ++v14;
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 24 * v8 + 8) - v12) >> 3) <= v14)
    {
      v6 = a1[1];
      goto LABEL_12;
    }
  }
  v15 = 0;
  v16 = *a3 + 8;
  v17 = 1;
  while (1)
  {
    if (v16 >= v10)
    {
      v22 = "Insufficient data size in offset table.";
      goto LABEL_16;
    }
    v18 = *(_QWORD *)(v16 - 8);
    if (v18 >= a4)
      break;
    *a3 = v16;
    v5 = *a1;
    v12 = *(_QWORD *)(*a1 + 24 * v8);
    v19 = (uint64_t *)(v12 + 24 * v13);
    v20 = *v19;
    *(_QWORD *)(*v19 + 8 * v15) = v18;
    v15 = v17;
    v16 += 8;
    ++v17;
    if (v15 >= (v19[1] - v20) >> 3)
      goto LABEL_10;
  }
  v22 = "Invalid offset value in DecodeEXRImage.";
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(__p, v22);
  v23 = v26;
  if (a5)
  {
    if (v26 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    *a5 = strdup((const char *)v24);
  }
  if (v23 < 0)
    operator delete(__p[0]);
  return 4294967292;
}

uint64_t tinyexr::IsAnyOffsetsAreInvalid(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;

  v1 = *a1;
  v2 = a1[1] - *a1;
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v6 = (uint64_t *)(v1 + 24 * v3);
    v5 = *v6;
    v7 = v6[1] - *v6;
    if (v7)
      break;
LABEL_10:
    v3 = ++v4;
    if (0xAAAAAAAAAAAAAAABLL * (v2 >> 3) <= v4)
      return 0;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
  while (1)
  {
    v12 = (uint64_t *)(v5 + 24 * v8);
    v11 = *v12;
    v13 = v12[1] - *v12;
    if (v13)
      break;
LABEL_9:
    v8 = ++v9;
    if (v10 <= v9)
      goto LABEL_10;
  }
  v14 = 0;
  v15 = v13 >> 3;
  v16 = 1;
  while (*(uint64_t *)(v11 + 8 * v14) >= 1)
  {
    v14 = v16;
    if (v15 <= v16++)
      goto LABEL_9;
  }
  return 1;
}

uint64_t tinyexr::ReconstructTileOffsets(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v6 = *(_QWORD **)result;
  v7 = *(_QWORD *)(result + 8);
  v8 = v7 - *(_QWORD *)result;
  if (v7 != *(_QWORD *)result)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(int *)(result + 24);
    v12 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v13 = 4;
    if (!a5)
      v13 = 0;
    while (1)
    {
      v15 = &v6[3 * v9];
      v14 = *v15;
      v16 = v15[1] - *v15;
      if (v16)
        break;
LABEL_37:
      v9 = ++v10;
      if (v12 <= v10)
        return result;
    }
    v17 = 0;
    v18 = 0;
    v19 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
    while (1)
    {
      v20 = *(_QWORD *)(v14 + 24 * v17 + 8) - *(_QWORD *)(v14 + 24 * v17);
      if (v20)
        break;
LABEL_36:
      v17 = ++v18;
      if (v19 <= v18)
        goto LABEL_37;
    }
    v21 = v20 >> 3;
    v22 = *(_DWORD *)(result + 28);
    v23 = 1;
    while (1)
    {
      v24 = a4;
      v25 = (unsigned int *)(a4 + v13);
      a4 = a6 ? (uint64_t)v25 + *((_QWORD *)v25 + 2) + *((_QWORD *)v25 + 3) + 40 : (uint64_t)v25 + (int)v25[4] + 20;
      v26 = *v25;
      v27 = v25[1];
      v28 = v25[2];
      v29 = v25[3];
      if (((v27 | v26 | v29 | v28) & 0x80000000) != 0)
        break;
      v30 = *(_DWORD *)(a2 + 68);
      if (v30 == 2)
      {
        v31 = v28 + v29 * v11;
        v32 = (int)v11 <= (int)v28 || v22 <= (int)v29;
        if (v32 || v12 <= v31)
          return result;
        v35 = &v6[3 * v31];
        v34 = *v35;
        if (0xAAAAAAAAAAAAAAABLL * ((v35[1] - *v35) >> 3) <= v27
          || v26 >= (uint64_t)(*(_QWORD *)(v34 + 24 * v27 + 8)
                            - *(_QWORD *)(v34 + 24 * v27)) >> 3)
        {
          return result;
        }
        LODWORD(v28) = v28 + v29 * v11;
      }
      else if (v30 == 1)
      {
        if ((int)v11 <= (int)v28)
          return result;
        if (v22 <= (int)v29)
          return result;
        if (v12 <= v28)
          return result;
        v36 = v6[3 * v28];
        if (0xAAAAAAAAAAAAAAABLL * ((v6[3 * v28 + 1] - v36) >> 3) <= v27
          || v26 >= (uint64_t)(*(_QWORD *)(v36 + 24 * v27 + 8)
                            - *(_QWORD *)(v36 + 24 * v27)) >> 3)
        {
          return result;
        }
      }
      else
      {
        if (v30
          || v29 | v28
          || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3) <= v27
          || v26 >= (uint64_t)(*(_QWORD *)(*v6 + 24 * v27 + 8)
                            - *(_QWORD *)(*v6 + 24 * v27)) >> 3)
        {
          return result;
        }
        LODWORD(v28) = 0;
      }
      *(_QWORD *)(*(_QWORD *)(v6[3 * (int)v28] + 24 * (int)v27) + 8 * (int)v26) = v24 - a3;
      v32 = v21 > v23++;
      if (!v32)
        goto LABEL_36;
    }
  }
  return result;
}

BOOL tinyexr::ReconstructLineOffsets(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;

  if (a3 >= a4)
    tinyexr::ReconstructLineOffsets();
  v5 = *a1;
  if (a2 != (a1[1] - *a1) >> 3)
    tinyexr::ReconstructLineOffsets();
  if (a2)
  {
    v6 = a4 - a3;
    if (a4 - a3 + 8 >= a5)
    {
      return 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(unsigned int *)(a4 + 4);
        if (v9 >= a5)
          break;
        *(_QWORD *)(v5 + 8 * v7) = v6;
        v8 = v7 + 1 >= a2;
        if (a2 - 1 == v7)
          break;
        a4 += (v9 + 8);
        v6 = a4 - a3;
        ++v7;
      }
      while (a4 - a3 + 8 < a5);
    }
  }
  else
  {
    return 1;
  }
  return v8;
}

void std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

char *tinyexr::WriteAttributeToMemory(uint64_t a1, char *__s, char *a3, char *a4, int a5)
{
  _BYTE *v10;
  size_t v11;
  size_t v12;
  int __src;
  uint64_t v15;

  v10 = *(_BYTE **)(a1 + 8);
  v11 = strlen(__s);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<char const*,char const*>((void **)a1, v10, __s, &__s[v11 + 1], v11 + 1);
  v12 = strlen(a3);
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<char const*,char const*>((void **)a1, *(_BYTE **)(a1 + 8), a3, &a3[v12 + 1], v12 + 1);
  __src = a5;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), (char *)&__src, (char *)&v15, 4);
  return std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(char **)(a1 + 8), a4, &a4[a5], a5);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<char const*,char const*>(void **a1, _BYTE *__dst, _BYTE *__src, _BYTE *a4, int64_t a5)
{
  _BYTE *v5;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  char v33;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = a1[1];
  v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    v18 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      v19 = &__src[a5];
      v21 = a1[1];
    }
    else
    {
      v19 = &__src[v18];
      if (&__src[v18] == a4)
      {
        v21 = a1[1];
      }
      else
      {
        v20 = __src - __dst;
        v21 = a1[1];
        v22 = v21;
        do
          *v22++ = (v21++)[v20];
        while (&v21[v20] != a4);
      }
      a1[1] = v21;
      if (v18 < 1)
        return v5;
    }
    v29 = &__dst[a5];
    v30 = &v21[-a5];
    v31 = v21;
    if (&v21[-a5] < v10)
    {
      v32 = &v10[a5] - v21;
      v31 = v21;
      do
      {
        v33 = *v30++;
        *v31++ = v33;
        --v32;
      }
      while (v32);
    }
    a1[1] = v31;
    if (v21 != v29)
      memmove(&__dst[a5], __dst, v21 - v29);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
  }
  else
  {
    v11 = *a1;
    v12 = v10 - (_BYTE *)*a1 + a5;
    if (v12 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v23 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v24 = &v13[(_QWORD)v17];
    v25 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = a1[1];
      v24 = v17;
    }
    v26 = &v23[a5];
    v27 = &v17[v25];
    if (v10 != v5)
      memmove(v26, v5, v10 - v5);
    v28 = *a1;
    *a1 = v24;
    a1[1] = &v26[v10 - v5];
    a1[2] = v27;
    if (v28)
      operator delete(v28);
    return v23;
  }
  return v5;
}

_QWORD *std::vector<tinyexr::OffsetData>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::OffsetData>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_23C4FA780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<tinyexr::OffsetData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<tinyexr::OffsetData>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<tinyexr::OffsetData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::vector<tinyexr::ChannelInfo>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C4FA8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<tinyexr::ChannelInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<tinyexr::ChannelInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::vector<tinyexr::ChannelInfo>::__construct_one_at_end[abi:ne180100]<tinyexr::ChannelInfo const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)(v4 + 24) = result;
  *(_QWORD *)(a1 + 8) = v4 + 40;
  return result;
}

void sub_23C4FAA08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<tinyexr::ChannelInfo>::__push_back_slow_path<tinyexr::ChannelInfo const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)&v10[40 * v4 + 24] = *(__int128 *)((char *)a2 + 24);
  v16 = (std::string *)((char *)v11 + 40);
  std::vector<tinyexr::ChannelInfo>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<tinyexr::ChannelInfo>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23C4FAB2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<tinyexr::ChannelInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<tinyexr::ChannelInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>,std::reverse_iterator<tinyexr::ChannelInfo*>,std::reverse_iterator<tinyexr::ChannelInfo*>,std::reverse_iterator<tinyexr::ChannelInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>,std::reverse_iterator<tinyexr::ChannelInfo*>,std::reverse_iterator<tinyexr::ChannelInfo*>,std::reverse_iterator<tinyexr::ChannelInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,std::reverse_iterator<tinyexr::ChannelInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,std::reverse_iterator<tinyexr::ChannelInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,std::reverse_iterator<tinyexr::ChannelInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,std::reverse_iterator<tinyexr::ChannelInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 40;
  }
}

uint64_t std::__split_buffer<tinyexr::ChannelInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<tinyexr::ChannelInfo>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<tinyexr::ChannelInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 5;
      *(_QWORD *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<unsigned char>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::vector<std::vector<std::vector<unsigned char>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C4FB554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned char>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned char>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void tinyexr::EncodePixelData(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  float v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  __int16 v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  char *v71;
  int64_t v72;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  char *v75;
  char *v76;
  char *v77;
  char v78;
  char v79;
  char *v80;
  char *v81;
  char v82;
  char v83;
  char v84;
  void *v85;
  unsigned int v86;
  _WORD *v87;
  size_t v88;
  unsigned __int16 *v89;
  unsigned __int16 *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  int64x2_t *v94;
  int *v95;
  char *v96;
  int v97;
  char v98;
  int v99;
  int v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  int v105;
  unint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  char *v111;
  char *v112;
  int64_t v113;
  std::vector<int>::pointer v114;
  std::vector<int>::pointer v115;
  char *v116;
  char *v117;
  char *v118;
  char v119;
  char v120;
  char *v121;
  char *v122;
  char v123;
  char v124;
  char v125;
  int *v126;
  char *v127;
  std::vector<int>::pointer v128;
  int *v129;
  unsigned __int8 *v130;
  int *v131;
  int *v132;
  int *v133;
  unsigned __int8 *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int *v138;
  BOOL v139;
  int64_t v140;
  char v141;
  unint64_t v142;
  void *v143;
  int v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  int v149;
  int v150;
  uint64_t v151;
  unsigned __int16 v152;
  unsigned __int8 *v153;
  _WORD *v154;
  __int16 v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  unint64_t v158;
  uint64_t v159;
  _WORD *v160;
  _DWORD *v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unsigned __int16 *v164;
  unint64_t v165;
  size_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  char *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  int *v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned __int16 *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int16 *v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  __int16 v198;
  int v199;
  int v200;
  unsigned int v201;
  __int16 v202;
  unsigned int v203;
  int v204;
  signed int v205;
  int v206;
  int v207;
  unsigned int v208;
  BOOL v209;
  int v210;
  unsigned __int16 v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned __int16 v215;
  int v216;
  int v217;
  int v218;
  int v219;
  signed int v220;
  __int16 v221;
  int v222;
  int v223;
  __int16 *v224;
  int v225;
  int v226;
  signed int v227;
  __int16 v228;
  int v229;
  int v230;
  unint64_t v231;
  _QWORD *v232;
  uint64_t v233;
  unsigned __int16 *v234;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  int *v243;
  char *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t **v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  std::vector<int>::pointer v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  void *v269;
  _BYTE *v270;
  int v271;
  uint64_t v272;
  _QWORD *v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  int v288;
  int v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  _BYTE *v293;
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int v325;
  size_t v326;
  int v327;
  int v328;
  char *__src;
  _DWORD *v330;
  _WORD *__dst;
  unint64_t v333;
  size_t __n;
  int *v335;
  int *v336;
  char *v338;
  uint64_t v339;
  int *v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v345;
  int v346;
  unsigned __int16 *v347;
  unsigned int v349;
  unint64_t v350;
  uint64_t v351;
  int v352;
  unsigned __int16 *v353;
  void *v354;
  void *v355;
  void *v356;
  char *v357;
  void *__p[3];
  void *v359;
  char *v360;
  void *v361;
  unsigned __int16 *v362;
  void *v363[3];
  void *v364[3];
  void *v365[3];
  char *v366;
  char *v367;
  std::vector<int> v368;
  _BYTE v369[9];

  std::vector<unsigned char>::vector(&v356, a8 * (uint64_t)a5 * a9);
  v15 = *a10;
  if (a10[1] != *a10)
  {
    v16 = 0;
    v17 = a7 * (uint64_t)a6;
    v18 = 4 * a6;
    v339 = 2 * v17;
    v341 = 4 * v17;
    v351 = 2 * a6;
    do
    {
      v19 = *(_DWORD *)(v15 + 40 * v16 + 24);
      if (v19 == 2)
      {
        v36 = *(_DWORD *)(a3 + 4 * v16);
        if (v36 == 1)
        {
          if (a8 >= 1)
          {
            v57 = 0;
            v58 = 0;
            v59 = v341;
            do
            {
              v60 = *(_QWORD *)(*a11 + 8 * v16);
              if (v357 - (_BYTE *)v356 <= (unint64_t)((v60 + v58 * a9) * a5))
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (a5 >= 1)
              {
                v61 = (char *)v356 + a5 * (v60 + v57) + 1;
                v62 = a5;
                v63 = v59;
                do
                {
                  v64 = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v16) + v63);
                  v65 = (v64 >> 23);
                  if ((v64 >> 23))
                  {
                    v66 = (((v64 & 0x7FFFFF | 0x800000) >> (125 - v65)) & 1)
                        + ((v64 & 0x7FFFFF | 0x800000) >> (126 - v65));
                    if (v65 < 0x66)
                      LOWORD(v66) = 0;
                    if (v65 > 0x70)
                      LOWORD(v66) = ((v64 >> 12) & 1) + ((v64 >> 13) & 0x3FF) + (((v64 >> 23 << 10) + 0x4000) & 0x7C00);
                    if (v65 > 0x8E)
                      LOWORD(v66) = 31744;
                    if ((v64 & 0x7FFFFF) != 0)
                      v67 = 32256;
                    else
                      v67 = 31744;
                    if (v65 == 255)
                      LOWORD(v65) = v67;
                    else
                      LOWORD(v65) = v66;
                  }
                  *(v61 - 1) = v65;
                  *v61 = (unsigned __int16)(HIWORD(v64) & 0x8000 | v65 & 0x7FFF) >> 8;
                  v61 += 2;
                  v63 += 4;
                  --v62;
                }
                while (v62);
              }
              ++v58;
              v57 += a9;
              v59 += v18;
            }
            while (v58 != a8);
          }
        }
        else
        {
          if (v36 != 2)
          {
            v327 = 12915;
LABEL_412:
            __assert_rtn("EncodePixelData", "tinyexr.h", v327, "0");
          }
          if (a8 >= 1)
          {
            v37 = 0;
            v38 = 0;
            v39 = v341;
            do
            {
              v40 = *(_QWORD *)(*a11 + 8 * v16);
              if (v357 - (_BYTE *)v356 <= (unint64_t)((v40 + v38 * a9) * a5))
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (a5 >= 1)
              {
                v41 = (char *)v356 + a5 * (v40 + v37) + 3;
                v42 = v39;
                v43 = a5;
                do
                {
                  *(_DWORD *)(v41 - 3) = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v16) + v42);
                  v42 += 4;
                  v41 += 4;
                  --v43;
                }
                while (v43);
              }
              ++v38;
              v39 += v18;
              v37 += a9;
            }
            while (v38 != a8);
          }
        }
      }
      else if (v19 == 1)
      {
        v28 = *(_DWORD *)(a3 + 4 * v16);
        if (v28 == 2)
        {
          if (a8 >= 1)
          {
            v44 = 0;
            v45 = 0;
            v46 = v339;
            do
            {
              v47 = *(_QWORD *)(*a11 + 8 * v16);
              if (v357 - (_BYTE *)v356 <= (unint64_t)((v47 + v45 * a9) * a5))
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (a5 >= 1)
              {
                v48 = (char *)v356 + a5 * (v47 + v44) + 3;
                v49 = v46;
                v50 = a5;
                do
                {
                  v51 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8 * v16) + v49);
                  v52 = (__int16)v51;
                  v53 = v51 << 13;
                  v54 = v53 & 0xF800000;
                  v55 = COERCE_FLOAT((v53 & 0xFFFE000) + 947912704) + -0.000061035;
                  if ((v53 & 0xF800000) != 0)
                    LODWORD(v55) = (v53 & 0xFFFE000) + 939524096;
                  v56 = v53 | 0x70000000;
                  if (v54 != 260046848)
                    v56 = LODWORD(v55);
                  *(_WORD *)(v48 - 3) = v56;
                  *(v48 - 1) = BYTE2(v56);
                  *v48 = (v56 | v52 & 0x80000000) >> 24;
                  v48 += 4;
                  v49 += 2;
                  --v50;
                }
                while (v50);
              }
              ++v45;
              v46 += v351;
              v44 += a9;
            }
            while (v45 != a8);
          }
        }
        else
        {
          if (v28 != 1)
          {
            v327 = 12871;
            goto LABEL_412;
          }
          if (a8 >= 1)
          {
            v29 = 0;
            v30 = 0;
            v31 = v339;
            do
            {
              v32 = *(_QWORD *)(*a11 + 8 * v16);
              if (v357 - (_BYTE *)v356 <= (unint64_t)((v32 + v30 * a9) * a5))
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (a5 >= 1)
              {
                v33 = (char *)v356 + a5 * (v32 + v29) + 1;
                v34 = a5;
                v35 = v31;
                do
                {
                  *(_WORD *)(v33 - 1) = *(_WORD *)(*(_QWORD *)(a2 + 8 * v16) + v35);
                  v33 += 2;
                  v35 += 2;
                  --v34;
                }
                while (v34);
              }
              ++v30;
              v29 += a9;
              v31 += v351;
            }
            while (v30 != a8);
          }
        }
      }
      else
      {
        if (v19)
          v20 = 1;
        else
          v20 = a8 < 1;
        if (!v20)
        {
          v21 = 0;
          v22 = 0;
          v23 = v341;
          do
          {
            v24 = *(_QWORD *)(*a11 + 8 * v16);
            if (v357 - (_BYTE *)v356 <= (unint64_t)((v24 + v22 * a9) * a5))
              std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
            if (a5 >= 1)
            {
              v25 = (char *)v356 + a5 * (v24 + v21) + 3;
              v26 = v23;
              v27 = a5;
              do
              {
                *(_DWORD *)(v25 - 3) = *(_DWORD *)(*(_QWORD *)(a2 + 8 * v16) + v26);
                v26 += 4;
                v25 += 4;
                --v27;
              }
              while (v27);
            }
            ++v22;
            v23 += v18;
            v21 += a9;
          }
          while (v22 != a8);
        }
      }
      ++v16;
      v15 = *a10;
    }
    while (v16 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a10[1] - *a10) >> 3));
  }
  if (!a4)
  {
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a1, *(char **)(a1 + 8), (char *)v356, v357, v357 - (_BYTE *)v356);
    goto LABEL_400;
  }
  if ((a4 & 0xFFFFFFFE) == 2)
  {
    v68 = 5 * ((((unint64_t)(v357 - (_BYTE *)v356) >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64);
    if (110 * (v357 - (_BYTE *)v356) / 0x64uLL + 128 <= v357 - (_BYTE *)v356 + v68 + 133)
      v69 = v357 - (_BYTE *)v356 + v68 + 133;
    else
      v69 = 110 * (v357 - (_BYTE *)v356) / 0x64uLL + 128;
    std::vector<unsigned char>::vector(&v366, v69);
    v70 = v366;
    if (v367 == v366 || (v71 = (char *)v356, v72 = v357 - (_BYTE *)v356, v357 == v356))
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    std::vector<unsigned char>::vector(&v368, v357 - (_BYTE *)v356);
    begin = v368.__begin_;
    end = v368.__end_;
    if (v368.__end_ == v368.__begin_)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v72 >= 1)
    {
      v75 = &v71[v72];
      v76 = v71;
      do
      {
        v78 = *v76;
        v77 = v76 + 1;
        *(_BYTE *)begin = v78;
        if (v77 >= v75)
          break;
        v79 = *v77;
        v76 = v77 + 1;
        *((_BYTE *)begin + ((unint64_t)(v72 + 1) >> 1)) = v79;
        begin = (std::vector<int>::pointer)((char *)begin + 1);
      }
      while (v76 < v75);
      begin = v368.__begin_;
      end = v368.__end_;
    }
    if (end == begin)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v72 >= 2)
    {
      v80 = (char *)begin + v72;
      v83 = *(_BYTE *)begin;
      v81 = (char *)begin + 1;
      v82 = v83;
      do
      {
        v84 = *v81;
        *v81 = (*v81 - v82) ^ 0x80;
        ++v81;
        v82 = v84;
      }
      while (v81 < v80);
      begin = v368.__begin_;
      end = v368.__end_;
    }
    v85 = (void *)(110 * v72 / 0x64uLL + 128);
    if ((unint64_t)v85 <= (unint64_t)(v72
                                                   + 5
                                                   * ((((unint64_t)v72 >> 10)
                                                     * (unsigned __int128)0x842108421084211uLL) >> 64)
                                                   + 133))
      v85 = (void *)(v72 + 5 * ((((unint64_t)v72 >> 10) * (unsigned __int128)0x842108421084211uLL) >> 64) + 133);
    v365[0] = v85;
    if (end == begin)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (mz_compress2((uint64_t)v70, (uint64_t *)v365, (uint64_t)begin, v72, -1))
      __assert_rtn("CompressZip", "tinyexr.h", 7718, "ret == miniz::MZ_OK");
    v86 = v365[0];
    if (v365[0] >= (void *)v72)
    {
      memcpy(v70, v71, v72);
      v86 = v72;
    }
    if (v368.__begin_)
    {
      v368.__end_ = v368.__begin_;
      operator delete(v368.__begin_);
    }
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a1, *(char **)(a1 + 8), v366, &v366[v86], v86);
LABEL_182:
    v143 = v366;
    if (!v366)
      goto LABEL_400;
    v367 = v366;
    goto LABEL_399;
  }
  if (a4 == 1)
  {
    std::vector<unsigned char>::vector(&v366, (unint64_t)(3 * (v357 - (_BYTE *)v356)) >> 1);
    v111 = v366;
    if (v367 == v366 || (v112 = (char *)v356, v113 = v357 - (_BYTE *)v356, v357 == v356))
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    std::vector<unsigned char>::vector(&v368, v357 - (_BYTE *)v356);
    v114 = v368.__begin_;
    v115 = v368.__end_;
    if (v368.__end_ == v368.__begin_)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v113 >= 1)
    {
      v116 = &v112[v113];
      v117 = v112;
      do
      {
        v119 = *v117;
        v118 = v117 + 1;
        *(_BYTE *)v114 = v119;
        if (v118 >= v116)
          break;
        v120 = *v118;
        v117 = v118 + 1;
        *((_BYTE *)v114 + ((unint64_t)(v113 + 1) >> 1)) = v120;
        v114 = (std::vector<int>::pointer)((char *)v114 + 1);
      }
      while (v117 < v116);
      v114 = v368.__begin_;
      v115 = v368.__end_;
    }
    if (v115 == v114)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v113 >= 2)
    {
      v121 = (char *)v114 + v113;
      v124 = *(_BYTE *)v114;
      v122 = (char *)v114 + 1;
      v123 = v124;
      do
      {
        v125 = *v122;
        *v122 = (*v122 - v123) ^ 0x80;
        ++v122;
        v123 = v125;
      }
      while (v122 < v121);
      v114 = v368.__begin_;
      v115 = v368.__end_;
    }
    if (v115 == v114)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if ((int)v113 < 1)
    {
      LODWORD(v127) = (_DWORD)v111;
    }
    else
    {
      v126 = (std::vector<int>::pointer)((char *)v114 + (int)v113);
      v127 = v111;
      v128 = v114;
      do
      {
        v129 = (std::vector<int>::pointer)((char *)v114 + 1);
        v130 = (unsigned __int8 *)v114 + 3;
        v131 = (std::vector<int>::pointer)((char *)v114 + 1);
        while (1)
        {
          v132 = v131;
          v133 = v129;
          if (v131 >= v126)
            break;
          v134 = v130;
          v131 = (int *)((char *)v131 + 1);
          v135 = *(unsigned __int8 *)v132;
          v136 = (char *)v129 - (char *)v128 - 1;
          v129 = (int *)((char *)v129 + 1);
          if (v136 <= 126)
          {
            v130 = v134 + 1;
            if (*(unsigned __int8 *)v128 == v135)
              continue;
          }
          v137 = (uint64_t)v129 + ~(unint64_t)v128;
          if (v137 <= 2)
          {
            if (v131 < v126)
            {
              v138 = (int *)((char *)v126 - 1);
              while (1)
              {
                v139 = v135 != *(v134 - 1) || v134 >= (unsigned __int8 *)v126;
                if (v139)
                {
                  if ((char *)v133 - (char *)v128 >= 127)
                    goto LABEL_167;
                }
                else if ((char *)v133 - (char *)v128 > 126 || v135 == *v134)
                {
LABEL_167:
                  v114 = (std::vector<int>::pointer)(v134 - 2);
                  goto LABEL_168;
                }
                v133 = (int *)((char *)v133 + 1);
                v135 = *(v134 - 1);
                v139 = v134++ >= (unsigned __int8 *)v126;
                if (v139)
                {
                  v137 = (char *)v126 - 1 - (char *)v128;
                  goto LABEL_163;
                }
              }
            }
            v138 = v132;
LABEL_163:
            if (v137 <= 126)
              v133 = v126;
            else
              v133 = v138;
            v114 = v133;
            goto LABEL_168;
          }
LABEL_160:
          *v127 = v137 - 1;
          v127[1] = *(_BYTE *)v128;
          v127 += 2;
          v114 = v132;
          goto LABEL_173;
        }
        LOBYTE(v137) = (_BYTE)v129 - (_BYTE)v128;
        if ((char *)v129 - (char *)v128 > 2)
          goto LABEL_160;
        v114 = v131;
LABEL_168:
        *v127++ = (_BYTE)v128 - (_BYTE)v133;
        if (v128 >= v114)
        {
          v132 = v128;
        }
        else
        {
          v140 = (char *)v133 - (char *)v128;
          do
          {
            v141 = *(_BYTE *)v128;
            v128 = (std::vector<int>::pointer)((char *)v128 + 1);
            *v127++ = v141;
            --v140;
          }
          while (v140);
          v132 = v133;
        }
LABEL_173:
        v128 = v132;
      }
      while (v132 < v126);
    }
    if ((int)v127 - (int)v111 <= 0)
      __assert_rtn("CompressRle", "tinyexr.h", 7978, "outSize > 0");
    v142 = ((_DWORD)v127 - (_DWORD)v111);
    if (v142 >= v113)
    {
      memcpy(v111, v112, v113);
      v142 = v113;
    }
    if (v368.__begin_)
    {
      v368.__end_ = v368.__begin_;
      operator delete(v368.__begin_);
    }
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a1, *(char **)(a1 + 8), v366, &v366[v142], v142);
    goto LABEL_182;
  }
  if (a4 != 4)
  {
    if (a4 == 128)
      v328 = 13019;
    else
      v328 = 13022;
    __assert_rtn("EncodePixelData", "tinyexr.h", v328, "0");
  }
  std::vector<unsigned char>::vector(&v354, (2 * ((_DWORD)v357 - (_DWORD)v356) + 0x2000));
  v87 = v354;
  if (v355 == v354 || (__src = (char *)v356, v88 = v357 - (_BYTE *)v356, v357 == v356))
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  std::vector<unsigned char>::vector(v363, 0x2000uLL);
  std::vector<unsigned short>::vector(&v361, v88 >> 1);
  __dst = v87;
  std::vector<tinyexr::PIZChannelData>::vector(&v359, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a10[1] - *a10) >> 3));
  v90 = (unsigned __int16 *)v361;
  v89 = v362;
  if (v362 == v361)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  v91 = (char *)v359;
  v92 = v360;
  if (v360 != v359)
  {
    v93 = (v360 - (_BYTE *)v359) >> 5;
    if (v93 <= 1)
      v93 = 1;
    v94 = (int64x2_t *)((char *)v359 + 16);
    v95 = (int *)(*a10 + 24);
    v96 = (char *)v361;
    do
    {
      v94[-1] = vdupq_n_s64((unint64_t)v96);
      v94->i32[0] = a5;
      v94->i32[1] = a8;
      v97 = *v95;
      v95 += 10;
      v98 = v97 != 1;
      if (v97 == 1)
        v99 = 1;
      else
        v99 = 2;
      v94->i32[3] = v99;
      v96 += 2 * ((a8 * a5) << v98);
      v94 += 2;
      --v93;
    }
    while (v93);
  }
  __n = v88;
  if (a8 >= 1)
  {
    v100 = 0;
    v101 = __src;
    do
    {
      if (v92 == v91)
      {
        v92 = v91;
      }
      else
      {
        v102 = 0;
        v103 = 0;
        do
        {
          v104 = &v91[v102];
          v105 = *(_DWORD *)&v91[v102 + 28] * *(_DWORD *)&v91[v102 + 16];
          memcpy(*(void **)&v91[v102 + 8], v101, 2 * v105);
          v101 += 2 * v105;
          *((_QWORD *)v104 + 1) += 2 * v105;
          ++v103;
          v91 = (char *)v359;
          v92 = v360;
          v102 += 32;
        }
        while (v103 < (v360 - (_BYTE *)v359) >> 5);
      }
      ++v100;
    }
    while (v100 != a8);
    v90 = (unsigned __int16 *)v361;
    v89 = v362;
  }
  v106 = (char *)v89 - (char *)v90;
  if (v89 == v90)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  v107 = v363[0];
  bzero(v363[0], 0x2000uLL);
  if ((int)(v106 >> 1) < 1)
  {
    v110 = 0;
  }
  else
  {
    v108 = (v106 >> 1);
    do
    {
      v109 = *v90++;
      v107[(unint64_t)v109 >> 3] |= 1 << (v109 & 7);
      --v108;
    }
    while (v108);
    v110 = *v107 & 0xFE;
  }
  v144 = 0;
  v145 = 0;
  v146 = 0;
  *v107 = v110;
  v147 = 0x1FFF;
  do
  {
    if (v146 >= (unsigned __int16)v147)
      v148 = v147;
    else
      v148 = v146;
    if (v146 >= (unsigned __int16)v147)
      v149 = v145;
    else
      v149 = v144;
    if (v146 <= (unsigned __int16)v149)
      v150 = v144;
    else
      v150 = v146;
    if (v146 > (unsigned __int16)v149)
      v149 = v146;
    if (v107[v146])
    {
      v147 = v148;
      v144 = v150;
      v145 = v149;
    }
    ++v146;
  }
  while (v146 != 0x2000);
  std::vector<unsigned short>::vector(__p, 0x10000);
  v151 = 0;
  v152 = 0;
  v153 = (unsigned __int8 *)v363[0];
  v154 = __p[0];
  do
  {
    if (v151 && ((v153[v151 >> 3] >> (v151 & 7)) & 1) == 0)
      v155 = 0;
    else
      v155 = v152++;
    v154[v151++] = v155;
  }
  while (v151 != 0x10000);
  v156 = (unsigned __int16 *)v361;
  v157 = v362;
  v158 = (char *)v362 - (_BYTE *)v361;
  if (v362 == v361)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  if ((int)(v158 >> 1) >= 1)
  {
    v159 = (v158 >> 1);
    v160 = v361;
    do
    {
      *v160 = v154[(unsigned __int16)*v160];
      ++v160;
      --v159;
    }
    while (v159);
  }
  *__dst = v147;
  __dst[1] = v144;
  v161 = __dst + 2;
  if ((unsigned __int16)v147 <= (unsigned __int16)v144)
  {
    v162 = &v153[(unsigned __int16)v147];
    v163 = (unsigned __int16)v144 - (unint64_t)(unsigned __int16)v147;
    v164 = v156;
    v165 = v163 + 1;
    memcpy(__dst + 2, v162, v163 + 1);
    v161 = (_DWORD *)((char *)v161 + v165);
    v156 = v164;
  }
  v330 = v161;
  v166 = __n;
  v168 = (char *)v359;
  v167 = v360;
  if (v360 != v359)
  {
    v169 = 0;
    v349 = v152 - 1;
    do
    {
      v170 = &v168[32 * v169];
      v171 = *((_DWORD *)v170 + 7);
      v340 = (int *)(v170 + 28);
      if (v171 >= 1)
      {
        v333 = v169;
        v172 = 0;
        v173 = 0;
        v174 = (int *)(v170 + 16);
        v175 = (int *)(v170 + 20);
        v336 = (int *)(v170 + 16);
        v338 = v170;
        v335 = (int *)(v170 + 20);
        do
        {
          v176 = *v174;
          v177 = *v175;
          if (*v174 >= *v175)
            v178 = *v175;
          else
            v178 = *v174;
          v352 = v178;
          if (v178 >= 2)
          {
            v342 = v173;
            v345 = v172;
            v179 = *(_QWORD *)v170 + 2 * v173;
            v180 = v176 * v171;
            v347 = (unsigned __int16 *)(*(_QWORD *)v170 + v172);
            v181 = 1;
            v182 = 2;
            do
            {
              v183 = v181;
              v181 = v182;
              v184 = (v177 - v182) * v180;
              v185 = v183 * v171;
              v186 = v181 * v171;
              v187 = v349 >> 14;
              v188 = (unsigned __int16 *)v179;
              if ((v184 & 0x80000000) == 0)
              {
                v189 = v179 + 2 * v184;
                v190 = (v176 - v181) * v171;
                v191 = v183 * v180;
                v192 = 2 * v191 + 2 * v185;
                v188 = v347;
                do
                {
                  v193 = v188;
                  if ((v190 & 0x80000000) == 0)
                  {
                    v193 = v188;
                    do
                    {
                      v194 = (__int16)*v193;
                      v195 = (__int16)v193[v185];
                      if (v187)
                      {
                        v206 = v193[v185];
                        v207 = *v193 ^ 0x8000;
                        v208 = (v207 + v206) >> 1;
                        v209 = __OFSUB__(v207, v206);
                        v210 = v207 - v206;
                        v211 = v208 + 0x8000;
                        if (v210 < 0 == v209)
                          v211 = v208;
                        v212 = *(unsigned __int16 *)((char *)v193 + v192);
                        v213 = v193[v191] ^ 0x8000;
                        v214 = (v213 + v212) >> 1;
                        v209 = __OFSUB__(v213, v212);
                        v205 = v213 - v212;
                        v215 = v214 + 0x8000;
                        if (v205 < 0 == v209)
                          v215 = v214;
                        v216 = v211 ^ 0x8000;
                        v203 = (v216 + v215) >> 1;
                        v204 = v216 - v215;
                        if (v204 < 0)
                          LOWORD(v203) = v203 + 0x8000;
                        v217 = (unsigned __int16)v210 ^ 0x8000;
                        v194 = v217 - (unsigned __int16)v205;
                        if (v194 >= 0)
                          LOWORD(v205) = (v217 + (unsigned __int16)v205) >> 1;
                        else
                          LOWORD(v205) = ((v217 + (unsigned __int16)v205) >> 1) + 0x8000;
                      }
                      else
                      {
                        v196 = v195 + v194;
                        v197 = (v195 + v194) >> 1;
                        v198 = v194 - v195;
                        v199 = (__int16)v193[v191];
                        v200 = *(__int16 *)((char *)v193 + v192);
                        v201 = v200 + v199;
                        v202 = v199 - v200;
                        v203 = (((v200 + v199) >> 1) + (v196 >> 1)) >> 1;
                        v204 = v197 - (v201 >> 1);
                        v205 = (v202 + v198) >> 1;
                        LOWORD(v194) = v198 - v202;
                      }
                      *v193 = v203;
                      v193[v191] = v204;
                      v193[v185] = v205;
                      *(unsigned __int16 *)((char *)v193 + v192) = v194;
                      v193 += v186;
                    }
                    while (v193 <= &v188[v190]);
                  }
                  if ((v183 & v176) != 0)
                  {
                    v218 = (__int16)*v193;
                    v219 = (__int16)v193[v191];
                    if (v187)
                    {
                      v220 = v193[v191];
                      v222 = *v193 ^ 0x8000;
                      v221 = (v218 ^ 0x8000) - v220;
                      if (v222 >= v220)
                        LOWORD(v220) = (v222 + v220) >> 1;
                      else
                        LOWORD(v220) = ((v222 + v220) >> 1) + 0x8000;
                    }
                    else
                    {
                      v220 = (v219 + v218) >> 1;
                      v221 = v218 - v219;
                    }
                    v193[v191] = v221;
                    *v193 = v220;
                  }
                  v188 += v181 * v180;
                }
                while ((unint64_t)v188 <= v189);
              }
              if ((v183 & v177) != 0)
              {
                v223 = (v176 - v181) * v171;
                if ((v223 & 0x80000000) == 0)
                {
                  v224 = (__int16 *)&v188[v223];
                  do
                  {
                    v225 = (__int16)*v188;
                    v226 = (__int16)v188[v185];
                    if (v187)
                    {
                      v227 = v188[v185];
                      v229 = *v188 ^ 0x8000;
                      v228 = (v225 ^ 0x8000) - v227;
                      if (v229 >= v227)
                        LOWORD(v227) = (v229 + v227) >> 1;
                      else
                        LOWORD(v227) = ((v229 + v227) >> 1) + 0x8000;
                    }
                    else
                    {
                      v227 = (v226 + v225) >> 1;
                      v228 = v225 - v226;
                    }
                    v188[v185] = v228;
                    *v188 = v227;
                    v188 += v186;
                  }
                  while (v188 <= (unsigned __int16 *)v224);
                }
              }
              v182 = 2 * v181;
            }
            while (2 * v181 <= v352);
            v170 = v338;
            v171 = *v340;
            v166 = __n;
            v175 = v335;
            v173 = v342;
            v172 = v345;
            v174 = v336;
          }
          ++v173;
          v172 += 2;
        }
        while (v173 < v171);
        v168 = (char *)v359;
        v167 = v360;
        v169 = v333;
      }
      ++v169;
    }
    while (v169 < (v167 - v168) >> 5);
    v156 = (unsigned __int16 *)v361;
    v157 = v362;
  }
  *v330 = 0;
  v230 = (_DWORD)v330 + 4;
  v231 = (char *)v157 - (char *)v156;
  if (v157 == v156)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  if (!(v231 >> 1))
  {
    v242 = 0;
    v243 = v330;
    goto LABEL_387;
  }
  v353 = v156;
  std::vector<long long>::vector(v364, 0x10001uLL);
  v232 = v364[0];
  bzero(v364[0], 0x80008uLL);
  if ((int)(v231 >> 1) >= 1)
  {
    v233 = (v231 >> 1);
    v234 = v353;
    do
    {
      v235 = *v234++;
      ++v232[v235];
      --v233;
    }
    while (v233);
  }
  std::vector<int>::vector(&v368, 0x10001uLL);
  v350 = v231 >> 1;
  std::vector<long long *>::vector(&v366, 0x10001uLL);
  v236 = v232 - 1;
  v237 = -1;
  do
  {
    v238 = v236[1];
    ++v236;
    ++v237;
  }
  while (!v238);
  v343 = v231;
  if (v237 > 0x10000)
  {
    v239 = 0;
    v240 = 0;
  }
  else
  {
    v239 = 0;
    v240 = 0;
    v241 = v237;
    do
    {
      v368.__begin_[v241] = v241;
      if (*v236)
      {
        *(_QWORD *)&v366[8 * v240++] = v236;
        v239 = v241;
      }
      ++v241;
      ++v236;
    }
    while (v241 != 65537);
  }
  v346 = v239 + 1;
  v232[v239 + 1] = 1;
  *(_QWORD *)&v366[8 * v240] = &v232[v239 + 1];
  if (v240 >= 1)
  {
    v244 = v366;
    v245 = (unint64_t)(v240 + 1 - 2) >> 1;
    v246 = v245 + 1;
    v247 = (uint64_t **)&v366[8 * v245];
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>((uint64_t)v244, (uint64_t)v365, v240 + 1, v247--);
      --v246;
    }
    while (v246);
  }
  std::vector<long long>::vector(v365, 0x10001uLL);
  v248 = (uint64_t *)v365[0];
  bzero(v365[0], 0x80008uLL);
  if (v240 >= 1)
  {
    v250 = (v240 + 1);
    do
    {
      v251 = v366;
      v252 = *(_QWORD *)v366;
      v253 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>(v366, (uint64_t)v369, v250);
      v254 = &v251[8 * v250 - 8];
      if (v253 == v254)
      {
        *(_QWORD *)v253 = v252;
      }
      else
      {
        *(_QWORD *)v253 = *(_QWORD *)v254;
        *(_QWORD *)v254 = v252;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>((uint64_t)v251, (uint64_t)(v253 + 8), (uint64_t)v369, (v253 + 8 - v251) >> 3);
      }
      v255 = v366;
      v256 = *(_QWORD *)v366;
      if (((v250 - 1) & 0xFFFFFFFELL) != 0)
      {
        v257 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>(v366, (uint64_t)v369, (v250 - 1));
        v258 = &v255[8 * (v250 - 1) - 8];
        if (v257 == v258)
        {
          *(_QWORD *)v257 = v256;
        }
        else
        {
          *(_QWORD *)v257 = *(_QWORD *)v258;
          *(_QWORD *)v258 = v256;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>((uint64_t)v255, (uint64_t)(v257 + 8), (uint64_t)v369, (v257 + 8 - v255) >> 3);
        }
      }
      v259 = v252 - (_QWORD)v232;
      v260 = (unint64_t)(v252 - (_QWORD)v232) >> 3;
      v261 = (unint64_t)(v256 - (_QWORD)v232) >> 3;
      v232[(int)v261] += v232[(int)v260];
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>((uint64_t)v366, (uint64_t)&v366[8 * (v250 - 1)], (uint64_t)v369, (v250 - 1));
      v262 = (int)(v259 >> 3);
      v248 = (uint64_t *)v365[0];
      v263 = v368.__begin_;
      do
      {
        v264 = v248[(int)v261];
        v248[(int)v261] = v264 + 1;
        if (v264 >= 58)
          __assert_rtn("hufBuildEncTable", "tinyexr.h", 8655, "scode[j] <= 58");
        v265 = (int)v261;
        LODWORD(v261) = v263[(int)v261];
      }
      while ((_DWORD)v261 != (_DWORD)v265);
      v263[v265] = v260;
      v266 = v248[v262];
      v248[v262] = v266 + 1;
      if (v266 > 57)
LABEL_379:
        __assert_rtn("hufBuildEncTable", "tinyexr.h", 8674, "scode[j] <= 58");
      while (1)
      {
        v267 = v263[v262];
        if (v267 == (_DWORD)v260)
          break;
        v262 = v267;
        v268 = v248[v267];
        v248[v267] = v268 + 1;
        LODWORD(v260) = v267;
        if (v268 >= 58)
          goto LABEL_379;
      }
      v20 = (int)v250-- < 3;
    }
    while (!v20);
  }
  tinyexr::hufCanonicalCodeTable(v248, v249);
  v269 = v365[0];
  memcpy(v232, v365[0], 0x80008uLL);
  v365[1] = v269;
  operator delete(v269);
  if (v366)
  {
    v367 = v366;
    operator delete(v366);
  }
  v243 = v330;
  v230 = (_DWORD)v330 + 4;
  if (v368.__begin_)
  {
    v368.__end_ = v368.__begin_;
    operator delete(v368.__begin_);
  }
  if (v346 < (int)v237)
  {
    v270 = v330 + 6;
    v166 = __n;
    goto LABEL_330;
  }
  v271 = 0;
  v272 = 0;
  v273 = v364[0];
  v274 = v237;
  v270 = v330 + 6;
  do
  {
    v275 = v273[v274] & 0x3FLL;
    if (v274 > v239 || v275)
      goto LABEL_310;
    v276 = 0;
    do
    {
      if ((v273[v274 + 1 + v276] & 0x3FLL) != 0)
        break;
      if (++v276 + v274 >= v346)
        break;
    }
    while (v276 < 0x104);
    v274 += v276;
    v277 = v276 + 1;
    if ((v276 + 1) < 2)
    {
LABEL_310:
      v278 = v271 + 6;
      v272 = v275 | (v272 << 6);
      v209 = __OFSUB__(v271, 2);
      v279 = (v271 - 2);
      if ((int)v279 < 0 == v209)
      {
        do
        {
          v278 -= 8;
          *v270++ = v272 >> v279;
          v279 -= 8;
        }
        while (v278 > 7);
      }
      v271 = v278;
    }
    else
    {
      v280 = (v276 - 5);
      if (v277 < 6)
      {
        v283 = v271 + 6;
        v272 = (v277 + 57) | (unint64_t)(v272 << 6);
        v209 = __OFSUB__(v271, 2);
        v285 = (v271 - 2);
        if ((int)v285 < 0 == v209)
        {
          do
          {
            v283 -= 8;
            *v270++ = v272 >> v285;
            v285 -= 8;
          }
          while (v283 > 7);
        }
LABEL_327:
        v271 = v283;
        goto LABEL_313;
      }
      v281 = (v272 << 6) | 0x3F;
      v282 = (v271 - 2);
      if (v271 < 2)
      {
        v283 = v271 + 14;
        v272 = v280 | (v281 << 8);
        if (v271 < -6)
          goto LABEL_327;
      }
      else
      {
        v283 = v271 + 14;
        do
        {
          *v270++ = v281 >> v282;
          v284 = v283 - 16;
          v283 -= 8;
          v282 -= 8;
        }
        while (v284 > 7);
        v272 = v280 | (v281 << 8);
      }
      v286 = v283 - 8;
      v271 = v283;
      do
      {
        v271 -= 8;
        *v270++ = v272 >> v286;
        v286 -= 8;
      }
      while (v271 > 7);
    }
LABEL_313:
    v20 = v274++ <= v239;
  }
  while (v20);
  v166 = __n;
  if (v271 >= 1)
    *v270++ = v272 << (8 - v271);
LABEL_330:
  v287 = v364[0];
  v288 = *v353;
  if ((int)v350 > 1)
  {
    v289 = 0;
    v290 = 0;
    v291 = 0;
    v292 = 1;
    v293 = v270;
    while (v288 == v353[v292] && v289 <= 254)
    {
      ++v289;
LABEL_356:
      v288 = v353[v292++];
      if (v292 == (v343 >> 1))
        goto LABEL_359;
    }
    v294 = v287[v288];
    v295 = v287[v346];
    v296 = v294 & 0x3F;
    if ((v294 & 0x3F) + (v295 & 0x3F) + 8 >= (v294 & 0x3F) * v289)
    {
      if ((v289 & 0x80000000) == 0)
      {
        v305 = v294 & 0x3F;
        do
        {
          v291 = (v291 << v296) | (v294 >> 6);
          if ((int)(v290 + v305) < 8)
          {
            v290 += v305;
          }
          else
          {
            v306 = v305 - 8 + v290;
            v290 += v305;
            do
            {
              v290 -= 8;
              *v293++ = v291 >> v306;
              v306 -= 8;
            }
            while (v290 > 7);
          }
          v20 = v289-- <= 0;
        }
        while (!v20);
      }
    }
    else
    {
      v297 = v291 << v296;
      v298 = (v294 & 0x3F) + v290;
      v299 = v297 | (v294 >> 6);
      if (v298 >= 8)
      {
        v300 = v290 + (v294 & 0x3F) - 8;
        do
        {
          v298 -= 8;
          *v293++ = v299 >> v300;
          v300 -= 8;
        }
        while (v298 > 7);
      }
      v301 = v289;
      v302 = v298 + (v295 & 0x3F);
      v303 = (v299 << (v295 & 0x3F)) | (v295 >> 6);
      v291 = v301 | (v303 << 8);
      v304 = (v302 - 8);
      if (v302 < 8)
      {
        v290 = v302 + 8;
        if ((v302 & 0x80000000) == 0)
          goto LABEL_353;
      }
      else
      {
        do
        {
          v302 -= 8;
          *v293++ = v303 >> v304;
          v304 -= 8;
        }
        while (v302 > 7);
        v290 = v302 + 8;
LABEL_353:
        v307 = v290 - 8;
        do
        {
          v290 -= 8;
          *v293++ = v291 >> v307;
          v307 -= 8;
        }
        while (v290 > 7);
      }
    }
    v289 = 0;
    goto LABEL_356;
  }
  v291 = 0;
  v290 = 0;
  v289 = 0;
  v293 = v270;
LABEL_359:
  v308 = v287[v288];
  v309 = v287[v346];
  v310 = v308 & 0x3F;
  if ((v308 & 0x3F) + (v309 & 0x3F) + 8 >= (v308 & 0x3F) * v289)
  {
    if (v289 < 0)
    {
      v319 = v290;
    }
    else
    {
      v320 = v308 & 0x3F;
      v321 = v308 >> 6;
      do
      {
        v319 = v290 + v320;
        v291 = (v291 << v310) | v321;
        if ((int)(v290 + v320) >= 8)
        {
          v322 = v320 - 8 + v290;
          do
          {
            v319 -= 8;
            *v293++ = v291 >> v322;
            v322 -= 8;
          }
          while (v319 > 7);
        }
        v290 = v319;
        v20 = v289-- <= 0;
      }
      while (!v20);
    }
  }
  else
  {
    v311 = v291 << v310;
    v312 = (v308 & 0x3F) + v290;
    v313 = v311 | (v308 >> 6);
    if (v312 >= 8)
    {
      v314 = v290 + (v308 & 0x3F) - 8;
      do
      {
        v312 -= 8;
        *v293++ = v313 >> v314;
        v314 -= 8;
      }
      while (v312 > 7);
    }
    v315 = v313 << (v309 & 0x3F);
    v316 = v312 + (v309 & 0x3F);
    v317 = v315 | (v309 >> 6);
    v291 = v289 | (unint64_t)(v317 << 8);
    v318 = (v316 - 8);
    if (v316 < 8)
    {
      v319 = v316 + 8;
      if ((v316 & 0x80000000) == 0)
        goto LABEL_375;
    }
    else
    {
      do
      {
        v316 -= 8;
        *v293++ = v317 >> v318;
        v318 -= 8;
      }
      while (v316 > 7);
      v319 = v316 + 8;
LABEL_375:
      v323 = v319 - 8;
      do
      {
        v319 -= 8;
        *v293++ = v291 >> v323;
        v323 -= 8;
      }
      while (v319 > 7);
    }
  }
  if (v319)
    *v293 = v291 << (8 - v319);
  v330[1] = v237;
  v330[2] = v346;
  v324 = v319 + 8 * ((_DWORD)v293 - (_DWORD)v270);
  v325 = v324 + 7;
  if (v324 < -7)
    v325 = v324 + 14;
  v330[3] = (_DWORD)v270 - ((_DWORD)v330 + 24);
  v330[4] = v324;
  v242 = (_DWORD)v270 + (v325 >> 3) - ((_DWORD)v330 + 4);
  v330[5] = 0;
  if (v364[0])
  {
    v364[1] = v364[0];
    operator delete(v364[0]);
  }
LABEL_387:
  *v243 = v242;
  v326 = (v242 + v230 - (_DWORD)__dst);
  if (v166 <= v326)
  {
    memcpy(__dst, __src, v166);
    LODWORD(v326) = v166;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v359)
  {
    v360 = (char *)v359;
    operator delete(v359);
  }
  if (v361)
  {
    v362 = (unsigned __int16 *)v361;
    operator delete(v361);
  }
  if (v363[0])
  {
    v363[1] = v363[0];
    operator delete(v363[0]);
  }
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(a1, *(char **)(a1 + 8), (char *)v354, (char *)v354 + v326, v326);
  v143 = v354;
  if (v354)
  {
    v355 = v354;
LABEL_399:
    operator delete(v143);
  }
LABEL_400:
  if (v356)
  {
    v357 = (char *)v356;
    operator delete(v356);
  }
}

void sub_23C4FCFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  v40 = *(void **)(v38 - 144);
  if (v40)
  {
    *(_QWORD *)(v38 - 136) = v40;
    operator delete(v40);
  }
  v41 = *(void **)(v38 - 120);
  if (v41)
  {
    *(_QWORD *)(v38 - 112) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v38 - 192);
  if (v42)
  {
    *(_QWORD *)(v38 - 184) = v42;
    operator delete(v42);
  }
  if (__p)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  v43 = *(void **)(v38 - 216);
  if (v43)
  {
    *(_QWORD *)(v38 - 208) = v43;
    operator delete(v43);
  }
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned char>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_23C4FD2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned char>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<unsigned char>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<unsigned char>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C4FD558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

_QWORD *std::vector<unsigned short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_23C4FD81C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

_QWORD *std::vector<tinyexr::PIZChannelData>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::OffsetData>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_23C4FD8FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *tinyexr::hufCanonicalCodeTable(uint64_t *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[29];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = 65537;
  v12 = 0;
  v3 = 65537;
  v4 = this;
  memset(v11, 0, sizeof(v11));
  do
  {
    v5 = *v4++;
    ++*((_QWORD *)v11 + v5);
    --v3;
  }
  while (v3);
  v6 = 58;
  do
  {
    v7 = *((_QWORD *)v11 + v6) + v3;
    *((_QWORD *)v11 + v6) = v3;
    v3 = v7 >> 1;
  }
  while (v6-- > 1);
  do
  {
    if ((int)*this >= 1)
    {
      v9 = *this;
      v10 = *((_QWORD *)v11 + v9);
      *((_QWORD *)v11 + v9) = v10 + 1;
      *this = v9 | (v10 << 6);
    }
    ++this;
    --v2;
  }
  while (v2);
  return this;
}

_QWORD *std::vector<long long *>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C4FDA7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint64_t **)(result + 8 * v7);
      v9 = v6 + 2;
      v10 = *v8;
      if (v9 >= a3)
      {
        v12 = *v10;
      }
      else
      {
        v11 = v8[1];
        v12 = *v10;
        v13 = *v10 <= *v11;
        if (*v10 >= *v11)
          v12 = *v11;
        if (*v10 > *v11)
        {
          v10 = v8[1];
          ++v8;
        }
        if (!v13)
          v7 = v9;
      }
      v14 = *a4;
      v15 = **a4;
      if (v12 <= v15)
      {
        do
        {
          v16 = v8;
          *a4 = v10;
          if (v5 < v7)
            break;
          v17 = (2 * v7) | 1;
          v8 = (uint64_t **)(result + 8 * v17);
          v7 = 2 * v7 + 2;
          v10 = *v8;
          if (v7 >= a3)
          {
            v19 = *v10;
            v7 = v17;
          }
          else
          {
            v18 = v8[1];
            v19 = *v10;
            v20 = *v10 <= *v18;
            if (*v10 >= *v18)
              v19 = *v18;
            if (*v10 > *v18)
            {
              v10 = v8[1];
              ++v8;
            }
            if (v20)
              v7 = v17;
          }
          a4 = v16;
        }
        while (v19 <= v15);
        *v16 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3];
    v9 = (_QWORD *)v6[1];
    v7 = v6 + 1;
    v8 = v9;
    v10 = (2 * v3) | 1;
    v11 = 2 * v3 + 2;
    if (v11 < a3)
    {
      v12 = (_QWORD *)v7[1];
      v15 = __OFSUB__(*v8, *v12);
      v13 = *v8 == *v12;
      v14 = (uint64_t)(*v8 - *v12) < 0;
      if (*v8 > *v12)
        v8 = (_QWORD *)v7[1];
      if (!(v14 ^ v15 | v13))
      {
        ++v7;
        v10 = v11;
      }
    }
    *a1 = v8;
    a1 = v7;
    v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,tinyexr::FHeapCompare &,long long **>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = (_QWORD *)*v5;
    v9 = *(_QWORD **)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *v9;
    if (*(_QWORD *)*v5 > *v9)
    {
      do
      {
        v11 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = (_QWORD *)*v5;
        v7 = v11;
      }
      while (*(_QWORD *)*v5 > v10);
      *v11 = v8;
    }
  }
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_23C4FDC9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_23C4FDE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C4FDF44(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_23C4FDFB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<tinyexr::ChannelInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<tinyexr::HeaderInfo>::__push_back_slow_path<tinyexr::HeaderInfo const&>(uint64_t *a1, const tinyexr::HeaderInfo *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  tinyexr::HeaderInfo *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xB21642C8590B21)
    v9 = 0x1642C8590B21642;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (tinyexr::HeaderInfo *)&v10[184 * v4];
  v16 = &v10[184 * v9];
  tinyexr::HeaderInfo::HeaderInfo(v14, a2);
  v15 = (char *)v14 + 184;
  std::vector<tinyexr::HeaderInfo>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<tinyexr::HeaderInfo>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_23C4FE11C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<tinyexr::HeaderInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

tinyexr::HeaderInfo *tinyexr::HeaderInfo::HeaderInfo(tinyexr::HeaderInfo *this, const tinyexr::HeaderInfo *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<tinyexr::ChannelInfo>::__init_with_size[abi:ne180100]<tinyexr::ChannelInfo*,tinyexr::ChannelInfo*>((std::string *)this, *(__int128 **)a2, *((__int128 **)a2 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  std::vector<_EXRAttribute>::__init_with_size[abi:ne180100]<_EXRAttribute*,_EXRAttribute*>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), 0xF83E0F83E0F83E1 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 4));
  v4 = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 4) = v4;
  v5 = *((_OWORD *)a2 + 5);
  v6 = *((_OWORD *)a2 + 6);
  v7 = *((_OWORD *)a2 + 7);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_OWORD *)this + 6) = v6;
  *((_OWORD *)this + 7) = v7;
  *((_OWORD *)this + 5) = v5;
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v8;
  }
  v9 = (std::string *)((char *)this + 160);
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 10);
    *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_23C4FE23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;

  if (*(char *)(v10 + 159) < 0)
    operator delete(*v12);
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v14;
    operator delete(v14);
  }
  a10 = (void **)v10;
  std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

std::string *std::vector<tinyexr::ChannelInfo>::__init_with_size[abi:ne180100]<tinyexr::ChannelInfo*,tinyexr::ChannelInfo*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<tinyexr::ChannelInfo>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*,tinyexr::ChannelInfo*,tinyexr::ChannelInfo*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_23C4FE2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<tinyexr::ChannelInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*,tinyexr::ChannelInfo*,tinyexr::ChannelInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)v6 + 24);
      v6 = (__int128 *)((char *)v6 + 40);
      v4 = (std::string *)((char *)v8 + 40);
      v13 = (std::string *)((char *)v8 + 40);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_23C4FE40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::ChannelInfo>,tinyexr::ChannelInfo*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 17) < 0)
      operator delete(*(void **)(v1 - 40));
    v1 -= 40;
  }
}

_QWORD *std::vector<_EXRAttribute>::__init_with_size[abi:ne180100]<_EXRAttribute*,_EXRAttribute*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<_EXRAttribute>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C4FE4F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<_EXRAttribute>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x7C1F07C1F07C20)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_EXRAttribute>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[528 * v4];
  return result;
}

void std::vector<tinyexr::HeaderInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>,std::reverse_iterator<tinyexr::HeaderInfo*>,std::reverse_iterator<tinyexr::HeaderInfo*>,std::reverse_iterator<tinyexr::HeaderInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(184 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::HeaderInfo>,std::reverse_iterator<tinyexr::HeaderInfo*>,std::reverse_iterator<tinyexr::HeaderInfo*>,std::reverse_iterator<tinyexr::HeaderInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 184;
    do
    {
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      v9 = *(_OWORD *)(a3 - 184);
      a3 -= 184;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v11 = *(_OWORD *)(a3 + 96);
      v10 = *(_OWORD *)(a3 + 112);
      v12 = *(_OWORD *)(a3 + 80);
      *(_DWORD *)(v8 + 128) = *(_DWORD *)(a3 + 128);
      *(_OWORD *)(v8 + 96) = v11;
      *(_OWORD *)(v8 + 112) = v10;
      *(_OWORD *)(v8 + 80) = v12;
      v13 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v8 + 64) = v13;
      v14 = *(_OWORD *)(a3 + 136);
      *(_QWORD *)(v8 + 152) = *(_QWORD *)(a3 + 152);
      *(_OWORD *)(v8 + 136) = v14;
      *(_QWORD *)(a3 + 144) = 0;
      *(_QWORD *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 136) = 0;
      result = *(__n128 *)(a3 + 160);
      *(_QWORD *)(v8 + 176) = *(_QWORD *)(a3 + 176);
      *(__n128 *)(v8 + 160) = result;
      *(_QWORD *)(a3 + 160) = 0;
      *(_QWORD *)(a3 + 168) = 0;
      *(_QWORD *)(a3 + 176) = 0;
      v8 -= 184;
      v7 -= 184;
    }
    while (a3 != a5);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<tinyexr::HeaderInfo,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = (void **)a1;
  std::vector<tinyexr::ChannelInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::__split_buffer<tinyexr::HeaderInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 184;
    std::__destroy_at[abi:ne180100]<tinyexr::HeaderInfo,0>(i - 184);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<tinyexr::HeaderInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::__destroy_at[abi:ne180100]<tinyexr::HeaderInfo,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<tinyexr::OffsetData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::OffsetData>,std::reverse_iterator<tinyexr::OffsetData*>,std::reverse_iterator<tinyexr::OffsetData*>,std::reverse_iterator<tinyexr::OffsetData*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<tinyexr::OffsetData>,std::reverse_iterator<tinyexr::OffsetData*>,std::reverse_iterator<tinyexr::OffsetData*>,std::reverse_iterator<tinyexr::OffsetData*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *((_OWORD *)a3 - 2);
      a3 -= 4;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_QWORD *)(v7 - 8) = a3[3];
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::OffsetData>,std::reverse_iterator<tinyexr::OffsetData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::OffsetData>,std::reverse_iterator<tinyexr::OffsetData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::OffsetData>,std::reverse_iterator<tinyexr::OffsetData*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<tinyexr::OffsetData>,std::reverse_iterator<tinyexr::OffsetData*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<tinyexr::OffsetData>::~__split_buffer(void **a1)
{
  std::__split_buffer<tinyexr::OffsetData>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<tinyexr::OffsetData>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<tinyexr::OffsetData>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::LayerChannel>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<tinyexr::OffsetData>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<tinyexr::OffsetData>::~__split_buffer(&v14);
  }
}

void sub_23C4FEAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<tinyexr::OffsetData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<unsigned long long>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<unsigned long long>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<unsigned long long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<std::vector<std::vector<unsigned long long>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<unsigned long long>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<unsigned long long>>>::~__split_buffer(&v15);
  }
}

void sub_23C4FEDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<unsigned long long>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<unsigned long long>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<unsigned long long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<unsigned long long>>>,std::reverse_iterator<std::vector<std::vector<unsigned long long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<unsigned long long>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<unsigned long long>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<unsigned long long>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<unsigned long long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_23C4FF128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>,std::reverse_iterator<std::vector<unsigned long long>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long long>>,std::reverse_iterator<std::vector<unsigned long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

uint64_t *tinyexr::CalculateNumTiles(uint64_t *result, tinyexr *this, int a3, int a4)
{
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (result[1] != *result)
  {
    v7 = result;
    v8 = 0;
    v9 = 0;
    v10 = 0x80000000 - a3;
    v11 = a3 - 1;
    do
    {
      result = (uint64_t *)tinyexr::LevelSize(this, v9, a4);
      if ((int)result > v10)
        tinyexr::CalculateNumTiles();
      v12 = *v7;
      v13 = v7[1];
      *(_DWORD *)(*v7 + 4 * v8) = (v11 + (int)result) / a3;
      v8 = ++v9;
    }
    while (v9 < (unint64_t)((v13 - v12) >> 2));
  }
  return result;
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t tinyexr::LevelSize(tinyexr *this, int a2, int a3)
{
  int v3;

  if (a2 < 0)
    tinyexr::LevelSize();
  v3 = (int)this / (1 << a2);
  if (a3 == 1 && v3 << a2 < (int)this)
    ++v3;
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

uint64_t tinyexr::DecodeTiledLevel(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, uint64_t a6, unint64_t a7, std::string *a8)
{
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  void *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *Image;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  size_t v37;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  _BOOL4 v58;
  _DWORD *v59;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  uint64_t v68;

  v13 = *(unsigned int *)(a2 + 120);
  v14 = *(_DWORD *)(a2 + 68);
  if (v14)
  {
    v15 = *((_DWORD *)a1 + 4);
    if (v14 == 2)
    {
      v15 += *((_DWORD *)a1 + 5) * *(_DWORD *)(a3 + 24);
    }
    else if (v14 != 1)
    {
      tinyexr::LevelIndex();
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = *(_QWORD *)a3 + 24 * v15;
  v17 = *(_QWORD **)v16;
  v18 = -1431655765 * ((*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3);
  if (!v18)
    tinyexr::DecodeTiledLevel();
  v19 = (v17[1] - *v17) >> 3;
  if (!(_DWORD)v19)
    tinyexr::DecodeTiledLevel();
  v20 = v19 * v18;
  v21 = malloc_type_calloc(0x20uLL, (int)v19 * v18, 0x5C18B6ADuLL);
  v22 = v20;
  *a1 = (uint64_t)v21;
  v66 = v20;
  if (v20 < 1)
  {
    v26 = 0;
  }
  else
  {
    v23 = a5;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v64 = v23;
    v65 = a4;
    v27 = 32 * v22;
    v68 = v27;
    do
    {
      Image = tinyexr::AllocateImage(v13, *(_QWORD *)(a2 + 104), *(_DWORD **)(a2 + 128), *(_DWORD *)(a2 + 60), *(_DWORD *)(a2 + 64));
      v29 = *a1;
      *(_QWORD *)(*a1 + v24 + 24) = Image;
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v15) + 24 * (v25 / (int)v19))
                      + 8 * (v25 % (int)v19));
      v31 = a7 - (v30 + 20);
      if (a7 >= v30 + 20)
      {
        v32 = a7;
        v33 = v13;
        v34 = (int *)(a6 + v30);
        v35 = v34[2];
        if (v35 == *((_DWORD *)a1 + 4) && (v36 = v34[3], v36 == *((_DWORD *)a1 + 5)))
        {
          v37 = v34[4];
          if ((int)v37 >= 2 && v31 >= v37)
          {
            v39 = *v34;
            v40 = v34[1];
            v42 = *((_DWORD *)a1 + 8);
            v41 = *((_DWORD *)a1 + 9);
            v44 = *(_DWORD *)(a2 + 60);
            v43 = *(_DWORD *)(a2 + 64);
            v45 = v42 - v44 * *v34;
            v46 = v43 * v40;
            if (v42 < v44 * *v34 || v41 < v46)
            {
              v26 |= 4u;
            }
            else
            {
              v48 = v34 + 5;
              v49 = v29 + v24;
              v50 = *(_QWORD *)(a2 + 128);
              v51 = *(_DWORD *)(a2 + 4);
              v52 = *(_DWORD *)(a2 + 124);
              v53 = *(int *)(a2 + 120);
              v62 = v36;
              v63 = v39;
              v54 = *(_QWORD *)(a2 + 104);
              if (v44 + v44 * v39 >= v42)
                v55 = v45;
              else
                v55 = *(_DWORD *)(a2 + 60);
              v56 = v41 - v46;
              if (v43 + v43 * v40 >= v41)
                v57 = v56;
              else
                v57 = *(_DWORD *)(a2 + 64);
              *(_DWORD *)(v49 + 16) = v55;
              *(_DWORD *)(v49 + 20) = v57;
              v61 = v40;
              v58 = tinyexr::DecodePixelData((uint64_t)Image, v50, v48, v37, v52, v51, v55, v43, v44, 0, 0, v57, v64, v53, v54, v65);
              v40 = v61;
              v36 = v62;
              v39 = v63;
              if (!v58)
                v26 |= 4u;
              v29 = *a1;
            }
            v59 = (_DWORD *)(v29 + v24);
            *v59 = v39;
            v59[1] = v40;
            v59[2] = v35;
            v59[3] = v36;
          }
          else
          {
            v26 |= 2u;
          }
        }
        else
        {
          v26 |= 1u;
        }
        v13 = v33;
        a7 = v32;
        v27 = v68;
      }
      else
      {
        v26 |= 2u;
      }
      ++v25;
      v24 += 32;
    }
    while (v27 != v24);
  }
  *((_DWORD *)a1 + 10) = v13;
  *((_DWORD *)a1 + 11) = v66;
  if (a8)
  {
    if ((v26 & 2) != 0)
      std::string::append(a8, "Insufficient data length.\n", 0x1AuLL);
    if ((v26 & 4) != 0)
      std::string::append(a8, "Failed to decode tile data.\n", 0x1CuLL);
  }
  if (v26)
    return 4294967292;
  else
    return 0;
}

_QWORD *tinyexr::AllocateImage(int a1, uint64_t a2, _DWORD *a3, int a4, int a5)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  void **v16;
  int v17;
  size_t v18;
  unsigned int v19;

  LODWORD(v9) = a1;
  v10 = malloc_type_malloc(8 * a1, 0x80040B8603338uLL);
  v11 = v10;
  if ((_DWORD)v9)
  {
    v9 = (int)v9;
    v12 = a5 * (uint64_t)a4;
    v13 = 4 * v12;
    v14 = 2 * v12;
    v15 = (int *)(a2 + 256);
    v16 = (void **)v10;
    do
    {
      v17 = *v15;
      if (!*v15 || v17 == 2)
        goto LABEL_9;
      if (v17 != 1)
        tinyexr::AllocateImage();
      if (*a3 == 2)
      {
LABEL_9:
        v18 = v13;
        v19 = 1384677904;
      }
      else
      {
        if (*a3 != 1)
          tinyexr::AllocateImage();
        v18 = v14;
        v19 = -1107623837;
      }
      v15 += 68;
      *v16++ = malloc_type_malloc(v18, v19 | 0x100004000000000);
      ++a3;
      --v9;
    }
    while (v9);
  }
  return v11;
}

BOOL tinyexr::DecodePixelData(uint64_t a1, uint64_t a2, int *a3, size_t a4, int a5, int a6, int a7, int a8, int a9, int a10, unsigned int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16)
{
  int v16;
  int *v18;
  unsigned int v19;
  int v20;
  _BOOL8 result;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _DWORD *v63;
  char *v64;
  uint64_t v65;
  int v66;
  char v67;
  BOOL v68;
  char v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  int v91;
  int v92;
  float v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  _DWORD *v99;
  char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  _DWORD *v107;
  char *v108;
  uint64_t v109;
  int v110;
  char *v111;
  uint64_t v112;
  size_t v113;
  char *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  _DWORD *v145;
  char *v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  _DWORD *v153;
  char *v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  int *v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  _WORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _DWORD *v177;
  int *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  unsigned int *v182;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  float v188;
  int v189;
  float v190;
  int *v191;
  char *v192;
  size_t v193;
  _WORD *v194;
  unsigned int v195;
  int v196;
  char *v197;
  int *v198;
  uint64_t v199;
  int *v200;
  uint64_t v201;
  int v202;
  char *v203;
  uint64_t v204;
  unsigned __int8 *v205;
  char *v206;
  int v207;
  uint64_t *v208;
  uint64_t *v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t *v212;
  int v213;
  unsigned __int8 *v214;
  int v215;
  size_t v216;
  int v217;
  unsigned __int16 *v218;
  int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int64_t v223;
  int v224;
  unsigned int v225;
  int v226;
  unint64_t v227;
  int v228;
  int v229;
  unsigned int v230;
  int v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  char *v235;
  char *v236;
  unsigned int v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unsigned __int8 *v240;
  unsigned __int8 v241;
  int v242;
  unsigned __int16 *v243;
  char *v244;
  unsigned __int8 *v245;
  char *v246;
  unsigned __int16 **v247;
  int v248;
  const char **v249;
  int v250;
  uint64_t v251;
  char *v252;
  unsigned int v253;
  char Code;
  uint64_t v255;
  unsigned int v256;
  unsigned __int8 *v257;
  uint64_t v258;
  uint64_t v259;
  tinyexr *v260;
  uint64_t v261;
  int v262;
  BOOL i;
  unsigned int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  char *v270;
  uint64_t v271;
  uint64_t *v272;
  int *v273;
  _DWORD *v274;
  uint64_t v275;
  int *v276;
  int v277;
  uint64_t v278;
  char v279;
  char *v280;
  uint64_t v281;
  int v282;
  int v283;
  unsigned int v284;
  int v285;
  BOOL v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  unsigned __int8 *v292;
  int64x2_t *v293;
  _DWORD *v294;
  char *v295;
  char v296;
  int v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  int v305;
  int v306;
  int v307;
  unsigned int v308;
  unsigned int v309;
  uint64_t v310;
  int v311;
  int v312;
  unsigned int v313;
  _WORD *v314;
  int v315;
  _WORD *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _WORD *v324;
  uint64_t v325;
  int v326;
  unsigned int v327;
  int v328;
  unsigned int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  unsigned int v335;
  int v336;
  unsigned int v337;
  int v338;
  int v339;
  unsigned int v340;
  int v341;
  int v342;
  _WORD *v343;
  int v344;
  unsigned int v345;
  int v346;
  _WORD *v347;
  _WORD *v348;
  uint64_t v349;
  char *v350;
  int v351;
  unsigned __int8 *v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  int v356;
  int v357;
  const char *v358;
  int v359;
  const char *v360;
  int v361;
  const char *v362;
  const unsigned __int16 *v363;
  unsigned __int8 *v364;
  _WORD *v365;
  size_t v366;
  char *__dst;
  uint64_t v368;
  size_t v369;
  unint64_t v370;
  unsigned __int8 *v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  uint64_t v375;
  int *v379;
  uint64_t v380;
  uint64_t v382;
  uint64_t v383;
  int v384;
  char *v385;
  int v386;
  BOOL v387;
  unsigned __int16 *v388;
  int v389;
  unsigned __int16 *v390;
  unsigned __int16 *v391;
  void *__p;
  _BYTE *v394;
  char *v395;
  char *v396;
  void *v397[3];
  char *v398;
  char *v399;
  unsigned __int8 v400[8];
  char *v401;
  _BYTE v402[12];
  char v403[8];
  int v404[2];
  unsigned __int8 *v405;
  unsigned __int8 *v406;

  v16 = a7;
  v18 = a3;
  v19 = a12;
  v20 = a9;
  if (a5 == 4)
  {
    result = 0;
    if (!a7)
      return result;
    v22 = !a12 || a13 == 0;
    if (v22)
      return result;
    v23 = a12 * a7;
    std::vector<unsigned char>::vector(&__p, a12 * a7 * a13);
    if (v394 == __p)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v394 - (_BYTE *)__p == a4)
    {
      memcpy(__p, v18, a4);
LABEL_10:
      if (a14)
      {
        v24 = 0;
        v25 = v20;
        v26 = (char *)__p;
        v27 = v394 - (_BYTE *)__p;
        v28 = v16;
        v29 = *a16;
        if ((unint64_t)v16 <= 1)
          v30 = 1;
        else
          v30 = v16;
        if (v19 <= 1)
          v31 = 1;
        else
          v31 = v19;
        v32 = a13;
        v33 = a13 * v20;
        v34 = 4 * v20;
        v35 = a13 * v28;
        v36 = (char *)__p + 1;
        do
        {
          v37 = *(_DWORD *)(a15 + 272 * v24 + 256);
          if (v37)
          {
            if (v37 == 2)
            {
              if (*(_DWORD *)(a2 + 4 * v24) != 2)
              {
                v359 = 9989;
                v360 = "requested_pixel_types[c] == TINYEXR_PIXELTYPE_FLOAT";
                goto LABEL_444;
              }
              v51 = 0;
              v52 = *(_QWORD *)(v29 + 8 * v24);
              v53 = &v26[v25 * v52];
              do
              {
                if (v27 <= (v52 + v51 * v32) * v25)
                  std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
                v54 = (int)(~(v51 + a11) + a8);
                if (!a6)
                  v54 = v51 + a11;
                v55 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v24) + v34 * v54);
                v56 = v53;
                v57 = v30;
                do
                {
                  v58 = *(_DWORD *)v56;
                  v56 += 4;
                  *v55++ = v58;
                  --v57;
                }
                while (v57);
                ++v51;
                v53 += v33;
              }
              while (v51 != v31);
            }
            else
            {
              if (v37 != 1)
              {
                v359 = 10016;
                v360 = "0";
LABEL_444:
                __assert_rtn("DecodePixelData", "tinyexr.h", v359, v360);
              }
              v38 = 0;
              v39 = *(_QWORD *)(v29 + 8 * v24);
              v40 = &v36[v28 * v39];
              do
              {
                if (v27 <= (v39 + v38 * v32) * v28)
                  std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
                v41 = *(_DWORD *)(a2 + 4 * v24);
                v42 = (int)(~(v38 + a11) + a8);
                if (!a6)
                  v42 = v38 + a11;
                v43 = v42 * v25;
                v44 = v40;
                v45 = v30;
                do
                {
                  v46 = *(v44 - 1);
                  v47 = *v44;
                  if (v41 == 1)
                  {
                    *(_WORD *)(*(_QWORD *)(a1 + 8 * v24) + 2 * v43) = v46 | ((_WORD)v47 << 8);
                  }
                  else
                  {
                    v48 = (v47 << 21) | (v46 << 13);
                    v49 = (v47 << 21) & 0xF800000;
                    v50 = (v48 & 0xFFFE000) + 939524096;
                    if (!v49)
                      *(float *)&v50 = COERCE_FLOAT((v48 & 0xFFFE000) + 947912704) + -0.000061035;
                    if (v49 == 260046848)
                      v50 = v48 | 0x70000000;
                    *(_DWORD *)(*(_QWORD *)(a1 + 8 * v24) + 4 * v43) = v50 | (v47 >> 7 << 31);
                  }
                  v44 += 2;
                  ++v43;
                  --v45;
                }
                while (v45);
                ++v38;
                v40 += v35;
                v32 = a13;
              }
              while (v38 != v31);
            }
          }
          else
          {
            if (*(_DWORD *)(a2 + 4 * v24))
            {
              v359 = 9960;
              v360 = "requested_pixel_types[c] == TINYEXR_PIXELTYPE_UINT";
              goto LABEL_444;
            }
            v59 = 0;
            v60 = *(_QWORD *)(v29 + 8 * v24);
            v61 = &v26[v28 * v60];
            do
            {
              if (v27 <= (v60 + v59 * v32) * v28)
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              v62 = (int)(~(v59 + a11) + a8);
              if (!a6)
                v62 = v59 + a11;
              v63 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v24) + v34 * v62);
              v64 = v61;
              v65 = v30;
              do
              {
                v66 = *(_DWORD *)v64;
                v64 += 4;
                *v63++ = v66;
                --v65;
              }
              while (v65);
              ++v59;
              v61 += v35;
            }
            while (v59 != v31);
          }
          ++v24;
        }
        while (v24 != a14);
      }
      v67 = 1;
LABEL_434:
      if (__p)
      {
        v394 = __p;
        operator delete(__p);
      }
      return (v67 & 1) != 0;
    }
    __dst = (char *)__p;
    v368 = v394 - (_BYTE *)__p;
    v369 = a4;
    std::vector<unsigned char>::vector(&v398, 0x2000uLL);
    v111 = v398;
    bzero(v398, 0x2000uLL);
    v112 = *((unsigned __int16 *)v18 + 1);
    if (v112 >= 0x2000)
    {
      v399 = v111;
      operator delete(v111);
      goto LABEL_433;
    }
    v191 = v18 + 1;
    if (*(unsigned __int16 *)v18 <= v112)
    {
      v192 = &v111[*(unsigned __int16 *)v18];
      v193 = v112 - *(unsigned __int16 *)v18 + 1;
      memcpy(v192, v18 + 1, v193);
      v191 = (int *)((char *)v191 + v193);
    }
    std::vector<unsigned short>::vector(v397, 0x10000);
    v194 = v397[0];
    bzero(v397[0], 0x20000uLL);
    v195 = 0;
    v196 = 0;
    v197 = v398;
    do
    {
      if (!v195 || ((v197[(unint64_t)v195 >> 3] >> (v195 & 7)) & 1) != 0)
        v194[v196++] = v195;
      ++v195;
    }
    while (v195 != 0x10000);
    if (v196 < 0x10000)
      bzero(&v194[v196], 2 * (0xFFFF - v196) + 2);
    v198 = v191 + 1;
    v199 = *v191;
    v366 = (char *)(v191 + 1) - (char *)v18 + v199;
    if (v366 > v369)
    {
LABEL_428:
      if (v194)
      {
        v397[1] = v194;
        operator delete(v194);
      }
      if (v398)
      {
        v399 = v398;
        operator delete(v398);
      }
      v20 = a9;
      if (v366 <= v369)
        goto LABEL_10;
LABEL_433:
      v67 = 0;
      goto LABEL_434;
    }
    v200 = v191;
    std::vector<unsigned short>::vector(&v395, v368);
    if (!(_DWORD)v199
      || (v201 = v191[1], v201 > 0x10000)
      || (v202 = v200[2], v202 < 0)
      || v202 > 0x10000)
    {
LABEL_368:
      v290 = (int)a14;
      std::vector<tinyexr::PIZChannelData>::vector(&v405, (int)a14);
      v291 = v395;
      if (v396 == v395)
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v292 = v405;
      if ((_DWORD)a14)
      {
        v293 = (int64x2_t *)(v405 + 16);
        v294 = (_DWORD *)(a15 + 256);
        v295 = v395;
        do
        {
          v22 = *v294 == 1;
          v296 = *v294 != 1;
          v293[-1] = vdupq_n_s64((unint64_t)v295);
          v293->i32[0] = v16;
          v293->i32[1] = v19;
          if (v22)
            v297 = 1;
          else
            v297 = 2;
          v293->i32[3] = v297;
          v295 += 2 * (v23 << v296);
          v293 += 2;
          v294 += 68;
          --v290;
        }
        while (v290);
      }
      v364 = v406;
      v365 = v291;
      if (v406 != v292)
      {
        v298 = 0;
        v299 = (v406 - v292) >> 5;
        if (v299 <= 1)
          v299 = 1;
        v370 = v299;
        v371 = v292;
        do
        {
          v372 = v298;
          v300 = (char *)&v292[32 * v298];
          v301 = *((unsigned int *)v300 + 7);
          if ((int)v301 >= 1)
          {
            v380 = 0;
            v375 = 0;
            v302 = *(_QWORD *)v300;
            v303 = *((_DWORD *)v300 + 4);
            v304 = *((unsigned int *)v300 + 5);
            v386 = v303 * v301;
            v384 = v303;
            if (v303 >= (int)v304)
              v305 = *((_DWORD *)v300 + 5);
            else
              v305 = *((_DWORD *)v300 + 4);
            v373 = v305;
            do
            {
              v306 = 1;
              do
              {
                v307 = v306;
                v306 *= 2;
              }
              while (v307 <= v305);
              if (v307 >= 4)
              {
                v308 = v307 >> 2;
                v309 = v307 >> 1;
                do
                {
                  v310 = v304;
                  v311 = (v304 - v309) * v386;
                  v312 = v308 * v301;
                  v313 = ((unsigned __int16)v196 - 1) >> 14;
                  v314 = (_WORD *)(v302 + 2 * v375);
                  v315 = v309 * v301;
                  if ((v311 & 0x80000000) == 0)
                  {
                    v314 = (_WORD *)(v302 + 2 * v375);
                    v316 = &v314[v311];
                    v317 = (int)((v384 - v309) * v301);
                    v318 = (int)(v308 * v386);
                    v319 = (int)(v309 * v386);
                    v320 = v302 + 2 * v318;
                    v321 = v302 + 2 * v318 + 2 * v312;
                    v322 = v302 + 2 * v312;
                    v323 = v380;
                    do
                    {
                      v324 = v314;
                      if ((v317 & 0x80000000) == 0)
                      {
                        v325 = v323;
                        do
                        {
                          v326 = *(unsigned __int16 *)(v302 + v325);
                          v327 = *(unsigned __int16 *)(v320 + v325);
                          if (v313)
                          {
                            v334 = v326 - (v327 >> 1);
                            v335 = *(unsigned __int16 *)(v321 + v325);
                            v336 = *(unsigned __int16 *)(v322 + v325) - (v335 >> 1);
                            LOWORD(v335) = (v336 + v335) ^ 0x8000;
                            v337 = ((v334 + v327) ^ 0xFFFF8000) - ((unsigned __int16)(v335 & 0xFFFE) >> 1);
                            *(_WORD *)(v322 + v325) = v337;
                            *(_WORD *)(v302 + v325) = (v337 + v335) ^ 0x8000;
                            v338 = v334 - ((unsigned __int16)(v336 & 0xFFFE) >> 1);
                            *(_WORD *)(v321 + v325) = v338;
                            *(_WORD *)(v320 + v325) = (v338 + v336) ^ 0x8000;
                          }
                          else
                          {
                            v328 = (v327 & 1) + v326 + ((__int16)v327 >> 1);
                            v329 = v328 - v327;
                            v330 = *(__int16 *)(v321 + v325);
                            v331 = (v330 & 1) + *(unsigned __int16 *)(v322 + v325) + (v330 >> 1);
                            LOWORD(v330) = v331 - v330;
                            v332 = (v331 & 1) + v328 + ((__int16)v331 >> 1);
                            *(_WORD *)(v302 + v325) = v332;
                            *(_WORD *)(v322 + v325) = v332 - v331;
                            v333 = v329 + (v330 & 1) + ((__int16)v330 >> 1);
                            *(_WORD *)(v320 + v325) = v333;
                            *(_WORD *)(v321 + v325) = v333 - v330;
                          }
                          v325 += 2 * v315;
                          v324 = (_WORD *)(v302 + v325);
                        }
                        while (v302 + v325 <= (unint64_t)&v314[v317]);
                      }
                      if ((v308 & v384) != 0)
                      {
                        v339 = (unsigned __int16)*v324;
                        v340 = (unsigned __int16)v324[v318];
                        if (v313)
                        {
                          v339 -= v340 >> 1;
                          LOWORD(v341) = (v339 + v340) ^ 0x8000;
                        }
                        else
                        {
                          v341 = (v340 & 1) + v339 + ((__int16)v340 >> 1);
                          LOWORD(v339) = v341 - v340;
                        }
                        v324[v318] = v339;
                        *v324 = v341;
                      }
                      v314 += v319;
                      v323 += 2 * v319;
                    }
                    while (v314 <= v316);
                  }
                  v304 = v310;
                  if ((v308 & v310) != 0)
                  {
                    v342 = (v384 - v309) * v301;
                    if ((v342 & 0x80000000) == 0)
                    {
                      v343 = &v314[v342];
                      do
                      {
                        v344 = (unsigned __int16)*v314;
                        v345 = (unsigned __int16)v314[v312];
                        if (v313)
                        {
                          v344 -= v345 >> 1;
                          LOWORD(v346) = (v344 + v345) ^ 0x8000;
                        }
                        else
                        {
                          v346 = (v345 & 1) + v344 + ((__int16)v345 >> 1);
                          LOWORD(v344) = v346 - v345;
                        }
                        v314[v312] = v344;
                        *v314 = v346;
                        v314 += v315;
                      }
                      while (v314 <= v343);
                    }
                  }
                  v309 = v308;
                  v286 = v308 > 1;
                  v308 >>= 1;
                }
                while (v286);
              }
              v380 += 2;
              ++v375;
              v305 = v373;
            }
            while (v375 != v301);
          }
          v292 = v371;
          v298 = v372 + 1;
        }
        while (v372 + 1 != v370);
      }
      v347 = v365;
      if ((int)v368 >= 1)
      {
        v348 = v397[0];
        v349 = v368;
        do
        {
          *v347 = v348[(unsigned __int16)*v347];
          ++v347;
          --v349;
        }
        while (v349);
      }
      v19 = a12;
      v16 = a7;
      v350 = __dst;
      if (a12 >= 1)
      {
        v351 = 0;
        v352 = v364;
        do
        {
          if (v352 == v292)
          {
            v352 = v292;
          }
          else
          {
            v353 = 0;
            v354 = 0;
            do
            {
              v355 = (char *)&v292[v353];
              v356 = *(_DWORD *)&v292[v353 + 28] * *(_DWORD *)&v292[v353 + 16];
              memcpy(v350, *(const void **)&v292[v353 + 8], 2 * v356);
              v350 += 2 * v356;
              *((_QWORD *)v355 + 1) += 2 * v356;
              ++v354;
              v292 = v405;
              v352 = v406;
              v353 += 32;
            }
            while (v354 < (v406 - v405) >> 5);
            v19 = a12;
          }
          ++v351;
        }
        while (v351 != v19);
      }
      if (v292)
      {
        v406 = v292;
        operator delete(v292);
      }
      if (v395)
      {
        v396 = v395;
        operator delete(v395);
      }
      v194 = v397[0];
      goto LABEL_428;
    }
    v379 = v198;
    v382 = v200[4];
    v383 = v199;
    std::vector<long long>::vector(&v405, 0x10001uLL);
    std::vector<tinyexr::HufDec>::vector(v400, 0x4000uLL);
    v203 = *(char **)v400;
    if (v401 != *(char **)v400)
    {
      v204 = 0;
      v205 = (unsigned __int8 *)(v200 + 6);
      do
      {
        v206 = &v203[v204];
        *(_DWORD *)v206 = 0;
        *((_QWORD *)v206 + 1) = 0;
        v204 += 16;
      }
      while (v204 != 0x40000);
      if (v406 == v405)
        goto LABEL_465;
      v207 = v202;
      v208 = (uint64_t *)v405;
      bzero(v405, 0x80008uLL);
      if ((int)v201 <= v207)
      {
        v220 = v201;
        v221 = 0;
        v222 = 0;
        v223 = (int)v199 - 20;
        v210 = v207;
        v389 = v207 + 1;
        v374 = v220;
        v224 = v220;
        v211 = (unsigned __int8 *)(v200 + 6);
        v212 = v208;
        while (v211 - v205 < v223)
        {
          if (v221 > 5)
          {
            v226 = v221;
          }
          else
          {
            do
            {
              v225 = *v211++;
              v222 = v225 | (unint64_t)(v222 << 8);
              v226 = v221 + 8;
              v286 = v221 < -2;
              v221 += 8;
            }
            while (v286);
          }
          v221 = v226 - 6;
          v227 = (v222 >> (v226 - 6)) & 0x3F;
          v228 = v224;
          v212[v224] = v227;
          if (v227 == 63)
          {
            if (v211 - v205 > v223)
              goto LABEL_291;
            if (v221 <= 7)
            {
              v229 = v226 - 14;
              do
              {
                v230 = *v211++;
                v222 = v230 | (unint64_t)(v222 << 8);
                v229 += 8;
              }
              while (v229 < 0);
              v221 = v229 + 8;
            }
            v221 -= 8;
            if (v224 + (v222 >> v221) + 6 > v389)
            {
LABEL_291:
              v232 = v205;
              v16 = a7;
              v19 = a12;
              goto LABEL_293;
            }
            bzero(&v208[v224], 8 * (v222 >> v221) + 48);
            v223 = (int)v383 - 20;
            v212 = v208;
            v224 = v228 + (v222 >> v221) + 5;
          }
          else if (v227 >= 0x3B)
          {
            if ((int)v227 - 57 + v224 > v389)
              goto LABEL_291;
            v231 = v224;
            bzero(&v208[v224], 8 * (v227 - 57));
            v223 = (int)v383 - 20;
            v212 = v208;
            v224 = v231 + v227 - 58;
          }
          v286 = v224++ < v210;
          v19 = a12;
          if (!v286)
          {
            v205 = v211;
            v16 = a7;
            v201 = v374;
            goto LABEL_269;
          }
        }
        v232 = v205;
        v16 = a7;
LABEL_293:
        v201 = v374;
      }
      else
      {
        v210 = v207;
        v211 = (unsigned __int8 *)(v200 + 6);
        v212 = v208;
LABEL_269:
        tinyexr::hufCanonicalCodeTable(v212, v209);
        v232 = v205;
        v205 = v211;
      }
      v242 = v210;
      if (v382 > 8 * ((char *)v379 + v383 - (char *)v232))
        goto LABEL_364;
      v243 = (unsigned __int16 *)v405;
      if (v406 == v405)
        goto LABEL_465;
      v244 = *(char **)v400;
      if (v401 == *(char **)v400)
        goto LABEL_464;
      if ((int)v201 <= v210)
      {
        v385 = *(char **)v400;
        v391 = (unsigned __int16 *)v405;
        do
        {
          v267 = *(_QWORD *)&v243[4 * v201];
          v268 = v267 >> 6;
          if (v267 >> 6 >> v267)
            break;
          v269 = v267 & 0x3F;
          if (v269 < 0xF)
          {
            if (v269)
            {
              v279 = 14 - v269;
              if (v269 != -49)
              {
                v280 = &v244[16 * (v268 << v279)];
                v281 = (1 << v279) + 1;
                v282 = v269 | ((_DWORD)v201 << 8);
                while (!*v280 && !*((_QWORD *)v280 + 1))
                {
                  *(_DWORD *)v280 = v282;
                  v280 += 16;
                  if (--v281 <= 1)
                    goto LABEL_348;
                }
                break;
              }
            }
          }
          else
          {
            v270 = &v244[16 * (v268 >> (v269 - 14))];
            if (*(_DWORD *)v270)
              break;
            v271 = v201;
            *(_DWORD *)v270 = (*(_DWORD *)v270 & 0xFFFFFF00) + 256;
            v272 = (uint64_t *)(v270 + 8);
            v273 = (int *)*((_QWORD *)v270 + 1);
            if (v273)
            {
              v274 = (_DWORD *)operator new[]();
              *v272 = (uint64_t)v274;
              if (*(_DWORD *)v270 >= 0x200u)
              {
                v275 = ((*(_DWORD *)v270 >> 8) - 1);
                v276 = v273;
                do
                {
                  v277 = *v276++;
                  *v274++ = v277;
                  --v275;
                }
                while (v275);
              }
              MEMORY[0x2426211A0](v273, 0x1000C8052888210);
              v278 = *v272;
            }
            else
            {
              v278 = operator new[]();
              *v272 = v278;
            }
            v201 = v271;
            *(_DWORD *)(v278 + 4 * ((*(_DWORD *)v270 >> 8) - 1)) = v271;
            v244 = v385;
            v243 = v391;
          }
LABEL_348:
          v286 = v242 <= (int)v201++;
        }
        while (!v286);
      }
      v245 = v405;
      if (v406 == v405)
LABEL_465:
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v246 = *(char **)v400;
      if (v401 != *(char **)v400)
      {
        v247 = (unsigned __int16 **)v395;
        *(_QWORD *)v403 = v395;
        *(_QWORD *)v404 = v205;
        memset(v402, 0, sizeof(v402));
        v390 = (unsigned __int16 *)&v395[2 * (int)((unint64_t)(v396 - v395) >> 1)];
        v248 = v382 + 7;
        if ((int)v382 < -7)
          v248 = v382 + 14;
        v249 = (const char **)&v205[v248 >> 3];
        if ((int)v382 >= 1)
        {
          v250 = 0;
          while (1)
          {
            *(_QWORD *)v404 = v205 + 1;
            *(_QWORD *)&v402[4] = *v205 | (*(_QWORD *)&v402[4] << 8);
            *(_DWORD *)v402 = v250 + 8;
            ++v205;
            v286 = v250 < 6;
            v250 += 8;
            if (v286)
              goto LABEL_328;
            do
            {
              v251 = *(_QWORD *)&v402[4];
              v252 = &v246[16 * ((*(uint64_t *)&v402[4] >> (v250 - 14)) & 0x3FFF)];
              v253 = *(_DWORD *)v252;
              if (*(_DWORD *)v252)
              {
                *(_DWORD *)v402 = v250 - *(_DWORD *)v252;
                Code = tinyexr::getCode((tinyexr *)(v253 >> 8), v242, (uint64_t *)&v402[4], (uint64_t *)v402, v404, v249, v403, v247, v390, v363);
LABEL_307:
                if ((Code & 1) == 0)
                  goto LABEL_359;
                v250 = *(_DWORD *)v402;
                continue;
              }
              v255 = *((_QWORD *)v252 + 1);
              if (!v255)
                goto LABEL_359;
              v256 = v253 >> 8;
              v257 = *(unsigned __int8 **)v404;
              if (v253 >= 0x100)
              {
                v259 = 0;
                if (v256 <= 1)
                  v258 = 1;
                else
                  v258 = v256;
                while (1)
                {
                  v260 = (tinyexr *)*(unsigned int *)(v255 + 4 * v259);
                  v261 = *(_QWORD *)&v245[8 * (_QWORD)v260];
                  v262 = v261 & 0x3F;
                  for (i = v250 < v262; v250 < v262 && v257 < (unsigned __int8 *)v249; i = v250 < v262)
                  {
                    v265 = *v257++;
                    v251 = v265 | (unint64_t)(v251 << 8);
                    v250 += 8;
                  }
                  if (!i && ((v251 >> (v250 - v262)) & ~(-1 << v262)) == v261 >> 6)
                    break;
                  if (++v259 == v258)
                    goto LABEL_324;
                }
                *(_QWORD *)v404 = v257;
                *(_QWORD *)&v402[4] = v251;
                *(_DWORD *)v402 = v250 - v262;
                Code = tinyexr::getCode(v260, v242, (uint64_t *)&v402[4], (uint64_t *)v402, v404, v249, v403, v247, v390, v363);
                goto LABEL_307;
              }
              LODWORD(v258) = 0;
LABEL_324:
              *(_DWORD *)v402 = v250;
              *(_QWORD *)v404 = v257;
              *(_QWORD *)&v402[4] = v251;
              if ((_DWORD)v258 == v256)
                goto LABEL_359;
            }
            while (v250 >= 14);
            v205 = *(unsigned __int8 **)v404;
LABEL_328:
            if (v205 >= (unsigned __int8 *)v249)
            {
              v266 = *(_QWORD *)&v402[4];
              goto LABEL_352;
            }
          }
        }
        v250 = 0;
        v266 = 0;
LABEL_352:
        *(_QWORD *)&v402[4] = v266 >> (-(char)v382 & 7);
        v283 = v250 - (-(int)v382 & 7);
        if (v283 >= 1)
        {
          do
          {
            v284 = *(_DWORD *)&v246[16 * ((*(_QWORD *)&v402[4] << (14 - v283)) & 0x3FFFLL)];
            if (!(_BYTE)v284)
              break;
            *(_DWORD *)v402 = v283
                            - *(_DWORD *)&v246[16
                                                              * ((*(_QWORD *)&v402[4] << (14 - v283)) & 0x3FFFLL)];
            v285 = tinyexr::getCode((tinyexr *)(v284 >> 8), v242, (uint64_t *)&v402[4], (uint64_t *)v402, v404, v249, v403, v247, v390, v363);
            v283 = *(_DWORD *)v402;
            v286 = !v285 || *(_DWORD *)v402 <= 0;
          }
          while (!v286);
        }
LABEL_359:
        v16 = a7;
        if (v401 != *(char **)v400)
        {
          v287 = 0;
          v288 = *(_QWORD *)v400 + 8;
          do
          {
            v289 = *(_QWORD *)(v288 + v287);
            if (v289)
            {
              MEMORY[0x2426211A0](v289, 0x1000C8052888210);
              *(_QWORD *)(v288 + v287) = 0;
            }
            v287 += 16;
          }
          while (v287 != 0x40000);
LABEL_364:
          if (*(_QWORD *)v400)
          {
            v401 = *(char **)v400;
            operator delete(*(void **)v400);
          }
          if (v405)
          {
            v406 = v405;
            operator delete(v405);
          }
          goto LABEL_368;
        }
      }
    }
LABEL_464:
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  }
  if ((a5 & 0xFFFFFFFE) == 2)
  {
    std::vector<unsigned char>::vector(&v405, a12 * (uint64_t)a7 * a13);
    *(_QWORD *)v400 = v406 - v405;
    if (v406 == v405)
      __assert_rtn("DecodePixelData", "tinyexr.h", 10032, "dstLen > 0");
    v68 = tinyexr::DecompressZip((tinyexr *)v405, v400, v18, a4);
    v69 = !v68;
    v70 = v405;
    if (!a14)
      v69 = 1;
    if ((v69 & 1) == 0)
    {
      v387 = v68;
      v71 = 0;
      v72 = v16;
      v73 = a12;
      v74 = *a16;
      v75 = v406 - v405;
      if ((unint64_t)v16 <= 1)
        v76 = 1;
      else
        v76 = v16;
      if ((unint64_t)a12 <= 1)
        v73 = 1;
      v77 = a13 * v16;
      v78 = 4 * a9;
      v79 = (char *)(v405 + 1);
      while (1)
      {
        v80 = *(_DWORD *)(a15 + 272 * v71 + 256);
        if (v80)
        {
          if (v80 == 2)
          {
            if (*(_DWORD *)(a2 + 4 * v71) != 2)
            {
              v357 = 10128;
              v358 = "requested_pixel_types[c] == TINYEXR_PIXELTYPE_FLOAT";
              goto LABEL_441;
            }
            if (v19)
            {
              v95 = 0;
              v96 = *(_QWORD *)(v74 + 8 * v71);
              v97 = (char *)&v70[v72 * v96];
              do
              {
                if (v75 <= (v96 + v95 * a13) * v72)
                  std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
                if (v16)
                {
                  v98 = v95 + a11;
                  if (a6)
                    v98 = ~(v95 + a11) + a8;
                  v99 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v71) + v78 * v98);
                  v100 = v97;
                  v101 = v76;
                  do
                  {
                    v102 = *(_DWORD *)v100;
                    v100 += 4;
                    *v99++ = v102;
                    --v101;
                  }
                  while (v101);
                }
                ++v95;
                v97 += v77;
                v16 = a7;
              }
              while (v95 != v73);
            }
          }
          else
          {
            if (v80 != 1)
            {
              v357 = 10155;
              v358 = "0";
LABEL_441:
              __assert_rtn("DecodePixelData", "tinyexr.h", v357, v358);
            }
            if (v19)
            {
              v81 = 0;
              v82 = *(_QWORD *)(v74 + 8 * v71);
              v83 = &v79[v72 * v82];
              do
              {
                if (v75 <= (v82 + v81 * a13) * v72)
                  std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
                if (v16)
                {
                  v84 = *(_DWORD *)(a2 + 4 * v71);
                  v85 = v81 + a11;
                  if (a6)
                    v85 = ~(v81 + a11) + a8;
                  v86 = v85 * a9;
                  v87 = v83;
                  v88 = v76;
                  do
                  {
                    v89 = *(v87 - 1);
                    v90 = *v87;
                    if (v84 == 1)
                    {
                      *(_WORD *)(*(_QWORD *)(a1 + 8 * v71) + 2 * v86) = v89 | ((_WORD)v90 << 8);
                    }
                    else
                    {
                      v91 = (v90 << 21) | (v89 << 13);
                      v92 = (v90 << 21) & 0xF800000;
                      LODWORD(v93) = (v91 & 0xFFFE000) + 939524096;
                      if (!v92)
                        v93 = COERCE_FLOAT((v91 & 0xFFFE000) + 947912704) + -0.000061035;
                      v94 = v91 | 0x70000000;
                      if (v92 == 260046848)
                        v93 = *(float *)&v94;
                      *(_DWORD *)(*(_QWORD *)(a1 + 8 * v71) + 4 * v86) = LODWORD(v93) | (v90 >> 7 << 31);
                    }
                    v87 += 2;
                    ++v86;
                    --v88;
                  }
                  while (v88);
                }
                ++v81;
                v83 += v77;
                v16 = a7;
              }
              while (v81 != v73);
            }
          }
        }
        else
        {
          if (*(_DWORD *)(a2 + 4 * v71))
          {
            v357 = 10099;
            v358 = "requested_pixel_types[c] == TINYEXR_PIXELTYPE_UINT";
            goto LABEL_441;
          }
          if (v19)
          {
            v103 = 0;
            v104 = *(_QWORD *)(v74 + 8 * v71);
            v105 = (char *)&v70[v72 * v104];
            do
            {
              if (v75 <= (v104 + v103 * a13) * v72)
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (v16)
              {
                v106 = v103 + a11;
                if (a6)
                  v106 = ~(v103 + a11) + a8;
                v107 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v71) + v78 * v106);
                v108 = v105;
                v109 = v76;
                do
                {
                  v110 = *(_DWORD *)v108;
                  v108 += 4;
                  *v107++ = v110;
                  --v109;
                }
                while (v109);
              }
              ++v103;
              v105 += v77;
              v16 = a7;
            }
            while (v103 != v73);
          }
        }
        ++v71;
        v19 = a12;
        if (v71 == a14)
        {
          v70 = v405;
          v68 = v387;
          break;
        }
      }
    }
    if (v70)
    {
      v406 = v70;
      operator delete(v70);
    }
    return v68;
  }
  if (!a5)
  {
    if (!a14)
      return 1;
    v158 = 0;
    v159 = a7 * a13;
    v160 = (unint64_t)a3 + a4;
    if (a12 <= 1)
      v161 = 1;
    else
      v161 = a12;
    while (1)
    {
      if (v19)
      {
        v162 = 0;
        v163 = (int *)(a15 + 272 * v158 + 256);
        v164 = *a16;
        v165 = a3;
        do
        {
          v166 = *v163;
          if (*v163)
          {
            if (v166 == 2)
            {
              v172 = *(_QWORD *)(v164 + 8 * v158) * v16;
              v173 = v162 + a10;
              if (a6)
                v173 = ~(v162 + a10) + a8;
              if ((unint64_t)&a3[v16] + v159 * v162 + v172 > v160)
                return 0;
              if (v16 >= 1)
              {
                v174 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v158) + 4 * v173 * a9);
                v175 = v16;
                do
                {
                  *v174++ = *(int *)((char *)v165 + v172);
                  v172 += 4;
                  --v175;
                }
                while (v175);
              }
            }
            else if (v166 == 1)
            {
              v167 = *(_QWORD *)(v164 + 8 * v158) * v16;
              v168 = *(_DWORD *)(a2 + 4 * v158);
              if (v168 == 2)
              {
                v181 = v162 + a10;
                if (a6)
                  v181 = ~(v162 + a10) + a8;
                if ((unint64_t)a3 + 2 * v16 + v159 * v162 + v167 > v160)
                  return 0;
                if (v16 >= 1)
                {
                  v182 = (unsigned int *)(*(_QWORD *)(a1 + 8 * v158) + 4 * v181 * a9);
                  v183 = v16;
                  do
                  {
                    v184 = *((unsigned __int8 *)v165 + v167 + 1);
                    v185 = (char)v184;
                    v184 <<= 21;
                    v186 = v184 | (*((unsigned __int8 *)v165 + v167) << 13);
                    v187 = v184 & 0xF800000;
                    v188 = COERCE_FLOAT((v186 & 0xFFFE000) + 947912704) + -0.000061035;
                    if (v187)
                      LODWORD(v188) = (v186 & 0xFFFE000) + 939524096;
                    v189 = v186 | 0x70000000;
                    if (v187 == 260046848)
                      v190 = *(float *)&v189;
                    else
                      v190 = v188;
                    *v182++ = LODWORD(v190) | v185 & 0x80000000;
                    v167 += 2;
                    --v183;
                  }
                  while (v183);
                }
              }
              else
              {
                if (v168 != 1)
                  tinyexr::DecodePixelData();
                v169 = v162 + a10;
                if (a6)
                  v169 = ~(v162 + a10) + a8;
                if (v16 >= 1)
                {
                  v170 = (_WORD *)(*(_QWORD *)(a1 + 8 * v158) + 2 * v169 * a9);
                  v171 = v16;
                  do
                  {
                    *v170++ = *(_WORD *)((char *)v165 + v167);
                    v167 += 2;
                    --v171;
                  }
                  while (v171);
                }
              }
            }
          }
          else
          {
            v176 = v162 + a10;
            if (a6)
              v176 = ~(v162 + a10) + a8;
            if (v16 >= 1)
            {
              v177 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v158) + 4 * v176 * a9);
              v178 = (int *)((char *)v165 + *(_QWORD *)(v164 + 8 * v158) * v16);
              v179 = v16;
              do
              {
                if ((unint64_t)v178 >= v160)
                  return 0;
                v180 = *v178++;
                *v177++ = v180;
                --v179;
              }
              while (v179);
            }
          }
          ++v162;
          v165 = (int *)((char *)v165 + v159);
          v19 = a12;
        }
        while (v162 != v161);
      }
      if (++v158 == a14)
        return 1;
    }
  }
  if (a5 != 1)
  {
    if (a5 == 128)
      tinyexr::DecodePixelData();
    return 1;
  }
  v113 = a4;
  std::vector<unsigned char>::vector(v400, a12 * (uint64_t)a7 * a13);
  v115 = *(unsigned __int8 **)v400;
  v114 = v401;
  v116 = (uint64_t)&v401[-*(_QWORD *)v400];
  if (v401 == *(char **)v400)
  {
    v157 = 1;
    goto LABEL_287;
  }
  if (v116 == v113)
  {
    memcpy(*(void **)v400, v18, v113);
    goto LABEL_122;
  }
  if (v113 < 3)
    goto LABEL_285;
  std::vector<unsigned char>::vector(&v405, (size_t)&v401[-*(_QWORD *)v400]);
  v213 = (int)v405;
  if (v406 == v405)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  v214 = v405;
  if ((int)v113 < 1)
  {
LABEL_249:
    v219 = (_DWORD)v214 - v213;
    goto LABEL_271;
  }
  v388 = (unsigned __int16 *)v116;
  while (1)
  {
    v215 = *(char *)v18;
    if (v215 < 0)
      break;
    v216 = (v215 + 1);
    LODWORD(v116) = v116 - v216;
    if ((int)v116 < 0)
      goto LABEL_270;
    v217 = v113 - 2;
    memset(v214, *((unsigned __int8 *)v18 + 1), (v215 + 1));
    v218 = (unsigned __int16 *)v18 + 1;
LABEL_247:
    v214 += v216;
    LODWORD(v113) = v217;
    v18 = (int *)v218;
    if (v217 <= 0)
    {
      v116 = (uint64_t)v388;
      goto LABEL_249;
    }
  }
  LODWORD(v116) = v116 + v215;
  v217 = v113 + v215 - 1;
  if (((v116 | v217) & 0x80000000) == 0)
  {
    v216 = -v215;
    memcpy(v214, (char *)v18 + 1, v216);
    v218 = (unsigned __int16 *)((char *)v18 + v216 + 1);
    goto LABEL_247;
  }
LABEL_270:
  v219 = 0;
  v116 = (uint64_t)v388;
LABEL_271:
  v233 = v405;
  v16 = a7;
  if (v219 == (_DWORD)v116)
  {
    v234 = v406;
    if (v406 == v405)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v116 >= 2)
    {
      v235 = (char *)&v405[v116];
      v236 = (char *)(v405 + 1);
      v237 = *v405;
      do
      {
        v237 = (*v236 + v237) ^ 0xFFFFFF80;
        *v236++ = v237;
      }
      while (v236 < v235);
      v233 = v405;
      v234 = v406;
    }
    if (v234 == v233)
      std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
    if (v116 >= 1)
    {
      v238 = &v115[v116];
      v239 = v233;
      do
      {
        *v115 = *v239;
        v240 = v115 + 1;
        if (v240 >= v238)
          break;
        v241 = v239[(unint64_t)(v116 + 1) >> 1];
        ++v239;
        *v240 = v241;
        v115 = v240 + 1;
      }
      while (v115 < v238);
    }
  }
  if (v233)
  {
    v406 = v233;
    operator delete(v233);
  }
  if (v219 != (_DWORD)v116)
  {
LABEL_285:
    v157 = 1;
    goto LABEL_286;
  }
LABEL_122:
  if (a14)
  {
    v117 = 0;
    v118 = v16;
    v119 = a12;
    v120 = *(char **)v400;
    v121 = (unint64_t)&v401[-*(_QWORD *)v400];
    v122 = *a16;
    if ((unint64_t)v16 <= 1)
      v123 = 1;
    else
      v123 = v16;
    if ((unint64_t)a12 <= 1)
      v119 = 1;
    v124 = a13 * v16;
    v125 = 4 * a9;
    v126 = *(_QWORD *)v400 + 1;
    do
    {
      v127 = *(_DWORD *)(a15 + 272 * v117 + 256);
      if (v127)
      {
        if (v127 == 2)
        {
          if (*(_DWORD *)(a2 + 4 * v117) != 2)
          {
            v361 = 10262;
            v362 = "requested_pixel_types[c] == TINYEXR_PIXELTYPE_FLOAT";
            goto LABEL_448;
          }
          if (v19)
          {
            v141 = 0;
            v142 = *(_QWORD *)(v122 + 8 * v117);
            v143 = &v120[v118 * v142];
            do
            {
              if (v121 <= (v142 + v141 * a13) * v118)
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (v16)
              {
                v144 = v141 + a11;
                if (a6)
                  v144 = ~(v141 + a11) + a8;
                v145 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v117) + v125 * v144);
                v146 = v143;
                v147 = v123;
                do
                {
                  v148 = *(_DWORD *)v146;
                  v146 += 4;
                  *v145++ = v148;
                  --v147;
                }
                while (v147);
              }
              ++v141;
              v143 += v124;
            }
            while (v141 != v119);
          }
        }
        else
        {
          if (v127 != 1)
          {
            v361 = 10289;
            v362 = "0";
LABEL_448:
            __assert_rtn("DecodePixelData", "tinyexr.h", v361, v362);
          }
          if (v19)
          {
            v128 = 0;
            v129 = *(_QWORD *)(v122 + 8 * v117);
            v130 = (unsigned __int8 *)(v126 + v118 * v129);
            do
            {
              if (v121 <= (v129 + v128 * a13) * v118)
                std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
              if (v16)
              {
                v131 = *(_DWORD *)(a2 + 4 * v117);
                v132 = v128 + a11;
                if (a6)
                  v132 = ~(v128 + a11) + a8;
                v133 = v132 * a9;
                v134 = v130;
                v135 = v123;
                do
                {
                  v136 = *(v134 - 1);
                  v137 = *v134;
                  if (v131 == 1)
                  {
                    *(_WORD *)(*(_QWORD *)(a1 + 8 * v117) + 2 * v133) = v136 | ((_WORD)v137 << 8);
                  }
                  else
                  {
                    v138 = (v137 << 21) | (v136 << 13);
                    v139 = (v137 << 21) & 0xF800000;
                    v140 = (v138 & 0xFFFE000) + 939524096;
                    if (!v139)
                      *(float *)&v140 = COERCE_FLOAT((v138 & 0xFFFE000) + 947912704) + -0.000061035;
                    if (v139 == 260046848)
                      v140 = v138 | 0x70000000;
                    *(_DWORD *)(*(_QWORD *)(a1 + 8 * v117) + 4 * v133) = v140 | (v137 >> 7 << 31);
                  }
                  v134 += 2;
                  ++v133;
                  --v135;
                }
                while (v135);
              }
              ++v128;
              v130 += v124;
              v16 = a7;
            }
            while (v128 != v119);
          }
        }
      }
      else
      {
        if (*(_DWORD *)(a2 + 4 * v117))
        {
          v361 = 10233;
          v362 = "requested_pixel_types[c] == TINYEXR_PIXELTYPE_UINT";
          goto LABEL_448;
        }
        if (v19)
        {
          v149 = 0;
          v150 = *(_QWORD *)(v122 + 8 * v117);
          v151 = &v120[v118 * v150];
          do
          {
            if (v121 <= (v150 + v149 * a13) * v118)
              std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
            if (v16)
            {
              v152 = v149 + a11;
              if (a6)
                v152 = ~(v149 + a11) + a8;
              v153 = (_DWORD *)(*(_QWORD *)(a1 + 8 * v117) + v125 * v152);
              v154 = v151;
              v155 = v123;
              do
              {
                v156 = *(_DWORD *)v154;
                v154 += 4;
                *v153++ = v156;
                --v155;
              }
              while (v155);
            }
            ++v149;
            v151 += v124;
          }
          while (v149 != v119);
        }
      }
      ++v117;
      v19 = a12;
    }
    while (v117 != a14);
  }
  v157 = 0;
LABEL_286:
  v114 = *(char **)v400;
LABEL_287:
  if (v114)
  {
    v401 = v114;
    operator delete(v114);
  }
  return (v157 & 1) == 0;
}

void sub_23C50150C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  void *v41;
  void *v42;

  v41 = *(void **)(v39 - 112);
  if (v41)
  {
    *(_QWORD *)(v39 - 104) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v39 - 168);
  if (v42)
  {
    *(_QWORD *)(v39 - 160) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<tinyexr::HufDec>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23C50167C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t tinyexr::getCode(tinyexr *this, int a2, uint64_t *a3, uint64_t *a4, int *a5, const char **a6, char *a7, unsigned __int16 **a8, const unsigned __int16 *a9, const unsigned __int16 *a10)
{
  int v10;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v18;
  _WORD *v19;
  __int16 v20;

  if ((_DWORD)this == a2)
  {
    v10 = *(_DWORD *)a4;
    v11 = *(_DWORD *)a4 - 8;
    if (*(int *)a4 >= 8)
    {
      v15 = *a3;
LABEL_9:
      *(_DWORD *)a4 = v11;
      v18 = v15 >> v11;
      v19 = *(_WORD **)a7;
      if (*(_QWORD *)a7 + 2 * (unint64_t)v18 > (unint64_t)a9 || v19 - 1 < (_WORD *)a8)
        return 0;
      if ((_BYTE)v18)
      {
        v20 = *(v19 - 1);
        do
        {
          LODWORD(v18) = v18 - 1;
          *v19++ = v20;
        }
        while ((_BYTE)v18);
        *(_QWORD *)a7 = v19;
      }
      return 1;
    }
    v12 = *(unsigned __int8 **)a5;
    v13 = *(_QWORD *)a5 + 1;
    if (v13 < (unint64_t)a6)
    {
      v14 = *a3;
      *(_QWORD *)a5 = v13;
      v15 = *v12 | (unint64_t)(v14 << 8);
      *a3 = v15;
      v11 = v10;
      goto LABEL_9;
    }
  }
  else
  {
    v16 = *(_WORD **)a7;
    if (*(_QWORD *)a7 < (unint64_t)a9)
    {
      *v16 = (_WORD)this;
      *(_QWORD *)a7 = v16 + 1;
      return 1;
    }
  }
  return 0;
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x242620F6C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x242620F78](v13);
  return a1;
}

void sub_23C5019D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x242620F78](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x23C5019B0);
}

void sub_23C501A18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_23C501B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 4162, a4);
}

cv3d::cv::gess::mesh::PolyMesh *cv3d::cv::gess::mesh::QuadMesh::QuadMesh(cv3d::cv::gess::mesh::QuadMesh *this)
{
  cv3d::cv::gess::mesh::PolyMesh *result;

  result = cv3d::cv::gess::mesh::PolyMesh::PolyMesh(this);
  *(_QWORD *)result = &off_250D49538;
  return result;
}

void cv3d::cv::gess::mesh::QuadMesh::~QuadMesh(cv3d::cv::gess::mesh::QuadMesh *this, uint64_t a2, uint64_t a3)
{
  cv3d::cv::gess::mesh::PolyMesh::~PolyMesh(this, a2, a3);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::QuadMesh::InitVF(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  void *__p;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)a1);
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, (a2[1] - *a2) >> 4);
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      LODWORD(__p) = *(_DWORD *)(a1 + 176);
      v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&__p);
      v12 = *(_QWORD *)(v11 + 40);
      if (v9 >= (*(_QWORD *)(v11 + 48) - v12) >> 4)
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      *(_OWORD *)(v12 + 16 * v9) = *(_OWORD *)(v8 + 16 * v9);
      v9 = v10;
      v8 = *a2;
      ++v10;
    }
    while (v9 < (a2[1] - *a2) >> 4);
  }
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) + ((a3[1] - *a3) >> 4));
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  v13 = *a3;
  if (a3[1] != *a3)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = v13 + 16 * v14;
      __p = *(void **)v16;
      v27 = *(void **)(v16 + 8);
      v25 = v15 - 1;
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v25, &__p, 4, 0);
      v14 = v15;
      v13 = *a3;
      ++v15;
    }
    while (v14 < (a3[1] - *a3) >> 4);
  }
  v17 = *a4;
  if (a4[1] != *a4)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *a3;
      v21 = a3[1];
      v22 = (uint64_t)(*(_QWORD *)(v17 + 24 * v18 + 8) - *(_QWORD *)(v17 + 24 * v18)) >> 2;
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, v22);
      if ((_DWORD)v22)
      {
        v23 = 0;
        do
        {
          *(_DWORD *)((char *)__p + v23) = *(_DWORD *)(*(_QWORD *)(*a4 + 24 * v18) + v23);
          v23 += 4;
        }
        while (4 * v22 != v23);
      }
      v25 = v19 + ((unint64_t)(v21 - v20) >> 4);
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v25, __p, v22, 0);
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      v17 = *a4;
      v18 = ++v19;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) > v19);
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  return 1;
}

void sub_23C501FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::QuadMesh::InitVF(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t i;
  void *exception;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  void *__p[3];

  cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)a1);
  v8 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v8 != 3 * (v8 / 3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "in_positions length not divisible by 3");
  }
  v10 = *a4;
  v9 = a4[1];
  v11 = (v8 / 3);
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, v11);
  if (v11)
  {
    v12 = 0;
    v13 = 2;
    do
    {
      v24 = *(_DWORD *)(*a2 + 4 * (v13 - 2));
      v25 = *(_DWORD *)(*a2 + 4 * (v13 - 1));
      v26 = *(_DWORD *)(*a2 + 4 * v13);
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 176);
      v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
      v15 = *(_QWORD *)(v14 + 40);
      if (v12 >= (*(_QWORD *)(v14 + 48) - v15) >> 4)
        cv3d::cv::gess::mesh::QuadMesh::InitVF();
      *(_QWORD *)&v16 = __PAIR64__(v25, v24);
      *((_QWORD *)&v16 + 1) = v26;
      *(_OWORD *)(v15 + 16 * v12++) = v16;
      v13 += 3;
    }
    while (v11 != v12);
  }
  v17 = (v9 - v10);
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v17);
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if ((_DWORD)v9 != (_DWORD)v10)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *(unsigned __int8 *)(*a4 + v18);
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, v20);
      if (v20)
      {
        for (i = 0; i != v20; ++i)
          *((_DWORD *)__p[0] + i) = *(_DWORD *)(*a3 + 4 * (v19 + i));
      }
      v27 = v18;
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v27, (_DWORD *)__p[0], v20, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v19 += v20;
      ++v18;
    }
    while (v18 != v17);
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  return 1;
}

void sub_23C5021F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices(uint64_t a1, unsigned int *a2, void **a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  unsigned int v20;

  if (*a2 == -1 || *a3 != a3[1])
    cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices();
  v4 = a1 + 104;
  v5 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  v20 = v5;
  do
  {
    v20 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, &v20) + 8);
    v6 = cv3d::cv::gess::mesh::Topology::h(v4, &v20);
    v7 = v6;
    v9 = a3[1];
    v8 = (unint64_t)a3[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - (_BYTE *)*a3) >> 2;
      if ((unint64_t)(v11 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*a3;
      v13 = v12 >> 1;
      if (v12 >> 1 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v14);
      else
        v15 = 0;
      v16 = &v15[4 * v11];
      *(_DWORD *)v16 = *(_DWORD *)(v7 + 12);
      v10 = v16 + 4;
      v18 = (char *)*a3;
      v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          v19 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v16 - 1) = v19;
          v16 -= 4;
        }
        while (v17 != v18);
        v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v10;
      a3[2] = &v15[4 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v9 = *(_DWORD *)(v6 + 12);
      v10 = v9 + 1;
    }
    a3[1] = v10;
  }
  while (v20 != v5);
}

void cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges(uint64_t a1, unsigned int *a2, void **a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;

  if (*a2 == -1 || *a3 != a3[1])
    cv3d::cv::gess::mesh::QuadMesh::GetFaceHEdges();
  v4 = a1 + 104;
  v5 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  v19 = v5;
  do
  {
    v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, &v19) + 8);
    v19 = v6;
    v8 = (unsigned int *)a3[1];
    v7 = (unint64_t)a3[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = ((char *)v8 - (_BYTE *)*a3) >> 2;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = v7 - (_QWORD)*a3;
      v12 = v11 >> 1;
      if (v11 >> 1 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v13);
        v6 = v19;
      }
      else
      {
        v14 = 0;
      }
      v15 = (unsigned int *)&v14[4 * v10];
      *v15 = v6;
      v9 = v15 + 1;
      v17 = (char *)*a3;
      v16 = (char *)a3[1];
      if (v16 != *a3)
      {
        do
        {
          v18 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--v15 = v18;
        }
        while (v16 != v17);
        v16 = (char *)*a3;
      }
      *a3 = v15;
      a3[1] = v9;
      a3[2] = &v14[4 * v13];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a3[1] = v9;
  }
  while (v19 != v5);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::VSize(cv3d::cv::gess::mesh::PolyMesh *this)
{
  return (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2;
}

unint64_t cv3d::cv::gess::mesh::PolyMesh::HSize(cv3d::cv::gess::mesh::PolyMesh *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::FSize(cv3d::cv::gess::mesh::PolyMesh *this)
{
  return (uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  v4 = *(_QWORD *)(v3 + 16 * v2);
  if (!v4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<float>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  v4 = *(_QWORD *)(v3 + 16 * v2);
  if (!v4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<float>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<float>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<float>>;
}

_QWORD *std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_23C502608(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(void **this)
{
  *this = off_250D49588;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

cv3d::cv::gess::mesh::PolyMesh *cv3d::cv::gess::mesh::PolyMesh::PolyMesh(cv3d::cv::gess::mesh::PolyMesh *this)
{
  _DWORD *v2;
  void *__p[2];
  char v5;

  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_QWORD *)this = &off_250D495F8;
  *((_QWORD *)this + 22) = -1;
  v2 = (_DWORD *)((char *)this + 176);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_POSITION[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, v2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::HEDGE_IS_BOUNDARY);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>((uint64_t)this, (_DWORD *)this + 45, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_23C502744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  cv3d::cv::gess::mesh::MeshProperty *v15;
  cv3d::cv::gess::mesh::Topology *v16;

  if (a15 < 0)
    operator delete(__p);
  cv3d::cv::gess::mesh::MeshProperty::~MeshProperty(v15);
  cv3d::cv::gess::mesh::Topology::~Topology(v16);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<float>>((char **)(a1 + 8), (uint64_t)v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<float>>((char **)(a1 + 56), (uint64_t)v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<BOOL>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  char v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<BOOL>((char **)(a1 + 32), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v4);
}

{
  uint64_t v4;
  char v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<BOOL>((char **)(a1 + 8), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

void cv3d::cv::gess::mesh::Topology::~Topology(cv3d::cv::gess::mesh::Topology *this)
{
  void *v2;
  void *v3;
  void *v4;

  cv3d::cv::gess::mesh::Topology::Clear(this);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

cv3d::cv::gess::mesh::PolyMesh *cv3d::cv::gess::mesh::PolyMesh::PolyMesh(cv3d::cv::gess::mesh::PolyMesh *this, void **a2)
{
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_QWORD *)this = &off_250D495F8;
  *((_QWORD *)this + 22) = -1;
  cv3d::cv::gess::mesh::PolyMesh::CloneFrom((char **)this, a2);
  return this;
}

void sub_23C502900(_Unwind_Exception *a1)
{
  cv3d::cv::gess::mesh::Topology *v1;
  cv3d::cv::gess::mesh::MeshProperty *v2;

  cv3d::cv::gess::mesh::MeshProperty::~MeshProperty(v2);
  cv3d::cv::gess::mesh::Topology::~Topology(v1);
  _Unwind_Resume(a1);
}

char **cv3d::cv::gess::mesh::PolyMesh::CloneFrom(char **this, void **a2)
{
  uint64_t v3;

  if (this != (char **)a2)
  {
    v3 = (uint64_t)this;
    cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)this);
    cv3d::cv::gess::mesh::Topology::CloneFrom((void **)(v3 + 104), a2 + 13);
    this = cv3d::cv::gess::mesh::MeshProperty::CloneFrom((uint64_t **)v3, (const cv3d::cv::gess::mesh::MeshProperty *)a2);
    *(_DWORD *)(v3 + 176) = *((_DWORD *)a2 + 44);
    *(_DWORD *)(v3 + 180) = *((_DWORD *)a2 + 45);
  }
  return this;
}

void cv3d::cv::gess::mesh::PolyMesh::~PolyMesh(cv3d::cv::gess::mesh::PolyMesh *this, uint64_t a2, uint64_t a3)
{
  int v4;

  *(_QWORD *)this = &off_250D495F8;
  if (*((_DWORD *)this + 44) != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, (unsigned int *)this + 44, a3);
  v4 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 44) = -1;
  if (v4 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 4, (unsigned int *)this + 45, a3);
  *((_DWORD *)this + 45) = -1;
  cv3d::cv::gess::mesh::MeshProperty::~MeshProperty(this);
  cv3d::cv::gess::mesh::Topology::~Topology((cv3d::cv::gess::mesh::PolyMesh *)((char *)this + 104));
}

{
  cv3d::cv::gess::mesh::PolyMesh::~PolyMesh(this, a2, a3);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::Clear(cv3d::cv::gess::mesh::PolyMesh *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t *v7;

  cv3d::cv::gess::mesh::Topology::Clear((_QWORD *)this + 13);
  v2 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(_QWORD *)this + 16))(this);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 1), *((uint64_t **)this + 2), v2);
  v3 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(_QWORD *)this + 24))(this);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 4), *((uint64_t **)this + 5), v3);
  v4 = (*(uint64_t (**)(cv3d::cv::gess::mesh::PolyMesh *))(*(_QWORD *)this + 32))(this);
  result = std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*((uint64_t **)this + 7), *((uint64_t **)this + 8), v4);
  v7 = (uint64_t *)*((_QWORD *)this + 10);
  v6 = (uint64_t *)*((_QWORD *)this + 11);
  while (v7 != v6)
  {
    result = *v7;
    if (*v7)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    v7 += 2;
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::ResizeVertices(uint64_t **this, unint64_t a2)
{
  uint64_t v3;

  cv3d::cv::gess::mesh::Topology::ResizeVertices((cv3d::cv::gess::mesh::Topology *)(this + 13), a2);
  v3 = ((uint64_t (*)(uint64_t **))(*this)[2])(this);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[1], this[2], v3);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::ResizeHedges(uint64_t **this, unint64_t a2)
{
  uint64_t v3;

  cv3d::cv::gess::mesh::Topology::ResizeHEdges((cv3d::cv::gess::mesh::Topology *)(this + 13), a2);
  v3 = ((uint64_t (*)(uint64_t **))(*this)[3])(this);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[4], this[5], v3);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::ResizeFaces(uint64_t **this, unint64_t a2)
{
  uint64_t v3;

  cv3d::cv::gess::mesh::Topology::ResizeFaces((cv3d::cv::gess::mesh::Topology *)(this + 13), a2);
  v3 = ((uint64_t (*)(uint64_t **))(*this)[4])(this);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[7], this[8], v3);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal(uint64_t **this)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  float32x4_t *v7;
  void *__p[2];
  char v11;
  unsigned int v12;
  _QWORD v13[2];

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v13[0] = 0;
  v13[1] = 0;
  v2 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)v13, (unsigned __int8 *)__p);
  v12 = v2;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v2 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, &v12, (__int128 *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v3 = (char *)this[14] - (char *)this[13];
  if (v3)
  {
    v4 = 0;
    v5 = v3 >> 2;
    v6 = 1;
    do
    {
      v7 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, v12, v4);
      cv3d::cv::gess::math::VertexNormal((uint64_t)this, v4, v7);
      v4 = v6;
    }
    while (v5 > v6++);
  }
  return 1;
}

void sub_23C502C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v9);
  v7 = *(_QWORD *)(v4 + 40);
  if (a3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 4))
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 16 * a3;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 56), &v9);
  v7 = *(_QWORD *)(v4 + 40);
  if (a3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 4))
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 16 * a3;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;

  v7 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v7);
  v5 = *(_QWORD *)(v4 + 40);
  if (a3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v5) >> 4))
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  return v5 + 16 * a3;
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::ComputeFaceNormal(uint64_t **this)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  float32x4_t *v7;
  void *__p[2];
  char v11;
  unsigned int v12;
  _QWORD v13[2];

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
  v13[0] = 0;
  v13[1] = 0;
  v2 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 7, (uint64_t)v13, (unsigned __int8 *)__p);
  v12 = v2;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v2 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, &v12, (__int128 *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v3 = (char *)this[20] - (char *)this[19];
  if (v3)
  {
    v4 = 0;
    v5 = v3 >> 2;
    v6 = 1;
    do
    {
      v7 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, v12, v4);
      cv3d::cv::gess::math::FaceNormal((uint64_t)this, v4, v7);
      v4 = v6;
    }
    while (v5 > v6++);
  }
  return 1;
}

void sub_23C502DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace(cv3d::cv::gess::mesh::PolyMesh *this)
{
  void *__p[2];
  char v4;
  int v5;

  v5 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_ADJ_HEDGE);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t)this, &v5, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_23C502ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((char **)(a1 + 8), (uint64_t)&__p, a3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

void sub_23C502F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::_EndAddFace(cv3d::cv::gess::mesh::PolyMesh *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;
  unsigned int v6;

  v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_ADJ_HEDGE);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t)this, &v6, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v6 != -1)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, &v6, v2);
  return 1;
}

void sub_23C502FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  int v4;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t **)(a1 + 8), (uint64_t)&__p, a3);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v4 != -1;
}

void sub_23C503064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::_AddFace(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *i;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  _DWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  int appended;
  int v41;
  unsigned int v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int *v65;
  uint64_t v66;
  void **v67;
  _DWORD *v68;
  unint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  void **v83;
  _DWORD *v84;
  unint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  int v96;
  unsigned int v98;
  void *v101;
  uint64_t v102;
  unsigned int v103;
  __int128 v104;
  int v105;
  void *v106[3];
  void *__p[2];
  char v108;
  unsigned int v109;

  v5 = a4;
  v6 = a3;
  if ((_DWORD)a4)
  {
    v8 = 0;
    v9 = a3 + 1;
    v10 = a4 - 1;
    do
    {
      v11 = v8 + 1;
      if (v8 + 1 < (unint64_t)a4)
      {
        v12 = a3[v8];
        v13 = v10;
        v14 = v9;
        do
        {
          v15 = *v14++;
          if (v12 == v15)
            cv3d::cv::gess::mesh::PolyMesh::_AddFace();
          --v13;
        }
        while (v13);
      }
      ++v9;
      --v10;
      v8 = v11;
    }
    while (v11 != a4);
  }
  v109 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_ADJ_HEDGE);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(a1, &v109, (unsigned __int8 *)__p);
  if (v108 < 0)
    operator delete(__p[0]);
  v16 = v5;
  v102 = v5;
  if ((_DWORD)v5)
  {
    v17 = operator new(4 * v5);
    v16 = v5;
    memset_pattern16(v17, &unk_23C603E70, 4 * v5);
  }
  else
  {
    v17 = 0;
  }
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(__p, v16);
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(v106, v16);
  if ((_DWORD)v5 && a5)
  {
    v18 = 0;
    do
    {
      v19 = v6[v18++];
      v20 = v18;
      if (v18 == v5)
        v20 = 0;
      v21 = v6[v20];
      v22 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(a1, v109, v19);
      for (i = *(_DWORD **)v22; (unint64_t)i < *(_QWORD *)(v22 + 8); ++i)
      {
        LODWORD(v104) = *i;
        v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v104);
        if ((*v24 & v25) == 0)
        {
          v26 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
          if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v26) + 12) == v21)
          {
            v98 = 0;
            goto LABEL_105;
          }
        }
      }
    }
    while (v18 != v5);
  }
  v98 = 1;
  if (!(_DWORD)v5)
    goto LABEL_105;
  v27 = 0;
  v28 = v5;
  v101 = v17;
  do
  {
    v29 = v5;
    v30 = v27 + 1;
    v31 = (v27 + 1);
    if (v27 + 1 == v28)
      v31 = 0;
    v32 = v6[v31];
    v33 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(a1, v109, v6[v27]);
    v34 = v33;
    v35 = (char *)*v33;
    if (*v33 >= v33[1])
    {
LABEL_33:
      v17 = v101;
      *((_DWORD *)v101 + v27) = 1;
      v105 = -1;
      *(_QWORD *)&v104 = -1;
      *((_QWORD *)&v104 + 1) = -1;
      appended = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v104);
      v5 = v29;
      *((_DWORD *)__p[0] + v27) = appended;
      v105 = -1;
      *(_QWORD *)&v104 = -1;
      *((_QWORD *)&v104 + 1) = -1;
      v41 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 1, &v104);
      v28 = v102;
      v42 = ((int)v29 - (int)v27) % v29;
      *((_DWORD *)v106[0] + v42) = v41;
      cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, (unsigned int *)__p[0] + v27, (unsigned int *)v106[0] + v42);
    }
    else
    {
      v36 = (_DWORD *)*v33;
      while (1)
      {
        LODWORD(v104) = *v36;
        v37 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v104);
        if ((*v37 & v38) != 0)
        {
          v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
          if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v39) + 12) == v32)
            break;
        }
        ++v36;
        v35 += 4;
        if ((unint64_t)v36 >= v34[1])
          goto LABEL_33;
      }
      v43 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v104);
      *v43 &= ~v44;
      *((_DWORD *)__p[0] + v27) = v104;
      v28 = v102;
      *((_DWORD *)v101 + v27) = 0;
      if ((a5 & 1) == 0)
      {
        v45 = (char *)v34[1];
        v46 = v45 - (v35 + 4);
        if (v45 != v35 + 4)
          memmove(v35, v35 + 4, v45 - (v35 + 4));
        v34[1] = &v35[v46];
      }
      v17 = v101;
      v5 = v29;
    }
    v27 = v30;
  }
  while (v30 != v28);
  v47 = v28;
  v48 = v5;
  do
  {
    v49 = (v48 - 1) % v5;
    v50 = *((_DWORD *)v17 + v49);
    v51 = *((_DWORD *)v17 + v48 % v5);
    LODWORD(v104) = *((_DWORD *)__p[0] + v49);
    v103 = *((_DWORD *)__p[0] + v48 % v5);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a2, &v103);
    if (v50 == 1 && v51 == 1)
    {
      v58 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v103);
      v59 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
LABEL_61:
      cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v58, v59);
      goto LABEL_62;
    }
    if (v50 == 1 && v51 == 0)
    {
      v60 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v103);
      v59 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
      v58 = (unsigned int *)(v60 + 4);
      goto LABEL_61;
    }
    if (v50)
      v54 = 0;
    else
      v54 = v51 == 1;
    if (v54)
    {
      v58 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v103);
      v57 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
      goto LABEL_60;
    }
    if (!(v50 | v51))
    {
      v55 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
      if (*(_DWORD *)(v55 + 8) != v103)
      {
        v56 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v103);
        v57 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
        v58 = (unsigned int *)(v56 + 4);
LABEL_60:
        v59 = (unsigned int *)(v57 + 8);
        goto LABEL_61;
      }
    }
LABEL_62:
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v103, v6);
    v61 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v104);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v61, v6);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), v6, &v103);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, (unsigned int *)&v104, &v103);
    ++v6;
    ++v48;
    --v47;
  }
  while (v47);
  v62 = 0;
  v63 = v102;
  do
  {
    if (*((_DWORD *)v17 + v62) == 1)
    {
      v64 = v109;
      v65 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p[0] + v62);
      v66 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v65);
      v67 = (void **)cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(a1, v64, *(unsigned int *)(v66 + 12));
      v68 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p[0] + v62);
      v69 = (unint64_t)v67[2];
      v70 = v67[1];
      if ((unint64_t)v70 >= v69)
      {
        v72 = ((char *)v70 - (_BYTE *)*v67) >> 2;
        if ((unint64_t)(v72 + 1) >> 62)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v73 = v69 - (_QWORD)*v67;
        v74 = v73 >> 1;
        if (v73 >> 1 <= (unint64_t)(v72 + 1))
          v74 = v72 + 1;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v74;
        if (v75)
          v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v67 + 2), v75);
        else
          v76 = 0;
        v77 = &v76[4 * v72];
        *(_DWORD *)v77 = *v68;
        v71 = v77 + 4;
        v79 = (char *)*v67;
        v78 = (char *)v67[1];
        if (v78 == *v67)
        {
          v63 = v102;
        }
        else
        {
          v63 = v102;
          do
          {
            v80 = *((_DWORD *)v78 - 1);
            v78 -= 4;
            *((_DWORD *)v77 - 1) = v80;
            v77 -= 4;
          }
          while (v78 != v79);
          v78 = (char *)*v67;
        }
        *v67 = v77;
        v67[1] = v71;
        v67[2] = &v76[4 * v75];
        if (v78)
          operator delete(v78);
      }
      else
      {
        *v70 = *v68;
        v71 = v70 + 1;
        v63 = v102;
      }
      v67[1] = v71;
      if (a5)
      {
        v81 = v109;
        v82 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)__p[0] + v62);
        v83 = (void **)cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(a1, v81, *(unsigned int *)(v82 + 12));
        v84 = __p[0];
        v85 = (unint64_t)v83[2];
        v86 = v83[1];
        if ((unint64_t)v86 >= v85)
        {
          v88 = ((char *)v86 - (_BYTE *)*v83) >> 2;
          if ((unint64_t)(v88 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v89 = v85 - (_QWORD)*v83;
          v90 = v89 >> 1;
          if (v89 >> 1 <= (unint64_t)(v88 + 1))
            v90 = v88 + 1;
          if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
            v91 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v91 = v90;
          if (v91)
            v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v83 + 2), v91);
          else
            v92 = 0;
          v93 = &v92[4 * v88];
          *(_DWORD *)v93 = v84[v62];
          v87 = v93 + 4;
          v95 = (char *)*v83;
          v94 = (char *)v83[1];
          if (v94 == *v83)
          {
            v63 = v102;
          }
          else
          {
            v63 = v102;
            do
            {
              v96 = *((_DWORD *)v94 - 1);
              v94 -= 4;
              *((_DWORD *)v93 - 1) = v96;
              v93 -= 4;
            }
            while (v94 != v95);
            v94 = (char *)*v83;
          }
          *v83 = v93;
          v83[1] = v87;
          v83[2] = &v92[4 * v91];
          if (v94)
            operator delete(v94);
        }
        else
        {
          *v86 = *((_DWORD *)__p[0] + v62);
          v87 = v86 + 1;
          v63 = v102;
        }
        v83[1] = v87;
      }
    }
    ++v62;
  }
  while (v62 != v63);
  v98 = 1;
LABEL_105:
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17)
    operator delete(v17);
  return v98;
}

void sub_23C5037FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  if (__p)
    operator delete(__p);
  if (v26)
    operator delete(v26);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>((uint64_t *)(a1 + 8), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 3) <= v3)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 24 * v3;
}

unint64_t cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(uint64_t a1, int a2, __int128 *a3)
{
  unint64_t appended;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  appended = cv3d::cv::gess::mesh::Topology::AppendHEdge((_QWORD *)(a1 + 104), a3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), v6);
  v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), appended);
  if (a2)
    v9 = *v7 | v8;
  else
    v9 = *v7 & ~v8;
  *v7 = v9;
  return appended;
}

unint64_t cv3d::cv::gess::mesh::PolyMesh::MemoryConsumption(cv3d::cv::gess::mesh::PolyMesh *this)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *((_QWORD *)this + 18) - *((_QWORD *)this + 16);
  v2 = (*((_QWORD *)this + 15) + *((_QWORD *)this + 21) - (*((_QWORD *)this + 13) + *((_QWORD *)this + 19))) & 0xFFFFFFFFFFFFFFFCLL;
  return v1 + cv3d::cv::gess::mesh::MeshProperty::MemoryConsumption(this) + v2;
}

_QWORD *cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes(_QWORD *result, unsigned int *a2, unsigned int *a3)
{
  _QWORD **v3;
  _QWORD **i;

  v3 = (_QWORD **)result[1];
  for (i = (_QWORD **)result[2]; v3 != i; v3 += 2)
  {
    result = *v3;
    if (*v3)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*result + 72))(result, *a2, *a3);
  }
  return result;
}

uint64_t std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      v7 = (std::__shared_weak_count *)v5[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a3);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_23C503B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_23C503BFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  unsigned int v6;

  v6 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), &v6);
  if (*(_QWORD *)(v4 + 48) <= (unint64_t)a3)
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  return *(_QWORD *)(v4 + 40) + (((unint64_t)a3 >> 3) & 0x1FFFFFF8);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  v4 = *(_QWORD *)(v3 + 16 * v2);
  if (!v4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<BOOL>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>();
  v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<BOOL>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<BOOL>;
}

unint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;

  v3 = a3;
  v8 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)(a1 + 32), &v8, a3);
  if (*(_QWORD *)(v4 + 48) <= (unint64_t)v3)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return *(_QWORD *)(v4 + 40) + (((unint64_t)v3 >> 3) & 0x1FFFFFF8);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<BOOL>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<float>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<float>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C503FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C50408C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D49630;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5040D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D49668;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(a1 + 40, a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  v4 = a1[7];
  v2 = (uint64_t)(a1 + 7);
  v3 = v4;
  v5 = *(_QWORD **)(v2 - 8);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (void **)(v2 - 16);
    v8 = *(_QWORD *)(v2 - 16);
    v9 = ((uint64_t)v5 - v8) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v3 - v8;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v2, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    v6 = v14 + 16;
    v17 = (char *)a1[5];
    v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*v7;
    }
    a1[5] = v14;
    a1[6] = v6;
    a1[7] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v6 = v5 + 2;
  }
  a1[6] = v6;
}

__n128 cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)(v3 + 16 * a2);
  *(_OWORD *)(v3 + 16 * a2) = *(_OWORD *)(v3 + 16 * a3);
  *(__n128 *)(*(_QWORD *)(a1 + 40) + 16 * a3) = result;
  return result;
}

__n128 cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(__n128 *)(v3 + 16 * a2);
  *(__n128 *)(v3 + 16 * a3) = result;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::Clone@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(a2, (uint64_t)v4);
}

void sub_23C50436C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D49668;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<float>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, __int128 **a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D49668;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>((char *)v4 + 40, a2[5], a2[6], a2[6] - a2[5]);
  return a1;
}

void sub_23C5045EC(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(cv3d::cv::gess::mesh::BaseAttribute *this, const cv3d::cv::gess::mesh::BaseAttribute *a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)this = off_250D49588;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

char *std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C5046B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D496D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C504728(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<float>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<BOOL>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<BOOL>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<BOOL>,std::allocator<cv3d::cv::gess::mesh::AttributeT<BOOL>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C504938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<BOOL>,std::allocator<cv3d::cv::gess::mesh::AttributeT<BOOL>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<BOOL>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<BOOL>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C504998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<BOOL>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<BOOL>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D49710;
  cv3d::cv::gess::mesh::AttributeT<BOOL>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5049E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<BOOL>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<BOOL>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<BOOL>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D49748;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<BOOL>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<BOOL>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<BOOL>::Size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

void cv3d::cv::gess::mesh::AttributeT<BOOL>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<BOOL>::reserve((char **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<BOOL>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<BOOL>::resize(a1 + 40, a2, 0);
}

void cv3d::cv::gess::mesh::AttributeT<BOOL>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<BOOL>::PushBack(uint64_t a1)
{
  char v1;

  v1 = 0;
  std::vector<BOOL>::push_back(a1 + 40, &v1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<BOOL>::Swap(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 40);
  v4 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v3 + v4);
  v6 = a3 >> 6;
  v7 = 1 << a3;
  if ((*(_QWORD *)(v3 + 8 * (a3 >> 6)) & (1 << a3)) != 0)
    v8 = v5 | (1 << a2);
  else
    v8 = v5 & ~(1 << a2);
  *(_QWORD *)(v3 + v4) = v8;
  if ((v5 & (1 << a2)) != 0)
    v9 = *(_QWORD *)(v3 + 8 * v6) | v7;
  else
    v9 = *(_QWORD *)(v3 + 8 * v6) & ~v7;
  *(_QWORD *)(v3 + 8 * v6) = v9;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<BOOL>::Copy(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 40);
  v4 = a3 >> 6;
  v5 = 1 << a3;
  if (((*(_QWORD *)(v3 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    v6 = *(_QWORD *)(v3 + 8 * v4) | v5;
  else
    v6 = *(_QWORD *)(v3 + 8 * v4) & ~v5;
  *(_QWORD *)(v3 + 8 * v4) = v6;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<BOOL>::Blend(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 40);
  v4 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v3 + v4);
  v6 = v5 | (1 << a2);
  if ((((v5 & (1 << a2)) != 0) & (*(_QWORD *)(v3 + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3)) == 0)
    v6 = v5 & ~(1 << a2);
  *(_QWORD *)(v3 + v4) = v6;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<BOOL>::Clone@<X0>(const cv3d::cv::gess::mesh::BaseAttribute *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<BOOL>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<BOOL>,void>(a2, (uint64_t)v4);
}

void sub_23C504C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x1093C4034BBB111);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<BOOL>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) << 6;
}

void cv3d::cv::gess::mesh::AttributeT<BOOL>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D49748;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
    operator delete(v2);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_23C504D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  __int128 v22;
  char *v23;
  int v24;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      v21 = 0;
      v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v9 <= 0x3FFFFFFFFFFFFFFELL)
        v12 = v11;
      else
        v12 = 0x7FFFFFFFFFFFFFFFLL;
      std::vector<BOOL>::reserve(&v21, v12);
      v13 = *(unint64_t **)a1;
      v14 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)&v22 = v14 + v6;
      v23 = v21;
      v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      v17 = v19;
      LODWORD(v18) = v20;
      v15 = *(char **)a1;
      *(_QWORD *)a1 = v21;
      v21 = v15;
      v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      v22 = v16;
      if (v15)
        operator delete(v15);
    }
    else
    {
      v17 = (char *)(*(_QWORD *)a1 + 8 * (v5 >> 6));
      v18 = *(_QWORD *)(a1 + 8) & 0x3FLL;
      *(_QWORD *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_23C505140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<BOOL>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, const cv3d::cv::gess::mesh::BaseAttribute *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, a2);
  *(_QWORD *)v4 = &off_250D49748;
  std::vector<BOOL>::vector((_QWORD *)v4 + 5, (uint64_t)a2 + 40);
  return a1;
}

void sub_23C5054C8(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<BOOL>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D497B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C5056AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<BOOL> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<BOOL>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<BOOL>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<BOOL> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<BOOL>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<BOOL>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::Remove<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v8 = 0uLL;
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](v4 + 16 * v3, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<float>>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C505A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C505AF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D497F0;
  cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C505B3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D497F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D497F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = off_250D49828;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::~AttributeT(void **a1)
{
  void **v2;

  *a1 = off_250D49828;
  v2 = a1 + 5;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::~AttributeT(void **a1)
{
  void **v3;

  *a1 = off_250D49828;
  v3 = a1 + 5;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
  return MEMORY[0x2426211B8]();
}

unint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Reserve(uint64_t a1, unint64_t a2)
{
  return std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::reserve((uint64_t *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::resize((uint64_t *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Clear(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v3 = (void **)&v1;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::PushBack(uint64_t a1)
{
  void *__p;
  void *v2;
  uint64_t v3;

  __p = 0;
  v2 = 0;
  v3 = 0;
  std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), (uint64_t)&__p);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
}

void sub_23C505D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *__p;
  _BYTE *v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 40) + 24 * a2;
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(&__p, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
  if (a2 != a3)
  {
    v7 = *(_QWORD *)(a1 + 40);
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)(v7 + 24 * a2), *(char **)(v7 + 24 * a3), *(_QWORD *)(v7 + 24 * a3 + 8), (uint64_t)(*(_QWORD *)(v7 + 24 * a3 + 8) - *(_QWORD *)(v7 + 24 * a3)) >> 2);
  }
  v8 = (char *)(*(_QWORD *)(a1 + 40) + 24 * a3);
  if (v8 != (char *)&__p)
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v8, (char *)__p, (uint64_t)v10, (v10 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_23C505E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Copy(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 != a2)
  {
    v3 = *((_QWORD *)result + 5);
    return std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)(v3 + 24 * a3), *(char **)(v3 + 24 * a2), *(_QWORD *)(v3 + 24 * a2 + 8), (uint64_t)(*(_QWORD *)(v3 + 24 * a2 + 8) - *(_QWORD *)(v3 + 24 * a2)) >> 2);
  }
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::Clone@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,void>(a2, (uint64_t)v4);
}

void sub_23C505EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23C505FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::reverse_iterator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_23C5062F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_23C50642C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C50649C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = off_250D49828;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__init_with_size[abi:ne180100]<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>((_QWORD *)v4 + 5, a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
  return a1;
}

void sub_23C506618(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>::__init_with_size[abi:ne180100]<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C506690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23C50674C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D49898;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C506834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void OUTLINED_FUNCTION_0_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 182, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 110, a4);
}

void OUTLINED_FUNCTION_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 112, a4);
}

void OUTLINED_FUNCTION_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 111, a4);
}

void OUTLINED_FUNCTION_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 193, a4);
}

void cv3d::cv::gess::mesh::MeshProperty::~MeshProperty(cv3d::cv::gess::mesh::MeshProperty *this)
{
  *(_QWORD *)this = &off_250D498D0;
  cv3d::cv::gess::mesh::MeshProperty::DeleteAll(this);
  cv3d::cv::gess::mesh::AttributeContainer::~AttributeContainer((cv3d::cv::gess::mesh::MeshProperty *)((char *)this + 80));
  cv3d::cv::gess::mesh::AttributeContainer::~AttributeContainer((cv3d::cv::gess::mesh::MeshProperty *)((char *)this + 56));
  cv3d::cv::gess::mesh::AttributeContainer::~AttributeContainer((cv3d::cv::gess::mesh::MeshProperty *)((char *)this + 32));
  cv3d::cv::gess::mesh::AttributeContainer::~AttributeContainer((cv3d::cv::gess::mesh::MeshProperty *)((char *)this + 8));
}

{
  cv3d::cv::gess::mesh::MeshProperty::~MeshProperty(this);
  JUMPOUT(0x2426211B8);
}

void cv3d::cv::gess::mesh::MeshProperty::DeleteAll(cv3d::cv::gess::mesh::MeshProperty *this)
{
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(*((_QWORD **)this + 1), *((_QWORD **)this + 2));
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(*((_QWORD **)this + 4), *((_QWORD **)this + 5));
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(*((_QWORD **)this + 7), *((_QWORD **)this + 8));
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(*((_QWORD **)this + 10), *((_QWORD **)this + 11));
}

char **cv3d::cv::gess::mesh::MeshProperty::CloneFrom(uint64_t **this, const cv3d::cv::gess::mesh::MeshProperty *a2)
{
  uint64_t **v4;
  char **v5;

  v4 = (uint64_t **)((char *)a2 + 8);
  v5 = (char **)(this + 1);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Reserve(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[1], this[2], (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 4);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Reserve(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[4], this[5], (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Reserve(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[7], this[8], (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 4);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Reserve(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(this[10], this[11], (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 4);
  cv3d::cv::gess::mesh::AttributeContainer::operator=(v5, v4);
  cv3d::cv::gess::mesh::AttributeContainer::operator=((char **)this + 4, (uint64_t **)a2 + 4);
  cv3d::cv::gess::mesh::AttributeContainer::operator=((char **)this + 7, (uint64_t **)a2 + 7);
  return cv3d::cv::gess::mesh::AttributeContainer::operator=((char **)this + 10, (uint64_t **)a2 + 10);
}

char **cv3d::cv::gess::mesh::AttributeContainer::operator=(char **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  _OWORD *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t i;
  char *v32;
  __int128 *j;
  __int128 *v34;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  int64x2_t v39;
  char *v40;
  int64x2_t *v41;
  int64x2_t v42;
  char *v43;
  char **v44;

  v39 = 0uLL;
  v40 = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v5 = *v3;
      v6 = (std::__shared_weak_count *)v3[1];
      v37 = *v3;
      v38 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        if (!v5)
        {
          *(_QWORD *)&v36 = 0;
          *((_QWORD *)&v36 + 1) = v6;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
          goto LABEL_11;
        }
      }
      else if (!v5)
      {
        v36 = 0uLL;
        goto LABEL_11;
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v5 + 80))(&v36);
LABEL_11:
      v10 = v39.i64[1];
      if (v39.i64[1] >= (unint64_t)v40)
      {
        v11 = (v39.i64[1] - v39.i64[0]) >> 4;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)&v40[-v39.i64[0]];
        if ((uint64_t)&v40[-v39.i64[0]] >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        v44 = &v40;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)&v40, v14);
        v17 = &v15[16 * v11];
        *(_OWORD *)v17 = v36;
        v36 = 0uLL;
        v18 = (_QWORD *)v39.i64[1];
        v19 = (_QWORD *)v39.i64[0];
        if (v39.i64[1] == v39.i64[0])
        {
          v22 = vdupq_n_s64(v39.u64[1]);
          v20 = &v15[16 * v11];
        }
        else
        {
          v20 = &v15[16 * v11];
          do
          {
            v21 = *((_OWORD *)v18 - 1);
            v18 -= 2;
            *((_OWORD *)v20 - 1) = v21;
            v20 -= 16;
            *v18 = 0;
            v18[1] = 0;
          }
          while (v18 != v19);
          v22 = v39;
        }
        v23 = v17 + 16;
        v39.i64[0] = (uint64_t)v20;
        v39.i64[1] = (uint64_t)(v17 + 16);
        v42 = v22;
        v24 = v40;
        v40 = &v15[16 * v16];
        v43 = v24;
        v41 = (int64x2_t *)v22.i64[0];
        std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v41);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
        v39.i64[1] = (uint64_t)v23;
        if (*((_QWORD *)&v36 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      else
      {
        *(_OWORD *)v39.i64[1] = v36;
        v39.i64[1] = v10 + 16;
      }
      v28 = v38;
      if (v38)
      {
        v29 = (unint64_t *)&v38->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(*a1, a1[1]);
  v32 = *a1;
  for (i = (uint64_t)a1[1];
        (char *)i != v32;
  a1[1] = v32;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::reserve(a1, (v39.i64[1] - v39.i64[0]) >> 4);
  v34 = (__int128 *)v39.i64[1];
  for (j = (__int128 *)v39.i64[0]; j != v34; ++j)
    std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](a1, j);
  v41 = &v39;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  return a1;
}

void sub_23C506EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  a11 = (void **)&a13;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::MemoryConsumption(cv3d::cv::gess::mesh::MeshProperty *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      if (*v2)
        v4 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 88))(*v2);
      v2 += 2;
    }
    while (v2 != v3);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  while (v5 != v6)
  {
    if (*v5)
      v4 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 88))(*v5);
    v5 += 2;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 7);
  v8 = (_QWORD *)*((_QWORD *)this + 8);
  while (v7 != v8)
  {
    if (*v7)
      v4 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v7 + 88))(*v7);
    v7 += 2;
  }
  v10 = (_QWORD *)*((_QWORD *)this + 10);
  v9 = (_QWORD *)*((_QWORD *)this + 11);
  while (v10 != v9)
  {
    if (*v10)
      v4 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 88))(*v10);
    v10 += 2;
  }
  return v4;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::VSize(cv3d::cv::gess::mesh::MeshProperty *this)
{
  return 0;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::HSize(cv3d::cv::gess::mesh::MeshProperty *this)
{
  return 0;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::FSize(cv3d::cv::gess::mesh::MeshProperty *this)
{
  return 0;
}

void cv3d::cv::gess::mesh::AttributeContainer::~AttributeContainer(cv3d::cv::gess::mesh::AttributeContainer *this)
{
  void **v2;

  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(*(_QWORD **)this, *((_QWORD **)this + 1));
  v2 = (void **)this;
  std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> *>,cv3d::cv::gess::mesh::AttributeContainer::Delete(void)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>&)#1}>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v10 = v2;
    v11 = v3;
    v5 = a1;
    do
    {
      if (*v5)
      {
        v9 = 0uLL;
        std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)v5, &v9);
        v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
        if (*((_QWORD *)&v9 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      v5 += 2;
    }
    while (v5 != a2);
  }
}

uint64_t std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Reserve(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v6 = *v5;
      v7 = (std::__shared_weak_count *)v5[1];
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (v6)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a3);
      if (v7)
      {
        v10 = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_23C507220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

id GESSTestsSandboxDir(void *a1)
{
  id v1;
  void *v2;
  std::string *v3;
  void *v4;
  void *v5;
  void *__p[2];
  char v8;
  std::string v9;

  v1 = objc_retainAutorelease(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v1, "UTF8String"));
  cv3d::cv::gess::util::os::GessSandboxDir((uint64_t)__p, &v9);
  if (v8 < 0)
    operator delete(__p[0]);
  v2 = (void *)MEMORY[0x24BDBCF48];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v9;
  else
    v3 = (std::string *)v9.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithCString:encoding:", v3, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fileURLWithPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);

  return v5;
}

void sub_23C5074EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C507590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgMidpointSubdivide(void *a1, void *a2)
{
  id v3;
  id v4;
  cv3d::cv::gess::alg *v5;
  unsigned int v6;
  char v7;
  cv3d::cv::gess::mesh::TriMesh *v8;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (cv3d::cv::gess::alg *)objc_msgSend(v3, "meshImpl");
    v6 = 0;
    v7 = 1;
    while (v6 < objc_msgSend(v4, "iterations"))
    {
      if ((v7 & 1) != 0)
        v7 = cv3d::cv::gess::alg::MidpointSubdivision(v5, v8);
      else
        v7 = 0;
      ++v6;
    }
  }
  else
  {
    v7 = 0;
  }

  return v7 & 1;
}

void sub_23C50765C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C5076E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgSplitLongEdges(void *a1, void *a2)
{
  id v3;
  id v4;
  float32x4_t *v5;
  int v6;
  const cv3d::cv::gess::mesh::PolyMesh *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (float32x4_t *)objc_msgSend(v3, "meshImpl");
    v6 = -1;
    do
    {
      if (++v6 >= objc_msgSend(v4, "iterations"))
        break;
      cv3d::cv::gess::alg::ComputeAverageEdgeLength(v5, v7);
      v9 = v8;
      objc_msgSend(v4, "ratio");
    }
    while (cv3d::cv::gess::alg::SplitLongEdges((cv3d::cv::gess::alg *)v5, 0, v9, v10, 0.1));
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_23C5077E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C50787C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgCollapseShortEdges(void *a1, void *a2)
{
  id v3;
  id v4;
  float32x4_t *v5;
  int v6;
  const cv3d::cv::gess::mesh::PolyMesh *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (float32x4_t *)objc_msgSend(v3, "meshImpl");
    v6 = -1;
    do
    {
      if (++v6 >= objc_msgSend(v4, "iterations"))
        break;
      cv3d::cv::gess::alg::ComputeAverageEdgeLength(v5, v7);
      v9 = v8;
      objc_msgSend(v4, "ratio");
    }
    while (cv3d::cv::gess::alg::CollapseShortEdges((cv3d::cv::gess::alg *)v5, 0, v9, v10, 0, 0.1, 4));
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_23C507984(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgEqualizeValences(void *a1)
{
  id v1;
  cv3d::cv::gess::alg *v2;
  cv3d::cv::gess::mesh::TriMesh *v3;
  uint64_t v4;

  v1 = a1;
  if ((objc_msgSend(v1, "valid") & 1) != 0 && objc_msgSend(v1, "meshType") == 1)
  {
    v2 = (cv3d::cv::gess::alg *)objc_msgSend(v1, "meshImpl");
    cv3d::cv::gess::alg::EqualizeValences(v2, v3);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_23C507A00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C507ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgIsotropicRemesh(void *a1, void *a2)
{
  id v3;
  id v4;
  float32x4_t *v5;
  cv3d::cv::gess::mesh::TriMesh *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (float32x4_t *)objc_msgSend(v3, "meshImpl");
    v6 = (cv3d::cv::gess::mesh::TriMesh *)objc_msgSend(v4, "iterations");
    objc_msgSend(v4, "splitRatio");
    v8 = v7;
    objc_msgSend(v4, "collapseRatio");
    v10 = v9;
    objc_msgSend(v4, "smoothLambda");
    v12 = v11;
    objc_msgSend(v4, "smoothIterations");
    v14 = cv3d::cv::gess::alg::IsotropicRemeshing(v5, v6, (cv3d::cv::gess::mesh::TriMesh *)(int)v13, v8, v10, v12);
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_23C507BF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *cv3d::cv::gess::mesh::Topology::Clear(_QWORD *this)
{
  this[1] = *this;
  this[4] = this[3];
  this[7] = this[6];
  return this;
}

void cv3d::cv::gess::mesh::Topology::CloneFrom(void **this, void **a2)
{
  std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(this, ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2);
  std::vector<cv3d::cv::gess::mesh::HEdge>::reserve(this + 3, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a2[4] - (_BYTE *)a2[3]) >> 2));
  std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(this + 6, ((_BYTE *)a2[7] - (_BYTE *)a2[6]) >> 2);
  if (this != a2)
  {
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)this, (char *)*a2, (uint64_t)a2[1], ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 2);
    std::vector<cv3d::cv::gess::mesh::HEdge>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdge*,cv3d::cv::gess::mesh::HEdge*>((char *)this + 24, (char *)a2[3], (uint64_t)a2[4], 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a2[4] - (_BYTE *)a2[3]) >> 2));
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)this + 48, (char *)a2[6], (uint64_t)a2[7], ((_BYTE *)a2[7] - (_BYTE *)a2[6]) >> 2);
  }
}

void std::vector<cv3d::cv::gess::mesh::Vertex>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<cv3d::cv::gess::mesh::HEdge>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 20;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>(v3, a2);
    v7 = &v6[20 * v5];
    v9 = &v6[20 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v13;
        v12 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t cv3d::cv::gess::mesh::Topology::Valence(_QWORD *a1, unsigned int *a2)
{
  int v2;
  void *exception;
  _QWORD *v5;
  uint64_t v6;

  v5 = a1;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge((uint64_t)&v6, a1, a2);
  if (cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&v5) == -1)
    return 0;
  v2 = 0;
  do
  {
    if (v2 == -1000)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x242620E28](exception, "Topology::Valence exceed max valence allowed");
    }
    --v2;
  }
  while (cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&v5) != -1);
  return -v2;
}

void sub_23C507F10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(_QWORD *a1, _QWORD *a2, unsigned int *a3)
{
  *a1 = a2;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge((uint64_t)(a1 + 1), a2, a3);
  return a1;
}

uint64_t cv3d::cv::gess::mesh::OneRingVertex::NextVertex(cv3d::cv::gess::mesh::OneRingVertex *this)
{
  uint64_t result;
  uint64_t v3;

  result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingVertex *)((char *)this + 8));
  if ((_DWORD)result != -1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)this + 24);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)this + 32) - v3) >> 2) <= result)
      cv3d::cv::gess::mesh::OneRingVertex::NextVertex();
    return *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this, (unsigned int *)(v3 + 20 * result))+ 12);
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::Topology::vertex(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (v2 >= (uint64_t)(a1[1] - *a1) >> 2)
    cv3d::cv::gess::mesh::Topology::vertex();
  return *a1 + 4 * v2;
}

{
  unint64_t v2;

  v2 = *a2;
  if (v2 >= (uint64_t)(a1[1] - *a1) >> 2)
    cv3d::cv::gess::mesh::Topology::vertex();
  return *a1 + 4 * v2;
}

uint64_t cv3d::cv::gess::mesh::Topology::hedge(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 32) - v3) >> 2) <= v2)
    cv3d::cv::gess::mesh::Topology::hedge();
  return v3 + 20 * v2;
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 32) - v3) >> 2) <= v2)
    cv3d::cv::gess::mesh::Topology::hedge();
  return v3 + 20 * v2;
}

uint64_t cv3d::cv::gess::mesh::Topology::face(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 >= (*(_QWORD *)(a1 + 56) - v3) >> 2)
    cv3d::cv::gess::mesh::Topology::face();
  return v3 + 4 * v2;
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 >= (*(_QWORD *)(a1 + 56) - v3) >> 2)
    cv3d::cv::gess::mesh::Topology::face();
  return v3 + 4 * v2;
}

uint64_t cv3d::cv::gess::mesh::Topology::v(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *a2;
  if (v3 >= (uint64_t)(a1[1] - *a1) >> 2)
    cv3d::cv::gess::mesh::Topology::v((uint64_t)a1, (uint64_t)a2, a3);
  return *a1 + 4 * v3;
}

uint64_t cv3d::cv::gess::mesh::Topology::h(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 32) - v3) >> 2) <= v2)
    cv3d::cv::gess::mesh::Topology::h();
  return v3 + 20 * v2;
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 32) - v3) >> 2) <= v2)
    cv3d::cv::gess::mesh::OneRingVertex::NextVertex();
  return v3 + 20 * v2;
}

uint64_t cv3d::cv::gess::mesh::Topology::f(uint64_t a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 >= (*(_QWORD *)(a1 + 56) - v3) >> 2)
    cv3d::cv::gess::mesh::Topology::f();
  return v3 + 4 * v2;
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 >= (*(_QWORD *)(a1 + 56) - v3) >> 2)
    cv3d::cv::gess::mesh::Topology::f();
  return v3 + 4 * v2;
}

uint64_t cv3d::cv::gess::mesh::Topology::v(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;

  v2 = *a2;
  if (v2 >= (uint64_t)(a1[1] - *a1) >> 2)
    cv3d::cv::gess::mesh::Topology::v();
  return *a1 + 4 * v2;
}

uint64_t cv3d::cv::gess::mesh::Topology::SetPrevNext(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t result;

  if (*a2 == -1 || *a3 == -1)
    cv3d::cv::gess::mesh::Topology::SetPrevNext();
  *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1, a2) + 8) = *a3;
  result = cv3d::cv::gess::mesh::Topology::h(a1, a3);
  *(_DWORD *)(result + 4) = *a2;
  return result;
}

_DWORD *cv3d::cv::gess::mesh::Topology::SetTwin(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _DWORD *result;

  if (*a2 == -1 || *a3 == -1)
    cv3d::cv::gess::mesh::Topology::SetTwin();
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1, a2) = *a3;
  result = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1, a3);
  *result = *a2;
  return result;
}

uint64_t cv3d::cv::gess::mesh::Topology::SetFace(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a2;
  if ((_DWORD)v3 == -1 || *a3 == -1)
    cv3d::cv::gess::mesh::Topology::SetFace();
  v4 = *(_QWORD *)(a1 + 48);
  if (v3 >= (*(_QWORD *)(a1 + 56) - v4) >> 2)
    cv3d::cv::gess::mesh::Topology::f();
  *(_DWORD *)(v4 + 4 * v3) = *a3;
  result = cv3d::cv::gess::mesh::Topology::h(a1, a3);
  *(_DWORD *)(result + 16) = *a2;
  return result;
}

uint64_t cv3d::cv::gess::mesh::Topology::SetStart(_QWORD *a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (*a2 == -1 || *a3 == -1)
    cv3d::cv::gess::mesh::Topology::SetStart();
  result = cv3d::cv::gess::mesh::Topology::h((uint64_t)a1, a2);
  *(_DWORD *)(result + 12) = *a3;
  v10 = *a3;
  if (v10 >= (uint64_t)(a1[1] - *a1) >> 2)
    cv3d::cv::gess::mesh::Topology::v(result, v8, v9);
  *(_DWORD *)(*a1 + 4 * v10) = *a2;
  return result;
}

uint64_t cv3d::cv::gess::mesh::Topology::SetHEdge(_QWORD *a1, _DWORD *a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t result;

  v3 = *a2;
  if ((_DWORD)v3 == -1 || *a3 == -1)
    cv3d::cv::gess::mesh::Topology::SetHEdge();
  if (v3 >= (uint64_t)(a1[1] - *a1) >> 2)
    cv3d::cv::gess::mesh::Topology::v((uint64_t)a1, (uint64_t)a2, (uint64_t)a3);
  *(_DWORD *)(*a1 + 4 * v3) = *a3;
  result = cv3d::cv::gess::mesh::Topology::h((uint64_t)a1, a3);
  *(_DWORD *)(result + 12) = *a2;
  return result;
}

unint64_t cv3d::cv::gess::mesh::Topology::AppendVertex(void **a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v8 = v14 + 4;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  v19 = (char *)v8 - (_BYTE *)*a1;
  if (v19 < 4)
    cv3d::cv::gess::mesh::Topology::AppendVertex();
  return (v19 - 4) >> 2;
}

unint64_t cv3d::cv::gess::mesh::Topology::AppendHEdge(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t result;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (void **)(v4 - 16);
    v11 = *(_QWORD *)(v4 - 16);
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v11) >> 2);
    v13 = v12 + 1;
    if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v11) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x666666666666666)
      v15 = 0xCCCCCCCCCCCCCCCLL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>(v4, v15);
    else
      v16 = 0;
    v17 = &v16[20 * v12];
    v18 = &v16[20 * v15];
    v19 = *a2;
    *((_DWORD *)v17 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v17 = v19;
    v9 = v17 + 20;
    v21 = (char *)a1[3];
    v20 = (char *)a1[4];
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 20);
        *((_DWORD *)v17 - 1) = *((_DWORD *)v20 - 1);
        *(_OWORD *)(v17 - 20) = v22;
        v17 -= 20;
        v20 -= 20;
      }
      while (v20 != v21);
      v20 = (char *)*v10;
    }
    a1[3] = v17;
    a1[4] = v9;
    a1[5] = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 20);
  }
  a1[4] = v9;
  v23 = (uint64_t)&v9[-a1[3]];
  result = 0xCCCCCCCCCCCCCCCDLL * ((v23 - 20) >> 2);
  if (result >= 0xCCCCCCCCCCCCCCCDLL * (v23 >> 2))
    cv3d::cv::gess::mesh::Topology::AppendHEdge();
  return result;
}

unint64_t cv3d::cv::gess::mesh::Topology::AppendFace(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;

  v6 = a1[8];
  v4 = (uint64_t)(a1 + 8);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 1;
    if (v12 >> 1 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = *a2;
    v8 = v16 + 4;
    v19 = (char *)a1[6];
    v18 = (char *)a1[7];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v16 - 1) = v20;
        v16 -= 4;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[6] = v16;
    a1[7] = v8;
    a1[8] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[7] = v8;
  v21 = (unint64_t)v8 - a1[6];
  if (v21 < 4)
    cv3d::cv::gess::mesh::Topology::AppendFace();
  return (v21 - 4) >> 2;
}

void std::vector<cv3d::cv::gess::mesh::Vertex>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::mesh::Vertex>::__append((char **)a1, a2 - v2);
  }
}

void cv3d::cv::gess::mesh::Topology::ResizeHEdges(cv3d::cv::gess::mesh::Topology *this, unint64_t a2)
{
  std::vector<cv3d::cv::gess::mesh::HEdge>::resize((uint64_t)this + 24, a2);
}

void std::vector<cv3d::cv::gess::mesh::HEdge>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::mesh::HEdge>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 20 * a2;
  }
}

void cv3d::cv::gess::mesh::Topology::ResizeFaces(cv3d::cv::gess::mesh::Topology *this, unint64_t a2)
{
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)this + 48, a2);
}

uint64_t cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(uint64_t result, _QWORD *a2, unsigned int *a3)
{
  unint64_t v3;
  int v4;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = -1;
  v3 = *a3;
  if ((_DWORD)v3 != -1)
  {
    if (v3 >= (uint64_t)(a2[1] - *a2) >> 2)
      cv3d::cv::gess::mesh::Topology::v();
    v4 = *(_DWORD *)(*a2 + 4 * v3);
    *(_DWORD *)(result + 8) = v4;
    *(_DWORD *)(result + 12) = v4;
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge(cv3d::cv::gess::mesh::OneRingHEdge *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (unsigned int *)((char *)this + 12);
  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1 == -1
    || (v4 = *(_QWORD *)this,
        v5 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this, v2),
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)(v5 + 4)) == *((_DWORD *)this + 2)))
  {
    v6 = -1;
  }
  else
  {
    v7 = *(_QWORD *)this;
    v8 = cv3d::cv::gess::mesh::Topology::h(v7, v2);
    v6 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v7, (unsigned int *)(v8 + 4));
  }
  *v2 = v6;
  return v1;
}

uint64_t cv3d::cv::gess::mesh::OneRingHEdge::NextHEdgeClockwise(cv3d::cv::gess::mesh::OneRingHEdge *this)
{
  uint64_t v1;
  unsigned int *v2;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;

  v2 = (unsigned int *)((char *)this + 12);
  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1 == -1
    || (v4 = *(_QWORD *)this,
        v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this, v2),
        *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v4, v5) + 8) == *((_DWORD *)this + 2)))
  {
    v6 = -1;
  }
  else
  {
    v7 = *(_QWORD *)this;
    v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, v2);
    v6 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v7, v8) + 8);
  }
  *v2 = v6;
  return v1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(20 * a2);
}

char *std::vector<cv3d::cv::gess::mesh::HEdge>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdge*,cv3d::cv::gess::mesh::HEdge*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x666666666666666)
      v12 = 0xCCCCCCCCCCCCCCCLL;
    else
      v12 = v11;
    result = std::vector<cv3d::cv::gess::mesh::HEdge>::__vallocate[abi:ne180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<cv3d::cv::gess::mesh::HEdge>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void std::vector<cv3d::cv::gess::mesh::Vertex>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    memset(v15, 255, 4 * a2);
    v17 = &v15[4 * a2];
    if (v7 != v8)
    {
      do
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      while (v7 != v8);
      v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<cv3d::cv::gess::mesh::HEdge>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      memset(*(void **)(v4 - 8), 255, v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::HEdge>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[20 * v8];
    v15 = &v12[20 * v11];
    v16 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    memset(v14, 255, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v20;
        v14 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 70, a4);
}

uint64_t cv3d::cv::gess::mesh::Texture::Texture(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  __int128 v5;

  *(_DWORD *)a1 = *a3;
  *(_WORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = v5;
  }
  cv3d::cv::gess::mesh::Texture::LoadImageFile(a1, a2);
  return a1;
}

void sub_23C508E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::Texture::LoadImageFile(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  const std::__fs::filesystem::path *v9;
  std::string::size_type v10;
  std::string *v11;
  char v12;
  char v14;
  int v15;
  void *exception;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_250D49908;
  v4[4] = 0;
  v4[5] = 0;
  v29.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  v4[3] = 0;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 3);
  v5 = (_QWORD *)(a1 + 8);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100](a1 + 8, (__int128 *)&v29);
  size = (std::__shared_weak_count *)v29.__r_.__value_.__l.__size_;
  if (v29.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v29.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v9 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v27, (char *)a2);
  std::__fs::filesystem::path::extension[abi:ne180100](v9, (uint64_t)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
  }
  else
  {
    v29 = v28;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  memset(&v28, 0, sizeof(v28));
  v10 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v29.__r_.__value_.__l.__size_;
  if (v10 == 4)
  {
    v11 = &v29;
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
    if (LODWORD(v11->__r_.__value_.__l.__data_) == 1920492846)
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v26 = *(std::string *)a2;
      v14 = cv3d::cv::gess::io::LoadExr(&v26, *v5);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = 7;
      LODWORD(v28.__r_.__value_.__l.__data_) = 1684107084;
      v15 = 1920484708;
    }
    else
    {
      if (LODWORD(v11->__r_.__value_.__l.__data_) != 1735290926)
        goto LABEL_19;
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v25 = *(std::string *)a2;
      v14 = cv3d::cv::gess::io::LoadJpeg(&v25, *v5);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = 7;
      LODWORD(v28.__r_.__value_.__l.__data_) = 1684107084;
      v15 = 1735282788;
    }
    *(_DWORD *)((char *)v28.__r_.__value_.__r.__words + 3) = v15;
    v28.__r_.__value_.__s.__data_[7] = 0;
    if ((v14 & 1) != 0)
      goto LABEL_25;
LABEL_41:
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, " failed ");
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v22, (uint64_t)&v28, &v23);
    v17 = *(char *)(a2 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)a2;
    else
      v18 = *(const std::string::value_type **)a2;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(a2 + 23);
    else
      v19 = *(_QWORD *)(a2 + 8);
    v20 = std::string::append(&v23, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x242620E34](exception, &v27);
  }
LABEL_19:
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v24 = *(std::string *)a2;
  v12 = cv3d::cv::gess::io::LoadJpeg(&v24, *v5);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  *((_BYTE *)&v28.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v28, "LoadJpeg");
  if ((v12 & 1) == 0)
    goto LABEL_41;
LABEL_25:
  *(_WORD *)(a1 + 4) = 257;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  return 1;
}

void sub_23C5091B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v40 - 81) < 0)
    operator delete(*(void **)(v40 - 104));
  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

BOOL cv3d::cv::gess::mesh::Texture::Release(cv3d::cv::gess::mesh::Texture *this)
{
  const std::string::value_type *v2;
  int v4;
  const std::string::value_type *v5;
  void *exception;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  const std::string::value_type *v19;
  void *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::__fs::filesystem::path v27;

  v2 = (char *)this + 24;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v27.__pn_, (char *)this + 24);
  std::__fs::filesystem::__status(&v27, 0);
  if (v26.__r_.__value_.__s.__data_[0] == 255 || v26.__r_.__value_.__s.__data_[0] == 0)
  {
    v4 = *((unsigned __int8 *)this + 5);
    if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__pn_.__r_.__value_.__l.__data_);
    if (v4)
    {
      v5 = v2;
      exception = __cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v26, "Release texture memory failed, file doesn't exist on ");
      v7 = *((char *)this + 47);
      if (v7 >= 0)
        v8 = v5;
      else
        v8 = (const std::string::value_type *)*((_QWORD *)this + 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)this + 47);
      else
        v9 = *((_QWORD *)this + 4);
      v10 = std::string::append(&v26, v8, v9);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v27.__pn_.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__pn_.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x242620E34](exception, &v27);
    }
  }
  else if (SHIBYTE(v27.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__pn_.__r_.__value_.__l.__data_);
  }
  v12 = *((unsigned __int8 *)this + 4);
  if (*((_BYTE *)this + 4))
  {
    v13 = *((_QWORD *)this + 1);
    if (!v13 || (v14 = *(_QWORD *)(v13 + 16)) == 0)
    {
      v19 = v2;
      v20 = __cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v26, "Release texture memory failed, image already released ");
      v21 = *((char *)this + 47);
      if (v21 >= 0)
        v22 = v19;
      else
        v22 = (const std::string::value_type *)*((_QWORD *)this + 3);
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)this + 47);
      else
        v23 = *((_QWORD *)this + 4);
      v24 = std::string::append(&v26, v22, v23);
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v27.__pn_.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__pn_.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      MEMORY[0x242620E34](v20, &v27);
    }
    MEMORY[0x2426211A0](v14, 0x1000C8052888210);
    *(_QWORD *)(*((_QWORD *)this + 1) + 16) = 0;
    *(_OWORD *)&v27.__pn_.__r_.__value_.__l.__data_ = 0uLL;
    std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)this + 8, (__int128 *)&v27);
    size = (std::__shared_weak_count *)v27.__pn_.__r_.__value_.__l.__size_;
    if (v27.__pn_.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(v27.__pn_.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    *((_BYTE *)this + 4) = 0;
  }
  return v12 != 0;
}

void sub_23C509608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t cv3d::cv::gess::mesh::Texture::Reload(cv3d::cv::gess::mesh::Texture *this)
{
  const std::string::value_type *v2;
  int v3;
  cv3d::cv::gess::mesh::Texture *v5;
  void *exception;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  cv3d::cv::gess::mesh::Texture *v12;
  void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::__fs::filesystem::path v20;

  v2 = (char *)this + 24;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v20.__pn_, (char *)this + 24);
  std::__fs::filesystem::__status(&v20, 0);
  if (!v19.__r_.__value_.__s.__data_[0] || v19.__r_.__value_.__s.__data_[0] == 255)
  {
    if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__pn_.__r_.__value_.__l.__data_);
LABEL_10:
    v5 = this;
    exception = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "Reload texture failed, file doesn't exist on ");
    v7 = *((char *)v5 + 47);
    if (v7 >= 0)
      v8 = v2;
    else
      v8 = (const std::string::value_type *)*((_QWORD *)v5 + 3);
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)v5 + 47);
    else
      v9 = *((_QWORD *)v5 + 4);
    v10 = std::string::append(&v19, v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v20.__pn_.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__pn_.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x242620E34](exception, &v20);
  }
  v3 = *((unsigned __int8 *)this + 5);
  if (SHIBYTE(v20.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__pn_.__r_.__value_.__l.__data_);
  if (!v3)
    goto LABEL_10;
  if (*((_BYTE *)this + 4))
  {
    v12 = this;
    v13 = __cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "Reload texture failed, image wasn't released ");
    v14 = *((char *)v12 + 47);
    if (v14 >= 0)
      v15 = v2;
    else
      v15 = (const std::string::value_type *)*((_QWORD *)v12 + 3);
    if (v14 >= 0)
      v16 = *((unsigned __int8 *)v12 + 47);
    else
      v16 = *((_QWORD *)v12 + 4);
    v17 = std::string::append(&v19, v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v20.__pn_.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__pn_.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x242620E34](v13, &v20);
  }
  cv3d::cv::gess::mesh::Texture::LoadImageFile((uint64_t)this, (uint64_t)v2);
  return 1;
}

void sub_23C50983C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL cv3d::cv::gess::mesh::Material::ReleaseAllTexture(cv3d::cv::gess::mesh::Material *this)
{
  cv3d::cv::gess::mesh::Texture *v1;
  cv3d::cv::gess::mesh::Texture *v2;
  _BOOL8 result;

  v1 = (cv3d::cv::gess::mesh::Texture *)*((_QWORD *)this + 3);
  v2 = (cv3d::cv::gess::mesh::Texture *)*((_QWORD *)this + 4);
  result = 1;
  while (v1 != v2)
  {
    result = result && cv3d::cv::gess::mesh::Texture::Release(v1);
    v1 = (cv3d::cv::gess::mesh::Texture *)((char *)v1 + 48);
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::Material::ReloadAllTexture(cv3d::cv::gess::mesh::Material *this)
{
  cv3d::cv::gess::mesh::Texture *v1;
  cv3d::cv::gess::mesh::Texture *v2;

  v1 = (cv3d::cv::gess::mesh::Texture *)*((_QWORD *)this + 3);
  v2 = (cv3d::cv::gess::mesh::Texture *)*((_QWORD *)this + 4);
  while (v1 != v2)
  {
    cv3d::cv::gess::mesh::Texture::Reload(v1);
    v1 = (cv3d::cv::gess::mesh::Texture *)((char *)v1 + 48);
  }
  return 1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_23C509984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_23C509AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Imagef>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Imagef>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::util::Imagef>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    result = MEMORY[0x2426211A0](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

void sub_23C509C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgImplicitLaplacianSmooth(void *a1, void *a2)
{
  id v3;
  id v4;
  cv3d::cv::gess::alg *v5;
  float v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (cv3d::cv::gess::alg *)objc_msgSend(v3, "meshImpl");
    objc_msgSend(v4, "lambda");
    v7 = cv3d::cv::gess::alg::ImplicitLaplacianSmoothing(v5, (cv3d::cv::gess::mesh::TriMesh *)objc_msgSend(v4, "iterations"), v6, objc_msgSend(v4, "fixBoundary"), objc_msgSend(v4, "enableTangentialRelaxation"));
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_23C509D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgExplicitUmbrellaSmooth(void *a1, void *a2)
{
  id v3;
  id v4;
  cv3d::cv::gess::alg *v5;
  float v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (cv3d::cv::gess::alg *)objc_msgSend(v3, "meshImpl");
    objc_msgSend(v4, "lambda");
    v7 = cv3d::cv::gess::alg::ExplicitUmbrellaSmoothing(v5, (cv3d::cv::gess::mesh::TriMesh *)objc_msgSend(v4, "iterations"), v6, objc_msgSend(v4, "fixBoundary"), objc_msgSend(v4, "enableTangentialRelaxation"));
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_23C509E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::InitVF<float,unsigned int>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  void *exception;
  int v25;
  unsigned int v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)a1);
  v6 = (uint64_t)(a2[1] - *a2) >> 2;
  v7 = v6 / 3;
  if (v6 != 3 * (v6 / 3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "in_positions length not divisible by 3");
    goto LABEL_14;
  }
  v8 = (a3[1] - *a3) >> 2;
  v9 = v8 / 3;
  if (v8 != 3 * (v8 / 3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "indices length not divisible by 3");
LABEL_14:
  }
  v10 = v7;
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, v7);
  v26[0] = *(_DWORD *)(a1 + 176);
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), v26);
  if (v10)
  {
    v14 = 0;
    for (i = 0; i != v10; ++i)
    {
      v16 = *(_QWORD *)(v11 + 40);
      if (i >= (*(_QWORD *)(v11 + 48) - v16) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v11, v12, v13);
      v17 = *a2 + v14;
      *(_QWORD *)&v18 = *(_QWORD *)v17;
      *((_QWORD *)&v18 + 1) = *(unsigned int *)(v17 + 8);
      *(_OWORD *)(v16 + 16 * i) = v18;
      v14 += 12;
    }
  }
  v19 = v9;
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v9);
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if ((_DWORD)v9)
  {
    v20 = 0;
    v21 = 2;
    do
    {
      v22 = *a3;
      v26[0] = *(_DWORD *)(*a3 + 4 * (v21 - 2));
      v26[1] = *(_DWORD *)(v22 + 4 * (v21 - 1));
      v26[2] = *(_DWORD *)(v22 + 4 * v21);
      v25 = v20;
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v25, v26, 3, 0);
      ++v20;
      v21 += 3;
    }
    while (v19 != v20);
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  return 1;
}

void sub_23C50A038(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::InitVF<double,unsigned int>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  float64x2_t *v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  void *exception;
  int v26;
  unsigned int v27[3];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)a1);
  v6 = (uint64_t)(a2[1] - *a2) >> 3;
  v7 = v6 / 3;
  if (v6 != 3 * (v6 / 3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "in_positions length not divisible by 3");
    goto LABEL_14;
  }
  v8 = (a3[1] - *a3) >> 2;
  v9 = v8 / 3;
  if (v8 != 3 * (v8 / 3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "indices length not divisible by 3");
LABEL_14:
  }
  v10 = v7;
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, v7);
  v27[0] = *(_DWORD *)(a1 + 176);
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), v27);
  if (v10)
  {
    v14 = 0;
    for (i = 0; i != v10; ++i)
    {
      v16 = *(_QWORD *)(v11 + 40);
      if (i >= (*(_QWORD *)(v11 + 48) - v16) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v11, v12, v13);
      v17 = (float64x2_t *)(*a2 + v14);
      *(float32x2_t *)&v18 = vcvt_f32_f64(*v17);
      *(float *)&v19 = v17[1].f64[0];
      *((_QWORD *)&v18 + 1) = v19;
      *(_OWORD *)(v16 + 16 * i) = v18;
      v14 += 24;
    }
  }
  v20 = v9;
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v9);
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if ((_DWORD)v9)
  {
    v21 = 0;
    v22 = 2;
    do
    {
      v23 = *a3;
      v27[0] = *(_DWORD *)(*a3 + 4 * (v22 - 2));
      v27[1] = *(_DWORD *)(v23 + 4 * (v22 - 1));
      v27[2] = *(_DWORD *)(v23 + 4 * v22);
      v26 = v21;
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v26, v27, 3, 0);
      ++v21;
      v22 += 3;
    }
    while (v20 != v21);
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  return 1;
}

void sub_23C50A25C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::InitVF<float,unsigned long>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *exception;
  unsigned int v24;
  unsigned int v25[3];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)a1);
  v6 = a2[1] - *a2;
  if (v6 >> 2 != 3 * ((v6 >> 2) / 3uLL))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "in_positions length not divisible by 3");
    goto LABEL_16;
  }
  v7 = a3[1] - *a3;
  v8 = (v7 >> 3) / 3uLL;
  if (v7 >> 3 != 3 * v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "indices length not divisible by 3");
LABEL_16:
  }
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, (v6 >> 2) / 3uLL);
  v25[0] = *(_DWORD *)(a1 + 176);
  v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), v25);
  if ((unint64_t)v6 >= 0xC)
  {
    v12 = 0;
    v13 = 0;
    if ((v6 >> 2) / 3uLL <= 1)
      v14 = 1;
    else
      v14 = (v6 >> 2) / 3uLL;
    do
    {
      v15 = *(_QWORD *)(v9 + 40);
      if (v13 >= (*(_QWORD *)(v9 + 48) - v15) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v9, v10, v11);
      v16 = *a2 + v12;
      *(_QWORD *)&v17 = *(_QWORD *)v16;
      *((_QWORD *)&v17 + 1) = *(unsigned int *)(v16 + 8);
      *(_OWORD *)(v15 + 16 * v13++) = v17;
      v12 += 12;
    }
    while (v14 != v13);
  }
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v8);
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if ((unint64_t)v7 >= 0x18)
  {
    v18 = 2;
    v19 = 1;
    do
    {
      v20 = *a3;
      v25[0] = *(_QWORD *)(*a3 + 8 * (v18 - 2));
      v25[1] = *(_QWORD *)(v20 + 8 * (v18 - 1));
      v25[2] = *(_QWORD *)(v20 + 8 * v18);
      v24 = v19 - 1;
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v24, v25, 3, 0);
      v18 += 3;
    }
    while (v8 > v19++);
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  return 1;
}

void sub_23C50A488(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::InitVF<double,unsigned long>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float64x2_t *v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *exception;
  unsigned int v25;
  unsigned int v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  cv3d::cv::gess::mesh::PolyMesh::Clear((cv3d::cv::gess::mesh::PolyMesh *)a1);
  v6 = a2[1] - *a2;
  if (v6 >> 3 != 3 * ((v6 >> 3) / 3uLL))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "in_positions length not divisible by 3");
    goto LABEL_16;
  }
  v7 = a3[1] - *a3;
  v8 = (v7 >> 3) / 3uLL;
  if (v7 >> 3 != 3 * v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](exception, "indices length not divisible by 3");
LABEL_16:
  }
  cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)a1, (v6 >> 3) / 3uLL);
  v26[0] = *(_DWORD *)(a1 + 176);
  v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), v26);
  if ((unint64_t)v6 >= 0x18)
  {
    v12 = 0;
    v13 = 0;
    if ((v6 >> 3) / 3uLL <= 1)
      v14 = 1;
    else
      v14 = (v6 >> 3) / 3uLL;
    do
    {
      v15 = *(_QWORD *)(v9 + 40);
      if (v13 >= (*(_QWORD *)(v9 + 48) - v15) >> 4)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v9, v10, v11);
      v16 = (float64x2_t *)(*a2 + v12);
      *(float32x2_t *)&v17 = vcvt_f32_f64(*v16);
      *(float *)&v18 = v16[1].f64[0];
      *((_QWORD *)&v17 + 1) = v18;
      *(_OWORD *)(v15 + 16 * v13++) = v17;
      v12 += 24;
    }
    while (v14 != v13);
  }
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, v8);
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  if ((unint64_t)v7 >= 0x18)
  {
    v19 = 2;
    v20 = 1;
    do
    {
      v21 = *a3;
      v26[0] = *(_QWORD *)(*a3 + 8 * (v19 - 2));
      v26[1] = *(_QWORD *)(v21 + 8 * (v19 - 1));
      v26[2] = *(_QWORD *)(v21 + 8 * v19);
      v25 = v20 - 1;
      cv3d::cv::gess::mesh::PolyMesh::_AddFace(a1, &v25, v26, 3, 0);
      v19 += 3;
    }
    while (v8 > v20++);
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace((cv3d::cv::gess::mesh::PolyMesh *)a1);
  return 1;
}

void sub_23C50A6C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::mesh::PolyMesh *cv3d::cv::gess::mesh::TriMesh::TriMesh(cv3d::cv::gess::mesh::TriMesh *this)
{
  cv3d::cv::gess::mesh::PolyMesh *result;

  result = cv3d::cv::gess::mesh::PolyMesh::PolyMesh(this);
  *(_QWORD *)result = &off_250D49940;
  return result;
}

void cv3d::cv::gess::mesh::TriMesh::~TriMesh(cv3d::cv::gess::mesh::TriMesh *this, uint64_t a2, uint64_t a3)
{
  cv3d::cv::gess::mesh::PolyMesh::~PolyMesh(this, a2, a3);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::FixNonManifoldEdge(cv3d::cv::gess::mesh::TriMesh *this)
{
  uint64_t v2;
  cv3d::cv::gess::mesh::Topology *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  std::vector<unsigned int>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v33;
  void *__p;
  char *v35;
  char *v36;
  void *v37[3];
  std::vector<unsigned int> v38;
  unsigned int v39;
  int32x2_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 14);
  v3 = (cv3d::cv::gess::mesh::TriMesh *)((char *)this + 104);
  v5 = *((_QWORD *)this + 20) - *((_QWORD *)this + 19);
  v6 = v5 >> 2;
  std::vector<unsigned int>::vector(&v38, 3 * (v5 >> 2));
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v37, 3uLL);
  if ((v5 >> 2))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      LODWORD(__p) = v8;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)this, (unsigned int *)&__p, v37);
      v9 = 0;
      v10 = v37[0];
      begin = v38.__begin_;
      do
      {
        begin[(v7 + v9)] = v10[v9];
        ++v9;
      }
      while (v9 != 3);
      ++v8;
      v7 += 3;
    }
    while (v8 != (_DWORD)v6);
  }
  cv3d::cv::gess::mesh::Topology::Clear(v3);
  v12 = v4 - v2;
  cv3d::cv::gess::mesh::Topology::ResizeVertices(v3, (v12 >> 2));
  __p = 0;
  v35 = 0;
  v13 = (v5 >> 2);
  v36 = 0;
  cv3d::cv::gess::mesh::Topology::ResizeFaces(v3, v13);
  cv3d::cv::gess::mesh::PolyMesh::_BeginAddFace(this);
  if ((_DWORD)v6)
  {
    v14 = 0;
    do
    {
      v39 = v38.__begin_[(3 * v14)];
      v40.i32[0] = v38.__begin_[(3 * v14 + 1)];
      v40.i32[1] = v38.__begin_[(3 * v14 + 2)];
      v33 = v14;
      if ((cv3d::cv::gess::mesh::PolyMesh::_AddFace((uint64_t)this, &v33, &v39, 3, 1) & 1) == 0)
      {
        v15 = v35;
        if (v35 >= v36)
        {
          v17 = (v35 - (_BYTE *)__p) >> 2;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v18 = (v36 - (_BYTE *)__p) >> 1;
          if (v18 <= v17 + 1)
            v18 = v17 + 1;
          if ((unint64_t)(v36 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v36, v19);
          else
            v20 = 0;
          v21 = &v20[4 * v17];
          *(_DWORD *)v21 = v14;
          v16 = v21 + 4;
          v23 = (char *)__p;
          v22 = v35;
          if (v35 != __p)
          {
            do
            {
              v24 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v21 - 1) = v24;
              v21 -= 4;
            }
            while (v22 != v23);
            v22 = (char *)__p;
          }
          __p = v21;
          v35 = v16;
          v36 = &v20[4 * v19];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v35 = v14;
          v16 = v15 + 4;
        }
        v35 = v16;
      }
      ++v14;
    }
    while (v14 != v13);
  }
  if (v35 != __p)
  {
    cv3d::cv::gess::mesh::PolyMesh::ResizeVertices((uint64_t **)this, ((v35 - (_BYTE *)__p) >> 1) + ((v35 - (_BYTE *)__p) >> 2) + (v12 >> 2));
    v25 = __p;
    if (v35 != __p)
    {
      v26 = 0;
      v27 = 0;
      v28 = v12 >> 2;
      do
      {
        v29 = 0;
        v30 = v25[v26];
        v39 = 3 * v27 + v28;
        v40 = vadd_s32(vdup_n_s32(v39), (int32x2_t)0x200000001);
        v31 = 3 * v30;
        do
        {
          cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes((uint64_t)this, v38.__begin_[(v31 + v29)], *(&v39 + v29), 1);
          ++v29;
        }
        while (v29 != 3);
        cv3d::cv::gess::mesh::PolyMesh::_AddFace((uint64_t)this, (_DWORD *)__p + v26, &v39, 3, 0);
        v25 = __p;
        v26 = ++v27;
      }
      while (v27 < (unint64_t)((v35 - (_BYTE *)__p) >> 2));
    }
  }
  cv3d::cv::gess::mesh::PolyMesh::_EndAddFace(this);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
  return 1;
}

void sub_23C50AA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t result;

  if (*a2 == -1 || a3[1] - *a3 != 12)
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices();
  v5 = a1 + 104;
  v6 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, v6);
  *(_DWORD *)*a3 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, v7) + 12);
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v5, a2);
  v9 = cv3d::cv::gess::mesh::Topology::h(v5, v8);
  v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, (unsigned int *)(v9 + 8));
  *(_DWORD *)(*a3 + 4) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, v10) + 12);
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v5, a2);
  result = cv3d::cv::gess::mesh::Topology::h(v5, v11);
  *(_DWORD *)(*a3 + 8) = *(_DWORD *)(result + 12);
  return result;
}

void cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes(uint64_t a1, unsigned int a2, unsigned int a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::string::size_type size;
  std::string *v12;
  BOOL v13;
  std::string __p;
  std::string v15;
  char v16;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != *(uint64_t **)(a1 + 16))
  {
    v7 = a2;
    v8 = a3;
    while (1)
    {
      v9 = *v4;
      if (!*v4 || (a4 & 1) != 0)
      {
        if (!v9)
          goto LABEL_25;
        goto LABEL_24;
      }
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
      }
      else
      {
        v10 = *(_OWORD *)(v9 + 8);
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      std::string::basic_string(&v15, &__p, 0, 2uLL, (std::allocator<char> *)&v16);
      size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v15.__r_.__value_.__l.__size_;
      if (size != 2)
        break;
      v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
      if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v15;
      v13 = LOWORD(v12->__r_.__value_.__l.__data_) == 14966;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
LABEL_19:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (v13)
          goto LABEL_25;
LABEL_23:
        v9 = *v4;
LABEL_24:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, v7, v8);
        goto LABEL_25;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v13)
        goto LABEL_23;
LABEL_25:
      v4 += 2;
      if (v4 == *(uint64_t **)(a1 + 16))
        return;
    }
    v13 = 0;
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
LABEL_18:
    operator delete(v15.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
}

void sub_23C50ACFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  _DWORD *result;

  if (*a2 == -1 || a3[1] - *a3 != 12)
    cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges();
  v5 = a1 + 104;
  v6 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  *(_DWORD *)*a3 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, v6) + 8);
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v5, a2);
  *(_DWORD *)(*a3 + 4) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, v7) + 4);
  result = (_DWORD *)cv3d::cv::gess::mesh::Topology::f(v5, a2);
  *(_DWORD *)(*a3 + 8) = *result;
  return result;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::FlipEdge(uint64_t a1, unsigned int *a2, int a3, unsigned int *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  int Vertex;
  float32x4_t *v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  void *__p[3];
  _QWORD v78[3];
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;

  v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v9 & *v8) != 0)
    return 0;
  v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v10);
  if ((v12 & *v11) != 0)
    return 0;
  v90 = *a2;
  v89 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v90) + 8);
  v88 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v89) + 8);
  v13 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v88);
  if (*(_DWORD *)(v13 + 8) != v90)
    cv3d::cv::gess::mesh::TriMesh::FlipEdge();
  v87 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v90);
  v86 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v87) + 8);
  v85 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v86) + 8);
  v14 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v85);
  if (*(_DWORD *)(v14 + 8) != v87)
    cv3d::cv::gess::mesh::TriMesh::FlipEdge();
  v84 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v90) + 16);
  v83 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v87) + 16);
  v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v90) + 12);
  v82 = v15;
  v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v87) + 12);
  v81 = v16;
  v80 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v88) + 12);
  v17 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v85) + 12);
  v79 = v17;
  if (v15 == v16)
    return 0;
  result = 0;
  if (v16 != v80 && v15 != v80 && v15 != v17 && v16 != v17 && v80 != v17)
  {
    cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v78, (_QWORD *)(a1 + 104), &v80);
    while (1)
    {
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v78);
      if (Vertex == -1)
        break;
      if (Vertex == v17)
        return 0;
    }
    if (a3)
    {
      v76 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v15);
      v75 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v16);
      v74 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v80);
      v20 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v17);
      v21 = (int32x4_t)vsubq_f32(v75, v76);
      v22 = (int32x4_t)vsubq_f32(v74, v76);
      v23 = (int32x4_t)vsubq_f32(v75, *v20);
      v24 = (int32x4_t)vsubq_f32(v74, *v20);
      v25 = (float32x4_t)vzip2q_s32(vzip1q_s32(v21, (int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL)), v21);
      v26 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL), v22);
      v27 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL), v21);
      v28 = (float32x4_t)vzip2q_s32(vzip1q_s32(v22, (int32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 0xCuLL)), v22);
      v29 = vmlsq_f32(vmulq_f32(v25, v26), v28, v27);
      v30 = vmulq_f32(v29, v29);
      v30.i32[3] = 0;
      v31 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v23, (int32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL)), v23), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL), v24)), (float32x4_t)vzip2q_s32(vzip1q_s32(v24, (int32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL)), v24), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL), v23));
      v32 = vmulq_f32(v31, v31);
      v32.i32[3] = 0;
      v33 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32));
      v34 = vmulq_f32(v29, v31);
      v34.i32[3] = 0;
      v35 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v30, v30)) * 0.70711;
      if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34)) < (float)(v35 * v33))
        return 0;
      v36 = (int32x4_t)vsubq_f32(*v20, v76);
      v37 = (float32x4_t)vzip2q_s32(vzip1q_s32(v36, (int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL)), v36);
      v38 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), v36);
      v39 = vmlsq_f32(vmulq_f32(v26, v37), v28, v38);
      v40 = vmulq_f32(v39, v39);
      v40.i32[3] = 0;
      v41 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40));
      v42 = vmulq_f32(v29, v39);
      v42.i32[3] = 0;
      if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42)) < (float)(v35 * v41))
        return 0;
      v43 = vmlsq_f32(vmulq_f32(v27, v37), v25, v38);
      v44 = vmulq_f32(v43, v43);
      v44.i32[3] = 0;
      v45 = vmulq_f32(v43, v31);
      v45.i32[3] = 0;
      v46 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44)) * 0.70711;
      if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)) < (float)(v46 * v33))
        return 0;
      v47 = vmulq_f32(v43, v39);
      v47.i32[3] = 0;
      if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v47, v47)) < (float)(v46 * v41))
        return 0;
    }
    if (*a4 == -1)
    {
      v64 = 0;
      v63 = 0;
      v61 = 0;
      v60 = 0;
      v62 = 0;
    }
    else
    {
      std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v84, __p);
      v48 = 0;
      while (*((_DWORD *)__p[0] + v48) != v15)
      {
        if (++v48 == 3)
        {
          LOBYTE(v48) = 0;
          break;
        }
      }
      v49 = 0;
      while (*((_DWORD *)__p[0] + v49) != v16)
      {
        if (++v49 == 3)
        {
          LODWORD(v49) = 0;
          break;
        }
      }
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v83, __p);
      v51 = 0;
      while (*((_DWORD *)__p[0] + v51) != v15)
      {
        if (++v51 == 3)
        {
          LODWORD(v51) = 0;
          break;
        }
      }
      v52 = 0;
      while (*((_DWORD *)__p[0] + v52) != v16)
      {
        if (++v52 == 3)
        {
          v52 = 0;
          break;
        }
      }
      v91 = *a4;
      v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), &v91, v50);
      v55 = cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::operator[](v53, v84, v54);
      v91 = *a4;
      v57 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), &v91, v56);
      v59 = cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::operator[](v57, v83, v58);
      v60 = *(_DWORD *)(v55 + 4 * v48);
      if (v60 == *(_DWORD *)(v59 + 4 * v51)
        && (v61 = *(_DWORD *)(v55 + 4 * v49), v61 == *(_DWORD *)(v59 + 4 * v52)))
      {
        v62 = 0;
        v63 = *(_DWORD *)(v55 + 4 * ((unsigned __int16)(v49 + 1) % 3u));
        v64 = *(_DWORD *)(v59 + 4 * ((unsigned __int16)(v51 + 1) % 3u));
      }
      else
      {
        v64 = 0;
        v63 = 0;
        v61 = 0;
        v60 = 0;
        v62 = 1;
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v89, &v87);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v87, &v85);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v85, &v89);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v90, &v88);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v88, &v86);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v86, &v90);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v90, &v79);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v87, &v80);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v82, &v86);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v81, &v89);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v80, &v88);
    cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v79, &v85);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &v84, &v86);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &v83, &v89);
    result = 1;
    if ((v62 & 1) == 0 && *a4 != -1)
    {
      LODWORD(__p[0]) = *a4;
      v66 = (uint64_t *)(a1 + 56);
      v67 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v66, (unsigned int *)__p, v65);
      v69 = (_DWORD *)cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::operator[](v67, v84, v68);
      *v69 = v64;
      v69[1] = v63;
      v69[2] = v60;
      LODWORD(__p[0]) = *a4;
      v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v66, (unsigned int *)__p, v70);
      v73 = (_DWORD *)cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::operator[](v71, v83, v72);
      *v73 = v63;
      v73[1] = v64;
      v73[2] = v61;
      return 1;
    }
  }
  return result;
}

void sub_23C50B498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::operator[](uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 48) - v3) >> 2) <= a2)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, a2, a3);
  return v3 + 12 * a2;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 48) - v3) >> 2) <= a2)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(a1, a2, a3);
  return v3 + 12 * a2;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::SplitEdge(uint64_t a1, unsigned int *a2, unsigned int *a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  int v23;
  uint64_t i;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31[2];
  _QWORD v32[4];

  v32[3] = *MEMORY[0x24BDAC8D0];
  v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  v10 = v9 & *v8;
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v12 = v11;
  if (v10)
  {
    v13 = a1;
    v14 = v12;
    return cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge(v13, v14, a3);
  }
  v15 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v11);
  if ((v16 & *v15) != 0)
  {
    v13 = a1;
    v14 = a2;
    return cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge(v13, v14, a3);
  }
  v18 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(v18 + 8));
  v20 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v19) + 12);
  v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v22 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v21);
  if (v20 == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(v22 + 4)) + 12))
    return 0;
  memset(v32, 255, 24);
  v23 = -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  cv3d::cv::gess::mesh::PolyMesh::ResizeHedges((uint64_t **)a1, (v23 + 6));
  for (i = 0; i != 6; ++i)
  {
    *((_DWORD *)v32 + i) = v23 + i;
    v25 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), (v23 + i));
    *v25 &= ~v26;
  }
  v27 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  cv3d::cv::gess::mesh::PolyMesh::ResizeFaces((uint64_t **)a1, (v27 + 2));
  v31[0] = v27;
  v31[1] = v27 + 1;
  v28 = *a3;
  if (*a3 == -1)
  {
    v30 = -1;
    *a3 = cv3d::cv::gess::mesh::Topology::AppendVertex((void **)(a1 + 104), &v30);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v29);
  }
  return cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, a2, a3, v31, (unsigned int *)v32, a4, v28 == -1);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x2_t v76;
  float32x2_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t *v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  float32x4_t v115;
  float32x4_t v116;
  int v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int v121;
  uint64_t *v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int appended;
  int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  void *__p[2];
  char v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE v141[9];

  v4 = a2;
  v6 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v7 & *v6) == 0)
  {
    v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
    v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v8);
    if ((v10 & *v9) == 0)
      return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v139 = 0;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&v139, (unsigned __int8 *)__p);
  if (v138 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v140) = 0;
  v139 = 0;
  v122 = (uint64_t *)(a1 + 56);
  v123 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&v139, (unsigned __int8 *)__p);
  if (v138 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  v12 = (uint64_t *)(a1 + 8);
  v139 = 0;
  v140 = 0;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v139, (unsigned __int8 *)__p);
  if (v138 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v139 = 0;
  v140 = 0;
  v14 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v139, (unsigned __int8 *)__p);
  if (v138 < 0)
    operator delete(__p[0]);
  v15 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v4);
  if ((v16 & *v15) != 0)
    v4 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
  v136 = *v4;
  v135 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v136);
  v134 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v136) + 8);
  v133 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v134) + 8);
  v132 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v135) + 8);
  v17 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v132);
  if ((v18 & *v17) == 0)
    cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge();
  v131 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v136) + 16);
  v130 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v136) + 12);
  v129 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v134) + 12);
  v128 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v133) + 12);
  if (*a3 == -1)
  {
    v118 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v130);
    v19 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v129);
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    *(float32x4_t *)__p = vmulq_f32(vaddq_f32(v118, *v19), v20);
    LODWORD(v139) = -1;
    *a3 = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(a1, __p, &v139);
  }
  LODWORD(__p[0]) = -1;
  appended = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, __p);
  if (v13 != -1)
  {
    LODWORD(__p[0]) = v13;
    v21 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v24 = *(_QWORD *)(v21 + 40);
    if (v129 >= (unint64_t)((*(_QWORD *)(v21 + 48) - v24) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v21, v22, v23);
    LODWORD(__p[0]) = v13;
    v25 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v28 = *(_QWORD *)(v25 + 40);
    if (v130 >= (unint64_t)((*(_QWORD *)(v25 + 48) - v28) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v25, v26, v27);
    v115 = *(float32x4_t *)(v24 + 16 * v129);
    v119 = *(float32x4_t *)(v28 + 16 * v130);
    LODWORD(__p[0]) = v13;
    v29 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v30 = *a3;
    v31 = *(_QWORD *)(v29 + 40);
    if (v30 >= (*(_QWORD *)(v29 + 48) - v31) >> 4)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    v32.i64[0] = 0x3F0000003F000000;
    v32.i64[1] = 0x3F0000003F000000;
    *(float32x4_t *)(v31 + 16 * v30) = vmulq_f32(vaddq_f32(v119, v115), v32);
  }
  if (v14 != -1)
  {
    LODWORD(__p[0]) = v14;
    v33 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v36 = *(_QWORD *)(v33 + 40);
    if (v129 >= (unint64_t)((*(_QWORD *)(v33 + 48) - v36) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v33, v34, v35);
    LODWORD(__p[0]) = v14;
    v37 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v40 = *(_QWORD *)(v37 + 40);
    if (v130 >= (unint64_t)((*(_QWORD *)(v37 + 48) - v40) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v37, v38, v39);
    v116 = *(float32x4_t *)(v36 + 16 * v129);
    v120 = *(float32x4_t *)(v40 + 16 * v130);
    LODWORD(__p[0]) = v14;
    v41 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)__p);
    v42 = *a3;
    v43 = *(_QWORD *)(v41 + 40);
    if (v42 >= (*(_QWORD *)(v41 + 48) - v43) >> 4)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    v44.i64[0] = 0x3F0000003F000000;
    v44.i64[1] = 0x3F0000003F000000;
    *(float32x4_t *)(v43 + 16 * v42) = vmulq_f32(vaddq_f32(v120, v116), v44);
  }
  cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes(a1, v130, *a3, 0);
  cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes((_QWORD *)a1, a3, &v129);
  LODWORD(v45) = 0;
  v121 = 0;
  LODWORD(v46) = 0;
  LODWORD(v47) = 0;
  v48 = v11 == -1 || v123 == -1;
  v49 = !v48;
  if (!v48)
  {
    v117 = v49;
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v131, __p);
    v51 = 0;
    while (*((_DWORD *)__p[0] + v51) != v130)
    {
      if (++v51 == 3)
      {
        LOBYTE(v51) = 0;
        break;
      }
    }
    LODWORD(v139) = v123;
    v52 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v122, (unsigned int *)&v139, v50);
    v54 = *(_QWORD *)(v52 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v52 + 48) - v54) >> 2) <= v131)
      goto LABEL_68;
    v47 = *(unsigned int *)(v54 + 12 * v131 + 4 * v51);
    LODWORD(v139) = v123;
    v55 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v122, (unsigned int *)&v139, v53);
    v57 = *(_QWORD *)(v55 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v55 + 48) - v57) >> 2) <= v131)
      goto LABEL_68;
    v58 = v57 + 12 * v131;
    v59 = v51 < 2u ? 1 : -2;
    v46 = *(unsigned int *)(v58 + 4 * (v59 + v51));
    LODWORD(v139) = v123;
    v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v122, (unsigned int *)&v139, v56);
    v62 = *(_QWORD *)(v60 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v60 + 48) - v62) >> 2) <= v131)
LABEL_68:
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    v63 = v62 + 12 * v131;
    v64 = v51 - 1;
    if (!(_BYTE)v51)
      v64 = 2;
    v121 = *(_DWORD *)(v63 + 4 * v64);
    LODWORD(v139) = v11;
    v65 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v139, v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 48))(v65);
    LODWORD(v139) = v11;
    v67 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v139, v66);
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
    LODWORD(v139) = v11;
    v70 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v139, v69);
    v72 = *(_QWORD *)(v70 + 40);
    if (v47 >= (*(_QWORD *)(v70 + 48) - v72) >> 3
      || (LODWORD(v139) = v11,
          v73 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v139, v71), v75 = *(_QWORD *)(v73 + 40), v46 >= (*(_QWORD *)(v73 + 48) - v75) >> 3))
    {
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    v76 = *(float32x2_t *)(v72 + 8 * v47);
    v77 = *(float32x2_t *)(v75 + 8 * v46);
    LODWORD(v139) = v11;
    v78 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a1 + 80), (unsigned int *)&v139, v74);
    v45 = (v68 - 1);
    v79 = *(_QWORD *)(v78 + 40);
    v49 = v117;
    if (v45 >= (*(_QWORD *)(v78 + 48) - v79) >> 3)
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    *(float32x2_t *)(v79 + 8 * v45) = vmul_f32(vadd_f32(v76, v77), (float32x2_t)0x3F0000003F000000);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v80 = v49;
  v81 = -858993459 * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2);
  cv3d::cv::gess::mesh::PolyMesh::ResizeHedges((uint64_t **)a1, v81 + 4);
  LODWORD(v139) = v81;
  v125 = v81 + 2;
  v126 = v81 + 1;
  v124 = v81 + 3;
  v82 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v81);
  *v82 &= ~v83;
  v84 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v126);
  *v84 &= ~v85;
  v86 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v125);
  *v86 &= ~v87;
  v88 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v124);
  *v88 |= v89;
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v134, (unsigned int *)&v139);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, (unsigned int *)&v139, &v136);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v133, &v125);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v125, &v126);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v126, &v133);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v135, &v124);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v124, &v132);
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, (unsigned int *)&v139, &v126);
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v125, &v124);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v136, a3);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), (unsigned int *)&v139, &v128);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v126, a3);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v125, &v130);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v124, a3);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &v131, (unsigned int *)&v139);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &appended, &v126);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &appended, &v133);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &appended, &v125);
  if (v80)
  {
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v90);
    LODWORD(__p[0]) = v123;
    v92 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v122, (unsigned int *)__p, v91);
    v95 = *(_QWORD *)(v92 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v92 + 48) - v95) >> 2) <= v131)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v92, v93, v94);
    v96 = (_DWORD *)(v95 + 12 * v131);
    *v96 = v45;
    v96[1] = v46;
    v96[2] = v121;
    LODWORD(__p[0]) = v123;
    v97 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v122, (unsigned int *)__p, v94);
    v100 = *(_QWORD *)(v97 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v97 + 48) - v100) >> 2) <= appended)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v97, v98, v99);
    v101 = (_DWORD *)(v100 + 12 * appended);
    *v101 = v45;
    v101[1] = v121;
    v101[2] = v47;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "th:isnew_subdiv");
  v102 = (uint64_t *)(a1 + 32);
  v141[0] = 0;
  v103 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 32), (uint64_t)v141, (unsigned __int8 *)__p);
  if (v138 < 0)
    operator delete(__p[0]);
  if (v103 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "tv:isnew_subdiv");
    v141[0] = 0;
    v105 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>((uint64_t **)(a1 + 8), (uint64_t)v141, (unsigned __int8 *)__p);
    if (v138 < 0)
      operator delete(__p[0]);
    if (v105 != -1)
    {
      LODWORD(__p[0]) = v103;
      v106 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v102, (unsigned int *)__p, v104);
      if (*(_QWORD *)(v106 + 48) <= (unint64_t)v139)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v106, v107, v108);
      v109 = *(_QWORD *)(v106 + 40);
      *(_QWORD *)(v109 + (((unint64_t)v139 >> 3) & 0x1FFFFFF8)) |= 1 << v139;
      if (*(_QWORD *)(v106 + 48) <= (unint64_t)v126)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v106, v107, v108);
      *(_QWORD *)(v109 + (((unint64_t)v126 >> 3) & 0x1FFFFFF8)) |= 1 << v126;
      if (*(_QWORD *)(v106 + 48) <= (unint64_t)v125)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v106, v107, v108);
      *(_QWORD *)(v109 + (((unint64_t)v125 >> 3) & 0x1FFFFFF8)) &= ~(1 << v125);
      if (*(_QWORD *)(v106 + 48) <= (unint64_t)v124)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v106, v107, v108);
      *(_QWORD *)(v109 + (((unint64_t)v124 >> 3) & 0x1FFFFFF8)) &= ~(1 << v124);
      LODWORD(__p[0]) = v105;
      v110 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>(v12, (unsigned int *)__p, v108);
      v113 = *a3;
      if (*(_QWORD *)(v110 + 48) <= v113)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v110, v111, v112);
      *(_QWORD *)(*(_QWORD *)(v110 + 40) + ((v113 >> 3) & 0x1FFFFFF8)) |= 1 << v113;
    }
  }
  return 1;
}

void sub_23C50C2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::SplitEdge(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int a6, int a7)
{
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float32x4_t *v25;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  unsigned int v62;
  float32x4_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  float32x2_t v101;
  float32x2_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  float32x2_t v124;
  float32x2_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  float32x2_t v144;
  float32x2_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _DWORD *v177;
  uint64_t **v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  const char *v195;
  int v196;
  uint64_t *v197;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  int v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  int v209;
  unsigned int *v210;
  float32x4_t v211;
  float32x4_t v212;
  unsigned int *v213;
  unsigned int v214;
  uint64_t *v215;
  int v216;
  uint64_t **v217;
  void *__p;
  void *v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  void *v233[2];
  char v234;
  unsigned int v235[3];

  v14 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v15 & *v14) != 0)
    return 0;
  v16 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
  v17 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v16);
  if ((v18 & *v17) != 0)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(v233, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  __p = 0;
  v197 = (uint64_t *)(a1 + 80);
  v214 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a1 + 80), (uint64_t)&__p, (unsigned __int8 *)v233);
  if (v234 < 0)
    operator delete(v233[0]);
  std::string::basic_string[abi:ne180100]<0>(v233, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v219) = 0;
  __p = 0;
  v216 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&__p, (unsigned __int8 *)v233);
  if (v234 < 0)
    operator delete(v233[0]);
  std::string::basic_string[abi:ne180100]<0>(v233, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  __p = 0;
  v219 = 0;
  v217 = (uint64_t **)(a1 + 8);
  v20 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&__p, (unsigned __int8 *)v233);
  v215 = (uint64_t *)(a1 + 56);
  if (v234 < 0)
    operator delete(v233[0]);
  std::string::basic_string[abi:ne180100]<0>(v233, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  __p = 0;
  v219 = 0;
  v21 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(v217, (uint64_t)&__p, (unsigned __int8 *)v233);
  if (v234 < 0)
    operator delete(v233[0]);
  v232 = *a2;
  v231 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v232) + 8);
  v230 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v231) + 8);
  v22 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v230);
  if (*(_DWORD *)(v22 + 8) != v232)
    cv3d::cv::gess::mesh::TriMesh::SplitEdge();
  v229 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v232);
  v228 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v229) + 8);
  v227 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v228) + 8);
  v23 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v227);
  if (*(_DWORD *)(v23 + 8) != v229)
    cv3d::cv::gess::mesh::TriMesh::SplitEdge();
  v226 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v232) + 16);
  v225 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v229) + 16);
  v224 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v232) + 12);
  v223 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v229) + 12);
  v222 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v230) + 12);
  v221 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v227) + 12);
  if (v222 == v221)
    cv3d::cv::gess::mesh::TriMesh::SplitEdge();
  v24 = *a3;
  v220 = *a3;
  if (a7)
  {
    v211 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v223);
    if (a6)
    {
      v206 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v224);
      v202 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v222);
      v25 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v221);
      __asm { FMOV            V1.4S, #0.375 }
      v30.i64[0] = 0x3E0000003E000000;
      v30.i64[1] = 0x3E0000003E000000;
      v31 = vaddq_f32(vmulq_f32(vaddq_f32(v211, v206), _Q1), vmulq_f32(vaddq_f32(v202, *v25), v30));
    }
    else
    {
      v32 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v224);
      v33.i64[0] = 0x3F0000003F000000;
      v33.i64[1] = 0x3F0000003F000000;
      v31 = vmulq_f32(vaddq_f32(v211, *v32), v33);
    }
    v212 = v31;
    LODWORD(v233[0]) = *(_DWORD *)(a1 + 176);
    v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v24 = v220;
    v35 = *(_QWORD *)(v34 + 40);
    if (v220 >= (unint64_t)((*(_QWORD *)(v34 + 48) - v35) >> 4))
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    *(float32x4_t *)(v35 + 16 * v220) = v212;
  }
  v213 = a4;
  if (v20 != -1)
  {
    LODWORD(v233[0]) = v20;
    v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v39 = v223;
    v40 = *(_QWORD *)(v36 + 40);
    if (v223 >= (unint64_t)((*(_QWORD *)(v36 + 48) - v40) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v36, v37, v38);
    LODWORD(v233[0]) = v20;
    v41 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v44 = *(_QWORD *)(v41 + 40);
    if (v224 >= (unint64_t)((*(_QWORD *)(v41 + 48) - v44) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v41, v42, v43);
    v203 = *(float32x4_t *)(v40 + 16 * v39);
    v207 = *(float32x4_t *)(v44 + 16 * v224);
    LODWORD(v233[0]) = v20;
    v45 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v24 = v220;
    v46 = *(_QWORD *)(v45 + 40);
    if (v220 >= (unint64_t)((*(_QWORD *)(v45 + 48) - v46) >> 4))
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    v47.i64[0] = 0x3F0000003F000000;
    v47.i64[1] = 0x3F0000003F000000;
    *(float32x4_t *)(v46 + 16 * v220) = vmulq_f32(vaddq_f32(v207, v203), v47);
  }
  v210 = a5;
  if (v21 == -1)
  {
    v58 = v24;
    v60 = (uint64_t *)(a1 + 56);
    v61 = v216;
    v62 = v214;
  }
  else
  {
    LODWORD(v233[0]) = v21;
    v48 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v51 = v223;
    v52 = *(_QWORD *)(v48 + 40);
    if (v223 >= (unint64_t)((*(_QWORD *)(v48 + 48) - v52) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v48, v49, v50);
    LODWORD(v233[0]) = v21;
    v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v56 = *(_QWORD *)(v53 + 40);
    if (v224 >= (unint64_t)((*(_QWORD *)(v53 + 48) - v56) >> 4))
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v53, v54, v55);
    v204 = *(float32x4_t *)(v52 + 16 * v51);
    v208 = *(float32x4_t *)(v56 + 16 * v224);
    LODWORD(v233[0]) = v21;
    v57 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)v217, (unsigned int *)v233);
    v58 = v220;
    v59 = *(_QWORD *)(v57 + 40);
    v60 = (uint64_t *)(a1 + 56);
    v61 = v216;
    v62 = v214;
    if (v220 >= (unint64_t)((*(_QWORD *)(v57 + 48) - v59) >> 4))
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    v63.i64[0] = 0x3F0000003F000000;
    v63.i64[1] = 0x3F0000003F000000;
    *(float32x4_t *)(v59 + 16 * v220) = vmulq_f32(vaddq_f32(v208, v204), v63);
  }
  cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes(a1, v224, v58, 0);
  cv3d::cv::gess::mesh::PolyMesh::BlendVertexAttributes((_QWORD *)a1, &v220, &v223);
  v65 = 0;
  v66 = 0;
  v199 = 0;
  v198 = 0;
  v209 = 0;
  v200 = 0;
  _ZF = v62 == -1 || v61 == -1;
  v68 = !_ZF;
  v201 = v68;
  v205 = 0;
  if (!_ZF)
  {
    LODWORD(v233[0]) = v61;
    v69 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v60, (unsigned int *)v233, v64);
    v72 = v226;
    v73 = *(_QWORD *)(v69 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v69 + 48) - v73) >> 2) <= v226)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v69, v70, v71);
    LODWORD(v233[0]) = v61;
    v74 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v60, (unsigned int *)v233, v71);
    v77 = v225;
    v78 = *(_QWORD *)(v74 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v74 + 48) - v78) >> 2) <= v225)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v74, v75, v76);
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v233, 3uLL);
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v226, v233);
    cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v225, &__p);
    v80 = 0;
    v81 = v73 + 12 * v72;
    v82 = v78 + 12 * v77;
    while (*((_DWORD *)v233[0] + v80) != v224)
    {
      if (++v80 == 3)
      {
        LOBYTE(v80) = 0;
        break;
      }
    }
    v83 = 0;
    while (*((_DWORD *)v233[0] + v83) != v223)
    {
      if (++v83 == 3)
      {
        LOBYTE(v83) = 0;
        break;
      }
    }
    v84 = 0;
    while (*((_DWORD *)__p + v84) != v224)
    {
      if (++v84 == 3)
      {
        LOBYTE(v84) = 0;
        break;
      }
    }
    v85 = 0;
    while (*((_DWORD *)__p + v85) != v223)
    {
      if (++v85 == 3)
      {
        LOBYTE(v85) = 0;
        break;
      }
    }
    v86 = v80;
    v87 = (v86 + 1 - 3 * ((1431655766 * (unint64_t)(v86 + 1)) >> 32));
    if ((_DWORD)v87 == v83)
    {
      v88 = v84;
      if (v85 == (unsigned __int16)(v84
                                                    + 2
                                                    - 3 * ((21846 * (v84 + 2)) >> 16)))
      {
        if ((_DWORD)v87 == 2)
          v89 = 0;
        else
          v89 = v87 + 1;
        v209 = *(_DWORD *)(v81 + 4 * v89);
        v90 = (unsigned __int16)(v84
                               + 2
                               - 3 * ((21846 * (v84 + 2)) >> 16));
        v205 = *(_DWORD *)(v82
                         + 4
                         * (unsigned __int16)(v84
                                            + 1
                                            - 3 * ((21846 * (v84 + 1)) >> 16)));
        v198 = *(_DWORD *)(v82 + 4 * v84);
        LODWORD(v199) = *(_DWORD *)(v81 + 4 * v80);
        HIDWORD(v199) = *(_DWORD *)(v82 + 4 * v90);
        v200 = *(_DWORD *)(v81 + 4 * v87);
        if ((_DWORD)v199 == v198
          && *(_DWORD *)(v81 + 4 * v87) == *(_DWORD *)(v82
                                                                     + 4
                                                                     * (unsigned __int16)(v84
                                                                                        + 2
                                                                                        - 3
                                                                                        * ((21846
                                                                                          * (v84
                                                                                           + 2)) >> 16))))
        {
          v235[0] = v62;
          v91 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v79);
          (*(void (**)(uint64_t))(*(_QWORD *)v91 + 48))(v91);
          v235[0] = v62;
          v93 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v92);
          v95 = *(unsigned int *)(v81 + 4 * v86);
          v96 = *(_QWORD *)(v93 + 40);
          if (v95 >= (*(_QWORD *)(v93 + 48) - v96) >> 3
            || (v235[0] = v62,
                v97 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v94), v99 = *(unsigned int *)(v81 + 4 * v87), v100 = *(_QWORD *)(v97 + 40), v99 >= (*(_QWORD *)(v97 + 48) - v100) >> 3))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v101 = *(float32x2_t *)(v96 + 8 * v95);
          v102 = *(float32x2_t *)(v100 + 8 * v99);
          v235[0] = v62;
          v103 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v98);
          v235[0] = v62;
          v105 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v104);
          v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 16))(v105) - 1;
          v108 = *(_QWORD *)(v103 + 40);
          if (v107 >= (*(_QWORD *)(v103 + 48) - v108) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v108 + 8 * v107) = vmul_f32(vadd_f32(v101, v102), (float32x2_t)0x3F0000003F000000);
          v235[0] = v62;
          v109 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v106);
          v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 16))(v109);
          v235[0] = v62;
          v112 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v111);
          v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 16))(v112);
        }
        else
        {
          v235[0] = v62;
          v114 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v79);
          (*(void (**)(uint64_t))(*(_QWORD *)v114 + 48))(v114);
          v235[0] = v62;
          v116 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v115);
          v118 = *(unsigned int *)(v81 + 4 * v86);
          v119 = *(_QWORD *)(v116 + 40);
          if (v118 >= (*(_QWORD *)(v116 + 48) - v119) >> 3
            || (v235[0] = v214,
                v120 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v117), v122 = *(unsigned int *)(v81 + 4 * v87), v123 = *(_QWORD *)(v120 + 40), v122 >= (*(_QWORD *)(v120 + 48) - v123) >> 3))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v124 = *(float32x2_t *)(v119 + 8 * v118);
          v125 = *(float32x2_t *)(v123 + 8 * v122);
          v235[0] = v214;
          v126 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v121);
          v235[0] = v214;
          v128 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v127);
          v130 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v128 + 16))(v128) - 1;
          v131 = *(_QWORD *)(v126 + 40);
          if (v130 >= (*(_QWORD *)(v126 + 48) - v131) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v131 + 8 * v130) = vmul_f32(vadd_f32(v124, v125), (float32x2_t)0x3F0000003F000000);
          v235[0] = v214;
          v132 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v129);
          v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 16))(v132);
          v235[0] = v214;
          v134 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v133);
          (*(void (**)(uint64_t))(*(_QWORD *)v134 + 48))(v134);
          v235[0] = v214;
          v136 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v135);
          v138 = *(unsigned int *)(v82 + 4 * v88);
          v139 = *(_QWORD *)(v136 + 40);
          if (v138 >= (*(_QWORD *)(v136 + 48) - v139) >> 3
            || (v235[0] = v214,
                v140 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v137), v142 = *(unsigned int *)(v82 + 4 * v90), v143 = *(_QWORD *)(v140 + 40), v142 >= (*(_QWORD *)(v140 + 48) - v143) >> 3))
          {
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          }
          v144 = *(float32x2_t *)(v139 + 8 * v138);
          v145 = *(float32x2_t *)(v143 + 8 * v142);
          v235[0] = v214;
          v146 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v141);
          v235[0] = v214;
          v148 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v147);
          v150 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v148 + 16))(v148) - 1;
          v151 = *(_QWORD *)(v146 + 40);
          if (v150 >= (*(_QWORD *)(v146 + 48) - v151) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x2_t *)(v151 + 8 * v150) = vmul_f32(vadd_f32(v144, v145), (float32x2_t)0x3F0000003F000000);
          v235[0] = v214;
          v152 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v197, v235, v149);
          v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 16))(v152);
        }
        v153 = v113;
        if (__p)
        {
          v219 = __p;
          operator delete(__p);
        }
        v66 = v110 - 1;
        v65 = v153 - 1;
        if (v233[0])
        {
          v233[1] = v233[0];
          operator delete(v233[0]);
        }
        goto LABEL_79;
      }
      v195 = "(v0_order_in_f1 + 2) % 3 == v1_order_in_f1";
      v196 = 385;
    }
    else
    {
      v195 = "(v0_order_in_f0 + 1) % 3 == v1_order_in_f0";
      v196 = 384;
    }
    __assert_rtn("SplitEdge", "TriMesh.cpp", v196, v195);
  }
LABEL_79:
  v154 = v210;
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v231, v210);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v210, &v232);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v229, v210 + 2);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v210 + 2, &v227);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v230, v210 + 4);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v210 + 4, v210 + 1);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v210 + 1, &v230);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v228, v210 + 3);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v210 + 3, v210 + 5);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, v210 + 5, &v228);
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, v210, v210 + 1);
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, v210 + 2, v210 + 3);
  cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, v210 + 4, v210 + 5);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v232, &v220);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v210, &v222);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v210 + 1, &v220);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v210 + 4, &v224);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v210 + 5, &v220);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v210 + 3, &v221);
  cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), v210 + 2, &v220);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &v226, v210);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, &v225, v210 + 2);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, v213, &v230);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, v213, v210 + 4);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, v213, v210 + 1);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, v213 + 1, &v228);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, v213 + 1, v210 + 3);
  cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, v213 + 1, v210 + 5);
  if (v201)
  {
    LODWORD(v233[0]) = v216;
    v156 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v215, (unsigned int *)v233, v155);
    v159 = *(_QWORD *)(v156 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v156 + 48) - v159) >> 2) <= v226)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v156, v157, v158);
    v160 = (_DWORD *)(v159 + 12 * v226);
    *v160 = v66;
    v160[1] = v200;
    v160[2] = v209;
    LODWORD(v233[0]) = v216;
    v161 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v215, (unsigned int *)v233, v158);
    v164 = *(_QWORD *)(v161 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v161 + 48) - v164) >> 2) <= v225)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v161, v162, v163);
    v165 = (_DWORD *)(v164 + 12 * v225);
    *v165 = v205;
    v165[1] = HIDWORD(v199);
    v165[2] = v65;
    LODWORD(v233[0]) = v216;
    v166 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v215, (unsigned int *)v233, v163);
    v169 = *v213;
    v170 = *(_QWORD *)(v166 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v166 + 48) - v170) >> 2) <= v169)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v166, v167, v168);
    v171 = (_DWORD *)(v170 + 12 * v169);
    *v171 = v209;
    v171[1] = v199;
    v171[2] = v66;
    LODWORD(v233[0]) = v216;
    v172 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v215, (unsigned int *)v233, v168);
    v175 = v213[1];
    v176 = *(_QWORD *)(v172 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v172 + 48) - v176) >> 2) <= v175)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v172, v173, v174);
    v177 = (_DWORD *)(v176 + 12 * v175);
    *v177 = v198;
    v177[1] = v205;
    v177[2] = v65;
    v154 = v210;
  }
  std::string::basic_string[abi:ne180100]<0>(v233, "th:isnew_subdiv");
  v178 = (uint64_t **)(a1 + 32);
  LOBYTE(__p) = 0;
  v179 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>(v178, (uint64_t)&__p, (unsigned __int8 *)v233);
  if (v234 < 0)
    operator delete(v233[0]);
  if (v179 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v233, "tv:isnew_subdiv");
    LOBYTE(__p) = 0;
    v181 = cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>(v217, (uint64_t)&__p, (unsigned __int8 *)v233);
    if (v234 < 0)
      operator delete(v233[0]);
    if (v181 != -1)
    {
      LODWORD(v233[0]) = v179;
      v182 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v178, (unsigned int *)v233, v180);
      v185 = *v154;
      if (*(_QWORD *)(v182 + 48) <= v185)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, v183, v184);
      v186 = *(_QWORD *)(v182 + 40);
      *(_QWORD *)(v186 + ((v185 >> 3) & 0x1FFFFFF8)) |= 1 << v185;
      v187 = v210[1];
      if (*(_QWORD *)(v182 + 48) <= v187)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, v183, v184);
      *(_QWORD *)(v186 + ((v187 >> 3) & 0x1FFFFFF8)) |= 1 << v187;
      v188 = v210[2];
      if (*(_QWORD *)(v182 + 48) <= v188)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, v183, v184);
      *(_QWORD *)(v186 + ((v188 >> 3) & 0x1FFFFFF8)) |= 1 << v188;
      v189 = v210[3];
      if (*(_QWORD *)(v182 + 48) <= v189)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, v183, v184);
      *(_QWORD *)(v186 + ((v189 >> 3) & 0x1FFFFFF8)) |= 1 << v189;
      v190 = v210[4];
      if (*(_QWORD *)(v182 + 48) <= v190)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, v183, v184);
      *(_QWORD *)(v186 + ((v190 >> 3) & 0x1FFFFFF8)) &= ~(1 << v190);
      v191 = v210[5];
      if (*(_QWORD *)(v182 + 48) <= v191)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v182, v183, v184);
      *(_QWORD *)(v186 + ((v191 >> 3) & 0x1FFFFFF8)) &= ~(1 << v191);
      LODWORD(v233[0]) = v181;
      v192 = cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t *)v217, (unsigned int *)v233, v184);
      if (*(_QWORD *)(v192 + 48) <= (unint64_t)v220)
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v192, v193, v194);
      *(_QWORD *)(*(_QWORD *)(v192 + 40) + (((unint64_t)v220 >> 3) & 0x1FFFFFF8)) |= 1 << v220;
    }
  }
  return 1;
}

void sub_23C50D474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::SplitEdge(uint64_t a1, unsigned int *a2, int a3)
{
  unsigned int v4;

  v4 = -1;
  return cv3d::cv::gess::mesh::TriMesh::SplitEdge(a1, a2, &v4, a3);
}

unint64_t cv3d::cv::gess::mesh::PolyMesh::AppendVertex(uint64_t a1, _OWORD *a2, _DWORD *a3)
{
  unint64_t appended;
  uint64_t v6;

  appended = cv3d::cv::gess::mesh::Topology::AppendVertex((void **)(a1 + 104), a3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v6);
  *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), appended) = *a2;
  return appended;
}

unint64_t cv3d::cv::gess::mesh::PolyMesh::AppendFace(uint64_t a1, _DWORD *a2)
{
  unint64_t appended;
  uint64_t v4;

  appended = cv3d::cv::gess::mesh::Topology::AppendFace((_QWORD *)(a1 + 104), a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
  return appended;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;

  v3 = -1;
  return cv3d::cv::gess::mesh::TriMesh::SplitBoundaryEdge(a1, a2, &v3);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::CollapseEdge(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  unsigned int *v6;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  unsigned int *v14;
  _BOOL4 is_boundary;
  _BOOL4 v16;
  _BOOL4 v17;
  unsigned int *v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int Vertex;
  int v27;
  int v28;
  int i;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  unsigned int *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  _DWORD *v46;
  unsigned int *v47;
  _DWORD *v48;
  unsigned int *v49;
  _DWORD *v50;
  unsigned int *v51;
  _DWORD *v52;
  const char *v53;
  int v54;
  const char *v55;
  const char *v56;
  float32x4_t v57;
  float32x4_t v58;
  int v59;
  _BYTE v60[16];
  void *__p;
  _BYTE *v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD v65[3];
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;

  v6 = a2;
  v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v9 & *v8) != 0
    || (v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v6),
        v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v10),
        (v12 & *v11) != 0))
  {
    if (a3)
      return cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge(a1, v6);
    return 0;
  }
  v83 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v6) + 12);
  v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v6);
  v82 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v14) + 12);
  if (v83 == v82)
    return 0;
  is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v83);
  v16 = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v82);
  v17 = v16;
  if (!is_boundary && !v16 || (result = 0, a3) && (!is_boundary || !v17))
  {
    if (!is_boundary)
      v6 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v6);
    v81 = *v6;
    v80 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v81) + 8);
    v79 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v80) + 8);
    v78 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v81);
    v77 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v78) + 8);
    v76 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77) + 8);
    v75 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v79);
    v74 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77);
    v73 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v80);
    v72 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v76);
    v71 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v81) + 16);
    v70 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v78) + 16);
    v69 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v81) + 12);
    v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v81);
    v68 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v18) + 12);
    v67 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v79) + 12);
    v66 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v76) + 12);
    v19 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v69);
    v20 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v68);
    if ((int)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v67) <= a4)
      return 0;
    v21 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v66);
    result = 0;
    if (v21 > a4 && v20 >= 3)
    {
      v22 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v75);
      if ((v23 & *v22) == 0
        || (v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v74),
            (v25 & *v24) == 0))
      {
        if (v19 == 2)
          return 0;
      }
      if (v19 + v20 - 4 <= a4 || v67 == v66 || v67 == v69)
        return 0;
      result = 0;
      if (v69 != v68 && v66 != v68 && v66 != v69 && v67 != v68)
      {
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v65, (_QWORD *)(a1 + 104), &v69);
        Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v65);
        v64 = Vertex;
        if (Vertex != -1)
        {
          v27 = 0;
          do
          {
            if (Vertex == v68)
            {
              if (v27 > 0)
                return 0;
              v27 = 1;
            }
            cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(&__p, (_QWORD *)(a1 + 104), &v64);
            while (1)
            {
              v28 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&__p);
              if (v28 == -1)
                break;
              if (v28 == v68 && v64 != v67 && v64 != v66)
                return 0;
            }
            Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v65);
            v64 = Vertex;
          }
          while (Vertex != -1);
        }
        __p = 0;
        v62 = 0;
        v63 = 0;
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v60, a1 + 104, &v68);
        for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v60);
              ;
              i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v60))
        {
          v59 = i;
          if (i == -1)
            break;
          if (i != v80 && i != v78)
            std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::push_back[abi:ne180100](&__p, &v59);
        }
        v58 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v69);
        v57 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v68);
        v84 = *(_DWORD *)(a1 + 176);
        v32 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v84);
        v33 = *(_QWORD *)(v32 + 40);
        if (v69 >= (unint64_t)((*(_QWORD *)(v32 + 48) - v33) >> 4))
        {
          v53 = "index < data_.size()";
          v54 = 182;
          v55 = "Attribute.h";
          v56 = "operator[]";
        }
        else
        {
          v34.i64[0] = 0x3F0000003F000000;
          v34.i64[1] = 0x3F0000003F000000;
          *(float32x4_t *)(v33 + 16 * v69) = vmulq_f32(vaddq_f32(v58, v57), v34);
          cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v75, &v73);
          cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v74, &v72);
          v35 = (unsigned int *)__p;
          if (v62 != __p)
          {
            v36 = 0;
            v37 = 1;
            do
            {
              cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v35[v36], &v69);
              v36 = v37;
              v35 = (unsigned int *)__p;
              ++v37;
            }
            while (v36 < (v62 - (_BYTE *)__p) >> 2);
          }
          cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v67, &v73);
          cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v66, &v74);
          cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v69, &v75);
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v71) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v70) = -1;
          v38 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v81);
          *(_QWORD *)v38 = -1;
          *(_QWORD *)(v38 + 8) = -1;
          *(_DWORD *)(v38 + 16) = -1;
          v39 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v80);
          *(_QWORD *)v39 = -1;
          *(_QWORD *)(v39 + 8) = -1;
          *(_DWORD *)(v39 + 16) = -1;
          v40 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v79);
          *(_QWORD *)v40 = -1;
          *(_QWORD *)(v40 + 8) = -1;
          *(_DWORD *)(v40 + 16) = -1;
          v41 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v78);
          *(_QWORD *)v41 = -1;
          *(_QWORD *)(v41 + 8) = -1;
          *(_DWORD *)(v41 + 16) = -1;
          v42 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77);
          *(_QWORD *)v42 = -1;
          *(_QWORD *)(v42 + 8) = -1;
          *(_DWORD *)(v42 + 16) = -1;
          v43 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v76);
          *(_QWORD *)v43 = -1;
          *(_QWORD *)(v43 + 8) = -1;
          *(_DWORD *)(v43 + 16) = -1;
          *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)(a1 + 104), &v68, v44) = -1;
          v45 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v75);
          v46 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v45);
          if (*v46 == v75)
          {
            v47 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v74);
            v48 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v47);
            if (*v48 == v74)
            {
              v49 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
              v50 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v49);
              if (*v50 == v73)
              {
                v51 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72);
                v52 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v51);
                if (*v52 == v72)
                {
                  v84 = v69;
                  if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex((_QWORD *)(a1 + 104), &v84) == -1)
                  {
                    v53 = "!IsDangling(vc)";
                    v54 = 758;
                  }
                  else if ((unint64_t)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v67) < 3)
                  {
                    v53 = "Valence(va) >= 3";
                    v54 = 759;
                  }
                  else if ((unint64_t)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v66) < 3)
                  {
                    v53 = "Valence(vb) >= 3";
                    v54 = 760;
                  }
                  else
                  {
                    if ((unint64_t)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v69) >= 3)
                    {
                      if (__p)
                      {
                        v62 = __p;
                        operator delete(__p);
                      }
                      return 1;
                    }
                    v53 = "Valence(vc) >= 3";
                    v54 = 761;
                  }
                }
                else
                {
                  v53 = "HEdgeTwin(HEdgeTwin(h15)) == h15";
                  v54 = 757;
                }
              }
              else
              {
                v53 = "HEdgeTwin(HEdgeTwin(h12)) == h12";
                v54 = 756;
              }
            }
            else
            {
              v53 = "HEdgeTwin(HEdgeTwin(h9)) == h9";
              v54 = 755;
            }
          }
          else
          {
            v53 = "HEdgeTwin(HEdgeTwin(h6)) == h6";
            v54 = 754;
          }
          v55 = "TriMesh.cpp";
          v56 = "CollapseEdge";
        }
        __assert_rtn(v56, v55, v54, v53);
      }
    }
  }
  return result;
}

void sub_23C50DDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int Vertex;
  int v24;
  int v25;
  int i;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  unsigned int *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  _DWORD *v51;
  unsigned int *v52;
  _DWORD *v53;
  const char *v54;
  int v55;
  const char *v56;
  const char *v57;
  float32x4_t v58;
  float32x4_t v59;
  _BYTE v60[16];
  void *__p;
  char *v62;
  char *v63;
  unsigned int v64;
  _QWORD v65[3];
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;

  v2 = a2;
  v4 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v5 & *v4) == 0)
  {
    v6 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v2);
    v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v6);
    if ((v8 & *v7) == 0)
      cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge();
  }
  v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v2);
  if ((v10 & *v9) != 0)
    v2 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v2);
  v77 = *v2;
  v11 = (_QWORD *)(a1 + 104);
  v76 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77);
  v75 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v76) + 4);
  v74 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v76) + 8);
  v73 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77) + 8);
  v72 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77) + 4);
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73) + 8) != v72)
    cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge();
  v71 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72);
  v70 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
  v69 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77) + 16);
  v68 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77) + 12);
  v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v77);
  v67 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v12) + 12);
  v66 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v72) + 12);
  v13 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v73);
  if (v66 != *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v13) + 12))
    cv3d::cv::gess::mesh::TriMesh::CollapseBoundaryEdge();
  if (v75 != v70 || v74 != v71)
  {
    cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v65, (_QWORD *)(a1 + 104), &v68);
    Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v65);
    v64 = Vertex;
    if (Vertex != -1)
    {
      v24 = 0;
      do
      {
        if (Vertex == v67)
        {
          if (v24 > 0)
            return 0;
          v24 = 1;
        }
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(&__p, (_QWORD *)(a1 + 104), &v64);
        while (1)
        {
          v25 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&__p);
          if (v25 == -1)
            break;
          if (v25 == v67 && v64 != v66)
            return 0;
        }
        Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v65);
        v64 = Vertex;
      }
      while (Vertex != -1);
    }
    __p = 0;
    v62 = 0;
    v63 = 0;
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v60, a1 + 104, &v67);
    for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v60);
          i != -1;
          i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v60))
    {
      if (i != v73 && i != v71)
      {
        v28 = v62;
        if (v62 >= v63)
        {
          v30 = (v62 - (_BYTE *)__p) >> 2;
          if ((unint64_t)(v30 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v31 = (v63 - (_BYTE *)__p) >> 1;
          if (v31 <= v30 + 1)
            v31 = v30 + 1;
          if ((unint64_t)(v63 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32)
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v63, v32);
          else
            v33 = 0;
          v34 = &v33[4 * v30];
          *(_DWORD *)v34 = i;
          v29 = v34 + 4;
          v36 = (char *)__p;
          v35 = v62;
          if (v62 != __p)
          {
            do
            {
              v37 = *((_DWORD *)v35 - 1);
              v35 -= 4;
              *((_DWORD *)v34 - 1) = v37;
              v34 -= 4;
            }
            while (v35 != v36);
            v35 = (char *)__p;
          }
          __p = v34;
          v62 = v29;
          v63 = &v33[4 * v32];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_DWORD *)v62 = i;
          v29 = v28 + 4;
        }
        v62 = v29;
      }
    }
    v59 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v68);
    v58 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v67);
    v78 = *(_DWORD *)(a1 + 176);
    v39 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v78);
    v40 = *(_QWORD *)(v39 + 40);
    if (v68 >= (unint64_t)((*(_QWORD *)(v39 + 48) - v40) >> 4))
    {
      v54 = "index < data_.size()";
      v55 = 182;
      v56 = "Attribute.h";
      v57 = "operator[]";
    }
    else
    {
      v41.i64[0] = 0x3F0000003F000000;
      v41.i64[1] = 0x3F0000003F000000;
      *(float32x4_t *)(v40 + 16 * v68) = vmulq_f32(vaddq_f32(v59, v58), v41);
      cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v75, &v74);
      cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v71, &v70);
      v42 = (unsigned int *)__p;
      if (v62 != __p)
      {
        v43 = 0;
        v44 = 1;
        do
        {
          cv3d::cv::gess::mesh::Topology::SetStart(v11, &v42[v43], &v68);
          v43 = v44;
          v42 = (unsigned int *)__p;
          ++v44;
        }
        while (v43 < (v62 - (_BYTE *)__p) >> 2);
      }
      cv3d::cv::gess::mesh::Topology::SetHEdge(v11, &v66, &v70);
      cv3d::cv::gess::mesh::Topology::SetHEdge(v11, &v68, &v71);
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f((uint64_t)v11, &v69) = -1;
      v45 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v77);
      *(_QWORD *)v45 = -1;
      *(_QWORD *)(v45 + 8) = -1;
      *(_DWORD *)(v45 + 16) = -1;
      v46 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v73);
      *(_QWORD *)v46 = -1;
      *(_QWORD *)(v46 + 8) = -1;
      *(_DWORD *)(v46 + 16) = -1;
      v47 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v72);
      *(_QWORD *)v47 = -1;
      *(_QWORD *)(v47 + 8) = -1;
      *(_DWORD *)(v47 + 16) = -1;
      v48 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v76);
      *(_QWORD *)v48 = -1;
      *(_QWORD *)(v48 + 8) = -1;
      *(_DWORD *)(v48 + 16) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v11, &v67, v49) = -1;
      v50 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v71);
      v51 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, v50);
      if (*v51 == v71)
      {
        v52 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v70);
        v53 = (_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, v52);
        if (*v53 == v70)
        {
          v78 = v68;
          if (*(_DWORD *)cv3d::cv::gess::mesh::Topology::vertex(v11, &v78) != -1)
          {
            if (__p)
            {
              v62 = (char *)__p;
              operator delete(__p);
            }
            return 1;
          }
          v54 = "!IsDangling(vc)";
          v55 = 870;
        }
        else
        {
          v54 = "HEdgeTwin(HEdgeTwin(h6)) == h6";
          v55 = 869;
        }
      }
      else
      {
        v54 = "HEdgeTwin(HEdgeTwin(h3)) == h3";
        v55 = 868;
      }
      v56 = "TriMesh.cpp";
      v57 = "CollapseBoundaryEdge";
    }
    __assert_rtn(v57, v56, v55, v54);
  }
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v69) = -1;
  v14 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v77);
  *(_QWORD *)v14 = -1;
  *(_QWORD *)(v14 + 8) = -1;
  *(_DWORD *)(v14 + 16) = -1;
  v15 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v73);
  *(_QWORD *)v15 = -1;
  *(_QWORD *)(v15 + 8) = -1;
  *(_DWORD *)(v15 + 16) = -1;
  v16 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v72);
  *(_QWORD *)v16 = -1;
  *(_QWORD *)(v16 + 8) = -1;
  *(_DWORD *)(v16 + 16) = -1;
  v17 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v75);
  *(_QWORD *)v17 = -1;
  *(_QWORD *)(v17 + 8) = -1;
  *(_DWORD *)(v17 + 16) = -1;
  v18 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v76);
  *(_QWORD *)v18 = -1;
  *(_QWORD *)(v18 + 8) = -1;
  *(_DWORD *)(v18 + 16) = -1;
  v19 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v11, &v74);
  *(_QWORD *)v19 = -1;
  *(_QWORD *)(v19 + 8) = -1;
  *(_DWORD *)(v19 + 16) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v11, &v66, v20) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v11, &v68, v21) = -1;
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v(v11, &v67, v22) = -1;
  return 1;
}

void sub_23C50E4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::PolyMesh::is_boundary(uint64_t a1, uint64_t a2)
{
  unsigned int HEdge;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  _BYTE v8[16];

  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v8, a1 + 104, a2);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v8);
  if (HEdge == -1)
    return 0;
  do
  {
    v4 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
    v6 = (v5 & *v4) != 0;
    if ((v5 & *v4) != 0)
      break;
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v8);
  }
  while (HEdge != -1);
  return v6;
}

uint64_t cv3d::cv::gess::mesh::PolyMesh::Valence(uint64_t a1, int a2)
{
  uint64_t v2;
  _BYTE v4[20];
  int v5;

  v5 = a2;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v4, a1 + 104, &v5);
  v2 = -1;
  do
    ++v2;
  while (cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v4) != -1);
  return v2;
}

void std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::push_back[abi:ne180100](void **a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 1;
    if (v10 >> 1 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v8 = v14 + 4;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v14 - 1) = v18;
        v14 -= 4;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::CanCollapse(uint64_t a1, unsigned int *a2)
{
  unsigned int *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int *v11;
  _BOOL4 is_boundary;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int Vertex;
  int v29;
  int v30;
  _QWORD v32[3];
  unsigned int v33;
  _QWORD v34[3];
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;

  v2 = a2;
  v4 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v5 & *v4) != 0)
    return 1;
  v6 = (_QWORD *)(a1 + 104);
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v2);
  v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v7);
  if ((v9 & *v8) != 0)
    return 1;
  v43 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v2) + 12);
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v2);
  v42 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v11) + 12);
  is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v43);
  v13 = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v42);
  if (is_boundary && v13)
    return 0;
  if (!is_boundary)
    v2 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v2);
  v41 = *v2;
  v40 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v41) + 8);
  v39 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v40) + 8);
  v38 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v41);
  v37 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v38) + 8);
  v36 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v37) + 8);
  v14 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v39);
  v15 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v37);
  v16 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v41) + 12);
  v35 = v16;
  v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v41);
  v18 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v17) + 12);
  v19 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v39) + 12);
  v20 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v36) + 12);
  v21 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v16);
  v22 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v18);
  if ((unint64_t)cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v19) < 5)
    return 0;
  v23 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v20);
  result = 0;
  if (v23 >= 5 && v22 >= 3)
  {
    v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v14);
    if ((v25 & *v24) == 0
      || (v26 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v15),
          (v27 & *v26) == 0))
    {
      if (v21 == 2)
        return 0;
    }
    result = 0;
    if (v22 + v21 >= 9 && v19 != v20)
    {
      result = 0;
      if (v19 != v16 && v19 != v18 && v20 != v16 && v20 != v18 && v16 != v18)
      {
        cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v34, (_QWORD *)(a1 + 104), (unsigned int *)&v35);
        Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v34);
        v33 = Vertex;
        if (Vertex != -1)
        {
          v29 = 0;
          do
          {
            if (Vertex == v18)
            {
              if (v29 > 0)
                return 0;
              v29 = 1;
            }
            cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v32, v6, &v33);
            while (1)
            {
              v30 = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v32);
              if (v30 == -1)
                break;
              if (v30 == v18 && v33 != v19 && v33 != v20)
                return 0;
            }
            Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v34);
            v33 = Vertex;
          }
          while (Vertex != -1);
        }
        return 1;
      }
    }
  }
  return result;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::DeleteFace(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  __int16 v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t i;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t j;
  unsigned int *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL4 is_boundary;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v57;
  int v58;
  void *exception;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  void *__p;
  unsigned int *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::vector(&__p, 3uLL);
  cv3d::cv::gess::mesh::TriMesh::GetFaceHEdges(a1, a2, &__p);
  v4 = (unsigned int *)__p;
  v5 = v70;
  if (__p == v70)
  {
LABEL_7:
    v11 = 0;
    v72 = -1;
    v71 = -1;
    v12 = &v68;
    do
    {
      *(_DWORD *)((char *)&v71 + v11) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + v11))+ 12);
      *(_BYTE *)v12 = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v71 + v11);
      v12 = (unsigned int *)((char *)v12 + 1);
      v11 += 4;
    }
    while (v11 != 12);
    for (i = 0; i != 12; i += 4)
    {
      v14 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *(unsigned int *)((char *)__p + i));
      *v14 |= v15;
      v16 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + i));
      *(_DWORD *)(v16 + 16) = -1;
    }
    v17 = 0;
    *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2) = -1;
    v18 = (unsigned int *)&v71;
    do
    {
      if (*((_BYTE *)&v68 + v17))
        cv3d::cv::gess::mesh::TriMesh::SplitNonManifoldVertex(a1, v18);
      ++v17;
      ++v18;
    }
    while (v17 != 3);
    goto LABEL_38;
  }
  v6 = 0;
  v7 = a1 + 104;
  do
  {
    v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v4);
    v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v8);
    if ((*v9 & v10) != 0)
      ++v6;
    ++v4;
  }
  while (v4 != v5);
  switch(v6)
  {
    case 0:
      goto LABEL_7;
    case 1:
      v34 = 0;
      LODWORD(v71) = -1;
      v68 = -1;
      while (1)
      {
        v35 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + v34));
        v36 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v35);
        if ((*v36 & v37) != 0)
          break;
        v34 += 4;
        if (v34 == 12)
        {
          v38 = v68;
          goto LABEL_35;
        }
      }
      v38 = *(_DWORD *)((char *)__p + v34);
      v68 = v38;
LABEL_35:
      if (v38 == -1)
        __assert_rtn("DeleteFace", "TriMesh.cpp", 973, "h1.Valid()");
      LODWORD(v71) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68) + 4);
      v67 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68) + 8);
      v48 = v67;
      v66 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68);
      v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v66) + 4);
      v64 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v66) + 8);
      v63 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v71) + 12);
      v62 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v64) + 12);
      v61 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v66) + 12);
      is_boundary = cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)&v63);
      v50 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v48);
      *v50 |= v51;
      v52 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v71);
      *v52 |= v53;
      *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v67) + 16) = -1;
      *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v71) + 16) = -1;
      cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v65, &v67);
      cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, (unsigned int *)&v71, (unsigned int *)&v64);
      cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v62, (unsigned int *)&v64);
      cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v61, &v67);
      v54 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68);
      *(_QWORD *)v54 = -1;
      *(_QWORD *)(v54 + 8) = -1;
      *(_DWORD *)(v54 + 16) = -1;
      v55 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v66);
      *(_QWORD *)v55 = -1;
      *(_QWORD *)(v55 + 8) = -1;
      *(_DWORD *)(v55 + 16) = -1;
      *(_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2) = -1;
      if (is_boundary)
        cv3d::cv::gess::mesh::TriMesh::SplitNonManifoldVertex(a1, &v63);
      goto LABEL_38;
    case 2:
      v19 = 0;
      LODWORD(v71) = -1;
      v67 = -1;
      v68 = -1;
      break;
    case 3:
      for (j = 0; j != 12; j += 4)
      {
        v25 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + j));
        v26 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v25);
        if ((*v26 & v27) == 0)
          __assert_rtn("DeleteFace", "TriMesh.cpp", 1030, "is_boundary(HEdgeTwin(h[i]))");
        v28 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + j));
        v29 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v28);
        *(_QWORD *)v29 = -1;
        *(_QWORD *)(v29 + 8) = -1;
        *(_DWORD *)(v29 + 16) = -1;
        v30 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + j));
        *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)(a1 + 104), (unsigned int *)(v30 + 12), v31) = -1;
        v32 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + j));
        *(_QWORD *)v32 = -1;
        *(_QWORD *)(v32 + 8) = -1;
        *(_DWORD *)(v32 + 16) = -1;
      }
      v33 = (_DWORD *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
      goto LABEL_33;
    default:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x242620E28](exception, "TriMesh<T>::DeleteFace num_of_bound > 3");
  }
  while (1)
  {
    v20 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)((char *)__p + v19));
    v21 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v20);
    if ((*v21 & v22) == 0)
      break;
    v19 += 4;
    if (v19 == 12)
    {
      v23 = v71;
      goto LABEL_29;
    }
  }
  v23 = *(_DWORD *)((char *)__p + v19);
  LODWORD(v71) = v23;
LABEL_29:
  if (v23 == -1)
    __assert_rtn("DeleteFace", "TriMesh.cpp", 1004, "h0.Valid()");
  v68 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v71) + 8);
  v67 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68) + 8);
  v66 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v71) + 12);
  v65 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68) + 12);
  v39 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v67) + 12);
  v64 = v39;
  v63 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v68);
  v62 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v63) + 8);
  v61 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v67);
  v60 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v61) + 4);
  v40 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v61);
  if (*(_DWORD *)(v40 + 8) != v63)
  {
    v57 = "HEdgeNext(bh2) == bh1";
    v58 = 1011;
    goto LABEL_46;
  }
  v41 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v71);
  *v41 |= v42;
  *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)&v71) + 16) = -1;
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v60, (unsigned int *)&v71);
  cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, (unsigned int *)&v71, &v62);
  cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v66, (unsigned int *)&v71);
  cv3d::cv::gess::mesh::Topology::SetHEdge((_QWORD *)(a1 + 104), &v65, &v62);
  if (cv3d::cv::gess::mesh::PolyMesh::Valence(a1, v39) != 2)
  {
    v57 = "Valence(v2) == 2";
    v58 = 1021;
LABEL_46:
    __assert_rtn("DeleteFace", "TriMesh.cpp", v58, v57);
  }
  *(_DWORD *)cv3d::cv::gess::mesh::Topology::v((_QWORD *)(a1 + 104), (unsigned int *)&v64, v43) = -1;
  v44 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v61);
  *(_QWORD *)v44 = -1;
  *(_QWORD *)(v44 + 8) = -1;
  *(_DWORD *)(v44 + 16) = -1;
  v45 = cv3d::cv::gess::mesh::Topology::h(v7, &v63);
  *(_QWORD *)v45 = -1;
  *(_QWORD *)(v45 + 8) = -1;
  *(_DWORD *)(v45 + 16) = -1;
  v46 = cv3d::cv::gess::mesh::Topology::h(v7, &v67);
  *(_QWORD *)v46 = -1;
  *(_QWORD *)(v46 + 8) = -1;
  *(_DWORD *)(v46 + 16) = -1;
  v47 = cv3d::cv::gess::mesh::Topology::h(v7, &v68);
  *(_QWORD *)v47 = -1;
  *(_QWORD *)(v47 + 8) = -1;
  *(_DWORD *)(v47 + 16) = -1;
  v33 = (_DWORD *)cv3d::cv::gess::mesh::Topology::f(v7, a2);
LABEL_33:
  *v33 = -1;
LABEL_38:
  if (__p)
  {
    v70 = (unsigned int *)__p;
    operator delete(__p);
  }
  return 1;
}

void sub_23C50F1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v16;

  __cxa_free_exception(v16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::TriMesh::SplitNonManifoldVertex(uint64_t a1, unsigned int *a2)
{
  _QWORD *v3;
  unsigned int HEdge;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  std::string::size_type size;
  std::string::size_type v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unsigned int *v16;
  char *v17;
  std::string::size_type v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unsigned int *v28;
  char *v29;
  std::string::size_type v30;
  unsigned int v31;
  unsigned int appended;
  unsigned int *v33;
  const char *v35;
  int v36;
  void *exception;
  __n128 v38;
  std::string __p;
  std::string v40;
  unsigned int v41;
  _BYTE v42[20];
  unsigned int v43;
  __int128 v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD v47[2];

  v47[1] = *MEMORY[0x24BDAC8D0];
  v43 = *a2;
  v3 = (_QWORD *)(a1 + 104);
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v42, a1 + 104, &v43);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v42);
  v41 = HEdge;
  v46 = -1;
  v47[0] = -1;
  if (HEdge == -1)
  {
    v5 = 0;
    goto LABEL_56;
  }
  v5 = 0;
  do
  {
    v6 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
    if ((v7 & *v6) != 0)
      *((_DWORD *)&v47[-1] + v5++) = v41;
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v42);
    v41 = HEdge;
  }
  while (HEdge != -1);
  if (v5 != 2)
  {
LABEL_56:
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&__p, v5);
    v38 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to split nonmanifold v:", &__p, &v40);
    MEMORY[0x242620E34](exception, &v40, v38);
  }
  LODWORD(v47[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v3, (unsigned int *)&v46) + 4);
  HIDWORD(v47[0]) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v3, (unsigned int *)&v46 + 1) + 4);
  memset(&v40, 0, sizeof(v40));
  memset(&__p, 0, sizeof(__p));
  v41 = v46;
  do
  {
    v8 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v3, &v41);
    v9 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v3, (unsigned int *)(v8 + 4));
    v41 = v9;
    size = v40.__r_.__value_.__l.__size_;
    if (v40.__r_.__value_.__l.__size_ >= v40.__r_.__value_.__r.__words[2])
    {
      v12 = (uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 2;
      if ((unint64_t)(v12 + 1) >> 62)
LABEL_54:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = (uint64_t)(v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0]) >> 1;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (v40.__r_.__value_.__r.__words[2] - v40.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v40.__r_.__value_.__r.__words[2], v14);
        v9 = v41;
      }
      else
      {
        v15 = 0;
      }
      v16 = (unsigned int *)&v15[4 * v12];
      *v16 = v9;
      v11 = (std::string::size_type)(v16 + 1);
      v17 = (char *)v40.__r_.__value_.__l.__size_;
      v18 = v40.__r_.__value_.__r.__words[0];
      if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
      {
        do
        {
          v19 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *--v16 = v19;
        }
        while (v17 != (char *)v18);
        v17 = (char *)v40.__r_.__value_.__r.__words[0];
      }
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      v40.__r_.__value_.__l.__size_ = v11;
      v40.__r_.__value_.__r.__words[2] = (std::string::size_type)&v15[4 * v14];
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_DWORD *)v40.__r_.__value_.__l.__size_ = v9;
      v11 = size + 4;
    }
    v40.__r_.__value_.__l.__size_ = v11;
  }
  while (v41 != HIDWORD(v46));
  if (v11 - v40.__r_.__value_.__r.__words[0] < 8)
  {
    v35 = "vc_sector.size() > 1";
    v36 = 1265;
    goto LABEL_53;
  }
  do
  {
    v20 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v3, &v41);
    v21 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v3, (unsigned int *)(v20 + 4));
    v41 = v21;
    v22 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      v24 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      if ((unint64_t)(v24 + 1) >> 62)
        goto LABEL_54;
      v25 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v26);
        v21 = v41;
      }
      else
      {
        v27 = 0;
      }
      v28 = (unsigned int *)&v27[4 * v24];
      *v28 = v21;
      v23 = (std::string::size_type)(v28 + 1);
      v29 = (char *)__p.__r_.__value_.__l.__size_;
      v30 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          v31 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *--v28 = v31;
        }
        while (v29 != (char *)v30);
        v29 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      __p.__r_.__value_.__l.__size_ = v23;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[4 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = v21;
      v23 = v22 + 4;
    }
    __p.__r_.__value_.__l.__size_ = v23;
  }
  while (v41 != (_DWORD)v46);
  if (v23 - __p.__r_.__value_.__r.__words[0] <= 7)
  {
    v35 = "va_sector.size() > 1";
    v36 = 1271;
LABEL_53:
    __assert_rtn("SplitNonManifoldVertex", "TriMesh.cpp", v36, v35);
  }
  v44 = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v43);
  v45 = -1;
  appended = cv3d::cv::gess::mesh::PolyMesh::AppendVertex(a1, &v44, &v45);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v3, (unsigned int *)v47, (unsigned int *)&v46 + 1);
  cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v3, (unsigned int *)v47 + 1, (unsigned int *)&v46);
  v33 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
  *(_QWORD *)&v44 = a1;
  for (*((_QWORD *)&v44 + 1) = appended; v33 != (unsigned int *)__p.__r_.__value_.__l.__size_; ++v33)
  {
    v45 = *v33;
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(v44 + 104), &v45, (_DWORD *)&v44 + 2);
  }
  cv3d::cv::gess::mesh::Topology::SetHEdge(v3, &v43, (unsigned int *)&v46 + 1);
  cv3d::cv::gess::mesh::MeshProperty::CopyAllAttributes(a1, v43, appended, 0);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_23C50F708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::InsertFace(uint64_t a1, _DWORD *a2, int *a3, _DWORD *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  size_t prime;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  unsigned int HEdge;
  _QWORD *v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  uint8x8_t v17;
  void **v18;
  _QWORD *v19;
  unint64_t v20;
  float v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD **v28;
  size_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *i;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unsigned int *v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  __int16 *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  __int16 *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;
  unsigned int *v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  unint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  int v71;
  unsigned int v72;
  __int128 v73;
  int v74;
  unsigned int v75;
  void *__p[2];
  __int128 v77;
  float v78;
  __int16 v79;
  char v80;
  unsigned int appended;
  _DWORD v82[3];
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;

  v5 = 0;
  v87 = *MEMORY[0x24BDAC8D0];
  v86 = -1;
  v85 = -1;
  v84 = -1;
  v83 = -1;
  v6 = *a3;
  v82[0] = *a2;
  v82[1] = v6;
  v82[2] = *a4;
  v80 = 1;
  v79 = 257;
  v7 = (_QWORD *)(a1 + 104);
  *(_OWORD *)__p = 0u;
  v77 = 0u;
  v78 = 1.0;
  prime = 1;
  do
  {
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(&v73, v7, &v82[v5]);
    v10 = 0;
    v75 = -1;
    v71 = prime;
    v11 = prime;
    while (1)
    {
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v73);
      v75 = HEdge;
      if (HEdge == -1)
        break;
      v13 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
      if ((*v13 & v14) != 0)
      {
        v9 = &v82[v5];
        v15 = *v9;
        v16 = (unint64_t)__p[1];
        if (__p[1])
        {
          v17 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v17.i16[0] = vaddlv_u8(v17);
          if (v17.u32[0] > 1uLL)
          {
            prime = *v9;
            if (__p[1] <= (void *)v15)
              prime = v15 % (size_t)__p[1];
          }
          else
          {
            prime = (LODWORD(__p[1]) - 1) & v15;
          }
          v18 = (void **)*((_QWORD *)__p[0] + prime);
          if (v18)
          {
            v19 = *v18;
            if (*v18)
            {
              do
              {
                v20 = v19[1];
                if (v20 == v15)
                {
                  if (*((_DWORD *)v19 + 4) == (_DWORD)v15)
                    goto LABEL_77;
                }
                else
                {
                  if (v17.u32[0] > 1uLL)
                  {
                    if ((void *)v20 >= __p[1])
                      v20 %= (unint64_t)__p[1];
                  }
                  else
                  {
                    v20 &= (unint64_t)__p[1] - 1;
                  }
                  if (v20 != prime)
                    break;
                }
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
          }
        }
        v19 = operator new(0x18uLL);
        *v19 = 0;
        v19[1] = v15;
        *((_DWORD *)v19 + 4) = v15;
        *((_DWORD *)v19 + 5) = -1;
        v21 = (float)(unint64_t)(*((_QWORD *)&v77 + 1) + 1);
        if (v16 && (float)(v78 * (float)v16) >= v21)
        {
          v15 = prime;
          goto LABEL_67;
        }
        v22 = (v16 & (v16 - 1)) == 0;
        if (v16 < 3)
          v22 = 0;
        v23 = (2 * v16) | !v22;
        v24 = vcvtps_u32_f32(v21 / v78);
        if (v23 <= v24)
          prime = v24;
        else
          prime = v23;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v16 = (unint64_t)__p[1];
        }
        if (prime <= v16)
        {
          if (prime < v16)
          {
            v31 = vcvtps_u32_f32((float)*((unint64_t *)&v77 + 1) / v78);
            if (v16 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
            {
              v31 = std::__next_prime(v31);
            }
            else
            {
              v33 = 1 << -(char)__clz(v31 - 1);
              if (v31 >= 2)
                v31 = v33;
            }
            if (prime <= v31)
              prime = v31;
            if (prime >= v16)
            {
              v16 = (unint64_t)__p[1];
            }
            else
            {
              if (prime)
                goto LABEL_34;
              v42 = __p[0];
              __p[0] = 0;
              if (v42)
                operator delete(v42);
              v16 = 0;
              __p[1] = 0;
            }
          }
        }
        else
        {
LABEL_34:
          if (prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * prime);
          v26 = __p[0];
          __p[0] = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v27++) = 0;
          while (prime != v27);
          v28 = (_QWORD **)v77;
          if ((_QWORD)v77)
          {
            v29 = *(_QWORD *)(v77 + 8);
            v30 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= prime)
                v29 %= prime;
            }
            else
            {
              v29 &= prime - 1;
            }
            *((_QWORD *)__p[0] + v29) = &v77;
            for (i = *v28; i; v29 = v35)
            {
              v35 = i[1];
              if (v30.u32[0] > 1uLL)
              {
                if (v35 >= prime)
                  v35 %= prime;
              }
              else
              {
                v35 &= prime - 1;
              }
              if (v35 != v29)
              {
                if (!*((_QWORD *)__p[0] + v35))
                {
                  *((_QWORD *)__p[0] + v35) = v28;
                  goto LABEL_59;
                }
                *v28 = (_QWORD *)*i;
                *i = **((_QWORD **)__p[0] + v35);
                **((_QWORD **)__p[0] + v35) = i;
                i = v28;
              }
              v35 = v29;
LABEL_59:
              v28 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v16 = prime;
        }
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v16 <= v15)
            v15 %= v16;
        }
        else
        {
          v15 = ((_DWORD)v16 - 1) & v15;
        }
LABEL_67:
        v36 = __p[0];
        v37 = (_QWORD *)*((_QWORD *)__p[0] + v15);
        if (v37)
        {
          *v19 = *v37;
          goto LABEL_75;
        }
        *v19 = v77;
        *(_QWORD *)&v77 = v19;
        v36[v15] = &v77;
        if (*v19)
        {
          v38 = *(_QWORD *)(*v19 + 8);
          if ((v16 & (v16 - 1)) != 0)
          {
            if (v38 >= v16)
              v38 %= v16;
          }
          else
          {
            v38 &= v16 - 1;
          }
          v37 = (char *)__p[0] + 8 * v38;
LABEL_75:
          *v37 = v19;
        }
        ++*((_QWORD *)&v77 + 1);
LABEL_77:
        *((_DWORD *)v19 + 5) = v75;
        v10 = 1;
      }
      v39 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, &v75);
      if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, v39) + 12) == v82[v11])
      {
        v40 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v75);
        if ((*v40 & v41) == 0)
          goto LABEL_144;
        *((_BYTE *)&v79 + v5) = 0;
        *((_DWORD *)&v85 + v5) = v75;
      }
    }
    if ((v10 & 1) == 0)
    {
LABEL_144:
      appended = -1;
      goto LABEL_145;
    }
    ++v5;
    if (v71 == 2)
      prime = 0;
    else
      prime = (v71 + 1);
  }
  while (v5 != 3);
  appended = -1;
  LODWORD(v73) = -1;
  v43 = 0;
  appended = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v73);
  v44 = &v79;
  do
  {
    v45 = *(unsigned __int8 *)v44;
    v44 = (__int16 *)((char *)v44 + 1);
    if (!v45)
    {
      v46 = *(unsigned int *)((char *)&v85 + v43);
      if ((_DWORD)v46 == -1)
        __assert_rtn("InsertFace", "TriMesh.cpp", 1088, "he[i].Valid()");
      v47 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v46);
      *v47 &= ~v48;
      cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v7, &appended, (unsigned int *)((char *)&v85 + v43));
    }
    v43 += 4;
  }
  while (v43 != 12);
  v49 = 0;
  v50 = 1;
  v51 = &v79;
  do
  {
    v52 = *(unsigned __int8 *)v51;
    v51 = (__int16 *)((char *)v51 + 1);
    if (v52)
    {
      *(_QWORD *)&v73 = -1;
      *((_QWORD *)&v73 + 1) = -1;
      v74 = -1;
      *(_DWORD *)((char *)&v85 + v49) = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v73);
      v74 = -1;
      *(_QWORD *)&v73 = -1;
      *((_QWORD *)&v73 + 1) = -1;
      *(_DWORD *)((char *)&v83 + v49) = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 1, &v73);
      cv3d::cv::gess::mesh::Topology::SetStart(v7, (unsigned int *)((char *)&v85 + v49), &v82[v49 / 4]);
      cv3d::cv::gess::mesh::Topology::SetStart(v7, (unsigned int *)((char *)&v83 + v49), &v82[v50]);
      cv3d::cv::gess::mesh::Topology::SetTwin((uint64_t)v7, (unsigned int *)((char *)&v85 + v49), (unsigned int *)((char *)&v83 + v49));
      cv3d::cv::gess::mesh::Topology::SetFace((uint64_t)v7, &appended, (unsigned int *)((char *)&v85 + v49));
    }
    if (v50 == 2)
      v50 = 0;
    else
      ++v50;
    v49 += 4;
  }
  while (v49 != 12);
  v53 = 0;
  v72 = -1;
  LODWORD(v73) = -1;
  v75 = -1;
  v54 = 1;
  do
  {
    v55 = v54;
    if (*((_BYTE *)&v79 + v54))
      v56 = *((unsigned __int8 *)&v79 + v53) | 2;
    else
      v56 = *((unsigned __int8 *)&v79 + v53);
    switch(v56)
    {
      case 3:
        v59 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, (unsigned int *)&v85 + v53);
        if (!__p[1])
          goto LABEL_147;
        v60 = *(unsigned int *)(v59 + 12);
        v61 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v61.i16[0] = vaddlv_u8(v61);
        if (v61.u32[0] > 1uLL)
        {
          v62 = *(unsigned int *)(v59 + 12);
          if (__p[1] <= (void *)v60)
            v62 = v60 % (unint64_t)__p[1];
        }
        else
        {
          v62 = (LODWORD(__p[1]) - 1) & v60;
        }
        v63 = (uint64_t **)*((_QWORD *)__p[0] + v62);
        if (!v63 || (v64 = *v63) == 0)
LABEL_147:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        while (1)
        {
          v65 = v64[1];
          if (v65 == v60)
          {
            if (*((_DWORD *)v64 + 4) == (_DWORD)v60)
            {
              v66 = *((_DWORD *)v64 + 5);
              v72 = v66;
              cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v7, (unsigned int *)&v85 + v53, (unsigned int *)&v85 + v55);
              while (1)
              {
                v67 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, &v72);
                v68 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, v67);
                v69 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, (unsigned int *)&v85 + v53);
                if (*(_DWORD *)(v68 + 12) == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, v69) + 12))
                  break;
                v72 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, &v72) + 8);
                if (v72 == v66)
                  goto LABEL_137;
              }
              LODWORD(v73) = v72;
              v75 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, &v72) + 8);
LABEL_137:
              cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v7, (unsigned int *)&v73, (unsigned int *)&v83 + v53);
              v58 = (unsigned int *)&v83 + v55;
              v57 = &v75;
LABEL_138:
              cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v7, v58, v57);
              goto LABEL_139;
            }
          }
          else
          {
            if (v61.u32[0] > 1uLL)
            {
              if ((void *)v65 >= __p[1])
                v65 %= (unint64_t)__p[1];
            }
            else
            {
              v65 &= (unint64_t)__p[1] - 1;
            }
            if (v65 != v62)
              goto LABEL_147;
          }
          v64 = (uint64_t *)*v64;
          if (!v64)
            goto LABEL_147;
        }
      case 2:
        v58 = (unsigned int *)&v85 + v53;
        v75 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, v58) + 8);
        cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v7, (unsigned int *)&v83 + v55, &v75);
        v57 = (unsigned int *)&v85 + v55;
        goto LABEL_138;
      case 1:
        v57 = (unsigned int *)&v85 + v55;
        LODWORD(v73) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h((uint64_t)v7, v57) + 4);
        cv3d::cv::gess::mesh::Topology::SetPrevNext((uint64_t)v7, (unsigned int *)&v73, (unsigned int *)&v83 + v53);
        v58 = (unsigned int *)&v85 + v53;
        goto LABEL_138;
    }
LABEL_139:
    ++v53;
    if ((_DWORD)v55 == 2)
      v54 = 0;
    else
      v54 = v55 + 1;
  }
  while (v53 != 3);
LABEL_145:
  return appended;
}

void sub_23C5100C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::mesh::VertexHandle,cv3d::cv::gess::mesh::HEdgeHandle,`anonymous namespace'::handle_hash,std::equal_to<cv3d::cv::gess::mesh::VertexHandle>,std::allocator<std::pair<cv3d::cv::gess::mesh::VertexHandle const,cv3d::cv::gess::mesh::HEdgeHandle>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::InsertFaceManifold(uint64_t a1, unsigned int *a2, unsigned int *a3, _DWORD *a4, unsigned int *a5)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int appended;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  if (*a2 == -1 || *a3 == -1)
    return 0;
  v11 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v12 & *v11) == 0)
    return 0;
  v13 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a3);
  if ((v14 & *v13) == 0 || *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 8) != *a3)
    return 0;
  v34 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 4);
  v33 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a3) + 8);
  LODWORD(v30) = -1;
  if (v34 == v33)
  {
    *a4 = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v30);
    v15 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
    *v15 &= ~v16;
    v17 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a3);
    *v17 &= ~v18;
    v19 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v34);
    *v19 &= ~v20;
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a4, a2);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a4, a3);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a4, &v34);
    *a5 = -1;
  }
  else
  {
    *a4 = cv3d::cv::gess::mesh::PolyMesh::AppendFace(a1, &v30);
    v31 = -1;
    *(_QWORD *)&v30 = -1;
    *((_QWORD *)&v30 + 1) = -1;
    appended = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 0, &v30);
    v31 = -1;
    v32 = appended;
    *(_QWORD *)&v30 = -1;
    *((_QWORD *)&v30 + 1) = -1;
    *a5 = cv3d::cv::gess::mesh::PolyMesh::AppendHEdge(a1, 1, &v30);
    v23 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
    *v23 &= ~v24;
    v25 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a3);
    *v25 &= ~v26;
    v27 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a3);
    v28 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v27);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), &v32, (_DWORD *)(v28 + 12));
    v29 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
    cv3d::cv::gess::mesh::Topology::SetStart((_QWORD *)(a1 + 104), a5, (_DWORD *)(v29 + 12));
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a4, a2);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a4, a3);
    cv3d::cv::gess::mesh::Topology::SetFace(a1 + 104, a4, &v32);
    cv3d::cv::gess::mesh::Topology::SetTwin(a1 + 104, &v32, a5);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v34, a5);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, a5, &v33);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, &v32, a2);
    cv3d::cv::gess::mesh::Topology::SetPrevNext(a1 + 104, a3, &v32);
  }
  return 1;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t cv3d::cv::gess::mesh::TriMesh::RemoveDanglingUV(cv3d::cv::gess::mesh::TriMesh *this)
{
  uint64_t **v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int **v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int **v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL4 v77;
  unint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  cv3d::cv::gess::mesh::TriMesh *v82;
  unint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *__p[2];
  uint64_t v91;
  unsigned int v92[3];

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v82 = this;
  v2 = (uint64_t **)((char *)this + 80);
  v87 = 0;
  v3 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(v2, (uint64_t)&v87, (unsigned __int8 *)__p);
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  v4 = (uint64_t *)((char *)v82 + 56);
  LODWORD(v88) = 0;
  v87 = 0;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)v82 + 7, (uint64_t)&v87, (unsigned __int8 *)__p);
  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);
  v7 = 0;
  if (v3 == -1 || v6 == -1)
    return v7;
  __p[0] = 0;
  __p[1] = 0;
  v91 = 0;
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v92[0] = v3;
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v2, v92, v5);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  std::vector<BOOL>::resize((uint64_t)__p, v9, 1);
  v92[0] = v3;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)v2, v92, v10);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  std::vector<std::vector<unsigned int>>::resize(&v87, v12, (uint64_t)&v84);
  v80 = v3;
  v81 = (uint64_t *)v2;
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (*((_QWORD *)v82 + 20) != *((_QWORD *)v82 + 19))
  {
    v14 = 0;
    v15 = 0;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v92[0] = v6;
        v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v4, v92, v13);
        v18 = *(_QWORD *)(v17 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v17 + 48) - v18) >> 2) <= v14)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v19 = *(unsigned int *)(v18 + 12 * v14 + 4 * i);
        *(_QWORD *)((char *)__p[0] + ((v19 >> 3) & 0x1FFFFFF8)) &= ~(1 << v19);
        v20 = v87 + 24 * v19;
        v22 = (unsigned int **)(v20 + 8);
        v21 = *(unsigned int **)(v20 + 8);
        v24 = (_QWORD *)(v20 + 16);
        v23 = *(_QWORD *)(v20 + 16);
        if ((unint64_t)v21 >= v23)
        {
          v26 = *(unsigned int **)v20;
          v27 = ((uint64_t)v21 - *(_QWORD *)v20) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v29 = v23 - (_QWORD)v26;
          if (v29 >> 1 > v28)
            v28 = v29 >> 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v24, v30);
            v21 = *v22;
            v26 = *(unsigned int **)v20;
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[4 * v27];
          *(_DWORD *)v32 = v15;
          v25 = (unsigned int *)(v32 + 4);
          while (v21 != v26)
          {
            v33 = *--v21;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          *(_QWORD *)v20 = v32;
          *v22 = v25;
          *v24 = &v31[4 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v21 = v15;
          v25 = v21 + 1;
        }
        *v22 = v25;
      }
      v14 = ++v15;
    }
    while (v15 < (unint64_t)((uint64_t)(*((_QWORD *)v82 + 20) - *((_QWORD *)v82 + 19)) >> 2));
  }
  v34 = v80;
  v92[0] = v80;
  v35 = v81;
  v36 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v81, v92, v13);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  v39 = v37;
  if (!v37)
    goto LABEL_83;
  v40 = 0;
  v41 = 0;
  v79 = v37;
  v42 = v37 - 1;
  while (1)
  {
    if (v42 > v41)
    {
      while (((*(_QWORD *)((char *)__p[0] + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42) & 1) != 0)
      {
        if (--v42 <= v41)
        {
          v42 = v41;
          break;
        }
      }
    }
    if (v41 < v42)
    {
      v43 = v40;
      v44 = v41;
      while (((*(_QWORD *)((char *)__p[0] + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
      {
        ++v44;
        ++v43;
        if (v42 == v44)
        {
          v40 = v42 + v40 - v41;
          goto LABEL_62;
        }
      }
      v41 = v44;
      v40 = v43;
    }
    if (v41 == v42)
      break;
    if ((*((_QWORD *)__p[0] + (v41 >> 6)) & (1 << v41)) == 0
      || (*((_QWORD *)__p[0] + (v42 >> 6)) & (1 << v42)) != 0)
    {
      v77 = 0;
      v39 = v79;
      goto LABEL_84;
    }
    v83 = v40;
    v45 = (unsigned int **)(v87 + 24 * v42);
    v46 = *v45;
    v47 = v45[1];
    while (v46 != v47)
    {
      v48 = 0;
      v49 = *v46;
      v50 = 12 * v49;
      do
      {
        v92[0] = v6;
        v51 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v4, v92, v38);
        v52 = *(_QWORD *)(v51 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v51 + 48) - v52) >> 2) <= v49)
LABEL_67:
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        if (v42 == *(_DWORD *)(v52 + v50 + v48))
        {
          v92[0] = v6;
          v53 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v4, v92, v38);
          v54 = *(_QWORD *)(v53 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v53 + 48) - v54) >> 2) <= v49)
            goto LABEL_67;
          *(_DWORD *)(v54 + v50 + v48) = v41;
        }
        v48 += 4;
      }
      while (v48 != 12);
      ++v46;
    }
    v34 = v80;
    v92[0] = v80;
    v35 = v81;
    v55 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v81, v92, v38);
    v57 = *(_QWORD *)(v55 + 40);
    if (v41 >= (*(_QWORD *)(v55 + 48) - v57) >> 3)
      goto LABEL_91;
    v58 = *(_QWORD *)(v57 + 8 * v41);
    v92[0] = v80;
    v59 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v81, v92, v56);
    v61 = *(_QWORD *)(v59 + 40);
    if (v42 >= (*(_QWORD *)(v59 + 48) - v61) >> 3)
      goto LABEL_91;
    v92[0] = v80;
    v62 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v81, v92, v60);
    v64 = *(_QWORD *)(v62 + 40);
    if (v41 >= (*(_QWORD *)(v62 + 48) - v64) >> 3
      || (v65 = (_DWORD *)(v61 + 8 * v42),
          v66 = (_DWORD *)(v64 + 8 * v41),
          *v66 = *v65,
          v66[1] = v65[1],
          v92[0] = v80,
          v67 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v81, v92, v63), v68 = *(_QWORD *)(v67 + 40), v42 >= (*(_QWORD *)(v67 + 48) - v68) >> 3))
    {
LABEL_91:
      __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
    }
    *(_QWORD *)(v68 + 8 * v42) = v58;
    v69 = __p[0];
    *((_QWORD *)__p[0] + (v41 >> 6)) &= ~(1 << v41);
    v69[v42 >> 6] |= 1 << v42;
    v40 = v83 + 1;
    if (v41++ >= v42)
      goto LABEL_63;
  }
LABEL_62:
  v69 = __p[0];
  v40 += (~*(_QWORD *)((char *)__p[0] + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42) & 1;
LABEL_63:
  v39 = v79;
  if (v40
    && ((*(_QWORD *)((char *)v69 + (((v40 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v40 - 1)) & 1) != 0)
  {
    LOBYTE(v71) = 0;
  }
  else if (v40 == v79)
  {
    LOBYTE(v71) = 1;
  }
  else
  {
    v71 = (*(_QWORD *)((char *)v69 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v40) & 1;
  }
  v72 = 0;
  if (v79 <= 1)
    v73 = 1;
  else
    v73 = v79;
  do
  {
    if (v72 >= v40)
    {
      if ((v71 & 1) != 0)
      {
        v71 = (*(_QWORD *)((char *)__p[0] + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v72) & 1;
        goto LABEL_80;
      }
    }
    else if ((v71 & 1) != 0)
    {
      LOBYTE(v71) = ((*(_QWORD *)((char *)__p[0] + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v72) & 1) == 0;
      goto LABEL_80;
    }
    LOBYTE(v71) = 0;
LABEL_80:
    ++v72;
  }
  while (v73 != v72);
  if ((v71 & 1) != 0)
  {
    v92[0] = v34;
    v74 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v35, v92, v38);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v74 + 32))(v74, v40);
    v92[0] = v34;
    v76 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(v35, v92, v75);
    v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76) == v40;
    goto LABEL_84;
  }
LABEL_83:
  v77 = 0;
LABEL_84:
  if (v39)
    v7 = v77;
  else
    v7 = 1;
  v84 = &v87;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  if (__p[0])
    operator delete(__p[0]);
  return v7;
}

void sub_23C510BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  a18 = &a21;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

uint64_t cv3d::cv::gess::mesh::TriMesh::ComputeMeshNormal(cv3d::cv::gess::mesh::TriMesh *this, float *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  float v21;
  unsigned int HEdge;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unsigned int *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  float32x4_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x2_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v74;
  const char *v75;
  const char *v76;
  const char *v77;
  uint64_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  unsigned int v81;
  _BYTE v82[16];
  void *v83[3];
  void *__p;
  char *v85;
  char *v86;
  float32x4_t v87;
  __int128 v88;
  char *v89;
  unsigned int v90;
  unsigned int v91[3];

  v90 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v88, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
  __p = 0;
  v85 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)this + 10, (uint64_t)&__p, (unsigned __int8 *)&v88);
  if (SHIBYTE(v89) < 0)
    operator delete((void *)v88);
  if (v4 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v88, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
    __p = 0;
    v85 = 0;
    v4 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<float>>((char **)this + 10, (uint64_t)&__p, &v88);
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
  LODWORD(v85) = 0;
  __p = 0;
  v78 = (uint64_t *)((char *)this + 56);
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)this + 7, (uint64_t)&__p, (unsigned __int8 *)&v88);
  v90 = v5;
  if (SHIBYTE(v89) < 0)
    operator delete((void *)v88);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v88, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t)this, &v90, &v88);
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
  }
  LODWORD(v88) = v4;
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 10, (unsigned int *)&v88);
  v7 = *((_QWORD *)this + 20) - *((_QWORD *)this + 19);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, (v7 >> 1) + (v7 >> 2));
  v87 = 0uLL;
  if (*((_QWORD *)this + 20) != *((_QWORD *)this + 19))
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      LODWORD(v88) = v90;
      v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v78, (unsigned int *)&v88, v8);
      v13 = *(_QWORD *)(v12 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v12 + 48) - v13) >> 2) <= v10)
        __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
      v14 = v13 + 12 * v10;
      *(_DWORD *)v14 = 3 * v11;
      *(int32x2_t *)(v14 + 4) = vadd_s32(vdup_n_s32(3 * v11), (int32x2_t)0x200000001);
      cv3d::cv::gess::math::FaceNormal((uint64_t)this, v10, &v87);
      for (i = 0; i != 3; ++i)
      {
        LODWORD(v88) = v4;
        v16 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 10, (unsigned int *)&v88);
        v17 = (v9 + i);
        v18 = *(_QWORD *)(v16 + 40);
        if (v17 >= (*(_QWORD *)(v16 + 48) - v18) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        *(float32x4_t *)(v18 + 16 * v17) = v87;
      }
      v9 += 3;
      v10 = ++v11;
    }
    while (v11 < (unint64_t)((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2));
  }
  v19 = *a2;
  v88 = 0uLL;
  v89 = 0;
  __p = 0;
  v85 = 0;
  v86 = 0;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(v83, 3uLL);
  if (*((_QWORD *)this + 14) != *((_QWORD *)this + 13))
  {
    LODWORD(v20) = 0;
    v21 = v19 * 3.14159265 / 180.0;
    do
    {
      v91[0] = v20;
      cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v82, (char *)this + 104, v91);
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v82);
      v81 = HEdge;
      *((_QWORD *)&v88 + 1) = v88;
      if (HEdge == -1)
      {
        v45 = (unsigned int *)__p;
        v85 = (char *)__p;
      }
      else
      {
        v23 = 0;
        do
        {
          v24 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), HEdge);
          if ((*v24 & v25) == 0)
          {
            v26 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v81);
            v27 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), *v26);
            if ((*v27 & v28) == 0)
            {
              v91[0] = 0;
              cv3d::cv::gess::math::EdgeDihedral((uint64_t)this, &v81, (float *)v91);
              v23 |= *(float *)v91 > v21;
            }
          }
          v29 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>((uint64_t)this, *((_DWORD *)this + 45), v81);
          if ((*v29 & v30) == 0)
          {
            v31 = cv3d::cv::gess::mesh::Topology::h((uint64_t)this + 104, &v81);
            v32 = v31;
            v33 = *((_QWORD *)&v88 + 1);
            if (*((_QWORD *)&v88 + 1) >= (unint64_t)v89)
            {
              v35 = (uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 2;
              if ((unint64_t)(v35 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v36 = (uint64_t)&v89[-v88] >> 1;
              if (v36 <= v35 + 1)
                v36 = v35 + 1;
              if ((unint64_t)&v89[-v88] >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v36;
              if (v37)
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v89, v37);
              else
                v38 = 0;
              v39 = &v38[4 * v35];
              *(_DWORD *)v39 = *(_DWORD *)(v32 + 16);
              v34 = v39 + 4;
              v40 = (char *)*((_QWORD *)&v88 + 1);
              v41 = (char *)v88;
              if (*((_QWORD *)&v88 + 1) != (_QWORD)v88)
              {
                do
                {
                  v42 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v39 - 1) = v42;
                  v39 -= 4;
                }
                while (v40 != v41);
                v40 = (char *)v88;
              }
              *(_QWORD *)&v88 = v39;
              *((_QWORD *)&v88 + 1) = v34;
              v89 = &v38[4 * v37];
              if (v40)
                operator delete(v40);
            }
            else
            {
              **((_DWORD **)&v88 + 1) = *(_DWORD *)(v31 + 16);
              v34 = (_DWORD *)(v33 + 4);
            }
            *((_QWORD *)&v88 + 1) = v34;
          }
          HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v82);
          v81 = HEdge;
        }
        while (HEdge != -1);
        if ((v23 & 1) != 0)
          goto LABEL_82;
        v43 = (unsigned int *)*((_QWORD *)&v88 + 1);
        v44 = (unsigned int *)v88;
        v45 = (unsigned int *)__p;
        v85 = (char *)__p;
        if ((_QWORD)v88 != *((_QWORD *)&v88 + 1))
        {
          do
          {
            cv3d::cv::gess::mesh::TriMesh::GetFaceVertices((uint64_t)this, v44, v83);
            v47 = 0;
            while (*(_DWORD *)((char *)v83[0] + v47) != (_DWORD)v20)
            {
              v47 += 4;
              if (v47 == 12)
              {
                v74 = 1433;
                v75 = "v_index_in_triangle < 3u";
                v76 = "TriMesh.cpp";
                v77 = "ComputeMeshNormal";
                goto LABEL_94;
              }
            }
            v91[0] = v90;
            v48 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v78, v91, v46);
            v49 = *v44;
            v50 = *(_QWORD *)(v48 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v48 + 48) - v50) >> 2) <= v49)
            {
              v74 = 182;
              v77 = "operator[]";
              v76 = "Attribute.h";
              v75 = "index < data_.size()";
LABEL_94:
              __assert_rtn(v77, v76, v74, v75);
            }
            v51 = v50 + 12 * v49;
            v52 = v85;
            if (v85 >= v86)
            {
              v54 = (char *)__p;
              v55 = (v85 - (_BYTE *)__p) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v57 = v86 - (_BYTE *)__p;
              if ((v86 - (_BYTE *)__p) >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86, v58);
                v54 = (char *)__p;
                v52 = v85;
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = *(_DWORD *)(v51 + v47);
              v53 = (unsigned int *)(v60 + 4);
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              __p = v60;
              v85 = (char *)v53;
              v86 = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v85 = *(_DWORD *)(v51 + v47);
              v53 = (unsigned int *)(v52 + 4);
            }
            v85 = (char *)v53;
            ++v44;
          }
          while (v44 != v43);
          v45 = (unsigned int *)__p;
          goto LABEL_71;
        }
      }
      v53 = v45;
LABEL_71:
      if ((unint64_t)((char *)v53 - (char *)v45) >= 5)
      {
        v62 = 0uLL;
        while (v45 != v53)
        {
          v79 = v62;
          v63 = *v45;
          v91[0] = v4;
          v64 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 10, v91);
          v65 = *(_QWORD *)(v64 + 40);
          if (v63 >= (*(_QWORD *)(v64 + 48) - v65) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v62 = vaddq_f32(v79, *(float32x4_t *)(v65 + 16 * v63));
          ++v45;
        }
        v66 = vmulq_f32(v62, v62);
        v66.i32[3] = 0;
        v67 = (float32x2_t)vpaddq_f32(v66, v66).u64[0];
        v67.f32[0] = sqrtf(vaddv_f32(v67));
        v80 = (float32x4_t)xmmword_23C603EC0;
        if (v67.f32[0] > 0.000001)
          v80 = vdivq_f32(v62, (float32x4_t)vdupq_lane_s32((int32x2_t)v67, 0));
        v68 = (unsigned int *)__p;
        v69 = (unsigned int *)v85;
        while (v68 != v69)
        {
          v70 = *v68;
          v91[0] = v4;
          v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 10, v91);
          v72 = *(_QWORD *)(v71 + 40);
          if (v70 >= (*(_QWORD *)(v71 + 48) - v72) >> 4)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          *(float32x4_t *)(v72 + 16 * v70) = v80;
          ++v68;
        }
      }
LABEL_82:
      v20 = (v20 + 1);
    }
    while (v20 < (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 2);
  }
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  if (__p)
  {
    v85 = (char *)__p;
    operator delete(__p);
  }
  if ((_QWORD)v88)
  {
    *((_QWORD *)&v88 + 1) = v88;
    operator delete((void *)v88);
  }
  return 1;
}

void sub_23C5114C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 113) < 0)
    operator delete(*(void **)(v24 - 136));
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v6;
  int v7;

  v7 = 0;
  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<unsigned int>>((char **)(a1 + 56), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_23C511620(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<unsigned int>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_23C511884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<unsigned int>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_23C51191C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C5119F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>,std::reverse_iterator<std::vector<unsigned int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::reverse_iterator<std::vector<unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<unsigned int>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<unsigned int>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<unsigned int>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<unsigned int>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<float>>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<float>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<float>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<unsigned int>>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<float>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<float>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<BOOL>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<BOOL>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<unsigned int>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector3T<unsigned int>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C512200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C512260(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D49978;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C5122A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D499B0;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

unint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::resize(a1 + 40, a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
    if (v7 + 1 > 0x1555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v6) >> 2);
    v9 = 2 * v8;
    if (2 * v8 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>(v2, v10);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    *(_QWORD *)v12 = 0;
    *((_DWORD *)v12 + 2) = 0;
    v13 = &v11[12 * v10];
    v5 = v12 + 12;
    if (v4 == v6)
    {
      v14 = v12;
    }
    else
    {
      do
      {
        v14 = v12 - 12;
        v15 = v4 - 12;
        v16 = -12;
        do
        {
          *(_DWORD *)&v12[v16] = *(_DWORD *)&v4[v16];
          v16 += 4;
        }
        while (v16);
        v4 -= 12;
        v12 -= 12;
      }
      while (v15 != v6);
    }
    a1[5] = v14;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    v5 = v4 + 12;
    *((_DWORD *)v4 + 2) = 0;
  }
  a1[6] = v5;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = v3 + 12 * a2;
  v5 = *(_DWORD *)(v4 + 8);
  v6 = v3 + 12 * a3;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 + 8);
  result = *(double *)v4;
  *(_QWORD *)v4 = *(_QWORD *)v6;
  *(double *)v6 = result;
  *(_DWORD *)(v6 + 8) = v5;
  return result;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = v3 + 12 * a2;
  v5 = v3 + 12 * a3;
  result = *(double *)v4;
  *(_QWORD *)v5 = *(_QWORD *)v4;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v4 + 8);
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::Clone@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>,void>(a2, (uint64_t)v4);
}

void sub_23C5125C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D499B0;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 12;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>(v3, a2);
    v7 = &v6[12 * v5];
    v9 = &v6[12 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v13 = v7;
      do
      {
        v12 = v13 - 12;
        v14 = v11 - 12;
        v15 = -12;
        do
        {
          *(_DWORD *)&v13[v15] = *(_DWORD *)&v11[v15];
          v15 += 4;
        }
        while (v15);
        v11 -= 12;
        v13 -= 12;
      }
      while (v14 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

void std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

void std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v14);
      v7 += v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    v10 = v9 + a2;
    if (v9 + a2 > 0x1555555555555555)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>(v4, v12);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[12 * v9];
    v16 = &v13[12 * v12];
    v17 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v15, v17);
    v18 = &v15[v17];
    if (v7 == v8)
    {
      v19 = v15;
    }
    else
    {
      do
      {
        v19 = v15 - 12;
        v20 = v7 - 12;
        v21 = -12;
        do
        {
          *(_DWORD *)&v15[v21] = *(_DWORD *)&v7[v21];
          v21 += 4;
        }
        while (v21);
        v7 -= 12;
        v15 -= 12;
      }
      while (v20 != v8);
    }
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D499B0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<unsigned int>*,cv3d::cv::gess::math::Vector3T<unsigned int>*>((char *)v4 + 40, a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 2));
  return a1;
}

void sub_23C51298C(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<unsigned int>*,cv3d::cv::gess::math::Vector3T<unsigned int>*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t i;

  if (a4)
  {
    v6 = result;
    result = std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      for (i = 0; i != 12; i += 4)
        *(_DWORD *)(v7 + i) = *(_DWORD *)(a2 + i);
      a2 += 12;
      v7 += 12;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C512A0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<cv3d::cv::gess::math::Vector3T<unsigned int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::math::Vector3T<unsigned int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D49A20;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C512ACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector3T<unsigned int>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *cv3d::cv::gess::util::Image::Image(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  cv3d::cv::gess::util::Image::copyFrom((uint64_t)a1, a2);
  return a1;
}

void sub_23C512B5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    MEMORY[0x2426211A0](v3, 0x1000C8077774924);
    *(_QWORD *)(v1 + 16) = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::Image::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t i;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    MEMORY[0x2426211A0](v4, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  v7 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v7;
  v8 = (v5 * v7 * v6);
  *(_QWORD *)(a1 + 16) = operator new[]();
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
      *(_BYTE *)(*(_QWORD *)(a1 + 16) + i) = llroundf(*(float *)(*(_QWORD *)(a2 + 16) + 4 * i) * 255.0);
  }
  return 1;
}

_QWORD *cv3d::cv::gess::util::Imagef::Imagef(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  cv3d::cv::gess::util::Imagef::copyFrom((uint64_t)a1, a2);
  return a1;
}

void sub_23C512C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    MEMORY[0x2426211A0](v3, 0x1000C8052888210);
    *(_QWORD *)(v1 + 16) = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::util::Imagef::copyFrom(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  float *v8;
  unsigned __int8 *v9;
  unsigned int v10;

  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  v6 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v6;
  v7 = (v4 * v6 * v5);
  v8 = (float *)operator new[]();
  *(_QWORD *)(a1 + 16) = v8;
  if ((_DWORD)v7)
  {
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v10 = *v9++;
      *v8++ = (float)v10 / 255.0;
      --v7;
    }
    while (v7);
  }
  return 1;
}

uint64_t cv3d::cv::gess::util::Imageb::Imageb(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  BOOL *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = v4;
  v6 = (v5 * v4);
  v7 = (BOOL *)operator new[]();
  *(_QWORD *)(a1 + 16) = v7;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a2 + 12);
    do
    {
      *v7++ = *(float *)(v9 + 4 * v8) > 0.5;
      v8 += v10;
      --v6;
    }
    while (v6);
  }
  return a1;
}

void sub_23C512DB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    MEMORY[0x2426211A0](v3, 0x1000C8077774924);
    *(_QWORD *)(v1 + 16) = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t GESSAlgRepairTopology(void *a1)
{
  id v1;
  GESSAlgRepairTopologyExtended *v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_alloc_init(GESSAlgRepairTopologyExtended);
  v3 = -[GESSAlgRepairTopologyExtended run:](v2, "run:", v1);

  return v3;
}

void sub_23C512E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C513080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned int>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  int v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<unsigned int>((char **)(a1 + 8), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), v4);
}

{
  uint64_t v4;
  int v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<unsigned int>((char **)(a1 + 56), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

uint64_t GESSAlgCheckDegeneratedTriangles(void *a1, _BYTE *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v8;
  void *__p[3];
  char v10;

  v3 = a1;
  if (objc_msgSend(v3, "valid") && objc_msgSend(v3, "meshType") == 1)
  {
    v4 = objc_msgSend(v3, "meshImpl");
    v10 = 0;
    v5 = (uint64_t)(*(_QWORD *)(v4 + 112) - *(_QWORD *)(v4 + 104)) >> 2;
    v8 = 0;
    std::vector<float>::vector(__p, v5, &v8);
    v6 = cv3d::cv::gess::alg::CheckDegeneratedTriangles(v4, (uint64_t *)__p, &v10);
    if ((v6 & 1) != 0)
      *a2 = v10;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_23C5131FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C51329C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgRepairDegeneratedTriangles(void *a1, void *a2)
{
  id v3;
  id v4;
  float32x4_t *v5;
  float v6;
  float v7;
  cv3d::cv::gess::mesh::TriMesh *v8;
  BOOL *v9;
  uint64_t v10;
  char v12;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "valid") && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = (float32x4_t *)objc_msgSend(v3, "meshImpl");
    v12 = 0;
    objc_msgSend(v4, "shortEdgesCollapsingRatioThreshold");
    v7 = v6;
    v8 = (cv3d::cv::gess::mesh::TriMesh *)objc_msgSend(v4, "enableTopologicalChange");
    v10 = cv3d::cv::gess::alg::RepairDegeneratedTriangles(v5, v8, v7, &v12, v9);
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_23C513380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C513400(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<unsigned int>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<unsigned int>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned int>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned int>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C5135C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned int>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned int>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned int>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned int>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C513628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned int>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned int>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D49A58;
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C513670(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<unsigned int>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D49A90;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned int>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void cv3d::cv::gess::mesh::AttributeT<unsigned int>::Reserve(uint64_t a1, std::vector<int>::size_type a2)
{
  std::vector<unsigned int>::reserve((std::vector<int> *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned int>::Resize(uint64_t a1, std::vector<unsigned int>::size_type a2)
{
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned int>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned int>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = (v4 - v6) >> 2;
    if ((unint64_t)(v7 + 1) >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 1;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v2, v10);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *(_DWORD *)v12 = 0;
    v5 = v12 + 4;
    while (v4 != v6)
    {
      v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_DWORD *)v4 = 0;
    v5 = v4 + 4;
  }
  a1[6] = v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned int>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(v3 + 4 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned int>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned int>::Blend(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3)
                                                                + *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2)) >> 1;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<unsigned int>::Clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<unsigned int>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned int>,void>(a2, (uint64_t)v4);
}

void sub_23C513918(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x1093C400FBCE358);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned int>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned int>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D49A90;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<unsigned int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<unsigned int>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D49A90;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  return a1;
}

void sub_23C513A68(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned int>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D49B00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C513AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<unsigned int> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<unsigned int> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<unsigned int>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<unsigned int>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned int>(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  v3 = *a1;
  if (v2 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  v4 = *(_QWORD *)(v3 + 16 * v2);
  if (!v4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  if (*(uint64_t (*(**)())())(v4 + 32) != cv3d::cv::gess::util::os::GessTypeID<unsigned int>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>();
  v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

uint64_t cv3d::cv::gess::util::os::GlobalMemoryLogs(cv3d::cv::gess::util::os *this)
{
  uint64_t (*v1)(_QWORD);
  void *v3;

  {
    v3 = (void *)cv3d::cv::gess::util::os::GlobalMemoryLogs(void)::memory_logs(&cv3d::cv::gess::util::os::GlobalMemoryLogs(void)::memory_logs);
    _tlv_atexit((void (__cdecl *)(void *))std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::~vector[abi:ne180100], v3);
  }
  return cv3d::cv::gess::util::os::GlobalMemoryLogs(void)::memory_logs(&cv3d::cv::gess::util::os::GlobalMemoryLogs(void)::memory_logs);
}

void **std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<cv3d::cv::gess::util::os::MemoryLogItem>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 184)
  {
    if (*(char *)(i - 161) < 0)
      operator delete(*(void **)(i - 184));
  }
  a1[1] = v2;
}

uint64_t cv3d::cv::gess::util::os::GetSystemPhysicalMemory(cv3d::cv::gess::util::os *this)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)MEMORY[0x2426214AC](this);
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "physicalMemory");

  objc_autoreleasePoolPop(v1);
  return v3;
}

void sub_23C513D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::util::os::IsValidForKey(cv3d::cv::gess::util::os *this, NSDictionary *a2, NSString *a3)
{
  void *v3;
  _BOOL8 v4;

  -[cv3d::cv::gess::util::os valueForKey:](this, "valueForKey:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

uint64_t cv3d::cv::gess::util::os::IsNumberTypeForKey(cv3d::cv::gess::util::os *this, NSDictionary *a2, NSString *a3)
{
  void *v3;
  char isKindOfClass;

  -[cv3d::cv::gess::util::os objectForKey:](this, "objectForKey:", a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_23C513E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::util::os::GetDiskSpaceInfo(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSDictionary *v9;
  void *v10;
  BOOL v11;
  NSString *v12;
  void *v13;
  uint64_t v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  BOOL v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _BOOL8 v25;
  id v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x2426214AC]();
  NSTemporaryDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF48]), "initFileURLWithPath:", v3);
  v5 = (void *)*MEMORY[0x24BDBCE18];
  v28[0] = *MEMORY[0x24BDBCE18];
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v28, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = 0;
  objc_msgSend(v4, "resourceValuesForKeys:error:", v6, &v27);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v27;

  if (v7)
  {
    v9 = v5;
    objc_msgSend(v7, "valueForKey:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v10 == 0;

    if (v11 || !cv3d::cv::gess::util::os::IsNumberTypeForKey((cv3d::cv::gess::util::os *)v7, v9, v12))
    {
      v15 = 0;
    }
    else
    {
      objc_msgSend(v7, "valueForKey:", v9);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v13, "unsignedLongLongValue");

      a1[1] = v14;
      v15 = 1;
    }

  }
  else
  {
    v15 = 0;
  }

  NSTemporaryDirectory();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v16)
    v19 = v17 == 0;
  else
    v19 = 1;
  if (v19)
    v20 = 0;
  else
    v20 = v15;
  if ((v20 & 1) != 0)
  {
    objc_msgSend(v17, "attributesOfFileSystemForPath:error:", v16, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21;
    if (v21)
    {
      objc_msgSend(v21, "objectForKeyedSubscript:", *MEMORY[0x24BDD0D18]);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23;
      v25 = v23 != 0;
      if (v23)
        *a1 = objc_msgSend(v23, "longLongValue");

    }
    else
    {
      v25 = 0;
    }

  }
  else
  {
    v25 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return v25;
}

void sub_23C51404C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::util::os::GetForegroundMonitor(cv3d::cv::gess::util::os *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4util2os17ForegroundMonitorENS_9allocatorIS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&cv3d::cv::gess::util::os::GetForegroundMonitor(void)::s_monitor);
    __cxa_atexit((void (*)(void *))std::shared_ptr<cv3d::cv::gess::util::os::ForegroundMonitor>::~shared_ptr[abi:ne180100], &cv3d::cv::gess::util::os::GetForegroundMonitor(void)::s_monitor, &dword_23C4E9000);
  }
  return cv3d::cv::gess::util::os::GetForegroundMonitor(void)::s_monitor;
}

void sub_23C514158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::util::os::WaitUntilReadyForMetal(cv3d::cv::gess::util::os *this)
{
  cv3d::cv::gess::util::os::ForegroundMonitor *ForegroundMonitor;

  ForegroundMonitor = (cv3d::cv::gess::util::os::ForegroundMonitor *)cv3d::cv::gess::util::os::GetForegroundMonitor(this);
  cv3d::cv::gess::util::os::ForegroundMonitor::WaitUntilEnterForeground(ForegroundMonitor);
}

void cv3d::cv::gess::util::os::ForegroundMonitor::WaitUntilEnterForeground(cv3d::cv::gess::util::os::ForegroundMonitor *this)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 56);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 56));
  if (*(_BYTE *)this)
    goto LABEL_4;
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 8), &v2);
  while (!*(_BYTE *)this);
  if (v2.__owns_)
LABEL_4:
    std::mutex::unlock(v2.__m_);
}

uint64_t cv3d::cv::gess::util::os::IsMetalIntersectionFixed(cv3d::cv::gess::util::os *this)
{
  std::string *v1;
  void *v2;
  void *v3;
  std::string v5;
  size_t v6;
  std::string::value_type __c[2];
  char v8[253];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = 256;
  if (!sysctlbyname("kern.osversion", __c, &v6, 0, 0) && v6 >= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(&v5, (char *)&unk_23C62207F);
    std::string::push_back(&v5, __c[0]);
    std::string::push_back(&v5, __c[1]);
    if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v1 = &v5;
    else
      v1 = (std::string *)v5.__r_.__value_.__r.__words[0];
    atoi((const char *)v1);
    atoi(v8);
    objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v2;
    if (v2)
      objc_msgSend(v2, "operatingSystemVersion");

    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_23C5143B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::util::os::GessSandboxDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  char v12;
  id v13;
  void **v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  void *__p[2];
  unsigned __int8 v23;
  std::string v24;
  std::string v25;
  char v26;

  NSTemporaryDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1760], "processInfo");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "processName");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%d"), getpid());
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringByAppendingString:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "stringByAppendingString:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0;
  v11 = objc_msgSend(v10, "fileExistsAtPath:isDirectory:", v9, &v26);
  if (v26)
    v12 = v11;
  else
    v12 = 0;
  if ((v12 & 1) == 0)
    objc_msgSend(v10, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v9, 0, 0, 0);
  v13 = objc_retainAutorelease(v9);
  std::string::basic_string[abi:ne180100]<0>(&v24, (char *)objc_msgSend(v13, "UTF8String"));
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  if ((v23 & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v15 = v23;
  else
    v15 = (std::string::size_type)__p[1];
  v16 = std::string::append(&v24, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a1 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a1;
  else
    v19 = *(const std::string::value_type **)a1;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a1 + 23);
  else
    v20 = *(_QWORD *)(a1 + 8);
  v21 = std::string::append(&v25, v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);

}

void sub_23C5145DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  if (a28 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a22 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN4cv3d2cv4gess4util2os17ForegroundMonitorENS_9allocatorIS6_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x90uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4util2os17ForegroundMonitorENS_9allocatorIS6_EEEC2B8ne180100IJES8_Li0EEES8_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_23C5146B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN4cv3d2cv4gess4util2os17ForegroundMonitorENS_9allocatorIS6_EEEC2B8ne180100IJES8_Li0EEES8_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D49B38;
  cv3d::cv::gess::util::os::ForegroundMonitor::ForegroundMonitor((cv3d::cv::gess::util::os::ForegroundMonitor *)(a1 + 3));
  return a1;
}

void sub_23C5146FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::os::ForegroundMonitor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::os::ForegroundMonitor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49B38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::os::ForegroundMonitor>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 32));
}

cv3d::cv::gess::util::os::ForegroundMonitor *cv3d::cv::gess::util::os::ForegroundMonitor::ForegroundMonitor(cv3d::cv::gess::util::os::ForegroundMonitor *this)
{
  __CFNotificationCenter *LocalCenter;

  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 1018212795;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 850045863;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)cv3d::cv::gess::util::os::ForegroundMonitor::DidEnterBackgroundCallback, CFSTR("UIApplicationDidEnterBackgroundNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)cv3d::cv::gess::util::os::ForegroundMonitor::WillEnterForegroundCallback, CFSTR("UIApplicationWillEnterForegroundNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return this;
}

void sub_23C514830(_Unwind_Exception *a1)
{
  std::condition_variable *v1;
  std::mutex *v2;

  std::mutex::~mutex(v2);
  std::condition_variable::~condition_variable(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::util::os::ForegroundMonitor::DidEnterBackgroundCallback(cv3d::cv::gess::util::os::ForegroundMonitor *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  cv3d::cv::gess::util::os::ForegroundMonitor *ForegroundMonitor;

  ForegroundMonitor = (cv3d::cv::gess::util::os::ForegroundMonitor *)cv3d::cv::gess::util::os::GetForegroundMonitor(this);
  cv3d::cv::gess::util::os::ForegroundMonitor::DidEnterBackground(ForegroundMonitor);
}

void cv3d::cv::gess::util::os::ForegroundMonitor::WillEnterForegroundCallback(cv3d::cv::gess::util::os::ForegroundMonitor *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  cv3d::cv::gess::util::os::ForegroundMonitor *ForegroundMonitor;

  ForegroundMonitor = (cv3d::cv::gess::util::os::ForegroundMonitor *)cv3d::cv::gess::util::os::GetForegroundMonitor(this);
  cv3d::cv::gess::util::os::ForegroundMonitor::WillEnterForeground(ForegroundMonitor);
}

void cv3d::cv::gess::util::os::ForegroundMonitor::DidEnterBackground(cv3d::cv::gess::util::os::ForegroundMonitor *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  *(_BYTE *)this = 0;
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 8));
  std::mutex::unlock(v2);
}

void cv3d::cv::gess::util::os::ForegroundMonitor::WillEnterForeground(cv3d::cv::gess::util::os::ForegroundMonitor *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 56);
  std::mutex::lock((std::mutex *)((char *)this + 56));
  *(_BYTE *)this = 1;
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 8));
  std::mutex::unlock(v2);
}

uint64_t cv3d::cv::gess::util::os::Byte2String@<X0>(cv3d::cv::gess::util::os *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v5 = *(_QWORD *)this;
  if (*(_QWORD *)this > 0x3FFuLL)
  {
    if (v5 >> 20)
    {
      if (v5 >> 30)
      {
        v11 = v17;
        *(_DWORD *)((char *)v18 + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(v17 - 24)) & 0xFFFFFEFB | 4;
        *(_QWORD *)((char *)&v18[1] + *(_QWORD *)(v11 - 24)) = 2;
        if (v5 >> 40)
        {
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"TB", 2);
        }
        else
        {
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"GB", 2);
        }
      }
      else
      {
        v9 = v17;
        *(_DWORD *)((char *)v18 + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(v17 - 24)) & 0xFFFFFEFB | 4;
        *(_QWORD *)((char *)&v18[1] + *(_QWORD *)(v9 - 24)) = 2;
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"MB", 2);
      }
    }
    else
    {
      v7 = v17;
      *(_DWORD *)((char *)v18 + *(_QWORD *)(v17 - 24)) = *(_DWORD *)((_BYTE *)v18 + *(_QWORD *)(v17 - 24)) & 0xFFFFFEFB | 4;
      *(_QWORD *)((char *)&v18[1] + *(_QWORD *)(v7 - 24)) = 2;
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"KB", 2);
    }
  }
  else
  {
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"B", 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18, a2);
  v16[0] = *MEMORY[0x24BEDB7F0];
  v14 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v17 = v14;
  v18[0] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x242621128](&v20);
}

void sub_23C514B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::util::os::MemoryUsage(std::string *a1@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  timeval v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  void *tv_sec;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  void *__p[2];
  unsigned __int8 v35;
  std::string v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  void *v42[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  int8x16_t v52;
  uint64_t ru_maxrss;
  rusage v54;

  getrusage(0, &v54);
  ru_maxrss = v54.ru_maxrss;
  if (cv3d::cv::gess::util::os::GetSystemMemoryInfo(&v52))
  {
    std::string::basic_string[abi:ne180100]<0>(&v46, "Memory Usage: ");
    cv3d::cv::gess::util::os::Byte2String((cv3d::cv::gess::util::os *)&ru_maxrss, v44);
    if ((v45 & 0x80u) == 0)
      v3 = v44;
    else
      v3 = (void **)v44[0];
    if ((v45 & 0x80u) == 0)
      v4 = v45;
    else
      v4 = (std::string::size_type)v44[1];
    v5 = std::string::append(&v46, (const std::string::value_type *)v3, v4);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v42, "\nExperimental Resident Memory: ");
    if ((v43 & 0x80u) == 0)
      v7 = v42;
    else
      v7 = (void **)v42[0];
    if ((v43 & 0x80u) == 0)
      v8 = v43;
    else
      v8 = (std::string::size_type)v42[1];
    v9 = std::string::append(&v47, (const std::string::value_type *)v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v41, (double)v52.u64[0] * 0.0009765625 * 0.0009765625);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v41;
    else
      v11 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      size = v41.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v48, (const std::string::value_type *)v11, size);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v39, "MB");
    if ((v40 & 0x80u) == 0)
      v15 = v39;
    else
      v15 = (void **)v39[0];
    if ((v40 & 0x80u) == 0)
      v16 = v40;
    else
      v16 = (std::string::size_type)v39[1];
    v17 = std::string::append(&v49, (const std::string::value_type *)v15, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v37, "\nExperimental Virtual Memory: ");
    if ((v38 & 0x80u) == 0)
      v19 = v37;
    else
      v19 = (void **)v37[0];
    if ((v38 & 0x80u) == 0)
      v20 = v38;
    else
      v20 = (std::string::size_type)v37[1];
    v21 = std::string::append(&v50, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v36, (double)v52.u64[1] * 0.0009765625 * 0.0009765625);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v36;
    else
      v23 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    else
      v24 = v36.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v51, (const std::string::value_type *)v23, v24);
    v26 = *(timeval *)&v25->__r_.__value_.__l.__data_;
    v54.ru_stime.tv_sec = v25->__r_.__value_.__r.__words[2];
    v54.ru_utime = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "MB");
    if ((v35 & 0x80u) == 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    if ((v35 & 0x80u) == 0)
      v28 = v35;
    else
      v28 = (std::string::size_type)__p[1];
    v29 = std::string::append((std::string *)&v54, (const std::string::value_type *)v27, v28);
    *a1 = *v29;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if ((char)v35 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.ru_stime.tv_sec) < 0)
      operator delete((void *)v54.ru_utime.tv_sec);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if ((char)v38 < 0)
      operator delete(v37[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if ((char)v40 < 0)
      operator delete(v39[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if ((char)v43 < 0)
      operator delete(v42[0]);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if ((char)v45 < 0)
      operator delete(v44[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      tv_sec = (void *)v46.__r_.__value_.__r.__words[0];
LABEL_82:
      operator delete(tv_sec);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, "Memory Usage: ");
    cv3d::cv::gess::util::os::Byte2String((cv3d::cv::gess::util::os *)&ru_maxrss, &v51);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v51;
    else
      v31 = (std::string *)v51.__r_.__value_.__r.__words[0];
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    else
      v32 = v51.__r_.__value_.__l.__size_;
    v33 = std::string::append((std::string *)&v54, (const std::string::value_type *)v31, v32);
    *a1 = *v33;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v54.ru_stime.tv_sec) < 0)
    {
      tv_sec = (void *)v54.ru_utime.tv_sec;
      goto LABEL_82;
    }
  }
}

void sub_23C514F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23C515064()
{
  JUMPOUT(0x23C51500CLL);
}

void sub_23C51506C()
{
  JUMPOUT(0x23C51501CLL);
}

void sub_23C515074()
{
  JUMPOUT(0x23C51502CLL);
}

void sub_23C51507C()
{
  JUMPOUT(0x23C51503CLL);
}

void sub_23C515084()
{
  JUMPOUT(0x23C51504CLL);
}

uint64_t cv3d::cv::gess::util::os::ByteUsage(cv3d::cv::gess::util::os *this)
{
  rusage v2;

  getrusage(0, &v2);
  return v2.ru_maxrss;
}

BOOL cv3d::cv::gess::util::os::GetSystemMemoryInfo(int8x16_t *a1)
{
  kern_return_t v2;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  int8x16_t v6;

  task_info_outCnt = 10;
  v2 = task_info(*MEMORY[0x24BDAEC58], 0x12u, &task_info_out, &task_info_outCnt);
  if (!v2)
    *a1 = vextq_s8(v6, v6, 8uLL);
  return v2 == 0;
}

BOOL cv3d::cv::gess::util::os::RunningRosseta(cv3d::cv::gess::util::os *this)
{
  size_t v2;
  int v3;

  v3 = 0;
  v2 = 4;
  if (sysctlbyname("sysctl.proc_translated", &v3, &v2, 0, 0) != -1)
    return v3 == 1;
  __error();
  return 0;
}

uint64_t cv3d::cv::gess::util::os::IsFloatBitSizeDefault(cv3d::cv::gess::util::os *this)
{
  return 1;
}

uint64_t cv3d::cv::gess::io::SaveToJson(cv3d::cv::gess::io *this, const cv3d::cv::gess::alg::ConfigBake *a2, const std::__fs::filesystem::path *a3)
{
  uint64_t v3;
  _QWORD *ChartMethodCodesPairs;
  uint64_t *v5;
  cv3d::cv::gess::alg::internal *v6;
  _QWORD *PackMethodCodesPairs;
  uint64_t *v8;
  cv3d::cv::gess::alg::internal *v9;
  _QWORD *TbnCodesPairs;
  uint64_t *v11;
  cv3d::cv::gess::alg::internal *v12;
  _QWORD *CullModeCodesPairs;
  uint64_t *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v48;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i17;
  uint64_t i18;
  uint64_t i19;
  uint64_t i20;
  uint64_t i21;
  uint64_t i22;
  uint64_t i23;
  uint64_t i24;
  uint64_t i25;
  uint64_t i26;
  uint64_t i27;
  uint64_t i28;
  uint64_t i29;
  uint64_t i30;
  uint64_t i31;
  uint64_t i32;
  uint64_t i33;
  uint64_t i34;
  uint64_t i35;
  uint64_t i36;
  uint64_t i37;
  uint64_t i38;
  uint64_t i39;
  uint64_t i40;
  uint64_t i41;
  uint64_t i42;
  uint64_t i43;
  uint64_t i44;
  uint64_t i45;
  uint64_t i46;
  uint64_t i47;
  uint64_t i48;
  uint64_t i49;
  uint64_t i50;
  uint64_t i51;
  uint64_t i52;
  uint64_t i53;
  uint64_t i54;
  uint64_t i55;
  uint64_t i56;
  uint64_t i57;
  uint64_t i58;
  uint64_t i59;
  uint64_t i60;
  uint64_t i61;
  uint64_t *v116;
  const std::locale::facet *v117;
  _BYTE v119[8];
  uint64_t *v120;
  std::string __p;
  std::string v122;
  std::string v123;
  std::string v124;
  uint64_t v125;
  _QWORD v126[2];
  _BYTE v127[8];
  _QWORD v128[3];
  char v129;
  _QWORD v130[3];
  char v131;
  _QWORD v132[3];
  char v133;
  _QWORD v134[3];
  char v135;
  _QWORD v136[3];
  char v137;
  _QWORD v138[3];
  char v139;
  _QWORD v140[3];
  char v141;
  _QWORD v142[3];
  char v143;
  _QWORD v144[3];
  char v145;
  _QWORD v146[3];
  char v147;
  uint64_t v148;
  _BYTE v149[16];
  _BYTE *v150;
  char v151;
  _BYTE v152[8];
  _QWORD v153[2];
  char v154;
  _BYTE v155[8];
  uint64_t *v156[2];
  char v157;
  _BYTE v158[16];
  _BYTE *v159;
  char v160;
  _BYTE v161[16];
  uint64_t v162;
  char v163;
  _BYTE v164[16];
  _BYTE *v165;
  char v166;
  _BYTE v167[16];
  uint64_t v168;
  char v169;
  _BYTE v170[16];
  _BYTE *v171;
  char v172;
  _BYTE v173[8];
  _QWORD v174[2];
  char v175;
  _BYTE v176[16];
  _BYTE *v177;
  char v178;
  _BYTE v179[16];
  _BYTE *v180;
  char v181;
  _BYTE v182[16];
  _BYTE *v183;
  char v184;
  _BYTE v185[16];
  uint64_t v186;
  char v187;
  _BYTE v188[16];
  _BYTE *v189;
  char v190;
  _BYTE v191[8];
  _QWORD v192[2];
  char v193;
  _BYTE v194[16];
  _BYTE *v195;
  char v196;
  _BYTE v197[16];
  uint64_t v198;
  char v199;
  _BYTE v200[16];
  _BYTE *v201;
  char v202;
  _BYTE v203[8];
  _QWORD v204[2];
  char v205;
  _BYTE v206[16];
  _BYTE *v207;
  char v208;
  _QWORD v209[3];
  char v210;
  _BYTE v211[16];
  _BYTE *v212;
  char v213;
  _BYTE v214[16];
  _BYTE *v215;
  char v216;
  _BYTE v217[16];
  uint64_t v218;
  char v219;
  _BYTE v220[16];
  _BYTE *v221;
  char v222;
  _BYTE v223[8];
  _QWORD v224[2];
  char v225;
  _BYTE v226[16];
  _BYTE *v227;
  char v228;
  _BYTE v229[16];
  uint64_t v230;
  char v231;
  _BYTE v232[16];
  _BYTE *v233;
  char v234;
  _BYTE v235[8];
  _QWORD v236[2];
  char v237;
  _BYTE v238[16];
  _BYTE *v239;
  char v240;
  _QWORD v241[3];
  char v242;
  _BYTE v243[16];
  _BYTE *v244;
  char v245;
  _BYTE v246[16];
  _BYTE *v247;
  char v248;
  _BYTE v249[16];
  uint64_t v250;
  char v251;
  _BYTE v252[16];
  _BYTE *v253;
  char v254;
  _BYTE v255[8];
  _QWORD v256[2];
  char v257;
  _BYTE v258[16];
  _BYTE *v259;
  char v260;
  _BYTE v261[16];
  uint64_t v262;
  char v263;
  _BYTE v264[16];
  _BYTE *v265;
  char v266;
  _BYTE v267[8];
  _QWORD v268[2];
  char v269;
  _BYTE v270[16];
  _BYTE *v271;
  char v272;
  _QWORD v273[3];
  char v274;
  _BYTE v275[16];
  _BYTE *v276;
  char v277;
  _BYTE v278[16];
  _BYTE *v279;
  char v280;
  _BYTE v281[16];
  uint64_t v282;
  char v283;
  _BYTE v284[16];
  _BYTE *v285;
  char v286;
  _BYTE v287[8];
  _QWORD v288[2];
  char v289;
  _BYTE v290[16];
  _BYTE *v291;
  char v292;
  _BYTE v293[8];
  _QWORD v294[2];
  char v295;
  _BYTE v296[16];
  _BYTE *v297;
  char v298;
  _BYTE v299[16];
  uint64_t v300;
  char v301;
  _BYTE v302[16];
  _BYTE *v303;
  char v304;
  _BYTE v305[8];
  _QWORD v306[2];
  char v307;
  _BYTE v308[16];
  _BYTE *v309;
  char v310;
  _QWORD v311[3];
  char v312;
  _QWORD v313[3];
  char v314;
  _BYTE v315[16];
  _BYTE *v316;
  char v317;
  _BYTE v318[16];
  _BYTE *v319;
  char v320;
  _BYTE v321[16];
  uint64_t v322;
  char v323;
  _BYTE v324[16];
  _BYTE *v325;
  char v326;
  _BYTE v327[8];
  _QWORD v328[2];
  char v329;
  _BYTE v330[16];
  _BYTE *v331;
  char v332;
  _BYTE v333[16];
  uint64_t v334;
  char v335;
  _BYTE v336[16];
  _BYTE *v337;
  char v338;
  _BYTE v339[8];
  _QWORD v340[2];
  char v341;
  _BYTE v342[16];
  _BYTE *v343;
  char v344;
  _QWORD v345[3];
  char v346;
  _BYTE v347[16];
  _BYTE *v348;
  char v349;
  _BYTE v350[16];
  _BYTE *v351;
  char v352;
  _BYTE v353[16];
  uint64_t v354;
  char v355;
  _BYTE v356[16];
  _BYTE *v357;
  char v358;
  _BYTE v359[8];
  _QWORD v360[2];
  char v361;
  _BYTE v362[16];
  _BYTE *v363;
  char v364;
  _BYTE v365[16];
  uint64_t v366;
  char v367;
  _BYTE v368[16];
  _BYTE *v369;
  char v370;
  _BYTE v371[8];
  _QWORD v372[2];
  char v373;
  _BYTE v374[16];
  _BYTE *v375;
  char v376;
  _QWORD v377[3];
  char v378;
  _BYTE v379[16];
  _BYTE *v380;
  char v381;
  _BYTE v382[16];
  _BYTE *v383;
  char v384;
  _BYTE v385[16];
  uint64_t v386;
  char v387;
  _BYTE v388[16];
  _BYTE *v389;
  char v390;
  _BYTE v391[8];
  _QWORD v392[2];
  char v393;
  _BYTE v394[16];
  _BYTE *v395;
  char v396;
  _BYTE v397[16];
  uint64_t v398;
  char v399;
  _BYTE v400[16];
  _BYTE *v401;
  char v402;
  _BYTE v403[8];
  _QWORD v404[2];
  char v405;
  _BYTE v406[16];
  _BYTE *v407;
  char v408;
  _QWORD v409[3];
  char v410;
  _BYTE v411[16];
  _BYTE *v412;
  char v413;
  _BYTE v414[16];
  _BYTE *v415;
  char v416;
  _BYTE v417[16];
  uint64_t v418;
  char v419;
  _BYTE v420[16];
  _BYTE *v421;
  char v422;
  _BYTE v423[8];
  _QWORD v424[2];
  char v425;
  _BYTE v426[16];
  _BYTE *v427;
  char v428;
  _BYTE v429[16];
  uint64_t v430;
  char v431;
  _BYTE v432[16];
  _BYTE *v433;
  char v434;
  _BYTE v435[8];
  _QWORD v436[2];
  char v437;
  _BYTE v438[16];
  _BYTE *v439;
  char v440;
  _QWORD v441[3];
  char v442;
  _BYTE v443[16];
  _BYTE *v444;
  char v445;
  _BYTE v446[16];
  _BYTE *v447;
  char v448;
  _BYTE v449[16];
  uint64_t v450;
  char v451;
  _QWORD v452[3];
  char v453;
  _BYTE v454[8];
  _QWORD v455[2];
  char v456;
  _QWORD v457[3];
  char v458;
  _BYTE v459[8];
  _QWORD v460[2];
  char v461;
  _QWORD v462[3];
  char v463;
  _BYTE v464[16];
  uint64_t v465;
  char v466;
  _QWORD v467[3];
  char v468;
  _BYTE v469[8];
  _QWORD v470[2];
  char v471;
  _QWORD v472[3];
  char v473;
  _BYTE v474[8];
  _QWORD v475[2];
  char v476;
  _QWORD v477[3];
  char v478;
  _BYTE v479[16];
  uint64_t v480;
  char v481;
  _QWORD v482[3];
  char v483;
  _BYTE v484[8];
  _QWORD v485[2];
  char v486;
  _QWORD v487[3];
  char v488;
  _BYTE v489[16];
  uint64_t v490;
  char v491;
  _QWORD v492[3];
  char v493;
  _QWORD v494[3];
  char v495;
  _QWORD v496[3];
  char v497;
  _QWORD v498[3];
  char v499;
  _BYTE v500[16];
  _BYTE *v501;
  char v502;
  _QWORD v503[3];
  char v504;
  _BYTE v505[16];
  uint64_t v506;
  char v507;
  _QWORD v508[3];
  char v509;
  _BYTE v510[8];
  _QWORD v511[2];
  char v512;
  _QWORD v513[3];
  char v514;
  _BYTE v515[16];
  uint64_t v516;
  char v517;
  _QWORD v518[3];
  char v519;
  _BYTE v520[16];
  _BYTE *v521;
  char v522;
  _QWORD v523[3];
  char v524;
  _BYTE v525[16];
  uint64_t v526;
  char v527;
  _QWORD v528[3];
  char v529;
  _BYTE v530[8];
  _QWORD v531[2];
  char v532;
  _QWORD v533[3];
  char v534;
  _BYTE v535[8];
  _QWORD v536[2];
  char v537;
  _QWORD v538[3];
  char v539;
  _BYTE v540[16];
  uint64_t v541;
  char v542;
  _QWORD v543[3];
  char v544;
  _QWORD v545[3];
  char v546;
  _BYTE v547[16];
  _BYTE *v548;
  char v549;
  _QWORD v550[3];
  char v551;
  _BYTE v552[16];
  uint64_t v553;
  char v554;
  _QWORD v555[3];
  char v556;
  _BYTE v557[8];
  _QWORD v558[2];
  char v559;
  _QWORD v560[3];
  char v561;
  _BYTE v562[8];
  _QWORD v563[2];
  char v564;
  _QWORD v565[3];
  char v566;
  _BYTE v567[8];
  _QWORD v568[2];
  char v569;
  _QWORD v570[3];
  char v571;
  _QWORD v572[3];
  char v573;
  _BYTE v574[16];
  _BYTE *v575;
  char v576;
  _QWORD v577[3];
  char v578;
  _BYTE v579[16];
  uint64_t v580;
  char v581;
  std::locale v582[3];
  char v583;
  _QWORD v584[3];
  char v585;
  _QWORD v586[3];
  char v587;
  _QWORD v588[3];
  char v589;
  _QWORD v590[3];
  char v591;
  _BYTE v592[16];
  _BYTE *v593;
  char v594;
  uint64_t v595;

  v3 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v595 = *MEMORY[0x24BDAC8D0];
  ChartMethodCodesPairs = cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs((cv3d::cv::gess::alg::internal *)v3);
  v5 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::find<cv3d::cv::gess::alg::CHART_METHOD>(ChartMethodCodesPairs, (int *)(v3 + 12));
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  cv3d::cv::gess::alg::internal::ConvertCodesToString(v5 + 3, &v124);
  PackMethodCodesPairs = cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs(v6);
  v8 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::find<cv3d::cv::gess::alg::CHART_METHOD>(PackMethodCodesPairs, (int *)(v3 + 24));
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  cv3d::cv::gess::alg::internal::ConvertCodesToString(v8 + 3, &v123);
  TbnCodesPairs = cv3d::cv::gess::alg::internal::GetTbnCodesPairs(v9);
  v11 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::find<cv3d::cv::gess::alg::CHART_METHOD>(TbnCodesPairs, (int *)(v3 + 32));
  if (!v11)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  cv3d::cv::gess::alg::internal::ConvertCodesToString(v11 + 3, &v122);
  CullModeCodesPairs = cv3d::cv::gess::alg::internal::GetCullModeCodesPairs(v12);
  v14 = std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::find<cv3d::cv::gess::alg::CHART_METHOD>(CullModeCodesPairs, (int *)(v3 + 40));
  if (!v14)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  cv3d::cv::gess::alg::internal::ConvertCodesToString(v14 + 3, &__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v577, "simplify");
  v577[2] = v577;
  v578 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v565, "strength");
  v565[2] = v565;
  v566 = 1;
  v15 = *(float *)v3;
  v567[0] = 7;
  *(double *)v568 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v567);
  v568[1] = v567;
  v569 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v570, (uint64_t)v565, 2, 1, 2);
  v570[2] = v570;
  v571 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v560, "low_obj_face_min");
  v561 = 1;
  v16 = *(unsigned int *)(v3 + 4);
  v562[0] = 6;
  v560[2] = v560;
  v563[0] = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v562);
  v563[1] = v562;
  v564 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v572, (uint64_t)v560, 2, 1, 2);
  v572[2] = v572;
  v573 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v555, "low_obj_face_max");
  v556 = 1;
  v17 = *(unsigned int *)(v3 + 8);
  v557[0] = 6;
  v555[2] = v555;
  v558[0] = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v557);
  v558[1] = v557;
  v559 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v574, (uint64_t)v555, 2, 1, 2);
  v575 = v574;
  v576 = 1;
  v580 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v579, (uint64_t)v570, 3, 1, 2);
  v581 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v582, (uint64_t)v577, 2, 1, 2);
  v582[2].__locale_ = (std::locale::__imp *)v582;
  v583 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v550, "chart");
  v550[2] = v550;
  v551 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v538, "method");
  v538[2] = v538;
  v539 = 1;
  v541 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v540, (uint64_t)&v124);
  v542 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v543, (uint64_t)v538, 2, 1, 2);
  v543[2] = v543;
  v544 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v533, "min_chart_number");
  v534 = 1;
  v18 = *(unsigned int *)(v3 + 16);
  v535[0] = 6;
  v533[2] = v533;
  v536[0] = v18;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v535);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v535);
  v536[1] = v535;
  v537 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v545, (uint64_t)v533, 2, 1, 2);
  v545[2] = v545;
  v546 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[18],char [18],0>((uint64_t)v528, "max_stretch_ratio");
  v528[2] = v528;
  v529 = 1;
  v19 = *(float *)(v3 + 20);
  v530[0] = 7;
  *(double *)v531 = v19;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v530);
  v531[1] = v530;
  v532 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v547, (uint64_t)v528, 2, 1, 2);
  v548 = v547;
  v549 = 1;
  v553 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v552, (uint64_t)v543, 3, 1, 2);
  v554 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v584, (uint64_t)v550, 2, 1, 2);
  v584[2] = v584;
  v585 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v523, "pack");
  v523[2] = v523;
  v524 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v513, "method");
  v513[2] = v513;
  v514 = 1;
  v516 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v515, (uint64_t)&v123);
  v517 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v518, (uint64_t)v513, 2, 1, 2);
  v518[2] = v518;
  v519 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v508, "gutter");
  v508[2] = v508;
  v509 = 1;
  v20 = *(float *)(v3 + 28);
  v510[0] = 7;
  *(double *)v511 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v510);
  v511[1] = v510;
  v512 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v520, (uint64_t)v508, 2, 1, 2);
  v521 = v520;
  v522 = 1;
  v526 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v525, (uint64_t)v518, 2, 1, 2);
  v527 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v586, (uint64_t)v523, 2, 1, 2);
  v586[2] = v586;
  v587 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v503, "bake");
  v503[2] = v503;
  v504 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v487, "tangential_spec");
  v487[2] = v487;
  v488 = 1;
  v490 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v489, (uint64_t)&v122);
  v491 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v492, (uint64_t)v487, 2, 1, 2);
  v492[2] = v492;
  v493 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v482, "intersect_range");
  v482[2] = v482;
  v483 = 1;
  v21 = *(float *)(v3 + 36);
  v484[0] = 7;
  *(double *)v485 = v21;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v484);
  v485[1] = v484;
  v486 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v494, (uint64_t)v482, 2, 1, 2);
  v494[2] = v494;
  v495 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v477, "ao_cull_mode");
  v477[2] = v477;
  v478 = 1;
  v480 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v479, (uint64_t)&__p);
  v481 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v496, (uint64_t)v477, 2, 1, 2);
  v496[2] = v496;
  v497 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>((uint64_t)v472, "ao_range_absolute_far");
  v472[2] = v472;
  v473 = 1;
  v22 = *(float *)(v3 + 44);
  v474[0] = 7;
  *(double *)v475 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v474);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v474);
  v475[1] = v474;
  v476 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v498, (uint64_t)v472, 2, 1, 2);
  v498[2] = v498;
  v499 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[32],char [32],0>((uint64_t)v467, "ao_weaken_by_gradient_magnitude");
  v468 = 1;
  v23 = *(unsigned __int8 *)(v3 + 48);
  v469[0] = 4;
  v467[2] = v467;
  v470[0] = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v469);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v469);
  v470[1] = v469;
  v471 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v500, (uint64_t)v467, 2, 1, 2);
  v501 = v500;
  v502 = 1;
  v506 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v505, (uint64_t)v492, 5, 1, 2);
  v507 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v588, (uint64_t)v503, 2, 1, 2);
  v588[2] = v588;
  v589 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v462, "output");
  v462[2] = v462;
  v463 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v457, "map_resolution");
  v458 = 1;
  v24 = *(unsigned int *)(v3 + 56);
  v459[0] = 6;
  v457[2] = v457;
  v460[0] = v24;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v459);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v459);
  v460[1] = v459;
  v461 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v125, (uint64_t)v457, 2, 1, 2);
  v126[1] = &v125;
  v127[0] = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v452, "map_number");
  v453 = 1;
  v25 = *(unsigned int *)(v3 + 60);
  v454[0] = 6;
  v452[2] = v452;
  v455[0] = v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v454);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v454);
  v455[1] = v454;
  v456 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v128, (uint64_t)v452, 2, 1, 2);
  v128[2] = v128;
  v129 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)v446, "kd");
  v447 = v446;
  v448 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v432, "generate");
  v433 = v432;
  v434 = 1;
  v26 = *(unsigned __int8 *)(v3 + 64);
  v435[0] = 4;
  v436[0] = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v435);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v435);
  v436[1] = v435;
  v437 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v438, (uint64_t)v432, 2, 1, 2);
  v439 = v438;
  v440 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v426, "format");
  v427 = v426;
  v428 = 1;
  v430 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v429, v3 + 72);
  v431 = 1;
  v441[2] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v441, (uint64_t)v426, 2, 1, 2);
  v442 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v420, "lossy_compression_quality");
  v421 = v420;
  v422 = 1;
  v27 = *(float *)(v3 + 96);
  v423[0] = 7;
  *(double *)v424 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v423);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v423);
  v424[1] = v423;
  v425 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v443, (uint64_t)v420, 2, 1, 2);
  v444 = v443;
  v445 = 1;
  v450 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v449, (uint64_t)v438, 3, 1, 2);
  v451 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v130, (uint64_t)v446, 2, 1, 2);
  v130[2] = v130;
  v131 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v414, "norm");
  v415 = v414;
  v416 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v400, "generate");
  v401 = v400;
  v402 = 1;
  v28 = *(unsigned __int8 *)(v3 + 104);
  v403[0] = 4;
  v404[0] = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v403);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v403);
  v404[1] = v403;
  v405 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v406, (uint64_t)v400, 2, 1, 2);
  v407 = v406;
  v408 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v394, "format");
  v395 = v394;
  v396 = 1;
  v398 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v397, v3 + 112);
  v399 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v409, (uint64_t)v394, 2, 1, 2);
  v409[2] = v409;
  v410 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v388, "lossy_compression_quality");
  v389 = v388;
  v390 = 1;
  v29 = *(float *)(v3 + 136);
  v391[0] = 7;
  *(double *)v392 = v29;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v391);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v391);
  v392[1] = v391;
  v393 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v411, (uint64_t)v388, 2, 1, 2);
  v412 = v411;
  v413 = 1;
  v418 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v417, (uint64_t)v406, 3, 1, 2);
  v419 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v132, (uint64_t)v414, 2, 1, 2);
  v132[2] = v132;
  v133 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v382, "onorm");
  v383 = v382;
  v384 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v368, "generate");
  v369 = v368;
  v370 = 1;
  v30 = *(unsigned __int8 *)(v3 + 144);
  v371[0] = 4;
  v372[0] = v30;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v371);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v371);
  v372[1] = v371;
  v373 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v374, (uint64_t)v368, 2, 1, 2);
  v375 = v374;
  v376 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v362, "format");
  v363 = v362;
  v364 = 1;
  v366 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v365, v3 + 152);
  v367 = 1;
  v377[2] = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v377, (uint64_t)v362, 2, 1, 2);
  v378 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v356, "lossy_compression_quality");
  v357 = v356;
  v358 = 1;
  v31 = *(float *)(v3 + 176);
  v359[0] = 7;
  *(double *)v360 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v359);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v359);
  v360[1] = v359;
  v361 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v379, (uint64_t)v356, 2, 1, 2);
  v380 = v379;
  v381 = 1;
  v386 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v385, (uint64_t)v374, 3, 1, 2);
  v387 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v134, (uint64_t)v382, 2, 1, 2);
  v134[2] = v134;
  v135 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>((uint64_t)v350, "ao");
  v351 = v350;
  v352 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v336, "generate");
  v337 = v336;
  v338 = 1;
  v32 = *(unsigned __int8 *)(v3 + 184);
  v339[0] = 4;
  v340[0] = v32;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v339);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v339);
  v340[1] = v339;
  v341 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v342, (uint64_t)v336, 2, 1, 2);
  v343 = v342;
  v344 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v330, "format");
  v331 = v330;
  v332 = 1;
  v334 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v333, v3 + 192);
  v335 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v345, (uint64_t)v330, 2, 1, 2);
  v345[2] = v345;
  v346 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v324, "lossy_compression_quality");
  v325 = v324;
  v326 = 1;
  v33 = *(float *)(v3 + 216);
  v327[0] = 7;
  *(double *)v328 = v33;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v327);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v327);
  v328[1] = v327;
  v329 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v347, (uint64_t)v324, 2, 1, 2);
  v348 = v347;
  v349 = 1;
  v354 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v353, (uint64_t)v342, 3, 1, 2);
  v355 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v136, (uint64_t)v350, 2, 1, 2);
  v136[2] = v136;
  v137 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v318, "disp");
  v319 = v318;
  v320 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v302, "generate");
  v303 = v302;
  v304 = 1;
  v34 = *(unsigned __int8 *)(v3 + 224);
  v305[0] = 4;
  v306[0] = v34;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v305);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v305);
  v306[1] = v305;
  v307 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v308, (uint64_t)v302, 2, 1, 2);
  v309 = v308;
  v310 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v296, "format");
  v297 = v296;
  v298 = 1;
  v300 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v299, v3 + 232);
  v301 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v311, (uint64_t)v296, 2, 1, 2);
  v311[2] = v311;
  v312 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v290, "depend_on_normal_map");
  v291 = v290;
  v292 = 1;
  v35 = *(unsigned __int8 *)(v3 + 260);
  v293[0] = 4;
  v294[0] = v35;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v293);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v293);
  v294[1] = v293;
  v295 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v313, (uint64_t)v290, 2, 1, 2);
  v313[2] = v313;
  v314 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v284, "lossy_compression_quality");
  v285 = v284;
  v286 = 1;
  v36 = *(float *)(v3 + 256);
  v287[0] = 7;
  *(double *)v288 = v36;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v287);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v287);
  v288[1] = v287;
  v289 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v315, (uint64_t)v284, 2, 1, 2);
  v316 = v315;
  v317 = 1;
  v322 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v321, (uint64_t)v308, 4, 1, 2);
  v323 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v138, (uint64_t)v318, 2, 1, 2);
  v138[2] = v138;
  v139 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v278, "roughness");
  v279 = v278;
  v280 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v264, "generate");
  v265 = v264;
  v266 = 1;
  v37 = *(unsigned __int8 *)(v3 + 264);
  v267[0] = 4;
  v268[0] = v37;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v267);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v267);
  v268[1] = v267;
  v269 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v270, (uint64_t)v264, 2, 1, 2);
  v271 = v270;
  v272 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v258, "format");
  v259 = v258;
  v260 = 1;
  v262 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v261, v3 + 272);
  v263 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v273, (uint64_t)v258, 2, 1, 2);
  v273[2] = v273;
  v274 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v252, "lossy_compression_quality");
  v253 = v252;
  v254 = 1;
  v38 = *(float *)(v3 + 296);
  v255[0] = 7;
  *(double *)v256 = v38;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
  v256[1] = v255;
  v257 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v275, (uint64_t)v252, 2, 1, 2);
  v276 = v275;
  v277 = 1;
  v282 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v281, (uint64_t)v270, 3, 1, 2);
  v283 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v140, (uint64_t)v278, 2, 1, 2);
  v140[2] = v140;
  v141 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v246, "mask");
  v247 = v246;
  v248 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v232, "generate");
  v233 = v232;
  v234 = 1;
  v39 = *(unsigned __int8 *)(v3 + 304);
  v235[0] = 4;
  v236[0] = v39;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
  v236[1] = v235;
  v237 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v238, (uint64_t)v232, 2, 1, 2);
  v239 = v238;
  v240 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v226, "format");
  v227 = v226;
  v228 = 1;
  v230 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v229, v3 + 312);
  v231 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v241, (uint64_t)v226, 2, 1, 2);
  v241[2] = v241;
  v242 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v220, "lossy_compression_quality");
  v221 = v220;
  v222 = 1;
  v40 = *(float *)(v3 + 336);
  v223[0] = 7;
  *(double *)v224 = v40;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v223);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v223);
  v224[1] = v223;
  v225 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v243, (uint64_t)v220, 2, 1, 2);
  v244 = v243;
  v245 = 1;
  v250 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v249, (uint64_t)v238, 3, 1, 2);
  v251 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v142, (uint64_t)v246, 2, 1, 2);
  v142[2] = v142;
  v143 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v214, "position");
  v215 = v214;
  v216 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v200, "generate");
  v201 = v200;
  v202 = 1;
  v41 = *(unsigned __int8 *)(v3 + 344);
  v203[0] = 4;
  v204[0] = v41;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v203);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v203);
  v204[1] = v203;
  v205 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v206, (uint64_t)v200, 2, 1, 2);
  v207 = v206;
  v208 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v194, "format");
  v195 = v194;
  v196 = 1;
  v198 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v197, v3 + 352);
  v199 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v209, (uint64_t)v194, 2, 1, 2);
  v209[2] = v209;
  v210 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>((uint64_t)v188, "lossy_compression_quality");
  v189 = v188;
  v190 = 1;
  v42 = *(float *)(v3 + 376);
  v191[0] = 7;
  *(double *)v192 = v42;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v191);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v191);
  v192[1] = v191;
  v193 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v211, (uint64_t)v188, 2, 1, 2);
  v212 = v211;
  v213 = 1;
  v218 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v217, (uint64_t)v206, 3, 1, 2);
  v219 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v144, (uint64_t)v214, 2, 1, 2);
  v144[2] = v144;
  v145 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v182, "usda_output");
  v183 = v182;
  v184 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v170, "generate");
  v171 = v170;
  v172 = 1;
  v43 = *(unsigned __int8 *)(v3 + 424);
  v173[0] = 4;
  v174[0] = v43;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v173);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v173);
  v174[1] = v173;
  v175 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v176, (uint64_t)v170, 2, 1, 2);
  v177 = v176;
  v178 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v164, "format");
  v165 = v164;
  v166 = 1;
  v168 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v167, v3 + 432);
  v169 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v179, (uint64_t)v164, 2, 1, 2);
  v180 = v179;
  v181 = 1;
  v186 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v185, (uint64_t)v176, 2, 1, 2);
  v187 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v146, (uint64_t)v182, 2, 1, 2);
  v146[2] = v146;
  v147 = 1;
  v465 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v464, (uint64_t)&v125, 11, 1, 2);
  v466 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v590, (uint64_t)v462, 2, 1, 2);
  v590[2] = v590;
  v591 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)v158, "system");
  v159 = v158;
  v160 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v149, "gpu_ids");
  v150 = v149;
  v151 = 1;
  v152[0] = 0;
  v153[0] = 0;
  nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>((uint64_t)v152, v3 + 456);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v152);
  v153[1] = v152;
  v154 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v155, (uint64_t)v149, 2, 1, 2);
  v156[1] = (uint64_t *)v155;
  v157 = 1;
  v162 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v161, (uint64_t)v155, 1, 1, 2);
  v163 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v592, (uint64_t)v158, 2, 1, 2);
  v593 = v592;
  v594 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v119, (uint64_t)v582, 6, 1, 2);
  for (i = 0; i != -192; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v592[i]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v592[i + 8], v592[i]);
  }
  for (j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v161[j]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v161[j + 8], v161[j]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v155);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v156, v155[0]);
  for (k = 0; k != -8; k -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v152[k * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v153[k], v152[k * 8]);
  }
  for (m = 0; m != -64; m -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v464[m]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v464[m + 8], v464[m]);
  }
  v48 = 44;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v123.__r_.__value_.__r.__words[v48 + 2]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v124 + v48 * 8), LOBYTE(v123.__r_.__value_.__r.__words[v48 + 2]));
    v48 -= 4;
  }
  while (v48 * 8);
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v185[v48 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v185[v48 * 8 + 8], v185[v48 * 8]);
    v48 -= 4;
  }
  while (v48 != -8);
  for (n = 0; n != -64; n -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v179[n]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v179[n + 8], v179[n]);
  }
  for (ii = 0; ii != -64; ii -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v167[ii]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v167[ii + 8], v167[ii]);
  }
  for (jj = 0; jj != -8; jj -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v173[jj * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v174[jj], v173[jj * 8]);
  }
  for (kk = 0; kk != -64; kk -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v217[kk]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v217[kk + 8], v217[kk]);
  }
  for (mm = 0; mm != -96; mm -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v211[mm]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v211[mm + 8], v211[mm]);
  }
  for (nn = 0; nn != -8; nn -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v191[nn * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v192[nn], v191[nn * 8]);
  }
  for (i1 = 0; i1 != -64; i1 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v197[i1]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v197[i1 + 8], v197[i1]);
  }
  for (i2 = 0; i2 != -8; i2 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v203[i2 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v204[i2], v203[i2 * 8]);
  }
  for (i3 = 0; i3 != -64; i3 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v249[i3]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v249[i3 + 8], v249[i3]);
  }
  for (i4 = 0; i4 != -96; i4 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v243[i4]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v243[i4 + 8], v243[i4]);
  }
  for (i5 = 0; i5 != -8; i5 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v223[i5 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v224[i5], v223[i5 * 8]);
  }
  for (i6 = 0; i6 != -64; i6 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v229[i6]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v229[i6 + 8], v229[i6]);
  }
  for (i7 = 0; i7 != -8; i7 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v235[i7 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v236[i7], v235[i7 * 8]);
  }
  for (i8 = 0; i8 != -64; i8 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v281[i8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v281[i8 + 8], v281[i8]);
  }
  for (i9 = 0; i9 != -96; i9 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v275[i9]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v275[i9 + 8], v275[i9]);
  }
  for (i10 = 0; i10 != -8; i10 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v255[i10 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v256[i10], v255[i10 * 8]);
  }
  for (i11 = 0; i11 != -64; i11 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v261[i11]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v261[i11 + 8], v261[i11]);
  }
  for (i12 = 0; i12 != -8; i12 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v267[i12 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v268[i12], v267[i12 * 8]);
  }
  for (i13 = 0; i13 != -64; i13 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v321[i13]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v321[i13 + 8], v321[i13]);
  }
  for (i14 = 0; i14 != -128; i14 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v315[i14]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v315[i14 + 8], v315[i14]);
  }
  for (i15 = 0; i15 != -8; i15 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v287[i15 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v288[i15], v287[i15 * 8]);
  }
  for (i16 = 0; i16 != -8; i16 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v293[i16 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v294[i16], v293[i16 * 8]);
  }
  for (i17 = 0; i17 != -64; i17 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v299[i17]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v299[i17 + 8], v299[i17]);
  }
  for (i18 = 0; i18 != -8; i18 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v305[i18 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v306[i18], v305[i18 * 8]);
  }
  for (i19 = 0; i19 != -64; i19 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v353[i19]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v353[i19 + 8], v353[i19]);
  }
  for (i20 = 0; i20 != -96; i20 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v347[i20]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v347[i20 + 8], v347[i20]);
  }
  for (i21 = 0; i21 != -8; i21 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v327[i21 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v328[i21], v327[i21 * 8]);
  }
  for (i22 = 0; i22 != -64; i22 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v333[i22]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v333[i22 + 8], v333[i22]);
  }
  for (i23 = 0; i23 != -8; i23 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v339[i23 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v340[i23], v339[i23 * 8]);
  }
  for (i24 = 0; i24 != -64; i24 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v385[i24]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v385[i24 + 8], v385[i24]);
  }
  for (i25 = 0; i25 != -96; i25 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v379[i25]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v379[i25 + 8], v379[i25]);
  }
  for (i26 = 0; i26 != -8; i26 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v359[i26 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v360[i26], v359[i26 * 8]);
  }
  for (i27 = 0; i27 != -64; i27 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v365[i27]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v365[i27 + 8], v365[i27]);
  }
  for (i28 = 0; i28 != -8; i28 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v371[i28 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v372[i28], v371[i28 * 8]);
  }
  for (i29 = 0; i29 != -64; i29 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v417[i29]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v417[i29 + 8], v417[i29]);
  }
  for (i30 = 0; i30 != -96; i30 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v411[i30]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v411[i30 + 8], v411[i30]);
  }
  for (i31 = 0; i31 != -8; i31 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v391[i31 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v392[i31], v391[i31 * 8]);
  }
  for (i32 = 0; i32 != -64; i32 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v397[i32]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v397[i32 + 8], v397[i32]);
  }
  for (i33 = 0; i33 != -8; i33 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v403[i33 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v404[i33], v403[i33 * 8]);
  }
  for (i34 = 0; i34 != -64; i34 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v449[i34]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v449[i34 + 8], v449[i34]);
  }
  for (i35 = 0; i35 != -96; i35 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v443[i35]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v443[i35 + 8], v443[i35]);
  }
  for (i36 = 0; i36 != -8; i36 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v423[i36 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v424[i36], v423[i36 * 8]);
  }
  for (i37 = 0; i37 != -64; i37 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v429[i37]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v429[i37 + 8], v429[i37]);
  }
  for (i38 = 0; i38 != -8; i38 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v435[i38 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v436[i38], v435[i38 * 8]);
  }
  for (i39 = 0; i39 != -8; i39 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v454[i39 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v455[i39], v454[i39 * 8]);
  }
  for (i40 = 0; i40 != -8; i40 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v459[i40 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v460[i40], v459[i40 * 8]);
  }
  for (i41 = 0; i41 != -64; i41 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v505[i41]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v505[i41 + 8], v505[i41]);
  }
  for (i42 = 0; i42 != -160; i42 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v500[i42]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v500[i42 + 8], v500[i42]);
  }
  for (i43 = 0; i43 != -8; i43 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v469[i43 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v470[i43], v469[i43 * 8]);
  }
  for (i44 = 0; i44 != -8; i44 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v474[i44 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v475[i44], v474[i44 * 8]);
  }
  for (i45 = 0; i45 != -64; i45 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v479[i45]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v479[i45 + 8], v479[i45]);
  }
  for (i46 = 0; i46 != -8; i46 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v484[i46 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v485[i46], v484[i46 * 8]);
  }
  for (i47 = 0; i47 != -64; i47 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v489[i47]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v489[i47 + 8], v489[i47]);
  }
  for (i48 = 0; i48 != -64; i48 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v525[i48]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v525[i48 + 8], v525[i48]);
  }
  for (i49 = 0; i49 != -64; i49 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v520[i49]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v520[i49 + 8], v520[i49]);
  }
  for (i50 = 0; i50 != -8; i50 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v510[i50 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v511[i50], v510[i50 * 8]);
  }
  for (i51 = 0; i51 != -64; i51 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v515[i51]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v515[i51 + 8], v515[i51]);
  }
  for (i52 = 0; i52 != -64; i52 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v552[i52]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v552[i52 + 8], v552[i52]);
  }
  for (i53 = 0; i53 != -96; i53 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v547[i53]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v547[i53 + 8], v547[i53]);
  }
  for (i54 = 0; i54 != -8; i54 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v530[i54 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v531[i54], v530[i54 * 8]);
  }
  for (i55 = 0; i55 != -8; i55 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v535[i55 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v536[i55], v535[i55 * 8]);
  }
  for (i56 = 0; i56 != -64; i56 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v540[i56]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v540[i56 + 8], v540[i56]);
  }
  for (i57 = 0; i57 != -64; i57 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v579[i57]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v579[i57 + 8], v579[i57]);
  }
  for (i58 = 0; i58 != -96; i58 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v574[i58]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v574[i58 + 8], v574[i58]);
  }
  for (i59 = 0; i59 != -8; i59 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v557[i59 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v558[i59], v557[i59 * 8]);
  }
  for (i60 = 0; i60 != -8; i60 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v562[i60 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v563[i60], v562[i60 * 8]);
  }
  for (i61 = 0; i61 != -8; i61 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v567[i61 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v568[i61], v567[i61 * 8]);
  }
  std::ofstream::basic_ofstream(&v125);
  *(_QWORD *)&v127[*(_QWORD *)(v125 - 24)] = 2;
  v116 = nlohmann::operator<<(&v125, (uint64_t)v119);
  std::ios_base::getloc((const std::ios_base *)((char *)v116 + *(_QWORD *)(*v116 - 24)));
  v117 = std::locale::use_facet(v582, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v117->__vftable[2].~facet_0)(v117, 10);
  std::locale::~locale(v582);
  std::ostream::put();
  std::ostream::flush();
  v125 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v126[-1] + *(_QWORD *)(v125 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](v126);
  std::ostream::~ostream();
  MEMORY[0x242621128](&v148);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v119);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v120, v119[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  return 1;
}

void sub_23C517ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _Unwind_Exception *exception_object, uint64_t *a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a20);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  _Unwind_Resume(a1);
}

void sub_23C519284()
{
  JUMPOUT(0x23C51880CLL);
}

void sub_23C51928C()
{
  JUMPOUT(0x23C51881CLL);
}

void sub_23C519294()
{
  JUMPOUT(0x23C51882CLL);
}

uint64_t **nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

uint64_t *nlohmann::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const std::ios_base *v10;
  std::ios_base::fmtflags fmtflags;
  const std::locale::facet *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::locale v22;
  void (***v23[81])(void);

  v23[80] = *(void (****)(void))MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49BF0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)off_250D49C28;
  v7[1].__shared_owners_ = (uint64_t)a1;
  v19 = v7;
  v20 = &v7[1].__vftable;
  v21 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(v4 - 24));
  fmtflags = v10[1].__fmtflags_;
  if (fmtflags == -1)
  {
    std::ios_base::getloc(v10);
    v12 = std::locale::use_facet(&v22, MEMORY[0x24BEDB350]);
    fmtflags = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 32);
    std::locale::~locale(&v22);
    v10[1].__fmtflags_ = fmtflags;
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer((uint64_t)v23, (uint64_t)&v20, (char)fmtflags, 0);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(v23, a2, v6 > 0, 0, v6 & ~(v6 >> 63), 0);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v23);
  return a1;
}

void sub_23C51949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, std::locale a13, char a14)
{
  std::locale::~locale(&a13);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x242620F0C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x242621128](a1 + 52);
  return a1;
}

uint64_t cv3d::cv::gess::io::LoadFromJson(cv3d::cv::gess::io *this, cv3d::cv::gess::alg::ConfigBake *a2, const std::__fs::filesystem::path *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  void **v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  void **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  void **v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  void **v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  void **v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  void **v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  void **v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t *v123;
  void **v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t *v135;
  void **v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  void **v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t *v156;
  std::string __p;
  unsigned __int8 v159[8];
  uint64_t *v160;
  _QWORD v161[2];
  uint64_t v162;
  _QWORD v163[20];

  v163[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v161);
  v159[0] = 0;
  v160 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v159);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v159);
  nlohmann::operator>>(v161, (uint64_t)v159);
  v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "simplify");
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v4, "strength");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v5, (float *)&__p);
  *(_DWORD *)this = __p.__r_.__value_.__l.__data_;
  v6 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "simplify");
  v7 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v6, "low_obj_face_min");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v7, (unsigned int *)&__p);
  *((_DWORD *)this + 1) = __p.__r_.__value_.__l.__data_;
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "simplify");
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v8, "low_obj_face_max");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v9, (unsigned int *)&__p);
  *((_DWORD *)this + 2) = __p.__r_.__value_.__l.__data_;
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "chart");
  v11 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v10, "method");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v11, &__p);
  *((_DWORD *)this + 3) = cv3d::cv::gess::alg::internal::ParseLineToChartMethod((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "chart");
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v12, "min_chart_number");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v13, (unsigned int *)&__p);
  *((_DWORD *)this + 4) = __p.__r_.__value_.__l.__data_;
  v14 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "chart");
  v15 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v14, "max_stretch_ratio");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v15, (float *)&__p);
  *((_DWORD *)this + 5) = __p.__r_.__value_.__l.__data_;
  v16 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "pack");
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v16, "method");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v17, &__p);
  *((_DWORD *)this + 6) = cv3d::cv::gess::alg::internal::ParseLineToPackMethod((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "pack");
  v19 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v18, "gutter");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v19, (float *)&__p);
  *((_DWORD *)this + 7) = __p.__r_.__value_.__l.__data_;
  v20 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v20, "tangential_spec");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v21, &__p);
  *((_DWORD *)this + 8) = cv3d::cv::gess::alg::internal::ParseLineToTBN((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
  v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v22, "intersect_range");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v23, (float *)&__p);
  *((_DWORD *)this + 9) = __p.__r_.__value_.__l.__data_;
  v24 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v24, "ao_range_absolute_far");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v25))
  {
    v26 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
    v27 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v26, "ao_range_absolute_far");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v27, (float *)&__p);
    *((_DWORD *)this + 11) = __p.__r_.__value_.__l.__data_;
  }
  v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
  v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v28, "ao_cull_mode");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v29))
  {
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
    v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v30, "ao_cull_mode");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v31, &__p);
    *((_DWORD *)this + 10) = cv3d::cv::gess::alg::internal::ParseLineToCullMode((uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
  v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v32, "ao_weaken_by_gradient_magnitude");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v33))
  {
    v34 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "bake");
    v35 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v34, "ao_weaken_by_gradient_magnitude");
    __p.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v35, &__p);
    *((_BYTE *)this + 48) = __p.__r_.__value_.__s.__data_[0];
  }
  v36 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v36, "map_resolution");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v37, (unsigned int *)&__p);
  *((_DWORD *)this + 14) = __p.__r_.__value_.__l.__data_;
  v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v39 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v38, "map_number");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v39, (unsigned int *)&__p);
  *((_DWORD *)this + 15) = __p.__r_.__value_.__l.__data_;
  v40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v41 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v40, "usda_output");
  v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v41, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v42, &__p);
  *((_BYTE *)this + 424) = __p.__r_.__value_.__s.__data_[0];
  v43 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v44 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v43, "usda_output");
  v45 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v44, "format");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v45))
  {
    v46 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v47 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v46, "usda_output");
    v48 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v47, "format");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v48, &__p);
    v49 = (void **)((char *)this + 432);
    if (*((char *)this + 455) < 0)
      operator delete(*v49);
    *(_OWORD *)v49 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v50 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v51 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v50, "kd");
  v52 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v51, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v52, &__p);
  *((_BYTE *)this + 64) = __p.__r_.__value_.__s.__data_[0];
  v53 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v54 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v53, "kd");
  v55 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v54, "format");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v55, &__p);
  v56 = (void **)((char *)this + 72);
  if (*((char *)this + 95) < 0)
    operator delete(*v56);
  *(_OWORD *)v56 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 11) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  v57 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v58 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v57, "kd");
  v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v58, "lossy_compression_quality");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v59, (float *)&__p);
  *((_DWORD *)this + 24) = __p.__r_.__value_.__l.__data_;
  v60 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v61 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v60, "norm");
  v62 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v61, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v62, &__p);
  *((_BYTE *)this + 104) = __p.__r_.__value_.__s.__data_[0];
  v63 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v64 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v63, "norm");
  v65 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v64, "format");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v65, &__p);
  v66 = (void **)((char *)this + 112);
  if (*((char *)this + 135) < 0)
    operator delete(*v66);
  *(_OWORD *)v66 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  v67 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v68 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v67, "norm");
  v69 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v68, "lossy_compression_quality");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v69, (float *)&__p);
  *((_DWORD *)this + 34) = __p.__r_.__value_.__l.__data_;
  v70 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v71 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v70, "onorm");
  v72 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v71, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v72, &__p);
  *((_BYTE *)this + 144) = __p.__r_.__value_.__s.__data_[0];
  v73 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v74 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v73, "onorm");
  v75 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v74, "format");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v75, &__p);
  v76 = (void **)((char *)this + 152);
  if (*((char *)this + 175) < 0)
    operator delete(*v76);
  *(_OWORD *)v76 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 21) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  v77 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v77, "onorm");
  v79 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v78, "lossy_compression_quality");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v79, (float *)&__p);
  *((_DWORD *)this + 44) = __p.__r_.__value_.__l.__data_;
  v80 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v81 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v80, "ao");
  v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v81, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v82, &__p);
  *((_BYTE *)this + 184) = __p.__r_.__value_.__s.__data_[0];
  v83 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v84 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v83, "ao");
  v85 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v84, "format");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v85, &__p);
  v86 = (void **)((char *)this + 192);
  if (*((char *)this + 215) < 0)
    operator delete(*v86);
  *(_OWORD *)v86 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 26) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  v87 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v87, "ao");
  v89 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v88, "lossy_compression_quality");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v89, (float *)&__p);
  *((_DWORD *)this + 54) = __p.__r_.__value_.__l.__data_;
  v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v91 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v90, "disp");
  v92 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v91, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v92, &__p);
  *((_BYTE *)this + 224) = __p.__r_.__value_.__s.__data_[0];
  v93 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v93, "disp");
  v95 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v94, "format");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v95, &__p);
  v96 = (void **)((char *)this + 232);
  if (*((char *)this + 255) < 0)
    operator delete(*v96);
  *(_OWORD *)v96 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 31) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  v97 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v97, "disp");
  v99 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v98, "lossy_compression_quality");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v99, (float *)&__p);
  *((_DWORD *)this + 64) = __p.__r_.__value_.__l.__data_;
  v100 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v101 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v100, "disp");
  v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v101, "depend_on_normal_map");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v102))
  {
    v103 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v104 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v103, "disp");
    v105 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v104, "depend_on_normal_map");
    __p.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v105, &__p);
    *((_BYTE *)this + 260) = __p.__r_.__value_.__s.__data_[0];
  }
  v106 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v107 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v106, "roughness");
  v108 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v107, "generate");
  __p.__r_.__value_.__s.__data_[0] = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v108, &__p);
  *((_BYTE *)this + 264) = __p.__r_.__value_.__s.__data_[0];
  v109 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v110 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v109, "roughness");
  v111 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v110, "format");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v111, &__p);
  v112 = (void **)((char *)this + 272);
  if (*((char *)this + 295) < 0)
    operator delete(*v112);
  *(_OWORD *)v112 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((_QWORD *)this + 36) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  v113 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v113, "roughness");
  v115 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v114, "lossy_compression_quality");
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v115, (float *)&__p);
  *((_DWORD *)this + 74) = __p.__r_.__value_.__l.__data_;
  v116 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v116, "mask");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v117))
  {
    v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v119 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v118, "mask");
    v120 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v119, "generate");
    __p.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v120, &__p);
    *((_BYTE *)this + 304) = __p.__r_.__value_.__s.__data_[0];
    v121 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v122 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v121, "mask");
    v123 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v122, "format");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v123, &__p);
    v124 = (void **)((char *)this + 312);
    if (*((char *)this + 335) < 0)
      operator delete(*v124);
    *(_OWORD *)v124 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 41) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    v125 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v126 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v125, "mask");
    v127 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v126, "lossy_compression_quality");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v127, (float *)&__p);
    *((_DWORD *)this + 84) = __p.__r_.__value_.__l.__data_;
  }
  v128 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v129 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v128, "position");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v129))
  {
    v130 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v131 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v130, "position");
    v132 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v131, "generate");
    __p.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v132, &__p);
    *((_BYTE *)this + 344) = __p.__r_.__value_.__s.__data_[0];
    v133 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v134 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v133, "position");
    v135 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v134, "format");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v135, &__p);
    v136 = (void **)((char *)this + 352);
    if (*((char *)this + 375) < 0)
      operator delete(*v136);
    *(_OWORD *)v136 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 46) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    v137 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v138 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v137, "position");
    v139 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v138, "lossy_compression_quality");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v139, (float *)&__p);
    *((_DWORD *)this + 94) = __p.__r_.__value_.__l.__data_;
  }
  v140 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
  v141 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v140, "eo");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v141))
  {
    v142 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v143 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v142, "eo");
    v144 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v143, "generate");
    __p.__r_.__value_.__s.__data_[0] = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((char *)v144, &__p);
    *((_BYTE *)this + 384) = __p.__r_.__value_.__s.__data_[0];
    v145 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v146 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v145, "eo");
    v147 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v146, "format");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>((uint64_t)v147, &__p);
    v148 = (void **)((char *)this + 392);
    if (*((char *)this + 415) < 0)
      operator delete(*v148);
    *(_OWORD *)v148 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 51) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    v149 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "output");
    v150 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v149, "eo");
    v151 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v150, "lossy_compression_quality");
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>((char *)v151, (float *)&__p);
    *((_DWORD *)this + 104) = __p.__r_.__value_.__l.__data_;
  }
  v152 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "system");
  if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v152))
  {
    v153 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "system");
    v154 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v153, "gpu_ids");
    if (nlohmann::operator!=<decltype(nullptr),0>((unsigned __int8 *)v154))
    {
      v155 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v159, "system");
      v156 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>((unsigned __int8 *)v155, "gpu_ids");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>((char *)v156, &__p);
      if ((std::string *)((char *)this + 456) != &__p)
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)this + 456, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v159);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v160, v159[0]);
  v161[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v161 + *(_QWORD *)(v161[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x242620F0C](&v162);
  std::istream::~istream();
  MEMORY[0x242621128](v163);
  return 1;
}

void sub_23C51A31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a15);
  std::ifstream::~ifstream(&a17);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::operator>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  void *v14[20];

  v14[19] = *(void **)MEMORY[0x24BDAC8D0];
  v9[0] = a1;
  v9[1] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v11 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>((uint64_t)v9, (uint64_t)v10, 1, 0, (uint64_t)v12);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse((uint64_t)v12, 0, a2);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v14);
  v4 = v13;
  if (v13 == v12)
  {
    v5 = 4;
    v4 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v11;
  if (v11 == v10)
  {
    v7 = 4;
    v6 = v10;
    goto LABEL_10;
  }
  if (v11)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)v9);
  return a1;
}

void sub_23C51A4C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list v3;
  uint64_t v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD *);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser((uint64_t)va2);
  v3 = (va_list)v12;
  if (v12 == (_QWORD *)va1)
  {
    v4 = 4;
    va_copy(v3, va1);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)va);
  _Unwind_Resume(a1);
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  nlohmann::detail::exception *exception;
  char *v10;
  std::string v11;
  std::string __p;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v10 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v11, v10);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a string argument with ", &v11, &__p);
    nlohmann::detail::type_error::create(305, (uint64_t)&__p, exception);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v7 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7 + 7;
}

void sub_23C51A640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::operator!=<decltype(nullptr),0>(unsigned __int8 *a1)
{
  uint64_t v2;
  unsigned __int8 v4[8];
  uint64_t *v5;

  v4[0] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v2 = nlohmann::operator==(a1, v4) ^ 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return v2;
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x242620F0C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x242621128](a1 + 53);
  return a1;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object || m_value.object != nullptr";
      v2 = 17716;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array || m_value.array != nullptr";
      v2 = 17717;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string || m_value.string != nullptr";
      v2 = 17718;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary || m_value.binary != nullptr";
      v2 = 17719;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v25;
      do
      {
        if (v6 >= v26)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v25 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v24, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v22, **a1, (*a1)[1], &v24);
  }
  for (i = v25; v24 != v25; i = v25)
  {
    v12 = *(_BYTE *)(i - 16);
    v11 = i - 16;
    LOBYTE(v22) = v12;
    v23 = *(uint64_t **)(v11 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v24, v25 - 16);
    if (v22 == 1)
    {
      v13 = v23;
      v14 = v23 + 1;
      v15 = (_QWORD *)*v23;
      if ((uint64_t *)*v23 != v23 + 1)
      {
        v16 = v25;
        do
        {
          if (v16 >= v26)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v24, (uint64_t)(v15 + 7));
          }
          else
          {
            *(_BYTE *)v16 = *((_BYTE *)v15 + 56);
            *(_QWORD *)(v16 + 8) = v15[8];
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v15 + 7));
            *((_BYTE *)v15 + 56) = 0;
            v15[8] = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v25 = v16;
          v17 = (_QWORD *)v15[1];
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (_QWORD *)v15[2];
              v9 = *v18 == (_QWORD)v15;
              v15 = v18;
            }
            while (!v9);
          }
          v15 = v18;
        }
        while (v18 != v14);
        v13 = v23;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)v13, (char *)v13[1]);
      *v13 = (uint64_t)(v13 + 1);
      v13[2] = 0;
      v13[1] = 0;
    }
    else if (v22 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>((uint64_t)&v27, *v23, v23[1], &v24);
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](v23);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((uint64_t)*a1, (char *)(*a1)[1]);
      goto LABEL_41;
    case 1:
      v22 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
      goto LABEL_41;
    case 2:
      v19 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_42;
      v20 = (void *)*v19;
      break;
    case 7:
      v19 = *a1;
      v21 = (void *)**a1;
      if (!v21)
        goto LABEL_42;
      v19[1] = (uint64_t)v21;
      v20 = v21;
      break;
    default:
      goto LABEL_43;
  }
  operator delete(v20);
LABEL_41:
  v19 = *a1;
LABEL_42:
  operator delete(v19);
LABEL_43:
  v22 = (void **)&v24;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v22);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23C51ACD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 16;
    v5 = (unsigned __int8 *)(v2 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v6 = *v5;
      v5 -= 16;
      result = (_QWORD *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v4 + 8, v6);
      v7 = v4 == v3;
      v4 = (uint64_t)v5;
    }
    while (!v7);
  }
  v1[1] = v3;
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3 - 16;
    do
    {
      *(_BYTE *)(v7 - 16) = *(_BYTE *)v9;
      v10 = v7 - 16;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v9 + 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
      *(_BYTE *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
      v7 = *((_QWORD *)&v17 + 1) - 16;
      *((_QWORD *)&v17 + 1) -= 16;
      v11 = v9 == a5;
      v9 -= 16;
    }
    while (!v11);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>,std::reverse_iterator<std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *i;
  uint64_t result;

  for (i = *(unsigned __int8 **)(a2 + 32); i != *(unsigned __int8 **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)i);
    result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i + 8, *i);
    i = (unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 16);
  }
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v2 - 16);
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v2 - 8, *(unsigned __int8 *)(v2 - 16));
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v7;

  v5 = a2;
  if (a2 != a3)
  {
    v7 = a4[1];
    do
    {
      if (v7 >= a4[2])
      {
        v7 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a4, v5);
      }
      else
      {
        *(_BYTE *)v7 = *(_BYTE *)v5;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v7);
        v7 += 16;
      }
      a4[1] = v7;
      v5 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v12];
  *(_BYTE *)v11 = *(_BYTE *)a2;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v15[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23C51B18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    v5 = v4 - 16;
    v6 = (unsigned __int8 *)(v4 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
      v7 = *v6;
      v6 -= 16;
      result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v5 + 8, v7);
      v8 = v5 == a2;
      v5 = (uint64_t)v6;
    }
    while (!v8);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a2 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(uint64_t a1, uint64_t a2)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a2 + 32), *(unsigned __int8 *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::find<cv3d::cv::gess::alg::CHART_METHOD>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[9]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[9]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B46C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[17]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[17]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B4FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[6]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B58C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[7]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B61C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_23C51B6CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[18],char [18],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[18]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[18]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B75C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[5]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B7EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[16]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[16]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B87C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[13]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B90C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[22]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51B99C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[32],char [32],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[32]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[32]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BA2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[15]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BABC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[11]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[11]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BB4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[3],char [3],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[3]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BBDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[26],char [26],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[26]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[26]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BC6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[21]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BCFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[10]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BD8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[12]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BE1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>(uint64_t a1, char *a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[8]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51BEAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::external_constructor<(nlohmann::detail::value_t)2>::construct<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t *v6;

  *(_BYTE *)a1 = 2;
  v3 = *(uint64_t **)a2;
  v5 = *(uint64_t **)(a2 + 8);
  v6 = v3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(&v6, &v5);
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(uint64_t **a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = *a2 - *a1;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(v4, v5, v6, v7);
  return v4;
}

void sub_23C51BF60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned long const*,unsigned long const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C51BFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,unsigned long const*,unsigned long const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)(v4 + 8) = 0;
      v7 = *v6++;
      *(_BYTE *)v4 = 6;
      *(_QWORD *)(v4 + 8) = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
      v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8), **(_QWORD **)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>,std::reverse_iterator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  BOOL v9;

  if (a3 != a5)
  {
    v6 = a3 - 16;
    v7 = (unsigned __int8 *)(a3 - 16);
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
      v8 = *v7;
      v7 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v6 + 8), v8);
      v9 = v6 == a5;
      v6 = (uint64_t)v7;
    }
    while (!v9);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v10;
  _BYTE **v11;
  _BYTE *v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  nlohmann::detail::exception *exception;
  uint64_t v19;
  uint64_t v20[3];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (!a3)
  {
LABEL_7:
    v13 = 1;
    if ((a4 & 1) != 0)
      goto LABEL_17;
    goto LABEL_10;
  }
  v10 = 32 * a3;
  v11 = (_BYTE **)(a2 + 16);
  while (1)
  {
    v12 = *v11;
    if (**v11 != 2
      || *(_QWORD *)(*((_QWORD *)v12 + 1) + 8) - **((_QWORD **)v12 + 1) != 32
      || *(_BYTE *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]((uint64_t)v12, 0) != 3)
    {
      break;
    }
    v11 += 4;
    v10 -= 32;
    if (!v10)
      goto LABEL_7;
  }
  v13 = 0;
  if ((a4 & 1) == 0)
  {
LABEL_10:
    if (a5 == 2)
      v14 = 0;
    else
      v14 = v13;
    if (a5 != 1)
      LOBYTE(v13) = 1;
    if ((v13 & 1) == 0)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "cannot create object from initializer list");
      nlohmann::detail::type_error::create(301, (uint64_t)v20, exception);
    }
    v13 = v14;
  }
LABEL_17:
  v15 = a2 + 32 * a3;
  if (v13)
  {
    *(_BYTE *)a1 = 1;
    v16 = operator new(0x18uLL);
    v16[2] = 0;
    v16[1] = 0;
    *v16 = v16 + 1;
    *(_QWORD *)(a1 + 8) = v16;
    std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(a2, v15, a1);
  }
  else
  {
    *(_BYTE *)a1 = 2;
    v19 = v15;
    v20[0] = a2;
    *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v20, &v19);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_23C51C2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::type_error::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &off_250D49BA0;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_23C51C3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::type_error::~type_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2426211B8);
}

uint64_t std::for_each[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::(std::initializer_list<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>,BOOL,nlohmann::detail::value_t)::{lambda(nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[8];
  uint64_t *v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(v5, (uint64_t)v7);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(*(uint64_t ***)(a3 + 8), *(void ***)(*v8 + 8), *(_QWORD *)(*v8 + 8), *v8 + 16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      v5 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_23C51C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t **v9;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v9, a9);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = operator new(0x18uLL);
  v5 = *a1;
  v6 = *a2;
  v7 = (*a2 - *a1) >> 5;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(v4, v5, v6, v7);
  return v4;
}

void sub_23C51C554(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[](uint64_t a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v6, v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use operator[] with a numeric argument with ", &v6, &v7);
    nlohmann::detail::type_error::create(305, (uint64_t)&v7, exception);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_23C51C614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

const char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 9)
    return "number";
  else
    return off_250D49D48[v1];
}

void nlohmann::detail::exception::name(int a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, ".", 1uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "] ", 2uLL);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_23C51C7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

nlohmann::detail::exception *nlohmann::detail::exception::exception(nlohmann::detail::exception *this, int a2, const char *a3)
{
  *(_QWORD *)this = &off_250D49BC8;
  *((_DWORD *)this + 2) = a2;
  MEMORY[0x242620E28]((char *)this + 16, a3);
  return this;
}

void sub_23C51C8BC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

void nlohmann::detail::exception::~exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2426211B8);
}

_BYTE *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(_BYTE *a1, int a2)
{
  _QWORD *v3;

  switch(a2)
  {
    case 1:
      v3 = operator new(0x18uLL);
      v3[2] = 0;
      v3[1] = 0;
      *v3 = v3 + 1;
      goto LABEL_8;
    case 2:
      v3 = operator new(0x18uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      goto LABEL_8;
    case 3:
      v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>((char *)&unk_23C62207F);
      goto LABEL_8;
    case 4:
      *a1 = 0;
      return a1;
    case 8:
      v3 = operator new(0x20uLL);
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
      *((_WORD *)v3 + 12) = 0;
LABEL_8:
      *(_QWORD *)a1 = v3;
      break;
    default:
      *(_QWORD *)a1 = 0;
      break;
  }
  return a1;
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const(&)[1]>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_23C51CA70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 24))
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a2, v3);
  *(_BYTE *)a2 = *(_BYTE *)v3;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v3 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  std::string *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 2:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(*(uint64_t **)(a2 + 8));
      goto LABEL_8;
    case 3:
      v4 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_8;
    case 4:
      v4 = (std::string *)*(unsigned __int8 *)(a2 + 8);
      goto LABEL_8;
    case 5:
    case 6:
    case 7:
      v4 = *(std::string **)(a2 + 8);
      goto LABEL_8;
    case 8:
      v4 = (std::string *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(*(_QWORD *)(a2 + 8));
LABEL_8:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      break;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)operator new(0x18uLL);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](v2, a1);
  return v2;
}

void sub_23C51CBC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_23C51CC10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void **std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C51CF14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(&this[1], (char *)a2 + 24);
  return this;
}

void sub_23C51CF88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>(*(_QWORD *)a1, (uint64_t)__p + 32);
  if (__p)
    operator delete(__p);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(v2, *a1, a1[1], (a1[1] - *a1) >> 4);
  return v2;
}

void sub_23C51D030(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C51D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v4, v6);
      v6 += 16;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23C51D154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<nlohmann::byte_container_with_subtype<std::vector<unsigned char>>,nlohmann::byte_container_with_subtype<std::vector<unsigned char>> const&>(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x20uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v2, *(const void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  *((_WORD *)v2 + 12) = *(_WORD *)(a1 + 24);
  return v2;
}

void sub_23C51D1B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C51D220(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::string>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _OWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t result;

  v7 = a1 + 8;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  v8[2] = *(_OWORD *)a2;
  *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_BYTE *)a3;
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a3 + 8);
  *((_BYTE *)v8 + 56) = v9;
  v10 = (uint64_t)v8 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

_QWORD *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<tinyexr::HufDec>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C51D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const*,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v4, v6);
      v6 += 32;
      v4 = v11 + 16;
      v11 += 16;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23C51D458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1, uint64_t a2)
{
  _BYTE v4[8];
  uint64_t *v5;

  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(a2, (uint64_t)v4);
  *(_BYTE *)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v5;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  v4[0] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  return a1;
}

_QWORD *std::ofstream::basic_ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x242620F00](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB840];
  v3 = MEMORY[0x24BEDB840] + 64;
  a1[52] = MEMORY[0x24BEDB840] + 64;
  v4 = a1 + 1;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[52] = v3;
  MEMORY[0x242620F00](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_23C51D5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x242621128](v1 + 416);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(void (****a1)(void), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v11)(void);
  void (**v12)(void);
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(void);
  unsigned int v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD **v29;
  uint64_t *v30;
  _QWORD **v31;
  uint64_t (*v32)(void);
  void (*v34)(void);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t (***v38)(void);
  _QWORD **v39;
  unsigned __int8 **v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  _QWORD **v63;
  uint64_t v64;
  void (*v65)(void);
  unint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD **v74;

  switch(*(_BYTE *)a2)
  {
    case 0:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 1:
      v12 = **a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v11 = (uint64_t (*)(void))v12[1];
        return v11();
      }
      if (a3)
      {
        v12[1]();
        v13 = a6 + a5;
        v14 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v15 = (unint64_t)a1[77];
          if (v15 >= v13)
            goto LABEL_7;
        }
        else
        {
          v15 = *((unsigned __int8 *)a1 + 631);
          if (v13 <= v15)
          {
LABEL_7:
            v16 = *(_QWORD **)(a2 + 8);
            v17 = (_QWORD *)*v16;
            if (v16[2] == 1)
            {
              v18 = (_QWORD *)*v16;
            }
            else
            {
              v66 = 0;
              do
              {
                v67 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v67 = (_QWORD **)*v14;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v67, (a6 + a5));
                ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v17 + 4, a4);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v17 + 7, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v68 = (_QWORD *)v17[1];
                if (v68)
                {
                  do
                  {
                    v18 = v68;
                    v68 = (_QWORD *)*v68;
                  }
                  while (v68);
                }
                else
                {
                  do
                  {
                    v18 = (_QWORD *)v17[2];
                    v50 = *v18 == (_QWORD)v17;
                    v17 = v18;
                  }
                  while (!v50);
                }
                ++v66;
                v16 = *(_QWORD **)(a2 + 8);
                v17 = v18;
              }
              while (v66 < v16[2] - 1);
            }
            v69 = v16 + 1;
            if (v18 == v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v70 = (_QWORD *)v18[1];
            if (v70)
            {
              do
              {
                v71 = v70;
                v70 = (_QWORD *)*v70;
              }
              while (v70);
            }
            else
            {
              v73 = v18;
              do
              {
                v71 = (_QWORD *)v73[2];
                v50 = *v71 == (_QWORD)v73;
                v73 = v71;
              }
              while (!v50);
            }
            if (v71 != v69)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v74 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v74 = (_QWORD **)*v14;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v74, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v18 + 4, a4);
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v18 + 7, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            v65 = (**a1)[1];
            goto LABEL_108;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v15, 32);
        goto LABEL_7;
      }
      (*v12)();
      v45 = *(_QWORD *)(a2 + 8);
      v46 = *(_QWORD **)v45;
      if (*(_QWORD *)(v45 + 16) != 1)
      {
        v47 = 0;
        do
        {
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v48 = (_QWORD *)v46[1];
          v49 = v46;
          if (v48)
          {
            do
            {
              v46 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v46 = (_QWORD *)v49[2];
              v50 = *v46 == (_QWORD)v49;
              v49 = v46;
            }
            while (!v50);
          }
          ++v47;
          v45 = *(_QWORD *)(a2 + 8);
        }
        while (v47 < *(_QWORD *)(v45 + 16) - 1);
      }
      v51 = (_QWORD *)(v45 + 8);
      if (v46 == v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      v52 = (_QWORD *)v46[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        v72 = v46;
        do
        {
          v53 = (_QWORD *)v72[2];
          v50 = *v53 == (_QWORD)v72;
          v72 = v53;
        }
        while (!v50);
      }
      if (v53 != v51)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v46 + 4, a4);
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v46 + 7, 0, a4, a5, a6);
LABEL_109:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 2:
      v19 = *(uint64_t **)(a2 + 8);
      v20 = *v19;
      v21 = v19[1];
      v22 = **a1;
      if (v20 == v21)
      {
        v11 = (uint64_t (*)(void))v22[1];
        return v11();
      }
      if (a3)
      {
        v22[1]();
        v23 = a6 + a5;
        v24 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v25 = (unint64_t)a1[77];
          if (v25 >= v23)
            goto LABEL_13;
        }
        else
        {
          v25 = *((unsigned __int8 *)a1 + 631);
          if (v23 <= v25)
          {
LABEL_13:
            v26 = *(uint64_t **)(a2 + 8);
            v28 = *v26;
            v27 = v26[1];
            if (v28 != v27 - 16)
            {
              do
              {
                v29 = a1 + 76;
                if (*((char *)a1 + 631) < 0)
                  v29 = (_QWORD **)*v24;
                ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v29, (a6 + a5));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v28, 1, a4, a5, (a6 + a5));
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ",\n", 2);
                v28 += 16;
                v30 = *(uint64_t **)(a2 + 8);
                v27 = v30[1];
              }
              while (v28 != v27 - 16);
              v28 = *v30;
            }
            if (v28 == v27)
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
            v31 = a1 + 76;
            if (*((char *)a1 + 631) < 0)
              v31 = (_QWORD **)*v24;
            ((void (*)(void (***)(void), _QWORD **, _QWORD))(**a1)[1])(*a1, v31, (a6 + a5));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, a5, (a6 + a5));
            ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
            if (*((char *)a1 + 631) < 0)
              v24 = (_QWORD *)*v24;
            ((void (*)(void (***)(void), _QWORD *, _QWORD))(**a1)[1])(*a1, v24, a6);
            goto LABEL_95;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v25, 32);
        goto LABEL_13;
      }
      (*v22)();
      v54 = *(uint64_t **)(a2 + 8);
      v56 = *v54;
      v55 = v54[1];
      if (v56 == v55 - 16)
      {
        v57 = v56;
      }
      else
      {
        v57 = v56;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v57 += 16;
          v58 = *(uint64_t **)(a2 + 8);
          v55 = v58[1];
        }
        while (v57 != v55 - 16);
        v56 = *v58;
      }
      if (v56 == v55)
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v57, 0, a4, a5, a6);
LABEL_95:
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 3:
      (***a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8), a4);
      v32 = (uint64_t (*)(void))***a1;
      return v32();
    case 4:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 5:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 6:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(a1, *(_QWORD *)(a2 + 8));
    case 7:
      return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float((char *)a1, *(double *)(a2 + 8));
    case 8:
      v34 = (**a1)[1];
      if (a3)
      {
        v34();
        v35 = (a6 + a5);
        v36 = a1 + 76;
        if (*((char *)a1 + 631) < 0)
        {
          v37 = (unint64_t)a1[77];
          if (v37 >= v35)
          {
            v38 = (uint64_t (***)(void))*a1;
            goto LABEL_62;
          }
        }
        else
        {
          v37 = *((unsigned __int8 *)a1 + 631);
          if (v35 <= v37)
          {
            v38 = (uint64_t (***)(void))*a1;
            v39 = a1 + 76;
            goto LABEL_63;
          }
        }
        std::string::resize((std::string *)(a1 + 76), 2 * v37, 32);
        v38 = (uint64_t (***)(void))*a1;
        v39 = a1 + 76;
        if ((*((char *)a1 + 631) & 0x80000000) == 0)
        {
LABEL_63:
          ((void (*)(uint64_t (***)(void), _QWORD **, uint64_t))(*v38)[1])(v38, v39, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"bytes\": [", 10);
          v59 = *(unsigned __int8 ***)(a2 + 8);
          v61 = *v59;
          v60 = v59[1];
          if (v61 != v60)
          {
            if (v61 != v60 - 1)
            {
              do
              {
                v62 = *v61++;
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v62);
                ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, ", ", 2);
              }
              while (v61 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
            }
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v61);
          }
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\n", 3);
          v63 = a1 + 76;
          if (*((char *)a1 + 631) < 0)
            v63 = (_QWORD **)*v36;
          ((void (*)(void (***)(void), _QWORD **, uint64_t))(**a1)[1])(*a1, v63, v35);
          ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "\"subtype\": ", 11);
          v64 = *(_QWORD *)(a2 + 8);
          if (*(_BYTE *)(v64 + 25))
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v64 + 24));
          else
            ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "null", 4);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 10);
          v65 = (**a1)[1];
LABEL_108:
          v65();
          goto LABEL_109;
        }
LABEL_62:
        v39 = (_QWORD **)*v36;
        goto LABEL_63;
      }
      v34();
      v40 = *(unsigned __int8 ***)(a2 + 8);
      v42 = *v40;
      v41 = v40[1];
      if (v42 != v41)
      {
        while (v42 != v41 - 1)
        {
          v43 = *v42++;
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v43);
          ((void (*)(void (***)(void), uint64_t))***a1)(*a1, 44);
          v41 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v42);
      }
      ((void (*)(void (***)(void), const char *, uint64_t))(**a1)[1])(*a1, "],\"subtype\":", 12);
      v44 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(v44 + 25))
      {
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v44 + 24));
        goto LABEL_109;
      }
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    case 9:
      v11 = (uint64_t (*)(void))(**a1)[1];
      return v11();
    default:
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump();
  }
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_stream_adapter<char>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_character()
{
  return std::ostream::put();
}

uint64_t nlohmann::detail::output_stream_adapter<char>::write_characters()
{
  return std::ostream::write();
}

void nlohmann::detail::output_stream_adapter<char>::~output_stream_adapter()
{
  JUMPOUT(0x2426211B8);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::serializer(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  lconv *v7;
  char *thousands_sep;
  char *decimal_point;
  int8x16_t *v10;
  int8x16_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v7 = localeconv();
  *(_QWORD *)(a1 + 80) = v7;
  thousands_sep = v7->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  *(_BYTE *)(a1 + 88) = (_BYTE)thousands_sep;
  decimal_point = v7->decimal_point;
  if (v7->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  *(_OWORD *)(a1 + 90) = 0u;
  *(_BYTE *)(a1 + 89) = (_BYTE)decimal_point;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  *(_OWORD *)(a1 + 138) = 0u;
  *(_OWORD *)(a1 + 154) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(_OWORD *)(a1 + 186) = 0u;
  *(_OWORD *)(a1 + 202) = 0u;
  *(_OWORD *)(a1 + 218) = 0u;
  *(_OWORD *)(a1 + 234) = 0u;
  *(_OWORD *)(a1 + 250) = 0u;
  *(_OWORD *)(a1 + 266) = 0u;
  *(_OWORD *)(a1 + 282) = 0u;
  *(_OWORD *)(a1 + 298) = 0u;
  *(_OWORD *)(a1 + 314) = 0u;
  *(_OWORD *)(a1 + 330) = 0u;
  *(_OWORD *)(a1 + 346) = 0u;
  *(_OWORD *)(a1 + 362) = 0u;
  *(_OWORD *)(a1 + 378) = 0u;
  *(_OWORD *)(a1 + 394) = 0u;
  *(_OWORD *)(a1 + 410) = 0u;
  *(_OWORD *)(a1 + 426) = 0u;
  *(_OWORD *)(a1 + 442) = 0u;
  *(_OWORD *)(a1 + 458) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 490) = 0u;
  *(_OWORD *)(a1 + 506) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 538) = 0u;
  *(_OWORD *)(a1 + 554) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(_BYTE *)(a1 + 602) = a3;
  v10 = (int8x16_t *)operator new(0x208uLL);
  *(_QWORD *)(a1 + 608) = v10;
  *(_QWORD *)(a1 + 624) = 0x8000000000000208;
  v11 = vdupq_n_s8(a3);
  *(_QWORD *)(a1 + 616) = 512;
  *v10 = v11;
  v10[1] = v11;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v11;
  v10[5] = v11;
  v10[6] = v11;
  v10[7] = v11;
  v10[8] = v11;
  v10[9] = v11;
  v10[10] = v11;
  v10[11] = v11;
  v10[12] = v11;
  v10[13] = v11;
  v10[14] = v11;
  v10[15] = v11;
  v10[16] = v11;
  v10[17] = v11;
  v10[18] = v11;
  v10[19] = v11;
  v10[20] = v11;
  v10[21] = v11;
  v10[22] = v11;
  v10[23] = v11;
  v10[24] = v11;
  v10[25] = v11;
  v10[26] = v11;
  v10[27] = v11;
  v10[28] = v11;
  v10[29] = v11;
  v10[30] = v11;
  v10[31] = v11;
  v10[32].i8[0] = 0;
  *(_DWORD *)(a1 + 632) = a4;
  return a1;
}

void sub_23C51E22C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t (*v25)(void);
  int v26;
  nlohmann::detail::exception *exception;
  char *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t *v32;
  nlohmann::detail::exception *v33;
  std::string v34;
  std::string v35;
  std::string v36;
  __int128 v37;
  std::string::size_type v38;
  char __str[8];
  std::string::size_type v40;
  char v41;
  char v42;
  unsigned int v43[3];

  v42 = 0;
  LOBYTE(v3) = *((char *)a2 + 23) < 0;
  v4 = *((unsigned __int8 *)a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = a2[1];
  if (!v4)
    return result;
  v7 = (_QWORD *)result;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v43[0] = 0;
  v12 = result + 90;
  do
  {
    if ((v3 & 1) != 0)
      v13 = (uint64_t *)*a2;
    else
      v13 = a2;
    v14 = *((unsigned __int8 *)v13 + v8);
    result = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(&v42, v43, v14);
    if ((_DWORD)result == 1)
    {
      v16 = *((_DWORD *)v7 + 158);
      if ((v16 - 1) >= 2)
      {
        if (!v16)
        {
          v41 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v14);
          exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
          std::to_string(&v34, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("invalid UTF-8 byte at index ", &v34, &v35);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": 0x", &v35, &v36);
          if (v41 >= 0)
            v28 = __str;
          else
            v28 = *(char **)__str;
          if (v41 >= 0)
            v29 = v41;
          else
            v29 = v40;
          v30 = std::string::append(&v36, v28, v29);
          v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          v38 = v30->__r_.__value_.__r.__words[2];
          v37 = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create(316, (uint64_t)&v37, exception);
        }
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
      }
      v17 = v9 != 0;
      if (v16 == 1)
      {
        v18 = v12 + v10;
        if (a3)
        {
          *(_DWORD *)v18 = 1717990748;
          *(_WORD *)(v18 + 4) = 25702;
          v10 += 6;
        }
        else
        {
          v10 += 3;
          *(_WORD *)v18 = -16401;
          *(_BYTE *)(v18 + 2) = -67;
        }
        if ((unint64_t)(v10 - 500) <= 0xC)
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
          v10 = 0;
        }
      }
      v9 = 0;
      v8 -= v17;
      v42 = 0;
      v11 = v10;
    }
    else if ((_DWORD)result)
    {
      if ((a3 & 1) == 0)
      {
        if (*((char *)a2 + 23) >= 0)
          v19 = a2;
        else
          v19 = (uint64_t *)*a2;
        *(_BYTE *)(v12 + v11++) = *((_BYTE *)v19 + v8);
      }
      ++v9;
    }
    else
    {
      switch(v43[0])
      {
        case 8u:
          v15 = 25180;
          goto LABEL_43;
        case 9u:
          v15 = 29788;
          goto LABEL_43;
        case 0xAu:
          v15 = 28252;
          goto LABEL_43;
        case 0xBu:
          goto LABEL_29;
        case 0xCu:
          v15 = 26204;
          goto LABEL_43;
        case 0xDu:
          v15 = 29276;
          goto LABEL_43;
        default:
          if (v43[0] == 34)
          {
            v15 = 8796;
            goto LABEL_43;
          }
          if (v43[0] == 92)
          {
            v15 = 23644;
LABEL_43:
            *(_WORD *)(v12 + v11) = v15;
            v11 += 2;
            goto LABEL_44;
          }
LABEL_29:
          if (v43[0] > 0x7E)
            v20 = a3;
          else
            v20 = 0;
          if (v43[0] < 0x20 || v20)
          {
            v24 = (char *)(v12 + v11);
            if (HIWORD(v43[0]))
            {
              result = snprintf(v24, 0xDuLL, "\\u%04x\\u%04x", (unsigned __int16)((v43[0] >> 10) - 10304), v43[0] & 0x3FF | 0xDC00);
              v11 += 12;
            }
            else
            {
              result = snprintf(v24, 7uLL, "\\u%04x", v43[0]);
              v11 += 6;
            }
          }
          else
          {
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            *(_BYTE *)(v12 + v11++) = *((_BYTE *)v21 + v8);
          }
LABEL_44:
          if ((unint64_t)(v11 - 500) > 0xC)
          {
            v9 = 0;
            v10 = v11;
          }
          else
          {
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v11);
            v11 = 0;
            v10 = 0;
            v9 = 0;
          }
          break;
      }
    }
    ++v8;
    v22 = *((char *)a2 + 23);
    v3 = v22 >> 31;
    v23 = a2[1];
    if (v22 >= 0)
      v23 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v23);
  if (v42)
  {
    v26 = *((_DWORD *)v7 + 158);
    switch(v26)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 8))(*v7, v12, v10);
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 2:
        v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
        break;
      case 0:
        v41 = 3;
        *(_DWORD *)__str = 0;
        v32 = (uint64_t *)*a2;
        if (v22 >= 0)
          v32 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v32 + v23 - 1));
        v33 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create(316, (uint64_t)&v37, v33);
      default:
        nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped();
    }
    return v25();
  }
  else if (v11)
  {
    v25 = *(uint64_t (**)(void))(*(_QWORD *)*v7 + 8);
    return v25();
  }
  return result;
}

void sub_23C51E720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;

  if (a37 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v39 - 97) < 0)
        operator delete(*(void **)(v39 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 >= 0xA)
  {
    if (a2 >= 0x64)
    {
      *(_WORD *)((char *)a1 + 17) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[(a2 - 100 * ((41 * a2) >> 12))];
      v5 = (char *)a1 + 17;
      v2 = (41 * a2) >> 12;
      goto LABEL_10;
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  v5 = (char *)a1 + v3 + 16;
  if (a2 < 0xA)
  {
LABEL_10:
    *(v5 - 1) = v2 | 0x30;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  *((_WORD *)v5 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(unsigned char)::digits_to_99[a2];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  char *v4;
  int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  v3 = a1 + 2;
  if ((v2 & 0x8000000000000000) != 0)
  {
    *v3 = 45;
    v2 = -(uint64_t)v2;
    if (v2 >= 0xA)
    {
      v6 = 4;
      v10 = v2;
      while (1)
      {
        if (v10 <= 0x63)
        {
          v6 -= 2;
          goto LABEL_24;
        }
        if (v10 <= 0x3E7)
          break;
        if (v10 >> 4 < 0x271)
          goto LABEL_24;
        v6 += 4;
        v9 = v10 >= 0x186A0;
        v10 /= 0x2710uLL;
        if (!v9)
        {
          v6 -= 3;
          goto LABEL_24;
        }
      }
      --v6;
    }
    else
    {
      v6 = 1;
    }
LABEL_24:
    v7 = v6 + 1;
  }
  else
  {
    if (v2 < 0xA)
    {
      v4 = (char *)a1 + 17;
LABEL_33:
      *(v4 - 1) = v2 + 48;
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
    }
    v7 = 4;
    v8 = v2;
    while (1)
    {
      if (v8 <= 0x63)
      {
        v7 -= 2;
        goto LABEL_25;
      }
      if (v8 <= 0x3E7)
        break;
      if (v8 >> 4 < 0x271)
        goto LABEL_25;
      v7 += 4;
      v9 = v8 >= 0x186A0;
      v8 /= 0x2710uLL;
      if (!v9)
      {
        v7 -= 3;
        goto LABEL_25;
      }
    }
    --v7;
  }
LABEL_25:
  if (v7 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v4 = &v3[v7];
  if (v2 < 0x64)
  {
    v11 = v2;
  }
  else
  {
    do
    {
      v11 = v2 / 0x64;
      *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v2 % 0x64];
      v4 -= 2;
      v12 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v12 > 0x270);
  }
  if (v11 < 0xA)
  {
    LOBYTE(v2) = v11;
    goto LABEL_33;
  }
  *((_WORD *)v4 - 1) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>(long long)::digits_to_99[v11];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  v2 = a2;
  if (a2 < 0xA)
  {
    v3 = (uint64_t)a1 + 17;
LABEL_21:
    *(_BYTE *)(v3 - 1) = v2 + 48;
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  v5 = 4;
  v6 = a2;
  while (1)
  {
    if (v6 <= 0x63)
    {
      v5 -= 2;
      goto LABEL_13;
    }
    if (v6 <= 0x3E7)
      break;
    if (v6 >> 4 < 0x271)
      goto LABEL_13;
    v7 = v6 >> 5;
    v6 /= 0x2710uLL;
    v5 += 4;
    if (v7 <= 0xC34)
    {
      v5 -= 3;
      goto LABEL_13;
    }
  }
  --v5;
LABEL_13:
  if (v5 >= 0x3F)
    nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<long long,0>();
  v3 = (uint64_t)a1 + v5 + 16;
  if (a2 < 0x64)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = v2 / 0x64;
      *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v2 % 0x64];
      v3 -= 2;
      v9 = v2 >> 4;
      v2 /= 0x64uLL;
    }
    while (v9 > 0x270);
  }
  if (v8 < 0xA)
  {
    LOBYTE(v2) = v8;
    goto LABEL_21;
  }
  *(_WORD *)(v3 - 2) = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[v8];
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_float(char *a1, double a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  const char *v6;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = *(_QWORD *)a1;
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v6 = "null";
    v3 = 4;
  }
  else
  {
    v3 = nlohmann::detail::to_chars<double>(a1 + 16, (uint64_t)(a1 + 80), a2) - (a1 + 16);
    v4 = *(uint64_t (**)(uint64_t, const char *, uint64_t))(**(_QWORD **)a1 + 8);
    v5 = *(_QWORD *)a1;
    v6 = a1 + 16;
  }
  return v4(v5, v6, v3);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(_BYTE *a1, unsigned int *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[a3];
  if (*a1)
    v4 = a3 & 0x3F | (*a2 << 6);
  else
    v4 = (0xFFu >> v3) & a3;
  *a2 = v4;
  v5 = 16 * *a1 + v3 + 256;
  if (v5 >= 0x190)
    __assert_rtn("decode", "json.hpp", 16331, "index < 400");
  v6 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v5];
  *a1 = v6;
  return v6;
}

char *nlohmann::detail::to_chars<double>(char *a1, uint64_t a2, double a3)
{
  char *v3;
  char *result;
  unint64_t v5;
  char *v6;

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::to_chars<double>();
  v3 = a1;
  if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    a3 = -a3;
    *a1 = 45;
    v3 = a1 + 1;
  }
  if (a3 == 0.0)
  {
    *(_WORD *)v3 = 11824;
    result = v3 + 3;
    v3[2] = 48;
  }
  else
  {
    v5 = a2 - (_QWORD)v3;
    if (a2 - (uint64_t)v3 <= 16)
      nlohmann::detail::to_chars<double>();
    v6 = 0;
    nlohmann::detail::dtoa_impl::grisu2<double>((uint64_t)v3, (unsigned int *)&v6 + 1, &v6, a3);
    if (SHIDWORD(v6) >= 18)
      nlohmann::detail::to_chars<double>();
    if (v5 <= 0x15)
      nlohmann::detail::to_chars<double>();
    if (v5 == 22)
      nlohmann::detail::to_chars<double>();
    return nlohmann::detail::dtoa_impl::format_buffer((nlohmann::detail::dtoa_impl *)v3, (char *)HIDWORD(v6), (int)v6, -4, 15);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2<double>(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4)
{
  uint64_t v7;
  uint64_t v9[6];

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  if (a4 <= 0.0)
    nlohmann::detail::dtoa_impl::grisu2<double>();
  nlohmann::detail::dtoa_impl::compute_boundaries<double>((uint64_t)v9, a4);
  return nlohmann::detail::dtoa_impl::grisu2(a1, a2, a3, v9[2], v9[3], v9[0], v9[1], v7, v9[4], (nlohmann::detail::dtoa_impl *)v9[5]);
}

char *nlohmann::detail::dtoa_impl::format_buffer(nlohmann::detail::dtoa_impl *this, char *a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v7;
  char *result;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  if ((a4 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  if (a5 <= 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v5 = (int)a2;
  v7 = a3 + (uint64_t)(int)a2;
  if ((a3 & 0x80000000) == 0 && (int)v7 <= a5)
  {
    memset((char *)this + (int)a2, 48, a3);
    *((_BYTE *)this + v7) = 46;
    result = (char *)this + v7 + 2;
    *((_BYTE *)this + (int)v7 + 1) = 48;
    return result;
  }
  if ((int)v7 < 1 || (int)v7 > a5)
  {
    if ((int)v7 > a4 && (int)v7 <= 0)
    {
      v10 = -(int)v7;
      memmove((char *)this + v10 + 2, this, (int)a2);
      *(_WORD *)this = 11824;
      memset((char *)this + 2, 48, v10);
      return (char *)this + v10 + v5 + 2;
    }
    if ((_DWORD)a2 == 1)
    {
      v11 = 1;
    }
    else
    {
      memmove((char *)this + 2, (char *)this + 1, (int)a2 - 1);
      *((_BYTE *)this + 1) = 46;
      v11 = v5 + 1;
    }
    v12 = (char *)this + v11;
    *v12 = 101;
    if ((int)v7 <= -999)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1001)
      nlohmann::detail::dtoa_impl::format_buffer();
    if ((int)v7 >= 1)
      v13 = 43;
    else
      v13 = 45;
    if ((int)v7 - 1 >= 0)
      v14 = v7 - 1;
    else
      v14 = 1 - v7;
    v12[1] = v13;
    if (v14 > 9)
    {
      if (v14 > 0x63)
      {
        v12[2] = (unsigned __int16)v14 / 0x64u + 48;
        v17 = (unsigned __int16)v14 % 0x64u;
        v12[3] = (v17 / 0xAu) | 0x30;
        v12[4] = (v17 % 0xAu) | 0x30;
        v16 = 2;
        return &v12[v16 + 3];
      }
      v12[2] = v14 / 0xAu + 48;
      v15 = (v14 % 0xAu) | 0x30;
    }
    else
    {
      v12[2] = 48;
      v15 = v14 + 48;
    }
    v12[3] = v15;
    v16 = 1;
    return &v12[v16 + 3];
  }
  if ((a3 & 0x80000000) == 0)
    nlohmann::detail::dtoa_impl::format_buffer();
  v9 = (char *)this + v7;
  memmove(v9 + 1, v9, (int)a2 - (unint64_t)v7);
  *v9 = 46;
  return (char *)this + v5 + 1;
}

uint64_t nlohmann::detail::dtoa_impl::compute_boundaries<double>@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  int v25;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  if (a2 <= 0.0)
    nlohmann::detail::dtoa_impl::compute_boundaries<double>();
  v4 = *(_QWORD *)&a2 >> 52;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v6 = 2 * v5;
  v7 = *(_QWORD *)&a2 >> 53;
  v8 = 4 * v5;
  v9 = (*(_QWORD *)&a2 >> 52) - 1077;
  v10 = 0x10000000000000;
  if ((*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v8 = 2 * v5;
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
    v10 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  v11 = v7 == 0;
  if (v7)
    v12 = v8;
  else
    v12 = 2 * v5;
  if (v11)
    v9 = (*(_QWORD *)&a2 >> 52) - 1076;
  else
    v5 = v10;
  v3 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (v4)
  {
    v13 = (*(_QWORD *)&a2 >> 52) - 1076;
  }
  else
  {
    v12 = 2 * v3;
    v9 = -1075;
    v13 = 4294966221;
  }
  if (v4)
  {
    v14 = (*(_QWORD *)&a2 >> 52) - 1075;
  }
  else
  {
    v6 = 2 * v3;
    v14 = 4294966222;
  }
  if (v4)
    v15 = v5;
  else
    v15 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v24 = v12 - 1;
  v25 = v9;
  v16 = nlohmann::detail::dtoa_impl::diyfp::normalize(v6 | 1, v13);
  v18 = v17;
  v19 = nlohmann::detail::dtoa_impl::diyfp::normalize_to(&v24, v17);
  v21 = v20;
  result = nlohmann::detail::dtoa_impl::diyfp::normalize(v15, v14);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = v19;
  *(_DWORD *)(a1 + 24) = v21;
  *(_QWORD *)(a1 + 32) = v16;
  *(_DWORD *)(a1 + 40) = v18;
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, nlohmann::detail::dtoa_impl *a10)
{
  uint64_t cached_power_for_binary_exponent;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];

  v31[0] = a4;
  v31[1] = a5;
  v30[0] = a6;
  v30[1] = a7;
  v29[0] = a9;
  v29[1] = a10;
  if ((_DWORD)a10 != (_DWORD)a5)
    nlohmann::detail::dtoa_impl::grisu2();
  if ((_DWORD)a10 != (_DWORD)a7)
    nlohmann::detail::dtoa_impl::grisu2();
  cached_power_for_binary_exponent = nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(a10);
  v15 = v14;
  v27 = cached_power_for_binary_exponent;
  v28 = v16;
  v17 = nlohmann::detail::dtoa_impl::diyfp::mul(v30, &v27);
  v19 = v18;
  v20 = nlohmann::detail::dtoa_impl::diyfp::mul(v31, &v27);
  v22 = v21;
  v23 = nlohmann::detail::dtoa_impl::diyfp::mul(v29, &v27);
  *a3 = -v15;
  return nlohmann::detail::dtoa_impl::grisu2_digit_gen(a1, a2, a3, v20 + 1, v22, v17, v19, v25, v23 - 1, v24);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "json.hpp", 14481, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::normalize_to(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t result;
  const char *v5;
  int v6;

  v2 = *((_DWORD *)a1 + 2) - a2;
  if (v2 < 0)
  {
    v5 = "delta >= 0";
    v6 = 14500;
    goto LABEL_6;
  }
  v3 = *a1;
  result = *a1 << v2;
  if (result >> v2 != v3)
  {
    v5 = "((x.f << delta) >> delta) == x.f";
    v6 = 14501;
LABEL_6:
    __assert_rtn("normalize_to", "json.hpp", v6, v5);
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(nlohmann::detail::dtoa_impl *this)
{
  int v1;
  unsigned int v2;
  _QWORD *v3;
  int v4;

  if ((int)this <= -1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if ((int)this >= 1501)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v1 = 78913 * (-61 - (int)this) / 0x40000;
  if ((int)this < -61)
    ++v1;
  if (v1 <= -315)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v2 = (int)((v1 + 307 + (((__int16)(v1 + 307) >> 28) & 7)) << 16) >> 19;
  if (v2 >= 0x4F)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  v3 = (_QWORD *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                + 16 * (unsigned __int16)v2);
  v4 = v3[1] + (_DWORD)this;
  if (v4 <= -125)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  if (v4 >= -95)
    nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent();
  return *v3;
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = HIDWORD(*a1);
  v3 = HIDWORD(*a2);
  v4 = v3 * (unint64_t)*a1;
  v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v4
         + v5
         + 0x80000000) >> 32);
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_digit_gen(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD v47[2];

  v47[0] = a4;
  v47[1] = a5;
  v46[0] = a6;
  v46[1] = a7;
  v44 = a9;
  v45 = a10;
  if ((int)a10 <= -61)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  if ((int)a10 >= -31)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v13 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v47);
  v14 = nlohmann::detail::dtoa_impl::diyfp::sub((uint64_t)&v44, (uint64_t)v46);
  v15 = -(int)v45;
  v16 = v44 >> -(char)v45;
  if (!(_DWORD)v16)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v17 = v14;
  v18 = 1 << v15;
  v19 = (1 << v15) - 1;
  v20 = v19 & v44;
  if (v16 <= 0x3B9AC9FF)
  {
    if (v16 <= 0x5F5E0FF)
    {
      if (v16 <= 0x98967F)
      {
        if (v16 <= 0xF423F)
        {
          v23 = v16 >> 5;
          v24 = v16 >> 4;
          if (v16 <= 9)
            v25 = 1;
          else
            v25 = 10;
          if (v16 <= 9)
            v26 = 1;
          else
            v26 = 2;
          if (v16 <= 0x63)
            v27 = v26;
          else
            v27 = 3;
          if (v16 <= 0x63)
            v28 = v25;
          else
            v28 = 100;
          if (v16 <= 0x3E7)
            v29 = v27;
          else
            v29 = 4;
          if (v16 <= 0x3E7)
            v30 = v28;
          else
            v30 = 1000;
          if (v24 <= 0x270)
            v31 = v29;
          else
            v31 = 5;
          if (v24 <= 0x270)
            v32 = v30;
          else
            v32 = 10000;
          if (v23 <= 0xC34)
            v22 = v31;
          else
            v22 = 6;
          if (v23 > 0xC34)
            v21 = 100000;
          else
            v21 = v32;
        }
        else
        {
          v21 = 1000000;
          v22 = 7;
        }
      }
      else
      {
        v21 = 10000000;
        v22 = 8;
      }
    }
    else
    {
      v21 = 100000000;
      v22 = 9;
    }
  }
  else
  {
    v21 = 1000000000;
    v22 = 10;
  }
  v33 = v22 + 1;
  do
  {
    v34 = v16 / v21;
    if (v16 / v21 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v16 = v16 % v21;
    v35 = (int)*a2;
    *a2 = v35 + 1;
    *(_BYTE *)(a1 + v35) = v34 + 48;
    if ((v16 << v15) + v20 <= v13)
    {
      *a3 = *a3 + v33 - 2;
      v18 = (unint64_t)v21 << v15;
      v40 = (char *)*a2;
      v41 = a1;
      v42 = v13;
      v20 += v16 << v15;
      return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
    }
    v21 /= 0xAu;
    --v33;
  }
  while (v33 > 1);
  if (v20 <= v13)
    nlohmann::detail::dtoa_impl::grisu2_digit_gen();
  v36 = 0;
  do
  {
    if (v20 >= 0x199999999999999ALL)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v37 = (10 * v20) >> v15;
    if (v37 >= 0xA)
      nlohmann::detail::dtoa_impl::grisu2_digit_gen();
    v38 = (int)*a2;
    *a2 = v38 + 1;
    *(_BYTE *)(a1 + v38) = v37 + 48;
    v39 = 5 * v13;
    v20 = (10 * v20) & v19;
    v13 *= 10;
    v17 *= 10;
    --v36;
  }
  while (v20 > 2 * v39);
  *a3 += v36;
  v40 = (char *)*a2;
  v41 = a1;
  v42 = v13;
  return nlohmann::detail::dtoa_impl::grisu2_round(v41, v40, v17, v42, v20, v18);
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::sub(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;
  const char *v4;
  int v5;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    v4 = "x.e == y.e";
    v5 = 14404;
LABEL_6:
    __assert_rtn("sub", "json.hpp", v5, v4);
  }
  v2 = *(_QWORD *)a1 >= *(_QWORD *)a2;
  result = *(_QWORD *)a1 - *(_QWORD *)a2;
  if (!v2)
  {
    v4 = "x.f >= y.f";
    v5 = 14405;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a3 > a4)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a4 < a5)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (!a6)
    nlohmann::detail::dtoa_impl::grisu2_round();
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        nlohmann::detail::dtoa_impl::grisu2_round();
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x242620F00](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x242620F00](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_23C51F8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x242621128](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::parser<nlohmann::detail::input_stream_adapter>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int8 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(a5, a1, (uint64_t)v11, a3, a4);
  result = v12;
  if (v12 == v11)
  {
    v10 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v10 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
}

void sub_23C51F9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parse(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t **v15;
  unsigned __int8 v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21[8];
  uint64_t *v22;
  char v23[8];
  uint64_t v24;
  unsigned __int8 v25[8];
  uint64_t v26;
  void *v27[2];
  char v28;
  std::string __p;
  __int128 v30;
  uint64_t v31;
  std::exception v32;
  _BYTE v33[24];
  std::string v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 24))
  {
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v35, a1);
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser((uint64_t)&v37, a3, (uint64_t)v35, *(_BYTE *)(a1 + 184));
    v6 = v36;
    if (v36 == v35)
    {
      v7 = 4;
      v6 = v35;
    }
    else
    {
      if (!v36)
      {
LABEL_19:
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v37);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
        if (a2)
        {
          v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
          *(_DWORD *)(a1 + 32) = v13;
          if (v13 != 15)
          {
            v14 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v34);
            v30 = *(_OWORD *)(a1 + 72);
            v31 = *(_QWORD *)(a1 + 88);
            std::string::basic_string[abi:ne180100]<0>(v27, "value");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v27, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v37, v14, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
            v32.__vftable = (std::exception_vtbl *)&off_250D49BC8;
            MEMORY[0x242620E4C](v33);
            std::exception::~exception(&v32);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v28 < 0)
              operator delete(v27[0]);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v34.__r_.__value_.__l.__data_);
          }
        }
        if (v42)
        {
          v25[0] = 9;
          v15 = (uint64_t **)&v26;
          v26 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          v16 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v25[0];
          v25[0] = v16;
          v17 = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(a3 + 8) = v26;
          v26 = v17;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
          v18 = v25[0];
        }
        else
        {
          if (*(_BYTE *)a3 != 9)
          {
LABEL_32:
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser((uint64_t)&v37);
            return;
          }
          v23[0] = 0;
          v15 = (uint64_t **)&v24;
          v24 = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          v19 = *(_BYTE *)a3;
          *(_BYTE *)a3 = v23[0];
          v23[0] = v19;
          v20 = *(_QWORD *)(a3 + 8);
          *(_QWORD *)(a3 + 8) = v24;
          v24 = v20;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
          v18 = v23[0];
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15, v18);
        goto LABEL_32;
      }
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
    goto LABEL_19;
  }
  v8 = *(_BYTE *)(a1 + 184);
  v37 = a3;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  v41 = v8;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a1, &v37, a3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
  if (a2)
  {
    v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan((int64x2_t *)(a1 + 40));
    *(_DWORD *)(a1 + 32) = v9;
    if (v9 != 15)
    {
      v10 = *(_QWORD *)(a1 + 72);
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &v34);
      v30 = *(_OWORD *)(a1 + 72);
      v31 = *(_QWORD *)(a1 + 88);
      std::string::basic_string[abi:ne180100]<0>(v27, "value");
      nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xFu, (uint64_t)v27, &__p);
      nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v32);
      nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)&v37, v10, (uint64_t)&v34, (const nlohmann::detail::parse_error *)&v32);
      v32.__vftable = (std::exception_vtbl *)&off_250D49BC8;
      MEMORY[0x242620E4C](v33);
      std::exception::~exception(&v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  if (v40)
  {
    v21[0] = 9;
    v22 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v11 = *(_BYTE *)a3;
    *(_BYTE *)a3 = v21[0];
    v21[0] = v11;
    v12 = *(uint64_t **)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v22;
    v22 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
  }
  if ((_QWORD)v38)
  {
    *((_QWORD *)&v38 + 1) = v38;
    operator delete((void *)v38);
  }
}

void sub_23C51FDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::exception a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  void *v48;

  a31.__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](v45 + 16);
  std::exception::~exception(&a31);
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a41 < 0)
    operator delete(a36);
  v48 = *(void **)(v46 - 200);
  if (v48)
  {
    *(_QWORD *)(v46 - 192) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer((void **)(a1 + 40));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::parser(uint64_t a1, uint64_t a2, uint64_t a3, __int8 a4, char a5)
{
  uint64_t v9;
  int64x2_t *v10;

  v9 = std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1, a3);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)a2;
  v10 = (int64x2_t *)(v9 + 40);
  *(_DWORD *)(v9 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(v9 + 56) = a5;
  *(_DWORD *)(v9 + 60) = -1;
  *(_BYTE *)(v9 + 64) = 0;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_QWORD *)(v9 + 136) = 0;
  *(_QWORD *)(v9 + 144) = &unk_23C62207F;
  *(_QWORD *)(v9 + 160) = 0;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)(v9 + 152) = 0;
  *(_DWORD *)(v9 + 176) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point();
  v10[9].i8[0] = a4;
  *(_DWORD *)(a1 + 32) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v10);
  return a1;
}

void sub_23C520098(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v4;
  uint64_t v5;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_decimal_point()
{
  lconv *v0;

  v0 = localeconv();
  if (!v0)
    __assert_rtn("get_decimal_point", "json.hpp", 6017, "loc != nullptr");
  if (v0->decimal_point)
    return *v0->decimal_point;
  else
    return 46;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(int64x2_t *this)
{
  int v2;
  uint64_t result;
  int *v6;
  int64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  _DWORD v12[2];
  int v13;

  if (this[2].i64[0]
    || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(this))
  {
    do
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v2 = this[1].i32[1];
    }
    while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    while (this[1].i8[0])
    {
      if (v2 != 47)
        break;
      if (!nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(this))
        return 14;
      do
      {
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
        v2 = this[1].i32[1];
      }
      while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0);
    }
    if (v2 <= 90)
    {
      switch(v2)
      {
        case '"':
          result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string((uint64_t)this);
          break;
        case '#':
        case '$':
        case '%':
        case '&':
        case '\'':
        case '(':
        case ')':
        case '*':
        case '+':
        case '.':
        case '/':
          goto LABEL_46;
        case ',':
          result = 13;
          break;
        case '-':
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number((uint64_t)this);
          break;
        case ':':
          result = 12;
          break;
        default:
          if ((v2 + 1) >= 2)
            goto LABEL_46;
          result = 15;
          break;
      }
      return result;
    }
    if (v2 <= 109)
    {
      switch(v2)
      {
        case '[':
          return 8;
        case ']':
          return 10;
        case 'f':
          qmemcpy(v12, "false", 5);
          v6 = v12;
          v7 = this;
          v8 = 5;
          v9 = 2;
          return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
    else if (v2 > 122)
    {
      if (v2 == 123)
        return 9;
      if (v2 == 125)
        return 11;
    }
    else
    {
      if (v2 == 110)
      {
        v11 = 1819047278;
        v6 = &v11;
        v7 = this;
        v8 = 4;
        v9 = 3;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
      if (v2 == 116)
      {
        v13 = 1702195828;
        v6 = &v13;
        v7 = this;
        v8 = 4;
        v9 = 1;
        return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(v7, (unsigned __int8 *)v6, v8, v9);
      }
    }
LABEL_46:
    v10 = "invalid literal";
  }
  else
  {
    v10 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
  }
  this[6].i64[1] = (uint64_t)v10;
  return 14;
}

BOOL nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::skip_bom(int64x2_t *a1)
{
  if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 239)
  {
    return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 187
        && nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 191;
  }
  else
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
    return 1;
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_comment(int64x2_t *a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t result;
  const char *v6;

  v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
  if (v2 == 47)
  {
    do
    {
      do
        v4 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1)
           + 1;
      while (v4 >= 0xF);
    }
    while (((0x4803u >> v4) & 1) == 0);
    return 1;
  }
  else
  {
    if (v2 == 42)
    {
      do
      {
        while (1)
        {
          v3 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1);
          if (v3 != 42)
            break;
          if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(a1) == 47)
            return 1;
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget((uint64_t)a1);
        }
      }
      while ((v3 + 1) >= 2);
      v6 = "invalid comment; missing closing '*/'";
    }
    else
    {
      v6 = "invalid comment; expecting '/' or '*' after '/'";
    }
    result = 0;
    a1[6].i64[1] = (uint64_t)v6;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal(int64x2_t *this, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  int v9;

  if (*a2 != this[1].u8[4])
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_literal();
  if (a3 >= 2)
  {
    v6 = a3 - 1;
    v7 = a2 + 1;
    while (1)
    {
      v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
      v9 = *v7++;
      if (v9 != v8)
        break;
      if (!--v6)
        return a4;
    }
    this[6].i64[1] = (uint64_t)"invalid literal";
    return 14;
  }
  return a4;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string(uint64_t a1)
{
  int v2;
  uint64_t result;
  const char *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 *v9;
  int v10;
  unsigned int codepoint;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  if (*(_DWORD *)(a1 + 20) != 34)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
  while (2)
  {
    while (2)
    {
      v2 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         + 1;
      result = 4;
      v4 = "invalid string: missing closing quote";
      switch(v2)
      {
        case 0:
          goto LABEL_82;
        case 1:
          v4 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
          goto LABEL_82;
        case 2:
          v4 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
          goto LABEL_82;
        case 3:
          v4 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
          goto LABEL_82;
        case 4:
          v4 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
          goto LABEL_82;
        case 5:
          v4 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
          goto LABEL_82;
        case 6:
          v4 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
          goto LABEL_82;
        case 7:
          v4 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
          goto LABEL_82;
        case 8:
          v4 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
          goto LABEL_82;
        case 9:
          v4 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
          goto LABEL_82;
        case 10:
          v4 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
          goto LABEL_82;
        case 11:
          v4 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
          goto LABEL_82;
        case 12:
          v4 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
          goto LABEL_82;
        case 13:
          v4 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
          goto LABEL_82;
        case 14:
          v4 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
          goto LABEL_82;
        case 15:
          v4 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
          goto LABEL_82;
        case 16:
          v4 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
          goto LABEL_82;
        case 17:
          v4 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
          goto LABEL_82;
        case 18:
          v4 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
          goto LABEL_82;
        case 19:
          v4 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
          goto LABEL_82;
        case 20:
          v4 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
          goto LABEL_82;
        case 21:
          v4 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
          goto LABEL_82;
        case 22:
          v4 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
          goto LABEL_82;
        case 23:
          v4 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
          goto LABEL_82;
        case 24:
          v4 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
          goto LABEL_82;
        case 25:
          v4 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
          goto LABEL_82;
        case 26:
          v4 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
          goto LABEL_82;
        case 27:
          v4 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
          goto LABEL_82;
        case 28:
          v4 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
          goto LABEL_82;
        case 29:
          v4 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
          goto LABEL_82;
        case 30:
          v4 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
          goto LABEL_82;
        case 31:
          v4 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
          goto LABEL_82;
        case 32:
          v4 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
          goto LABEL_82;
        case 33:
        case 34:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          v5 = *(_DWORD *)(a1 + 20);
          goto LABEL_4;
        case 35:
          return result;
        case 93:
          v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
          v4 = "invalid string: forbidden character after backslash";
          if (v10 <= 97)
          {
            switch(v10)
            {
              case '"':
                LOBYTE(v5) = 34;
                break;
              case '/':
                LOBYTE(v5) = 47;
                break;
              case '\\':
                LOBYTE(v5) = 92;
                break;
              default:
                goto LABEL_82;
            }
            goto LABEL_4;
          }
          break;
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 215:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
          *(_QWORD *)&v14 = 0xBF00000080;
          v6 = a1;
          v7 = 2;
          goto LABEL_19;
        case 225:
          v8 = xmmword_23C604B70;
          goto LABEL_7;
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 236:
        case 237:
        case 239:
        case 240:
          v8 = xmmword_23C604B60;
          goto LABEL_7;
        case 238:
          v8 = xmmword_23C604B50;
LABEL_7:
          v14 = v8;
          v6 = a1;
          v7 = 4;
          goto LABEL_19;
        case 241:
          v15 = 0xBF00000080;
          v9 = &xmmword_23C604A70;
          goto LABEL_18;
        case 242:
        case 243:
        case 244:
          v15 = 0xBF00000080;
          v9 = &xmmword_23C604A88;
          goto LABEL_18;
        case 245:
          v15 = 0xBF00000080;
          v9 = &xmmword_23C604AA0;
LABEL_18:
          v14 = *v9;
          v6 = a1;
          v7 = 6;
LABEL_19:
          if ((nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(v6, &v14, v7) & 1) == 0)return 14;
          continue;
        default:
          v4 = "invalid string: ill-formed UTF-8 byte";
          goto LABEL_82;
      }
      break;
    }
    switch(v10)
    {
      case 'n':
        LOBYTE(v5) = 10;
        goto LABEL_4;
      case 'o':
      case 'p':
      case 'q':
      case 's':
        goto LABEL_82;
      case 'r':
        LOBYTE(v5) = 13;
        goto LABEL_4;
      case 't':
        LOBYTE(v5) = 9;
        goto LABEL_4;
      case 'u':
        codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (codepoint == -1)
          goto LABEL_85;
        v12 = codepoint;
        if ((codepoint & 0xFFFFFC00) != 0xD800)
        {
          if ((codepoint & 0xFFFFFC00) == 0xDC00)
          {
            v4 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
            goto LABEL_82;
          }
          if (codepoint >= 0x110000)
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_string();
          if (codepoint > 0x7F)
          {
            if (codepoint <= 0x7FF)
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 6) | 0xC0);
              goto LABEL_39;
            }
            if (!HIWORD(codepoint))
            {
              std::string::push_back((std::string *)(a1 + 80), (codepoint >> 12) | 0xE0);
              goto LABEL_38;
            }
LABEL_37:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 18) | 0xF0);
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 12) & 0x3F | 0x80);
LABEL_38:
            std::string::push_back((std::string *)(a1 + 80), (v12 >> 6) & 0x3F | 0x80);
LABEL_39:
            LOBYTE(v5) = v12 & 0x3F | 0x80;
            goto LABEL_4;
          }
          LOBYTE(v5) = codepoint;
LABEL_4:
          std::string::push_back((std::string *)(a1 + 80), v5);
          continue;
        }
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 92
          || nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1) != 117)
        {
LABEL_86:
          v4 = "invalid string: surrogate U+D800..U+DBFF must be followed by U+DC00..U+DFFF";
          goto LABEL_82;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint((int64x2_t *)a1);
        if (v13 != -1)
        {
          if (v13 >> 10 != 55)
            goto LABEL_86;
          v12 = v13 + (v12 << 10) - 56613888;
          goto LABEL_37;
        }
LABEL_85:
        v4 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_82:
        *(_QWORD *)(a1 + 104) = v4;
        return 14;
      default:
        if (v10 == 98)
        {
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v10 != 102)
            goto LABEL_82;
          LOBYTE(v5) = 12;
        }
        goto LABEL_4;
    }
  }
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number(uint64_t a1)
{
  int v2;
  std::string *v3;
  int v4;
  std::string *v5;
  int v6;
  int v7;
  std::string *v8;
  const char **v9;
  const char *v10;
  uint64_t v11;
  int v13;
  const char *v14;
  int v15;
  int v16;
  const char **v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char *__endptr;

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(a1);
  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 - 49) >= 9)
  {
    if (v2 == 48)
    {
      std::string::push_back((std::string *)(a1 + 80), 48);
      v4 = 5;
    }
    else
    {
      if (v2 != 45)
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
      v3 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), 45);
      v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
      if ((v13 - 49) < 9)
      {
        v2 = *(_DWORD *)(a1 + 20);
        v4 = 6;
        goto LABEL_3;
      }
      if (v13 != 48)
      {
        v14 = "invalid number; expected digit after '-'";
        goto LABEL_52;
      }
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      v4 = 6;
    }
    v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if (v15 == 101 || v15 == 69)
    {
      v5 = (std::string *)(a1 + 80);
      goto LABEL_9;
    }
    if (v15 != 46)
      goto LABEL_40;
    v5 = (std::string *)(a1 + 80);
LABEL_34:
    std::string::push_back(v5, *(_BYTE *)(a1 + 136));
    if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
       - 48 > 9)
    {
      v14 = "invalid number; expected digit after '.'";
      goto LABEL_52;
    }
    v5 = (std::string *)(a1 + 80);
    do
    {
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    }
    while ((v16 - 48) < 0xA);
    if (v16 != 101 && v16 != 69)
    {
LABEL_13:
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
      __endptr = 0;
      *__error() = 0;
      goto LABEL_14;
    }
LABEL_9:
    std::string::push_back(v5, *(_BYTE *)(a1 + 20));
    v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v7 - 48) < 0xA)
    {
      v8 = (std::string *)(a1 + 80);
      goto LABEL_11;
    }
    if (v7 == 45 || v7 == 43)
    {
      v8 = (std::string *)(a1 + 80);
      std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
      if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
         - 48 < 0xA)
      {
LABEL_11:
        std::string::push_back(v8, *(_BYTE *)(a1 + 20));
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
           - 48 <= 9)
        {
          do
            std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
          while (nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1)
                - 48 < 0xA);
        }
        goto LABEL_13;
      }
      v14 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v14 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_52:
    *(_QWORD *)(a1 + 104) = v14;
    return 14;
  }
  v3 = (std::string *)(a1 + 80);
  v4 = 5;
LABEL_3:
  std::string::push_back(v3, v2);
  v5 = (std::string *)(a1 + 80);
  while (1)
  {
    v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    if ((v6 - 48) >= 0xA)
      break;
    std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  }
  if (v6 == 46)
    goto LABEL_34;
  if (v6 == 69 || v6 == 101)
    goto LABEL_9;
LABEL_40:
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(a1);
  __endptr = 0;
  *__error() = 0;
  if (v4 == 6)
  {
    v21 = (const char **)(a1 + 80);
    v22 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v22 = *v21;
    v23 = strtoll(v22, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      v21 = *(const char ***)(a1 + 80);
      v24 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v24 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v21 + v24)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 112) = v23;
      return 6;
    }
  }
  else
  {
    v17 = (const char **)(a1 + 80);
    v18 = (const char *)(a1 + 80);
    if (*(char *)(a1 + 103) < 0)
      v18 = *v17;
    v19 = strtoull(v18, &__endptr, 10);
    if (*(char *)(a1 + 103) < 0)
    {
      v17 = *(const char ***)(a1 + 80);
      v20 = *(_QWORD *)(a1 + 88);
    }
    else
    {
      v20 = *(unsigned __int8 *)(a1 + 103);
    }
    if (__endptr != (char *)v17 + v20)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
    if (!*__error())
    {
      *(_QWORD *)(a1 + 120) = v19;
      return 5;
    }
  }
LABEL_14:
  v9 = (const char **)(a1 + 80);
  v10 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v10 = *v9;
  *(double *)(a1 + 128) = strtod(v10, &__endptr);
  if (*(char *)(a1 + 103) < 0)
  {
    v9 = *(const char ***)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 103);
  }
  if (__endptr != (char *)v9 + v11)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan_number();
  return 7;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(int64x2_t *this)
{
  __int32 character;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  this[2] = vaddq_s64(this[2], vdupq_n_s64(1uLL));
  if (this[1].i8[8])
  {
    this[1].i8[8] = 0;
    character = this[1].i32[1];
  }
  else
  {
    character = nlohmann::detail::input_stream_adapter::get_character((nlohmann::detail::input_stream_adapter *)this);
    this[1].i32[1] = character;
  }
  if (character == -1)
    return 0xFFFFFFFFLL;
  v4 = (_BYTE *)this[4].i64[0];
  v3 = this[4].u64[1];
  if ((unint64_t)v4 >= v3)
  {
    v6 = this[3].i64[1];
    v7 = &v4[-v6];
    v8 = (uint64_t)&v4[-v6 + 1];
    if (v8 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = v3 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (uint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = (char *)(v11 + v10);
    v7[v11] = character;
    v5 = (uint64_t)&v7[v11 + 1];
    if (v4 == (_BYTE *)v6)
    {
      v11 += (uint64_t)v7;
    }
    else
    {
      v13 = &v4[~v6];
      do
      {
        v14 = *--v4;
        (v13--)[v11] = v14;
      }
      while (v4 != (_BYTE *)v6);
      v4 = (_BYTE *)this[3].i64[1];
    }
    this[3].i64[1] = v11;
    this[4].i64[0] = v5;
    this[4].i64[1] = (uint64_t)v12;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = character;
    v5 = (uint64_t)(v4 + 1);
  }
  this[4].i64[0] = v5;
  result = this[1].u32[1];
  if ((_DWORD)result == 10)
  {
    v16 = this[3].i64[0] + 1;
    this[2].i64[1] = 0;
    this[3].i64[0] = v16;
  }
  return result;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(result + 40);
  v2 = *(_QWORD *)(result + 40);
  *(_BYTE *)(result + 24) = 1;
  --*(_QWORD *)(result + 32);
  if (v2 || (v1 = (_QWORD *)(result + 48), (v2 = *(_QWORD *)(result + 48)) != 0))
    *v1 = v2 - 1;
  if (*(_DWORD *)(result + 20) != -1)
  {
    v3 = *(_QWORD *)(result + 64);
    if (*(_QWORD *)(result + 56) == v3)
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::unget();
    *(_QWORD *)(result + 64) = v3 - 1;
  }
  return result;
}

uint64_t nlohmann::detail::input_stream_adapter::get_character(nlohmann::detail::input_stream_adapter *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t result;
  std::ios_base *v5;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
    if ((_DWORD)result == -1)
    {
      v5 = (std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::reset(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;

  if (*(char *)(a1 + 103) < 0)
  {
    **(_BYTE **)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_BYTE *)(a1 + 103) = 0;
  }
  v2 = *(_BYTE **)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = 2 * v6;
    if (2 * v6 <= 1)
      v7 = 1;
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = operator new(v8);
    *v9 = v3;
    v5 = v9 + 1;
    *(_QWORD *)(a1 + 56) = v9;
    *(_QWORD *)(a1 + 64) = v9 + 1;
    *(_QWORD *)(a1 + 72) = &v9[v8];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 64) = v5;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint(int64x2_t *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int32 v5;
  __int32 v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (this[1].i32[1] != 117)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  v2 = 0;
  LODWORD(v3) = 0;
  v8 = xmmword_23C604B80;
  do
  {
    v4 = *(_DWORD *)((char *)&v8 + v2);
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get(this);
    v5 = this[1].i32[1];
    v6 = v5 - 48;
    if ((v5 - 48) >= 0xA)
    {
      if ((v5 - 65) > 5)
      {
        if ((v5 - 97) > 5)
          return 0xFFFFFFFFLL;
        v6 = v5 - 87;
      }
      else
      {
        v6 = v5 - 55;
      }
    }
    v3 = ((v6 << v4) + v3);
    v2 += 4;
  }
  while (v2 != 16);
  if (v3 >= 0x10000)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_codepoint();
  return v3;
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  std::string *v6;
  _DWORD *v7;
  int v8;
  uint64_t result;

  if (a3 > 6 || ((1 << a3) & 0x54) == 0)
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::next_byte_in_range();
  v6 = (std::string *)(a1 + 80);
  std::string::push_back((std::string *)(a1 + 80), *(_BYTE *)(a1 + 20));
  v7 = &a2[a3];
  while (1)
  {
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get((int64x2_t *)a1);
    v8 = *(_DWORD *)(a1 + 20);
    if (*a2 > v8 || v8 > a2[1])
      break;
    std::string::push_back(v6, v8);
    a2 += 2;
    if (a2 == v7)
      return 1;
  }
  result = 0;
  *(_QWORD *)(a1 + 104) = "invalid string: ill-formed UTF-8 byte";
  return result;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::~lexer(void **this)
{
  void *v2;

  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  nlohmann::detail::input_stream_adapter::~input_stream_adapter((nlohmann::detail::input_stream_adapter *)this);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  int64x2_t *v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::string v28;
  std::string __p;
  std::string v30;
  std::exception v31;
  _BYTE v32[24];
  std::string v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v4 = (__int128 *)(a1 + 120);
  v5 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v31.__vftable) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v31, 0);
        goto LABEL_19;
      case 2:
        LOBYTE(v31.__vftable) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v31, 0);
        goto LABEL_19;
      case 3:
        v31.__vftable = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v31, 0);
        goto LABEL_19;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v4, 0);
        goto LABEL_19;
      case 5:
        v31.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t **)&v31, 0);
        goto LABEL_19;
      case 6:
        v31.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t **)&v31, 0);
        goto LABEL_19;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v31.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t **)&v31, 0);
          goto LABEL_19;
        }
        v27 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v28);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("number overflow parsing '", &v28, &__p);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("'", &__p, &v30);
        nlohmann::detail::out_of_range::create(406, (uint64_t)&v30, (nlohmann::detail::exception *)&v31);
        v17 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v27, (uint64_t)&v33, (const nlohmann::detail::out_of_range *)&v31);
        v31.__vftable = (std::exception_vtbl *)&off_250D49BC8;
        MEMORY[0x242620E4C](v32);
        std::exception::~exception(&v31);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        goto LABEL_50;
      case 8:
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL))goto LABEL_56;
        v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2);
          goto LABEL_13;
        }
        LOBYTE(v31.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v34, &v31);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)goto LABEL_56;
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_59;
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          *(_DWORD *)(a1 + 32) = v16;
          if (v16 != 12)
            goto LABEL_60;
          LOBYTE(v31.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v34, &v31);
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
LABEL_37:
          *(_DWORD *)(a1 + 32) = v15;
          continue;
        }
        v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_56:
          v17 = 0;
          goto LABEL_44;
        }
LABEL_19:
        v9 = v35;
        if (!v35)
        {
LABEL_43:
          v17 = 1;
          goto LABEL_44;
        }
        while (2)
        {
          if (((*(_QWORD *)&v34[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_36;
            if (v10 != 10)
            {
              v22 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
              v30 = *(std::string *)(a1 + 72);
              std::string::basic_string[abi:ne180100]<0>(&v28, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v28, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v31);
              v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v22, (uint64_t)&v33, (const nlohmann::detail::parse_error *)&v31);
              goto LABEL_49;
            }
            if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(a2))
              goto LABEL_56;
            v11 = v35;
            if (!v35)
            {
              v23 = 10496;
              goto LABEL_62;
            }
LABEL_30:
            v9 = v11 - 1;
            v35 = v9;
            if (!v9)
              goto LABEL_43;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v24 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
            v30 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v28, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v28, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v31);
            v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v24, (uint64_t)&v33, (const nlohmann::detail::parse_error *)&v31);
            goto LABEL_49;
          }
          if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(a2))
            goto LABEL_56;
          v11 = v35;
          if (!v35)
          {
            v23 = 10552;
LABEL_62:
            __assert_rtn("sax_parse_internal", "json.hpp", v23, "!states.empty()");
          }
          goto LABEL_30;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_59:
          v25 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
          v30 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v28, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v28, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v31);
          v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v25, (uint64_t)&v33, (const nlohmann::detail::parse_error *)&v31);
          goto LABEL_49;
        }
        if (!nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(a2, v4))goto LABEL_56;
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 == 12)
        {
LABEL_36:
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v5);
          goto LABEL_37;
        }
LABEL_60:
        v26 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
        v30 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v28, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v28, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v31);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v26, (uint64_t)&v33, (const nlohmann::detail::parse_error *)&v31);
LABEL_49:
        v17 = v20;
        v31.__vftable = (std::exception_vtbl *)&off_250D49BC8;
        MEMORY[0x242620E4C](v32);
        std::exception::~exception(&v31);
LABEL_50:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
LABEL_44:
        if (v34)
          operator delete(v34);
        return v17;
      case 0xE:
        v19 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
        v30 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v28, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v28, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v31);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v19, (uint64_t)&v33, (const nlohmann::detail::parse_error *)&v31);
        goto LABEL_49;
      default:
        v21 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v5, &v33);
        v30 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v28, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v28, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v30, (uint64_t)&__p, (nlohmann::detail::exception *)&v31);
        v20 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v33, (const nlohmann::detail::parse_error *)&v31);
        goto LABEL_49;
    }
  }
}

void sub_23C521AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::exception a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  void *v40;

  a27.__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](v37 + 16);
  std::exception::~exception(&a27);
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a37 < 0)
    operator delete(a32);
  v40 = *(void **)(v38 - 88);
  if (v40)
    operator delete(v40);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  nlohmann::detail::parse_error *exception;
  nlohmann::detail::parse_error *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  std::string::size_type v6;
  char __str[8];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 56);
  for (i = *(unsigned __int8 **)(a1 + 64); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v8 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      v6 = strlen(__str);
      std::string::append(a2, __str, v6);
    }
  }
}

void sub_23C521D34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::create(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, nlohmann::detail::exception *a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  std::string __p;
  void *v24;
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;

  std::string::basic_string[abi:ne180100]<0>(&v24, "parse_error");
  nlohmann::detail::exception::name(a1, &v26);
  v8 = std::string::append(&v26, "parse error", 0xBuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  nlohmann::detail::parse_error::position_string((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, ": ", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31 = v19->__r_.__value_.__r.__words[2];
  v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24);
  v21 = *a2;
  if (v31 >= 0)
    v22 = (const char *)&v30;
  else
    v22 = (const char *)v30;
  nlohmann::detail::exception::exception(a4, a1, v22);
  *(_QWORD *)a4 = &off_250D49D30;
  *((_QWORD *)a4 + 4) = v21;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
}

void sub_23C521F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  void *v24;
  char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  int64_t v40;

  std::string::basic_string[abi:ne180100]<0>(a4, "syntax error ");
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    std::operator+<char>();
    v9 = std::string::append(&v38, " ", 1uLL);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v40 = v9->__r_.__value_.__r.__words[2];
    v39 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v11 = (const std::string::value_type *)&v39;
    else
      v11 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v12 = HIBYTE(v40);
    else
      v12 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v11, v12);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
  std::string::append(a4, "- ", 2uLL);
  v13 = *(_DWORD *)(a1 + 32);
  if (v13 == 14)
  {
    std::string::basic_string[abi:ne180100]<0>(&v36, *(char **)(a1 + 144));
    v14 = std::string::append(&v36, "; last read: '", 0xEuLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string(a1 + 40, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v37, (const std::string::value_type *)p_p, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v38, "'", 1uLL);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v40 = v20->__r_.__value_.__r.__words[2];
    v39 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v40 >= 0)
      v22 = (const std::string::value_type *)&v39;
    else
      v22 = (const std::string::value_type *)v39;
    if (v40 >= 0)
      v23 = HIBYTE(v40);
    else
      v23 = *((_QWORD *)&v39 + 1);
    std::string::append(a4, v22, v23);
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = (void *)v36.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
LABEL_46:
    if (!a2)
      return;
    goto LABEL_50;
  }
  v25 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(v13);
  std::string::basic_string[abi:ne180100]<0>(&v38, v25);
  v26 = std::string::insert(&v38, 0, "unexpected ", 0xBuLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v40 = v26->__r_.__value_.__r.__words[2];
  v39 = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v28 = (const std::string::value_type *)&v39;
  else
    v28 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v29 = HIBYTE(v40);
  else
    v29 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v28, v29);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_46;
  v24 = (void *)v38.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v24);
  if (!a2)
    return;
LABEL_50:
  v30 = (char *)nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(a2);
  std::string::basic_string[abi:ne180100]<0>(&v38, v30);
  v31 = std::string::insert(&v38, 0, "; expected ", 0xBuLL);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v40 = v31->__r_.__value_.__r.__words[2];
  v39 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v40 >= 0)
    v33 = (const std::string::value_type *)&v39;
  else
    v33 = (const std::string::value_type *)v39;
  if (v40 >= 0)
    v34 = HIBYTE(v40);
  else
    v34 = *((_QWORD *)&v39 + 1);
  std::string::append(a4, v33, v34);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_23C52231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::parse_error::~parse_error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2426211B8);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::exception_vtbl *v5;
  int64x2_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t **v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string v30;
  std::string __p;
  std::string v32;
  std::exception v33;
  _BYTE v34[24];
  std::string v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (std::exception_vtbl *)(a1 + 120);
  v6 = (int64x2_t *)(a1 + 40);
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        LOBYTE(v33.__vftable) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v33, a3);
        goto LABEL_17;
      case 2:
        LOBYTE(v33.__vftable) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(a2, (unsigned __int8 *)&v33, a3);
        goto LABEL_17;
      case 3:
        v33.__vftable = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(a2, (uint64_t)&v33, a3);
        goto LABEL_17;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(a2, (uint64_t)v5, a3);
        goto LABEL_17;
      case 5:
        v33.__vftable = *(std::exception_vtbl **)(a1 + 160);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(a2, (uint64_t *)&v33, a3);
        goto LABEL_17;
      case 6:
        v33.__vftable = *(std::exception_vtbl **)(a1 + 152);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(a2, (uint64_t *)&v33, a3);
        goto LABEL_17;
      case 7:
        if ((*(_QWORD *)(a1 + 168) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          v33.__vftable = *(std::exception_vtbl **)(a1 + 168);
          nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(a2, (uint64_t *)&v33, a3);
          goto LABEL_17;
        }
        v29 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v30);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("number overflow parsing '", &v30, &__p);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("'", &__p, &v32);
        nlohmann::detail::out_of_range::create(406, (uint64_t)&v32, (nlohmann::detail::exception *)&v33);
        v19 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>((uint64_t)a2, v29, (uint64_t)&v35, (const nlohmann::detail::out_of_range *)&v33);
        v33.__vftable = (std::exception_vtbl *)&off_250D49BC8;
        MEMORY[0x242620E4C](v34);
        std::exception::~exception(&v33);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        goto LABEL_43;
      case 8:
        if (!nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(a2, 0xFFFFFFFFFFFFFFFFLL, a3))goto LABEL_55;
        v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v7;
        if (v7 == 10)
          goto LABEL_12;
        LOBYTE(v33.__vftable) = 1;
        std::vector<BOOL>::push_back((uint64_t)&v36, &v33);
        continue;
      case 9:
        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(a2, 0xFFFFFFFFFFFFFFFFLL, a3) & 1) == 0)
        {
LABEL_55:
          v19 = 0;
          goto LABEL_37;
        }
        v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_51;
          v17 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
          v33.__vftable = v5;
          a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)+ 7);
          v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_54;
          LOBYTE(v33.__vftable) = 0;
          std::vector<BOOL>::push_back((uint64_t)&v36, &v33);
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
LABEL_32:
          *(_DWORD *)(a1 + 32) = v16;
          continue;
        }
LABEL_12:
        a2[2] -= 8;
LABEL_17:
        v9 = v37;
        if (!v37)
        {
LABEL_36:
          v19 = 1;
          goto LABEL_37;
        }
        while (2)
        {
          if (((*(_QWORD *)&v36[((unint64_t)(v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v9 - 1)) & 1) != 0)
          {
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_31;
            if (v10 != 10)
            {
              v24 = *(_QWORD *)(a1 + 72);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
              v32 = *(std::string *)(a1 + 72);
              std::string::basic_string[abi:ne180100]<0>(&v30, "array");
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xAu, (uint64_t)&v30, &__p);
              nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
              v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v24, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
              goto LABEL_42;
            }
            a2[2] -= 8;
            v11 = v37;
            if (!v37)
            {
              v25 = 10496;
              goto LABEL_53;
            }
LABEL_26:
            v9 = v11 - 1;
            v37 = v9;
            if (!v9)
              goto LABEL_36;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 13)
        {
          if (v12 != 11)
          {
            v26 = *(_QWORD *)(a1 + 72);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
            v32 = *(std::string *)(a1 + 72);
            std::string::basic_string[abi:ne180100]<0>(&v30, "object");
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xBu, (uint64_t)&v30, &__p);
            nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
            v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v26, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
            goto LABEL_42;
          }
          a2[2] -= 8;
          v11 = v37;
          if (!v37)
          {
            v25 = 10552;
LABEL_53:
            __assert_rtn("sax_parse_internal", "json.hpp", v25, "!states.empty()");
          }
          goto LABEL_26;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 4)
        {
LABEL_51:
          v27 = *(_QWORD *)(a1 + 72);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
          v32 = *(std::string *)(a1 + 72);
          std::string::basic_string[abi:ne180100]<0>(&v30, "object key");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 4u, (uint64_t)&v30, &__p);
          nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
          v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v27, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
          goto LABEL_42;
        }
        v14 = *(uint64_t ***)(*(_QWORD *)(a2[2] - 8) + 8);
        v33.__vftable = v5;
        a2[4] = (uint64_t)(std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (void **)&v5->~exception, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)+ 7);
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
        *(_DWORD *)(a1 + 32) = v15;
        if (v15 == 12)
        {
LABEL_31:
          v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::scan(v6);
          goto LABEL_32;
        }
LABEL_54:
        v28 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
        v32 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v30, "object separator");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0xCu, (uint64_t)&v30, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v28, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
LABEL_42:
        v19 = v22;
        v33.__vftable = (std::exception_vtbl *)&off_250D49BC8;
        MEMORY[0x242620E4C](v34);
        std::exception::~exception(&v33);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
LABEL_37:
        if (v36)
          operator delete(v36);
        return v19;
      case 0xE:
        v21 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
        v32 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v30, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0, (uint64_t)&v30, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v21, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
        goto LABEL_42;
      default:
        v23 = *(_QWORD *)(a1 + 72);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::get_token_string((uint64_t)v6, &v35);
        v32 = *(std::string *)(a1 + 72);
        std::string::basic_string[abi:ne180100]<0>(&v30, "value");
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,nlohmann::detail::input_stream_adapter>::exception_message(a1, 0x10u, (uint64_t)&v30, &__p);
        nlohmann::detail::parse_error::create(101, (uint64_t *)&v32, (uint64_t)&__p, (nlohmann::detail::exception *)&v33);
        v22 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>((uint64_t)a2, v23, (uint64_t)&v35, (const nlohmann::detail::parse_error *)&v33);
        goto LABEL_42;
    }
  }
}

void sub_23C522C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::exception a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  void *v40;

  a27.__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](v37 + 16);
  std::exception::~exception(&a27);
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a37 < 0)
    operator delete(a32);
  v40 = *(void **)(v38 - 88);
  if (v40)
    operator delete(v40);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::parse_error>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::parse_error *a4)
{
  nlohmann::detail::parse_error *exception;
  nlohmann::detail::parse_error *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = (nlohmann::detail::parse_error *)__cxa_allocate_exception(0x28uLL);
    v7 = nlohmann::detail::parse_error::parse_error(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::json_sax_dom_callback_parser(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  char v8;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100](a1 + 96, a3);
  *(_BYTE *)(a1 + 136) = 9;
  *(_BYTE *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 144) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  v8 = 1;
  std::vector<BOOL>::push_back(v6, &v8);
  return a1;
}

void sub_23C522E90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  _QWORD *v3;
  uint64_t **v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v6 = v3;
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(v4);
  v8 = (_QWORD *)v1[15];
  if (v8 == v6)
  {
    v9 = v6;
    v10 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v10 = 5;
    v9 = (_QWORD *)v1[15];
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = (void *)v1[7];
  if (v11)
    operator delete(v11);
  if (*v2)
    operator delete(*v2);
  v12 = *v5;
  if (*v5)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string v25;
  std::string v26;
  char v27;

  v4 = (char **)(a1 + 1);
  v27 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 0);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v27);
  v26.__r_.__value_.__s.__data_[0] = 1;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_23C604B28[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v25, a2);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("excessive object size: ", &v25, &v26);
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
      }
    }
  }
  return 1;
}

void sub_23C5230DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 *v16[4];
  unsigned __int8 *v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 1) & 1) == 0)
  {
    v3 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)(a1 + 17));
    v4 = *(_QWORD *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v3);
    v5 = *(_BYTE *)v4;
    *(_BYTE *)v4 = v20[0];
    v20[0] = v5;
    v6 = *(uint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v21;
    v21 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
  }
  v8 = a1[1];
  v7 = a1[2];
  if (v8 == v7)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  v9 = a1[5];
  if (!v9)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_object();
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 != v7 - 8)
  {
    v10 = *(unsigned __int8 **)(v7 - 16);
    if (v10)
    {
      if (*v10 - 1 <= 1)
      {
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(&v17, (uint64_t)v10);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(&v17);
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v16, *(_QWORD *)(a1[2] - 8));
        nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v16);
        if (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==(&v17, v16))
        {
          while (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v17) != 9)
          {
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(&v17);
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(v16, *(_QWORD *)(a1[2] - 8));
            nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v16);
            if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==(&v17, v16))
            {
              return 1;
            }
          }
          v11 = *(unsigned __int8 **)(a1[2] - 8);
          v13 = v17;
          v14 = v18;
          v15 = v19;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(v11, (uint64_t)&v13, v16);
        }
      }
    }
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::key(_QWORD *a1, __int128 *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  char v6;
  uint64_t *v7;
  _BYTE v9[8];
  uint64_t *v10;
  char v11;
  _BYTE v12[8];
  uint64_t *v13;
  __int128 *v14;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v12, (uint64_t)a2);
  v11 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (a1[2] - a1[1]) >> 3, 4);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 7), &v11);
  if (v11 && *(_QWORD *)(a1[2] - 8))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)(a1 + 17));
    v4 = *(uint64_t ***)(*(_QWORD *)(a1[2] - 8) + 8);
    v14 = a2;
    v5 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (void **)a2, (uint64_t)&std::piecewise_construct, &v14);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    v6 = *((_BYTE *)v5 + 56);
    v5 += 7;
    *(_BYTE *)v5 = v9[0];
    v9[0] = v6;
    v7 = (uint64_t *)v5[1];
    v5[1] = (uint64_t)v10;
    v10 = v7;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
    a1[10] = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
  return 1;
}

void sub_23C523408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, uint64_t *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  nlohmann::detail::exception *exception;
  std::string v25;
  std::string v26;
  char v27;

  v4 = (char **)(a1 + 1);
  v27 = std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 2);
  std::vector<BOOL>::push_back((uint64_t)(a1 + 4), &v27);
  v26.__r_.__value_.__s.__data_[0] = 2;
  nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v26, 1);
  v6 = v5;
  v7 = (_QWORD *)a1[2];
  v8 = a1[3];
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v8 - (_QWORD)*v4;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v6;
    v9 = v15 + 8;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = *v4;
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v9;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  a1[2] = (uint64_t)v9;
  if (a2 != -1)
  {
    v20 = (char *)*(v9 - 1);
    if (v20)
    {
      v21 = *v20;
      if (v21 > 2)
        v22 = 1;
      else
        v22 = qword_23C604B28[v21];
      if (v22 < a2)
      {
        exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
        std::to_string(&v25, a2);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("excessive array size: ", &v25, &v26);
        nlohmann::detail::out_of_range::create(408, (uint64_t)&v26, exception);
      }
    }
  }
  return 1;
}

void sub_23C523600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8];
  uint64_t *v13;

  v2 = a1[2];
  if (*(_QWORD *)(v2 - 8)
    && (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), ((unint64_t)(v2 - a1[1]) >> 3) - 1, 3) & 1) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v12, (uint64_t)(a1 + 17));
    v4 = *(_QWORD *)(a1[2] - 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    v5 = *(_BYTE *)v4;
    *(_BYTE *)v4 = v12[0];
    v12[0] = v5;
    v6 = *(uint64_t **)(v4 + 8);
    *(_QWORD *)(v4 + 8) = v13;
    v13 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v13, v12[0]);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v8 = a1[1];
  v7 = a1[2];
  if (v8 == v7)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  v9 = a1[5];
  if (!v9)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::end_array();
  a1[2] = v7 - 8;
  a1[5] = v9 - 1;
  if (v8 == v7 - 8)
    v3 = 1;
  if ((v3 & 1) == 0)
  {
    v10 = *(_QWORD *)(v7 - 16);
    if (*(_BYTE *)v10 == 2)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](*(_QWORD *)(v10 + 8), *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) - 16);
  }
  return 1;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  nlohmann::detail::out_of_range *exception;
  nlohmann::detail::out_of_range *v7;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

void nlohmann::detail::out_of_range::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_of_range");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &off_250D49CF0;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_23C5238BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::out_of_range::~out_of_range(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2426211B8);
}

uint64_t std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  char v5;
  int v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  _BYTE v26[8];
  uint64_t *v27;
  _BYTE v28[8];
  uint64_t *v29;
  _BYTE v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v31, v6);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "!key_keep_stack.empty()";
          v25 = 5763;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v25 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_23C523C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2426211B8);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  result = *a1;
  if (!result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  v3 = *result;
  if (v3 == 2)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)result + 1) + 8);
    result = a1[2];
    if (result == v5)
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    if (v4 == (unsigned __int8 *)(*((_QWORD *)result + 1) + 8))
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->();
    return v4 + 56;
  }
  else if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot get value");
    nlohmann::detail::invalid_iterator::create(214, (uint64_t)v7, exception);
  }
  return result;
}

void sub_23C523DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 **v6;
  int v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  nlohmann::detail::exception *exception;
  nlohmann::detail::exception *v17;
  nlohmann::detail::exception *v18;
  char *v19;
  std::string v20;
  std::string v21;

  if (*(unsigned __int8 **)a2 != a1)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v21, "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create(202, (uint64_t)&v21, exception);
  }
  v6 = (unsigned __int8 **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(a3, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(v6);
  v7 = *a1;
  if ((v7 - 3) < 6)
  {
    if (*(_QWORD *)(a2 + 24))
    {
      v17 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v21, "iterator out of range");
      nlohmann::detail::invalid_iterator::create(205, (uint64_t)&v21, v17);
    }
    if (v7 == 8)
    {
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      v15 = *v8;
      if (*v8)
      {
        v8[1] = v15;
        v10 = v15;
        goto LABEL_13;
      }
    }
    else
    {
      if (v7 != 3)
      {
LABEL_15:
        *a1 = 0;
        return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
      }
      v9 = (void **)(a1 + 8);
      v8 = (void **)*((_QWORD *)a1 + 1);
      if (*((char *)v8 + 23) < 0)
      {
        v10 = *v8;
LABEL_13:
        operator delete(v10);
        v8 = (void **)*v9;
      }
    }
    operator delete(v8);
    *v9 = 0;
    goto LABEL_15;
  }
  if (v7 == 1)
  {
    result = (uint64_t)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::erase(*((uint64_t ***)a1 + 1), *(uint64_t **)(a2 + 8));
    a3[1] = result;
  }
  else
  {
    if (v7 != 2)
    {
      v18 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v19 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
      std::string::basic_string[abi:ne180100]<0>(&v20, v19);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot use erase() with ", &v20, &v21);
      nlohmann::detail::type_error::create(307, (uint64_t)&v21, v18);
    }
    v11 = *((_QWORD *)a1 + 1);
    v12 = *(_QWORD *)(a2 + 16);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>((uint64_t)&v21, v12 + 16, *(_QWORD *)(v11 + 8), v12);
    result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__base_destruct_at_end[abi:ne180100](v11, v13);
    a3[2] = v12;
  }
  return result;
}

void sub_23C52400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  char v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if ((v21 & 1) != 0)
    __cxa_free_exception(v20);
  _Unwind_Resume(exception_object);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(unsigned __int8 **result)
{
  int v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL v5;

  if (!*result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++();
  v1 = **result;
  if (v1 == 2)
  {
    result[2] += 16;
  }
  else if (v1 == 1)
  {
    v2 = result[1];
    v3 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(unsigned __int8 **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    result[1] = v4;
  }
  else
  {
    ++result[3];
  }
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_begin(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_begin", "json.hpp", 10942, "m_object != nullptr");
  v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else
    {
      result[3] = 0;
    }
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::iter_impl(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x8000000000000000;
  if (!a2)
    __assert_rtn("iter_impl", "json.hpp", 10856, "m_object != nullptr");
  return result;
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create(212, (uint64_t)v8, exception);
  }
  if (!v2)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==();
  v3 = *v2;
  if (v3 == 2)
  {
    v4 = a1[2];
    v5 = a2[2];
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    v5 = a2[1];
  }
  else
  {
    v4 = a1[3];
    v5 = a2[3];
  }
  return v4 == v5;
}

void sub_23C5242A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void nlohmann::detail::invalid_iterator::create(int a1@<W0>, uint64_t a2@<X1>, nlohmann::detail::exception *a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p;
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  std::string::basic_string[abi:ne180100]<0>(&__p, "invalid_iterator");
  nlohmann::detail::exception::name(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p);
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  nlohmann::detail::exception::exception(a3, a1, (const char *)v11);
  *(_QWORD *)a3 = &off_250D49CC8;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_23C5243C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlohmann::detail::invalid_iterator::~invalid_iterator(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)&off_250D49BC8;
  MEMORY[0x242620E4C](&this[2]);
  std::exception::~exception(this);
  JUMPOUT(0x2426211B8);
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::set_end(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_end", "json.hpp", 10979, "m_object != nullptr");
  v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((_QWORD *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((_QWORD *)v1 + 1) + 8);
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;

  v4 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(a1, a2);
  std::allocator_traits<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::destroy[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void,void>((uint64_t)(a1 + 1), (uint64_t)(a2 + 4));
  operator delete(a2);
  return v4;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  char v10[8];
  uint64_t *v11;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v10[0] = *(_BYTE *)v5;
    v11 = *(uint64_t **)(v5 + 8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
    *(_BYTE *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    v7 = *(_BYTE *)a4;
    *(_BYTE *)a4 = v10[0];
    v10[0] = v7;
    v8 = *(uint64_t **)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v11;
    v11 = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v11, v10[0]);
    a4 += 16;
    v5 += 16;
  }
  while (v5 != v6);
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C524B00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&this[1]);
  return this;
}

nlohmann::detail::out_of_range *nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2)
{
  *(_QWORD *)this = &off_250D49BC8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x242620E40]((char *)this + 16, (char *)a2 + 16);
  *(_QWORD *)this = &off_250D49CF0;
  return this;
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = 7;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "!key_keep_stack.empty()";
          v25 = 5763;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v25 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_23C524F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = (uint64_t *)*a2;
    v30[0] = 4;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "!key_keep_stack.empty()";
          v25 = 5763;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v25 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_23C52520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  const char *v23;
  int v24;
  _BYTE v25[8];
  uint64_t *v26;
  _BYTE v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v29[0] = 0;
    v30 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v14 = *(_BYTE *)v13;
        *(_BYTE *)v13 = v27[0];
        v27[0] = v14;
        v15 = *(uint64_t **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v28;
        v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        v12 = 1;
        goto LABEL_21;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(_BYTE *)v10 = v29[0];
            *(_QWORD *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v16 = a1[8];
          if (v16)
          {
            v17 = v16 - 1;
            v18 = *(_QWORD *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if (((v18 >> v17) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v25[0] = v29[0];
              v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v20 = *(_BYTE *)v19;
              *(_BYTE *)v19 = v25[0];
              v25[0] = v20;
              v21 = *(uint64_t **)(v19 + 8);
              *(_QWORD *)(v19 + 8) = v26;
              v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v23 = "!key_keep_stack.empty()";
          v24 = 5763;
        }
        else
        {
          v23 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v24 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v24, v23);
      }
    }
LABEL_17:
    v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_23C52550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = 5;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "!key_keep_stack.empty()";
          v25 = 5763;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v25 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_23C525814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  const char *v23;
  int v24;
  _BYTE v25[8];
  uint64_t *v26;
  _BYTE v27[8];
  uint64_t *v28;
  _BYTE v29[8];
  uint64_t *v30;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v29, a2);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v27[0] = v29[0];
        v28 = v30;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
        v29[0] = 0;
        v30 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v13 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        v14 = *(_BYTE *)v13;
        *(_BYTE *)v13 = v27[0];
        v27[0] = v14;
        v15 = *(uint64_t **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v28;
        v28 = v15;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v27);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v28, v27[0]);
LABEL_20:
        v12 = 1;
        goto LABEL_21;
      }
      v7 = *(unsigned __int8 **)(v6 - 8);
      if (v7)
      {
        v8 = *v7;
        if (v8 == 2)
        {
          v9 = (uint64_t *)*((_QWORD *)v7 + 1);
          v10 = v9[1];
          if (v10 >= v9[2])
          {
            v11 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v9, (uint64_t)v29);
          }
          else
          {
            *(_BYTE *)v10 = v29[0];
            *(_QWORD *)(v10 + 8) = v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
            v29[0] = 0;
            v30 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
            v11 = v10 + 16;
          }
          v9[1] = v11;
          goto LABEL_20;
        }
        if (v8 == 1)
        {
          v16 = a1[8];
          if (v16)
          {
            v17 = v16 - 1;
            v18 = *(_QWORD *)(a1[7] + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v17;
            if (((v18 >> v17) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v25[0] = v29[0];
              v26 = v30;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
              v29[0] = 0;
              v30 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v19 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              v20 = *(_BYTE *)v19;
              *(_BYTE *)v19 = v25[0];
              v25[0] = v20;
              v21 = *(uint64_t **)(v19 + 8);
              *(_QWORD *)(v19 + 8) = v26;
              v26 = v21;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v26, v25[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v23 = "!key_keep_stack.empty()";
          v24 = 5763;
        }
        else
        {
          v23 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v24 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v24, v23);
      }
    }
LABEL_17:
    v12 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v30, v29[0]);
    return v12;
  }
  return 0;
}

void sub_23C525B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t *v22;
  const char *v24;
  int v25;
  unsigned __int8 v26[8];
  uint64_t *v27;
  unsigned __int8 v28[8];
  uint64_t *v29;
  unsigned __int8 v30[8];
  uint64_t *v31;

  v3 = a1[5];
  if (!v3)
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
  if (((*(_QWORD *)(a1[4] + (((unint64_t)(v3 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v3 - 1)) & 1) != 0)
  {
    v5 = a3;
    v6 = *a2;
    v30[0] = 6;
    v31 = v6;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    if ((v5 & 1) != 0
      || (std::function<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::operator()((uint64_t)(a1 + 12), (unint64_t)(a1[2] - a1[1]) >> 3, 5) & 1) != 0)
    {
      v7 = a1[2];
      if (a1[1] == v7)
      {
        v28[0] = v30[0];
        v29 = v31;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
        v30[0] = 0;
        v31 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v14 = *a1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        v15 = *(_BYTE *)v14;
        *(_BYTE *)v14 = v28[0];
        v28[0] = v15;
        v16 = *(uint64_t **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v29;
        v29 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
LABEL_20:
        v13 = 1;
        goto LABEL_21;
      }
      v8 = *(unsigned __int8 **)(v7 - 8);
      if (v8)
      {
        v9 = *v8;
        if (v9 == 2)
        {
          v10 = (uint64_t *)*((_QWORD *)v8 + 1);
          v11 = v10[1];
          if (v11 >= v10[2])
          {
            v12 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v10, (uint64_t)v30);
          }
          else
          {
            *(_BYTE *)v11 = v30[0];
            *(_QWORD *)(v11 + 8) = v31;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
            v30[0] = 0;
            v31 = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
            v12 = v11 + 16;
          }
          v10[1] = v12;
          goto LABEL_20;
        }
        if (v9 == 1)
        {
          v17 = a1[8];
          if (v17)
          {
            v18 = v17 - 1;
            v19 = *(_QWORD *)(a1[7] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8));
            a1[8] = v18;
            if (((v19 >> v18) & 1) != 0)
            {
              if (!a1[10])
                __assert_rtn("handle_value", "json.hpp", 5772, "object_element");
              v26[0] = v30[0];
              v27 = v31;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
              v30[0] = 0;
              v31 = 0;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v20 = a1[10];
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              v21 = *(_BYTE *)v20;
              *(_BYTE *)v20 = v26[0];
              v26[0] = v21;
              v22 = *(uint64_t **)(v20 + 8);
              *(_QWORD *)(v20 + 8) = v27;
              v27 = v22;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          v24 = "!key_keep_stack.empty()";
          v25 = 5763;
        }
        else
        {
          v24 = "ref_stack.back()->is_array() || ref_stack.back()->is_object()";
          v25 = 5751;
        }
        __assert_rtn("handle_value", "json.hpp", v25, v24);
      }
    }
LABEL_17:
    v13 = 0;
LABEL_21:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v30);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v31, v30[0]);
    return v13;
  }
  return 0;
}

void sub_23C525E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref((uint64_t **)va);
  _Unwind_Resume(a1);
}

nlohmann::detail::parse_error *nlohmann::detail::parse_error::parse_error(nlohmann::detail::parse_error *this, const nlohmann::detail::parse_error *a2)
{
  *(_QWORD *)this = &off_250D49BC8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  MEMORY[0x242620E40]((char *)this + 16, (char *)a2 + 16);
  *(_QWORD *)this = &off_250D49D30;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  return this;
}

void nlohmann::detail::parse_error::position_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ", 9uLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ", 9uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_23C525FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

const char *nlohmann::detail::lexer_base<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::token_type_name(unsigned int a1)
{
  if (a1 > 0x10)
    return "unknown token";
  else
    return off_250D49D98[a1];
}

uint64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_sax_dom_callback_parser(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 136);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_object(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string v24;
  std::string v25;

  v25.__r_.__value_.__s.__data_[0] = 1;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v25, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_23C604B28[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v24, a2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("excessive object size: ", &v24, &v25);
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v25, exception);
    }
  }
  return 1;
}

void sub_23C526284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::start_array(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  nlohmann::detail::exception *exception;
  std::string v24;
  std::string v25;

  v25.__r_.__value_.__s.__data_[0] = 2;
  v5 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(a1, (unsigned __int8 *)&v25, a3);
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[1];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    v18 = (char *)a1[1];
    v17 = (char *)a1[2];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[1];
    }
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v8;
    a1[3] = (uint64_t)v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  a1[2] = (uint64_t)v8;
  if (a2 != -1)
  {
    v20 = *(char *)*(v8 - 1);
    if (v20 > 2)
      v21 = 1;
    else
      v21 = qword_23C604B28[v20];
    if (v21 < a2)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::to_string(&v24, a2);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("excessive array size: ", &v24, &v25);
      nlohmann::detail::out_of_range::create(408, (uint64_t)&v25, exception);
    }
  }
  return 1;
}

void sub_23C52647C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::parse_error<nlohmann::detail::out_of_range>(uint64_t a1, uint64_t a2, uint64_t a3, const nlohmann::detail::out_of_range *a4)
{
  nlohmann::detail::out_of_range *exception;
  nlohmann::detail::out_of_range *v7;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    exception = (nlohmann::detail::out_of_range *)__cxa_allocate_exception(0x20uLL);
    v7 = nlohmann::detail::out_of_range::out_of_range(exception, a4);
  }
  return 0;
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t *v18;
  char v19[8];
  uint64_t *v20;
  char v21[8];
  uint64_t *v22;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = *a2;
    v21[0] = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v22, v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v11 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v12 = *(_BYTE *)v11;
    *(_BYTE *)v11 = v21[0];
    v21[0] = v12;
    v13 = *(uint64_t **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v22;
    v22 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v21[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(v7, a2);
      }
      else
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>((uint64_t)v7, a2);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v15 = *a2;
      v19[0] = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(&v20, v15);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      v16 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      v17 = *(_BYTE *)v16;
      *(_BYTE *)v16 = v19[0];
      v19[0] = v17;
      v18 = *(uint64_t **)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v20;
      v20 = v18;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__construct_one_at_end[abi:ne180100]<nlohmann::detail::value_t>(uint64_t a1, unsigned __int8 *a2)
{
  _BYTE *v3;
  int v4;
  uint64_t result;

  v4 = *a2;
  v3 = *(_BYTE **)(a1 + 8);
  *v3 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v3 + 8, v4);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  *(_QWORD *)(a1 + 8) = v3 + 16;
  return result;
}

void sub_23C5266EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<nlohmann::detail::value_t>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[16 * v9];
  v12 = *a2;
  *v11 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::json_value(v11 + 8, v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
  v16 += 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23C5267D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<double &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 7;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 7;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 7;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<double &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 7;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_23C526A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<BOOL &>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 4;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 4;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 4;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<BOOL &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 4;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_23C526D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<decltype(nullptr)>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t *v16;
  char v17[8];
  uint64_t *v18;
  char v19[8];
  uint64_t *v20;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v19[0] = 0;
    v20 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    v10 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    v11 = *(_BYTE *)v10;
    *(_BYTE *)v10 = v19[0];
    v19[0] = v11;
    v12 = *(uint64_t **)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v20;
    v20 = v12;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v9 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(v7);
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v9 = v8 + 16;
      }
      v7[1] = v9;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      v17[0] = 0;
      v18 = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      v14 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      v15 = *(_BYTE *)v14;
      *(_BYTE *)v14 = v17[0];
      v17[0] = v15;
      v16 = *(uint64_t **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v18;
      v18 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v18, v17[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<decltype(nullptr)>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = a1[2] - v2;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  v13[4] = a1 + 2;
  v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v5, v7);
  v9 = (uint64_t)&v8[16 * v3];
  v13[0] = v8;
  v13[1] = v9;
  v13[3] = &v8[16 * v10];
  *(_BYTE *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  v13[2] = v9 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v13);
  v11 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v13);
  return v11;
}

void sub_23C526F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 5;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 5;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 5;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 5;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_23C5271FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<std::string&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t **v5;
  int v6;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t *v13;
  char v14[8];
  uint64_t *v15;
  char v16[8];
  uint64_t *v17;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v16, a2);
    v8 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v9 = *(_BYTE *)v8;
    *(_BYTE *)v8 = v16[0];
    v16[0] = v9;
    v10 = *(uint64_t **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v17;
    v17 = v10;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    return *a1;
  }
  else
  {
    v5 = *(uint64_t ***)(v4 - 8);
    v6 = *(unsigned __int8 *)v5;
    if (v6 == 2)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(v5[1], a2);
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, a2, a3);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v14, a2);
      v11 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      v12 = *(_BYTE *)v11;
      *(_BYTE *)v11 = v14[0];
      v14[0] = v12;
      v13 = *(uint64_t **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v15;
      v15 = v13;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v15, v14[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::emplace_back<std::string&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v19 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v4, v12);
    else
      v13 = 0;
    v15 = v13;
    v16 = &v13[16 * v9];
    v18 = &v13[16 * v12];
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v16, a2);
    v17 = v16 + 16;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, &v15);
    v8 = a1[1];
    std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_23C527440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<unsigned long long &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t *v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t *v19;
  unsigned __int8 v20[8];
  uint64_t *v21;
  unsigned __int8 v22[8];
  uint64_t *v23;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v11 = (uint64_t *)*a2;
    v22[0] = 6;
    v23 = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v12 = *a1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v13 = *(_BYTE *)v12;
    *(_BYTE *)v12 = v22[0];
    v22[0] = v13;
    v14 = *(uint64_t **)(v12 + 8);
    *(_QWORD *)(v12 + 8) = v23;
    v23 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v12);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
    return *a1;
  }
  else
  {
    v5 = *(unsigned __int8 **)(v4 - 8);
    v6 = *v5;
    if (v6 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)v5 + 1);
      v8 = v7[1];
      if (v8 >= v7[2])
      {
        v10 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(v7, a2);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = 0;
        v9 = *a2;
        *(_BYTE *)v8 = 6;
        *(_QWORD *)(v8 + 8) = v9;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v8);
        v10 = v8 + 16;
      }
      v7[1] = v10;
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[2] - 8) + 8) + 8) - 16;
    }
    else
    {
      if (v6 != 1)
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      if (!a1[4])
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::handle_value<nlohmann::detail::value_t>((uint64_t)a1, (uint64_t)a2, a3);
      v16 = (uint64_t *)*a2;
      v20[0] = 6;
      v21 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v17 = a1[4];
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      v18 = *(_BYTE *)v17;
      *(_BYTE *)v17 = v20[0];
      v20[0] = v18;
      v19 = *(uint64_t **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = v21;
      v21 = v19;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
      return a1[4];
    }
  }
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__emplace_back_slow_path<unsigned long long &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v7, v9);
  v11 = (uint64_t)&v10[16 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[16 * v12];
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a2;
  *(_BYTE *)v11 = 6;
  *(_QWORD *)(v11 + 8) = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
  v16[2] = v11 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_23C5276E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlohmann::detail::input_stream_adapter::~input_stream_adapter(nlohmann::detail::input_stream_adapter *this)
{
  if (*(_QWORD *)this)
    std::ios_base::clear((std::ios_base *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24)), *(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32) & 2);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _OWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  v8 = *((_QWORD *)*a2 + 2);
  v6[2] = **a2;
  *((_QWORD *)v6 + 6) = v8;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((_QWORD *)v6 + 8) = 0;
  *((_BYTE *)v6 + 56) = 0;
  v9 = (uint64_t)v6 + 56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6 + 56);
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v9);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(char *result, float *a2)
{
  char *v2;
  float v3;
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = 0.0;
      if (result[8])
        v3 = 1.0;
      break;
    case 5:
      v3 = (float)*((uint64_t *)result + 1);
      break;
    case 6:
      v3 = (float)*((unint64_t *)result + 1);
      break;
    case 7:
      v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v6, v5);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be number, but is ", &v6, &v7);
      nlohmann::detail::type_error::create(302, (uint64_t)&v7, exception);
  }
  *a2 = v3;
  return result;
}

void sub_23C527940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(_BYTE *result, unsigned int *a2)
{
  char *v2;
  unsigned int v3;
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_DWORD *)result + 2);
      break;
    case 7:
      v3 = *((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v6, v5);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be number, but is ", &v6, &v7);
      nlohmann::detail::type_error::create(302, (uint64_t)&v7, exception);
  }
  *a2 = v3;
  return result;
}

void sub_23C527A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::string,std::string,0>@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a1, a2);
}

void sub_23C527B04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t a1, std::string *this)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*(_BYTE *)a1 != 3)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name((char *)a1);
    std::string::basic_string[abi:ne180100]<0>(&v6, v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be string, but is ", &v6, &v7);
    nlohmann::detail::type_error::create(302, (uint64_t)&v7, exception);
  }
  return std::string::operator=(this, *(const std::string **)(a1 + 8));
}

void sub_23C527BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

uint64_t nlohmann::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  double v10;
  double v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD v50[3];
  char v51;

  v3 = *a1;
  v4 = *a2;
  if (v3 != v4)
  {
    if (v3 == 5 && v4 == 7)
    {
      v12 = (double)*((uint64_t *)a1 + 1);
    }
    else
    {
      if (v3 == 7 && v4 == 5)
      {
        v10 = *((double *)a1 + 1);
        v11 = (double)*((uint64_t *)a2 + 1);
        return v10 == v11;
      }
      if (v3 != 6 || v4 != 7)
      {
        if (v3 != 7 || v4 != 6)
        {
          if (v3 != 6 || v4 != 5)
          {
            result = 0;
            if (v3 != 5 || v4 != 6)
              return result;
          }
          return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
        }
        v10 = *((double *)a1 + 1);
        v11 = (double)*((unint64_t *)a2 + 1);
        return v10 == v11;
      }
      v12 = (double)*((unint64_t *)a1 + 1);
    }
    return *((double *)a2 + 1) == v12;
  }
  result = 1;
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      v13 = (_QWORD *)*((_QWORD *)a1 + 1);
      v14 = (_QWORD *)*((_QWORD *)a2 + 1);
      if (v13[2] != v14[2])
        return 0;
      v17 = (_QWORD *)*v13;
      v15 = v13 + 1;
      v16 = v17;
      if (v17 == v15)
        return result;
      v18 = (_QWORD *)*v14;
      break;
    case 2:
      v29 = (uint64_t *)*((_QWORD *)a1 + 1);
      v30 = (uint64_t *)*((_QWORD *)a2 + 1);
      v31 = *v29;
      v32 = v29[1];
      v33 = *v30;
      if (v32 - *v29 != v30[1] - *v30)
        return 0;
      while (v31 != v32)
      {
        result = nlohmann::operator==(v31, v33);
        if (!(_DWORD)result)
          break;
        v31 += 16;
        v33 += 16;
      }
      return result;
    case 3:
      v34 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
      v35 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
      v36 = v34[23];
      if ((v36 & 0x80u) == 0)
        v37 = (unsigned __int8 *)v34[23];
      else
        v37 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
      v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
      v39 = (char)v38;
      if ((char)v38 < 0)
        v38 = v35[1];
      if (v37 != v38)
        return 0;
      if (v39 >= 0)
        v40 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      else
        v40 = *v35;
      if ((v36 & 0x80) != 0)
        return memcmp(*(const void **)v34, v40, *((_QWORD *)v34 + 1)) == 0;
      if (v34[23])
      {
        v41 = v36 - 1;
        do
        {
          v43 = *v34++;
          v42 = v43;
          v45 = *v40++;
          v44 = v45;
          v47 = v41-- != 0;
          result = v42 == v44;
        }
        while (v42 == v44 && v47);
      }
      return result;
    case 4:
      return a1[8] == a2[8];
    case 5:
    case 6:
      return *((_QWORD *)a1 + 1) == *((_QWORD *)a2 + 1);
    case 7:
      v10 = *((double *)a1 + 1);
      v11 = *((double *)a2 + 1);
      return v10 == v11;
    case 8:
      v48 = *((_QWORD *)a2 + 1);
      v50[0] = *((_QWORD *)a1 + 1);
      v50[1] = v50[0] + 24;
      v50[2] = v50[0] + 25;
      v49[0] = v48;
      v49[1] = v48 + 24;
      v49[2] = v48 + 25;
      return std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>,std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>>((uint64_t)&v51, (uint64_t)v50, (uint64_t)v49);
    default:
      return 0;
  }
  while (1)
  {
    v19 = *((unsigned __int8 *)v16 + 55);
    if ((v19 & 0x80u) == 0)
      v20 = *((unsigned __int8 *)v16 + 55);
    else
      v20 = v16[5];
    v21 = *((unsigned __int8 *)v18 + 55);
    v22 = (char)v21;
    if ((v21 & 0x80u) != 0)
      v21 = v18[5];
    if (v20 != v21)
      return 0;
    v23 = (const void **)(v16 + 4);
    if (v22 >= 0)
      v24 = (unsigned __int8 *)(v18 + 4);
    else
      v24 = (unsigned __int8 *)v18[4];
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(*v23, v24, v16[5]))
        return 0;
    }
    else if (*((_BYTE *)v16 + 55))
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v19)
          goto LABEL_41;
      }
      return 0;
    }
LABEL_41:
    result = nlohmann::operator==(v16 + 7, v18 + 7);
    if ((_DWORD)result)
    {
      v25 = (_QWORD *)v16[1];
      v26 = v16;
      if (v25)
      {
        do
        {
          v16 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v26[2];
          v6 = *v16 == (_QWORD)v26;
          v26 = v16;
        }
        while (!v6);
      }
      v27 = (_QWORD *)v18[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v18[2];
          v6 = *v28 == (_QWORD)v18;
          v18 = v28;
        }
        while (!v6);
      }
      result = 1;
      v18 = v28;
      if (v16 != v15)
        continue;
    }
    return result;
  }
}

BOOL std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>,std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  return std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>,std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>>((uint64_t)&v6, (const void ***)a2, (uint64_t *)a3)&& **(unsigned __int8 **)(a2 + 8) == **(unsigned __int8 **)(a3 + 8)&& **(unsigned __int8 **)(a2 + 16) == **(unsigned __int8 **)(a3 + 16);
}

BOOL std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>,std::tuple<std::vector<unsigned char> const&,unsigned char const&,BOOL const&>>(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v3;
  _BYTE *v4;
  size_t v5;

  v3 = *a3;
  v4 = **a2;
  v5 = (_BYTE *)(*a2)[1] - v4;
  return v5 == *(_QWORD *)(v3 + 8) - *(_QWORD *)v3 && memcmp(v4, *(const void **)v3, v5) == 0;
}

char *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(char *result, _BYTE *a2)
{
  char *v2;
  nlohmann::detail::exception *exception;
  char *v4;
  std::string v5;
  std::string v6;

  v2 = result;
  if (*result != 4)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v4 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
    std::string::basic_string[abi:ne180100]<0>(&v5, v4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be BOOLean, but is ", &v5, &v6);
    nlohmann::detail::type_error::create(302, (uint64_t)&v6, exception);
  }
  *a2 = result[8];
  return result;
}

void sub_23C5280E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get<std::vector<unsigned long>,std::vector<unsigned long>,0>@<D0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(a1, (uint64_t)a2);
}

void sub_23C528170(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>,0>(char *a1, uint64_t a2)
{
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  if (*a1 != 2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(a1);
    std::string::basic_string[abi:ne180100]<0>(&v6, v5);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be array, but is ", &v6, &v7);
    nlohmann::detail::type_error::create(302, (uint64_t)&v7, exception);
  }
  return nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>((unsigned __int8 *)a1, a2);
}

void sub_23C528230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

double nlohmann::detail::from_json_array_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,std::vector<unsigned long>>(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v4;
  char *i;
  unsigned __int8 *v6;
  char *v7;
  void *v8;
  double result;
  unsigned __int8 *v10[4];
  unsigned __int8 *v11[4];
  __int128 v12;
  uint64_t v13;
  unint64_t v14;

  v12 = 0uLL;
  v13 = 0;
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  std::vector<unsigned long>::reserve((void **)&v12, v4);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v11, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(v11);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(v10, (uint64_t)a1);
  nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(v10);
  for (i = (char *)*((_QWORD *)&v12 + 1);
        !nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(v11, v10);
        i = v7 + 8)
  {
    v6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(v11);
    v14 = 0;
    nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(v6, &v14);
    v7 = std::vector<unsigned long>::insert((uint64_t)&v12, i, &v14);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++(v11);
  }
  v8 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v8;
    operator delete(v8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(double *)&v12;
  *(_OWORD *)a2 = v12;
  *(_QWORD *)(a2 + 16) = v13;
  return result;
}

void sub_23C5283B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 48);
  if (v3)
  {
    *(_QWORD *)(v1 - 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  nlohmann::detail::exception *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  result = *a1;
  if (!result)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
  v3 = *result;
  if (v3 == 1)
  {
    v6 = a1[1];
    if (v6 == (unsigned __int8 *)(*((_QWORD *)result + 1) + 8))
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
    return v6 + 56;
  }
  else if (v3 == 2)
  {
    v5 = *(unsigned __int8 **)(*((_QWORD *)result + 1) + 8);
    result = a1[2];
    if (result == v5)
      nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*();
  }
  else
  {
    if (!*result)
    {
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, exception);
    }
    if (a1[3])
    {
      v4 = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v8, "cannot get value");
      nlohmann::detail::invalid_iterator::create(214, (uint64_t)v8, v4);
    }
  }
  return result;
}

void sub_23C528594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  nlohmann::detail::exception *exception;
  _QWORD v8[3];

  v2 = *a1;
  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create(212, (uint64_t)v8, exception);
  }
  if (!v2)
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator==();
  v3 = *v2;
  if (v3 == 2)
  {
    v4 = a1[2];
    v5 = a2[2];
  }
  else if (v3 == 1)
  {
    v4 = a1[1];
    v5 = a2[1];
  }
  else
  {
    v4 = a1[3];
    v5 = a2[3];
  }
  return v4 == v5;
}

void sub_23C528698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

_BYTE *nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned long,0>(_BYTE *result, unint64_t *a2)
{
  char *v2;
  unint64_t v3;
  nlohmann::detail::exception *exception;
  char *v5;
  std::string v6;
  std::string v7;

  v2 = result;
  switch(*result)
  {
    case 4:
      v3 = result[8];
      break;
    case 5:
    case 6:
      v3 = *((_QWORD *)result + 1);
      break;
    case 7:
      v3 = (unint64_t)*((double *)result + 1);
      break;
    default:
      exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
      v5 = (char *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::type_name(v2);
      std::string::basic_string[abi:ne180100]<0>(&v6, v5);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("type must be number, but is ", &v6, &v7);
      nlohmann::detail::type_error::create(302, (uint64_t)&v7, exception);
  }
  *a2 = v3;
  return result;
}

void sub_23C5287A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

char *std::vector<unsigned long>::insert(uint64_t a1, char *__src, _QWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v15 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = (__src - v14) >> 3;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 2 > v15)
      v15 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[8 * v16];
    v23 = v22;
    v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long>::push_back(&__p, a3);
    v4 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v10 = __src + 8;
    v11 = v6 - 8;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v13;
      v12 += 8;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    *(_QWORD *)v4 = *a3;
  }
  return v4;
}

void sub_23C528970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<unsigned long>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] = v4 + 8;
}

char *std::vector<unsigned long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_begin(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_begin", "json.hpp", 10942, "m_object != nullptr");
  v2 = *v1;
  if (*v1)
  {
    if (v2 == 2)
    {
      result[2] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else if (v2 == 1)
    {
      result[1] = (unsigned __int8 *)**((_QWORD **)v1 + 1);
    }
    else
    {
      result[3] = 0;
    }
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::iter_impl(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0x8000000000000000;
  if (!a2)
    __assert_rtn("iter_impl", "json.hpp", 10856, "m_object != nullptr");
  return result;
}

unsigned __int8 **nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::set_end(unsigned __int8 **result)
{
  unsigned __int8 *v1;
  int v2;

  v1 = *result;
  if (!*result)
    __assert_rtn("set_end", "json.hpp", 10979, "m_object != nullptr");
  v2 = *v1;
  if (v2 == 2)
  {
    result[2] = *(unsigned __int8 **)(*((_QWORD *)v1 + 1) + 8);
  }
  else if (v2 == 1)
  {
    result[1] = (unsigned __int8 *)(*((_QWORD *)v1 + 1) + 8);
  }
  else
  {
    result[3] = (unsigned __int8 *)1;
  }
  return result;
}

void OUTLINED_FUNCTION_0_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5716, a4);
}

void OUTLINED_FUNCTION_1_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5484, a4);
}

void OUTLINED_FUNCTION_2_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 5475, a4);
}

BOOL cv3d::cv::gess::io::LoadHeader(uint64_t a1, _OWORD *a2)
{
  _BOOL8 Header;
  std::string __p;
  __int128 v6;
  uint64_t v7;

  v6 = 0uLL;
  v7 = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Header = cv3d::cv::gess::internal::CoreGraphicsLoadHeader((uint64_t *)&__p, (int *)&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a2 = v6;
  if (v7)
    MEMORY[0x2426211A0](v7, 0x1000C8077774924);
  return Header;
}

void sub_23C528D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    MEMORY[0x2426211A0](a18, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::io::SaveJpeg(char *a1, uint64_t a2, int a3)
{
  return cv3d::cv::gess::internal::CoreGraphicsSaveImage(a1, a2, a3, 1);
}

BOOL cv3d::cv::gess::io::SaveJpeg(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _BOOL8 v8;
  unint64_t v9;
  std::string __p;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;

  v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6[1].__vftable = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49E30;
  v6[1].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = 0;
  v12 = v6 + 1;
  v13 = v6;
  if (cv3d::cv::gess::util::Image::copyFrom((uint64_t)&v6[1], a2))
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    v8 = cv3d::cv::gess::internal::CoreGraphicsSaveImage((char *)&__p, (uint64_t)&v6[1], a3, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void sub_23C528ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::io::SavePng(char *a1, uint64_t a2)
{
  return cv3d::cv::gess::internal::CoreGraphicsSaveImage(a1, a2, 100, 0);
}

BOOL cv3d::cv::gess::io::SavePng(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  _BOOL8 v6;
  unint64_t v7;
  std::string __p;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4[1].__vftable = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49E30;
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v10 = v4 + 1;
  v11 = v4;
  if (cv3d::cv::gess::util::Image::copyFrom((uint64_t)&v4[1], a2))
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    v6 = cv3d::cv::gess::internal::CoreGraphicsSaveImage((char *)&__p, (uint64_t)&v4[1], 100, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = 0;
  }
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_23C529010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::LoadExr(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  _BOOL4 ImageExr;
  _BOOL4 v8;
  uint64_t v9;
  unint64_t v10;
  std::string __p;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = 0;
  v6 = (uint64_t)&v4[1];
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
  v4[1].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  v13 = v4 + 1;
  v14 = v4;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  ImageExr = cv3d::cv::gess::internal::CoreGraphicsLoadImageExr((uint64_t *)&__p, v6);
  v8 = ImageExr;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_6;
  }
  else if (ImageExr)
  {
LABEL_6:
    v9 = cv3d::cv::gess::util::Image::copyFrom(a2, v6);
    goto LABEL_9;
  }
  v9 = 0;
  do
LABEL_9:
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v9;
}

void sub_23C529140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::io::SaveExr(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  _BOOL8 v8;
  unint64_t v9;
  std::string __p;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;

  v6 = (std::__shared_weak_count *)operator new(0x30uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6[1].__vftable = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
  v6[1].__shared_owners_ = 0;
  v6[1].__shared_weak_owners_ = 0;
  v12 = v6 + 1;
  v13 = v6;
  if (cv3d::cv::gess::util::Imagef::copyFrom((uint64_t)&v6[1], a2))
  {
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    v8 = cv3d::cv::gess::io::SaveExr((char *)&__p, (uint64_t)&v6[1], a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

void sub_23C529274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::io::SaveExr(char *a1, uint64_t a2, int a3)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int v9;
  unint64_t v11;
  void *v12;
  _DWORD *v13;
  int v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  _BOOL8 v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unint64_t v25;
  void *v26;
  _DWORD *v27;
  _DWORD *v28;
  int *v29;
  _DWORD *v30;
  int v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  uint64_t j;
  void *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unint64_t v45;
  void *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  uint64_t i;
  void *v59;
  char *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void *__p[3];
  void **v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  _BYTE v77[104];
  void *v78;
  void *v79;
  int v80;
  int v81;
  void *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v5 = *(_DWORD *)(a2 + 12);
  switch(v5)
  {
    case 4:
      v40 = *(_DWORD *)(a2 + 4);
      v41 = *(_DWORD *)(a2 + 8);
      v42 = *(_QWORD *)(a2 + 16);
      InitEXRHeader((uint64_t)v77);
      if (a3)
        v43 = 4;
      else
        v43 = 0;
      if (v41 < 0x10 && v40 < 0x10)
        v43 = 0;
      v81 = v43;
      InitEXRImage(__p);
      v76 = 4;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v45 = v41 * (unint64_t)v40;
      v66 = 0u;
      v67 = 0u;
      std::vector<float>::resize((uint64_t)&v66, v45);
      std::vector<float>::resize((uint64_t)&v67 + 8, v45);
      std::vector<float>::resize((uint64_t)&v69, v45);
      std::vector<float>::resize((uint64_t)&v70 + 8, v45);
      v46 = (void *)*((_QWORD *)&v70 + 1);
      if (v45)
      {
        v47 = (_DWORD *)v66;
        v48 = (_DWORD *)*((_QWORD *)&v67 + 1);
        v49 = (_DWORD *)(v42 + 8);
        v50 = (_DWORD *)*((_QWORD *)&v70 + 1);
        v51 = (_DWORD *)v69;
        do
        {
          *v47++ = *(v49 - 2);
          *v48++ = *(v49 - 1);
          *v51++ = *v49;
          *v50++ = v49[1];
          v49 += 4;
          --v45;
        }
        while (v45);
      }
      if ((void *)v71 == v46
        || (v62 = v46, *((_QWORD *)&v69 + 1) == (_QWORD)v69)
        || (v63 = v69, (_QWORD)v68 == *((_QWORD *)&v67 + 1))
        || (v64 = *((_QWORD *)&v67 + 1), *((_QWORD *)&v66 + 1) == (_QWORD)v66))
      {
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      }
      v65 = v66;
      v73 = &v62;
      v74 = v40;
      v75 = v41;
      v80 = 4;
      v52 = (char *)malloc_type_malloc(0x440uLL, 0x1000040881B329AuLL);
      v78 = v52;
      v53 = strncpy(v52, "A", 0xFFuLL);
      v53[1] = 0;
      strncpy(v53 + 272, "B", 0xFFuLL);
      v52[273] = 0;
      strncpy(v52 + 544, "G", 0xFFuLL);
      v52[545] = 0;
      strncpy(v52 + 816, "R", 0xFFuLL);
      v52[817] = 0;
      v79 = malloc_type_malloc(0x10uLL, 0x100004052888210uLL);
      v54 = malloc_type_malloc(0x10uLL, 0x100004052888210uLL);
      v82 = v54;
      if (v80 >= 1)
      {
        v55 = 0;
        v56 = v79;
        do
        {
          v56[v55] = 2;
          *((_DWORD *)v54 + v55++) = 2;
        }
        while (v55 < v80);
      }
      v61 = 0;
      if (a1[23] < 0)
        a1 = *(char **)a1;
      v57 = SaveEXRImageToFile((int32x2_t *)__p, (std::string::size_type)v77, a1, &v61);
      v19 = v57 == 0;
      if (v57)
        FreeEXRErrorMessage(v61);
      free(v78);
      free(v79);
      free(v82);
      for (i = 0; i != -12; i -= 3)
      {
        v59 = *(void **)((char *)&v70 + i * 8 + 8);
        if (v59)
        {
          __p[i - 2] = v59;
          operator delete(v59);
        }
      }
      break;
    case 3:
      v20 = *(_DWORD *)(a2 + 4);
      v21 = *(_DWORD *)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 16);
      InitEXRHeader((uint64_t)v77);
      if (a3)
        v23 = 4;
      else
        v23 = 0;
      if (v21 < 0x10 && v20 < 0x10)
        v23 = 0;
      v81 = v23;
      InitEXRImage(__p);
      v76 = 3;
      *(_QWORD *)&v70 = 0;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v25 = v21 * (unint64_t)v20;
      std::vector<float>::resize((uint64_t)&v66, v25);
      std::vector<float>::resize((uint64_t)&v67 + 8, v25);
      std::vector<float>::resize((uint64_t)&v69, v25);
      v26 = (void *)v69;
      if (v25)
      {
        v27 = (_DWORD *)v66;
        v28 = (_DWORD *)*((_QWORD *)&v67 + 1);
        v29 = (int *)(v22 + 8);
        v30 = (_DWORD *)v69;
        do
        {
          *v27++ = *(v29 - 2);
          *v28++ = *(v29 - 1);
          v31 = *v29;
          v29 += 3;
          *v30++ = v31;
          --v25;
        }
        while (v25);
      }
      if (*((void **)&v69 + 1) == v26
        || (v62 = v26, (_QWORD)v68 == *((_QWORD *)&v67 + 1))
        || (v63 = *((_QWORD *)&v67 + 1), *((_QWORD *)&v66 + 1) == (_QWORD)v66))
      {
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      }
      v64 = v66;
      v73 = &v62;
      v74 = v20;
      v75 = v21;
      v80 = 3;
      v32 = (char *)malloc_type_malloc(0x330uLL, 0x1000040881B329AuLL);
      v78 = v32;
      v33 = strncpy(v32, "B", 0xFFuLL);
      v33[1] = 0;
      strncpy(v33 + 272, "G", 0xFFuLL);
      v32[273] = 0;
      strncpy(v32 + 544, "R", 0xFFuLL);
      v32[545] = 0;
      v79 = malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
      v34 = malloc_type_malloc(0xCuLL, 0x100004052888210uLL);
      v82 = v34;
      if (v80 >= 1)
      {
        v35 = 0;
        v36 = v79;
        do
        {
          v36[v35] = 2;
          *((_DWORD *)v34 + v35++) = 2;
        }
        while (v35 < v80);
      }
      v61 = 0;
      if (a1[23] < 0)
        a1 = *(char **)a1;
      v37 = SaveEXRImageToFile((int32x2_t *)__p, (std::string::size_type)v77, a1, &v61);
      v19 = v37 == 0;
      if (v37)
        FreeEXRErrorMessage(v61);
      free(v78);
      free(v79);
      free(v82);
      for (j = 0; j != -72; j -= 24)
      {
        v39 = *(void **)((char *)&v69 + j);
        if (v39)
        {
          *(_QWORD *)((char *)&v69 + j + 8) = v39;
          operator delete(v39);
        }
      }
      break;
    case 1:
      v6 = *(_DWORD *)(a2 + 4);
      v7 = *(_DWORD *)(a2 + 8);
      v8 = *(int **)(a2 + 16);
      InitEXRHeader((uint64_t)v77);
      if (a3)
        v9 = 3;
      else
        v9 = 0;
      if (v7 < 0x10 && v6 < 0x10)
        v9 = 0;
      v81 = v9;
      InitEXRImage(&v66);
      DWORD2(v68) = 1;
      memset(__p, 0, sizeof(__p));
      v11 = v7 * (unint64_t)v6;
      std::vector<float>::resize((uint64_t)__p, v11);
      v12 = __p[0];
      if (v11)
      {
        v13 = __p[0];
        do
        {
          v14 = *v8++;
          *v13++ = v14;
          --v11;
        }
        while (v11);
      }
      if (__p[1] == v12)
        std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
      v62 = v12;
      *((_QWORD *)&v67 + 1) = &v62;
      *(_QWORD *)&v68 = __PAIR64__(v7, v6);
      v80 = 1;
      v78 = malloc_type_malloc(0x110uLL, 0x1000040881B329AuLL);
      strncpy((char *)v78, "R", 0xFFuLL);
      *((_BYTE *)v78 + 1) = 0;
      v79 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
      v15 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
      v82 = v15;
      if (v80 >= 1)
      {
        v16 = 0;
        v17 = v79;
        do
        {
          v17[v16] = 2;
          *((_DWORD *)v15 + v16++) = 2;
        }
        while (v16 < v80);
      }
      v61 = 0;
      if (a1[23] < 0)
        a1 = *(char **)a1;
      v18 = SaveEXRImageToFile((int32x2_t *)&v66, (std::string::size_type)v77, a1, &v61);
      v19 = v18 == 0;
      if (v18)
        FreeEXRErrorMessage(v61);
      free(v78);
      free(v79);
      free(v82);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    default:
      return 0;
  }
  return v19;
}

void sub_23C5299E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Image>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::util::Image>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::util::Image>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    result = MEMORY[0x2426211A0](result, 0x1000C8077774924);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t cv3d::cv::gess::io::SaveToJson(float *a1)
{
  uint64_t v2;
  uint64_t *v3;
  const std::locale::facet *v4;
  _BYTE v6[8];
  uint64_t *v7;
  std::locale v8;
  uint64_t v9;
  _BYTE v10[408];
  _QWORD v11[20];

  v11[19] = *MEMORY[0x24BDAC8D0];
  v6[0] = 0;
  v7 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  v2 = cv3d::cv::gess::io::internal::ReportQuad2Json(a1, (uint64_t)v6);
  std::ofstream::basic_ofstream(&v9);
  *(_QWORD *)&v10[*(_QWORD *)(v9 - 24) + 16] = 2;
  v3 = nlohmann::operator<<(&v9, (uint64_t)v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  v9 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v10[*(_QWORD *)(v9 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](v10);
  std::ostream::~ostream();
  MEMORY[0x242621128](v11);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v6);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v7, v6[0]);
  return v2;
}

void sub_23C529C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, std::locale a12, char a13)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a10);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::LoadFromJson(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[8];
  uint64_t *v5;
  _QWORD v6[2];
  uint64_t v7;
  _QWORD v8[20];

  v8[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v6);
  v4[0] = 0;
  v5 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::operator>>(v6, (uint64_t)v4);
  v2 = cv3d::cv::gess::io::internal::Json2ReportQuad((uint64_t)v4, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v5, v4[0]);
  v6[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x242620F0C](&v7);
  std::istream::~istream();
  MEMORY[0x242621128](v8);
  return v2;
}

{
  _BYTE v3[8];
  uint64_t *v4;
  _QWORD v5[2];
  uint64_t v6;
  _QWORD v7[20];

  v7[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v5);
  v3[0] = 0;
  v4 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::operator>>(v5, (uint64_t)v3);
  cv3d::cv::gess::io::internal::Json2ReportBake((uint64_t)v3, a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v4, v3[0]);
  v5[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x242620F0C](&v6);
  std::istream::~istream();
  MEMORY[0x242621128](v7);
  return 1;
}

void sub_23C529DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void cv3d::cv::gess::io::WriteUsdaMaterial(_QWORD *a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t *a6)
{
  const std::__fs::filesystem::path *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t *v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int *v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  uint64_t *v71;
  _QWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int *v82;
  int v83;
  BOOL v84;
  uint64_t *v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  int v100;
  BOOL v101;
  uint64_t *v102;
  _QWORD *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  int **v113;
  uint64_t v114;
  int *v115;
  int v116;
  BOOL v117;
  uint64_t *v118;
  unsigned int v119;
  uint64_t v120;
  std::string::size_type v121;
  std::string *v122;
  std::string *v123;
  std::__fs::filesystem::path *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  uint64_t *v132;
  uint64_t *v133;
  const std::string::value_type *v134;
  uint64_t v135;
  int v136;
  const std::string::value_type *v137;
  std::string::size_type v138;
  std::string *v139;
  __int128 v140;
  const std::string::value_type **v141;
  __int128 v142;
  uint64_t v143;
  std::string::size_type v144;
  std::string::size_type v145;
  char v146;
  std::string *v147;
  std::string *v148;
  _BOOL4 v149;
  _QWORD *v150;
  std::string *v151;
  std::string::size_type v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  int *v171;
  unsigned int v172;
  uint64_t v173;
  std::string::size_type size;
  std::string *v175;
  std::string *v176;
  std::__fs::filesystem::path *p_p;
  std::string::size_type v178;
  std::string *v179;
  __int128 v180;
  std::string *v181;
  std::string::size_type v182;
  std::string *v183;
  __int128 v184;
  uint64_t *v185;
  uint64_t *v186;
  const std::string::value_type *v187;
  uint64_t v188;
  int v189;
  const std::string::value_type *v190;
  std::string::size_type v191;
  std::string *v192;
  __int128 v193;
  const std::string::value_type **v194;
  __int128 v195;
  uint64_t v196;
  std::string::size_type v197;
  std::string::size_type v198;
  char v199;
  std::string *v200;
  std::string *v201;
  BOOL v202;
  int v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  std::string *v209;
  std::string::size_type v210;
  _QWORD *v211;
  const char *v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  std::string *v227;
  std::string::size_type v228;
  _QWORD *v229;
  _QWORD *v230;
  _QWORD *v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  const char *v242;
  uint64_t v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  std::string *v254;
  std::string::size_type v255;
  _QWORD *v256;
  _QWORD *v257;
  _QWORD *v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  int *v269;
  int *v270;
  _QWORD *v271;
  unint64_t __val;
  int v277;
  __int16 v278;
  std::string v279;
  std::__fs::filesystem::path __p;
  std::string v281;
  std::string v282;
  std::string v283;
  std::string v284;
  std::string v285;
  std::string v286;
  int v287[4];
  std::__fs::filesystem::path::__string_view v288;
  std::__fs::filesystem::path::__string_view v289;

  v7 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v286, a4);
  std::__fs::filesystem::path::stem[abi:ne180100](v7, (uint64_t)&v284);
  if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v285, v284.__r_.__value_.__l.__data_, v284.__r_.__value_.__l.__size_);
    if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v284.__r_.__value_.__l.__data_);
  }
  else
  {
    v285 = v284;
  }
  v8 = *a2;
  if (a2[1] != *a2)
  {
    __val = 0;
    while (1)
    {
      v9 = *a6;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"        def Material \"", 22);
      v11 = v9 + 24 * __val;
      v12 = *(char *)(v11 + 23);
      v13 = v12 >= 0 ? v9 + 24 * __val : *(_QWORD *)v11;
      v14 = v12 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(_QWORD *)(v11 + 8);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\"\n", 2);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"        {\n", 10);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"            token inputs:frame:stPrimvarName = \"st\"\n", 52);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"            token outputs:surface.connect = </", 46);
      v20 = *(char *)(a3 + 23);
      v21 = v20 >= 0 ? a3 : *(_QWORD *)a3;
      v22 = v20 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Materials/", 11);
      v25 = *(char *)(v11 + 23);
      v26 = v25 >= 0 ? v9 + 24 * __val : *(_QWORD *)v11;
      v27 = v25 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(_QWORD *)(v11 + 8);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/surfaceShader.outputs:surface>\n", 32);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\n", 1);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"            def Shader \"surfaceShader\"\n", 39);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"            {\n", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"                uniform token info:id = \"UsdPreviewSurface\"\n", 60);
      v33 = v8 + 48 * __val;
      v36 = *(_QWORD *)(v33 + 32);
      v35 = (int *)(v33 + 32);
      v34 = v36;
      if (!v36)
        goto LABEL_117;
      v37 = v35;
      v38 = v34;
      do
      {
        v39 = *(_DWORD *)(v38 + 28);
        v40 = v39 < 1;
        if (v39 >= 1)
          v41 = (uint64_t *)v38;
        else
          v41 = (uint64_t *)(v38 + 8);
        if (!v40)
          v37 = (int *)v38;
        v38 = *v41;
      }
      while (*v41);
      if (v37 != v35 && v37[7] <= 1)
      {
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                color3f inputs:diffuseColor.connect = </", 56);
        v43 = *(char *)(a3 + 23);
        if (v43 >= 0)
          v44 = a3;
        else
          v44 = *(_QWORD *)a3;
        if (v43 >= 0)
          v45 = *(unsigned __int8 *)(a3 + 23);
        else
          v45 = *(_QWORD *)(a3 + 8);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"/Materials/", 11);
        v48 = *(char *)(v11 + 23);
        if (v48 >= 0)
          v49 = v11;
        else
          v49 = *(_QWORD *)v11;
        if (v48 >= 0)
          v50 = *(unsigned __int8 *)(v11 + 23);
        else
          v50 = *(_QWORD *)(v11 + 8);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"/diffuseColor_texture.outputs:rgb>\n", 35);
        v34 = *(_QWORD *)v35;
      }
      if (!v34)
        goto LABEL_117;
      v52 = v35;
      v53 = v34;
      do
      {
        v54 = *(_DWORD *)(v53 + 28);
        v55 = v54 < 2;
        if (v54 >= 2)
          v56 = (uint64_t *)v53;
        else
          v56 = (uint64_t *)(v53 + 8);
        if (!v55)
          v52 = (int *)v53;
        v53 = *v56;
      }
      while (*v56);
      if (v52 != v35 && v52[7] <= 2)
      {
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                normal3f inputs:normal.connect = </", 51);
        v58 = *(char *)(a3 + 23);
        if (v58 >= 0)
          v59 = a3;
        else
          v59 = *(_QWORD *)a3;
        if (v58 >= 0)
          v60 = *(unsigned __int8 *)(a3 + 23);
        else
          v60 = *(_QWORD *)(a3 + 8);
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"/Materials/", 11);
        v63 = *(char *)(v11 + 23);
        if (v63 >= 0)
          v64 = v11;
        else
          v64 = *(_QWORD *)v11;
        if (v63 >= 0)
          v65 = *(unsigned __int8 *)(v11 + 23);
        else
          v65 = *(_QWORD *)(v11 + 8);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"/normal_texture.outputs:rgb>\n", 29);
        v34 = *(_QWORD *)v35;
      }
      if (!v34)
        goto LABEL_117;
      v67 = v35;
      v68 = v34;
      do
      {
        v69 = *(_DWORD *)(v68 + 28);
        v70 = v69 < 4;
        if (v69 >= 4)
          v71 = (uint64_t *)v68;
        else
          v71 = (uint64_t *)(v68 + 8);
        if (!v70)
          v67 = (int *)v68;
        v68 = *v71;
      }
      while (*v71);
      if (v67 != v35 && v67[7] <= 4)
      {
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                float inputs:occlusion.connect = </", 51);
        v73 = *(char *)(a3 + 23);
        if (v73 >= 0)
          v74 = a3;
        else
          v74 = *(_QWORD *)a3;
        if (v73 >= 0)
          v75 = *(unsigned __int8 *)(a3 + 23);
        else
          v75 = *(_QWORD *)(a3 + 8);
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"/Materials/", 11);
        v78 = *(char *)(v11 + 23);
        if (v78 >= 0)
          v79 = v11;
        else
          v79 = *(_QWORD *)v11;
        if (v78 >= 0)
          v80 = *(unsigned __int8 *)(v11 + 23);
        else
          v80 = *(_QWORD *)(v11 + 8);
        v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v79, v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"/occlusion_texture.outputs:r>\n", 30);
        v34 = *(_QWORD *)v35;
      }
      if (!v34)
        goto LABEL_117;
      v82 = v35;
      do
      {
        v83 = *(_DWORD *)(v34 + 28);
        v84 = v83 < 5;
        if (v83 >= 5)
          v85 = (uint64_t *)v34;
        else
          v85 = (uint64_t *)(v34 + 8);
        if (!v84)
          v82 = (int *)v34;
        v34 = *v85;
      }
      while (*v85);
      if (v82 != v35 && v82[7] <= 5)
      {
        v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                float inputs:roughness.connect = </", 51);
        v87 = *(char *)(a3 + 23);
        v88 = v87 >= 0 ? a3 : *(_QWORD *)a3;
        v89 = v87 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
        v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v88, v89);
        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"/Materials/", 11);
        v92 = *(char *)(v11 + 23);
        v93 = v92 >= 0 ? v11 : *(_QWORD *)v11;
        v94 = v92 >= 0 ? *(unsigned __int8 *)(v11 + 23) : *(_QWORD *)(v11 + 8);
        v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, v93, v94);
        v96 = "/roughness_texture.outputs:r>\n";
        v97 = 30;
      }
      else
      {
LABEL_117:
        v95 = a1;
        v96 = "                float inputs:roughness = 0.9\n";
        v97 = 45;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
      v98 = *(_QWORD *)v35;
      if (*(_QWORD *)v35)
      {
        v99 = v35;
        do
        {
          v100 = *(_DWORD *)(v98 + 28);
          v101 = v100 < 6;
          if (v100 >= 6)
            v102 = (uint64_t *)v98;
          else
            v102 = (uint64_t *)(v98 + 8);
          if (!v101)
            v99 = (int *)v98;
          v98 = *v102;
        }
        while (*v102);
        if (v99 != v35 && v99[7] <= 6)
        {
          v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                float inputs:metallic.connect = </", 50);
          v104 = *(char *)(a3 + 23);
          if (v104 >= 0)
            v105 = a3;
          else
            v105 = *(_QWORD *)a3;
          if (v104 >= 0)
            v106 = *(unsigned __int8 *)(a3 + 23);
          else
            v106 = *(_QWORD *)(a3 + 8);
          v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, v105, v106);
          v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"/Materials/", 11);
          v109 = *(char *)(v11 + 23);
          if (v109 >= 0)
            v110 = v11;
          else
            v110 = *(_QWORD *)v11;
          if (v109 >= 0)
            v111 = *(unsigned __int8 *)(v11 + 23);
          else
            v111 = *(_QWORD *)(v11 + 8);
          v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, v110, v111);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"/metallic_texture.outputs:r>\n", 29);
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                token outputs:surface\n", 38);
      v113 = (int **)(v35 - 2);
      v114 = *(_QWORD *)v35;
      if (*(_QWORD *)v35)
      {
        v115 = v35;
        do
        {
          v116 = *(_DWORD *)(v114 + 28);
          v117 = v116 < 3;
          if (v116 >= 3)
            v118 = (uint64_t *)v114;
          else
            v118 = (uint64_t *)(v114 + 8);
          if (!v117)
            v115 = (int *)v114;
          v114 = *v118;
        }
        while (*v118);
        if (v115 != v35 && v115[7] <= 3)
          break;
      }
LABEL_242:
      v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            }\n", 14);
      v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"\n", 1);
      v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)"            def Shader \"uvReader_st\"\n", 37);
      v157 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)"            {\n", 14);
      v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)"                uniform token info:id = \"UsdPrimvarReader_float2\"\n", 66);
      v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"                token inputs:varname.connect = </", 49);
      v160 = *(char *)(a3 + 23);
      if (v160 >= 0)
        v161 = a3;
      else
        v161 = *(_QWORD *)a3;
      if (v160 >= 0)
        v162 = *(unsigned __int8 *)(a3 + 23);
      else
        v162 = *(_QWORD *)(a3 + 8);
      v163 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, v161, v162);
      v164 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"/Materials/", 11);
      v165 = *(char *)(v11 + 23);
      if (v165 >= 0)
        v166 = v11;
      else
        v166 = *(_QWORD *)v11;
      if (v165 >= 0)
        v167 = *(unsigned __int8 *)(v11 + 23);
      else
        v167 = *(_QWORD *)(v11 + 8);
      v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, v166, v167);
      v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v168, (uint64_t)".inputs:frame:stPrimvarName>\n", 29);
      v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)"                float2 outputs:result\n", 38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"            }\n", 14);
      v171 = *v113;
      if (*v113 != v35)
      {
        do
        {
          v277 = v171[7];
          v172 = *((unsigned __int16 *)v171 + 16);
          v278 = *((_WORD *)v171 + 16);
          v173 = a2[3];
          if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v285.__r_.__value_.__r.__words[2]);
          else
            size = v285.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v281, size + 1);
          if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v175 = &v281;
          else
            v175 = (std::string *)v281.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v176 = &v285;
            else
              v176 = (std::string *)v285.__r_.__value_.__r.__words[0];
            memmove(v175, v176, size);
          }
          *(_WORD *)((char *)&v175->__r_.__value_.__l.__data_ + size) = 95;
          cv3d::cv::gess::mesh::Texture::tex_typename((_DWORD *)(v173 + 48 * v172), (uint64_t)&__p);
          if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
          if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v178 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
          else
            v178 = __p.__pn_.__r_.__value_.__l.__size_;
          v179 = std::string::append(&v281, (const std::string::value_type *)p_p, v178);
          v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
          v282.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v180;
          v179->__r_.__value_.__l.__size_ = 0;
          v179->__r_.__value_.__r.__words[2] = 0;
          v179->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v279, __val);
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v181 = &v279;
          else
            v181 = (std::string *)v279.__r_.__value_.__r.__words[0];
          if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v182 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
          else
            v182 = v279.__r_.__value_.__l.__size_;
          v183 = std::string::append(&v282, (const std::string::value_type *)v181, v182);
          v184 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v283.__r_.__value_.__r.__words[2] = v183->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v184;
          v183->__r_.__value_.__l.__size_ = 0;
          v183->__r_.__value_.__r.__words[2] = 0;
          v183->__r_.__value_.__r.__words[0] = 0;
          v185 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::at(a5, &v277);
          v188 = v185[4];
          v186 = v185 + 4;
          v187 = (const std::string::value_type *)v188;
          v189 = *((char *)v186 + 23);
          if (v189 >= 0)
            v190 = (const std::string::value_type *)v186;
          else
            v190 = v187;
          if (v189 >= 0)
            v191 = *((unsigned __int8 *)v186 + 23);
          else
            v191 = v186[1];
          v192 = std::string::append(&v283, v190, v191);
          v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
          v284.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v193;
          v192->__r_.__value_.__l.__size_ = 0;
          v192->__r_.__value_.__r.__words[2] = 0;
          v192->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v283.__r_.__value_.__l.__data_);
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v282.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v281.__r_.__value_.__l.__data_);
          if (!*(_BYTE *)(v173 + 48 * v172 + 5))
            goto LABEL_346;
          v194 = (const std::string::value_type **)(v173 + 48 * v172 + 24);
          if (*(char *)(v173 + 48 * v172 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v282, *v194, *(_QWORD *)(v173 + 48 * v172 + 32));
          }
          else
          {
            v195 = *(_OWORD *)v194;
            v282.__r_.__value_.__r.__words[2] = *(_QWORD *)(v173 + 48 * v172 + 40);
            *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v195;
          }
          v283 = v282;
          std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&v283, (uint64_t)&v281);
          if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v282, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
          else
            v282 = v281;
          v196 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
          if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v197 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
          else
            v197 = v284.__r_.__value_.__l.__size_;
          v198 = HIBYTE(v282.__r_.__value_.__r.__words[2]);
          v199 = HIBYTE(v282.__r_.__value_.__r.__words[2]);
          if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v198 = v282.__r_.__value_.__l.__size_;
          if (v197 == v198)
          {
            if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v200 = &v282;
            else
              v200 = (std::string *)v282.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&v284.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (!memcmp(v284.__r_.__value_.__l.__data_, v200, v284.__r_.__value_.__l.__size_))
              {
LABEL_337:
                v203 = 0;
                if (v199 < 0)
                  goto LABEL_330;
                goto LABEL_331;
              }
            }
            else
            {
              if (!*((_BYTE *)&v284.__r_.__value_.__s + 23))
                goto LABEL_337;
              v201 = &v284;
              while (v201->__r_.__value_.__s.__data_[0] == v200->__r_.__value_.__s.__data_[0])
              {
                v201 = (std::string *)((char *)v201 + 1);
                v200 = (std::string *)((char *)v200 + 1);
                if (!--v196)
                  goto LABEL_337;
              }
            }
          }
          std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v283, (uint64_t)&__p);
          std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v286, (uint64_t)&v279);
          v289.__data_ = (const std::string_view::value_type *)&v279;
          if (std::__fs::filesystem::operator==[abi:ne180100](&__p, v289))
          {
            std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v283, 0);
            if (LOBYTE(v287[0]))
              v202 = LOBYTE(v287[0]) == 255;
            else
              v202 = 1;
            v203 = !v202;
          }
          else
          {
            v203 = 0;
          }
          if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v279.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_330:
            operator delete(v282.__r_.__value_.__l.__data_);
LABEL_331:
          if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v281.__r_.__value_.__l.__data_);
            if (v203)
            {
LABEL_335:
              std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&v283, (uint64_t)&v281);
              if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v282, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
              else
                v282 = v281;
              if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v284.__r_.__value_.__l.__data_);
              v284 = v282;
              *((_BYTE *)&v282.__r_.__value_.__s + 23) = 0;
              v282.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v281.__r_.__value_.__l.__data_);
            }
          }
          else if (v203)
          {
            goto LABEL_335;
          }
          if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v283.__r_.__value_.__l.__data_);
LABEL_346:
          switch(v277)
          {
            case 1:
              v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"            def Shader \"diffuseColor_texture\"\n", 46);
              v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"            {\n", 14);
              v207 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)"                uniform token info:id = \"UsdUVTexture\"\n", 55);
              v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)"                asset inputs:file = @", 37);
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v209 = &v284;
              else
                v209 = (std::string *)v284.__r_.__value_.__r.__words[0];
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v210 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
              else
                v210 = v284.__r_.__value_.__l.__size_;
              v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)v209, v210);
              v212 = "@\n";
              v213 = 2;
              goto LABEL_362;
            case 2:
              v220 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)"            def Shader \"normal_texture\"\n", 40);
              v222 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)"            {\n", 14);
              v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"                uniform token info:id = \"UsdUVTexture\"\n", 55);
              v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"                token inputs:sourceColorSpace = \"raw\"\n", 54);
              v225 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)"                float4 inputs:bias = (-1, -1, -1, -1)\n", 54);
              v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)"                asset inputs:file = @", 37);
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v227 = &v284;
              else
                v227 = (std::string *)v284.__r_.__value_.__r.__words[0];
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v228 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
              else
                v228 = v284.__r_.__value_.__l.__size_;
              v229 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)v227, v228);
              v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v229, (uint64_t)"@\n", 2);
              v212 = "                float4 inputs:scale = (2, 2, 2, 2)\n";
              v213 = 51;
LABEL_362:
              v230 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)v212, v213);
              v231 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v230, (uint64_t)"                float2 inputs:st.connect = </", 45);
              v232 = *(char *)(a3 + 23);
              if (v232 >= 0)
                v233 = a3;
              else
                v233 = *(_QWORD *)a3;
              if (v232 >= 0)
                v234 = *(unsigned __int8 *)(a3 + 23);
              else
                v234 = *(_QWORD *)(a3 + 8);
              v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, v233, v234);
              v236 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v235, (uint64_t)"/Materials/", 11);
              v237 = *(char *)(v11 + 23);
              if (v237 >= 0)
                v238 = v11;
              else
                v238 = *(_QWORD *)v11;
              if (v237 >= 0)
                v239 = *(unsigned __int8 *)(v11 + 23);
              else
                v239 = *(_QWORD *)(v11 + 8);
              v240 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236, v238, v239);
              v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)"/uvReader_st.outputs:result>\n", 29);
              v242 = "                float3 outputs:rgb\n";
              v243 = 35;
              goto LABEL_396;
            case 4:
              v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)"            def Shader \"occlusion_texture\"\n", 43);
              v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"            {\n", 14);
              v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)"                uniform token info:id = \"UsdUVTexture\"\n", 55);
              v218 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)"                token inputs:sourceColorSpace = \"raw\"\n", 54);
              v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)"                asset inputs:file = @", 37);
              goto LABEL_377;
            case 5:
              v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              v245 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)"            def Shader \"roughness_texture\"\n", 43);
              v246 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v245, (uint64_t)"            {\n", 14);
              v247 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v246, (uint64_t)"                uniform token info:id = \"UsdUVTexture\"\n", 55);
              v248 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v247, (uint64_t)"                token inputs:sourceColorSpace = \"raw\"\n", 54);
              v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v248, (uint64_t)"                asset inputs:file = @", 37);
              goto LABEL_377;
            case 6:
              v249 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
              v250 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v249, (uint64_t)"            def Shader \"metallic_texture\"\n", 42);
              v251 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v250, (uint64_t)"            {\n", 14);
              v252 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v251, (uint64_t)"                uniform token info:id = \"UsdUVTexture\"\n", 55);
              v253 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v252, (uint64_t)"                token inputs:sourceColorSpace = \"raw\"\n", 54);
              v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v253, (uint64_t)"                asset inputs:file = @", 37);
LABEL_377:
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v254 = &v284;
              else
                v254 = (std::string *)v284.__r_.__value_.__r.__words[0];
              if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v255 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
              else
                v255 = v284.__r_.__value_.__l.__size_;
              v256 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)v254, v255);
              v257 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v256, (uint64_t)"@\n", 2);
              v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)"                float2 inputs:st.connect = </", 45);
              v259 = *(char *)(a3 + 23);
              if (v259 >= 0)
                v260 = a3;
              else
                v260 = *(_QWORD *)a3;
              if (v259 >= 0)
                v261 = *(unsigned __int8 *)(a3 + 23);
              else
                v261 = *(_QWORD *)(a3 + 8);
              v262 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, v260, v261);
              v263 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v262, (uint64_t)"/Materials/", 11);
              v264 = *(char *)(v11 + 23);
              if (v264 >= 0)
                v265 = v11;
              else
                v265 = *(_QWORD *)v11;
              if (v264 >= 0)
                v266 = *(unsigned __int8 *)(v11 + 23);
              else
                v266 = *(_QWORD *)(v11 + 8);
              v267 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v263, v265, v266);
              v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)"/uvReader_st.outputs:result>\n", 29);
              v242 = "                float outputs:r\n";
              v243 = 32;
LABEL_396:
              v268 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)v242, v243);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v268, (uint64_t)"            }\n", 14);
              break;
            default:
              break;
          }
          if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v284.__r_.__value_.__l.__data_);
          v269 = (int *)*((_QWORD *)v171 + 1);
          if (v269)
          {
            do
            {
              v270 = v269;
              v269 = *(int **)v269;
            }
            while (v269);
          }
          else
          {
            do
            {
              v270 = (int *)*((_QWORD *)v171 + 2);
              v202 = *(_QWORD *)v270 == (_QWORD)v171;
              v171 = v270;
            }
            while (!v202);
          }
          v171 = v270;
        }
        while (v270 != v35);
      }
      v271 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"        }\n", 10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)"\n", 1);
      v8 = *a2;
      if (++__val >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4))
        goto LABEL_406;
    }
    LODWORD(v284.__r_.__value_.__l.__data_) = 3;
    v119 = *(unsigned __int16 *)std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at((uint64_t)(v35 - 2), (int *)&v284);
    v120 = a2[3];
    if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v121 = HIBYTE(v285.__r_.__value_.__r.__words[2]);
    else
      v121 = v285.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v281, v121 + 1);
    if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v122 = &v281;
    else
      v122 = (std::string *)v281.__r_.__value_.__r.__words[0];
    if (v121)
    {
      if ((v285.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = &v285;
      else
        v123 = (std::string *)v285.__r_.__value_.__r.__words[0];
      memmove(v122, v123, v121);
    }
    *(_WORD *)((char *)&v122->__r_.__value_.__l.__data_ + v121) = 95;
    cv3d::cv::gess::mesh::Texture::tex_typename((_DWORD *)(v120 + 48 * v119), (uint64_t)&__p);
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v124 = &__p;
    else
      v124 = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
    if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v125 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    else
      v125 = __p.__pn_.__r_.__value_.__l.__size_;
    v126 = std::string::append(&v281, (const std::string::value_type *)v124, v125);
    v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    v282.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v279, __val);
    if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v128 = &v279;
    else
      v128 = (std::string *)v279.__r_.__value_.__r.__words[0];
    if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v129 = HIBYTE(v279.__r_.__value_.__r.__words[2]);
    else
      v129 = v279.__r_.__value_.__l.__size_;
    v130 = std::string::append(&v282, (const std::string::value_type *)v128, v129);
    v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v283.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v283.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    v287[0] = 3;
    v132 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::at(a5, v287);
    v135 = v132[4];
    v133 = v132 + 4;
    v134 = (const std::string::value_type *)v135;
    v136 = *((char *)v133 + 23);
    if (v136 >= 0)
      v137 = (const std::string::value_type *)v133;
    else
      v137 = v134;
    if (v136 >= 0)
      v138 = *((unsigned __int8 *)v133 + 23);
    else
      v138 = v133[1];
    v139 = std::string::append(&v283, v137, v138);
    v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
    v284.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v284.__r_.__value_.__l.__data_ = v140;
    v139->__r_.__value_.__l.__size_ = 0;
    v139->__r_.__value_.__r.__words[2] = 0;
    v139->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v283.__r_.__value_.__l.__data_);
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    if (SHIBYTE(v282.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v282.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v281.__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(v120 + 48 * v119 + 5))
    {
LABEL_234:
      v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                asset unconnected:displacement = @", 50);
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v151 = &v284;
      else
        v151 = (std::string *)v284.__r_.__value_.__r.__words[0];
      if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v152 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
      else
        v152 = v284.__r_.__value_.__l.__size_;
      v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v151, v152);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"@\n", 2);
      if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v284.__r_.__value_.__l.__data_);
      goto LABEL_242;
    }
    v141 = (const std::string::value_type **)(v120 + 48 * v119 + 24);
    if (*(char *)(v120 + 48 * v119 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v282, *v141, *(_QWORD *)(v120 + 48 * v119 + 32));
    }
    else
    {
      v142 = *(_OWORD *)v141;
      v282.__r_.__value_.__r.__words[2] = *(_QWORD *)(v120 + 48 * v119 + 40);
      *(_OWORD *)&v282.__r_.__value_.__l.__data_ = v142;
    }
    v283 = v282;
    std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&v283, (uint64_t)&v281);
    if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v282, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
    else
      v282 = v281;
    v143 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
    if ((v284.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v144 = HIBYTE(v284.__r_.__value_.__r.__words[2]);
    else
      v144 = v284.__r_.__value_.__l.__size_;
    v145 = HIBYTE(v282.__r_.__value_.__r.__words[2]);
    v146 = HIBYTE(v282.__r_.__value_.__r.__words[2]);
    if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v145 = v282.__r_.__value_.__l.__size_;
    if (v144 == v145)
    {
      if ((v282.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v147 = &v282;
      else
        v147 = (std::string *)v282.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v284.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v284.__r_.__value_.__l.__data_, v147, v284.__r_.__value_.__l.__size_))
          goto LABEL_213;
      }
      else if (*((_BYTE *)&v284.__r_.__value_.__s + 23))
      {
        v148 = &v284;
        while (v148->__r_.__value_.__s.__data_[0] == v147->__r_.__value_.__s.__data_[0])
        {
          v148 = (std::string *)((char *)v148 + 1);
          v147 = (std::string *)((char *)v147 + 1);
          if (!--v143)
            goto LABEL_225;
        }
        goto LABEL_213;
      }
LABEL_225:
      v149 = 0;
      if (v146 < 0)
LABEL_218:
        operator delete(v282.__r_.__value_.__l.__data_);
LABEL_219:
      if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v281.__r_.__value_.__l.__data_);
        if (!v149)
          goto LABEL_232;
      }
      else if (!v149)
      {
LABEL_232:
        if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v283.__r_.__value_.__l.__data_);
        goto LABEL_234;
      }
      std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&v283, (uint64_t)&v281);
      if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v282, v281.__r_.__value_.__l.__data_, v281.__r_.__value_.__l.__size_);
      else
        v282 = v281;
      if (SHIBYTE(v284.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v284.__r_.__value_.__l.__data_);
      v284 = v282;
      *((_BYTE *)&v282.__r_.__value_.__s + 23) = 0;
      v282.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v281.__r_.__value_.__l.__data_);
      goto LABEL_232;
    }
LABEL_213:
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v283, (uint64_t)&__p);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v286, (uint64_t)&v279);
    v288.__data_ = (const std::string_view::value_type *)&v279;
    v149 = std::__fs::filesystem::operator==[abi:ne180100](&__p, v288);
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((*((_BYTE *)&v282.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_218;
    goto LABEL_219;
  }
LABEL_406:
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v285.__r_.__value_.__l.__data_);
  if (SHIBYTE(v286.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v286.__r_.__value_.__l.__data_);
}

void sub_23C52B154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 153) < 0)
    operator delete(*(void **)(v46 - 176));
  if (*(char *)(v46 - 97) < 0)
    operator delete(*(void **)(v46 - 120));
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::stem[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__stem(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 4;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

_DWORD *cv3d::cv::gess::mesh::Texture::tex_typename@<X0>(_DWORD *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  const char *v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  switch(*this)
  {
    case 1:
      *(_BYTE *)(a2 + 23) = 3;
      *(_WORD *)a2 = 25972;
      *(_BYTE *)(a2 + 2) = 120;
      return this;
    case 2:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 1836216174;
      goto LABEL_10;
    case 3:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 1886611812;
      goto LABEL_10;
    case 4:
      *(_BYTE *)(a2 + 23) = 2;
      *(_WORD *)a2 = 28513;
      return this;
    case 5:
      *(_BYTE *)(a2 + 23) = 9;
      *(_BYTE *)(a2 + 8) = 115;
      v3 = "roughness";
      goto LABEL_16;
    case 6:
      *(_BYTE *)(a2 + 23) = 8;
      v4 = 0x63696C6C6174656DLL;
      goto LABEL_17;
    case 7:
      *(_BYTE *)(a2 + 23) = 5;
      *(_DWORD *)a2 = 1919905391;
      *(_BYTE *)(a2 + 4) = 109;
      return this;
    case 8:
      *(_BYTE *)(a2 + 23) = 4;
      v2 = 1802723693;
LABEL_10:
      *(_DWORD *)a2 = v2;
      return this;
    case 9:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1684105331;
      *(_DWORD *)(a2 + 3) = 1735289188;
      return this;
    case 0xA:
      *(_BYTE *)(a2 + 23) = 13;
      qmemcpy((void *)a2, "diffusealbedo", 13);
      return this;
    case 0xB:
      *(_BYTE *)(a2 + 23) = 8;
      v4 = 0x6E6F697469736F70;
      goto LABEL_17;
    case 0xC:
      *(_BYTE *)(a2 + 23) = 14;
      qmemcpy((void *)a2, "specularalbedo", 14);
      return this;
    case 0xD:
      *(_BYTE *)(a2 + 23) = 12;
      *(_DWORD *)(a2 + 8) = 1852795251;
      v3 = "envocclusion";
LABEL_16:
      v4 = *(_QWORD *)v3;
LABEL_17:
      *(_QWORD *)a2 = v4;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t *std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

BOOL std::__fs::filesystem::operator==[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void cv3d::cv::gess::io::WriteUsdaGeometry(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _DWORD *a6)
{
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  const char *v33;
  int v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  void *v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unsigned int i;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  unsigned __int16 v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  int v144;
  int v145;
  uint64_t *v146;
  uint64_t v149;
  uint64_t v150;
  unsigned __int16 v151;
  float32x4_t v152;
  float32x4_t v153;
  _DWORD *v154;
  unsigned int v155;
  void *__p;
  void *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char v161;
  int v162;
  int v163;
  int v164[3];

  v163 = -1;
  v164[0] = -1;
  v162 = -1;
  std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  __p = 0;
  v157 = 0;
  v145 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a2 + 8), (uint64_t)&__p, (unsigned __int8 *)&v159);
  if (v161 < 0)
    operator delete(v159);
  if (*a6 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>(a2, v164, (unsigned __int8 *)&v159);
    if (v161 < 0)
      operator delete(v159);
    goto LABEL_9;
  }
  if (*a6)
  {
LABEL_9:
    v144 = -1;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
  LODWORD(v157) = 0;
  __p = 0;
  v144 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(a2 + 56), (uint64_t)&__p, (unsigned __int8 *)&v159);
  if (v161 < 0)
    operator delete(v159);
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  LOWORD(__p) = 0;
  v146 = (uint64_t *)(a2 + 56);
  v10 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a2 + 56), (uint64_t)&__p, (unsigned __int8 *)&v159);
  v149 = a5;
  if (v161 < 0)
    operator delete(v159);
  std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  __p = 0;
  v11 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&__p, (unsigned __int8 *)&v159);
  if (v161 < 0)
    operator delete(v159);
  std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a2, &v163, (unsigned __int8 *)&v159);
  if (v161 < 0)
    operator delete(v159);
  std::string::basic_string[abi:ne180100]<0>(&v159, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a2, &v162, (unsigned __int8 *)&v159);
  if (v161 < 0)
    operator delete(v159);
  if (v144 == -1 && v164[0] == -1)
    cv3d::cv::gess::io::WriteUsdaGeometry();
  if (v10 == -1)
    cv3d::cv::gess::io::WriteUsdaGeometry();
  if (v11 == -1)
    cv3d::cv::gess::io::WriteUsdaGeometry();
  if (v163 == -1)
    cv3d::cv::gess::io::WriteUsdaGeometry();
  if (v162 == -1)
    cv3d::cv::gess::io::WriteUsdaGeometry();
  LODWORD(v159) = v10;
  v13 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v146, (unsigned int *)&v159, v12);
  LODWORD(v159) = v11;
  v15 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a2 + 80), (unsigned int *)&v159, v14);
  LODWORD(v159) = v163;
  v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a2 + 80), (unsigned int *)&v159, v16);
  LODWORD(v159) = v162;
  v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)(a2 + 80), (unsigned int *)&v159, v18);
  v150 = *(_QWORD *)(v19 + 40);
  if (*(_QWORD *)(v19 + 48) == v150)
    cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
  v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  std::vector<std::pair<unsigned int,unsigned int>>::vector(&v159, v151);
  if (v151 != (v160 - v159) >> 3)
  {
    v31 = "group_stops.size() == g_size";
    v143 = 15;
    v32 = "UsdaIO.cpp";
    v33 = "FindFaceGroupStops";
    goto LABEL_161;
  }
  v20 = (*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  v21 = v20;
  if (!v20)
    goto LABEL_34;
  v22 = (unsigned __int16 *)v13[5];
  v23 = (unsigned __int16 *)v13[6];
  v24 = (char *)v23 - (char *)v22;
  if (v23 == v22)
  {
    v31 = "index < data_.size()";
    v143 = 187;
    v32 = "Attribute.h";
    v33 = "operator[]";
LABEL_161:
    __assert_rtn(v33, v32, v143, v31);
  }
  v25 = 0;
  v26 = 0;
  v27 = v24 >> 1;
  v28 = *v22;
  v29 = v159;
  v30 = v20;
  v31 = "index < data_.size()";
  v32 = "Attribute.h";
  v33 = "operator[]";
  do
  {
    if (v27 == v25)
    {
      v143 = 187;
      goto LABEL_161;
    }
    v34 = v22[v25];
    if (v28 != v34)
    {
      v35 = &v29[8 * v28];
      *(_DWORD *)v35 = v26;
      *((_DWORD *)v35 + 1) = v25;
      v26 = v25;
      v28 = v34;
    }
    ++v25;
  }
  while (v30 != v25);
  v36 = &v29[8 * v151];
  *((_DWORD *)v36 - 2) = v26;
  *((_DWORD *)v36 - 1) = v21;
LABEL_34:
  v37 = *(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104);
  if ((v37 & 0x3FFFFFFFCLL) != 0)
  {
    v38 = 0;
    v39 = (v37 >> 2);
    v40.i64[0] = 0x80000000800000;
    v40.i64[1] = 0x80000000800000;
    v152 = v40;
    v153 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      v41 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, *(_DWORD *)(a2 + 176), v38);
      v152 = vmaxq_f32(v152, *v41);
      v153 = vminq_f32(v153, *v41);
      ++v38;
    }
    while (v39 != v38);
  }
  v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"        def Mesh \"Mesh\" (\n", 26);
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"            prepend apiSchemas = [\"MaterialBindingAPI\"]\n", 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"       )\n", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"        {\n", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            float3[] extent = [(", 32);
  v44 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
  v45 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", ", 2);
  v46 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"), (", 4);
  v47 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", ", 2);
  v48 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", ", 2);
  v49 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)")]\n", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            int[] faceVertexCounts = [", 38);
  if (*a6 == 1)
  {
    __p = 0;
    v157 = 0;
    v158 = 0;
    if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 152))
    {
      v54 = 0;
      v55 = 1;
      do
      {
        v155 = v55 - 1;
        cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices(a2, &v155, &__p);
        std::ostream::operator<<();
        v157 = __p;
        v56 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        if (v56 - 1 != v54)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
          v56 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        }
        v54 = v55;
        v53 = v56 > v55++;
      }
      while (v53);
      if (__p)
      {
        v157 = __p;
        operator delete(__p);
      }
    }
  }
  else if (!*a6 && *(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 152))
  {
    v50 = 0;
    v51 = 1;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"3", 1);
      v52 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
      if (v52 - 1 != v50)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
        v52 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
      }
      v50 = v51;
      v53 = v52 > v51++;
    }
    while (v53);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            int[] faceVertexIndices = [", 39);
  if (*a6 == 1)
  {
    __p = 0;
    v157 = 0;
    v158 = 0;
    if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 152))
    {
      v62 = 0;
      v63 = 0;
      do
      {
        v155 = v63;
        cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices(a2, &v155, &__p);
        v64 = v157;
        if (v157 != __p)
        {
          v65 = 0;
          v66 = 1;
          do
          {
            std::ostream::operator<<();
            v64 = __p;
            v67 = ((_BYTE *)v157 - (_BYTE *)__p) >> 2;
            if (v67 - 1 != v65)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
              v64 = __p;
              v67 = ((_BYTE *)v157 - (_BYTE *)__p) >> 2;
            }
            v65 = v66;
            v53 = v67 > v66++;
          }
          while (v53);
        }
        v157 = v64;
        v68 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        if (v68 - 1 != v62)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
          v68 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        }
        v62 = ++v63;
      }
      while (v68 > v63);
LABEL_70:
      if (__p)
      {
        v157 = __p;
        operator delete(__p);
      }
    }
  }
  else if (!*a6)
  {
    std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
    if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 152))
    {
      v57 = 0;
      v58 = 1;
      do
      {
        v155 = v58 - 1;
        cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a2, &v155, &__p);
        v59 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", ", 2);
        v60 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)", ", 2);
        std::ostream::operator<<();
        v61 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        if (v61 - 1 != v57)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
          v61 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        }
        v57 = v58;
        v53 = v61 > v58++;
      }
      while (v53);
    }
    goto LABEL_70;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  if (v145 != -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            normal3f[] normals = [", 34);
    v154 = a6;
    if (*(_QWORD *)(a2 + 112) != *(_QWORD *)(a2 + 104))
    {
      v69 = 0;
      v70 = 1;
      do
      {
        LODWORD(__p) = v145;
        v71 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a2 + 8), (unsigned int *)&__p);
        if (v69 >= (uint64_t)(*(_QWORD *)(v71 + 48) - *(_QWORD *)(v71 + 40)) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)", ", 2);
        v73 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)", ", 2);
        v74 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)")", 1);
        v75 = (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2;
        if (v75 - 1 != v69)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
          v75 = (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2;
        }
        v69 = v70;
        v53 = v75 > v70++;
      }
      while (v53);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
    a6 = v154;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            point3f[] points = [", 32);
  if (*(_QWORD *)(a2 + 112) != *(_QWORD *)(a2 + 104))
  {
    v76 = 0;
    v77 = 1;
    do
    {
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, *(_DWORD *)(a2 + 176), v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
      v78 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", ", 2);
      v79 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)", ", 2);
      v80 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)")", 1);
      v81 = (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2;
      if (v81 - 1 != v76)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
        v81 = (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2;
      }
      v76 = v77;
      v53 = v81 > v77++;
    }
    while (v53);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            texCoord2f[] primvars:st = [", 40);
  for (i = 0; (*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15) > (unint64_t)i; ++i)
  {
    if (i >= (unint64_t)((uint64_t)(v15[6] - v15[5]) >> 3))
      __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
    v83 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)", ", 2);
    v84 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)")", 1);
    if ((*(uint64_t (**)(_QWORD *))(*v15 + 16))(v15) - 1 != i)
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"] (\n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                interpolation = \"faceVarying\"\n", 46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"           )\n", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            int[] primvars:st:indices = [", 41);
  if (*a6)
  {
    if (*a6 == 1 && *(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 152))
    {
      v86 = 0;
      v87 = 0;
      do
      {
        LODWORD(__p) = v164[0];
        v88 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>(v146, (unsigned int *)&__p, v85);
        v89 = *(_QWORD *)(v88 + 40);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v88 + 48) - v89) >> 3) <= v86)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v90 = (_QWORD *)(v89 + 24 * v86);
        v91 = v90 + 1;
        if (v90[1] != *v90)
        {
          v92 = 0;
          v93 = 1;
          do
          {
            std::ostream::operator<<();
            v94 = (uint64_t)(*v91 - *v90) >> 2;
            if (v94 - 1 != v92)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
              v94 = (uint64_t)(*v91 - *v90) >> 2;
            }
            v92 = v93;
            v53 = v94 > v93++;
          }
          while (v53);
        }
        v95 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        if (v95 - 1 != v86)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
          v95 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
        }
        v86 = ++v87;
      }
      while (v95 > v87);
    }
  }
  else if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 152))
  {
    v96 = 0;
    v97 = 1;
    do
    {
      LODWORD(__p) = v144;
      v98 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v146, (unsigned int *)&__p, v85);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v98 + 48) - *(_QWORD *)(v98 + 40)) >> 2) <= v96)
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v99 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)", ", 2);
      v100 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)", ", 2);
      std::ostream::operator<<();
      v101 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
      if (v101 - 1 != v96)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
        v101 = (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
      }
      v96 = v97;
      v53 = v101 > v97++;
    }
    while (v53);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            uniform token subdivisionScheme = \"none\"\n", 53);
  if (v151 < 2u)
  {
    LOWORD(__p) = 0;
    v129 = *(_QWORD **)(v150 + 8);
    if (v129)
    {
      do
      {
        v130 = v129;
        v129 = (_QWORD *)*v129;
      }
      while (v129);
      if (v130 != (_QWORD *)(v150 + 8) && !*((_WORD *)v130 + 16))
      {
        v131 = std::map<unsigned short,std::string>::at(v150, (unsigned __int16 *)&__p);
        if ((void **)(v149 + 8) != std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v149, (void **)v131))
        {
          v132 = std::map<std::string,std::string>::at(v149, (void **)v131);
          v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            rel material:binding = </", 37);
          v134 = *(char *)(a3 + 23);
          if (v134 >= 0)
            v135 = a3;
          else
            v135 = *(_QWORD *)a3;
          if (v134 >= 0)
            v136 = *(unsigned __int8 *)(a3 + 23);
          else
            v136 = *(_QWORD *)(a3 + 8);
          v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, v135, v136);
          v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"/Materials/", 11);
          v139 = *(char *)(v132 + 23);
          if (v139 >= 0)
            v140 = v132;
          else
            v140 = *(_QWORD *)v132;
          if (v139 >= 0)
            v141 = *(unsigned __int8 *)(v132 + 23);
          else
            v141 = *(_QWORD *)(v132 + 8);
          v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, v140, v141);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)">\n", 2);
        }
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            uniform token subsetFamily:materialBind:familyType = \"nonOverlapping\"\n", 82);
    v102 = 0;
    LOWORD(__p) = 0;
    do
    {
      v103 = *a4;
      v104 = std::map<unsigned short,std::string>::at(v150, (unsigned __int16 *)&__p);
      v105 = std::map<std::string,std::string>::at(v149, (void **)v104);
      v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            def GeomSubset \"", 28);
      v107 = v103 + 24 * v102;
      v108 = *(char *)(v107 + 23);
      if (v108 >= 0)
        v109 = v103 + 24 * v102;
      else
        v109 = *(_QWORD *)v107;
      if (v108 >= 0)
        v110 = *(unsigned __int8 *)(v107 + 23);
      else
        v110 = *(_QWORD *)(v107 + 8);
      v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, v109, v110);
      v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"\" (\n", 4);
      v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"                prepend apiSchemas = [\"MaterialBindingAPI\"]\n", 60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)"           )\n", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            {\n", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                uniform token elementType = \"face\"\n", 51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                uniform token familyName = \"materialBind\"\n", 58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                int[] indices = [", 33);
      v114 = &v159[8 * (unsigned __int16)__p];
      v115 = *(_DWORD *)v114;
      v118 = *((_DWORD *)v114 + 1);
      v117 = (unsigned int *)(v114 + 4);
      v116 = v118;
      while (v115 < v116)
      {
        std::ostream::operator<<();
        v116 = *v117;
        if (v115 != *v117 - 1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
          v116 = *v117;
        }
        ++v115;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
      v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"                rel material:binding = </", 41);
      v120 = *(char *)(a3 + 23);
      if (v120 >= 0)
        v121 = a3;
      else
        v121 = *(_QWORD *)a3;
      if (v120 >= 0)
        v122 = *(unsigned __int8 *)(a3 + 23);
      else
        v122 = *(_QWORD *)(a3 + 8);
      v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, v121, v122);
      v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"/Materials/", 11);
      v125 = *(char *)(v105 + 23);
      if (v125 >= 0)
        v126 = v105;
      else
        v126 = *(_QWORD *)v105;
      if (v125 >= 0)
        v127 = *(unsigned __int8 *)(v105 + 23);
      else
        v127 = *(_QWORD *)(v105 + 8);
      v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, v126, v127);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)">\n", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"            }\n", 14);
      v102 = (_WORD)__p + 1;
      LOWORD(__p) = (_WORD)__p + 1;
    }
    while ((unsigned __int16)__p < v151);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"        }\n", 10);
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
}

void sub_23C52C984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  v28 = *(void **)(v26 - 128);
  if (v28)
  {
    *(_QWORD *)(v26 - 120) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  int v4;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<std::vector<unsigned int>>((uint64_t **)(a1 + 56), (uint64_t)&__p, a3);
  *a2 = v4;
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return v4 != -1;
}

void sub_23C52CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  int v4;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<std::string>((uint64_t **)(a1 + 80), (uint64_t)__p, a3);
  *a2 = v4;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return v4 != -1;
}

void sub_23C52CB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  int v4;
  _BOOL8 v5;
  char **v7;
  char *v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<std::map<unsigned short,std::string>>((uint64_t **)(a1 + 80), (uint64_t)&v7, a3);
  *a2 = v4;
  v5 = v4 != -1;
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v7, v8[0]);
  return v5;
}

void sub_23C52CB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::string>::at(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t **v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((unsigned __int16 *)v2 + 16);
      if (v3 >= v4)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return (uint64_t *)(v2 + 5);
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t std::map<std::string,std::string>::at(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::string>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 56;
}

uint64_t cv3d::cv::gess::io::SaveUsdaFile(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  unsigned int v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  std::string *v13;
  std::string *v14;
  std::vector<std::string>::pointer begin;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::vector<std::string>::size_type v21;
  uint64_t v22;
  unsigned int i;
  uint64_t v24;
  std::string *v25;
  std::string::size_type v26;
  char v27;
  std::string *v28;
  std::vector<std::string>::pointer v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  const char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  std::string *v62;
  std::string::size_type v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *exception;
  void *v78;
  __n128 v79;
  uint64_t v81;
  char *v82;
  std::string v84;
  std::vector<std::string> *v85;
  _QWORD *v86[2];
  std::vector<std::string> v87;
  std::vector<std::string> v88;
  std::string __p;
  std::string v90;
  std::string v91;
  _QWORD v92[2];
  uint64_t v93;
  _BYTE v94[408];
  _QWORD v95[22];

  v95[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v93);
  if ((v94[*(_QWORD *)(v93 - 24) + 24] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to write USDA file \"", &__p, &v90);
    v79 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", &v90, &v91);
    MEMORY[0x242620E34](exception, &v91, v79);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v91, (char *)a1);
  std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&v91, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v90, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v90 = __p;
  }
  if (*(char *)(a4 + 135) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 112), *(_QWORD *)(a4 + 120));
  else
    __p = *(std::string *)(a4 + 112);
  memset(&v88, 0, sizeof(v88));
  memset(&v87, 0, sizeof(v87));
  v86[0] = 0;
  v86[1] = 0;
  v85 = (std::vector<std::string> *)v86;
  std::vector<std::string>::resize(&v87, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  v81 = a4;
  v82 = (char *)a1;
  if (a3[1] != *a3)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (v9)
      {
        std::to_string(&v84, v9);
        v10 = std::string::insert(&v84, 0, "Texture_", 8uLL);
        v11 = v10->__r_.__value_.__r.__words[0];
        v92[0] = v10->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v92 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
        v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
        v10->__r_.__value_.__l.__size_ = 0;
        v10->__r_.__value_.__r.__words[2] = 0;
        v10->__r_.__value_.__r.__words[0] = 0;
        v13 = &v87.__begin_[v8];
        if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13->__r_.__value_.__l.__data_);
        v13->__r_.__value_.__r.__words[0] = v11;
        v13->__r_.__value_.__l.__size_ = v92[0];
        *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v92 + 7);
        *((_BYTE *)&v13->__r_.__value_.__s + 23) = v12;
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
      }
      else
      {
        v14 = &v87.__begin_[v8];
        if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
        {
          v14->__r_.__value_.__l.__size_ = 7;
          v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v14->__r_.__value_.__s + 23) = 7;
        }
        strcpy((char *)v14, "Texture");
      }
      begin = v87.__begin_;
      v84.__r_.__value_.__r.__words[0] = *a3 + 48 * v8;
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v85, (void **)v84.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v84);
      std::string::operator=((std::string *)(v16 + 7), &begin[v8]);
      v8 = ++v9;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4) > v9);
  }
  std::string::basic_string[abi:ne180100]<0>(&v84, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
  v17 = (uint64_t *)(a2 + 56);
  LOWORD(v92[0]) = 0;
  v19 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a2 + 56), (uint64_t)v92, (unsigned __int8 *)&v84);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (v19 == -1)
  {
    v78 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x242620E28](v78, "Unable to find group attribute when writing USDA file!");
  }
  LODWORD(v84.__r_.__value_.__l.__data_) = v19;
  v20 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v17, (unsigned int *)&v84, v18);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  std::vector<std::string>::resize(&v88, v21);
  for (i = 0; ; ++i)
  {
    LODWORD(v84.__r_.__value_.__l.__data_) = v19;
    v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(v17, (unsigned int *)&v84, v22);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24) <= (unint64_t)i)
      break;
    if (i)
    {
      std::to_string(&v84, i);
      v25 = std::string::insert(&v84, 0, "Group_", 6uLL);
      v26 = v25->__r_.__value_.__r.__words[0];
      v92[0] = v25->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v92 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
      v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v28 = &v88.__begin_[i];
      if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28->__r_.__value_.__l.__data_);
      v28->__r_.__value_.__r.__words[0] = v26;
      v28->__r_.__value_.__l.__size_ = v92[0];
      *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v92 + 7);
      *((_BYTE *)&v28->__r_.__value_.__s + 23) = v27;
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
    }
    else
    {
      v29 = v88.__begin_;
      if (SHIBYTE(v88.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        v88.__begin_->__r_.__value_.__l.__size_ = 5;
        v29 = (std::vector<std::string>::pointer)v29->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v88.__begin_->__r_.__value_.__s + 23) = 5;
      }
      strcpy((char *)v29, "Group");
    }
  }
  *(_QWORD *)&v94[*(_QWORD *)(v93 - 24) + 8] = 10;
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"#usda 1.0\n", 10);
  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"    customLayerData = {\n", 24);
  v32 = *(unsigned __int8 *)(v81 + 95);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(v81 + 80);
  if (v32)
  {
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"        string creator = \"", 26);
    v34 = *(char *)(v81 + 95);
    if (v34 >= 0)
      v35 = v81 + 72;
    else
      v35 = *(_QWORD *)(v81 + 72);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(v81 + 95);
    else
      v36 = *(_QWORD *)(v81 + 80);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    v38 = "\"\n";
    v39 = 2;
  }
  else
  {
    v38 = "        string creator = \"CorePhotogrammetry Bake\"\n";
    v37 = &v93;
    v39 = 51;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
  if (*(_DWORD *)(v81 + 96) || *(_DWORD *)(v81 + 100) || *(_DWORD *)(v81 + 104))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"        int[] creatorVer = [", 28);
    v40 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"]\n", 2);
  }
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"        dictionary Apple = {\n", 29);
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"            int preferredIblVersion = 2\n", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"        }\n", 10);
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"    }\n", 6);
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"    defaultPrim = \"", 19);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)p_p, size);
  v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\"\n", 2);
  v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"    metersPerUnit = 1\n", 22);
  v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"    upAxis = \"Y\"\n", 17);
  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)")\n", 2);
  v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\n", 1);
  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"def Xform \"", 11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = &__p;
  else
    v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v57 = __p.__r_.__value_.__l.__size_;
  v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
  v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"\" (\n", 4);
  v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"    assetInfo = {\n", 18);
  v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"        string name = \"", 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &__p;
  else
    v62 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v63 = __p.__r_.__value_.__l.__size_;
  v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
  v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"\"\n", 2);
  v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"    }\n", 6);
  v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"    kind = \"component\"\n", 23);
  v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)")\n", 2);
  v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"{\n", 2);
  v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"    def Scope \"Materials\"\n", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"    {\n", 6);
  cv3d::cv::gess::io::WriteUsdaMaterial(&v93, a3, (uint64_t)&__p, v82, v81 + 16, (uint64_t *)&v87);
  v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"    }\n", 6);
  v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"\n", 1);
  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"    def Scope \"Geometry\"\n", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"    {\n", 6);
  cv3d::cv::gess::io::WriteUsdaGeometry(&v93, a2, (uint64_t)&__p, (uint64_t *)&v88, (uint64_t)&v85, a5);
  v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v93, (uint64_t)"    }\n", 6);
  v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"}\n", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"\n", 1);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v94[*(_QWORD *)(v93 - 24) - 8], *(_DWORD *)&v94[*(_QWORD *)(v93 - 24) + 24] | 4);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v85, v86[0]);
  v85 = &v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  v87.__begin_ = (std::vector<std::string>::pointer)&v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  v93 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v94[*(_QWORD *)(v93 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](v94);
  std::ostream::~ostream();
  return MEMORY[0x242621128](v95);
}

void sub_23C52D5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  void *v51;
  int v52;

  if (a48 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v52 & 1) == 0)
    {
LABEL_10:
      std::ofstream::~ofstream(&a51);
      _Unwind_Resume(a1);
    }
  }
  else if (!v52)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v51);
  goto LABEL_10;
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end;
  std::vector<std::string>::size_type v4;
  BOOL v5;
  std::vector<std::string>::size_type v6;
  std::string *v7;

  end = this->__end_;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v5 = __sz >= v4;
  v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    this->__end_ = v7;
  }
}

uint64_t cv3d::cv::gess::io::SaveUsdaFile(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v5;

  v5 = 0;
  return cv3d::cv::gess::io::SaveUsdaFile(a1, a2, a3, a4, &v5);
}

{
  int v5;

  v5 = 1;
  return cv3d::cv::gess::io::SaveUsdaFile(a1, a2, a3, a4, &v5);
}

_QWORD *std::vector<std::pair<unsigned int,unsigned int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C52D848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *v5;
  std::string *value;
  std::string *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  size_t v13;
  size_t v14;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  v5 = value;
  v7 = (std::string *)*((_QWORD *)p_end_cap - 1);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(*((void **)p_end_cap - 1), v13);
      v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_23C52D9B4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<std::vector<unsigned int>>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<std::vector<unsigned int>>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<std::vector<unsigned int>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<std::vector<unsigned int>>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<unsigned short>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<unsigned short>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<unsigned short>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<std::string>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<std::string>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<std::string>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<std::string>;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::handle<std::map<unsigned short,std::string>>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string::size_type size;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  std::string *p_p;
  uint64_t v15;
  BOOL v16;
  void *v17;
  std::string __p;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v7 = *v3;
      if (*v3)
      {
        if (*(char *)(v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
        }
        else
        {
          v8 = *(_OWORD *)(v7 + 8);
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v11 = a3[23];
        v12 = (char)v11;
        if ((v11 & 0x80u) != 0)
          v11 = *((_QWORD *)a3 + 1);
        if (size != v11)
          goto LABEL_22;
        if (v12 >= 0)
          v13 = a3;
        else
          v13 = *(unsigned __int8 **)a3;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
          {
            p_p = &__p;
            v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            while (p_p->__r_.__value_.__s.__data_[0] == *v13)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v13;
              if (!--v15)
                goto LABEL_29;
            }
LABEL_22:
            v16 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_23:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_29:
            v16 = *(_QWORD *)(*v3 + 32) == (_QWORD)cv3d::cv::gess::util::os::GessTypeID<std::map<unsigned short,std::string>>;
            if (v9 < 0)
              goto LABEL_23;
          }
          if (v16)
            return v6;
          goto LABEL_25;
        }
        v17 = (void *)__p.__r_.__value_.__r.__words[0];
        if (!memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_))
          goto LABEL_29;
        operator delete(v17);
      }
LABEL_25:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*cv3d::cv::gess::util::os::GessTypeID<std::map<unsigned short,std::string>>())()
{
  return cv3d::cv::gess::util::os::GessTypeID<std::map<unsigned short,std::string>>;
}

void std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<unsigned short>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<unsigned short>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::string>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::string>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::map<unsigned short,std::string>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::map<unsigned short,std::string>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::vector<unsigned int>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = *a1;
  if (v3 >= (a1[1] - *a1) >> 4)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v5 = *(_QWORD *)(v4 + 16 * v3);
  if (!v5)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  if (*(uint64_t (*(**)())())(v5 + 32) != cv3d::cv::gess::util::os::GessTypeID<std::vector<unsigned int>>)
    cv3d::cv::gess::mesh::AttributeContainer::attribute<BOOL>((uint64_t)a1, (uint64_t)a2, a3);
  v6 = *(std::__shared_weak_count **)(v4 + 16 * v3 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_23C52E5C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void OUTLINED_FUNCTION_0_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 128, a4);
}

void OUTLINED_FUNCTION_1_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 130, a4);
}

void OUTLINED_FUNCTION_2_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 129, a4);
}

uint64_t cv3d::cv::gess::io::SaveToJson(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  const std::locale::facet *v5;
  _BYTE v7[8];
  uint64_t *v8;
  std::locale v9;
  uint64_t v10;
  _BYTE v11[408];
  _QWORD v12[20];

  v12[19] = *MEMORY[0x24BDAC8D0];
  v7[0] = 0;
  v8 = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  v3 = cv3d::cv::gess::io::internal::ReportBake2Json(a1, (uint64_t)v7, v2);
  std::ofstream::basic_ofstream(&v10);
  *(_QWORD *)&v11[*(_QWORD *)(v10 - 24) + 16] = 2;
  v4 = nlohmann::operator<<(&v10, (uint64_t)v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v9);
  std::ostream::put();
  std::ostream::flush();
  v10 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v11[*(_QWORD *)(v10 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](v11);
  std::ostream::~ostream();
  MEMORY[0x242621128](v12);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
  return v3;
}

void sub_23C52E7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, std::locale a12, char a13)
{
  nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~json_ref(&a10);
  _Unwind_Resume(a1);
}

void sub_23C52E8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::UsdzConvert(uint64_t *a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, std::string *a5)
{
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  void *v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  void *v32;
  const char *v33;
  char *v34;
  void *v35;
  uint64_t v36;

  if (*((char *)a1 + 23) >= 0)
    v9 = a1;
  else
    v9 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v11 = a2;
  else
    v11 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a3 + 23) >= 0)
    v13 = a3;
  else
    v13 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v15, "fileExistsAtPath:", v10)
    && (objc_msgSend(v15, "attributesOfItemAtPath:error:", v10, 0),
        v16 = (void *)objc_claimAutoreleasedReturnValue(),
        v17 = objc_msgSend(v16, "fileSize"),
        v16,
        v17))
  {
    v18 = (void *)MEMORY[0x2426214AC]();
    v19 = objc_alloc_init(MEMORY[0x24BEBED00]);
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v10);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(v19, "initSceneFromURL:", v20);

    if (v21)
    {
      objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v12);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v21, "exportToURL:", v22);

    }
    else
    {
      *a4 = 12;
      std::string::__assign_external(a5, "Invalid usda. Notes: 1. The first character of filename shouldn't be a number digit; 2. Please check the usda file exists.",
        0x7AuLL);
      v23 = 1;
    }

    objc_autoreleasePoolPop(v18);
    if (v21)
    {
      if (!v23
        || (objc_msgSend(v15, "attributesOfItemAtPath:error:", v12, 0),
            v26 = (void *)objc_claimAutoreleasedReturnValue(),
            v27 = objc_msgSend(v26, "fileSize"),
            v26,
            !v27))
      {
        *a4 = 13;
        if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
        {
          a5->__r_.__value_.__l.__size_ = 18;
          a5 = (std::string *)a5->__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&a5->__r_.__value_.__s + 23) = 18;
        }
        LOWORD(a5->__r_.__value_.__r.__words[2]) = 25444;
        v33 = "Fail to write usdc";
LABEL_27:
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)v33;
        v24 = 0;
        a5->__r_.__value_.__s.__data_[18] = 0;
        goto LABEL_16;
      }
      v28 = (void *)MEMORY[0x2426214AC]();
      v29 = objc_alloc_init(MEMORY[0x24BEBED00]);
      objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v12);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v31 = (void *)objc_msgSend(v29, "initSceneFromURL:", v30);

      if (v31)
      {
        objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v14);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "saveAndCreateUSDZPackageWithURL:", v32);

      }
      else
      {
        *a4 = 14;
        if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
        {
          a5->__r_.__value_.__l.__size_ = 12;
          v34 = (char *)a5->__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&a5->__r_.__value_.__s + 23) = 12;
          v34 = (char *)a5;
        }
        strcpy(v34, "Invalid usdc");
      }

      objc_autoreleasePoolPop(v28);
      if (v31)
      {
        if (objc_msgSend(v15, "fileExistsAtPath:", v14))
        {
          objc_msgSend(v15, "attributesOfItemAtPath:error:", v14, 0);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = objc_msgSend(v35, "fileSize");

          if (v36)
          {
            v24 = 1;
            goto LABEL_16;
          }
        }
        *a4 = 15;
        if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
        {
          a5->__r_.__value_.__l.__size_ = 18;
          a5 = (std::string *)a5->__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&a5->__r_.__value_.__s + 23) = 18;
        }
        LOWORD(a5->__r_.__value_.__r.__words[2]) = 31332;
        v33 = "Fail to write usdz";
        goto LABEL_27;
      }
    }
  }
  else
  {
    *a4 = 12;
    std::string::__assign_external(a5, "Usda file doesn't exist or is empty", 0x23uLL);
  }
  v24 = 0;
LABEL_16:

  return v24;
}

void sub_23C52ECC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::LoadObjFile<float,unsigned int>(uint64_t a1, float **a2, int **a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  const std::locale::facet *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _BYTE *p_p;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float *v20;
  float *v21;
  float *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  std::string::size_type size;
  std::string *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float *v37;
  int v38;
  float v39;
  float *v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  float *v47;
  int v48;
  float v49;
  float *v50;
  float *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  float *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  int *v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  int *v70;
  int v71;
  void *exception;
  __n128 v74;
  float **v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  void *__p;
  uint64_t v80;
  uint64_t v81;
  std::string v82[3];
  void *v83;
  char v84;
  uint64_t v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  double v90;
  double v91;
  double v92;
  std::string v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _BYTE v97[24];
  _QWORD v98[2];
  _BYTE v99[408];
  _QWORD v100[22];

  v100[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v98);
  a2[1] = *a2;
  a3[1] = *a3;
  v6 = *(_QWORD *)(v98[0] - 24);
  if ((v99[v6 + 16] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v93 = *(std::string *)a1;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to open OBJ file \"", &v93, (std::string *)&v94);
    v74 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", (std::string *)&v94, v82);
    MEMORY[0x242620E34](exception, v82, v74);
  }
  v92 = 0.0;
  memset(&v93, 0, sizeof(v93));
  v90 = 0.0;
  v91 = 0.0;
  memset(&v88, 0, sizeof(v88));
  memset(&v89, 0, sizeof(v89));
  memset(&v86, 0, sizeof(v86));
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  memset(&v87, 0, sizeof(v87));
  *(_QWORD *)&v97[16] = -1;
  *(_OWORD *)v97 = v7;
  v96 = v7;
  v75 = a2 + 2;
  v76 = a3 + 2;
  v95 = v7;
  v94 = v7;
  v8 = MEMORY[0x24BEDB848] + 16;
  v9 = *MEMORY[0x24BEDB7F8];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v98 + v6));
    v11 = std::locale::use_facet((const std::locale *)v82, MEMORY[0x24BEDB350]);
    v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v82);
    v13 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v98, (uint64_t)&v93, v12);
    if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0)
      break;
    std::istringstream::basic_istringstream[abi:ne180100](v82, &v93, 8);
    __p = 0;
    v80 = 0;
    v81 = 0;
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v82, (uint64_t)&__p);
    v14 = HIBYTE(v81);
    if (v81 >= 0)
      v15 = HIBYTE(v81);
    else
      v15 = v80;
    if (v15 != 2)
    {
      if (v15 != 1)
        goto LABEL_75;
      if (v81 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (*p_p == 118)
      {
        v17 = MEMORY[0x242620F30](v82, &v92);
        v18 = MEMORY[0x242620F30](v17, &v91);
        MEMORY[0x242620F30](v18, &v90);
        v19 = v92;
        v21 = a2[1];
        v20 = a2[2];
        if (v21 >= v20)
        {
          v31 = *a2;
          v32 = v21 - *a2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v34 = (char *)v20 - (char *)v31;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v75, v35);
            v31 = *a2;
            v21 = a2[1];
          }
          else
          {
            v36 = 0;
          }
          v37 = (float *)&v36[4 * v32];
          *v37 = v19;
          v22 = v37 + 1;
          while (v21 != v31)
          {
            v38 = *((_DWORD *)v21-- - 1);
            *((_DWORD *)v37-- - 1) = v38;
          }
          v20 = (float *)&v36[4 * v35];
          *a2 = v37;
          a2[1] = v22;
          a2[2] = v20;
          if (v31)
          {
            operator delete(v31);
            v20 = *v75;
          }
        }
        else
        {
          *v21 = v19;
          v22 = v21 + 1;
        }
        a2[1] = v22;
        v39 = v91;
        if (v22 >= v20)
        {
          v41 = *a2;
          v42 = v22 - *a2;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v44 = (char *)v20 - (char *)v41;
          if (v44 >> 1 > v43)
            v43 = v44 >> 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v75, v45);
            v41 = *a2;
            v22 = a2[1];
          }
          else
          {
            v46 = 0;
          }
          v47 = (float *)&v46[4 * v42];
          *v47 = v39;
          v40 = v47 + 1;
          while (v22 != v41)
          {
            v48 = *((_DWORD *)v22-- - 1);
            *((_DWORD *)v47-- - 1) = v48;
          }
          v20 = (float *)&v46[4 * v45];
          *a2 = v47;
          a2[1] = v40;
          a2[2] = v20;
          if (v41)
          {
            operator delete(v41);
            v20 = *v75;
          }
        }
        else
        {
          *v22 = v39;
          v40 = v22 + 1;
        }
        a2[1] = v40;
        v49 = v90;
        if (v40 >= v20)
        {
          v51 = *a2;
          v52 = v40 - *a2;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v54 = (char *)v20 - (char *)v51;
          if (v54 >> 1 > v53)
            v53 = v54 >> 1;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
            v55 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v75, v55);
            v51 = *a2;
            v40 = a2[1];
          }
          else
          {
            v56 = 0;
          }
          v57 = (float *)&v56[4 * v52];
          *v57 = v49;
          v50 = v57 + 1;
          while (v40 != v51)
          {
            v58 = *((_DWORD *)v40-- - 1);
            *((_DWORD *)v57-- - 1) = v58;
          }
          *a2 = v57;
          a2[1] = v50;
          a2[2] = (float *)&v56[4 * v55];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *v40 = v49;
          v50 = v40 + 1;
        }
        a2[1] = v50;
      }
      else if (!memcmp(p_p, "f", 1uLL))
      {
        v23 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v82, (uint64_t)&v89);
        v24 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)&v88);
        v25 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (uint64_t)&v87);
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (uint64_t)&v86);
        *(_QWORD *)&v94 = v77;
        DWORD2(v94) = v78;
        *(_QWORD *)((unint64_t)&v94 | 0xC) = v77;
        *(_DWORD *)(((unint64_t)&v94 | 0xC) + 8) = v78;
        *((_QWORD *)&v95 + 1) = v77;
        LODWORD(v96) = v78;
        v26 = v94;
        v27 = HIDWORD(v94);
        if ((_DWORD)v94 != HIDWORD(v94))
        {
          v28 = DWORD2(v95);
          if (HIDWORD(v94) != DWORD2(v95) && DWORD2(v95) != (_DWORD)v94)
          {
            size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v86.__r_.__value_.__l.__size_;
            if (!size)
            {
              v59 = 3;
              goto LABEL_83;
            }
            *(_QWORD *)((char *)&v96 + 4) = v77;
            HIDWORD(v96) = v78;
            if (v28 != (_DWORD)v77 && v26 != DWORD1(v96) && v27 != DWORD1(v96))
            {
              *(_QWORD *)v97 = v94;
              *(_DWORD *)&v97[8] = DWORD2(v94);
              *(_QWORD *)&v97[12] = *((_QWORD *)&v95 + 1);
              *(_DWORD *)&v97[20] = v96;
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              {
                v86.__r_.__value_.__l.__size_ = 0;
                v30 = (std::string *)v86.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v86.__r_.__value_.__s + 23) = 0;
                v30 = &v86;
              }
              v30->__r_.__value_.__s.__data_[0] = 0;
              v59 = 6;
LABEL_83:
              v60 = 0;
              v61 = a3[1];
              do
              {
                v62 = *((_DWORD *)&v94 + 3 * v60) - 1;
                if ((unint64_t)v61 >= *v76)
                {
                  v64 = *a3;
                  v65 = v61 - *a3;
                  v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 62)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  v67 = *v76 - (_QWORD)v64;
                  if (v67 >> 1 > v66)
                    v66 = v67 >> 1;
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
                    v68 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v68 = v66;
                  if (v68)
                  {
                    v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v76, v68);
                    v64 = *a3;
                    v61 = a3[1];
                  }
                  else
                  {
                    v69 = 0;
                  }
                  v70 = (int *)&v69[4 * v65];
                  *v70 = v62;
                  v63 = v70 + 1;
                  while (v61 != v64)
                  {
                    v71 = *--v61;
                    *--v70 = v71;
                  }
                  *a3 = v70;
                  a3[1] = v63;
                  a3[2] = (int *)&v69[4 * v68];
                  if (v64)
                    operator delete(v64);
                }
                else
                {
                  *v61 = v62;
                  v63 = v61 + 1;
                }
                a3[1] = v63;
                ++v60;
                v61 = v63;
              }
              while (v60 != v59);
            }
          }
        }
      }
    }
    v14 = HIBYTE(v81);
LABEL_75:
    if (v14 < 0)
      operator delete(__p);
    v82[0].__r_.__value_.__r.__words[0] = v9;
    *(std::string::size_type *)((char *)v82[0].__r_.__value_.__r.__words + *(_QWORD *)(v9 - 24)) = v10;
    v82[0].__r_.__value_.__r.__words[2] = v8;
    if (v84 < 0)
      operator delete(v83);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x242621128](&v85);
    v6 = *(_QWORD *)(v98[0] - 24);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v98[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v98 + *(_QWORD *)(v98[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x242620F0C](v99);
  std::istream::~istream();
  MEMORY[0x242621128](v100);
  return 1;
}

void sub_23C52F5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (a27 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete(*(void **)(v29 + 152));
  if (SLOBYTE(STACK[0x207]) < 0)
  {
    operator delete(*(void **)(v29 + 120));
    if ((v28 & 1) == 0)
    {
LABEL_10:
      std::ifstream::~ifstream(&STACK[0x258]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

void sub_23C52F7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x242621128](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::istringstream::basic_istringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x24BEDB868];
  v7 = MEMORY[0x24BEDB868] + 64;
  a1[15] = MEMORY[0x24BEDB868] + 64;
  v8 = (uint64_t)(a1 + 2);
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  a1[1] = 0;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 2);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[15] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 8);
  return a1;
}

void sub_23C52F8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x242621128](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x242620F18](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x24BEDB350]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_23C52FAA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x23C52FA70);
  }
  __cxa_rethrow();
}

void sub_23C52FB08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::obj_vertex::obj_vertex(uint64_t a1, const std::string *a2)
{
  _QWORD *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  unint64_t v9;
  void *exception;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string *v15;
  unint64_t v16;
  std::string __p;
  __int128 v18;
  std::string::size_type v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  *(_QWORD *)a1 = -1;
  *(_DWORD *)(a1 + 8) = -1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v18, a2, 24);
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    v3 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18, (uint64_t)&__p, 0x2Fu);
    if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
      break;
    v4 = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if ((unint64_t)v15 < v16)
      {
        std::string::__init_copy_ctor_external(v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        goto LABEL_8;
      }
    }
    else if ((unint64_t)v15 < v16)
    {
      v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v15->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
LABEL_8:
      v6 = v4 + 1;
      goto LABEL_10;
    }
    v6 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v14, (__int128 *)&__p);
LABEL_10:
    v15 = v6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v18 = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v19 = v7;
  v20 = MEMORY[0x24BEDB848] + 16;
  if (v22 < 0)
    operator delete(v21);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x242621128](&v23);
  if (v15 == v14 || 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3) >= 4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v12 = std::string::append(&__p, "\"", 1uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19 = v12->__r_.__value_.__r.__words[2];
    v18 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x242620E34](exception, &v18);
  }
  v8 = v14;
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3);
  if (v9 < 2)
    goto LABEL_29;
  if (SHIBYTE(v14[1].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v14[1].__r_.__value_.__l.__size_)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (*((_BYTE *)&v14[1].__r_.__value_.__s + 23))
  {
LABEL_22:
    v8 = v14;
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3);
  }
LABEL_23:
  if (v9 >= 3)
  {
    if (SHIBYTE(v8[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (v8[2].__r_.__value_.__l.__size_)
        goto LABEL_28;
    }
    else
    {
      if (!*((_BYTE *)&v8[2].__r_.__value_.__s + 23))
        goto LABEL_29;
LABEL_28:
    }
  }
LABEL_29:
  *(_QWORD *)&v18 = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return a1;
}

void sub_23C52FDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  void *v38;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      __p = &a9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x242621128](a1 + 120);
  return a1;
}

uint64_t cv3d::cv::gess::io::MeshToArray<float,unsigned int>(uint64_t a1, uint64_t *a2, std::vector<unsigned int> *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  std::vector<unsigned int>::pointer begin;
  unsigned int v22;
  unsigned int v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v7 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  std::vector<float>::resize((uint64_t)a2, 3 * (v6 >> 2));
  std::vector<int>::resize(a3, (3 * v7));
  LODWORD(v28) = *(_DWORD *)(a1 + 176);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v28);
  if ((v6 >> 2))
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 40);
    v14 = (*(_QWORD *)(v8 + 48) - v13) >> 4;
    do
    {
      if (v14 <= v12)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
      v15 = 0;
      v16 = *a2;
      do
      {
        *(_DWORD *)(v16 + 4 * (v11 + v15)) = *(_DWORD *)(v13 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      ++v12;
      v11 += 3;
      v13 += 16;
    }
    while (v12 != (v6 >> 2));
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v28, 3uLL);
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<cv3d::cv::gess::mesh::Face>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Face*,cv3d::cv::gess::mesh::Face*>(&__p, *(const void **)(a1 + 152), *(_QWORD *)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v24 = v18;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v24, &v28);
      v19 = 0;
      v20 = v28;
      begin = a3->__begin_;
      do
      {
        v22 = v20[v19];
        if (v22 == -1)
          __assert_rtn("MeshToArray", "MeshIO.cpp", 247, "tri_hhs[j].Valid()");
        begin[(v17 + v19++)] = v22;
      }
      while (v19 != 3);
      ++v18;
      v17 += 3;
    }
    while (v18 != (_DWORD)v7);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return 1;
}

void sub_23C53010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::MeshToArray<double,unsigned int>(uint64_t a1, uint64_t *a2, std::vector<unsigned int> *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  std::vector<unsigned int>::pointer begin;
  unsigned int v22;
  unsigned int v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v7 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  std::vector<double>::resize((uint64_t)a2, 3 * (v6 >> 2));
  std::vector<int>::resize(a3, (3 * v7));
  LODWORD(v28) = *(_DWORD *)(a1 + 176);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v28);
  if ((v6 >> 2))
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 40);
    v14 = (*(_QWORD *)(v8 + 48) - v13) >> 4;
    do
    {
      if (v14 <= v12)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
      v15 = 0;
      v16 = *a2;
      do
      {
        *(double *)(v16 + 8 * (v11 + v15)) = *(float *)(v13 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      ++v12;
      v11 += 3;
      v13 += 16;
    }
    while (v12 != (v6 >> 2));
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v28, 3uLL);
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<cv3d::cv::gess::mesh::Face>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Face*,cv3d::cv::gess::mesh::Face*>(&__p, *(const void **)(a1 + 152), *(_QWORD *)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v24 = v18;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v24, &v28);
      v19 = 0;
      v20 = v28;
      begin = a3->__begin_;
      do
      {
        v22 = v20[v19];
        if (v22 == -1)
          __assert_rtn("MeshToArray", "MeshIO.cpp", 247, "tri_hhs[j].Valid()");
        begin[(v17 + v19++)] = v22;
      }
      while (v19 != 3);
      ++v18;
      v17 += 3;
    }
    while (v18 != (_DWORD)v7);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return 1;
}

void sub_23C5302FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

uint64_t cv3d::cv::gess::io::MeshToArray<float,unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v6 = ((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  v7 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  std::vector<float>::resize((uint64_t)a2, 3 * v6);
  std::vector<unsigned long long>::resize((uint64_t)a3, 3 * v7);
  LODWORD(v28) = *(_DWORD *)(a1 + 176);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v28);
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 40);
    v14 = (*(_QWORD *)(v8 + 48) - v13) >> 4;
    do
    {
      if (v12 == v14)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
      v15 = 0;
      v16 = *a2 + v11;
      do
      {
        *(_DWORD *)(v16 + v15) = *(_DWORD *)(v13 + v15);
        v15 += 4;
      }
      while (v15 != 12);
      ++v12;
      v11 += 12;
      v13 += 16;
    }
    while (v12 != v6);
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v28, 3uLL);
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<cv3d::cv::gess::mesh::Face>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Face*,cv3d::cv::gess::mesh::Face*>(&__p, *(const void **)(a1 + 152), *(_QWORD *)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v24 = v18;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v24, &v28);
      v19 = 0;
      v20 = (unsigned int *)v28;
      v21 = *a3 + v17;
      do
      {
        v22 = v20[v19];
        if ((_DWORD)v22 == -1)
          __assert_rtn("MeshToArray", "MeshIO.cpp", 247, "tri_hhs[j].Valid()");
        *(_QWORD *)(v21 + 8 * v19++) = v22;
      }
      while (v19 != 3);
      ++v18;
      v17 += 24;
    }
    while (v18 != v7);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return 1;
}

void sub_23C530524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::MeshToArray<double,unsigned long>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v6 = ((*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
  v7 = (*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2;
  std::vector<double>::resize((uint64_t)a2, 3 * v6);
  std::vector<unsigned long long>::resize((uint64_t)a3, 3 * v7);
  LODWORD(v28) = *(_DWORD *)(a1 + 176);
  v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v28);
  if (v6)
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 40);
    v14 = (*(_QWORD *)(v8 + 48) - v13) >> 4;
    do
    {
      if (v12 == v14)
        cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v8, v9, v10);
      v15 = 0;
      v16 = *a2 + v11;
      do
      {
        *(double *)(v16 + 8 * v15) = *(float *)(v13 + 4 * v15);
        ++v15;
      }
      while (v15 != 3);
      ++v12;
      v11 += 24;
      v13 += 16;
    }
    while (v12 != v6);
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v28, 3uLL);
  __p = 0;
  v26 = 0;
  v27 = 0;
  std::vector<cv3d::cv::gess::mesh::Face>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Face*,cv3d::cv::gess::mesh::Face*>(&__p, *(const void **)(a1 + 152), *(_QWORD *)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  if ((_DWORD)v7)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      v24 = v18;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a1, &v24, &v28);
      v19 = 0;
      v20 = (unsigned int *)v28;
      v21 = *a3 + v17;
      do
      {
        v22 = v20[v19];
        if ((_DWORD)v22 == -1)
          __assert_rtn("MeshToArray", "MeshIO.cpp", 247, "tri_hhs[j].Valid()");
        *(_QWORD *)(v21 + 8 * v19++) = v22;
      }
      while (v19 != 3);
      ++v18;
      v17 += 24;
    }
    while (v18 != v7);
  }
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return 1;
}

void sub_23C530720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::LoadObjFile(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t inited;
  std::string __p;
  void *v8;
  void *v9;
  uint64_t v10;
  float *v11;
  float *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v3 = cv3d::cv::gess::io::LoadObjFile<float,unsigned int>((uint64_t)&__p, &v11, (int **)&v8);
  v4 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_6;
  }
  else if (v3)
  {
LABEL_6:
    inited = cv3d::cv::gess::mesh::TriMesh::InitVF<float,unsigned int>(a2, &v11, (uint64_t *)&v8);
    goto LABEL_9;
  }
  inited = 0;
LABEL_9:
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  return inited;
}

void sub_23C530824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  if (__p)
    operator delete(__p);
  v19 = *(void **)(v17 - 40);
  if (v19)
  {
    *(_QWORD *)(v17 - 32) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::LoadObjFile(__int128 *a1, uint64_t **a2, _BYTE *a3)
{
  BOOL v4;
  uint64_t v6;
  std::string v8[10];
  _QWORD *v9;
  _QWORD v10[5];
  int v11;

  if (*a3)
    v4 = 0;
  else
    v4 = a3[1] == 0;
  if (v4 && a3[2] == 0)
    return cv3d::cv::gess::io::LoadObjFile((uint64_t)a1, (uint64_t)a2);
  memset(v8, 0, sizeof(v8));
  v9 = v10;
  memset(v10, 0, sizeof(v10));
  v11 = 1;
  cv3d::cv::gess::io::LoadObjFile(a1, (uint64_t)v8, a3, 0);
  v6 = cv3d::cv::gess::io::MeshFromObjContents(a2, v8, 0);
  cv3d::cv::gess::io::LoadObjContents::~LoadObjContents((cv3d::cv::gess::io::LoadObjContents *)v8);
  return v6;
}

{
  uint64_t v4;
  std::string v6[10];
  _QWORD *v7;
  _QWORD v8[5];
  int v9;

  memset(v6, 0, sizeof(v6));
  v7 = v8;
  memset(v8, 0, sizeof(v8));
  v9 = 1;
  cv3d::cv::gess::io::LoadObjFile(a1, (uint64_t)v6, a3, 1);
  v4 = cv3d::cv::gess::io::MeshFromObjContents(a2, v6, (const cv3d::cv::gess::io::LoadObjContents *)1);
  cv3d::cv::gess::io::LoadObjContents::~LoadObjContents((cv3d::cv::gess::io::LoadObjContents *)v6);
  return v4;
}

void sub_23C530928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cv3d::cv::gess::io::LoadObjContents::~LoadObjContents((cv3d::cv::gess::io::LoadObjContents *)&a9);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::LoadObjFile(__int128 *a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  std::string::size_type v10;
  const std::locale::facet *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  __int128 *v16;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  char *v40;
  float *v41;
  float *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t i;
  std::string *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  std::string *v57;
  _OWORD *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  char v62;
  unint64_t v63;
  __int128 v64;
  std::string::size_type size;
  int v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  std::string::size_type v82;
  std::string *v83;
  char *v84;
  int v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  int v94;
  _DWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int v107;
  _DWORD *v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  float *v117;
  int v118;
  float v119;
  float *v120;
  float *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  float *v127;
  int v128;
  float v129;
  float *v130;
  float *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  float *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  std::string::size_type v146;
  std::string::size_type v147;
  std::string::size_type v148;
  float v149;
  float v150;
  unint64_t v151;
  float *v152;
  float *v153;
  int v154;
  char v155;
  unsigned __int8 v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  int *v160;
  _DWORD *v161;
  int *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  int *v168;
  int v169;
  int v170;
  int v171;
  unint64_t v172;
  char *v173;
  _DWORD *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  char *v186;
  _DWORD *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  int v195;
  char v196;
  unint64_t v197;
  _BYTE *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t **v206;
  char *v207;
  int v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  int v217;
  _DWORD *v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  int v226;
  float *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  size_t v236;
  char *v237;
  float *v238;
  int v239;
  float v240;
  float v241;
  unint64_t v242;
  float *v243;
  float *v244;
  float *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  float *v251;
  int v252;
  float v253;
  float v254;
  unint64_t v255;
  float *v256;
  float *v257;
  float *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  float *v264;
  int v265;
  uint64_t j;
  int v267;
  unint64_t v268;
  int *v269;
  _DWORD *v270;
  int *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  int *v277;
  int v278;
  int v279;
  int v280;
  unint64_t v281;
  char *v282;
  _DWORD *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  int v291;
  int v292;
  int v293;
  unint64_t v294;
  char *v295;
  _DWORD *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  int v304;
  unint64_t v305;
  _WORD *v306;
  _WORD *v307;
  _WORD *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  char *v314;
  char *v315;
  __int16 v316;
  char *v317;
  _BYTE *v318;
  char v319;
  uint64_t v320;
  unint64_t v321;
  _WORD *v322;
  _WORD *v323;
  _WORD *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  char *v330;
  char *v331;
  __int16 v332;
  std::string *v333;
  std::string::size_type v334;
  char v335;
  unint64_t v336;
  __int128 v337;
  uint64_t v338;
  void *v339;
  uint64_t v340;
  BOOL v341;
  unint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  uint64_t v345;
  uint64_t k;
  void *exception;
  __n128 v349;
  size_t v350;
  _BYTE *v351;
  uint64_t v352;
  unint64_t *v353;
  _QWORD *v354;
  char **v355;
  void **v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v360;
  void **v361;
  void **v362;
  char **v363;
  uint64_t *v364;
  void **v365;
  void **v367;
  char **v368;
  void **v369;
  char **v370;
  int v371;
  int __val;
  std::string::size_type v373;
  uint64_t v374;
  std::string v375;
  std::string __str;
  std::string v377[3];
  void *v378;
  char v379;
  uint64_t v380;
  char v381;
  int v382;
  std::string v383;
  std::string v384;
  std::string v385;
  std::string v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  double v391;
  double v392;
  double v393;
  std::string v394;
  std::string __p;
  std::string v396;
  std::string v397;
  __int128 v398;
  uint64_t v399;
  _BYTE v400[24];
  _BYTE *v401;
  _OWORD v402[4];
  uint64_t v403;
  std::string v404[2];
  _OWORD v405[3];
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  _BYTE v412[24];
  _QWORD v413[2];
  _BYTE v414[408];
  _QWORD v415[22];

  v415[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v413);
  cv3d::cv::gess::io::LoadObjContents::clear((cv3d::cv::gess::io::LoadObjContents *)a2);
  v6 = *(_QWORD *)(v413[0] - 24);
  if ((v414[v6 + 16] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*((char *)a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v409, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v409 = *a1;
      *(_QWORD *)&v410 = *((_QWORD *)a1 + 2);
    }
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to open OBJ file \"", (std::string *)&v409, v404);
    v349 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", v404, v377);
    MEMORY[0x242620E34](exception, v377, v349);
  }
  memset(&v396, 0, sizeof(v396));
  memset(&__p, 0, sizeof(__p));
  memset(&v394, 0, sizeof(v394));
  v393 = 0.0;
  v392 = 0.0;
  v391 = 0.0;
  v390 = 0;
  v389 = 0;
  v388 = 0;
  v387 = 0;
  memset(&v386, 0, sizeof(v386));
  memset(&v385, 0, sizeof(v385));
  memset(&v384, 0, sizeof(v384));
  memset(&v383, 0, sizeof(v383));
  *(_QWORD *)&v412[16] = -1;
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  v411 = v7;
  *(_OWORD *)v412 = v7;
  v409 = v7;
  v410 = v7;
  v382 = 3;
  v407 = 0u;
  v408 = 0u;
  v406 = 0u;
  memset(v405, 0, sizeof(v405));
  memset(v404, 0, sizeof(v404));
  v403 = -1;
  v402[2] = v7;
  v402[3] = v7;
  v402[0] = v7;
  v402[1] = v7;
  v381 = 0;
  v8 = operator new(0x20uLL);
  v371 = 0;
  v9 = 0;
  *v8 = &off_250D4A018;
  v8[1] = a2;
  v8[2] = &v381;
  v8[3] = &v382;
  v401 = v8;
  v367 = (void **)(a2 + 48);
  v362 = (void **)(a2 + 72);
  v358 = a2 + 88;
  v360 = a2 + 64;
  v361 = (void **)(a2 + 96);
  v357 = a2 + 112;
  v354 = (_QWORD *)(a2 + 120);
  v352 = a2 + 136;
  v353 = (unint64_t *)(a2 + 144);
  v365 = (void **)(a2 + 192);
  v369 = (void **)(a2 + 168);
  v370 = (char **)(a2 + 184);
  v368 = (char **)(a2 + 16);
  v356 = (void **)(a2 + 24);
  v363 = (char **)(a2 + 208);
  v374 = MEMORY[0x24BEDB848] + 16;
  v355 = (char **)(a2 + 40);
  v364 = (uint64_t *)(a2 + 216);
  v10 = *MEMORY[0x24BEDB7F8];
  v373 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  __val = -1;
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v413 + v6));
    v11 = std::locale::use_facet((const std::locale *)v377, MEMORY[0x24BEDB350]);
    v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale((std::locale *)v377);
    v13 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v413, (uint64_t)&v396, v12);
    if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0)
      break;
    std::istringstream::basic_istringstream[abi:ne180100](v377, &v396, 8);
    v398 = 0uLL;
    v399 = 0;
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, (uint64_t)&v398);
    v14 = HIBYTE(v399);
    if (v399 >= 0)
      v15 = HIBYTE(v399);
    else
      v15 = *((_QWORD *)&v398 + 1);
    switch(v15)
    {
      case 1:
        v23 = v9;
        if (v399 >= 0)
          v29 = &v398;
        else
          v29 = (__int128 *)v398;
        if (!memcmp(v29, "g", 1uLL))
        {
          if (__val == -1)
            v35 = 1;
          else
            v35 = 3;
          if (v371)
            v36 = v371;
          else
            v36 = v35;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            *__p.__r_.__value_.__l.__data_ = 0;
            __p.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          }
          v9 = v23;
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, (uint64_t)&__p);
          if (v36 == 3)
          {
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p.__r_.__value_.__l.__size_;
            if (size)
              std::string::operator=((std::string *)(*v364 + 24 * __val), &__p);
            v66 = 3;
          }
          else
          {
            v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v59 = __p.__r_.__value_.__l.__size_;
            if (!v59)
            {
              std::to_string(&__str, __val);
              v60 = std::string::insert(&__str, 0, "group_", 6uLL);
              v61 = v60->__r_.__value_.__r.__words[0];
              v397.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v397.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
              v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              __p.__r_.__value_.__r.__words[0] = v61;
              __p.__r_.__value_.__l.__size_ = v397.__r_.__value_.__r.__words[0];
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v397.__r_.__value_.__r.__words + 7);
              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v62;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v9 = v23;
            }
            v63 = *(_QWORD *)(a2 + 224);
            if (v63 >= *(_QWORD *)(a2 + 232))
            {
              v104 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v364, (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a2 + 224), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v64 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v63 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v63 = v64;
              }
              v104 = v63 + 24;
              *(_QWORD *)(a2 + 224) = v63 + 24;
            }
            ++__val;
            *(_QWORD *)(a2 + 224) = v104;
            v66 = 1;
          }
          v371 = v66;
          goto LABEL_325;
        }
        if (!memcmp(v29, "v", 1uLL))
        {
          v37 = MEMORY[0x242620F30](v377, &v393);
          v38 = MEMORY[0x242620F30](v37, &v392);
          MEMORY[0x242620F30](v38, &v391);
          v39 = v393;
          v41 = *(float **)(a2 + 8);
          v40 = *(char **)(a2 + 16);
          if (v41 >= (float *)v40)
          {
            v73 = *(float **)a2;
            v74 = ((uint64_t)v41 - *(_QWORD *)a2) >> 2;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v76 = v40 - (char *)v73;
            if (v76 >> 1 > v75)
              v75 = v76 >> 1;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
              v77 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v368, v77);
              v73 = *(float **)a2;
              v41 = *(float **)(a2 + 8);
            }
            else
            {
              v78 = 0;
            }
            v117 = (float *)&v78[4 * v74];
            *v117 = v39;
            v42 = v117 + 1;
            while (v41 != v73)
            {
              v118 = *((_DWORD *)v41-- - 1);
              *((_DWORD *)v117-- - 1) = v118;
            }
            v40 = &v78[4 * v77];
            *(_QWORD *)a2 = v117;
            *(_QWORD *)(a2 + 8) = v42;
            *(_QWORD *)(a2 + 16) = v40;
            if (v73)
            {
              operator delete(v73);
              v40 = *v368;
            }
          }
          else
          {
            *v41 = v39;
            v42 = v41 + 1;
          }
          *(_QWORD *)(a2 + 8) = v42;
          v119 = v392;
          if (v42 >= (float *)v40)
          {
            v121 = *(float **)a2;
            v122 = ((uint64_t)v42 - *(_QWORD *)a2) >> 2;
            v123 = v122 + 1;
            if ((unint64_t)(v122 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v124 = v40 - (char *)v121;
            if (v124 >> 1 > v123)
              v123 = v124 >> 1;
            if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL)
              v125 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v125 = v123;
            if (v125)
            {
              v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v368, v125);
              v121 = *(float **)a2;
              v42 = *(float **)(a2 + 8);
            }
            else
            {
              v126 = 0;
            }
            v127 = (float *)&v126[4 * v122];
            *v127 = v119;
            v120 = v127 + 1;
            while (v42 != v121)
            {
              v128 = *((_DWORD *)v42-- - 1);
              *((_DWORD *)v127-- - 1) = v128;
            }
            v40 = &v126[4 * v125];
            *(_QWORD *)a2 = v127;
            *(_QWORD *)(a2 + 8) = v120;
            *(_QWORD *)(a2 + 16) = v40;
            if (v121)
            {
              operator delete(v121);
              v40 = *v368;
            }
          }
          else
          {
            *v42 = v119;
            v120 = v42 + 1;
          }
          *(_QWORD *)(a2 + 8) = v120;
          v129 = v391;
          if (v120 >= (float *)v40)
          {
            v131 = *(float **)a2;
            v132 = ((uint64_t)v120 - *(_QWORD *)a2) >> 2;
            v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v134 = v40 - (char *)v131;
            if (v134 >> 1 > v133)
              v133 = v134 >> 1;
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL)
              v135 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v135 = v133;
            if (v135)
            {
              v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v368, v135);
              v131 = *(float **)a2;
              v120 = *(float **)(a2 + 8);
            }
            else
            {
              v136 = 0;
            }
            v137 = (float *)&v136[4 * v132];
            *v137 = v129;
            v130 = v137 + 1;
            while (v120 != v131)
            {
              v138 = *((_DWORD *)v120-- - 1);
              *((_DWORD *)v137-- - 1) = v138;
            }
            *(_QWORD *)a2 = v137;
            *(_QWORD *)(a2 + 8) = v130;
            *(_QWORD *)(a2 + 16) = &v136[4 * v135];
            if (v131)
              operator delete(v131);
          }
          else
          {
            *v120 = v129;
            v130 = v120 + 1;
          }
          v9 = v23;
          *(_QWORD *)(a2 + 8) = v130;
          if (!a3[1])
            goto LABEL_325;
          if (!(_DWORD)v23)
          {
            memset(&__str, 0, sizeof(__str));
            memset(&v397, 0, sizeof(v397));
            memset(&v375, 0, sizeof(v375));
            v144 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, (uint64_t)&__str);
            v145 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v144, (uint64_t)&v397);
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v145, (uint64_t)&v375);
            v146 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v146 = __str.__r_.__value_.__l.__size_;
            if (!v146)
              goto LABEL_308;
            v147 = HIBYTE(v397.__r_.__value_.__r.__words[2]);
            if ((v397.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v147 = v397.__r_.__value_.__l.__size_;
            if (!v147)
              goto LABEL_308;
            v148 = HIBYTE(v375.__r_.__value_.__r.__words[2]);
            if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v148 = v375.__r_.__value_.__l.__size_;
            if (v148)
            {
              v149 = std::stof(&__str, 0);
              v150 = v149;
              v152 = *(float **)(a2 + 32);
              v151 = *(_QWORD *)(a2 + 40);
              if ((unint64_t)v152 >= v151)
              {
                v227 = (float *)*v356;
                v228 = ((char *)v152 - (_BYTE *)*v356) >> 2;
                v229 = v228 + 1;
                if ((unint64_t)(v228 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v230 = v151 - (_QWORD)v227;
                if (v230 >> 1 > v229)
                  v229 = v230 >> 1;
                if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL)
                  v231 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v231 = v229;
                if (v231)
                {
                  v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v355, v231);
                  v227 = *(float **)(a2 + 24);
                  v152 = *(float **)(a2 + 32);
                }
                else
                {
                  v232 = 0;
                }
                v238 = (float *)&v232[4 * v228];
                *v238 = v150;
                v153 = v238 + 1;
                while (v152 != v227)
                {
                  v239 = *((_DWORD *)v152-- - 1);
                  *((_DWORD *)v238-- - 1) = v239;
                }
                *(_QWORD *)(a2 + 24) = v238;
                *(_QWORD *)(a2 + 32) = v153;
                *(_QWORD *)(a2 + 40) = &v232[4 * v231];
                if (v227)
                  operator delete(v227);
              }
              else
              {
                *v152 = v149;
                v153 = v152 + 1;
              }
              *(_QWORD *)(a2 + 32) = v153;
              v240 = std::stof(&v397, 0);
              v241 = v240;
              v243 = *(float **)(a2 + 32);
              v242 = *(_QWORD *)(a2 + 40);
              if ((unint64_t)v243 >= v242)
              {
                v245 = (float *)*v356;
                v246 = ((char *)v243 - (_BYTE *)*v356) >> 2;
                v247 = v246 + 1;
                if ((unint64_t)(v246 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v248 = v242 - (_QWORD)v245;
                if (v248 >> 1 > v247)
                  v247 = v248 >> 1;
                if ((unint64_t)v248 >= 0x7FFFFFFFFFFFFFFCLL)
                  v249 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v249 = v247;
                if (v249)
                {
                  v250 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v355, v249);
                  v245 = *(float **)(a2 + 24);
                  v243 = *(float **)(a2 + 32);
                }
                else
                {
                  v250 = 0;
                }
                v251 = (float *)&v250[4 * v246];
                *v251 = v241;
                v244 = v251 + 1;
                while (v243 != v245)
                {
                  v252 = *((_DWORD *)v243-- - 1);
                  *((_DWORD *)v251-- - 1) = v252;
                }
                *(_QWORD *)(a2 + 24) = v251;
                *(_QWORD *)(a2 + 32) = v244;
                *(_QWORD *)(a2 + 40) = &v250[4 * v249];
                if (v245)
                  operator delete(v245);
              }
              else
              {
                *v243 = v240;
                v244 = v243 + 1;
              }
              *(_QWORD *)(a2 + 32) = v244;
              v253 = std::stof(&v375, 0);
              v254 = v253;
              v256 = *(float **)(a2 + 32);
              v255 = *(_QWORD *)(a2 + 40);
              if ((unint64_t)v256 >= v255)
              {
                v258 = (float *)*v356;
                v259 = ((char *)v256 - (_BYTE *)*v356) >> 2;
                v260 = v259 + 1;
                if ((unint64_t)(v259 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v261 = v255 - (_QWORD)v258;
                if (v261 >> 1 > v260)
                  v260 = v261 >> 1;
                if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFFCLL)
                  v262 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v262 = v260;
                if (v262)
                {
                  v263 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v355, v262);
                  v258 = *(float **)(a2 + 24);
                  v256 = *(float **)(a2 + 32);
                }
                else
                {
                  v263 = 0;
                }
                v264 = (float *)&v263[4 * v259];
                *v264 = v254;
                v257 = v264 + 1;
                while (v256 != v258)
                {
                  v265 = *((_DWORD *)v256-- - 1);
                  *((_DWORD *)v264-- - 1) = v265;
                }
                *(_QWORD *)(a2 + 24) = v264;
                *(_QWORD *)(a2 + 32) = v257;
                *(_QWORD *)(a2 + 40) = &v263[4 * v262];
                if (v258)
                  operator delete(v258);
              }
              else
              {
                *v256 = v253;
                v257 = v256 + 1;
              }
              *(_QWORD *)(a2 + 32) = v257;
              v9 = 1;
            }
            else
            {
LABEL_308:
              v9 = 2;
            }
            if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v375.__r_.__value_.__l.__data_);
            if (SHIBYTE(v397.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v397.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            goto LABEL_325;
          }
          if ((_DWORD)v23 != 1)
            goto LABEL_325;
          v139 = MEMORY[0x242620F3C](v377, (char *)&v390 + 4);
          v140 = MEMORY[0x242620F3C](v139, &v390);
          MEMORY[0x242620F3C](v140, (char *)&v389 + 4);
          v142 = *(char **)(a2 + 32);
          v141 = *(char **)(a2 + 40);
          if (v142 < v141)
          {
            *(_DWORD *)v142 = HIDWORD(v390);
            v143 = v142 + 4;
            goto LABEL_337;
          }
          v200 = (char *)*v356;
          v201 = (v142 - (_BYTE *)*v356) >> 2;
          v202 = v201 + 1;
          if (!((unint64_t)(v201 + 1) >> 62))
          {
            v203 = v141 - v200;
            if (v203 >> 1 > v202)
              v202 = v203 >> 1;
            if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
              v204 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v204 = v202;
            if (v204)
            {
              v205 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v355, v204);
              v200 = *(char **)(a2 + 24);
              v142 = *(char **)(a2 + 32);
            }
            else
            {
              v205 = 0;
            }
            v207 = &v205[4 * v201];
            *(_DWORD *)v207 = HIDWORD(v390);
            v143 = v207 + 4;
            while (v142 != v200)
            {
              v208 = *((_DWORD *)v142 - 1);
              v142 -= 4;
              *((_DWORD *)v207 - 1) = v208;
              v207 -= 4;
            }
            v141 = &v205[4 * v204];
            *(_QWORD *)(a2 + 24) = v207;
            *(_QWORD *)(a2 + 32) = v143;
            *(_QWORD *)(a2 + 40) = v141;
            if (v200)
            {
              operator delete(v200);
              v141 = *v355;
            }
LABEL_337:
            *(_QWORD *)(a2 + 32) = v143;
            if (v143 < v141)
            {
              *(_DWORD *)v143 = v390;
              v209 = v143 + 4;
              goto LABEL_353;
            }
            v210 = (char *)*v356;
            v211 = (v143 - (_BYTE *)*v356) >> 2;
            v212 = v211 + 1;
            if (!((unint64_t)(v211 + 1) >> 62))
            {
              v213 = v141 - v210;
              if (v213 >> 1 > v212)
                v212 = v213 >> 1;
              if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL)
                v214 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v214 = v212;
              if (v214)
              {
                v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v355, v214);
                v210 = *(char **)(a2 + 24);
                v143 = *(char **)(a2 + 32);
              }
              else
              {
                v215 = 0;
              }
              v216 = &v215[4 * v211];
              *(_DWORD *)v216 = v390;
              v209 = v216 + 4;
              while (v143 != v210)
              {
                v217 = *((_DWORD *)v143 - 1);
                v143 -= 4;
                *((_DWORD *)v216 - 1) = v217;
                v216 -= 4;
              }
              v141 = &v215[4 * v214];
              *(_QWORD *)(a2 + 24) = v216;
              *(_QWORD *)(a2 + 32) = v209;
              *(_QWORD *)(a2 + 40) = v141;
              if (v210)
              {
                operator delete(v210);
                v141 = *v355;
              }
LABEL_353:
              *(_QWORD *)(a2 + 32) = v209;
              if (v209 < v141)
              {
                *(_DWORD *)v209 = HIDWORD(v389);
                v218 = v209 + 4;
LABEL_369:
                *(_QWORD *)(a2 + 32) = v218;
                v9 = 1;
                goto LABEL_325;
              }
              v219 = (char *)*v356;
              v220 = (v209 - (_BYTE *)*v356) >> 2;
              v221 = v220 + 1;
              if (!((unint64_t)(v220 + 1) >> 62))
              {
                v222 = v141 - v219;
                if (v222 >> 1 > v221)
                  v221 = v222 >> 1;
                if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFFCLL)
                  v223 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v223 = v221;
                if (v223)
                {
                  v224 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v355, v223);
                  v219 = *(char **)(a2 + 24);
                  v209 = *(char **)(a2 + 32);
                }
                else
                {
                  v224 = 0;
                }
                v225 = &v224[4 * v220];
                *(_DWORD *)v225 = HIDWORD(v389);
                v218 = v225 + 4;
                while (v209 != v219)
                {
                  v226 = *((_DWORD *)v209 - 1);
                  v209 -= 4;
                  *((_DWORD *)v225 - 1) = v226;
                  v225 -= 4;
                }
                *(_QWORD *)(a2 + 24) = v225;
                *(_QWORD *)(a2 + 32) = v218;
                *(_QWORD *)(a2 + 40) = &v224[4 * v223];
                if (v219)
                  operator delete(v219);
                goto LABEL_369;
              }
            }
          }
LABEL_580:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if (memcmp(v29, "f", 1uLL))
          goto LABEL_39;
        if (a4)
        {
          for (i = 0; i != 18; i += 3)
          {
            v50 = &v404[i / 3];
            if (SHIBYTE(v404[0].__r_.__value_.__r.__words[i + 2]) < 0)
            {
              v50->__r_.__value_.__l.__size_ = 0;
              v50 = (std::string *)v50->__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v50->__r_.__value_.__s + 23) = 0;
            }
            v50->__r_.__value_.__s.__data_[0] = 0;
          }
          v51 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, (uint64_t)v404);
          v52 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v51, (uint64_t)&v404[1]);
          v53 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v52, (uint64_t)v405);
          v54 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v53, (uint64_t)&v405[1] + 8);
          v55 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v54, (uint64_t)&v406);
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, (uint64_t)&v407 + 8);
          v56 = 0;
          v382 = 6;
          v57 = v404;
          v58 = v402;
          while (1)
          {
            if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
            {
              if (!v57->__r_.__value_.__l.__size_)
              {
LABEL_237:
                v382 = v56;
LABEL_238:
                if ((int)v56 >= 3)
                {
                  v154 = 0;
                  v155 = 0;
LABEL_240:
                  while (2)
                  {
                    v156 = v154;
                    while ((int)v56 > ++v156)
                    {
                      if (*((_DWORD *)v402 + 3 * v154) == *((_DWORD *)v402 + 3 * v156))
                      {
                        ++v154;
                        v155 = 1;
                        if ((int)v56 > v154)
                          goto LABEL_240;
                        goto LABEL_39;
                      }
                    }
                    if ((int)v56 > ++v154)
                      continue;
                    break;
                  }
                  if ((v155 & 1) == 0)
                  {
                    v157 = 0;
                    do
                    {
                      v158 = *((_DWORD *)v402 + 3 * v157) - 1;
                      v160 = *(int **)(a2 + 56);
                      v159 = *(_QWORD *)(a2 + 64);
                      if ((unint64_t)v160 >= v159)
                      {
                        v162 = (int *)*v367;
                        v163 = ((char *)v160 - (_BYTE *)*v367) >> 2;
                        v164 = v163 + 1;
                        if ((unint64_t)(v163 + 1) >> 62)
                          std::vector<std::string>::__throw_length_error[abi:ne180100]();
                        v165 = v159 - (_QWORD)v162;
                        if (v165 >> 1 > v164)
                          v164 = v165 >> 1;
                        if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                          v166 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v166 = v164;
                        if (v166)
                        {
                          v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v360, v166);
                          v162 = *(int **)(a2 + 48);
                          v160 = *(int **)(a2 + 56);
                        }
                        else
                        {
                          v167 = 0;
                        }
                        v168 = (int *)&v167[4 * v163];
                        *v168 = v158;
                        v161 = v168 + 1;
                        while (v160 != v162)
                        {
                          v169 = *--v160;
                          *--v168 = v169;
                        }
                        *(_QWORD *)(a2 + 48) = v168;
                        *(_QWORD *)(a2 + 56) = v161;
                        *(_QWORD *)(a2 + 64) = &v167[4 * v166];
                        if (v162)
                          operator delete(v162);
                      }
                      else
                      {
                        *v160 = v158;
                        v161 = v160 + 1;
                      }
                      *(_QWORD *)(a2 + 56) = v161;
                      v170 = *((_DWORD *)v402 + 3 * v157 + 1);
                      if (v170 != -1)
                      {
                        v171 = v170 - 1;
                        v173 = *(char **)(a2 + 80);
                        v172 = *(_QWORD *)(a2 + 88);
                        if ((unint64_t)v173 >= v172)
                        {
                          v175 = (char *)*v362;
                          v176 = (v173 - (_BYTE *)*v362) >> 2;
                          v177 = v176 + 1;
                          if ((unint64_t)(v176 + 1) >> 62)
                            std::vector<std::string>::__throw_length_error[abi:ne180100]();
                          v178 = v172 - (_QWORD)v175;
                          if (v178 >> 1 > v177)
                            v177 = v178 >> 1;
                          if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
                            v179 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v179 = v177;
                          if (v179)
                          {
                            v180 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v358, v179);
                            v175 = *(char **)(a2 + 72);
                            v173 = *(char **)(a2 + 80);
                          }
                          else
                          {
                            v180 = 0;
                          }
                          v181 = &v180[4 * v176];
                          *(_DWORD *)v181 = v171;
                          v174 = v181 + 4;
                          while (v173 != v175)
                          {
                            v182 = *((_DWORD *)v173 - 1);
                            v173 -= 4;
                            *((_DWORD *)v181 - 1) = v182;
                            v181 -= 4;
                          }
                          *(_QWORD *)(a2 + 72) = v181;
                          *(_QWORD *)(a2 + 80) = v174;
                          *(_QWORD *)(a2 + 88) = &v180[4 * v179];
                          if (v175)
                            operator delete(v175);
                        }
                        else
                        {
                          *(_DWORD *)v173 = v171;
                          v174 = v173 + 4;
                        }
                        *(_QWORD *)(a2 + 80) = v174;
                      }
                      v183 = *((_DWORD *)v402 + 3 * v157 + 2);
                      if (v183 != -1)
                      {
                        v184 = v183 - 1;
                        v186 = *(char **)(a2 + 104);
                        v185 = *(_QWORD *)(a2 + 112);
                        if ((unint64_t)v186 >= v185)
                        {
                          v188 = (char *)*v361;
                          v189 = (v186 - (_BYTE *)*v361) >> 2;
                          v190 = v189 + 1;
                          if ((unint64_t)(v189 + 1) >> 62)
                            std::vector<std::string>::__throw_length_error[abi:ne180100]();
                          v191 = v185 - (_QWORD)v188;
                          if (v191 >> 1 > v190)
                            v190 = v191 >> 1;
                          if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                            v192 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v192 = v190;
                          if (v192)
                          {
                            v193 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v357, v192);
                            v188 = *(char **)(a2 + 96);
                            v186 = *(char **)(a2 + 104);
                          }
                          else
                          {
                            v193 = 0;
                          }
                          v194 = &v193[4 * v189];
                          *(_DWORD *)v194 = v184;
                          v187 = v194 + 4;
                          while (v186 != v188)
                          {
                            v195 = *((_DWORD *)v186 - 1);
                            v186 -= 4;
                            *((_DWORD *)v194 - 1) = v195;
                            v194 -= 4;
                          }
                          *(_QWORD *)(a2 + 96) = v194;
                          *(_QWORD *)(a2 + 104) = v187;
                          *(_QWORD *)(a2 + 112) = &v193[4 * v192];
                          if (v188)
                            operator delete(v188);
                        }
                        else
                        {
                          *(_DWORD *)v186 = v184;
                          v187 = v186 + 4;
                        }
                        *(_QWORD *)(a2 + 104) = v187;
                      }
                      ++v157;
                      v196 = v382;
                    }
                    while (v157 < v382);
                    if (*a3 && !v381 && DWORD2(v402[0]) != -1)
                    {
                      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v402;
                      if (!v401)
                        std::__throw_bad_function_call[abi:ne180100]();
                      (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v401 + 48))(v401, &__str);
                      v196 = v382;
                    }
                    v198 = *(_BYTE **)(a2 + 152);
                    v197 = *(_QWORD *)(a2 + 160);
                    if ((unint64_t)v198 >= v197)
                    {
                      v233 = *v353;
                      v351 = &v198[-*v353];
                      v234 = (unint64_t)(v351 + 1);
                      if ((uint64_t)(v351 + 1) < 0)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v235 = v197 - v233;
                      if (2 * v235 > v234)
                        v234 = 2 * v235;
                      if (v235 >= 0x3FFFFFFFFFFFFFFFLL)
                        v236 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v236 = v234;
                      if (v236)
                      {
                        v350 = v236;
                        v237 = (char *)operator new(v236);
                        v236 = v350;
                      }
                      else
                      {
                        v237 = 0;
                      }
                      v317 = &v351[(_QWORD)v237];
                      v351[(_QWORD)v237] = v196;
                      v199 = (uint64_t)&v351[(_QWORD)v237 + 1];
                      if (v198 == (_BYTE *)v233)
                      {
                        v9 = v23;
                      }
                      else
                      {
                        v318 = &v198[~v233];
                        v9 = v23;
                        do
                        {
                          v319 = *--v198;
                          (v318--)[(_QWORD)v237] = v319;
                        }
                        while (v198 != (_BYTE *)v233);
                        v198 = (_BYTE *)*v353;
                        v317 = v237;
                      }
                      *(_QWORD *)(a2 + 144) = v317;
                      *(_QWORD *)(a2 + 152) = v199;
                      *(_QWORD *)(a2 + 160) = &v237[v236];
                      if (v198)
                      {
                        v320 = (uint64_t)&v351[(_QWORD)v237 + 1];
                        operator delete(v198);
                        v199 = v320;
                      }
                    }
                    else
                    {
                      *v198 = v196;
                      v199 = (uint64_t)(v198 + 1);
                      v9 = v23;
                    }
                    *(_QWORD *)(a2 + 152) = v199;
                    v322 = *(_WORD **)(a2 + 128);
                    v321 = *(_QWORD *)(a2 + 136);
                    if ((unint64_t)v322 >= v321)
                    {
                      v324 = (_WORD *)*v354;
                      v325 = (uint64_t)v322 - *v354;
                      if (v325 <= -3)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      v326 = v325 >> 1;
                      v327 = v321 - (_QWORD)v324;
                      if (v327 <= (v325 >> 1) + 1)
                        v328 = v326 + 1;
                      else
                        v328 = v327;
                      if (v327 >= 0x7FFFFFFFFFFFFFFELL)
                        v329 = 0x7FFFFFFFFFFFFFFFLL;
                      else
                        v329 = v328;
                      if (v329)
                      {
                        v330 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v352, v329);
                        v324 = *(_WORD **)(a2 + 120);
                        v322 = *(_WORD **)(a2 + 128);
                      }
                      else
                      {
                        v330 = 0;
                      }
                      v331 = &v330[2 * v326];
                      *(_WORD *)v331 = __val;
                      v323 = v331 + 2;
                      while (v322 != v324)
                      {
                        v332 = *--v322;
                        *((_WORD *)v331 - 1) = v332;
                        v331 -= 2;
                      }
                      *(_QWORD *)(a2 + 120) = v331;
                      *(_QWORD *)(a2 + 128) = v323;
                      *(_QWORD *)(a2 + 136) = &v330[2 * v329];
                      if (v324)
                        operator delete(v324);
                    }
                    else
                    {
                      *v322 = __val;
                      v323 = v322 + 1;
                    }
                    *(_QWORD *)(a2 + 128) = v323;
                    goto LABEL_325;
                  }
                }
LABEL_39:
                v9 = v23;
                goto LABEL_325;
              }
            }
            else if (!*((_BYTE *)&v57->__r_.__value_.__s + 23))
            {
              goto LABEL_237;
            }
            *(_QWORD *)v58 = __str.__r_.__value_.__r.__words[0];
            *((_DWORD *)v58 + 2) = __str.__r_.__value_.__r.__words[1];
            ++v56;
            ++v57;
            v58 = (_OWORD *)((char *)v58 + 12);
            if (v56 == 6)
            {
              LODWORD(v56) = v382;
              goto LABEL_238;
            }
          }
        }
        v9 = v23;
        v79 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, (uint64_t)&v386);
        v80 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v79, (uint64_t)&v385);
        v81 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v80, (uint64_t)&v384);
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v81, (uint64_t)&v383);
        *(_QWORD *)&v409 = __str.__r_.__value_.__r.__words[0];
        DWORD2(v409) = __str.__r_.__value_.__r.__words[1];
        *(_QWORD *)((unint64_t)&v409 | 0xC) = __str.__r_.__value_.__r.__words[0];
        *(_DWORD *)(((unint64_t)&v409 | 0xC) + 8) = __str.__r_.__value_.__r.__words[1];
        *((_QWORD *)&v410 + 1) = __str.__r_.__value_.__r.__words[0];
        LODWORD(v411) = __str.__r_.__value_.__r.__words[1];
        if ((_DWORD)v409 != HIDWORD(v409) && HIDWORD(v409) != DWORD2(v410) && DWORD2(v410) != (_DWORD)v409)
        {
          v82 = HIBYTE(v383.__r_.__value_.__r.__words[2]);
          if ((v383.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v82 = v383.__r_.__value_.__l.__size_;
          if (v82)
          {
            *(_QWORD *)((char *)&v411 + 4) = __str.__r_.__value_.__r.__words[0];
            HIDWORD(v411) = __str.__r_.__value_.__r.__words[1];
            if ((_DWORD)v409 == LODWORD(__str.__r_.__value_.__l.__data_)
              || HIDWORD(v409) == DWORD1(v411)
              || DWORD2(v410) == DWORD1(v411))
            {
              goto LABEL_325;
            }
            *(_QWORD *)v412 = v409;
            *(_DWORD *)&v412[8] = DWORD2(v409);
            *(_QWORD *)&v412[12] = *((_QWORD *)&v410 + 1);
            *(_DWORD *)&v412[20] = v411;
            v382 = 6;
            if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
            {
              v383.__r_.__value_.__l.__size_ = 0;
              v83 = (std::string *)v383.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v383.__r_.__value_.__s + 23) = 0;
              v83 = &v383;
            }
            v83->__r_.__value_.__s.__data_[0] = 0;
          }
          if (v382 >= 1)
          {
            for (j = 0; j < v382; ++j)
            {
              v267 = *((_DWORD *)&v409 + 3 * j) - 1;
              v269 = *(int **)(a2 + 56);
              v268 = *(_QWORD *)(a2 + 64);
              if ((unint64_t)v269 >= v268)
              {
                v271 = (int *)*v367;
                v272 = ((char *)v269 - (_BYTE *)*v367) >> 2;
                v273 = v272 + 1;
                if ((unint64_t)(v272 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v274 = v268 - (_QWORD)v271;
                if (v274 >> 1 > v273)
                  v273 = v274 >> 1;
                if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
                  v275 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v275 = v273;
                if (v275)
                {
                  v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v360, v275);
                  v271 = *(int **)(a2 + 48);
                  v269 = *(int **)(a2 + 56);
                }
                else
                {
                  v276 = 0;
                }
                v277 = (int *)&v276[4 * v272];
                *v277 = v267;
                v270 = v277 + 1;
                v9 = v23;
                while (v269 != v271)
                {
                  v278 = *--v269;
                  *--v277 = v278;
                }
                *(_QWORD *)(a2 + 48) = v277;
                *(_QWORD *)(a2 + 56) = v270;
                *(_QWORD *)(a2 + 64) = &v276[4 * v275];
                if (v271)
                  operator delete(v271);
              }
              else
              {
                *v269 = v267;
                v270 = v269 + 1;
                v9 = v23;
              }
              *(_QWORD *)(a2 + 56) = v270;
              v279 = *((_DWORD *)&v409 + 3 * j + 1);
              if (v279 != -1)
              {
                v280 = v279 - 1;
                v282 = *(char **)(a2 + 80);
                v281 = *(_QWORD *)(a2 + 88);
                if ((unint64_t)v282 >= v281)
                {
                  v284 = (char *)*v362;
                  v285 = (v282 - (_BYTE *)*v362) >> 2;
                  v286 = v285 + 1;
                  if ((unint64_t)(v285 + 1) >> 62)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  v287 = v281 - (_QWORD)v284;
                  if (v287 >> 1 > v286)
                    v286 = v287 >> 1;
                  if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL)
                    v288 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v288 = v286;
                  if (v288)
                  {
                    v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v358, v288);
                    v284 = *(char **)(a2 + 72);
                    v282 = *(char **)(a2 + 80);
                  }
                  else
                  {
                    v289 = 0;
                  }
                  v290 = &v289[4 * v285];
                  *(_DWORD *)v290 = v280;
                  v283 = v290 + 4;
                  v9 = v23;
                  while (v282 != v284)
                  {
                    v291 = *((_DWORD *)v282 - 1);
                    v282 -= 4;
                    *((_DWORD *)v290 - 1) = v291;
                    v290 -= 4;
                  }
                  *(_QWORD *)(a2 + 72) = v290;
                  *(_QWORD *)(a2 + 80) = v283;
                  *(_QWORD *)(a2 + 88) = &v289[4 * v288];
                  if (v284)
                    operator delete(v284);
                }
                else
                {
                  *(_DWORD *)v282 = v280;
                  v283 = v282 + 4;
                  v9 = v23;
                }
                *(_QWORD *)(a2 + 80) = v283;
              }
              v292 = *((_DWORD *)&v409 + 3 * j + 2);
              if (v292 != -1)
              {
                v293 = v292 - 1;
                v295 = *(char **)(a2 + 104);
                v294 = *(_QWORD *)(a2 + 112);
                if ((unint64_t)v295 >= v294)
                {
                  v297 = (char *)*v361;
                  v298 = (v295 - (_BYTE *)*v361) >> 2;
                  v299 = v298 + 1;
                  if ((unint64_t)(v298 + 1) >> 62)
                    std::vector<std::string>::__throw_length_error[abi:ne180100]();
                  v300 = v294 - (_QWORD)v297;
                  if (v300 >> 1 > v299)
                    v299 = v300 >> 1;
                  if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFFCLL)
                    v301 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v301 = v299;
                  if (v301)
                  {
                    v302 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v357, v301);
                    v297 = *(char **)(a2 + 96);
                    v295 = *(char **)(a2 + 104);
                  }
                  else
                  {
                    v302 = 0;
                  }
                  v303 = &v302[4 * v298];
                  *(_DWORD *)v303 = v293;
                  v296 = v303 + 4;
                  v9 = v23;
                  while (v295 != v297)
                  {
                    v304 = *((_DWORD *)v295 - 1);
                    v295 -= 4;
                    *((_DWORD *)v303 - 1) = v304;
                    v303 -= 4;
                  }
                  *(_QWORD *)(a2 + 96) = v303;
                  *(_QWORD *)(a2 + 104) = v296;
                  *(_QWORD *)(a2 + 112) = &v302[4 * v301];
                  if (v297)
                    operator delete(v297);
                }
                else
                {
                  *(_DWORD *)v295 = v293;
                  v296 = v295 + 4;
                  v9 = v23;
                }
                *(_QWORD *)(a2 + 104) = v296;
              }
            }
          }
          if (*a3 && !v381 && DWORD2(v409) != -1)
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v409;
            if (!v401)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v401 + 48))(v401, &__str);
          }
          v306 = *(_WORD **)(a2 + 128);
          v305 = *(_QWORD *)(a2 + 136);
          if ((unint64_t)v306 >= v305)
          {
            v308 = (_WORD *)*v354;
            v309 = (uint64_t)v306 - *v354;
            if (v309 <= -3)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v310 = v309 >> 1;
            v311 = v305 - (_QWORD)v308;
            if (v311 <= (v309 >> 1) + 1)
              v312 = v310 + 1;
            else
              v312 = v311;
            if (v311 >= 0x7FFFFFFFFFFFFFFELL)
              v313 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v313 = v312;
            if (v313)
            {
              v314 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v352, v313);
              v308 = *(_WORD **)(a2 + 120);
              v306 = *(_WORD **)(a2 + 128);
            }
            else
            {
              v314 = 0;
            }
            v315 = &v314[2 * v310];
            *(_WORD *)v315 = __val;
            v307 = v315 + 2;
            while (v306 != v308)
            {
              v316 = *--v306;
              *((_WORD *)v315 - 1) = v316;
              v315 -= 2;
            }
            *(_QWORD *)(a2 + 120) = v315;
            *(_QWORD *)(a2 + 128) = v307;
            *(_QWORD *)(a2 + 136) = &v314[2 * v313];
            if (v308)
              operator delete(v308);
          }
          else
          {
            *v306 = __val;
            v307 = v306 + 1;
          }
          *(_QWORD *)(a2 + 128) = v307;
          if (v382 == 6)
          {
            LOWORD(__str.__r_.__value_.__l.__data_) = __val;
            std::vector<unsigned short>::push_back[abi:ne180100]((uint64_t)v354, &__str);
          }
          v382 = 3;
        }
LABEL_325:
        v14 = HIBYTE(v399);
        break;
      case 2:
        v23 = v9;
        if (v399 >= 0)
          v24 = &v398;
        else
          v24 = (__int128 *)v398;
        if (!memcmp(v24, "vn", 2uLL))
        {
          v30 = MEMORY[0x242620F3C](v377, &v389);
          v31 = MEMORY[0x242620F3C](v30, (char *)&v388 + 4);
          MEMORY[0x242620F3C](v31, &v388);
          v33 = *(char **)(a2 + 176);
          v32 = *(char **)(a2 + 184);
          if (v33 >= v32)
          {
            v43 = (char *)*v369;
            v44 = (v33 - (_BYTE *)*v369) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
              goto LABEL_580;
            v46 = v32 - v43;
            if (v46 >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v370, v47);
              v43 = *(char **)(a2 + 168);
              v33 = *(char **)(a2 + 176);
            }
            else
            {
              v48 = 0;
            }
            v84 = &v48[4 * v44];
            *(_DWORD *)v84 = v389;
            v34 = v84 + 4;
            while (v33 != v43)
            {
              v85 = *((_DWORD *)v33 - 1);
              v33 -= 4;
              *((_DWORD *)v84 - 1) = v85;
              v84 -= 4;
            }
            v32 = &v48[4 * v47];
            *(_QWORD *)(a2 + 168) = v84;
            *(_QWORD *)(a2 + 176) = v34;
            *(_QWORD *)(a2 + 184) = v32;
            if (v43)
            {
              operator delete(v43);
              v32 = *v370;
            }
          }
          else
          {
            *(_DWORD *)v33 = v389;
            v34 = v33 + 4;
          }
          *(_QWORD *)(a2 + 176) = v34;
          if (v34 >= v32)
          {
            v87 = (char *)*v369;
            v88 = (v34 - (_BYTE *)*v369) >> 2;
            v89 = v88 + 1;
            if ((unint64_t)(v88 + 1) >> 62)
              goto LABEL_580;
            v90 = v32 - v87;
            if (v90 >> 1 > v89)
              v89 = v90 >> 1;
            if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
              v91 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v91 = v89;
            if (v91)
            {
              v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v370, v91);
              v87 = *(char **)(a2 + 168);
              v34 = *(char **)(a2 + 176);
            }
            else
            {
              v92 = 0;
            }
            v93 = &v92[4 * v88];
            *(_DWORD *)v93 = HIDWORD(v388);
            v86 = v93 + 4;
            while (v34 != v87)
            {
              v94 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v93 - 1) = v94;
              v93 -= 4;
            }
            v32 = &v92[4 * v91];
            *(_QWORD *)(a2 + 168) = v93;
            *(_QWORD *)(a2 + 176) = v86;
            *(_QWORD *)(a2 + 184) = v32;
            if (v87)
            {
              operator delete(v87);
              v32 = *v370;
            }
          }
          else
          {
            *(_DWORD *)v34 = HIDWORD(v388);
            v86 = v34 + 4;
          }
          *(_QWORD *)(a2 + 176) = v86;
          if (v86 >= v32)
          {
            v96 = (char *)*v369;
            v97 = (v86 - (_BYTE *)*v369) >> 2;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 62)
              goto LABEL_580;
            v99 = v32 - v96;
            if (v99 >> 1 > v98)
              v98 = v99 >> 1;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v370, v100);
              v96 = *(char **)(a2 + 168);
              v86 = *(char **)(a2 + 176);
            }
            else
            {
              v101 = 0;
            }
            v102 = &v101[4 * v97];
            *(_DWORD *)v102 = v388;
            v95 = v102 + 4;
            while (v86 != v96)
            {
              v103 = *((_DWORD *)v86 - 1);
              v86 -= 4;
              *((_DWORD *)v102 - 1) = v103;
              v102 -= 4;
            }
            *(_QWORD *)(a2 + 168) = v102;
            *(_QWORD *)(a2 + 176) = v95;
            *(_QWORD *)(a2 + 184) = &v101[4 * v100];
            if (v96)
              operator delete(v96);
          }
          else
          {
            *(_DWORD *)v86 = v388;
            v95 = v86 + 4;
          }
          v9 = v23;
          *(_QWORD *)(a2 + 176) = v95;
          goto LABEL_325;
        }
        if (*(_WORD *)v24 != 29814)
          goto LABEL_39;
        v25 = MEMORY[0x242620F3C](v377, (char *)&v387 + 4);
        v9 = v23;
        MEMORY[0x242620F3C](v25, &v387);
        v27 = *(char **)(a2 + 200);
        v26 = *(char **)(a2 + 208);
        if (v27 >= v26)
        {
          v67 = (char *)*v365;
          v68 = (v27 - (_BYTE *)*v365) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            goto LABEL_580;
          v70 = v26 - v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v363, v71);
            v67 = *(char **)(a2 + 192);
            v27 = *(char **)(a2 + 200);
          }
          else
          {
            v72 = 0;
          }
          v106 = &v72[4 * v68];
          *(_DWORD *)v106 = HIDWORD(v387);
          v28 = v106 + 4;
          while (v27 != v67)
          {
            v107 = *((_DWORD *)v27 - 1);
            v27 -= 4;
            *((_DWORD *)v106 - 1) = v107;
            v106 -= 4;
          }
          v26 = &v72[4 * v71];
          *(_QWORD *)(a2 + 192) = v106;
          *(_QWORD *)(a2 + 200) = v28;
          *(_QWORD *)(a2 + 208) = v26;
          if (v67)
          {
            operator delete(v67);
            v26 = *v363;
          }
        }
        else
        {
          *(_DWORD *)v27 = HIDWORD(v387);
          v28 = v27 + 4;
        }
        *(_QWORD *)(a2 + 200) = v28;
        if (v28 >= v26)
        {
          v109 = (char *)*v365;
          v110 = (v28 - (_BYTE *)*v365) >> 2;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62)
            goto LABEL_580;
          v112 = v26 - v109;
          if (v112 >> 1 > v111)
            v111 = v112 >> 1;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
            v113 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v363, v113);
            v109 = *(char **)(a2 + 192);
            v28 = *(char **)(a2 + 200);
          }
          else
          {
            v114 = 0;
          }
          v115 = &v114[4 * v110];
          *(_DWORD *)v115 = v387;
          v108 = v115 + 4;
          while (v28 != v109)
          {
            v116 = *((_DWORD *)v28 - 1);
            v28 -= 4;
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }
          *(_QWORD *)(a2 + 192) = v115;
          *(_QWORD *)(a2 + 200) = v108;
          *(_QWORD *)(a2 + 208) = &v114[4 * v113];
          if (v109)
            operator delete(v109);
        }
        else
        {
          *(_DWORD *)v28 = v387;
          v108 = v28 + 4;
        }
        *(_QWORD *)(a2 + 200) = v108;
        goto LABEL_325;
      case 6:
        if (v399 >= 0)
          v16 = &v398;
        else
          v16 = (__int128 *)v398;
        if (*(_DWORD *)v16 == 1819047021 && *((_WORD *)v16 + 2) == 25193)
        {
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, a2 + 264);
        }
        else if (!memcmp(v16, "usemtl", 6uLL))
        {
          if (v371 != 1)
          {
            std::to_string(&__str, ++__val);
            v18 = std::string::insert(&__str, 0, "group_", 6uLL);
            v19 = v18->__r_.__value_.__r.__words[0];
            v397.__r_.__value_.__r.__words[0] = v18->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v397.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
            v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = v19;
            __p.__r_.__value_.__l.__size_ = v397.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v397.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v20;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v21 = *(_QWORD *)(a2 + 224);
            if (v21 >= *(_QWORD *)(a2 + 232))
            {
              v105 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v364, (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a2 + 224), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v21 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v21 = v22;
              }
              v105 = v21 + 24;
              *(_QWORD *)(a2 + 224) = v21 + 24;
            }
            *(_QWORD *)(a2 + 224) = v105;
          }
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v377, (uint64_t)&v394);
          LOWORD(v397.__r_.__value_.__l.__data_) = __val;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v397;
          v206 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(a2 + 240), (unsigned __int16 *)&v397, (uint64_t)&std::piecewise_construct, &__str);
          std::string::operator=((std::string *)(v206 + 5), &v394);
        }
        goto LABEL_325;
    }
    if (v14 < 0)
      operator delete((void *)v398);
    v377[0].__r_.__value_.__r.__words[0] = v10;
    *(std::string::size_type *)((char *)v377[0].__r_.__value_.__r.__words + *(_QWORD *)(v10 - 24)) = v373;
    v377[0].__r_.__value_.__r.__words[2] = v374;
    if (v379 < 0)
      operator delete(v378);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x242621128](&v380);
    v6 = *(_QWORD *)(v413[0] - 24);
  }
  if (!v371 && __val == -1)
  {
    std::to_string(v377, 0);
    v333 = std::string::insert(v377, 0, "group_", 6uLL);
    v334 = v333->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v398 = v333->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v398 + 7) = *(std::string::size_type *)((char *)&v333->__r_.__value_.__r.__words[1] + 7);
    v335 = HIBYTE(v333->__r_.__value_.__r.__words[2]);
    v333->__r_.__value_.__l.__size_ = 0;
    v333->__r_.__value_.__r.__words[2] = 0;
    v333->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v334;
    __p.__r_.__value_.__l.__size_ = v398;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v398 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v335;
    if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v377[0].__r_.__value_.__l.__data_);
    v336 = *(_QWORD *)(a2 + 224);
    if (v336 >= *(_QWORD *)(a2 + 232))
    {
      v338 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v364, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 224), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v337 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v336 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v336 = v337;
      }
      v338 = v336 + 24;
      *(_QWORD *)(a2 + 224) = v336 + 24;
    }
    *(_QWORD *)(a2 + 224) = v338;
    v339 = *(void **)(a2 + 120);
    v340 = *(_QWORD *)(a2 + 128) - (_QWORD)v339;
    v341 = v340 == 1;
    if (v340 >= 1)
    {
      v342 = (unint64_t)v340 >> 1;
      v343 = !v341;
      bzero(v339, 2 * (v342 - v343) + 2);
    }
  }
  v344 = v401;
  if (v401 == v400)
  {
    v345 = 4;
    v344 = v400;
    goto LABEL_560;
  }
  if (v401)
  {
    v345 = 5;
LABEL_560:
    (*(void (**)(void))(*v344 + 8 * v345))();
  }
  for (k = 0; k != -144; k -= 24)
  {
    if (*((char *)&v408 + k + 15) < 0)
      operator delete(*(void **)((char *)&v407 + k + 8));
  }
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v383.__r_.__value_.__l.__data_);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v386.__r_.__value_.__l.__data_);
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v396.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v396.__r_.__value_.__l.__data_);
  v413[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v413 + *(_QWORD *)(v413[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x242620F0C](v414);
  std::istream::~istream();
  MEMORY[0x242621128](v415);
  return 1;
}

void sub_23C5329D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,std::locale a52)
{
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  std::istringstream::~istringstream((uint64_t)&a52);
  v53 = (unint64_t *)STACK[0x398];
  if ((unint64_t *)STACK[0x398] == &STACK[0x380])
  {
    v54 = 4;
    v53 = &STACK[0x380];
  }
  else
  {
    if (!v53)
    {
LABEL_8:
      v55 = 0;
      while (1)
      {
        if (*((char *)&STACK[0x3F0] + v55 + 143) < 0)
          operator delete(*(void **)((char *)&STACK[0x3F0] + v55 + 120));
        v55 -= 24;
        if (v55 == -144)
        {
          if (SLOBYTE(STACK[0x287]) < 0)
            operator delete((void *)STACK[0x270]);
          if (SLOBYTE(STACK[0x29F]) < 0)
            operator delete((void *)STACK[0x288]);
          if (SLOBYTE(STACK[0x2B7]) < 0)
            operator delete((void *)STACK[0x2A0]);
          if (SLOBYTE(STACK[0x2CF]) < 0)
            operator delete((void *)STACK[0x2B8]);
          if (SLOBYTE(STACK[0x31F]) < 0)
            operator delete((void *)STACK[0x308]);
          if (SLOBYTE(STACK[0x337]) < 0)
            operator delete((void *)STACK[0x320]);
          if (SLOBYTE(STACK[0x34F]) < 0)
            operator delete((void *)STACK[0x338]);
          std::ifstream::~ifstream(&STACK[0x4C8]);
          _Unwind_Resume(a1);
        }
      }
    }
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
  goto LABEL_8;
}

uint64_t cv3d::cv::gess::io::MeshFromObjContents(uint64_t **this, std::string *a2, const cv3d::cv::gess::io::LoadObjContents *a3)
{
  return cv3d::cv::gess::io::MeshFromObjContents(this, a2, 0);
}

{
  return cv3d::cv::gess::io::MeshFromObjContents(this, a2, (const cv3d::cv::gess::io::LoadObjContents *)1);
}

{
  char v3;
  std::string::__raw *v6;
  uint64_t inited;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  std::string::pointer data;
  std::string::pointer v17;
  std::string::size_type size;
  int v19;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  std::string::pointer v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  std::string::pointer v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  std::string::pointer v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::string::pointer v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  _QWORD *v63;
  uint64_t v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t i;
  uint64_t v69;
  std::string::size_type v70;
  BOOL v71;
  uint64_t v72;
  BOOL v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  BOOL v78;
  uint64_t v79;
  BOOL v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  std::vector<unsigned int>::size_type v96;
  uint64_t v97;
  std::string::pointer v98;
  _DWORD *v99;
  std::vector<unsigned int>::size_type v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  std::string::pointer v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  std::string::pointer v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  std::vector<unsigned int>::size_type v137;
  uint64_t v138;
  std::string::pointer v139;
  _DWORD *v140;
  std::vector<unsigned int>::size_type v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int16 *v148;
  std::string::size_type v149;
  uint64_t v150;
  _WORD *v151;
  uint64_t v152;
  __int16 v153;
  char v155;
  int v156;
  void *__p[2];
  char v158;
  int v159;
  uint64_t v160;
  uint64_t v161;

  v3 = (char)a3;
  v6 = (std::string::__raw *)&a2[2];
  if ((v3 & 1) != 0)
    inited = cv3d::cv::gess::mesh::QuadMesh::InitVF((uint64_t)this, a2, v6, (uint64_t *)&a2[6]);
  else
    inited = cv3d::cv::gess::mesh::TriMesh::InitVF<float,unsigned int>((uint64_t)this, a2, (uint64_t *)v6);
  v8 = inited;
  if (a2[1].__r_.__value_.__r.__words[0] != a2[1].__r_.__value_.__l.__size_)
  {
    v159 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    v160 = 0;
    v161 = 0;
    v9 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)&v160, (unsigned __int8 *)__p);
    v159 = v9;
    if (v158 < 0)
      operator delete(__p[0]);
    if (v9 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, &v159, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v159;
    v10 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, (unsigned int *)__p);
    v11 = (((uint64_t)(a2[1].__r_.__value_.__l.__size_ - a2[1].__r_.__value_.__r.__words[0]) >> 2) / 3uLL);
    (*(void (**)(_QWORD *, uint64_t))(*v10 + 32))(v10, v11);
    if (v11)
    {
      v13 = 0;
      v14 = 2;
      do
      {
        v15 = v10[5];
        if (v13 >= (v10[6] - v15) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        data = a2[1].__r_.__value_.__l.__data_;
        LODWORD(v12) = *(_DWORD *)&data[4 * v14 - 8];
        DWORD1(v12) = *(_DWORD *)&data[4 * v14 - 4];
        DWORD2(v12) = *(_DWORD *)&data[4 * v14];
        *(_OWORD *)(v15 + 16 * v13++) = v12;
        v14 += 3;
      }
      while (v11 != v13);
    }
  }
  v17 = a2[7].__r_.__value_.__l.__data_;
  size = a2[7].__r_.__value_.__l.__size_;
  v19 = (int)a2[12].__r_.__value_.__l.__data_;
  if (v17 != (std::string::pointer)size && v19 == 1)
  {
    v159 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    v160 = 0;
    v161 = 0;
    v21 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)&v160, (unsigned __int8 *)__p);
    v159 = v21;
    if (v158 < 0)
      operator delete(__p[0]);
    if (v21 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, &v159, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v159;
    v22 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 1, (unsigned int *)__p);
    v23 = (((uint64_t)(a2[7].__r_.__value_.__l.__size_ - a2[7].__r_.__value_.__r.__words[0]) >> 2) / 3uLL);
    (*(void (**)(_QWORD *, uint64_t))(*v22 + 32))(v22, v23);
    if (v23)
    {
      v25 = 0;
      v26 = 2;
      do
      {
        v27 = v22[5];
        if (v25 >= (v22[6] - v27) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v28 = a2[7].__r_.__value_.__l.__data_;
        LODWORD(v24) = *(_DWORD *)&v28[4 * v26 - 8];
        DWORD1(v24) = *(_DWORD *)&v28[4 * v26 - 4];
        DWORD2(v24) = *(_DWORD *)&v28[4 * v26];
        *(_OWORD *)(v27 + 16 * v25++) = v24;
        v26 += 3;
      }
      while (v23 != v25);
    }
    v17 = a2[7].__r_.__value_.__l.__data_;
    size = a2[7].__r_.__value_.__l.__size_;
    v19 = (int)a2[12].__r_.__value_.__l.__data_;
  }
  if (v17 != (std::string::pointer)size && v19 == 2)
  {
    v159 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
    v160 = 0;
    v161 = 0;
    v29 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 7, (uint64_t)&v160, (unsigned __int8 *)__p);
    v159 = v29;
    if (v158 < 0)
      operator delete(__p[0]);
    if (v29 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)this, &v159, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v159;
    v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 7, (unsigned int *)__p);
    v17 = a2[7].__r_.__value_.__l.__data_;
    size = a2[7].__r_.__value_.__l.__size_;
    v32 = (((uint64_t)(size - (_QWORD)v17) >> 2) / 3uLL);
    if ((((uint64_t)(size - (_QWORD)v17) >> 2) / 3uLL))
    {
      v33 = 0;
      v34 = 2;
      do
      {
        v35 = *(_QWORD *)(v30 + 40);
        if (v33 >= (*(_QWORD *)(v30 + 48) - v35) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v36 = a2[7].__r_.__value_.__l.__data_;
        LODWORD(v31) = *(_DWORD *)&v36[4 * v34 - 8];
        DWORD1(v31) = *(_DWORD *)&v36[4 * v34 - 4];
        DWORD2(v31) = *(_DWORD *)&v36[4 * v34];
        *(_OWORD *)(v35 + 16 * v33++) = v31;
        v34 += 3;
      }
      while (v32 != v33);
      v17 = a2[7].__r_.__value_.__l.__data_;
      size = a2[7].__r_.__value_.__l.__size_;
    }
    v19 = (int)a2[12].__r_.__value_.__l.__data_;
  }
  if (v17 != (std::string::pointer)size && v19 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
    v160 = 0;
    v161 = 0;
    v37 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 10, (uint64_t)&v160, (unsigned __int8 *)__p);
    if (v158 < 0)
      operator delete(__p[0]);
    if (v37 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
      v160 = 0;
      v161 = 0;
      v37 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector3T<float>>((char **)this + 10, (uint64_t)&v160, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v37;
    v38 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)this + 10, (unsigned int *)__p);
    v39 = (((uint64_t)(a2[7].__r_.__value_.__l.__size_ - a2[7].__r_.__value_.__r.__words[0]) >> 2) / 3uLL);
    v40 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v38 + 32))(v38, v39);
    if (v39)
    {
      v44 = 0;
      v45 = 2;
      do
      {
        v46 = v38[5];
        if (v44 >= (v38[6] - v46) >> 4)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v40, v41, v42);
        v47 = a2[7].__r_.__value_.__l.__data_;
        LODWORD(v43) = *(_DWORD *)&v47[4 * v45 - 8];
        DWORD1(v43) = *(_DWORD *)&v47[4 * v45 - 4];
        DWORD2(v43) = *(_DWORD *)&v47[4 * v45];
        *(_OWORD *)(v46 + 16 * v44++) = v43;
        v45 += 3;
      }
      while (v39 != v44);
    }
  }
  if (a2[8].__r_.__value_.__r.__words[0] != a2[8].__r_.__value_.__l.__size_)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v160 = 0;
    v49 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>(this + 10, (uint64_t)&v160, (unsigned __int8 *)__p);
    if (v158 < 0)
      operator delete(__p[0]);
    if (v49 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
      v160 = 0;
      v49 = cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>((char **)this + 10, (uint64_t)&v160, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v49;
    v50 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)this + 10, (unsigned int *)__p, v48);
    v51 = a2[8].__r_.__value_.__l.__size_ - a2[8].__r_.__value_.__r.__words[0];
    v52 = (v51 >> 3);
    v53 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v50 + 32))(v50, v52);
    if ((v51 & 0x7FFFFFFF8) != 0)
    {
      v56 = 0;
      v57 = (_QWORD *)v50[5];
      v58 = (uint64_t)(v50[6] - (_QWORD)v57) >> 3;
      v59 = a2[8].__r_.__value_.__l.__data_;
      do
      {
        if (!v58)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v53, v54, v55);
        *v57++ = *(_QWORD *)&v59[4 * (v56 & 0xFFFFFFFE)];
        v56 += 2;
        --v58;
        --v52;
      }
      while (v52);
    }
  }
  if (a2[9].__r_.__value_.__r.__words[0] != a2[9].__r_.__value_.__l.__size_)
  {
    LODWORD(v160) = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    v60 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v160, (unsigned __int8 *)__p);
    v62 = v60;
    if (v158 < 0)
    {
      operator delete(__p[0]);
      if (v62)
        goto LABEL_70;
    }
    else if (v60)
    {
LABEL_70:
      LODWORD(__p[0]) = v160;
      v63 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p, v61);
      v64 = -1431655765 * ((a2[9].__r_.__value_.__l.__size_ - a2[9].__r_.__value_.__r.__words[0]) >> 3);
      v65 = (std::string *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v63 + 32))(v63, v64);
      if ((_DWORD)v64)
      {
        for (i = 0; i != v64; ++i)
        {
          v69 = v63[5];
          if (0xAAAAAAAAAAAAAAABLL * ((v63[6] - v69) >> 3) <= i)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v65, v66, v67);
          v65 = std::string::operator=((std::string *)(v69 + 24 * i), (const std::string *)(a2[9].__r_.__value_.__r.__words[0] + 24 * i));
        }
      }
      goto LABEL_74;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>((uint64_t)this, &v160, (__int128 *)__p);
    if (v158 < 0)
      operator delete(__p[0]);
    goto LABEL_70;
  }
LABEL_74:
  v70 = HIBYTE(a2[11].__r_.__value_.__r.__words[2]);
  if ((v70 & 0x80u) != 0)
    v70 = a2[11].__r_.__value_.__l.__size_;
  if (v70)
  {
    LODWORD(v160) = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_MTL_FILENAME[0]);
    v71 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>((uint64_t)this, &v160, (unsigned __int8 *)__p);
    v73 = v71;
    if (v158 < 0)
    {
      operator delete(__p[0]);
      if (v73)
      {
LABEL_83:
        LODWORD(__p[0]) = v160;
        v74 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)this + 10, (unsigned int *)__p, v72);
        (*(void (**)(_QWORD *, uint64_t))(*v74 + 32))(v74, 1);
        v77 = (std::string *)v74[5];
        if ((std::string *)v74[6] == v77)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v77, v75, v76);
        std::string::operator=(v77, a2 + 11);
        goto LABEL_85;
      }
    }
    else if (v71)
    {
      goto LABEL_83;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_MTL_FILENAME[0]);
    cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>((uint64_t)this, &v160, (__int128 *)__p);
    if (v158 < 0)
      operator delete(__p[0]);
    goto LABEL_83;
  }
LABEL_85:
  v159 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  v78 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>((uint64_t)this, &v159, (unsigned __int8 *)__p);
  v80 = v78;
  if (v158 < 0)
  {
    operator delete(__p[0]);
    if (v80)
      goto LABEL_91;
  }
  else if (v78)
  {
    goto LABEL_91;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>((uint64_t)this, &v159, (__int128 *)__p);
  if (v158 < 0)
    operator delete(__p[0]);
LABEL_91:
  LODWORD(__p[0]) = v159;
  v81 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)this + 10, (unsigned int *)__p, v79);
  (*(void (**)(_QWORD *, uint64_t))(*v81 + 32))(v81, 1);
  v84 = (uint64_t **)v81[5];
  if ((uint64_t **)v81[6] == v84)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t)v84, v82, v83);
  if (v84 != (uint64_t **)&a2[10])
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>(v84, (_QWORD *)a2[10].__r_.__value_.__l.__data_, &a2[10].__r_.__value_.__l.__size_);
  if (a2[3].__r_.__value_.__r.__words[0] != a2[3].__r_.__value_.__l.__size_)
  {
    if ((v3 & 1) != 0)
    {
      LODWORD(v160) = -1;
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
      v86 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)this, &v160, (unsigned __int8 *)__p);
      v155 = v3;
      if (v158 < 0)
        operator delete(__p[0]);
      v87 = v8;
      if (!v86)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
        cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<unsigned int>>((uint64_t)this, &v160, (__int128 *)__p);
        if (v158 < 0)
          operator delete(__p[0]);
      }
      LODWORD(__p[0]) = v160;
      v88 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p, v85);
      if (this[20] != this[19])
      {
        v91 = v88;
        v92 = 0;
        v93 = 0;
        v94 = 0;
        do
        {
          v95 = *(_QWORD *)(v91 + 40);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v91 + 48) - v95) >> 3) <= v92)
            cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v88, v89, v90);
          v96 = *(unsigned __int8 *)(a2[6].__r_.__value_.__r.__words[0] + v92);
          std::vector<int>::resize((std::vector<unsigned int> *)(v95 + 24 * v92), v96);
          if ((_DWORD)v96)
          {
            v97 = *(_QWORD *)(v91 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v91 + 48) - v97) >> 3) <= v92)
              cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v88, v89, v90);
            v98 = a2[3].__r_.__value_.__l.__data_;
            v99 = *(_DWORD **)(v97 + 24 * v92);
            v100 = v96;
            v101 = v94;
            do
            {
              *v99++ = *(_DWORD *)&v98[4 * v101++];
              --v100;
            }
            while (v100);
          }
          v94 += v96;
          v92 = ++v93;
        }
        while (v93 < (unint64_t)(((char *)this[20] - (char *)this[19]) >> 2));
      }
      v8 = v87;
      v3 = v155;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
      LODWORD(v161) = 0;
      v160 = 0;
      v103 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v160, (unsigned __int8 *)__p);
      v156 = v103;
      if (v158 < 0)
        operator delete(__p[0]);
      if (v103 == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
        cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t)this, &v156, (__int128 *)__p);
        if (v158 < 0)
          operator delete(__p[0]);
      }
      LODWORD(__p[0]) = v156;
      v104 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p, v102);
      v105 = a2[3].__r_.__value_.__l.__data_;
      v106 = (((uint64_t)(a2[3].__r_.__value_.__l.__size_ - (_QWORD)v105) >> 2) / 3uLL);
      if (v106 != ((char *)this[20] - (char *)this[19]) >> 2)
        cv3d::cv::gess::io::MeshFromObjContents();
      if ((((uint64_t)(a2[3].__r_.__value_.__l.__size_ - (_QWORD)v105) >> 2) / 3uLL))
      {
        v107 = 0;
        v108 = *(_QWORD *)(v104 + 40);
        v109 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v104 + 48) - v108) >> 2);
        v110 = 3 * v106;
        v111 = (_DWORD *)(v108 + 4);
        do
        {
          if (!v109)
            __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
          v112 = *(_DWORD *)&v105[4 * (v107 + 2)];
          v113 = *(_DWORD *)&v105[4 * (v107 + 1)];
          *(v111 - 1) = *(_DWORD *)&v105[4 * v107];
          *v111 = v113;
          v111[1] = v112;
          --v109;
          v107 += 3;
          v111 += 3;
        }
        while (v110 != v107);
      }
    }
  }
  if (a2[4].__r_.__value_.__r.__words[0] != a2[4].__r_.__value_.__l.__size_
    && LODWORD(a2[12].__r_.__value_.__l.__data_) == 3)
  {
    if ((v3 & 1) != 0)
    {
      LODWORD(v160) = -1;
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
      v114 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>((uint64_t)this, &v160, (unsigned __int8 *)__p);
      v116 = v114;
      if (v158 < 0)
      {
        operator delete(__p[0]);
        if (v116)
          goto LABEL_140;
      }
      else if (v114)
      {
LABEL_140:
        LODWORD(__p[0]) = v160;
        v129 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p, v115);
        if (this[20] != this[19])
        {
          v132 = v129;
          v133 = 0;
          v134 = 0;
          v135 = 0;
          do
          {
            v136 = *(_QWORD *)(v132 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v132 + 48) - v136) >> 3) <= v133)
              cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v129, v130, v131);
            v137 = *(unsigned __int8 *)(a2[6].__r_.__value_.__r.__words[0] + v133);
            std::vector<int>::resize((std::vector<unsigned int> *)(v136 + 24 * v133), v137);
            if ((_DWORD)v137)
            {
              v138 = *(_QWORD *)(v132 + 40);
              if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v132 + 48) - v138) >> 3) <= v133)
                cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v129, v130, v131);
              v139 = a2[4].__r_.__value_.__l.__data_;
              v140 = *(_DWORD **)(v138 + 24 * v133);
              v141 = v137;
              v142 = v135;
              do
              {
                *v140++ = *(_DWORD *)&v139[4 * v142++];
                --v141;
              }
              while (v141);
            }
            v135 += v137;
            v133 = ++v134;
          }
          while (v134 < (unint64_t)(((char *)this[20] - (char *)this[19]) >> 2));
        }
        goto LABEL_148;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<unsigned int>>((uint64_t)this, &v160, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
      goto LABEL_140;
    }
    v156 = -1;
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
    LODWORD(v161) = 0;
    v160 = 0;
    v118 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(this + 7, (uint64_t)&v160, (unsigned __int8 *)__p);
    v156 = v118;
    if (v158 < 0)
      operator delete(__p[0]);
    if (v118 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t)this, &v156, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
    }
    LODWORD(__p[0]) = v156;
    v119 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)this + 7, (unsigned int *)__p, v117);
    v120 = a2[4].__r_.__value_.__l.__data_;
    v121 = (((uint64_t)(a2[4].__r_.__value_.__l.__size_ - (_QWORD)v120) >> 2) / 3uLL);
    if (v121 != ((char *)this[20] - (char *)this[19]) >> 2)
      cv3d::cv::gess::io::MeshFromObjContents();
    if ((((uint64_t)(a2[4].__r_.__value_.__l.__size_ - (_QWORD)v120) >> 2) / 3uLL))
    {
      v122 = 0;
      v123 = *(_QWORD *)(v119 + 40);
      v124 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v119 + 48) - v123) >> 2);
      v125 = 3 * v121;
      v126 = (_DWORD *)(v123 + 4);
      do
      {
        if (!v124)
          __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
        v127 = *(_DWORD *)&v120[4 * (v122 + 2)];
        v128 = *(_DWORD *)&v120[4 * (v122 + 1)];
        *(v126 - 1) = *(_DWORD *)&v120[4 * v122];
        *v126 = v128;
        v126[1] = v127;
        --v124;
        v122 += 3;
        v126 += 3;
      }
      while (v125 != v122);
    }
  }
LABEL_148:
  if (a2[5].__r_.__value_.__r.__words[0] != a2[5].__r_.__value_.__l.__size_)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    LOWORD(v156) = 0;
    v144 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>(this + 7, (uint64_t)&v156, (unsigned __int8 *)__p);
    LODWORD(v160) = v144;
    if (v158 < 0)
      operator delete(__p[0]);
    if (v144 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
      cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>((uint64_t)this, &v160, (__int128 *)__p);
      if (v158 < 0)
        operator delete(__p[0]);
      v144 = v160;
    }
    LODWORD(__p[0]) = v144;
    v145 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)this + 7, (unsigned int *)__p, v143);
    v148 = (__int16 *)a2[5].__r_.__value_.__l.__data_;
    v149 = a2[5].__r_.__value_.__l.__size_ - (_QWORD)v148;
    v150 = (v149 >> 1);
    if (v150 != ((char *)this[20] - (char *)this[19]) >> 2)
      cv3d::cv::gess::io::MeshFromObjContents();
    if ((v149 & 0x1FFFFFFFELL) != 0)
    {
      v151 = *(_WORD **)(v145 + 40);
      v152 = (uint64_t)(*(_QWORD *)(v145 + 48) - (_QWORD)v151) >> 1;
      do
      {
        if (!v152)
          cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v145, v146, v147);
        v153 = *v148++;
        *v151++ = v153;
        --v152;
        --v150;
      }
      while (v150);
    }
  }
  return v8;
}

void sub_23C532D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  cv3d::cv::gess::io::LoadObjContents::~LoadObjContents((cv3d::cv::gess::io::LoadObjContents *)&a9);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::io::LoadObjContents::clear(cv3d::cv::gess::io::LoadObjContents *this)
{
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  *((_QWORD *)this + 22) = *((_QWORD *)this + 21);
  *((_QWORD *)this + 25) = *((_QWORD *)this + 24);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 27);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)this + 240, *((char **)this + 31));
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  if (*((char *)this + 287) < 0)
  {
    **((_BYTE **)this + 33) = 0;
    *((_QWORD *)this + 34) = 0;
  }
  else
  {
    *((_BYTE *)this + 264) = 0;
    *((_BYTE *)this + 287) = 0;
  }
}

void std::vector<unsigned short>::push_back[abi:ne180100](uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_WORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_WORD **)a1;
    v9 = (uint64_t)v6 - *(_QWORD *)a1;
    if (v9 <= -3)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *(_WORD **)a1;
      v6 = *(_WORD **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = *a2;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *--v6;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

BOOL cv3d::cv::gess::io::LoadObjFile(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int ObjFile;
  _BOOL4 MtlFile;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t **v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  std::string v43;
  std::__fs::filesystem::path v44;
  std::string pn;
  std::string __p;
  unsigned int v47;
  _BYTE v48[15];
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if ((a5 & 1) != 0)
    ObjFile = cv3d::cv::gess::io::LoadObjFile(a1, (uint64_t **)a2, (_BYTE *)a4);
  else
    ObjFile = cv3d::cv::gess::io::LoadObjFile(a1, (uint64_t **)a2, (_BYTE *)a4);
  MtlFile = ObjFile;
  v47 = -1;
  if (!*(_BYTE *)(a4 + 2))
    goto LABEL_38;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_MTL_FILENAME[0]);
  v11 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a2, &v47, (unsigned __int8 *)&__p);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v12)
      goto LABEL_23;
  }
  else if (v11)
  {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_MTL_FILENAME[0]);
  cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(a2, &v47, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  LODWORD(__p.__r_.__value_.__l.__data_) = v47;
  v14 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a2 + 80), (unsigned int *)&__p, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, 1);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a1);
  std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v44);
  if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v44.__pn_.__r_.__value_.__l.__data_, v44.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v44.__pn_;
  v15 = std::string::append(&pn, ".mtl", 4uLL);
  v16 = v15->__r_.__value_.__r.__words[0];
  *(_QWORD *)v48 = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)&v48[7] = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  LODWORD(v43.__r_.__value_.__l.__data_) = v47;
  v19 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a2 + 80), (unsigned int *)&v43, v18);
  v20 = *(_QWORD *)(v19 + 40);
  if (*(_QWORD *)(v19 + 48) == v20)
    __assert_rtn("operator[]", "Attribute.h", 182, "index < data_.size()");
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  *(_QWORD *)v20 = v16;
  *(_QWORD *)(v20 + 8) = *(_QWORD *)v48;
  *(_QWORD *)(v20 + 15) = *(_QWORD *)&v48[7];
  *(_BYTE *)(v20 + 23) = v17;
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
  v21 = (char *)cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(a2, v47, 0);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a1);
  if (MtlFile)
  {
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)v48);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43, v21);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v43, (uint64_t)v48, &v44);
    if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v44.__pn_.__r_.__value_.__l.__data_, v44.__pn_.__r_.__value_.__l.__size_);
    else
      pn = v44.__pn_;
    MtlFile = cv3d::cv::gess::io::LoadMtlFile((char *)&pn, (uint64_t **)a3, *(_DWORD *)(a4 + 4));
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (v49 < 0)
      operator delete(*(void **)v48);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (MtlFile)
      goto LABEL_37;
    return 0;
  }
  if (!MtlFile)
    return 0;
LABEL_37:
  MtlFile = 1;
LABEL_38:
  LODWORD(pn.__r_.__value_.__l.__data_) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a2, &pn, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (LODWORD(pn.__r_.__value_.__l.__data_) == -1)
    goto LABEL_47;
  LODWORD(v44.__pn_.__r_.__value_.__l.__data_) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a2, &v44, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (LODWORD(v44.__pn_.__r_.__value_.__l.__data_) == -1)
  {
LABEL_47:
    v28 = 1;
  }
  else
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = v44.__pn_.__r_.__value_.__l.__data_;
    v23 = (uint64_t *)(a2 + 80);
    v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)(a2 + 80), (unsigned int *)&__p, v22);
    v27 = *(_QWORD *)(v24 + 40);
    if (*(_QWORD *)(v24 + 48) == v27)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v24, v25, v26);
    if (!*(_QWORD *)(v27 + 16) && *(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = pn.__r_.__value_.__l.__data_;
      v30 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v23, (unsigned int *)&__p, v26);
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
      {
        v33 = *(uint64_t **)a3;
        v32 = *(_QWORD *)(a3 + 8);
        LODWORD(__p.__r_.__value_.__l.__data_) = pn.__r_.__value_.__l.__data_;
        v34 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>(v23, (unsigned int *)&__p, v31);
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
        v36 = *(_QWORD **)(a3 + 48);
        if (v36 != (_QWORD *)(a3 + 56))
        {
          v37 = 0xAAAAAAAAAAAAAAABLL * ((v32 - (uint64_t)v33) >> 4);
          if (v35 < v37)
            LOWORD(v37) = v35;
          v38 = (unsigned __int16)v37;
          do
          {
            if (v38 > *((unsigned __int16 *)v36 + 28))
            {
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v36 + 7);
              v39 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)v27, (unsigned __int16 *)v36 + 28, (uint64_t)&std::piecewise_construct, &__p);
              std::string::operator=((std::string *)(v39 + 5), (const std::string *)(v36 + 4));
            }
            v40 = (_QWORD *)v36[1];
            if (v40)
            {
              do
              {
                v41 = v40;
                v40 = (_QWORD *)*v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v41 = (_QWORD *)v36[2];
                v42 = *v41 == (_QWORD)v36;
                v36 = v41;
              }
              while (!v42);
            }
            v36 = v41;
          }
          while (v41 != (_QWORD *)(a3 + 56));
        }
      }
    }
    v28 = 0;
  }
  return !v28 && MtlFile;
}

void sub_23C5333D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::string>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  void *__p[2];
  uint64_t v4;

  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<std::string>((char **)(a1 + 80), (uint64_t)__p, a3);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_23C5334F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 3) <= v3)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 24 * v3;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a1 + 80), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 3) <= v3)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v4, v5, v6);
  return v7 + 24 * v3;
}

BOOL cv3d::cv::gess::io::LoadMtlFile(char *a1, uint64_t **a2, int a3)
{
  int v6;
  void **v7;
  void **v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  std::string *v12;
  std::string *i;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  char v17;
  size_t v18;
  void **v19;
  void **v20;
  void **v24;
  void **v25;
  void **p_data;
  __int128 v27;
  uint64_t *v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t *v36;
  _BOOL8 v37;
  int v39;
  uint64_t **v40;
  void **v41;
  int v42;
  std::__fs::filesystem::path v43;
  void *v44[2];
  char v45;
  std::__fs::filesystem::path __p;
  std::string v47;
  std::string pn;
  _QWORD **v49;
  _QWORD *v50;
  uint64_t v51;
  void **v52;
  size_t v53;
  uint64_t v54;
  void **v55[12];
  char v56;
  uint64_t v57;
  __int128 v58;
  std::string::size_type v59;
  std::string *v60;
  std::string *v61;
  unint64_t v62;
  std::string v63;
  std::string v64;
  _BYTE v65[16];
  _QWORD v66[2];
  _BYTE v67[408];
  _QWORD v68[22];

  v68[19] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    MEMORY[0x242620E28](v65, "Invalid image loading mode: UNKNOWN");
    MEMORY[0x242620E4C](v65);
  }
  std::ifstream::basic_ifstream(v66);
  v6 = *(_DWORD *)&v67[*(_QWORD *)(v66[0] - 24) + 16] & 5;
  if (!v6)
  {
    v39 = *(_DWORD *)&v67[*(_QWORD *)(v66[0] - 24) + 16] & 5;
    cv3d::cv::gess::mesh::Material::clear((cv3d::cv::gess::mesh::Material *)a2);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v64, a1);
    v40 = a2 + 6;
    v60 = 0;
    v61 = 0;
    v41 = (void **)(MEMORY[0x24BEDB848] + 16);
    v62 = 0;
    memset(&v63, 0, sizeof(v63));
    v58 = 0uLL;
    v59 = 0;
    v7 = (void **)*MEMORY[0x24BEDB7F8];
    v8 = *(void ***)(MEMORY[0x24BEDB7F8] + 24);
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(v66[0] - 24)));
      v9 = std::locale::use_facet((const std::locale *)&pn, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale((std::locale *)&pn);
      v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v66, (uint64_t)&v63, v10);
      if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
        break;
      std::istringstream::basic_istringstream[abi:ne180100](v55, &v63, 8);
      v52 = 0;
      v53 = 0;
      v54 = 0;
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v55, (uint64_t)&v52);
      v12 = v60;
      for (i = v61; i != v12; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(i[-1].__r_.__value_.__l.__data_);
      }
      while (1)
      {
        v61 = v12;
        v16 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v55, (uint64_t)&v58);
        if ((*((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) != 0)
          break;
        v14 = v61;
        if ((unint64_t)v61 >= v62)
        {
          v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v60, &v58);
        }
        else
        {
          if (SHIBYTE(v59) < 0)
          {
            std::string::__init_copy_ctor_external(v61, (const std::string::value_type *)v58, *((std::string::size_type *)&v58 + 1));
          }
          else
          {
            v15 = v58;
            v61->__r_.__value_.__r.__words[2] = v59;
            *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
          }
          v12 = v14 + 1;
          v61 = v12;
        }
      }
      v17 = HIBYTE(v54);
      if (v54 >= 0)
        v18 = HIBYTE(v54);
      else
        v18 = v53;
      switch(v18)
      {
        case 4uLL:
          if (v54 >= 0)
            v19 = (void **)&v52;
          else
            v19 = v52;
          if (!memcmp(v19, "norm", v18) || *(_DWORD *)v19 == 1886221666)
            goto LABEL_53;
          if (memcmp(v19, "disp", v18))
            goto LABEL_102;
          std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v64, (uint64_t)v44);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43.__pn_, (char *)&v61[-1]);
          std::__fs::filesystem::operator/[abi:ne180100](&v43, (uint64_t)v44, &__p);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
          else
            pn = __p.__pn_;
          v42 = 3;
          goto LABEL_94;
        case 6uLL:
          if (v54 >= 0)
            v20 = (void **)&v52;
          else
            v20 = v52;
          if (*(_DWORD *)v20 == 1836541294 && *((_WORD *)v20 + 2) == 27764)
          {
            p_data = (void **)&v60->__r_.__value_.__l.__data_;
            if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v47, v60->__r_.__value_.__l.__data_, v60->__r_.__value_.__l.__size_);
            }
            else
            {
              v27 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              v47.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v27;
            }
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&pn, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
            else
              pn = v47;
            v50 = 0;
            v51 = 0;
            v49 = &v50;
            v28 = a2[1];
            if (v28 >= a2[2])
            {
              v33 = std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial>((uint64_t *)a2, (uint64_t)&pn);
            }
            else
            {
              v29 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
              v28[2] = pn.__r_.__value_.__r.__words[2];
              *(_OWORD *)v28 = v29;
              memset(&pn, 0, sizeof(pn));
              v28[3] = (uint64_t)v49;
              v30 = v50;
              v28[4] = (uint64_t)v50;
              v31 = v28 + 4;
              v32 = v51;
              v28[5] = v51;
              if (v32)
              {
                v30[2] = v31;
                v49 = &v50;
                v50 = 0;
                v51 = 0;
              }
              else
              {
                v28[3] = (uint64_t)v31;
              }
              v33 = (uint64_t)(v28 + 6);
            }
            v34 = a2;
            a2[1] = (uint64_t *)v33;
            std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)&v49, v50);
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
              operator delete(pn.__r_.__value_.__l.__data_);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v47.__r_.__value_.__l.__data_);
            v36 = *a2;
            v35 = v34[1];
            pn.__r_.__value_.__r.__words[0] = (std::string::size_type)p_data;
            *((_WORD *)std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, p_data, (uint64_t)&std::piecewise_construct, (__int128 **)&pn)+ 28) = -1 - 21845 * (((_DWORD)v35 - (_DWORD)v36) >> 4);
            a2 = v34;
          }
          else
          {
            if (*(_DWORD *)v20 == 1601200493 && *((_WORD *)v20 + 2) == 25675)
            {
              std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v64, (uint64_t)v44);
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43.__pn_, (char *)&v61[-1]);
              std::__fs::filesystem::operator/[abi:ne180100](&v43, (uint64_t)v44, &__p);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
              else
                pn = __p.__pn_;
              v42 = 1;
            }
            else if (!memcmp(v20, "map_ao", v18))
            {
              std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v64, (uint64_t)v44);
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43.__pn_, (char *)&v61[-1]);
              std::__fs::filesystem::operator/[abi:ne180100](&v43, (uint64_t)v44, &__p);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
              else
                pn = __p.__pn_;
              v42 = 4;
            }
            else
            {
              if (*(_DWORD *)v20 != 1601200493 || *((_WORD *)v20 + 2) != 29264)
                goto LABEL_102;
              std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v64, (uint64_t)v44);
              std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43.__pn_, (char *)&v61[-1]);
              std::__fs::filesystem::operator/[abi:ne180100](&v43, (uint64_t)v44, &__p);
              if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
              else
                pn = __p.__pn_;
              v42 = 5;
            }
LABEL_94:
            if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
              operator delete(pn.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v43.__pn_.__r_.__value_.__l.__data_);
            if (v45 < 0)
              operator delete(v44[0]);
          }
LABEL_102:
          v17 = HIBYTE(v54);
LABEL_103:
          if (v17 < 0)
            operator delete(v52);
          v55[0] = v7;
          *(void ***)((char *)v55 + (_QWORD)*(v7 - 3)) = v8;
          v55[2] = v41;
          if (v56 < 0)
            operator delete(v55[10]);
          std::streambuf::~streambuf();
          std::istream::~istream();
          MEMORY[0x242621128](&v57);
          break;
        case 8uLL:
          if (v54 >= 0)
            v24 = (void **)&v52;
          else
            v24 = v52;
          if (memcmp(v24, "map_bump", v18))
            goto LABEL_102;
LABEL_53:
          std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v64, (uint64_t)v44);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43.__pn_, (char *)&v61[-1]);
          std::__fs::filesystem::operator/[abi:ne180100](&v43, (uint64_t)v44, &__p);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
          else
            pn = __p.__pn_;
          v42 = 2;
          goto LABEL_94;
        case 0xCuLL:
          if (v54 >= 0)
            v25 = (void **)&v52;
          else
            v25 = v52;
          if (memcmp(v25, "map_metallic", v18))
            goto LABEL_102;
          std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v64, (uint64_t)v44);
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v43.__pn_, (char *)&v61[-1]);
          std::__fs::filesystem::operator/[abi:ne180100](&v43, (uint64_t)v44, &__p);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
          else
            pn = __p.__pn_;
          v42 = 6;
          goto LABEL_94;
        default:
          goto LABEL_103;
      }
    }
    if (SHIBYTE(v59) < 0)
      operator delete((void *)v58);
    v55[0] = (void **)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v55);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    v6 = v39;
  }
  v37 = v6 == 0;
  v66[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v66 + *(_QWORD *)(v66[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x242620F0C](v67);
  std::istream::~istream();
  MEMORY[0x242621128](v68);
  return v37;
}

void sub_23C533E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::locale a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void **a52)
{
  void **v52;
  uint64_t v53;

  if (a35 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a51 < 0)
    operator delete(*(void **)(v53 + 48));
  std::istringstream::~istringstream((uint64_t)&a52);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete(*v52);
  *(_QWORD *)(v53 + 72) = &STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a52);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete(v52[6]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete(v52[9]);
  std::ifstream::~ifstream(&STACK[0x278]);
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_23C534074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::io::LoadObjFile(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return cv3d::cv::gess::io::LoadObjFile(a1, a2, a3, a4, 0);
}

{
  return cv3d::cv::gess::io::LoadObjFile(a1, a2, a3, a4, 1);
}

void sub_23C534FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::map<unsigned short,std::string>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  char **v3;
  char *v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<std::map<unsigned short,std::string>>((char **)(a1 + 80), (uint64_t)&v3, a3);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v3, v4[0]);
}

void sub_23C5350E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<std::vector<unsigned int>>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;

  __p = 0;
  v7 = 0;
  v8 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<std::vector<unsigned int>>((char **)(a1 + 56), (uint64_t)&__p, a3);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

void sub_23C535164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::AddAttribute<unsigned short>(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  uint64_t v4;
  __int16 v6;

  v6 = 0;
  *a2 = cv3d::cv::gess::mesh::AttributeContainer::Add<unsigned short>((char **)(a1 + 56), (uint64_t)&v6, a3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return std::for_each[abi:ne180100]<std::__wrap_iter<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute> const*>,cv3d::cv::gess::mesh::AttributeContainer::Resize(unsigned long)::{lambda(std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>)#1}>(*(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64), v4);
}

void cv3d::cv::gess::mesh::Material::clear(cv3d::cv::gess::mesh::Material *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;
  _QWORD *v6;
  char *v7;

  v3 = *(_QWORD *)this;
  for (i = *((_QWORD *)this + 1); i != v3; std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(i))
    i -= 48;
  *((_QWORD *)this + 1) = v3;
  v5 = *((_QWORD *)this + 3);
  for (j = *((_QWORD *)this + 4); j != v5; std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(j))
    j -= 48;
  v7 = (char *)*((_QWORD *)this + 7);
  v6 = (_QWORD *)((char *)this + 56);
  *(v6 - 3) = v5;
  std::__tree<std::string>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = v6;
  *v6 = 0;
  v6[1] = 0;
}

void cv3d::cv::gess::mesh::ObjMaterial::~ObjMaterial(cv3d::cv::gess::mesh::ObjMaterial *this)
{
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t **`anonymous namespace'::add_texture(_QWORD *a1, uint64_t a2, int *a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t **v31;
  unsigned int v32;
  uint64_t **result;
  std::string __p;
  _QWORD *v35;
  std::__shared_weak_count *v36;
  std::string v37;
  char *v38;
  std::__shared_weak_count *v39;
  std::string v40;
  std::string v41;
  __int128 v42;
  uint64_t v43;

  if (a4 == 1)
  {
    WORD2(v41.__r_.__value_.__r.__words[0]) = 0;
    *(_OWORD *)&v41.__r_.__value_.__r.__words[1] = 0u;
    v42 = 0u;
    v43 = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    cv3d::cv::gess::mesh::Texture::SetFilePath(&v41, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(v41.__r_.__value_.__l.__data_) = *a3;
    v15 = a1[4];
    if (v15 >= a1[5])
    {
      v16 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(a1 + 3, (int *)&v41);
    }
    else
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(a1[4], (int *)&v41);
      v16 = v15 + 48;
      a1[4] = v15 + 48;
    }
    a1[4] = v16;
    if (SHIBYTE(v43) < 0)
      operator delete((void *)v42);
    v11 = (std::__shared_weak_count *)v41.__r_.__value_.__r.__words[2];
    if (!v41.__r_.__value_.__r.__words[2])
      goto LABEL_72;
    v17 = (unint64_t *)(v41.__r_.__value_.__r.__words[2] + 8);
    do
      v13 = __ldaxr(v17);
    while (__stlxr(v13 - 1, v17));
LABEL_70:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_72;
  }
  if (a4 == 2)
  {
    WORD2(v41.__r_.__value_.__r.__words[0]) = 0;
    *(_OWORD *)&v41.__r_.__value_.__r.__words[1] = 0u;
    v42 = 0u;
    v43 = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v40 = *(std::string *)a2;
    cv3d::cv::gess::mesh::Texture::SetFilePath(&v41, &v40);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v18 = operator new(0x30uLL);
    v18[1] = 0;
    v19 = v18 + 1;
    v18[2] = 0;
    v18[3] = 0;
    *v18 = &off_250D49908;
    v18[4] = 0;
    v18[5] = 0;
    v38 = (char *)(v18 + 3);
    v39 = (std::__shared_weak_count *)v18;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v37 = *(std::string *)a2;
    cv3d::cv::gess::io::LoadHeader((uint64_t)&v37, v18 + 3);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v35 = v18 + 3;
    v36 = (std::__shared_weak_count *)v18;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](&v41.__r_.__value_.__l.__size_, (uint64_t *)&v35);
    v21 = v41.__r_.__value_.__l.__size_ && *(_QWORD *)(v41.__r_.__value_.__l.__size_ + 16);
    v41.__r_.__value_.__s.__data_[4] = v21;
    v22 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    LODWORD(v41.__r_.__value_.__l.__data_) = *a3;
    v25 = a1[4];
    if (v25 >= a1[5])
    {
      v26 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(a1 + 3, (int *)&v41);
    }
    else
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(a1[4], (int *)&v41);
      v26 = v25 + 48;
      a1[4] = v25 + 48;
    }
    a1[4] = v26;
    v27 = v39;
    if (v39)
    {
      v28 = (unint64_t *)&v39->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SHIBYTE(v43) < 0)
      operator delete((void *)v42);
    v11 = (std::__shared_weak_count *)v41.__r_.__value_.__r.__words[2];
    if (!v41.__r_.__value_.__r.__words[2])
      goto LABEL_72;
    v30 = (unint64_t *)(v41.__r_.__value_.__r.__words[2] + 8);
    do
      v13 = __ldaxr(v30);
    while (__stlxr(v13 - 1, v30));
    goto LABEL_70;
  }
  if (a4 != 3)
  {
    WORD2(v41.__r_.__value_.__r.__words[0]) = 0;
    *(_OWORD *)&v41.__r_.__value_.__r.__words[1] = 0u;
    v42 = 0u;
    v43 = 0;
    LODWORD(v41.__r_.__value_.__l.__data_) = *a3;
    v9 = a1[4];
    if (v9 >= a1[5])
    {
      v10 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(a1 + 3, (int *)&v41);
    }
    else
    {
      std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(a1[4], (int *)&v41);
      v10 = v9 + 48;
      a1[4] = v9 + 48;
    }
    a1[4] = v10;
    if (SHIBYTE(v43) < 0)
      operator delete((void *)v42);
    v11 = (std::__shared_weak_count *)v41.__r_.__value_.__r.__words[2];
    if (!v41.__r_.__value_.__r.__words[2])
      goto LABEL_72;
    v14 = (unint64_t *)(v41.__r_.__value_.__r.__words[2] + 8);
    do
      v13 = __ldaxr(v14);
    while (__stlxr(v13 - 1, v14));
    goto LABEL_70;
  }
  cv3d::cv::gess::mesh::Texture::Texture(&v41, a2, a3);
  v7 = a1[4];
  if (v7 >= a1[5])
  {
    v8 = std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(a1 + 3, (int *)&v41);
  }
  else
  {
    std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(a1[4], (int *)&v41);
    v8 = v7 + 48;
    a1[4] = v7 + 48;
  }
  a1[4] = v8;
  if (SHIBYTE(v43) < 0)
    operator delete((void *)v42);
  v11 = (std::__shared_weak_count *)v41.__r_.__value_.__r.__words[2];
  if (v41.__r_.__value_.__r.__words[2])
  {
    v12 = (unint64_t *)(v41.__r_.__value_.__r.__words[2] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_70;
  }
LABEL_72:
  v31 = (uint64_t **)(a1[1] - 24);
  v32 = -21845 * ((*((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 6)) >> 4) - 1;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  result = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v31, a3, (uint64_t)&std::piecewise_construct, &v41);
  *((_WORD *)result + 16) = v32;
  return result;
}

void sub_23C5356EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  cv3d::cv::gess::mesh::Texture::~Texture((void **)(v32 - 96));
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::SaveObjFile(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  std::locale::id *v7;
  uint64_t v8;
  uint64_t v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  std::locale::id *v15;
  uint64_t i;
  _QWORD *v17;
  const std::locale::facet *v18;
  void *exception;
  __n128 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[20];

  v27[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v25);
  v4 = (char *)&v25 + *(_QWORD *)(v25 - 24);
  if ((v4[32] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v22 = *(std::string *)a1;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to open OBJ file \"", &v22, &v23);
    v21 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", &v23, &v24);
    MEMORY[0x242620E34](exception, &v24, v21);
  }
  *((_QWORD *)v4 + 2) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"#  \n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"#  Wavefront OBJ\n", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"#  \n", 4);
  v5 = *(_QWORD *)(a2 + 104);
  v6 = *(_QWORD *)(a2 + 112);
  if (v5 != v6)
  {
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    v8 = *(_QWORD *)(a2 + 104);
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"v ", 2);
      v9 = *(_QWORD *)(a2 + 104);
      if (v5 - v9 >= (unint64_t)(*(_QWORD *)(a2 + 112) - v9))
        __assert_rtn("handle", "Topology.h", 169, "size_t(&v - &vertices_.front()) < vertices_.size()");
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, *(_DWORD *)(a2 + 176), (unint64_t)(v5 - v9) >> 2);
      cv3d::cv::gess::math::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24)));
      v10 = std::locale::use_facet((const std::locale *)&v24, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale((std::locale *)&v24);
      std::ostream::put();
      std::ostream::flush();
      v8 += 4;
      v5 += 4;
    }
    while (v8 != v6);
  }
  memset(&v24, 0, sizeof(v24));
  v12 = *(_QWORD *)(a2 + 152);
  v11 = *(_QWORD *)(a2 + 160);
  std::vector<cv3d::cv::gess::mesh::Vertex>::resize((uint64_t)&v24, 3uLL);
  v13 = (unint64_t)(v11 - v12) >> 2;
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"f ", 2);
      LODWORD(v23.__r_.__value_.__l.__data_) = v14;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(a2, (unsigned int *)&v23, &v24);
      for (i = 0; i != 12; i += 4)
      {
        if (*(_DWORD *)(v24.__r_.__value_.__r.__words[0] + i) == -1)
          __assert_rtn("SaveObjFile", "MeshIO.cpp", 905, "tri_hhs[j].Valid()");
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24)));
      v18 = std::locale::use_facet((const std::locale *)&v23, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale((std::locale *)&v23);
      std::ostream::put();
      std::ostream::flush();
      ++v14;
    }
    while (v14 != (_DWORD)v13);
  }
  if (v24.__r_.__value_.__r.__words[0])
  {
    v24.__r_.__value_.__l.__size_ = v24.__r_.__value_.__r.__words[0];
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  v25 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](&v26);
  std::ostream::~ostream();
  MEMORY[0x242621128](v27);
  return 1;
}

void sub_23C535B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  void *v72;
  int v73;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15.__locale_);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v73 & 1) == 0)
    {
LABEL_10:
      a28 = *MEMORY[0x24BEDB7E8];
      *(uint64_t *)((char *)&a28 + *(_QWORD *)(a28 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
      MEMORY[0x242620F0C](&a29);
      std::ostream::~ostream();
      MEMORY[0x242621128](&a72);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v72);
  goto LABEL_10;
}

uint64_t cv3d::cv::gess::math::operator<<()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" ", 1);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)" ", 1);
  return std::ostream::operator<<();
}

{
  _QWORD *v0;

  v0 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)" ", 1);
  return std::ostream::operator<<();
}

uint64_t cv3d::cv::gess::io::SaveObjFile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  char *v8;
  std::__fs::filesystem::path *v9;
  __int128 v10;
  _QWORD *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  unsigned int v15;
  _BOOL4 v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::locale::id *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  const std::locale::facet *v25;
  uint64_t v26;
  const std::locale::facet *v27;
  int v28;
  int v29;
  _QWORD *v30;
  unsigned int v31;
  std::locale::id *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  const std::locale::facet *v35;
  int v36;
  _QWORD *v37;
  unsigned int v38;
  std::locale::id *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  int v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  unsigned int v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  std::locale::id *v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  const std::locale::facet *v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  _BOOL4 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  int v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  const std::locale::facet *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  const std::locale::facet *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  const std::locale::facet *v103;
  int v105;
  const char *v106;
  const char *v107;
  const char *v108;
  _QWORD *v109;
  unsigned int v110;
  std::locale::id *v111;
  _QWORD *v112;
  const std::locale::facet *v113;
  void *exception;
  __n128 v115;
  unsigned int v116;
  char v117;
  uint64_t v118;
  int v119;
  unsigned __int16 v120;
  unsigned int v121;
  std::__fs::filesystem::path __replacement;
  std::__fs::filesystem::path v123;
  std::string v124;
  std::string __p;
  uint64_t v126;
  uint64_t v127;
  _QWORD v128[21];

  v128[19] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a3)
    v5 = 0;
  else
    v5 = *(_BYTE *)(a3 + 8) == 0;
  if (v5 && *(_BYTE *)(a3 + 9) == 0)
  {
    cv3d::cv::gess::io::SaveObjFile(a1, a2);
    return 1;
  }
  std::ofstream::basic_ofstream(&v126);
  v8 = (char *)&v126 + *(_QWORD *)(v126 - 24);
  if ((v8[32] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v123.__pn_, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v123 = *(std::__fs::filesystem::path *)a1;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to open OBJ file \"", &v123.__pn_, &v124);
    v115 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", &v124, &__p);
    MEMORY[0x242620E34](exception, &__p, v115);
  }
  *((_QWORD *)v8 + 2) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"#  \n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"#  Wavefront OBJ\n", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"#  \n", 4);
  if (*(_BYTE *)(a3 + 9))
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a1);
    std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v123);
    std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".mtl");
    v9 = std::__fs::filesystem::path::replace_extension(&v123, &__replacement);
    if (SHIBYTE(v9->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v124, v9->__pn_.__r_.__value_.__l.__data_, v9->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v10 = *(_OWORD *)&v9->__pn_.__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v9->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v10;
    }
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__pn_.__r_.__value_.__l.__data_);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"mtllib ", 7);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v124;
    else
      v12 = (std::string *)v124.__r_.__value_.__r.__words[0];
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    else
      size = v124.__r_.__value_.__l.__size_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n\n", 2);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = 0uLL;
    v15 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a2 + 8), (uint64_t)&v124, (unsigned __int8 *)&__p);
    v16 = v15 != -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = 0;
    v15 = -1;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"# ", 2);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" vertices\n", 10);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a2 + 112);
  v118 = a2;
  if (v18 != v19)
  {
    v20 = (std::locale::id *)MEMORY[0x24BEDB350];
    v21 = v18;
    do
    {
      v22 = *(_QWORD *)(v118 + 104);
      v23 = v18 - v22;
      if (v18 - v22 >= (unint64_t)(*(_QWORD *)(v118 + 112) - v22))
        __assert_rtn("handle", "Topology.h", 169, "size_t(&v - &vertices_.front()) < vertices_.size()");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"v ", 2);
      v24 = v23 >> 2;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v118, *(_DWORD *)(v118 + 176), v24);
      cv3d::cv::gess::math::operator<<();
      if (v16)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)" ", 1);
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v118, v15, v24);
        cv3d::cv::gess::math::operator<<();
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v126 + *(_QWORD *)(v126 - 24)));
      v25 = std::locale::use_facet((const std::locale *)&__p, v20);
      ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      v21 += 4;
      v18 += 4;
    }
    while (v21 != v19);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v126 + *(_QWORD *)(v126 - 24)));
  v26 = v118;
  v27 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  if (!*(_BYTE *)a3)
    goto LABEL_63;
  v28 = *(_DWORD *)(a3 + 4);
  if (v28 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = 0uLL;
    v29 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v118 + 8), (uint64_t)&v124, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v29 != -1)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = v29;
      v30 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v118 + 8), (unsigned int *)&__p);
      v31 = 0;
      v32 = (std::locale::id *)MEMORY[0x24BEDB350];
      while ((*(uint64_t (**)(_QWORD *))(*v30 + 16))(v30) > (unint64_t)v31)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"vn ", 3);
        if (v31 >= (unint64_t)((uint64_t)(v30[6] - v30[5]) >> 4))
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v33 = (_QWORD *)cv3d::cv::gess::math::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
        v34 = std::locale::use_facet((const std::locale *)&__p, v32);
        ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        ++v31;
      }
LABEL_47:
      std::ios_base::getloc((const std::ios_base *)((char *)&v126 + *(_QWORD *)(v126 - 24)));
      v35 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
LABEL_63:
      v43 = -1;
      goto LABEL_64;
    }
    v28 = *(_DWORD *)(a3 + 4);
  }
  if (v28 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = 0uLL;
    v36 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v118 + 56), (uint64_t)&v124, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v36 != -1)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = v36;
      v37 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v118 + 56), (unsigned int *)&__p);
      v38 = 0;
      v39 = (std::locale::id *)MEMORY[0x24BEDB350];
      while ((*(uint64_t (**)(_QWORD *))(*v37 + 16))(v37) > (unint64_t)v38)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"vn ", 3);
        if (v38 >= (unint64_t)((uint64_t)(v37[6] - v37[5]) >> 4))
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v40 = (_QWORD *)cv3d::cv::gess::math::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
        v41 = std::locale::use_facet((const std::locale *)&__p, v39);
        ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        ++v38;
      }
      goto LABEL_47;
    }
    v28 = *(_DWORD *)(a3 + 4);
  }
  if (v28 != 3)
    goto LABEL_63;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = 0uLL;
  v42 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(v118 + 80), (uint64_t)&v124, (unsigned __int8 *)&__p);
  if (v42 == -1)
  {
    v44 = 0;
    v43 = -1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v124, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
    LODWORD(v123.__pn_.__r_.__value_.__r.__words[1]) = 0;
    v123.__pn_.__r_.__value_.__r.__words[0] = 0;
    v43 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v118 + 56), (uint64_t)&v123, (unsigned __int8 *)&v124);
    v44 = v43 != -1;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v44)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = v42;
    v109 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v118 + 80), (unsigned int *)&__p);
    v110 = 0;
    v111 = (std::locale::id *)MEMORY[0x24BEDB350];
    while ((*(uint64_t (**)(_QWORD *))(*v109 + 16))(v109) > (unint64_t)v110)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"vn ", 3);
      if (v110 >= (unint64_t)((uint64_t)(v109[6] - v109[5]) >> 4))
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v112 = (_QWORD *)cv3d::cv::gess::math::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v112 + *(_QWORD *)(*v112 - 24)));
      v113 = std::locale::use_facet((const std::locale *)&__p, v111);
      ((void (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      ++v110;
    }
  }
LABEL_64:
  if (*(_BYTE *)(a3 + 9))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
    v124.__r_.__value_.__r.__words[0] = 0;
    v46 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(v118 + 80), (uint64_t)&v124, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v46 != -1)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = v46;
      v47 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(v118 + 80), (unsigned int *)&__p, v45);
      v48 = (*(uint64_t (**)(_QWORD *))(*v47 + 16))(v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"# ", 2);
      v49 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" texcoords\n", 11);
      if (v48)
      {
        v50 = 0;
        v51 = v48;
        v52 = (std::locale::id *)MEMORY[0x24BEDB350];
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"vt ", 3);
          if (v50 >= (uint64_t)(v47[6] - v47[5]) >> 3)
            __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
          v53 = (_QWORD *)cv3d::cv::gess::math::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
          v54 = std::locale::use_facet((const std::locale *)&__p, v52);
          ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          v26 = v118;
          std::ostream::flush();
          ++v50;
        }
        while (v50 != v51);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v126 + *(_QWORD *)(v126 - 24)));
      v55 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
    }
    v56 = *(unsigned __int8 *)(a3 + 9);
    v57 = -1;
    v121 = -1;
    LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = -1;
    if (v56)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
      if (cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(v26, &__replacement, (unsigned __int8 *)&__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v124, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
        LOWORD(v123.__pn_.__r_.__value_.__l.__data_) = 0;
        v57 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(v26 + 56), (uint64_t)&v123, (unsigned __int8 *)&v124);
        v59 = v57 != -1;
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
      }
      else
      {
        v59 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v59)
          goto LABEL_81;
      }
      else if (v59)
      {
LABEL_81:
        LODWORD(__p.__r_.__value_.__l.__data_) = __replacement.__pn_.__r_.__value_.__l.__data_;
        v60 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(v118 + 80), (unsigned int *)&__p, v58);
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"# ", 2);
        v61 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" groups\n", 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
        cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(v26, &v121, (unsigned __int8 *)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v117 = 0;
        goto LABEL_86;
      }
    }
  }
  else
  {
    v57 = -1;
    v121 = -1;
    LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = -1;
  }
  v117 = 1;
LABEL_86:
  if (*(_BYTE *)(a3 + 9))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    LODWORD(v124.__r_.__value_.__r.__words[1]) = 0;
    v124.__r_.__value_.__r.__words[0] = 0;
    v62 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t **)(v26 + 56), (uint64_t)&v124, (unsigned __int8 *)&__p);
    v63 = v62 != -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v64 = v62;
  }
  else
  {
    v63 = 0;
    v64 = -1;
  }
  v116 = v64;
  v66 = *(_QWORD *)(v26 + 152);
  v65 = *(_QWORD *)(v26 + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"# ", 2);
  v67 = v65 - v66;
  v68 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" faces (triangles)\n", 19);
  v119 = v43;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(&__p, 3uLL);
  LODWORD(v124.__r_.__value_.__r.__words[1]) = 0;
  v124.__r_.__value_.__r.__words[0] = 0;
  v120 = 0;
  if ((v67 >> 2))
  {
    v69 = 0;
    v70 = 0;
    do
    {
      v71 = v117;
      if (!*(_BYTE *)(a3 + 9))
        v71 = 1;
      if ((v71 & 1) == 0)
      {
        v72 = v120;
        if (v72 == *(unsigned __int16 *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned short>(v118, v57, v70))
        {
          v73 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(v118, __replacement.__pn_.__r_.__value_.__l.__data_, v120);
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"\ng ", 3);
          v75 = *(char *)(v73 + 23);
          if (v75 >= 0)
            v76 = v73;
          else
            v76 = *(_QWORD *)v73;
          if (v75 >= 0)
            v77 = *(unsigned __int8 *)(v73 + 23);
          else
            v77 = *(_QWORD *)(v73 + 8);
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
          std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(_QWORD *)(*v78 - 24)));
          v79 = std::locale::use_facet((const std::locale *)&v123, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
          std::locale::~locale((std::locale *)&v123);
          std::ostream::put();
          std::ostream::flush();
          if (v121 != -1)
          {
            v80 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::map<unsigned short,std::string>>(v118, v121, 0);
            v83 = *(_QWORD *)(v80 + 8);
            v81 = v80 + 8;
            v82 = v83;
            if (!v83)
              goto LABEL_115;
            v84 = v81;
            do
            {
              v85 = *(unsigned __int16 *)(v82 + 32);
              v86 = v85 >= v120;
              if (v85 >= v120)
                v87 = (uint64_t *)v82;
              else
                v87 = (uint64_t *)(v82 + 8);
              if (v86)
                v84 = v82;
              v82 = *v87;
            }
            while (*v87);
            if (v84 == v81 || v120 < *(unsigned __int16 *)(v84 + 32))
LABEL_115:
              v84 = v81;
            if (v84 != cv3d::cv::gess::mesh::MeshProperty::attribute<std::map<unsigned short,std::string>>(v118, v121, 0)+ 8)
            {
              v88 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::map<unsigned short,std::string>>(v118, v121, 0);
              v89 = std::map<unsigned short,std::string>::at(v88, &v120);
              v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"usemtl ", 7);
              v91 = *((char *)v89 + 23);
              if (v91 >= 0)
                v92 = (uint64_t)v89;
              else
                v92 = *v89;
              if (v91 >= 0)
                v93 = *((unsigned __int8 *)v89 + 23);
              else
                v93 = v89[1];
              v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, v92, v93);
              std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(_QWORD *)(*v94 - 24)));
              v95 = std::locale::use_facet((const std::locale *)&v123, MEMORY[0x24BEDB350]);
              ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
              std::locale::~locale((std::locale *)&v123);
              std::ostream::put();
              std::ostream::flush();
            }
          }
          ++v120;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)"f ", 2);
      LODWORD(v123.__pn_.__r_.__value_.__l.__data_) = v70;
      cv3d::cv::gess::mesh::TriMesh::GetFaceVertices(v118, (unsigned int *)&v123, &__p);
      if (v63)
      {
        v96 = cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(v118, v116, v70);
        v124.__r_.__value_.__r.__words[0] = *(_QWORD *)v96;
        LODWORD(v124.__r_.__value_.__r.__words[1]) = *(_DWORD *)(v96 + 8);
      }
      if (*(_DWORD *)__p.__r_.__value_.__l.__data_ == -1)
      {
LABEL_150:
        v105 = 1056;
        v106 = "tri_vhs[j].Valid()";
        v107 = "MeshIO.cpp";
        v108 = "SaveObjFile";
        goto LABEL_151;
      }
      v97 = 0;
      v98 = v70 + 1;
      while (1)
      {
        std::ostream::operator<<();
        if (v63)
        {
          v123.__pn_.__r_.__value_.__s.__data_[0] = 47;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)&v123, 1);
          std::ostream::operator<<();
          if (!*(_BYTE *)a3)
            goto LABEL_142;
        }
        else
        {
          if (!*(_BYTE *)a3)
            goto LABEL_142;
          v123.__pn_.__r_.__value_.__s.__data_[0] = 47;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)&v123, 1);
        }
        v99 = *(_DWORD *)(a3 + 4);
        if (v99 == 3)
        {
          if (v119 == -1)
            goto LABEL_142;
          v123.__pn_.__r_.__value_.__s.__data_[0] = 47;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)&v123, 1);
          LODWORD(v123.__pn_.__r_.__value_.__l.__data_) = v119;
          v101 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(v118 + 56), (unsigned int *)&v123, v100);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v101 + 48) - *(_QWORD *)(v101 + 40)) >> 2) <= v70)
          {
            v105 = 187;
            v108 = "operator[]";
            v107 = "Attribute.h";
            v106 = "index < data_.size()";
LABEL_151:
            __assert_rtn(v108, v107, v105, v106);
          }
          goto LABEL_141;
        }
        if (v99 == 2 || v99 == 1)
        {
          v123.__pn_.__r_.__value_.__s.__data_[0] = 47;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)&v123, 1);
LABEL_141:
          std::ostream::operator<<();
        }
LABEL_142:
        if (v97 == 8)
          break;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v126, (uint64_t)" ", 1);
        v102 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + v97 + 4);
        v97 += 4;
        if (v102 == -1)
          goto LABEL_150;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v126 + *(_QWORD *)(v126 - 24)));
      v103 = std::locale::use_facet((const std::locale *)&v123, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
      std::locale::~locale((std::locale *)&v123);
      std::ostream::put();
      std::ostream::flush();
      v69 += 12;
      ++v70;
    }
    while (v98 != (v67 >> 2));
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v126 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v126 + *(_QWORD *)(v126 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](&v127);
  std::ostream::~ostream();
  MEMORY[0x242621128](v128);
  return 1;
}

{
  char *v6;
  std::__fs::filesystem::path *v7;
  __int128 v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  unsigned int v13;
  _BOOL4 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::locale::id *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  const std::locale::facet *v23;
  const std::locale::facet *v24;
  int v25;
  _QWORD *v26;
  unsigned int v27;
  std::locale::id *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  std::locale::id *v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  const std::locale::facet *v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  const std::locale::facet *v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  std::string *v73;
  std::string::size_type v74;
  std::string::size_type v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  const std::locale::facet *v80;
  void *exception;
  __n128 v83;
  unsigned __int16 v84;
  unsigned int v85;
  unsigned int v86;
  std::__fs::filesystem::path __replacement;
  std::__fs::filesystem::path v88;
  std::string v89;
  std::string __p;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[22];

  v93[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v91);
  v6 = (char *)&v91 + *(_QWORD *)(v91 - 24);
  if ((v6[32] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v88.__pn_, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v88 = *(std::__fs::filesystem::path *)a1;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to open OBJ file \"", &v88.__pn_, &v89);
    v83 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", &v89, &__p);
    MEMORY[0x242620E34](exception, &__p, v83);
  }
  *((_QWORD *)v6 + 2) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"#  \n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"#  Wavefront OBJ\n", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"#  \n", 4);
  if (*(_BYTE *)(a3 + 9))
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a1);
    std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v88);
    std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".mtl");
    v7 = std::__fs::filesystem::path::replace_extension(&v88, &__replacement);
    if (SHIBYTE(v7->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v89, v7->__pn_.__r_.__value_.__l.__data_, v7->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)&v7->__pn_.__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v7->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v8;
    }
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__pn_.__r_.__value_.__l.__data_);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"mtllib ", 7);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v89;
    else
      v10 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    else
      size = v89.__r_.__value_.__l.__size_;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\n\n", 2);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a3 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = 0uLL;
    v13 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a2 + 8), (uint64_t)&v89, (unsigned __int8 *)&__p);
    v14 = v13 != -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = 0;
    v13 = -1;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"# ", 2);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vertices\n", 10);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a2 + 112);
  if (v16 != v17)
  {
    v18 = (std::locale::id *)MEMORY[0x24BEDB350];
    v19 = *(_QWORD *)(a2 + 104);
    do
    {
      v20 = *(_QWORD *)(a2 + 104);
      v21 = v16 - v20;
      if (v16 - v20 >= (unint64_t)(*(_QWORD *)(a2 + 112) - v20))
        __assert_rtn("handle", "Topology.h", 169, "size_t(&v - &vertices_.front()) < vertices_.size()");
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"v ", 2);
      v22 = v21 >> 2;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, *(_DWORD *)(a2 + 176), v22);
      cv3d::cv::gess::math::operator<<();
      if (v14)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)" ", 1);
        cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a2, v13, v22);
        cv3d::cv::gess::math::operator<<();
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v91 + *(_QWORD *)(v91 - 24)));
      v23 = std::locale::use_facet((const std::locale *)&__p, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      v19 += 4;
      v16 += 4;
    }
    while (v19 != v17);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)&v91 + *(_QWORD *)(v91 - 24)));
  v24 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  if (*(_BYTE *)a3 && *(_DWORD *)(a3 + 4) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = 0uLL;
    v25 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a2 + 8), (uint64_t)&v89, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v25 != -1)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = v25;
      v26 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a2 + 8), (unsigned int *)&__p);
      v27 = 0;
      v28 = (std::locale::id *)MEMORY[0x24BEDB350];
      while ((*(uint64_t (**)(_QWORD *))(*v26 + 16))(v26) > (unint64_t)v27)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"vn ", 3);
        if (v27 >= (unint64_t)((uint64_t)(v26[6] - v26[5]) >> 4))
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v29 = (_QWORD *)cv3d::cv::gess::math::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
        v30 = std::locale::use_facet((const std::locale *)&__p, v28);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        ++v27;
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&v91 + *(_QWORD *)(v91 - 24)));
      v31 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
    }
  }
  if (!*(_BYTE *)(a3 + 9))
  {
    v44 = -1;
    v86 = -1;
    LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = -1;
    goto LABEL_61;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_UVS[0]);
  v89.__r_.__value_.__r.__words[0] = 0;
  v33 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector2T<float>>((uint64_t **)(a2 + 80), (uint64_t)&v89, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v33 != -1)
  {
    LODWORD(__p.__r_.__value_.__l.__data_) = v33;
    v34 = (_QWORD *)cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector2T<float>>((uint64_t *)(a2 + 80), (unsigned int *)&__p, v32);
    v35 = (*(uint64_t (**)(_QWORD *))(*v34 + 16))(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"# ", 2);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" texcoords\n", 11);
    if (v35)
    {
      v37 = 0;
      v38 = v35;
      v39 = (std::locale::id *)MEMORY[0x24BEDB350];
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"vt ", 3);
        if (v37 >= (uint64_t)(v34[6] - v34[5]) >> 3)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v40 = (_QWORD *)cv3d::cv::gess::math::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
        v41 = std::locale::use_facet((const std::locale *)&__p, v39);
        ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
        std::locale::~locale((std::locale *)&__p);
        std::ostream::put();
        std::ostream::flush();
        ++v37;
      }
      while (v37 != v38);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&v91 + *(_QWORD *)(v91 - 24)));
    v42 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
  }
  v43 = *(unsigned __int8 *)(a3 + 9);
  v44 = -1;
  v86 = -1;
  LODWORD(__replacement.__pn_.__r_.__value_.__l.__data_) = -1;
  if (!v43)
    goto LABEL_61;
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUP[0]);
  if (cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::string>(a2, &__replacement, (unsigned __int8 *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(&v89, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_GROUP_ID[0]);
    LOWORD(v88.__pn_.__r_.__value_.__l.__data_) = 0;
    v44 = cv3d::cv::gess::mesh::AttributeContainer::handle<unsigned short>((uint64_t **)(a2 + 56), (uint64_t)&v88, (unsigned __int8 *)&v89);
    v46 = v44 != -1;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
  }
  else
  {
    v46 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v46)
      goto LABEL_57;
LABEL_61:
    v49 = 1;
    goto LABEL_62;
  }
  if (!v46)
    goto LABEL_61;
LABEL_57:
  LODWORD(__p.__r_.__value_.__l.__data_) = __replacement.__pn_.__r_.__value_.__l.__data_;
  v47 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::string>((uint64_t *)(a2 + 80), (unsigned int *)&__p, v45);
  (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"# ", 2);
  v48 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" groups\n", 8);
  std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_GROUPID_TO_OBJMAT_NAME);
  cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::map<unsigned short,std::string>>(a2, &v86, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v49 = 0;
LABEL_62:
  v85 = -1;
  if (*(_BYTE *)(a3 + 9))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_UV_ID[0]);
    v50 = cv3d::cv::gess::mesh::MeshProperty::GetAttributeHandle<std::vector<unsigned int>>(a2, &v85, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v50 = 0;
  }
  v52 = *(_QWORD *)(a2 + 152);
  v51 = *(_QWORD *)(a2 + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"# ", 2);
  v53 = v51 - v52;
  v54 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" faces (triangles)\n", 19);
  memset(&__p, 0, sizeof(__p));
  memset(&v89, 0, sizeof(v89));
  v84 = 0;
  if ((v53 >> 2))
  {
    v55 = 0;
    while (1)
    {
      if (*(_BYTE *)(a3 + 9))
        v56 = v49;
      else
        v56 = 1;
      if ((v56 & 1) == 0)
      {
        v57 = v84;
        if (v57 == *(unsigned __int16 *)cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned short>(a2, v44, v55))
        {
          v58 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::string>(a2, __replacement.__pn_.__r_.__value_.__l.__data_, v84);
          v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"\ng ", 3);
          v60 = *(char *)(v58 + 23);
          if (v60 >= 0)
            v61 = v58;
          else
            v61 = *(_QWORD *)v58;
          if (v60 >= 0)
            v62 = *(unsigned __int8 *)(v58 + 23);
          else
            v62 = *(_QWORD *)(v58 + 8);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
          std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(_QWORD *)(*v63 - 24)));
          v64 = std::locale::use_facet((const std::locale *)&v88, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
          std::locale::~locale((std::locale *)&v88);
          std::ostream::put();
          std::ostream::flush();
          if (v86 != -1)
          {
            v65 = cv3d::cv::gess::mesh::MeshProperty::attribute<std::map<unsigned short,std::string>>(a2, v86, 0);
            v66 = std::map<unsigned short,std::string>::at(v65, &v84);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"usemtl ", 7);
            v68 = *((char *)v66 + 23);
            if (v68 >= 0)
              v69 = (uint64_t)v66;
            else
              v69 = *v66;
            if (v68 >= 0)
              v70 = *((unsigned __int8 *)v66 + 23);
            else
              v70 = v66[1];
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
            std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(*v71 - 24)));
            v72 = std::locale::use_facet((const std::locale *)&v88, MEMORY[0x24BEDB350]);
            ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
            std::locale::~locale((std::locale *)&v88);
            std::ostream::put();
            std::ostream::flush();
          }
          ++v84;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"f ", 2);
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      LODWORD(v88.__pn_.__r_.__value_.__l.__data_) = v55;
      cv3d::cv::gess::mesh::QuadMesh::GetFaceVertices(a2, (unsigned int *)&v88, (void **)&__p.__r_.__value_.__l.__data_);
      if (v50)
      {
        v73 = (std::string *)cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<unsigned int>>(a2, v85, v55);
        if (&v89 != v73)
          std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)&v89, v73->__r_.__value_.__l.__data_, v73->__r_.__value_.__l.__size_, (uint64_t)(v73->__r_.__value_.__l.__size_ - v73->__r_.__value_.__r.__words[0]) >> 2);
        v75 = __p.__r_.__value_.__l.__size_;
        v74 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] != v89.__r_.__value_.__l.__size_
                                                                               - v89.__r_.__value_.__r.__words[0])
          __assert_rtn("SaveObjFile", "MeshIO.cpp", 1435, "face_vhs.size() == tri_uv_indices.size()");
      }
      else
      {
        v75 = __p.__r_.__value_.__l.__size_;
        v74 = __p.__r_.__value_.__r.__words[0];
      }
      if (v75 != v74)
        break;
LABEL_107:
      std::ios_base::getloc((const std::ios_base *)((char *)&v91 + *(_QWORD *)(v91 - 24)));
      v80 = std::locale::use_facet((const std::locale *)&v88, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
      std::locale::~locale((std::locale *)&v88);
      std::ostream::put();
      std::ostream::flush();
      if (++v55 == (v53 >> 2))
      {
        if (v89.__r_.__value_.__r.__words[0])
        {
          v89.__r_.__value_.__l.__size_ = v89.__r_.__value_.__r.__words[0];
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        goto LABEL_110;
      }
    }
    v76 = 0;
    v77 = 1;
    while (1)
    {
      if (*(_DWORD *)(v74 + 4 * v76) == -1)
        __assert_rtn("SaveObjFile", "MeshIO.cpp", 1438, "face_vhs[j].Valid()");
      std::ostream::operator<<();
      if (v50)
      {
        v88.__pn_.__r_.__value_.__s.__data_[0] = 47;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v88, 1);
        std::ostream::operator<<();
        if (*(_BYTE *)a3)
          goto LABEL_102;
      }
      else if (*(_BYTE *)a3)
      {
        v88.__pn_.__r_.__value_.__s.__data_[0] = 47;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v88, 1);
LABEL_102:
        if (*(_DWORD *)(a3 + 4) == 1)
        {
          v88.__pn_.__r_.__value_.__s.__data_[0] = 47;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)&v88, 1);
          std::ostream::operator<<();
        }
      }
      v74 = __p.__r_.__value_.__r.__words[0];
      v78 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v78 - 1 != v76)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)" ", 1);
        v74 = __p.__r_.__value_.__r.__words[0];
        v78 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      }
      v76 = v77;
      if (v78 <= v77++)
        goto LABEL_107;
    }
  }
LABEL_110:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v91 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&v91 + *(_QWORD *)(v91 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](&v92);
  std::ostream::~ostream();
  MEMORY[0x242621128](v93);
  return 1;
}

void sub_23C536F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,std::locale a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45)
{
  a44 = *MEMORY[0x24BEDB7E8];
  *(uint64_t *)((char *)&a44 + *(_QWORD *)(a44 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](&a45);
  std::ostream::~ostream();
  MEMORY[0x242621128](&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<unsigned short>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)(a1 + 56), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (v3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 1))
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v4, v5, v6);
  return v7 + 2 * v3;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<unsigned short>((uint64_t *)(a1 + 56), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (v3 >= (unint64_t)((*(_QWORD *)(v4 + 48) - v7) >> 1))
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 2 * v3;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<std::map<unsigned short,std::string>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::map<unsigned short,std::string>>((uint64_t *)(a1 + 80), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 3) <= v3)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v4, v5, v6);
  return v7 + 24 * v3;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 2) <= v3)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v4, v5, v6);
  return v7 + 12 * v3;
}

{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<unsigned int>>((uint64_t *)(a1 + 56), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 2) <= v3)
    cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, v5, v6);
  return v7 + 12 * v3;
}

uint64_t cv3d::cv::gess::io::SaveObjFile(char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  std::__fs::filesystem::path *v7;
  __int128 v8;
  std::__fs::filesystem::path __replacement;
  std::string v11;
  std::__fs::filesystem::path v12;

  cv3d::cv::gess::io::SaveObjFile((uint64_t)a1, a2, a4);
  if (*(_BYTE *)(a4 + 9))
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v12.__pn_, a1);
    std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".mtl");
    v7 = std::__fs::filesystem::path::replace_extension(&v12, &__replacement);
    if (SHIBYTE(v7->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, v7->__pn_.__r_.__value_.__l.__data_, v7->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)&v7->__pn_.__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v7->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v8;
    }
    cv3d::cv::gess::io::SaveMtlFile((uint64_t)&v11, a3, a4 + 16);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  }
  return 1;
}

{
  std::__fs::filesystem::path *v7;
  __int128 v8;
  std::__fs::filesystem::path __replacement;
  std::string v11;
  std::__fs::filesystem::path v12;

  cv3d::cv::gess::io::SaveObjFile((uint64_t)a1, a2, a4);
  if (*(_BYTE *)(a4 + 9))
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v12.__pn_, a1);
    std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(&__replacement.__pn_, ".mtl");
    v7 = std::__fs::filesystem::path::replace_extension(&v12, &__replacement);
    if (SHIBYTE(v7->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, v7->__pn_.__r_.__value_.__l.__data_, v7->__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      v8 = *(_OWORD *)&v7->__pn_.__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v7->__pn_.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v8;
    }
    cv3d::cv::gess::io::SaveMtlFile((uint64_t)&v11, a3, a4 + 16);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_23C5373F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::SaveMtlFile(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  __int16 v18;
  const char *v19;
  int v20;
  std::string::size_type v21;
  const char *v22;
  uint64_t *v23;
  std::string::size_type size;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::string *v44;
  uint64_t v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  const std::string::value_type **v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  std::__fs::filesystem::path::__string_view v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  uint64_t v64;
  int ImagefByPath;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  BOOL v72;
  const std::locale::facet *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  int *v79;
  int v80;
  BOOL v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int *v86;
  int v87;
  BOOL v88;
  uint64_t *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int *v94;
  int v95;
  BOOL v96;
  uint64_t *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  BOOL v108;
  uint64_t *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::string::size_type v114;
  unint64_t *v115;
  unint64_t v116;
  char v117;
  uint32x2_t v118;
  uint64_t v119;
  __int32 v120;
  uint64_t v121;
  char *v122;
  unint64_t *v123;
  unsigned int v124;
  int i;
  uint64_t v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  int j;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  int k;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int n;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  int m;
  uint64_t v148;
  unsigned int v149;
  std::string::size_type v150;
  std::string *v151;
  std::string *v152;
  std::string *v153;
  std::string::size_type v154;
  std::string *v155;
  __int128 v156;
  std::string *v157;
  __int128 v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  const std::string::value_type **v166;
  __int128 v167;
  const std::string::value_type **v168;
  __int128 v169;
  void *exception;
  __n128 v172;
  std::__shared_weak_count *v173;
  uint32x2_t v174;
  uint64_t v175;
  unint64_t __vala;
  std::string v179;
  std::string v180;
  std::string v181;
  std::string v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  std::string v187;
  int v188;
  unsigned __int16 v189;
  std::string __p;
  std::string v191;
  std::string v192;
  uint64_t v193;
  _BYTE v194[408];
  _QWORD v195[21];

  v195[19] = *MEMORY[0x24BDAC8D0];
  std::ofstream::basic_ofstream(&v193);
  if ((v194[*(_QWORD *)(v193 - 24) + 24] & 5) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      __p = *(std::string *)a1;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unable to save MTL file \"", &__p, &v191);
    v172 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"!", &v191, &v192);
    MEMORY[0x242620E34](exception, &v192, v172);
  }
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v192, (char *)a1);
  std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&v192, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v191, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v191 = __p;
  }
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)"#  \n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"#  Wavefront MTL\n", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)"#  \n", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)"#  \n\n", 5);
  v5 = a2[1];
  if (v5 != *a2)
  {
    v6 = 0;
    v7 = a3 + 24;
    v5 = *a2;
    while (1)
    {
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)"newmtl ", 7);
      v9 = v5 + 48 * v6;
      v10 = *(char *)(v9 + 23);
      v11 = v10 >= 0 ? v5 + 48 * v6 : *(_QWORD *)v9;
      v12 = v10 >= 0 ? *(unsigned __int8 *)(v9 + 23) : *(_QWORD *)(v9 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v11, v12);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
      v14 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      v15 = (_QWORD *)(v5 + 48 * v6);
      if (v15[5])
      {
        v17 = v15 + 4;
        v16 = (_QWORD *)v15[3];
        if (v16 != v15 + 4)
          break;
      }
LABEL_147:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)"#  ", 3);
      std::ios_base::getloc((const std::ios_base *)&v194[*(_QWORD *)(v193 - 24) - 8]);
      v73 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v73->__vftable[2].~facet_0)(v73, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      ++v6;
      v5 = *a2;
      v74 = a2[1];
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v74 - *a2) >> 4))
        goto LABEL_150;
    }
    while (1)
    {
      v188 = *((_DWORD *)v16 + 7);
      v189 = *((_WORD *)v16 + 16);
      memset(&__p, 0, sizeof(__p));
      switch(v188)
      {
        case 1:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
          LODWORD(__p.__r_.__value_.__l.__data_) = 1601200493;
          v18 = 25675;
          goto LABEL_25;
        case 2:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
          v20 = 1836216174;
          goto LABEL_28;
        case 3:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
          v20 = 1886611812;
LABEL_28:
          LODWORD(__p.__r_.__value_.__l.__data_) = v20;
          break;
        case 4:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
          LODWORD(__p.__r_.__value_.__l.__data_) = 1601200493;
          v18 = 28513;
          goto LABEL_25;
        case 5:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
          LODWORD(__p.__r_.__value_.__l.__data_) = 1601200493;
          v18 = 29264;
          goto LABEL_25;
        case 6:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 1667853420;
          v22 = "map_metallic";
          goto LABEL_33;
        case 7:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
          __p.__r_.__value_.__s.__data_[8] = 109;
          v22 = "map_onorm";
          goto LABEL_33;
        case 8:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
          v21 = 0x6B73616D5F70616DLL;
          goto LABEL_34;
        case 9:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
          *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 7) = 1735289188;
          v22 = "map_shading";
          goto LABEL_33;
        case 10:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
          __p.__r_.__value_.__s.__data_[16] = 111;
          v19 = "map_diffusealbedo";
          goto LABEL_22;
        case 11:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
          LODWORD(__p.__r_.__value_.__r.__words[1]) = 1852795252;
          v22 = "map_position";
LABEL_33:
          v21 = *(_QWORD *)v22;
LABEL_34:
          __p.__r_.__value_.__r.__words[0] = v21;
          break;
        case 12:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
          LODWORD(__p.__r_.__value_.__l.__data_) = 1601200493;
          v18 = 29515;
LABEL_25:
          WORD2(__p.__r_.__value_.__r.__words[0]) = v18;
          break;
        case 13:
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
          v19 = "map_envocclusion";
LABEL_22:
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
          break;
        default:
          break;
      }
      v23 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::at(a3, &v188);
      cv3d::cv::gess::mesh::Texture::tex_typename((_DWORD *)(a2[3] + 48 * v189), (uint64_t)&v187);
      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v191.__r_.__value_.__r.__words[2]);
      else
        size = v191.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v183, size + 1);
      if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v183;
      else
        v25 = (std::string *)v183.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v26 = &v191;
        else
          v26 = (std::string *)v191.__r_.__value_.__r.__words[0];
        memmove(v25, v26, size);
      }
      *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + size) = 95;
      if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v187;
      else
        v27 = (std::string *)v187.__r_.__value_.__r.__words[0];
      if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
      else
        v28 = v187.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v183, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v184.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v182, v6);
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v182;
      else
        v31 = (std::string *)v182.__r_.__value_.__r.__words[0];
      if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
      else
        v32 = v182.__r_.__value_.__l.__size_;
      v33 = std::string::append(&v184, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v185.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = *((char *)v23 + 55);
      if (v35 >= 0)
        v36 = (const std::string::value_type *)(v23 + 4);
      else
        v36 = (const std::string::value_type *)v23[4];
      if (v35 >= 0)
        v37 = *((unsigned __int8 *)v23 + 55);
      else
        v37 = v23[5];
      v38 = std::string::append(&v185, v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v186.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v182.__r_.__value_.__l.__data_);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v184.__r_.__value_.__l.__data_);
      if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v183.__r_.__value_.__l.__data_);
      v40 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v41 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)v40, v41);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" ", 1);
      v44 = (v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v186
          : (std::string *)v186.__r_.__value_.__r.__words[0];
      v45 = (v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v186.__r_.__value_.__r.__words[2])
          : v186.__r_.__value_.__l.__size_;
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
      v47 = std::locale::use_facet((const std::locale *)&v185, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
      std::locale::~locale((std::locale *)&v185);
      std::ostream::put();
      std::ostream::flush();
      v48 = a2[3];
      v49 = v48 + 48 * v189;
      if (*(_BYTE *)(v49 + 4))
        break;
      if (*(_BYTE *)(v48 + 48 * v189 + 5))
      {
        v51 = (const std::string::value_type **)(v48 + 48 * v189 + 24);
        if (*(char *)(v49 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v184, *v51, *(_QWORD *)(v48 + 48 * v189 + 32));
        }
        else
        {
          v52 = *(_OWORD *)v51;
          v184.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 48 * v189 + 40);
          *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v52;
        }
        v185 = v184;
        std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v192, (uint64_t)&v183);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v182, (char *)&v186);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v182, (uint64_t)&v183, (std::__fs::filesystem::path *)&v184);
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v182.__r_.__value_.__l.__data_);
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v183.__r_.__value_.__l.__data_);
        v61.__data_ = (const std::string_view::value_type *)&v184;
        if (!std::__fs::filesystem::operator==[abi:ne180100]((const std::__fs::filesystem::path *)&v185, v61))
        {
          v62 = (std::__shared_weak_count *)operator new(0x30uLL);
          v62->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v62->__shared_owners_;
          v62->__shared_weak_owners_ = 0;
          v62[1].__vftable = 0;
          v64 = (uint64_t)&v62[1];
          v62->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
          v62[1].__shared_owners_ = 0;
          v62[1].__shared_weak_owners_ = 0;
          v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62[1];
          v182.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v183, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
          else
            v183 = v185;
          ImagefByPath = cv3d::cv::gess::io::LoadImagefByPath((uint64_t)&v183, v64);
          v66 = ImagefByPath;
          if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v183.__r_.__value_.__l.__data_);
            if (v66)
              goto LABEL_121;
          }
          else if (ImagefByPath)
          {
LABEL_121:
            v67 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::at(v7, &v188);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v180, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
            else
              v180 = v184;
            v68 = v67[3];
            if (!v68)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t *))(*(_QWORD *)v68 + 48))(v68, &v180, v64, v23);
            if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v180.__r_.__value_.__l.__data_);
          }
          do
            v69 = __ldaxr(p_shared_owners);
          while (__stlxr(v69 - 1, p_shared_owners));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v184.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v185.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_135;
        v60 = (void *)v185.__r_.__value_.__r.__words[0];
LABEL_134:
        operator delete(v60);
      }
LABEL_135:
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v186.__r_.__value_.__l.__data_);
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v187.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v70 = (_QWORD *)v16[1];
      if (v70)
      {
        do
        {
          v71 = v70;
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v71 = (_QWORD *)v16[2];
          v72 = *v71 == (_QWORD)v16;
          v16 = v71;
        }
        while (!v72);
      }
      v16 = v71;
      if (v71 == v17)
        goto LABEL_147;
    }
    v50 = std::map<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>::at(v7, &v188);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v192, (uint64_t)&v184);
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v183, (char *)&v186);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v183, (uint64_t)&v184, (std::__fs::filesystem::path *)&v185);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v181, v185.__r_.__value_.__l.__data_, v185.__r_.__value_.__l.__size_);
    else
      v181 = v185;
    v53 = a2[3] + 48 * v189;
    v182.__r_.__value_.__r.__words[0] = *(_QWORD *)(v53 + 8);
    v54 = *(std::__shared_weak_count **)(v53 + 16);
    v182.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v57 = v50[3];
    if (!v57)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v57 + 48))(v57, &v181);
    if (v54)
    {
      v58 = (unint64_t *)&v54->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v185.__r_.__value_.__l.__data_);
    if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v183.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v184.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
    v60 = (void *)v184.__r_.__value_.__r.__words[0];
    goto LABEL_134;
  }
  v74 = a2[1];
LABEL_150:
  if (*(_BYTE *)(a3 + 48) && v74 != v5)
  {
    v75 = 0;
    while (1)
    {
      v76 = v5 + 48 * v75;
      if (*(_QWORD *)(v76 + 40))
        break;
LABEL_296:
      if (++v75 >= 0xAAAAAAAAAAAAAAABLL * ((v74 - v5) >> 4))
        goto LABEL_312;
    }
    v78 = (int *)(v76 + 32);
    v77 = *(_QWORD *)(v76 + 32);
    __vala = v75;
    if (!v77)
      goto LABEL_164;
    v79 = v78;
    do
    {
      v80 = *(_DWORD *)(v77 + 28);
      v81 = v80 < 4;
      if (v80 >= 4)
        v82 = (uint64_t *)v77;
      else
        v82 = (uint64_t *)(v77 + 8);
      if (!v81)
        v79 = (int *)v77;
      v77 = *v82;
    }
    while (*v82);
    if (v79 != v78 && v79[7] < 5)
    {
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = 0uLL;
      v93 = *(_QWORD *)v78;
      if (!*(_QWORD *)v78)
        goto LABEL_188;
      v94 = v78;
      do
      {
        v95 = *(_DWORD *)(v93 + 28);
        v96 = v95 < 4;
        if (v95 >= 4)
          v97 = (uint64_t *)v93;
        else
          v97 = (uint64_t *)(v93 + 8);
        if (!v96)
          v94 = (int *)v93;
        v93 = *v97;
      }
      while (*v97);
      if (v94 == v78 || v94[7] >= 5)
LABEL_188:
        v94 = v78;
      v98 = *((unsigned __int16 *)v94 + 16);
      v99 = a2[3];
      v100 = v99 + 48 * *((unsigned __int16 *)v94 + 16);
      if (*(_BYTE *)(v100 + 4))
      {
        v101 = v99 + 48 * *((unsigned __int16 *)v94 + 16);
        v83 = *(_QWORD *)(v101 + 8);
        v102 = *(_QWORD *)(v101 + 16);
        if (v102)
        {
          v103 = (unint64_t *)(v102 + 8);
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
        }
        v184.__r_.__value_.__r.__words[0] = v83;
        v184.__r_.__value_.__l.__size_ = v102;
        v84 = 1;
      }
      else if (*(_BYTE *)(v99 + 48 * *((unsigned __int16 *)v94 + 16) + 5))
      {
        v165 = operator new(0x30uLL);
        v165[1] = 0;
        v165[2] = 0;
        *v165 = &off_250D49908;
        v165[3] = 0;
        v83 = (uint64_t)(v165 + 3);
        v165[4] = 0;
        v165[5] = 0;
        v184.__r_.__value_.__r.__words[0] = (std::string::size_type)(v165 + 3);
        v184.__r_.__value_.__l.__size_ = (std::string::size_type)v165;
        v166 = (const std::string::value_type **)(v99 + 48 * v98 + 24);
        if (*(char *)(v100 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v166, *(_QWORD *)(v99 + 48 * v98 + 32));
        }
        else
        {
          v167 = *(_OWORD *)v166;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v99 + 48 * v98 + 40);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v167;
        }
        v84 = cv3d::cv::gess::io::LoadImagefByPath((uint64_t)&__p, v83);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v83 = 0;
        v84 = 0;
      }
    }
    else
    {
LABEL_164:
      v83 = 0;
      v84 = 0;
      *(_OWORD *)&v184.__r_.__value_.__l.__data_ = 0uLL;
    }
    v85 = *(_QWORD *)v78;
    if (!*(_QWORD *)v78)
      goto LABEL_175;
    v86 = v78;
    do
    {
      v87 = *(_DWORD *)(v85 + 28);
      v88 = v87 < 5;
      if (v87 >= 5)
        v89 = (uint64_t *)v85;
      else
        v89 = (uint64_t *)(v85 + 8);
      if (!v88)
        v86 = (int *)v85;
      v85 = *v89;
    }
    while (*v89);
    if (v86 != v78 && v86[7] < 6)
    {
      *(_OWORD *)&v183.__r_.__value_.__l.__data_ = 0uLL;
      v105 = *(_QWORD *)v78;
      if (!*(_QWORD *)v78)
        goto LABEL_204;
      v106 = v78;
      do
      {
        v107 = *(_DWORD *)(v105 + 28);
        v108 = v107 < 5;
        if (v107 >= 5)
          v109 = (uint64_t *)v105;
        else
          v109 = (uint64_t *)(v105 + 8);
        if (!v108)
          v106 = (int *)v105;
        v105 = *v109;
      }
      while (*v109);
      if (v106 == v78 || v106[7] >= 6)
LABEL_204:
        v106 = v78;
      v110 = *((unsigned __int16 *)v106 + 16);
      v111 = a2[3];
      v112 = v111 + 48 * *((unsigned __int16 *)v106 + 16);
      if (*(_BYTE *)(v112 + 4))
      {
        v113 = v111 + 48 * *((unsigned __int16 *)v106 + 16);
        v91 = *(_QWORD *)(v113 + 8);
        v114 = *(_QWORD *)(v113 + 16);
        if (v114)
        {
          v115 = (unint64_t *)(v114 + 8);
          do
            v116 = __ldxr(v115);
          while (__stxr(v116 + 1, v115));
        }
        v183.__r_.__value_.__r.__words[0] = v91;
        v183.__r_.__value_.__l.__size_ = v114;
        v92 = 1;
        goto LABEL_210;
      }
      if (*(_BYTE *)(v111 + 48 * *((unsigned __int16 *)v106 + 16) + 5))
      {
        v90 = (std::__shared_weak_count *)operator new(0x30uLL);
        v90->__shared_owners_ = 0;
        v90->__shared_weak_owners_ = 0;
        v90->__vftable = (std::__shared_weak_count_vtbl *)&off_250D49908;
        v90[1].__vftable = 0;
        v91 = (uint64_t)&v90[1];
        v90[1].__shared_owners_ = 0;
        v90[1].__shared_weak_owners_ = 0;
        v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90[1];
        v183.__r_.__value_.__l.__size_ = (std::string::size_type)v90;
        v168 = (const std::string::value_type **)(v111 + 48 * v110 + 24);
        if (*(char *)(v112 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v168, *(_QWORD *)(v111 + 48 * v110 + 32));
        }
        else
        {
          v169 = *(_OWORD *)v168;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v111 + 48 * v110 + 40);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v169;
        }
        v92 = cv3d::cv::gess::io::LoadImagefByPath((uint64_t)&__p, v91);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v90 = 0;
        v91 = 0;
        v92 = 0;
      }
    }
    else
    {
LABEL_175:
      v90 = 0;
      v91 = 0;
      v92 = 0;
      *(_OWORD *)&v183.__r_.__value_.__l.__data_ = 0uLL;
    }
    if ((v84 | v92) != 1)
    {
LABEL_285:
      v75 = __vala;
      if (v90)
      {
        v160 = (unint64_t *)&v90->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v162 = (std::__shared_weak_count *)v184.__r_.__value_.__l.__size_;
      if (v184.__r_.__value_.__l.__size_)
      {
        v163 = (unint64_t *)(v184.__r_.__value_.__l.__size_ + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      v5 = *a2;
      v74 = a2[1];
      goto LABEL_296;
    }
LABEL_210:
    v117 = v84;
    if (v84)
    {
      v118 = *(uint32x2_t *)(v83 + 4);
      if (!v92)
      {
LABEL_215:
        v119 = v118.u32[0];
        v174 = v118;
        v120 = v118.i32[1];
        v121 = operator new[]();
        v122 = (char *)operator new(0x30uLL);
        *((_QWORD *)v122 + 1) = 0;
        v123 = (unint64_t *)(v122 + 8);
        *((_QWORD *)v122 + 2) = 0;
        *((_DWORD *)v122 + 6) = 0;
        *(_QWORD *)v122 = &off_250D49908;
        *(uint32x2_t *)(v122 + 28) = v174;
        *((_DWORD *)v122 + 9) = 3;
        *((_QWORD *)v122 + 5) = v121;
        v173 = (std::__shared_weak_count *)v122;
        v175 = (uint64_t)(v122 + 24);
        v182.__r_.__value_.__r.__words[0] = (std::string::size_type)(v122 + 24);
        v182.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
        if ((v117 & 1) != 0)
        {
          if (v120)
          {
            v124 = 0;
            for (i = 0; i != v120; ++i)
            {
              if ((_DWORD)v119)
              {
                v126 = *(_QWORD *)(v83 + 16);
                v127 = *(_DWORD *)(v83 + 12);
                v128 = *(_DWORD *)(v83 + 4) * v127 * i;
                v129 = v119;
                v130 = v124;
                do
                {
                  *(_DWORD *)(v121 + 4 * v130) = *(_DWORD *)(v126 + 4 * v128);
                  v130 += 3;
                  v128 += v127;
                  --v129;
                }
                while (v129);
              }
              v124 += 3 * v119;
            }
          }
        }
        else if (v120)
        {
          v131 = 0;
          for (j = 0; j != v120; ++j)
          {
            v133 = v119;
            v134 = v131;
            if ((_DWORD)v119)
            {
              do
              {
                *(_DWORD *)(v121 + 4 * v134) = 1065353216;
                v134 += 3;
                --v133;
              }
              while (v133);
            }
            v131 += 3 * v119;
          }
        }
        if ((v92 & 1) != 0)
        {
          if (v120)
          {
            v135 = 0;
            for (k = 0; k != v120; ++k)
            {
              if ((_DWORD)v119)
              {
                v137 = *(_QWORD *)(v91 + 16);
                v138 = *(_DWORD *)(v91 + 12);
                v139 = *(_DWORD *)(v91 + 4) * v138 * k;
                v140 = v119;
                v141 = v135;
                do
                {
                  *(_DWORD *)(v121 + 4 + 4 * v141) = *(_DWORD *)(v137 + 4 * v139);
                  v141 += 3;
                  v139 += v138;
                  --v140;
                }
                while (v140);
              }
              v135 += 3 * v119;
            }
LABEL_241:
            v146 = 0;
            for (m = 0; m != v120; ++m)
            {
              v148 = v119;
              v149 = v146;
              if ((_DWORD)v119)
              {
                do
                {
                  *(_DWORD *)(v121 + 8 + 4 * v149) = 0;
                  v149 += 3;
                  --v148;
                }
                while (v148);
              }
              v146 += 3 * v119;
            }
          }
        }
        else if (v120)
        {
          v142 = 0;
          for (n = 0; n != v120; ++n)
          {
            v144 = v119;
            v145 = v142;
            if ((_DWORD)v119)
            {
              do
              {
                *(_DWORD *)(v121 + 4 + 4 * v145) = 1053609165;
                v145 += 3;
                --v144;
              }
              while (v144);
            }
            v142 += 3 * v119;
          }
          goto LABEL_241;
        }
        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v150 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
        else
          v150 = v191.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v186, v150 + 4);
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v151 = &v186;
        else
          v151 = (std::string *)v186.__r_.__value_.__r.__words[0];
        if (v150)
        {
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v152 = &v191;
          else
            v152 = (std::string *)v191.__r_.__value_.__r.__words[0];
          memmove(v151, v152, v150);
        }
        strcpy((char *)v151 + v150, "_orm");
        std::to_string(&v185, __vala);
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = &v185;
        else
          v153 = (std::string *)v185.__r_.__value_.__r.__words[0];
        if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v154 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
        else
          v154 = v185.__r_.__value_.__l.__size_;
        v155 = std::string::append(&v186, (const std::string::value_type *)v153, v154);
        v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        v187.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        v157 = std::string::append(&v187, ".png", 4uLL);
        v158 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v158;
        v157->__r_.__value_.__l.__size_ = 0;
        v157->__r_.__value_.__r.__words[2] = 0;
        v157->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v192, (uint64_t)&v186);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v185, (char *)&__p);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v185, (uint64_t)&v186, (std::__fs::filesystem::path *)&v187);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v179, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
        else
          v179 = v187;
        cv3d::cv::gess::io::SavePng((uint64_t)&v179, v175);
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v179.__r_.__value_.__l.__data_);
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v187.__r_.__value_.__l.__data_);
        if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v185.__r_.__value_.__l.__data_);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v186.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        do
          v159 = __ldaxr(v123);
        while (__stlxr(v159 - 1, v123));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
        v90 = (std::__shared_weak_count *)v183.__r_.__value_.__l.__size_;
        goto LABEL_285;
      }
    }
    else
    {
      v118 = 0;
      if (!v92)
        goto LABEL_215;
    }
    v118 = vmin_u32(*(uint32x2_t *)(v91 + 4), v118);
    goto LABEL_215;
  }
LABEL_312:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v192.__r_.__value_.__l.__data_);
  v193 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v194[*(_QWORD *)(v193 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x242620F0C](v194);
  std::ostream::~ostream();
  MEMORY[0x242621128](v195);
  return 1;
}

void sub_23C538774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  uint64_t a66;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  if (a58 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  std::ofstream::~ofstream(&a66);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::io::SaveMtlOption *cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(cv3d::cv::gess::io::SaveMtlOption *this)
{
  uint64_t **v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  void **v6;
  void **v7;
  int v8;
  uint64_t **v9;
  void **v10;
  uint64_t v11;
  int *v13;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 3) = (char *)this + 32;
  v2 = (uint64_t **)((char *)this + 24);
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  v3 = operator new(0x34uLL);
  v4 = 0;
  v3[12] = 13;
  *(_OWORD *)v3 = xmmword_23C6051B8;
  *((_OWORD *)v3 + 1) = unk_23C6051C8;
  *((_OWORD *)v3 + 2) = xmmword_23C6051D8;
  do
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    std::string::basic_string[abi:ne180100]<0>(__p, "uchar");
    WORD4(v15) = 100;
    std::string::basic_string[abi:ne180100]<0>(&v16, ".jpg");
    v13 = &v3[v4];
    v5 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>((uint64_t)this, &v3[v4], (uint64_t)&std::piecewise_construct, &v13);
    v6 = (void **)(v5 + 5);
    if (*((char *)v5 + 63) < 0)
      operator delete(*v6);
    *(_OWORD *)v6 = *(_OWORD *)__p;
    v5[7] = v15;
    BYTE7(v15) = 0;
    LOBYTE(__p[0]) = 0;
    *((_WORD *)v5 + 32) = WORD4(v15);
    v7 = (void **)(v5 + 9);
    if (*((char *)v5 + 95) < 0)
    {
      operator delete(*v7);
      v8 = SBYTE7(v15);
      *(_OWORD *)v7 = v16;
      v5[11] = v17;
      HIBYTE(v17) = 0;
      LOBYTE(v16) = 0;
      if (v8 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v7 = v16;
      v5[11] = v17;
    }
    __p[0] = &v3[v4];
    v9 = std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(v2, &v3[v4], (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
    __p[0] = &off_250D4A4C0;
    *((_QWORD *)&v15 + 1) = __p;
    std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](__p, v9 + 5);
    v10 = (void **)*((_QWORD *)&v15 + 1);
    if (*((void ***)&v15 + 1) == __p)
    {
      v10 = __p;
      v11 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v15 + 1))
        goto LABEL_13;
      v11 = 5;
    }
    (*((void (**)(void))*v10 + v11))();
LABEL_13:
    ++v4;
  }
  while (v4 != 13);
  operator delete(v3);
  return this;
}

void sub_23C538D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy(v19, 0);
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy(v18, *(_QWORD **)(v18 + 8));
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::io::ImageSaveFormat::~ImageSaveFormat(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t cv3d::cv::gess::io::LoadImagefByPath(uint64_t a1, uint64_t a2)
{
  std::string::size_type size;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string __p;
  std::string v13;
  std::string v14;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a1);
  std::__fs::filesystem::path::extension[abi:ne180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = v13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (size == 4)
  {
    v5 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if (LODWORD(v5->__r_.__value_.__l.__data_) == 1920492846)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v11 = *(std::string *)a1;
      v6 = cv3d::cv::gess::io::LoadExr(&v11, a2);
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      v7 = &v11;
      goto LABEL_29;
    }
    if (LODWORD(v5->__r_.__value_.__l.__data_) == 1735290926)
    {
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v10 = *(std::string *)a1;
      v6 = cv3d::cv::gess::io::LoadJpeg(&v10, a2);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      v7 = &v10;
      goto LABEL_29;
    }
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v9 = *(std::string *)a1;
  v6 = cv3d::cv::gess::io::LoadJpeg(&v9, a2);
  if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_30;
  v7 = &v9;
LABEL_29:
  operator delete(v7->__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v6;
}

void sub_23C53900C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 25) < 0)
    operator delete(*(void **)(v35 - 48));
  _Unwind_Resume(exception_object);
}

void sub_23C539170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x242621128](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_23C539FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  void *v40;
  int v41;

  if (a37 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a23 < 0)
  {
    operator delete(a18.__locale_);
    if ((v41 & 1) == 0)
    {
LABEL_10:
      a39 = *MEMORY[0x24BEDB7E8];
      *(uint64_t *)((char *)&a39 + *(_QWORD *)(a39 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
      MEMORY[0x242620F0C](&a40);
      std::ostream::~ostream();
      MEMORY[0x242621128](&STACK[0x230]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v40);
  goto LABEL_10;
}

uint64_t cv3d::cv::gess::mesh::MeshProperty::attribute<std::vector<unsigned int>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v3 = a3;
  v9 = a2;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::attribute<std::vector<unsigned int>>((uint64_t *)(a1 + 56), &v9, a3);
  v7 = *(_QWORD *)(v4 + 40);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 48) - v7) >> 3) <= v3)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v4, v5, v6);
  return v7 + 24 * v3;
}

void sub_23C53A300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::io::ProvideAutoSavingNormalType(uint64_t **a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  void *v9;
  uint64_t v10;
  char v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  int v15;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v9 = 0;
  v10 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(a1 + 1, (uint64_t)&v9, (unsigned __int8 *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v4 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL[0]);
    v9 = 0;
    v10 = 0;
    v6 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(a1 + 7, (uint64_t)&v9, (unsigned __int8 *)__p);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v6 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::MESH_NORMAL[0]);
      v9 = 0;
      v10 = 0;
      if (cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(a1 + 10, (uint64_t)&v9, (unsigned __int8 *)__p) == -1)
      {
        v5 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v9, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::FACE_NORMAL_ID[0]);
        v15 = 0;
        v14 = 0;
        v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<unsigned int>>(a1 + 7, (uint64_t)&v14, (unsigned __int8 *)&v9);
        if (v11 < 0)
          operator delete(v9);
        if (v7 == -1)
          v5 = 0;
        else
          v5 = 3;
      }
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v5 = 2;
    }
  }
  else
  {
    v5 = 1;
  }
  *a2 = v5;
  return 1;
}

void sub_23C53A4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t `anonymous namespace'::str_to_size_t(const char *a1)
{
  unint64_t result;
  void *exception;
  __n128 v3;
  std::string v4;
  std::string v5;
  char *__endptr;

  __endptr = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = strtoul(a1, &__endptr, 10);
  if (*__endptr)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v3 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("\"", &v4, &v5);
    MEMORY[0x242620E34](exception, &v5, v3);
  }
  return result;
}

void sub_23C53A5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x24BEDB858];
  v6 = MEMORY[0x24BEDB858] + 104;
  a1[16] = MEMORY[0x24BEDB858] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_23C53A708(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x242621128](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x242620F18](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_23C53A85C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x23C53A828);
  }
  __cxa_rethrow();
}

void sub_23C53A8A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_23C53A920(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

_QWORD *std::vector<cv3d::cv::gess::mesh::Face>::__init_with_size[abi:ne180100]<cv3d::cv::gess::mesh::Face*,cv3d::cv::gess::mesh::Face*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C53AAB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void cv3d::cv::gess::io::LoadObjContents::~LoadObjContents(cv3d::cv::gess::io::LoadObjContents *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)this + 240, *((char **)this + 31));
  v11 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 6);
  if (v8)
  {
    *((_QWORD *)this + 7) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 4) = v9;
    operator delete(v9);
  }
  v10 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v10;
    operator delete(v10);
  }
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(uint64_t a1)
{
  std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](a1 + 8);
}

void cv3d::cv::gess::mesh::Texture::~Texture(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

uint64_t std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__push_back_slow_path<cv3d::cv::gess::mesh::ObjMaterial>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v20[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  v11 = &v10[48 * v4];
  v20[0] = v10;
  v20[1] = v11;
  v20[3] = &v10[48 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  v14 = (_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v11 + 4) = v15;
  v16 = v11 + 32;
  v17 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)v11 + 5) = v17;
  if (v17)
  {
    *(_QWORD *)(v15 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v14;
    *v14 = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    *((_QWORD *)v11 + 3) = v16;
  }
  v20[2] = v11 + 48;
  std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__swap_out_circular_buffer(a1, v20);
  v18 = a1[1];
  std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer((uint64_t)v20);
  return v18;
}

void sub_23C53AEFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cv3d::cv::gess::mesh::ObjMaterial>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_OWORD *)(v6 - 48) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      v9 = (uint64_t *)(v2 + v5 - 16);
      v10 = *v9;
      *(_QWORD *)(v4 + v5 - 16) = *v9;
      v11 = v4 + v5 - 16;
      v12 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 8) = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        *(_QWORD *)(v7 - 24) = v9;
        *v9 = 0;
        *(_QWORD *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v6 - 24) = v11;
      }
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v13 = *result;
  *result = v4;
  a2[1] = v13;
  v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

uint64_t std::__split_buffer<cv3d::cv::gess::mesh::ObjMaterial>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::ObjMaterial,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

BOOL cv3d::cv::gess::mesh::Texture::SetFilePath(std::string *a1, std::string *a2)
{
  uint64_t v4;
  BOOL v5;
  std::string __p;
  uint64_t v8;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)a2);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  v4 = v8;
  if ((_BYTE)v8 && v8 != 255)
  {
    std::string::operator=(a1 + 1, a2);
    a1->__r_.__value_.__s.__data_[5] = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v4)
    v5 = v4 == 255;
  else
    v5 = 1;
  return !v5;
}

void sub_23C53B134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<cv3d::cv::gess::mesh::Texture>::__push_back_slow_path<cv3d::cv::gess::mesh::Texture const&>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>((uint64_t)v14, a2);
  v15 = v14 + 48;
  std::vector<cv3d::cv::gess::mesh::Texture>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_23C53B240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,cv3d::cv::gess::mesh::Texture const&,cv3d::cv::gess::mesh::Texture*>(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;

  v3 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v3;
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 6);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_23C53B2D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<cv3d::cv::gess::mesh::Texture>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 48);
    v2 -= 48;
    v6 = *(_WORD *)(v2 + 4);
    *(_DWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_WORD *)(v4 + 4) = v6;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    v7 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v7;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<cv3d::cv::gess::mesh::Texture>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<cv3d::cv::gess::mesh::Texture,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::shared_ptr<cv3d::cv::gess::util::Imagef>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,unsigned short>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  if (a2)
  {
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[8];
    if (v4 == a2 + 5)
    {
      v5 = 4;
      v4 = a2 + 5;
    }
    else
    {
      if (!v4)
      {
LABEL_8:
        operator delete(a2);
        return;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
    goto LABEL_8;
  }
}

void std::__function::__func<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0,std::allocator<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0>,void ()(`anonymous namespace'::obj_vertex *)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

__n128 std::__function::__func<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0,std::allocator<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0>,void ()(`anonymous namespace'::obj_vertex *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250D4A018;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0,std::allocator<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0>,void ()(`anonymous namespace'::obj_vertex *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250D4A018;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0,std::allocator<cv3d::cv::gess::io::LoadObjFile(std::string const&,cv3d::cv::gess::io::LoadObjContents &,cv3d::cv::gess::io::LoadObjOption const&,BOOL)::$_0>,void ()(`anonymous namespace'::obj_vertex *)>::operator()(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  _BYTE *v15;

  v2 = **(unsigned int **)(result + 24);
  if ((int)v2 < 1)
  {
LABEL_9:
    v9 = *(_QWORD *)(result + 8);
    v10 = 1;
LABEL_19:
    *(_DWORD *)(v9 + 288) = v10;
    return result;
  }
  v3 = 0;
  v4 = *a2;
  v5 = 1;
  do
  {
    while (!v5)
    {
      v5 = 0;
      if (++v3 == v2)
        goto LABEL_10;
    }
    v6 = (int *)(v4 + 12 * v3);
    v7 = *v6;
    v8 = v6[2];
    v5 = *v6 == v8;
    ++v3;
  }
  while (v3 != v2);
  if (v7 == v8)
    goto LABEL_9;
LABEL_10:
  if ((int)v2 < 2)
  {
LABEL_18:
    v9 = *(_QWORD *)(result + 8);
    v10 = 2;
    goto LABEL_19;
  }
  v11 = *(_DWORD *)(v4 + 8);
  v12 = 1;
  v13 = 1;
  do
  {
    while (!v13)
    {
      v13 = 0;
      if (++v12 == v2)
        goto LABEL_20;
    }
    v14 = *(_DWORD *)(v4 + 12 * v12 + 8);
    v13 = v11 == v14;
    ++v12;
  }
  while (v12 != v2);
  if (v11 == v14)
    goto LABEL_18;
LABEL_20:
  v15 = *(_BYTE **)(result + 16);
  *(_DWORD *)(*(_QWORD *)(result + 8) + 288) = 3;
  *v15 = 1;
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<std::string>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<std::string>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::string>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::string>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C53BA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::string>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::string>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::string>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::string>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C53BA7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::string>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::string>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A060;
  cv3d::cv::gess::mesh::AttributeT<std::string>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C53BAC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A060;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::string>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::string>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = off_250D4A098;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<std::string>::~AttributeT(void **a1)
{
  void **v2;

  *a1 = off_250D4A098;
  v2 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::string>::~AttributeT(void **a1)
{
  void **v3;

  *a1 = off_250D4A098;
  v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
  return MEMORY[0x2426211B8]();
}

unint64_t cv3d::cv::gess::mesh::AttributeT<std::string>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
}

void cv3d::cv::gess::mesh::AttributeT<std::string>::Reserve(uint64_t a1, std::vector<std::string>::size_type a2)
{
  std::vector<std::string>::reserve((std::vector<std::string> *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::string>::Resize(uint64_t a1, std::vector<std::string>::size_type a2)
{
  std::vector<std::string>::resize((std::vector<std::string> *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::string>::Clear(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v3 = (void **)&v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void cv3d::cv::gess::mesh::AttributeT<std::string>::PushBack(uint64_t a1)
{
  std::allocator<std::string> *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  std::vector<std::string> *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::__split_buffer<std::string> __v;

  v4 = *(_QWORD *)(a1 + 56);
  v2 = (std::allocator<std::string> *)(a1 + 56);
  v3 = v4;
  v5 = (_QWORD *)*((_QWORD *)v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (std::vector<std::string> *)((char *)v2 - 16);
    v8 = *((_QWORD *)v2 - 2);
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v8) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    __v.__end_cap_.__value_ = v2;
    if (v12)
      v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v2, v12);
    else
      v13 = 0;
    v14 = v13 + v9;
    __v.__first_ = v13;
    __v.__begin_ = v14;
    __v.__end_cap_.__value_ = &v13[v12];
    v14->__r_.__value_.__r.__words[0] = 0;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    __v.__end_ = v14 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v7, &__v);
    v6 = *(_QWORD **)(a1 + 48);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v6 = v5 + 3;
    *(_QWORD *)(a1 + 48) = v5 + 3;
  }
  *(_QWORD *)(a1 + 48) = v6;
}

void sub_23C53BDB0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::mesh::AttributeT<std::string>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  std::string __p;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = (__int128 *)(v6 + 24 * a2);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
    v6 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v8 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  }
  std::string::operator=((std::string *)(v6 + 24 * a2), (const std::string *)(v6 + 24 * a3));
  std::string::operator=((std::string *)(*(_QWORD *)(a1 + 40) + 24 * a3), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_23C53BE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *cv3d::cv::gess::mesh::AttributeT<std::string>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 40) + 24 * a3), (const std::string *)(*(_QWORD *)(a1 + 40) + 24 * a2));
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::string>::Clone@<X0>(__int128 **a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<std::string>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::string>,void>(a2, (uint64_t)v4);
}

void sub_23C53BEEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::string>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_23C53BFBC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<std::string>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, __int128 **a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = off_250D4A098;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)v4 + 40), a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[6] - (char *)a2[5]) >> 3));
  return a1;
}

void sub_23C53C028(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_23C53C0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_23C53C168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::string>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4A108;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C53C248(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::string> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::string>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::string>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::string> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::string>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::string>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<cv3d::cv::gess::math::Vector2T<float>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<cv3d::cv::gess::math::Vector2T<float>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C53C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C53C608(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A140;
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C53C650(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4A178;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::resize((_QWORD *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = (v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v3 - (_QWORD)v6;
    v9 = (uint64_t)(v3 - (_QWORD)v6) >> 2;
    if (v9 <= v7 + 1)
      v9 = v7 + 1;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v10);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = 0;
    v5 = v12 + 8;
    while (v4 != v6)
    {
      v14 = *((_DWORD *)v4 - 2);
      v4 -= 8;
      *((_DWORD *)v12 - 2) = v14;
      v12 -= 8;
      *((_DWORD *)v12 + 1) = *((_DWORD *)v4 + 1);
    }
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v4 = 0;
    v5 = v4 + 8;
  }
  a1[6] = v5;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = *(_QWORD *)(v3 + 8 * a3);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

double cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::Clone@<X0>(const cv3d::cv::gess::mesh::BaseAttribute *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>,void>(a2, (uint64_t)v4);
}

void sub_23C53C8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4A178;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<cv3d::cv::gess::math::Vector2T<float>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  _DWORD *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[8 * v8];
    v10 = *a1;
    v11 = a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *(v11 - 2);
        v11 -= 2;
        *((_DWORD *)v12 - 2) = v13;
        v12 -= 8;
        *((_DWORD *)v12 + 1) = v11[1];
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<cv3d::cv::gess::math::Vector2T<float>>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 8 * a2;
  }
  else
  {
    std::vector<cv3d::cv::gess::math::Vector2T<float>>::__append((uint64_t)a1, a2 - v2);
  }
}

void std::vector<cv3d::cv::gess::math::Vector2T<float>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 2 * a2;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(_DWORD **)a1;
    v9 = (uint64_t)v7 - *(_QWORD *)a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - (_QWORD)v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *(_DWORD **)a1;
      v7 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *(v7 - 2);
      v7 -= 2;
      *((_DWORD *)v15 - 2) = v18;
      v15 -= 8;
      *((_DWORD *)v15 + 1) = v7[1];
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, const cv3d::cv::gess::mesh::BaseAttribute *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, a2);
  *(_QWORD *)v4 = &off_250D4A178;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<cv3d::cv::gess::math::Vector2T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<float>*,cv3d::cv::gess::math::Vector2T<float>*>((char *)v4 + 40, *((_DWORD **)a2 + 5), *((_DWORD **)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  return a1;
}

void sub_23C53CB7C(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

char *std::vector<cv3d::cv::gess::math::Vector2T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector2T<float>*,cv3d::cv::gess::math::Vector2T<float>*>(char *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v7[1] = a2[1];
      v7 += 2;
      a2 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_23C53CBF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4A1E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C53CC64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<cv3d::cv::gess::math::Vector2T<float>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<std::map<unsigned short,std::string>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<std::map<unsigned short,std::string>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C53CE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C53CED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A220;
  cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C53CF1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = off_250D4A258;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::~AttributeT(void **a1)
{
  void **v2;

  *a1 = off_250D4A258;
  v2 = a1 + 5;
  std::vector<std::map<unsigned short,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::~AttributeT(void **a1)
{
  void **v3;

  *a1 = off_250D4A258;
  v3 = a1 + 5;
  std::vector<std::map<unsigned short,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
  return MEMORY[0x2426211B8]();
}

unint64_t cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
}

void **cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Reserve(uint64_t a1, unint64_t a2)
{
  return std::vector<std::map<unsigned short,std::string>>::reserve((uint64_t *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<std::map<unsigned short,std::string>>::resize((uint64_t *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Clear(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v3 = (void **)&v1;
  std::vector<std::map<unsigned short,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::PushBack(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  char **v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char **v16;
  _QWORD *v17;
  char ***v18;
  char *v19;
  char **v20;
  char **v21;
  char **v22;
  char *v23;
  char **v24;
  void *v25[5];

  v4 = *(_QWORD *)(a1 + 56);
  v2 = (_QWORD *)(a1 + 56);
  v3 = v4;
  v23 = 0;
  v24 = 0;
  v22 = &v23;
  v5 = (_QWORD *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v9 = v2 - 2;
    v10 = *(v2 - 2);
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v10) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v25[4] = v2;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v2, v14);
      v16 = v22;
    }
    else
    {
      v15 = 0;
      v16 = &v23;
    }
    v18 = (char ***)&v15[24 * v11];
    v25[0] = v15;
    v25[1] = v18;
    v25[3] = &v15[24 * v14];
    *v18 = v16;
    v19 = v23;
    v18[1] = (char **)v23;
    v20 = (char **)(v18 + 1);
    v21 = v24;
    v18[2] = v24;
    if (v21)
    {
      *((_QWORD *)v19 + 2) = v20;
      v22 = &v23;
      v23 = 0;
      v24 = 0;
    }
    else
    {
      *v18 = v20;
    }
    v25[2] = v18 + 3;
    std::vector<std::map<unsigned short,std::string>>::__swap_out_circular_buffer(v9, v25);
    v17 = *(_QWORD **)(a1 + 48);
    std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer(v25);
  }
  else
  {
    *v5 = &v23;
    v6 = v23;
    v5[1] = v23;
    v7 = v5 + 1;
    v8 = v24;
    v5[2] = v24;
    if (v8)
    {
      *((_QWORD *)v6 + 2) = v7;
      v22 = &v23;
      v23 = 0;
      v24 = 0;
    }
    else
    {
      *v5 = v7;
    }
    v17 = v5 + 3;
  }
  *(_QWORD *)(a1 + 48) = v17;
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v22, v23);
}

void sub_23C53D27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, void *a12)
{
  std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer(&a12);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v6;
  _QWORD *v7;
  char *v8;

  std::map<unsigned short,std::string>::map[abi:ne180100]((uint64_t *)&v7, *(_QWORD *)(a1 + 40) + 24 * a2);
  if (a2 != a3)
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>((uint64_t **)(*(_QWORD *)(a1 + 40) + 24 * a2), *(_QWORD **)(*(_QWORD *)(a1 + 40) + 24 * a3), (_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * a3 + 8));
  v6 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 24 * a3);
  if (v6 != &v7)
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>(v6, v7, &v8);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&v7, v8);
}

void sub_23C53D340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t **cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Copy(uint64_t **result, uint64_t a2, uint64_t a3)
{
  if (a3 != a2)
    return std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>((uint64_t **)&result[5][3 * a3], (_QWORD *)result[5][3 * a2], &result[5][3 * a2 + 1]);
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::Clone@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>,void>(a2, (uint64_t)v4);
}

void sub_23C53D3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void std::vector<std::map<unsigned short,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char **v2;
  char **v4;
  void *v5;
  char **v6;

  v1 = *a1;
  v2 = (char **)**a1;
  if (v2)
  {
    v4 = (char **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 3;
        std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **std::vector<std::map<unsigned short,std::string>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::map<unsigned short,std::string>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer(v7);
  }
  return result;
}

void sub_23C53D520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<unsigned short,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<unsigned short,std::string>>,std::reverse_iterator<std::map<unsigned short,std::string>*>,std::reverse_iterator<std::map<unsigned short,std::string>*>,std::reverse_iterator<std::map<unsigned short,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<unsigned short,std::string>>,std::reverse_iterator<std::map<unsigned short,std::string>*>,std::reverse_iterator<std::map<unsigned short,std::string>*>,std::reverse_iterator<std::map<unsigned short,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::reverse_iterator<std::map<unsigned short,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::reverse_iterator<std::map<unsigned short,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::reverse_iterator<std::map<unsigned short,std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::reverse_iterator<std::map<unsigned short,std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v1, *(char **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<unsigned short,std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<unsigned short,std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(i - 24, *(char **)(i - 16));
  }
}

void std::vector<std::map<unsigned short,std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::map<unsigned short,std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v3 - 24, *(char **)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void **std::vector<std::map<unsigned short,std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<std::map<unsigned short,std::string>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_23C53D928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<unsigned short,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::string>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_23C53D978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,std::string>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::string> const&>(v5, v6, v4 + 16, (uint64_t)(v4 + 16));
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,std::string> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__find_equal<unsigned short>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_WORD *)v6 + 16) = *(_WORD *)a2;
  v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_23C53DCC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = off_250D4A258;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<std::map<unsigned short,std::string>>::__init_with_size[abi:ne180100]<std::map<unsigned short,std::string>*,std::map<unsigned short,std::string>*>((uint64_t *)v4 + 5, a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
  return a1;
}

void sub_23C53DD3C(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::map<unsigned short,std::string>>::__init_with_size[abi:ne180100]<std::map<unsigned short,std::string>*,std::map<unsigned short,std::string>*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*,std::map<unsigned short,std::string>*,std::map<unsigned short,std::string>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_23C53DDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::map<unsigned short,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*,std::map<unsigned short,std::string>*,std::map<unsigned short,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::map<unsigned short,std::string>::map[abi:ne180100](v4, v6);
      v6 += 24;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23C53DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<unsigned short,std::string>>,std::map<unsigned short,std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 24;
      std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(v1 - 24, *(char **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4A2C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C53DF44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::map<unsigned short,std::string>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,std::string>,std::__tree_node<std::__value_type<unsigned short,std::string>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v9 + 5));
          std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__node_insert_multi(v5, (uint64_t)v16);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_multi<std::pair<unsigned short const,std::string> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_23C53E100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(unsigned __int16 *)(a2 + 32) >= *((unsigned __int16 *)v4 + 16))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__emplace_multi<std::pair<unsigned short const,std::string> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<unsigned short,std::string>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,std::string>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,std::string>>>::__construct_node<std::pair<unsigned short const,std::string> const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((unsigned __int16 *)v7 + 16) >= *((unsigned __int16 *)v4 + 16))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<std::vector<unsigned int>>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<std::vector<unsigned int>>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C53E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C53E4B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A300;
  cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C53E4FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = off_250D4A338;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::~AttributeT(void **a1)
{
  void **v2;

  *a1 = off_250D4A338;
  v2 = a1 + 5;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v2);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::~AttributeT(void **a1)
{
  void **v3;

  *a1 = off_250D4A338;
  v3 = a1 + 5;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(a1);
  return MEMORY[0x2426211B8]();
}

unint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Size(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Reserve(uint64_t a1, unint64_t a2)
{
  return std::vector<std::vector<unsigned int>>::reserve((uint64_t *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<std::vector<unsigned int>>::resize((uint64_t *)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Clear(uint64_t a1)
{
  __int128 v1;
  uint64_t v2;
  void **v3;

  v1 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v3 = (void **)&v1;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::PushBack(uint64_t a1)
{
  void *__p;
  void *v2;
  uint64_t v3;

  __p = 0;
  v2 = 0;
  v3 = 0;
  std::vector<std::vector<unsigned int>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), (uint64_t)&__p);
  if (__p)
  {
    v2 = __p;
    operator delete(__p);
  }
}

void sub_23C53E728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Swap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *__p;
  _BYTE *v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 40) + 24 * a2;
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
  if (a2 != a3)
  {
    v7 = *(_QWORD *)(a1 + 40);
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)(v7 + 24 * a2), *(char **)(v7 + 24 * a3), *(_QWORD *)(v7 + 24 * a3 + 8), (uint64_t)(*(_QWORD *)(v7 + 24 * a3 + 8) - *(_QWORD *)(v7 + 24 * a3)) >> 2);
  }
  v8 = (char *)(*(_QWORD *)(a1 + 40) + 24 * a3);
  if (v8 != (char *)&__p)
    std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>(v8, (char *)__p, (uint64_t)v10, (v10 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_23C53E800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Copy(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3 != a2)
  {
    v3 = *((_QWORD *)result + 5);
    return std::vector<cv3d::cv::gess::mesh::HEdgeHandle>::__assign_with_size[abi:ne180100]<cv3d::cv::gess::mesh::HEdgeHandle*,cv3d::cv::gess::mesh::HEdgeHandle*>((char *)(v3 + 24 * a3), *(char **)(v3 + 24 * a2), *(_QWORD *)(v3 + 24 * a2 + 8), (uint64_t)(*(_QWORD *)(v3 + 24 * a2 + 8) - *(_QWORD *)(v3 + 24 * a2)) >> 2);
  }
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::Clone@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>,void>(a2, (uint64_t)v4);
}

void sub_23C53E8A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

uint64_t std::vector<std::vector<unsigned int>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_23C53E970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_23C53EB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_23C53ECA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t *a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = off_250D4A338;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>((_QWORD *)v4 + 5, a2[5], a2[6], 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 3));
  return a1;
}

void sub_23C53ED10(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23C53ED88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23C53EE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::mesh::HEdgeHandle>>,std::vector<cv3d::cv::gess::mesh::HEdgeHandle>*>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4A3A8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C53EEE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<std::vector<unsigned int>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeContainer::Add<unsigned short>(char **a1, uint64_t a2, __int128 *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29[2];
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  _QWORD *v33;

  v5 = *a1;
  v6 = a1[1];
  if (*a1 == v6)
  {
    v7 = 0;
    v8 = *a1;
  }
  else
  {
    v7 = 0;
    v8 = *a1;
    while (*(_QWORD *)v8)
    {
      v8 += 16;
      v7 = (v7 + 1);
      if (v8 == v6)
        goto LABEL_8;
    }
  }
  if (v8 == v6)
  {
LABEL_8:
    v29[0] = 0;
    v29[1] = 0;
    v9 = (uint64_t)(a1 + 2);
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v6 >= v10)
    {
      v12 = (v6 - v5) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)v5;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      v33 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v15);
      v18 = &v16[16 * v12];
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v31 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v32 = v24;
      v30 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      v11 = v6 + 16;
    }
    a1[1] = v11;
  }
  v29[0] = (uint64_t)cv3d::cv::gess::util::os::GessTypeID<unsigned short>;
  std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned short>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned short>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>(a3, v29, &v30);
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::operator=[abi:ne180100]((uint64_t)&(*a1)[16 * v7], (__int128 *)&v30);
  v25 = (std::__shared_weak_count *)v31.i64[0];
  if (v31.i64[0])
  {
    v26 = (unint64_t *)(v31.i64[0] + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_23C53F198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned short>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned short>>,std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned short>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_23C53F1F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,cv3d::cv::gess::util::os::GessTypeIDT,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned short>>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_250D4A3E0;
  cv3d::cv::gess::mesh::AttributeT<unsigned short>::AttributeT(a1 + 3, a2, a3);
  return a1;
}

void sub_23C53F240(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250D4A3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_emplace<cv3d::cv::gess::mesh::AttributeT<unsigned short>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<unsigned short>::AttributeT(_QWORD *a1, __int128 *a2, uint64_t *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;

  *a1 = off_250D49588;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  *a1 = &off_250D4A418;
  a1[4] = v7;
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void cv3d::cv::gess::mesh::AttributeT<unsigned short>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1)
{
  cv3d::cv::gess::mesh::AttributeT<unsigned short>::~AttributeT(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned short>::Size(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 1;
}

void cv3d::cv::gess::mesh::AttributeT<unsigned short>::Reserve(uint64_t a1, unint64_t a2)
{
  std::vector<unsigned short>::reserve((void **)(a1 + 40), a2);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned short>::Resize(uint64_t a1, unint64_t a2)
{
  std::vector<unsigned short>::resize(a1 + 40, a2);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned short>::Clear(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned short>::PushBack(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _WORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int16 v15;

  v2 = (uint64_t)(a1 + 7);
  v3 = a1[7];
  v4 = (char *)a1[6];
  if ((unint64_t)v4 >= v3)
  {
    v6 = (char *)a1[5];
    v7 = v4 - v6;
    if (v4 - v6 <= -3)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = v7 >> 1;
    v9 = v3 - (_QWORD)v6;
    if (v9 <= (v7 >> 1) + 1)
      v10 = v8 + 1;
    else
      v10 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFFELL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v2, v11);
      v6 = (char *)a1[5];
      v4 = (char *)a1[6];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[2 * v8];
    v14 = &v12[2 * v11];
    *(_WORD *)v13 = 0;
    v5 = v13 + 2;
    while (v4 != v6)
    {
      v15 = *((_WORD *)v4 - 1);
      v4 -= 2;
      *((_WORD *)v13 - 1) = v15;
      v13 -= 2;
    }
    a1[5] = v13;
    a1[6] = v5;
    a1[7] = v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_WORD *)v4 = 0;
    v5 = v4 + 2;
  }
  a1[6] = v5;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned short>::Swap(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_WORD *)(v3 + 2 * a2);
  *(_WORD *)(v3 + 2 * a2) = *(_WORD *)(v3 + 2 * a3);
  *(_WORD *)(v3 + 2 * a3) = v4;
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned short>::Copy(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(*(_QWORD *)(result + 40) + 2 * a3) = *(_WORD *)(*(_QWORD *)(result + 40) + 2 * a2);
  return result;
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned short>::Blend(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(*(_QWORD *)(result + 40) + 2 * a2) = (*(unsigned __int16 *)(*(_QWORD *)(result + 40) + 2 * a3)
                                                 + *(unsigned __int16 *)(*(_QWORD *)(result + 40) + 2 * a2)) >> 1;
  return result;
}

_QWORD *cv3d::cv::gess::mesh::AttributeT<unsigned short>::Clone@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = (cv3d::cv::gess::mesh::BaseAttribute *)operator new();
  cv3d::cv::gess::mesh::AttributeT<unsigned short>::AttributeT(v4, a1);
  return std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned short>,void>(a2, (uint64_t)v4);
}

void sub_23C53F4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2426211B8](v1, 0x1093C400FBCE358);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::mesh::AttributeT<unsigned short>::MemoryConsumption(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void cv3d::cv::gess::mesh::AttributeT<unsigned short>::~AttributeT(cv3d::cv::gess::mesh::BaseAttribute *this)
{
  void *v2;

  *(_QWORD *)this = &off_250D4A418;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute((void **)this);
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

cv3d::cv::gess::mesh::BaseAttribute *cv3d::cv::gess::mesh::AttributeT<unsigned short>::AttributeT(cv3d::cv::gess::mesh::BaseAttribute *a1, uint64_t a2)
{
  cv3d::cv::gess::mesh::BaseAttribute *v4;

  v4 = cv3d::cv::gess::mesh::BaseAttribute::BaseAttribute(a1, (const cv3d::cv::gess::mesh::BaseAttribute *)a2);
  *(_QWORD *)v4 = &off_250D4A418;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((_QWORD *)v4 + 5, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 1);
  return a1;
}

void sub_23C53F760(_Unwind_Exception *a1)
{
  void **v1;

  cv3d::cv::gess::mesh::BaseAttribute::~BaseAttribute(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C53F7D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::shared_ptr[abi:ne180100]<cv3d::cv::gess::mesh::AttributeT<unsigned short>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250D4A488;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_23C53F840(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<unsigned short> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<unsigned short>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned short>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2426211B8);
}

uint64_t std::__shared_ptr_pointer<cv3d::cv::gess::mesh::AttributeT<unsigned short> *,std::shared_ptr<cv3d::cv::gess::mesh::BaseAttribute>::__shared_ptr_default_delete<cv3d::cv::gess::mesh::BaseAttribute,cv3d::cv::gess::mesh::AttributeT<unsigned short>>,std::allocator<cv3d::cv::gess::mesh::AttributeT<unsigned short>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::string>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned short>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned short>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned short>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_WORD *)v6 + 28) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_23C53FA68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [5],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_23C53FB0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, int **a4)
{
  uint64_t v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t *)v5;
        v9 = *(_DWORD *)(v5 + 32);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, int **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_23C53FC40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>::pair[abi:ne180100]<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>(uint64_t a1, int *a2)
{
  int v3;
  _QWORD *v4;

  v3 = *a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)a1 = v3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v4 = (_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "uchar");
  *(_WORD *)(a1 + 32) = 100;
  std::string::basic_string[abi:ne180100]<0>(v4, ".jpg");
  return a1;
}

void sub_23C53FCCC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,cv3d::cv::gess::io::ImageSaveFormat>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const,cv3d::cv::gess::io::ImageSaveFormat>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::__map_value_compare<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>,std::less<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE>,true>,std::allocator<std::__value_type<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::function<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>>>>::__emplace_unique_key_args<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE,std::piecewise_construct_t const&,std::tuple<cv3d::cv::gess::mesh::BUILT_IN_TEXTURE_TYPE const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 8) = 0;
    std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__function::__func<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0,std::allocator<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::~__func()
{
  JUMPOUT(0x2426211B8);
}

_QWORD *std::__function::__func<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0,std::allocator<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_250D4A4C0;
  return result;
}

void std::__function::__func<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0,std::allocator<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_250D4A4C0;
}

BOOL std::__function::__func<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0,std::allocator<cv3d::cv::gess::io::SaveMtlOption::SaveMtlOption(void)::$_0>,BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v6;
  std::string::value_type *v7;
  int v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _BOOL8 v12;
  _BOOL8 v13;
  _BYTE v15[7];
  std::string v16;

  v7 = *(std::string::value_type **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v15 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v15[3] = *(_DWORD *)(a2 + 19);
  v8 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v9 = *(unsigned __int8 *)(a4 + 55);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 40);
  if (v9 != 4)
    goto LABEL_9;
  if (v10 >= 0)
    v11 = (_DWORD *)(a4 + 32);
  else
    v11 = *(_DWORD **)(a4 + 32);
  if (*v11 == 1920492846)
  {
    if (v8 < 0)
    {
      std::string::__init_copy_ctor_external(&v16, v7, v6);
    }
    else
    {
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      v16.__r_.__value_.__l.__size_ = v6;
      LODWORD(v16.__r_.__value_.__r.__words[2]) = *(_DWORD *)v15;
      *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v15[3];
      *((_BYTE *)&v16.__r_.__value_.__s + 23) = v8;
    }
    v12 = cv3d::cv::gess::io::SaveExr((char *)&v16, a3, 1);
  }
  else
  {
    if (*v11 != 1735290926)
    {
LABEL_9:
      if (v8 < 0)
      {
        std::string::__init_copy_ctor_external(&v16, v7, v6);
      }
      else
      {
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
        v16.__r_.__value_.__l.__size_ = v6;
        LODWORD(v16.__r_.__value_.__r.__words[2]) = *(_DWORD *)v15;
        *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v15[3];
        *((_BYTE *)&v16.__r_.__value_.__s + 23) = v8;
      }
      v12 = cv3d::cv::gess::io::SaveJpeg((uint64_t)&v16, a3, *(unsigned __int16 *)(a4 + 24));
      goto LABEL_21;
    }
    if (v8 < 0)
    {
      std::string::__init_copy_ctor_external(&v16, v7, v6);
    }
    else
    {
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
      v16.__r_.__value_.__l.__size_ = v6;
      LODWORD(v16.__r_.__value_.__r.__words[2]) = *(_DWORD *)v15;
      *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v15[3];
      *((_BYTE *)&v16.__r_.__value_.__s + 23) = v8;
    }
    v12 = cv3d::cv::gess::io::SavePng((uint64_t)&v16, a3);
  }
LABEL_21:
  v13 = v12;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      return v13;
LABEL_25:
    operator delete(v7);
    return v13;
  }
  if (v8 < 0)
    goto LABEL_25;
  return v13;
}

void sub_23C53FFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
    operator delete(a10);
  if (v16 < 0)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__value_func<BOOL ()(std::string,cv3d::cv::gess::util::Imagef const&,cv3d::cv::gess::io::ImageSaveFormat const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23C540170(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void OUTLINED_FUNCTION_1_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 187, a4);
}

void cv3d::cv::gess::math::chromicity_distance(float32x4_t *a1, float32x4_t *a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, double a8, double a9, float32x4_t a10)
{
  _BOOL4 v12;
  int v13;
  float v14;
  _BOOL4 v15;
  float v16;
  float v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  BOOL v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  char v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  float32x4_t v32;
  BOOL v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  BOOL v37;
  float v38;
  float v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  int v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float32x4_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;

  LODWORD(a7) = a2->i32[0];
  LODWORD(a8) = a2->i32[1];
  LODWORD(a9) = a2->i32[2];
  a4.i64[0] = a1->i64[0];
  a6.i32[0] = HIDWORD(a1->i64[0]);
  a5.i32[0] = a1->i32[2];
  a10.i32[0] = 869711765;
  if (COERCE_FLOAT(a1->i64[0]) >= 0.0000001 || a6.f32[0] >= 0.0000001 || a5.f32[0] >= 0.0000001)
  {
    v12 = *(float *)&a7 < 0.0000001;
    if (*(float *)&a8 < 0.0000001)
      v12 = 1;
    v13 = *(float *)&a9 < 0.0000001 || v12;
    v14 = 1.0 - *(float *)&a7;
    v15 = (float)(1.0 - *(float *)&a7) < 0.0000001;
    v16 = 1.0 - *(float *)&a8;
    v17 = 1.0 - *(float *)&a9;
    if ((float)(1.0 - *(float *)&a9) < 0.0000001)
      v15 = 1;
    v18 = v16 < 0.0000001 || v15;
    if (((v13 & 1) != 0 || (v18 & 1) != 0) && (v13 ^ 1 | v18) == 1)
    {
      v19 = *(float *)&a8 >= 0.0000001;
      if (v14 >= 0.0000001 || *(float *)&a9 >= 0.0000001 || *(float *)&a8 >= 0.0000001)
      {
        v20 = v17 >= 0.0000001 || *(float *)&a7 >= 0.0000001;
        if ((v20 || v19) && (*(float *)&a7 >= 0.0000001 || *(float *)&a9 >= 0.0000001 || v16 >= 0.0000001))
        {
          v21 = v18 ^ 1;
          if (((v13 ^ 1 | v21) & 1) != 0)
            goto LABEL_28;
          if (v14 >= 0.0000001 || v16 >= 0.0000001 || *(float *)&a9 >= 0.0000001)
          {
            v27 = v14 >= 0.0000001 || v19;
            if (v14 >= 0.0000001 || *(float *)&a8 >= 0.0000001 || v17 >= 0.0000001)
            {
              if (*(float *)&a7 >= 0.0000001 || v16 >= 0.0000001 || v17 >= 0.0000001)
              {
                if (*(float *)&a9 < 0.0000001)
                  v27 = 1;
                if ((v27 & 1) != 0)
                {
                  v28 = *(float *)&a8 < 0.0000001 || v14 >= 0.0000001;
                  if (v28 || *(float *)&a9 >= 0.0000001)
                  {
                    if (*(float *)&a7 < 0.0000001)
                      LOBYTE(v19) = 1;
                    if (!v19 && v17 < 0.0000001)
                    {
                      v26 = (float32x4_t)xmmword_23C605200;
                      goto LABEL_114;
                    }
                    v29 = *(float *)&a8 < 0.0000001 || *(float *)&a7 >= 0.0000001;
                    if (!v29 && v17 < 0.0000001)
                      goto LABEL_106;
                    v30 = *(float *)&a7 < 0.0000001 || v16 >= 0.0000001;
                    if (!v30 && *(float *)&a9 < 0.0000001)
                    {
                      v26 = (float32x4_t)xmmword_23C605210;
                      goto LABEL_100;
                    }
                    if (*(float *)&a9 >= 0.0000001 && *(float *)&a7 < 0.0000001 && v16 < 0.0000001)
                      goto LABEL_99;
LABEL_28:
                    if (((v13 | v21) & 1) != 0 || v14 < 0.0000001 && v17 < 0.0000001 && v16 < 0.0000001)
                      return;
                    v22 = v16 < 0.0000001 || v14 >= 0.0000001;
                    if (!v22 && v17 >= 0.0000001)
                    {
                      v23.i32[0] = 0;
                      v23.f32[1] = -*(float *)&a9;
                      v23.i64[1] = a2->u32[1];
                      v24 = vmulq_f32(v23, v23);
                      v24.i32[3] = 0;
                      v25 = vpaddq_f32(v24, v24);
                      a4 = vpaddq_f32(v25, v25);
                      if (a4.f32[0] <= 0.0)
                      {
                        v26 = (float32x4_t)xmmword_23C603EC0;
                      }
                      else
                      {
                        a4 = vsqrtq_f32(a4);
                        v26 = vdivq_f32(v23, a4);
                      }
                      goto LABEL_104;
                    }
                    v33 = v14 < 0.0000001 || v16 >= 0.0000001;
                    if (!v33 && v17 >= 0.0000001)
                    {
                      v34.i32[1] = 0;
                      v34.f32[0] = -*(float *)&a9;
                      v34.i64[1] = a2->u32[0];
                      v35 = vmulq_f32(v34, v34);
                      v35.i32[3] = 0;
                      v36 = vpaddq_f32(v35, v35);
                      a4 = vpaddq_f32(v36, v36);
                      if (a4.f32[0] > 0.0)
                      {
                        a4 = vsqrtq_f32(a4);
                        v26 = vdivq_f32(v34, a4);
LABEL_100:
                        v60 = v26;
                        v45 = a1;
                        v46 = 1;
LABEL_105:
                        cv3d::cv::gess::math::distance_face(&v60, v45, a2, v46, *(double *)v26.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9, a10);
                        return;
                      }
LABEL_99:
                      v26 = (float32x4_t)xmmword_23C603EC0;
                      goto LABEL_100;
                    }
                    v37 = v14 < 0.0000001;
                    if (v16 < 0.0000001)
                      v37 = 1;
                    if (v37 || v17 >= 0.0000001)
                    {
                      if (v14 >= 0.0000001 || v16 >= 0.0000001)
                      {
                        if (v14 >= 0.0000001 || v17 >= 0.0000001)
                        {
                          if (v16 < 0.0000001 && v17 < 0.0000001)
                          {
                            v38 = a5.f32[0] >= a6.f32[0] ? a6.f32[0] : a5.f32[0];
                            if (a4.f32[0] > (float)(*(float *)&a7 * v38))
                            {
                              if (a5.f32[0] >= a6.f32[0])
                                v39 = a2->f32[1];
                              else
                                v39 = a2->f32[2];
                              v40 = 2;
                              if (a5.f32[0] >= a6.f32[0])
                                v40 = 1;
                              v59 = (float32x4_t)COERCE_UNSIGNED_INT(-v39);
                              *(_DWORD *)((unint64_t)&v59 | (4 * v40)) = LODWORD(a7);
                              v41 = vmulq_f32(v59, v59);
                              v41.i32[3] = 0;
                              v42 = vpaddq_f32(v41, v41);
                              v43 = vpaddq_f32(v42, v42);
                              if (v43.f32[0] <= 0.0)
                              {
                                v44 = (float32x4_t)xmmword_23C603EC0;
                              }
                              else
                              {
                                v43 = vsqrtq_f32(v43);
                                v44 = vdivq_f32(v59, v43);
                              }
                              v60 = v44;
                              if (a5.f32[0] >= a6.f32[0])
                                cv3d::cv::gess::math::distance_face(&v60, a1, a2, 2, *(double *)v44.i64, *(double *)v43.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9, a10);
                              else
                                cv3d::cv::gess::math::distance_face(&v60, a1, a2, 1, *(double *)v44.i64, *(double *)v43.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9, a10);
                            }
                          }
                          return;
                        }
                        if (a5.f32[0] >= a4.f32[0])
                          v52 = a4.f32[0];
                        else
                          v52 = a5.f32[0];
                        if (a6.f32[0] <= (float)(*(float *)&a8 * v52))
                          return;
                        if (a5.f32[0] >= a4.f32[0])
                        {
                          v53.i32[3] = 0;
                          v53.f32[0] = -*(float *)&a8;
                          *(uint64_t *)((char *)v53.i64 + 4) = a2->u32[0];
                        }
                        else
                        {
                          v53.i32[0] = 0;
                          v53.f32[1] = -*(float *)&a9;
                          v53.i64[1] = a2->u32[1];
                        }
                        v57 = vmulq_f32(v53, v53);
                        v57.i32[3] = 0;
                        v58 = vpaddq_f32(v57, v57);
                        a6 = vpaddq_f32(v58, v58);
                        if (a6.f32[0] <= 0.0)
                        {
                          v56 = (float32x4_t)xmmword_23C603EC0;
                        }
                        else
                        {
                          a6 = vsqrtq_f32(a6);
                          v56 = vdivq_f32(v53, a6);
                        }
                        v60 = v56;
                        if (a5.f32[0] >= a4.f32[0])
                        {
                          cv3d::cv::gess::math::distance_face(&v60, a1, a2, 2, *(double *)v56.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9, a10);
                          return;
                        }
                      }
                      else
                      {
                        if (a6.f32[0] >= a4.f32[0])
                          v50 = a4.f32[0];
                        else
                          v50 = a6.f32[0];
                        if (a5.f32[0] <= (float)(*(float *)&a9 * v50))
                          return;
                        v51.i64[0] = 0;
                        v51.i32[3] = 0;
                        if (a6.f32[0] >= a4.f32[0])
                        {
                          v51.f32[0] = -*(float *)&a9;
                          v51.i32[2] = a2->i32[0];
                        }
                        else
                        {
                          v51.f32[1] = -*(float *)&a9;
                          v51.i32[2] = a2->i32[1];
                        }
                        v54 = vmulq_f32(v51, v51);
                        v54.i32[3] = 0;
                        v55 = vpaddq_f32(v54, v54);
                        a5 = vpaddq_f32(v55, v55);
                        if (a5.f32[0] <= 0.0)
                        {
                          v56 = (float32x4_t)xmmword_23C603EC0;
                        }
                        else
                        {
                          a5 = vsqrtq_f32(a5);
                          v56 = vdivq_f32(v51, a5);
                        }
                        v60 = v56;
                        if (a6.f32[0] >= a4.f32[0])
                        {
                          cv3d::cv::gess::math::distance_face(&v60, a1, a2, 1, *(double *)v56.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9, a10);
                          return;
                        }
                      }
                      cv3d::cv::gess::math::distance_face(&v60, a1, a2, 0, *(double *)v56.i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, a7, a8, a9, a10);
                      return;
                    }
                    v47.i32[3] = 0;
                    v47.f32[0] = -*(float *)&a8;
                    *(uint64_t *)((char *)v47.i64 + 4) = a2->u32[0];
                    v48 = vmulq_f32((float32x4_t)v47.u64[0], (float32x4_t)v47.u64[0]);
                    v48.i32[3] = 0;
                    v49 = vpaddq_f32(v48, v48);
                    a4 = vpaddq_f32(v49, v49);
                    if (a4.f32[0] > 0.0)
                    {
                      a4 = vsqrtq_f32(a4);
                      v26 = vdivq_f32(v47, a4);
LABEL_114:
                      v60 = v26;
                      v45 = a1;
                      v46 = 2;
                      goto LABEL_105;
                    }
LABEL_106:
                    v26 = (float32x4_t)xmmword_23C603EC0;
                    goto LABEL_114;
                  }
                  v26 = (float32x4_t)xmmword_23C605210;
                }
                else
                {
                  v26 = (float32x4_t)xmmword_23C605200;
                }
LABEL_104:
                v60 = v26;
                v45 = a1;
                v46 = 0;
                goto LABEL_105;
              }
              if (a4.f32[0] < 0.0000001)
                return;
              v32.i32[0] = 0;
              v32.i32[3] = 0;
              v32.i32[1] = a4.i32[1];
            }
            else
            {
              if (a6.f32[0] < 0.0000001)
                return;
              v32.i32[3] = 0;
              v32.i64[0] = a4.u32[0];
            }
            v32.i32[2] = a5.i32[0];
            v60 = v32;
          }
          else
          {
            if (a5.f32[0] < 0.0000001)
              return;
            v60 = a4;
          }
          cv3d::cv::gess::math::distance(a1, &v60);
        }
      }
    }
  }
}

float cv3d::cv::gess::math::distance(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  double v5;

  v2 = vmulq_f32(*a1, *a1);
  v2.i32[3] = 0;
  v3 = vmulq_f32(*a2, *a2);
  v3.i32[3] = 0;
  v4 = vmulq_f32(*a1, *a2);
  v4.i32[3] = 0;
  v5 = 1.0
     - (float)((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v4, v4))
                     / sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v2, v2))))
             / sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v3, v3))));
  if (v5 < 0.0)
    v5 = 0.0;
  if (v5 > 1.0)
    return 1.0;
  return v5;
}

float cv3d::cv::gess::math::distance_face(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, float32x4_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float32x4_t v25;
  double v26;
  __int128 v28;

  v12 = *a2;
  v13 = vmulq_f32(*a2, *a1);
  v13.i32[3] = 0;
  v14 = vpaddq_f32(v13, v13);
  v15 = vsubq_f32(*a2, vmulq_n_f32(*a1, vaddv_f32(*(float32x2_t *)v14.f32)));
  v14.f32[0] = *((float *)&v28 + a4) * *((float *)&v28 + a4);
  v16 = a3->f32[a4] * a3->f32[a4];
  v17 = vmulq_f32(v15, v15);
  v17.i32[3] = 0;
  v18 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
  v19 = vmulq_f32(*a3, *a3);
  v19.i32[3] = 0;
  v20 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
  a12.f32[0] = v16 * (float)(v18 - v14.f32[0]);
  v14.f32[0] = v14.f32[0] * (float)(v20 - v16);
  v21 = vmulq_f32(v12, v12);
  v21.i32[3] = 0;
  v22 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v14, a12)), 0), *(int8x16_t *)a3, (int8x16_t)v15);
  v23 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)));
  if (a12.f32[0] <= v14.f32[0])
    v24 = v18;
  else
    v24 = v20;
  v25 = vmulq_f32(v12, v22);
  v25.i32[3] = 0;
  v26 = 1.0 - (float)((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25)) / v23) / sqrtf(v24));
  if (v26 < 0.0)
    v26 = 0.0;
  if (v26 > 1.0)
    return 1.0;
  return v26;
}

float *cv3d::cv::gess::math::RGB2HSV(float *result, uint64_t a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  double v8;
  float v9;
  double v10;
  float v11;
  float v12;
  BOOL v13;
  double v14;
  double v15;
  float v16;

  v2 = *result;
  v3 = result[1];
  v4 = result[2];
  if (*result >= v3)
    v5 = result[1];
  else
    v5 = *result;
  if (*result <= v3)
    v6 = result[1];
  else
    v6 = *result;
  if (v5 >= v4)
    v7 = v4;
  else
    v7 = v5;
  v8 = v6;
  if (v6 <= v4)
    v8 = v4;
  v9 = v8;
  *(float *)(a2 + 8) = v9;
  v10 = v8 - v7;
  if (v10 >= 0.00001)
  {
    if (v8 <= 0.0)
    {
      *(_DWORD *)(a2 + 4) = 0;
      v11 = NAN;
    }
    else
    {
      v12 = v10 / v8;
      *(float *)(a2 + 4) = v12;
      if (v8 <= v2)
      {
        v15 = (float)(v3 - v4) / v10;
      }
      else
      {
        v13 = v8 > v3;
        v14 = (float)(v2 - v3) / v10 + 4.0;
        v15 = (float)(v4 - v2) / v10 + 2.0;
        if (v13)
          v15 = v14;
      }
      v16 = v15;
      v11 = v16 * 60.0;
      if (v11 < 0.0)
        v11 = v11 + 360.0;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 4) = 0;
    v11 = 0.0;
  }
  *(float *)a2 = v11;
  return result;
}

float *cv3d::cv::gess::math::HSV2RGB(float *result, float *a2)
{
  float v2;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;

  v2 = result[1];
  if (v2 <= 0.0)
  {
    *a2 = result[2];
    v8 = result[2];
LABEL_7:
    a2[1] = v8;
LABEL_8:
    v8 = result[2];
  }
  else
  {
    v3 = 0.0;
    if (*result < 360.0)
      v3 = *result / 60.0;
    v4 = (uint64_t)v3;
    v5 = v3 - (float)(uint64_t)v3;
    v6 = result[2];
    v7 = v2;
    v8 = (1.0 - v2) * v6;
    v9 = (1.0 - (float)(v2 * v5)) * v6;
    v10 = (1.0 - v7 * (1.0 - v5)) * v6;
    switch(v4)
    {
      case 0:
        *a2 = v6;
        a2[1] = v10;
        break;
      case 1:
        *a2 = v9;
        a2[1] = result[2];
        break;
      case 2:
        *a2 = v8;
        a2[1] = result[2];
        v8 = (1.0 - v7 * (1.0 - v5)) * v6;
        break;
      case 3:
        *a2 = v8;
        a2[1] = v9;
        goto LABEL_8;
      case 4:
        *a2 = v10;
        goto LABEL_7;
      default:
        *a2 = v6;
        a2[1] = v8;
        v8 = v9;
        break;
    }
  }
  a2[2] = v8;
  return result;
}

float cv3d::cv::gess::math::RGB2HSL(float *a1, cv3d::cv::gess::math *this, uint64_t a3, float *a4)
{
  return cv3d::cv::gess::math::RGB2HSL(this, *a1, a1[1], a1[2], (float *)this + 1, (float *)this + 2, a4);
}

float cv3d::cv::gess::math::RGB2HSL(cv3d::cv::gess::math *this, float a2, float a3, float a4, float *a5, float *a6, float *a7)
{
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float result;
  float v29;
  float v30;
  float v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v7 = &v30;
  v29 = a2;
  v30 = a3;
  v8 = &v31;
  v31 = a4;
  if (a2 >= a3)
    v9 = a2;
  else
    v9 = a3;
  v10 = 4 * (a2 < a3);
  if (a2 >= a3)
    v11 = &v29;
  else
    v11 = &v30;
  if (v9 < a4)
  {
    v10 = 8;
    v11 = &v31;
  }
  v12 = *(float *)((char *)&v29 + v10);
  v13 = (char *)v11 - (char *)&v29;
  if (a3 >= a2)
    v14 = a2;
  else
    v14 = a3;
  v15 = 4 * (a3 < a2);
  if (a3 >= a2)
    v7 = &v29;
  if (v14 <= a4)
    v8 = v7;
  else
    v15 = 8;
  v16 = v13 >> 2;
  v17 = *(float *)((char *)&v29 + v15);
  v18 = (float)(v12 + v17) * 0.5;
  *a6 = v18;
  if (v13 >> 2 == v8 - &v29)
  {
    *a5 = 0.0;
    v19 = 0.0;
  }
  else
  {
    v20 = v12 - v17;
    v21 = (float)(v12 - v17) / (float)(v12 + v17);
    v22 = (float)(v12 - v17) / (2.0 - v12 - v17);
    if (v18 <= 0.5)
      v22 = v21;
    *a5 = v22;
    if (v16)
    {
      if (v16 == 1)
      {
        v23 = (float)(a4 - a2) / v20;
        v24 = 2.0;
      }
      else
      {
        if (v16 != 2)
        {
          v19 = *(float *)this;
          goto LABEL_31;
        }
        v23 = (float)(a2 - a3) / v20;
        v24 = 4.0;
      }
      v19 = v23 + v24;
    }
    else
    {
      v25 = (float)(a3 - a4) / v20;
      v26 = a3 < a4;
      v27 = 0.0;
      if (v26)
        v27 = 6.0;
      v19 = v27 + v25;
    }
  }
LABEL_31:
  result = v19 / 6.0;
  *(float *)this = result;
  return result;
}

float *cv3d::cv::gess::math::HSL2RGB(float *a1, cv3d::cv::gess::math *this, uint64_t a3, float *a4)
{
  return cv3d::cv::gess::math::HSL2RGB((float *)this, *a1, a1[1], a1[2], (float *)this + 1, (float *)this + 2, a4);
}

float *cv3d::cv::gess::math::HSL2RGB(float *this, float a2, float a3, float a4, float *a5, float *a6, float *a7)
{
  float v7;
  float v8;
  float v9;
  double v10;
  float v11;
  float v12;
  double v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;

  if (a3 < 0.000001)
  {
    *a6 = a4;
    *a5 = a4;
    *this = a4;
    return this;
  }
  v7 = (float)(a3 + a4) - (float)(a4 * a3);
  v8 = (float)(a3 + 1.0) * a4;
  if (a4 >= 0.5)
    v8 = v7;
  v9 = -(v8 - a4 * 2.0);
  v10 = a2;
  v11 = a2 + 0.333333333;
  if (v11 < 0.0)
    v11 = v11 + 1.0;
  v12 = v11 + -1.0;
  if (v11 <= 1.0)
    v12 = v11;
  v13 = v12;
  if (v12 < 0.166666667)
  {
    v14 = v9 + (float)(v8 - v9) * 6.0 * v13;
LABEL_14:
    v15 = v14;
    goto LABEL_15;
  }
  v15 = v8;
  if (v12 >= 0.5)
  {
    v15 = v9;
    if (v13 < 0.666666667)
    {
      v14 = v9 + (0.666666667 - v13) * (float)(v8 - v9) * 6.0;
      goto LABEL_14;
    }
  }
LABEL_15:
  *this = v15;
  if (a2 < 0.0)
    a2 = a2 + 1.0;
  if (a2 <= 1.0)
    v16 = a2;
  else
    v16 = a2 + -1.0;
  v17 = v16;
  if (v16 < 0.166666667)
  {
    v18 = v9 + (float)(v8 - v9) * 6.0 * v17;
LABEL_25:
    v20 = v18;
    goto LABEL_26;
  }
  v19 = v16 < 0.5;
  v20 = v8;
  if (!v19)
  {
    v20 = v9;
    if (v17 < 0.666666667)
    {
      v18 = v9 + (0.666666667 - v17) * (float)(v8 - v9) * 6.0;
      goto LABEL_25;
    }
  }
LABEL_26:
  *a5 = v20;
  v21 = v10 + -0.333333333;
  if (v21 < 0.0)
    v21 = v21 + 1.0;
  if (v21 <= 1.0)
    v22 = v21;
  else
    v22 = v21 + -1.0;
  v23 = v22;
  if (v22 < 0.166666667)
  {
    v24 = v9 + (float)(v8 - v9) * 6.0 * v23;
LABEL_36:
    v8 = v24;
    goto LABEL_37;
  }
  if (v22 >= 0.5)
  {
    if (v23 >= 0.666666667)
    {
      v8 = v9;
      goto LABEL_37;
    }
    v24 = v9 + (0.666666667 - v23) * (float)(v8 - v9) * 6.0;
    goto LABEL_36;
  }
LABEL_37:
  *a6 = v8;
  if (*this < 0.000001)
    *this = 0.0;
  if (*a5 < 0.000001)
    *a5 = 0.0;
  if (*a6 < 0.000001)
    *a6 = 0.0;
  return this;
}

double cv3d::cv::gess::math::Cotan(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  long double v9;
  double v10;
  double v11;
  long double v12;

  v3 = vsubq_f32(*a1, *a2);
  v4 = vsubq_f32(*a3, *a2);
  v5 = vmulq_f32(v3, v3);
  v5.i32[3] = 0;
  v5.i64[0] = vpaddq_f32(v5, v5).u64[0];
  v5.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v5.f32));
  v6 = vmulq_f32(v4, v4);
  v6.i32[3] = 0;
  v7 = vdivq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0));
  v5.i64[0] = vpaddq_f32(v6, v6).u64[0];
  v5.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v5.f32));
  v8 = vmulq_f32(v7, vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0)));
  v8.i32[3] = 0;
  v9 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v8, v8));
  v10 = fabs(v9);
  v11 = 0.0;
  if (v10 >= 0.001)
  {
    if (vabdd_f64(1.0, v10) >= 0.001)
    {
      v12 = acos(v9);
      return 1.0 / tan(v12);
    }
    else
    {
      return 1000.0;
    }
  }
  return v11;
}

float cv3d::cv::gess::math::AngleFromCotan(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;

  v3 = vsubq_f32(*a2, *a1);
  v4 = vsubq_f32(*a3, *a1);
  v5 = vmulq_f32(v3, v4);
  v5.i32[3] = 0;
  v5.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v5, v5));
  v6 = vmulq_f32(v3, v3);
  v6.i32[3] = 0;
  v7 = vmulq_f32(v4, v4);
  v7.i32[3] = 0;
  return fabsf(atan2f(sqrtf((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))* vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v7, v7)))- (float)(v5.f32[0] * v5.f32[0])), v5.f32[0]));
}

uint64_t cv3d::cv::gess::math::VertexNormal(uint64_t a1, int a2, float32x4_t *a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t HEdge;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unsigned int Vertex;
  uint64_t v29;
  uint64_t i;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  float32x4_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  double v45;
  float64x2_t v46;
  uint64_t v47;
  double v48;
  int v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unsigned int *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  double v59;
  float64x2_t v60;
  uint64_t v61;
  __double2 v62;
  uint64_t v63;
  double v64;
  float sinval;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  float64x2_t v69;
  float64x2_t v70;
  unsigned int v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t v77;
  double v78;
  float64x2_t v79;
  float32x4_t v80;
  unsigned int v81;
  unsigned int v82;
  _QWORD v83[3];
  double v84;
  float64x2_t v85;
  unsigned int v86[3];

  v86[0] = a2;
  v5 = cv3d::cv::gess::mesh::PolyMesh::Valence(a1, a2);
  LODWORD(v84) = *(_DWORD *)(a1 + 176);
  v6 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), (unsigned int *)&v84);
  if (cv3d::cv::gess::mesh::PolyMesh::is_boundary(a1, (uint64_t)v86))
  {
    v7 = -1;
    v81 = -1;
    v8 = a1 + 104;
    cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v83, a1 + 104, v86);
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v83);
    v82 = HEdge;
    if ((_DWORD)HEdge == -1)
    {
      v13 = -1;
      v12 = -1;
    }
    else
    {
      v12 = -1;
      v13 = -1;
      do
      {
        v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v82);
        v15 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v14);
        if ((v16 & *v15) != 0)
        {
          v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v82);
          v12 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v17) + 12);
          v18 = v82;
          v81 = v82;
        }
        else
        {
          v18 = v82;
        }
        v19 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v18);
        if ((v20 & *v19) != 0)
        {
          v21 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v82);
          v7 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v21) + 12);
          v13 = v82;
        }
        HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v83);
        v82 = HEdge;
      }
      while ((_DWORD)HEdge != -1);
    }
    v39 = *(_QWORD *)(v6 + 40);
    v40 = (*(_QWORD *)(v6 + 48) - v39) >> 4;
    if (v40 <= v12)
      cv3d::cv::gess::io::MeshToArray<float,unsigned int>(HEdge, v10, v11);
    if (v40 <= v7)
      cv3d::cv::gess::io::MeshToArray<float,unsigned int>(HEdge, v10, v11);
    v41 = 0;
    v42 = *(float32x4_t *)(v39 + 16 * v7);
    v43 = *(float32x4_t *)(v39 + 16 * v12);
    v80 = vsubq_f32(v43, v42);
    do
    {
      *(&v84 + v41) = v80.f32[v41];
      ++v41;
    }
    while (v41 != 3);
    *(double *)&v77 = v84;
    v79 = v85;
    if (v5 == 2)
    {
      if (v40 <= v86[0])
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      v44 = 0;
      v80 = vsubq_f32(vaddq_f32(*(float32x4_t *)(v39 + 16 * v86[0]), *(float32x4_t *)(v39 + 16 * v86[0])), vaddq_f32(v42, v43));
      do
      {
        *(&v84 + v44) = v80.f32[v44];
        ++v44;
      }
      while (v44 != 3);
      v45 = v84;
      v46 = v85;
    }
    else
    {
      v47 = cv3d::cv::gess::mesh::Topology::h(v8, &v81);
      v48 = 3.14159265 / ((double)v5 + -1.0);
      v82 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)(v47 + 4));
      v49 = 1;
      v50 = 0.0;
      v51 = 0.0;
      v52 = 0.0;
      do
      {
        v53 = sin(v48 * (double)v49);
        v54 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v8, &v82);
        v55 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v8, v54) + 12);
        v56 = *(_QWORD *)(v6 + 40);
        if (v55 >= (*(_QWORD *)(v6 + 48) - v56) >> 4)
          __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
        v57 = 0;
        v58 = v53;
        v80 = vmulq_n_f32(*(float32x4_t *)(v56 + 16 * v55), v58);
        do
        {
          *(&v84 + v57) = v80.f32[v57];
          ++v57;
        }
        while (v57 != 3);
        v59 = v84;
        v60 = v85;
        v61 = cv3d::cv::gess::mesh::Topology::h(v8, &v82);
        v50 = v50 + v59;
        v51 = v51 + v60.f64[0];
        v52 = v52 + v60.f64[1];
        v82 = *(_DWORD *)cv3d::cv::gess::mesh::Topology::h(v8, (unsigned int *)(v61 + 4));
        ++v49;
      }
      while (v82 != v13);
      v62 = __sincos_stret(v48);
      v63 = 0;
      v64 = v62.__cosval * 2.0 + -2.0;
      sinval = v62.__sinval;
      v80 = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(v39 + 16 * v7), *(float32x4_t *)(v39 + 16 * v12)), sinval);
      do
      {
        *(&v84 + v63) = v80.f32[v63];
        ++v63;
      }
      while (v63 != 3);
      v45 = v64 * v50 + v84;
      v66.f64[1] = v64 * v52;
      v66.f64[0] = v64 * v51;
      v46 = vaddq_f64(v66, v85);
    }
    *(_QWORD *)&v67.f64[0] = vdupq_laneq_s64((int64x2_t)v46, 1).u64[0];
    v67.f64[1] = v45;
    v68 = vmlad_n_f64(-(v46.f64[0] * *(double *)&v77), v45, v79.f64[0]);
    v69 = vmulq_f64(v79, vnegq_f64(v67));
    v70 = (float64x2_t)vdupq_lane_s64(v77, 0);
    v70.f64[0] = v79.f64[1];
    *(float32x2_t *)v38.f32 = vcvt_f32_f64(vmlaq_f64(v69, v70, v46));
    *(float *)&v71 = v68;
    v38.i64[1] = v71;
  }
  else
  {
    cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(&v84, (_QWORD *)(a1 + 104), v86);
    v22 = 0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    v78 = 0.0;
    while (1)
    {
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)&v84);
      if (Vertex == -1)
        break;
      v29 = *(_QWORD *)(v6 + 40);
      if (Vertex >= (unint64_t)((*(_QWORD *)(v6 + 48) - v29) >> 4))
        __assert_rtn("operator[]", "Attribute.h", 187, "index < data_.size()");
      for (i = 0; i != 3; ++i)
        *(double *)&v83[i] = *(float *)(v29 + 16 * Vertex + 4 * i);
      v31 = *(double *)v83;
      v32 = *(double *)&v83[1];
      v33 = *(double *)&v83[2];
      v34 = __sincos_stret((double)v22 * 6.28318531 / (double)v5);
      v78 = v78 + v34.__cosval * v31;
      v27 = v27 + v34.__cosval * v32;
      v26 = v26 + v34.__cosval * v33;
      v25 = v25 + v34.__sinval * v31;
      v24 = v24 + v34.__sinval * v32;
      v23 = v23 + v34.__sinval * v33;
      ++v22;
    }
    *(float *)&v35 = v27 * v23 - v26 * v24;
    *(float *)&v36 = v26 * v25 - v78 * v23;
    v38.i64[0] = __PAIR64__(v36, v35);
    *(float *)&v37 = v78 * v24 - v27 * v25;
    v38.i64[1] = v37;
  }
  *a3 = v38;
  v72 = vmulq_f32(v38, v38);
  v72.i32[3] = 0;
  v73 = vpaddq_f32(v72, v72);
  v74 = vpaddq_f32(v73, v73);
  if (v74.f32[0] <= 0.0)
    v75 = (float32x4_t)xmmword_23C603EC0;
  else
    v75 = vdivq_f32(v38, vsqrtq_f32(v74));
  *a3 = v75;
  return 1;
}

uint64_t cv3d::cv::gess::math::VertexNormal@<X0>(uint64_t a1@<X0>, int a2@<W1>, float32x4_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  return cv3d::cv::gess::math::VertexNormal(a1, a2, a3);
}

uint64_t cv3d::cv::gess::math::VertexNormalFromFaceNormal@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, float32x4_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned int v17;
  _BYTE v18[20];
  int v19;

  v19 = a3;
  v16 = 0u;
  *a4 = 0u;
  v7 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v18, a1 + 104, &v19);
  result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v18);
  v17 = result;
  if ((_DWORD)result != -1)
  {
    v16 = 0u;
    do
    {
      v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), result);
      if ((v10 & *v9) == 0)
      {
        v11 = cv3d::cv::gess::mesh::PolyMesh::Angle(a1, v17);
        v16 = vaddq_f32(v16, vmulq_n_f32(*(float32x4_t *)(*a2 + 16 * *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v7, &v17) + 16)), v11));
        *a4 = v16;
      }
      result = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v18);
      v17 = result;
    }
    while ((_DWORD)result != -1);
  }
  v12 = vmulq_f32(v16, v16);
  v12.i32[3] = 0;
  v13 = vpaddq_f32(v12, v12);
  v14 = vpaddq_f32(v13, v13);
  if (v14.f32[0] <= 0.0)
    v15 = (float32x4_t)xmmword_23C603EC0;
  else
    v15 = vdivq_f32(v16, vsqrtq_f32(v14));
  *a4 = v15;
  return result;
}

float cv3d::cv::gess::mesh::PolyMesh::Angle(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float result;
  _QWORD *v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  unsigned int v29;

  v29 = a2;
  v3 = a1 + 104;
  v4 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, &v29);
  v27 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v4 + 12));
  v5 = cv3d::cv::gess::mesh::Topology::h(v3, &v29);
  v6 = cv3d::cv::gess::mesh::Topology::h(v3, (unsigned int *)(v5 + 4));
  v25 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v6 + 12));
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v3, &v29);
  v8 = cv3d::cv::gess::mesh::Topology::h(v3, v7);
  v9 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v8 + 12));
  v10 = vsubq_f32(v25, v27);
  v11 = vsubq_f32(*v9, v27);
  v12 = vmulq_f32(v10, v10);
  v12.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u64[0];
  v12.f32[0] = sqrtf(v12.f32[0]);
  v13 = vmulq_f32(v11, v11);
  v14 = vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0));
  v10.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u64[0];
  v10.f32[0] = sqrtf(v10.f32[0]);
  v15 = vdivq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
  v16 = vmulq_f32(v14, v15);
  v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
  result = 0.0;
  if (fabs(v17 + -1.0) >= 0.00000001)
  {
    if (fabs(v17 + 1.0) >= 0.00000001)
    {
      v24 = v15;
      v26 = v14;
      v28 = v17;
      v19 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), v29);
      if ((v20 & *v19) != 0)
      {
        v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), vnegq_f32(v26)), v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL));
        v22 = vmulq_f32(v21, v21);
        v23 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), v22)).f32[0]), v28);
      }
      else
      {
        v23 = acosf(v28);
      }
      return v23 / 3.14159265 * 180.0;
    }
    else
    {
      return 180.0;
    }
  }
  return result;
}

BOOL cv3d::cv::gess::math::AngleObtuse(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;

  v3 = vmulq_f32(vsubq_f32(*a2, *a1), vsubq_f32(*a3, *a1));
  v3.i32[3] = 0;
  return vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v3, v3)) < 0.0;
}

float cv3d::cv::gess::math::TriangleArea(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v3 = (int32x4_t)vsubq_f32(*a2, *a1);
  v4 = (int32x4_t)vsubq_f32(*a3, *a1);
  v5 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v3, (int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL)), v3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), v4)), (float32x4_t)vzip2q_s32(vzip1q_s32(v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 4uLL), v3));
  v6 = vmulq_f32(v5, v5);
  v6.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))) * 0.5;
}

BOOL cv3d::cv::gess::math::VertexVoronoiRegionAreaInTriangle(uint64_t a1, unsigned int *a2, float *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  double v27;
  float32x4_t v28;
  float v29;
  double v30;
  float32x4_t v31;
  float v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v6 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  v8 = v7 & *v6;
  if (!v8)
  {
    v9 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2) + 12);
    v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
    v11 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, v10) + 12);
    v12 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, a2);
    v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(v12 + 4)) + 12);
    v36 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v9);
    v40 = v36;
    v34 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v11);
    v39 = v34;
    v14 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v13);
    v38 = v14;
    v15 = vsubq_f32(v34, v36);
    v16 = vsubq_f32(v14, v36);
    v17 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v15, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), (int32x4_t)v15), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL), (int32x4_t)v16)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v16, (int32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL)), (int32x4_t)v16), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), (int32x4_t)v15));
    v18 = vmulq_f32(v17, v17);
    v18.i32[3] = 0;
    v19 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v18, v18))) * 0.5;
    v20 = 0.0;
    if (v19 > 0.0)
    {
      v21 = vmulq_f32(v15, v16);
      v21.i32[3] = 0;
      v22 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21));
      if (v22 < 0.0
        || (v23 = vsubq_f32(v36, v34),
            v24 = vmulq_f32(v23, vsubq_f32(v14, v34)),
            v24.i32[3] = 0,
            vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24)) < 0.0)
        || (v25 = vsubq_f32(v36, v14),
            v26 = vmulq_f32(v25, vsubq_f32(v34, v14)),
            v26.i32[3] = 0,
            vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)) < 0.0))
      {
        if (v22 >= 0.0)
          v32 = 0.25;
        else
          v32 = 0.5;
        v20 = v19 * v32;
      }
      else
      {
        v35 = v25;
        v37 = v23;
        v27 = cv3d::cv::gess::math::Cotan(&v40, &v39, &v38);
        v28 = vmulq_f32(v35, v35);
        v28.i32[3] = 0;
        v29 = v27 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28));
        v30 = cv3d::cv::gess::math::Cotan(&v40, &v38, &v39);
        v31 = vmulq_f32(v37, v37);
        v31.i32[3] = 0;
        *(float *)&v30 = v30 * vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
        v20 = (float)(v29 + *(float *)&v30) * 0.125;
      }
    }
    *a3 = v20;
  }
  return v8 == 0;
}

float cv3d::cv::gess::math::VertexVoronoiRegionAreaInTriangle(uint64_t a1, unsigned int *a2)
{
  float v3;

  v3 = 0.0;
  cv3d::cv::gess::math::VertexVoronoiRegionAreaInTriangle(a1, a2, &v3);
  return v3;
}

uint64_t cv3d::cv::gess::math::VertexDualRegionAreaInTriangle(uint64_t a1, unsigned int *a2, float *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  unsigned int v46;
  unsigned int v47;

  if (*a2 == -1)
    return 0;
  v6 = a1 + 104;
  v47 = *a2;
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(a1 + 104, &v47) + 12) == -1)
    return 0;
  v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v8 & *v7) != 0)
    return 0;
  v10 = *(unsigned int *)(cv3d::cv::gess::mesh::Topology::h(v6, a2) + 12);
  v11 = cv3d::cv::gess::mesh::Topology::h(v6, a2);
  v12 = *(_DWORD *)(a1 + 176);
  v46 = *(_DWORD *)(v11 + 4);
  v47 = v12;
  v13 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v47);
  v16 = *(_QWORD *)(v13 + 40);
  if (v10 >= (*(_QWORD *)(v13 + 48) - v16) >> 4)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v13, v14, v15);
  v45 = *(float32x4_t *)(v16 + 16 * v10);
  v47 = *(_DWORD *)(a1 + 176);
  v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v47);
  v18 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, a2);
  v19 = cv3d::cv::gess::mesh::Topology::h(v6, v18);
  v22 = *(unsigned int *)(v19 + 12);
  v23 = *(_QWORD *)(v17 + 40);
  if (v22 >= (*(_QWORD *)(v17 + 48) - v23) >> 4)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v19, v20, v21);
  v44 = *(float32x4_t *)(v23 + 16 * v22);
  v47 = *(_DWORD *)(a1 + 176);
  v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(a1 + 8), &v47);
  v25 = cv3d::cv::gess::mesh::Topology::h(v6, &v46);
  v28 = *(unsigned int *)(v25 + 12);
  v29 = *(_QWORD *)(v24 + 40);
  if (v28 >= (*(_QWORD *)(v24 + 48) - v29) >> 4)
    cv3d::cv::gess::io::MeshToArray<float,unsigned int>(v25, v26, v27);
  v30 = *(float32x4_t *)(v29 + 16 * v28);
  v31 = vaddq_f32(v45, v44);
  v32 = vmulq_f32(vaddq_f32(v31, v30), (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
  v33.i64[0] = 0x3F0000003F000000;
  v33.i64[1] = 0x3F0000003F000000;
  v34 = vmulq_f32(v31, v33);
  v35 = (int32x4_t)vsubq_f32(v32, v45);
  v36 = (int32x4_t)vsubq_f32(vmulq_f32(vaddq_f32(v45, v30), v33), v45);
  v37 = (float32x4_t)vzip2q_s32(vzip1q_s32(v35, (int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL)), v35);
  v38 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), v35);
  v39 = vmlsq_f32(vmulq_f32(v37, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), v36)), (float32x4_t)vzip2q_s32(vzip1q_s32(v36, (int32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 0xCuLL)), v36), v38);
  v40 = vmulq_f32(v39, v39);
  v40.i32[3] = 0;
  v41 = (int32x4_t)vsubq_f32(v34, v45);
  v42 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL), v41), v37), (float32x4_t)vzip2q_s32(vzip1q_s32(v41, (int32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL)), v41), v38);
  v43 = vmulq_f32(v42, v42);
  v43.i32[3] = 0;
  *a3 = (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40)))
              + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v43, v43))))
      * 0.5;
  return 1;
}

float cv3d::cv::gess::math::VertexDualRegionAreaInTriangle(uint64_t a1, unsigned int *a2)
{
  float v3;

  v3 = 0.0;
  cv3d::cv::gess::math::VertexDualRegionAreaInTriangle(a1, a2, &v3);
  return v3;
}

uint64_t cv3d::cv::gess::math::FaceNormal(uint64_t a1, unsigned int a2, float32x4_t *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  _DWORD *v14;
  float32x4_t *v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  void *__p[3];
  unsigned int v27;

  v27 = a2;
  std::vector<cv3d::cv::gess::mesh::VertexHandle>::vector(__p, 3uLL);
  v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v27);
  v6 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, v5);
  v7 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v6);
  *(_DWORD *)__p[0] = *(_DWORD *)(v7 + 12);
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v27);
  v9 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v8);
  v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(a1 + 104, (unsigned int *)(v9 + 8));
  v11 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v10);
  *((_DWORD *)__p[0] + 1) = *(_DWORD *)(v11 + 12);
  v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, &v27);
  v13 = cv3d::cv::gess::mesh::Topology::h(a1 + 104, v12);
  v14 = __p[0];
  *((_DWORD *)__p[0] + 2) = *(_DWORD *)(v13 + 12);
  v25 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v14[1]);
  v24 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
  v23 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *((_DWORD *)__p[0] + 2));
  v15 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)__p[0]);
  v16 = (int32x4_t)vsubq_f32(v25, v24);
  v17 = (int32x4_t)vsubq_f32(v23, *v15);
  v18 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v16, (int32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL)), v16), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), v17)), (float32x4_t)vzip2q_s32(vzip1q_s32(v17, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL)), v17), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL), v16));
  v19 = vmulq_f32(v18, v18);
  v19.i32[3] = 0;
  v20 = (float32x2_t)vpaddq_f32(v19, v19).u64[0];
  v20.f32[0] = sqrtf(vaddv_f32(v20));
  if (v20.f32[0] <= 0.0)
    v21 = (float32x4_t)xmmword_23C603EC0;
  else
    v21 = vdivq_f32(v18, (float32x4_t)vdupq_lane_s32((int32x2_t)v20, 0));
  *a3 = v21;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_23C542050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::math::FaceNormal@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, float32x4_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  return cv3d::cv::gess::math::FaceNormal(a1, a2, a3);
}

uint64_t cv3d::cv::gess::math::EdgeDihedral(uint64_t a1, unsigned int *a2, float *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;

  v6 = a1 + 104;
  v19.i32[0] = *a2;
  if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::hedge(a1 + 104, (unsigned int *)&v19) + 12) == -1)
    cv3d::cv::gess::math::EdgeDihedral();
  v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *a2);
  if ((v8 & *v7) != 0)
    return 0;
  v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, a2);
  v10 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v9);
  if ((v11 & *v10) != 0)
    return 0;
  v13 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, a2) + 16);
  v19 = 0u;
  cv3d::cv::gess::math::FaceNormal(a1, v13, &v19);
  v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, a2);
  v15 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, v14) + 16);
  v18 = 0u;
  cv3d::cv::gess::math::FaceNormal(a1, v15, &v18);
  v16 = vmulq_f32(v19, v18);
  v16.i32[3] = 0;
  v17 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16));
  if (v17 > 1.0)
    v17 = 1.0;
  if (v17 < -1.0)
    v17 = -1.0;
  *a3 = acosf(v17);
  return 1;
}

float cv3d::cv::gess::math::VertexMeanCurvatureSignedValue(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float v3;
  float32x4_t v4;

  v2 = vmulq_f32(*a2, *a2);
  v2.i32[3] = 0;
  v3 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v2, v2))) * 0.5;
  v4 = vmulq_f32(*a2, *a1);
  v4.i32[3] = 0;
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v4, v4)) <= 0.0)
    return v3;
  else
    return -v3;
}

uint64_t cv3d::cv::gess::math::VertexMeanCurvatureNormal(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v5;
  unsigned int HEdge;
  unsigned __int8 v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  float32x4_t v24;
  float v25;
  _QWORD *v26;
  float32x4_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  _BYTE v46[16];
  void *__p;
  unsigned int *v48;
  unsigned int *v49;

  a3->i64[0] = 0;
  a3->i32[2] = 0;
  __p = 0;
  v48 = 0;
  v5 = a1 + 104;
  v49 = 0;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v46, a1 + 104, a2);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v46);
  v7 = 0;
  while (1)
  {
    v8 = v48;
    if (HEdge == -1)
      break;
    if (v48 >= v49)
    {
      v10 = ((char *)v48 - (_BYTE *)__p) >> 2;
      if ((unint64_t)(v10 + 1) >> 62)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v11 = ((char *)v49 - (_BYTE *)__p) >> 1;
      if (v11 <= v10 + 1)
        v11 = v10 + 1;
      if ((unint64_t)((char *)v49 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFCLL)
        v12 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v49, v12);
      else
        v13 = 0;
      v14 = (unsigned int *)&v13[4 * v10];
      *v14 = HEdge;
      v9 = v14 + 1;
      v16 = (char *)__p;
      v15 = (char *)v48;
      if (v48 != __p)
      {
        do
        {
          v17 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *--v14 = v17;
        }
        while (v15 != v16);
        v15 = (char *)__p;
      }
      __p = v14;
      v48 = v9;
      v49 = (unsigned int *)&v13[4 * v12];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v48 = HEdge;
      v9 = v8 + 1;
    }
    v48 = v9;
    v18 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
    v7 |= (*v18 & v19) != 0;
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v46);
  }
  v20 = (unsigned int *)__p;
  if ((((char *)v48 - (_BYTE *)__p == 8) & v7) != 0)
  {
    v21 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *(_DWORD *)__p);
    v44.i32[0] = *((_DWORD *)__p + ((*v21 & v22) != 0));
    v23 = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, (unsigned int *)&v44) + 16);
    v45 = 0uLL;
    cv3d::cv::gess::math::FaceNormal(a1, v23, &v45);
    v24 = v45;
LABEL_29:
    *a3 = v24;
    v37 = 1;
    goto LABEL_31;
  }
  if (__p != v48)
  {
    v25 = 0.0;
    do
    {
      v26 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v20);
      if ((*v26 & v28) == 0)
      {
        v45.i32[0] = 0;
        cv3d::cv::gess::math::VertexVoronoiRegionAreaInTriangle(a1, v20, v45.f32);
        v29 = v45.f32[0];
        v30 = cv3d::cv::gess::mesh::Topology::h(v5, v20);
        v42 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v30 + 12));
        v45 = v42;
        v31 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, v20);
        v32 = cv3d::cv::gess::mesh::Topology::h(v5, v31);
        v41 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v32 + 12));
        v44 = v41;
        v33 = cv3d::cv::gess::mesh::Topology::h(v5, v20);
        v34 = cv3d::cv::gess::mesh::Topology::h(v5, (unsigned int *)(v33 + 4));
        v25 = v25 + v29;
        v39 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v34 + 12));
        v43 = v39;
        v35 = cv3d::cv::gess::math::Cotan(&v45, &v44, &v43);
        v40 = vaddq_f32(*a3, vmulq_n_f32(vsubq_f32(v39, v42), v35));
        v36 = cv3d::cv::gess::math::Cotan(&v45, &v43, &v44);
        v27 = vaddq_f32(v40, vmulq_n_f32(vsubq_f32(v41, v42), v36));
        *a3 = v27;
      }
      ++v20;
    }
    while (v20 != v8);
    if (v25 > 0.0)
    {
      v27.f32[0] = v25 + v25;
      v24 = vdivq_f32(*a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      goto LABEL_29;
    }
  }
  v37 = 0;
LABEL_31:
  if (__p)
  {
    v48 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v37;
}

void sub_23C542560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::math::VertexGaussianCurvature(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  unsigned int HEdge;
  float v7;
  float v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  float32x4_t v25;
  float32x4_t v26;
  unsigned int v27;
  _BYTE v28[20];
  float v29;

  *a3 = 0.0;
  v5 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v28, a1 + 104, a2);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v28);
  v27 = HEdge;
  if (HEdge == -1)
    return 0;
  v7 = 0.0;
  v8 = 0.0;
  do
  {
    v9 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
    if ((v10 & *v9) != 0)
    {
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v28);
    }
    else
    {
      v29 = 0.0;
      cv3d::cv::gess::math::VertexVoronoiRegionAreaInTriangle(a1, &v27, &v29);
      v7 = v7 + v29;
      v11 = cv3d::cv::gess::mesh::Topology::h(v5, &v27);
      v26 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v11 + 12));
      v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, &v27);
      v13 = cv3d::cv::gess::mesh::Topology::h(v5, v12);
      v25 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v13 + 12));
      v14 = cv3d::cv::gess::mesh::Topology::h(v5, &v27);
      v15 = cv3d::cv::gess::mesh::Topology::h(v5, (unsigned int *)(v14 + 4));
      v16 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v15 + 12));
      v17 = vsubq_f32(v25, v26);
      v18 = vsubq_f32(*v16, v26);
      v19 = vmulq_f32(v17, v18);
      v19.i32[3] = 0;
      v19.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19));
      v20 = vmulq_f32(v17, v17);
      v20.i32[3] = 0;
      v21 = vmulq_f32(v18, v18);
      v21.i32[3] = 0;
      v22 = fabsf(atan2f(sqrtf((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20))* vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v21, v21)))- (float)(v19.f32[0] * v19.f32[0])), v19.f32[0]));
      HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v28);
      v8 = v8 + v22;
    }
    v27 = HEdge;
  }
  while (HEdge != -1);
  if (v7 <= 0.0)
    return 0;
  v23 = (6.28318531 - v8) / v7;
  *a3 = v23;
  return 1;
}

uint64_t cv3d::cv::gess::math::VertexPrincipalCurvatures(cv3d::cv::gess::math *this, const float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  float v6;
  float v7;

  v5 = *(float *)this;
  v6 = -(float)(*a2 - (float)(v5 * v5));
  if (v6 < 0.0)
    v6 = 0.0;
  v7 = sqrtf(v6);
  *a3 = v5 + v7;
  *a4 = *(float *)this - v7;
  if (*a3 > 1000.0)
    *a3 = 1000.0;
  return 1;
}

BOOL cv3d::cv::gess::math::GetEigenVectors(uint64_t a1, _DWORD *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  int *v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;
  _BOOL8 v19;
  float *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  float *v35;
  _DWORD *v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  unint64_t v40;
  unsigned int v41;
  float v42;
  unsigned int v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  float *__p;
  float *v48;
  char *v49;
  char __jobvr;
  char __jobvl;
  __CLPK_integer v52;
  void *v53[3];
  __CLPK_integer __lwork;
  void *v55[3];
  __CLPK_integer __ldvr;
  __CLPK_real *__vl[3];
  __CLPK_integer __ldvl;
  void *v59[3];
  void *v60[3];
  void *v61[3];
  __CLPK_integer __lda;
  __CLPK_integer __n[3];

  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v5)
    return 0;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v4) >> 3);
  if (v7 < *a2 || v7 != (uint64_t)(v4[1] - *v4) >> 2)
    return 0;
  __lda = v7;
  __n[0] = v7;
  std::vector<float>::vector(v61, (v7 * v7));
  v11 = __n[0];
  if (__n[0] > 0)
  {
    v12 = 0;
    v13 = *(_QWORD **)a1;
    v14 = v61[0];
    v11 = __n[0];
    do
    {
      v15 = (int *)v13[3 * v12];
      v16 = v11;
      v17 = v14;
      do
      {
        v18 = *v15++;
        *v17 = v18;
        v17 += v11;
        --v16;
      }
      while (v16);
      ++v12;
      ++v14;
    }
    while (v12 != v11);
  }
  std::vector<float>::vector(v60, v11);
  std::vector<float>::vector(v59, __n[0]);
  __ldvl = 1;
  std::vector<float>::vector(__vl, __n[0]);
  __ldvr = __n[0];
  std::vector<float>::vector(v55, (__ldvr * __ldvr));
  __lwork = 4 * __n[0];
  std::vector<float>::vector(v53, 4 * __n[0]);
  v52 = 0;
  __jobvl = 78;
  __jobvr = 86;
  sgeev_(&__jobvl, &__jobvr, __n, (__CLPK_real *)v61[0], &__lda, (__CLPK_real *)v60[0], (__CLPK_real *)v59[0], __vl[0], &__ldvl, (__CLPK_real *)v55[0], &__ldvr, (__CLPK_real *)v53[0], &__lwork, &v52);
  v19 = v52 == 0;
  if (!v52)
  {
    __p = 0;
    v48 = 0;
    v49 = 0;
    if (__n[0])
    {
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = v21 | ((unint64_t)*((unsigned int *)v60[0] + v21) << 32);
        if (v20 >= (float *)v49)
        {
          v23 = ((char *)v20 - (char *)__p) >> 3;
          if ((unint64_t)(v23 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v24 = (v49 - (char *)__p) >> 2;
          if (v24 <= v23 + 1)
            v24 = v23 + 1;
          if ((unint64_t)(v49 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          if (v25)
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v49, v25);
          else
            v26 = 0;
          v27 = (float *)&v26[8 * v23];
          *(_QWORD *)v27 = v22;
          v20 = v27 + 2;
          v28 = v48;
          if (v48 != __p)
          {
            do
            {
              v29 = *((_QWORD *)v28 - 1);
              v28 -= 2;
              *((_QWORD *)v27 - 1) = v29;
              v27 -= 2;
            }
            while (v28 != __p);
            v28 = __p;
          }
          __p = v27;
          v49 = &v26[8 * v25];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_QWORD *)v20 = v22;
          v20 += 2;
        }
        v48 = v20;
        ++v21;
      }
      while (v21 < __n[0]);
      v30 = __p;
    }
    else
    {
      v20 = 0;
      v30 = 0;
    }
    v32 = 126 - 2 * __clz(((char *)v20 - (char *)v30) >> 3);
    if (v20 == v30)
      v33 = 0;
    else
      v33 = v32;
    std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *,false>(v30, v20, v33, 1);
    std::vector<float>::resize((uint64_t)a4, *a2);
    v34 = *a2;
    if ((_DWORD)v34)
    {
      v35 = __p;
      v36 = v60[0];
      v37 = *a2;
      v38 = (_DWORD *)*a4;
      do
      {
        v39 = *(_DWORD *)v35;
        v35 += 2;
        *v38++ = v36[v39];
        --v37;
      }
      while (v37);
    }
    else
    {
      v34 = 0;
    }
    std::vector<std::vector<float>>::resize(a3, v34);
    if (*a2)
    {
      v40 = 0;
      v41 = __n[0];
      do
      {
        v42 = __p[2 * v40];
        std::vector<float>::resize(*a3 + 24 * v40, v41);
        v41 = __n[0];
        if (__n[0])
        {
          v43 = __n[0] * LODWORD(v42);
          v44 = v55[0];
          v45 = *(_DWORD **)(*a3 + 24 * v40);
          v46 = __n[0];
          do
          {
            *v45++ = v44[v43++];
            --v46;
          }
          while (v46);
        }
        ++v40;
      }
      while (v40 < *a2);
    }
    if (__p)
      operator delete(__p);
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (__vl[0])
  {
    __vl[1] = __vl[0];
    operator delete(__vl[0]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  if (v60[0])
  {
    v60[1] = v60[0];
    operator delete(v60[0]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  return v19;
}

void sub_23C542BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (a24)
    operator delete(a24);
  if (a28)
    operator delete(a28);
  v31 = *(void **)(v29 - 168);
  if (v31)
  {
    *(_QWORD *)(v29 - 160) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 144);
  if (v32)
  {
    *(_QWORD *)(v29 - 136) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v29 - 120);
  if (v33)
  {
    *(_QWORD *)(v29 - 112) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

float *std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float *v19;
  float *v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float *v25;
  float v26;
  int v27;
  float v28;
  float v29;
  BOOL v30;
  float *v31;
  float v32;
  float *v33;
  float v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  int v51;
  int v52;
  float v53;
  int v54;
  float v55;
  float v56;
  float *v57;
  BOOL v59;
  uint64_t v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float *v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  float *v72;
  float v73;
  float v74;
  float *v75;
  int v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float v82;
  float v83;
  float *v84;
  float *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float v90;
  int v91;
  float *v92;
  float *v94;
  float v95;
  float v96;
  float v97;
  float *v98;
  float *v99;
  int v100;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v43 = *(a2 - 1);
        v44 = v8[1];
        if (v43 > v44)
        {
          v45 = *v8;
          *v8 = *(a2 - 2);
          *(a2 - 2) = v45;
          v8[1] = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v8, v8 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5uLL:
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v8, v8 + 2, v8 + 4, v8 + 6);
        v46 = *(a2 - 1);
        v47 = v8[7];
        if (v46 > v47)
        {
          v48 = *((_DWORD *)v8 + 6);
          v8[6] = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v48;
          v8[7] = v46;
          *(a2 - 1) = v47;
          v49 = v8[7];
          v50 = v8[5];
          if (v49 > v50)
          {
            v51 = *((_DWORD *)v8 + 4);
            v52 = *((_DWORD *)v8 + 6);
            *((_DWORD *)v8 + 4) = v52;
            *((_DWORD *)v8 + 6) = v51;
            v8[5] = v49;
            v8[7] = v50;
            v53 = v8[3];
            if (v49 > v53)
            {
              v54 = *((_DWORD *)v8 + 2);
              *((_DWORD *)v8 + 2) = v52;
              *((_DWORD *)v8 + 4) = v54;
              v8[3] = v49;
              v8[5] = v53;
              v55 = v8[1];
              if (v49 > v55)
              {
                v56 = *v8;
                *(_DWORD *)v8 = v52;
                v8[2] = v56;
                v8[1] = v49;
                v8[3] = v55;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v57 = v8 + 2;
          v59 = v8 == a2 || v57 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v59)
            {
              v60 = 0;
              v61 = v8;
              do
              {
                v62 = v61[3];
                v63 = v61[1];
                v61 = v57;
                if (v62 > v63)
                {
                  v64 = *v57;
                  v65 = v60;
                  while (1)
                  {
                    v66 = (float *)((char *)v8 + v65);
                    v66[2] = *(float *)((char *)v8 + v65);
                    v66[3] = *(float *)((char *)v8 + v65 + 4);
                    if (!v65)
                      break;
                    v65 -= 8;
                    if (v62 <= *(v66 - 1))
                    {
                      v67 = (uint64_t)v8 + v65 + 8;
                      goto LABEL_80;
                    }
                  }
                  v67 = (uint64_t)v8;
LABEL_80:
                  *(float *)v67 = v64;
                  *(float *)(v67 + 4) = v62;
                }
                v57 = v61 + 2;
                v60 += 8;
              }
              while (v61 + 2 != a2);
            }
          }
          else if (!v59)
          {
            v94 = v8 + 3;
            do
            {
              v95 = v7[3];
              v96 = v7[1];
              v7 = v57;
              if (v95 > v96)
              {
                v97 = *v57;
                v98 = v94;
                do
                {
                  v99 = v98;
                  *(v98 - 1) = *(v98 - 3);
                  v100 = *((_DWORD *)v98 - 2);
                  v98 -= 2;
                  *(_DWORD *)v99 = v100;
                }
                while (v95 > *(v99 - 4));
                *(v98 - 1) = v97;
                *v98 = v95;
              }
              v57 = v7 + 2;
              v94 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v68 = (v10 - 2) >> 1;
          v69 = v68;
          do
          {
            v70 = v69;
            if (v68 >= v69)
            {
              v71 = (2 * v69) | 1;
              v72 = &v8[2 * v71];
              if (2 * v70 + 2 < (uint64_t)v10 && v72[1] > v72[3])
              {
                v72 += 2;
                v71 = 2 * v70 + 2;
              }
              v73 = v72[1];
              v74 = v8[2 * v70 + 1];
              if (v73 <= v74)
              {
                v75 = &v8[2 * v70];
                v76 = *(_DWORD *)v75;
                do
                {
                  v77 = v75;
                  v75 = v72;
                  *v77 = *v72;
                  v77[1] = v73;
                  if (v68 < v71)
                    break;
                  v78 = 2 * v71;
                  v71 = (2 * v71) | 1;
                  v72 = &v8[2 * v71];
                  v79 = v78 + 2;
                  if (v79 < (uint64_t)v10 && v72[1] > v72[3])
                  {
                    v72 += 2;
                    v71 = v79;
                  }
                  v73 = v72[1];
                }
                while (v73 <= v74);
                *(_DWORD *)v75 = v76;
                v75[1] = v74;
              }
            }
            v69 = v70 - 1;
          }
          while (v70);
          v80 = (unint64_t)v9 >> 3;
          while (2)
          {
            v81 = 0;
            v82 = *v8;
            v83 = v8[1];
            v84 = v8;
            do
            {
              v85 = v84;
              v84 += 2 * v81 + 2;
              v86 = 2 * v81;
              v81 = (2 * v81) | 1;
              v87 = v86 + 2;
              if (v87 < v80 && v84[1] > v84[3])
              {
                v84 += 2;
                v81 = v87;
              }
              *v85 = *v84;
              v85[1] = v84[1];
            }
            while (v81 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
            if (v84 != a2 - 2)
            {
              *v84 = *(a2 - 2);
              v84[1] = *(a2 - 1);
              *(a2 - 2) = v82;
              *(a2 - 1) = v83;
              v88 = (char *)v84 - (char *)v8 + 8;
              if (v88 >= 9)
              {
                v89 = (((unint64_t)v88 >> 3) - 2) >> 1;
                v90 = v8[2 * v89 + 1];
                v83 = v84[1];
                if (v90 > v83)
                {
                  v91 = *(_DWORD *)v84;
                  do
                  {
                    v92 = v84;
                    v84 = &v8[2 * v89];
                    *v92 = *v84;
                    v92[1] = v90;
                    if (!v89)
                      break;
                    v89 = (v89 - 1) >> 1;
                    v90 = v8[2 * v89 + 1];
                  }
                  while (v90 > v83);
                  *(_DWORD *)v84 = v91;
LABEL_112:
                  v84[1] = v83;
                }
              }
              a2 -= 2;
              if (v80-- <= 2)
                return result;
              continue;
            }
            break;
          }
          *v84 = v82;
          goto LABEL_112;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(&v7[2 * (v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v7, &v7[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v7 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
          v14 = *((_DWORD *)v7 + 1);
          v7[1] = v12[1];
          *((_DWORD *)v12 + 1) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = v7[1];
          if (*(v7 - 1) > v15)
            goto LABEL_12;
          if (v15 <= *(a2 - 1))
          {
            v33 = v7 + 2;
            do
            {
              v8 = v33;
              if (v33 >= a2)
                break;
              v34 = v33[1];
              v33 += 2;
            }
            while (v15 <= v34);
          }
          else
          {
            v31 = v7;
            do
            {
              v8 = v31 + 2;
              v32 = v31[3];
              v31 += 2;
            }
            while (v15 <= v32);
          }
          v35 = a2;
          if (v8 < a2)
          {
            v36 = a2;
            do
            {
              v35 = v36 - 2;
              v37 = *(v36 - 1);
              v36 -= 2;
            }
            while (v15 > v37);
          }
          v38 = *v7;
          while (v8 < v35)
          {
            v39 = *v8;
            *v8 = *v35;
            *v35 = v39;
            v40 = *((_DWORD *)v8 + 1);
            v8[1] = v35[1];
            *((_DWORD *)v35 + 1) = v40;
            do
            {
              v41 = v8[3];
              v8 += 2;
            }
            while (v15 <= v41);
            do
            {
              v42 = *(v35 - 1);
              v35 -= 2;
            }
            while (v15 > v42);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *(v8 - 2) = v38;
          *(v8 - 1) = v15;
          continue;
        }
        v15 = v7[1];
LABEL_12:
        v16 = 0;
        v17 = *v7;
        do
        {
          v18 = v7[v16 + 3];
          v16 += 2;
        }
        while (v18 > v15);
        v19 = &v7[v16];
        v20 = a2;
        if (v16 == 2)
        {
          v23 = a2;
          while (v19 < v23)
          {
            v21 = v23 - 2;
            v24 = *(v23 - 1);
            v23 -= 2;
            if (v24 > v15)
              goto LABEL_22;
          }
          v21 = v23;
        }
        else
        {
          do
          {
            v21 = v20 - 2;
            v22 = *(v20 - 1);
            v20 -= 2;
          }
          while (v22 <= v15);
        }
LABEL_22:
        v8 = v19;
        if (v19 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *v8;
            *v8 = *v25;
            *v25 = v26;
            v27 = *((_DWORD *)v8 + 1);
            v8[1] = v25[1];
            *((_DWORD *)v25 + 1) = v27;
            do
            {
              v28 = v8[3];
              v8 += 2;
            }
            while (v28 > v15);
            do
            {
              v29 = *(v25 - 1);
              v25 -= 2;
            }
            while (v29 <= v15);
          }
          while (v8 < v25);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *(v8 - 2) = v17;
        *(v8 - 1) = v15;
        if (v19 < v21)
        {
LABEL_33:
          result = (float *)std::__introsort<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v7, v8 - 2);
        result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      v8 = a2[1];
      v9 = result[1];
      if (v8 > v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      v11 = a3[1];
      if (v11 <= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  float *v9;
  float *v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  int v23;
  int v24;
  float v25;
  int v26;
  float v27;
  float v28;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *(a2 - 1);
      v19 = a1[7];
      if (v18 > v19)
      {
        v20 = *((_DWORD *)a1 + 6);
        a1[6] = *(a2 - 2);
        *((_DWORD *)a2 - 2) = v20;
        a1[7] = v18;
        *(a2 - 1) = v19;
        v21 = a1[7];
        v22 = a1[5];
        if (v21 > v22)
        {
          v23 = *((_DWORD *)a1 + 4);
          v24 = *((_DWORD *)a1 + 6);
          *((_DWORD *)a1 + 4) = v24;
          *((_DWORD *)a1 + 6) = v23;
          a1[5] = v21;
          a1[7] = v22;
          v25 = a1[3];
          if (v21 > v25)
          {
            v26 = *((_DWORD *)a1 + 2);
            *((_DWORD *)a1 + 2) = v24;
            *((_DWORD *)a1 + 4) = v26;
            a1[3] = v21;
            a1[5] = v25;
            v27 = a1[1];
            if (v21 > v27)
            {
              v28 = *a1;
              *(_DWORD *)a1 = v24;
              a1[2] = v28;
              a1[1] = v21;
              a1[3] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *(_DWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16)
          break;
        v15 -= 8;
        if (v13 <= v16[3])
        {
          v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_13;
        }
      }
      v17 = (uint64_t)a1;
LABEL_13:
      *(_DWORD *)v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  float *result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,cv3d::cv::gess::math::GetEigenVectors(std::vector<std::vector<float>> const&,unsigned int const&,std::vector<std::vector<float>>&,std::vector<float>&)::$_0 &,std::pair<unsigned int,float> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    v12 = a3[1];
    v13 = a2[1];
    if (v12 > v13)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      v15 = a2[1];
      v16 = a1[1];
      if (v15 > v16)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_23C543978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

BOOL cv3d::cv::gess::internal::FillTargetHoleEar<cv3d::cv::gess::internal::MinimumWeightEar>(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _BYTE v50[9];

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v5 = (unint64_t)((char *)v3 - (char *)v2) >> 2;
    v6 = a1 + 104;
    v7 = v2;
    do
    {
      LODWORD(v34) = *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v6, v7) + 8);
      cv3d::cv::gess::internal::MinimumWeightEar::MinimumWeightEar((uint64_t)&v42, a1, v7, &v34);
      v8 = v48;
      if ((unint64_t)v48 >= v49)
      {
        v9 = std::vector<cv3d::cv::gess::internal::MinimumWeightEar>::__push_back_slow_path<cv3d::cv::gess::internal::MinimumWeightEar const&>((uint64_t *)&v47, (uint64_t)&v42);
      }
      else
      {
        *v48 = v42;
        v8[1] = v43;
        *((_OWORD *)v8 + 1) = v44;
        v8[4] = v45;
        *((_DWORD *)v8 + 10) = v46;
        v9 = (uint64_t)(v8 + 6);
      }
      v48 = (_QWORD *)v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>((uint64_t)v47, v9, (uint64_t)&v28, 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v47) >> 4));
      ++v7;
    }
    while (v7 != v3);
    v26 = v2;
    if (v5 < 3)
    {
LABEL_25:
      v10 = v47;
    }
    else
    {
      while (1)
      {
        v10 = v47;
        v11 = v48;
        if (v47 == v48)
          break;
        v42 = 0;
        v43 = -1;
        LODWORD(v45) = 0;
        v44 = 0uLL;
        v42 = *v47;
        v43 = v47[1];
        v44 = *((_OWORD *)v47 + 1);
        v45 = v47[4];
        v46 = *((_DWORD *)v47 + 10);
        if ((char *)v48 - (char *)v47 >= 49)
        {
          v12 = *v47;
          v13 = *((_DWORD *)v47 + 2);
          v14 = *((_DWORD *)v47 + 3);
          v27 = *((_OWORD *)v47 + 1);
          v16 = *((_DWORD *)v47 + 8);
          v15 = *((_DWORD *)v47 + 9);
          v17 = *((_DWORD *)v47 + 10);
          v18 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>((uint64_t)v47, (uint64_t)&v34, ((char *)v48 - (char *)v47) / 0x30uLL);
          if (v11 - 6 == (_QWORD *)v18)
          {
            *(_QWORD *)v18 = v12;
            *(_DWORD *)(v18 + 8) = v13;
            *(_DWORD *)(v18 + 12) = v14;
            *(_OWORD *)(v18 + 16) = v27;
            *(_DWORD *)(v18 + 32) = v16;
            *(_DWORD *)(v18 + 36) = v15;
            *(_DWORD *)(v18 + 40) = v17;
          }
          else
          {
            *(_QWORD *)v18 = *(v11 - 6);
            *(_DWORD *)(v18 + 8) = *((_DWORD *)v11 - 10);
            *(_DWORD *)(v18 + 12) = *((_DWORD *)v11 - 9);
            *(_OWORD *)(v18 + 16) = *((_OWORD *)v11 - 2);
            *(_QWORD *)(v18 + 32) = *(v11 - 2);
            *(_DWORD *)(v18 + 40) = *((_DWORD *)v11 - 2);
            *(v11 - 6) = v12;
            *((_DWORD *)v11 - 10) = v13;
            *((_DWORD *)v11 - 9) = v14;
            *((_OWORD *)v11 - 2) = v27;
            *((_DWORD *)v11 - 4) = v16;
            *((_DWORD *)v11 - 3) = v15;
            *((_DWORD *)v11 - 2) = v17;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>((uint64_t)v10, v18 + 48, (uint64_t)&v34, 0xAAAAAAAAAAAAAAABLL * ((v18 + 48 - (uint64_t)v10) >> 4));
          }
        }
        v48 -= 6;
        if (cv3d::cv::gess::internal::MinimumWeightEar::IsUpToDate((cv3d::cv::gess::internal::MinimumWeightEar *)&v42))
        {
          v40 = -1;
          v41 = -1;
          if (cv3d::cv::gess::internal::MinimumWeightEar::Close((uint64_t)&v42, &v41, &v40))
          {
            if (v40 != -1)
            {
              v19 = cv3d::cv::gess::mesh::Topology::h(v6, &v40);
              cv3d::cv::gess::internal::MinimumWeightEar::MinimumWeightEar((uint64_t)&v34, a1, (_DWORD *)(v19 + 4), &v40);
              v20 = cv3d::cv::gess::mesh::Topology::h(v6, &v40);
              cv3d::cv::gess::internal::MinimumWeightEar::MinimumWeightEar((uint64_t)&v28, a1, &v40, (_DWORD *)(v20 + 8));
              v21 = v48;
              if ((unint64_t)v48 >= v49)
              {
                v22 = std::vector<cv3d::cv::gess::internal::MinimumWeightEar>::__push_back_slow_path<cv3d::cv::gess::internal::MinimumWeightEar const&>((uint64_t *)&v47, (uint64_t)&v34);
              }
              else
              {
                *v48 = v34;
                *((_DWORD *)v21 + 2) = v35;
                *((_DWORD *)v21 + 3) = v36;
                *((_OWORD *)v21 + 1) = v37;
                v21[4] = v38;
                *((_DWORD *)v21 + 10) = v39;
                v22 = (uint64_t)(v21 + 6);
              }
              v48 = (_QWORD *)v22;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>((uint64_t)v47, v22, (uint64_t)v50, 0xAAAAAAAAAAAAAAABLL * ((v22 - (uint64_t)v47) >> 4));
              v23 = v48;
              if ((unint64_t)v48 >= v49)
              {
                v24 = std::vector<cv3d::cv::gess::internal::MinimumWeightEar>::__push_back_slow_path<cv3d::cv::gess::internal::MinimumWeightEar const&>((uint64_t *)&v47, (uint64_t)&v28);
              }
              else
              {
                *v48 = v28;
                *((_DWORD *)v23 + 2) = v29;
                *((_DWORD *)v23 + 3) = v30;
                *((_OWORD *)v23 + 1) = v31;
                v23[4] = v32;
                *((_DWORD *)v23 + 10) = v33;
                v24 = (uint64_t)(v23 + 6);
              }
              v48 = (_QWORD *)v24;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>((uint64_t)v47, v24, (uint64_t)v50, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v47) >> 4));
            }
            LODWORD(v5) = v5 - 1;
          }
        }
        if (v5 <= 2)
          goto LABEL_25;
      }
    }
    v2 = v26;
    if (v10)
    {
      v48 = v10;
      operator delete(v10);
    }
  }
  return v2 != v3;
}

void sub_23C543EC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(_QWORD *)(v1 - 152) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::MinimumWeightEar::IsUpToDate(cv3d::cv::gess::internal::MinimumWeightEar *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)this, *(_DWORD *)(*(_QWORD *)this + 180), *((_DWORD *)this + 2));
  if ((v3 & *v2) == 0)
    return 0;
  v4 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(*(_QWORD *)this, *(_DWORD *)(*(_QWORD *)this + 180), *((_DWORD *)this + 3));
  return (v5 & *v4) != 0;
}

uint64_t cv3d::cv::gess::internal::MinimumWeightEar::Close(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  v6 = (unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1 + 104;
  v8 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, (unsigned int *)(a1 + 8));
  v9 = cv3d::cv::gess::mesh::Topology::h(v7, v8);
  v10 = *(_QWORD *)a1 + 104;
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10, (unsigned int *)(a1 + 12));
  if (*(_DWORD *)(v9 + 16) == *(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v10, v11) + 16))
    return 0;
  else
    return cv3d::cv::gess::mesh::TriMesh::InsertFaceManifold(*(_QWORD *)a1, v6, (unsigned int *)(a1 + 12), a2, a3);
}

float cv3d::cv::gess::internal::TriangleQuality(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float result;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float v15;

  v3 = vsubq_f32(*a2, *a1);
  v4 = vsubq_f32(*a3, *a1);
  v5 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v3, (int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL)), (int32x4_t)v3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), (int32x4_t)v4)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), (int32x4_t)v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 4uLL), (int32x4_t)v3));
  v6 = vmulq_f32(v5, v5);
  v6.i32[3] = 0;
  v7 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6)));
  result = 0.0;
  if (v7 >= 0.00000001)
  {
    v9 = vmulq_f32(v3, v3);
    v9.i32[3] = 0;
    v10 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9));
    if (v10 >= 0.00000001)
    {
      v11 = vsubq_f32(*a2, *a3);
      v12 = vmulq_f32(v4, v4);
      v12.i32[3] = 0;
      v13 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12));
      v14 = vmulq_f32(v11, v11);
      v14.i32[3] = 0;
      if (v10 >= v13)
        v13 = v10;
      v15 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v14, v14));
      if (v13 >= v15)
        v15 = v13;
      return v7 / v15;
    }
  }
  return result;
}

float cv3d::cv::gess::internal::Angle(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v9;
  float v10;
  float v11;

  v2 = *a1;
  v3 = vmulq_f32(v2, v2);
  v3.i32[3] = 0;
  v4 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v3, v3)));
  v5 = *a2;
  v6 = vmulq_f32(v5, v5);
  v6.i32[3] = 0;
  v7 = v4 * sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6)));
  if (v7 < 1.0e-16)
    return -1.0;
  v9 = vmulq_f32(v2, v5);
  v9.i32[3] = 0;
  v10 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v9, v9)) / v7;
  v11 = 1.0;
  if (v10 <= 1.0)
  {
    v11 = v10;
    if (v10 < -1.0)
      v11 = -1.0;
  }
  return acosf(v11);
}

float cv3d::cv::gess::internal::MinimumWeightEar::ComputeAngle(float32x4_t *this)
{
  float32x4_t *v2;
  float32x4_t *v3;
  uint64_t v4;
  uint64_t v5;
  cv3d::cv::gess::mesh::OneRingHEdge *v6;
  unsigned int HEdge;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float result;
  float32x4_t v18;
  unsigned __int8 v19[4];
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22[16];
  unsigned __int8 v23;
  float32x4_t v24;

  v19[0] = 2;
  v2 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, v19);
  v23 = 0;
  v24 = vsubq_f32(*v2, *(float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, &v23));
  v21 = 1;
  v3 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, &v21);
  v20 = 0;
  *(float32x4_t *)v22 = vsubq_f32(*v3, *(float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, &v20));
  this[2].f32[0] = cv3d::cv::gess::internal::Angle(&v24, (float32x4_t *)v22);
  v4 = this->i64[0];
  v22[0] = 0;
  v5 = cv3d::cv::gess::internal::MinimumWeightEar::PointVH((cv3d::cv::gess::internal::MinimumWeightEar *)this, v22);
  v6 = (cv3d::cv::gess::mesh::OneRingHEdge *)cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(&v24, v4 + 104, v5);
  HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge(v6);
  v18 = 0u;
  while (1)
  {
    *(_DWORD *)v19 = HEdge;
    if (HEdge == -1)
      break;
    v8 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(this->i64[0], *(_DWORD *)(this->i64[0] + 180), HEdge);
    if ((*v8 & v9) == 0)
    {
      v10 = this->i64[0];
      v11 = cv3d::cv::gess::mesh::Topology::h(this->i64[0] + 104, (unsigned int *)v19);
      cv3d::cv::gess::math::FaceNormal(v10, *(_DWORD *)(v11 + 16), (float32x4_t *)v22);
      v12 = this->i64[0];
      v13 = cv3d::cv::gess::mesh::Topology::h(this->i64[0] + 104, (unsigned int *)v19);
      v14 = cv3d::cv::gess::mesh::TriMesh::Area(v12, (unsigned int *)(v13 + 16));
      v18 = vaddq_f32(v18, vmulq_n_f32(*(float32x4_t *)v22, v14));
    }
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)&v24);
  }
  v15 = vmulq_f32(v18, v18);
  v15.i32[3] = 0;
  v15.i64[0] = vpaddq_f32(v15, v15).u64[0];
  v15.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v15.f32));
  v16 = vmulq_f32(this[1], vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0)));
  v16.i32[3] = 0;
  result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v16, v16));
  if (result < 0.0)
  {
    result = 6.2832 - this[2].f32[0];
    this[2].f32[0] = result;
  }
  return result;
}

uint64_t cv3d::cv::gess::internal::MinimumWeightEar::Point(cv3d::cv::gess::internal::MinimumWeightEar *this, const unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;

  v3 = *a2;
  if (v3 == 2)
  {
    v11 = *(_QWORD *)this;
    v29 = *(_DWORD *)(*(_QWORD *)this + 176);
    v12 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v11 + 8), &v29);
    v13 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, (unsigned int *)this + 2);
    v9 = *(unsigned int *)(v13 + 12);
    v10 = *(_QWORD *)(v12 + 40);
    if (v9 >= (*(_QWORD *)(v12 + 48) - v10) >> 4)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v13, v14, v15);
  }
  else if (v3 == 1)
  {
    v16 = *(_QWORD *)this;
    v29 = *(_DWORD *)(*(_QWORD *)this + 176);
    v17 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v16 + 8), &v29);
    v18 = *(_QWORD *)this + 104;
    v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v18, (unsigned int *)this + 3);
    v20 = cv3d::cv::gess::mesh::Topology::h(v18, v19);
    v9 = *(unsigned int *)(v20 + 12);
    v10 = *(_QWORD *)(v17 + 40);
    if (v9 >= (*(_QWORD *)(v17 + 48) - v10) >> 4)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v20, v21, v22);
  }
  else if (*a2)
  {
    v23 = *(_QWORD *)this;
    v29 = *(_DWORD *)(*(_QWORD *)this + 176);
    v24 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v23 + 8), &v29);
    v25 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, (unsigned int *)this + 3);
    v9 = *(unsigned int *)(v25 + 12);
    v10 = *(_QWORD *)(v24 + 40);
    if (v9 >= (*(_QWORD *)(v24 + 48) - v10) >> 4)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v25, v26, v27);
  }
  else
  {
    v4 = *(_QWORD *)this;
    v29 = *(_DWORD *)(*(_QWORD *)this + 176);
    v5 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>((uint64_t *)(v4 + 8), &v29);
    v6 = cv3d::cv::gess::mesh::Topology::h(*(_QWORD *)this + 104, (unsigned int *)this + 3);
    v9 = *(unsigned int *)(v6 + 12);
    v10 = *(_QWORD *)(v5 + 40);
    if (v9 >= (*(_QWORD *)(v5 + 48) - v10) >> 4)
      cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(v6, v7, v8);
  }
  return v10 + 16 * v9;
}

uint64_t cv3d::cv::gess::internal::MinimumWeightEar::PointVH(cv3d::cv::gess::internal::MinimumWeightEar *this, const unsigned __int8 *a2)
{
  int v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;

  v2 = *a2;
  if (v2 == 2)
  {
    v3 = (unsigned int *)((char *)this + 8);
    v4 = *(_QWORD *)this;
  }
  else
  {
    if (v2 == 1)
    {
      v7 = *(_QWORD *)this + 104;
      v6 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v7, (unsigned int *)this + 3);
      v5 = v7;
      return cv3d::cv::gess::mesh::Topology::h(v5, v6) + 12;
    }
    v3 = (unsigned int *)((char *)this + 12);
    v4 = *(_QWORD *)this;
  }
  v5 = v4 + 104;
  v6 = v3;
  return cv3d::cv::gess::mesh::Topology::h(v5, v6) + 12;
}

float cv3d::cv::gess::mesh::TriMesh::Area(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;

  v4 = a1 + 104;
  v5 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(a1 + 104, a2);
  v6 = cv3d::cv::gess::mesh::Topology::h(v4, v5);
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, (unsigned int *)(v6 + 8));
  v8 = cv3d::cv::gess::mesh::Topology::h(v4, v7);
  v22 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v8 + 12));
  v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v4, a2);
  v10 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, v9);
  v11 = cv3d::cv::gess::mesh::Topology::h(v4, v10);
  v23 = (int32x4_t)vsubq_f32(v22, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v11 + 12)));
  v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v4, a2);
  v13 = cv3d::cv::gess::mesh::Topology::h(v4, v12);
  v21 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v13 + 12));
  v14 = (unsigned int *)cv3d::cv::gess::mesh::Topology::f(v4, a2);
  v15 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v4, v14);
  v16 = cv3d::cv::gess::mesh::Topology::h(v4, v15);
  v17 = (int32x4_t)vsubq_f32(v21, *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v16 + 12)));
  v18 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v23, (int32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL)), v23), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), v17)), (float32x4_t)vzip2q_s32(vzip1q_s32(v17, (int32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL)), v17), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL), v23));
  v19 = vmulq_f32(v18, v18);
  v19.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v19, v19))) * 0.5;
}

void cv3d::cv::gess::internal::MinimumWeightEar::ComputeQuality(float32x4_t *this)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  float v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;

  v16.i8[0] = 0;
  v2 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, (const unsigned __int8 *)&v16);
  v16.i8[0] = 1;
  v3 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, (const unsigned __int8 *)&v16);
  v16.i8[0] = 2;
  v4 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point((cv3d::cv::gess::internal::MinimumWeightEar *)this, (const unsigned __int8 *)&v16);
  v5 = this->i64[0];
  v6 = this->i64[0] + 104;
  v7 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v6, &this->u32[2]);
  v8 = cv3d::cv::gess::mesh::Topology::h(v6, v7);
  cv3d::cv::gess::math::FaceNormal(v5, *(_DWORD *)(v8 + 16), &v16);
  v9 = this->i64[0];
  v10 = this->i64[0] + 104;
  v11 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v10, &this->u32[3]);
  v12 = cv3d::cv::gess::mesh::Topology::h(v10, v11);
  cv3d::cv::gess::math::FaceNormal(v9, *(_DWORD *)(v12 + 16), &v15);
  v13 = cv3d::cv::gess::internal::Angle(this + 1, &v16);
  v14 = cv3d::cv::gess::internal::Angle(this + 1, &v15);
  if (v13 >= v14)
    v14 = v13;
  this[2].f32[1] = v14;
  this[2].f32[2] = cv3d::cv::gess::internal::TriangleQuality(v2, v3, v4);
}

float32x4_t *cv3d::cv::gess::internal::MinimumWeightEar::ComputeNormal(cv3d::cv::gess::internal::MinimumWeightEar *this)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t *result;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x2_t v9;
  float32x4_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;

  v13 = 0;
  v2 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point(this, &v13);
  v12 = 1;
  v3 = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point(this, &v12);
  v11 = 2;
  result = (float32x4_t *)cv3d::cv::gess::internal::MinimumWeightEar::Point(this, &v11);
  v5 = (int8x16_t)vsubq_f32(*v3, *v2);
  v6 = (int8x16_t)vsubq_f32(*result, *v2);
  v7 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)vextq_s8(v5, v5, 0xCuLL)), (int32x4_t)v5), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v6, v6, 4uLL), (int32x4_t)v6)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v6, (int32x4_t)vextq_s8(v6, v6, 0xCuLL)), (int32x4_t)v6), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v5, v5, 4uLL), (int32x4_t)v5));
  v8 = vmulq_f32(v7, v7);
  v8.i32[3] = 0;
  v9 = (float32x2_t)vpaddq_f32(v8, v8).u64[0];
  v9.f32[0] = sqrtf(vaddv_f32(v9));
  if (v9.f32[0] <= 0.0)
    v10 = (float32x4_t)xmmword_23C603EC0;
  else
    v10 = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32((int32x2_t)v9, 0));
  *((float32x4_t *)this + 1) = v10;
  return result;
}

uint64_t cv3d::cv::gess::internal::MinimumWeightEar::MinimumWeightEar(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *a3;
  *(_DWORD *)(a1 + 12) = *a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  cv3d::cv::gess::internal::MinimumWeightEar::ComputeNormal((cv3d::cv::gess::internal::MinimumWeightEar *)a1);
  cv3d::cv::gess::internal::MinimumWeightEar::ComputeAngle((float32x4_t *)a1);
  cv3d::cv::gess::internal::MinimumWeightEar::ComputeQuality((float32x4_t *)a1);
  return a1;
}

uint64_t std::vector<cv3d::cv::gess::internal::MinimumWeightEar>::__push_back_slow_path<cv3d::cv::gess::internal::MinimumWeightEar const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cv3d::cv::gess::mesh::ObjMaterial>>(v7, v9);
  v11 = &v10[48 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[48 * v12];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  v17 = v11 + 48;
  std::vector<cv3d::cv::gess::internal::MinimumWeightEar>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_23C544A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<cv3d::cv::gess::internal::MinimumWeightEar>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_DWORD *)(v6 - 40) = *(_DWORD *)(v2 + v5 - 40);
      *(_DWORD *)(v6 - 36) = *(_DWORD *)(v2 + v5 - 36);
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

float std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;

  if (a4 >= 2)
  {
    v19 = v4;
    v20 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = a1 + 48 * v8;
    v10 = a2 - 48;
    if (cv3d::cv::gess::internal::MinimumWeightEar::operator<((float *)v9, (float *)(a2 - 48)))
    {
      v13 = *(_QWORD *)(a2 - 48);
      v14 = *(_DWORD *)(a2 - 40);
      v15 = *(_DWORD *)(a2 - 36);
      v16 = *(_OWORD *)(a2 - 32);
      v17 = *(_QWORD *)(a2 - 16);
      v18 = *(float *)(a2 - 8);
      do
      {
        v12 = v9;
        *(_QWORD *)v10 = *(_QWORD *)v9;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v9 + 8);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v9 + 12);
        *(_OWORD *)(v10 + 16) = *(_OWORD *)(v9 + 16);
        *(_QWORD *)(v10 + 32) = *(_QWORD *)(v9 + 32);
        *(_DWORD *)(v10 + 40) = *(_DWORD *)(v9 + 40);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 48 * v8;
        v10 = v12;
      }
      while (cv3d::cv::gess::internal::MinimumWeightEar::operator<((float *)v9, (float *)&v13));
      *(_QWORD *)v12 = v13;
      *(_DWORD *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 12) = v15;
      *(_OWORD *)(v12 + 16) = v16;
      *(_QWORD *)(v12 + 32) = v17;
      result = v18;
      *(float *)(v12 + 40) = v18;
    }
  }
  return result;
}

BOOL cv3d::cv::gess::internal::MinimumWeightEar::operator<(float *a1, float *a2)
{
  float v2;

  v2 = a2[8];
  if (a1[8] <= 3.1416)
  {
    if (v2 > 3.1416)
      return 0;
  }
  else if (v2 <= 3.1416)
  {
    return 1;
  }
  return (float)(a1[10] * 0.90909) + (float)-a1[9] / 3.14159265 * 0.0909091011 < (float)(a2[10] * 0.90909)
                                                                               + (float)-a2[9]
                                                                               / 3.14159265
                                                                               * 0.0909091011;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::less<cv3d::cv::gess::internal::MinimumWeightEar> &,std::__wrap_iter<cv3d::cv::gess::internal::MinimumWeightEar*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 48 * v5 + 48;
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && cv3d::cv::gess::internal::MinimumWeightEar::operator<((float *)(a1 + 48 * v5 + 48), (float *)(a1 + 48 * v5 + 96)))
    {
      v8 += 48;
      v9 = v10;
    }
    *(_QWORD *)a1 = *(_QWORD *)v8;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(v8 + 12);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 32);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 40);
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

uint64_t cv3d::cv::gess::alg::ValidateVoxelSize(float32x4_t *a1, double a2)
{
  int8x16_t v2;
  BOOL v3;
  float32x2_t v4;
  int v5;
  int8x8_t v6;

  *(float *)&a2 = *(float *)&a2 * 2147500000.0;
  v2 = (int8x16_t)vsubq_f32(a1[1], *a1);
  v3 = *(float *)&a2 < *(float *)v2.i32;
  v4 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
  v5 = !v3;
  v2.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  v6 = vmvn_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v2.i8, v4));
  return v5 & v6.i32[0] & v6.i32[1];
}

double cv3d::cv::gess::alg::ClusterVertices@<D0>(uint64_t a1@<X0>, __int32 *a2@<X1>, uint64_t a3@<X8>, int32x2_t a4@<D0>)
{
  int32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x2_t v9;
  float32x4_t v10;
  float32x2_t v11;
  int8x8_t v12;
  uint64_t v13;
  double result;
  unsigned int v20;
  int v21;
  int v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  unsigned int v31;
  _DWORD v32[3];
  float32x4_t v33;
  float32x4_t v34[2];
  _DWORD v35[3];
  float32x4_t v36;

  a4.i32[0] = *a2;
  v26 = a4;
  v6 = vdupq_lane_s32(a4, 0);
  v6.i32[3] = 0;
  v28 = (float32x4_t)v6;
  cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox((cv3d::cv::gess::alg *)a1, v34);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vmulq_f32(v28, v7);
  v9.i32[1] = 1325400064;
  v29 = vsubq_f32(v34[0], v8);
  v10 = vsubq_f32(vaddq_f32(v8, v34[1]), v29);
  if ((float)(*(float *)v26.i32 * 2147500000.0) >= v10.f32[0]
    && (*(float *)v9.i32 = *(float *)v26.i32 * 2147500000.0,
        v11.i32[1] = v10.i32[1],
        v11.i32[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0],
        v12 = vmvn_s8((int8x8_t)vcgt_f32(v11, (float32x2_t)vdup_lane_s32(v9, 0))),
        (v12.i8[4] & 1) != 0)
    && (v12.i8[0] & 1) != 0)
  {
    v13 = 0;
    v27 = (float32x4_t)vdupq_lane_s32(v26, 0);
    __asm { FMOV            V1.4S, #1.0 }
    v33 = vaddq_f32(vdivq_f32(v10, v27), _Q1);
    do
    {
      v32[v13] = v33.f32[v13];
      ++v13;
    }
    while (v13 != 3);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
    v31 = 0;
    if (*(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104))
    {
      v20 = 0;
      v21 = v32[0];
      v22 = v32[1];
      do
      {
        v23 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v20);
        v24 = 0;
        v36 = vdivq_f32(vsubq_f32(*v23, v29), v27);
        do
        {
          v35[v24] = v36.f32[v24];
          ++v24;
        }
        while (v24 != 3);
        v30 = v35[0] + (v35[1] + v22 * v35[2]) * v21;
        v36.i64[0] = (uint64_t)&v30;
        v25 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a3, (unsigned int *)&v30, (uint64_t)&std::piecewise_construct, &v36);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)(v25 + 3), &v31, &v31);
        v20 = ++v31;
      }
      while (v31 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  return result;
}

void sub_23C544F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

float32x4_t cv3d::cv::gess::alg::AvgVAttributeVector3@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, float32x4_t *a3@<X8>, float32x4_t a4@<Q1>)
{
  float32x4_t v4;
  uint64_t **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float32x4_t result;

  v4 = 0uLL;
  *a3 = 0u;
  v5 = *(uint64_t ***)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 40);
    v7 = (*(_QWORD *)(a2 + 48) - v6) >> 4;
    do
    {
      v8 = *((unsigned int *)v5 + 4);
      if (v7 <= v8)
        cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>();
      a4 = *(float32x4_t *)(v6 + 16 * v8);
      v4 = vaddq_f32(v4, a4);
      *a3 = v4;
      v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  a4.f32[0] = (float)*(unint64_t *)(a1 + 24);
  result = vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0));
  *a3 = result;
  return result;
}

void cv3d::cv::gess::alg::VoxelCenterVector3(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, float32x4_t **a4@<X8>)
{
  uint64_t *v6;
  __int32 v7;
  _QWORD *i;
  uint64_t v9;
  float32x4_t v10;
  unint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = (uint64_t *)(a1 + 8);
  v23 = 0uLL;
  v7 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v23, a3);
  if (v7 != -1)
  {
    for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    {
      v23.i32[0] = v7;
      v9 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v6, (unsigned int *)&v23);
      cv3d::cv::gess::alg::AvgVAttributeVector3((uint64_t)(i + 3), v9, &v23, v10);
      v12 = a4[1];
      v11 = (unint64_t)a4[2];
      if ((unint64_t)v12 >= v11)
      {
        v14 = v12 - *a4;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*a4;
        v16 = v15 >> 3;
        if (v15 >> 3 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a4 + 2), v17);
        else
          v18 = 0;
        v19 = (float32x4_t *)&v18[16 * v14];
        *v19 = v23;
        v13 = v19 + 1;
        v21 = *a4;
        v20 = a4[1];
        if (v20 != *a4)
        {
          do
          {
            v22 = v20[-1];
            --v20;
            v19[-1] = v22;
            --v19;
          }
          while (v20 != v21);
          v20 = *a4;
        }
        *a4 = v19;
        a4[1] = v13;
        a4[2] = (float32x4_t *)&v18[16 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v23;
        v13 = v12 + 1;
      }
      a4[1] = v13;
    }
  }
}

void sub_23C545158(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::VertexClusterCenters(uint64_t a1, uint64_t *a2, __int32 *a3)
{
  int32x2_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  void *v18[3];
  _BYTE v19[40];

  std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a2);
  cv3d::cv::gess::alg::ClusterVertices(a1, a3, (uint64_t)v19, v6);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_POSITION[0]);
  cv3d::cv::gess::alg::VoxelCenterVector3(a1, (uint64_t)v19, (unsigned __int8 *)__p, (float32x4_t **)v18);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  cv3d::cv::gess::alg::VoxelCenterVector3(a1, (uint64_t)v19, (unsigned __int8 *)v14, (float32x4_t **)__p);
  if (v15 < 0)
    operator delete(v14[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  cv3d::cv::gess::alg::VoxelCenterVector3(a1, (uint64_t)v19, (unsigned __int8 *)v12, (float32x4_t **)v14);
  if (v13 < 0)
    operator delete(v12[0]);
  v7 = a2[1];
  if (v7 >= a2[2])
  {
    v8 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(a2, (__int128 **)v18);
  }
  else
  {
    std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>((uint64_t)a2, (__int128 **)v18);
    v8 = v7 + 24;
  }
  a2[1] = v8;
  if (v8 >= a2[2])
  {
    v9 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(a2, (__int128 **)__p);
  }
  else
  {
    std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>((uint64_t)a2, (__int128 **)__p);
    v9 = v8 + 24;
  }
  a2[1] = v9;
  if (v9 >= a2[2])
  {
    v10 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(a2, (__int128 **)v14);
  }
  else
  {
    std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>((uint64_t)a2, (__int128 **)v14);
    v10 = v9 + 24;
  }
  a2[1] = v10;
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table((uint64_t)v19);
  return 1;
}

void sub_23C54534C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29)
{
  uint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a28)
    operator delete(a28);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table(v29 - 72);
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::QuantizeVoxelVector3(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v4;
  __int32 v5;
  _QWORD *v6;
  uint64_t v8;
  float32x4_t v9;
  uint64_t **v10;
  float32x4_t v11;
  unint64_t v12;
  uint64_t v13;
  float32x4_t v15;

  v15 = 0uLL;
  v4 = (uint64_t *)(a1 + 8);
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>((uint64_t **)(a1 + 8), (uint64_t)&v15, a3);
  v6 = *(_QWORD **)(a2 + 16);
  if (v5 != -1 && v6 != 0)
  {
    do
    {
      v15.i32[0] = v5;
      v8 = cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v4, (unsigned int *)&v15);
      cv3d::cv::gess::alg::AvgVAttributeVector3((uint64_t)(v6 + 3), v8, &v15, v9);
      v10 = (uint64_t **)v6[5];
      if (v10)
      {
        v11 = v15;
        do
        {
          v12 = *((unsigned int *)v10 + 4);
          v13 = *(_QWORD *)(v8 + 40);
          if (v12 >= (*(_QWORD *)(v8 + 48) - v13) >> 4)
            cv3d::cv::gess::mesh::QuadMesh::InitVF();
          *(float32x4_t *)(v13 + 16 * v12) = v11;
          v10 = (uint64_t **)*v10;
        }
        while (v10);
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  return v5 != -1;
}

uint64_t cv3d::cv::gess::alg::VertexClusterSimplify(cv3d::cv::gess::alg *a1, __int32 *a2, int32x2_t a3)
{
  float v4;
  double v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v14;
  _BYTE v15[40];

  v4 = *(float *)a2;
  cv3d::cv::gess::alg::ClusterVertices((uint64_t)a1, a2, (uint64_t)v15, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_POSITION[0]);
  cv3d::cv::gess::alg::QuantizeVoxelVector3((uint64_t)a1, (uint64_t)v15, (unsigned __int8 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_COLOR[0]);
  cv3d::cv::gess::alg::QuantizeVoxelVector3((uint64_t)a1, (uint64_t)v15, (unsigned __int8 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  cv3d::cv::gess::alg::QuantizeVoxelVector3((uint64_t)a1, (uint64_t)v15, (unsigned __int8 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  v5 = v4;
  v6 = 2;
  do
  {
    v8 = *((_QWORD *)a1 + 13);
    v7 = *((_QWORD *)a1 + 14);
    cv3d::cv::gess::alg::CollapseShortEdges(a1, 0, v5, 0.1, 1, 0.1, 3);
    v9 = (v7 - v8) >> 2;
    v10 = *((_QWORD *)a1 + 14) - *((_QWORD *)a1 + 13);
    printf("vc %zu/%zu\n", v9, v10 >> 2);
  }
  while (v9 > v10 >> 2 && v6-- != 0);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table((uint64_t)v15);
  return 1;
}

void sub_23C5455F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

double cv3d::cv::gess::alg::ClusterVertices@<D0>(uint64_t *a1@<X0>, __int32 *a2@<X1>, uint64_t a3@<X8>, int32x2_t a4@<D0>)
{
  int32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x2_t v9;
  float32x4_t v10;
  float32x2_t v11;
  int8x8_t v12;
  uint64_t v13;
  double result;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  int32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int v30;
  unsigned int v31;
  _DWORD v32[3];
  float32x4_t v33;
  float32x4_t v34[2];
  _DWORD v35[3];
  float32x4_t v36;

  a4.i32[0] = *a2;
  v26 = a4;
  v6 = vdupq_lane_s32(a4, 0);
  v6.i32[3] = 0;
  v28 = (float32x4_t)v6;
  cv3d::cv::gess::alg::ComputeAxisAlignedBoundingBox(a1, v34);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vmulq_f32(v28, v7);
  v9.i32[1] = 1325400064;
  v29 = vsubq_f32(v34[0], v8);
  v10 = vsubq_f32(vaddq_f32(v8, v34[1]), v29);
  if ((float)(*(float *)v26.i32 * 2147500000.0) >= v10.f32[0]
    && (*(float *)v9.i32 = *(float *)v26.i32 * 2147500000.0,
        v11.i32[1] = v10.i32[1],
        v11.i32[0] = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u32[0],
        v12 = vmvn_s8((int8x8_t)vcgt_f32(v11, (float32x2_t)vdup_lane_s32(v9, 0))),
        (v12.i8[4] & 1) != 0)
    && (v12.i8[0] & 1) != 0)
  {
    v13 = 0;
    v27 = (float32x4_t)vdupq_lane_s32(v26, 0);
    __asm { FMOV            V1.4S, #1.0 }
    v33 = vaddq_f32(vdivq_f32(v10, v27), _Q1);
    do
    {
      v32[v13] = v33.f32[v13];
      ++v13;
    }
    while (v13 != 3);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
    v31 = 0;
    v20 = *a1;
    if (a1[1] != *a1)
    {
      v21 = 0;
      v22 = v32[0];
      v23 = v32[1];
      do
      {
        v24 = 0;
        v36 = vdivq_f32(vsubq_f32(*(float32x4_t *)(v20 + 16 * v21), v29), v27);
        do
        {
          v35[v24] = v36.f32[v24];
          ++v24;
        }
        while (v24 != 3);
        v30 = v35[0] + (v35[1] + v23 * v35[2]) * v22;
        v36.i64[0] = (uint64_t)&v30;
        v25 = std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a3, (unsigned int *)&v30, (uint64_t)&std::piecewise_construct, &v36);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)(v25 + 3), &v31, &v31);
        v21 = ++v31;
        v20 = *a1;
      }
      while (v31 < (unint64_t)((a1[1] - *a1) >> 4));
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  return result;
}

void sub_23C545808(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::AvgVoxelCenter(_QWORD *a1@<X0>, uint64_t a2@<X1>, float32x4_t **a3@<X8>, float32x4_t a4@<Q1>)
{
  _QWORD *v5;
  float32x4_t *v7;
  _QWORD *v8;
  uint64_t **v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float32x4_t *v17;
  char *v18;
  char *v19;
  float32x4_t v20;
  float32x4_t v21;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1[1] != *a1)
  {
    v5 = *(_QWORD **)(a2 + 16);
    if (v5)
    {
      v7 = 0;
      v8 = a3 + 2;
      do
      {
        v9 = (uint64_t **)v5[5];
        if (v9)
        {
          v10 = 0uLL;
          do
          {
            a4 = *(float32x4_t *)(*a1 + 16 * *((unsigned int *)v9 + 4));
            v10 = vaddq_f32(v10, a4);
            v9 = (uint64_t **)*v9;
          }
          while (v9);
        }
        else
        {
          v10 = 0uLL;
        }
        a4.f32[0] = (float)(unint64_t)v5[6];
        a4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
        v11 = vdivq_f32(v10, a4);
        if ((unint64_t)v7 >= *v8)
        {
          v21 = v11;
          v12 = v7 - *a3;
          if ((unint64_t)(v12 + 1) >> 60)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v13 = *v8 - (_QWORD)*a3;
          v14 = v13 >> 3;
          if (v13 >> 3 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>((uint64_t)(a3 + 2), v15);
          else
            v16 = 0;
          v17 = (float32x4_t *)&v16[16 * v12];
          *v17 = v21;
          v7 = v17 + 1;
          v19 = (char *)*a3;
          v18 = (char *)a3[1];
          if (v18 != (char *)*a3)
          {
            do
            {
              v20 = *((float32x4_t *)v18 - 1);
              v18 -= 16;
              v17[-1] = v20;
              --v17;
            }
            while (v18 != v19);
            v18 = (char *)*a3;
          }
          *a3 = v17;
          a3[1] = v7;
          a3[2] = (float32x4_t *)&v16[16 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *v7++ = v11;
        }
        a3[1] = v7;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
  }
}

void sub_23C545980(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::alg::VertexClusterDownsample(uint64_t **a1, uint64_t *a2, __int32 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *__p[3];
  void *v18[3];
  void *v19[3];
  _BYTE v20[40];

  v4 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a2);
    cv3d::cv::gess::alg::ClusterVertices(*a1, a3, (uint64_t)v20, v8);
    cv3d::cv::gess::alg::AvgVoxelCenter(*a1, (uint64_t)v20, (float32x4_t **)v19, v9);
    cv3d::cv::gess::alg::AvgVoxelCenter(*a1 + 3, (uint64_t)v20, (float32x4_t **)v18, v10);
    cv3d::cv::gess::alg::AvgVoxelCenter(*a1 + 6, (uint64_t)v20, (float32x4_t **)__p, v11);
    v12 = a2[1];
    if (v12 >= a2[2])
    {
      v13 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(a2, (__int128 **)v19);
    }
    else
    {
      std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>((uint64_t)a2, (__int128 **)v19);
      v13 = v12 + 24;
    }
    a2[1] = v13;
    if (v13 >= a2[2])
    {
      v14 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(a2, (__int128 **)v18);
    }
    else
    {
      std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>((uint64_t)a2, (__int128 **)v18);
      v14 = v13 + 24;
    }
    a2[1] = v14;
    if (v14 >= a2[2])
    {
      v15 = std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(a2, (__int128 **)__p);
    }
    else
    {
      std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>((uint64_t)a2, (__int128 **)__p);
      v15 = v14 + 24;
    }
    a2[1] = v15;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v18[0])
    {
      v18[1] = v18[0];
      operator delete(v18[0]);
    }
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table((uint64_t)v20);
  }
  return v3 != v4;
}

void sub_23C545B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__construct_one_at_end[abi:ne180100]<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_23C545BB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__emplace_back_slow_path<std::vector<cv3d::cv::gess::math::Vector3T<float>>&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<cv3d::cv::gess::math::Vector3T<float>>::__init_with_size[abi:ne180100]<cv3d::cv::gess::math::Vector3T<float>*,cv3d::cv::gess::math::Vector3T<float>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_23C545CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::math::Vector3T<float>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<cv3d::cv::gess::math::Vector3T<float>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::math::Vector3T<float>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<cv3d::cv::gess::math::Vector3T<float>>>,std::reverse_iterator<std::vector<cv3d::cv::gess::math::Vector3T<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_23C5460E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    operator delete(v2);
  }
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_23C54657C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float cv3d::cv::gess::internal::DihedralAngle(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  int8x16_t v4;
  int8x16_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;

  v4 = (int8x16_t)vsubq_f32(*a2, *a1);
  v5 = (int8x16_t)vsubq_f32(*a3, *a2);
  v6 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v4, (int32x4_t)vextq_s8(v4, v4, 0xCuLL)), (int32x4_t)v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v5, v5, 4uLL), (int32x4_t)v5)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v5, (int32x4_t)vextq_s8(v5, v5, 0xCuLL)), (int32x4_t)v5), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v4, v4, 4uLL), (int32x4_t)v4));
  v7 = (int8x16_t)vsubq_f32(*a1, *a2);
  v8 = (int8x16_t)vsubq_f32(*a4, *a1);
  v9 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v7, (int32x4_t)vextq_s8(v7, v7, 0xCuLL)), (int32x4_t)v7), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v8, v8, 4uLL), (int32x4_t)v8)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v8, (int32x4_t)vextq_s8(v8, v8, 0xCuLL)), (int32x4_t)v8), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v7, v7, 4uLL), (int32x4_t)v7));
  v10 = vmulq_f32(v6, v6);
  v10.i32[3] = 0;
  v10.i64[0] = vpaddq_f32(v10, v10).u64[0];
  v10.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v10.f32));
  v11 = vmulq_f32(v9, v9);
  v11.i32[3] = 0;
  v11.i64[0] = vpaddq_f32(v11, v11).u64[0];
  v11.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v11.f32));
  v12 = vmulq_f32(vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0)), vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0)));
  v12.i32[3] = 0;
  return acosf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v12, v12))) * 180.0 / 3.14159265;
}

uint64_t cv3d::cv::gess::internal::ExistsEdge(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int HEdge;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v14;
  _BYTE v15[16];

  v5 = a1 + 104;
  cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v15, a1 + 104, a2);
  while (1)
  {
    HEdge = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v15);
    v14 = HEdge;
    if (HEdge == -1)
      break;
    v7 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), HEdge);
    if ((v8 & *v7) == 0)
    {
      v9 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, &v14);
      v10 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v9);
      if ((v11 & *v10) == 0)
      {
        v12 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h(v5, &v14);
        if (*(_DWORD *)(cv3d::cv::gess::mesh::Topology::h(v5, v12) + 12) == *a3)
          return 1;
      }
    }
  }
  return 0;
}

float cv3d::cv::gess::internal::Area(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;

  v3 = (int32x4_t)vsubq_f32(*a2, *a1);
  v4 = (int32x4_t)vsubq_f32(*a3, *a2);
  v5 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v3, (int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL)), v3), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 4uLL), v4)), (float32x4_t)vzip2q_s32(vzip1q_s32(v4, (int32x4_t)vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL)), v4), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 4uLL), v3));
  v6 = vmulq_f32(v5, v5);
  v6.i32[3] = 0;
  return sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v6, v6))) * 0.5;
}

float cv3d::cv::gess::internal::CalculateWeight(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  float v14;
  float32x4_t *v21;
  float32x4_t *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v8 = *a5;
  v9 = a7;
  if (((*(_QWORD *)(*(_QWORD *)(*a5 + 24 * a6) + (((unint64_t)a7 >> 3) & 0x1FFFFFF8)) >> a7) & 1) != 0)
    return 180.0;
  v11 = a8;
  if (((*(_QWORD *)(*(_QWORD *)(v8 + 24 * a7) + (((unint64_t)a8 >> 3) & 0x1FFFFFF8)) >> a8) & 1) != 0)
    return 180.0;
  v13 = a6;
  if (((*(_QWORD *)(*(_QWORD *)(v8 + 24 * a8) + (((unint64_t)a6 >> 3) & 0x1FFFFFF8)) >> a6) & 1) != 0
    || *(_DWORD *)(*(_QWORD *)(*a4 + 24 * a6) + 4 * a7) == -1
    || *(_DWORD *)(*(_QWORD *)(*a4 + 24 * a7) + 4 * a8) == -1)
  {
    return 180.0;
  }
  if (a6 + 1 == a7)
  {
    v30 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * a6));
    v29 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v9));
    v28 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v11));
    v21 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a3 + 4 * v13));
  }
  else
  {
    v30 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * a6));
    v29 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v9));
    v28 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v11));
    v21 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2+ 4 * *(unsigned int *)(*(_QWORD *)(*a4 + 24 * v13) + 4 * v9)));
  }
  v27 = *v21;
  v14 = fmaxf(cv3d::cv::gess::internal::DihedralAngle(&v30, &v29, &v28, &v27), 0.0);
  v30 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v9));
  v29 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v11));
  v28 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v13));
  if (a7 + 1 == a8)
    v22 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a3 + 4 * v9));
  else
    v22 = (float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2+ 4 * *(unsigned int *)(*(_QWORD *)(*a4 + 24 * v9) + 4 * v11)));
  v27 = *v22;
  v23 = cv3d::cv::gess::internal::DihedralAngle(&v30, &v29, &v28, &v27);
  if (v14 < v23)
    v14 = v23;
  v24 = *a2;
  v25 = a2[1] - *a2;
  if (!v25)
    cv3d::cv::gess::internal::CalculateWeight();
  if (!a6 && (v25 >> 2) - 1 == v11)
  {
    v30 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v24 + 4 * v11));
    v29 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v13));
    v28 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v9));
    v27 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a3 + 4 * v11));
    v26 = cv3d::cv::gess::internal::DihedralAngle(&v30, &v29, &v28, &v27);
    if (v14 < v26)
      v14 = v26;
    v24 = *a2;
  }
  cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(v24 + 4 * v13));
  cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v9));
  cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), *(_DWORD *)(*a2 + 4 * v11));
  return v14;
}

uint64_t cv3d::cv::gess::internal::ApplyFilling(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;

  if (a4 != -1 && a4 + 1 != a5)
  {
    v9 = *a3;
    do
    {
      v10 = *(unsigned int *)(*(_QWORD *)(v9 + 24 * a4) + 4 * a5);
      if ((_DWORD)v10 == a4 || (_DWORD)v10 == a5 || a4 == a5 || a5 == -1 || (_DWORD)v10 == -1)
        break;
      v15 = a4;
      cv3d::cv::gess::mesh::TriMesh::InsertFace(a1, (_DWORD *)(*a2 + 4 * a4), (int *)(*a2 + 4 * v10), (_DWORD *)(*a2 + 4 * a5));
      cv3d::cv::gess::internal::ApplyFilling(a1, a2, a3, v15, *(unsigned int *)(*(_QWORD *)(*a3 + 24 * v15) + 4 * a5));
      v9 = *a3;
      a4 = *(_DWORD *)(*(_QWORD *)(*a3 + 24 * v15) + 4 * a5);
      if (a4 == -1)
        break;
    }
    while (a4 + 1 != a5);
  }
  return 1;
}

BOOL cv3d::cv::gess::internal::FillTargetHoleMinimumWeight(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  _BOOL8 v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int Vertex;
  int v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int i;
  _QWORD *v47;
  uint64_t v48;
  unsigned int *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unsigned int *v68;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float v80;
  float v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  BOOL v94;
  float *v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  unsigned int v106;
  unsigned __int8 v107[16];
  std::vector<unsigned int>::value_type __x[2];
  char *v109;
  char *v110;
  std::vector<unsigned int> v111;
  void *__p[3];
  _QWORD v113[3];
  void *v114[3];
  char *v115;
  char *v116;
  char *v117;
  unsigned int *v118;
  char *v119;
  char *v120;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v119 = 0;
  v120 = 0;
  v115 = 0;
  v116 = 0;
  v4 = (_QWORD *)(a1 + 104);
  v117 = 0;
  v118 = 0;
  do
  {
    v5 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, v2);
    v6 = v5;
    v7 = v119;
    if (v119 >= v120)
    {
      v9 = (v119 - (char *)v118) >> 2;
      if ((unint64_t)(v9 + 1) >> 62)
        goto LABEL_119;
      v10 = (v120 - (char *)v118) >> 1;
      if (v10 <= v9 + 1)
        v10 = v9 + 1;
      if ((unint64_t)(v120 - (char *)v118) >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v120, v11);
      else
        v12 = 0;
      v13 = (unsigned int *)&v12[4 * v9];
      *v13 = *(_DWORD *)(v6 + 12);
      v8 = (char *)(v13 + 1);
      v15 = v118;
      v14 = (unsigned int *)v119;
      if (v119 != (char *)v118)
      {
        do
        {
          v16 = *--v14;
          *--v13 = v16;
        }
        while (v14 != v15);
        v14 = v118;
      }
      v118 = v13;
      v119 = v8;
      v120 = &v12[4 * v11];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_DWORD *)v119 = *(_DWORD *)(v5 + 12);
      v8 = v7 + 4;
    }
    v119 = v8;
    v17 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, v2);
    v18 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, v17);
    v19 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, (unsigned int *)(v18 + 8));
    v20 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, v19);
    v21 = v20;
    v22 = v116;
    if (v116 >= v117)
    {
      v24 = (v116 - v115) >> 2;
      if ((unint64_t)(v24 + 1) >> 62)
LABEL_119:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = (v117 - v115) >> 1;
      if (v25 <= v24 + 1)
        v25 = v24 + 1;
      if ((unint64_t)(v117 - v115) >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v117, v26);
      else
        v27 = 0;
      v28 = &v27[4 * v24];
      *(_DWORD *)v28 = *(_DWORD *)(v21 + 12);
      v23 = v28 + 4;
      v30 = v115;
      v29 = v116;
      if (v116 != v115)
      {
        do
        {
          v31 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v28 - 1) = v31;
          v28 -= 4;
        }
        while (v29 != v30);
        v29 = v115;
      }
      v115 = v28;
      v116 = v23;
      v117 = &v27[4 * v26];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_DWORD *)v116 = *(_DWORD *)(v20 + 12);
      v23 = v22 + 4;
    }
    v116 = v23;
    ++v2;
  }
  while (v2 != v3);
  v32 = (unint64_t)(v119 - (char *)v118) >> 2;
  v33 = (_DWORD)v32 != 0;
  if ((_DWORD)v32)
  {
    v34 = ((unint64_t)(v119 - (char *)v118) >> 2);
    std::vector<float>::vector(v114, v34);
    v35 = 0;
    do
    {
      cv3d::cv::gess::mesh::OneRingVertex::OneRingVertex(v113, v4, &v118[v35]);
      Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v113);
      if (Vertex == -1)
      {
        v38 = 0.0;
      }
      else
      {
        v37 = 0;
        v38 = 0.0;
        do
        {
          v103 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), Vertex);
          v101 = *(float32x4_t *)cv3d::cv::gess::mesh::MeshProperty::attribute<cv3d::cv::gess::math::Vector3T<float>>(a1, *(_DWORD *)(a1 + 176), v118[v35]);
          Vertex = cv3d::cv::gess::mesh::OneRingVertex::NextVertex((cv3d::cv::gess::mesh::OneRingVertex *)v113);
          v39 = vsubq_f32(v103, v101);
          v40 = vmulq_f32(v39, v39);
          v40.i32[3] = 0;
          v38 = v38 + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40)));
          --v37;
        }
        while (Vertex != -1);
        if (v37)
          v38 = v38 / (float)-v37;
      }
      *((float *)v114[0] + v35++) = v38;
    }
    while (v35 != v34);
    v111.__begin_ = (std::vector<unsigned int>::pointer)0x7F7FFFFF43340000;
    std::vector<cv3d::cv::gess::internal::Weight>::vector(__p, v34, &v111);
    std::vector<std::vector<cv3d::cv::gess::internal::Weight>>::vector(v113, v34, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v111, v34, __x);
    std::vector<std::vector<unsigned int>>::vector(__p, v34, (uint64_t)&v111);
    if (v111.__begin_)
    {
      v111.__end_ = v111.__begin_;
      operator delete(v111.__begin_);
    }
    v97 = (v32 - 1);
    if ((_DWORD)v32 != 1)
    {
      v41 = 0;
      v42 = (uint64_t *)v113[0];
      do
      {
        v43 = *v42;
        v42 += 3;
        *(_QWORD *)(v43 + v41 + 8) = 0;
        v41 += 8;
      }
      while (8 * v97 != v41);
    }
    v107[0] = 0;
    std::vector<BOOL>::vector(__x, v34, v107);
    std::vector<std::vector<BOOL>>::vector(&v111, v34, (uint64_t)__x);
    if (*(_QWORD *)__x)
      operator delete(*(void **)__x);
    if ((_DWORD)v32 != 1)
    {
      v100 = v34;
      v44 = 0;
      v45 = 1;
      do
      {
        *(_QWORD *)__x = 0;
        v109 = 0;
        v110 = 0;
        cv3d::cv::gess::mesh::OneRingHEdge::OneRingHEdge(v107, v4, &v118[v44]);
        for (i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v107);
              ;
              i = cv3d::cv::gess::mesh::OneRingHEdge::NextHEdge((cv3d::cv::gess::mesh::OneRingHEdge *)v107))
        {
          v106 = i;
          if (i == -1)
            break;
          v47 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), i);
          if ((*v47 & v48) == 0)
          {
            v49 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, &v106);
            v50 = (_QWORD *)cv3d::cv::gess::mesh::MeshProperty::attribute<BOOL>(a1, *(_DWORD *)(a1 + 180), *v49);
            if ((*v50 & v51) == 0)
            {
              v52 = (unsigned int *)cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, &v106);
              v53 = cv3d::cv::gess::mesh::Topology::h((uint64_t)v4, v52);
              v54 = v53;
              v55 = v109;
              if (v109 >= v110)
              {
                v57 = (uint64_t)&v109[-*(_QWORD *)__x] >> 2;
                if ((unint64_t)(v57 + 1) >> 62)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v58 = (uint64_t)&v110[-*(_QWORD *)__x] >> 1;
                if (v58 <= v57 + 1)
                  v58 = v57 + 1;
                if ((unint64_t)&v110[-*(_QWORD *)__x] >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v58;
                if (v59)
                  v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v110, v59);
                else
                  v60 = 0;
                v61 = &v60[4 * v57];
                *(_DWORD *)v61 = *(_DWORD *)(v54 + 12);
                v56 = v61 + 4;
                v63 = *(char **)__x;
                v62 = v109;
                if (v109 != *(char **)__x)
                {
                  do
                  {
                    v64 = *((_DWORD *)v62 - 1);
                    v62 -= 4;
                    *((_DWORD *)v61 - 1) = v64;
                    v61 -= 4;
                  }
                  while (v62 != v63);
                  v62 = *(char **)__x;
                }
                *(_QWORD *)__x = v61;
                v109 = v56;
                v110 = &v60[4 * v59];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v109 = *(_DWORD *)(v53 + 12);
                v56 = v55 + 4;
              }
              v109 = v56;
            }
          }
        }
        v65 = v44 + 1;
        v66 = *(char **)__x;
        if (v44 + 1 < v100)
        {
          v67 = v109;
          v68 = v118;
          begin = v111.__begin_;
          v70 = &v111.__begin_[6 * v44];
          v71 = v45;
          do
          {
            if (v66 != v67)
            {
              v72 = v66;
              while (*(_DWORD *)v72 != v68[v71])
              {
                v72 += 4;
                if (v72 == v67)
                  goto LABEL_86;
              }
              *(_QWORD *)(*(_QWORD *)v70 + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v71;
              *(_QWORD *)(*(_QWORD *)&begin[6 * v71] + 8 * (v44 >> 6)) |= 1 << v44;
            }
LABEL_86:
            ++v71;
          }
          while ((_DWORD)v71 != (_DWORD)v32);
          v66 = *(char **)__x;
        }
        if (v66)
        {
          v109 = v66;
          operator delete(v66);
        }
        ++v45;
        ++v44;
      }
      while (v65 != v97);
      if (v32 >= 3)
      {
        v99 = 1;
        v73 = 2;
        do
        {
          v74 = 0;
          v75 = 0;
          v76 = 1;
          v77 = 24;
          v78 = v73;
          v98 = v73;
          do
          {
            v102 = v75 + 1;
            v79 = -1;
            v80 = 180.0;
            v81 = 3.4028e38;
            v82 = v99;
            v83 = v77;
            v104 = v74;
            v84 = v76;
            do
            {
              v85 = *(_QWORD *)(v113[0] + 24 * v75) + v74;
              v86 = (float *)(*(_QWORD *)(v113[0] + v83) + 8 * v78);
              v87 = *(float *)(v85 + 8);
              v88 = *(float *)(v85 + 12);
              v89 = *v86;
              v90 = v86[1];
              v91 = cv3d::cv::gess::internal::CalculateWeight(a1, (uint64_t *)&v118, &v115, __p, (uint64_t *)&v111, v75, v84, v78);
              if (v87 >= v89)
                v93 = v87;
              else
                v93 = v89;
              if (v93 < v91)
                v93 = v91;
              if (v93 < v80
                || ((float)(v93 - v80) < 0.00000001 ? (v94 = (float)((float)(v88 + v90) + v92) < v81) : (v94 = 0), v94))
              {
                v80 = v93;
                v81 = (float)(v88 + v90) + v92;
                v79 = v84;
              }
              ++v84;
              v74 += 8;
              v83 += 24;
              --v82;
            }
            while (v82);
            v95 = (float *)(*(_QWORD *)(v113[0] + 24 * v75) + 8 * v78);
            *v95 = v80;
            v95[1] = v81;
            *(_DWORD *)(*((_QWORD *)__p[0] + 3 * v75++) + 4 * v78++) = v79;
            ++v76;
            v74 = v104 + 8;
            v77 += 24;
          }
          while (v102 + v98 < v100);
          v73 = v98 + 1;
          ++v99;
        }
        while (v98 + 1 != v100);
      }
    }
    cv3d::cv::gess::internal::ApplyFilling(a1, &v118, (uint64_t *)__p, 0, v97);
    *(_QWORD *)__x = &v111;
    std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
    v111.__begin_ = (std::vector<unsigned int>::pointer)__p;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    __p[0] = v113;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v33 = (_DWORD)v32 != 0;
    if (v114[0])
    {
      v114[1] = v114[0];
      operator delete(v114[0]);
    }
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (v118)
  {
    v119 = (char *)v118;
    operator delete(v118);
  }
  return v33;
}

void sub_23C5475BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char ***a23,uint64_t a24,uint64_t a25,char **a26,uint64_t a27,uint64_t a28,char *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v36;
  void **v38;
  void *v39;
  void *v40;

  v38 = (void **)(v36 - 200);
  a23 = &a26;
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a26 = &a29;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  a29 = &a32;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  v39 = *v38;
  if (*v38)
  {
    *(_QWORD *)(v36 - 192) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 176);
  if (v40)
  {
    *(_QWORD *)(v36 - 168) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::internal::Weight>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_23C54775C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<cv3d::cv::gess::internal::Weight>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<cv3d::cv::gess::internal::Weight>::__init_with_size[abi:ne180100]<cv3d::cv::gess::internal::Weight*,cv3d::cv::gess::internal::Weight*>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_23C547810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<cv3d::cv::gess::internal::Weight>::__init_with_size[abi:ne180100]<cv3d::cv::gess::internal::Weight*,cv3d::cv::gess::internal::Weight*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C54788C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_23C54790C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<unsigned int>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_23C5479C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *std::vector<std::vector<BOOL>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_23C547B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

void cv3d::cv::gess::internal::parallel_for (unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::thread *v12;
  std::thread *v13;
  unint64_t v14;
  std::thread v15;
  _QWORD v16[3];
  unint64_t v17;

  if (a3 <= 1)
    goto LABEL_8;
  v5 = a3;
  v6 = std::thread::hardware_concurrency();
  if (v6)
    v7 = v6;
  else
    v7 = 8;
  if (v7 < v5)
    v5 = v7;
  if (v5 > 1)
  {
    v8 = a1 / v5;
    v9 = a1 % v5;
    std::vector<std::thread>::vector(v16, v5);
    v10 = 0;
    v11 = 0;
    do
    {
      v17 = v11 * v8;
      v14 = v11 * v8 + v8;
      std::thread::thread<std::function<void ()(unsigned long,unsigned long)> const&,unsigned long &,unsigned long,void>(&v15.__t_, a2, &v17, &v14);
      if (*(_QWORD *)(v16[0] + v10))
        std::terminate();
      *(std::thread *)(v16[0] + v10) = v15;
      v15.__t_ = 0;
      std::thread::~thread(&v15);
      ++v11;
      v10 += 8;
    }
    while (8 * v5 != v10);
    if (v9)
      std::function<void ()(unsigned long,unsigned long)>::operator()(a2, v8 * v5, v8 * v5 + v9);
    v12 = (std::thread *)v16[0];
    v13 = (std::thread *)v16[1];
    while (v12 != v13)
      std::thread::join(v12++);
    v17 = (unint64_t)v16;
    std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  }
  else
  {
LABEL_8:
    std::function<void ()(unsigned long,unsigned long)>::operator()(a2, 0, a1);
  }
}

void sub_23C547D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

_QWORD *std::vector<std::thread>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23C547DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::thread>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  std::thread *v2;
  std::thread *v4;
  void *v5;

  v1 = *a1;
  v2 = (std::thread *)**a1;
  if (v2)
  {
    v4 = (std::thread *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        std::thread::~thread(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::thread::thread<std::function<void ()(unsigned long,unsigned long)> const&,unsigned long &,unsigned long,void>(pthread_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  std::__thread_struct *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::__thread_struct *v13;

  v8 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v8);
  v13 = v8;
  v9 = (_QWORD *)operator new();
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEENS_8functionIFvmmEEEmmEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS7_SA_mmEJEJEJS7_RKSA_RmmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSH_IJDpT2_EEEDpOT3_(v9, (uint64_t *)&v13, a2, a3, a4);
  v10 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,std::function<void ()(unsigned long,unsigned long)>,unsigned long,unsigned long>>, v9);
  if (v10)
  {
    std::__throw_system_error(v10, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v11 = (uint64_t)v13;
    v13 = 0;
    if (v11)
    {
      v12 = MEMORY[0x242620FF0]();
      MEMORY[0x2426211B8](v12, 0x20C4093837F09);
    }
  }
}

void sub_23C547F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x2426211B8](v2, 0x1020C40A408C0D3);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,std::function<void ()(unsigned long,unsigned long)>,unsigned long,unsigned long>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  uint64_t *v3;
  uint64_t *v5;

  v5 = a1;
  v1 = std::__thread_local_data();
  v2 = (const void *)*v5;
  *v5 = 0;
  pthread_setspecific(v1->__key_, v2);
  std::function<void ()(unsigned long,unsigned long)>::operator()((uint64_t)(v5 + 1), v5[5], v5[6]);
  v3 = v5;
  v5 = 0;
  if (v3)
    std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,std::function<void ()(unsigned long,unsigned long)>,unsigned long,unsigned long>>::operator()[abi:ne180100]((uint64_t)&v5, v3);
  return 0;
}

void sub_23C548030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10)
{
  uint64_t *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,std::function<void ()(unsigned long,unsigned long)>,unsigned long,unsigned long>>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS4_EEEENS_8functionIFvmmEEEmmEEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS7_SA_mmEJEJEJS7_RKSA_RmmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSH_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;

  v8 = *a2;
  *a2 = 0;
  *a1 = v8;
  std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a3);
  a1[5] = *a4;
  a1[6] = *a5;
  return a1;
}

void sub_23C5480A4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,std::function<void ()(unsigned long,unsigned long)>,unsigned long,unsigned long>>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = (uint64_t *)a2[4];
    if (v3 == a2 + 1)
    {
      v4 = 4;
      v3 = a2 + 1;
    }
    else
    {
      if (!v3)
      {
LABEL_8:
        std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](a2, 0);
        JUMPOUT(0x2426211B8);
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x242620FF0]();
    JUMPOUT(0x2426211B8);
  }
  return result;
}

uint64_t *ShaderCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  char *v5;
  char __dst[28301];
  uint64_t v7;

  MEMORY[0x24BDAC7A8](a1, a2, a3);
  v7 = *MEMORY[0x24BDAC8D0];
  {
    memcpy(__dst, &unk_23C6052A8, sizeof(__dst));
    v5 = XorCompileTime::XorString<28299ul,0,char>::decrypt(__dst);
    std::string::basic_string[abi:ne180100]<0>(&ShaderCode(void)::shader_code, v5);
    __cxa_atexit(MEMORY[0x24BEDACF0], &ShaderCode(void)::shader_code, &dword_23C4E9000);
  }
  return &ShaderCode(void)::shader_code;
}

void sub_23C548250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_BYTE *XorCompileTime::XorString<28299ul,0,char>::decrypt(char *a1)
{
  _BYTE *result;
  char v3;
  char v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *a1;
  result = a1 + 1;
  v3 = v4;
  v5 = 28299;
  v6 = result;
  do
  {
    *v6++ ^= v3;
    --v5;
  }
  while (v5);
  a1[28300] = 0;
  return result;
}

id GetRuntimeMTLLibrary(void *a1, uint64_t a2)
{
  unsigned __int8 v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];
  uint64_t v8;
  id v9;

  v8 = a2;
  v9 = a1;
  if ((v2 & 1) == 0
  {
    v7[0] = &v9;
    v7[1] = &v8;
    GetRuntimeMTLLibrary(objc_object  {objcproto9MTLDevice}*,NSError * {__autoreleasing}*)::$_0::operator()((uint64_t)v7, v5, v6);
    GetRuntimeMTLLibrary(objc_object  {objcproto9MTLDevice}*,NSError * {__autoreleasing}*)::_library = objc_claimAutoreleasedReturnValue();
  }
  v3 = (id)GetRuntimeMTLLibrary(objc_object  {objcproto9MTLDevice}*,NSError * {__autoreleasing}*)::_library;

  return v3;
}

void sub_23C54832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

id GetRuntimeMTLLibrary(objc_object  {objcproto9MTLDevice}*,NSError * {__autoreleasing}*)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = (void *)MEMORY[0x24BDD17C8];
  ShaderCode(a1, a2, a3);
  if (byte_256BB087F >= 0)
    v5 = &ShaderCode(void)::shader_code;
  else
    v5 = (uint64_t *)ShaderCode(void)::shader_code;
  objc_msgSend(v4, "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_opt_new();
  objc_msgSend(v7, "setLanguageVersion:", 131075);
  v8 = (void *)objc_msgSend(**(id **)a1, "newLibraryWithSource:options:error:", v6, v7, **(_QWORD **)(a1 + 8));

  return v8;
}

void sub_23C5483E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GetMTLLibrary(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  void *v12;

  v7 = a1;
  v8 = v7;
  if (a4)
  {
    GetRuntimeMTLLibrary(v7, a2);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "newLibraryWithURL:error:", v12, a2);

  }
  return v9;
}

void sub_23C5484B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::GPUEncountersError(cv3d::cv::gess::alg::internal *this, NSError *a2)
{
  cv3d::cv::gess::alg::internal *v2;
  cv3d::cv::gess::alg::internal *v3;
  _BOOL8 v4;

  v2 = this;
  v3 = v2;
  v4 = v2 && -[cv3d::cv::gess::alg::internal code](v2, "code");

  return v4;
}

void sub_23C548524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::FindGPU(unint64_t **a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  _BOOL8 v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *context;
  void *v45;
  void *__src;
  char *v47;
  char *v48;
  void *__p;
  char *v50;
  char *v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x24BDAC8D0];
  context = (void *)MEMORY[0x2426214AC]();
  v2 = MTLCreateSystemDefaultDevice();
  v52[0] = v2;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v52, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v45 = v3;
  v4 = objc_msgSend(v3, "count");
  v5 = v4;
  __p = 0;
  v50 = 0;
  v51 = 0;
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    if (v4)
    {
      v19 = 0;
      v20 = 0;
      do
      {
        if (v19 >= v51)
        {
          v21 = (char *)__p;
          v22 = (v19 - (_BYTE *)__p) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v24 = v51 - (_BYTE *)__p;
          if ((v51 - (_BYTE *)__p) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v51, v25);
            v21 = (char *)__p;
            v19 = v50;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = v20;
          v8 = v27 + 8;
          while (v19 != v21)
          {
            v28 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          __p = v27;
          v50 = v8;
          v51 = &v26[8 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v19 = v20;
          v8 = v19 + 8;
        }
        v50 = v8;
        ++v20;
        v19 = v8;
      }
      while (v20 != v5);
    }
    else
    {
      v8 = 0;
    }
  }
  else
  {
    v8 = 0;
    do
    {
      v9 = *v6;
      if (*v6 < v5)
      {
        if (v8 >= v51)
        {
          v11 = (char *)__p;
          v12 = (v8 - (_BYTE *)__p) >> 3;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v14 = v51 - (_BYTE *)__p;
          if ((v51 - (_BYTE *)__p) >> 2 > v13)
            v13 = v14 >> 2;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v51, v15);
            v11 = (char *)__p;
            v8 = v50;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[8 * v12];
          *(_QWORD *)v17 = v9;
          v10 = v17 + 8;
          while (v8 != v11)
          {
            v18 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v17 - 1) = v18;
            v17 -= 8;
          }
          __p = v17;
          v50 = v10;
          v51 = &v16[8 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v10 = v8 + 8;
        }
        v50 = v10;
        v8 = v10;
      }
      ++v6;
    }
    while (v6 != v7);
  }
  __src = 0;
  v47 = 0;
  v48 = 0;
  v29 = (char *)__p;
  v30 = __p != v8;
  if (__p == v8)
  {
LABEL_67:
    v42 = (char *)__src;
    if (!__src)
      goto LABEL_69;
    goto LABEL_68;
  }
  v31 = 0;
  do
  {
    v32 = *(_QWORD *)v29;
    if (v31 >= v48)
    {
      v33 = (char *)__src;
      v34 = (v31 - (_BYTE *)__src) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v36 = v48 - (_BYTE *)__src;
      if ((v48 - (_BYTE *)__src) >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v48, v37);
        v33 = (char *)__src;
        v31 = v47;
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[8 * v34];
      *(_QWORD *)v39 = v32;
      v40 = v39 + 8;
      while (v31 != v33)
      {
        v41 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *((_QWORD *)v39 - 1) = v41;
        v39 -= 8;
      }
      __src = v39;
      v47 = v40;
      v48 = &v38[8 * v37];
      if (v33)
        operator delete(v33);
      v31 = v40;
    }
    else
    {
      *(_QWORD *)v31 = v32;
      v31 += 8;
    }
    v47 = v31;
    v29 += 8;
  }
  while (v29 != v8);
  v42 = (char *)__src;
  if (__src == v31)
  {
    v30 = 0;
    if (!__src)
      goto LABEL_69;
LABEL_68:
    v47 = v42;
    operator delete(v42);
    goto LABEL_69;
  }
  if (&__src != (void **)a1)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)a1, (char *)__src, (uint64_t)v31, (v31 - (_BYTE *)__src) >> 3);
    goto LABEL_67;
  }
  v30 = 1;
  if (__src)
    goto LABEL_68;
LABEL_69:
  if (__p)
  {
    v50 = (char *)__p;
    operator delete(__p);
  }

  objc_autoreleasePoolPop(context);
  return v30;
}

void sub_23C548910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);

  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::internal::CustomSortGPU(unint64_t **a1)
{
  void *v2;
  id v3;
  void *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t i;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t *v29;
  void *v30;
  void *v31;
  void *__p;
  unint64_t *v33;
  char *v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x2426214AC]();
  v3 = MTLCreateSystemDefaultDevice();
  v35[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v35, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "count");
  if (v5)
  {
    v30 = v2;
    v31 = v4;
    __p = 0;
    v33 = 0;
    v34 = 0;
    v6 = *a1;
    v7 = a1[1];
    if (*a1 == v7)
    {
      v19 = 0;
      for (i = 0; i != v5; ++i)
      {
        if (v19 >= v34)
        {
          v21 = (char *)__p;
          v22 = (v19 - (_BYTE *)__p) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v24 = v34 - (_BYTE *)__p;
          if ((v34 - (_BYTE *)__p) >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v34, v25);
            v21 = (char *)__p;
            v19 = (char *)v33;
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[8 * v22];
          *(_QWORD *)v27 = i;
          v8 = (unint64_t *)(v27 + 8);
          while (v19 != v21)
          {
            v28 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v27 - 1) = v28;
            v27 -= 8;
          }
          __p = v27;
          v33 = v8;
          v34 = &v26[8 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *(_QWORD *)v19 = i;
          v8 = (unint64_t *)(v19 + 8);
        }
        v33 = v8;
        v19 = (char *)v8;
      }
    }
    else
    {
      v8 = 0;
      do
      {
        v9 = *v6;
        if (*v6 < v5)
        {
          if (v8 >= (unint64_t *)v34)
          {
            v11 = (unint64_t *)__p;
            v12 = ((char *)v8 - (_BYTE *)__p) >> 3;
            v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v14 = v34 - (_BYTE *)__p;
            if ((v34 - (_BYTE *)__p) >> 2 > v13)
              v13 = v14 >> 2;
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v13;
            if (v15)
            {
              v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v34, v15);
              v11 = (unint64_t *)__p;
              v8 = v33;
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[8 * v12];
            *(_QWORD *)v17 = v9;
            v10 = (unint64_t *)(v17 + 8);
            while (v8 != v11)
            {
              v18 = *--v8;
              *((_QWORD *)v17 - 1) = v18;
              v17 -= 8;
            }
            __p = v17;
            v33 = v10;
            v34 = &v16[8 * v15];
            if (v11)
              operator delete(v11);
          }
          else
          {
            *v8 = v9;
            v10 = v8 + 1;
          }
          v33 = v10;
          v8 = v10;
        }
        ++v6;
      }
      while (v6 != v7);
    }
    v29 = (unint64_t *)__p;
    if (&__p != (void **)a1)
    {
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)a1, (char *)__p, (uint64_t)v8, ((char *)v8 - (_BYTE *)__p) >> 3);
      v29 = (unint64_t *)__p;
    }
    v2 = v30;
    v4 = v31;
    if (v29)
    {
      v33 = v29;
      operator delete(v29);
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_23C548C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C548CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL GESSAlgQuadricErrorMetricsSimplify(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  _BOOL8 v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  char v11;
  char v12;
  int v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v11 = 0;
    v13 = 1065353216;
    v12 = objc_msgSend(v4, "fixBoundary");
    objc_msgSend(v4, "strength");
    v10 = v5;
    v15 = 0;
    v6 = cv3d::cv::gess::alg::QuadricErrorMetricSimplify((cv3d::cv::gess::mesh::PolyMesh *)objc_msgSend(v3, "meshImpl"), &v10, (uint64_t)v14);
    v7 = v15;
    if (v15 == v14)
    {
      v8 = 4;
      v7 = v14;
      goto LABEL_8;
    }
    if (v15)
    {
      v8 = 5;
LABEL_8:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_23C548E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  void *v16;
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a15;
  if (a15 == v17)
  {
    v20 = 4;
    v19 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_23C548F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t Bytes2Attribute(void *a1, uint64_t *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "length");
    std::vector<cv3d::cv::gess::math::Vector3T<float>>::resize((uint64_t)a2, v5 / 0xC);
    v6 = objc_msgSend(objc_retainAutorelease(v4), "mutableBytes");
    if (v5 >= 0xC)
    {
      v7 = 0;
      v8 = *a2;
      if (v5 / 0xC <= 1)
        v9 = 1;
      else
        v9 = v5 / 0xC;
      do
      {
        for (i = 0; i != 12; i += 4)
          *(_DWORD *)(v8 + i) = *(_DWORD *)(v6 + i);
        ++v7;
        v6 += 12;
        v8 += 16;
      }
      while (v7 != v9);
    }
  }

  return 1;
}

void sub_23C548FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id Attribute2Bytes(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  v1 = a1[1] - *a1;
  if (v1)
  {
    v3 = v1 >> 4;
    v4 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEC8]), "initWithLength:", 12 * (v1 >> 4)));
    v5 = objc_msgSend(v4, "mutableBytes");
    v6 = 0;
    v7 = *a1;
    if (v3 <= 1)
      v8 = 1;
    else
      v8 = v3;
    do
    {
      for (i = 0; i != 12; i += 4)
        *(_DWORD *)(v5 + i) = *(_DWORD *)(v7 + i);
      ++v6;
      v5 += 12;
      v7 += 16;
    }
    while (v6 != v8);
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_23C54909C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgVertexClusterSimplify(void *a1, void *a2)
{
  id v3;
  id v4;
  __int32 v5;
  cv3d::cv::gess::alg *v6;
  int32x2_t v7;
  uint64_t v8;
  __int32 v10[2];

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v10[1] = 0;
    objc_msgSend(v4, "voxelSize");
    v10[0] = v5;
    v6 = (cv3d::cv::gess::alg *)objc_msgSend(v3, "meshImpl");
    v8 = cv3d::cv::gess::alg::VertexClusterSimplify(v6, v10, v7);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_23C54913C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C5492B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL GESSAlgVertexClusterDownsample(void *a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  __int32 v17;
  _BOOL8 v18;
  void **v20[3];
  uint64_t *v21[3];
  __int32 v22[2];
  void ***v23;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a7;
  if (objc_msgSend(v13, "length"))
  {
    v22[1] = 0;
    objc_msgSend(v16, "voxelSize");
    v22[0] = v17;
    std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::vector(v21, 3uLL);
    std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::vector(v20, 3uLL);
    Bytes2Attribute(v13, v21[0]);
    Bytes2Attribute(v14, v21[0] + 3);
    Bytes2Attribute(v15, v21[0] + 6);
    v18 = cv3d::cv::gess::alg::VertexClusterDownsample(v21, (uint64_t *)v20, v22);
    Attribute2Bytes((uint64_t *)v20[0]);
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    Attribute2Bytes((uint64_t *)v20[0] + 3);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
    Attribute2Bytes((uint64_t *)v20[0] + 6);
    *a6 = (id)objc_claimAutoreleasedReturnValue();
    v23 = v20;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    v20[0] = (void **)v21;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v20);
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_23C5494D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  a9 = (void **)&a12;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<cv3d::cv::gess::math::Vector3T<float>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<tinyexr::ChannelInfo>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_23C5495B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::ConfigureProcessingContext(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;

  v2 = (void *)MEMORY[0x2426214AC]();
  v3 = MTLCreateSystemDefaultDevice();
  v4 = *(id *)a1;
  *(_QWORD *)a1 = v3;

  v5 = objc_msgSend(*(id *)a1, "newCommandQueue");
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;

  objc_autoreleasePoolPop(v2);
  return 1;
}

uint64_t cv3d::cv::gess::alg::internal::RunPoissonFill(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  int v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  double v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  void *v45;
  char *v46;
  char *v47;
  unsigned int v48;
  __int128 v49;
  int v50;
  void *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  id v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  void *v71;
  char *v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  cv3d::cv::gess::util::os *v77;
  cv3d::cv::gess::alg::internal *v78;
  NSError *v79;
  void *v80;
  id v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  void *v101;
  id v102;
  id v103;
  uint64_t v104;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  void *context;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  __int128 v126;
  void *v127;
  _QWORD v128[3];
  _QWORD v129[3];
  _QWORD v130[3];
  _QWORD v131[3];
  _QWORD v132[3];
  _QWORD v133[3];
  id v134;
  void **v135[2];
  char v136;
  char **v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  id v141;
  id v142;
  id v143;
  char *v144;
  char *v145;
  unint64_t v146;
  id v147;
  int v148[3];

  v125 = *(_QWORD *)(a2 + 4);
  v14 = a5;
  v15 = MEMORY[0x2426214AC]();
  v16 = *a1;
  v147 = 0;
  GetMTLLibrary(v16, (uint64_t)&v147, a6, a8);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v147;
  context = (void *)v15;
  v109 = a7;
  v111 = v14;
  if (v18)
  {
    if (v14)
      *(_DWORD *)(a4 + 384) = 5;
    v115 = v18;
    if (*(_QWORD *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v144, (char *)&unk_23C62207F);
      LODWORD(v137) = 5;
      v19 = *(_QWORD *)(a7 + 24);
      if (!v19)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, char ***, char **))(*(_QWORD *)v19 + 48))(v19, &v137, &v144);
      if (SHIBYTE(v146) < 0)
        operator delete(v144);
    }
    v20 = 0;
    v124 = 0;
LABEL_17:
    v114 = 0;
    v26 = 0;
    goto LABEL_18;
  }
  v21 = (void *)objc_msgSend(v17, "newFunctionWithName:", CFSTR("fwt"));
  v22 = *a1;
  v143 = 0;
  v23 = objc_msgSend(v22, "newComputePipelineStateWithFunction:error:", v21, &v143);
  v24 = v143;
  v124 = (void *)v23;
  if (v24)
  {
    if (v111)
      *(_DWORD *)(a4 + 384) = 5;
    v115 = v24;
    if (*(_QWORD *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v144, (char *)&unk_23C62207F);
      LODWORD(v137) = 5;
      v25 = *(_QWORD *)(a7 + 24);
      if (!v25)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, char ***, char **))(*(_QWORD *)v25 + 48))(v25, &v137, &v144);
      if (SHIBYTE(v146) < 0)
        operator delete(v144);
    }

    v20 = 0;
    goto LABEL_17;
  }

  v86 = (void *)objc_msgSend(v17, "newFunctionWithName:", CFSTR("bcwt"));
  v87 = *a1;
  v142 = 0;
  v123 = objc_msgSend(v87, "newComputePipelineStateWithFunction:error:", v86, &v142);
  v88 = v142;
  if (v88)
  {
    if (v111)
      *(_DWORD *)(a4 + 384) = 5;
    v115 = v88;
    if (*(_QWORD *)(a7 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v144, (char *)&unk_23C62207F);
      LODWORD(v137) = 5;
      v89 = *(_QWORD *)(a7 + 24);
      if (!v89)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, char ***, char **))(*(_QWORD *)v89 + 48))(v89, &v137, &v144);
      if (SHIBYTE(v146) < 0)
        operator delete(v144);
    }

    v114 = 0;
    v26 = 0;
  }
  else
  {

    v101 = (void *)objc_msgSend(v17, "newFunctionWithName:", CFSTR("grre"));
    v102 = *a1;
    v141 = 0;
    v114 = (void *)objc_msgSend(v102, "newComputePipelineStateWithFunction:error:", v101, &v141);
    v103 = v141;
    v26 = v103 == 0;
    v115 = v103;
    if (v103)
    {
      if (v111)
        *(_DWORD *)(a4 + 384) = 5;
      if (*(_QWORD *)(a7 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(&v144, (char *)&unk_23C62207F);
        LODWORD(v137) = 5;
        v104 = *(_QWORD *)(a7 + 24);
        if (!v104)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, char ***, char **))(*(_QWORD *)v104 + 48))(v104, &v137, &v144);
        if (SHIBYTE(v146) < 0)
          operator delete(v144);
      }
    }

  }
  v20 = (void *)v123;
LABEL_18:
  v27 = v125;
  v28 = HIDWORD(v125);
  if (HIDWORD(v125) >= v125)
    v29 = v125;
  else
    v29 = HIDWORD(v125);
  v30 = log2((double)v29);
  v140 = v125;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  if (v26)
  {
    v31 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (4 * *(_DWORD *)(a2 + 4) * *(_DWORD *)(a2 + 8)), 0);
    if (v31)
    {
      v118 = objc_retainAutorelease(v31);
      v32 = objc_msgSend(v118, "contents");
      v110 = (v30 + -1.0);
      if (HIDWORD(v125))
      {
        v34 = 0;
        v35 = 0;
        v36 = 2;
        do
        {
          if ((_DWORD)v125)
          {
            v37 = 0;
            v38 = v36;
            v39 = v34;
            do
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a3 + 16)
                             + ((v37 + v35 * *(_DWORD *)(a3 + 4)) * *(_DWORD *)(a3 + 12)));
              if (v40)
              {
                *(_BYTE *)(v32 + v39) = (int)(float)(*(float *)(*(_QWORD *)(a2 + 16) + 4 * (v38 - 2)) * 255.0);
                *(_BYTE *)(v32 + v39 + 1) = (int)(float)(*(float *)(*(_QWORD *)(a2 + 16) + 4 * (v38 - 1)) * 255.0);
                v41 = (int)(float)(*(float *)(*(_QWORD *)(a2 + 16) + 4 * v38) * 255.0);
                v40 = -1;
                v42 = v39;
              }
              else
              {
                LOBYTE(v41) = 0;
                v42 = 4 * (v35 * v125 + v37);
                *(_BYTE *)(v32 + v39) = 0;
                *(_BYTE *)(v32 + v39 + 1) = 0;
              }
              *(_BYTE *)(v32 + (v42 | 2)) = v41;
              *(_BYTE *)(v32 + (v42 | 3)) = v40;
              ++v37;
              v39 += 4;
              v38 += 3;
            }
            while (v125 != v37);
          }
          ++v35;
          v34 += 4 * v125;
          v36 += 3 * v125;
        }
        while (v35 != HIDWORD(v125));
      }
      if ((_DWORD)v110)
      {
        *(_QWORD *)&v33 = *(_QWORD *)(a2 + 4);
        v126 = v33;
        v43 = (v30 + -1.0);
        while (1)
        {
          *((_QWORD *)&v44 + 1) = *((_QWORD *)&v126 + 1);
          *(uint32x2_t *)&v44 = vshr_n_u32(*(uint32x2_t *)&v126, 1uLL);
          v126 = v44;
          v45 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (4 * DWORD1(v44) * v44), 0);
          v134 = v45;
          if (!v45)
            break;
          v135[0] = (void **)v126;
          v46 = v145;
          if ((unint64_t)v145 >= v146)
          {
            v47 = _ZNSt3__16vectorINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJRS4_S5_EEEPS6_DpOT_(&v144, &v134, v135);
          }
          else
          {
            *(_QWORD *)v46 = v45;
            *((void ***)v46 + 1) = v135[0];
            v47 = v46 + 16;
          }
          v145 = v47;

          if (!--v43)
          {
            v48 = (v30 + -1.0);
            while (1)
            {
              v49 = v126;
              v50 = DWORD1(v126);
              *(int32x2_t *)&v49 = vadd_s32(*(int32x2_t *)&v49, *(int32x2_t *)&v49);
              v126 = v49;
              v51 = (void *)objc_msgSend(*a1, "newBufferWithLength:options:", (8 * v50 * v49), 0);
              v134 = v51;
              if (!v51)
                break;
              v135[0] = (void **)v126;
              v52 = v138;
              if ((unint64_t)v138 >= v139)
              {
                v53 = _ZNSt3__16vectorINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJRS4_S5_EEEPS6_DpOT_((char **)&v137, &v134, v135);
              }
              else
              {
                *(_QWORD *)v52 = v51;
                *((void ***)v52 + 1) = v135[0];
                v53 = v52 + 16;
              }
              v138 = v53;

              if (!--v48)
                goto LABEL_45;
            }
            if (v111)
              *(_DWORD *)(a4 + 384) = 2;
            v73 = v114;
            v80 = v115;
            v81 = v118;
            if (*(_QWORD *)(v109 + 24))
            {
              std::string::basic_string[abi:ne180100]<0>(v135, (char *)&unk_23C62207F);
              v148[0] = 2;
              v90 = *(_QWORD *)(v109 + 24);
              if (!v90)
                std::__throw_bad_function_call[abi:ne180100]();
LABEL_109:
              (*(void (**)(uint64_t, int *, void ***))(*(_QWORD *)v90 + 48))(v90, v148, v135);
              if (v136 < 0)
                operator delete(v135[0]);
              v83 = v134;
              goto LABEL_112;
            }
            goto LABEL_113;
          }
        }
        if (v111)
          *(_DWORD *)(a4 + 384) = 2;
        v73 = v114;
        v80 = v115;
        v81 = v118;
        if (*(_QWORD *)(v109 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(v135, (char *)&unk_23C62207F);
          v148[0] = 2;
          v90 = *(_QWORD *)(v109 + 24);
          if (!v90)
            std::__throw_bad_function_call[abi:ne180100]();
          goto LABEL_109;
        }
        goto LABEL_113;
      }
LABEL_45:
      v106 = v17;
      v122 = v20;
      objc_msgSend(a1[1], "commandBuffer");
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      if ((_DWORD)v110)
      {
        v54 = 0;
        v55 = -1;
        do
        {
          v56 = v144;
          v57 = objc_msgSend(v124, "threadExecutionWidth");
          v58 = objc_msgSend(v124, "maxTotalThreadsPerThreadgroup");
          v119 = *(_QWORD *)&v56[v54 + 8];
          objc_msgSend(v127, "computeCommandEncoder");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v60 = v59;
          v61 = v118;
          if (v54)
            v61 = *(id *)&v144[v54 - 16];
          objc_msgSend(v59, "setBuffer:offset:atIndex:", v61, 0, 0);
          if (v54)
            v62 = &v144[16 * v55 + 8];
          else
            v62 = (char *)&v140;
          objc_msgSend(v60, "setBytes:length:atIndex:", v62, 8, 1);
          objc_msgSend(v60, "setBytes:length:atIndex:", &v144[v54 + 8], 8, 2);
          objc_msgSend(v60, "setBuffer:offset:atIndex:", *(_QWORD *)&v144[v54], 0, 3);
          objc_msgSend(v60, "setComputePipelineState:", v124);
          v133[0] = (v57 + v119 - 1) / v57;
          v133[1] = (v58 / v57 + HIDWORD(v119) - 1) / (v58 / v57);
          v133[2] = 1;
          v132[0] = v57;
          v132[1] = v58 / v57;
          v132[2] = 1;
          objc_msgSend(v60, "dispatchThreadgroups:threadsPerThreadgroup:", v133, v132);
          objc_msgSend(v60, "endEncoding");

          ++v55;
          v54 += 16;
        }
        while (16 * (v30 + -1.0) != v54);
        v63 = 0;
        v64 = (v110 - 1);
        v65 = (v110 - 2);
        v116 = v64 - 1;
        v117 = v64;
        v107 = 16 * v64;
        v108 = 16 * v65;
        v66 = v122;
        do
        {
          v67 = (char *)v137;
          v68 = objc_msgSend(v66, "threadExecutionWidth");
          v69 = objc_msgSend(v66, "maxTotalThreadsPerThreadgroup");
          v120 = *(_QWORD *)&v67[v63 * 8 + 8];
          objc_msgSend(v127, "computeCommandEncoder");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          v71 = v70;
          if (v63 * 8)
          {
            if (2 * (v110 - 1) == v63)
            {
              objc_msgSend(v70, "setBuffer:offset:atIndex:", v118, 0, 0);
              objc_msgSend(v71, "setBuffer:offset:atIndex:", v137[2 * v116], 0, 1);
              objc_msgSend(v71, "setBytes:length:atIndex:", &v140, 8, 2);
              objc_msgSend(v71, "setBytes:length:atIndex:", &v137[2 * v116 + 1], 8, 3);
              v72 = (char *)&v137[2 * v117];
            }
            else
            {
              objc_msgSend(v70, "setBuffer:offset:atIndex:", *(_QWORD *)&v144[16 * v65], 0, 0);
              objc_msgSend(v71, "setBuffer:offset:atIndex:", v137[v63 - 2], 0, 1);
              objc_msgSend(v71, "setBytes:length:atIndex:", &v144[16 * v65 + 8], 8, 2);
              objc_msgSend(v71, "setBytes:length:atIndex:", &v137[v63 - 1], 8, 3);
              v72 = (char *)&v137[v63];
            }
          }
          else
          {
            objc_msgSend(v70, "setBuffer:offset:atIndex:", *(_QWORD *)&v144[v108], 0, 0);
            objc_msgSend(v71, "setBuffer:offset:atIndex:", *(_QWORD *)&v144[v107], 0, 1);
            objc_msgSend(v71, "setBytes:length:atIndex:", &v144[16 * (v110 - 2) + 8], 8, 2);
            objc_msgSend(v71, "setBytes:length:atIndex:", &v144[16 * v117 + 8], 8, 3);
            v72 = (char *)v137;
          }
          objc_msgSend(v71, "setBuffer:offset:atIndex:", *(_QWORD *)v72, 0, 4);
          objc_msgSend(v71, "setComputePipelineState:", v122);
          v131[0] = (v68 + v120 - 1) / v68;
          v131[1] = (v69 / v68 + HIDWORD(v120) - 1) / (v69 / v68);
          v131[2] = 1;
          v130[0] = v68;
          v130[1] = v69 / v68;
          v130[2] = 1;
          objc_msgSend(v71, "dispatchThreadgroups:threadsPerThreadgroup:", v131, v130);
          objc_msgSend(v71, "endEncoding");

          LODWORD(v65) = v65 - 1;
          v63 += 2;
          v66 = v122;
        }
        while (2 * v110 != v63);
      }
      v73 = v114;
      v74 = objc_msgSend(v114, "threadExecutionWidth");
      v75 = objc_msgSend(v114, "maxTotalThreadsPerThreadgroup");
      v121 = v140;
      v17 = v106;
      objc_msgSend(v127, "computeCommandEncoder");
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setBuffer:offset:atIndex:", v137[2 * (v110 - 1)], 0, 0);
      objc_msgSend(v76, "setBuffer:offset:atIndex:", v118, 0, 1);
      objc_msgSend(v76, "setBytes:length:atIndex:", &v140, 8, 2);
      objc_msgSend(v76, "setComputePipelineState:", v114);
      v129[0] = (v74 + v121 - 1) / v74;
      v129[1] = (v75 / v74 + HIDWORD(v121) - 1) / (v75 / v74);
      v129[2] = 1;
      v128[0] = v74;
      v128[1] = v75 / v74;
      v128[2] = 1;
      objc_msgSend(v76, "dispatchThreadgroups:threadsPerThreadgroup:", v129, v128);
      objc_msgSend(v76, "endEncoding");

      cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v77);
      objc_msgSend(v127, "commit");
      objc_msgSend(v127, "waitUntilCompleted");
      objc_msgSend(v127, "error");
      v78 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
      LODWORD(v74) = cv3d::cv::gess::alg::internal::GPUEncountersError(v78, v79);

      if ((_DWORD)v74)
      {
        v20 = v122;
        if (v111)
          *(_DWORD *)(a4 + 384) = 16;
        v80 = v115;
        v81 = v118;
        if (*(_QWORD *)(v109 + 24))
        {
          std::string::basic_string[abi:ne180100]<0>(v135, (char *)&unk_23C62207F);
          LODWORD(v134) = 16;
          v82 = *(_QWORD *)(v109 + 24);
          if (!v82)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, id *, void ***))(*(_QWORD *)v82 + 48))(v82, &v134, v135);
          if (v136 < 0)
            operator delete(v135[0]);
        }
        v83 = v127;
LABEL_112:

LABEL_113:
        v84 = 0;
        goto LABEL_114;
      }

      v81 = objc_retainAutorelease(v118);
      v20 = v122;
      v91 = objc_msgSend(v81, "contents");
      if (v28)
      {
        v93 = 0;
        v94 = 0;
        v95 = *(_QWORD *)(a2 + 16);
        v96 = 2;
        do
        {
          if (v27)
          {
            v97 = 0;
            v98 = v96;
            do
            {
              LOBYTE(v92) = *(_BYTE *)(v91 + (v93 + v97));
              *(float *)&v99 = (float)LODWORD(v92) / 255.0;
              *(float *)(v95 + 4 * (v98 - 2)) = *(float *)&v99;
              LOBYTE(v99) = *(_BYTE *)(v91 + (v93 + v97 + 1));
              *(float *)&v100 = (float)v99 / 255.0;
              *(float *)(v95 + 4 * (v98 - 1)) = *(float *)&v100;
              LOBYTE(v100) = *(_BYTE *)(v91 + (v93 + v97 + 2));
              v92 = (float)v100 / 255.0;
              *(float *)(v95 + 4 * v98) = v92;
              v97 += 4;
              v98 += 3;
            }
            while (4 * v27 != v97);
          }
          ++v94;
          v93 += 4 * v27;
          v96 += 3 * v27;
        }
        while (v94 != v28);
      }
      v84 = 1;
      v80 = v115;
    }
    else
    {
      v73 = v114;
      if (v111)
        *(_DWORD *)(a4 + 384) = 2;
      v80 = v115;
      if (*(_QWORD *)(v109 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(v135, (char *)&unk_23C62207F);
        LODWORD(v134) = 2;
        v85 = *(_QWORD *)(v109 + 24);
        if (!v85)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, id *, void ***))(*(_QWORD *)v85 + 48))(v85, &v134, v135);
        if (v136 < 0)
          operator delete(v135[0]);
      }
      v84 = 0;
      v81 = 0;
    }
  }
  else
  {
    v84 = 0;
    v81 = 0;
    v73 = v114;
    v80 = v115;
  }
LABEL_114:

  v135[0] = (void **)&v137;
  _ZNSt3__16vectorINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEENS_9allocatorIS6_EEE16__destroy_vectorclB8ne180100Ev(v135);
  v137 = &v144;
  _ZNSt3__16vectorINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEENS_9allocatorIS6_EEE16__destroy_vectorclB8ne180100Ev((void ***)&v137);

  objc_autoreleasePoolPop(context);
  return v84;
}

void sub_23C54A3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28)
{
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::PoissonFill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t a7, int a8)
{
  unsigned int v8;
  unsigned int v11;
  int32x2_t v12;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id v23;
  id v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)(a1 + 4);
  if (v8 == *(_DWORD *)(a2 + 4))
  {
    v11 = *(_DWORD *)(a1 + 8);
    if (v11 == *(_DWORD *)(a2 + 8))
    {
      v12 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v8, v11), (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v8, v11), (int32x2_t)-1)));
      if ((v12.i32[1] & v12.i32[0] & 1) != 0)
      {
        v18 = (void *)MEMORY[0x2426214AC]();
        v23 = 0;
        v24 = 0;
        cv3d::cv::gess::alg::internal::ConfigureProcessingContext((uint64_t)&v23);
        std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v25, a7);
        v19 = cv3d::cv::gess::alg::internal::RunPoissonFill(&v23, a1, a2, a4, a5, a6, (uint64_t)v25, a8);
        v20 = v26;
        if (v26 == v25)
        {
          v21 = 4;
          v20 = v25;
        }
        else
        {
          if (!v26)
          {
LABEL_11:

            objc_autoreleasePoolPop(v18);
            return v19;
          }
          v21 = 5;
        }
        (*(void (**)(void))(*v20 + 8 * v21))();
        goto LABEL_11;
      }
    }
  }
  return 0;
}

void sub_23C54A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::alg::internal::RunBilinearScale(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v10;
  uint32x2_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  cv3d::cv::gess::alg::internal *v20;
  NSError *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  void *context;
  id v29;
  uint32x2_t v30;
  void *__p[2];
  char v32;
  float64x2_t v33[2];
  void *v34;
  id v35;
  int v36[3];

  v10 = MEMORY[0x2426214AC]();
  v34 = 0;
  v35 = 0;
  cv3d::cv::gess::alg::internal::ConfigureProcessingContext((uint64_t)&v34);
  v30 = *(uint32x2_t *)(a2 + 4);
  v11 = *(uint32x2_t *)(a1 + 4);
  v29 = v35;
  objc_msgSend(v35, "commandBuffer");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:", 4, *(unsigned int *)(a1 + 4), *(unsigned int *)(a1 + 8), 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = a4;
  v26 = a5;
  context = (void *)v10;
  objc_msgSend(v13, "setStorageMode:", 0);
  v14 = objc_alloc(MEMORY[0x24BDDE368]);
  v15 = v34;
  v16 = (void *)objc_msgSend(v14, "initWithDevice:imageDescriptor:", v34, v13);
  objc_msgSend(v16, "writeBytes:dataLayout:imageIndex:", *(_QWORD *)(a1 + 16), 0, 0);
  objc_msgSend(MEMORY[0x24BDDE3B8], "imageDescriptorWithChannelFormat:width:height:featureChannels:", 4, v30.u32[0], v30.u32[1], 3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setStorageMode:", 0);
  v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE368]), "initWithDevice:imageDescriptor:", v15, v17);
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDE388]), "initWithDevice:", v15);
  v33[0] = vcvtq_f64_f32(vdiv_f32(vcvt_f32_u32(v30), vcvt_f32_u32(v11)));
  objc_msgSend(v19, "setScaleTransform:", v33);
  objc_msgSend(v19, "encodeToCommandBuffer:sourceImage:destinationImage:", v12, v16, v18);
  objc_msgSend(v18, "synchronizeOnCommandBuffer:", v12);
  objc_msgSend(v12, "commit");
  objc_msgSend(v12, "waitUntilCompleted");
  objc_msgSend(v12, "error");
  v20 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
  v22 = cv3d::cv::gess::alg::internal::GPUEncountersError(v20, v21);

  if (v22)
  {
    if (v26)
      *(_DWORD *)(v25 + 384) = 16;
    if (*(_QWORD *)(a6 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_23C62207F);
      v36[0] = 16;
      v23 = *(_QWORD *)(a6 + 24);
      if (!v23)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v23 + 48))(v23, v36, __p);
      if (v32 < 0)
        operator delete(__p[0]);
    }
  }
  objc_msgSend(v18, "readBytes:dataLayout:imageIndex:", *(_QWORD *)(a2 + 16), 0, 0);

  objc_autoreleasePoolPop(context);
  return !v22;
}

void sub_23C54AABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::RunCustomVariance(id *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5, uint64_t a6, int a7)
{
  int v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _DWORD *v37;
  int *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  void *v44;
  unint64_t v45;
  void *v46;
  cv3d::cv::gess::util::os *v47;
  cv3d::cv::gess::alg::internal *v48;
  NSError *v49;
  uint64_t v50;
  int *v51;
  _DWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  _QWORD v66[3];
  _QWORD v67[3];
  _QWORD v68[3];
  _QWORD v69[3];
  _QWORD v70[3];
  _QWORD v71[3];
  uint64_t v72;
  id v73;
  id v74;
  void *v75[2];
  char v76;
  id v77;
  int v78[3];

  v13 = a4;
  v61 = *(_QWORD *)(a2 + 4);
  v14 = MEMORY[0x2426214AC]();
  v15 = *a1;
  v77 = 0;
  GetMTLLibrary(v15, (uint64_t)&v77, a5, a7);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v77;
  v65 = v16;
  if (!v17)
  {
    v21 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("gausmoth"));
    v58 = a3;
    v20 = (void *)v14;
    v22 = *a1;
    v74 = 0;
    v59 = (void *)objc_msgSend(v22, "newComputePipelineStateWithFunction:error:", v21, &v74);
    v23 = v74;
    if (v23)
    {
      if (v13)
        *(_DWORD *)(v58 + 384) = 5;
      if (*(_QWORD *)(a6 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(v75, (char *)&unk_23C62207F);
        LODWORD(v72) = 5;
        v24 = *(_QWORD *)(a6 + 24);
        if (!v24)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v24 + 48))(v24, &v72, v75);
        if (v76 < 0)
          operator delete(v75[0]);
      }
    }
    v25 = (void *)objc_msgSend(v16, "newFunctionWithName:", CFSTR("variva"));
    v26 = *a1;
    v73 = v23;
    v60 = (void *)objc_msgSend(v26, "newComputePipelineStateWithFunction:error:", v25, &v73);
    v18 = (unint64_t)v73;

    if (v18)
    {
      if (v13)
        *(_DWORD *)(v58 + 384) = 5;
      if (*(_QWORD *)(a6 + 24))
      {
        std::string::basic_string[abi:ne180100]<0>(v75, (char *)&unk_23C62207F);
        LODWORD(v72) = 5;
        v27 = *(_QWORD *)(a6 + 24);
        if (!v27)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v27 + 48))(v27, &v72, v75);
        if (v76 < 0)
          operator delete(v75[0]);
      }

      v28 = 0;
    }
    else
    {

      if (!v23)
      {
        v18 = (3 * v61 * HIDWORD(v61));
        v32 = (id)objc_msgSend(*a1, "newBufferWithLength:options:", 4 * v18, 0);
        v34 = objc_msgSend(*a1, "newBufferWithLength:options:", 4 * v18, 0);
        v31 = (id)v34;
        if (v32)
          v35 = v34 == 0;
        else
          v35 = 1;
        if (v35)
        {
          v29 = v59;
          v30 = v60;
          if (v13)
            *(_DWORD *)(v58 + 384) = 2;
          if (*(_QWORD *)(a6 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(v75, (char *)&unk_23C62207F);
            LODWORD(v72) = 2;
            v36 = *(_QWORD *)(a6 + 24);
            if (!v36)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v36 + 48))(v36, &v72, v75);
            if (v76 < 0)
              operator delete(v75[0]);
          }
        }
        else
        {
          v32 = objc_retainAutorelease(v32);
          v29 = v59;
          v37 = (_DWORD *)objc_msgSend(v32, "contents");
          if ((_DWORD)v18)
          {
            v38 = *(int **)(a2 + 16);
            v39 = (3 * v61 * HIDWORD(v61));
            do
            {
              v40 = *v38++;
              *v37++ = v40;
              --v39;
            }
            while (v39);
          }
          objc_msgSend(a1[1], "commandBuffer");
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = v61;
          v41 = objc_msgSend(v59, "threadExecutionWidth");
          v62 = objc_msgSend(v59, "maxTotalThreadsPerThreadgroup");
          v54 = v72;
          objc_msgSend(v57, "computeCommandEncoder");
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "setBuffer:offset:atIndex:", v32, 0, 0);
          objc_msgSend(v42, "setBytes:length:atIndex:", &v72, 8, 1);
          objc_msgSend(v42, "setBytes:length:atIndex:", &v72, 8, 2);
          objc_msgSend(v42, "setBuffer:offset:atIndex:", v31, 0, 3);
          objc_msgSend(v42, "setComputePipelineState:", v59);
          v71[0] = v54 / v41;
          v71[1] = HIDWORD(v54) / (v62 / v41);
          v71[2] = 1;
          v70[0] = v41;
          v70[1] = v62 / v41;
          v70[2] = 1;
          objc_msgSend(v42, "dispatchThreadgroups:threadsPerThreadgroup:", v71, v70);
          objc_msgSend(v42, "endEncoding");

          v43 = objc_msgSend(v60, "threadExecutionWidth");
          v63 = objc_msgSend(v60, "maxTotalThreadsPerThreadgroup");
          v55 = v72;
          objc_msgSend(v57, "computeCommandEncoder");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v44, "setBuffer:offset:atIndex:", v31, 0, 0);
          objc_msgSend(v44, "setBytes:length:atIndex:", &v72, 8, 1);
          objc_msgSend(v44, "setBytes:length:atIndex:", &v72, 8, 2);
          objc_msgSend(v44, "setBuffer:offset:atIndex:", v32, 0, 3);
          objc_msgSend(v44, "setComputePipelineState:", v60);
          v69[0] = v55 / v43;
          v69[1] = HIDWORD(v55) / (v63 / v43);
          v69[2] = 1;
          v68[0] = v43;
          v68[1] = v63 / v43;
          v68[2] = 1;
          objc_msgSend(v44, "dispatchThreadgroups:threadsPerThreadgroup:", v69, v68);
          objc_msgSend(v44, "endEncoding");

          v45 = objc_msgSend(v59, "threadExecutionWidth");
          v64 = objc_msgSend(v59, "maxTotalThreadsPerThreadgroup");
          v56 = v72;
          objc_msgSend(v57, "computeCommandEncoder");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "setBuffer:offset:atIndex:", v32, 0, 0);
          objc_msgSend(v46, "setBytes:length:atIndex:", &v72, 8, 1);
          objc_msgSend(v46, "setBytes:length:atIndex:", &v72, 8, 2);
          objc_msgSend(v46, "setBuffer:offset:atIndex:", v31, 0, 3);
          objc_msgSend(v46, "setComputePipelineState:", v59);
          v67[0] = v56 / v45;
          v67[1] = HIDWORD(v56) / (v64 / v45);
          v67[2] = 1;
          v66[0] = v45;
          v66[1] = v64 / v45;
          v66[2] = 1;
          objc_msgSend(v46, "dispatchThreadgroups:threadsPerThreadgroup:", v67, v66);
          objc_msgSend(v46, "endEncoding");

          cv3d::cv::gess::util::os::WaitUntilReadyForMetal(v47);
          objc_msgSend(v57, "commit");
          objc_msgSend(v57, "waitUntilCompleted");
          objc_msgSend(v57, "error");
          v48 = (cv3d::cv::gess::alg::internal *)objc_claimAutoreleasedReturnValue();
          LODWORD(v45) = cv3d::cv::gess::alg::internal::GPUEncountersError(v48, v49);

          if (!(_DWORD)v45)
          {

            v31 = objc_retainAutorelease(v31);
            v30 = v60;
            v51 = (int *)objc_msgSend(v31, "contents");
            if ((_DWORD)v18)
            {
              v52 = *(_DWORD **)(a2 + 16);
              v28 = 1;
              do
              {
                v53 = *v51++;
                *v52++ = v53;
                --v18;
              }
              while (v18);
            }
            else
            {
              v18 = 0;
              v28 = 1;
            }
            goto LABEL_28;
          }
          v30 = v60;
          if (v13)
            *(_DWORD *)(v58 + 384) = 16;
          if (*(_QWORD *)(a6 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(v75, (char *)&unk_23C62207F);
            v78[0] = 16;
            v50 = *(_QWORD *)(a6 + 24);
            if (!v50)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v50 + 48))(v50, v78, v75);
            if (v76 < 0)
              operator delete(v75[0]);
          }

        }
        v28 = 0;
        v18 = 0;
        goto LABEL_28;
      }
      v28 = 0;
      v18 = 0;
    }
    v31 = 0;
    v32 = 0;
    v29 = v59;
    v30 = v60;
    goto LABEL_28;
  }
  v18 = (unint64_t)v17;
  if (v13)
    *(_DWORD *)(a3 + 384) = 5;
  if (*(_QWORD *)(a6 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v75, (char *)&unk_23C62207F);
    LODWORD(v72) = 5;
    v19 = *(_QWORD *)(a6 + 24);
    if (!v19)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v19 + 48))(v19, &v72, v75);
    v20 = (void *)v14;
    if (v76 < 0)
      operator delete(v75[0]);
  }
  else
  {
    v20 = (void *)v14;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
LABEL_28:

  objc_autoreleasePoolPop(v20);
  return v28;
}

void sub_23C54B2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::alg::internal::RunCustomVariance(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t *a5, uint64_t a6, int a7)
{
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v18;
  id v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if ((*(_DWORD *)(a1 + 4) & (*(_DWORD *)(a1 + 4) - 1)) == 0 && (*(_DWORD *)(a1 + 8) & (*(_DWORD *)(a1 + 8) - 1)) == 0)
  {
    v13 = (void *)MEMORY[0x2426214AC]();
    v18 = 0;
    v19 = 0;
    cv3d::cv::gess::alg::internal::ConfigureProcessingContext((uint64_t)&v18);
    std::__function::__value_func<BOOL ()(int,nlohmann::detail::parse_event_t,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v20, a6);
    v14 = cv3d::cv::gess::alg::internal::RunCustomVariance(&v18, a1, a3, a4, a5, (uint64_t)v20, a7);
    v15 = v21;
    if (v21 == v20)
    {
      v16 = 4;
      v15 = v20;
    }
    else
    {
      if (!v21)
      {
LABEL_9:

        objc_autoreleasePoolPop(v13);
        return v14;
      }
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_9;
  }
  return 0;
}

void sub_23C54B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:

  _Unwind_Resume(a1);
}

char *_ZNSt3__16vectorINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJRS4_S5_EEEPS6_DpOT_(char **a1, id *a2, _QWORD *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  char *v20;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  _QWORD *v25;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v25 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<tinyexr::HufDec>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[16 * v5];
  v14 = &v12[16 * v11];
  v24 = v14;
  *(_QWORD *)v13 = *a2;
  *((_QWORD *)v13 + 1) = *a3;
  v15 = v13 + 16;
  v23.i64[1] = (uint64_t)(v13 + 16);
  v17 = *a1;
  v16 = a1[1];
  if (v16 == *a1)
  {
    v19 = vdupq_n_s64((unint64_t)v16);
  }
  else
  {
    do
    {
      v18 = *((_QWORD *)v16 - 2);
      v16 -= 16;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v13 - 2) = v18;
      v13 -= 16;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v16 + 1);
    }
    while (v16 != v17);
    v19 = *(int64x2_t *)a1;
    v15 = (char *)v23.i64[1];
    v14 = v24;
  }
  *a1 = v13;
  a1[1] = v15;
  v23 = v19;
  v20 = a1[2];
  a1[2] = v14;
  v24 = v20;
  v22 = v19.i64[0];
  _ZNSt3__114__split_bufferINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEERNS_9allocatorIS6_EEED2Ev((uint64_t)&v22);
  return v15;
}

uint64_t _ZNSt3__114__split_bufferINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEERNS_9allocatorIS6_EEED2Ev(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void _ZNSt3__16vectorINS_4pairIU8__strongPU19objcproto9MTLBuffer11objc_objectDv2_jEENS_9allocatorIS6_EEE16__destroy_vectorclB8ne180100Ev(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 2);
        v4 -= 16;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_23C54B82C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C54B954(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_23C54BB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgIsometricParameterize(void *a1, void *a2)
{
  id v3;
  id v4;
  GESSAlgIsometricParameterizeExtended *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(GESSAlgIsometricParameterizeExtended);
  -[GESSAlgIsometricParameterizeExtended setOptions:](v5, "setOptions:", v4);
  v6 = -[GESSAlgIsometricParameterizeExtended run:](v5, "run:", v3);

  return v6;
}

void sub_23C54BD38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23C54C164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void *v30;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_23C54C328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GESSAlgRepackUV(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "valid") & 1) != 0 && objc_msgSend(v3, "meshType") == 1)
  {
    v5 = objc_msgSend(v3, "meshImpl");
    if (objc_msgSend(v4, "packingMethod") == 1)
      v6 = 2;
    else
      v6 = 1;
    v12 = objc_msgSend(v4, "textureResolution");
    v11 = objc_msgSend(v4, "numOfTextures");
    objc_msgSend(v4, "gutter");
    v10 = v7;
    v8 = cv3d::cv::gess::alg::Repack(v5, v6, &v12, &v11, (float *)&v10);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_23C54C474(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void cv3d::cv::gess::alg::internal::ConvertCodesToString(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;

  std::string::basic_string[abi:ne180100]<0>(a2, (char *)&unk_23C62207F);
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    do
    {
      std::string::push_back(a2, *(_BYTE *)(v4 + 4 * v5++) + 48);
      v4 = *a1;
    }
    while (v5 < (a1[1] - *a1) >> 2);
  }
}

void sub_23C54C50C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs(cv3d::cv::gess::alg::internal *this)
{
  unsigned __int8 v1;
  uint64_t i;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  __int128 v11;
  _OWORD v12[2];
  int v13;
  __int128 v14;
  int v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v14 = xmmword_23C60C140;
    std::vector<int>::vector[abi:ne180100](&v9, &v14, 4uLL);
    v15 = 2;
    memset(v16, 0, sizeof(v16));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, v9, (uint64_t)v10, (v10 - (_BYTE *)v9) >> 2);
    v12[0] = xmmword_23C60C160;
    v12[1] = unk_23C60C170;
    v13 = 35;
    std::vector<int>::vector[abi:ne180100](&v7, v12, 9uLL);
    v17 = 1;
    memset(v18, 0, sizeof(v18));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v18, v7, (uint64_t)v8, (v8 - (_BYTE *)v7) >> 2);
    v11 = xmmword_23C60C150;
    std::vector<int>::vector[abi:ne180100](&__p, &v11, 4uLL);
    v19 = 0;
    v21[0] = 0;
    v21[1] = 0;
    v20 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
    std::unordered_map<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>::unordered_map((uint64_t)&cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs(void)::pairs, &v15, 3);
    for (i = 0; i != -12; i -= 4)
    {
      v4 = (void *)v21[i - 1];
      if (v4)
      {
        v21[i] = v4;
        operator delete(v4);
      }
    }
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    __cxa_atexit((void (*)(void *))std::unordered_map<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>::~unordered_map[abi:ne180100], &cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs(void)::pairs, &dword_23C4E9000);
  }
  return &cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs(void)::pairs;
}

void sub_23C54C71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  void *v20;

  v19 = 0;
  while (1)
  {
    v20 = *(void **)(v17 + v19 + 72);
    if (v20)
    {
      *(_QWORD *)(v17 + v19 + 80) = v20;
      operator delete(v20);
    }
    v19 -= 32;
    if (v19 == -96)
    {
      if (__p)
        operator delete(__p);
      if (a13)
        operator delete(a13);
      if (a16)
        operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *std::vector<int>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_23C54C86C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t cv3d::cv::gess::alg::internal::ParseLineToChartMethod(uint64_t a1)
{
  std::string *v1;
  std::string *v2;
  uint64_t *v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  BOOL v11;
  char v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string v21;
  _BYTE v22[16];
  uint64_t *v23;
  std::string v24;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v24 = *(std::string *)a1;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = (std::string *)((char *)&v24 + HIBYTE(v24.__r_.__value_.__r.__words[2]));
  else
    v1 = (std::string *)(v24.__r_.__value_.__r.__words[0] + v24.__r_.__value_.__l.__size_);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v24;
  else
    v2 = (std::string *)v24.__r_.__value_.__r.__words[0];
  while (v2 != v1)
  {
    a1 = __toupper(v2->__r_.__value_.__s.__data_[0]);
    v2->__r_.__value_.__s.__data_[0] = a1;
    v2 = (std::string *)((char *)v2 + 1);
  }
  cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs((cv3d::cv::gess::alg::internal *)a1);
  std::unordered_map<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>::unordered_map((uint64_t)v22, (uint64_t)&cv3d::cv::gess::alg::internal::GetChartMethodCodesPairs(void)::pairs);
  v3 = v23;
  if (v23)
  {
    while (1)
    {
      if (v3[3] != v3[4])
      {
        cv3d::cv::gess::alg::internal::ConvertCodesToString(v3 + 3, &v21);
        size = v24.__r_.__value_.__l.__size_;
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = &v24;
        else
          v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        v6 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v21;
        else
          v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v6 = v21.__r_.__value_.__l.__size_;
        v8 = size >= v6 ? v6 : size;
        v9 = (unsigned __int8 *)v5 + v8;
        if (!v6 || v8 == 0)
        {
          v16 = (std::string *)((char *)v5 + v8);
        }
        else
        {
          v15 = v5;
          v16 = (std::string *)((char *)v5 + v8);
          do
          {
            if (v15->__r_.__value_.__s.__data_[0] == v7->__r_.__value_.__s.__data_[0])
            {
              v17 = 1;
              while (v6 != v17)
              {
                if ((unsigned __int8 *)((char *)v15 + v17) == v9)
                  goto LABEL_33;
                v18 = v15->__r_.__value_.__s.__data_[v17];
                v19 = v7->__r_.__value_.__s.__data_[v17++];
                if (v18 != v19)
                  goto LABEL_48;
              }
              v16 = v15;
            }
LABEL_48:
            v15 = (std::string *)((char *)v15 + 1);
          }
          while (v15 != (std::string *)v9);
        }
LABEL_33:
        if (v6)
          v11 = v16 == (std::string *)v9;
        else
          v11 = 0;
        v13 = !v11 && v16 == v5;
        v14 = *((unsigned int *)v3 + 4);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if ((v13 & 1) != 0)
          break;
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_56;
    }
  }
  else
  {
LABEL_56:
    v14 = 2;
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table((uint64_t)v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v14;
}

void sub_23C54CA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs(cv3d::cv::gess::alg::internal *this)
{
  unsigned __int8 v1;
  uint64_t i;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v14 = xmmword_23C60C184;
    v15 = 0x2300000019;
    std::vector<int>::vector[abi:ne180100](&v9, &v14, 6uLL);
    v16 = 1;
    memset(v17, 0, sizeof(v17));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, v9, (uint64_t)v10, (v10 - (_BYTE *)v9) >> 2);
    v13[0] = xmmword_23C60C19C;
    *(_OWORD *)((char *)v13 + 12) = *(__int128 *)((char *)&xmmword_23C60C19C + 12);
    std::vector<int>::vector[abi:ne180100](&v7, v13, 7uLL);
    v18 = 0;
    memset(v19, 0, sizeof(v19));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v19, v7, (uint64_t)v8, (v8 - (_BYTE *)v7) >> 2);
    v11 = xmmword_23C60C1B8;
    v12 = 0x2300000011;
    std::vector<int>::vector[abi:ne180100](&__p, &v11, 6uLL);
    v20 = 2;
    v22[0] = 0;
    v22[1] = 0;
    v21 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
    std::unordered_map<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>::unordered_map((uint64_t)&cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs(void)::pairs, &v16, 3);
    for (i = 0; i != -12; i -= 4)
    {
      v4 = (void *)v22[i - 1];
      if (v4)
      {
        v22[i] = v4;
        operator delete(v4);
      }
    }
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    __cxa_atexit((void (*)(void *))std::unordered_map<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>::~unordered_map[abi:ne180100], &cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs(void)::pairs, &dword_23C4E9000);
  }
  return &cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs(void)::pairs;
}

void sub_23C54CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  void *v20;

  v19 = 0;
  while (1)
  {
    v20 = *(void **)(v17 + v19 + 72);
    if (v20)
    {
      *(_QWORD *)(v17 + v19 + 80) = v20;
      operator delete(v20);
    }
    v19 -= 32;
    if (v19 == -96)
    {
      if (__p)
        operator delete(__p);
      if (a13)
        operator delete(a13);
      if (a16)
        operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t cv3d::cv::gess::alg::internal::ParseLineToPackMethod(uint64_t a1)
{
  std::string *v1;
  std::string *v2;
  uint64_t *v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  BOOL v11;
  char v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string v21;
  _BYTE v22[16];
  uint64_t *v23;
  std::string v24;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v24 = *(std::string *)a1;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = (std::string *)((char *)&v24 + HIBYTE(v24.__r_.__value_.__r.__words[2]));
  else
    v1 = (std::string *)(v24.__r_.__value_.__r.__words[0] + v24.__r_.__value_.__l.__size_);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v24;
  else
    v2 = (std::string *)v24.__r_.__value_.__r.__words[0];
  while (v2 != v1)
  {
    a1 = __toupper(v2->__r_.__value_.__s.__data_[0]);
    v2->__r_.__value_.__s.__data_[0] = a1;
    v2 = (std::string *)((char *)v2 + 1);
  }
  cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs((cv3d::cv::gess::alg::internal *)a1);
  std::unordered_map<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>::unordered_map((uint64_t)v22, (uint64_t)&cv3d::cv::gess::alg::internal::GetPackMethodCodesPairs(void)::pairs);
  v3 = v23;
  if (v23)
  {
    while (1)
    {
      if (v3[3] != v3[4])
      {
        cv3d::cv::gess::alg::internal::ConvertCodesToString(v3 + 3, &v21);
        size = v24.__r_.__value_.__l.__size_;
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = &v24;
        else
          v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        v6 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v21;
        else
          v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v6 = v21.__r_.__value_.__l.__size_;
        v8 = size >= v6 ? v6 : size;
        v9 = (unsigned __int8 *)v5 + v8;
        if (!v6 || v8 == 0)
        {
          v16 = (std::string *)((char *)v5 + v8);
        }
        else
        {
          v15 = v5;
          v16 = (std::string *)((char *)v5 + v8);
          do
          {
            if (v15->__r_.__value_.__s.__data_[0] == v7->__r_.__value_.__s.__data_[0])
            {
              v17 = 1;
              while (v6 != v17)
              {
                if ((unsigned __int8 *)((char *)v15 + v17) == v9)
                  goto LABEL_33;
                v18 = v15->__r_.__value_.__s.__data_[v17];
                v19 = v7->__r_.__value_.__s.__data_[v17++];
                if (v18 != v19)
                  goto LABEL_48;
              }
              v16 = v15;
            }
LABEL_48:
            v15 = (std::string *)((char *)v15 + 1);
          }
          while (v15 != (std::string *)v9);
        }
LABEL_33:
        if (v6)
          v11 = v16 == (std::string *)v9;
        else
          v11 = 0;
        v13 = !v11 && v16 == v5;
        v14 = *((unsigned int *)v3 + 4);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if ((v13 & 1) != 0)
          break;
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_56;
    }
  }
  else
  {
LABEL_56:
    v14 = 1;
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table((uint64_t)v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v14;
}

void sub_23C54CF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *cv3d::cv::gess::alg::internal::GetTbnCodesPairs(cv3d::cv::gess::alg::internal *this)
{
  unsigned __int8 v1;
  uint64_t i;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  _OWORD v11[2];
  _OWORD v12[3];
  int v13;
  _OWORD v14[3];
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v14[0] = xmmword_23C60C1D0;
    v14[1] = unk_23C60C1E0;
    v14[2] = xmmword_23C60C1F0;
    v15 = 0x1C00000011;
    std::vector<int>::vector[abi:ne180100](&v9, v14, 0xEuLL);
    v16 = 2;
    memset(v17, 0, sizeof(v17));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v17, v9, (uint64_t)v10, (v10 - (_BYTE *)v9) >> 2);
    v12[0] = xmmword_23C60C208;
    v12[1] = unk_23C60C218;
    v12[2] = xmmword_23C60C228;
    v13 = 28;
    std::vector<int>::vector[abi:ne180100](&v7, v12, 0xDuLL);
    v18 = 1;
    memset(v19, 0, sizeof(v19));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v19, v7, (uint64_t)v8, (v8 - (_BYTE *)v7) >> 2);
    v11[0] = xmmword_23C60C23C;
    v11[1] = unk_23C60C24C;
    std::vector<int>::vector[abi:ne180100](&__p, v11, 8uLL);
    v20 = 0;
    v22[0] = 0;
    v22[1] = 0;
    v21 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
    std::unordered_map<cv3d::cv::gess::alg::TBN,std::vector<int>>::unordered_map((uint64_t)&cv3d::cv::gess::alg::internal::GetTbnCodesPairs(void)::pairs, &v16, 3);
    for (i = 0; i != -12; i -= 4)
    {
      v4 = (void *)v22[i - 1];
      if (v4)
      {
        v22[i] = v4;
        operator delete(v4);
      }
    }
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    __cxa_atexit((void (*)(void *))std::unordered_map<cv3d::cv::gess::alg::TBN,std::vector<int>>::~unordered_map[abi:ne180100], &cv3d::cv::gess::alg::internal::GetTbnCodesPairs(void)::pairs, &dword_23C4E9000);
  }
  return &cv3d::cv::gess::alg::internal::GetTbnCodesPairs(void)::pairs;
}

void sub_23C54D198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  void *v20;

  v19 = 0;
  while (1)
  {
    v20 = *(void **)(v17 + v19 + 72);
    if (v20)
    {
      *(_QWORD *)(v17 + v19 + 80) = v20;
      operator delete(v20);
    }
    v19 -= 32;
    if (v19 == -96)
    {
      if (__p)
        operator delete(__p);
      if (a13)
        operator delete(a13);
      if (a16)
        operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t cv3d::cv::gess::alg::internal::ParseLineToTBN(uint64_t a1)
{
  std::string *v1;
  std::string *v2;
  uint64_t *v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  BOOL v11;
  char v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string v21;
  _BYTE v22[16];
  uint64_t *v23;
  std::string v24;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v24 = *(std::string *)a1;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = (std::string *)((char *)&v24 + HIBYTE(v24.__r_.__value_.__r.__words[2]));
  else
    v1 = (std::string *)(v24.__r_.__value_.__r.__words[0] + v24.__r_.__value_.__l.__size_);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v24;
  else
    v2 = (std::string *)v24.__r_.__value_.__r.__words[0];
  while (v2 != v1)
  {
    a1 = __toupper(v2->__r_.__value_.__s.__data_[0]);
    v2->__r_.__value_.__s.__data_[0] = a1;
    v2 = (std::string *)((char *)v2 + 1);
  }
  cv3d::cv::gess::alg::internal::GetTbnCodesPairs((cv3d::cv::gess::alg::internal *)a1);
  std::unordered_map<cv3d::cv::gess::alg::TBN,std::vector<int>>::unordered_map((uint64_t)v22, (uint64_t)&cv3d::cv::gess::alg::internal::GetTbnCodesPairs(void)::pairs);
  v3 = v23;
  if (v23)
  {
    while (1)
    {
      if (v3[3] != v3[4])
      {
        cv3d::cv::gess::alg::internal::ConvertCodesToString(v3 + 3, &v21);
        size = v24.__r_.__value_.__l.__size_;
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = &v24;
        else
          v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        v6 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v21;
        else
          v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v6 = v21.__r_.__value_.__l.__size_;
        v8 = size >= v6 ? v6 : size;
        v9 = (unsigned __int8 *)v5 + v8;
        if (!v6 || v8 == 0)
        {
          v16 = (std::string *)((char *)v5 + v8);
        }
        else
        {
          v15 = v5;
          v16 = (std::string *)((char *)v5 + v8);
          do
          {
            if (v15->__r_.__value_.__s.__data_[0] == v7->__r_.__value_.__s.__data_[0])
            {
              v17 = 1;
              while (v6 != v17)
              {
                if ((unsigned __int8 *)((char *)v15 + v17) == v9)
                  goto LABEL_33;
                v18 = v15->__r_.__value_.__s.__data_[v17];
                v19 = v7->__r_.__value_.__s.__data_[v17++];
                if (v18 != v19)
                  goto LABEL_48;
              }
              v16 = v15;
            }
LABEL_48:
            v15 = (std::string *)((char *)v15 + 1);
          }
          while (v15 != (std::string *)v9);
        }
LABEL_33:
        if (v6)
          v11 = v16 == (std::string *)v9;
        else
          v11 = 0;
        v13 = !v11 && v16 == v5;
        v14 = *((unsigned int *)v3 + 4);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if ((v13 & 1) != 0)
          break;
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_56;
    }
  }
  else
  {
LABEL_56:
    v14 = 2;
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table((uint64_t)v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v14;
}

void sub_23C54D450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *cv3d::cv::gess::alg::internal::GetCullModeCodesPairs(cv3d::cv::gess::alg::internal *this)
{
  unsigned __int8 v1;
  uint64_t i;
  void *v4;
  void *__p;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  _BYTE *v10;
  _OWORD v11[2];
  int v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  int v16;
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v15[0] = xmmword_23C60C25C;
    v15[1] = unk_23C60C26C;
    v16 = 21;
    std::vector<int>::vector[abi:ne180100](&v9, v15, 9uLL);
    v17 = 0;
    memset(v18, 0, sizeof(v18));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v18, v9, (uint64_t)v10, (v10 - (_BYTE *)v9) >> 2);
    v13[0] = xmmword_23C60C280;
    v13[1] = unk_23C60C290;
    v14 = 0x240000001ELL;
    std::vector<int>::vector[abi:ne180100](&v7, v13, 0xAuLL);
    v19 = 1;
    memset(v20, 0, sizeof(v20));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v20, v7, (uint64_t)v8, (v8 - (_BYTE *)v7) >> 2);
    v11[0] = xmmword_23C60C2A8;
    v11[1] = unk_23C60C2B8;
    v12 = 27;
    std::vector<int>::vector[abi:ne180100](&__p, v11, 9uLL);
    v21 = 2;
    v23[0] = 0;
    v23[1] = 0;
    v22 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v22, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
    std::unordered_map<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>::unordered_map((uint64_t)&cv3d::cv::gess::alg::internal::GetCullModeCodesPairs(void)::pairs, &v17, 3);
    for (i = 0; i != -12; i -= 4)
    {
      v4 = (void *)v23[i - 1];
      if (v4)
      {
        v23[i] = v4;
        operator delete(v4);
      }
    }
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
    if (v9)
    {
      v10 = v9;
      operator delete(v9);
    }
    __cxa_atexit((void (*)(void *))std::unordered_map<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>::~unordered_map[abi:ne180100], &cv3d::cv::gess::alg::internal::GetCullModeCodesPairs(void)::pairs, &dword_23C4E9000);
  }
  return &cv3d::cv::gess::alg::internal::GetCullModeCodesPairs(void)::pairs;
}

void sub_23C54D694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  void *v20;

  v19 = 0;
  while (1)
  {
    v20 = *(void **)(v17 + v19 + 72);
    if (v20)
    {
      *(_QWORD *)(v17 + v19 + 80) = v20;
      operator delete(v20);
    }
    v19 -= 32;
    if (v19 == -96)
    {
      if (__p)
        operator delete(__p);
      if (a13)
        operator delete(a13);
      if (a16)
        operator delete(a16);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t cv3d::cv::gess::alg::internal::ParseLineToCullMode(uint64_t a1)
{
  std::string *v1;
  std::string *v2;
  uint64_t *v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  BOOL v11;
  char v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string v21;
  _BYTE v22[16];
  uint64_t *v23;
  std::string v24;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v24 = *(std::string *)a1;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = (std::string *)((char *)&v24 + HIBYTE(v24.__r_.__value_.__r.__words[2]));
  else
    v1 = (std::string *)(v24.__r_.__value_.__r.__words[0] + v24.__r_.__value_.__l.__size_);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v24;
  else
    v2 = (std::string *)v24.__r_.__value_.__r.__words[0];
  while (v2 != v1)
  {
    a1 = __toupper(v2->__r_.__value_.__s.__data_[0]);
    v2->__r_.__value_.__s.__data_[0] = a1;
    v2 = (std::string *)((char *)v2 + 1);
  }
  cv3d::cv::gess::alg::internal::GetCullModeCodesPairs((cv3d::cv::gess::alg::internal *)a1);
  std::unordered_map<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>::unordered_map((uint64_t)v22, (uint64_t)&cv3d::cv::gess::alg::internal::GetCullModeCodesPairs(void)::pairs);
  v3 = v23;
  if (v23)
  {
    while (1)
    {
      if (v3[3] != v3[4])
      {
        cv3d::cv::gess::alg::internal::ConvertCodesToString(v3 + 3, &v21);
        size = v24.__r_.__value_.__l.__size_;
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = &v24;
        else
          v5 = (std::string *)v24.__r_.__value_.__r.__words[0];
        if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
        v6 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v21;
        else
          v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v6 = v21.__r_.__value_.__l.__size_;
        v8 = size >= v6 ? v6 : size;
        v9 = (unsigned __int8 *)v5 + v8;
        if (!v6 || v8 == 0)
        {
          v16 = (std::string *)((char *)v5 + v8);
        }
        else
        {
          v15 = v5;
          v16 = (std::string *)((char *)v5 + v8);
          do
          {
            if (v15->__r_.__value_.__s.__data_[0] == v7->__r_.__value_.__s.__data_[0])
            {
              v17 = 1;
              while (v6 != v17)
              {
                if ((unsigned __int8 *)((char *)v15 + v17) == v9)
                  goto LABEL_33;
                v18 = v15->__r_.__value_.__s.__data_[v17];
                v19 = v7->__r_.__value_.__s.__data_[v17++];
                if (v18 != v19)
                  goto LABEL_48;
              }
              v16 = v15;
            }
LABEL_48:
            v15 = (std::string *)((char *)v15 + 1);
          }
          while (v15 != (std::string *)v9);
        }
LABEL_33:
        if (v6)
          v11 = v16 == (std::string *)v9;
        else
          v11 = 0;
        v13 = !v11 && v16 == v5;
        v14 = *((unsigned int *)v3 + 4);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if ((v13 & 1) != 0)
          break;
      }
      v3 = (uint64_t *)*v3;
      if (!v3)
        goto LABEL_56;
    }
  }
  else
  {
LABEL_56:
    v14 = 0;
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table((uint64_t)v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v14;
}

void sub_23C54D94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23C54D9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::CHART_METHOD,std::pair<cv3d::cv::gess::alg::CHART_METHOD const,std::vector<int>> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_23C54DA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::CHART_METHOD,std::pair<cv3d::cv::gess::alg::CHART_METHOD const,std::vector<int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::CHART_METHOD const,std::vector<int>> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C54DC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::CHART_METHOD const,std::vector<int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23C54DD1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::CHART_METHOD,std::pair<cv3d::cv::gess::alg::CHART_METHOD const,std::vector<int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23C54DE5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::PACK_METHOD,std::pair<cv3d::cv::gess::alg::PACK_METHOD const,std::vector<int>> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_23C54DED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::PACK_METHOD,std::pair<cv3d::cv::gess::alg::PACK_METHOD const,std::vector<int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::PACK_METHOD const,std::vector<int>> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C54E0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::PACK_METHOD const,std::vector<int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23C54E19C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::PACK_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::PACK_METHOD>,std::hash<cv3d::cv::gess::alg::PACK_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::PACK_METHOD,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::PACK_METHOD,std::pair<cv3d::cv::gess::alg::PACK_METHOD const,std::vector<int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23C54E214(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::TBN,std::vector<int>>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::hash<cv3d::cv::gess::alg::TBN>,std::equal_to<cv3d::cv::gess::alg::TBN>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::TBN>,std::hash<cv3d::cv::gess::alg::TBN>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::TBN,std::pair<cv3d::cv::gess::alg::TBN const,std::vector<int>> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_23C54E28C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::hash<cv3d::cv::gess::alg::TBN>,std::equal_to<cv3d::cv::gess::alg::TBN>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::TBN>,std::hash<cv3d::cv::gess::alg::TBN>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::TBN,std::pair<cv3d::cv::gess::alg::TBN const,std::vector<int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::hash<cv3d::cv::gess::alg::TBN>,std::equal_to<cv3d::cv::gess::alg::TBN>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::TBN>,std::hash<cv3d::cv::gess::alg::TBN>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::TBN const,std::vector<int>> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C54E4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::hash<cv3d::cv::gess::alg::TBN>,std::equal_to<cv3d::cv::gess::alg::TBN>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::TBN>,std::hash<cv3d::cv::gess::alg::TBN>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::TBN const,std::vector<int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23C54E554(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::TBN,std::vector<int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::hash<cv3d::cv::gess::alg::TBN>,std::equal_to<cv3d::cv::gess::alg::TBN>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::TBN,std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::TBN>,std::hash<cv3d::cv::gess::alg::TBN>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::TBN,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::TBN,std::pair<cv3d::cv::gess::alg::TBN const,std::vector<int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23C54E5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>::unordered_map(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::CULL_MODE,std::pair<cv3d::cv::gess::alg::CULL_MODE const,std::vector<int>> const&>(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_23C54E644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::CULL_MODE,std::pair<cv3d::cv::gess::alg::CULL_MODE const,std::vector<int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::CULL_MODE const,std::vector<int>> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23C54E868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>>>::__construct_node_hash<std::pair<cv3d::cv::gess::alg::CULL_MODE const,std::vector<int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23C54E90C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<unsigned int>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CULL_MODE,std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CULL_MODE>,std::hash<cv3d::cv::gess::alg::CULL_MODE>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CULL_MODE,std::vector<int>>>>::__emplace_unique_key_args<cv3d::cv::gess::alg::CULL_MODE,std::pair<cv3d::cv::gess::alg::CULL_MODE const,std::vector<int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_23C54E984(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::__unordered_map_hasher<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::__unordered_map_equal<cv3d::cv::gess::alg::CHART_METHOD,std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>,std::equal_to<cv3d::cv::gess::alg::CHART_METHOD>,std::hash<cv3d::cv::gess::alg::CHART_METHOD>,true>,std::allocator<std::__hash_value_type<cv3d::cv::gess::alg::CHART_METHOD,std::vector<int>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::internal::GetVertexNormalAttribute(uint64_t **this, cv3d::cv::gess::mesh::TriMesh *a2)
{
  uint64_t *v3;
  int v4;
  int v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  uint64_t v10;

  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v3 = (uint64_t *)(this + 1);
  v9 = 0;
  v10 = 0;
  v4 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)&v9, (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v4 == -1)
    cv3d::cv::gess::mesh::PolyMesh::ComputeVertexNormal(this);
  std::string::basic_string[abi:ne180100]<0>(__p, cv3d::cv::gess::mesh::BUILT_IN_ATTRIBUTE::VERTEX_NORMAL[0]);
  v9 = 0;
  v10 = 0;
  v5 = cv3d::cv::gess::mesh::AttributeContainer::handle<cv3d::cv::gess::math::Vector3T<float>>(this + 1, (uint64_t)&v9, (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  LODWORD(__p[0]) = v5;
  return cv3d::cv::gess::mesh::AttributeContainer::attribute<cv3d::cv::gess::math::Vector3T<float>>(v3, (unsigned int *)__p);
}

void sub_23C54EA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *cv3d::cv::gess::VersionString@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "1.4.26");
}

double cv3d::cv::gess::internal::CFDictionaryGetFloat(cv3d::cv::gess::internal *this, const __CFDictionary *a2, const void *a3)
{
  void *v5;
  const __CFNumber *Value;
  double v7;
  double valuePtr;

  v5 = (void *)MEMORY[0x2426214AC](this, a2, a3);
  valuePtr = 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(this, a2);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberCGFloatType, &valuePtr);
    v7 = valuePtr;
  }
  else
  {
    v7 = 0.0;
  }
  objc_autoreleasePoolPop(v5);
  return v7;
}

void cv3d::cv::gess::internal::CFDictionaryGetString(cv3d::cv::gess::internal *this@<X0>, const __CFDictionary *a2@<X1>, const void *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v7;
  const __CFString *Value;
  char *CStringPtr;

  v7 = (void *)MEMORY[0x2426214AC](this, a2, a3);
  Value = (const __CFString *)CFDictionaryGetValue(this, a2);
  if (Value)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(Value, 0);
    std::string::basic_string[abi:ne180100]<0>(a4, CStringPtr);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  objc_autoreleasePoolPop(v7);
}

BOOL cv3d::cv::gess::internal::CFDictionaryGetBool(cv3d::cv::gess::internal *this, const __CFDictionary *a2, const void *a3)
{
  void *v5;
  CFTypeID v6;
  _BOOL8 v7;
  void *value;

  v5 = (void *)MEMORY[0x2426214AC](this, a2, a3);
  value = 0;
  v7 = CFDictionaryGetValueIfPresent(this, a2, (const void **)&value)
    && (v6 = CFGetTypeID(value), v6 == CFBooleanGetTypeID())
    && CFBooleanGetValue((CFBooleanRef)value) != 0;
  objc_autoreleasePoolPop(v5);
  return v7;
}

CFStringRef cv3d::cv::gess::internal::GetFormatStr(uint64_t a1)
{
  std::string *v1;
  std::string *v2;
  std::string::size_type size;
  std::string *v4;
  _BYTE *v5;
  void *p_p;
  std::string *v7;
  char *v8;
  const char *v9;
  CFStringRef v10;
  void *__p;
  uint64_t v13;
  _BYTE v14[3];
  std::string v15;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v15 = *(std::string *)a1;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1 = (std::string *)((char *)&v15 + HIBYTE(v15.__r_.__value_.__r.__words[2]));
  else
    v1 = (std::string *)(v15.__r_.__value_.__r.__words[0] + v15.__r_.__value_.__l.__size_);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v15;
  else
    v2 = (std::string *)v15.__r_.__value_.__r.__words[0];
  while (v2 != v1)
  {
    v2->__r_.__value_.__s.__data_[0] = __tolower(v2->__r_.__value_.__s.__data_[0]);
    v2 = (std::string *)((char *)v2 + 1);
  }
  std::operator+<char>();
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  if (size != 5)
  {
    if (size != 4)
      goto LABEL_35;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v4 = &v15;
    else
      v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
    if (LODWORD(v4->__r_.__value_.__l.__data_) != 1735420462)
    {
      if (memcmp(v4, ".exr", 4uLL))
        goto LABEL_35;
      if ((v14[2] & 0x80000000) != 0)
      {
        v13 = 21;
        p_p = __p;
        v5 = (char *)__p + 21;
      }
      else
      {
        v5 = v14;
        v14[2] = 21;
        p_p = &__p;
      }
      qmemcpy(p_p, "com.ilm.openexr-image", 21);
      goto LABEL_34;
    }
LABEL_28:
    if ((v14[2] & 0x80000000) != 0)
    {
      v13 = 11;
      v8 = (char *)__p;
      v5 = (char *)__p + 11;
    }
    else
    {
      v5 = (char *)&v13 + 3;
      v14[2] = 11;
      v8 = (char *)&__p;
    }
    *(_DWORD *)(v8 + 7) = 1734701162;
    *(_QWORD *)v8 = *(_QWORD *)"public.jpeg";
LABEL_34:
    *v5 = 0;
    goto LABEL_35;
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v15;
  else
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (!memcmp(v7, ".jpeg", 5uLL))
    goto LABEL_28;
LABEL_35:
  if (v14[2] >= 0)
    v9 = (const char *)&__p;
  else
    v9 = (const char *)__p;
  v10 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], v9, 0x8000100u);
  if ((v14[2] & 0x80000000) != 0)
    operator delete(__p);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v10;
}

void sub_23C54EDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL cv3d::cv::gess::internal::CoreGraphicsLoadHeader(uint64_t *a1, int *a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  const __CFURL *v7;
  CGImageSource *v8;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  cv3d::cv::gess::internal *v11;
  int Width;
  int Height;
  const void *v14;
  double Float;
  cv3d::cv::gess::internal *v16;
  double v17;
  void *v18;
  int v19;
  char *p_p;
  const void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  cv3d::cv::gess::internal *v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  int v32;
  const void *v33;
  int v34;
  size_t BitsPerPixel;
  cv3d::cv::gess::internal *v37;
  int v38;
  void *__p;
  uint64_t v40;
  unsigned __int8 v41;

  v4 = (void *)MEMORY[0x2426214AC]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithURL(v7, 0);
  Status = CGImageSourceGetStatus(v8);
  if (Status)
  {
    CFRelease(v7);
    CFRelease(v8);
    goto LABEL_38;
  }
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, 0, 0);
  v11 = CGImageSourceCopyPropertiesAtIndex(v8, 0, 0);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  v38 = Height;
  Float = cv3d::cv::gess::internal::CFDictionaryGetFloat(v11, (const __CFDictionary *)*MEMORY[0x24BDD93D0], v14);
  v16 = v11;
  v17 = Float;
  v18 = v4;
  v19 = Width;
  p_p = (char *)&__p;
  v37 = v16;
  cv3d::cv::gess::internal::CFDictionaryGetString(v16, (const __CFDictionary *)*MEMORY[0x24BDD92D0], v21, &__p);
  v22 = v41;
  v23 = v41;
  v24 = v40;
  if ((v41 & 0x80u) == 0)
    v25 = (char *)&__p + v41;
  else
    v25 = (char *)__p + v40;
  if ((v41 & 0x80u) != 0)
    p_p = (char *)__p;
  if (p_p != v25)
  {
    do
    {
      *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v25);
    v22 = v41;
    v24 = v40;
    v23 = v41;
  }
  if ((v23 & 0x80u) == 0)
    v26 = v22;
  else
    v26 = v24;
  v4 = v18;
  if (v26 == 4)
  {
    if ((v23 & 0x80u) == 0)
      v33 = &__p;
    else
      v33 = __p;
    v27 = v37;
    if (!memcmp(v33, "gray", 4uLL))
    {
      a2[1] = v19;
      a2[2] = v38;
      goto LABEL_35;
    }
  }
  else
  {
    v27 = v37;
    if (v26 == 3)
    {
      v28 = (unsigned __int16 *)__p;
      if ((v23 & 0x80u) == 0)
        v28 = (unsigned __int16 *)&__p;
      v29 = *v28;
      v30 = *((unsigned __int8 *)v28 + 2);
      if (v29 == 26482 && v30 == 98)
      {
        v32 = 0;
        a2[1] = v19;
        a2[2] = v38;
LABEL_33:
        v34 = 3;
        goto LABEL_36;
      }
    }
  }
  a2[1] = v19;
  a2[2] = v38;
  if ((BitsPerPixel >> 3) / ((unint64_t)v17 >> 3) != 1)
  {
    v32 = 0;
    goto LABEL_33;
  }
LABEL_35:
  v32 = 1;
  v34 = 1;
LABEL_36:
  a2[3] = v34;
  *a2 = v32;
  CFRelease(v7);
  CFRelease(v8);
  CGImageRelease(ImageAtIndex);
  CFRelease(v27);
  if ((char)v41 < 0)
    operator delete(__p);
LABEL_38:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_23C54F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::internal::CoreGraphicsLoadImage(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  const __CFURL *v7;
  CGImageSource *v8;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  CGDataProvider *DataProvider;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  size_t BitsPerPixel;
  const void *v16;
  BOOL Bool;
  const void *v18;
  double Float;
  char *p_p;
  const void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  unint64_t v32;
  const void *v33;
  int v34;
  CGColorSpace *ColorSpace;
  size_t v36;
  uint8_t *v37;
  _BOOL4 v38;
  uint64_t i;
  uint64_t j;
  uint64_t v46;
  uint64_t k;
  uint64_t m;
  int v51;
  int v53;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  UInt8 v59;
  CGColorSpaceModel Model;
  void *v62;
  const __CFURL *cf;
  CGImageSource *v64;
  const __CFData *v65;
  void *v66;
  CGImage *image;
  CFDictionaryRef v68;
  void *__p;
  uint64_t v70;
  unsigned __int8 v71;

  v4 = (void *)MEMORY[0x2426214AC]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithURL(v7, 0);
  Status = CGImageSourceGetStatus(v8);
  if (Status)
  {
    CFRelease(v7);
    CFRelease(v8);
    goto LABEL_65;
  }
  v66 = v6;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, 0, 0);
  v68 = CGImageSourceCopyPropertiesAtIndex(v8, 0, 0);
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  v65 = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(v65);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  cf = v7;
  v64 = v8;
  image = ImageAtIndex;
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  Bool = cv3d::cv::gess::internal::CFDictionaryGetBool(v68, (const __CFDictionary *)*MEMORY[0x24BDD9660], v16);
  Float = cv3d::cv::gess::internal::CFDictionaryGetFloat(v68, (const __CFDictionary *)*MEMORY[0x24BDD93D0], v18);
  p_p = (char *)&__p;
  cv3d::cv::gess::internal::CFDictionaryGetString(v68, (const __CFDictionary *)*MEMORY[0x24BDD92D0], v21, &__p);
  v22 = v71;
  v23 = v71;
  v24 = v70;
  if ((v71 & 0x80u) == 0)
    v25 = (char *)&__p + v71;
  else
    v25 = (char *)__p + v70;
  if ((v71 & 0x80u) != 0)
    p_p = (char *)__p;
  v62 = v4;
  if (p_p != v25)
  {
    do
    {
      *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v25);
    v22 = v71;
    v24 = v70;
    v23 = v71;
  }
  v26 = BitsPerPixel >> 3;
  if ((v23 & 0x80u) == 0)
    v27 = v22;
  else
    v27 = v24;
  if (v27 == 4)
  {
    if ((v23 & 0x80u) == 0)
      v33 = &__p;
    else
      v33 = __p;
    if (!memcmp(v33, "gray", 4uLL))
    {
      v32 = 1;
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v27 != 3)
    goto LABEL_31;
  v28 = (unsigned __int16 *)__p;
  if ((v23 & 0x80u) == 0)
    v28 = (unsigned __int16 *)&__p;
  v29 = *v28;
  v30 = *((unsigned __int8 *)v28 + 2);
  if (v29 != 26482 || v30 != 98)
  {
LABEL_31:
    v32 = v26 / ((unint64_t)Float >> 3);
    goto LABEL_32;
  }
  v32 = 3;
LABEL_32:
  if (v32 == 1)
    v34 = 1;
  else
    v34 = 3;
  *(_DWORD *)(a2 + 8) = Height;
  *(_DWORD *)(a2 + 12) = v34;
  *(_DWORD *)a2 = v32 == 1;
  *(_DWORD *)(a2 + 4) = Width;
  cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory(a2);
  ColorSpace = CGImageGetColorSpace(image);
  Model = CGColorSpaceGetModel(ColorSpace);
  if (Model == kCGColorSpaceModelIndexed)
  {
    v36 = CGColorSpaceGetColorTableCount(ColorSpace) * v32;
    v37 = (uint8_t *)operator new[]();
    CGColorSpaceGetColorTable(ColorSpace, v37);
    v38 = v36 != 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v6 = v66;
  if (v32 == 1)
  {
    Status = kCGImageStatusComplete;
    if (Height)
    {
      for (i = 0; i != Height; ++i)
      {
        if (Width)
        {
          for (j = 0; j != Width; ++j)
          {
            if (Bool)
            {
              _H0 = *(_WORD *)BytePtr;
              __asm { FCVT            S0, H0 }
              LODWORD(v46) = (int)_S0;
            }
            else
            {
              v46 = *BytePtr;
              if (v38)
                LOBYTE(v46) = v37[v46];
            }
            *(_BYTE *)(*(_QWORD *)(a2 + 16) + (j + i * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12)) = v46;
            BytePtr += v26;
          }
        }
      }
    }
  }
  else
  {
    Status = kCGImageStatusComplete;
    if (Height)
    {
      for (k = 0; k != Height; ++k)
      {
        if (Width)
        {
          for (m = 0; m != Width; ++m)
          {
            if (Bool)
            {
              _H0 = *(_WORD *)BytePtr;
              __asm { FCVT            S0, H0 }
              v51 = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = *((_WORD *)BytePtr + 1);
              __asm { FCVT            S0, H0 }
              v53 = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = *((_WORD *)BytePtr + 2);
              __asm { FCVT            S0, H0 }
              LODWORD(v55) = (int)(float)(_S0 * 255.0);
              *(_BYTE *)(*(_QWORD *)(a2 + 16) + (m + k * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12)) = v51;
              *(_BYTE *)(*(_QWORD *)(a2 + 16) + (m + k * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12) + 1) = v53;
            }
            else
            {
              v56 = *BytePtr;
              v57 = *(_QWORD *)(a2 + 16);
              v58 = (m + k * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12);
              if (v38)
              {
                v55 = &v37[3 * v56];
                *(_BYTE *)(v57 + v58) = *v55;
                *(_BYTE *)(*(_QWORD *)(a2 + 16) + (m + k * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12) + 1) = v55[1];
                LOBYTE(v55) = v55[2];
              }
              else
              {
                v59 = BytePtr[1];
                LOBYTE(v55) = BytePtr[2];
                *(_BYTE *)(v57 + v58) = v56;
                *(_BYTE *)(*(_QWORD *)(a2 + 16) + (m + k * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12) + 1) = v59;
              }
            }
            *(_BYTE *)(*(_QWORD *)(a2 + 16) + (m + k * *(unsigned int *)(a2 + 4)) * *(unsigned int *)(a2 + 12) + 2) = (_BYTE)v55;
            BytePtr += v26;
          }
        }
      }
    }
  }
  if (Model == kCGColorSpaceModelIndexed)
    MEMORY[0x2426211A0](v37, 0x1000C8077774924);
  CFRelease(cf);
  v4 = v62;
  CFRelease(v64);
  CGImageRelease(image);
  CFRelease(v68);
  CFRelease(v65);
  if ((char)v71 < 0)
    operator delete(__p);
LABEL_65:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_23C54F624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::util::ImageT<unsigned char>::AllocateMemory(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x2426211A0](v2, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = operator new[]();
  return 1;
}

BOOL cv3d::cv::gess::internal::CoreGraphicsSaveImage(char *a1, uint64_t a2, int a3, int a4)
{
  void *v8;
  const std::__fs::filesystem::path *v9;
  char *v10;
  void *v11;
  const __CFURL *v12;
  const __CFString *FormatStr;
  CGImageDestination *v14;
  void *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  CGColorSpaceRef DeviceGray;
  _BOOL8 v20;
  CGColorSpace *v21;
  int v22;
  CGDataProvider *v23;
  CGBitmapInfo v24;
  CGImage *v25;
  int v26;
  void *v27;
  double v28;
  void *v29;
  const __CFDictionary *v30;
  int v32;
  const __CFURL *cf;
  int v34;
  void *v35;
  std::string v36;
  std::string __p;
  std::string v38;
  std::string v39;

  v8 = (void *)MEMORY[0x2426214AC]();
  v9 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v39, a1);
  std::__fs::filesystem::path::extension[abi:ne180100](v9, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v38 = __p;
  }
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v11);
  v12 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v36 = v38;
  FormatStr = cv3d::cv::gess::internal::GetFormatStr((uint64_t)&v36);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v14 = CGImageDestinationCreateWithURL(v12, FormatStr, 1uLL, 0);
  if (v14)
  {
    v34 = a4;
    v32 = a3;
    v15 = v8;
    v17 = *(unsigned int *)(a2 + 8);
    v16 = *(unsigned int *)(a2 + 12);
    v18 = *(unsigned int *)(a2 + 4);
    v35 = v11;
    cf = v12;
    if ((_DWORD)v16 == 1)
      DeviceGray = CGColorSpaceCreateDeviceGray();
    else
      DeviceGray = CGColorSpaceCreateDeviceRGB();
    v21 = DeviceGray;
    v22 = *(_DWORD *)(a2 + 12);
    v23 = CGDataProviderCreateWithData(0, *(const void **)(a2 + 16), v18 * (unint64_t)v16 * v17, 0);
    if (v22 == 4)
      v24 = 3;
    else
      v24 = 0;
    v11 = v35;
    v25 = CGImageCreate(v18, v17, 8uLL, 8 * v16, v18 * (unint64_t)v16, v21, v24, v23, 0, 0, kCGRenderingIntentDefault);
    v8 = v15;
    if (v34)
    {
      v26 = v32 & ~(v32 >> 31);
      if (v26 >= 0x64)
        v26 = 100;
      v27 = (void *)MEMORY[0x24BDBCE70];
      v28 = (double)v26 / 100.0;
      *(float *)&v28 = v28;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "dictionaryWithObjectsAndKeys:", v29, *MEMORY[0x24BDD9220], 0);
      v30 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      CGImageDestinationAddImage(v14, v25, v30);
    }
    else
    {
      CGImageDestinationAddImage(v14, v25, 0);
    }
    v20 = CGImageDestinationFinalize(v14);
    CFRelease(FormatStr);
    CFRelease(cf);
    CFRelease(v14);
    CGDataProviderRelease(v23);
    CGImageRelease(v25);
  }
  else
  {
    CFRelease(v12);
    CFRelease(FormatStr);
    v20 = 0;
  }

  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  objc_autoreleasePoolPop(v8);
  return v20;
}

void sub_23C54F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  uint64_t v33;

  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 81) < 0)
    operator delete(*(void **)(v33 - 104));
  _Unwind_Resume(a1);
}

BOOL cv3d::cv::gess::internal::CoreGraphicsLoadImagef(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  const __CFURL *v7;
  CGImageSource *v8;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  CGDataProvider *DataProvider;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  size_t BitsPerPixel;
  const void *v16;
  BOOL Bool;
  const void *v18;
  double Float;
  char *p_p;
  const void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  unint64_t v32;
  const void *v33;
  int v34;
  CGColorSpace *ColorSpace;
  double v37;
  size_t v38;
  uint8_t *v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float32x2_t v56;
  float64x2_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x2_t *v63;
  size_t v64;
  unsigned int v65;
  float32x2_t *v66;
  int32x2_t v67;
  uint64x2_t v68;
  uint64_t v69;
  uint8_t *v70;
  double v71;
  float32_t v72;
  CGColorSpaceModel Model;
  void *v75;
  const __CFURL *cf;
  CGImageSource *v77;
  const __CFData *v78;
  void *v79;
  CGImage *image;
  CFDictionaryRef v81;
  void *__p;
  uint64_t v83;
  unsigned __int8 v84;

  v4 = (void *)MEMORY[0x2426214AC]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithURL(v7, 0);
  Status = CGImageSourceGetStatus(v8);
  if (Status)
  {
    CFRelease(v7);
    CFRelease(v8);
    goto LABEL_66;
  }
  v79 = v6;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, 0, 0);
  v81 = CGImageSourceCopyPropertiesAtIndex(v8, 0, 0);
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  v78 = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(v78);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  cf = v7;
  v77 = v8;
  image = ImageAtIndex;
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  Bool = cv3d::cv::gess::internal::CFDictionaryGetBool(v81, (const __CFDictionary *)*MEMORY[0x24BDD9660], v16);
  Float = cv3d::cv::gess::internal::CFDictionaryGetFloat(v81, (const __CFDictionary *)*MEMORY[0x24BDD93D0], v18);
  p_p = (char *)&__p;
  cv3d::cv::gess::internal::CFDictionaryGetString(v81, (const __CFDictionary *)*MEMORY[0x24BDD92D0], v21, &__p);
  v22 = v84;
  v23 = v84;
  v24 = v83;
  if ((v84 & 0x80u) == 0)
    v25 = (char *)&__p + v84;
  else
    v25 = (char *)__p + v83;
  if ((v84 & 0x80u) != 0)
    p_p = (char *)__p;
  v75 = v4;
  if (p_p != v25)
  {
    do
    {
      *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v25);
    v22 = v84;
    v24 = v83;
    v23 = v84;
  }
  v26 = BitsPerPixel >> 3;
  if ((v23 & 0x80u) == 0)
    v27 = v22;
  else
    v27 = v24;
  if (v27 == 4)
  {
    if ((v23 & 0x80u) == 0)
      v33 = &__p;
    else
      v33 = __p;
    if (!memcmp(v33, "gray", 4uLL))
    {
      v32 = 1;
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  if (v27 != 3)
    goto LABEL_31;
  v28 = (unsigned __int16 *)__p;
  if ((v23 & 0x80u) == 0)
    v28 = (unsigned __int16 *)&__p;
  v29 = *v28;
  v30 = *((unsigned __int8 *)v28 + 2);
  if (v29 != 26482 || v30 != 98)
  {
LABEL_31:
    v32 = v26 / ((unint64_t)Float >> 3);
    goto LABEL_32;
  }
  v32 = 3;
LABEL_32:
  if (v32 == 1)
    v34 = 1;
  else
    v34 = 3;
  *(_DWORD *)(a2 + 8) = Height;
  *(_DWORD *)(a2 + 12) = v34;
  *(_DWORD *)a2 = v32 == 1;
  *(_DWORD *)(a2 + 4) = Width;
  cv3d::cv::gess::util::ImageT<float>::AllocateMemory(a2);
  ColorSpace = CGImageGetColorSpace(image);
  Model = CGColorSpaceGetModel(ColorSpace);
  if (Model == kCGColorSpaceModelIndexed)
  {
    v38 = CGColorSpaceGetColorTableCount(ColorSpace) * v32;
    v39 = (uint8_t *)operator new[]();
    CGColorSpaceGetColorTable(ColorSpace, v39);
    v40 = v38 != 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  v6 = v79;
  if (v32 == 1)
  {
    Status = kCGImageStatusComplete;
    if (Height)
    {
      v41 = 0;
      for (i = 0; i != Height; ++i)
      {
        if (Width)
        {
          v43 = *(unsigned int *)(a2 + 12);
          v44 = (float *)(*(_QWORD *)(a2 + 16) + v41 * *(unsigned int *)(a2 + 4) * v43);
          v45 = 4 * v43;
          v46 = Width;
          do
          {
            if (Bool)
            {
              _H1 = *(_WORD *)BytePtr;
              __asm { FCVT            S1, H1 }
              LODWORD(v52) = (int)_S1;
            }
            else
            {
              v52 = *BytePtr;
              if (v40)
                LODWORD(v52) = v39[v52];
            }
            v53 = (double)v52 / 255.0;
            *v44 = v53;
            BytePtr += v26;
            v44 = (float *)((char *)v44 + v45);
            --v46;
          }
          while (v46);
        }
        v41 += 4;
      }
    }
  }
  else
  {
    Status = kCGImageStatusComplete;
    if (Height)
    {
      v54 = 0;
      v55 = 0;
      v56 = (float32x2_t)vdup_n_s32(0x437F0000u);
      v57 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
      do
      {
        if (Width)
        {
          v58 = 0;
          v59 = *(_QWORD *)(a2 + 16);
          v60 = *(unsigned int *)(a2 + 4);
          v61 = v55 * v60;
          v62 = *(unsigned int *)(a2 + 12);
          v63 = (float32x2_t *)(v59 + v54 * v60 * v62);
          v64 = Width;
          do
          {
            if (Bool)
            {
              LOWORD(_D3) = *((_WORD *)BytePtr + 2);
              __asm { FCVT            S3, H3 }
              LODWORD(v37) = 1132396544;
              v65 = (int)(float)(*(float *)&_D3 * 255.0);
              v66 = (float32x2_t *)(v59 + 4 * (v61 + v58) * v62);
              LODWORD(_D3) = *(_DWORD *)BytePtr;
              v67 = vcvt_s32_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v56));
              v68.i64[0] = v67.u32[0];
              v68.i64[1] = v67.u32[1];
              *v63 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_u64(v68), v57));
            }
            else
            {
              v69 = *BytePtr;
              if (v40)
              {
                v70 = &v39[3 * v69];
                LOBYTE(_D3) = *v70;
                v71 = (double)*(unint64_t *)&_D3 / 255.0;
                *(float *)&v71 = v71;
                v63->i32[0] = LODWORD(v71);
                LOBYTE(v71) = v70[1];
                *(float *)&v71 = (double)*(unint64_t *)&v71 / 255.0;
                v63->i32[1] = LODWORD(v71);
                v65 = v70[2];
              }
              else
              {
                v65 = BytePtr[2];
                v72 = (double)v69 / 255.0;
                LOBYTE(v37) = BytePtr[1];
                v37 = (double)*(unint64_t *)&v37 / 255.0;
                *(float *)&v37 = v37;
                v63->f32[0] = v72;
                v63->i32[1] = LODWORD(v37);
              }
              v66 = v63;
            }
            _D3 = (double)v65 / 255.0;
            *(float *)&_D3 = _D3;
            v66[1].i32[0] = LODWORD(_D3);
            ++v58;
            BytePtr += v26;
            v63 = (float32x2_t *)((char *)v63 + 4 * v62);
            --v64;
          }
          while (v64);
        }
        ++v55;
        v54 += 4;
      }
      while (v55 != Height);
    }
  }
  if (Model == kCGColorSpaceModelIndexed)
    MEMORY[0x2426211A0](v39, 0x1000C8077774924);
  CFRelease(cf);
  v4 = v75;
  CFRelease(v77);
  CGImageRelease(image);
  CFRelease(v81);
  CFRelease(v78);
  if ((char)v84 < 0)
    operator delete(__p);
LABEL_66:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_23C54FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::util::ImageT<float>::AllocateMemory(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    MEMORY[0x2426211A0](v2, 0x1000C8052888210);
  *(_QWORD *)(a1 + 16) = operator new[]();
  return 1;
}

BOOL cv3d::cv::gess::internal::CoreGraphicsLoadImageExr(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  CGImageSource *v7;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  CGDataProvider *DataProvider;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  size_t BitsPerPixel;
  const void *v15;
  double Float;
  char *p_p;
  const void *v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  _BOOL4 v30;
  const void *v31;
  unint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int32 *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float16x4_t *v54;
  size_t v55;
  uint64_t v56;
  void *v58;
  CGImage *image;
  const __CFData *v60;
  void *v61;
  cv3d::cv::gess::internal *v62;
  const __CFURL *cf;
  void *__p;
  uint64_t v65;
  unsigned __int8 v66;

  v4 = (void *)MEMORY[0x2426214AC]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  cf = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v7 = CGImageSourceCreateWithURL(cf, 0);
  Status = CGImageSourceGetStatus(v7);
  if (Status)
  {
    CFRelease(cf);
    CFRelease(v7);
    goto LABEL_62;
  }
  v61 = v6;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
  v62 = CGImageSourceCopyPropertiesAtIndex(v7, 0, 0);
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  v60 = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(v60);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  image = ImageAtIndex;
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  v58 = v4;
  Float = cv3d::cv::gess::internal::CFDictionaryGetFloat(v62, (const __CFDictionary *)*MEMORY[0x24BDD93D0], v15);
  p_p = (char *)&__p;
  cv3d::cv::gess::internal::CFDictionaryGetString(v62, (const __CFDictionary *)*MEMORY[0x24BDD92D0], v18, &__p);
  v19 = v66;
  v20 = v66;
  v21 = v65;
  if ((v66 & 0x80u) == 0)
    v22 = (char *)&__p + v66;
  else
    v22 = (char *)__p + v65;
  if ((v66 & 0x80u) != 0)
    p_p = (char *)__p;
  if (p_p != v22)
  {
    do
    {
      *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v22);
    v19 = v66;
    v21 = v65;
    v20 = v66;
  }
  v23 = BitsPerPixel >> 3;
  v24 = (unint64_t)Float;
  if ((v20 & 0x80u) == 0)
    v25 = v19;
  else
    v25 = v21;
  if (v25 == 4)
  {
    if ((v20 & 0x80u) == 0)
      v31 = &__p;
    else
      v31 = __p;
    if (!memcmp(v31, "gray", 4uLL))
    {
      *(_DWORD *)(a2 + 4) = Width;
      *(_DWORD *)(a2 + 8) = Height;
      v30 = 1;
      goto LABEL_34;
    }
  }
  else if (v25 == 3)
  {
    v26 = (unsigned __int16 *)__p;
    if ((v20 & 0x80u) == 0)
      v26 = (unsigned __int16 *)&__p;
    v27 = *v26;
    v28 = *((unsigned __int8 *)v26 + 2);
    if (v27 == 26482 && v28 == 98)
    {
      v30 = 0;
      *(_DWORD *)(a2 + 4) = Width;
      *(_DWORD *)(a2 + 8) = Height;
LABEL_32:
      v33 = 3;
      goto LABEL_35;
    }
  }
  v32 = v23 / (v24 >> 3);
  *(_DWORD *)(a2 + 4) = Width;
  *(_DWORD *)(a2 + 8) = Height;
  v30 = v32 == 1;
  if (v32 != 1)
    goto LABEL_32;
LABEL_34:
  v33 = 1;
LABEL_35:
  *(_DWORD *)(a2 + 12) = v33;
  *(_DWORD *)a2 = v30;
  cv3d::cv::gess::util::ImageT<float>::AllocateMemory(a2);
  if (!v30)
  {
    if (!Height)
      goto LABEL_59;
    v46 = 0;
    v47 = 0;
    while (!Width)
    {
LABEL_58:
      ++v47;
      v46 += 4;
      if (v47 == Height)
        goto LABEL_59;
    }
    v48 = 0;
    v49 = *(_QWORD *)(a2 + 16);
    v50 = *(unsigned int *)(a2 + 4);
    v51 = *(unsigned int *)(a2 + 12);
    v52 = v49 + 8;
    v53 = v47 * v50 * v51;
    v54 = (float16x4_t *)(v49 + v46 * v50 * v51);
    v55 = Width;
    while (v24 != 32)
    {
      if (v24 == 16)
      {
        _D0.i32[0] = *(_DWORD *)BytePtr;
        _D0 = (float16x4_t)vcvtq_f32_f16(_D0).u64[0];
        *v54 = _D0;
        _D0.i16[0] = *((_WORD *)BytePtr + 2);
        __asm { FCVT            S0, H0 }
        v56 = v53;
LABEL_56:
        *(_DWORD *)(v52 + 4 * v56) = _D0.i32[0];
      }
      ++v48;
      BytePtr += v23;
      v53 += v51;
      v54 = (float16x4_t *)((char *)v54 + 4 * v51);
      if (!--v55)
        goto LABEL_58;
    }
    v56 = (v47 * v50 + v48) * v51;
    v54->i32[0] = *(_DWORD *)BytePtr;
    v54->i32[1] = *((_DWORD *)BytePtr + 1);
    _D0.i32[0] = *((_DWORD *)BytePtr + 2);
    goto LABEL_56;
  }
  if (Height)
  {
    v35 = 0;
    v36 = 0;
    while (!Width)
    {
LABEL_46:
      ++v36;
      v35 += 4;
      if (v36 == Height)
        goto LABEL_59;
    }
    v37 = *(unsigned int *)(a2 + 12);
    v38 = (__int32 *)(*(_QWORD *)(a2 + 16) + v35 * *(unsigned int *)(a2 + 4) * v37);
    v39 = 4 * v37;
    v40 = Width;
    while (v24 != 32)
    {
      if (v24 == 16)
      {
        _H0 = *(_WORD *)BytePtr;
        __asm { FCVT            S0, H0 }
LABEL_44:
        *v38 = _S0;
      }
      BytePtr += v23;
      v38 = (__int32 *)((char *)v38 + v39);
      if (!--v40)
        goto LABEL_46;
    }
    _S0 = *(_DWORD *)BytePtr;
    goto LABEL_44;
  }
LABEL_59:
  CFRelease(cf);
  CFRelease(v7);
  CGImageRelease(image);
  CFRelease(v62);
  CFRelease(v60);
  if ((char)v66 < 0)
    operator delete(__p);
  v6 = v61;
  v4 = v58;
LABEL_62:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_23C550488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{

  _Unwind_Resume(a1);
}

uint64_t cv3d::cv::gess::io::internal::ReportBake2Json(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t v95;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i17;
  uint64_t i18;
  uint64_t i19;
  uint64_t i20;
  uint64_t i21;
  uint64_t i22;
  uint64_t i23;
  uint64_t i24;
  uint64_t i25;
  uint64_t i26;
  uint64_t i27;
  uint64_t i28;
  uint64_t i29;
  uint64_t i30;
  uint64_t i31;
  uint64_t i32;
  uint64_t i33;
  uint64_t i34;
  uint64_t i35;
  uint64_t v119;
  uint64_t i36;
  uint64_t i37;
  uint64_t i38;
  uint64_t i39;
  uint64_t i40;
  uint64_t i41;
  uint64_t i42;
  uint64_t i43;
  uint64_t i44;
  uint64_t i45;
  uint64_t i46;
  uint64_t i47;
  uint64_t i48;
  uint64_t i49;
  uint64_t i50;
  uint64_t i51;
  uint64_t i52;
  uint64_t i53;
  uint64_t i54;
  uint64_t i55;
  uint64_t i56;
  _BYTE v142[8];
  uint64_t *v143;
  std::string v144;
  _BYTE v145[16];
  _BYTE *v146;
  char v147;
  _BYTE v148[16];
  uint64_t v149;
  char v150;
  _BYTE v151[16];
  _BYTE *v152;
  char v153;
  _BYTE v154[8];
  _QWORD v155[2];
  char v156;
  _BYTE v157[16];
  _BYTE *v158;
  char v159;
  _BYTE v160[8];
  _QWORD v161[2];
  char v162;
  _BYTE v163[16];
  _BYTE *v164;
  char v165;
  _BYTE v166[8];
  _QWORD v167[2];
  char v168;
  _BYTE v169[16];
  _BYTE *v170;
  char v171;
  _BYTE v172[8];
  _QWORD v173[2];
  char v174;
  _BYTE v175[16];
  _BYTE *v176;
  char v177;
  _BYTE v178[8];
  _QWORD v179[2];
  char v180;
  _BYTE v181[16];
  _BYTE *v182;
  char v183;
  _BYTE v184[8];
  _QWORD v185[2];
  char v186;
  _BYTE v187[16];
  _BYTE *v188;
  char v189;
  _BYTE v190[8];
  _QWORD v191[2];
  char v192;
  _BYTE v193[16];
  _BYTE *v194;
  char v195;
  _BYTE v196[8];
  _QWORD v197[2];
  char v198;
  _BYTE v199[16];
  _BYTE *v200;
  char v201;
  _BYTE v202[8];
  _QWORD v203[2];
  char v204;
  _BYTE v205[16];
  _BYTE *v206;
  char v207;
  _BYTE v208[8];
  _QWORD v209[2];
  char v210;
  _BYTE v211[16];
  _BYTE *v212;
  char v213;
  _BYTE v214[8];
  _QWORD v215[2];
  char v216;
  _BYTE v217[16];
  _BYTE *v218;
  char v219;
  _BYTE v220[8];
  _QWORD v221[2];
  char v222;
  _BYTE v223[16];
  _BYTE *v224;
  char v225;
  _BYTE v226[8];
  _QWORD v227[2];
  char v228;
  _BYTE v229[16];
  _BYTE *v230;
  char v231;
  _BYTE v232[8];
  _QWORD v233[2];
  char v234;
  _BYTE v235[16];
  _BYTE *v236;
  char v237;
  _BYTE v238[8];
  _QWORD v239[2];
  char v240;
  _BYTE v241[16];
  _BYTE *v242;
  char v243;
  _BYTE v244[8];
  _QWORD v245[2];
  char v246;
  _BYTE v247[16];
  _BYTE *v248;
  char v249;
  _BYTE v250[8];
  _QWORD v251[2];
  char v252;
  _BYTE v253[16];
  _BYTE *v254;
  char v255;
  _BYTE v256[8];
  _QWORD v257[2];
  char v258;
  _BYTE v259[16];
  _BYTE *v260;
  char v261;
  _BYTE v262[8];
  _QWORD v263[2];
  char v264;
  _BYTE v265[16];
  _BYTE *v266;
  char v267;
  _BYTE v268[8];
  _QWORD v269[2];
  char v270;
  _BYTE v271[16];
  _BYTE *v272;
  char v273;
  _BYTE v274[8];
  _QWORD v275[2];
  char v276;
  _BYTE v277[16];
  _BYTE *v278;
  char v279;
  _BYTE v280[8];
  _QWORD v281[2];
  char v282;
  _BYTE v283[16];
  _BYTE *v284;
  char v285;
  _BYTE v286[8];
  _QWORD v287[2];
  char v288;
  _BYTE v289[16];
  _BYTE *v290;
  char v291;
  _BYTE v292[8];
  _QWORD v293[2];
  char v294;
  _BYTE v295[16];
  _BYTE *v296;
  char v297;
  _BYTE v298[8];
  _QWORD v299[2];
  char v300;
  _BYTE v301[16];
  _BYTE *v302;
  char v303;
  _BYTE v304[8];
  _QWORD v305[2];
  char v306;
  _BYTE v307[16];
  _BYTE *v308;
  char v309;
  _BYTE v310[8];
  _QWORD v311[2];
  char v312;
  _BYTE v313[16];
  _BYTE *v314;
  char v315;
  _BYTE v316[8];
  _QWORD v317[2];
  char v318;
  _BYTE v319[16];
  _BYTE *v320;
  char v321;
  _BYTE v322[8];
  _QWORD v323[2];
  char v324;
  _BYTE v325[16];
  _BYTE *v326;
  char v327;
  _BYTE v328[8];
  _QWORD v329[2];
  char v330;
  _BYTE v331[16];
  _BYTE *v332;
  char v333;
  _BYTE v334[8];
  _QWORD v335[2];
  char v336;
  _BYTE v337[16];
  _BYTE *v338;
  char v339;
  _BYTE v340[8];
  _QWORD v341[2];
  char v342;
  _BYTE v343[16];
  _BYTE *v344;
  char v345;
  _QWORD v346[3];
  char v347;
  _QWORD v348[3];
  char v349;
  _QWORD v350[3];
  char v351;
  _QWORD v352[3];
  char v353;
  _QWORD v354[3];
  char v355;
  _QWORD v356[3];
  char v357;
  _QWORD v358[3];
  char v359;
  _QWORD v360[3];
  char v361;
  _QWORD v362[3];
  char v363;
  _QWORD v364[3];
  char v365;
  _BYTE v366[16];
  _BYTE *v367;
  char v368;
  _BYTE v369[16];
  uint64_t v370;
  char v371;
  _BYTE v372[16];
  _BYTE *v373;
  char v374;
  _BYTE v375[8];
  _QWORD v376[2];
  char v377;
  _BYTE v378[16];
  _BYTE *v379;
  char v380;
  _BYTE v381[8];
  _QWORD v382[2];
  char v383;
  _BYTE v384[16];
  _BYTE *v385;
  char v386;
  _BYTE v387[8];
  _QWORD v388[2];
  char v389;
  _BYTE v390[16];
  _BYTE *v391;
  char v392;
  _BYTE v393[8];
  _QWORD v394[2];
  char v395;
  _BYTE v396[16];
  _BYTE *v397;
  char v398;
  _BYTE v399[8];
  _QWORD v400[2];
  char v401;
  _BYTE v402[16];
  _BYTE *v403;
  char v404;
  _BYTE v405[8];
  _QWORD v406[2];
  char v407;
  _BYTE v408[16];
  _BYTE *v409;
  char v410;
  _BYTE v411[8];
  _QWORD v412[2];
  char v413;
  _BYTE v414[16];
  _BYTE *v415;
  char v416;
  _BYTE v417[8];
  _QWORD v418[2];
  char v419;
  _BYTE v420[16];
  _BYTE *v421;
  char v422;
  _QWORD v423[3];
  char v424;
  _QWORD v425[3];
  char v426;
  _QWORD v427[3];
  char v428;
  _QWORD v429[3];
  char v430;
  _QWORD v431[3];
  char v432;
  _QWORD v433[3];
  char v434;
  _BYTE v435[16];
  _BYTE *v436;
  char v437;
  _BYTE v438[16];
  _BYTE *v439;
  char v440;
  _BYTE v441[16];
  uint64_t v442;
  char v443;
  _BYTE v444[16];
  _BYTE *v445;
  char v446;
  _BYTE v447[8];
  _QWORD v448[2];
  char v449;
  _BYTE v450[16];
  _BYTE *v451;
  char v452;
  _BYTE v453[8];
  _QWORD v454[2];
  char v455;
  _BYTE v456[16];
  _BYTE *v457;
  char v458;
  _BYTE v459[8];
  _QWORD v460[2];
  char v461;
  _BYTE v462[16];
  _BYTE *v463;
  char v464;
  _BYTE v465[8];
  _QWORD v466[2];
  char v467;
  _BYTE v468[16];
  _BYTE *v469;
  char v470;
  _BYTE v471[8];
  _QWORD v472[2];
  char v473;
  _BYTE v474[16];
  _BYTE *v475;
  char v476;
  _BYTE v477[8];
  _QWORD v478[2];
  char v479;
  _BYTE v480[16];
  _BYTE *v481;
  char v482;
  _BYTE v483[8];
  _QWORD v484[2];
  char v485;
  _BYTE v486[16];
  _BYTE *v487;
  char v488;
  _BYTE v489[8];
  _QWORD v490[2];
  char v491;
  _BYTE v492[16];
  _BYTE *v493;
  char v494;
  _BYTE v495[8];
  _QWORD v496[2];
  char v497;
  _BYTE v498[16];
  _BYTE *v499;
  char v500;
  _BYTE v501[8];
  _QWORD v502[2];
  char v503;
  _BYTE v504[16];
  _BYTE *v505;
  char v506;
  _BYTE v507[8];
  _QWORD v508[2];
  char v509;
  _QWORD v510[3];
  char v511;
  _BYTE v512[8];
  _QWORD v513[2];
  char v514;
  _QWORD v515[3];
  char v516;
  _BYTE v517[8];
  _QWORD v518[2];
  char v519;
  _QWORD v520[3];
  char v521;
  _QWORD v522[3];
  char v523;
  _QWORD v524[3];
  char v525;
  _QWORD v526[3];
  char v527;
  _QWORD v528[3];
  char v529;
  _QWORD v530[3];
  char v531;
  _QWORD v532[3];
  char v533;
  _QWORD v534[3];
  char v535;
  _QWORD v536[3];
  char v537;
  _QWORD v538[3];
  char v539;
  _QWORD v540[3];
  char v541;
  _QWORD v542[3];
  char v543;
  _BYTE v544[16];
  uint64_t v545;
  char v546;
  _QWORD v547[3];
  char v548;
  _BYTE v549[8];
  _QWORD v550[2];
  char v551;
  _QWORD v552[3];
  char v553;
  _BYTE v554[8];
  _QWORD v555[2];
  char v556;
  _QWORD v557[3];
  char v558;
  _BYTE v559[8];
  _QWORD v560[2];
  char v561;
  _QWORD v562[3];
  char v563;
  _BYTE v564[8];
  _QWORD v565[2];
  char v566;
  _QWORD v567[3];
  char v568;
  _BYTE v569[8];
  _QWORD v570[2];
  char v571;
  _QWORD v572[3];
  char v573;
  _BYTE v574[8];
  _QWORD v575[2];
  char v576;
  _QWORD v577[3];
  char v578;
  _BYTE v579[8];
  _QWORD v580[2];
  char v581;
  _QWORD v582[3];
  char v583;
  _BYTE v584[8];
  _QWORD v585[2];
  char v586;
  _QWORD v587[3];
  char v588;
  _QWORD v589[3];
  char v590;
  _QWORD v591[3];
  char v592;
  _QWORD v593[3];
  char v594;
  _QWORD v595[3];
  char v596;
  _QWORD v597[3];
  char v598;
  _QWORD v599[3];
  char v600;
  _BYTE v601[16];
  _BYTE *v602;
  char v603;
  _QWORD v604[3];
  char v605;
  _BYTE v606[16];
  uint64_t v607;
  char v608;
  _QWORD v609[3];
  char v610;
  _BYTE v611[8];
  _QWORD v612[2];
  char v613;
  _QWORD v614[3];
  char v615;
  _QWORD v616[3];
  char v617;
  _QWORD v618[3];
  char v619;
  _QWORD v620[3];
  char v621;
  _QWORD v622[3];
  char v623;
  _QWORD v624[3];
  char v625;
  _QWORD v626[3];
  char v627;
  _QWORD v628[3];
  char v629;
  _QWORD v630[3];
  char v631;
  _QWORD v632[3];
  char v633;
  _QWORD v634[3];
  char v635;
  _QWORD v636[3];
  char v637;
  _QWORD v638[3];
  char v639;
  _QWORD v640[3];
  char v641;
  _QWORD v642[3];
  char v643;
  _QWORD v644[3];
  char v645;
  _QWORD v646[3];
  char v647;
  _QWORD v648[3];
  char v649;
  _QWORD v650[3];
  char v651;
  _QWORD v652[3];
  char v653;
  _QWORD v654[3];
  char v655;
  _QWORD v656[3];
  char v657;
  _QWORD v658[3];
  char v659;
  _QWORD v660[3];
  char v661;
  _QWORD v662[3];
  char v663;
  _QWORD v664[3];
  char v665;
  _QWORD v666[3];
  char v667;
  _QWORD v668[3];
  char v669;
  _QWORD v670[3];
  char v671;
  uint64_t v672;

  v3 = (_anonymous_namespace_ *)MEMORY[0x24BDAC7A8](a1, a2, a3);
  v5 = v4;
  v6 = v3;
  v672 = *MEMORY[0x24BDAC8D0];
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((char *)v7 + 47) < 0)
    std::string::__init_copy_ctor_external(&v144, (const std::string::value_type *)v7[3], v7[4]);
  else
    v144 = *(std::string *)((_BYTE *)v7 + 1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v609, "load_high_time");
  v609[2] = v609;
  v610 = 1;
  v8 = *(_QWORD *)v6;
  v611[0] = 7;
  v612[0] = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v611);
  v612[1] = v611;
  v613 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v614, (uint64_t)v609, 2, 1, 2);
  v614[2] = v614;
  v615 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v604, "high_mesh_topology");
  v604[2] = v604;
  v605 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v582, "n_vertices");
  v583 = 1;
  v9 = *((unsigned int *)v6 + 2);
  v584[0] = 6;
  v582[2] = v582;
  v585[0] = v9;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v584);
  v585[1] = v584;
  v586 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v587, (uint64_t)v582, 2, 1, 2);
  v587[2] = v587;
  v588 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v577, "n_half_edges");
  v578 = 1;
  v10 = *((unsigned int *)v6 + 3);
  v579[0] = 6;
  v577[2] = v577;
  v580[0] = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v579);
  v580[1] = v579;
  v581 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v589, (uint64_t)v577, 2, 1, 2);
  v589[2] = v589;
  v590 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>((uint64_t)v572, "n_boundary_half_edges");
  v573 = 1;
  v11 = *((unsigned int *)v6 + 4);
  v574[0] = 6;
  v572[2] = v572;
  v575[0] = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v574);
  v575[1] = v574;
  v576 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v591, (uint64_t)v572, 2, 1, 2);
  v591[2] = v591;
  v592 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v567, "n_edges");
  v568 = 1;
  v12 = *((unsigned int *)v6 + 5);
  v569[0] = 6;
  v567[2] = v567;
  v570[0] = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v569);
  v570[1] = v569;
  v571 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v593, (uint64_t)v567, 2, 1, 2);
  v593[2] = v593;
  v594 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v562, "n_faces");
  v563 = 1;
  v13 = *((unsigned int *)v6 + 6);
  v564[0] = 6;
  v562[2] = v562;
  v565[0] = v13;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v564);
  v565[1] = v564;
  v566 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v595, (uint64_t)v562, 2, 1, 2);
  v595[2] = v595;
  v596 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v557, "n_boundary_loops");
  v558 = 1;
  v14 = *((unsigned int *)v6 + 7);
  v559[0] = 6;
  v557[2] = v557;
  v560[0] = v14;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v559);
  v560[1] = v559;
  v561 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v597, (uint64_t)v557, 2, 1, 2);
  v597[2] = v597;
  v598 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v552, "n_genus");
  v553 = 1;
  v15 = *((unsigned int *)v6 + 8);
  v554[0] = 6;
  v552[2] = v552;
  v555[0] = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v554);
  v555[1] = v554;
  v556 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v599, (uint64_t)v552, 2, 1, 2);
  v599[2] = v599;
  v600 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v547, "n_components");
  v548 = 1;
  v16 = *((unsigned int *)v6 + 9);
  v549[0] = 6;
  v547[2] = v547;
  v550[0] = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v549);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v549);
  v550[1] = v549;
  v551 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v601, (uint64_t)v547, 2, 1, 2);
  v602 = v601;
  v603 = 1;
  v607 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v606, (uint64_t)v587, 8, 1, 2);
  v608 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v616, (uint64_t)v604, 2, 1, 2);
  v616[2] = v616;
  v617 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v542, "high_mesh_geometry");
  v542[2] = v542;
  v543 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v515, "avg_edge_length");
  v515[2] = v515;
  v516 = 1;
  v17 = *((float *)v6 + 12);
  v517[0] = 7;
  *(double *)v518 = v17;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v517);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v517);
  v518[1] = v517;
  v519 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v520, (uint64_t)v515, 2, 1, 2);
  v520[2] = v520;
  v521 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v510, "avg_vertex_valence");
  v510[2] = v510;
  v511 = 1;
  v18 = *((float *)v6 + 13);
  v512[0] = 7;
  *(double *)v513 = v18;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v512);
  v513[1] = v512;
  v514 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v522, (uint64_t)v510, 2, 1, 2);
  v522[2] = v522;
  v523 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>((uint64_t)v504, "vertex_valence_deviation");
  v505 = v504;
  v506 = 1;
  v19 = *((float *)v6 + 14);
  v507[0] = 7;
  *(double *)v508 = v19;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v507);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v507);
  v508[1] = v507;
  v509 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v524, (uint64_t)v504, 2, 1, 2);
  v524[2] = v524;
  v525 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v498, "edge_length_SD");
  v499 = v498;
  v500 = 1;
  v20 = *((float *)v6 + 15);
  v501[0] = 7;
  *(double *)v502 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v501);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v501);
  v502[1] = v501;
  v503 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v526, (uint64_t)v498, 2, 1, 2);
  v526[2] = v526;
  v527 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>((uint64_t)v492, "face_angle_SD");
  v493 = v492;
  v494 = 1;
  v21 = *((float *)v6 + 16);
  v495[0] = 7;
  *(double *)v496 = v21;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v495);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v495);
  v496[1] = v495;
  v497 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v528, (uint64_t)v492, 2, 1, 2);
  v528[2] = v528;
  v529 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v486, "bbox_min_x");
  v487 = v486;
  v488 = 1;
  v22 = *((float *)v6 + 20);
  v489[0] = 7;
  *(double *)v490 = v22;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v489);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v489);
  v490[1] = v489;
  v491 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v530, (uint64_t)v486, 2, 1, 2);
  v530[2] = v530;
  v531 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v480, "bbox_min_y");
  v481 = v480;
  v482 = 1;
  v23 = *((float *)v6 + 21);
  v483[0] = 7;
  *(double *)v484 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v483);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v483);
  v484[1] = v483;
  v485 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v532, (uint64_t)v480, 2, 1, 2);
  v532[2] = v532;
  v533 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v474, "bbox_min_z");
  v475 = v474;
  v476 = 1;
  v24 = *((float *)v6 + 22);
  v477[0] = 7;
  *(double *)v478 = v24;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v477);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v477);
  v478[1] = v477;
  v479 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v534, (uint64_t)v474, 2, 1, 2);
  v534[2] = v534;
  v535 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v468, "bbox_max_x");
  v469 = v468;
  v470 = 1;
  v25 = *((float *)v6 + 24);
  v471[0] = 7;
  *(double *)v472 = v25;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v471);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v471);
  v472[1] = v471;
  v473 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v536, (uint64_t)v468, 2, 1, 2);
  v536[2] = v536;
  v537 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v462, "bbox_max_y");
  v463 = v462;
  v464 = 1;
  v26 = *((float *)v6 + 25);
  v465[0] = 7;
  *(double *)v466 = v26;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v465);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v465);
  v466[1] = v465;
  v467 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v538, (uint64_t)v462, 2, 1, 2);
  v538[2] = v538;
  v539 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v456, "bbox_max_z");
  v457 = v456;
  v458 = 1;
  v27 = *((float *)v6 + 26);
  v459[0] = 7;
  *(double *)v460 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v459);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v459);
  v460[1] = v459;
  v461 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v540, (uint64_t)v456, 2, 1, 2);
  v540[2] = v540;
  v541 = 1;
  v545 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v544, (uint64_t)v520, 11, 1, 2);
  v546 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v618, (uint64_t)v542, 2, 1, 2);
  v618[2] = v618;
  v619 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>((uint64_t)v450, "load_low_time");
  v451 = v450;
  v452 = 1;
  v28 = *((_QWORD *)v6 + 14);
  v453[0] = 7;
  v454[0] = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v453);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v453);
  v454[1] = v453;
  v455 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v620, (uint64_t)v450, 2, 1, 2);
  v620[2] = v620;
  v621 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>((uint64_t)v444, "simplify_time");
  v445 = v444;
  v446 = 1;
  v29 = *((_QWORD *)v6 + 15);
  v447[0] = 7;
  v448[0] = v29;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v447);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v447);
  v448[1] = v447;
  v449 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v622, (uint64_t)v444, 2, 1, 2);
  v622[2] = v622;
  v623 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[18],char [18],0>((uint64_t)v438, "low_mesh_topology");
  v439 = v438;
  v440 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v414, "n_vertices");
  v415 = v414;
  v416 = 1;
  v30 = *((unsigned int *)v6 + 32);
  v417[0] = 6;
  v418[0] = v30;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v417);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v417);
  v418[1] = v417;
  v419 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v420, (uint64_t)v414, 2, 1, 2);
  v421 = v420;
  v422 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v408, "n_half_edges");
  v409 = v408;
  v410 = 1;
  v31 = *((unsigned int *)v6 + 33);
  v411[0] = 6;
  v412[0] = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v411);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v411);
  v412[1] = v411;
  v413 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v423, (uint64_t)v408, 2, 1, 2);
  v423[2] = v423;
  v424 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[22],char [22],0>((uint64_t)v402, "n_boundary_half_edges");
  v403 = v402;
  v404 = 1;
  v32 = *((unsigned int *)v6 + 34);
  v405[0] = 6;
  v406[0] = v32;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v405);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v405);
  v406[1] = v405;
  v407 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v425, (uint64_t)v402, 2, 1, 2);
  v425[2] = v425;
  v426 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v396, "n_edges");
  v397 = v396;
  v398 = 1;
  v33 = *((unsigned int *)v6 + 35);
  v399[0] = 6;
  v400[0] = v33;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v399);
  v400[1] = v399;
  v401 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v427, (uint64_t)v396, 2, 1, 2);
  v427[2] = v427;
  v428 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v390, "n_faces");
  v391 = v390;
  v392 = 1;
  v34 = *((unsigned int *)v6 + 36);
  v393[0] = 6;
  v394[0] = v34;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v393);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v393);
  v394[1] = v393;
  v395 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v429, (uint64_t)v390, 2, 1, 2);
  v429[2] = v429;
  v430 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v384, "n_boundary_loops");
  v385 = v384;
  v386 = 1;
  v35 = *((unsigned int *)v6 + 37);
  v387[0] = 6;
  v388[0] = v35;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v387);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v387);
  v388[1] = v387;
  v389 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v431, (uint64_t)v384, 2, 1, 2);
  v431[2] = v431;
  v432 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)v378, "n_genus");
  v379 = v378;
  v380 = 1;
  v36 = *((unsigned int *)v6 + 38);
  v381[0] = 6;
  v382[0] = v36;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v381);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v381);
  v382[1] = v381;
  v383 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v433, (uint64_t)v378, 2, 1, 2);
  v433[2] = v433;
  v434 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v372, "n_components");
  v373 = v372;
  v374 = 1;
  v37 = *((unsigned int *)v6 + 39);
  v375[0] = 6;
  v376[0] = v37;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v375);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v375);
  v376[1] = v375;
  v377 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v435, (uint64_t)v372, 2, 1, 2);
  v436 = v435;
  v437 = 1;
  v442 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v441, (uint64_t)v420, 8, 1, 2);
  v443 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v624, (uint64_t)v438, 2, 1, 2);
  v624[2] = v624;
  v625 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[18],char [18],0>((uint64_t)v366, "low_mesh_geometry");
  v367 = v366;
  v368 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v337, "avg_edge_length");
  v338 = v337;
  v339 = 1;
  v38 = *((float *)v6 + 40);
  v340[0] = 7;
  *(double *)v341 = v38;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v340);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v340);
  v341[1] = v340;
  v342 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v343, (uint64_t)v337, 2, 1, 2);
  v344 = v343;
  v345 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v331, "avg_vertex_valence");
  v332 = v331;
  v333 = 1;
  v39 = *((float *)v6 + 41);
  v334[0] = 7;
  *(double *)v335 = v39;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v334);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v334);
  v335[1] = v334;
  v336 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v346, (uint64_t)v331, 2, 1, 2);
  v346[2] = v346;
  v347 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[25],char [25],0>((uint64_t)v325, "vertex_valence_deviation");
  v326 = v325;
  v327 = 1;
  v40 = *((float *)v6 + 42);
  v328[0] = 7;
  *(double *)v329 = v40;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v328);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v328);
  v329[1] = v328;
  v330 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v348, (uint64_t)v325, 2, 1, 2);
  v348[2] = v348;
  v349 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v319, "edge_length_SD");
  v320 = v319;
  v321 = 1;
  v41 = *((float *)v6 + 43);
  v322[0] = 7;
  *(double *)v323 = v41;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v322);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v322);
  v323[1] = v322;
  v324 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v350, (uint64_t)v319, 2, 1, 2);
  v350[2] = v350;
  v351 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[14],char [14],0>((uint64_t)v313, "face_angle_SD");
  v314 = v313;
  v315 = 1;
  v42 = *((float *)v6 + 44);
  v316[0] = 7;
  *(double *)v317 = v42;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v316);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v316);
  v317[1] = v316;
  v318 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v352, (uint64_t)v313, 2, 1, 2);
  v352[2] = v352;
  v353 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v307, "bbox_min_x");
  v308 = v307;
  v309 = 1;
  v43 = *((float *)v6 + 48);
  v310[0] = 7;
  *(double *)v311 = v43;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v310);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v310);
  v311[1] = v310;
  v312 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v354, (uint64_t)v307, 2, 1, 2);
  v354[2] = v354;
  v355 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v301, "bbox_min_y");
  v302 = v301;
  v303 = 1;
  v44 = *((float *)v6 + 49);
  v304[0] = 7;
  *(double *)v305 = v44;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v304);
  v305[1] = v304;
  v306 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v356, (uint64_t)v301, 2, 1, 2);
  v356[2] = v356;
  v357 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v295, "bbox_min_z");
  v296 = v295;
  v297 = 1;
  v45 = *((float *)v6 + 50);
  v298[0] = 7;
  *(double *)v299 = v45;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v298);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v298);
  v299[1] = v298;
  v300 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v358, (uint64_t)v295, 2, 1, 2);
  v358[2] = v358;
  v359 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v289, "bbox_max_x");
  v290 = v289;
  v291 = 1;
  v46 = *((float *)v6 + 52);
  v292[0] = 7;
  *(double *)v293 = v46;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v292);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v292);
  v293[1] = v292;
  v294 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v360, (uint64_t)v289, 2, 1, 2);
  v360[2] = v360;
  v361 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v283, "bbox_max_y");
  v284 = v283;
  v285 = 1;
  v47 = *((float *)v6 + 53);
  v286[0] = 7;
  *(double *)v287 = v47;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v286);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v286);
  v287[1] = v286;
  v288 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v362, (uint64_t)v283, 2, 1, 2);
  v362[2] = v362;
  v363 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v277, "bbox_max_z");
  v278 = v277;
  v279 = 1;
  v48 = *((float *)v6 + 54);
  v280[0] = 7;
  *(double *)v281 = v48;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v280);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v280);
  v281[1] = v280;
  v282 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v364, (uint64_t)v277, 2, 1, 2);
  v364[2] = v364;
  v365 = 1;
  v370 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v369, (uint64_t)v343, 11, 1, 2);
  v371 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v626, (uint64_t)v366, 2, 1, 2);
  v626[2] = v626;
  v627 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v271, "chart_time");
  v272 = v271;
  v273 = 1;
  v49 = *((_QWORD *)v6 + 28);
  v274[0] = 7;
  v275[0] = v49;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v274);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v274);
  v275[1] = v274;
  v276 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v628, (uint64_t)v271, 2, 1, 2);
  v628[2] = v628;
  v629 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v265, "chart_number");
  v266 = v265;
  v267 = 1;
  v50 = *((_QWORD *)v6 + 29);
  v268[0] = 6;
  v269[0] = v50;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v268);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v268);
  v269[1] = v268;
  v270 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v630, (uint64_t)v265, 2, 1, 2);
  v630[2] = v630;
  v631 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v259, "chart_max_stretch_ratio");
  v260 = v259;
  v261 = 1;
  v51 = *((float *)v6 + 60);
  v262[0] = 7;
  *(double *)v263 = v51;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v262);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v262);
  v263[1] = v262;
  v264 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v632, (uint64_t)v259, 2, 1, 2);
  v632[2] = v632;
  v633 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v253, "chart_avg_stretch_ratio");
  v254 = v253;
  v255 = 1;
  v52 = *((float *)v6 + 61);
  v256[0] = 7;
  *(double *)v257 = v52;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v256);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v256);
  v257[1] = v256;
  v258 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v634, (uint64_t)v253, 2, 1, 2);
  v634[2] = v634;
  v635 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[27],char [27],0>((uint64_t)v247, "chart_self_intersect_ratio");
  v248 = v247;
  v249 = 1;
  v53 = *((float *)v6 + 62);
  v250[0] = 7;
  *(double *)v251 = v53;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v250);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v250);
  v251[1] = v250;
  v252 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v636, (uint64_t)v247, 2, 1, 2);
  v636[2] = v636;
  v637 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v241, "pack_time");
  v242 = v241;
  v243 = 1;
  v54 = *((_QWORD *)v6 + 32);
  v244[0] = 7;
  v245[0] = v54;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v244);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v244);
  v245[1] = v244;
  v246 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v638, (uint64_t)v241, 2, 1, 2);
  v638[2] = v638;
  v639 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[16],char [16],0>((uint64_t)v235, "pack_img_number");
  v236 = v235;
  v237 = 1;
  v55 = *((_QWORD *)v6 + 33);
  v238[0] = 6;
  v239[0] = v55;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v238);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v238);
  v239[1] = v238;
  v240 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v640, (uint64_t)v235, 2, 1, 2);
  v640[2] = v640;
  v641 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v229, "mesh_repair");
  v230 = v229;
  v231 = 1;
  v56 = *((_QWORD *)v6 + 34);
  v232[0] = 6;
  v233[0] = v56;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v232);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v232);
  v233[1] = v232;
  v234 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v642, (uint64_t)v229, 2, 1, 2);
  v642[2] = v642;
  v643 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v223, "mesh_processing_time");
  v224 = v223;
  v225 = 1;
  v57 = *((_QWORD *)v6 + 35);
  v226[0] = 7;
  v227[0] = v57;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v226);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v226);
  v227[1] = v226;
  v228 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v644, (uint64_t)v223, 2, 1, 2);
  v644[2] = v644;
  v645 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v217, "rasterize_time");
  v218 = v217;
  v219 = 1;
  v58 = *((_QWORD *)v6 + 36);
  v220[0] = 7;
  v221[0] = v58;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v220);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v220);
  v221[1] = v220;
  v222 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v646, (uint64_t)v217, 2, 1, 2);
  v646[2] = v646;
  v647 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[15],char [15],0>((uint64_t)v211, "build_ray_time");
  v212 = v211;
  v213 = 1;
  v59 = *((_QWORD *)v6 + 37);
  v214[0] = 7;
  v215[0] = v59;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v214);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v214);
  v215[1] = v214;
  v216 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v648, (uint64_t)v211, 2, 1, 2);
  v648[2] = v648;
  v649 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[24],char [24],0>((uint64_t)v205, "retrieve_attribute_time");
  v206 = v205;
  v207 = 1;
  v60 = *((_QWORD *)v6 + 38);
  v208[0] = 7;
  v209[0] = v60;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v208);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v208);
  v209[1] = v208;
  v210 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v650, (uint64_t)v205, 2, 1, 2);
  v650[2] = v650;
  v651 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[27],char [27],0>((uint64_t)v199, "intersected_number_of_rays");
  v200 = v199;
  v201 = 1;
  v61 = *((_QWORD *)v6 + 39);
  v202[0] = 6;
  v203[0] = v61;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v202);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v202);
  v203[1] = v202;
  v204 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v652, (uint64_t)v199, 2, 1, 2);
  v652[2] = v652;
  v653 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[21],char [21],0>((uint64_t)v193, "total_number_of_rays");
  v194 = v193;
  v195 = 1;
  v62 = *((_QWORD *)v6 + 40);
  v196[0] = 6;
  v197[0] = v62;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v196);
  v197[1] = v196;
  v198 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v654, (uint64_t)v193, 2, 1, 2);
  v654[2] = v654;
  v655 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v187, "intersected_rate");
  v188 = v187;
  v189 = 1;
  v63 = *((float *)v6 + 82);
  v190[0] = 7;
  *(double *)v191 = v63;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v190);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v190);
  v191[1] = v190;
  v192 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v656, (uint64_t)v187, 2, 1, 2);
  v656[2] = v656;
  v657 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v181, "min_disp");
  v182 = v181;
  v183 = 1;
  v64 = *((_QWORD *)v6 + 42);
  v184[0] = 7;
  v185[0] = v64;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v184);
  v185[1] = v184;
  v186 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v658, (uint64_t)v181, 2, 1, 2);
  v658[2] = v658;
  v659 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v175, "max_disp");
  v176 = v175;
  v177 = 1;
  v65 = *((_QWORD *)v6 + 43);
  v178[0] = 7;
  v179[0] = v65;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v178);
  v179[1] = v178;
  v180 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v660, (uint64_t)v175, 2, 1, 2);
  v660[2] = v660;
  v661 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v169, "imaging_time");
  v170 = v169;
  v171 = 1;
  v66 = *((_QWORD *)v6 + 44);
  v172[0] = 7;
  v173[0] = v66;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v172);
  v173[1] = v172;
  v174 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v662, (uint64_t)v169, 2, 1, 2);
  v662[2] = v662;
  v663 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v163, "generate_ao_time");
  v164 = v163;
  v165 = 1;
  v67 = *((_QWORD *)v6 + 45);
  v166[0] = 7;
  v167[0] = v67;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v166);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v166);
  v167[1] = v166;
  v168 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v664, (uint64_t)v163, 2, 1, 2);
  v664[2] = v664;
  v665 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v157, "generate_maps_time");
  v158 = v157;
  v159 = 1;
  v68 = *((_QWORD *)v6 + 46);
  v160[0] = 7;
  v161[0] = v68;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v160);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v160);
  v161[1] = v160;
  v162 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v666, (uint64_t)v157, 2, 1, 2);
  v666[2] = v666;
  v667 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v151, "save_time");
  v152 = v151;
  v153 = 1;
  v69 = *((_QWORD *)v6 + 47);
  v154[0] = 7;
  v155[0] = v69;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v154);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v154);
  v155[1] = v154;
  v156 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v668, (uint64_t)v151, 2, 1, 2);
  v668[2] = v668;
  v669 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v145, "error_code");
  v146 = v145;
  v147 = 1;
  v149 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string&,std::string,0>((uint64_t)v148, (uint64_t)&v144);
  v150 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v670, (uint64_t)v145, 2, 1, 2);
  v670[2] = v670;
  v671 = 1;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v142, (uint64_t)v614, 29, 1, 2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
  v70 = *(_BYTE *)v5;
  *(_BYTE *)v5 = v142[0];
  v142[0] = v70;
  v71 = *(uint64_t **)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v143;
  v143 = v71;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v142);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v143, v142[0]);
  v72 = 928;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v611[v72]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v612[v72 / 8], v611[v72]);
    v72 -= 32;
  }
  while (v72);
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v148[v72]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v148[v72 + 8], v148[v72]);
    v72 -= 32;
  }
  while (v72 != -64);
  for (i = 0; i != -8; i -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v154[i * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v155[i], v154[i * 8]);
  }
  for (j = 0; j != -8; j -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v160[j * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v161[j], v160[j * 8]);
  }
  for (k = 0; k != -8; k -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v166[k * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v167[k], v166[k * 8]);
  }
  for (m = 0; m != -8; m -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v172[m * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v173[m], v172[m * 8]);
  }
  for (n = 0; n != -8; n -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v178[n * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v179[n], v178[n * 8]);
  }
  for (ii = 0; ii != -8; ii -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v184[ii * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v185[ii], v184[ii * 8]);
  }
  for (jj = 0; jj != -8; jj -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v190[jj * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v191[jj], v190[jj * 8]);
  }
  for (kk = 0; kk != -8; kk -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v196[kk * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v197[kk], v196[kk * 8]);
  }
  for (mm = 0; mm != -8; mm -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v202[mm * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v203[mm], v202[mm * 8]);
  }
  for (nn = 0; nn != -8; nn -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v208[nn * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v209[nn], v208[nn * 8]);
  }
  for (i1 = 0; i1 != -8; i1 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v214[i1 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v215[i1], v214[i1 * 8]);
  }
  for (i2 = 0; i2 != -8; i2 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v220[i2 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v221[i2], v220[i2 * 8]);
  }
  for (i3 = 0; i3 != -8; i3 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v226[i3 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v227[i3], v226[i3 * 8]);
  }
  for (i4 = 0; i4 != -8; i4 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v232[i4 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v233[i4], v232[i4 * 8]);
  }
  for (i5 = 0; i5 != -8; i5 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v238[i5 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v239[i5], v238[i5 * 8]);
  }
  for (i6 = 0; i6 != -8; i6 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v244[i6 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v245[i6], v244[i6 * 8]);
  }
  for (i7 = 0; i7 != -8; i7 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v250[i7 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v251[i7], v250[i7 * 8]);
  }
  for (i8 = 0; i8 != -8; i8 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v256[i8 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v257[i8], v256[i8 * 8]);
  }
  for (i9 = 0; i9 != -8; i9 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v262[i9 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v263[i9], v262[i9 * 8]);
  }
  for (i10 = 0; i10 != -8; i10 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v268[i10 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v269[i10], v268[i10 * 8]);
  }
  for (i11 = 0; i11 != -8; i11 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v274[i11 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v275[i11], v274[i11 * 8]);
  }
  for (i12 = 0; i12 != -64; i12 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v369[i12]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v369[i12 + 8], v369[i12]);
  }
  v95 = 44;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v340[v95 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v341[v95], v340[v95 * 8]);
    v95 -= 4;
  }
  while (v95 * 8);
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v280[v95 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v281[v95], v280[v95 * 8]);
    v95 -= 4;
  }
  while (v95 != -8);
  for (i13 = 0; i13 != -8; i13 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v286[i13 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v287[i13], v286[i13 * 8]);
  }
  for (i14 = 0; i14 != -8; i14 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v292[i14 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v293[i14], v292[i14 * 8]);
  }
  for (i15 = 0; i15 != -8; i15 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v298[i15 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v299[i15], v298[i15 * 8]);
  }
  for (i16 = 0; i16 != -8; i16 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v304[i16 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v305[i16], v304[i16 * 8]);
  }
  for (i17 = 0; i17 != -8; i17 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v310[i17 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v311[i17], v310[i17 * 8]);
  }
  for (i18 = 0; i18 != -8; i18 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v316[i18 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v317[i18], v316[i18 * 8]);
  }
  for (i19 = 0; i19 != -8; i19 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v322[i19 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v323[i19], v322[i19 * 8]);
  }
  for (i20 = 0; i20 != -8; i20 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v328[i20 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v329[i20], v328[i20 * 8]);
  }
  for (i21 = 0; i21 != -8; i21 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v334[i21 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v335[i21], v334[i21 * 8]);
  }
  for (i22 = 0; i22 != -8; i22 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v340[i22 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v341[i22], v340[i22 * 8]);
  }
  for (i23 = 0; i23 != -64; i23 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v441[i23]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v441[i23 + 8], v441[i23]);
  }
  for (i24 = 0; i24 != -256; i24 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v435[i24]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v435[i24 + 8], v435[i24]);
  }
  for (i25 = 0; i25 != -8; i25 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v375[i25 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v376[i25], v375[i25 * 8]);
  }
  for (i26 = 0; i26 != -8; i26 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v381[i26 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v382[i26], v381[i26 * 8]);
  }
  for (i27 = 0; i27 != -8; i27 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v387[i27 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v388[i27], v387[i27 * 8]);
  }
  for (i28 = 0; i28 != -8; i28 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v393[i28 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v394[i28], v393[i28 * 8]);
  }
  for (i29 = 0; i29 != -8; i29 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v399[i29 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v400[i29], v399[i29 * 8]);
  }
  for (i30 = 0; i30 != -8; i30 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v405[i30 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v406[i30], v405[i30 * 8]);
  }
  for (i31 = 0; i31 != -8; i31 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v411[i31 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v412[i31], v411[i31 * 8]);
  }
  for (i32 = 0; i32 != -8; i32 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v417[i32 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v418[i32], v417[i32 * 8]);
  }
  for (i33 = 0; i33 != -8; i33 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v447[i33 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v448[i33], v447[i33 * 8]);
  }
  for (i34 = 0; i34 != -8; i34 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v453[i34 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v454[i34], v453[i34 * 8]);
  }
  for (i35 = 0; i35 != -64; i35 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v544[i35]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v544[i35 + 8], v544[i35]);
  }
  v119 = 44;
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v517[v119 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v518[v119], v517[v119 * 8]);
    v119 -= 4;
  }
  while (v119 * 8);
  do
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v459[v119 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v460[v119], v459[v119 * 8]);
    v119 -= 4;
  }
  while (v119 != -8);
  for (i36 = 0; i36 != -8; i36 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v465[i36 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v466[i36], v465[i36 * 8]);
  }
  for (i37 = 0; i37 != -8; i37 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v471[i37 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v472[i37], v471[i37 * 8]);
  }
  for (i38 = 0; i38 != -8; i38 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v477[i38 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v478[i38], v477[i38 * 8]);
  }
  for (i39 = 0; i39 != -8; i39 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v483[i39 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v484[i39], v483[i39 * 8]);
  }
  for (i40 = 0; i40 != -8; i40 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v489[i40 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v490[i40], v489[i40 * 8]);
  }
  for (i41 = 0; i41 != -8; i41 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v495[i41 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v496[i41], v495[i41 * 8]);
  }
  for (i42 = 0; i42 != -8; i42 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v501[i42 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v502[i42], v501[i42 * 8]);
  }
  for (i43 = 0; i43 != -8; i43 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v507[i43 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v508[i43], v507[i43 * 8]);
  }
  for (i44 = 0; i44 != -8; i44 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v512[i44 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v513[i44], v512[i44 * 8]);
  }
  for (i45 = 0; i45 != -8; i45 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v517[i45 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v518[i45], v517[i45 * 8]);
  }
  for (i46 = 0; i46 != -64; i46 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v606[i46]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v606[i46 + 8], v606[i46]);
  }
  for (i47 = 0; i47 != -256; i47 -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v601[i47]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v601[i47 + 8], v601[i47]);
  }
  for (i48 = 0; i48 != -8; i48 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v549[i48 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v550[i48], v549[i48 * 8]);
  }
  for (i49 = 0; i49 != -8; i49 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v554[i49 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v555[i49], v554[i49 * 8]);
  }
  for (i50 = 0; i50 != -8; i50 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v559[i50 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v560[i50], v559[i50 * 8]);
  }
  for (i51 = 0; i51 != -8; i51 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v564[i51 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v565[i51], v564[i51 * 8]);
  }
  for (i52 = 0; i52 != -8; i52 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v569[i52 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v570[i52], v569[i52 * 8]);
  }
  for (i53 = 0; i53 != -8; i53 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v574[i53 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v575[i53], v574[i53 * 8]);
  }
  for (i54 = 0; i54 != -8; i54 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v579[i54 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v580[i54], v579[i54 * 8]);
  }
  for (i55 = 0; i55 != -8; i55 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v584[i55 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v585[i55], v584[i55 * 8]);
  }
  for (i56 = 0; i56 != -8; i56 -= 4)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v611[i56 * 8]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v612[i56], v611[i56 * 8]);
  }
  if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v144.__r_.__value_.__l.__data_);
  return 1;
}

