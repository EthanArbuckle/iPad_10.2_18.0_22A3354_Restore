uint64_t HrlcEncodeFrame(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[12];
  uint64_t v19;

  v4 = *(_DWORD *)(a1 + 32);
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  v5 = setjmp((int *)v18 + 1);
  if (!(_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 56);
    *((_QWORD *)&v12 + 1) = v6 + v7;
    HIDWORD(v11) = *(_DWORD *)(a1 + 8);
    if (v7 >= 0x10)
    {
      v8 = v6;
      *(_DWORD *)v6 = 1399614808;
      *(_DWORD *)(v6 + 4) = v4;
      *(_WORD *)(v6 + 8) = *(_DWORD *)a1;
      *(_WORD *)(v6 + 10) = *(_DWORD *)(a1 + 4);
      *(_WORD *)(v6 + 12) = 0;
      *(_WORD *)(v6 + 14) = *(_DWORD *)(a1 + 8356);
      v9 = v6 + 16;
      *(_QWORD *)&v12 = v6 + 16;
      *(_QWORD *)&v16 = a1;
      DWORD1(v13) = 0;
      BYTE8(v13) = 0;
      if (*(_DWORD *)(a1 + 120))
      {
        v5 = 0;
      }
      else
      {
        HIDWORD(v17) = 0;
        LODWORD(v18[0]) = 0;
        if (v4 == 1278226488)
        {
          v5 = SlimHrlcEncode_C(a1, (uint64_t)&v11);
          v9 = v12;
          v8 = *(_QWORD *)(a1 + 88);
        }
        else
        {
          v5 = 4294951891;
        }
      }
      *a2 = v9 - v8;
    }
    else
    {
      return 4294951888;
    }
  }
  return v5;
}

uint64_t IntcEncodeFrame(__CVBuffer *a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[12];
  uint64_t v23;

  v6 = *(_DWORD *)(a2 + 32);
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  v7 = setjmp((int *)v22 + 1);
  if (!(_DWORD)v7)
  {
    v8 = *(_QWORD *)(a2 + 88);
    v9 = *(_QWORD *)(a2 + 56);
    *((_QWORD *)&v16 + 1) = v8 + v9;
    HIDWORD(v15) = *(_DWORD *)(a2 + 8);
    if (v9 >= 0x10)
    {
      v10 = v8;
      *(_DWORD *)v8 = 1399614808;
      *(_DWORD *)(v8 + 4) = v6;
      *(_WORD *)(v8 + 8) = *(_DWORD *)a2;
      *(_WORD *)(v8 + 10) = *(_DWORD *)(a2 + 4);
      *(_WORD *)(v8 + 12) = 0;
      v11 = v8 + 14;
      *(_QWORD *)&v16 = v11;
      *(_QWORD *)&v20 = a2;
      DWORD1(v17) = 0;
      BYTE8(v17) = 0;
      if (*(_DWORD *)(a2 + 120))
      {
        v12 = 0;
        v13 = v11;
      }
      else
      {
        HIDWORD(v21) = 0;
        LODWORD(v22[0]) = 0;
        v12 = CMPhotoInterchangeCompactEncode(a1, (unsigned int *)a2, (uint64_t)&v15);
        v13 = v16;
        v10 = *(_QWORD *)(a2 + 88);
      }
      *a3 = v13 - v10;
      return v12;
    }
    else
    {
      return 4294951888;
    }
  }
  return v7;
}

uint64_t SlimXEncodeFrame(unint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t BytesPerPixelForPixelFormat;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  float v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int i;
  unsigned int j;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int16 v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[12];
  uint64_t v131;

  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8352);
  v8 = *(_DWORD *)(a1 + 8360);
  v9 = *(unsigned int *)(a1 + 32);
  v131 = 0;
  memset(v130, 0, sizeof(v130));
  v128 = 0u;
  v129 = 0u;
  v126 = 0u;
  v127 = 0u;
  v124 = 0u;
  v125 = 0u;
  v123 = 0u;
  v10 = setjmp((int *)v130 + 1);
  if (!(_DWORD)v10)
  {
    v122 = a2;
    v119 = v5;
    v11 = *(_QWORD *)(a1 + 88);
    *((_QWORD *)&v124 + 1) = v11 + *(_QWORD *)(a1 + 56);
    HIDWORD(v123) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)v11 = 1399614808;
    *(_DWORD *)(v11 + 4) = v9;
    *(_WORD *)(v11 + 8) = *(_DWORD *)a1;
    *(_WORD *)(v11 + 10) = *(_DWORD *)(a1 + 4);
    *(_WORD *)(v11 + 12) = 0;
    *(_QWORD *)&v124 = v11 + 14;
    v128 = a1;
    BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v9);
    DWORD1(v125) = 0;
    BYTE8(v125) = 0;
    LODWORD(v129) = 64;
    DWORD1(v129) = v5;
    v13 = *(_DWORD *)(a1 + 120);
    v14 = v13;
    if (v13 <= 7)
    {
      if (v13)
        v15 = 10 - v13;
      else
        v15 = 0;
      HIDWORD(v129) = v14;
      LODWORD(v130[0]) = v15;
LABEL_10:
      v121 = v4;
      v16 = v6;
      if ((int)v9 <= 1651926375)
      {
        if ((int)v9 > 1278226535)
        {
          if ((int)v9 <= 1647719527)
          {
            if ((int)v9 > 1278226741)
            {
              if ((_DWORD)v9 != 1278226742)
              {
                if ((_DWORD)v9 == 1380411457)
                {
                  v10 = 4294951892;
                  if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                    || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
                  {
                    goto LABEL_377;
                  }
                  LODWORD(v125) = 12;
                  if (v7 == -1)
                  {
                    v55 = 0;
                  }
                  else
                  {
                    if (v7 > 0xF)
                      goto LABEL_271;
                    v55 = v7;
                  }
                  *(_WORD *)(v11 + 12) = v55;
                  DWORD1(v125) = v55;
                  if (v6 >= 1)
                  {
                    v92 = 0;
                    while (1)
                    {
                      encodeStripStart((uint64_t)&v123, v92);
                      if (v119 >= 1)
                        break;
LABEL_309:
                      v92 += 4;
                      v10 = 0;
                      if (v92 >= v6)
                        goto LABEL_377;
                    }
                    v93 = 0;
                    v94 = 0;
                    while (1)
                    {
                      *(_QWORD *)&v123 = v4 + (v94 & 0xFFFFFFE0) + (HIDWORD(v123) * v92);
                      v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                      if ((_DWORD)v27)
                        goto LABEL_375;
                      v94 += 32;
                      v93 += 4;
                      if (v119 <= v93)
                        goto LABEL_309;
                    }
                  }
                  goto LABEL_376;
                }
                v10 = 4294951891;
                if ((_DWORD)v9 != 1647589490)
                  goto LABEL_377;
                v10 = 4294951892;
                if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                  || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
                {
                  goto LABEL_377;
                }
                LODWORD(v125) = 19;
                if (v7 == -1)
                {
                  v21 = 0;
                }
                else
                {
                  if (v7 > 0xF)
                    goto LABEL_271;
                  v21 = v7;
                }
                *(_WORD *)(v11 + 12) = v21;
                DWORD1(v125) = v21;
                if (v6 >= 1)
                {
                  v86 = 0;
                  while (1)
                  {
                    encodeStripStart((uint64_t)&v123, v86);
                    if (v119 >= 1)
                      break;
LABEL_291:
                    v86 += 4;
                    v10 = 0;
                    if (v86 >= v6)
                      goto LABEL_377;
                  }
                  v87 = 0;
                  v88 = 0;
                  while (1)
                  {
                    *(_QWORD *)&v123 = v4 + (v88 & 0xFFFFFFF8) + (HIDWORD(v123) * v86);
                    v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                    if ((_DWORD)v27)
                      goto LABEL_375;
                    v88 += 24;
                    v87 += 4;
                    if (v119 <= v87)
                      goto LABEL_291;
                  }
                }
                goto LABEL_376;
              }
            }
            else if ((_DWORD)v9 != 1278226536)
            {
              if ((_DWORD)v9 != 1278226736)
              {
                v17 = 1278226738;
                goto LABEL_97;
              }
LABEL_98:
              v32 = v11;
              v33 = BytesPerPixelForPixelFormat;
              if (CMPhotoGetBitDepthForPixelFormat(v9) == 8)
                LOWORD(v34) = 0;
              else
                v34 = 16 - CMPhotoGetBitDepthForPixelFormat(v9);
              BytesPerPixelForPixelFormat = v33;
              if (v7 == -1)
              {
                v35 = v34;
                goto LABEL_105;
              }
              if (v7 <= 0xF)
              {
                v35 = v7;
LABEL_105:
                *(_WORD *)(v32 + 12) = v35;
                DWORD1(v125) = v35;
                goto LABEL_106;
              }
LABEL_271:
              v10 = 4294951896;
              goto LABEL_377;
            }
            goto LABEL_118;
          }
          if ((int)v9 <= 1651519797)
          {
            if ((_DWORD)v9 == 1647719528)
            {
              v10 = 4294951892;
              if ((int)((v119 + 7) & 0xFFFFFFF8) > (int)(((unint64_t)HIDWORD(v123) >> 1)
                                                        / BytesPerPixelForPixelFormat)
                || (int)((v6 + 7) & 0xFFFFFFF8) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              if ((v8 & 0xFFFFFFFE) == 6)
              {
                LODWORD(v125) = 23;
                if (v7 == -1)
                {
                  v54 = 0;
                }
                else
                {
                  if (v7 > 0xF)
                    goto LABEL_271;
                  v54 = v7;
                }
                *(_WORD *)(v11 + 12) = v54;
                DWORD1(v125) = v54;
                if (v6 >= 1)
                {
                  v103 = 16 * BytesPerPixelForPixelFormat;
                  v104 = 0;
                  v105 = 0;
                  while (1)
                  {
                    encodeStripStart((uint64_t)&v123, v104);
                    if (v119 >= 1)
                      break;
LABEL_339:
                    v104 += 8;
                    v105 += 4;
                    v10 = 0;
                    if (v104 >= v6)
                      goto LABEL_377;
                  }
                  v106 = 0;
                  v107 = v121;
                  while (1)
                  {
                    *(_QWORD *)&v123 = v107 + (v105 * HIDWORD(v123));
                    v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                    if ((_DWORD)v27)
                      goto LABEL_375;
                    v107 += v103;
                    v106 += 8;
                    if (v119 <= v106)
                      goto LABEL_339;
                  }
                }
                goto LABEL_376;
              }
              goto LABEL_119;
            }
            if ((_DWORD)v9 != 1650942776)
            {
              v20 = 1650943796;
              goto LABEL_65;
            }
            goto LABEL_71;
          }
          if ((_DWORD)v9 == 1651519798 || (_DWORD)v9 == 1651847472)
            goto LABEL_128;
          v31 = 1651925816;
          goto LABEL_127;
        }
        if ((int)v9 > 875704949)
        {
          if ((int)v9 <= 1111970368)
          {
            if ((_DWORD)v9 != 875704950 && (_DWORD)v9 != 875836518)
            {
              v18 = 875836534;
              goto LABEL_46;
            }
            goto LABEL_106;
          }
          v28 = v119;
          if ((_DWORD)v9 == 1111970369)
          {
            v10 = 4294951892;
            if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
              || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
            {
              goto LABEL_377;
            }
            LODWORD(v125) = 6;
            if (v7 == -1)
            {
              v56 = 0;
            }
            else
            {
              if (v7 > 0xF)
                goto LABEL_271;
              v56 = v7;
            }
            *(_WORD *)(v11 + 12) = v56;
            DWORD1(v125) = v56;
            if (v6 >= 1)
            {
              v95 = 0;
              while (1)
              {
                encodeStripStart((uint64_t)&v123, v95);
                if (v119 >= 1)
                  break;
LABEL_318:
                v95 += 4;
                v10 = 0;
                if (v95 >= v6)
                  goto LABEL_377;
              }
              v96 = 0;
              v97 = 0;
              while (1)
              {
                *(_QWORD *)&v123 = v4 + (v97 & 0xFFFFFFF0) + (HIDWORD(v123) * v95);
                v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                if ((_DWORD)v27)
                  goto LABEL_375;
                v97 += 16;
                v96 += 4;
                if (v119 <= v96)
                  goto LABEL_318;
              }
            }
            goto LABEL_376;
          }
          v29 = 1.0;
          if ((_DWORD)v9 == 1278226488)
            goto LABEL_110;
          v10 = 4294951891;
          if ((_DWORD)v9 != 1278226534)
            goto LABEL_377;
LABEL_84:
          if (!v14)
          {
            while ((v6 & ~(v6 >> 31)) != v14)
            {
              *(_QWORD *)&v123 = v4 + HIDWORD(v123) * v14;
              v30 = v14 + 1;
              v10 = SlimXEncodeF32Row((unsigned int **)&v123, v6 - 1 == v14);
              v14 = v30;
              if ((_DWORD)v10)
                goto LABEL_377;
            }
            goto LABEL_376;
          }
          goto LABEL_119;
        }
        if ((int)v9 > 875704421)
        {
          if ((_DWORD)v9 != 875704422 && (_DWORD)v9 != 875704438)
          {
            v18 = 875704934;
LABEL_46:
            v10 = 4294951891;
            if ((_DWORD)v9 != v18)
              goto LABEL_377;
          }
LABEL_106:
          if ((v9 & 0xFFFFFFFD) == 0x4C303130)
            v29 = 1.0;
          else
            v29 = 0.8;
          v28 = v119;
LABEL_110:
          v10 = 4294951892;
          if ((int)((v28 + 15) & 0xFFFFFFF0) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
            || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
          {
            goto LABEL_377;
          }
          v120 = BytesPerPixelForPixelFormat;
          if (CMPhotoGetBitDepthForPixelFormat(v9) == 8)
          {
            LODWORD(v125) = 0;
          }
          else
          {
            if (CMPhotoGetBitDepthForPixelFormat(v9) == 10)
            {
              v36 = 10;
            }
            else if ((_DWORD)v9 == 1751527984)
            {
              v36 = 15;
            }
            else
            {
              v36 = 24;
            }
            LODWORD(v125) = v36;
          }
          if (v6 >= 1)
          {
            v57 = 0;
            while (1)
            {
              encodeStripStart((uint64_t)&v123, (int)(float)(v29 * (float)v57));
              if (v119 >= 1)
                break;
LABEL_199:
              v57 += 4;
              if (v57 >= v16)
                goto LABEL_200;
            }
            v58 = 0;
            v59 = v4;
            while (1)
            {
              *(_QWORD *)&v123 = v59 + (v57 * HIDWORD(v123));
              v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
              if ((_DWORD)v27)
                goto LABEL_375;
              v59 += 16 * v120;
              v58 += 16;
              if (v119 <= v58)
                goto LABEL_199;
            }
          }
LABEL_200:
          v10 = 0;
          if ((int)v9 <= 1278226735)
          {
            if ((v9 - 1278226488) <= 0x30
              && ((1 << (v9 - 56)) & 0x1400000000001) != 0)
            {
              goto LABEL_377;
            }
            v60 = 825437747;
          }
          else if ((int)v9 > 1717856626)
          {
            if ((int)v9 > 1751411058)
              v60 = 1932996149;
            else
              v60 = 1751410032;
          }
          else
          {
            if ((v9 - 1278226736) <= 6 && ((1 << (v9 - 48)) & 0x45) != 0)
              goto LABEL_377;
            v60 = 1717855600;
          }
          if ((_DWORD)v9 != v60)
          {
            v77 = *(_QWORD *)(a1 + 72);
            HIDWORD(v123) = *(_DWORD *)(a1 + 12);
            if (BYTE8(v129))
              HIDWORD(v129) = 0;
            if (CMPhotoGetBitDepthForPixelFormat(v9) == 8)
            {
              v78 = 1;
            }
            else
            {
              if (CMPhotoGetBitDepthForPixelFormat(v9) != 10)
              {
                v98 = v120;
                v99 = v119;
                if ((_DWORD)v9 == 1751527984)
                {
                  LODWORD(v125) = 16;
                  goto LABEL_347;
                }
                LODWORD(v125) = 25;
LABEL_327:
                v100 = 2;
                v101 = 1;
                if ((int)v9 > 1952854577)
                {
                  if ((int)v9 > 2016686641)
                  {
                    if ((int)v9 > 2019963441)
                    {
                      if ((_DWORD)v9 == 2019963956)
                        goto LABEL_367;
                      v102 = 2019963442;
LABEL_365:
                      if ((_DWORD)v9 == v102)
                        goto LABEL_366;
LABEL_347:
                      v100 = 1;
                      v101 = 2;
                      goto LABEL_367;
                    }
                    if ((_DWORD)v9 == 2016686642)
                    {
LABEL_366:
                      v100 = 1;
                      v101 = 1;
LABEL_367:
                      v109 = v16 / v101;
                      if (v16 / v101 >= 1)
                      {
                        v110 = v77;
                        v118 = 41 * v16;
                        v111 = v101 | (8 * v101);
                        v112 = v100 * v99;
                        v113 = 16 * v98;
                        v114 = 0;
                        while (1)
                        {
                          encodeStripStart((uint64_t)&v123, (v118 + v111 * v114) / 50);
                          if (v112 >= 1)
                            break;
LABEL_373:
                          v114 += 4;
                          v10 = 0;
                          if (v114 >= v109)
                            goto LABEL_377;
                        }
                        v115 = 0;
                        v116 = v110;
                        while (1)
                        {
                          *(_QWORD *)&v123 = v116 + (v114 * HIDWORD(v123));
                          v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                          if ((_DWORD)v27)
                            break;
                          v116 += v113;
                          v115 += 16;
                          if (v112 <= v115)
                            goto LABEL_373;
                        }
LABEL_375:
                        v10 = v27;
                        goto LABEL_377;
                      }
LABEL_376:
                      v10 = 0;
                      goto LABEL_377;
                    }
                    v108 = 2016687156;
                  }
                  else if ((int)v9 > 1953903153)
                  {
                    if ((_DWORD)v9 == 1953903154)
                      goto LABEL_366;
                    v108 = 1953903668;
                  }
                  else
                  {
                    if ((_DWORD)v9 == 1952854578)
                      goto LABEL_366;
                    v108 = 1952855092;
                  }
                }
                else if ((int)v9 > 1936077361)
                {
                  if ((int)v9 > 1937125937)
                  {
                    if ((_DWORD)v9 == 1937125938)
                      goto LABEL_366;
                    v108 = 1937126452;
                  }
                  else
                  {
                    if ((_DWORD)v9 == 1936077362)
                      goto LABEL_366;
                    v108 = 1936077876;
                  }
                }
                else
                {
                  if ((int)v9 <= 875836517)
                  {
                    if ((_DWORD)v9 != 875704934)
                    {
                      v102 = 875704950;
                      goto LABEL_365;
                    }
                    goto LABEL_366;
                  }
                  if ((_DWORD)v9 == 875836518)
                    goto LABEL_367;
                  v108 = 875836534;
                }
                if ((_DWORD)v9 == v108)
                  goto LABEL_367;
                goto LABEL_347;
              }
              v78 = 11;
            }
            LODWORD(v125) = v78;
            v98 = v120;
            v99 = v119;
            goto LABEL_327;
          }
LABEL_377:
          *v122 = v124 - *(_QWORD *)(a1 + 88);
          return v10;
        }
        if ((_DWORD)v9 != 825306677)
        {
          v10 = 4294951891;
          if ((_DWORD)v9 != 825437747)
            goto LABEL_377;
        }
LABEL_118:
        if (!v14)
        {
          v10 = 4294951892;
          if ((int)((v119 + 15) & 0xFFFFFFF0) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
            || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
          {
            goto LABEL_377;
          }
          LODWORD(v125) = 24;
          if (v7 == -1)
          {
            *(_WORD *)(v11 + 12) = 4;
            DWORD1(v125) = 4;
            BYTE8(v125) = 1;
          }
          else
          {
            if (v7 > 0xF)
              goto LABEL_271;
            *(_WORD *)(v11 + 12) = v7;
            DWORD1(v125) = v7;
          }
          if (v6 >= 1)
          {
            v69 = 0;
            v70 = v4;
            while (1)
            {
              v71 = 0;
              while (1)
              {
                v72 = v11;
                v73 = v69;
                encodeStripStart((uint64_t)&v123, v71);
                v69 = v73;
                if (v119 >= 1)
                  break;
LABEL_251:
                v71 += 4;
                v10 = v69;
                v11 = v72;
                if (v71 >= v16)
                  goto LABEL_377;
              }
              v74 = 0;
              v75 = v70;
              while (1)
              {
                *(_QWORD *)&v123 = v75 + (v71 * HIDWORD(v123));
                v76 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                if ((_DWORD)v76)
                  break;
                v75 += 32;
                v74 += 16;
                if (v119 <= v74)
                {
                  v69 = 0;
                  goto LABEL_251;
                }
              }
              v10 = v76;
              if ((_DWORD)v76 != -15409 || !BYTE8(v125))
                goto LABEL_377;
              v11 = v72;
              v70 = *(_QWORD *)(a1 + 64);
              *(_QWORD *)&v124 = *(_QWORD *)(a1 + 88) + 14;
              DWORD1(v125) = 0;
              *(_WORD *)(v72 + 12) = 0;
              BYTE8(v125) = 0;
              v69 = 4294951887;
            }
          }
          goto LABEL_376;
        }
LABEL_119:
        v10 = 4294951891;
        goto LABEL_377;
      }
      if ((int)v9 > 1815162993)
      {
        if ((int)v9 <= 1936077359)
        {
          if ((int)v9 > 1885745711)
          {
            if ((_DWORD)v9 != 1885745712)
            {
              if ((_DWORD)v9 != 1919378232)
              {
                v20 = 1919379252;
LABEL_65:
                v10 = 4294951891;
                if ((_DWORD)v9 != v20)
                  goto LABEL_377;
LABEL_66:
                v10 = 4294951892;
                if ((int)((v119 + 7) & 0xFFFFFFF8) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                  || (int)((v6 + 7) & 0xFFFFFFF8) > v6 + *(_DWORD *)(a1 + 24))
                {
                  goto LABEL_377;
                }
                LODWORD(v125) = 17;
                if (v7 == -1)
                {
                  v22 = 4;
                }
                else
                {
                  if (v7 > 0xF)
                    goto LABEL_271;
                  v22 = v7;
                }
                *(_WORD *)(v11 + 12) = v22;
                DWORD1(v125) = v22;
                if (v6 >= 1)
                {
                  v61 = 0;
                  while (1)
                  {
                    encodeStripStart((uint64_t)&v123, v61);
                    if (v119 >= 1)
                      break;
LABEL_217:
                    v61 += 8;
                    v10 = 0;
                    if (v61 >= v6)
                      goto LABEL_377;
                  }
                  v62 = 0;
                  v63 = v121;
                  while (1)
                  {
                    *(_QWORD *)&v123 = v63 + (v61 * HIDWORD(v123));
                    v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                    if ((_DWORD)v27)
                      goto LABEL_375;
                    v63 += 16;
                    v62 += 8;
                    if (v119 <= v62)
                      goto LABEL_217;
                  }
                }
                goto LABEL_376;
              }
LABEL_71:
              v10 = 4294951892;
              if ((int)((v119 + 7) & 0xFFFFFFF8) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                || (int)((v6 + 7) & 0xFFFFFFF8) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              *(_QWORD *)&v125 = 2;
              *(_WORD *)(v11 + 12) = 0;
              if (v6 >= 1)
              {
                v23 = 0;
                v24 = 8 * BytesPerPixelForPixelFormat;
                while (1)
                {
                  encodeStripStart((uint64_t)&v123, v23);
                  if (v119 >= 1)
                    break;
LABEL_79:
                  v23 += 8;
                  v10 = 0;
                  if (v23 >= v6)
                    goto LABEL_377;
                }
                v25 = 0;
                v26 = v121;
                while (1)
                {
                  *(_QWORD *)&v123 = v26 + (v23 * HIDWORD(v123));
                  v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                  if ((_DWORD)v27)
                    goto LABEL_375;
                  v26 += v24;
                  v25 += 8;
                  if (v119 <= v25)
                    goto LABEL_79;
                }
              }
              goto LABEL_376;
            }
          }
          else
          {
            if ((_DWORD)v9 == 1815162994)
            {
              v10 = 4294951892;
              if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              *(_QWORD *)&v125 = 9;
              *(_WORD *)(v11 + 12) = 0;
              if (v6 >= 1)
              {
                v50 = 0;
                while (1)
                {
                  encodeStripStart((uint64_t)&v123, v50);
                  if (v119 >= 1)
                    break;
LABEL_167:
                  v50 += 4;
                  v10 = 0;
                  if (v50 >= v6)
                    goto LABEL_377;
                }
                v51 = 0;
                v52 = v121;
                while (1)
                {
                  *(_QWORD *)&v123 = v52 + (v50 * HIDWORD(v123));
                  v27 = SlimXEncodeBlocks_C((uint64_t)&v123);
                  if ((_DWORD)v27)
                    goto LABEL_375;
                  v52 += 16;
                  v51 += 4;
                  if (v119 <= v51)
                    goto LABEL_167;
                }
              }
              goto LABEL_376;
            }
            if ((_DWORD)v9 == 1815491698)
            {
              v10 = 4294951892;
              if ((int)((v119 + 3) & 0xFFFFFFFC) > (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
              {
                goto LABEL_377;
              }
              LODWORD(v125) = 18;
              if (v7 == -1)
              {
                v53 = 0;
              }
              else
              {
                if (v7 > 0xF)
                  goto LABEL_271;
                v53 = v7;
              }
              *(_WORD *)(v11 + 12) = v53;
              DWORD1(v125) = v53;
              if (v6 >= 1)
              {
                v89 = 0;
                while (1)
                {
                  encodeStripStart((uint64_t)&v123, v89);
                  if (v119 >= 1)
                    break;
LABEL_300:
                  v89 += 4;
                  v10 = 0;
                  if (v89 >= v6)
                    goto LABEL_377;
                }
                v90 = 0;
                v91 = 0;
                while (1)
                {
                  *(_QWORD *)&v123 = v4 + (v91 & 0xFFFFFFE0) + (HIDWORD(v123) * v89);
                  v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                  if ((_DWORD)v27)
                    goto LABEL_375;
                  v91 += 32;
                  v90 += 4;
                  if (v119 <= v90)
                    goto LABEL_300;
                }
              }
              goto LABEL_376;
            }
            v10 = 4294951891;
            if ((_DWORD)v9 != 1882468912)
              goto LABEL_377;
          }
          v10 = 4294951892;
          if ((int)((v119 + 15) & 0xFFFFFFF0) > SHIDWORD(v123)
            || (int)((v6 + 3) & 0xFFFFFFFC) > v6 + *(_DWORD *)(a1 + 24))
          {
            goto LABEL_377;
          }
          LODWORD(v125) = 7;
          if (v6 >= 1)
          {
            for (i = 0; i < v6; i += 4)
            {
              encodeStripStart((uint64_t)&v123, 4 * i / 5u);
              if (v119 >= 1)
              {
                for (j = 0; (int)j < v119; j += 16)
                {
                  *(_QWORD *)&v123 = v4 + 4 * (j / 3) + (HIDWORD(v123) * i);
                  DWORD2(v123) = j % 3;
                  v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                  if ((_DWORD)v27)
                    goto LABEL_375;
                }
              }
            }
            v42 = *(_QWORD *)(a1 + 72);
            HIDWORD(v123) = *(_DWORD *)(a1 + 12);
            LODWORD(v125) = 8;
            if (v6 < 2)
              goto LABEL_376;
            v43 = 0;
            while (1)
            {
              encodeStripStart((uint64_t)&v123, (41 * v6 + 18 * v43) / 50);
              if (v119 >= 1)
                break;
LABEL_148:
              v43 += 4;
              v10 = 0;
              if (v43 >= v6 >> 1)
                goto LABEL_377;
            }
            v44 = 0;
            while (1)
            {
              *(_QWORD *)&v123 = v42 + 4 * (v44 / 3) + (HIDWORD(v123) * v43);
              DWORD2(v123) = v44 % 3;
              v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
              if ((_DWORD)v27)
                goto LABEL_375;
              v44 += 16;
              if ((int)v44 >= v119)
                goto LABEL_148;
            }
          }
          goto LABEL_376;
        }
        if ((int)v9 > 1953903151)
        {
          if ((_DWORD)v9 == 1953903152 || (_DWORD)v9 == 2019963440)
            goto LABEL_98;
          v17 = 2016686640;
        }
        else
        {
          if ((_DWORD)v9 == 1936077360 || (_DWORD)v9 == 1937125936)
            goto LABEL_98;
          v17 = 1952854576;
        }
        goto LABEL_97;
      }
      if ((int)v9 <= 1734505011)
      {
        if ((int)v9 <= 1717855599)
        {
          if ((_DWORD)v9 == 1651926376)
          {
LABEL_128:
            v10 = 4294951891;
            switch(v8)
            {
              case 0u:
              case 1u:
              case 2u:
              case 3u:
                v37 = 8;
                if ((int)v9 <= 1651925815)
                {
                  v49 = 20;
                  goto LABEL_227;
                }
                v38 = 2;
                if ((_DWORD)v9 == 1651925816)
                  goto LABEL_223;
                if ((_DWORD)v9 == 1651926376)
                {
                  v39 = 13;
                  goto LABEL_265;
                }
                goto LABEL_155;
              case 4u:
                v37 = 4;
                v47 = 16;
                if ((int)v9 > 1651925815)
                {
                  v38 = 0;
                  if ((_DWORD)v9 == 1651925816)
                    goto LABEL_224;
                  if ((_DWORD)v9 != 1651926376)
                  {
                    v45 = 16;
                    v46 = 4;
                    goto LABEL_156;
                  }
                  v39 = 15;
                  v68 = 4;
                  v37 = 16;
                  goto LABEL_266;
                }
                v49 = 24;
                if ((_DWORD)v9 != 1651519798)
                {
                  v66 = 16;
                  v67 = 4;
                  v45 = 16;
                  goto LABEL_229;
                }
                v66 = 16;
                goto LABEL_232;
              case 5u:
              case 8u:
                v37 = 8;
                if ((int)v9 > 1651925815)
                {
                  v38 = 3;
                  if ((_DWORD)v9 == 1651925816)
                  {
LABEL_223:
                    v47 = 8;
LABEL_224:
                    v48 = v119;
                  }
                  else
                  {
                    if ((_DWORD)v9 == 1651926376)
                    {
                      v39 = 14;
LABEL_265:
                      v68 = 8;
LABEL_266:
                      v48 = v119;
                      goto LABEL_267;
                    }
LABEL_155:
                    v45 = 8;
                    v46 = 8;
                    v47 = 8;
LABEL_156:
                    v48 = v119;
                    if ((_DWORD)v9 != 1652056888)
                      goto LABEL_234;
                  }
                  v64 = v37;
                  LODWORD(v125) = v38;
                  v37 = v47;
                  v65 = v64;
                  goto LABEL_239;
                }
                v49 = 22;
LABEL_227:
                if ((_DWORD)v9 == 1651519798)
                {
                  v66 = 8;
LABEL_232:
                  v67 = v37;
                  v48 = v119;
                }
                else
                {
                  v66 = 8;
                  v67 = 8;
                  v45 = 8;
LABEL_229:
                  v46 = v37;
                  v48 = v119;
                  if ((_DWORD)v9 != 1651847472)
                    goto LABEL_234;
                }
                LODWORD(v125) = v49;
                v45 = v66;
                v46 = v67;
LABEL_234:
                if ((_DWORD)v9 == 1651519798)
                {
                  v65 = v46;
                  v37 = v45;
                  if ((*(_BYTE *)(a1 + 8364) & 1) == 0)
                    goto LABEL_268;
                  v37 = 16;
                  if (v8 < 4)
                  {
                    v68 = 4;
                    v39 = 21;
LABEL_267:
                    LODWORD(v125) = v39;
                    v65 = v68;
                    goto LABEL_268;
                  }
                  v65 = v8;
                  if (v8 != 4)
                    goto LABEL_119;
LABEL_268:
                  if (v7 == -1)
                  {
                    v79 = 0;
                  }
                  else
                  {
                    if (v7 > 0xF)
                      goto LABEL_271;
                    v79 = v7;
                  }
                  *(_WORD *)(v11 + 12) = v79;
                  DWORD1(v125) = v79;
LABEL_274:
                  v80 = v65;
                  v10 = 4294951892;
                  if ((int)((v48 + v37 - 1) & -v37) <= (int)(HIDWORD(v123) / BytesPerPixelForPixelFormat)
                    && (int)((v6 + v80 - 1) & -v80) <= v6 + *(_DWORD *)(a1 + 24))
                  {
                    if (v6 < 1)
                      goto LABEL_376;
                    v81 = 0;
                    v82 = v37;
                    v83 = BytesPerPixelForPixelFormat * v37;
                    do
                    {
                      encodeStripStart((uint64_t)&v123, v81);
                      if (v119 >= 1)
                      {
                        v84 = 0;
                        v85 = v121;
                        do
                        {
                          *(_QWORD *)&v123 = v85 + (v81 * HIDWORD(v123));
                          v27 = SlimXEncodeBlocks_NEON((uint64_t *)&v123);
                          if ((_DWORD)v27)
                            goto LABEL_375;
                          v84 += v82;
                          v85 += v83;
                        }
                        while (v84 < v119);
                      }
                      v81 += v80;
                      v10 = 0;
                    }
                    while (v81 < v16);
                  }
                  goto LABEL_377;
                }
                v37 = v45;
                v65 = v46;
LABEL_239:
                if ((_DWORD)v9 == 1652056888 || (_DWORD)v9 == 1651925816)
                {
                  DWORD1(v125) = 0;
                  *(_WORD *)(v11 + 12) = 0;
                  goto LABEL_274;
                }
                goto LABEL_268;
              default:
                goto LABEL_377;
            }
          }
          v31 = 1652056888;
LABEL_127:
          v10 = 4294951891;
          if ((_DWORD)v9 != v31)
            goto LABEL_377;
          goto LABEL_128;
        }
        if ((_DWORD)v9 == 1717855600 || (_DWORD)v9 == 1717856627)
          goto LABEL_84;
        v19 = 1734501176;
      }
      else
      {
        if ((int)v9 > 1751410031)
        {
          if ((_DWORD)v9 == 1751410032 || (_DWORD)v9 == 1751411059)
            goto LABEL_118;
          v17 = 1751527984;
LABEL_97:
          v10 = 4294951891;
          if ((_DWORD)v9 != v17)
            goto LABEL_377;
          goto LABEL_98;
        }
        if ((_DWORD)v9 == 1734505012 || (_DWORD)v9 == 1735549492)
          goto LABEL_66;
        v19 = 1735549752;
      }
      v10 = 4294951891;
      if ((_DWORD)v9 != v19)
        goto LABEL_377;
      goto LABEL_71;
    }
    if (v13 == -1)
    {
      BYTE8(v129) = 1;
      goto LABEL_10;
    }
    return 4294951896;
  }
  return v10;
}

uint64_t encodeStripStart(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  float v4;
  unsigned int v5;
  float v6;
  float v7;
  int v9;
  int v10;
  _BYTE *v11;

  *(_OWORD *)(result + 58) = xmmword_1A828FEA0;
  *(_OWORD *)(result + 42) = xmmword_1A828FEA0;
  v2 = *(_DWORD *)(result + 108);
  if (*(_BYTE *)(result + 104))
  {
    v3 = *(_QWORD *)(result + 80);
    v4 = (double)(uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(v3 + 88)) * 100.0 / (double)*(uint64_t *)(v3 + 128);
    v5 = *(_DWORD *)(v3 + 4);
    v6 = (double)(a2 + 32) * 100.0 / (double)(v5 + 32);
    v7 = -400.0 / (double)v5;
    if ((float)(v6 + (float)(v7 * (float)(7 - v2))) >= v4)
    {
      v9 = (float)(v6 + (float)(v7 * (float)(9 - v2))) > v4 && v2 > 0;
      v2 -= v9;
    }
    else if (v2 < 7)
    {
      ++v2;
    }
  }
  v10 = 10 - v2;
  if (!v2)
    v10 = 0;
  *(_DWORD *)(result + 108) = v2;
  *(_DWORD *)(result + 112) = v10;
  if (v2 >= 1)
  {
    v11 = *(_BYTE **)(result + 16);
    *(_QWORD *)(result + 16) = v11 + 1;
    *v11 = v2 + 96;
  }
  return result;
}

uint64_t YZipDecodeFrame(uint64_t a1)
{
  uint64_t Format;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 17;
  if (a1
    && (unint64_t)(*(_QWORD *)(a1 + 40) - 3) >= 0xFFFFFFFFFFFFFFFELL
    && (*(_DWORD *)(a1 + 48) - 3) >= 0xFFFFFFFE)
  {
    Format = YZipEncodeFindFormat(a1, &v10);
    if ((_DWORD)Format)
      return Format;
    CMPhotoGetBitDepthForPixelFormat(*(unsigned int *)(a1 + 32));
    if (!yzip_codec_create())
      return 4294951895;
    v4 = yzip_image_create();
    if (!v4)
    {
      Format = 4294951895;
LABEL_24:
      yzip_codec_destroy();
      return Format;
    }
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = 0;
      do
      {
        yzip_image_set_plane_data();
        ++v6;
        v7 = *(_QWORD *)(a1 + 40);
      }
      while (v7 > v6);
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      if (v7)
      {
        v8 = 0;
        v9 = &v11;
        while (!yzip_image_get_plane_descriptor())
        {
          ++v8;
          v9 += 2;
          if (*(_QWORD *)(a1 + 40) <= v8)
            goto LABEL_20;
        }
        Format = 4294951893;
        goto LABEL_23;
      }
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
    }
LABEL_20:
    if (yzip_image_decode() == *((_QWORD *)&v13 + 1) + *((_QWORD *)&v11 + 1))
      Format = 0;
    else
      Format = 4294951889;
LABEL_23:
    MEMORY[0x1A85D1410](v5);
    goto LABEL_24;
  }
  return 4294951896;
}

uint64_t HrlcDecodeFrame(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD v6[12];
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 32);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v3 = setjmp((int *)v6 + 1);
  if (!(_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(a1 + 56) >= 0x10uLL
      && *(_DWORD *)v4 == 1399614808
      && *(_DWORD *)(v4 + 4) == v2
      && *(_DWORD *)a1 == *(unsigned __int16 *)(v4 + 8)
      && *(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(v4 + 10))
    {
      *(_DWORD *)(a1 + 8356) = *(unsigned __int16 *)(v4 + 14);
      if (v2 == 1278226488)
        return SlimHrlcDecode_C(a1);
      else
        return 4294951891;
    }
    else
    {
      return 4294951890;
    }
  }
  return v3;
}

uint64_t IntcDecodeFrame(__CVBuffer *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[12];
  uint64_t v17;

  v4 = *(_DWORD *)(a2 + 32);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  v5 = setjmp((int *)v16 + 1);
  if (!(_DWORD)v5)
  {
    v7 = *(_QWORD *)(a2 + 56);
    v6 = *(_QWORD *)(a2 + 64);
    *((_QWORD *)&v10 + 1) = v6 + v7;
    if (v7 >= 0xE
      && *(_DWORD *)v6 == 1399614808
      && *(_DWORD *)(v6 + 4) == v4
      && *(_DWORD *)a2 == *(unsigned __int16 *)(v6 + 8)
      && *(_DWORD *)(a2 + 4) == *(unsigned __int16 *)(v6 + 10))
    {
      *(_QWORD *)&v10 = v6 + 14;
      DWORD1(v11) = *(unsigned __int16 *)(v6 + 12);
      *(_QWORD *)&v14 = a2;
      return CMPhotoInterchangeCompactDecode(a1, (unsigned int *)a2, (uint64_t)&v9);
    }
    else
    {
      return 4294951890;
    }
  }
  return v5;
}

size_t UncompressedDecodeFrame(uint64_t a1, __CVBuffer *a2, uint64_t a3)
{
  size_t result;
  _BOOL4 IsPackedYUV;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  __int16 v34;
  double v35;

  v35 = 0.0;
  v34 = 0;
  v33 = 0;
  if (CMPhotoGetSizeInfoForPixelFormat(*(unsigned int *)(a1 + 32), &v35, &v34, (_BYTE *)&v34 + 1, &v33))
    return 4294951894;
  if (CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32))
    || CMPhotoPixelFormatIsPackedRAW(*(_DWORD *)(a1 + 32)))
  {
    IsPackedYUV = CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32));
    v8 = *(_DWORD *)a1;
    if (IsPackedYUV)
      v9 = (3
          * *(unsigned int *)(a1 + 4)
          * (unint64_t)((2 * ((2863311531u * (unint64_t)(v8 + 2)) >> 32)) & 0xFFFFFFFC)) >> 1;
    else
      v9 = CMPhotoAlignValue(5 * ((v8 + 3) >> 2), 0x140uLL) * *(unsigned int *)(a1 + 4);
  }
  else
  {
    v29 = *(_DWORD *)a1;
    v30 = *(_DWORD *)(a1 + 4);
    if (v34)
    {
      if ((_BYTE)v34)
        v31 = v29 + (v29 | 0xFFFFFFFE) + 2;
      else
        v31 = 2 * v29;
      if (HIBYTE(v34))
        v32 = (v30 + 1) >> 1;
      else
        v32 = *(_DWORD *)(a1 + 4);
      v9 = v33 * (v30 * (unint64_t)v29 + v32 * (unint64_t)v31);
    }
    else
    {
      v9 = (unint64_t)(v35 * (double)(v30 * v29));
    }
  }
  if (v9 != a3)
    return 4294951889;
  if (CVPixelBufferGetPlaneCount(a2))
  {
    result = CVPixelBufferGetPlaneCount(a2);
    v10 = result;
    if (!result)
      return result;
  }
  else
  {
    v10 = 1;
  }
  v11 = 0;
  do
  {
    if (v11 && !CMPhotoPixelFormatContainsRGB(*(_DWORD *)(a1 + 32)))
    {
      v15 = *(_DWORD *)a1;
      if ((_BYTE)v34)
        v12 = v15 + (v15 | 0xFFFFFFFE) + 2;
      else
        v12 = 2 * v15;
    }
    else
    {
      v12 = *(_DWORD *)a1;
    }
    v13 = v12;
    if (CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32)))
    {
      v14 = 4 * (((unint64_t)(v13 + 2) * (unsigned __int128)0x5555555555555556uLL) >> 64);
    }
    else if (CMPhotoPixelFormatIsPackedRAW(*(_DWORD *)(a1 + 32)))
    {
      v14 = CMPhotoAlignValue(5 * ((unint64_t)(v13 + 3) >> 2), 0x140uLL);
    }
    else
    {
      v14 = v33 * v13;
    }
    if (HIBYTE(v34))
      v16 = v11 == 0;
    else
      v16 = 1;
    v17 = *(_DWORD *)(a1 + 4);
    if (v16)
      v18 = v17;
    else
      v18 = (v17 + 1) >> 1;
    v19 = *(char **)(a1 + 8 * v11 + 88);
    v20 = *(unsigned int *)(a1 + 4 * v11 + 8);
    v21 = CMPhotoPixelFormatIsPackedYUV(*(_DWORD *)(a1 + 32));
    v23 = *(_DWORD *)a1;
    v22 = *(_DWORD *)(a1 + 4);
    if (v21)
      v24 = 4 * (_DWORD)v11 * v22 * ((v23 + 2) / 3);
    else
      v24 = v33 * v22 * (_DWORD)v11 * v23;
    v25 = *(_DWORD *)(a1 + 32) == 1647719528;
    v26 = v18 >> v25;
    if (v18 >> v25)
    {
      v27 = v14 << v25;
      v28 = (char *)(*(_QWORD *)(a1 + 64) + v24);
      do
      {
        memcpy(v19, v28, v27);
        v28 += v27;
        v19 += v20;
        --v26;
      }
      while (v26);
    }
    ++v11;
  }
  while (v11 != v10);
  return 0;
}

uint64_t SlimXDecodeFrame(unint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t BytesPerPixelForPixelFormat;
  uint64_t v9;
  uint32x4_t v10;
  uint32x4_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint32x4_t v108;
  uint32x4_t v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  __int128 v137;
  __int128 v138;
  _OWORD v139[3];
  __int128 v140;
  __int128 v141;
  _OWORD v142[12];
  uint64_t v143;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_DWORD *)a1;
  v6 = *(unsigned int *)(a1 + 4);
  v7 = *(unsigned int *)(a1 + 32);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(*(_DWORD *)(a1 + 32));
  v143 = 0;
  memset(v142, 0, sizeof(v142));
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  memset(v139, 0, sizeof(v139));
  v137 = 0u;
  v9 = setjmp((int *)v142 + 1);
  if ((_DWORD)v9)
    return v9;
  v13 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)&v138 + 1) = v12 + v13;
  if (v13 < 0xE
    || *(_DWORD *)v12 != 1399614808
    || *(_DWORD *)(v12 + 4) != (_DWORD)v7
    || *(_DWORD *)a1 != *(unsigned __int16 *)(v12 + 8)
    || *(_DWORD *)(a1 + 4) != *(unsigned __int16 *)(v12 + 10))
  {
    return 4294951890;
  }
  v135 = v4;
  *(_QWORD *)&v138 = v12 + 14;
  DWORD1(v139[0]) = *(unsigned __int16 *)(v12 + 12);
  v140 = a1;
  LODWORD(v141) = 64;
  DWORD1(v141) = v5;
  if ((int)v7 > 1651926375)
  {
    if ((int)v7 <= 1815162993)
    {
      if ((int)v7 <= 1734505011)
      {
        if ((int)v7 <= 1717855599)
        {
          if ((_DWORD)v7 == 1651926376)
          {
LABEL_122:
            v48 = *(unsigned int *)(a1 + 8);
            HIDWORD(v137) = *(_DWORD *)(a1 + 8);
            v49 = *(_DWORD *)(a1 + 8360);
            v50 = 8;
            v51 = 8;
            switch(v49)
            {
              case 0u:
              case 1u:
              case 2u:
              case 3u:
                if ((int)v7 <= 1651925815)
                {
                  v68 = 20;
                  goto LABEL_228;
                }
                v52 = 2;
                if ((_DWORD)v7 == 1651925816 || (_DWORD)v7 == 1652056888)
                  goto LABEL_151;
                v51 = 8;
                if ((_DWORD)v7 != 1651926376)
                  goto LABEL_235;
                v51 = 8;
                v53 = 13;
                goto LABEL_150;
              case 4u:
                v50 = 4;
                v51 = 16;
                if ((int)v7 <= 1651925815)
                {
                  v68 = 24;
                  if ((_DWORD)v7 != 1651519798)
                  {
                    v111 = 16;
                    v112 = 4;
                    goto LABEL_230;
                  }
                  v111 = 16;
                  goto LABEL_233;
                }
                if ((_DWORD)v7 == 1651925816 || (_DWORD)v7 == 1652056888)
                {
                  v53 = 0;
                  goto LABEL_152;
                }
                if ((_DWORD)v7 != 1651926376)
                  goto LABEL_235;
                v67 = 4;
                v53 = 15;
                goto LABEL_239;
              case 5u:
              case 8u:
                if ((int)v7 > 1651925815)
                {
                  v52 = 3;
                  if ((_DWORD)v7 == 1651925816 || (_DWORD)v7 == 1652056888)
                  {
LABEL_151:
                    v53 = v52;
                    v51 = 8;
LABEL_152:
                    v67 = v50;
                    goto LABEL_239;
                  }
                  v51 = 8;
                  if ((_DWORD)v7 == 1651926376)
                  {
                    v51 = 8;
                    v53 = 14;
LABEL_150:
                    v67 = 8;
                    goto LABEL_239;
                  }
LABEL_235:
                  if ((_DWORD)v7 == 1651519798)
                  {
                    v113 = v51;
                    v67 = v50;
                    if ((*(_BYTE *)(a1 + 8364) & 1) == 0)
                      goto LABEL_241;
                    v51 = 16;
                    if (v49 < 4)
                    {
                      v67 = 4;
                      v53 = 21;
LABEL_239:
                      LODWORD(v139[0]) = v53;
                      v113 = v51;
                      goto LABEL_241;
                    }
                    v67 = v49;
                    v113 = 16;
                    if (v49 != 4)
                      return 4294951891;
                  }
                  else
                  {
                    v113 = v51;
                    v67 = v50;
                  }
LABEL_241:
                  v9 = 4294951892;
                  if ((int)((v5 + v113 - 1) & -v113) <= (int)(v48 / BytesPerPixelForPixelFormat)
                    && ((v6 + v67 - 1) & -v67) <= (int)v6 + *(_DWORD *)(a1 + 24))
                  {
                    v136 = a2;
                    if ((int)v6 >= 1)
                    {
                      v114 = 0;
                      v115 = v113;
                      v116 = BytesPerPixelForPixelFormat * v113;
                      v134 = v6;
                      do
                      {
                        v117 = 5;
                        *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                        *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                        LODWORD(v142[0]) = 0;
                        HIDWORD(v141) = 0;
                        if (v5 >= 1)
                        {
                          v118 = v4;
                          v119 = 0;
                          do
                          {
                            v120 = v119;
                            *(_QWORD *)&v137 = v118 + (v114 * HIDWORD(v137));
                            SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v117, v10, v11);
                            v119 = v120 + v115;
                            v118 += v116;
                          }
                          while (v120 + v115 < v5);
                        }
                        v114 += v67;
                      }
                      while (v114 < v134);
                    }
                    goto LABEL_249;
                  }
                  return v9;
                }
                v68 = 22;
LABEL_228:
                if ((_DWORD)v7 == 1651519798)
                {
                  v111 = 8;
LABEL_233:
                  v112 = v50;
                }
                else
                {
                  v111 = 8;
                  v112 = 8;
                  v51 = 8;
LABEL_230:
                  if ((_DWORD)v7 != 1651847472)
                    goto LABEL_235;
                }
                LODWORD(v139[0]) = v68;
                v51 = v111;
                v50 = v112;
                goto LABEL_235;
              case 6u:
              case 7u:
                goto LABEL_235;
              default:
                v51 = 8;
                goto LABEL_235;
            }
          }
          v38 = 1652056888;
LABEL_121:
          v9 = 4294951891;
          if ((_DWORD)v7 != v38)
            return v9;
          goto LABEL_122;
        }
        if ((_DWORD)v7 == 1717855600 || (_DWORD)v7 == 1717856627)
          goto LABEL_88;
        v16 = 1734501176;
      }
      else
      {
        if ((int)v7 > 1751410031)
        {
          if ((_DWORD)v7 == 1751410032 || (_DWORD)v7 == 1751411059)
            goto LABEL_110;
          v14 = 1751527984;
          goto LABEL_101;
        }
        if ((_DWORD)v7 == 1734505012 || (_DWORD)v7 == 1735549492)
        {
LABEL_67:
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 17;
          v9 = 4294951892;
          if ((int)((v5 + 7) & 0xFFFFFFF8) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 7) & 0xFFFFFFF8) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              v24 = 0;
              do
              {
                v25 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  v26 = 0;
                  v27 = v135;
                  do
                  {
                    v28 = v27;
                    v29 = v26;
                    *(_QWORD *)&v137 = v27 + (v24 * HIDWORD(v137));
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v25, v10, v11);
                    v27 = v28 + 16;
                    v26 = v29 + 8;
                  }
                  while (v5 > v29 + 8);
                }
                v24 += 8;
              }
              while (v24 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
        v16 = 1735549752;
      }
      v9 = 4294951891;
      if ((_DWORD)v7 != v16)
        return v9;
      goto LABEL_76;
    }
    if ((int)v7 <= 1936077359)
    {
      if ((int)v7 > 1885745711)
      {
        if ((_DWORD)v7 != 1885745712)
        {
          if ((_DWORD)v7 != 1919378232)
          {
            v17 = 1919379252;
LABEL_66:
            v9 = 4294951891;
            if ((_DWORD)v7 != v17)
              return v9;
            goto LABEL_67;
          }
LABEL_76:
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 2;
          v9 = 4294951892;
          if ((int)((v5 + 7) & 0xFFFFFFF8) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 7) & 0xFFFFFFF8) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              v30 = 0;
              do
              {
                v31 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  v32 = 0;
                  v33 = v135;
                  do
                  {
                    v34 = v33;
                    v35 = v32;
                    *(_QWORD *)&v137 = v33 + (v30 * HIDWORD(v137));
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v31, v10, v11);
                    v33 = v34 + 8 * BytesPerPixelForPixelFormat;
                    v32 = v35 + 8;
                  }
                  while (v5 > v35 + 8);
                }
                v30 += 8;
              }
              while (v30 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
      }
      else
      {
        if ((_DWORD)v7 == 1815162994)
        {
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 9;
          v9 = 4294951892;
          if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              v69 = 0;
              do
              {
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  v70 = 0;
                  v71 = v135;
                  do
                  {
                    v72 = v71;
                    v73 = v70;
                    *(_QWORD *)&v137 = v71 + (v69 * HIDWORD(v137));
                    SlimXDecodeBlocks_C((uint64_t)&v137);
                    v71 = v72 + 16;
                    v70 = v73 + 4;
                  }
                  while (v5 > v73 + 4);
                }
                v69 += 4;
              }
              while (v69 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
        if ((_DWORD)v7 == 1815491698)
        {
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 18;
          v9 = 4294951892;
          if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              v74 = 0;
              do
              {
                v75 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  v76 = 0;
                  v77 = 0;
                  do
                  {
                    v78 = v77;
                    v79 = v76;
                    *(_QWORD *)&v137 = v4 + (HIDWORD(v137) * v74) + 2 * (v77 & 0xFFFFFFF0);
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v75, v10, v11);
                    v77 = v78 + 16;
                    v76 = v79 + 4;
                  }
                  while (v5 > v79 + 4);
                }
                v74 += 4;
              }
              while (v74 < (int)v6);
            }
            goto LABEL_249;
          }
          return v9;
        }
        v9 = 4294951891;
        if ((_DWORD)v7 != 1882468912)
          return v9;
      }
      HIDWORD(v137) = *(_DWORD *)(a1 + 8);
      v9 = 4294951892;
      if ((int)((v5 + 15) & 0xFFFFFFF0) <= SHIDWORD(v137) && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
      {
        v136 = a2;
        LODWORD(v139[0]) = 7;
        if ((int)v6 >= 1)
        {
          v54 = 0;
          do
          {
            v55 = 5;
            *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
            *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
            LODWORD(v142[0]) = 0;
            HIDWORD(v141) = 0;
            if (v5 >= 1)
            {
              v56 = 0;
              do
              {
                v57 = v56;
                v58 = v56 / 3;
                *(_QWORD *)&v137 = v4 + 4 * v58 + (HIDWORD(v137) * v54);
                DWORD2(v137) = v57 - 3 * v58;
                SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v55, v10, v11);
                v56 = v57 + 16;
              }
              while ((int)(v57 + 16) < v5);
            }
            v54 += 4;
          }
          while (v54 < (int)v6);
          v59 = *(_QWORD *)(a1 + 96);
          v60 = *(_DWORD *)(a1 + 12);
          LODWORD(v139[0]) = 8;
          HIDWORD(v137) = v60;
          if ((int)v6 >= 2)
          {
            v61 = (int)v6 >> 1;
            v62 = 0;
            do
            {
              v63 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                v64 = 0;
                do
                {
                  v65 = v64;
                  v66 = v64 / 3;
                  *(_QWORD *)&v137 = v59 + 4 * v66 + (HIDWORD(v137) * v62);
                  DWORD2(v137) = v65 - 3 * v66;
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v63, v10, v11);
                  v64 = v65 + 16;
                }
                while ((int)(v65 + 16) < v5);
              }
              v62 += 4;
            }
            while (v62 < v61);
          }
        }
        goto LABEL_249;
      }
      return v9;
    }
    if ((int)v7 > 1953903151)
    {
      if ((_DWORD)v7 == 1953903152 || (_DWORD)v7 == 2019963440)
        goto LABEL_102;
      v14 = 2016686640;
    }
    else
    {
      if ((_DWORD)v7 == 1936077360 || (_DWORD)v7 == 1937125936)
        goto LABEL_102;
      v14 = 1952854576;
    }
LABEL_101:
    v9 = 4294951891;
    if ((_DWORD)v7 != v14)
      return v9;
    goto LABEL_102;
  }
  if ((int)v7 <= 1278226535)
  {
    if ((int)v7 > 875704949)
    {
      if ((int)v7 <= 1111970368)
      {
        if ((_DWORD)v7 == 875704950 || (_DWORD)v7 == 875836518)
          goto LABEL_102;
        v14 = 875836534;
        goto LABEL_101;
      }
      if ((_DWORD)v7 == 1111970369)
      {
        HIDWORD(v137) = *(_DWORD *)(a1 + 8);
        LODWORD(v139[0]) = 6;
        v9 = 4294951892;
        if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
          && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
        {
          v136 = a2;
          if ((int)v6 >= 1)
          {
            v95 = 0;
            do
            {
              v96 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                v97 = 0;
                v98 = 0;
                do
                {
                  v99 = v98;
                  v100 = v97;
                  *(_QWORD *)&v137 = v4 + (v98 & 0xFFFFFFF0) + (HIDWORD(v137) * v95);
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v96, v10, v11);
                  v98 = v99 + 16;
                  v97 = v100 + 4;
                }
                while (v5 > v100 + 4);
              }
              v95 += 4;
            }
            while (v95 < (int)v6);
          }
          goto LABEL_249;
        }
        return v9;
      }
      if ((_DWORD)v7 == 1278226488)
        goto LABEL_102;
      v9 = 4294951891;
      if ((_DWORD)v7 != 1278226534)
        return v9;
LABEL_88:
      v136 = a2;
      HIDWORD(v137) = *(_DWORD *)(a1 + 8);
      if ((int)v6 >= 1)
      {
        v36 = 0;
        do
        {
          v37 = v36;
          *(_QWORD *)&v137 = v4 + (HIDWORD(v137) * v36);
          SlimXDecodeF32Row((uint64_t)&v137);
          v36 = v37 + 1;
        }
        while ((_DWORD)v6 != v37 + 1);
      }
      goto LABEL_249;
    }
    if ((int)v7 <= 875704421)
    {
      if ((_DWORD)v7 != 825306677)
      {
        v9 = 4294951891;
        if ((_DWORD)v7 != 825437747)
          return v9;
      }
      goto LABEL_110;
    }
    if ((_DWORD)v7 == 875704422 || (_DWORD)v7 == 875704438)
      goto LABEL_102;
    v14 = 875704934;
    goto LABEL_101;
  }
  if ((int)v7 > 1647719527)
  {
    if ((int)v7 <= 1651519797)
    {
      if ((_DWORD)v7 == 1647719528)
      {
        v80 = *(unsigned int *)(a1 + 8);
        HIDWORD(v137) = *(_DWORD *)(a1 + 8);
        if ((*(_DWORD *)(a1 + 8360) & 0xFFFFFFFE) != 6)
          return 4294951891;
        LODWORD(v139[0]) = 23;
        v9 = 4294951892;
        if ((int)((v5 + 7) & 0xFFFFFFF8) <= (int)((v80 >> 1) / BytesPerPixelForPixelFormat)
          && ((v6 + 7) & 0xFFFFFFF8) <= (int)v6 + *(_DWORD *)(a1 + 24))
        {
          v136 = a2;
          if ((int)v6 >= 1)
          {
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v6;
              v84 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                v85 = 0;
                v86 = v135;
                do
                {
                  v87 = v86;
                  v88 = v85;
                  *(_QWORD *)&v137 = v86 + (v82 * HIDWORD(v137));
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v84, v10, v11);
                  v86 = v87 + 16 * BytesPerPixelForPixelFormat;
                  v85 = v88 + 8;
                }
                while (v5 > v88 + 8);
              }
              v81 += 8;
              v82 += 4;
              v6 = v83;
            }
            while (v81 < (int)v83);
          }
          goto LABEL_249;
        }
        return v9;
      }
      if ((_DWORD)v7 != 1650942776)
      {
        v17 = 1650943796;
        goto LABEL_66;
      }
      goto LABEL_76;
    }
    if ((_DWORD)v7 == 1651519798 || (_DWORD)v7 == 1651847472)
      goto LABEL_122;
    v38 = 1651925816;
    goto LABEL_121;
  }
  if ((int)v7 > 1278226741)
  {
    if ((_DWORD)v7 != 1278226742)
    {
      if ((_DWORD)v7 == 1380411457)
      {
        HIDWORD(v137) = *(_DWORD *)(a1 + 8);
        LODWORD(v139[0]) = 12;
        v9 = 4294951892;
        if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
          && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
        {
          v136 = a2;
          if ((int)v6 >= 1)
          {
            v89 = 0;
            do
            {
              v90 = 5;
              *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
              *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
              LODWORD(v142[0]) = 0;
              HIDWORD(v141) = 0;
              if (v5 >= 1)
              {
                v91 = 0;
                v92 = 0;
                do
                {
                  v93 = v92;
                  v94 = v91;
                  *(_QWORD *)&v137 = v4 + (HIDWORD(v137) * v89) + 2 * (v92 & 0xFFFFFFF0);
                  SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v90, v10, v11);
                  v92 = v93 + 16;
                  v91 = v94 + 4;
                }
                while (v5 > v94 + 4);
              }
              v89 += 4;
            }
            while (v89 < (int)v6);
          }
          goto LABEL_249;
        }
      }
      else
      {
        v9 = 4294951891;
        if ((_DWORD)v7 == 1647589490)
        {
          HIDWORD(v137) = *(_DWORD *)(a1 + 8);
          LODWORD(v139[0]) = 19;
          v9 = 4294951892;
          if ((int)((v5 + 3) & 0xFFFFFFFC) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
            && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
          {
            v136 = a2;
            if ((int)v6 >= 1)
            {
              v18 = 0;
              do
              {
                v19 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v5 >= 1)
                {
                  v20 = 0;
                  v21 = 0;
                  do
                  {
                    v22 = v21;
                    v23 = v20;
                    *(_QWORD *)&v137 = v4 + (HIDWORD(v137) * v18) + 2 * (v21 & 0xFFFFFFFC);
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v19, v10, v11);
                    v21 = v22 + 12;
                    v20 = v23 + 4;
                  }
                  while (v5 > v23 + 4);
                }
                v18 += 4;
              }
              while (v18 < (int)v6);
            }
            goto LABEL_249;
          }
        }
      }
      return v9;
    }
    goto LABEL_110;
  }
  if ((_DWORD)v7 == 1278226536)
  {
LABEL_110:
    HIDWORD(v137) = *(_DWORD *)(a1 + 8);
    LODWORD(v139[0]) = 24;
    v9 = 4294951892;
    if ((signed int)((v5 + 15) & 0xFFFFFFF0) <= (signed int)(HIDWORD(v137) >> 1)
      && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
    {
      v136 = a2;
      if ((int)v6 >= 1)
      {
        v42 = 0;
        do
        {
          v43 = 5;
          *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
          *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
          LODWORD(v142[0]) = 0;
          HIDWORD(v141) = 0;
          if (v5 >= 1)
          {
            v44 = 0;
            v45 = v135;
            do
            {
              v46 = v45;
              v47 = v44;
              *(_QWORD *)&v137 = v45 + (v42 * HIDWORD(v137));
              SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v43, v10, v11);
              v45 = v46 + 32;
              v44 = v47 + 16;
            }
            while (v5 > v47 + 16);
          }
          v42 += 4;
        }
        while (v42 < (int)v6);
      }
      goto LABEL_249;
    }
    return v9;
  }
  if ((_DWORD)v7 != 1278226736)
  {
    v14 = 1278226738;
    goto LABEL_101;
  }
LABEL_102:
  HIDWORD(v137) = *(_DWORD *)(a1 + 8);
  v9 = 4294951892;
  if ((int)((v5 + 15) & 0xFFFFFFF0) <= (int)(HIDWORD(v137) / BytesPerPixelForPixelFormat)
    && ((v6 + 3) & 0xFFFFFFFC) <= (int)v6 + *(_DWORD *)(a1 + 24))
  {
    v136 = a2;
    if (CMPhotoGetBitDepthForPixelFormat(v7) == 8)
    {
      LODWORD(v139[0]) = 0;
    }
    else
    {
      if (CMPhotoGetBitDepthForPixelFormat(v7) == 10)
      {
        v41 = 10;
      }
      else if ((_DWORD)v7 == 1751527984)
      {
        v41 = 15;
      }
      else
      {
        v41 = 24;
      }
      LODWORD(v139[0]) = v41;
    }
    if ((int)v6 >= 1)
    {
      v101 = 0;
      do
      {
        v102 = 5;
        *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
        *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
        LODWORD(v142[0]) = 0;
        HIDWORD(v141) = 0;
        if (v5 >= 1)
        {
          v103 = 0;
          v104 = v135;
          do
          {
            v105 = v104;
            *(_QWORD *)&v137 = v104 + (v101 * HIDWORD(v137));
            SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v102, v39, v40);
            v104 = v105 + 16 * BytesPerPixelForPixelFormat;
            v103 += 16;
          }
          while (v5 > v103);
        }
        v101 += 4;
      }
      while (v101 < (int)v6);
    }
    if ((int)v7 <= 1278226735)
    {
      v106 = v7;
      if ((v7 - 1278226488) <= 0x30 && ((1 << (v7 - 56)) & 0x1400000000001) != 0)
        goto LABEL_249;
      v107 = 825437747;
    }
    else
    {
      v106 = v7;
      if ((int)v7 > 1717856626)
      {
        if ((int)v7 > 1751411058)
          v107 = 1932996149;
        else
          v107 = 1751410032;
      }
      else
      {
        if ((v7 - 1278226736) <= 6 && ((1 << (v7 - 48)) & 0x45) != 0)
          goto LABEL_249;
        v107 = 1717855600;
      }
    }
    if ((_DWORD)v7 != v107)
    {
      if (CMPhotoGetBitDepthForPixelFormat(v106) == 8)
      {
        v110 = 1;
      }
      else if (CMPhotoGetBitDepthForPixelFormat(v106) == 10)
      {
        v110 = 11;
      }
      else
      {
        if ((_DWORD)v7 == 1751527984)
        {
          LODWORD(v139[0]) = 16;
          goto LABEL_260;
        }
        v110 = 25;
      }
      LODWORD(v139[0]) = v110;
      v121 = 2;
      v122 = 1;
      if ((int)v7 > 1952854577)
      {
        if ((int)v7 > 2016686641)
        {
          if ((int)v7 > 2019963441)
          {
            if ((_DWORD)v7 == 2019963956)
              goto LABEL_290;
            v123 = 2019963442;
LABEL_288:
            if ((_DWORD)v7 == v123)
              goto LABEL_289;
LABEL_260:
            v121 = 1;
            v122 = 2;
            goto LABEL_290;
          }
          if ((_DWORD)v7 == 2016686642)
          {
LABEL_289:
            v121 = 1;
            v122 = 1;
LABEL_290:
            v125 = *(_QWORD *)(a1 + 96);
            HIDWORD(v137) = *(_DWORD *)(a1 + 12);
            v126 = (int)v6 / v122;
            if ((int)v6 / v122 >= 1)
            {
              v127 = v121 * v5;
              v128 = 0;
              do
              {
                v129 = 5;
                *(_OWORD *)((char *)&v139[1] + 10) = xmmword_1A828FEA0;
                *(_OWORD *)((char *)v139 + 10) = xmmword_1A828FEA0;
                LODWORD(v142[0]) = 0;
                HIDWORD(v141) = 0;
                if (v127 >= 1)
                {
                  v130 = 0;
                  v131 = v125;
                  do
                  {
                    v132 = v131;
                    v133 = v130;
                    *(_QWORD *)&v137 = v131 + (v128 * HIDWORD(v137));
                    SlimXDecodeBlocks_NEON((int *)&v137, *(double *)&v129, v108, v109);
                    v131 = v132 + 16 * BytesPerPixelForPixelFormat;
                    v130 = v133 + 16;
                  }
                  while (v127 > v133 + 16);
                }
                v128 += 4;
              }
              while (v128 < v126);
            }
            goto LABEL_249;
          }
          v124 = 2016687156;
        }
        else if ((int)v7 > 1953903153)
        {
          if ((_DWORD)v7 == 1953903154)
            goto LABEL_289;
          v124 = 1953903668;
        }
        else
        {
          if ((_DWORD)v7 == 1952854578)
            goto LABEL_289;
          v124 = 1952855092;
        }
      }
      else if ((int)v7 > 1936077361)
      {
        if ((int)v7 > 1937125937)
        {
          if ((_DWORD)v7 == 1937125938)
            goto LABEL_289;
          v124 = 1937126452;
        }
        else
        {
          if ((_DWORD)v7 == 1936077362)
            goto LABEL_289;
          v124 = 1936077876;
        }
      }
      else
      {
        if ((int)v7 <= 875836517)
        {
          if ((_DWORD)v7 != 875704934)
          {
            v123 = 875704950;
            goto LABEL_288;
          }
          goto LABEL_289;
        }
        if ((_DWORD)v7 == 875836518)
          goto LABEL_290;
        v124 = 875836534;
      }
      if ((_DWORD)v7 == v124)
        goto LABEL_290;
      goto LABEL_260;
    }
LABEL_249:
    *v136 = v138 - *(_QWORD *)(a1 + 64);
    return 0;
  }
  return v9;
}

uint64_t CMPhotoDecompressionTileIteratorReset(uint64_t a1)
{
  uint64_t (**v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (***)(void))(a1 + 48);
  if (*v1)
    return (*v1)();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorStepAndReportPosition(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 8);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorMoveToPosition(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorGetTileSourceRect(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 24);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorCopyTileSampleBuffer(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 32);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorGetTileItemType(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 40);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorDecodeTileAsyncF(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 48);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionTileIteratorDecodeTileAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  void *v9;
  const void *v10;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;

  v9 = _Block_copy(aBlock);
  v10 = v9;
  if (a1)
  {
    v11 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 48);
    if (v11)
    {
      v12 = v11(a1, a2, a3, a4, _callback_CompletionHandlerWrapper, v9);
      if (!v10)
        return v12;
    }
    else
    {
      v12 = 4294950302;
      if (!v9)
        return v12;
    }
  }
  else
  {
    v12 = 4294950306;
    if (!v9)
      return v12;
  }
  if ((_DWORD)v12)
    _Block_release(v10);
  return v12;
}

uint64_t CMPhotoDecompressionTileIteratorCancelAsyncRequest(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 56);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t JPEGDecompressSurfaceAsync(mach_port_t a1, IOSurfaceRef buffer, __IOSurface *a3, uint64_t a4, int a5, unsigned int a6, unsigned int a7, int a8, __int128 a9, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  _OWORD outputStruct[5];
  uint64_t v22;
  _DWORD inputStruct[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  v24 = 0u;
  v22 = 0;
  memset(outputStruct, 0, sizeof(outputStruct));
  inputStruct[0] = IOSurfaceGetID(buffer);
  inputStruct[2] = IOSurfaceGetID(a3);
  *(_QWORD *)((char *)&v24 + 4) = *(_QWORD *)a4;
  inputStruct[1] = IOSurfaceGetAllocSize(buffer);
  inputStruct[3] = IOSurfaceGetAllocSize(a3);
  LODWORD(v25) = a5;
  HIDWORD(v25) = *(_DWORD *)(a4 + 16);
  *((_QWORD *)&v27 + 1) = __PAIR64__(a7, a6);
  LODWORD(v28) = a8;
  v26 = a9;
  *(_QWORD *)&v27 = a10;
  v18 = JPEGDeviceInterface_decodeJPEG(a1, inputStruct, outputStruct);
  v19 = v18;
  if ((_DWORD)v18)
    syslog(5, "JPEGDecompressSurfaceAsync : Picture decode failed: %08x", v18);
  return v19;
}

void _stripDecodeCompleteCallback(dispatch_group_t group, int a2, _DWORD *a3)
{
  if (a2)
    *a3 = a2;
  dispatch_group_leave(group);
}

uint64_t SlimHrlcGetSize_C(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t **v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int i;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  _QWORD *v25;
  int j;
  unsigned int v27;
  uint64_t *v28;
  _QWORD *v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t k;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;

  v1 = 0;
  v2 = (_DWORD *)(result + 20472);
  v3 = (uint64_t **)(result + 20480);
  *(_QWORD *)(result + 20512) = -1;
  *(_BYTE *)(result + 20508) = -1;
  *(_DWORD *)(result + 20504) = 0;
  *(_OWORD *)(result + 20480) = 0u;
  do
  {
    v4 = result + v1;
    *(_QWORD *)(v4 + 32) = 0xFFFFFFFF00000000;
    *(_BYTE *)(v4 + 28) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    v1 += 40;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
  }
  while ((_DWORD)v1 != 20480);
  v5 = *(unsigned __int16 *)(result + 20534);
  v6 = *(unsigned __int16 *)(result + 20528);
  if (!*(_WORD *)(result + 20534))
  {
    v8 = 0;
    v13 = -1;
LABEL_24:
    v19 = v13;
    goto LABEL_25;
  }
  v7 = 0;
  v8 = 0;
  v9 = *(unsigned __int8 **)(result + 20520);
  v10 = *(unsigned __int16 *)(result + 20532);
  v11 = *(unsigned __int16 *)(result + 20530) - v10;
  v12 = (_DWORD *)(result + 40 * *(unsigned __int16 *)(result + 20528) + 32);
  v13 = -1;
  do
  {
    for (i = v10; i; --i)
    {
      v16 = *v9++;
      v15 = v16;
      if (v13 == v16)
      {
        ++v8;
      }
      else
      {
        if (v13 == v6)
        {
          *v12 += v8;
          v17 = v8 - 256;
          if (v8 >= 0x100)
          {
            v8 = v8;
            *v2 += (v17 >> 8) + 1;
          }
          if (v8)
            ++*(_DWORD *)(result + 40 * (v8 + 255) + 32);
        }
        else if (v13 != -1)
        {
          *(_DWORD *)(result + 40 * v13 + 32) += v8;
        }
        v8 = 1;
        v13 = v15;
      }
    }
    v9 += v11;
    ++v7;
  }
  while (v7 != v5);
  if (v13 != v6)
    goto LABEL_24;
  *v12 += v8;
  v18 = v8 - 256;
  if (v8 >= 0x100)
  {
    v8 = v8;
    *v2 += (v18 >> 8) + 1;
  }
  if (v8)
  {
    v19 = v8 + 255;
    v8 = 1;
LABEL_25:
    *(_DWORD *)(result + 40 * v19 + 32) += v8;
  }
  v20 = 0;
  v21 = 0;
  v22 = result;
  do
  {
    v23 = *(_DWORD *)(v22 + 32);
    if (v23)
    {
      if (v20 == v6)
      {
        *(_DWORD *)(v22 + 32) = 0;
      }
      else
      {
        *(_DWORD *)(v22 + 36) = v23;
        v24 = (uint64_t *)(result + 20480);
        do
        {
          v25 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24 && v23 > *((_DWORD *)v24 + 9));
        *v25 = v22;
        *(_QWORD *)v22 = v24;
        ++v21;
      }
    }
    v22 += 40;
    ++v20;
  }
  while (v20 != 256);
  for (j = 0; j != 256; ++j)
  {
    v27 = *(_DWORD *)(v22 + 32);
    if (v27)
    {
      *(_DWORD *)(v22 + 36) = v27;
      v28 = (uint64_t *)(result + 20480);
      do
      {
        v29 = v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28 && v27 > *((_DWORD *)v28 + 9));
      *v29 = v22;
      *(_QWORD *)v22 = v28;
      ++v21;
    }
    v22 += 40;
  }
  v30 = v21 - 1;
  if (v21 != 1)
  {
    v31 = 0;
    do
    {
      v32 = *v3;
      v33 = **v3;
      v34 = *(_QWORD *)(v33 + 8);
      *v3 = *(uint64_t **)v33;
      v35 = *(_DWORD *)(v33 + 36) + *((_DWORD *)v32 + 9);
      *(_DWORD *)(v33 + 36) = v35;
      ++*(_BYTE *)(v33 + 28);
      for (k = v33; v34; v34 = *(_QWORD *)(v34 + 8))
      {
        k = v34;
        ++*(_BYTE *)(v34 + 28);
      }
      *(_QWORD *)(k + 8) = v32;
      *v32 = 0;
      do
      {
        ++*((_BYTE *)v32 + 28);
        v32 = (uint64_t *)v32[1];
      }
      while (v32);
      v37 = (uint64_t *)(result + 20480);
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37 && v35 > *((_DWORD *)v37 + 9));
      *v38 = v33;
      *(_QWORD *)v33 = v37;
      ++v31;
    }
    while (v31 != v30);
  }
  v39 = *v3;
  if (*v3)
  {
    v40 = 0;
    v41 = 0;
    do
    {
      v42 = *((unsigned __int8 *)v39 + 28);
      v41 += *((_DWORD *)v39 + 8) * v42;
      if (v40 <= v42)
        v40 = *((unsigned __int8 *)v39 + 28);
      v39 = (uint64_t *)v39[1];
    }
    while (v39);
    v39 = (uint64_t *)((unint64_t)(v41 + 7) >> 3);
  }
  else
  {
    v40 = 0;
  }
  *(_DWORD *)(result + 20536) = v40;
  *(_QWORD *)(result + 20544) = v39;
  return result;
}

uint64_t SlimHrlcEncodeRun_C(uint64_t a1, _BYTE *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int *v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  char v23;
  char *v24;
  int v25;
  unint64_t v26;
  char v27;
  char v28;
  char *v29;
  unsigned int v31;
  unint64_t v32;
  char v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  uint64_t result;
  int v39;
  _BYTE *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned int *v57;
  uint64_t v59;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned int *v64;
  uint64_t v66;

  v4 = (unsigned int *)(a1 + 20464);
  v5 = *(_DWORD *)(a1 + 20536);
  if (v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      if (v6 >= ~(-1 << v7))
        return 4294951894;
      v8 = 256;
      v9 = (unsigned __int8 *)(a1 + 68);
      v10 = a1;
      do
      {
        v11 = v9;
        if (*(_DWORD *)(v10 + 32) && v7 == *(unsigned __int8 *)(v10 + 28))
          *(_DWORD *)(v10 + 24) = v6++;
        v10 += 40;
        v9 += 40;
        --v8;
      }
      while (v8);
      v12 = 256;
      do
      {
        if (v7 == *v11)
          *((_DWORD *)v11 - 1) = v6++;
        v11 += 40;
        --v12;
      }
      while (v12);
      v6 *= 2;
      v37 = v7++ == v5;
    }
    while (!v37);
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = (unint64_t)&a2[a3];
  v17 = *(unsigned __int16 *)(a1 + 20528) + 1;
  v18 = 1;
  v19 = a2;
LABEL_16:
  v20 = -5;
  do
  {
    if (v18 + v20 == 251)
    {
      v15 = *(unsigned __int8 *)(a1 + 108 + 40 * v17);
      v17 = 256;
    }
    v21 = *(unsigned __int8 *)(a1 + 40 * v17 + 28);
    if (*(_BYTE *)(a1 + 40 * v17 + 28))
    {
      if (v20 != -5)
      {
        if (v20 >= 0xFFFFFFFB)
        {
          v24 = (char *)&_encodeHuffmanTable_symbolArray + 16 * v20 + 224;
          v13 += v24[12];
          v14 += (unint64_t)*((unsigned int *)v24 + 2) << -(char)v13;
        }
        else
        {
          v22 = (255 << (56 - v13)) + v14;
          v23 = 48 - v13;
          v13 += 16;
          v14 = v22 + ((unint64_t)v20 << v23);
        }
      }
      v25 = v21 - v15;
      if (v21 - v15 > -5)
      {
        if (v25 < 5)
        {
          v29 = (char *)&_encodeHuffmanTable_symbolArray + 16 * (v25 + 4);
          v13 += v29[12];
          v26 = (unint64_t)*((unsigned int *)v29 + 2) << -(char)v13;
        }
        else
        {
          v26 = (254 << (56 - v13)) + v14;
          v28 = 48 - v13;
          v13 += 16;
          v14 = (unint64_t)(v25 - 5) << v28;
        }
      }
      else
      {
        v26 = (254 << (56 - v13)) + v14;
        v27 = 48 - v13;
        v13 += 16;
        v14 = (unint64_t)(v25 + 4) << v27;
      }
      v14 += v26;
      if ((unint64_t)v19 < v16 && v13 >= 8)
      {
        do
        {
          *v19++ = HIBYTE(v14);
          v14 <<= 8;
          v13 -= 8;
        }
        while ((unint64_t)v19 < v16 && v13 > 7);
      }
      if (v13 >= 8)
        return 4294951888;
      if (v17 == 255)
        v17 = 0;
      else
        ++v17;
      v31 = v18 + v20;
      v18 = v31 + 6;
      v15 = v21;
      if (v31 == 506)
        goto LABEL_50;
      goto LABEL_16;
    }
    if (v17 == 255)
      v17 = 0;
    else
      ++v17;
    ++v20;
  }
  while (v18 + v20 != 507);
  if (v18 != 512)
  {
    if ((v18 - 513) > 0xFFFFFFFA)
    {
      v34 = (char *)&_encodeHuffmanTable_symbolArray + 16 * (521 - v18);
      v13 += v34[12];
      v14 += (unint64_t)*((unsigned int *)v34 + 2) << -(char)v13;
    }
    else
    {
      v32 = (255 << (56 - v13)) + v14;
      v33 = 48 - v13;
      v13 += 16;
      v14 = v32 + ((unint64_t)(507 - v18) << v33);
    }
  }
LABEL_50:
  v35 = (v13 + 7) & 0xFFFFFFF8;
  if ((unint64_t)v19 >= v16 || !v35)
  {
    if (!v35)
      goto LABEL_61;
    return 4294951888;
  }
  do
  {
    *v19++ = HIBYTE(v14);
    v14 <<= 8;
    v36 = v35 - 8;
    v37 = (unint64_t)v19 >= v16 || v35 == 8;
    v35 -= 8;
  }
  while (!v37);
  if (v36)
    return 4294951888;
LABEL_61:
  if (v19 - a2 > 128)
    return 4294951894;
  v39 = *(unsigned __int16 *)(a1 + 20534);
  v40 = v19;
  if (!*(_WORD *)(a1 + 20534))
    goto LABEL_135;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = &a2[a3];
  v46 = *(unsigned __int16 *)(a1 + 20528);
  v47 = *(unsigned __int8 **)(a1 + 20520);
  v48 = *(unsigned __int16 *)(a1 + 20532);
  v49 = *(unsigned __int16 *)(a1 + 20530) - v48;
  v50 = -1;
  v40 = v19;
  while (2)
  {
    if ((_DWORD)v48)
    {
      v51 = 0;
      while (1)
      {
        v53 = *v47++;
        v52 = v53;
        if (v50 != v53)
          break;
        ++v44;
LABEL_100:
        if (v42 >= 8)
          return 4294951888;
        if (++v51 == (_DWORD)v48)
          goto LABEL_102;
      }
      if (v50 == v46)
      {
        while (v44 >= 0x100)
        {
          v42 += *(unsigned __int8 *)(a1 + 20468);
          v43 += (unint64_t)*v4 << -(char)v42;
          if (v40 < v45 && v42 >= 8)
          {
            do
            {
              *v40++ = HIBYTE(v43);
              v43 <<= 8;
              v42 -= 8;
            }
            while (v40 < v45 && v42 > 7);
          }
          v44 -= 256;
        }
        if (v44)
        {
          v59 = a1 + 40 * (v44 + 255);
          v42 += *(unsigned __int8 *)(v59 + 28);
          v43 += (unint64_t)*(unsigned int *)(v59 + 24) << -(char)v42;
          v44 = 1;
          if (v40 >= v45 || v42 < 8)
            goto LABEL_98;
          do
          {
            *v40++ = HIBYTE(v43);
            v43 <<= 8;
            v42 -= 8;
          }
          while (v40 < v45 && v42 > 7);
        }
      }
      else
      {
        if (v50 == -1 || !v44)
        {
          v50 = v52;
          v44 = 1;
          goto LABEL_100;
        }
        v55 = a1 + 40 * v50;
        v56 = (unsigned __int8 *)(v55 + 28);
        v57 = (unsigned int *)(v55 + 24);
        do
        {
          v42 += *v56;
          v43 += (unint64_t)*v57 << -(char)v42;
          if (v40 < v45 && v42 >= 8)
          {
            do
            {
              *v40++ = HIBYTE(v43);
              v43 <<= 8;
              v42 -= 8;
            }
            while (v40 < v45 && v42 > 7);
          }
          --v44;
        }
        while (v44);
      }
      v44 = 1;
LABEL_98:
      v50 = v52;
      goto LABEL_100;
    }
LABEL_102:
    v47 += v49;
    if (++v41 != v39)
      continue;
    break;
  }
  if (v50 == v46)
  {
    while (v44 >= 0x100)
    {
      v42 += *(unsigned __int8 *)(a1 + 20468);
      v43 += (unint64_t)*v4 << -(char)v42;
      if (v40 < v45 && v42 >= 8)
      {
        do
        {
          *v40++ = HIBYTE(v43);
          v43 <<= 8;
          v42 -= 8;
        }
        while (v40 < v45 && v42 > 7);
      }
      v44 -= 256;
    }
    if (v44)
    {
      v66 = a1 + 40 * (v44 + 255);
      v42 += *(unsigned __int8 *)(v66 + 28);
      v43 += (unint64_t)*(unsigned int *)(v66 + 24) << -(char)v42;
      if (v40 < v45 && v42 >= 8)
      {
        do
        {
          *v40++ = HIBYTE(v43);
          v43 <<= 8;
          v42 -= 8;
        }
        while (v40 < v45 && v42 > 7);
      }
    }
  }
  else if (v44)
  {
    v62 = a1 + 40 * v50;
    v63 = (unsigned __int8 *)(v62 + 28);
    v64 = (unsigned int *)(v62 + 24);
    do
    {
      v42 += *v63;
      v43 += (unint64_t)*v64 << -(char)v42;
      if (v40 < v45 && v42 >= 8)
      {
        do
        {
          *v40++ = HIBYTE(v43);
          v43 <<= 8;
          v42 -= 8;
        }
        while (v40 < v45 && v42 > 7);
      }
      --v44;
    }
    while (v44);
  }
  if (v42 > 7 || v40 == v45 && v42)
    return 4294951888;
  if (v40 < v45 && v42)
    *v40++ = HIBYTE(v43);
LABEL_135:
  if (*(_QWORD *)(a1 + 20544) == v40 - v19)
    result = 0;
  else
    result = 4294951894;
  if (a4)
    *a4 = v40;
  return result;
}

uint64_t SlimHrlcDecodeRun_C(uint64_t a1)
{
  int v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  _DWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  __int16 v55;
  __int16 v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  unsigned int v60;
  int *v61;
  int v62;
  int v63;
  unsigned __int16 v64;
  int v65;
  unsigned __int8 *v66;
  char v68;
  _BYTE v69[7];
  _BYTE v70[256];
  _DWORD v71[4];
  _QWORD v72[515];
  int v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  int v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  int v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE v98[8192];
  uint64_t v99;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v1;
  v99 = *MEMORY[0x1E0C80C00];
  memcpy(v98, &unk_1A828FF20, sizeof(v98));
  bzero(v71, 0x10200uLL);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v71[0] = 1;
  v71[2] = 1;
  v72[0] = v98;
  *(_QWORD *)((char *)&v72[256] + 4) = 0x200000002;
  v72[514] = 0x400000002;
  v73 = 6;
  v74 = &v98[16];
  v75 = &v98[32];
  v76 = 0xC00000002;
  v77 = 14;
  v78 = &v98[48];
  v79 = &v98[64];
  v80 = 0x1C00000002;
  v81 = 30;
  v82 = &v98[80];
  v83 = &v98[96];
  v84 = 0x3C00000002;
  v85 = 62;
  v86 = &v98[112];
  v87 = &v98[128];
  v88 = 0x7C00000002;
  v89 = 126;
  v90 = &v98[144];
  v91 = &v98[160];
  v92 = 0xFC00000004;
  v93 = 256;
  v94 = &v98[176];
  v20 = (unint64_t)&v7[v5];
  v95 = &v98[192];
  v21 = v69;
  v96 = &v98[208];
  v97 = &v98[224];
  v22 = v7;
  v68 = 0;
  do
  {
    if ((_DWORD)v19 == 256)
      v15 = v69[1];
    if ((unint64_t)v22 >= v20)
    {
LABEL_14:
      v28 = v19;
      goto LABEL_15;
    }
    v23 = 1;
    v24 = v72;
    v25 = v16;
    while (1)
    {
      v26 = *v22;
      if (v25 == 7)
      {
        if ((unint64_t)++v22 >= v20)
          return 4294951889;
        v16 = 0;
      }
      else
      {
        v16 = v25 + 1;
      }
      v27 = (v26 >> (7 - v25)) & 1 | (2 * v17);
      if (v27 < *((_DWORD *)v24 - 2))
        break;
      if (v23 <= 7)
      {
        ++v23;
        v24 += 258;
        v25 = v16;
        v17 = v27;
        if ((unint64_t)v22 < v20)
          continue;
      }
      v17 = v27;
      goto LABEL_14;
    }
    v29 = v27 - *((_DWORD *)v24 - 3);
    if (v29 >= *((_DWORD *)v24 - 4))
      return 4294951894;
    v30 = (int *)v24[v29];
    v31 = *v30;
    if (*v30 == 0x10000)
    {
      v33 = v22 + 1;
      if ((unint64_t)(v22 + 1) >= v20)
        return 4294951889;
      v34 = (v22[1] >> (8 - v16)) + (*v22 << v16);
      if ((v34 & 0x80) != 0)
        v35 = -4;
      else
        v35 = 5;
      v31 = v35 + (char)v34;
      v22 = v33;
LABEL_34:
      v17 = 0;
      v15 += v31;
      *v21++ = v15;
      if (v18 <= v15)
        v18 = v15;
      v28 = (v19 + 1);
      goto LABEL_15;
    }
    if (v31 != 0x8000)
      goto LABEL_34;
    v17 = v30[1];
    if (!v17)
    {
      if ((unint64_t)(v22 + 1) >= v20)
        return 4294951889;
      v17 = ((v22[1] >> (8 - v16)) + (*v22 << v16)) + 5;
      ++v22;
    }
    v28 = (v17 + v19);
    if (v28 > 0x200)
      return 4294951889;
    v32 = v19 - 255;
    do
    {
      *v21++ = 0;
      if (!v32)
        v15 = v69[1];
      ++v32;
      --v17;
    }
    while (v17);
LABEL_15:
    v19 = v28;
  }
  while (v28 < 0x200);
  if (v16)
    v36 = v22 + 1;
  else
    v36 = v22;
  if (v36 - v7 > 128)
    return 4294951894;
  if (v7 - v36 + v5 < 1)
    return 4294951889;
  v38 = 0;
  v39 = v98;
  do
  {
    if (256 - v14 + v38 <= 0)
      v40 = -(v14 - v38);
    else
      v40 = (v38 - v14);
    v39[12] = v69[v40 - 1];
    *(_DWORD *)v39 = v38;
    *((_DWORD *)v39 + 1) = 1;
    v39 += 16;
    ++v38;
  }
  while (v38 != 256);
  v41 = 0;
  do
  {
    v39[12] = v70[v41++];
    *(_DWORD *)v39 = v14;
    *((_DWORD *)v39 + 1) = v41;
    v39 += 16;
  }
  while (v41 != 256);
  if (v18)
  {
    v42 = 0;
    v43 = v71;
    v44 = 1;
    while (v42 < ~(-1 << v44))
    {
      v45 = 0;
      v46 = 0;
      v43[1] = v42;
      do
      {
        v47 = &v98[v45];
        if (v44 == v98[v45 + 12])
        {
          *((_DWORD *)v47 + 2) = v42;
          v48 = &v43[2 * v46++];
          *((_QWORD *)v48 + 2) = v47;
          ++v42;
        }
        v45 += 16;
      }
      while ((_DWORD)v45 != 4096);
      v49 = 0;
      v50 = &v98[v45];
      do
      {
        v51 = &v50[v49];
        if (v44 == v50[v49 + 12])
        {
          *((_DWORD *)v51 + 2) = v42;
          v52 = &v43[2 * v46++];
          *((_QWORD *)v52 + 2) = v51;
          ++v42;
        }
        v49 += 16;
      }
      while ((_DWORD)v49 != 4096);
      v43[2] = v42;
      *v43 = v46;
      ++v44;
      v42 *= 2;
      v43 += 516;
      if (v44 > v18)
        goto LABEL_62;
    }
    return 4294951894;
  }
LABEL_62:
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = (unint64_t)&v7[v5];
  do
  {
    if (!v18)
      goto LABEL_84;
    v58 = 1;
    v59 = v72;
    while (1)
    {
      v54 = (*v36 >> (7 - v53)) & 1 | (2 * v54);
      if (v53 == 7)
      {
        ++v36;
        v53 = 0;
      }
      else
      {
        ++v53;
      }
      if (v54 < *((_DWORD *)v59 - 2))
        break;
      ++v58;
      v59 += 258;
      if (v58 > v18)
        goto LABEL_84;
    }
    v60 = v54 - *((_DWORD *)v59 - 3);
    if (v60 >= *((_DWORD *)v59 - 4))
      return 4294951894;
    v61 = (int *)v59[v60];
    v54 = v61[1];
    if (v54)
    {
      v62 = 0;
      v63 = *v61;
      do
      {
        *v3++ = v63;
        v64 = v56 + 1;
        if (v9 == (unsigned __int16)(v55 + 1))
          v65 = 1;
        else
          v65 = v62;
        if (v11 == v64)
        {
          v3 += v13 - v11;
          v56 = 0;
        }
        else
        {
          ++v56;
        }
        if (v11 == v64)
        {
          ++v55;
          v62 = v65;
        }
        --v54;
      }
      while (v54);
    }
    else
    {
LABEL_84:
      v62 = 0;
    }
  }
  while ((unint64_t)v36 < v57 && !v62);
  if (v53)
    v66 = v36 + 1;
  else
    v66 = v36;
  if (v66 == (unsigned __int8 *)v57 && v62 == 1)
    return 0;
  else
    return 4294951889;
}

uint64_t _modifyInPlace(void *a1, void *a2, void *a3)
{
  const __CFData *v5;
  id v6;
  const __CFData *v7;
  void *v8;
  size_t v9;
  uint64_t Container;
  const __CFData *v11;
  __CFString *v12;
  unsigned int v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t (*v37)(CFTypeRef, char *, uint64_t, uint64_t, id *);
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(CFTypeRef, uint64_t, uint64_t, uint64_t, id *);
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t (*v51)(CFTypeRef, uint64_t, uint64_t, uint64_t, id *);
  id v52;
  char v53;
  void *v54;
  BOOL v55;
  id v56;
  CFTypeRef v57;
  id v58;
  const void *v59;
  int length;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  unsigned int v66;
  uint64_t v67;
  void *v68;
  void *v69;
  double v70;
  double v71;
  void *v72;
  uint64_t v73;
  int v74;
  CFMutableArrayRef v75;
  void *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *);
  BOOL v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  unsigned int (*v85)(CFTypeRef, uint64_t, uint64_t, uint64_t *, uint64_t *);
  unsigned int (*v86)(CFTypeRef, uint64_t, uint64_t, char *, uint64_t *);
  unsigned int (*v87)(CFTypeRef, uint64_t, uint64_t, int *, uint64_t *);
  unsigned int (*v88)(CFTypeRef, uint64_t, uint64_t, uint64_t *, uint64_t *);
  unsigned int (*v89)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *);
  void *v90;
  void *v91;
  void *v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *context;
  const __CFData *v98;
  void *v99;
  void *v100;
  __CFString *v101;
  id v102;
  id obj;
  id v104;
  char v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  CFTypeRef v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  id v115;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v117;
  uint64_t v118;
  unsigned int v119;
  CFMutableArrayRef v120;
  unsigned int v121;
  id v122;
  id *v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  id *v127;
  uint64_t v128;
  uint64_t v129;
  CFTypeRef v130[16];
  __int128 cf;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  void *v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, __int128 *);
  void *v142;
  __int128 *p_cf;
  __CFString *v144;
  const __CFString *v145;
  uint64_t v146;
  const __CFString *v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v104 = a3;
  blockBufferOut = 0;
  v117 = 0;
  v98 = v5;
  v99 = v6;
  if (!v5 || v6 || !v104)
  {
    Container = FigSignalErrorAt();
    goto LABEL_159;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Container = CMPhotoByteStreamCreateFromSource(v5, 0, 1, 0, &v117, 0);
    if (!(_DWORD)Container)
      goto LABEL_9;
LABEL_159:
    v90 = 0;
    v101 = 0;
    goto LABEL_152;
  }
  v7 = objc_retainAutorelease(v5);
  v8 = (void *)-[__CFData mutableBytes](v7, "mutableBytes");
  v9 = -[__CFData length](v7, "length");
  Container = CMBlockBufferCreateWithMemoryBlock(0, v8, v9, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, -[__CFData length](v7, "length"), 0, &blockBufferOut);
  if ((_DWORD)Container
    || (Container = CMPhotoByteStreamCreateFromSource(blockBufferOut, 0, 1, 0, &v117, 0), (_DWORD)Container))
  {

    goto LABEL_159;
  }

LABEL_9:
  context = (void *)MEMORY[0x1A85D1038]();
  v11 = (const __CFData *)v117;
  v130[0] = 0;
  *(_QWORD *)&cf = 0;
  Container = CMPhotoDecompressionSessionCreate(0, 0, v130);
  if ((_DWORD)Container
    || (LODWORD(v122) = 0,
        Container = CMPhotoDecompressionSessionCreateContainer(v130[0], 0, v11, (unsigned int *)&v122, (uint64_t *)&cf),
        (_DWORD)Container))
  {
LABEL_162:
    v12 = 0;
    v14 = 0;
    goto LABEL_20;
  }
  if (!(_DWORD)v122)
  {
    v139 = 0;
    Container = CMPhotoDecompressionContainerGetImageCountWithOptions(cf, 0, &v139);
    if (!(_DWORD)Container)
    {
      if (v139 == (void *)1)
      {
        v144 = 0;
        Container = CMPhotoDecompressionContainerCreateDictionaryDescription(cf, (uint64_t)&v144);
        if (!(_DWORD)Container)
        {
          v12 = v144;
          v144 = 0;
          v126 = 0;
          v13 = CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions((_QWORD *)cf, 0, 0, (uint64_t)&v126);
          if (v13)
          {
            v14 = 0;
            if (v13 >> 1 == 2147475151)
              Container = 0;
            else
              Container = v13;
          }
          else
          {
            v14 = v126;
            Container = 0;
          }
          goto LABEL_20;
        }
      }
      else
      {
        Container = FigSignalErrorAt();
      }
    }
    goto LABEL_162;
  }
  v12 = 0;
  v14 = 0;
  Container = 4294950300;
LABEL_20:
  if ((_QWORD)cf)
    CFRelease((CFTypeRef)cf);
  if (v130[0])
    CFRelease(v130[0]);
  v101 = v12;
  v102 = v14;
  if ((_DWORD)Container)
    goto LABEL_151;
  if ((objc_opt_respondsToSelector() & 1) == 0)
    goto LABEL_84;
  v110 = v117;
  v106 = v104;
  -[__CFString objectForKeyedSubscript:](v101, "objectForKeyedSubscript:", CFSTR("MainImages"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "objectAtIndexedSubscript:", 0);
  v100 = (void *)objc_claimAutoreleasedReturnValue();

  v144 = CFSTR("ExifPayloads");
  v145 = CFSTR("XMPPayloads");
  v139 = &unk_1E53FE640;
  v140 = (uint64_t)&unk_1E53FE658;
  v146 = (uint64_t)CFSTR("DebugPayloads");
  v147 = CFSTR("CustomMetadataPayloads");
  v141 = (uint64_t (*)(uint64_t, __int128 *))&unk_1E53FE670;
  v142 = &unk_1E53FE688;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v139, &v144, 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v105 = objc_opt_respondsToSelector();
  v133 = 0u;
  v134 = 0u;
  cf = 0u;
  v132 = 0u;
  obj = v16;
  v95 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &cf, v130, 16);
  if (!v95)
  {
    Container = 0;
    goto LABEL_83;
  }
  v94 = *(_QWORD *)v132;
  do
  {
    v17 = 0;
    do
    {
      if (*(_QWORD *)v132 != v94)
      {
        v18 = v17;
        objc_enumerationMutation(obj);
        v17 = v18;
      }
      v96 = v17;
      v19 = *(_QWORD *)(*((_QWORD *)&cf + 1) + 8 * v17);
      objc_msgSend(obj, "objectForKeyedSubscript:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "intValue");

      objc_msgSend(v100, "objectForKeyedSubscript:", v19);
      v111 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v111, "count"))
      {
        v22 = 0;
        v109 = v21;
        while (2)
        {
          if ((_DWORD)v109 == 3)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v113 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v111, "objectAtIndexedSubscript:", v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("URI"));
            v24 = (void *)objc_claimAutoreleasedReturnValue();

            if (v24)
              objc_msgSend(v113, "setObject:forKeyedSubscript:", v24, CFSTR("URI"));
            objc_msgSend(v111, "objectAtIndexedSubscript:", v22);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("Name"));
            v26 = (void *)objc_claimAutoreleasedReturnValue();

            if (v26)
              objc_msgSend(v113, "setObject:forKeyedSubscript:", v26, CFSTR("Name"));

          }
          else
          {
            v113 = 0;
          }
          if ((v105 & 1) != 0
            && !objc_msgSend(v106, "shouldModifyMetadataForImageIndex:payloadIndex:withType:customMetadataIdentifier:", 0, v22, v109, v113))
          {
            goto LABEL_72;
          }
          objc_msgSend(v111, "objectAtIndexedSubscript:", v22);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v108 = v113;
          v107 = v106;
          objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("DataIsContiguous"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = objc_msgSend(v28, "BOOLValue");

          if ((v29 & 1) == 0)
            goto LABEL_66;
          objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("DataOffset"));
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend(v30, "longValue");

          objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("DataLength"));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = (char *)objc_msgSend(v32, "longValue");

          if (!v31 || !v33)
          {
LABEL_66:
            Container = FigSignalErrorAt();
            v39 = 0;
            v35 = 0;
            goto LABEL_71;
          }
          objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithCapacity:", v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "setLength:", v33);
          v126 = 0;
          v35 = objc_retainAutorelease(v34);
          v36 = objc_msgSend(v35, "mutableBytes");
          v37 = *(uint64_t (**)(CFTypeRef, char *, uint64_t, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
          if (v37)
          {
            Container = v37(v110, v33, v31, v36, &v126);
            if ((_DWORD)Container)
            {
              v39 = 0;
              goto LABEL_71;
            }
            if (v126 != v33)
            {
              v39 = 0;
              goto LABEL_68;
            }
            v122 = 0;
            Container = objc_msgSend(v107, "metadataPayload:forImageIndex:payloadIndex:withType:customMetadataIdentifier:modifiedData:", v35, 0, v22, v109, v108, &v122);
            v38 = v122;
            v39 = v38;
            if ((_DWORD)Container)
              goto LABEL_71;
            if (!v38)
            {
              FigSignalErrorAt();
              v39 = 0;
              goto LABEL_70;
            }
            if ((objc_msgSend(v38, "isEqualToData:", v35) & 1) != 0)
              goto LABEL_70;
            if (objc_msgSend(v39, "length") > (unint64_t)v33)
            {
              Container = FigSignalErrorAt();
              goto LABEL_71;
            }
            v40 = objc_msgSend(v39, "length");
            v39 = objc_retainAutorelease(v39);
            v41 = objc_msgSend(v39, "bytes");
            v42 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 16);
            if (v42)
            {
              Container = v42(v110, v40, v31, v41, &v126);
              if ((_DWORD)Container)
                goto LABEL_71;
              v43 = v126;
              if (v43 == (id)objc_msgSend(v39, "length"))
              {
                if (objc_msgSend(v39, "length") < (unint64_t)v33)
                {
                  v44 = objc_msgSend(v39, "length");
                  objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", &v33[-v44]);
                  v45 = (void *)objc_claimAutoreleasedReturnValue();
                  v46 = v45;
                  if (v45)
                  {
                    v47 = objc_msgSend(v45, "length");
                    v48 = objc_msgSend(v39, "length");
                    v49 = objc_retainAutorelease(v46);
                    v50 = objc_msgSend(v49, "bytes");
                    v51 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, id *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 16);
                    if (v51)
                    {
                      Container = v51(v110, v47, v48 + v31, v50, &v126);
                      if (!(_DWORD)Container)
                      {
                        v52 = v126;
                        if (v52 == (id)objc_msgSend(v49, "length"))
                          Container = 0;
                        else
                          Container = 4294950194;
                      }
                    }
                    else
                    {
                      Container = 4294954514;
                    }
                  }
                  else
                  {
                    Container = 4294950305;
                  }

                  goto LABEL_71;
                }
LABEL_70:
                Container = 0;
LABEL_71:

                if ((_DWORD)Container)
                {

                  goto LABEL_83;
                }
LABEL_72:

                if (++v22 >= (unint64_t)objc_msgSend(v111, "count"))
                  goto LABEL_77;
                continue;
              }
LABEL_68:
              Container = 4294950194;
              goto LABEL_71;
            }
          }
          else
          {
            v39 = 0;
          }
          break;
        }
        Container = 4294954514;
        goto LABEL_71;
      }
LABEL_77:

      v17 = v96 + 1;
    }
    while (v96 + 1 != v95);
    v95 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &cf, v130, 16);
    Container = 0;
  }
  while (v95);
LABEL_83:

  if (!(_DWORD)Container)
  {
LABEL_84:
    v53 = objc_opt_respondsToSelector();
    if ((objc_opt_respondsToSelector() & (v102 != 0)) != 1
      || (objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("CameraExtrinsics")),
          v54 = (void *)objc_claimAutoreleasedReturnValue(),
          v55 = v54 == 0,
          v54,
          v55)
      || (v53 & 1) != 0
      && !objc_msgSend(v104, "shouldModifyMetadataForImageIndex:payloadIndex:withType:customMetadataIdentifier:", 0, 0, 4, 0))
    {
      Container = 0;
    }
    else
    {
      objc_msgSend(v102, "objectForKeyedSubscript:", CFSTR("CameraExtrinsics"));
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      v115 = 0;
      Container = objc_msgSend(v104, "extrinsics:forIndex:modifiedExtrinsics:", v114, 0, &v115);
      v56 = v115;
      if (!(_DWORD)Container)
      {
        v112 = v56;
        if ((objc_msgSend(v114, "isEqual:", v56) & 1) != 0)
          goto LABEL_90;
        v57 = v117;
        v58 = v112;
        v132 = 0u;
        v133 = 0u;
        cf = 0u;
        v148 = xmmword_1A8292020;
        v149 = 1768973167;
        v144 = 0;
        v145 = (const __CFString *)&v144;
        v146 = 0x2020000000;
        LODWORD(v147) = 0;
        v126 = 0;
        v127 = &v126;
        v128 = 0x2020000000;
        v129 = 0;
        v122 = 0;
        v123 = &v122;
        v124 = 0x2020000000;
        v125 = 0;
        v59 = (const void *)MEMORY[0x1E0C809B0];
        while (1)
        {
          length = v145->length;
          if (length > 2)
            break;
          v61 = (uint64_t)v127[3];
          v62 = (unint64_t)v123[3];
          v130[0] = v59;
          v130[1] = (CFTypeRef)3221225472;
          v130[2] = ___findExtrinsicsBox_block_invoke;
          v130[3] = &unk_1E53F54E0;
          v130[4] = &v144;
          v130[5] = &v126;
          v130[6] = &v122;
          v130[7] = &v148;
          Container = _enumerateBoxes((uint64_t)v57, v61, v62, v130);
          if ((_DWORD)Container)
            goto LABEL_98;
        }
        if (length == 3)
        {
          v63 = (uint64_t)v127[3];
          v64 = (unint64_t)v123[3];
          v139 = (void *)v59;
          v140 = 3221225472;
          v141 = ___findExtrinsicsBox_block_invoke_2;
          v142 = &__block_descriptor_40_e21_B16__0____IqQ_16C_Q_8l;
          p_cf = &cf;
          Container = _enumerateBoxes((uint64_t)v57, v63, v64, &v139);
        }
        else
        {
          Container = 4294950194;
        }
LABEL_98:
        _Block_object_dispose(&v122, 8);
        _Block_object_dispose(&v126, 8);
        _Block_object_dispose(&v144, 8);
        if ((_DWORD)Container)
          goto LABEL_148;
        objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("CoordinateSystemID"));
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        v66 = objc_msgSend(v65, "unsignedIntValue");

        v67 = 0;
        v121 = bswap32(v66);
        v137 = 0;
        v138 = 0;
        do
        {
          objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("Position"));
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "objectAtIndexedSubscript:", v67);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "doubleValue");
          v71 = v70;

          *((_DWORD *)&v137 + v67++) = bswap32(llround(v71 * 1000000.0));
        }
        while (v67 != 3);
        v120 = 0;
        v135 = 0;
        v136 = 0;
        objc_msgSend(v58, "objectForKeyedSubscript:", CFSTR("Rotation"));
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        Container = CMPhotoCreateQuaternionArrayFromRotationMatrix(0, v72, 1, &v120);

        if ((_DWORD)Container)
          goto LABEL_148;
        v73 = 0;
        LOBYTE(v74) = 1;
        v75 = v120;
        do
        {
          -[__CFArray objectAtIndexedSubscript:](v75, "objectAtIndexedSubscript:", v73);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          v77 = objc_msgSend(v76, "intValue");

          *((_DWORD *)&v135 + v73) = bswap32(v77);
          v74 = v74 & (v77 == 0);
          ++v73;
        }
        while (v73 != 3);

        v119 = 0;
        v118 = 0;
        v78 = *((_QWORD *)&cf + 1);
        v79 = *((_QWORD *)&v133 + 1);
        v80 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v80 || (!v80(v57, 4, v79 + v78, &v119, &v118) ? (v81 = v118 == 4) : (v81 = 0), !v81))
        {
LABEL_147:
          Container = 4294950194;
          goto LABEL_148;
        }
        v82 = bswap32(v119);
        v119 = v82;
        if (HIBYTE(v82)
          || (v82 & 1) == 0 && (_DWORD)v137
          || (v83 = v82, (v82 & 2) == 0) && HIDWORD(v137)
          || (v82 & 4) == 0 && v138
          || (v82 & 0x10) == 0 && (v82 & 8) != 0
          || (((v82 & 8) == 0) & ~v74) != 0)
        {
          Container = FigSignalErrorAt();

        }
        else
        {
          if (v66 && (v82 & 0x20) == 0)
            goto LABEL_147;
          v84 = *((_QWORD *)&cf + 1) + *((_QWORD *)&v133 + 1) + 4;
          if ((v82 & 1) != 0)
          {
            v85 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (!v85)
              goto LABEL_147;
            Container = 4294950194;
            if (!v85(v57, 4, v84, &v137, &v118) && v118 == 4)
            {
              v84 += 4;
              goto LABEL_127;
            }
            goto LABEL_148;
          }
LABEL_127:
          if ((v83 & 2) != 0)
          {
            v86 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
            if (!v86)
              goto LABEL_147;
            Container = 4294950194;
            if (v86(v57, 4, v84, (char *)&v137 + 4, &v118) || v118 != 4)
              goto LABEL_148;
            v84 += 4;
          }
          if ((v83 & 4) != 0)
          {
            v87 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 16);
            if (!v87)
              goto LABEL_147;
            Container = 4294950194;
            if (v87(v57, 4, v84, &v138, &v118) || v118 != 4)
              goto LABEL_148;
            v84 += 4;
          }
          if ((v83 & 8) != 0)
          {
            v88 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (!v88)
              goto LABEL_147;
            Container = 4294950194;
            if (v88(v57, 12, v84, &v135, &v118) || v118 != 12)
              goto LABEL_148;
            v84 += 12;
          }
          if ((v83 & 0x20) == 0)
            goto LABEL_146;
          v89 = *(unsigned int (**)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (!v89)
            goto LABEL_147;
          Container = 4294950194;
          if (v89(v57, 4, v84, &v121, &v118) || v118 != 4)
          {
LABEL_148:

          }
          else
          {
LABEL_146:

LABEL_90:
            Container = 0;
          }
        }
        v56 = v112;
      }

    }
  }
LABEL_151:
  objc_autoreleasePoolPop(context);
  v90 = v102;
LABEL_152:
  if (v117)
  {
    v91 = v90;
    CFRelease(v117);
    v90 = v91;
  }
  if (blockBufferOut)
  {
    v92 = v90;
    CFRelease(blockBufferOut);
    v90 = v92;
  }

  return Container;
}

void sub_1A8212E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t _enumerateBoxes(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  unsigned int (**v7)(id, _QWORD *);
  unint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *);
  BOOL v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *);
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *);
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t, char *, uint64_t *);
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (a3)
    v8 = a3;
  else
    v8 = 0x7FFFFFFFLL;
  if (v8 >= 8)
  {
    while (1)
    {
      v23[0] = 0;
      v24 = 0u;
      v22 = 0;
      v25 = 0;
      v26 = 8;
      v23[1] = a2;
      LODWORD(v21) = 0;
      v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v9
        || (!v9(a1, 4, a2, &v21, &v22) ? (v10 = v22 == 4) : (v10 = 0),
            !v10
         || (*(_QWORD *)&v24 = bswap32(v21),
             (v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 8)) == 0)
         || (!v11(a1, 4, a2 + 4, v23, &v22) ? (v12 = v22 == 4) : (v12 = 0), !v12)))
      {
LABEL_36:
        v18 = 4294950194;
        goto LABEL_37;
      }
      v13 = a2 + 8;
      v14 = bswap32(v23[0]);
      LODWORD(v23[0]) = v14;
      v15 = v8 - 8;
      v16 = v24;
      if ((_QWORD)v24 == 1)
      {
        if (v15 < 8)
          goto LABEL_36;
        v21 = 0;
        v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v17)
          goto LABEL_36;
        v18 = 4294950194;
        if (v17(a1, 8, a2 + 8, &v21, &v22) || v22 != 8)
          goto LABEL_37;
        v16 = bswap64(v21);
        if (v16 >= 0xFFFFFFFF)
        {
          v18 = 4294950300;
          goto LABEL_37;
        }
        v13 = a2 + 16;
        *(_QWORD *)&v24 = v16;
        v26 += 8;
        v15 = v8 - 16;
        v14 = v23[0];
      }
      if (v14 != 1835295092)
      {
        if (v16 <= v26)
          goto LABEL_36;
        if (v14 == 1970628964)
        {
          v18 = 4294950194;
          if (v15 < 0x10)
            goto LABEL_37;
          if (v16 <= v26 + 16)
            goto LABEL_37;
          v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
          if (!v19 || v19(a1, 16, v13, (char *)&v24 + 8, &v22) || v22 != 16)
            goto LABEL_37;
          v26 += 16;
        }
      }
      if (!v7[2](v7, v23))
      {
        v8 -= v24;
        a2 += v24;
        if (v8 > 7)
          continue;
      }
      break;
    }
  }
  v18 = 0;
LABEL_37:

  return v18;
}

BOOL ___findExtrinsicsBox_block_invoke(_QWORD *a1, int *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *a2;
  v3 = a1[7];
  v4 = *(int *)(*(_QWORD *)(a1[4] + 8) + 24);
  v5 = *(_DWORD *)(v3 + 8 * v4);
  if (*a2 == v5)
  {
    v6 = *((_QWORD *)a2 + 5) + *(int *)(v3 + 8 * v4 + 4);
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v6 + *((_QWORD *)a2 + 1);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *((_QWORD *)a2 + 2) - v6;
    ++*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  }
  return v2 == v5;
}

uint64_t ___findExtrinsicsBox_block_invoke_2(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  if (*(_DWORD *)a2 != 1668113784)
  {
    if (*(_DWORD *)a2 != 1970628964)
      return 0;
    if (*((_QWORD *)a2 + 3) != 0xAB4A7D5B14E96343 || *((_QWORD *)a2 + 4) != 0x34B40398A6BEAE97)
      return 0;
  }
  v4 = *(_OWORD **)(a1 + 32);
  v5 = *a2;
  v6 = a2[2];
  v4[1] = a2[1];
  v4[2] = v6;
  *v4 = v5;
  return 1;
}

IOSurfaceRef CMPhotoJPEGCreateJPEGOutputIOSurface(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  IOSurfaceRef v5;
  char v6;

  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  v5 = 0;
  v6 = 0;
  if (!CMPhotoSurfacePoolCreateImageSurface((uint64_t)CFSTR("SurfacePoolOneShot"), 875704422, a1, a2, 1, a3, a4, 1, 0, 0, 1u, &v5, &v6))IOSurfaceDecrementUseCount(v5);
  return v5;
}

uint64_t CMPhotoJPEGCreateIOSurfaceFromJPEG(const __CFData *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  int FourCCValue;
  int IntValue;
  int v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  CFTypeID v12;
  __IOSurface *v13;
  __CVBuffer *v14;
  OSType PixelFormatType;
  __IOSurface *IOSurface;
  size_t PlaneCount;
  size_t BytesPerRow;
  size_t v19;
  BOOL v20;
  size_t v21;
  size_t BytesPerRowOfPlane;
  int v23;
  const __CFAllocator *v26;
  CFNumberRef v27;
  const __CFDictionary *v28;
  IOSurfaceRef v29;
  OSType v31;
  int valuePtr;
  __CVBuffer *v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  CVPixelBufferRef pixelBuffer;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  pixelBuffer = 0;
  v37 = 0;
  v38 = 0;
  v35 = 1;
  v36 = 0;
  v34 = 1;
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  if (!jpegService())
    return 4294954514;
  FourCCValue = 875704422;
  if (a2)
  {
    IntValue = getIntValue(a2, CFSTR("JPEGCacheInputSurface"), 0);
    v8 = getIntValue(a2, CFSTR("JPEGHighSpeedDecode"), 0);
    FourCCValue = getFourCCValue(a2, CFSTR("JPEGOutputPixelFormat"), 875704422);
    v9 = CFDictionaryContainsKey(a2, CFSTR("JPEGOutputBytesPerRowAlignment")) != 0;
    v10 = getIntValue(a2, CFSTR("JPEGOutputBytesPerRowAlignment"), 1);
    v34 = v10;
  }
  else
  {
    IntValue = 0;
    v9 = 0;
    v10 = 1;
    v8 = 1;
  }
  if (*a3 && (v12 = CFGetTypeID(*a3), v12 == IOSurfaceGetTypeID()))
    v13 = (__IOSurface *)*a3;
  else
    v13 = 0;
  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 0;
  v11 = _createPixelBufferFromJPEG(a1, a2, IntValue != 0, v8 != 0, &v35, &v41, v13, (CFTypeRef *)&pixelBuffer);
  if (!(_DWORD)v11)
  {
    v14 = pixelBuffer;
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    calculateOutputDimensions(v41, v42, a2, v35, &v39, &v37, &v36);
    if (v9)
    {
      IOSurface = CVPixelBufferGetIOSurface(v14);
      PlaneCount = IOSurfaceGetPlaneCount(IOSurface);
      if (PlaneCount == 1)
      {
        BytesPerRow = IOSurfaceGetBytesPerRow(IOSurface);
        if (!v10 || BytesPerRow % v10)
        {
LABEL_25:
          v23 = 1;
LABEL_26:
          if (v39 == v37 && v40 == v38)
          {
            if (FourCCValue != PixelFormatType || v36 != 0)
              v23 = 1;
            if (v23 != 1)
              goto LABEL_47;
          }
          v33 = 0;
          keys[0] = 0;
          keys[1] = 0;
          values[0] = 0;
          values[1] = 0;
          valuePtr = 0;
          if (!v9)
          {
            FigGetAlignmentForIOSurfaceOutput();
            v10 = 1;
            v34 = 1;
          }
          if (v10 <= 1)
          {
            v28 = 0;
          }
          else
          {
            v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &v34);
            keys[0] = *(void **)MEMORY[0x1E0CA8F68];
            values[0] = v27;
            v28 = CFDictionaryCreate(v26, (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (v27)
              CFRelease(v27);
          }
          v11 = scaleAndConvertPixelBuffer(v14, v37, v38, FourCCValue, v36, v28, &v33);
          CFRelease(v14);
          if (v28)
            CFRelease(v28);
          if (!(_DWORD)v11)
          {
            v14 = v33;
LABEL_47:
            v29 = CVPixelBufferGetIOSurface(v14);
            *a3 = CFRetain(v29);
            CFRelease(v14);
            return 0;
          }
          return v11;
        }
      }
      else
      {
        v19 = PlaneCount;
        if (PlaneCount)
        {
          v31 = PixelFormatType;
          v20 = 0;
          v21 = 0;
          do
          {
            BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(IOSurface, v21);
            if (!v10)
            {
              v23 = 1;
              PixelFormatType = v31;
              goto LABEL_26;
            }
            if (BytesPerRowOfPlane % v10)
              break;
            v20 = ++v21 >= v19;
          }
          while (v19 != v21);
          PixelFormatType = v31;
          if (!v20)
            goto LABEL_25;
        }
      }
    }
    v23 = 0;
    goto LABEL_26;
  }
  return v11;
}

uint64_t getIntValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID TypeID;
  CFTypeID v7;
  unsigned int valuePtr;

  v3 = a3;
  valuePtr = a3;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      v7 = CFBooleanGetTypeID();
      if (v7 == CFGetTypeID(v5))
        return CFBooleanGetValue(v5);
    }
  }
  return v3;
}

uint64_t getFourCCValue(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID TypeID;
  unsigned int valuePtr;

  v3 = a3;
  valuePtr = a3;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

uint64_t _createPixelBufferFromJPEG(const __CFData *a1, const __CFDictionary *a2, int a3, int a4, int *a5, _QWORD *a6, __IOSurface *a7, CFTypeRef *a8)
{
  int v14;
  const __CFData *v15;
  const void *Value;
  const void *v17;
  CFTypeID TypeID;
  __IOSurface *v19;
  __IOSurface *v20;
  size_t Length;
  int v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  const __CFAllocator *v26;
  const UInt8 *v27;
  size_t AllocSize;
  CFDataRef v29;
  __CFString *v30;
  __CFString *v31;
  CFTypeID v32;
  uint64_t v33;
  const __CFString *v34;
  const void *v36;
  const void *v37;
  CFTypeID v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  int v42;
  BOOL v43;
  int v44;
  __IOSurface *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t FourCCValue;
  _BOOL4 v49;
  int IntValue;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  size_t Width;
  size_t Height;
  unsigned __int8 BytePtr;
  int v62;
  uint64_t v63;
  CFIndex v64;
  uint64_t v65;
  unint64_t v66;
  int32_t UseCount;
  int v68;
  char v69;
  int v70;
  int v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  int v82;
  __IOSurface *IOSurface;
  void *BaseAddress;
  const UInt8 *v85;
  size_t v86;
  void *v87;
  CFIndex v88;
  BOOL v89;
  char v90;
  char v91;
  char v92;
  size_t v93;
  size_t v94;
  uint64_t v95;
  CFTypeRef *v97;
  __IOSurface *v98;
  int v99;
  int v101;
  const __CFString *v102;
  int v103;
  CFDataRef theData;
  const __CFData *theDataa;
  int v107;
  IOSurfaceRef buffer;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[2];
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  CVPixelBufferRef v116;
  CVPixelBufferRef v117;
  char v118[9];

  v115 = 0;
  v116 = 0;
  v114 = 0;
  v14 = JPEGDeviceInterface_supportsMissingEOI();
  v102 = CFSTR("SurfacePoolOneShot");
  v113 = 0;
  memset(v112, 0, sizeof(v112));
  v110 = 0u;
  v111 = 0u;
  v97 = a8;
  if (!a2)
  {
    v99 = 0;
    v107 = 0;
    v98 = 0;
    v20 = 0;
    v22 = 17;
    v23 = 1;
    if (a1)
      goto LABEL_28;
    goto LABEL_12;
  }
  theData = a7;
  v15 = a1;
  Value = CFDictionaryGetValue(a2, CFSTR("JPEGCacheInputSurface"));
  if (!Value || (v17 = Value, TypeID = IOSurfaceGetTypeID(), TypeID != CFGetTypeID(v17)))
  {
    v107 = 0;
    v98 = 0;
    goto LABEL_9;
  }
  v19 = (__IOSurface *)CFRetain(v17);
  v20 = v19;
  if (a1)
  {
    Length = CFDataGetLength(a1);
    if (Length > IOSurfaceGetAllocSize(v20))
    {
      if (!v20)
      {
        v107 = 0;
        v98 = 0;
        goto LABEL_10;
      }
      v98 = v20;
      CFRelease(v20);
      v107 = 0;
LABEL_9:
      v20 = 0;
LABEL_10:
      v22 = 17;
      goto LABEL_17;
    }
    v107 = 0;
    v22 = 21;
LABEL_16:
    v98 = v20;
LABEL_17:
    v99 = 2 * (getIntValue(a2, CFSTR("JPEGSingleShotDecode"), 0) != 0);
    v23 = getIntValue(a2, CFSTR("JPEGColorSpaceAware"), 1) != 0;
    v30 = (__CFString *)CFDictionaryGetValue(a2, CFSTR("JPEGSurfacePool"));
    if (v30)
    {
      v31 = v30;
      v32 = CFGetTypeID(v30);
      v33 = CMPhotoSurfacePoolGetTypeID();
      v34 = CFSTR("SurfacePoolOneShot");
      if (v31 == CFSTR("SurfacePoolOneShot") || v32 == v33)
        v34 = v31;
      v102 = v34;
    }
    v36 = CFDictionaryGetValue(a2, CFSTR("JPEGProvidedPixelBuffer"));
    if (v36)
    {
      v37 = v36;
      v38 = CVPixelBufferGetTypeID();
      if (v38 == CFGetTypeID(v37))
        v116 = (CVPixelBufferRef)CFRetain(v37);
    }
    a1 = v15;
    a7 = theData;
    if (a1)
    {
LABEL_28:
      v39 = JPEGParseJPEGInfo(a1, (uint64_t)&v110, 1, v23);
      if ((_DWORD)v39)
      {
        v25 = v39;
        v24 = 0;
      }
      else
      {
        if (!BYTE12(v112[1]))
        {
          theDataa = a1;
          *a5 = DWORD1(v111);
          v40 = a4 | 4;
          if (!v14)
            v40 = a4;
          v41 = (BYTE13(v112[1]) | v14) == 0;
          if (BYTE13(v112[1]))
            v42 = a4;
          else
            v42 = v40;
          v101 = v42;
          v43 = v22 == 3;
          v44 = v107;
          if (v22 == 3)
            v44 = 0;
          v107 = v44;
          if (v22 == 3)
            v22 = 20;
          if (v43)
            v45 = 0;
          else
            v45 = v20;
          if (v43 && BYTE13(v112[1]) | v14)
          {
            IOSurfaceUnlock(v20, 1u, 0);
            v107 = 0;
            v22 = 3;
            v45 = v20;
          }
          v24 = 0;
          v25 = 4294954516;
          if (DWORD2(v110) && HIDWORD(v110))
          {
            v46 = v110;
            v47 = DWORD1(v110);
            v114 = v110;
            v115 = DWORD1(v110);
            *a6 = v110;
            a6[1] = v47;
            v103 = v22;
            if (!a2)
            {
              v49 = 0;
              IntValue = 1;
              v54 = v47;
              v55 = v46;
              v52 = 875704422;
              v56 = 1;
              goto LABEL_85;
            }
            LODWORD(v117) = 0;
            buffer = 0;
            v109 = 0;
            FourCCValue = getFourCCValue(a2, CFSTR("JPEGOutputPixelFormat"), 875704422);
            v49 = CFDictionaryContainsKey(a2, CFSTR("JPEGOutputBytesPerRowAlignment")) != 0;
            IntValue = getIntValue(a2, CFSTR("JPEGOutputBytesPerRowAlignment"), 1);
            calculateOutputDimensions(v110, DWORD1(v110), a2, *a5, &v114, &buffer, &v117);
            if (a7 || (_DWORD)FourCCValue == 875704422)
              goto LABEL_73;
            v51 = v111;
            if ((IOSurfaceRef)v114 != buffer || v115 != v109 || (_DWORD)v117)
            {
              if ((v111 - 1) > 1
                || (_DWORD)FourCCValue != 1380401729 && (_DWORD)FourCCValue != 1111970369
                || !JPEGDeviceInterface_supportsAppleInterchangeFormats())
              {
                goto LABEL_73;
              }
              if (v51 == 2)
                v57 = 875836518;
              else
                v57 = 875704422;
              if (v51 == 1)
                v52 = 875704934;
              else
                v52 = v57;
              goto LABEL_74;
            }
            v52 = FourCCValue;
            if ((int)FourCCValue <= 1111970368)
            {
              if ((_DWORD)FourCCValue != 875704934)
              {
                v53 = 875836518;
LABEL_71:
                if ((_DWORD)FourCCValue != v53)
                {
LABEL_73:
                  v52 = 875704422;
                  goto LABEL_74;
                }
              }
            }
            else if ((_DWORD)FourCCValue != 1111970369)
            {
              if ((_DWORD)FourCCValue == 2037741158)
                goto LABEL_74;
              v53 = 1380401729;
              goto LABEL_71;
            }
            if (!JPEGDeviceInterface_supportsAppleInterchangeFormats())
              goto LABEL_73;
LABEL_74:
            v55 = v114;
            v54 = v115;
            if ((IOSurfaceRef)v114 == buffer && v115 == v109)
            {
              if ((_DWORD)v117)
                v58 = 0;
              else
                v58 = (_DWORD)FourCCValue == (_DWORD)v52;
              if (!v58 && IntValue <= 1)
                goto LABEL_81;
            }
            else if (IntValue < 2)
            {
LABEL_81:
              v56 = 0;
LABEL_84:
              v46 = v110;
              v47 = DWORD1(v110);
LABEL_85:
              if (!JPEGDeviceInterface_supportsDecodeSize(v46, v47, v111, v55, v54))
              {
                v24 = 0;
                v25 = 4294954514;
                goto LABEL_194;
              }
              if (a7)
              {
                Width = IOSurfaceGetWidth(a7);
                Height = IOSurfaceGetHeight(a7);
                if (Width != v114 || Height != v115)
                {
                  v25 = FigSignalErrorAt();
                  v24 = 0;
                  goto LABEL_194;
                }
              }
              if (v45)
              {
                v24 = 0;
                goto LABEL_118;
              }
              BytePtr = CFDataGetBytePtr(theDataa);
              v62 = a3;
              if ((BytePtr & 0x1F) != 0)
                v62 = 1;
              if (((v41 | v62) & 1) == 0)
              {
                CFDataGetLength(theDataa);
                v63 = IOSurfaceWrapClientImage();
                if (v63)
                {
                  v45 = (__IOSurface *)v63;
                  v24 = 0;
                  v103 = 2;
                  goto LABEL_118;
                }
              }
              v64 = CFDataGetLength(theDataa);
              v65 = 8;
              if (!v41)
                v65 = 0;
              v66 = v64 + v65;
              buffer = 0;
              pthread_mutex_lock(&_surfaceLock);
              if (_createJPEGInputSurface_cachedSurface_0)
              {
                UseCount = IOSurfaceGetUseCount((IOSurfaceRef)_createJPEGInputSurface_cachedSurface_0);
                v68 = a3;
                v69 = a3 ^ 1;
                if (((a3 ^ 1) & 1) == 0
                  && UseCount <= 1
                  && _createJPEGInputSurface_cachedSurface_1 >= v66)
                {
                  buffer = (IOSurfaceRef)CFRetain((CFTypeRef)_createJPEGInputSurface_cachedSurface_0);
                  IOSurfaceIncrementUseCount(buffer);
LABEL_116:
                  pthread_mutex_unlock(&_surfaceLock);
                  v45 = buffer;
                  if (buffer)
                  {
                    v24 = 1;
LABEL_118:
                    v72 = HIDWORD(v110);
                    if (v56)
                    {
                      LODWORD(buffer) = 0;
                      LODWORD(v117) = 1;
                      FigGetAlignmentForIOSurfaceOutput();
                      if (IntValue <= 1)
                        v73 = 1;
                      else
                        v73 = IntValue;
                      v74 = v117;
                      if ((int)v117 <= 0)
                      {
                        LODWORD(v117) = 1;
                        v74 = 1;
                      }
                      if (v49)
                        v75 = v73;
                      else
                        v75 = v74;
                      v76 = CMPhotoLeastCommonMultiple(4, v75);
                    }
                    else
                    {
                      v76 = DWORD2(v110);
                    }
                    v77 = v107;
                    v78 = v101;
                    if (a7)
                    {
                      if (v116)
                      {
                        CVPixelBufferGetIOSurface(v116);
                        v22 = v103;
                        if (!FigCFEqual())
                        {
                          v25 = 4294950306;
LABEL_148:
                          a1 = theDataa;
                          goto LABEL_169;
                        }
                      }
                      else
                      {
                        v81 = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a7, 0, &v116);
                        v22 = v103;
                        if ((_DWORD)v81)
                        {
                          v25 = v81;
                          goto LABEL_148;
                        }
                      }
                      goto LABEL_149;
                    }
                    buffer = 0;
                    v117 = 0;
                    v118[0] = 0;
                    v79 = CMPhotoSurfacePoolCreateImageSurface((uint64_t)v102, v52, v114, v115, 1, v76, v72, 1, 0, v99, 0, &buffer, v118);
                    if ((_DWORD)v79)
                    {
                      v25 = v79;
                    }
                    else
                    {
                      v82 = v118[0];
                      v25 = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], buffer, 0, &v117);
                      if (!(_DWORD)v25)
                      {
                        v80 = v82 == 0;
                        v116 = v117;
                        v117 = 0;
                        goto LABEL_140;
                      }
                    }
                    v80 = 0;
LABEL_140:
                    v22 = v103;
                    if (buffer)
                    {
                      IOSurfaceDecrementUseCount(buffer);
                      if (buffer)
                        CFRelease(buffer);
                    }
                    if (v117)
                      CFRelease(v117);
                    if (v80)
                      v78 = v101 | 2;
                    if ((_DWORD)v25)
                      goto LABEL_148;
LABEL_149:
                    IOSurface = CVPixelBufferGetIOSurface(v116);
                    if ((v22 & 0x10) != 0)
                    {
                      IOSurfaceLock(v45, 0, 0);
                      BaseAddress = IOSurfaceGetBaseAddress(v45);
                      v85 = CFDataGetBytePtr(theDataa);
                      v86 = CFDataGetLength(theDataa);
                      memcpy(BaseAddress, v85, v86);
                      if (v41)
                      {
                        v87 = IOSurfaceGetBaseAddress(v45);
                        v88 = (CFIndex)v87 + CFDataGetLength(theDataa);
                        v89 = *(unsigned __int8 *)(v88 - 1) == 255;
                        if (*(unsigned __int8 *)(v88 - 1) == 255)
                          v90 = -39;
                        else
                          v90 = -1;
                        *(_BYTE *)v88 = v90;
                        if (v89)
                          v91 = -1;
                        else
                          v91 = -39;
                        *(_BYTE *)(v88 + 1) = v91;
                        if (v89)
                          v92 = -39;
                        else
                          v92 = 0;
                        *(_BYTE *)(v88 + 2) = v92;
                        *(_DWORD *)(v88 + 3) = 0;
                        *(_BYTE *)(v88 + 7) = 0;
                      }
                      IOSurfaceUnlock(v45, 0, 0);
                      v22 = v103;
                    }
                    if (v107)
                      IOSurfaceUnlock(v45, 1u, 0);
                    v93 = IOSurfaceGetWidth(IOSurface);
                    v94 = IOSurfaceGetHeight(IOSurface);
                    v95 = JPEGDecompressSurface(0, 0, (uint64_t)v45, 0, (uint64_t)IOSurface, (unsigned int *)&v110, v78, 0, v93, v94, 0, 0);
                    a1 = theDataa;
                    if ((_DWORD)v95)
                    {
                      v25 = v95;
                      v77 = 0;
                    }
                    else
                    {
                      if (*(_QWORD *)((char *)v112 + 12))
                        CVBufferSetAttachment(v116, (CFStringRef)*MEMORY[0x1E0CA8CD8], *(CFTypeRef *)((char *)v112 + 12), kCVAttachmentMode_ShouldPropagate);
                      v77 = 0;
                      v25 = 0;
                      *v97 = CFRetain(v116);
                    }
LABEL_169:
                    if (v22 != 3)
                    {
                      if (v22 != 20)
                        goto LABEL_175;
                      IOSurfaceUnlock(v98, 1u, 0);
                      if (v98)
                        CFRelease(v98);
                    }
                    if (a1)
                      CFRelease(a1);
LABEL_175:
                    if (!v45)
                      goto LABEL_181;
                    if (!v77)
                      goto LABEL_178;
                    goto LABEL_177;
                  }
                  v25 = FigSignalErrorAt();
                  v24 = 1;
LABEL_194:
                  a1 = theDataa;
                  v77 = v107;
                  v22 = v103;
                  goto LABEL_169;
                }
                if (a3)
                  v66 = (unint64_t)(float)((float)v66 * 1.1);
                if (_createJPEGInputSurface_cachedSurface_0)
                {
                  IOSurfaceDecrementUseCount((IOSurfaceRef)_createJPEGInputSurface_cachedSurface_0);
                  CFRelease((CFTypeRef)_createJPEGInputSurface_cachedSurface_0);
                  v68 = a3;
                  _createJPEGInputSurface_cachedSurface_0 = 0;
                  _createJPEGInputSurface_cachedSurface_1 = 0;
                }
              }
              else
              {
                v68 = a3;
                v69 = a3 ^ 1;
                if (a3)
                  v66 = (unint64_t)(float)((float)v66 * 1.1);
              }
              if (v68)
                v70 = 0;
              else
                v70 = v99;
              v71 = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)v102, v66, v70, &buffer);
              if ((v69 & 1) == 0 && !v71)
              {
                IOSurfaceIncrementUseCount(buffer);
                _createJPEGInputSurface_cachedSurface_0 = (uint64_t)CFRetain(buffer);
                _createJPEGInputSurface_cachedSurface_1 = v66;
              }
              goto LABEL_116;
            }
            v56 = 1;
            goto LABEL_84;
          }
LABEL_190:
          v77 = v107;
          goto LABEL_169;
        }
        v24 = 0;
        v25 = 4294954386;
      }
LABEL_189:
      v45 = v20;
      goto LABEL_190;
    }
LABEL_12:
    v24 = 0;
    v25 = 4294954516;
    goto LABEL_189;
  }
  v107 = 1;
  IOSurfaceLock(v19, 1u, 0);
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v27 = (const UInt8 *)IOSurfaceGetBaseAddress(v20);
  AllocSize = IOSurfaceGetAllocSize(v20);
  v29 = CFDataCreateWithBytesNoCopy(v26, v27, AllocSize, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (v29)
  {
    v15 = v29;
    v22 = 3;
    goto LABEL_16;
  }
  v25 = 4294954510;
  if (!v20)
    goto LABEL_181;
  v45 = v20;
  v24 = 0;
LABEL_177:
  IOSurfaceUnlock(v45, 1u, 0);
LABEL_178:
  if (v24)
    IOSurfaceDecrementUseCount(v45);
  CFRelease(v45);
LABEL_181:
  if (v116)
    CFRelease(v116);
  if (*(_QWORD *)((char *)v112 + 12))
    CFRelease(*(CFTypeRef *)((char *)v112 + 12));
  return v25;
}

unint64_t calculateOutputDimensions(unint64_t a1, unint64_t a2, const __CFDictionary *a3, int a4, _QWORD *a5, _QWORD *a6, _DWORD *a7)
{
  int IntValue;
  unsigned __int8 v15;
  unsigned __int8 v16;

  if (a3)
  {
    IntValue = getIntValue(a3, (const void *)*MEMORY[0x1E0CBD2A0], 0);
    v15 = getIntValue(a3, CFSTR("JPEGRelaxMaxPixelSize"), 0);
    v16 = getIntValue(a3, (const void *)*MEMORY[0x1E0CBD190], 0);
  }
  else
  {
    IntValue = 0;
    v15 = 0;
    v16 = 0;
  }
  return JPEGCalculateOutputDimensions(a1, a2, IntValue, v15, v16, a4, a5, a6, 0, a7, 0);
}

uint64_t scaleAndConvertPixelBuffer(__CVBuffer *a1, unint64_t a2, unint64_t a3, int a4, int a5, const __CFDictionary *a6, __CVBuffer **a7)
{
  __CVBuffer *v13;
  size_t Width;
  size_t Height;
  int v16;
  const __CFDictionary *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *Mutable;
  const void *v27;
  CFDataRef v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef *v33;
  __CVBuffer *v34;
  uint64_t v35;
  uint64_t IOSurfaceBackedCVPixelBufferWithAttributes;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  int v40;
  __CVBuffer **v41;
  int v42;
  int v43;
  __CVBuffer *v44;
  unint64_t v45;
  __CVBuffer *destinationBuffer;
  VTPixelTransferSessionRef pixelTransferSessionOut;

  v13 = a1;
  pixelTransferSessionOut = 0;
  destinationBuffer = 0;
  v44 = *a7;
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(v13);
  v41 = a7;
  v45 = a3;
  if (a5)
  {
    v16 = a4;
    v17 = a6;
    v18 = Height;
    if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
      v19 = 0x4000;
    else
      v19 = 4092;
    v20 = JPEGDeviceInterface_supportsAppleInterchangeFormats() == 0;
    LODWORD(Height) = v18;
    if (v20)
      v21 = 4092;
    else
      v21 = 0x4000;
    v22 = a3;
    if ((a5 & 4) != 0)
      v23 = a3;
    else
      v23 = a2;
    if ((a5 & 4) != 0)
      v22 = a2;
    if (Width > v19
      || v18 > v21
      || ((float)((float)v23 / (float)Width) >= 0.25 ? (v24 = (float)((float)v22 / (float)v18) < 0.25) : (v24 = 1), v24))
    {
      v40 = 1;
      v45 = v22;
      a2 = v23;
    }
    else
    {
      v40 = 0;
    }
    a6 = v17;
    a4 = v16;
  }
  else
  {
    v40 = 0;
  }
  v42 = Height;
  v43 = Width;
  if (a4 == 1380401729)
  {
    if (a6)
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, a6);
    else
      MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    a6 = MutableCopy;
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    setIntValue(Mutable, (const void *)*MEMORY[0x1E0CA9160], 1380401729);
    setIntValue(Mutable, (const void *)*MEMORY[0x1E0CA90E8], 32);
    v27 = (const void *)*MEMORY[0x1E0CA90F8];
    v28 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], scaleAndConvertPixelBuffer_kBlack_32RGBA, 4);
    CFDictionarySetValue(Mutable, v27, v28);
    if (v28)
      CFRelease(v28);
    CFDictionarySetValue(a6, (const void *)*MEMORY[0x1E0CA9038], Mutable);
    CFRelease(Mutable);
  }
  v29 = v40 ^ 1;
  if (!a5)
    v29 = 0;
  if ((v29 & 1) != 0)
  {
    v40 = 0;
    goto LABEL_39;
  }
  v30 = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  if ((_DWORD)v30)
  {
LABEL_40:
    v31 = v30;
    goto LABEL_41;
  }
  if (a5 || !v44)
  {
    IOSurfaceBackedCVPixelBufferWithAttributes = FigCreateIOSurfaceBackedCVPixelBufferWithAttributes();
    if ((_DWORD)IOSurfaceBackedCVPixelBufferWithAttributes)
    {
      v31 = IOSurfaceBackedCVPixelBufferWithAttributes;
      VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
      if (pixelTransferSessionOut)
        CFRelease(pixelTransferSessionOut);
LABEL_41:
      if (a4 != 1380401729)
        return v31;
LABEL_42:
      CFRelease(a6);
      return v31;
    }
  }
  else
  {
    destinationBuffer = v44;
  }
  VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED808], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  v37 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v13, destinationBuffer);
  v31 = v37;
  if ((_DWORD)v37
    && v37 >> 26 == 56
    && CVPixelBufferGetWidth(v13) == a2
    && CVPixelBufferGetHeight(v13) == v45)
  {
    v38 = (const void *)*MEMORY[0x1E0C9AE40];
    VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED800], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
    VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x1E0CED7F8], v38);
    v31 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v13, destinationBuffer);
  }
  VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (v40)
    v13 = destinationBuffer;
  if (a5)
  {
LABEL_39:
    v30 = VTImageRotationSessionCreate();
    if (!(_DWORD)v30)
    {
      v33 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if ((a5 & 1) != 0)
        VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E0CED6E0], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      if ((a5 & 2) != 0)
        VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E0CED6D8], *v33);
      v34 = v44;
      if (v44)
      {
        destinationBuffer = v44;
      }
      else
      {
        v39 = FigCreateIOSurfaceBackedCVPixelBufferWithAttributes();
        if ((_DWORD)v39)
        {
          v31 = v39;
          MEMORY[0x1A85D07F8](0);
          if (a4 != 1380401729)
            return v31;
          goto LABEL_42;
        }
      }
      VTSessionSetProperty(0, (CFStringRef)*MEMORY[0x1E0CED6D0], *v33);
      if (((v43 | v42) & 1) != 0)
        v35 = VTPixelRotationSessionRotateSubImage();
      else
        v35 = MEMORY[0x1A85D0804](0, v13, destinationBuffer);
      v31 = v35;
      MEMORY[0x1A85D07F8](0);
      goto LABEL_68;
    }
    goto LABEL_40;
  }
  v34 = v44;
LABEL_68:
  if (a4 == 1380401729)
    CFRelease(a6);
  if ((_DWORD)v31)
  {
    if (destinationBuffer != v34)
      CVPixelBufferRelease(destinationBuffer);
  }
  else
  {
    if (v40)
      CFRelease(v13);
    v31 = 0;
    *v41 = destinationBuffer;
  }
  return v31;
}

uint64_t CMPhotoJPEGCreateCGImageFromJPEG(const __CFData *a1, const __CFDictionary *a2, CGImageRef *a3)
{
  int IntValue;
  unsigned __int8 v7;
  int v8;
  __CFDictionary *v9;
  int v10;
  uint64_t CGImageWithPixelBuffer;
  void *v12;
  uint64_t v13;
  __CFDictionary *ModifiedOptionsWithPixelFormat;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  CFTypeRef cf;
  CFTypeRef v23;

  cf = 0;
  v23 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 1;
  v17 = 0;
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  if (!jpegService())
  {
    v13 = 4294954514;
    goto LABEL_19;
  }
  if (a2)
  {
    IntValue = getIntValue(a2, CFSTR("JPEGCacheInputSurface"), 0);
    v7 = getIntValue(a2, CFSTR("JPEGBackCGImageWithIOSurface"), 0);
    v8 = getIntValue(a2, CFSTR("JPEGHighSpeedDecode"), 0);
  }
  else
  {
    v7 = 0;
    IntValue = 0;
    v8 = 1;
  }
  if (!JPEGDeviceInterface_supportsAppleInterchangeFormats() || _needsTransformAfterDecode(a1, a2))
  {
    v9 = 0;
LABEL_10:
    v10 = 1;
    goto LABEL_11;
  }
  ModifiedOptionsWithPixelFormat = _createModifiedOptionsWithPixelFormat(a2, 1111970369);
  v9 = ModifiedOptionsWithPixelFormat;
  if (!ModifiedOptionsWithPixelFormat)
    goto LABEL_10;
  v10 = 0;
  a2 = ModifiedOptionsWithPixelFormat;
LABEL_11:
  v20 = 0;
  v21 = 0;
  CGImageWithPixelBuffer = _createPixelBufferFromJPEG(a1, a2, IntValue != 0, v8 != 0, &v16, &v20, 0, &cf);
  if ((_DWORD)CGImageWithPixelBuffer)
    goto LABEL_17;
  if (v10)
  {
    calculateOutputDimensions(v20, v21, a2, v16, 0, &v18, &v17);
    CGImageWithPixelBuffer = scaleAndConvertPixelBuffer((__CVBuffer *)cf, v18, v19, 1111970369, v17, 0, (__CVBuffer **)&v23);
    if ((_DWORD)CGImageWithPixelBuffer)
      goto LABEL_17;
    v12 = (void *)v23;
  }
  else
  {
    v12 = (void *)CFRetain(cf);
    v23 = v12;
  }
  CGImageWithPixelBuffer = CMPhotoCreateCGImageWithPixelBuffer((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (CVPixelBufferRef)v12, v7, a3);
LABEL_17:
  v13 = CGImageWithPixelBuffer;
  if (v9)
    CFRelease(v9);
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  return v13;
}

BOOL _needsTransformAfterDecode(const __CFData *a1, const __CFDictionary *a2)
{
  int IntValue;
  int v5;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v11 = 0;
  v12 = 0;
  v10 = 0;
  if (!a2)
    return 0;
  IntValue = getIntValue(a2, (const void *)*MEMORY[0x1E0CBD2A0], 0);
  v5 = getIntValue(a2, (const void *)*MEMORY[0x1E0CBD190], 0);
  result = 0;
  if (IntValue | v5)
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v8 = 0;
    v9 = 0;
    JPEGParseJPEGInfo(a1, (uint64_t)&v13, 0, 0);
    calculateOutputDimensions(v13, DWORD1(v13), a2, SDWORD1(v14), &v8, &v11, &v10);
    return v10 || v8 != v11 || v9 != v12;
  }
  return result;
}

__CFDictionary *_createModifiedOptionsWithPixelFormat(const void *a1, int a2)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v6;

  if (a1)
  {
    if (getFourCCValue((const __CFDictionary *)a1, CFSTR("JPEGOutputPixelFormat"), 0) == a2)
      return (__CFDictionary *)CFRetain(a1);
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)a1);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v6 = MutableCopy;
  if (MutableCopy)
    setIntValue(MutableCopy, CFSTR("JPEGOutputPixelFormat"), a2);
  return v6;
}

uint64_t CMPhotoJPEGDecodeJPEGIntoSurface(const __CFData *a1, const __CFDictionary *a2, __IOSurface *a3)
{
  signed int PixelFormat;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  __CFDictionary *ModifiedOptionsWithPixelFormat;
  __CFDictionary *v12;
  uint64_t PixelBufferWithSurface;
  size_t Width;
  size_t Height;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  CFTypeRef cf;
  CFTypeRef v22;

  cf = 0;
  v22 = 0;
  v18 = 1;
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  if (!jpegService())
  {
    v8 = 4294954514;
    goto LABEL_20;
  }
  if (!a3)
  {
    v8 = 4294954516;
    goto LABEL_20;
  }
  PixelFormat = IOSurfaceGetPixelFormat(a3);
  v7 = PixelFormat;
  v8 = 4294954516;
  if (PixelFormat > 1380401728)
  {
    if (PixelFormat != 1999843442)
    {
      v9 = 1380401729;
LABEL_10:
      if (PixelFormat != v9)
        goto LABEL_20;
    }
  }
  else if (PixelFormat != 875704422)
  {
    v9 = 1111970369;
    goto LABEL_10;
  }
  v19 = 0;
  v20 = 0;
  if (!JPEGDeviceInterface_supportsAppleInterchangeFormats()
    || (v10 = _needsTransformAfterDecode(a1, a2), v7 == 1999843442)
    || v10)
  {
    PixelBufferWithSurface = _createPixelBufferFromJPEG(a1, a2, 0, 1, &v18, &v19, 0, &v22);
    if (!(_DWORD)PixelBufferWithSurface)
    {
      Width = IOSurfaceGetWidth(a3);
      Height = IOSurfaceGetHeight(a3);
      v17 = 0;
      calculateOutputDimensions(v19, v20, a2, v18, 0, 0, &v17);
      PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3, 0, (CVPixelBufferRef *)&cf);
      if (!(_DWORD)PixelBufferWithSurface)
        PixelBufferWithSurface = scaleAndConvertPixelBuffer((__CVBuffer *)v22, Width, Height, v7, v17, 0, (__CVBuffer **)&cf);
    }
    v8 = PixelBufferWithSurface;
  }
  else
  {
    ModifiedOptionsWithPixelFormat = _createModifiedOptionsWithPixelFormat(a2, v7);
    if (ModifiedOptionsWithPixelFormat)
    {
      v12 = ModifiedOptionsWithPixelFormat;
      v8 = _createPixelBufferFromJPEG(a1, ModifiedOptionsWithPixelFormat, 0, 1, &v18, &v19, a3, &v22);
      CFRelease(v12);
    }
    else
    {
      v8 = 4294954510;
    }
  }
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  return v8;
}

uint64_t CMPhotoJPEGCreateCGImageFromIOSurface(__IOSurface *a1, int a2, CGImageRef *a3)
{
  if ((sCMPhotoJPEGDecoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGDecoderTraceInitialized = 1;
  if (a1)
    return CMPhotoCreateCGImageWithSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, a2, a3);
  else
    return 4294954516;
}

unint64_t CMPhotoJPEGCalculateOutputDimensions(unint64_t a1, unint64_t a2, const __CFDictionary *a3, int a4, _QWORD *a5, _QWORD *a6)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  result = calculateOutputDimensions(a1, a2, a3, a4, 0, &v10, 0);
  v9 = v11;
  *a5 = v10;
  *a6 = v9;
  return result;
}

__CFArray *CMPhotoJPEGCreateNativeDecodePixelFormatArray()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  arrayAppendPixelFormatValue(Mutable, 875704422);
  arrayAppendPixelFormatValue(Mutable, 2037741158);
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    arrayAppendPixelFormatValue(Mutable, 1111970369);
    arrayAppendPixelFormatValue(Mutable, 1380401729);
    arrayAppendPixelFormatValue(Mutable, 875704934);
    arrayAppendPixelFormatValue(Mutable, 875836518);
  }
  return Mutable;
}

void arrayAppendPixelFormatValue(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(a1, v3);
  if (v3)
    CFRelease(v3);
}

double CMPhotoJPEGGetMaximumHardwareOutputDimensions()
{
  return 16384.0;
}

uint64_t CMPhotoJPEGShouldUseHardwareDecode(int a1, const __CFDictionary *a2, double a3, double a4)
{
  uint64_t result;
  int IntValue;
  const __CFBoolean *Value;
  const __CFBoolean *v12;
  CFTypeID v13;
  int can_use_foreground_hw;
  int v15;

  result = jpegService();
  if ((_DWORD)result)
  {
    if (!a2)
      goto LABEL_22;
    IntValue = getIntValue(a2, (const void *)*MEMORY[0x1E0CBD2A0], 0);
    result = 0;
    if (!IntValue || IntValue >= 16)
    {
      Value = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("JPEGRequireForegroundRunning"));
      if (!Value
        || (v12 = Value, v13 = CFGetTypeID(Value), v13 != CFBooleanGetTypeID())
        || !CFBooleanGetValue(v12)
        || (pthread_once(&sLoadPretendForegroundOnce, (void (*)(void))_loadPretendForegroundOnce),
            (sPretendForeground & 1) != 0)
        || (getpid(), can_use_foreground_hw = proc_can_use_foreground_hw(), result = 0, can_use_foreground_hw == 1))
      {
LABEL_22:
        if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
        {
          if (a1)
            v15 = 0xFFFF;
          else
            v15 = 92415;
        }
        else if (a1)
        {
          v15 = 92415;
        }
        else
        {
          v15 = 0x3FFFF;
        }
        return v15 < (int)(a3 * a4);
      }
    }
  }
  return result;
}

uint64_t CMPhotoJPEGGetDecodeTiming()
{
  return 0;
}

void setIntValue(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  if (v5)
    CFRelease(v5);
}

const char *_loadPretendForegroundOnce()
{
  const char *result;

  result = getenv("JPEG_PRETEND_FOREGROUND_APP");
  if (result)
  {
    result = (const char *)atoi(result);
    if ((_DWORD)result)
      sPretendForeground = 1;
  }
  return result;
}

uint64_t CMPhotoUpdateImageProperties(CFDictionaryRef *a1, int a2, int a3, double a4, double a5)
{
  CFDictionaryRef v6;
  double *v11;
  const void *v13;
  const __CFDictionary *Value;
  const __CFAllocator *v15;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v17;
  uint64_t updated;
  uint64_t v20;

  if (!a1)
    return 4294950306;
  v6 = *a1;
  if (!*a1)
    return 4294950306;
  v11 = (double *)MEMORY[0x1E0C9D820];
  if (!(a3 | a2) && a4 == *MEMORY[0x1E0C9D820] && a5 == *(double *)(MEMORY[0x1E0C9D820] + 8))
    return 0;
  v13 = (const void *)*MEMORY[0x1E0CBD090];
  Value = (const __CFDictionary *)CFDictionaryGetValue(*a1, (const void *)*MEMORY[0x1E0CBD090]);
  v15 = CFGetAllocator(v6);
  MutableCopy = CFDictionaryCreateMutableCopy(v15, 0, v6);
  if (!MutableCopy)
    return 4294950305;
  v17 = MutableCopy;
  if (Value)
  {
    Value = CFDictionaryCreateMutableCopy(v15, 0, Value);
    if (!Value)
    {
      v20 = 4294950305;
      goto LABEL_30;
    }
    CFDictionarySetValue(v17, v13, Value);
  }
  if (a2)
  {
    CFDictionaryRemoveValue(v17, (const void *)*MEMORY[0x1E0CBCFF0]);
    if (!Value)
      goto LABEL_18;
    CFDictionaryRemoveValue(Value, (const void *)*MEMORY[0x1E0CBD0C0]);
  }
  if (a3 && Value)
  {
    CFDictionaryRemoveValue(Value, (const void *)*MEMORY[0x1E0CBD0E8]);
    CFDictionaryRemoveValue(Value, (const void *)*MEMORY[0x1E0CBD0E0]);
  }
LABEL_18:
  if (a4 != *v11 || a5 != v11[1])
  {
    updated = _updateImagePropertiesWithGivenDimensions(v17, a4, a5);
    if ((_DWORD)updated)
    {
      v20 = updated;
LABEL_30:
      CFRelease(v17);
      if (!Value)
        return v20;
      goto LABEL_24;
    }
  }
  CFRelease(v6);
  v20 = 0;
  *a1 = v17;
  if (Value)
LABEL_24:
    CFRelease(Value);
  return v20;
}

uint64_t _updateImagePropertiesWithGivenDimensions(const __CFDictionary *a1, double a2, double a3)
{
  int v6;
  uint64_t result;
  const void *v8;
  const __CFDictionary *v9;
  const void *v10;
  const void *v11;
  __CFDictionary *MutableCopy;
  __CFDictionary *v13;
  uint64_t v14;

  v6 = (int)a2;
  result = FigCFDictionarySetInt32();
  if (!(_DWORD)result)
  {
    result = FigCFDictionarySetInt32();
    if (!(_DWORD)result)
    {
      v8 = (const void *)*MEMORY[0x1E0CBCB50];
      result = (uint64_t)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CBCB50]);
      if (result)
      {
        v9 = (const __CFDictionary *)result;
        v14 = 0;
        v10 = (const void *)*MEMORY[0x1E0CBCC28];
        CMPhotoCFDictionaryGetInt32IfPresent((CFDictionaryRef)result, (const void *)*MEMORY[0x1E0CBCC28], (char *)&v14 + 4);
        v11 = (const void *)*MEMORY[0x1E0CBCC30];
        CMPhotoCFDictionaryGetInt32IfPresent(v9, (const void *)*MEMORY[0x1E0CBCC30], &v14);
        if (a2 != (double)SHIDWORD(v14) || a3 != (double)(int)v14)
        {
          MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9);
          if (!MutableCopy)
            return 4294950305;
          v13 = MutableCopy;
          CMPhotoCFDictionarySetInt32(MutableCopy, v10, v6);
          CMPhotoCFDictionarySetInt32(v13, v11, (int)a3);
          CFDictionarySetValue(a1, v8, v13);
          CFRelease(v13);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t CMPhotoCreateImagePropertiesFromData(const __CFAllocator *a1, double *a2, _QWORD *a3, uint64_t a4, const __CFData *a5, const __CFData *a6, const void *a7, CGMutableImageMetadataRef *a8, __CFDictionary **a9)
{
  uint64_t DataWithPrefix;
  const __CFData *v17;
  const __CFData *v18;
  uint64_t v19;
  __CFDictionary *v20;
  const __CFDictionary *MutableCopy;
  uint64_t updated;
  const void *v23;
  const void *v24;
  const void *v25;
  const __CFDictionary *Value;
  const __CFDictionary *v27;
  uint64_t i;
  uint64_t v29;
  CGMutableImageMetadataRef v31;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v33;
  CFTypeRef cf[5];
  UInt8 bytes[16];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  cf[0] = 0;
  v31 = 0;
  Mutable = 0;
  if (!((unint64_t)a8 | (unint64_t)a9))
  {
    v20 = 0;
    v19 = 4294950306;
    goto LABEL_42;
  }
  if (!a5)
  {
    if (!a6)
      goto LABEL_10;
    goto LABEL_9;
  }
  DataWithPrefix = _createDataWithPrefix(a1, (const UInt8 *)"http://ns.adobe.com/xap/1.0/", 29, a5, (__CFData **)cf);
  if ((_DWORD)DataWithPrefix)
    goto LABEL_40;
  if (a6)
  {
LABEL_9:
    DataWithPrefix = _createDataWithPrefix(a1, (const UInt8 *)"Photoshop 3.0", 14, a6, (__CFData **)&v33);
    if (!(_DWORD)DataWithPrefix)
      goto LABEL_10;
LABEL_40:
    v19 = DataWithPrefix;
LABEL_41:
    v20 = 0;
    goto LABEL_42;
  }
  *(_DWORD *)&bytes[8] = 0;
  *(_QWORD *)bytes = 0x4044D494238;
  v17 = CFDataCreate(0, bytes, 12);
  if (!v17)
  {
    v19 = 4294950305;
    goto LABEL_41;
  }
  v18 = v17;
  v19 = _createDataWithPrefix(a1, (const UInt8 *)"Photoshop 3.0", 14, v17, (__CFData **)&v33);
  CFRelease(v18);
  if ((_DWORD)v19)
    goto LABEL_41;
LABEL_10:
  if (!a7 && !a4 && !v33 && !cf[0])
  {
    if (a9 && (Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0
      || a8 && (v31 = CGImageMetadataCreateMutable()) == 0)
    {
      v20 = 0;
LABEL_53:
      v19 = 4294950305;
      goto LABEL_42;
    }
    goto LABEL_20;
  }
  DataWithPrefix = CGImageCreateMetadataFromData();
  if ((_DWORD)DataWithPrefix)
    goto LABEL_40;
LABEL_20:
  if (!a9)
    goto LABEL_38;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v20 = MutableCopy;
  if (!MutableCopy)
    goto LABEL_53;
  if (!a2 || (updated = _updateImagePropertiesWithGivenDimensions(MutableCopy, *a2, a2[1]), !(_DWORD)updated))
  {
    if (!a3 || (updated = CMPhotoCFDictionarySetSize(v20, *MEMORY[0x1E0CBCA08], *a3), !(_DWORD)updated))
    {
      if (a7)
        CFDictionarySetValue(v20, (const void *)*MEMORY[0x1E0CBC770], a7);
      *(_OWORD *)bytes = 0u;
      v36 = 0u;
      v23 = (const void *)*MEMORY[0x1E0CBCEE0];
      cf[1] = *(CFTypeRef *)MEMORY[0x1E0CBCED0];
      cf[2] = v23;
      v24 = (const void *)*MEMORY[0x1E0CBCF20];
      cf[3] = *(CFTypeRef *)MEMORY[0x1E0CBCEE8];
      cf[4] = v24;
      v25 = (const void *)*MEMORY[0x1E0CBCED8];
      Value = (const __CFDictionary *)CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E0CBCED8]);
      if (Value)
      {
        v27 = Value;
        if (CFDictionaryGetCount(Value) == 4)
        {
          CFDictionaryGetKeysAndValues(v27, (const void **)bytes, 0);
          for (i = 0; i != 4; ++i)
          {
            v29 = 0;
            while (!FigCFEqual())
            {
              v29 += 8;
              if (v29 == 32)
                goto LABEL_37;
            }
          }
          CFDictionaryRemoveValue(v20, v25);
        }
      }
LABEL_37:
      *a9 = v20;
LABEL_38:
      v19 = 0;
      if (a8)
      {
        v20 = 0;
        *a8 = v31;
        v31 = 0;
        goto LABEL_42;
      }
      goto LABEL_41;
    }
  }
  v19 = updated;
LABEL_42:
  if (cf[0])
    CFRelease(cf[0]);
  if (v33)
    CFRelease(v33);
  if (Mutable)
    CFRelease(Mutable);
  if (v31)
    CFRelease(v31);
  if (v20)
    CFRelease(v20);
  return v19;
}

uint64_t _createDataWithPrefix(const __CFAllocator *a1, const UInt8 *a2, CFIndex a3, const __CFData *a4, __CFData **a5)
{
  __CFData *Mutable;
  __CFData *v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t result;

  Mutable = CFDataCreateMutable(a1, 0);
  if (!Mutable)
    return 4294950305;
  v10 = Mutable;
  CFDataAppendBytes(Mutable, a2, a3);
  BytePtr = CFDataGetBytePtr(a4);
  Length = CFDataGetLength(a4);
  CFDataAppendBytes(v10, BytePtr, Length);
  result = 0;
  *a5 = v10;
  return result;
}

uint64_t CMPhotoImagePropertiesCreateDataRepresentation(const __CFAllocator *a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  uint64_t DataFromMetadata;
  uint64_t v8;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v6 = Mutable;
  DataFromMetadata = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E0CBCC28], a2);
  if (!(_DWORD)DataFromMetadata)
  {
    DataFromMetadata = CMPhotoCFDictionarySetSize(v6, *MEMORY[0x1E0CBCC30], a3);
    if (!(_DWORD)DataFromMetadata)
      DataFromMetadata = CGImageCreateDataFromMetadata();
  }
  v8 = DataFromMetadata;
  CFRelease(v6);
  return v8;
}

uint64_t CMPhotoExifDetectTIFFHeaderOffset(const __CFData *a1, _BYTE *a2, _DWORD *a3)
{
  const UInt8 *BytePtr;

  if ((unint64_t)CFDataGetLength(a1) > 3)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (*(_DWORD *)(BytePtr + 6) == 2771273 || *(_DWORD *)(BytePtr + 6) == 704662861)
    {
      *a3 = 6;
    }
    else
    {
      if (*(_DWORD *)BytePtr != 2771273 && *(_DWORD *)BytePtr != 704662861)
      {
        *a2 = 0;
        return 0;
      }
      *a3 = 0;
    }
    *a2 = 1;
    return 0;
  }
  return FigSignalErrorAt();
}

BOOL CMPhotoParseExifOrientationFromTIFF(OpaqueCMBlockBuffer *a1, size_t a2, unint64_t a3, int *a4)
{
  BOOL v4;
  BOOL v6;

  v6 = 0;
  if (CMPhotoParseExifFromTIFF(a1, a2, a3, &v6, a4, 0, 0, 0, 0))
    v4 = 1;
  else
    v4 = !v6;
  return !v4;
}

uint64_t CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix(int a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeID v6;

  if (!a5)
    return 0;
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)cf) == 9)
    {
      if (FigCFArrayGetDoubleAtIndex() && FigCFArrayGetDoubleAtIndex())
        return FigSignalErrorAt();
      else
        return 4294950306;
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(const __CFAllocator *a1, unint64_t a2, unint64_t a3, int a4, __CFArray **a5)
{
  uint64_t v6;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  double v12;
  double v13;
  uint64_t appended;

  if (!a5)
    return 0;
  v6 = 4294950306;
  if (a4 <= 0x2BF20 && a2 && a3)
  {
    Mutable = CFArrayCreateMutable(a1, 9, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      return 4294950305;
    v11 = Mutable;
    v12 = __tanpi((double)a4 / 1000.0 / 360.0);
    v13 = (double)a2 / (v12 + v12);
    appended = CMPhotoCFArrayAppendDouble(v11, v13);
    if ((_DWORD)appended
      || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended)
      || (appended = CMPhotoCFArrayAppendDouble(v11, (double)a2 * 0.5), (_DWORD)appended)
      || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended)
      || (appended = CMPhotoCFArrayAppendDouble(v11, v13), (_DWORD)appended)
      || (appended = CMPhotoCFArrayAppendDouble(v11, (double)a3 * 0.5), (_DWORD)appended)
      || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended)
      || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended))
    {
      v6 = appended;
    }
    else
    {
      v6 = CMPhotoCFArrayAppendDouble(v11, 1.0);
      if (!(_DWORD)v6)
      {
        *a5 = v11;
        return v6;
      }
    }
    CFRelease(v11);
  }
  return v6;
}

uint64_t CMPhotoGetHorizontalFOVFromIntrinsicsArray(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeID v5;

  if (!a4)
    return 0;
  if (cf)
  {
    v5 = CFGetTypeID(cf);
    if (v5 == CFArrayGetTypeID()
      && CFArrayGetCount((CFArrayRef)cf) == 9
      && (!FigCFArrayGetDoubleAtIndex() || !FigCFArrayGetDoubleAtIndex()))
    {
      return 4294950306;
    }
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCreateFigExtrinsicsDictFromExtrinsics(const __CFAllocator *a1, unint64_t a2, unint64_t a3, int a4, __CFDictionary **a5)
{
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  __CFArray *v13;
  CFTypeID v14;
  uint64_t v15;
  double v16;
  uint64_t appended;
  int v18;
  const __CFString *v19;
  uint64_t v20;
  void *value;

  value = 0;
  if (!a5)
    return 0;
  if (a2 | a3)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      v12 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CC3F38], 0);
      if ((_DWORD)v12)
      {
        v20 = v12;
        v13 = 0;
        goto LABEL_34;
      }
      v13 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      if (!v13)
      {
        v20 = 4294950305;
        goto LABEL_34;
      }
      if (a2)
      {
        v14 = CFGetTypeID((CFTypeRef)a2);
        if (v14 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a2) == 3)
        {
          v15 = 0;
          while (FigCFArrayGetDoubleAtIndex())
          {
            v16 = round(0.0 * 1000000.0);
            if (v16 < -2147483650.0 || v16 > 2147483650.0)
              goto LABEL_32;
            appended = CMPhotoCFArrayAppendInt32(v13, (int)v16);
            if ((_DWORD)appended)
              goto LABEL_33;
            if (++v15 == 3)
              goto LABEL_19;
          }
          v20 = 4294950306;
LABEL_34:
          CFRelease(v11);
          if (v13)
LABEL_27:
            CFRelease(v13);
          goto LABEL_28;
        }
LABEL_32:
        appended = FigSignalErrorAt();
LABEL_33:
        v20 = appended;
        goto LABEL_34;
      }
      v18 = 3;
      do
      {
        appended = CMPhotoCFArrayAppendInt32(v13, 0);
        if ((_DWORD)appended)
          goto LABEL_33;
        --v18;
      }
      while (v18);
LABEL_19:
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC3F20], v13);
      if (a3)
      {
        if (CMPhotoCreateFigExtrinsicsDictFromExtrinsics_onceToken != -1)
          dispatch_once(&CMPhotoCreateFigExtrinsicsDictFromExtrinsics_onceToken, &__block_literal_global_5);
        appended = CMPhotoCreateQuaternionArrayFromRotationMatrix(a1, (CFTypeRef)a3, 1, (CFMutableArrayRef *)&value);
        if ((_DWORD)appended)
          goto LABEL_33;
        CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC3F30], value);
      }
      if (a4)
      {
        v19 = cmpweak_kFigCameraExtrinsics_WriteAllFields();
        CFDictionarySetValue(v11, v19, (const void *)*MEMORY[0x1E0C9AE50]);
      }
      v20 = 0;
      *a5 = v11;
      goto LABEL_27;
    }
    v20 = 4294950305;
  }
  else
  {
    v20 = 4294950306;
  }
LABEL_28:
  if (value)
    CFRelease(value);
  return v20;
}

uint64_t CMPhotoCreateQuaternionArrayFromRotationMatrix(const __CFAllocator *a1, CFTypeRef cf, int a3, CFMutableArrayRef *a4)
{
  CFTypeID v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  double v30;
  BOOL v31;
  char v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  double v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t i;
  double v46;
  uint64_t v47;
  uint64_t appended;
  _BYTE v49[4];
  __int128 v50;
  __int128 v51;
  _QWORD v52[2];
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!cf)
    return FigSignalErrorAt();
  v8 = CFGetTypeID(cf);
  if (v8 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)cf) != 9)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable(a1, 3, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v10 = Mutable;
  v11 = 0;
  v12 = &v55;
  while (2)
  {
    v13 = 0;
    v14 = v12;
    do
    {
      if (!FigCFArrayGetDoubleAtIndex())
      {
        v19 = 4294950306;
        goto LABEL_14;
      }
      v13 += 3;
      ++v14;
    }
    while (v13 != 9);
    ++v11;
    v12 += 3;
    if (v11 != 3)
      continue;
    break;
  }
  v53 = 0u;
  v54 = 0u;
  if (v63 >= 0.0)
  {
    if (v55 >= -v59)
    {
      v17 = v63 + v55 + 1.0 + v59;
      v15 = v60 - v62;
      v16 = v61 - v57;
      v53.f64[0] = v60 - v62;
      v53.f64[1] = v61 - v57;
      v54.f64[0] = v56 - v58;
      v54.f64[1] = v17;
      v18 = v17;
    }
    else
    {
      v18 = v63 + 1.0 - v55 - v59;
      v15 = v61 + v57;
      v16 = v60 + v62;
      v53.f64[0] = v61 + v57;
      v53.f64[1] = v60 + v62;
      v17 = v56 - v58;
      v54.f64[0] = v18;
      v54.f64[1] = v56 - v58;
    }
  }
  else if (v55 <= v59)
  {
    v16 = 1.0 - v55 + v59 - v63;
    v15 = v56 + v58;
    v17 = v61 - v57;
    v53.f64[0] = v56 + v58;
    v53.f64[1] = v16;
    v54.f64[0] = v60 + v62;
    v54.f64[1] = v61 - v57;
    v18 = v16;
  }
  else
  {
    v15 = v55 + 1.0 - v59 - v63;
    v16 = v56 + v58;
    v17 = v60 - v62;
    v53.f64[0] = v15;
    v53.f64[1] = v56 + v58;
    v54.f64[0] = v61 + v57;
    v54.f64[1] = v60 - v62;
    v18 = v15;
  }
  if (v17 < 0.0)
  {
    v53 = vnegq_f64(v53);
    v54 = vnegq_f64(v54);
    v16 = v53.f64[1];
    v15 = v53.f64[0];
  }
  v21 = fabs(v15);
  v22 = fabs(v16);
  v23 = v21 > v22 && v21 > fabs(v54.f64[0]) && v21 > fabs(v54.f64[1]);
  v49[0] = v23;
  if (v22 <= v21)
  {
    v27 = 0;
    v25 = v54.f64[1];
    v24 = fabs(v54.f64[0]);
  }
  else
  {
    v24 = fabs(v54.f64[0]);
    v25 = v54.f64[1];
    v26 = v22 > fabs(v54.f64[1]);
    v27 = v22 > v24 && v26;
  }
  v28 = 0;
  v49[1] = v27;
  v29 = v24 > v21;
  if (v24 <= v22)
    v29 = 0;
  v30 = fabs(v25);
  if (v24 <= v30)
    v29 = 0;
  v49[2] = v29;
  v31 = v30 > v21;
  if (v30 <= v22)
    v31 = 0;
  if (v30 <= v24)
    v31 = 0;
  v49[3] = v31;
  if (a3)
    v32 = 30;
  else
    v32 = 14;
  v33 = 0.5 / sqrt(v18) * (double)(1 << v32);
  v52[0] = 0;
  v52[1] = 0;
  v50 = 0u;
  v51 = 0u;
  do
  {
    v34 = v33 * v53.f64[v28];
    v35 = llround(v34);
    if (v49[v28])
      v36 = (int)v34;
    else
      v36 = v35;
    *((_DWORD *)v52 + v28) = v36;
    *((_QWORD *)&v50 + v28++) = v36 * v36;
  }
  while (v28 != 4);
  v37 = 1 << (2 * v32);
  v38 = v37 - v51 - (v50 + *((_QWORD *)&v50 + 1));
  if ((v38 & 0x8000000000000000) == 0)
  {
    v39 = 1 << (v32 + 7);
    if (v38 - *((_QWORD *)&v51 + 1) >= -v39 && v38 - *((_QWORD *)&v51 + 1) <= v39)
      goto LABEL_58;
  }
  v41 = 0;
  v42 = sqrt((double)(uint64_t)v50 / (double)(unint64_t)v37+ (double)*((uint64_t *)&v50 + 1) / (double)(unint64_t)v37+ (double)(uint64_t)v51 / (double)(unint64_t)v37+ (double)*((uint64_t *)&v51 + 1) / (double)(unint64_t)v37);
  v43 = v37;
  do
  {
    v44 = llround(v33 * v53.f64[v41] / v42);
    *((_DWORD *)v52 + v41) = v44;
    v43 -= v44 * v44;
    ++v41;
  }
  while (v41 != 3);
  if ((v43 & 0x8000000000000000) == 0)
    goto LABEL_58;
  for (i = 0; i != 3; ++i)
  {
    v46 = v33 * v53.f64[i] / v42;
    *((_DWORD *)v52 + i) = (int)v46;
    v37 -= ((int)v46 * (int)v46);
  }
  if (v37 < 0)
  {
    appended = FigSignalErrorAt();
  }
  else
  {
LABEL_58:
    v47 = 0;
    while (1)
    {
      appended = FigCFArrayAppendInt32();
      if ((_DWORD)appended)
        break;
      v47 += 4;
      if (v47 == 12)
      {
        v19 = 0;
        *a4 = v10;
        return v19;
      }
    }
  }
  v19 = appended;
LABEL_14:
  CFRelease(v10);
  return v19;
}

uint64_t CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(const __CFAllocator *a1, int a2, int a3, int a4, __CFArray **a5)
{
  __CFArray *Mutable;
  __CFArray *v10;
  uint64_t appended;
  uint64_t v12;

  if (!a5)
    return 0;
  Mutable = CFArrayCreateMutable(a1, 3, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v10 = Mutable;
  appended = CMPhotoCFArrayAppendDouble(Mutable, (double)a2 / 1000000.0);
  if ((_DWORD)appended || (appended = CMPhotoCFArrayAppendDouble(v10, (double)a3 / 1000000.0), (_DWORD)appended))
  {
    v12 = appended;
    goto LABEL_9;
  }
  v12 = CMPhotoCFArrayAppendDouble(v10, (double)a4 / 1000000.0);
  if ((_DWORD)v12)
  {
LABEL_9:
    CFRelease(v10);
    return v12;
  }
  *a5 = v10;
  return v12;
}

uint64_t CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(const __CFAllocator *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, char *a5, __CFArray **a6)
{
  CFTypeID v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t appended;
  uint64_t v18;

  if (!((unint64_t)a5 | (unint64_t)a6))
    return 0;
  if (!cf)
    return 4294950306;
  v9 = CFGetTypeID(cf);
  if (v9 != CFDictionaryGetTypeID())
    return 4294950306;
  Mutable = CFArrayCreateMutable(a1, 3, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v11 = Mutable;
  if (!FigCFDictionaryGetIntIfPresent()
    || !FigCFDictionaryGetInt32IfPresent()
    || !FigCFDictionaryGetInt32IfPresent()
    || !FigCFDictionaryGetInt32IfPresent())
  {
    goto LABEL_35;
  }
  v12 = 1;
  if (FigCFDictionaryGetInt32IfPresent())
  {
    if (FigCFDictionaryGetInt32IfPresent())
    {
      v13 = (double)0 / (double)1uLL;
      goto LABEL_13;
    }
LABEL_35:
    v18 = 4294950306;
    goto LABEL_32;
  }
  v13 = 0.0;
LABEL_13:
  v14 = (double)1uLL;
  v15 = (double)0 / (double)1uLL;
  if (FigCFDictionaryGetInt32IfPresent())
  {
    v16 = (double)0 / v14;
    if (v16 != v15)
      v12 = 0;
  }
  else
  {
    v16 = (double)0 / (double)1uLL;
  }
  appended = CMPhotoCFArrayAppendDouble(v11, v15);
  if ((_DWORD)appended)
    goto LABEL_34;
  appended = CMPhotoCFArrayAppendDouble(v11, v13);
  if ((_DWORD)appended
    || (appended = CMPhotoCFArrayAppendDouble(v11, (double)0 / v14), (_DWORD)appended)
    || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended)
    || (appended = CMPhotoCFArrayAppendDouble(v11, v16), (_DWORD)appended)
    || (appended = CMPhotoCFArrayAppendDouble(v11, (double)0 / v14), (_DWORD)appended)
    || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended)
    || (appended = CMPhotoCFArrayAppendDouble(v11, 0.0), (_DWORD)appended)
    || (appended = CMPhotoCFArrayAppendDouble(v11, 1.0), (_DWORD)appended))
  {
LABEL_34:
    v18 = appended;
    goto LABEL_32;
  }
  if (a5)
    *a5 = v12;
  if (!a6)
  {
    v18 = 0;
LABEL_32:
    CFRelease(v11);
    return v18;
  }
  v18 = 0;
  *a6 = v11;
  return v18;
}

uint64_t CMPhotoCreateRotationMatrixFromQuaternionArray(const __CFAllocator *a1, const void *a2, int a3, __CFArray **a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t *p_valuePtr;
  double v13;
  uint64_t v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int i;
  CFNumberRef v19;
  uint64_t valuePtr;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a4)
    return 0;
  Mutable = CFArrayCreateMutable(a1, 9, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v9 = Mutable;
  if (a2)
  {
    v10 = CFGetTypeID(a2);
    if (v10 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a2) == 3)
    {
      v11 = 0;
      v22 = 0;
      valuePtr = 0;
      p_valuePtr = &valuePtr;
      while (FigCFArrayGetInt32AtIndex())
      {
        ++v11;
        p_valuePtr = (uint64_t *)((char *)p_valuePtr + 4);
        if (v11 == 3)
        {
          v13 = 16384.0;
          if (a3)
            v13 = 1073741820.0;
          if ((double)(int)valuePtr / v13 * ((double)(int)valuePtr / v13)
             + (double)SHIDWORD(valuePtr) / v13 * ((double)SHIDWORD(valuePtr) / v13)
             + (double)v22 / v13 * ((double)v22 / v13) <= 1.00001)
          {
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            FigCFArrayAppendDouble();
            v14 = 0;
            *a4 = v9;
            return v14;
          }
          break;
        }
      }
    }
    v14 = FigSignalErrorAt();
    v15 = 0;
  }
  else
  {
    valuePtr = 0;
    v15 = CFNumberCreate(a1, kCFNumberDoubleType, &valuePtr);
    if (v15 && (valuePtr = 0x3FF0000000000000, (v16 = CFNumberCreate(a1, kCFNumberDoubleType, &valuePtr)) != 0))
    {
      v17 = v16;
      for (i = 0; i != 9; ++i)
      {
        if ((i & 3) != 0)
          v19 = v15;
        else
          v19 = v17;
        CFArrayAppendValue(v9, v19);
      }
      v14 = 0;
      *a4 = v9;
      v9 = v17;
    }
    else
    {
      v14 = 4294950305;
    }
  }
  CFRelease(v9);
  if (v15)
    CFRelease(v15);
  return v14;
}

uint64_t CMPhotoCompressDataWithContentEncoding(const __CFAllocator *a1, CFDataRef theData, uint64_t a3, __CFData **a4)
{
  uint64_t result;
  CFIndex Length;
  int v9;
  compression_algorithm v10;
  __CFData *Mutable;
  __CFData *v12;
  UInt8 *MutableBytePtr;
  uint8_t *v14;
  const Bytef *BytePtr;
  uInt v16;
  unsigned int v17;
  const uint8_t *v18;
  size_t v19;
  size_t v20;
  CFIndex v21;
  uint64_t v22;

  result = 4294950306;
  if (theData && a3 && a4)
  {
    Length = CFDataGetLength(theData);
    v9 = FigCFEqual();
    if (v9)
    {
      Length += 6;
      v10 = COMPRESSION_ZLIB;
    }
    else
    {
      if (!FigCFEqual())
        return FigSignalErrorAt();
      v10 = COMPRESSION_BROTLI;
    }
    Mutable = CFDataCreateMutable(a1, Length);
    if (Mutable)
    {
      v12 = Mutable;
      CFDataSetLength(Mutable, Length);
      MutableBytePtr = CFDataGetMutableBytePtr(v12);
      v14 = MutableBytePtr;
      if (v9)
      {
        *(_WORD *)MutableBytePtr = -25480;
        v14 = MutableBytePtr + 2;
        BytePtr = CFDataGetBytePtr(theData);
        v16 = CFDataGetLength(theData);
        v17 = adler32(1uLL, BytePtr, v16);
        Length -= 6;
      }
      else
      {
        v17 = 0;
      }
      v18 = CFDataGetBytePtr(theData);
      v19 = CFDataGetLength(theData);
      v20 = compression_encode_buffer(v14, Length, v18, v19, 0, v10);
      v21 = v20;
      if (v20)
      {
        if (v9)
        {
          *(_DWORD *)&v14[v20] = bswap32(v17);
          v21 = v20 + 6;
        }
        CFDataSetLength(v12, v21);
        result = 0;
        *a4 = v12;
      }
      else
      {
        v22 = FigSignalErrorAt();
        CFRelease(v12);
        return v22;
      }
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCreateClliDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3;
  const UInt8 *BytePtr;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  uint64_t v10;

  v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) != 4)
      return 4294950194;
    BytePtr = CFDataGetBytePtr(a1);
    Mutable = CFDictionaryCreateMutable(a2, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v9 = Mutable;
    v10 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("MaxContentLightLevel"), bswap32(*(unsigned __int16 *)BytePtr) >> 16);
    if ((_DWORD)v10)
    {
      v3 = v10;
    }
    else
    {
      v3 = CMPhotoCFDictionarySetInt32(v9, CFSTR("MaxPicAverageLightLevel"), bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16);
      if (!(_DWORD)v3)
      {
        *a3 = v9;
        return v3;
      }
    }
    CFRelease(v9);
  }
  return v3;
}

uint64_t CMPhotoCreateMdcvDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3;
  const UInt8 *BytePtr;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  uint64_t v10;

  v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) != 24)
      return 4294950194;
    BytePtr = CFDataGetBytePtr(a1);
    Mutable = CFDictionaryCreateMutable(a2, 10, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v9 = Mutable;
    v10 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("DisplayPrimariesXG"), bswap32(*(unsigned __int16 *)BytePtr) >> 16);
    if ((_DWORD)v10)
      goto LABEL_17;
    v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("DisplayPrimariesYG"), bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16);
    if ((_DWORD)v10
      || (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("DisplayPrimariesXB"), bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16), (_DWORD)v10)|| (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("DisplayPrimariesYB"), bswap32(*((unsigned __int16 *)BytePtr + 3)) >> 16), (_DWORD)v10)|| (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("DisplayPrimariesXR"), bswap32(*((unsigned __int16 *)BytePtr + 4)) >> 16), (_DWORD)v10)|| (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("DisplayPrimariesYR"), bswap32(*((unsigned __int16 *)BytePtr + 5)) >> 16), (_DWORD)v10)
      || (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("WhitePointX"), bswap32(*((unsigned __int16 *)BytePtr + 6)) >> 16),
          (_DWORD)v10)
      || (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("WhitePointY"), bswap32(*((unsigned __int16 *)BytePtr + 7)) >> 16),
          (_DWORD)v10)
      || (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("MaxDisplayMasteringLuminance"), bswap32(*((_DWORD *)BytePtr + 4))), (_DWORD)v10))
    {
LABEL_17:
      v3 = v10;
    }
    else
    {
      v3 = CMPhotoCFDictionarySetInt32(v9, CFSTR("MinDisplayMasteringLuminance"), bswap32(*((_DWORD *)BytePtr + 5)));
      if (!(_DWORD)v3)
      {
        *a3 = v9;
        return v3;
      }
    }
    CFRelease(v9);
  }
  return v3;
}

uint64_t CMPhotoCreateCclvDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3;
  const UInt8 *BytePtr;
  uint64_t v8;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  unsigned int v11;
  uint64_t v12;

  v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) < 2)
      return 4294950194;
    BytePtr = CFDataGetBytePtr(a1);
    v8 = (((*BytePtr << 26 >> 31) & 0x18) + ((*BytePtr >> 1) & 4) + ((*BytePtr >> 2) & 4) + (*BytePtr & 4)) | 1u;
    if (CFDataGetLength(a1) != v8)
      return 4294950194;
    Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v10 = Mutable;
    if ((*BytePtr & 0x20) != 0)
    {
      v12 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("ContentPrimariesXG"), bswap32(*(_DWORD *)(BytePtr + 1)));
      if ((_DWORD)v12)
        goto LABEL_23;
      v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentPrimariesYG"), bswap32(*(_DWORD *)(BytePtr + 5)));
      if ((_DWORD)v12)
        goto LABEL_23;
      v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentPrimariesXB"), bswap32(*(_DWORD *)(BytePtr + 9)));
      if ((_DWORD)v12)
        goto LABEL_23;
      v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentPrimariesYB"), bswap32(*(_DWORD *)(BytePtr + 13)));
      if ((_DWORD)v12)
        goto LABEL_23;
      v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentPrimariesXR"), bswap32(*(_DWORD *)(BytePtr + 17)));
      if ((_DWORD)v12)
        goto LABEL_23;
      v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentPrimariesYR"), bswap32(*(_DWORD *)(BytePtr + 21)));
      if ((_DWORD)v12)
        goto LABEL_23;
      v11 = 6;
      if (!*BytePtr)
      {
LABEL_21:
        v3 = 0;
        *a3 = v10;
        return v3;
      }
    }
    else
    {
      v11 = 0;
      if (!*BytePtr)
        goto LABEL_21;
    }
    v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentMinLuminanceValue"), bswap32(*(_DWORD *)&BytePtr[4 * v11 + 1]));
    if (!(_DWORD)v12)
    {
      if (!*BytePtr)
        goto LABEL_21;
      v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentMaxLuminanceValue"), bswap32(*(_DWORD *)&BytePtr[4 * (v11 | 1) + 1]));
      if (!(_DWORD)v12)
      {
        if (!*BytePtr)
          goto LABEL_21;
        v12 = CMPhotoCFDictionarySetInt32(v10, CFSTR("ContentAvgLuminanceValue"), bswap32(*(_DWORD *)&BytePtr[4 * v11 + 9]));
        if (!(_DWORD)v12)
          goto LABEL_21;
      }
    }
LABEL_23:
    v3 = v12;
    CFRelease(v10);
  }
  return v3;
}

uint64_t CMPhotoCreateAmveDictionary(const __CFData *a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  uint64_t v3;
  const UInt8 *BytePtr;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  uint64_t v10;

  v3 = 4294950306;
  if (a1 && a3)
  {
    if (CFDataGetLength(a1) != 8)
      return 4294950194;
    BytePtr = CFDataGetBytePtr(a1);
    Mutable = CFDictionaryCreateMutable(a2, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v9 = Mutable;
    v10 = CMPhotoCFDictionarySetInt32(Mutable, CFSTR("AmbientIlluminance"), bswap32(*(_DWORD *)BytePtr));
    if ((_DWORD)v10
      || (v10 = CMPhotoCFDictionarySetInt32(v9, CFSTR("AmbientLightX"), bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16), (_DWORD)v10))
    {
      v3 = v10;
    }
    else
    {
      v3 = CMPhotoCFDictionarySetInt32(v9, CFSTR("AmbientLightY"), bswap32(*((unsigned __int16 *)BytePtr + 3)) >> 16);
      if (!(_DWORD)v3)
      {
        *a3 = v9;
        return v3;
      }
    }
    CFRelease(v9);
  }
  return v3;
}

uint64_t CMPhotoMetadataCreateCFNumberFormatter(const __CFAllocator *a1, CFNumberFormatterRef *a2)
{
  const __CFString *CanonicalLocaleIdentifierFromString;
  const __CFString *v5;
  const __CFLocale *v6;
  const __CFLocale *v7;
  CFNumberFormatterRef v8;
  uint64_t v9;

  if (!a2)
    return 0;
  CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString(a1, CFSTR("en_US"));
  if (!CanonicalLocaleIdentifierFromString)
    return 4294950305;
  v5 = CanonicalLocaleIdentifierFromString;
  v6 = CFLocaleCreate(a1, CanonicalLocaleIdentifierFromString);
  if (v6)
  {
    v7 = v6;
    v8 = CFNumberFormatterCreate(a1, v6, kCFNumberFormatterNoStyle);
    if (v8)
    {
      v9 = 0;
      *a2 = v8;
    }
    else
    {
      v9 = 4294950305;
    }
    CFRelease(v7);
  }
  else
  {
    v9 = 4294950305;
  }
  CFRelease(v5);
  return v9;
}

uint64_t CMPhotoCopyMetadataTagValue(CGImageMetadataTag *a1, __CFNumberFormatter *a2, CFStringRef *a3, __CFArray **a4)
{
  const __CFArray *v8;
  const __CFArray *v9;
  CFTypeID v10;
  uint64_t Count;
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  CFIndex v14;
  const void *ValueAtIndex;
  uint64_t v16;
  CFTypeID v17;
  CFIndex Length;
  CFNumberRef v19;
  const char *CStringPtrAndBufferToFree;
  char *v21;
  double *v22;
  CFNumberType v23;
  CFStringRef v24;
  uint64_t v25;
  CFTypeRef *v26;
  uint64_t v28;
  double v29;
  char *__endptr;
  CFRange value;
  void *v32;

  v32 = 0;
  v8 = (const __CFArray *)CGImageMetadataTagCopyValue(a1);
  v9 = v8;
  if (v8)
  {
    v10 = CFGetTypeID(v8);
    if (v10 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount(v9);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v13 = Mutable;
        if (Count >= 1)
        {
          v14 = 0;
          while (1)
          {
            value.location = 0;
            ValueAtIndex = CFArrayGetValueAtIndex(v9, v14);
            v16 = CMPhotoCopyMetadataTagValue(ValueAtIndex, a2, 0, &value);
            if ((_DWORD)v16)
              break;
            CFArrayAppendValue(v13, (const void *)value.location);
            if (value.location)
              CFRelease((CFTypeRef)value.location);
            if (Count == ++v14)
              goto LABEL_24;
          }
          v25 = v16;
          goto LABEL_31;
        }
        goto LABEL_24;
      }
      v25 = 4294950305;
LABEL_42:
      CFRelease(v9);
      return v25;
    }
    v17 = CFGetTypeID(v9);
    if (v17 == CFStringGetTypeID())
    {
      if (a2)
      {
        Length = CFStringGetLength((CFStringRef)v9);
        value.location = 0;
        value.length = Length;
        v19 = CFNumberFormatterCreateNumberFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, (CFStringRef)v9, &value, 0);
        v13 = v19;
        if ((value.location || value.length != Length) && v19)
        {
          CFRelease(v19);
          v13 = 0;
        }
      }
      else
      {
        CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
        __endptr = 0;
        value.location = 0;
        v29 = strtod(CStringPtrAndBufferToFree, (char **)&value);
        v28 = strtol(CStringPtrAndBufferToFree, &__endptr, 0);
        v21 = (char *)&CStringPtrAndBufferToFree[strlen(CStringPtrAndBufferToFree)];
        if (v21 == (char *)value.location || (v13 = 0, v21 == __endptr))
        {
          if ((unint64_t)__endptr >= value.location)
          {
            v22 = (double *)&v28;
            v23 = kCFNumberLongType;
          }
          else
          {
            v22 = &v29;
            v23 = kCFNumberDoubleType;
          }
          v13 = CFNumberCreate(0, v23, v22);
        }
      }
      if (v13)
        goto LABEL_24;
      if (CFStringCompare((CFStringRef)v9, CFSTR("True"), 1uLL))
      {
        if (CFStringCompare((CFStringRef)v9, CFSTR("False"), 1uLL))
        {
          v13 = v9;
          v9 = 0;
          goto LABEL_24;
        }
        v26 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      }
      else
      {
        v26 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      }
      if (*v26)
      {
        v13 = (__CFArray *)CFRetain(*v26);
        if (v13)
        {
LABEL_24:
          if (a4)
          {
            *a4 = v13;
            v13 = 0;
          }
          if (a3)
          {
            v24 = CGImageMetadataTagCopyName(a1);
            if (v24)
            {
              v25 = 0;
              *a3 = v24;
            }
            else
            {
              v25 = 4294950194;
            }
          }
          else
          {
            v25 = 0;
          }
          free(v32);
          if (!v13)
          {
LABEL_32:
            if (!v9)
              return v25;
            goto LABEL_42;
          }
LABEL_31:
          CFRelease(v13);
          goto LABEL_32;
        }
      }
    }
  }
  free(v32);
  v25 = 4294950194;
  if (v9)
    goto LABEL_42;
  return v25;
}

__CFArray *CMPhotoArrayCreateDeepCopy(const __CFAllocator *a1, const __CFArray *a2)
{
  uint64_t Count;
  __CFArray *Mutable;
  const void **v6;
  const void **v7;
  CFTypeRef *v8;
  CFTypeID v9;
  const void *DeepCopy;
  CFTypeID v11;
  CFTypeID TypeID;
  CFTypeRef v13;
  const void *v14;
  CFRange v16;

  if (!a2)
    return 0;
  Count = CFArrayGetCount(a2);
  Mutable = CFArrayCreateMutable(a1, Count, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    if (v6)
    {
      v7 = v6;
      v16.location = 0;
      v16.length = Count;
      CFArrayGetValues(a2, v16, v6);
      if (Count >= 1)
      {
        v8 = v7;
        while (1)
        {
          v9 = CFGetTypeID(*v8);
          if (v9 == CFDictionaryGetTypeID())
            break;
          v11 = CFGetTypeID(*v8);
          TypeID = CFArrayGetTypeID();
          v13 = *v8;
          if (v11 != TypeID)
          {
            CFArrayAppendValue(Mutable, v13);
            goto LABEL_13;
          }
          DeepCopy = (const void *)CMPhotoArrayCreateDeepCopy(a1, v13);
          if (DeepCopy)
            goto LABEL_11;
LABEL_13:
          ++v8;
          if (!--Count)
            goto LABEL_14;
        }
        DeepCopy = (const void *)CMPhotoDictionaryCreateDeepCopy(a1, *v8);
        if (!DeepCopy)
          goto LABEL_13;
LABEL_11:
        v14 = DeepCopy;
        CFArrayAppendValue(Mutable, DeepCopy);
        CFRelease(v14);
        goto LABEL_13;
      }
LABEL_14:
      free(v7);
    }
  }
  return Mutable;
}

__CFDictionary *CMPhotoDictionaryCreateDeepCopy(const __CFAllocator *a1, const void *a2)
{
  __CFDictionary *DeepCopy;
  CFIndex Count;
  const void **v6;
  const void **v7;
  const void **v8;
  const void **v9;
  CFTypeRef *v10;
  const void **v11;
  CFTypeID v12;
  __CFArray *v13;
  CFTypeID v14;
  __CFArray *v15;

  if (!a2)
    return 0;
  DeepCopy = (__CFDictionary *)CFPropertyListCreateDeepCopy(a1, a2, 2uLL);
  if (!DeepCopy)
  {
    Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    DeepCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (DeepCopy)
    {
      v6 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      if (v6)
      {
        v7 = v6;
        v8 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
        if (v8)
        {
          v9 = v8;
          CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v7, v8);
          if (Count >= 1)
          {
            v10 = v9;
            v11 = v7;
            while (1)
            {
              v12 = CFGetTypeID(*v10);
              if (v12 == CFDictionaryGetTypeID())
                break;
              v14 = CFGetTypeID(*v10);
              if (v14 != CFArrayGetTypeID())
              {
                CFDictionarySetValue(DeepCopy, *v11, *v10);
                goto LABEL_15;
              }
              v13 = CMPhotoArrayCreateDeepCopy(a1, (const __CFArray *)*v10);
              if (v13)
                goto LABEL_13;
LABEL_15:
              ++v11;
              ++v10;
              if (!--Count)
                goto LABEL_16;
            }
            v13 = (__CFArray *)CMPhotoDictionaryCreateDeepCopy(a1, *v10);
            if (!v13)
              goto LABEL_15;
LABEL_13:
            v15 = v13;
            CFDictionaryAddValue(DeepCopy, *v11, v13);
            CFRelease(v15);
            goto LABEL_15;
          }
LABEL_16:
          free(v7);
        }
        else
        {
          v9 = v7;
        }
        free(v9);
      }
    }
  }
  return DeepCopy;
}

uint64_t CMPhotoJPEGEncodeSessionGetTypeID()
{
  pthread_once(&CMPhotoJPEGEncodeSessionGetTypeID_sRegisterCMPhotoJPEGEncodeSessionOnce, (void (*)(void))fjes_register);
  return sCMPhotoJPEGEncodeSessionID;
}

uint64_t fjes_register()
{
  uint64_t result;

  sCMPhotoJPEGEncodeSessionClass = 0;
  *(_QWORD *)algn_1EE999ED8 = "CMPhotoJPEGEncodeSession";
  qword_1EE999EE0 = (uint64_t)fjes_init;
  unk_1EE999EE8 = 0;
  qword_1EE999EF0 = (uint64_t)fjes_finalize;
  unk_1EE999EF8 = 0;
  qword_1EE999F00 = 0;
  unk_1EE999F08 = fjes_copyFormattingDesc;
  qword_1EE999F10 = 0;
  result = _CFRuntimeRegisterClass();
  sCMPhotoJPEGEncodeSessionID = result;
  return result;
}

uint64_t CMPhotoJPEGEncodeSessionCreate(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  int v7;
  CFMutableArrayRef Mutable;
  int v9;
  unsigned int v10;
  uint64_t v11;

  if (!a3)
    return 4294950306;
  pthread_once(&CMPhotoJPEGEncodeSessionGetTypeID_sRegisterCMPhotoJPEGEncodeSessionOnce, (void (*)(void))fjes_register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950305;
  v6 = Instance;
  v7 = JPEGDeviceInterface_numberOfJPEGCores();
  *(_DWORD *)(v6 + 16) = v7;
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = dispatch_semaphore_create(v7);
  Mutable = CFArrayCreateMutable(a1, *(int *)(v6 + 16), 0);
  *(_QWORD *)(v6 + 24) = Mutable;
  if (!Mutable)
  {
    v11 = 4294950305;
LABEL_11:
    CFRelease((CFTypeRef)v6);
    return v11;
  }
  if (*(int *)(v6 + 16) >= 1)
  {
    v9 = 0;
    while (1)
    {
      v10 = JPEGDeviceInterface_openDriverConnection();
      if (!v10)
        break;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v6 + 24), (const void *)v10);
      if (++v9 >= *(_DWORD *)(v6 + 16))
        goto LABEL_8;
    }
    v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
LABEL_8:
  v11 = 0;
  *a3 = v6;
  return v11;
}

uint64_t CMPhotoJPEGEncodeSessionCreateJPEGSbufFromBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFArray *v10;
  const void *ValueAtIndex;
  uint64_t JPEGSbufFromBuffer;

  if (!a1)
    return 4294950306;
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  v10 = *(const __CFArray **)(a1 + 24);
  if (!v10 || CFArrayGetCount(v10) < 1)
  {
    JPEGSbufFromBuffer = 4294950306;
    goto LABEL_7;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), 0);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
  JPEGSbufFromBuffer = CMPhotoJPEGCachedConnectionCreateJPEGSbufFromBuffer(ValueAtIndex, a2, a3, a4, a5);
  if ((_DWORD)ValueAtIndex)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 24), 0, (const void *)ValueAtIndex);
LABEL_7:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  }
  return JPEGSbufFromBuffer;
}

double fjes_init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void fjes_finalize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const __CFArray *v3;
  CFIndex v4;
  CFIndex Count;
  const __CFArray *v6;
  const void *ValueAtIndex;
  NSObject *v8;

  v2 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  v3 = *(const __CFArray **)(a1 + 24);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      Count = CFArrayGetCount(v3);
      v6 = *(const __CFArray **)(a1 + 24);
      if (Count <= v4)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v4);
      JPEGDeviceInterface_closeDriverConnection((uint64_t)ValueAtIndex);
      ++v4;
      v3 = *(const __CFArray **)(a1 + 24);
      if (!v3)
        goto LABEL_8;
    }
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
LABEL_8:
  os_unfair_lock_unlock(v2);
  v8 = *(NSObject **)(a1 + 40);
  if (v8)
    dispatch_release(v8);
}

CFTypeRef fjes_copyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoJPEGEncodeSession]"));
}

uint64_t CMPhotoUnifiedJPEGDecoderPrepare(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _prepare(a1, a2, a4, a5, a7, 1, a8, 0);
}

uint64_t CMPhotoUnifiedJPEGDecoderCreateClone(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v5;
  const __CFAllocator *v6;
  const void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t SWDecoderIfNeeded;
  int ra_table_sz;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  int v23;

  v5 = *(const void **)a1;
  v6 = *(const __CFAllocator **)(a1 + 8);
  v7 = *(const void **)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(const void **)(a1 + 40);
  v21 = 0;
  v14 = CMPhotoUnifiedJPEGDecoderCreate(v5, v6, v9, v10, v7, v11, v12, v13, v8, &v21);
  v15 = v21;
  if ((_DWORD)v14)
  {
    v19 = v14;
    goto LABEL_11;
  }
  SWDecoderIfNeeded = _createSWDecoderIfNeeded(v21, 0);
  if ((_DWORD)SWDecoderIfNeeded)
  {
    v19 = SWDecoderIfNeeded;
    v15 = v21;
    goto LABEL_11;
  }
  if (*(_QWORD *)(a1 + 72))
  {
    v22 = 16;
    v23 = 1;
    ra_table_sz = applejpeg_decode_get_ra_table_sz();
    if (ra_table_sz < 1)
    {
      v18 = 0;
    }
    else
    {
      v18 = malloc_type_malloc(ra_table_sz, 0x7F70CCC0uLL);
      if (!v18 || !applejpeg_decode_dump_ra_table() && !applejpeg_decode_set_ra_table())
        goto LABEL_10;
    }
    FigSignalErrorAt();
  }
  else
  {
    v18 = 0;
  }
LABEL_10:
  free(v18);
  v15 = 0;
  v19 = 0;
  *a3 = v21;
  v21 = 0;
LABEL_11:
  CMPhotoUnifiedJPEGDecoderDestroy(v15);
  return v19;
}

uint64_t _createSWDecoderIfNeeded(uint64_t a1, int a2)
{
  int v4;
  const __CFData *DataWrappingIOSurface;
  void *v6;
  CFTypeRef v7;
  CFIndex Length;
  int IsRangeContiguous;
  uint64_t v10;
  const void *v11;
  unint64_t v12;
  uint64_t (*v13)(const void *, uint64_t, _QWORD *);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t DataLength;
  uint64_t DataPointer;
  CFTypeRef v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  void *v23;
  int v24;
  int image_info;
  _QWORD v27[7];
  __int128 v28;
  uint64_t v29;
  char *dataPointerOut;
  CFIndex v31;

  dataPointerOut = 0;
  v31 = 0;
  v28 = xmmword_1E53F5558;
  v29 = 0;
  if (*(_QWORD *)(a1 + 72))
  {
    DataWrappingIOSurface = 0;
    v16 = 0;
    goto LABEL_49;
  }
  v4 = *(_DWORD *)(a1 + 48);
  switch(v4)
  {
    case 1:
      DataWrappingIOSurface = *(const __CFData **)(a1 + 88);
      if (!DataWrappingIOSurface)
        DataWrappingIOSurface = *(const __CFData **)(a1 + 40);
LABEL_12:
      dataPointerOut = (char *)CFDataGetBytePtr(DataWrappingIOSurface);
      Length = CFDataGetLength(DataWrappingIOSurface);
      DataWrappingIOSurface = 0;
      v31 = Length;
      v4 = 1;
      IsRangeContiguous = 1;
      goto LABEL_30;
    case 2:
      v6 = *(void **)(a1 + 40);
      DataWrappingIOSurface = (const __CFData *)malloc_type_calloc(1uLL, 0x30uLL, 0x10200401705F15EuLL);
      if (!DataWrappingIOSurface)
      {
LABEL_53:
        v16 = 4294950305;
        goto LABEL_49;
      }
      if (v6)
        v7 = CFRetain(v6);
      else
        v7 = 0;
      *(_QWORD *)DataWrappingIOSurface = v7;
      DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)v6);
      *((_QWORD *)DataWrappingIOSurface + 5) = DataLength;
      IsRangeContiguous = CMBlockBufferIsRangeContiguous(*(CMBlockBufferRef *)(a1 + 40), 0, DataLength);
      DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 40), 0, (size_t *)&v31, 0, &dataPointerOut);
      if ((_DWORD)DataPointer)
      {
        v16 = DataPointer;
        goto LABEL_49;
      }
      v4 = 2;
LABEL_30:
      v20 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v21 = applejpeg_decode_create();
      if (*v20 == 1)
        kdebug_trace();
      applejpeg_decode_set_parse_option_use_first_sof();
      if (*v20 == 1)
        kdebug_trace();
      if (IsRangeContiguous)
      {
        v22 = applejpeg_decode_open_mem();
      }
      else
      {
        v23 = _applejpeg_read_stream;
        if (v4 == 2)
          v23 = _applejpeg_read_bbuf;
        v27[0] = v23;
        v27[1] = 0;
        v27[2] = _applejpeg_skip;
        v27[3] = _applejpeg_rewind;
        v27[4] = DataWrappingIOSurface;
        v27[5] = 0;
        v27[6] = *((_QWORD *)DataWrappingIOSurface + 5);
        v22 = applejpeg_decode_open_file();
      }
      v24 = v22;
      if (*v20 == 1)
        kdebug_trace();
      if (v24)
      {
        image_info = v24;
      }
      else
      {
        image_info = applejpeg_decode_get_image_info();
        if (!image_info)
        {
          *(_DWORD *)(a1 + 140) = applejpeg_decode_get_precision();
          *(_DWORD *)(a1 + 136) = applejpeg_decode_get_chroma_subsampling();
          if (a2)
          {
            applejpeg_decode_set_option_buildindex();
            applejpeg_decode_build_index();
          }
          v16 = 0;
          *(_QWORD *)(a1 + 72) = v21;
          *(_QWORD *)(a1 + 80) = DataWrappingIOSurface;
          goto LABEL_48;
        }
      }
      v16 = CMPhotoAppleJPEGErrorToCMPhotoError(image_info);
      goto LABEL_49;
    case 4:
      DataWrappingIOSurface = CMPhotoCreateDataWrappingIOSurface(*(const __CFAllocator **)(a1 + 8), *(IOSurfaceRef *)(a1 + 40), 0, 0);
      *(_QWORD *)(a1 + 88) = DataWrappingIOSurface;
      if (!DataWrappingIOSurface)
        goto LABEL_53;
      goto LABEL_12;
  }
  v11 = *(const void **)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  DataWrappingIOSurface = (const __CFData *)malloc_type_calloc(1uLL, 0x30uLL, 0x10200401705F15EuLL);
  if (!DataWrappingIOSurface)
  {
    v16 = 4294950305;
    goto LABEL_23;
  }
  v27[0] = 0;
  v13 = *(uint64_t (**)(const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v13)
  {
    v16 = 4294954514;
    goto LABEL_23;
  }
  v14 = v13(v11, v10, v27);
  if ((_DWORD)v14)
  {
    v16 = v14;
    goto LABEL_23;
  }
  v15 = v27[0];
  if (v10 | v12)
  {
    v15 = v12;
    if (v27[0] < v12)
    {
      v16 = 4294950194;
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v27[0] & 0x8000000000000000) == 0)
  {
LABEL_26:
    if (v11)
      v19 = CFRetain(v11);
    else
      v19 = 0;
    *((_QWORD *)DataWrappingIOSurface + 1) = v19;
    *((_QWORD *)DataWrappingIOSurface + 2) = v10;
    *((_QWORD *)DataWrappingIOSurface + 3) = v15;
    *((_QWORD *)DataWrappingIOSurface + 5) = v15;
    InputWrapper_destroy(0);
    IsRangeContiguous = 0;
    goto LABEL_30;
  }
  v16 = 4294950190;
LABEL_23:
  InputWrapper_destroy((const void **)DataWrappingIOSurface);
LABEL_48:
  DataWrappingIOSurface = 0;
LABEL_49:
  applejpeg_decode_destroy();
  InputWrapper_destroy((const void **)DataWrappingIOSurface);
  return v16;
}

void *_applejpeg_alloc(size_t a1)
{
  return malloc_type_malloc(a1, 0xC914A812uLL);
}

uint64_t _applejpeg_read_bbuf(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v9;
  size_t v11;
  char *dataPointerOut;

  if (!a3)
    return 4294967294;
  v4 = a2;
  v5 = (int)a2;
  v6 = *(_QWORD *)(a3 + 32);
  if (*(_QWORD *)(a3 + 40) - v6 >= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a3 + 40) - v6;
  if (v7)
  {
    v11 = 0;
    dataPointerOut = 0;
    while (!CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)a3, v6, &v11, 0, &dataPointerOut))
    {
      v9 = v7 >= v11 ? v11 : v7;
      if (!v9)
        break;
      memcpy(a1, dataPointerOut, v9);
      a1 += v9;
      v6 = *(_QWORD *)(a3 + 32) + v9;
      *(_QWORD *)(a3 + 32) = v6;
      v7 -= v9;
      if (!v7)
        return v4;
    }
    return 4294967294;
  }
  return v4;
}

uint64_t _applejpeg_read_stream(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v11;

  if (!a3)
    return 4294967294;
  v4 = a3[4];
  if (a3[5] - v4 >= (unint64_t)a2)
    v5 = a2;
  else
    v5 = a3[5] - v4;
  if (!v5)
    return 4294967294;
  v7 = a3[1];
  v8 = a3[2];
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (!v9)
    return 4294967294;
  v11 = 0;
  if (v9(v7, v5, v8 + v4, a1, &v11))
    return 4294967294;
  result = v11;
  if (!v11)
    return 4294967294;
  a3[4] += v11;
  return result;
}

uint64_t _applejpeg_skip(int a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  if (!a2)
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a2 + 32) + a1;
  if (v2 >= *(_QWORD *)(a2 + 40))
  {
    if (FigSignalErrorAt())
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 32) = v2;
  }
  return result;
}

uint64_t _applejpeg_rewind(uint64_t a1)
{
  if (a1)
    *(_QWORD *)(a1 + 32) = 0;
  return 0;
}

uint64_t CMPhotoSupportsHEVCHWEncode()
{
  if (CMPhotoSupportsHEVCHWEncode_onceToken != -1)
    dispatch_once(&CMPhotoSupportsHEVCHWEncode_onceToken, &__block_literal_global_7);
  return CMPhotoSupportsHEVCHWEncode_hwSupported;
}

uint64_t CMPhotoMutableDataWriteStreamCreate(uint64_t a1, uint64_t a2)
{
  if (a2)
    return CFWriteStreamCreate();
  else
    return 0;
}

CFTypeRef _streamCreate(int a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void _streamFinalize(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

const __CFString *_streamCopyDescription()
{
  return CFSTR("CMPhotoMutableDataWriteStream");
}

uint64_t _streamOpen(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 1;
  return 1;
}

uint64_t _streamOpenCompleted()
{
  return 1;
}

CFIndex _streamWrite(int a1, const UInt8 *a2, CFIndex a3, int a4, CFMutableDataRef theData)
{
  CFDataAppendBytes(theData, a2, a3);
  return a3;
}

uint64_t _streamCanWrite()
{
  return 1;
}

uint64_t CMPhotoJPEGQualityControllerDecrementQuality(__int128 *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  CFTypeRef v9;
  unsigned int v10;
  int v11;
  float v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = 4294950306;
  if (!a1 || !a2)
    goto LABEL_21;
  v5 = 0;
  while (_jpegQualityLevels[v5] <= *((float *)a1 + 12))
  {
    if (++v5 == 20)
      goto LABEL_8;
  }
  if ((int)v5 < 1)
  {
LABEL_20:
    v2 = FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_8:
  v6 = a1[3];
  v19 = a1[2];
  v20 = v6;
  v21 = a1[4];
  v7 = *((_QWORD *)a1 + 10);
  v8 = a1[1];
  v17 = *a1;
  v18 = v8;
  v22 = v7;
  v9 = (CFTypeRef)*((_QWORD *)a1 + 7);
  if (v9)
    v9 = CFRetain(v9);
  *((_QWORD *)&v20 + 1) = v9;
  v10 = *((_DWORD *)a1 + 5);
  if (v10 > 0xA || ((1 << v10) & 0x418) == 0)
    goto LABEL_20;
  v11 = v5 - 3;
  if ((_DWORD)v5 == 20)
    v11 = 19;
  if (v11 < 1)
  {
    v12 = 0.01;
  }
  else
  {
    v12 = 1.0;
    if (v11 <= 0x13)
      v12 = (_jpegQualityLevels[v11 - 1] + _jpegQualityLevels[v11]) * 0.5;
  }
  v2 = _parseQualityParameters_QValue_float((uint64_t)&v17, v12);
  if (!(_DWORD)v2)
  {
    v13 = v20;
    a2[2] = v19;
    a2[3] = v13;
    v14 = v22;
    a2[4] = v21;
    a2[5] = v14;
    v15 = v18;
    *a2 = v17;
    a2[1] = v15;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
  }
LABEL_21:
  CMPhotoJPEGQualitySettingsReleaseStorage(&v17);
  return v2;
}

uint64_t CMPhotoJPEGQualityControllerDecrementByteBudgetQualityGivenSize(__int128 *a1, unint64_t a2, int a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  double v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  CFTypeRef v14;
  void *v15;
  double v16;
  float v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = 4294950306;
  if (!a1 || !a2 || !a4 || *((_DWORD *)a1 + 5) != 10)
    goto LABEL_18;
  v9 = 0;
  v10 = *((float *)a1 + 12);
  while (_jpegQualityLevels[v9] <= v10)
  {
    if (++v9 == 20)
      goto LABEL_10;
  }
  if ((int)v9 <= 0)
  {
LABEL_19:
    v4 = FigSignalErrorAt();
    goto LABEL_18;
  }
LABEL_10:
  v11 = a1[3];
  v25 = a1[2];
  v26 = v11;
  v27 = a1[4];
  v12 = *((_QWORD *)a1 + 10);
  v13 = a1[1];
  v23 = *a1;
  v24 = v13;
  v28 = v12;
  v14 = (CFTypeRef)*((_QWORD *)a1 + 7);
  if (v14)
  {
    v14 = CFRetain(v14);
    v10 = *((float *)a1 + 12);
  }
  *((_QWORD *)&v26 + 1) = v14;
  if (a3 == 2)
    v15 = &_relativeSizeHW;
  else
    v15 = &_relativeSizeSW;
  v22 = 0;
  v16 = _estimateNewQuality(a2, *((_QWORD *)a1 + 5), (uint64_t)v15, &v22, v10);
  if (!v22)
    goto LABEL_19;
  v17 = v16;
  v4 = _parseQualityParameters_QValue_float((uint64_t)&v23, v17);
  if (!(_DWORD)v4)
  {
    v18 = v26;
    a4[2] = v25;
    a4[3] = v18;
    v19 = v28;
    a4[4] = v27;
    a4[5] = v19;
    v20 = v24;
    *a4 = v23;
    a4[1] = v20;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
  }
LABEL_18:
  CMPhotoJPEGQualitySettingsReleaseStorage(&v23);
  return v4;
}

uint64_t _copyQTableFromData(const void *a1, _OWORD *a2)
{
  CFTypeID v4;
  const UInt8 *BytePtr;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = CFGetTypeID(a1);
  if (v4 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)a1) != 64)
    return FigSignalErrorAt();
  BytePtr = CFDataGetBytePtr((CFDataRef)a1);
  v6 = *((_OWORD *)BytePtr + 3);
  v8 = *(_OWORD *)BytePtr;
  v7 = *((_OWORD *)BytePtr + 1);
  a2[2] = *((_OWORD *)BytePtr + 2);
  a2[3] = v6;
  *a2 = v8;
  a2[1] = v7;
  return 0;
}

uint64_t _copyFormatDescriptionForIndex_1(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *);
  uint64_t v13;
  CFTypeRef cf;
  uint64_t v16;

  cf = 0;
  v16 = 0;
  if (!a4)
    return 0;
  v7 = a1[6];
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v8)
  {
LABEL_7:
    v13 = 4294954514;
    goto LABEL_8;
  }
  v9 = v8(v7, a2, &cf, 0);
  if (!(_DWORD)v9)
  {
    v10 = CFGetAllocator(a1);
    FigBaseObject = FigPictureReaderGetFigBaseObject();
    v12 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v12)
    {
      v13 = v12(FigBaseObject, *MEMORY[0x1E0CC4B58], v10, &v16);
      if (!(_DWORD)v13)
        *a4 = v16;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  v13 = v9;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t _getImageIdentifierForIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, uint64_t);

  if (!a3)
    return 0;
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    return v6(v5, a2, 0, a3);
  else
    return 4294954514;
}

uint64_t _getThumbnailCountForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t *);
  uint64_t v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v7)
    goto LABEL_7;
  v8 = v7(v6, a2, &cf, 0);
  v9 = v8;
  if (!a4 || (_DWORD)v8)
    goto LABEL_8;
  v10 = cf;
  v11 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v11)
  {
LABEL_7:
    v9 = 4294954514;
    goto LABEL_8;
  }
  v9 = v11(v10, &v13);
  if (!(_DWORD)v9)
    *a4 = v13;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t _createThumbnailImageForIndex_0(_QWORD *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, CFTypeRef *a6)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v14;
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef cf;
  CFTypeRef v21;

  cf = 0;
  v21 = 0;
  v19 = 0;
  if (theDict && CFDictionaryContainsKey(theDict, CFSTR("UseProvidedPixelBuffer")))
  {
    v14 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v12 = a1[6];
  v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v13)
    goto LABEL_9;
  v14 = v13(v12, a2, &cf, 0);
  if ((_DWORD)v14)
  {
LABEL_16:
    v17 = v14;
    goto LABEL_10;
  }
  v15 = cf;
  v16 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v16)
  {
LABEL_9:
    v17 = 4294954514;
    goto LABEL_10;
  }
  v14 = v16(v15, a3, &v19);
  if ((_DWORD)v14)
    goto LABEL_16;
  v17 = _decodeImage_1(a1, v19, cf, -1, theDict, 0, a5, 0, (CGImageRef *)&v21);
  if ((_DWORD)v17)
  {
    if (v21)
      CFRelease(v21);
  }
  else
  {
    *a6 = v21;
    v21 = 0;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t _decodeThumbnailForIndexAsync_0(uint64_t *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  return _decodeImageAsync(a1, a2, a3, 1, theDict, a5, a6, a7, a8);
}

const __CFDictionary *_decodeAuxiliaryImageForIndexAsync_0(uint64_t *a1, uint64_t a2, uint64_t a3, CFDictionaryRef theDict, int a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;

  result = _checkForbiddenAuxOptions_0(theDict);
  if (!(_DWORD)result)
    return (const __CFDictionary *)_decodeImageAsync(a1, a2, a3, 2, theDict, a5, a6, a7, a8);
  return result;
}

uint64_t _cancelAsyncRequest_1(uint64_t a1, const void *a2)
{
  CMPhotoDecompressionSessionCancelAsyncRequest(*(_QWORD *)(a1 + 16), a2);
  return 0;
}

uint64_t _getAuxiliaryImageGeometryForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int *a7)
{
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t ImageGeometryFromPictureReader;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v18;
  int v20;
  __int128 v21;
  __int128 v22;
  CFTypeRef v23;
  CFTypeRef cf;

  v23 = 0;
  cf = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 1;
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v14)
    goto LABEL_13;
  ImageGeometryFromPictureReader = v14(v13, a2, &cf, 0);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_19;
  v16 = cf;
  v17 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v17)
  {
LABEL_13:
    v18 = 4294954514;
    goto LABEL_14;
  }
  ImageGeometryFromPictureReader = v17(v16, a3, &v23);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_19;
  ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v23, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v21, 0);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_19;
  if (a7)
  {
    ImageGeometryFromPictureReader = _getImageOrientation(a1, v23, cf, &v20);
    if (!(_DWORD)ImageGeometryFromPictureReader)
    {
      *a7 = v20;
      goto LABEL_9;
    }
LABEL_19:
    v18 = ImageGeometryFromPictureReader;
    goto LABEL_14;
  }
LABEL_9:
  if (a5)
    *a5 = v22;
  v18 = 0;
  if (a6)
    *a6 = *((_QWORD *)&v22 + 1);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  return v18;
}

uint64_t _copyAuxiliaryImageMetadataForIndex_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  if (a5)
    return _copyAuxiliaryImageMetadataFromCacheForIndex(a1, a2, a3, 0, 0, a5, 0, 0);
  else
    return 4294950306;
}

uint64_t _copyAuxiliaryFormatInfoForIndex(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  if (a4)
    return _copyAuxiliaryImageMetadataFromCacheForIndex(a1, a2, a3, 0, 0, 0, a4, 0);
  else
    return 4294950306;
}

uint64_t _copyAuxiliaryImageFormatDescriptionForIndex(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, uint64_t, CFTypeRef *);
  CFAllocatorRef v14;
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *);
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef cf;
  uint64_t v21;

  cf = 0;
  v21 = 0;
  v19 = 0;
  if (!a5)
    return 0;
  v9 = a1[6];
  v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (v10)
  {
    v11 = v10(v9, a2, &cf, 0);
    if ((_DWORD)v11)
      goto LABEL_16;
    v12 = cf;
    v13 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v13)
    {
      v11 = v13(v12, a3, &v19);
      if (!(_DWORD)v11)
      {
        v14 = CFGetAllocator(a1);
        FigBaseObject = FigPictureReaderGetFigBaseObject();
        v16 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
        if (v16)
        {
          v17 = v16(FigBaseObject, *MEMORY[0x1E0CC4B58], v14, &v21);
          if (!(_DWORD)v17)
            *a5 = v21;
          goto LABEL_10;
        }
        goto LABEL_9;
      }
LABEL_16:
      v17 = v11;
      goto LABEL_10;
    }
  }
LABEL_9:
  v17 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t _copyAuxiliaryColorSpaceForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, CFTypeRef *);
  unsigned int v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  cf = 0;
  if (!a4)
    return 0;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v9)
  {
    v10 = v9(v8, a2, &cf, 0);
    if ((_DWORD)v10)
    {
LABEL_16:
      v14 = v10;
      goto LABEL_10;
    }
    v11 = cf;
    v12 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v12)
    {
      v10 = v12(v11, a3, &v16);
      if (!(_DWORD)v10)
      {
        v13 = _copyColorInfoForItem((_BYTE *)a1, v16, 0, 1, 0, 0, a4, 0, 0, 0, 0, 0, 0);
        if (v13 == -16993)
          v14 = 0;
        else
          v14 = v13;
        goto LABEL_10;
      }
      goto LABEL_16;
    }
  }
  v14 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v14;
}

uint64_t _createOutputBufferAttributesForImageIndex_1(_QWORD *a1, uint64_t a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v10;
  CFTypeRef v11;
  uint64_t OutputBufferAttributesForReader;
  CFTypeRef cf;

  cf = 0;
  v8 = a1[6];
  v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v9)
    return 4294954514;
  v10 = v9(v8, a2, &cf, 0);
  v11 = cf;
  if ((_DWORD)v10)
  {
    OutputBufferAttributesForReader = v10;
    if (!cf)
      return OutputBufferAttributesForReader;
    goto LABEL_4;
  }
  OutputBufferAttributesForReader = _createOutputBufferAttributesForReader(a1, cf, 0, 0, a3, a4);
  v11 = cf;
  if (cf)
LABEL_4:
    CFRelease(v11);
  return OutputBufferAttributesForReader;
}

uint64_t _createOutputBufferAttributesForThumbnailIndex_0(_QWORD *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t OutputBufferAttributesForReader;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v15;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  v10 = a1[6];
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (v11)
  {
    OutputBufferAttributesForReader = v11(v10, a2, &cf, 0);
    if ((_DWORD)OutputBufferAttributesForReader)
    {
LABEL_6:
      v15 = OutputBufferAttributesForReader;
      goto LABEL_8;
    }
    v13 = cf;
    v14 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v14)
    {
      OutputBufferAttributesForReader = v14(v13, a3, &v17);
      if (!(_DWORD)OutputBufferAttributesForReader)
        OutputBufferAttributesForReader = _createOutputBufferAttributesForReader(a1, v17, cf, 0, a4, a5);
      goto LABEL_6;
    }
  }
  v15 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return v15;
}

uint64_t _createOutputBufferAttributesForAuxiliaryIndex_0(_QWORD *a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t OutputBufferAttributesForReader;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v15;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  v10 = a1[6];
  v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (v11)
  {
    OutputBufferAttributesForReader = v11(v10, a2, &cf, 0);
    if ((_DWORD)OutputBufferAttributesForReader)
    {
LABEL_6:
      v15 = OutputBufferAttributesForReader;
      goto LABEL_8;
    }
    v13 = cf;
    v14 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v14)
    {
      OutputBufferAttributesForReader = v14(v13, a3, &v17);
      if (!(_DWORD)OutputBufferAttributesForReader)
        OutputBufferAttributesForReader = _createOutputBufferAttributesForReader(a1, v17, cf, 1, a4, a5);
      goto LABEL_6;
    }
  }
  v15 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return v15;
}

uint64_t _transcodeToJFIF_0(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  CFTypeID v10;
  const void *Value;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  const void *v16;
  CFTypeID v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, const void **, _QWORD);
  uint64_t ItemTypeFromReader;
  int v21;
  __CFDictionary *MutableCopy;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t ImageOrientation;
  CFAllocatorRef v26;
  uint64_t FigBaseObject;
  uint64_t (*v28)(uint64_t, _QWORD, CFAllocatorRef, const __CFNumber **);
  int v29;
  unsigned int Int32;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t *);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, int *);
  int v36;
  uint64_t v37;
  _BOOL4 v38;
  CGColorSpace *v39;
  __CFDictionary *v40;
  CFTypeRef v41;
  __CFDictionary *v42;
  __CFDictionary *v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t (*v50)(const void *, uint64_t, const void **);
  uint64_t v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  const void *v57;
  uint64_t v58;
  __CFDictionary *v59;
  __CFDictionary *v60;
  uint64_t v61;
  CFTypeRef v62;
  uint64_t AuxiliaryImageCountForIndex_1;
  uint64_t v64;
  const void *v67;
  __CFDictionary *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  CFTypeRef v73;
  CFTypeRef v74;
  int v75;
  CFTypeRef v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  const void *v81;
  uint64_t PictureCollectionCodecPool;
  __CFDictionary *v83;
  const __CFDictionary *v84;
  uint64_t inited;
  _BOOL4 v86;
  uint64_t v88;
  const void *Int;
  const __CFDictionary *v90;
  const __CFString *v91;
  const __CFString *v92;
  CFTypeID v93;
  const void *v94;
  const __CFDictionary *v95;
  uint64_t ThumbnailCountForIndex_1;
  BOOL v97;
  char v98;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  BOOL v105;
  char v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t updated;
  unsigned int v111;
  int v112;
  unsigned __int8 v113;
  uint64_t (*v114)(uint64_t, void **);
  uint64_t v115;
  unint64_t v118;
  uint64_t v119;
  CFTypeRef *v120;
  uint64_t v121;
  const __CFDictionary *v122;
  __CFDictionary *v123;
  char *v124;
  const void *v125;
  int v126;
  __CFDictionary *v127;
  uint64_t (*v128)(uint64_t, CFTypeRef *);
  char v129;
  const __CFAllocator *allocator;
  _QWORD v131[4];
  _QWORD v132[2];
  _BYTE v133[312];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  const void *v156;
  uint64_t v157;
  _QWORD v158[4];
  _QWORD __src[39];
  CFTypeRef v160;
  __int128 v161;
  CFDictionaryRef theDict;
  int v163;
  int v164;
  _OWORD v165[5];
  uint64_t v166;
  char v167;
  int v168;
  CFTypeRef v169;
  CFTypeRef v170;
  void *v171;
  CFTypeRef v172;
  const void *v173;
  const void *v174;
  const void *v175;
  int v176;
  uint64_t v177;
  const __CFNumber *v178;

  theDict = 0;
  v161 = 0uLL;
  v160 = 0;
  memset(__src, 0, sizeof(__src));
  allocator = CFGetAllocator(a1);
  memset(v158, 0, sizeof(v158));
  v157 = 0;
  v156 = 0;
  v154 = 0u;
  v155 = 0u;
  v153 = 0u;
  v152 = 0;
  v150 = 0u;
  v151 = 0u;
  v149 = 0u;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (a2)
  {
    v10 = CFGetTypeID(a2);
    if (v10 != CFDictionaryGetTypeID())
    {
LABEL_300:
      v44 = 4294950306;
LABEL_301:
      _freeTranscodeAuxiliaryEntries(0, 0);
      v123 = 0;
      v40 = 0;
      v39 = 0;
      Int = 0;
      goto LABEL_276;
    }
  }
  LODWORD(v153) = 65793;
  *(_QWORD *)&v155 = 0;
  *(_QWORD *)&v154 = 0;
  *((_QWORD *)&v153 + 1) = 0;
  DWORD2(v154) = 0;
  if (!a2)
    goto LABEL_18;
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("IncludeThumbnail"), &v153);
  CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("IncludeAuxiliaryImages"), (_BYTE *)&v153 + 1);
  Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("PreserveAndModifyGainMap"));
  *(_QWORD *)&v155 = Value;
  if (!Value || (v12 = CFGetTypeID(Value), v12 == CFDictionaryGetTypeID()) && !FigCFDictionaryGetValue())
  {
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("IncludeMetadata"), (_BYTE *)&v153 + 2);
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("PreferSoftwareEncode"), (_BYTE *)&v153 + 3);
    BYTE9(v154) = CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("ApplyAlpha"), (_BYTE *)&v154 + 8);
    if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)a2, CFSTR("QualityControllerType"), (char *)&v155 + 12))BYTE8(v155) = 1;
    v13 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("QualityControllerParameters"));
    if (v13)
      v13 = CFRetain(v13);
    v156 = v13;
    CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("AllowITUR_2100TFToSDRTransformBeforeEncode"), (_BYTE *)&v154 + 10);
    v14 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("ReplacementImageProperties"));
    *((_QWORD *)&v153 + 1) = v14;
    if (!v14 || (v15 = CFGetTypeID(v14), v15 == CFDictionaryGetTypeID()))
    {
      v16 = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("ColorConverter"));
      *(_QWORD *)&v154 = v16;
      if (!v16 || (v17 = CFGetTypeID(v16), v17 == CFDictionaryGetTypeID()))
      {
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a2, CFSTR("RestrictedTranscoding"), (_BYTE *)&v154 + 11);
        goto LABEL_18;
      }
    }
    goto LABEL_300;
  }
  v119 = FigSignalErrorAt();
  if ((_DWORD)v119)
  {
    v44 = v119;
    goto LABEL_301;
  }
LABEL_18:
  v174 = 0;
  v175 = 0;
  v172 = 0;
  v173 = 0;
  v170 = 0;
  v171 = 0;
  v169 = 0;
  v18 = a1[6];
  v19 = *(uint64_t (**)(uint64_t, uint64_t, const void **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 16);
  v120 = a5;
  if (!v19)
  {
    v124 = 0;
    v125 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    MutableCopy = 0;
LABEL_48:
    v42 = 0;
    v43 = 0;
    v44 = 4294954514;
    goto LABEL_126;
  }
  ItemTypeFromReader = v19(v18, a3, &v173, 0);
  if ((_DWORD)ItemTypeFromReader
    || (v168 = 0, ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(v173, &v168),
                  (_DWORD)ItemTypeFromReader)
    || (v21 = v168,
        v167 = 0,
        v166 = -1,
        ItemTypeFromReader = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a3, 0, 4, (uint64_t)CFSTR("urn:com:apple:photo:2020:aux:hdrgainmap"), &v167, &v166), (_DWORD)ItemTypeFromReader))
  {
    v44 = ItemTypeFromReader;
    v124 = 0;
    v125 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    MutableCopy = 0;
    goto LABEL_303;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v124 = 0;
    v125 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 4294950305;
    goto LABEL_126;
  }
  if (v21 == 1953325424)
  {
    memset(v165, 0, sizeof(v165));
    v23 = _copyFlexRangeDetails(a1[5], (uint64_t)v173, 0, v165, 0, &v172, &v175, &v174);
    if (!(_DWORD)v23)
    {
      v24 = *((float *)v165 + 3) > 0.0 && *((float *)v165 + 2) == 0.0;
      v164 = 1;
      v163 = 1;
      ImageOrientation = _getImageOrientation((uint64_t)a1, v175, 0, &v164);
      if ((_DWORD)ImageOrientation
        || (ImageOrientation = _getImageOrientation((uint64_t)a1, v174, 0, &v163), (_DWORD)ImageOrientation))
      {
        v44 = ImageOrientation;
        v41 = 0;
        v43 = 0;
        goto LABEL_327;
      }
      v178 = 0;
      if (!v175)
      {
        v33 = a3;
        v38 = 0;
        v37 = v33;
        goto LABEL_61;
      }
      v26 = CFGetAllocator(a1);
      FigBaseObject = FigPictureReaderGetFigBaseObject();
      v28 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
      if (v28)
      {
        v29 = v28(FigBaseObject, *MEMORY[0x1E0CC4B70], v26, &v178);
        if (v29)
          goto LABEL_328;
        Int32 = CMPhotoCFNumberGetInt32(v178);
        v177 = 0;
        v31 = a1[6];
        v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v32)
        {
          v29 = v32(v31, 1, &v177);
          if (!v29)
          {
            if (v177 >= 1)
            {
              v33 = 0;
              while (1)
              {
                v176 = 0;
                v34 = a1[6];
                v35 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 16);
                if (!v35)
                {
                  v36 = -12782;
                  goto LABEL_42;
                }
                v29 = v35(v34, v33, 0, &v176);
                if (v29)
                  goto LABEL_328;
                if (v176 == Int32)
                  break;
                if (++v33 >= v177)
                  goto LABEL_41;
              }
              v36 = 0;
              goto LABEL_43;
            }
            goto LABEL_41;
          }
LABEL_328:
          v36 = v29;
          goto LABEL_42;
        }
      }
LABEL_41:
      v36 = -16993;
LABEL_42:
      v33 = -1;
LABEL_43:
      if (v178)
        CFRelease(v178);
      v37 = a3;
      if (v36)
      {
        v38 = 0;
        v33 = v37;
      }
      else
      {
        v38 = v164 == v163 && v24;
      }
LABEL_61:
      v54 = _copyColorInfoForItem(a1, v175, 0, 0, 0, 0, (CFTypeRef *)&v171, 0, 0, 0, 0, 0, 0);
      if ((_DWORD)v54
        || (v54 = _copyColorInfoForItem(a1, v173, 0, 0, 0, 0, &v170, 0, 0, 0, 0, 0, 0), (_DWORD)v54))
      {
        v44 = v54;
        v41 = 0;
        v43 = 0;
        a3 = v37;
      }
      else
      {
        v55 = FigCFDictionaryGetValue();
        v126 = 1953325424;
        if (v38)
        {
          v56 = (const void *)v55;
          if (v175)
          {
            v41 = CFRetain(v175);
            v57 = v175;
          }
          else
          {
            v57 = 0;
            v41 = 0;
          }
          a3 = v37;
          v52 = v24;
          v58 = _translateCropForTranscodeIfNeeded((uint64_t)a1, MutableCopy, v56, v173, v57);
          v127 = 0;
          if (!(_DWORD)v58)
          {
            v53 = 0;
            goto LABEL_80;
          }
          v44 = v58;
          v43 = 0;
          goto LABEL_327;
        }
        if (v173)
          v41 = CFRetain(v173);
        else
          v41 = 0;
        a3 = v37;
        v59 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (v59)
        {
          v60 = v59;
          v61 = CMPhotoCFDictionarySetInt32(v59, CFSTR("DecodeToHDROutputMode"), 2);
          if (!(_DWORD)v61)
          {
            v127 = v60;
            CFDictionarySetValue(MutableCopy, CFSTR("DecodeToHDROutput"), v60);
            CFDictionarySetValue(MutableCopy, CFSTR("ApplyTransform"), (const void *)*MEMORY[0x1E0C9AE50]);
            v52 = v24;
            if (v24)
            {
              v53 = (_QWORD)v155 != 0;
            }
            else
            {
              CFDictionaryRemoveValue(MutableCopy, CFSTR("PreserveAndModifyGainMap"));
              *(_QWORD *)&v155 = 0;
              if (v171)
                CFRelease(v171);
              v53 = 0;
              v62 = v170;
              v170 = 0;
              v171 = (void *)v62;
            }
LABEL_80:
            *(_QWORD *)&v150 = 0;
            if (!BYTE1(v153) && !(_QWORD)v155)
            {
              v44 = 0;
              v42 = 0;
LABEL_100:
              v124 = 0;
LABEL_125:
              v40 = MutableCopy;
              v39 = (CGColorSpace *)v171;
              v171 = 0;
              v125 = v41;
              a3 = v33;
              v41 = 0;
              MutableCopy = 0;
              v43 = v127;
              goto LABEL_126;
            }
            *(_QWORD *)&v165[0] = 0;
            AuxiliaryImageCountForIndex_1 = _getAuxiliaryImageCountForIndex_1((uint64_t)a1, v33, v47, v165);
            if ((_DWORD)AuxiliaryImageCountForIndex_1)
            {
              v44 = AuxiliaryImageCountForIndex_1;
              v42 = 0;
LABEL_324:
              v43 = v127;
              v124 = 0;
              v125 = 0;
              v39 = 0;
              v40 = 0;
              goto LABEL_126;
            }
            v64 = FigCFDictionaryGetValue();
            v42 = 0;
            if (v53 || v167 != 0 || v126 == 1953325424)
            {
              v67 = (const void *)v64;
              if (v64)
              {
                v68 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                v42 = v68;
                if (!v68)
                {
LABEL_321:
                  v44 = 4294950305;
                  goto LABEL_324;
                }
                *(_QWORD *)&v155 = v68;
                CFDictionarySetValue(MutableCopy, CFSTR("PreserveAndModifyGainMap"), v68);
                if (v53)
                  CMPhotoCFDictionarySetBoolean(v42, CFSTR("ApplyTransform"), 1);
                v69 = _translateCropForTranscodeIfNeeded((uint64_t)a1, v42, v67, v41, v174);
                if ((_DWORD)v69)
                {
                  v44 = v69;
                  goto LABEL_324;
                }
              }
            }
            if (*(uint64_t *)&v165[0] <= 0 && !v52)
            {
              v44 = 0;
              goto LABEL_100;
            }
            v70 = (char *)malloc_type_calloc(*(_QWORD *)&v165[0] + 1, 0x20uLL, 0x1062040D23FC1D2uLL);
            if (v70)
            {
              v72 = v70;
              *(_QWORD *)&v149 = a1;
              *((_QWORD *)&v149 + 1) = v33;
              LOBYTE(v152) = BYTE11(v154);
              *(_QWORD *)&v151 = v155;
              *((_QWORD *)&v150 + 1) = v70;
              v121 = a4;
              if (v52)
              {
                *v70 = 1;
                v73 = v174;
                if (v174)
                  v73 = CFRetain(v174);
                *((_QWORD *)v72 + 1) = v73;
                v74 = v172;
                if (v172)
                  v74 = CFRetain(v172);
                v75 = v126;
                *((_QWORD *)v72 + 2) = v74;
                v76 = v170;
                if (v170)
                  v76 = CFRetain(v170);
                *((_QWORD *)v72 + 3) = v76;
                *((_QWORD *)&v151 + 1) = 0;
                v77 = 1;
              }
              else
              {
                v77 = 0;
                v75 = v126;
              }
              v124 = v72;
              if (*(uint64_t *)&v165[0] < 1)
              {
                v44 = 0;
              }
              else
              {
                v78 = 0;
                do
                {
                  if (v169)
                  {
                    CFRelease(v169);
                    v169 = 0;
                  }
                  v44 = _copyAuxiliaryImageTypeInfo((uint64_t)a1, v33, v78, v71, (uint64_t)&v169, 0);
                  if (!(_DWORD)v44 && CMPhotoGetAuxiliaryImageTypeFromURN() != 3)
                  {
                    v79 = FigCFEqual();
                    if (!v79 || v75 != 1953325424)
                    {
                      if (v79 | BYTE1(v153))
                      {
                        v80 = &v124[32 * v77];
                        *v80 = 0;
                        *((_QWORD *)v80 + 1) = v78;
                        ++v77;
                      }
                    }
                  }
                  ++v78;
                }
                while (v78 < *(uint64_t *)&v165[0]);
              }
              *(_QWORD *)&v150 = v77;
              a4 = v121;
              goto LABEL_125;
            }
            goto LABEL_321;
          }
          v44 = v61;
          v43 = v60;
        }
        else
        {
          v43 = 0;
          v44 = 4294950305;
        }
      }
LABEL_327:
      v124 = 0;
      v125 = 0;
      v39 = 0;
      v40 = 0;
      v42 = 0;
      goto LABEL_126;
    }
    v44 = v23;
    v124 = 0;
    v125 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
LABEL_303:
    v42 = 0;
    v43 = 0;
    goto LABEL_126;
  }
  if (v173)
  {
    v41 = CFRetain(v173);
    v45 = v173;
  }
  else
  {
    v45 = 0;
    v41 = 0;
  }
  v46 = _copyColorInfoForItem(a1, v45, 0, 0, 0, 0, (CFTypeRef *)&v171, 0, 0, 0, 0, 0, 0);
  if ((_DWORD)v46)
  {
    v44 = v46;
    v124 = 0;
    v125 = 0;
    v39 = 0;
    v40 = 0;
    goto LABEL_303;
  }
  if (!v167)
  {
    v126 = v21;
    v127 = 0;
    v52 = 0;
    v53 = 0;
    v33 = a3;
    goto LABEL_80;
  }
  v48 = v173;
  v49 = v166;
  v50 = *(uint64_t (**)(const void *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v50)
  {
    v124 = 0;
    v125 = 0;
    v39 = 0;
    v40 = 0;
    goto LABEL_48;
  }
  v126 = v21;
  v51 = v50(v48, v49, &v174);
  if (!(_DWORD)v51)
  {
    v52 = 0;
    v53 = 0;
    v33 = a3;
    v127 = 0;
    goto LABEL_80;
  }
  v44 = v51;
  v39 = 0;
  v40 = 0;
  v124 = 0;
  v125 = 0;
  v42 = 0;
  v43 = 0;
LABEL_126:
  if (v169)
    CFRelease(v169);
  if (v175)
    CFRelease(v175);
  if (v174)
    CFRelease(v174);
  if (v173)
    CFRelease(v173);
  if (v41)
    CFRelease(v41);
  if (MutableCopy)
    CFRelease(MutableCopy);
  v81 = v125;
  if (v42)
    CFRelease(v42);
  if (v43)
    CFRelease(v43);
  if (v172)
    CFRelease(v172);
  if (v171)
    CFRelease(v171);
  if (v170)
    CFRelease(v170);
  if ((_DWORD)v44)
    goto LABEL_307;
  PictureCollectionCodecPool = CMPhotoDecompressionSessionGetPictureCollectionCodecPool(a1[2], &v157);
  if ((_DWORD)PictureCollectionCodecPool
    || (PictureCollectionCodecPool = CMPhotoDecompressionSessionCopyScaler(a1[2], (_QWORD *)&v161 + 1),
        (_DWORD)PictureCollectionCodecPool)
    || (PictureCollectionCodecPool = CMPhotoDecompressionSessionCopySurfacePool(a1[2], &v161),
        (_DWORD)PictureCollectionCodecPool)
    || (v148 = 0,
        v147 = 0,
        PictureCollectionCodecPool = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, a3, 0, 3, 0, &v148, &v147), (_DWORD)PictureCollectionCodecPool))
  {
LABEL_306:
    v44 = PictureCollectionCodecPool;
LABEL_307:
    Int = 0;
    v123 = 0;
    goto LABEL_274;
  }
  if (v148 && !BYTE9(v154))
  {
    PictureCollectionCodecPool = FigSignalErrorAt();
    goto LABEL_306;
  }
  if (!v148 || !BYTE8(v154))
  {
    v84 = v40;
    goto LABEL_161;
  }
  v83 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v83)
  {
    v84 = v83;
    CMPhotoCFDictionarySetInt(v83, CFSTR("OutputPixelFormat"), 1111970369);
    if (v40)
      CFRelease(v40);
LABEL_161:
    inited = CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex((uint64_t)a1, a3, 0, 0, 0, (CFTypeRef *)&theDict);
    if ((_DWORD)inited)
      goto LABEL_298;
    if (v39)
    {
      v86 = CGColorSpaceUsesITUR_2100TF(v39);
      if (v86 && BYTE10(v154))
      {
        CFRelease(v39);
        v39 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D908]);
        LOBYTE(v86) = 1;
      }
    }
    else
    {
      LOBYTE(v86) = 0;
    }
    _determineDecodeStrategy_1((uint64_t)a1, v125, 0, v84, 0, 0, 1, (uint64_t)__src);
    if ((_DWORD)inited)
      goto LABEL_298;
    if (!LOBYTE(__src[1]) && (BYTE10(v154) || !v86))
    {
      LOBYTE(__src[1]) = 1;
      HIDWORD(__src[0]) = 875704422;
    }
    inited = CMPhotoDecompressionContainerInitColorController(v158, (CFDictionaryRef)v154, v39, 0);
    if ((_DWORD)inited)
    {
LABEL_298:
      v44 = inited;
      Int = 0;
      goto LABEL_299;
    }
    if (BYTE8(v155))
    {
      Int = 0;
    }
    else
    {
      v156 = 0;
      v90 = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBCF70]);
      if (!v90
        || (v91 = (const __CFString *)CFDictionaryGetValue(v90, CFSTR("26"))) == 0
        || (v92 = v91, v93 = CFGetTypeID(v91), v93 != CFStringGetTypeID())
        || CFStringCompare(v92, CFSTR("q900n"), 0)
        && CFStringCompare(v92, CFSTR("q900s"), 0)
        && CFStringCompare(v92, CFSTR("q850s"), 0)
        && CFStringCompare(v92, CFSTR("q825s"), 0)
        && CFStringCompare(v92, CFSTR("q800n"), 0)
        && CFStringCompare(v92, CFSTR("q750n"), 0))
      {
        HIDWORD(v155) = 4;
        Int = CMPhotoCFNumberCreateInt(2);
      }
      else
      {
        Int = (const void *)FigCFNumberCreateSInt32();
        if (!Int)
        {
LABEL_311:
          v123 = 0;
          v44 = 4294950305;
          goto LABEL_316;
        }
        HIDWORD(v155) = 4;
      }
      v156 = Int;
    }
    v94 = (const void *)*((_QWORD *)&v153 + 1);
    v95 = theDict;
    if (*((_QWORD *)&v153 + 1))
    {
      if (theDict && (CFRelease(theDict), theDict = 0, (v94 = (const void *)*((_QWORD *)&v153 + 1)) == 0))
        v95 = 0;
      else
        v95 = (const __CFDictionary *)CFRetain(v94);
      theDict = v95;
    }
    if (!BYTE2(v153) && v95)
    {
      CFRelease(v95);
      theDict = 0;
    }
    v146 = 0;
    if ((_BYTE)v153)
    {
      ThumbnailCountForIndex_1 = _getThumbnailCountForIndex_1((uint64_t)a1, a3, v88, &v146);
      if ((_DWORD)ThumbnailCountForIndex_1)
      {
LABEL_232:
        v44 = ThumbnailCountForIndex_1;
LABEL_299:
        v123 = 0;
LABEL_316:
        v40 = v84;
        goto LABEL_274;
      }
      if ((_BYTE)v153)
        v97 = v146 <= a4;
      else
        v97 = 0;
      v98 = v97;
      v129 = v98;
      if ((_BYTE)v153 && v146 > a4)
      {
        Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v100 = Mutable;
          v101 = CMPhotoCFDictionarySetSize(Mutable, CFSTR("MaxPixelSize"), 160);
          if ((_DWORD)v101
            || (v101 = CMPhotoCFDictionarySetBoolean(v100, CFSTR("ApplyTransform"), HIBYTE(__src[8])), (_DWORD)v101)
            || LOBYTE(__src[15])
            && (v101 = CMPhotoCFDictionarySetBoolean(v100, CFSTR("UseVTDecompression"), 1), (_DWORD)v101)
            || (_QWORD)v154
            && LOBYTE(__src[1])
            && (v101 = CMPhotoCFDictionarySetInt32(v100, CFSTR("OutputPixelFormat"), SHIDWORD(__src[0])), (_DWORD)v101)
            || BYTE11(v154)
            && (v101 = CMPhotoCFDictionarySetBoolean(v100, CFSTR("RestrictedDecoding"), BYTE11(v154)), (_DWORD)v101))
          {
            v44 = v101;
            v123 = v100;
          }
          else
          {
            if (!BYTE5(__src[2]))
            {
              v128 = _transcodeThumbnailCallback;
              goto LABEL_234;
            }
            v123 = v100;
            v44 = FigSignalErrorAt();
          }
          goto LABEL_316;
        }
        goto LABEL_311;
      }
    }
    else
    {
      v129 = 0;
    }
    v100 = 0;
    if (BYTE1(v153) && (uint64_t)v150 >= 1)
    {
      v128 = 0;
      if (BYTE5(__src[2]))
      {
        ThumbnailCountForIndex_1 = FigSignalErrorAt();
        goto LABEL_232;
      }
    }
    else
    {
      v128 = 0;
    }
LABEL_234:
    v102 = BYTE4(__src[38]);
    if (BYTE4(__src[38]))
    {
      v103 = 0;
      v104 = 1;
      if (LODWORD(__src[23]) > 8)
      {
        v102 = 0;
      }
      else if (((1 << SLOBYTE(__src[23])) & 0x18) != 0)
      {
        v104 = 0;
        v103 = 1;
        v102 = 1;
      }
      else if (((1 << SLOBYTE(__src[23])) & 0x60) != 0)
      {
        v104 = 0;
        v103 = 0;
        v102 = 2;
      }
      else
      {
        v102 = 0;
        if (((1 << SLOBYTE(__src[23])) & 0x180) != 0)
        {
          v104 = 0;
          v103 = 0;
          v102 = 3;
        }
      }
    }
    else
    {
      v103 = 0;
      v104 = 1;
    }
    v143 = 0u;
    v144 = 0u;
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v134 = 0u;
    v145 = 0;
    v132[0] = a1;
    LODWORD(v134) = v102;
    memcpy(v133, __src, sizeof(v133));
    v132[1] = v125;
    if (v148)
      v105 = BYTE8(v154) == 0;
    else
      v105 = 1;
    v106 = !v105;
    LOBYTE(v142) = v106;
    if (!v105)
    {
      *((_QWORD *)&v142 + 1) = a3;
      *(_QWORD *)&v143 = v84;
    }
    *((_QWORD *)&v134 + 1) = 0;
    *(_QWORD *)&v135 = a1;
    v136 = v161;
    *((_QWORD *)&v135 + 1) = v157;
    BYTE8(v137) = BYTE1(__src[0]);
    LOBYTE(v137) = BYTE6(__src[38]);
    DWORD1(v137) = __src[9];
    BYTE9(v137) = BYTE1(__src[13]);
    WORD5(v137) = WORD1(__src[8]);
    BYTE12(v137) = BYTE4(__src[8]);
    BYTE13(v137) = __src[15];
    *(_QWORD *)&v138 = __src[16];
    DWORD2(v138) = __src[17];
    WORD6(v138) = WORD2(__src[17]);
    *((_QWORD *)&v139 + 1) = __src[12];
    *(_QWORD *)&v139 = __src[18];
    if (BYTE5(__src[38]) || vabdd_f64(floor((double)__src[24] * 0.5), (double)__src[24] * 0.5) >= 0.000001)
      goto LABEL_256;
    if (vabdd_f64(floor((double)__src[25] * 0.5), (double)__src[25] * 0.5) >= 0.000001)
      v106 = 1;
    if ((v106 & 1) != 0)
    {
LABEL_256:
      v107 = 1;
    }
    else
    {
      *((_QWORD *)&v143 + 1) = __src[3] / __src[24];
      *(_QWORD *)&v144 = __src[4] / __src[25];
      v118 = __src[6] + __src[4] - 1;
      v107 = (__src[5] + __src[3] + __src[24] + ~((unint64_t)(__src[5] + __src[3] - 1) % __src[24]))
           / __src[24]
           - __src[3] / __src[24];
      *((_QWORD *)&v144 + 1) = v107;
      v145 = (__src[6] + __src[4] + __src[25] + ~(v118 % __src[25])) / __src[25] - __src[4] / __src[25];
      if ((v104 | v103) == 1)
      {
        *((_QWORD *)&v141 + 1) = (__src[6] + __src[4] + __src[25] + ~(v118 % __src[25])) / __src[25]
                               - __src[4] / __src[25];
LABEL_258:
        v122 = v84;
        v131[2] = a3;
        v131[3] = a4;
        v131[0] = a1;
        v131[1] = v100;
        v123 = v100;
        if (theDict)
        {
          v108 = __src[28];
          v109 = __src[29];
          updated = CMPhotoUpdateImageProperties(&theDict, HIBYTE(__src[8]), 1, (double)__src[28], (double)__src[29]);
          if ((_DWORD)updated)
          {
            v44 = updated;
LABEL_273:
            v40 = v122;
            goto LABEL_274;
          }
        }
        else
        {
          v108 = __src[28];
          v109 = __src[29];
        }
        v111 = HIDWORD(__src[0]);
        v112 = -2;
        v113 = BYTE3(v153);
        while (1)
        {
          *((_QWORD *)&v140 + 1) = 0;
          *(_QWORD *)&v141 = 0;
          v114 = (uint64_t (*)(uint64_t, void **))_transcodeSourceCallbackFullImageWithAlpha;
          if (!(_BYTE)v142)
            v114 = (uint64_t (*)(uint64_t, void **))_transcodeSourceCallback;
          v115 = CMPhotoJFIFTranscodeStrips(allocator, v108, v109, *((_QWORD *)&v141 + 1) > 1uLL, v111, SHIDWORD(v155), v156, v113, BYTE11(v154), SBYTE10(v154), v114, (uint64_t)v132, v129, v128, (uint64_t)v131, v150, (uint64_t (*)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *))_transcodeAuxiliaryImageCallback_0, (uint64_t)&v149, theDict,
                   (uint64_t)v158,
                   (const void *)v161,
                   *((const void **)&v161 + 1),
                   v157,
                   (const __CFData **)&v160);
          v44 = v115;
          if (!(_DWORD)v115 || BYTE3(v153))
            break;
          if (CMPhotoUnifiedJPEGEncoderIsHardwareAvailable())
          {
            v113 = 1;
            BYTE3(v153) = 1;
            if (!__CFADD__(v112++, 1))
              continue;
          }
          v40 = v122;
          v81 = v125;
          goto LABEL_274;
        }
        v81 = v125;
        if (!(_DWORD)v115)
        {
          *v120 = v160;
          v160 = 0;
        }
        goto LABEL_273;
      }
    }
    *((_QWORD *)&v141 + 1) = v107;
    goto LABEL_258;
  }
  Int = 0;
  v123 = 0;
  v44 = 4294950305;
LABEL_274:
  _freeTranscodeAuxiliaryEntries(v150, v124);
  if (v81)
    CFRelease(v81);
LABEL_276:
  if (theDict)
    CFRelease(theDict);
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (*((_QWORD *)&v161 + 1))
    CFRelease(*((CFTypeRef *)&v161 + 1));
  if (v160)
    CFRelease(v160);
  if (v123)
    CFRelease(v123);
  if (Int)
    CFRelease(Int);
  CMPhotoSurfacePoolMarkCachesVolatile(v161, 0);
  if ((_QWORD)v161)
    CFRelease((CFTypeRef)v161);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  return v44;
}

uint64_t _initTileIteratorForIndex_0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, uint64_t, const void **);
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef, CFTypeRef *);
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, CFTypeRef *);
  _QWORD *v18;
  uint64_t v19;
  const void *v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;

  v23 = 0;
  cf = 0;
  v22 = 0;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = a3[3];
  v6 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v6)
    goto LABEL_19;
  v7 = v6(v4, v5, &cf, 0);
  if ((_DWORD)v7)
  {
LABEL_28:
    v19 = v7;
    goto LABEL_20;
  }
  v8 = a3[5];
  if (v8 != -1)
  {
    v21 = 0;
    v9 = cf;
    v10 = *(uint64_t (**)(CFTypeRef, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v10)
    {
      v11 = v9;
      v12 = v8;
      goto LABEL_9;
    }
LABEL_19:
    v19 = 4294954514;
    goto LABEL_20;
  }
  v13 = a3[4];
  v14 = cf;
  if (v13 == -1)
    goto LABEL_13;
  v21 = 0;
  v10 = *(uint64_t (**)(CFTypeRef, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v10)
    goto LABEL_19;
  v11 = v14;
  v12 = v13;
LABEL_9:
  v7 = v10(v11, v12, &v21);
  if ((_DWORD)v7)
    goto LABEL_28;
  if (cf)
    CFRelease(cf);
  v14 = v21;
  cf = v21;
LABEL_13:
  v15 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v15)
    goto LABEL_19;
  v7 = v15(v14, &v23);
  if ((_DWORD)v7)
    goto LABEL_28;
  v16 = v23;
  v17 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v17)
    goto LABEL_19;
  v7 = v17(v16, &v22);
  if ((_DWORD)v7)
    goto LABEL_28;
  v18 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v18)
  {
    v19 = 0;
    *v18 = v22;
    v22 = 0;
    a3[6] = &_initTileIteratorForIndex_vtable;
    a3[7] = v18;
  }
  else
  {
    v19 = 4294950305;
  }
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  return v19;
}

uint64_t _finalizeTileIterator_0(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v3;

  v3 = *(CFTypeRef **)(a2 + 56);
  if (v3)
  {
    if (!*v3 || (CFRelease(*v3), *v3 = 0, (v3 = *(CFTypeRef **)(a2 + 56)) != 0))
    {
      *(_QWORD *)(a2 + 56) = 0;
      free(v3);
    }
  }
  *(_QWORD *)(a2 + 48) = 0;
  return 0;
}

uint64_t _copyXMPForIndex_1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFData **a5)
{
  return _copyMetadataForIndex(a1, 1, a2, a3, 0, a5);
}

uint64_t _getDebugMetadataCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return _getMetadataCountForIndex(a1, 2, a2, a4);
}

uint64_t _copyDebugMetadataForIndex_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFData **a5)
{
  return _copyMetadataForIndex(a1, 2, a2, a3, 0, a5);
}

uint64_t _getCustomMetadataCountForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return _getMetadataCountForIndex(a1, 4, a2, a4);
}

uint64_t _copyCustomMetadataForIndex_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __CFData **a5)
{
  return _copyMetadataForIndex(a1, 4, a2, a3, 0, a5);
}

uint64_t _createSequenceContainer(uint64_t a1, uint64_t a2, CFIndex a3, uint64_t *a4)
{
  uint64_t result;
  const __CFArray *Count;
  uint64_t MutableCopy;
  __CFDictionary *v10;
  const void *ValueAtIndex;
  uint64_t v12;

  if (!a4)
    return 0;
  if (*(_BYTE *)(a1 + 120)
    || (*(_BYTE *)(a1 + 120) = 1,
        result = CMPhotoDecompressionContainerHEICS_GetSequenceInfoFromSource(*(const void **)(a1 + 56), (__CFArray **)(a1 + 128)), !(_DWORD)result))
  {
    if (a3 < 0)
      return 4294950306;
    Count = *(const __CFArray **)(a1 + 128);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= a3)
    {
      return 4294950306;
    }
    else
    {
      MutableCopy = FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v10 = (__CFDictionary *)MutableCopy;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), a3);
        CFDictionarySetValue(v10, CFSTR("SequenceInfo"), ValueAtIndex);
        if (!FigCFDictionaryGetValue())
        {
          if (*(_BYTE *)(a1 + 28))
            CFDictionarySetValue(v10, CFSTR("UseLenientParsingMode"), (const void *)*MEMORY[0x1E0C9AE50]);
        }
        v12 = CMPhotoDecompressionContainerCreate(*(_QWORD *)(a1 + 40), 0, v10, *(_QWORD *)(a1 + 16), 0, a4);
        CFRelease(v10);
        return v12;
      }
      else
      {
        return 4294950305;
      }
    }
  }
  return result;
}

uint64_t _getEncoderNativePixelFormatForIndex(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t NativePixelFormatFromFormatDescription;
  CMSampleBufferRef v7;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v10;
  CFTypeRef cf;
  CMSampleBufferRef sbuf;

  cf = 0;
  sbuf = 0;
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (!a3)
      return 0;
    if (a1[6])
    {
      v10 = -1;
      v5 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, a2, &v10, 0, (CFMutableDictionaryRef *)&cf);
      if (!(_DWORD)v5)
      {
        NativePixelFormatFromFormatDescription = CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions(a1, (const __CFNumber *)v10, (const __CFDictionary *)cf, (uint64_t)&sbuf);
        v7 = sbuf;
        if (!(_DWORD)NativePixelFormatFromFormatDescription)
        {
          FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
          NativePixelFormatFromFormatDescription = CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(FormatDescription, (uint64_t)sbuf, a3);
          v7 = sbuf;
        }
        if (v7)
          CFRelease(v7);
        goto LABEL_9;
      }
    }
    else
    {
      v5 = FigSignalErrorAt();
    }
    NativePixelFormatFromFormatDescription = v5;
LABEL_9:
    if (cf)
      CFRelease(cf);
    return NativePixelFormatFromFormatDescription;
  }
  return FigSignalErrorAt();
}

uint64_t _copyImageSubsamplingForIndex_1(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t InfoFromFormatDescription;
  const opaqueCMFormatDescription *FormatDescription;
  opaqueCMSampleBuffer *v8;
  uint64_t v9;
  uint64_t v11;
  CFTypeRef cf;
  const opaqueCMFormatDescription *v13;
  opaqueCMSampleBuffer *v14;

  v13 = 0;
  v14 = 0;
  cf = 0;
  if (!a3)
  {
    v9 = 0;
    goto LABEL_15;
  }
  InfoFromFormatDescription = _copyFormatDescriptionForIndex_1((_QWORD *)a1, a2, (uint64_t)a3, &v13);
  if (!(_DWORD)InfoFromFormatDescription)
  {
    if (CMFormatDescriptionGetMediaSubType(v13) != 1735551332)
    {
      v8 = 0;
      FormatDescription = v13;
LABEL_12:
      InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(FormatDescription, v8, *(unsigned __int8 *)(a1 + 28), 0, 0, a3, 0, 0, 0, 0, 0, 0);
      goto LABEL_13;
    }
    v11 = -1;
    InfoFromFormatDescription = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions((_QWORD *)a1, a2, &v11, 0, (CFMutableDictionaryRef *)&cf);
    if (!(_DWORD)InfoFromFormatDescription)
    {
      InfoFromFormatDescription = CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions((_QWORD *)a1, (const __CFNumber *)v11, (const __CFDictionary *)cf, (uint64_t)&v14);
      if (!(_DWORD)InfoFromFormatDescription)
      {
        if (v13)
        {
          CFRelease(v13);
          v13 = 0;
        }
        FormatDescription = CMSampleBufferGetFormatDescription(v14);
        if (FormatDescription)
          FormatDescription = (const opaqueCMFormatDescription *)CFRetain(FormatDescription);
        v13 = FormatDescription;
        v8 = v14;
        goto LABEL_12;
      }
    }
  }
LABEL_13:
  v9 = InfoFromFormatDescription;
  if (v13)
    CFRelease(v13);
LABEL_15:
  if (v14)
    CFRelease(v14);
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t _copyImageIsRGBForIndex_1(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, const void **, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef cf;
  const void *v13;

  v13 = 0;
  cf = 0;
  if (!a3)
    return 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, const void **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 16);
  if (v7)
  {
    v8 = v7(v6, a2, &v13, 0);
    if ((_DWORD)v8)
    {
      v10 = v8;
    }
    else
    {
      v9 = _copyColorInfoForItem((_BYTE *)a1, v13, 0, 0, 0, 0, 0, 0, 0, &cf, 0, 0, 0);
      if (!(_DWORD)v9 || (v10 = v9, (_DWORD)v9 == -16993))
      {
        v10 = 0;
        *a3 = FigCFEqual();
      }
    }
  }
  else
  {
    v10 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  return v10;
}

uint64_t _copyThumbnailFormatDescriptionForIndex(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, CFTypeRef *);
  CFAllocatorRef v13;
  uint64_t FigBaseObject;
  uint64_t (*v15)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *);
  uint64_t v16;
  CFTypeRef v18;
  CFTypeRef cf;
  uint64_t v20;

  cf = 0;
  v20 = 0;
  v18 = 0;
  if (!a4)
    return 0;
  v8 = a1[6];
  v9 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v9)
  {
    v10 = v9(v8, a2, &cf, 0);
    if ((_DWORD)v10)
      goto LABEL_16;
    v11 = cf;
    v12 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v12)
    {
      v10 = v12(v11, a3, &v18);
      if (!(_DWORD)v10)
      {
        v13 = CFGetAllocator(a1);
        FigBaseObject = FigPictureReaderGetFigBaseObject();
        v15 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
        if (v15)
        {
          v16 = v15(FigBaseObject, *MEMORY[0x1E0CC4B58], v13, &v20);
          if (!(_DWORD)v16)
            *a4 = v20;
          goto LABEL_10;
        }
        goto LABEL_9;
      }
LABEL_16:
      v16 = v10;
      goto LABEL_10;
    }
  }
LABEL_9:
  v16 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v16;
}

uint64_t _getThumbnailGeometryForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, int *a6)
{
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t ImageGeometryFromPictureReader;
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v17;
  int v19;
  __int128 v20;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef cf;

  v22 = 0;
  cf = 0;
  v20 = 0u;
  v21 = 0u;
  v19 = 1;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v13)
    goto LABEL_13;
  ImageGeometryFromPictureReader = v13(v12, a2, &cf, 0);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_19;
  v15 = cf;
  v16 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v16)
  {
LABEL_13:
    v17 = 4294954514;
    goto LABEL_14;
  }
  ImageGeometryFromPictureReader = v16(v15, a3, &v22);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_19;
  ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v22, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v20, 0);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_19;
  if (a6)
  {
    ImageGeometryFromPictureReader = _getImageOrientation(a1, v22, cf, &v19);
    if (!(_DWORD)ImageGeometryFromPictureReader)
    {
      *a6 = v19;
      goto LABEL_9;
    }
LABEL_19:
    v17 = ImageGeometryFromPictureReader;
    goto LABEL_14;
  }
LABEL_9:
  if (a4)
    *a4 = v21;
  v17 = 0;
  if (a5)
    *a5 = *((_QWORD *)&v21 + 1);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  return v17;
}

uint64_t _copyThumbnailBitDepthForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  if (!a4)
    return 0;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v8)
  {
LABEL_9:
    v12 = 4294954514;
    goto LABEL_10;
  }
  v9 = v8(v7, a2, &v16, 0);
  if (!(_DWORD)v9)
  {
    v10 = v16;
    v11 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v11)
    {
      v12 = v11(v10, a3, &cf);
      v13 = cf;
      if (!(_DWORD)v12)
      {
        v12 = CMPhotoPictureReaderCopyImageBitDepth(cf, a4);
        v13 = cf;
      }
      if (v13)
        CFRelease(v13);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v12 = v9;
LABEL_10:
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t _getThumbnailEncodedPixelFormatForIndex(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t YUVPixelFormatForJPEG;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v14;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  CFTypeRef v19;
  CMSampleBufferRef sbuf;

  v19 = 0;
  sbuf = 0;
  v17 = 0;
  cf = 0;
  if (!a4)
  {
    v14 = 0;
    goto LABEL_18;
  }
  if (a1[6])
  {
    v16 = -1;
    YUVPixelFormatForJPEG = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, a2, &v16, 0, (CFMutableDictionaryRef *)&v19);
    if (!(_DWORD)YUVPixelFormatForJPEG)
    {
      YUVPixelFormatForJPEG = CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndexWithOptions(a1, (const __CFNumber *)v16, a3, (const __CFDictionary *)v19, (uint64_t)&sbuf);
      if (!(_DWORD)YUVPixelFormatForJPEG)
      {
        FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
        if (CMFormatDescriptionGetMediaSubType(FormatDescription) == 1785750887)
        {
          v10 = a1[6];
          v11 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 16);
          if (!v11)
            goto LABEL_13;
          YUVPixelFormatForJPEG = v11(v10, a2, &cf, 0);
          if (!(_DWORD)YUVPixelFormatForJPEG)
          {
            v12 = cf;
            v13 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
            if (v13)
            {
              YUVPixelFormatForJPEG = v13(v12, a3, &v17);
              if (!(_DWORD)YUVPixelFormatForJPEG)
                YUVPixelFormatForJPEG = CMPhotoPictureReaderGetYUVPixelFormatForJPEG((uint64_t)v17, a4);
              goto LABEL_12;
            }
LABEL_13:
            v14 = 4294954514;
            goto LABEL_14;
          }
        }
        else
        {
          YUVPixelFormatForJPEG = CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(FormatDescription, (uint64_t)sbuf, a4);
        }
      }
    }
  }
  else
  {
    YUVPixelFormatForJPEG = FigSignalErrorAt();
  }
LABEL_12:
  v14 = YUVPixelFormatForJPEG;
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
LABEL_18:
  if (sbuf)
    CFRelease(sbuf);
  if (v19)
    CFRelease(v19);
  return v14;
}

uint64_t _copyAuxiliaryImageBitDepthForIndex_0(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  if (!a4)
    return 0;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v8)
  {
LABEL_9:
    v12 = 4294954514;
    goto LABEL_10;
  }
  v9 = v8(v7, a2, &v16, 0);
  if (!(_DWORD)v9)
  {
    v10 = v16;
    v11 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v11)
    {
      v12 = v11(v10, a3, &cf);
      v13 = cf;
      if (!(_DWORD)v12)
      {
        v12 = CMPhotoPictureReaderCopyImageBitDepth(cf, a4);
        v13 = cf;
      }
      if (v13)
        CFRelease(v13);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  v12 = v9;
LABEL_10:
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t _getAuxiliaryEncodedPixelFormatForIndex(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t NativePixelFormatFromFormatDescription;
  CMSampleBufferRef v9;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v12;
  CFTypeRef cf;
  CMSampleBufferRef sbuf;

  cf = 0;
  sbuf = 0;
  if (!a4)
    return 0;
  if (a1[6])
  {
    v12 = -1;
    v7 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(a1, a2, &v12, 0, (CFMutableDictionaryRef *)&cf);
    if (!(_DWORD)v7)
    {
      NativePixelFormatFromFormatDescription = CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndexWithOptions(a1, (const __CFNumber *)v12, a3, (const __CFDictionary *)cf, (uint64_t)&sbuf);
      v9 = sbuf;
      if (!(_DWORD)NativePixelFormatFromFormatDescription)
      {
        FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
        NativePixelFormatFromFormatDescription = CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(FormatDescription, (uint64_t)sbuf, a4);
        v9 = sbuf;
      }
      if (v9)
        CFRelease(v9);
      goto LABEL_8;
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  NativePixelFormatFromFormatDescription = v7;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return NativePixelFormatFromFormatDescription;
}

uint64_t _copyColorSpaceForIndex_1(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  uint64_t v8;
  CFTypeRef v9;
  unsigned int v10;
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v7)
    return 4294954514;
  v8 = v7(v6, a2, &cf, 0);
  v9 = cf;
  if ((_DWORD)v8)
  {
    v11 = v8;
    if (!cf)
      return v11;
    goto LABEL_8;
  }
  v10 = _copyColorInfoForItem((_BYTE *)a1, cf, 0, 0, 0, 0, a3, 0, 0, 0, 0, 0, 0);
  if (v10 == -16993)
    v11 = 0;
  else
    v11 = v10;
  v9 = cf;
  if (cf)
LABEL_8:
    CFRelease(v9);
  return v11;
}

void ___invalidate_block_invoke(uint64_t a1)
{
  _destroyAuxMetadataCache(*(_QWORD *)(a1 + 32));
}

uint64_t _checkForInterestingBrands(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, _QWORD, uint64_t, CFArrayRef *);
  uint64_t v6;
  CFIndex i;
  CFIndex Count;
  CFArrayRef theArray;

  theArray = 0;
  if (*(_BYTE *)(a1 + 162))
    return 0;
  v3 = *(_QWORD *)(a1 + 40);
  CMBaseObject = FigPictureCollectionGetCMBaseObject();
  v5 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v5)
  {
    v6 = v5(CMBaseObject, *MEMORY[0x1E0CC49D8], v3, &theArray);
    if ((_DWORD)v6)
    {
      v1 = v6;
    }
    else
    {
      for (i = 0; ; ++i)
      {
        Count = (CFIndex)theArray;
        if (theArray)
          Count = CFArrayGetCount(theArray);
        if (i >= Count)
          break;
        FigCFArrayGetInt32AtIndex();
      }
      v1 = 0;
      *(_BYTE *)(a1 + 162) = 1;
    }
  }
  else
  {
    v1 = 4294954514;
  }
  if (theArray)
    CFRelease(theArray);
  return v1;
}

uint64_t _getItemProperties(uint64_t a1, const void *a2, const void *a3, uint64_t a4, _DWORD *a5, _OWORD *a6, _OWORD *a7, int *a8)
{
  CFTypeRef v14;
  uint64_t ItemTypeFromReader;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v19;
  int BooleanIfPresent;
  uint64_t v21;
  const void *v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFArray *v25;
  const __CFArray *v26;
  CFTypeID v27;
  uint64_t (*v28)(CFTypeRef, CFTypeRef *);
  __int128 v29;
  uint64_t v30;
  unint64_t v32[3];
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  CFTypeRef cf;
  CFTypeRef v40;
  CFTypeRef v41;

  v14 = a2;
  v40 = 0;
  v41 = 0;
  cf = 0;
  v38 = 0;
  ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(a2, &v38);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_45;
  v37 = 1;
  v35 = 0u;
  v36 = 0u;
  if (v38 == 1953325424)
  {
    v34 = 0;
    v33 = 0;
    ValueAtIndex = v14;
    if (a4)
    {
      Value = (const __CFDictionary *)FigCFDictionaryGetValue();
      if (Value)
      {
        v19 = Value;
        CMPhotoCFDictionaryGetIntIfPresent(Value, CFSTR("DecodeToHDROutputMode"), &v33);
        BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(v19, CFSTR("DecodeToHDROutputModeUseBaselayerOrientation"), &v34);
        if (v33 == 6 && !BooleanIfPresent)
        {
          v34 = 1;
LABEL_15:
          FigBaseObject = FigPictureReaderGetFigBaseObject();
          v24 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
          if (!v24)
            goto LABEL_36;
          ItemTypeFromReader = v24(FigBaseObject, *MEMORY[0x1E0CC4B28], *MEMORY[0x1E0C9AE00], &cf);
          if ((_DWORD)ItemTypeFromReader)
            goto LABEL_45;
          v25 = (const __CFArray *)FigCFDictionaryGetValue();
          if (!v25 || (v26 = v25, v27 = CFGetTypeID(v25), v27 != CFArrayGetTypeID()) || CFArrayGetCount(v26) != 2)
          {
            ItemTypeFromReader = FigSignalErrorAt();
            goto LABEL_45;
          }
          ValueAtIndex = CFArrayGetValueAtIndex(v26, 0);
          goto LABEL_21;
        }
      }
      ValueAtIndex = v14;
      if (v34)
        goto LABEL_15;
    }
LABEL_21:
    ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v14, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v35, 0);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_45;
    v21 = a1;
    v22 = ValueAtIndex;
    goto LABEL_23;
  }
  if (v38 == 1768187246)
  {
    ItemTypeFromReader = CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(v14, &v41, &v35, &v37);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_45;
    ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(v41, &v38);
    if ((_DWORD)ItemTypeFromReader)
      goto LABEL_45;
    v14 = v41;
    goto LABEL_24;
  }
  ItemTypeFromReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v14, *(unsigned __int8 *)(a1 + 28), (unint64_t)&v35, 0);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_45;
  v21 = a1;
  v22 = v14;
LABEL_23:
  ItemTypeFromReader = _getImageOrientation(v21, v22, a3, &v37);
  if ((_DWORD)ItemTypeFromReader)
    goto LABEL_45;
LABEL_24:
  *(_OWORD *)v32 = v36;
  if (v38 == 1735551332)
  {
    v28 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v28)
    {
      ItemTypeFromReader = v28(v14, &v40);
      if (!(_DWORD)ItemTypeFromReader)
      {
        ItemTypeFromReader = _getTileGeometryFromPictureTileCursorService(v40, 0, v32, 0);
        if (!(_DWORD)ItemTypeFromReader)
          goto LABEL_28;
      }
LABEL_45:
      v30 = ItemTypeFromReader;
      goto LABEL_37;
    }
LABEL_36:
    v30 = 4294954514;
    goto LABEL_37;
  }
LABEL_28:
  if (a5)
    *a5 = v38;
  if (a6)
  {
    v29 = v36;
    *a6 = v35;
    a6[1] = v29;
  }
  if (a7)
    *a7 = *(_OWORD *)v32;
  v30 = 0;
  if (a8)
    *a8 = v37;
LABEL_37:
  if (cf)
    CFRelease(cf);
  if (v41)
    CFRelease(v41);
  if (v40)
    CFRelease(v40);
  return v30;
}

uint64_t ___decodeItem_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  __CVBuffer *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __CVBuffer *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  _OWORD v20[2];
  _OWORD v21[8];
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned __int8 *)(a1 + 89);
  v4 = *(_BYTE *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 90);
  v6 = *(_BYTE *)(a1 + 91);
  v7 = *(_BYTE *)(a1 + 92);
  v8 = *(unsigned int *)(a1 + 128);
  v9 = *(__CVBuffer **)(a1 + 136);
  v10 = *(_DWORD *)(a1 + 288);
  v12 = *(_QWORD *)(a1 + 272);
  v11 = *(_QWORD *)(a1 + 280);
  v13 = *(__CVBuffer **)v11;
  v14 = *(_OWORD *)(a1 + 256);
  v21[6] = *(_OWORD *)(a1 + 240);
  v21[7] = v14;
  v22 = v12;
  v15 = *(_OWORD *)(a1 + 192);
  v21[2] = *(_OWORD *)(a1 + 176);
  v21[3] = v15;
  v16 = *(_OWORD *)(a1 + 224);
  v21[4] = *(_OWORD *)(a1 + 208);
  v21[5] = v16;
  v17 = *(_OWORD *)(a1 + 160);
  v21[0] = *(_OWORD *)(a1 + 144);
  v21[1] = v17;
  v18 = *(_OWORD *)(v11 + 24);
  v20[0] = *(_OWORD *)(v11 + 8);
  v20[1] = v18;
  result = _transferToCanvas(v2, v3, v4, v5, v6, v7, v8, v9, (uint64_t)v21, v10, (unint64_t *)v20, v13, *(_QWORD *)(a1 + 292), *(unsigned int *)(a1 + 300));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___copyColorInfoForItem_block_invoke(uint64_t a1, _QWORD *a2)
{
  return _createSampleBufferFromPictureReader(*(CFTypeRef *)(a1 + 32), *(const void **)(a1 + 40), a2, 0);
}

uint64_t _copyMultilayerProperties(uint64_t a1, uint64_t a2, CFTypeRef *a3, _QWORD *a4, _QWORD *a5, BOOL *a6)
{
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v13;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t, char *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, uint64_t, __int128 *);
  uint64_t v20;
  const void *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  __int128 cf;
  CFTypeRef v28;

  v28 = 0;
  cf = 0uLL;
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v12)
    goto LABEL_21;
  v13 = v12(FigBaseObject, *MEMORY[0x1E0CC4B88], a1, &v28);
  if ((v13 + 12784) >= 2 && (_DWORD)v13 != 0)
    goto LABEL_22;
  v15 = FigPictureReaderGetFigBaseObject();
  v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v16)
  {
LABEL_21:
    v25 = 4294954514;
    goto LABEL_36;
  }
  v13 = v16(v15, *MEMORY[0x1E0CC4BA0], a1, (char *)&cf + 8);
  if ((v13 + 12784) >= 2 && (_DWORD)v13 != 0)
  {
LABEL_22:
    v25 = v13;
    goto LABEL_36;
  }
  v18 = FigPictureReaderGetFigBaseObject();
  v19 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v19)
  {
    v20 = v19(v18, *MEMORY[0x1E0CC4B90], a1, &cf);
    if ((v20 + 12784) < 2 || (_DWORD)v20 == 0)
    {
      v23 = *((_QWORD *)&cf + 1);
      v22 = (const void *)cf;
      v24 = cf != 0 || v28 != 0;
      if (a5)
      {
        *a5 = cf;
        *(_QWORD *)&cf = 0;
        v22 = 0;
      }
      if (a4)
      {
        *a4 = v23;
        *((_QWORD *)&cf + 1) = 0;
      }
      if (a3)
      {
        *a3 = v28;
        v28 = 0;
      }
      v25 = 0;
      if (a6)
        *a6 = v24;
      goto LABEL_34;
    }
    v25 = v20;
  }
  else
  {
    v25 = 4294954514;
  }
  v22 = (const void *)cf;
LABEL_34:
  if (v22)
    CFRelease(v22);
LABEL_36:
  if (*((_QWORD *)&cf + 1))
    CFRelease(*((CFTypeRef *)&cf + 1));
  if (v28)
    CFRelease(v28);
  return v25;
}

uint64_t _logHang(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  __int16 v25;
  _BYTE v26[14];
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v23 = 134219008;
    v24 = a1;
    v25 = 1024;
    *(_DWORD *)v26 = a2;
    *(_WORD *)&v26[4] = 2048;
    *(_QWORD *)&v26[6] = a3;
    v27 = 2048;
    v28 = a4;
    v29 = 1024;
    v30 = a5;
    _os_log_impl(&dword_1A819D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: Request ID = %zd; Hang reason code = %d; total tile count = %zd; unfinished tile count = %zd; pl"
      "ugin status = %d",
      (uint8_t *)&v23,
      0x2Cu);
  }
  if (a6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v16 = *a6;
    v17 = a6[1];
    v23 = 134218240;
    v24 = v16;
    v25 = 2048;
    *(_QWORD *)v26 = v17;
    _os_log_impl(&dword_1A819D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: imageSize = %zdx%zd", (uint8_t *)&v23, 0x16u);
  }
  if (a7 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v18 = *a7;
    v19 = a7[1];
    v23 = 134218240;
    v24 = v18;
    v25 = 2048;
    *(_QWORD *)v26 = v19;
    _os_log_impl(&dword_1A819D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: tileSize = %zdx%zd", (uint8_t *)&v23, 0x16u);
  }
  if (a8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v20 = *a8;
    v21 = a8[1];
    v23 = 134218240;
    v24 = v20;
    v25 = 2048;
    *(_QWORD *)v26 = v21;
    _os_log_impl(&dword_1A819D000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CMPhoto: HangLog: scaledTileSize = %zdx%zd", (uint8_t *)&v23, 0x16u);
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    _logHang_cold_1();
  getpid();
  return WriteStackshotReportWithPID();
}

uint64_t _getLayerReaderAtPosition(const __CFArray *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v7;
  const void *ValueAtIndex;

  v7 = a2 + *a4 * a3;
  if (v7 >= CFArrayGetCount(a1))
    return FigSignalErrorAt();
  ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
  if (!ValueAtIndex)
    return FigSignalErrorAt();
  if (a5)
    *a5 = ValueAtIndex;
  return 0;
}

uint64_t _getDecoderReusableInfoForOverlay(const void *a1, CMFormatDescriptionRef desc, uint64_t a3)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v7;
  const void *v8;
  uint64_t VersionFromFormatDescription;
  unsigned int v11;

  *(_DWORD *)a3 = CMFormatDescriptionGetMediaSubType(desc);
  CFGetAllocator(a1);
  CMFormatDescriptionGetExtensions(desc);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v7 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8D50]);
  CFDictionaryRemoveValue(v7, (const void *)*MEMORY[0x1E0CA2240]);
  v8 = *(const void **)(a3 + 8);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a3 + 8) = v7;
  if (*(_DWORD *)a3 != 1936484717)
    return 4294950298;
  v11 = 0;
  VersionFromFormatDescription = SlimVideoDecoder_GetVersionFromFormatDescription(desc, &v11);
  if (!(_DWORD)VersionFromFormatDescription)
    *(_DWORD *)(a3 + 16) = Slim_GetEquivalentBlockSizeVersion(v11);
  return VersionFromFormatDescription;
}

uint64_t _copyFlexRangeDetails(uint64_t a1, uint64_t a2, uint64x2_t *a3, _OWORD *a4, __CFDictionary **a5, CFTypeRef *a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t FlexRangeMetadataDictionary;
  const void *Value;
  const void *v19;
  CFTypeID v20;
  const __CFArray *v21;
  const __CFArray *v22;
  CFTypeID v23;
  const void *ValueAtIndex;
  const void *v25;
  CFTypeRef v26;
  uint64_t v27;
  CFTypeRef v28;
  float64x2_t v30;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v16)
  {
    v27 = 4294954514;
    goto LABEL_29;
  }
  FlexRangeMetadataDictionary = v16(FigBaseObject, *MEMORY[0x1E0CC4B28], a1, &cf);
  if ((_DWORD)FlexRangeMetadataDictionary)
    goto LABEL_33;
  Value = (const void *)FigCFDictionaryGetValue();
  if (!Value)
    goto LABEL_32;
  v19 = Value;
  v20 = CFGetTypeID(Value);
  if (v20 != CFDictionaryGetTypeID())
    goto LABEL_32;
  v21 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v21)
    goto LABEL_32;
  v22 = v21;
  v23 = CFGetTypeID(v21);
  if (v23 != CFArrayGetTypeID() || CFArrayGetCount(v22) != 2)
    goto LABEL_32;
  ValueAtIndex = CFArrayGetValueAtIndex(v22, 0);
  v25 = CFArrayGetValueAtIndex(v22, 1);
  if (!a3)
    goto LABEL_11;
  v30 = *(float64x2_t *)MEMORY[0x1E0C9D820];
  if (!FigCFDictionaryGetCGSizeIfPresent())
  {
LABEL_32:
    FlexRangeMetadataDictionary = FigSignalErrorAt();
LABEL_33:
    v27 = FlexRangeMetadataDictionary;
    goto LABEL_29;
  }
  *a3 = vcvtq_u64_f64(vrndaq_f64(v30));
LABEL_11:
  if (a4)
  {
    FlexRangeMetadataDictionary = CMPhotoParseFlexRangeMetadataDictionary(v19, a4);
    if ((_DWORD)FlexRangeMetadataDictionary)
      goto LABEL_33;
  }
  if (a5)
  {
    FlexRangeMetadataDictionary = CMPhotoCreateFlexRangeMetadataDictionary((const __CFDictionary *)v19, a5);
    if ((_DWORD)FlexRangeMetadataDictionary)
      goto LABEL_33;
  }
  if (a6)
    *a6 = CFRetain(v19);
  if (a7)
  {
    if (ValueAtIndex)
      v26 = CFRetain(ValueAtIndex);
    else
      v26 = 0;
    *a7 = v26;
  }
  if (a8)
  {
    if (v25)
      v28 = CFRetain(v25);
    else
      v28 = 0;
    v27 = 0;
    *a8 = v28;
  }
  else
  {
    v27 = 0;
  }
LABEL_29:
  if (cf)
    CFRelease(cf);
  return v27;
}

uint64_t _copyAuxiliaryImageMetadataFromCacheForIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _DWORD *a8)
{
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  _QWORD v18[14];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;

  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  v27 = 0;
  v28 = &v27;
  v29 = 0x2000000000;
  v30 = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v11 = *(NSObject **)(a1 + 64);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___copyAuxiliaryImageMetadataFromCacheForIndex_block_invoke;
  v18[3] = &unk_1E53F57E0;
  v18[8] = a1 + 40;
  v18[9] = a2;
  v18[10] = a3;
  v18[11] = a1;
  v18[12] = a4;
  v18[13] = a5;
  v18[4] = &v31;
  v18[5] = &v27;
  v18[6] = &v23;
  v18[7] = &v19;
  dispatch_sync(v11, v18);
  if (!*((_DWORD *)v32 + 6))
  {
    if (a6)
    {
      v12 = v28;
      *a6 = v28[3];
      v12[3] = 0;
    }
    if (a7)
    {
      v13 = v24;
      *a7 = v24[3];
      v13[3] = 0;
    }
    if (a8)
      *a8 = *((_DWORD *)v20 + 6);
  }
  v14 = (const void *)v28[3];
  if (v14)
    CFRelease(v14);
  v15 = (const void *)v24[3];
  if (v15)
    CFRelease(v15);
  v16 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v31, 8);
  return v16;
}

uint64_t ___copyAuxiliaryImageMetadataFromCacheForIndex_block_invoke(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;

  result = *(_QWORD *)(a1 + 64);
  if (!*(_BYTE *)(result + 32)
    || *(_QWORD *)(result + 40) != *(_QWORD *)(a1 + 72)
    || *(_QWORD *)(result + 48) != *(_QWORD *)(a1 + 80))
  {
    _destroyAuxMetadataCache(result);
    result = _parseAuxiliaryImageMetadataForIndex(*(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(CFTypeRef *)(a1 + 96), *(CFTypeRef *)(a1 + 104), (int *)(*(_QWORD *)(a1 + 64) + 72), (CGImageMetadata **)(*(_QWORD *)(a1 + 64) + 56), (const __CFDictionary **)(*(_QWORD *)(a1 + 64) + 64));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v3 = *(_QWORD *)(a1 + 64);
      v4 = *(_QWORD *)(a1 + 72);
      *(_BYTE *)(v3 + 32) = 1;
      *(_QWORD *)(v3 + 40) = v4;
      *(_QWORD *)(v3 + 48) = *(_QWORD *)(a1 + 80);
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v5 = *(CFTypeRef *)(*(_QWORD *)(a1 + 64) + 56);
    if (v5)
      v5 = CFRetain(v5);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v5;
    result = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 64);
    if (result)
      result = (uint64_t)CFRetain((CFTypeRef)result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 72);
  }
  return result;
}

uint64_t _createOutputBufferAttributesForReader(const void *a1, const void *a2, const void *a3, int a4, const __CFDictionary *a5, CFMutableDictionaryRef *a6)
{
  uint64_t v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  _OWORD v22[12];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  _determineDecodeStrategy_1((uint64_t)a1, a2, a3, a5, 1, a4, 0, (uint64_t)v22);
  if ((_DWORD)v9)
    return v9;
  v10 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v12 = Mutable;
  v13 = v25;
  v14 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E0CA90E0], v25);
  if ((_DWORD)v14)
    goto LABEL_16;
  v15 = *((_QWORD *)&v25 + 1);
  v14 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E0CA8FD8], *((_QWORD *)&v25 + 1));
  if ((_DWORD)v14)
    goto LABEL_16;
  v16 = v23 + v13 + ~((v13 - 1) % (unint64_t)v23);
  v17 = *((_QWORD *)&v23 + 1) + v15 + ~((v15 - 1) % *((_QWORD *)&v23 + 1));
  if (v23 != __PAIR128__(v15, v13))
    goto LABEL_11;
  v21 = 0;
  CMPhotoPictureReaderGetItemTypeFromReader(a2, &v21);
  if (v21 == 1752589105)
  {
    v18 = 16;
    goto LABEL_10;
  }
  if (v21 == 1635135537)
  {
    v18 = 128;
LABEL_10:
    v16 += v18 + ~((v18 - 1) & (v16 - 1));
    v17 += (-(int)v17 | 0xFFFFFFFFFFFFFFF0) + 16;
  }
LABEL_11:
  v14 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E0CA8FB8], v16 - v13);
  if ((_DWORD)v14 || (v14 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E0CA8FA0], v17 - v15), (_DWORD)v14))
  {
LABEL_16:
    v19 = v14;
    goto LABEL_17;
  }
  v19 = CMPhotoCFDictionarySetSize(v12, *MEMORY[0x1E0CA8F68], 16);
  if ((_DWORD)v19)
  {
LABEL_17:
    CFRelease(v12);
    return v19;
  }
  *a6 = v12;
  return v19;
}

uint64_t _transcodeSourceCallback(uint64_t a1, CVPixelBufferRef *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  const void *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 *v17;
  __int128 *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  __int128 v31;
  const void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  const void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CVPixelBufferRef v41;
  double v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  CVPixelBufferRef *v47;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55[6];
  __int128 __dst[20];
  CVPixelBufferRef v57[2];

  v57[0] = 0;
  v2 = *(_QWORD *)(a1 + 440);
  v3 = *(_QWORD *)(a1 + 448);
  if (v2 >= v3 || (v4 = (unint64_t *)a1, *(_BYTE *)(a1 + 456)))
  {
    v45 = 4294950304;
    goto LABEL_49;
  }
  v6 = (const void *)(a1 + 16);
  if (v3 < 2)
  {
    v37 = *(const void **)(a1 + 8);
    v38 = *(_OWORD *)(a1 + 384);
    __dst[2] = *(_OWORD *)(a1 + 368);
    __dst[3] = v38;
    v39 = *(_OWORD *)(a1 + 416);
    __dst[4] = *(_OWORD *)(a1 + 400);
    __dst[5] = v39;
    v40 = *(_OWORD *)(a1 + 352);
    __dst[0] = *(_OWORD *)(a1 + 336);
    __dst[1] = v40;
    v36 = _applyDecodeStrategy(__dst, (uint64_t)v6, v37, 0, 0, 0, v57);
    if (!(_DWORD)v36)
    {
      ++v4[55];
      goto LABEL_42;
    }
LABEL_47:
    v45 = v36;
    goto LABEL_49;
  }
  v47 = a2;
  v7 = *(_DWORD *)(a1 + 328);
  v8 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)(a1 + 216);
  v53 = *(_QWORD *)(a1 + 488);
  v54 = *(_QWORD *)(a1 + 480);
  v51 = *(_QWORD *)(a1 + 304) + *(_QWORD *)(a1 + 288);
  v52 = *(_QWORD *)(a1 + 288);
  v49 = *(_QWORD *)(a1 + 296);
  v50 = *(_QWORD *)(a1 + 312) + v49;
  v10 = ~v2 + v3;
  v11 = *(_QWORD *)(a1 + 272);
  v12 = *(_QWORD *)(a1 + 280);
  while (1)
  {
    v13 = v6;
    memcpy(__dst, v6, 0x138uLL);
    switch(v7)
    {
      case 0:
        v14 = *((_QWORD *)&__dst[12] + 1);
        v15 = *((_QWORD *)&__dst[12] + 1) * v2;
        goto LABEL_9;
      case 1:
        v14 = *((_QWORD *)&__dst[12] + 1);
        v15 = v10 * *((_QWORD *)&__dst[12] + 1);
LABEL_9:
        v16 = 1;
        v17 = &__dst[2];
        v18 = &__dst[3];
        goto LABEL_13;
      case 2:
        v16 = 0;
        v14 = *(_QWORD *)&__dst[12];
        v15 = *(_QWORD *)&__dst[12] * v2;
        goto LABEL_12;
      case 3:
        v16 = 0;
        v14 = *(_QWORD *)&__dst[12];
        v15 = v10 * *(_QWORD *)&__dst[12];
LABEL_12:
        v17 = (__int128 *)((char *)&__dst[1] + 8);
        v18 = (__int128 *)((char *)&__dst[2] + 8);
LABEL_13:
        v6 = v13;
        *(_QWORD *)v17 += v15;
        v19 = *(_QWORD *)v18 - v15;
        if (v14 >= v19)
          v14 = v19;
        *(_QWORD *)v18 = v14;
        break;
      default:
        v16 = 1;
        v6 = v13;
        break;
    }
    v20 = 0;
    v21 = v11 * (*((_QWORD *)&__dst[1] + 1) / v8 - v54);
    v22 = v12 * (*(_QWORD *)&__dst[2] / v9 - v53);
    if (v21 <= v52)
      v21 = v52;
    if (v22 <= v49)
      v22 = v49;
    v23 = v11
        * ((v8
          + *((_QWORD *)&__dst[2] + 1)
          + *((_QWORD *)&__dst[1] + 1)
          + ~((*((_QWORD *)&__dst[2] + 1) + *((_QWORD *)&__dst[1] + 1) - 1) % v8))
         / v8
         - v54);
    if (v23 >= v51)
      v23 = v51;
    if (v12
       * ((v9 + *(_QWORD *)&__dst[3] + *(_QWORD *)&__dst[2] + ~((*(_QWORD *)&__dst[3] + *(_QWORD *)&__dst[2] - 1) % v9))
        / v9
        - v53) >= v50)
      v24 = v50;
    else
      v24 = v12
          * ((v9
            + *(_QWORD *)&__dst[3]
            + *(_QWORD *)&__dst[2]
            + ~((*(_QWORD *)&__dst[3] + *(_QWORD *)&__dst[2] - 1) % v9))
           / v9
           - v53);
    v25 = v23 - v21;
    if (v23 <= v21)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v29 = v24 > v22;
      v30 = v24 - v22;
      if (v29)
      {
        v20 = v30;
        v26 = v25;
        v27 = v22;
        v28 = v21;
      }
    }
    *(_QWORD *)&__dst[17] = v28 % v11;
    *((_QWORD *)&__dst[17] + 1) = v27 % v12;
    *(_QWORD *)&__dst[18] = v26;
    *((_QWORD *)&__dst[18] + 1) = v20;
    __dst[15] = __dst[18];
    __dst[13] = __dst[18];
    if ((v16 & 1) != 0)
      __dst[14] = __dst[18];
    else
      __dst[14] = (__int128)vextq_s8((int8x16_t)__dst[13], (int8x16_t)__dst[13], 8uLL);
    ++v2;
    v31 = __dst[15];
    if (v2 >= v3)
      break;
    --v10;
    if (*(_QWORD *)&__dst[15])
    {
      if (*((_QWORD *)&__dst[15] + 1))
        break;
    }
  }
  v4 = (unint64_t *)a1;
  *(_QWORD *)(a1 + 440) = v2;
  if (!(_QWORD)v31 || !*((_QWORD *)&v31 + 1))
    goto LABEL_46;
  v32 = *(const void **)(a1 + 8);
  v33 = *(_OWORD *)(a1 + 384);
  v55[2] = *(_OWORD *)(a1 + 368);
  v55[3] = v33;
  v34 = *(_OWORD *)(a1 + 416);
  v55[4] = *(_OWORD *)(a1 + 400);
  v55[5] = v34;
  v35 = *(_OWORD *)(a1 + 352);
  v55[0] = *(_OWORD *)(a1 + 336);
  v55[1] = v35;
  v36 = _applyDecodeStrategy(v55, (uint64_t)__dst, v32, 0, 0, 0, v57);
  if ((_DWORD)v36)
    goto LABEL_47;
  a2 = v47;
LABEL_42:
  v41 = v57[0];
  CMPhotoGetPixelBufferCLAPAsRect(v57[0]);
  v44 = (unint64_t)(v43 + (double)v4[54]);
  v4[54] = v44;
  if (v4[31] < v44 || v42 != (double)v4[30])
  {
LABEL_46:
    v36 = FigSignalErrorAt();
    goto LABEL_47;
  }
  v45 = 0;
  if (a2)
  {
    *a2 = v41;
    return v45;
  }
LABEL_49:
  if (v57[0])
    CFRelease(v57[0]);
  return v45;
}

uint64_t _transcodeSourceCallbackFullImageWithAlpha(uint64_t a1, CFTypeRef *a2)
{
  uint64_t ImageForIndex_1;
  CFTypeRef v4;
  CFTypeRef cf;

  cf = 0;
  if (*(_QWORD *)(a1 + 448) != 1)
    return 4294950304;
  ImageForIndex_1 = 4294950304;
  if (a2 && *(_BYTE *)(a1 + 456))
  {
    ImageForIndex_1 = _createImageForIndex_1(*(_QWORD **)a1, *(_QWORD *)(a1 + 464), *(CFDictionaryRef *)(a1 + 472), 2, (CGImageRef *)&cf);
    v4 = cf;
    if ((_DWORD)ImageForIndex_1
      || (ImageForIndex_1 = CMPhotoPixelBufferBlendAlphaWithWhite((__CVBuffer *)cf), v4 = cf, (_DWORD)ImageForIndex_1))
    {
      if (v4)
        CFRelease(v4);
    }
    else
    {
      *a2 = cf;
    }
  }
  return ImageForIndex_1;
}

uint64_t _transcodeThumbnailCallback(uint64_t a1, CFTypeRef *a2)
{
  return _createThumbnailImageForIndex_0(*(_QWORD **)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(CFDictionaryRef *)(a1 + 8), 2, a2);
}

uint64_t _transcodeAuxiliaryImageCallback_0(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFTypeRef *a4, _DWORD *a5, CFTypeRef *a6, CFTypeRef *a7, CFDataRef *a8, _QWORD *a9)
{
  _QWORD *v16;
  uint64_t v17;
  int v18;
  const void *v19;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v21;
  CFTypeRef *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __CFString **v27;
  CFTypeRef v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFAllocator *v34;
  uint64_t AuxiliaryImageTypeForIndex_1;
  CFDataRef *v37;
  _DWORD *v38;
  const void *MutableCopyWithCFTypeCallbacks;
  CGImageRef v40;
  BOOL v41;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, CGImageRef *, _QWORD);
  CGImageRef v47;
  uint64_t (*v48)(CGImageRef, uint64_t, CFTypeRef *);
  CFAllocatorRef v49;
  uint64_t FigBaseObject;
  void (*v51)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  CFDataRef v52;
  CFTypeRef cf;
  CFTypeRef *v58;
  int v59;
  CGColorSpace *space;
  CGColorSpaceRef v62;
  int v63;
  CFTypeRef v64;
  CFTypeRef v65;
  CFTypeRef v66;
  CFTypeRef v67;
  CGImageRef v68;

  if (*(_QWORD *)(a2 + 16) <= a1)
    return 4294950304;
  v16 = *(_QWORD **)a2;
  v17 = *(_QWORD *)(a2 + 24) + 32 * a1;
  if (*(_BYTE *)v17)
  {
    if (!*(_QWORD *)(a2 + 32) || *(_QWORD *)(a2 + 40) == a1)
    {
      v18 = *(unsigned __int8 *)(a2 + 48);
      v19 = *(const void **)(v17 + 8);
      cf = *(CFTypeRef *)(v17 + 16);
      space = *(CGColorSpace **)(v17 + 24);
      v68 = 0;
      v67 = 0;
      MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (MutableCopy)
      {
        v21 = MutableCopy;
        v58 = a6;
        v22 = a4;
        if (v18)
          CFDictionarySetValue(MutableCopy, CFSTR("RestrictedDecoding"), (const void *)*MEMORY[0x1E0C9AE50]);
        v23 = _decodeImage_1(v16, v19, 0, -1, v21, 0, 2, 1, &v68);
        if ((_DWORD)v23)
        {
          v25 = v23;
        }
        else
        {
          v24 = _parseAuxiliaryImageMetadataForIndex(v16, -1, -1, 0, v19, 0, (CGImageMetadata **)&v67, 0);
          v25 = v24;
          if ((_DWORD)v24)
            v26 = (_DWORD)v24 == -16993;
          else
            v26 = 1;
          if (v26)
          {
            *a7 = v68;
            v68 = 0;
            *a3 = v67;
            v67 = 0;
            *v22 = 0;
            *a5 = 4;
            if (v58)
            {
              v27 = kCMPhotoAuxiliaryImageTypeURN_HDRGainMap;
              if ((_DWORD)v24)
                v27 = kCMPhotoAuxiliaryImageTypeURL_NonStandardizedJPEGFlexRangeNamespace;
              *v58 = CFRetain(*v27);
            }
            if (a8 && space)
              *a8 = CGColorSpaceCopyICCData(space);
            if (a9)
            {
              v28 = cf;
              if (cf)
                v28 = CFRetain(cf);
              v25 = 0;
              *a9 = v28;
            }
            else
            {
              v25 = 0;
            }
          }
        }
        CFRelease(v21);
        if (v67)
          CFRelease(v67);
      }
      else
      {
        v25 = 4294950305;
      }
      v40 = v68;
      if (!v68)
        return v25;
LABEL_83:
      CFRelease(v40);
      return v25;
    }
    return 4294950304;
  }
  v30 = *(_QWORD *)(a2 + 8);
  v31 = *(_QWORD *)(v17 + 8);
  v32 = *(_QWORD *)(a2 + 32);
  v33 = *(_QWORD *)(a2 + 40);
  v59 = *(unsigned __int8 *)(a2 + 48);
  v34 = (const __CFAllocator *)v16[5];
  v68 = 0;
  v66 = 0;
  v67 = 0;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  AuxiliaryImageTypeForIndex_1 = _getAuxiliaryImageTypeForIndex_1(v16, v30, v31, (uint64_t)a4, (unint64_t)&v63, 0);
  if ((_DWORD)AuxiliaryImageTypeForIndex_1)
    goto LABEL_49;
  AuxiliaryImageTypeForIndex_1 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)v16, v30, v31, 0, 0, &v65, 0, 0);
  if ((_DWORD)AuxiliaryImageTypeForIndex_1 && (_DWORD)AuxiliaryImageTypeForIndex_1 != -16993)
    goto LABEL_49;
  if (v63 == 4)
  {
    if (v33 == a1)
    {
      v37 = a8;
      v38 = a5;
      MutableCopyWithCFTypeCallbacks = 0;
      if (v32)
      {
        MutableCopyWithCFTypeCallbacks = (const void *)FigCFDictionaryCreateMutableCopyWithCFTypeCallbacks();
        if (!MutableCopyWithCFTypeCallbacks)
        {
LABEL_89:
          v25 = 4294950305;
          goto LABEL_74;
        }
      }
    }
    else
    {
      v37 = a8;
      v38 = a5;
      MutableCopyWithCFTypeCallbacks = 0;
    }
  }
  else
  {
    AuxiliaryImageTypeForIndex_1 = _copyAuxiliaryImageMetadataFromCacheForIndex((uint64_t)v16, v30, v31, 0, 0, 0, &v64, 0);
    if ((_DWORD)AuxiliaryImageTypeForIndex_1)
      v41 = (_DWORD)AuxiliaryImageTypeForIndex_1 == -16993;
    else
      v41 = 1;
    if (!v41)
    {
LABEL_49:
      v25 = AuxiliaryImageTypeForIndex_1;
      goto LABEL_74;
    }
    Mutable = CFDictionaryCreateMutable(v34, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_89;
    v43 = Mutable;
    LODWORD(v62) = 0;
    v37 = a8;
    if (!FigCFDictionaryGetInt32IfPresent())
      LODWORD(v62) = 1278226488;
    v38 = a5;
    MutableCopyWithCFTypeCallbacks = v43;
    v25 = FigCFDictionarySetInt();
    if ((_DWORD)v25)
      goto LABEL_73;
  }
  if (v59)
  {
    v44 = FigCFDictionarySetInt();
    if ((_DWORD)v44)
      goto LABEL_90;
  }
  v45 = v16[6];
  v46 = *(uint64_t (**)(uint64_t, uint64_t, CGImageRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 16);
  if (!v46)
    goto LABEL_72;
  v44 = v46(v45, v30, &v68, 0);
  if ((_DWORD)v44)
    goto LABEL_90;
  v47 = v68;
  v48 = *(uint64_t (**)(CGImageRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v48)
  {
LABEL_72:
    v25 = 4294954514;
    if (!MutableCopyWithCFTypeCallbacks)
      goto LABEL_74;
    goto LABEL_73;
  }
  v44 = v48(v47, v31, &v67);
  if ((_DWORD)v44
    || (v44 = _decodeImage_1(v16, v67, v68, -1, (const __CFDictionary *)MutableCopyWithCFTypeCallbacks, 0, 2, 1, (CGImageRef *)&v66), (_DWORD)v44))
  {
LABEL_90:
    v25 = v44;
    if (!MutableCopyWithCFTypeCallbacks)
      goto LABEL_74;
LABEL_73:
    CFRelease(MutableCopyWithCFTypeCallbacks);
    goto LABEL_74;
  }
  *a7 = v66;
  *a3 = v65;
  v65 = 0;
  v66 = 0;
  *a4 = v64;
  v64 = 0;
  *v38 = v63;
  if (a6)
  {
    v49 = CFGetAllocator(v67);
    FigBaseObject = FigPictureReaderGetFigBaseObject();
    v51 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v51)
      v51(FigBaseObject, *MEMORY[0x1E0CC4B18], v49, a6);
  }
  if (v37)
  {
    v62 = 0;
    if (!_copyAuxiliaryColorSpaceForIndex_0((uint64_t)v16, v30, v31, (CFTypeRef *)&v62))
    {
      CGColorSpaceGetName(v62);
      if (FigCFEqual() || FigCFEqual())
        v52 = 0;
      else
        v52 = CGColorSpaceCopyICCData(v62);
      *v37 = v52;
      if (v62)
        CFRelease(v62);
    }
  }
  v25 = 0;
  if (MutableCopyWithCFTypeCallbacks)
    goto LABEL_73;
LABEL_74:
  if (v68)
    CFRelease(v68);
  if (v67)
    CFRelease(v67);
  if (v66)
    CFRelease(v66);
  if (v65)
    CFRelease(v65);
  v40 = (CGImageRef)v64;
  if (v64)
    goto LABEL_83;
  return v25;
}

void _freeTranscodeAuxiliaryEntries(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *v4;
  const void *v5;
  const void *v6;

  if (a2)
  {
    v3 = a1;
    if (a1 >= 1)
    {
      v4 = a2 + 16;
      do
      {
        if (*(v4 - 16))
        {
          v5 = (const void *)*((_QWORD *)v4 - 1);
          if (v5)
          {
            CFRelease(v5);
            *((_QWORD *)v4 - 1) = 0;
          }
          if (*(_QWORD *)v4)
          {
            CFRelease(*(CFTypeRef *)v4);
            *(_QWORD *)v4 = 0;
          }
          v6 = (const void *)*((_QWORD *)v4 + 1);
          if (v6)
          {
            CFRelease(v6);
            *((_QWORD *)v4 + 1) = 0;
          }
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    free(a2);
  }
}

uint64_t _translateCropForTranscodeIfNeeded(uint64_t a1, __CFDictionary *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;
  __int128 v11;
  __int128 v12;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v14;
  uint64x2_t v15[2];
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  uint64x2_t v20;
  uint64x2_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  CGRect v25;

  if (!a3)
    return 0;
  v23 = 0u;
  v24 = 0u;
  result = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a4, 0, (unint64_t)&v23, 0);
  if (!(_DWORD)result)
  {
    v11 = v24;
    result = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a5, 0, (unint64_t)&v23, 0);
    if (!(_DWORD)result)
    {
      v12 = v24;
      v22 = 0;
      v20 = 0u;
      v21 = 0u;
      result = CMPhotoDecompressionContainerValidateSourceCropRect(a3, v11, *((uint64_t *)&v11 + 1), &v22, (int64x2_t *)&v20);
      if (!(_DWORD)result)
      {
        if (v22)
        {
          CFDictionaryRemoveValue(a2, CFSTR("SourceCropRect"));
          return 0;
        }
        v18 = 1;
        v19 = 1;
        result = _getImageOrientation(a1, a4, 0, &v19);
        if (!(_DWORD)result)
        {
          result = _getImageOrientation(a1, a5, 0, &v18);
          if (!(_DWORD)result)
          {
            v16 = 0u;
            v17 = 0u;
            v15[0] = v20;
            v15[1] = v21;
            result = CMPhotoTranslateAndScalePreOrientationCrop(v11, *((uint64_t *)&v11 + 1), v15, v19, v12, *((uint64_t *)&v12 + 1), v18, &v16);
            if (!(_DWORD)result)
            {
              v25.origin.x = (double)(unint64_t)v16;
              v25.origin.y = (double)*((unint64_t *)&v16 + 1);
              v25.size.width = (double)(unint64_t)v17;
              v25.size.height = (double)*((unint64_t *)&v17 + 1);
              DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v25);
              if (!DictionaryRepresentation)
                return 4294950305;
              v14 = DictionaryRepresentation;
              CFDictionarySetValue(a2, CFSTR("SourceCropRect"), DictionaryRepresentation);
              CFRelease(v14);
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TileIterator_reset(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v2 = *(uint64_t **)(a1 + 56);
  if (theDict && CFDictionaryContainsKey(theDict, CFSTR("TileSize")))
    return FigSignalErrorAt();
  v3 = *v2;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(v3);
  else
    return 4294954514;
}

uint64_t TileIterator_stepAndReportPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = **(_QWORD **)(a1 + 56);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t TileIterator_moveToPosition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = **(_QWORD **)(a1 + 56);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t TileIterator_getTileSourceRect(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  CFAllocatorRef v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t v17;
  CFTypeRef cf;

  v10 = (uint64_t *)a1[7];
  cf = 0;
  v11 = *v10;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v12)
    goto LABEL_11;
  v13 = v12(v11, a2, a3);
  if (!(_DWORD)v13)
  {
    v14 = CFGetAllocator(a1);
    CMBaseObject = FigPictureTileCursorGetCMBaseObject();
    v16 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v16)
    {
      v13 = v16(CMBaseObject, *MEMORY[0x1E0CC4C08], v14, &cf);
      if (!(_DWORD)v13)
      {
        if (a4
          && !CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, (const void *)*MEMORY[0x1E0CC4C28], a4))
        {
          v17 = 4294950304;
        }
        else if (a5)
        {
          if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, (const void *)*MEMORY[0x1E0CC4C10], a5))v17 = 0;
          else
            v17 = 4294950304;
        }
        else
        {
          v17 = 0;
        }
        goto LABEL_12;
      }
      goto LABEL_17;
    }
LABEL_11:
    v17 = 4294954514;
    goto LABEL_12;
  }
LABEL_17:
  v17 = v13;
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t TileIterator_copyTileSampleBuffer(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  CFAllocatorRef v4;
  const __CFAllocator *v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, const __CFAllocator *, const opaqueCMFormatDescription **);
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  uint64_t v11;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  CFTypeRef v15;
  void *v16;
  void *v17;
  uint64_t v18;
  __CFData *v19;
  CMSampleBufferRef v20;
  const opaqueCMFormatDescription *v21;

  v3 = (uint64_t *)a1[7];
  v4 = CFGetAllocator(a1);
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  if (!a2)
  {
    v11 = 0;
    goto LABEL_10;
  }
  v5 = v4;
  CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, const opaqueCMFormatDescription **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v7)
    goto LABEL_9;
  v8 = v7(CMBaseObject, *MEMORY[0x1E0CC4BF8], v5, &v21);
  if ((_DWORD)v8)
  {
LABEL_20:
    v11 = v8;
    goto LABEL_10;
  }
  v9 = *v3;
  v10 = *(uint64_t (**)(uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 40);
  if (!v10)
  {
LABEL_9:
    v11 = 4294954514;
    goto LABEL_10;
  }
  v8 = v10(v9, &v18, &v17, &v16, &v15, 0);
  if ((_DWORD)v8)
    goto LABEL_20;
  v8 = CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)v5, v18, (uint64_t)v17, (uint64_t)v16, (uint64_t)v15, 0, 0, &v19);
  if ((_DWORD)v8)
    goto LABEL_20;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  CMTimeMake(&sampleTimingArray.duration, 1, 1);
  sampleTimingArray.presentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
  sampleSizeArray = CMBlockBufferGetDataLength(v19);
  v11 = CMSampleBufferCreate(v5, v19, 1u, 0, 0, v21, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v20);
  if (!(_DWORD)v11)
  {
    *a2 = v20;
    v20 = 0;
  }
LABEL_10:
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  free(v17);
  free(v16);
  if (v15)
    CFRelease(v15);
  return v11;
}

uint64_t TileIterator_getTileItemType(uint64_t a1, void *a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t ItemTypeFromReader;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    return 4294954514;
  ItemTypeFromReader = v4(CMBaseObject, *MEMORY[0x1E0CC4C00], *MEMORY[0x1E0C9AE00], &cf);
  v6 = cf;
  if (!(_DWORD)ItemTypeFromReader)
  {
    ItemTypeFromReader = CMPhotoPictureReaderGetItemTypeFromReader(cf, a2);
    v6 = cf;
  }
  if (v6)
    CFRelease(v6);
  return ItemTypeFromReader;
}

uint64_t TileIterator_decodeTileAsync(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const __CFAllocator *v12;
  CFAllocatorRef v13;
  uint64_t CMBaseObject;
  uint64_t (*v15)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  CFMutableDictionaryRef MutableCopy;
  uint64_t v22;
  __CFDictionary *v23;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const __CFNumber *v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  CFTypeRef v34;
  CFTypeRef cf;
  CGRect v36;

  v12 = CFGetAllocator((CFTypeRef)a1);
  v34 = 0;
  cf = 0;
  v33 = 0;
  v13 = CFGetAllocator((CFTypeRef)a1);
  CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  v15 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v15)
  {
    v16 = v15(CMBaseObject, *MEMORY[0x1E0CC4C08], v13, &cf);
    if ((_DWORD)v16)
    {
      v22 = v16;
    }
    else if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CC4C28], &v33)&& (v17 = v33, CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CC4C10], &v33))&& (v18 = v33, CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CC4C18], &v33))&& (v31 = a6, v19 = v33, CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, (const void *)*MEMORY[0x1E0CC4C20], &v33)))
    {
      v20 = v33;
      if (a2)
        MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, a2);
      else
        MutableCopy = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v23 = MutableCopy;
      v34 = MutableCopy;
      if (MutableCopy
        && (v36.size.width = (double)v17,
            v36.size.height = (double)v18,
            v36.origin.x = (double)v19,
            v36.origin.y = (double)v20,
            (DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v36)) != 0))
      {
        v25 = DictionaryRepresentation;
        CFDictionarySetValue(v23, CFSTR("SourceCropRect"), DictionaryRepresentation);
        v32 = -1;
        v26 = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(*(_QWORD **)(a1 + 16), *(_QWORD *)(a1 + 24), &v32, 0, (CFMutableDictionaryRef *)&v34);
        if ((_DWORD)v26)
        {
          v22 = v26;
        }
        else
        {
          v27 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A00407034790EuLL);
          if (v27)
          {
            v28 = (uint64_t)v27;
            *v27 = CFRetain((CFTypeRef)a1);
            *(double *)(v28 + 8) = (double)v19;
            *(double *)(v28 + 16) = (double)v20;
            v29 = (const __CFNumber *)v32;
            *(_QWORD *)(v28 + 24) = a5;
            *(_QWORD *)(v28 + 32) = v31;
            v22 = CMPhotoDecompressionContainerDecodeImageForIndexAsyncF(*(_QWORD **)(a1 + 16), v29, (const __CFDictionary *)v34, a3, a4, (uint64_t)_callback_TileIterator_decodeTileAsync, v28);
            if ((_DWORD)v22)
            {
              if (*(_QWORD *)v28)
                CFRelease(*(CFTypeRef *)v28);
              free((void *)v28);
            }
          }
          else
          {
            v22 = 4294950305;
          }
        }
        CFRelease(v25);
      }
      else
      {
        v22 = 4294950305;
      }
    }
    else
    {
      v22 = 4294950304;
    }
  }
  else
  {
    v22 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  if (v34)
    CFRelease(v34);
  return v22;
}

uint64_t TileIterator_cancelAsyncRequest(uint64_t a1, uint64_t a2)
{
  return CMPhotoDecompressionContainerCancelAsyncRequest(*(_QWORD *)(a1 + 16), a2);
}

void _callback_TileIterator_decodeTileAsync(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  const void *v10;
  double v11;
  double v12;
  uint64_t v13;
  void (*v14)(const void *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(const void **)a6;
  v11 = a6[1];
  v12 = a6[2];
  v14 = (void (*)(const void *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)a6 + 3);
  v13 = *((_QWORD *)a6 + 4);
  free(a6);
  v14(v10, a2, a3, (unint64_t)v11, (unint64_t)v12, a4, a5, v13);
  if (v10)
    CFRelease(v10);
}

uint64_t _createDummyReaderDescription(const __CFAllocator *a1, __CFDictionary **a2)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v6;
  uint64_t result;
  CGSize v8;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v8.width = 0.0;
    v8.height = 0.0;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v8);
    if (DictionaryRepresentation)
    {
      v6 = DictionaryRepresentation;
      CFDictionarySetValue(v4, CFSTR("Dimensions"), DictionaryRepresentation);
      CFRelease(v6);
      result = 0;
      *a2 = v4;
      return result;
    }
    CFRelease(v4);
  }
  return 4294950305;
}

uint64_t CMPhotoAnalyzeImageAndCreateUpdatedQualityParameters(const __CFAllocator *a1, __CVBuffer *a2, CFTypeRef cf, __CFDictionary **a4, double a5, double a6, double a7, double a8)
{
  uint64_t MutableCopy;
  __CFDictionary *v16;
  size_t BytesPerRowOfPlane;
  OSType PixelFormatType;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *BaseAddressOfPlane;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  uint64_t i;
  int v40;
  float v41;
  float v42;
  float v43;
  double v44;
  float v45;
  int v46;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v49;
  CFDataRef v50;
  uint64_t v51;
  OSType v52;
  _OWORD *v53;
  uint64_t v54;
  __int128 v55;
  CFDataRef v56;
  CFDataRef v57;
  __CFDictionary **v59;
  CFIndex v60;
  const __CFAllocator *v61;
  __CFDictionary *theDict;
  CGSize v63;

  if (!a2)
    return 4294950194;
  if (cf)
  {
    CFGetTypeID(cf);
    CFDictionaryGetTypeID();
  }
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v16 = (__CFDictionary *)MutableCopy;
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType != 875704422 && PixelFormatType != 1278226488 && PixelFormatType != 875704438)
    goto LABEL_28;
  v61 = a1;
  theDict = v16;
  v19 = vcvtad_u64_f64(a5 + a7);
  v20 = vcvtad_u64_f64(a6 + a8);
  v21 = (v19 + 63) >> 6;
  v22 = (v20 + 63) >> 6;
  v23 = v21 * v22;
  v24 = malloc_type_calloc(85 * v21 * v22, 1uLL, 0x100004077774924uLL);
  if (!v24)
    goto LABEL_41;
  v60 = 85 * v21 * v22;
  v25 = CVPixelBufferLockBaseAddress(a2, 0);
  if ((_DWORD)v25)
    goto LABEL_40;
  v59 = a4;
  v26 = &v24[v23];
  v27 = &v24[4 * v23 + v23];
  v28 = &v27[16 * v23];
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v30 = 0;
  v31 = 8 * v21;
  v32 = v28;
  do
  {
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = &BaseAddressOfPlane[v34];
      do
      {
        for (i = 0; i != 8; ++i)
        {
          v40 = v38[i];
          v37 += v40;
          v36 += v40 * v40;
        }
        v38 += BytesPerRowOfPlane;
        ++v35;
      }
      while (v35 != 8);
      v41 = sqrt((float)v36 + (double)(v37 * v37) * -0.015625);
      v42 = 8.0 / ((double)v37 + 1.0) * v41;
      v43 = v42 + -0.05;
      v44 = (float)(v43 * 48.0);
      if (v44 < 0.0)
        v44 = 0.0;
      v45 = v44;
      v46 = (int)v45;
      if (v44 >= 12.0)
        LOBYTE(v46) = 12;
      v32[v33] = v46;
      v34 += 8;
    }
    while (v33++ != (v19 - 8) >> 3);
    v32 += v31;
    BaseAddressOfPlane += 8 * BytesPerRowOfPlane;
    v30 += 8;
  }
  while (v20 - 8 >= v30);
  _convergeQPMapForLargerCUSize(v28, v31, 8 * v22, v27);
  _convergeQPMapForLargerCUSize(v27, 4 * v21, 4 * v22, v26);
  _convergeQPMapForLargerCUSize(v26, 2 * v21, 2 * v22, v24);
  v25 = CVPixelBufferUnlockBaseAddress(a2, 0);
  if ((_DWORD)v25)
  {
LABEL_40:
    v51 = v25;
LABEL_42:
    v16 = theDict;
    free(v24);
LABEL_43:
    CFRelease(v16);
    return v51;
  }
  v63.width = (double)v21;
  v63.height = (double)v22;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v63);
  if (!DictionaryRepresentation)
  {
LABEL_41:
    v51 = 4294950305;
    goto LABEL_42;
  }
  v49 = DictionaryRepresentation;
  a1 = v61;
  v50 = CFDataCreate(v61, v24, v60);
  v16 = theDict;
  if (v50)
  {
    CFDictionarySetValue(theDict, CFSTR("QPMap"), v50);
    CFDictionarySetValue(theDict, CFSTR("QPMapSize"), v49);
    CFRelease(v50);
    v51 = 0;
  }
  else
  {
    v51 = 4294950305;
  }
  a4 = v59;
  CFRelease(v49);
  free(v24);
  if (!v50)
    goto LABEL_43;
LABEL_28:
  CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  v52 = CVPixelBufferGetPixelFormatType(a2);
  if (v52 == 875704422 || v52 == 1278226488 || v52 == 875704438)
  {
    v53 = malloc_type_calloc(0x3E8uLL, 1uLL, 0x100004077774924uLL);
    if (!v53)
      goto LABEL_46;
    v54 = CVPixelBufferLockBaseAddress(a2, 0);
    if ((_DWORD)v54)
      goto LABEL_45;
    CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    *(_QWORD *)&v55 = 0x1010101010101010;
    *((_QWORD *)&v55 + 1) = 0x1010101010101010;
    *v53 = v55;
    v53[1] = v55;
    v53[2] = v55;
    v53[3] = v55;
    v53[4] = v55;
    v53[5] = v55;
    v53[6] = *(__int128 *)((char *)&HEVCDefault8x8IntraScalingListZigZag + 1);
    v53[7] = unk_1A8295389;
    v53[8] = *(__int128 *)((char *)&xmmword_1A8295398 + 1);
    v53[9] = unk_1A82953A9;
    v53[12] = *(__int128 *)((char *)&xmmword_1A8295398 + 1);
    v53[13] = unk_1A82953A9;
    v53[10] = *(__int128 *)((char *)&HEVCDefault8x8IntraScalingListZigZag + 1);
    v53[11] = unk_1A8295389;
    v53[14] = *(__int128 *)((char *)&HEVCDefault8x8IntraScalingListZigZag + 1);
    v53[15] = unk_1A8295389;
    v53[16] = *(__int128 *)((char *)&xmmword_1A8295398 + 1);
    v53[17] = unk_1A82953A9;
    v53[18] = *(__int128 *)((char *)&HEVCDefault8x8InterScalingListZigZag + 1);
    v53[19] = unk_1A82953CA;
    v53[20] = *(__int128 *)((char *)&xmmword_1A82953D9 + 1);
    v53[21] = unk_1A82953EA;
    v53[24] = *(__int128 *)((char *)&xmmword_1A82953D9 + 1);
    v53[25] = unk_1A82953EA;
    v53[22] = *(__int128 *)((char *)&HEVCDefault8x8InterScalingListZigZag + 1);
    v53[23] = unk_1A82953CA;
    v53[28] = *(__int128 *)((char *)&xmmword_1A82953D9 + 1);
    v53[29] = unk_1A82953EA;
    v53[26] = *(__int128 *)((char *)&HEVCDefault8x8InterScalingListZigZag + 1);
    v53[27] = unk_1A82953CA;
    *((_BYTE *)v53 + 544) = 115;
    v53[32] = xmmword_1A8295398;
    v53[33] = unk_1A82953A8;
    v53[30] = HEVCDefault8x8IntraScalingListZigZag;
    v53[31] = unk_1A8295388;
    *((_BYTE *)v53 + 609) = 115;
    *(_OWORD *)((char *)v53 + 545) = HEVCDefault8x8IntraScalingListZigZag;
    *(_OWORD *)((char *)v53 + 561) = unk_1A8295388;
    *(_OWORD *)((char *)v53 + 577) = xmmword_1A8295398;
    *(_OWORD *)((char *)v53 + 593) = unk_1A82953A8;
    *((_BYTE *)v53 + 674) = 115;
    *(_OWORD *)((char *)v53 + 642) = xmmword_1A8295398;
    *(_OWORD *)((char *)v53 + 658) = unk_1A82953A8;
    *(_OWORD *)((char *)v53 + 610) = HEVCDefault8x8IntraScalingListZigZag;
    *(_OWORD *)((char *)v53 + 626) = unk_1A8295388;
    *((_BYTE *)v53 + 739) = 91;
    *(_OWORD *)((char *)v53 + 707) = xmmword_1A82953D9;
    *(_OWORD *)((char *)v53 + 723) = unk_1A82953E9;
    *(_OWORD *)((char *)v53 + 675) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 691) = unk_1A82953C9;
    *((_BYTE *)v53 + 804) = 91;
    *(_OWORD *)((char *)v53 + 772) = xmmword_1A82953D9;
    *(_OWORD *)((char *)v53 + 788) = unk_1A82953E9;
    *(_OWORD *)((char *)v53 + 740) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 756) = unk_1A82953C9;
    *((_BYTE *)v53 + 869) = 91;
    *(_OWORD *)((char *)v53 + 837) = xmmword_1A82953D9;
    *(_OWORD *)((char *)v53 + 853) = unk_1A82953E9;
    *(_OWORD *)((char *)v53 + 805) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 821) = unk_1A82953C9;
    *((_BYTE *)v53 + 934) = 115;
    *(_OWORD *)((char *)v53 + 902) = xmmword_1A8295398;
    *(_OWORD *)((char *)v53 + 918) = unk_1A82953A8;
    *(_OWORD *)((char *)v53 + 870) = HEVCDefault8x8IntraScalingListZigZag;
    *(_OWORD *)((char *)v53 + 886) = unk_1A8295388;
    *((_BYTE *)v53 + 999) = 91;
    *(_OWORD *)((char *)v53 + 967) = xmmword_1A82953D9;
    *(_OWORD *)((char *)v53 + 983) = unk_1A82953E9;
    *(_OWORD *)((char *)v53 + 935) = HEVCDefault8x8InterScalingListZigZag;
    *(_OWORD *)((char *)v53 + 951) = unk_1A82953C9;
    v54 = CVPixelBufferUnlockBaseAddress(a2, 0);
    if ((_DWORD)v54)
    {
LABEL_45:
      v51 = v54;
      goto LABEL_37;
    }
    v56 = CFDataCreate(a1, (const UInt8 *)v53, 1000);
    if (!v56)
    {
LABEL_46:
      v51 = 4294950305;
      goto LABEL_37;
    }
    v57 = v56;
    CFDictionarySetValue(v16, CFSTR("QuantizationScalingLists"), v56);
    CFRelease(v57);
    v51 = 0;
  }
  else
  {
    v51 = 0;
    v53 = 0;
  }
LABEL_37:
  free(v53);
  if (!a4 || (_DWORD)v51)
    goto LABEL_43;
  *a4 = v16;
  return v51;
}

char *_convergeQPMapForLargerCUSize(char *result, unint64_t a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;

  if (a3 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    if (a2 >> 1 <= 1)
      v5 = 1;
    do
    {
      v6 = v5;
      v7 = result;
      if (a2 >= 2)
      {
        do
        {
          v8 = *v7;
          v9 = v7[1];
          v10 = v7[a2 + 1];
          if (v7[a2] < v10)
            v10 = v7[a2];
          if (v9 >= v10)
            v9 = v10;
          if (v9 < v8)
            LOBYTE(v8) = v9;
          *a4++ = v8;
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      ++v4;
      result += 2 * a2;
    }
    while (v4 != a3 >> 1);
  }
  return result;
}

unint64_t CMPhotoGetDataSizeFromWidthAndHeight(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t BytesPerPixelForPixelFormat;
  unint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;

  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(a1);
  result = 0;
  if (a1 > 1734505011)
  {
    if (a1 > 1937125935)
    {
      if (a1 <= 1953903667)
      {
        if (a1 > 1952854577)
        {
          if (a1 > 1953903151)
          {
            if (a1 == 1953903152)
              return BytesPerPixelForPixelFormat
                   * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
            v10 = 1953903154;
            goto LABEL_107;
          }
          if (a1 == 1952854578)
          {
LABEL_108:
            v12 = (((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) + a2) * a3;
            return v12 * BytesPerPixelForPixelFormat;
          }
          v8 = 1952855092;
LABEL_93:
          if (a1 != v8)
            return result;
          return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
        }
        if (a1 <= 1937126451)
        {
          if (a1 == 1937125936)
            return BytesPerPixelForPixelFormat
                 * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
          v10 = 1937125938;
          goto LABEL_107;
        }
        if (a1 == 1937126452)
          return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
        v11 = 1952854576;
      }
      else
      {
        if (a1 > 2019963439)
        {
          if (a1 <= 2019963955)
          {
            if (a1 == 2019963440)
              return BytesPerPixelForPixelFormat
                   * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
            v10 = 2019963442;
            goto LABEL_107;
          }
          if (a1 == 2019963956)
            return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
          if (a1 != 2037741158)
          {
            v9 = 2037741171;
            goto LABEL_101;
          }
LABEL_102:
          v12 = a3 * a2;
          return v12 * BytesPerPixelForPixelFormat;
        }
        if (a1 > 2016686641)
        {
          if (a1 == 2016686642)
            goto LABEL_108;
          v8 = 2016687156;
          goto LABEL_93;
        }
        if (a1 == 1953903668)
          return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
        v11 = 2016686640;
      }
    }
    else
    {
      if (a1 > 1815491697)
      {
        if (a1 <= 1919379251)
        {
          if (a1 > 1885745711)
          {
            if (a1 != 1885745712)
            {
              v9 = 1919378232;
              goto LABEL_101;
            }
          }
          else
          {
            if (a1 == 1815491698)
              goto LABEL_102;
            if (a1 != 1882468912)
              return result;
          }
          return 4
               * ((a2 + 2) / 3uLL * a3 + (((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) + 2) / 3 * ((unint64_t)(a3 + 1) >> 1));
        }
        if (a1 <= 1936077359)
        {
          if (a1 == 1919379252)
            goto LABEL_102;
          v9 = 1932996149;
          goto LABEL_101;
        }
        if (a1 == 1936077360)
          return BytesPerPixelForPixelFormat
               * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
        if (a1 == 1936077362)
          goto LABEL_108;
        v8 = 1936077876;
        goto LABEL_93;
      }
      if (a1 <= 1751411058)
      {
        if (a1 > 1735549751)
        {
          if (a1 == 1735549752)
            goto LABEL_102;
          v9 = 1751410032;
          goto LABEL_101;
        }
        if (a1 != 1734505012)
        {
          v9 = 1735549492;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      if (a1 > 1815162993)
      {
        if (a1 == 1815162994)
          goto LABEL_102;
        v9 = 1815361650;
        goto LABEL_101;
      }
      if (a1 == 1751411059)
        goto LABEL_102;
      v11 = 1751527984;
    }
LABEL_85:
    if (a1 != v11)
      return result;
    return BytesPerPixelForPixelFormat
         * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
  }
  if (a1 > 1279340599)
  {
    if (a1 <= 1650943795)
    {
      if (a1 > 1380411456)
      {
        if (a1 > 1647719527)
        {
          if (a1 == 1647719528)
            goto LABEL_102;
          v9 = 1650942776;
          goto LABEL_101;
        }
        if (a1 != 1380411457)
        {
          v9 = 1647589490;
          goto LABEL_101;
        }
      }
      else
      {
        if (a1 > 1380401728)
        {
          if (a1 == 1380401729)
            goto LABEL_102;
          v9 = 1380410945;
          goto LABEL_101;
        }
        if (a1 != 1279340600)
        {
          v9 = 1279340854;
          goto LABEL_101;
        }
      }
    }
    else
    {
      if (a1 > 1651926375)
      {
        if (a1 > 1717855599)
        {
          if (a1 != 1717855600 && a1 != 1717856627)
          {
            v9 = 1734501176;
            goto LABEL_101;
          }
          goto LABEL_102;
        }
        if (a1 == 1651926376)
          goto LABEL_102;
        v9 = 1652056888;
        goto LABEL_101;
      }
      if (a1 > 1651847471)
      {
        if (a1 == 1651847472)
          goto LABEL_102;
        v9 = 1651925816;
        goto LABEL_101;
      }
      if (a1 != 1650943796)
      {
        v9 = 1651519798;
        goto LABEL_101;
      }
    }
    goto LABEL_102;
  }
  if (a1 <= 875836517)
  {
    if (a1 <= 875704421)
    {
      if (a1 <= 843264055)
      {
        if (a1 != 825306677)
        {
          v9 = 825437747;
          goto LABEL_101;
        }
        goto LABEL_102;
      }
      if (a1 == 843264056)
        goto LABEL_102;
      v9 = 843264310;
LABEL_101:
      if (a1 != v9)
        return result;
      goto LABEL_102;
    }
    if (a1 <= 875704933)
    {
      if (a1 == 875704422)
        return BytesPerPixelForPixelFormat
             * (a3 * a2 + ((a2 + 1) & 0xFFFFFFFFFFFFFFFELL) * ((unint64_t)(a3 + 1) >> 1));
      v11 = 875704438;
      goto LABEL_85;
    }
    if (a1 != 875704934)
    {
      v10 = 875704950;
LABEL_107:
      if (a1 != v10)
        return result;
      goto LABEL_108;
    }
    goto LABEL_108;
  }
  if (a1 <= 1278226487)
  {
    if (a1 != 875836518 && a1 != 875836534)
    {
      v9 = 1111970369;
      goto LABEL_101;
    }
    return 3 * a3 * a2 * BytesPerPixelForPixelFormat;
  }
  if ((a1 - 1278226488) <= 0x30 && ((1 << (a1 - 56)) & 0x1400000000001) != 0
    || (a1 - 1278226736) <= 6 && ((1 << (a1 - 48)) & 0x45) != 0)
  {
    goto LABEL_102;
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsPacked(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if ((_DWORD)a1 != 1882468912 && (_DWORD)a1 != 1885745712)
  {
    if (CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1) == 1815162994)
      return 1;
    result = 1;
    if ((int)a1 <= 1734504495)
    {
      if ((_DWORD)a1 == 1650946096)
        return result;
      v3 = 1650946098;
      goto LABEL_11;
    }
    if ((_DWORD)a1 != 1734504496 && (_DWORD)a1 != 1735553072)
    {
      v3 = 1919381552;
LABEL_11:
      if ((_DWORD)a1 != v3)
        return 0;
    }
  }
  return result;
}

uint64_t CMPhotoPixelFormatIsPackedRAW(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1734504495)
  {
    if (a1 == 1650946096)
      return result;
    v3 = 1650946098;
    goto LABEL_7;
  }
  if (a1 != 1734504496 && a1 != 1735553072)
  {
    v3 = 1919381552;
LABEL_7:
    if (a1 != v3)
      return 0;
  }
  return result;
}

BOOL CMPhotoPixelFormatIsCompressed(int a1)
{
  return CMPhotoPixelFormatIsAGXCompressed(a1) || CMPhotoPixelFormatIsLossyCompressed(a1);
}

uint64_t CMPhotoGetSizeInfoForPixelFormat(uint64_t a1, double *a2, _BYTE *a3, _BYTE *a4, uint64_t *a5)
{
  uint64_t BytesPerPixelForPixelFormat;
  uint64_t result;
  double v12;
  int v13;
  __int16 v14;
  uint64_t v15;

  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(a1);
  v15 = 0;
  v14 = 0;
  result = CMPhotoPixelFormatIsSubsampled(a1, &v14, (_BYTE *)&v14 + 1, 0, &v15);
  if ((_DWORD)result)
    return result;
  if (v15 == 3)
  {
    if (CMPhotoPixelFormatContainsRGB(a1))
    {
      v12 = (double)(unint64_t)(v15 * BytesPerPixelForPixelFormat);
      goto LABEL_13;
    }
    return 4294950301;
  }
  if (v15 == 2)
  {
    if ((_BYTE)v14)
      v13 = 2;
    else
      v13 = 1;
    v12 = ((double)(v13 << (HIBYTE(v14) != 0)) + 2.0)
        / (double)(v13 << (HIBYTE(v14) != 0))
        * (double)(unint64_t)BytesPerPixelForPixelFormat;
    goto LABEL_13;
  }
  if (v15 != 1)
    return 4294950301;
  v12 = (double)(unint64_t)BytesPerPixelForPixelFormat;
LABEL_13:
  if (a2)
    *a2 = v12;
  if (a3)
    *a3 = v14;
  if (a4)
    *a4 = HIBYTE(v14);
  result = 0;
  if (a5)
    *a5 = BytesPerPixelForPixelFormat;
  return result;
}

void *CMPhotoCascadingDownscaleCreate(uint64_t a1, int a2, const void *a3, const void *a4, int a5, int a6)
{
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  const __CFAllocator *v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  __CFDictionary *Mutable;
  const void *v20;
  const void *v21;
  CFNumberRef v22;
  uint64_t v23;
  int v24;
  void *v25;
  int valuePtr;
  char v28;

  valuePtr = 2;
  v12 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x1030040F0A01298uLL);
  v13 = v12;
  if (v12)
  {
    *(_QWORD *)(v12 + 4) = a1;
    *(_DWORD *)v12 = a2;
    if (a3 && a5 >= 1)
    {
      v14 = malloc_type_malloc(8 * a5, 0x100004000313F17uLL);
      *((_QWORD *)v13 + 2) = v14;
      memcpy(v14, a3, 8 * a5);
    }
    if (a4 && a5 >= 1)
    {
      v15 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
      *((_QWORD *)v13 + 3) = v15;
      memcpy(v15, a4, 4 * a5);
    }
    *((_DWORD *)v13 + 8) = a5;
    if (a6 == 892679473)
    {
      v28 = 0;
      getScalerCapabilities(0, &v28, 0);
      if (v28)
        a6 = 892679473;
      else
        a6 = 1278555701;
    }
    *((_DWORD *)v13 + 3) = a6;
    v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    IOSurfaceAcceleratorCreate();
    if (*((_QWORD *)v13 + 9))
    {
      *((_QWORD *)v13 + 10) = IOSurfaceAcceleratorGetRunLoopSource();
      v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *((_QWORD *)v13 + 11) = Mutable;
      v20 = (const void *)*MEMORY[0x1E0D3A248];
      v21 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A248], (const void *)*MEMORY[0x1E0C9AE50]);
      *((_QWORD *)v13 + 12) = CFDictionaryCreateMutable(0, 0, v17, v18);
      v22 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v13 + 12), v20, v21);
      CFDictionarySetValue(*((CFMutableDictionaryRef *)v13 + 12), CFSTR("DitherControl"), v22);
      CFRelease(v22);
      if (a3 && a2 && (_DWORD)a1 && HIDWORD(a1) && a6)
        buildTopRectAndSurface(*((_DWORD *)v13 + 1), *((_DWORD *)v13 + 2), *(_DWORD *)v13, 1, *((int **)v13 + 2), *((_DWORD *)v13 + 8), (char **)v13 + 6, (int *)v13 + 14, (IOSurfaceRef *)v13 + 5);
      v23 = *((_QWORD *)v13 + 2);
      if (v23)
      {
        v24 = *((_DWORD *)v13 + 3);
        if (v24)
          *((_QWORD *)v13 + 8) = buildDestSurface(v24, v23, *((_DWORD *)v13 + 8));
      }
      getScalerCapabilities(0, 0, 0);
    }
    else
    {
      v25 = (void *)*((_QWORD *)v13 + 2);
      if (v25)
        free(v25);
      free(v13);
      return 0;
    }
  }
  return v13;
}

void buildTopRectAndSurface(int a1, int a2, OSType a3, int a4, int *a5, int a6, char **a7, int *a8, IOSurfaceRef *a9)
{
  char v10;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int *v41;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  char *v50;
  int *v51;
  char *v52;
  char *v53;
  int *v54;
  int v55;
  int *v56;
  int v57;
  int *v58;
  uint64_t v59;
  char v60;
  char *v61;
  CFDictionaryRef v62;
  CFMutableDictionaryRef v63;
  const __CFDictionary *v64;
  IOSurfaceRef v65;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v67;
  CFMutableArrayRef v68;
  __CFArray *v69;
  CFMutableDictionaryRef v70;
  CFMutableDictionaryRef v71;
  CFMutableDictionaryRef v72;
  CFMutableDictionaryRef v73;
  _DWORD *v76;
  char v77;
  int v78;

  v10 = a4;
  v15 = a5 + 1;
  v14 = a5[1];
  if (*a5 <= v14)
    v16 = a5[1];
  else
    v16 = *a5;
  if (a1 > a2)
    v17 = v16;
  else
    v17 = *a5 * a2 / a1;
  if (a1 > a2)
    v18 = v14 * a1 / a2;
  else
    v18 = v16;
  if (a6 >= 2)
  {
    v19 = a5 + 3;
    v20 = a6 - 1;
    do
    {
      v22 = *(v19 - 1);
      v21 = *v19;
      if (v22 > v18 || v21 > v17)
      {
        if (v22 <= v21)
          v24 = *v19;
        else
          v24 = *(v19 - 1);
        v25 = v22 * a2;
        v26 = v21 * a1 / a2;
        if (a1 <= a2)
          v26 = v24;
        v27 = v25 / a1;
        if (a1 > a2)
          v27 = v24;
        if (v26 > v18 || v27 > v17)
        {
          v17 = v27;
          v18 = v26;
        }
      }
      v19 += 2;
      --v20;
    }
    while (v20);
  }
  if ((a4 & 1) == 0 && v18 >= (a1 + 3) >> 2 && v17 >= (a2 + 3) >> 2)
  {
    if (a6 <= 1)
      return;
LABEL_57:
    v38 = 0;
    v39 = *a5;
    v40 = a5[1];
LABEL_58:
    v41 = &a5[2 * (a6 - 1)];
    v44 = *v41;
    v42 = v41 + 1;
    v43 = v44;
    while (v39 > v43 || v40 > *v42)
    {
      v39 = (v39 + 3) >> 2;
      v40 = (v40 + 3) >> 2;
      if (v39 <= v43 && v40 <= *v42)
        break;
      ++v38;
    }
    goto LABEL_64;
  }
  v30 = 1;
  v31 = a1;
  v32 = a2;
  do
  {
    v32 = (v32 + 3) >> 2;
    v31 = (v31 + 3) >> 2;
    --v30;
  }
  while (v31 > v18 || v32 > v17);
  if (v30)
    v34 = v31 == v18;
  else
    v34 = 1;
  v36 = !v34 && v32 != v17;
  v37 = v36 - v30;
  if (v37)
    v38 = v37;
  else
    v38 = a4;
  if (a6 > 1)
  {
    v39 = v18;
    v40 = v17;
    if (v38)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_64:
  if (v38 < 1)
    return;
  v45 = v38;
  v76 = malloc_type_calloc(1uLL, 24 * v38, 0x1000040504FFAC1uLL);
  v46 = (a1 + 3) >> 2;
  if ((v10 & 1) != 0 || v46 > v18 || v17 < (a2 + 3) >> 2)
  {
    v47 = (a2 + 3) >> 2;
    if (v46 > v18 || v47 > v17)
    {
      v49 = 0;
      v48 = 0;
      v50 = (char *)v76;
      v51 = v76 + 2;
      do
      {
        do
        {
          *v51 = v46;
          v51[1] = v47;
          *(v51 - 1) = v48;
          v48 += v47;
          v47 = (v47 + 3) >> 2;
          v46 = (v46 + 3) >> 2;
          v51 += 6;
          ++v49;
        }
        while (v46 > v18);
      }
      while (v47 > v17);
    }
    else
    {
      v48 = 0;
      v49 = 0;
      v50 = (char *)v76;
    }
    if (!v49 && (v10 & 1) != 0 || v49 && v46 != v18 && v47 != v17)
    {
      v52 = &v50[24 * v49];
      *((_DWORD *)v52 + 2) = v18;
      *((_DWORD *)v52 + 3) = v17;
      *((_DWORD *)v52 + 1) = v48;
      v48 += v17;
      ++v49;
    }
  }
  else
  {
    v48 = 0;
    v49 = 0;
    v50 = (char *)v76;
  }
  if (v49 < v38)
  {
    v53 = &v50[24 * (v49 - 1)];
    v54 = (int *)(v53 + 8);
    if (v49 <= 0)
      v54 = a5;
    v55 = *v54;
    v56 = (int *)(v53 + 12);
    if (v49 <= 0)
      v56 = v15;
    v57 = *v56;
    v58 = (int *)&v50[24 * v49 + 8];
    v59 = v38 - (uint64_t)v49;
    do
    {
      v55 = (v55 + 3) >> 2;
      v57 = (v57 + 3) >> 2;
      *v58 = v55;
      v58[1] = v57;
      *(v58 - 1) = v48;
      v48 += v57;
      v58 += 6;
      --v59;
    }
    while (v59);
  }
  if (a3 == 875836518 || a3 == 875704934)
    goto LABEL_104;
  if (a3 == 875704422)
  {
    v60 = 0;
    v61 = v50 + 12;
    do
    {
      if ((*(v61 - 4) & 1) != 0)
        v60 = 1;
      v61 += 24;
      --v45;
    }
    while (v45);
    if (v60)
    {
      v77 = 0;
      getScalerCapabilities(0, 0, &v77);
      if (v77)
      {
        a3 = 1111970369;
        goto LABEL_98;
      }
    }
LABEL_104:
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      goto LABEL_114;
    v67 = Mutable;
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    v68 = CFArrayCreateMutable(0, 2, MEMORY[0x1E0C9B378]);
    if (v68)
    {
      v69 = v68;
      v70 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v70)
      {
        v71 = v70;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFArrayAppendValue(v69, v71);
        CFRelease(v71);
      }
      v72 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v72)
      {
        v73 = v72;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFArrayAppendValue(v69, v73);
        CFRelease(v73);
      }
      CFDictionarySetValue(v67, (const void *)*MEMORY[0x1E0CBC158], v69);
      CFRelease(v69);
    }
    FigCFDictionarySetInt32();
    v65 = IOSurfaceCreate(v67);
    CFRelease(v67);
    v50 = (char *)v76;
    if (!v65)
      goto LABEL_114;
LABEL_113:
    *a8 = v38;
    *a7 = v50;
    *a9 = v65;
    return;
  }
LABEL_98:
  v78 = 0;
  v62 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
  if (v62)
  {
    FigCFDictionaryGetInt32IfPresent();
    CFRelease(v62);
    if (v78)
    {
      v63 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v63)
      {
        v64 = v63;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        v50 = (char *)v76;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        v65 = IOSurfaceCreate(v64);
        CFRelease(v64);
        if (v65)
          goto LABEL_113;
      }
    }
  }
LABEL_114:
  free(v50);
}

IOSurfaceRef buildDestSurface(int a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  int v6;
  const __CFDictionary *Mutable;
  IOSurfaceRef v8;

  if (a1 != 1278555701 && a1 != 1111970369 && a1 != 892679473)
    return 0;
  if (a3 >= 1)
  {
    v3 = 0;
    v4 = a3;
    v5 = (int *)(a2 + 4);
    do
    {
      v6 = *v5;
      v5 += 2;
      v3 += v6;
      --v4;
    }
    while (v4);
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v8 = IOSurfaceCreate(Mutable);
  CFRelease(Mutable);
  return v8;
}

int *getScalerCapabilities(int *result, _BYTE *a2, _BYTE *a3)
{
  int *v5;
  mach_port_t v6;
  const __CFDictionary *v7;
  io_object_t v8;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  CFTypeID v13;
  const __CFNumber *v14;
  const __CFNumber *v15;
  CFTypeID v16;
  int v17;
  int v18;
  uint64_t valuePtr;

  v5 = result;
  if ((getScalerCapabilities_checked & 1) == 0)
  {
    v6 = *MEMORY[0x1E0CBBAA8];
    v7 = IOServiceMatching("AppleM2ScalerCSCDriver");
    result = (int *)IOServiceGetMatchingService(v6, v7);
    if ((_DWORD)result)
    {
      v8 = result;
      valuePtr = 0;
      v18 = 0;
      v9 = (const __CFDictionary *)IORegistryEntrySearchCFProperty((io_registry_entry_t)result, "IOService", CFSTR("IOSurfaceAcceleratorCapabilitiesDict"), 0, 0);
      if (v9)
      {
        v10 = v9;
        Value = (const __CFNumber *)CFDictionaryGetValue(v9, CFSTR("IOSurfaceAcceleratorScalerVersion"));
        if (Value)
        {
          v12 = Value;
          v13 = CFGetTypeID(Value);
          if (v13 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v12, kCFNumberLongLongType, &valuePtr);
            if (valuePtr >= 262151)
              getScalerCapabilities__numberOfScalerCores = 1;
            if (valuePtr == 131079 || valuePtr == 131074)
              getScalerCapabilities__isH3Platform = 1;
          }
        }
        v14 = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("IOSurfaceAcceleratorFormatInARGB1555"));
        if (v14)
        {
          v15 = v14;
          v16 = CFGetTypeID(v14);
          if (v16 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v15, kCFNumberIntType, &v18);
            if (v18 == 1)
              getScalerCapabilities__supports5551 = 1;
          }
        }
        CFRelease(v10);
      }
      result = (int *)IOObjectRelease(v8);
    }
    getScalerCapabilities_checked = 1;
  }
  if (v5)
  {
    if (getScalerCapabilities__numberOfScalerCores)
      v17 = 2;
    else
      v17 = 1;
    *v5 = v17;
  }
  if (a2)
    *a2 = getScalerCapabilities__supports5551;
  if (a3)
    *a3 = getScalerCapabilities__isH3Platform;
  return result;
}

void CMPhotoCascadingDownscaleDestroy(_QWORD *a1)
{
  void *v2;
  const void *v3;
  void *v4;
  void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a1)
  {
    v2 = (void *)a1[6];
    if (v2)
    {
      free(v2);
      a1[6] = 0;
    }
    v3 = (const void *)a1[5];
    if (v3)
    {
      CFRelease(v3);
      a1[5] = 0;
    }
    v4 = (void *)a1[2];
    if (v4)
    {
      free(v4);
      a1[2] = 0;
    }
    v5 = (void *)a1[3];
    if (v5)
    {
      free(v5);
      a1[3] = 0;
    }
    v6 = (const void *)a1[8];
    if (v6)
    {
      CFRelease(v6);
      a1[8] = 0;
    }
    v7 = (const void *)a1[9];
    if (v7)
    {
      CFRelease(v7);
      a1[9] = 0;
    }
    v8 = (const void *)a1[11];
    if (v8)
    {
      CFRelease(v8);
      a1[11] = 0;
    }
    v9 = (const void *)a1[12];
    if (v9)
      CFRelease(v9);
    free(a1);
  }
}

uint64_t CMPhotoCascadingDownscale(uint64_t a1, IOSurfaceRef buffer, int a3, int a4, int *a5, uint64_t a6, uint64_t a7, int a8)
{
  OSType PixelFormat;
  int8x8_t v17;
  OSType v18;
  uint8x8_t v19;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  void *v31;
  const void *v32;
  int v33;
  int v34;
  char *v35;
  __IOSurface *v36;
  const void *v37;
  IOSurfaceRef v38;
  size_t v39;
  int Width;
  int Height;
  int v42;
  _DWORD *v43;
  __CFDictionary *v44;
  __CFDictionary *Mutable;
  const __CFAllocator *v46;
  uint64_t v47;
  const void *v48;
  const void *v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t i;
  uint64_t v56;
  __int128 v57;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Current;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  float v67;
  char *v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  float v72;
  unsigned int v73;
  unsigned int v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  char *v79;
  unsigned int v80;
  float v81;
  float v82;
  float v83;
  int v84;
  float v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  const __CFString *v89;
  __CFRunLoop *v90;
  int v91;
  __CFRunLoop *v92;
  int *v93;
  __CFDictionary *v94;
  CFNumberRef v95;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v98;
  uint64_t v99;
  char *v100;
  int *v101;
  size_t v102;
  int v103;
  int v104;
  _DWORD *v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int8x16_t v111;
  char *v112;
  char *v113;
  unsigned int v114;
  BOOL v115;
  int v116;
  unsigned __int16 v117;
  int v118;
  uint64_t v119;
  int v120;
  const __CFString *mode;
  __CFRunLoopSource *v122;
  __CFDictionary *cf;
  __CFDictionary *v124;
  uint64_t v125;
  int v126;
  int *v127;
  _BOOL4 v128;
  _BOOL4 v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  __IOSurface *buffera;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  __int128 valuePtr;
  uint64_t v139;
  CFTypeRef v140;
  int v141;
  char *v142;
  IOSurfaceRef v143[2];

  v142 = 0;
  v143[0] = 0;
  v141 = 0;
  v140 = 0;
  if (!buffer || !a5 || !a6)
    return FigSignalErrorAt();
  if (a8)
  {
    PixelFormat = IOSurfaceGetPixelFormat(buffer);
    v18 = PixelFormat;
    if (PixelFormat != 875704422 && PixelFormat != 1111970369)
      return FigSignalErrorAt();
    if (a3 != 892679473 && a3 != 1111970369 && a3 != 1278555701)
      return FigSignalErrorAt();
    if (a4 >= 2)
    {
      v17.i32[0] = a4;
      v19 = (uint8x8_t)vcnt_s8(v17);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.i32[0] > 1u)
        return FigSignalErrorAt();
    }
    if (a8 >= 2)
    {
      v22 = a5 + 3;
      v23 = *a5;
      v24 = a8 - 1;
      do
      {
        v25 = *(v22 - 1);
        if (v25 > v23 || v25 < 16 || *v22 <= 15)
          return FigSignalErrorAt();
        v22 += 2;
        v23 = v25;
      }
      while (--v24);
    }
    v131 = a4;
    if (a1)
    {
      v26 = (a3 != 892679473
          || (LOBYTE(valuePtr) = 0, getScalerCapabilities(0, &valuePtr, 0), (_BYTE)valuePtr)
          || *(_DWORD *)(a1 + 12) != 1278555701)
         && *(_DWORD *)(a1 + 12) != a3
         || *(_DWORD *)(a1 + 32) != a8
         || memcmp(a5, *(const void **)(a1 + 16), 8 * a8) != 0;
      v27 = v18 != *(_DWORD *)a1
         || IOSurfaceGetWidth(buffer) != *(_DWORD *)(a1 + 4)
         || IOSurfaceGetHeight(buffer) != *(_DWORD *)(a1 + 8)
         || v26;
      if (!v26)
      {
LABEL_39:
        v125 = a1;
        v126 = a8;
        v130 = a6;
        if (a3 == 1111970369)
        {
          v28 = 0;
          v29 = 0;
          v120 = 4;
          v30 = 1111970369;
          goto LABEL_41;
        }
        if (a3 != 1278555701)
        {
          LOBYTE(valuePtr) = 0;
          getScalerCapabilities(0, &valuePtr, 0);
          v28 = (_BYTE)valuePtr == 0;
          if ((_BYTE)valuePtr)
            v30 = 892679473;
          else
            v30 = 1278555701;
          if (a8 < 2)
          {
            v29 = 0;
            v120 = 2;
            goto LABEL_41;
          }
          v29 = 0;
          v120 = 2;
          if (v18 == 892679473 || v18 == 1278555701)
          {
LABEL_41:
            v128 = v28;
            if (v27)
            {
              if (!a1)
              {
                Width = IOSurfaceGetWidth(buffer);
                Height = IOSurfaceGetHeight(buffer);
                buildTopRectAndSurface(Width, Height, v18, v29, a5, v126, &v142, &v141, v143);
                if (v26)
                {
                  v38 = buildDestSurface(v30, (uint64_t)a5, v126);
                  goto LABEL_71;
                }
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 56) = 0;
              v31 = *(void **)(a1 + 48);
              if (v31)
              {
                free(v31);
                *(_QWORD *)(a1 + 48) = 0;
              }
              v32 = *(const void **)(a1 + 40);
              if (v32)
              {
                CFRelease(v32);
                *(_QWORD *)(a1 + 40) = 0;
              }
              v33 = IOSurfaceGetWidth(buffer);
              v34 = IOSurfaceGetHeight(buffer);
              buildTopRectAndSurface(v33, v34, v18, v29, a5, v126, &v142, &v141, v143);
              *(_DWORD *)(a1 + 56) = v141;
              v35 = v142;
              *(IOSurfaceRef *)(a1 + 40) = v143[0];
              *(_QWORD *)(a1 + 48) = v35;
              *(_DWORD *)(a1 + 4) = IOSurfaceGetWidth(buffer);
              *(_DWORD *)(a1 + 8) = IOSurfaceGetHeight(buffer);
              *(_DWORD *)a1 = v18;
              if (!v26)
              {
LABEL_70:
                v38 = *(IOSurfaceRef *)(a1 + 64);
                goto LABEL_71;
              }
            }
            else
            {
              v141 = *(_DWORD *)(a1 + 56);
              v36 = *(__IOSurface **)(a1 + 40);
              v142 = *(char **)(a1 + 48);
              v143[0] = v36;
              if (!v26)
                goto LABEL_70;
            }
            v37 = *(const void **)(a1 + 64);
            if (v37)
              CFRelease(v37);
            v38 = buildDestSurface(v30, (uint64_t)a5, v126);
            *(_QWORD *)(a1 + 64) = v38;
LABEL_71:
            LODWORD(valuePtr) = 0;
            getScalerCapabilities((int *)&valuePtr, 0, 0);
            v127 = 0;
            v42 = (_DWORD)valuePtr == 1 || v29;
            v134 = v42;
            if (v42 == 1)
            {
              v43 = malloc_type_malloc(0x40uLL, 0x10A0040517A9223uLL);
              if (!v43)
              {
                v93 = 0;
                cf = 0;
                Mutable = 0;
                v21 = 4294950305;
                goto LABEL_182;
              }
              *v43 = 0;
              v43[1] = v126;
              v43[2] = 1;
              *((_QWORD *)v43 + 2) = a5;
              *((_QWORD *)v43 + 3) = v130;
              v43[8] = v120;
              v43[9] = v131;
              v43[10] = v128;
              *((_QWORD *)v43 + 6) = v38;
              v127 = v43;
              v43[14] = 0;
            }
            buffera = v38;
            if (a1)
            {
              v140 = *(CFTypeRef *)(a1 + 72);
              Mutable = *(__CFDictionary **)(a1 + 88);
              v44 = *(__CFDictionary **)(a1 + 96);
            }
            else
            {
              v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v47 = IOSurfaceAcceleratorCreate();
              if ((_DWORD)v47)
              {
                v21 = v47;
                Mutable = 0;
                cf = 0;
                v93 = v127;
                v38 = buffera;
                goto LABEL_183;
              }
              Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v48 = (const void *)*MEMORY[0x1E0D3A248];
              v49 = (const void *)*MEMORY[0x1E0C9AE50];
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D3A248], (const void *)*MEMORY[0x1E0C9AE50]);
              if (a3 != 1111970369)
              {
                LODWORD(valuePtr) = 2;
                v94 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                v95 = CFNumberCreate(v46, kCFNumberSInt32Type, &valuePtr);
                CFDictionarySetValue(v94, v48, v49);
                cf = v94;
                CFDictionarySetValue(v94, CFSTR("DitherControl"), v95);
                CFRelease(v95);
LABEL_83:
                if (v141 < 1)
                {
LABEL_88:
                  v124 = Mutable;
                  if (v125)
                    RunLoopSource = *(__CFRunLoopSource **)(v125 + 80);
                  else
                    RunLoopSource = (__CFRunLoopSource *)IOSurfaceAcceleratorGetRunLoopSource();
                  Current = CFRunLoopGetCurrent();
                  mode = (const __CFString *)*MEMORY[0x1E0C9B270];
                  v122 = RunLoopSource;
                  CFRunLoopAddSource(Current, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
                  v60 = IOSurfaceGetWidth(buffer);
                  v61 = IOSurfaceGetHeight(buffer);
                  if (v134)
                    IOSurfaceLock(buffera, 1u, 0);
                  if (v126 < 1)
                  {
LABEL_136:
                    a1 = v125;
                    Mutable = v124;
                    if (!v134)
                      goto LABEL_141;
                    if (*v127 < v126)
                    {
                      v89 = (const __CFString *)*MEMORY[0x1E0C9B280];
                      do
                        CFRunLoopRunInMode(v89, 1.0, 1u);
                      while (*v127 < v126);
                    }
                    v21 = v127[14];
                    if (!(_DWORD)v21)
                    {
LABEL_141:
                      v90 = CFRunLoopGetCurrent();
                      CFRunLoopRemoveSource(v90, v122, mode);
                      if (v125)
                      {
                        v91 = v131;
                      }
                      else
                      {
                        v91 = v131;
                        if (v124)
                          CFRelease(v124);
                        if (cf)
                          CFRelease(cf);
                        if (v140)
                        {
                          CFRelease(v140);
                          Mutable = 0;
                          cf = 0;
                          v140 = 0;
                        }
                        else
                        {
                          Mutable = 0;
                          cf = 0;
                        }
                      }
                      if (v134)
                      {
                        free(v127);
                        v93 = 0;
                      }
                      else
                      {
                        BytesPerRow = IOSurfaceGetBytesPerRow(buffera);
                        IOSurfaceLock(buffera, 1u, 0);
                        BaseAddress = (char *)IOSurfaceGetBaseAddress(buffera);
                        if (v126 >= 1)
                        {
                          v98 = BaseAddress;
                          v99 = 0;
                          v136 = -v91;
                          v137 = v91 - 1;
                          do
                          {
                            v100 = *(char **)(v130 + 8 * v99);
                            v101 = &a5[2 * v99];
                            v102 = *v101 * (uint64_t)v120;
                            if (v131)
                              v103 = (v137 + v102) & v136;
                            else
                              v103 = *v101 * v120;
                            v106 = v101[1];
                            v105 = v101 + 1;
                            v104 = v106;
                            if (v128)
                            {
                              if (v104 >= 1)
                              {
                                v107 = 0;
                                v108 = (int)v102 >> 1;
                                do
                                {
                                  if ((int)v102 < 15)
                                  {
                                    v114 = 0;
                                    v113 = v98;
                                    v112 = v100;
                                  }
                                  else
                                  {
                                    v109 = 0;
                                    v110 = 0;
                                    v111.i64[0] = 0x1F001F001F001FLL;
                                    v111.i64[1] = 0x1F001F001F001FLL;
                                    do
                                    {
                                      *(_OWORD *)&v100[v109] = *(_OWORD *)&vorrq_s8(vandq_s8(*(int8x16_t *)&v98[v109], v111), (int8x16_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&v98[v109], 1uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0))) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
                                      v110 += 8;
                                      v109 += 16;
                                    }
                                    while (v110 < ((int)v102 >> 1) - 7);
                                    v112 = &v100[v109];
                                    v113 = &v98[v109];
                                    v114 = v108 & 0xFFFFFFF8;
                                  }
                                  v115 = __OFSUB__(v108, v114);
                                  v116 = v108 - v114;
                                  if (!((v116 < 0) ^ v115 | (v116 == 0)))
                                  {
                                    do
                                    {
                                      v117 = *(_WORD *)v113;
                                      v113 += 2;
                                      *(_WORD *)v112 = v117 & 0x1F | (32 * (v117 >> 6)) | 0x8000;
                                      v112 += 2;
                                      --v116;
                                    }
                                    while (v116);
                                  }
                                  v98 += BytesPerRow;
                                  v100 += v103;
                                  ++v107;
                                }
                                while (v107 < *v105);
                              }
                            }
                            else if (v104 >= 1)
                            {
                              v118 = 0;
                              v119 = v103;
                              do
                              {
                                memcpy(v100, v98, v102);
                                v98 += BytesPerRow;
                                v100 += v119;
                                ++v118;
                              }
                              while (v118 < *v105);
                            }
                            ++v99;
                          }
                          while (v99 != v126);
                          a1 = v125;
                        }
                        v93 = v127;
                      }
                      v38 = buffera;
                      IOSurfaceUnlock(buffera, 1u, 0);
                      v21 = 0;
                      goto LABEL_182;
                    }
                  }
                  else
                  {
                    v62 = 0;
                    v135 = 0;
                    v63 = 0;
                    v132 = 0;
                    while (1)
                    {
                      if (v143[0])
                      {
                        v64 = a5[2 * v62];
                        if (*((_DWORD *)v142 + 2) >= v64)
                        {
                          v65 = a5[2 * v62 + 1];
                          if (*((_DWORD *)v142 + 3) >= v65)
                          {
                            if (v141 < 1)
                            {
                              LODWORD(v66) = 0;
                            }
                            else
                            {
                              v66 = 0;
                              v67 = (float)(int)v64 / (float)v65;
                              v68 = v142 + 12;
                              while (1)
                              {
                                v69 = *((_DWORD *)v68 - 1);
                                v70 = *(_DWORD *)v68;
                                if (a7 && *(_DWORD *)(a7 + 4 * v62) == 2)
                                {
                                  v71 = (float)v69 / (float)v70;
                                  if (v71 <= v67)
                                  {
                                    if (v71 < v67)
                                    {
                                      v75 = (float)v70 - (float)((float)(v69 * v65) / (float)(int)v64);
                                      v76 = llroundf(v75);
                                      if ((int)vcvtmd_s64_f64(v75 * 0.5 + 0.5) <= 0)
                                        v77 = 0;
                                      else
                                        v77 = v76;
                                      v70 -= v77;
                                    }
                                  }
                                  else
                                  {
                                    v72 = (float)v69 - (float)((float)(v70 * v64) / (float)v65);
                                    v73 = llroundf(v72);
                                    if ((int)vcvtmd_s64_f64(v72 * 0.5 + 0.5) <= 0)
                                      v74 = 0;
                                    else
                                      v74 = v73;
                                    v69 -= v74;
                                  }
                                }
                                if (v69 < v64 && v70 < v65)
                                  break;
                                v68 += 24;
                                if (v141 == ++v66)
                                {
                                  LODWORD(v66) = v141;
                                  break;
                                }
                              }
                            }
                            v79 = &v142[24 * (int)v66 - 24];
                            HIDWORD(v135) = *(_DWORD *)v79;
                            v60 = *((_DWORD *)v79 + 2);
                            LODWORD(v135) = *((_DWORD *)v79 + 1);
                            v61 = *((_DWORD *)v79 + 3);
                            v132 = *((_QWORD *)v79 + 2);
                          }
                        }
                      }
                      else
                      {
                        v64 = a5[2 * v62];
                      }
                      v80 = a5[2 * v62 + 1];
                      v81 = (float)v60 / (float)v61;
                      v82 = (float)v64 / (float)v80;
                      if (a7 && *(_DWORD *)(a7 + 4 * v62) == 2)
                      {
                        if (v81 <= v82)
                        {
                          if (v81 < v82)
                          {
                            v85 = (float)v61 - (float)((float)(v80 * v60) / (float)v64);
                            v86 = vcvtmd_s64_f64(v85 * 0.5 + 0.5);
                            v87 = llroundf(v85);
                            LODWORD(v135) = (v86 & ~(v86 >> 31)) + v135;
                            if (v86 <= 0)
                              v88 = 0;
                            else
                              v88 = v87;
                            v61 -= v88;
                          }
                        }
                        else
                        {
                          v83 = (float)v60 - (float)((float)(v64 * v61) / (float)v80);
                          v84 = vcvtmd_s64_f64(v83 * 0.5 + 0.5);
                          if (v84 >= 1)
                          {
                            v60 -= llroundf(v83);
                            HIDWORD(v135) += v84;
                          }
                        }
                      }
                      *(_QWORD *)&valuePtr = __PAIR64__(v135, HIDWORD(v135));
                      *((_QWORD *)&valuePtr + 1) = __PAIR64__(v61, v60);
                      v139 = v132;
                      v21 = IOSurfaceAcceleratorBlitSurface();
                      if ((_DWORD)v21)
                        break;
                      v63 += v80;
                      if (++v62 == v126)
                        goto LABEL_136;
                    }
                  }
                  a1 = v125;
                  v38 = buffera;
                  if (v122)
                  {
                    v92 = CFRunLoopGetCurrent();
                    CFRunLoopRemoveSource(v92, v122, mode);
                  }
                  v93 = v127;
                  Mutable = v124;
                }
                else
                {
                  v50 = IOSurfaceGetWidth(buffer);
                  v51 = IOSurfaceGetHeight(buffer);
                  v52 = v142;
                  v53 = v141;
                  *(_QWORD *)&v54 = 0;
                  *((_QWORD *)&v54 + 1) = __PAIR64__(v51, v50);
                  for (i = 1; ; ++i)
                  {
                    valuePtr = v54;
                    v139 = 0;
                    v56 = IOSurfaceAcceleratorBlitSurface();
                    if ((_DWORD)v56)
                      break;
                    if (i >= v53)
                      goto LABEL_88;
                    v57 = *(_OWORD *)v52;
                    v52 += 24;
                    v54 = v57;
                  }
                  v21 = v56;
                  a1 = v125;
                  v93 = v127;
                  v38 = buffera;
                }
LABEL_182:
                if (a1)
                {
LABEL_195:
                  if (v93)
                    free(v93);
                  return v21;
                }
LABEL_183:
                if (v143[0])
                  CFRelease(v143[0]);
                if (v38)
                  CFRelease(v38);
                if (Mutable)
                  CFRelease(Mutable);
                if (cf)
                  CFRelease(cf);
                if (v140)
                  CFRelease(v140);
                if (v142)
                  free(v142);
                goto LABEL_195;
              }
              v44 = 0;
            }
            cf = v44;
            goto LABEL_83;
          }
          v129 = (_BYTE)valuePtr == 0;
          if (IOSurfaceGetWidth(buffer) == *a5)
          {
            v29 = 0;
LABEL_199:
            v120 = 2;
            v28 = v129;
            goto LABEL_41;
          }
LABEL_198:
          v29 = IOSurfaceGetWidth(buffer) != a5[1];
          goto LABEL_199;
        }
        v30 = 1278555701;
        if (a8 < 2)
        {
          v28 = 0;
          v29 = 0;
          v120 = 2;
          goto LABEL_41;
        }
        v28 = 0;
        v120 = 2;
        if (v18 != 892679473 && v18 != 1278555701)
        {
          v39 = IOSurfaceGetWidth(buffer);
          v28 = 0;
          if (v39 != *a5)
          {
            v129 = 0;
            goto LABEL_198;
          }
          v120 = 2;
        }
        v29 = 0;
        goto LABEL_41;
      }
      *(_DWORD *)(a1 + 12) = a3;
    }
    else
    {
      v27 = 1;
    }
    v26 = 1;
    goto LABEL_39;
  }
  return 0;
}

size_t completionCallback(size_t result, int a2, int a3)
{
  size_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *BaseAddress;
  size_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int8x16_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  unsigned __int16 v29;
  int v30;
  uint64_t v31;

  v3 = result;
  if (a2)
  {
    *(_DWORD *)(result + 56) = a2;
  }
  else if (*(_DWORD *)(result + 8))
  {
    v6 = a3;
    v7 = 8 * a3;
    v8 = *(char **)(*(_QWORD *)(result + 24) + v7);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)(result + 48));
    result = IOSurfaceGetBytesPerRow(*(IOSurfaceRef *)(v3 + 48));
    v10 = result;
    v11 = *(_QWORD *)(v3 + 16);
    v12 = *(int *)(v3 + 32) * (uint64_t)*(int *)(v11 + v7);
    if (a3 >= 1)
    {
      v13 = a3;
      v14 = (int *)(v11 + 4);
      do
      {
        v15 = *v14;
        v14 += 2;
        BaseAddress += result * v15;
        --v13;
      }
      while (v13);
    }
    v16 = *(_DWORD *)(v3 + 36);
    if (v16)
      v17 = (v12 + v16 - 1) & -v16;
    else
      v17 = v12;
    v18 = *(_DWORD *)(v11 + 8 * v6 + 4);
    if (*(_DWORD *)(v3 + 40))
    {
      if (v18 >= 1)
      {
        v19 = 0;
        v20 = (int)v12 >> 1;
        v21.i64[0] = 0x1F001F001F001FLL;
        v21.i64[1] = 0x1F001F001F001FLL;
        do
        {
          if ((int)v12 < 16)
          {
            v26 = 0;
            v25 = BaseAddress;
            v24 = v8;
          }
          else
          {
            v22 = 0;
            v23 = 0;
            do
            {
              *(_OWORD *)&v8[v22] = *(_OWORD *)&vorrq_s8(vandq_s8(*(int8x16_t *)&BaseAddress[v22], v21), (int8x16_t)(*(_OWORD *)&vshrq_n_u16(*(uint16x8_t *)&BaseAddress[v22], 1uLL) & __PAIR128__(0xFFE0FFE0FFE0FFE0, 0xFFE0FFE0FFE0FFE0))) | __PAIR128__(0x8000800080008000, 0x8000800080008000);
              v23 += 8;
              v22 += 16;
            }
            while (v23 < ((int)v12 >> 1) - 7);
            v24 = &v8[v22];
            v25 = &BaseAddress[v22];
            v26 = v20 & 0xFFFFFFF8;
          }
          v27 = __OFSUB__(v20, v26);
          v28 = v20 - v26;
          if (!((v28 < 0) ^ v27 | (v28 == 0)))
          {
            do
            {
              v29 = *(_WORD *)v25;
              v25 += 2;
              *(_WORD *)v24 = v29 & 0x1F | (32 * (v29 >> 6)) | 0x8000;
              v24 += 2;
              --v28;
            }
            while (v28);
          }
          BaseAddress += result;
          v8 += v17;
          ++v19;
        }
        while (v19 < *(_DWORD *)(*(_QWORD *)(v3 + 16) + 8 * v6 + 4));
      }
    }
    else if (v18 >= 1)
    {
      v30 = 0;
      v31 = v17;
      do
      {
        result = (size_t)memcpy(v8, BaseAddress, v12);
        BaseAddress += v10;
        v8 += v31;
        ++v30;
      }
      while (v30 < *(_DWORD *)(*(_QWORD *)(v3 + 16) + 8 * v6 + 4));
    }
  }
  do
    v4 = __ldxr((unsigned int *)v3);
  while (__stxr(v4 + 1, (unsigned int *)v3));
  return result;
}

uint64_t CMPhotoFixedPatternNoiseEncoderAnalyzeAndCreateContext(__CVBuffer *a1, unsigned int a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  __int128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v6 = xmmword_1A8295400;
  v7 = 1065353216;
  v9 = 0;
  v8 = 0;
  v10 = 0xBD0108000020001;
  v13 = a3;
  return CMPhotoFixedPatternNoiseEncoderAnalyzeAndCreateContext2(a1, a2, 1, (uint64_t)&v6, a4, a5);
}

uint64_t CMPhotoFixedPatternNoiseEncoderAnalyzeAndCreateContext2(__CVBuffer *a1, unsigned int a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  unsigned __int16 Width;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _WORD *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int v22;
  __CVBuffer *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  __int16 BytesPerRow;
  unsigned __int16 v29;
  __int16 v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned __int16 Height;
  _QWORD *v34;

  v12 = malloc_type_calloc(1uLL, 0x5048uLL, 0x1030040F2A0CDD9uLL);
  if (!v12)
    return 4294950305;
  v13 = v12;
  v14 = 4294950306;
  if (a2 > 0xFF || !a1 || !a3 || !a4)
    goto LABEL_37;
  if (CVPixelBufferGetPixelFormatType(a1) != 1278226488)
  {
    v14 = 4294950301;
LABEL_37:
    free(v13);
    return v14;
  }
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  if (!(Height * Width) || *(_WORD *)(a4 + 36) != 1)
    goto LABEL_37;
  v29 = Width;
  v30 = a2;
  v31 = a6;
  v32 = a5;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v34 = v13;
  v19 = v13 + 10264;
  v20 = (unsigned __int16 *)(a4 + 36);
  v21 = v20;
  do
  {
    v22 = *v21;
    v21 += 32;
    if (v22)
    {
      if (!v20[2] || !v20[3] || !v20[1] || *((float *)v20 - 5) < *((float *)v20 - 6) || v20[4] && !*(_QWORD *)(v20 + 6))
        goto LABEL_33;
      v23 = *(__CVBuffer **)(v20 + 10);
      if (!v23)
        goto LABEL_33;
      if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v20 + 10)) != 1278226488)
      {
        v14 = 4294950301;
        goto LABEL_36;
      }
      if (CVPixelBufferGetWidth(v23) > 0xFF || CVPixelBufferGetHeight(v23) > 0xFF)
        goto LABEL_34;
      v18 += 32;
      v16 += 4 * v20[4];
      v24 = CVPixelBufferGetWidth(v23);
      v17 += CVPixelBufferGetHeight(v23) * v24;
    }
    v20 = v21;
    --a3;
  }
  while (a3);
  if (!v17)
  {
LABEL_33:
    v14 = 4294950306;
LABEL_36:
    v13 = v34;
    goto LABEL_37;
  }
  v25 = v17 + (unint64_t)v18;
  if (v25 + v16 + 92 > 0xFFFE)
  {
LABEL_34:
    v14 = 4294950190;
    goto LABEL_36;
  }
  v26 = CVPixelBufferLockBaseAddress(a1, 1uLL);
  if ((_DWORD)v26)
  {
    v14 = v26;
    goto LABEL_36;
  }
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  v34[2565] = CVPixelBufferGetBaseAddress(a1);
  *v19 = v30;
  v19[1] = BytesPerRow;
  v19[2] = v29;
  v19[3] = Height;
  SlimHrlcGetSize_C((uint64_t)v34);
  if (v31)
    *v31 = v25 + v16 + v34[2568] + 252;
  if (v32)
    *v32 = v34;
  else
    free(v34);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  return 0;
}

uint64_t CMPhotoFixedPatternNoiseEncoderRun(uint64_t a1, __CVBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _QWORD *a7)
{
  float32x2_t v12;
  int32x4_t v13;
  uint64_t v15;
  int v16;
  float32x2_t v17;
  int32x4_t v18;
  _BYTE v19[12];
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)&v19[4] = 0;
  v20 = 0;
  v15 = *(_QWORD *)(a4 + 20);
  v16 = *(_DWORD *)(a4 + 28);
  __asm { FMOV            V1.2S, #16.0 }
  v17 = vrnda_f32(vmul_f32(*(float32x2_t *)(a4 + 40), _D1));
  v12.i32[0] = *(_DWORD *)(a4 + 48);
  v12.i32[1] = *(_DWORD *)(a4 + 60);
  *(float32x2_t *)v13.i8 = vrnda_f32(vmul_f32(vadd_f32(*(float32x2_t *)(a4 + 52), v12), (float32x2_t)0x4100000041000000));
  v13.i64[1] = v13.i64[0];
  v18 = vrev64q_s32(v13);
  *(_QWORD *)v19 = 0xBD0108000020001;
  v21 = a3;
  return CMPhotoFixedPatternNoiseEncoderRun2(a1, a2, 1, (uint64_t)&v15, (_BYTE *)a4, a5, a6, a7);
}

uint64_t CMPhotoFixedPatternNoiseEncoderRun2(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, unint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  _WORD *v13;
  unsigned __int16 Width;
  unsigned __int16 Height;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  __CVBuffer *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  float v28;
  __int16 v29;
  float32x4_t v30;
  float v31;
  uint64_t v32;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  float v41;
  uint64_t v42;
  int16x4_t *v43;
  __CVBuffer *v44;
  __int8 v45;
  __int8 v46;
  float v47;
  __int16 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  const void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __CVBuffer *v59;
  size_t v60;
  size_t v61;
  size_t BytesPerRow;
  size_t v63;
  uint64_t v64;
  char *BaseAddress;
  char *v66;
  int v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v72;
  unsigned __int16 v73;
  unsigned __int16 v74;
  __CVBuffer *v75;
  _WORD *v76;
  _BYTE *v79;
  float32x4_t v80;
  uint64_t v83;

  v8 = 4294950306;
  if (a1 && pixelBuffer && a3 && a4 && a5 && a6)
  {
    if (*a5 == 6)
    {
      v13 = (_WORD *)(a1 + 20528);
      Width = CVPixelBufferGetWidth(pixelBuffer);
      Height = CVPixelBufferGetHeight(pixelBuffer);
      if (__PAIR64__((unsigned __int16)v13[3], (unsigned __int16)v13[2]) == __PAIR64__(Height, Width)
        && *(_WORD *)(a4 + 36) == 1)
      {
        v79 = a5;
        v73 = Height;
        v74 = Width;
        v75 = pixelBuffer;
        v76 = v13;
        v72 = a8;
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = (unsigned __int16 *)(a4 + 36);
        v21 = a3;
        v22 = (unsigned __int16 *)(a4 + 36);
        do
        {
          v23 = *v22;
          v22 += 32;
          if (v23)
          {
            if (!v20[2]
              || !v20[3]
              || !v20[1]
              || *((float *)v20 - 5) < *((float *)v20 - 6)
              || v20[4] && !*(_QWORD *)(v20 + 6))
            {
              return 4294950306;
            }
            v24 = *(__CVBuffer **)(v20 + 10);
            if (!v24)
              return 4294950306;
            if (CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(v20 + 10)) != 1278226488)
              return 4294950301;
            if (CVPixelBufferGetWidth(v24) > 0xFF || CVPixelBufferGetHeight(v24) > 0xFF)
              return 4294950190;
            ++v19;
            v18 += 32;
            v16 += 4 * v20[4];
            v25 = CVPixelBufferGetWidth(v24);
            v17 += CVPixelBufferGetHeight(v24) * v25;
          }
          v20 = v22;
          --v21;
        }
        while (v21);
        if (!v17)
          return 4294950306;
        v26 = v17 + (unint64_t)v18;
        if (v26 + v16 + 92 > 0xFFFE || v26 + v16 + *(_QWORD *)(a1 + 20544) + 252 > a7)
          return 4294950190;
        v27 = 0;
        *(_DWORD *)a6 = 1111904334;
        *(_WORD *)(a6 + 4) = *(_WORD *)v79;
        *(int16x4_t *)(a6 + 14) = vmovn_s32((int32x4_t)vcvtq_u32_f32(vrndaq_f32(vmulq_f32(*(float32x4_t *)(v79 + 4), (float32x4_t)vdupq_n_s32(0x47800000u)))));
        v28 = *((float *)v79 + 6);
        *(_WORD *)(a6 + 22) = llroundf(*((float *)v79 + 5) * 256.0);
        v29 = llroundf(*((float *)v79 + 7) * 256.0);
        *(_WORD *)(a6 + 24) = llroundf(v28 * 256.0);
        *(_WORD *)(a6 + 26) = v29;
        v30 = (float32x4_t)vdupq_n_s32(0x42800000u);
        *(int16x8_t *)(a6 + 28) = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(*((float32x4_t *)v79 + 3), v30))), (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(*((float32x4_t *)v79 + 4), v30))));
        *(int16x8_t *)(a6 + 44) = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(*((float32x4_t *)v79 + 5)), (int16x8_t)vcvtq_s32_f32(*((float32x4_t *)v79 + 6)));
        *(_QWORD *)(a6 + 60) = *((_QWORD *)v79 + 4);
        v31 = *((float *)v79 + 29);
        *(_WORD *)(a6 + 68) = llroundf(*((float *)v79 + 28) * 4.0);
        *(_WORD *)(a6 + 70) = llroundf(v31 * 4.0);
        *(_WORD *)(a6 + 72) = *((_WORD *)v79 + 60);
        v32 = *(_QWORD *)(v79 + 122);
        *(_WORD *)(a6 + 82) = *((_WORD *)v79 + 65);
        *(_QWORD *)(a6 + 74) = v32;
        *(_QWORD *)(a6 + 84) = *(_QWORD *)(v79 + 132);
        *(_WORD *)(a6 + 12) = v19;
        __asm { FMOV            V0.4S, #16.0 }
        v80 = _Q0;
        v38 = a4;
        v39 = a3;
        do
        {
          v40 = *(_WORD *)(v38 + 36);
          if (v40)
          {
            v41 = *(float *)(v38 + 4);
            v42 = v27 + 1;
            v43 = (int16x4_t *)(a6 + 32 * v27);
            v43[11].i16[2] = llroundf(*(float *)v38 * 256.0);
            v44 = *(__CVBuffer **)(v38 + 56);
            v43[11].i16[3] = llroundf(v41 * 256.0);
            v43[12].i16[0] = llroundf(*(float *)(v38 + 8) * 256.0);
            v43[12].i16[1] = v40;
            v43[12].i32[1] = *(_DWORD *)(v38 + 40);
            v43[13].i8[0] = *(_BYTE *)(v38 + 38);
            v43[13].i8[1] = CVPixelBufferGetWidth(v44);
            v45 = CVPixelBufferGetHeight(v44);
            v46 = *(_BYTE *)(v38 + 44);
            v43[13].i32[1] = 0;
            v43[14] = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vmulq_f32(*(float32x4_t *)(v38 + 12), v80))));
            v47 = *(float *)(v38 + 32);
            v48 = llroundf(*(float *)(v38 + 28) * 16.0);
            v43[13].i8[2] = v45;
            v43[13].i8[3] = v46;
            v43[15].i16[0] = v48;
            v43[15].i16[1] = llroundf(v47 * 16.0);
            v27 = v42;
          }
          v38 += 64;
          --v39;
        }
        while (v39);
        v49 = 0;
        v50 = (_QWORD *)(a6 + 92 + 32 * v19);
        v51 = a3;
        v52 = (const void **)(a4 + 48);
        do
        {
          if (*((_WORD *)v52 - 6))
          {
            v53 = v49 + 1;
            v54 = *((unsigned __int16 *)v52 - 2);
            if (*((_WORD *)v52 - 2))
            {
              *(_WORD *)(a6 + 32 * v49 + 108) = (_WORD)v50 - a6;
              memcpy(v50, *v52, 4 * v54);
              v50 = (_QWORD *)((char *)v50 + 4 * v54);
            }
          }
          else
          {
            v53 = v49;
          }
          v52 += 8;
          v49 = v53;
          --v51;
        }
        while (v51);
        v55 = 0;
        v56 = a4;
        do
        {
          v57 = v56 + (v55 << 6);
          if (*(_WORD *)(v57 + 36))
          {
            v58 = v51 + 1;
            v59 = *(__CVBuffer **)(v57 + 56);
            v60 = CVPixelBufferGetWidth(v59);
            v61 = CVPixelBufferGetHeight(v59);
            BytesPerRow = CVPixelBufferGetBytesPerRow(v59);
            if (v61 * v60)
            {
              v63 = BytesPerRow;
              *(_WORD *)(a6 + 32 * v51 + 110) = (_WORD)v50 - a6;
              v64 = CVPixelBufferLockBaseAddress(v59, 1uLL);
              if ((_DWORD)v64)
                return v64;
              BaseAddress = (char *)CVPixelBufferGetBaseAddress(v59);
              if (v61)
              {
                v66 = BaseAddress;
                do
                {
                  memcpy(v50, v66, v60);
                  v66 += v63;
                  v50 = (_QWORD *)((char *)v50 + v60);
                  --v61;
                }
                while (v61);
              }
              CVPixelBufferUnlockBaseAddress(v59, 1uLL);
            }
            v56 = a4;
          }
          else
          {
            v58 = v51;
          }
          ++v55;
          v51 = v58;
        }
        while (v55 != a3);
        *(_WORD *)(a6 + 6) = (_WORD)v50 - a6;
        *v50 = 196623;
        v67 = (unsigned __int16)v76[3];
        *((_DWORD *)v50 + 2) = (unsigned __int16)v76[2];
        *((_DWORD *)v50 + 3) = v67;
        v50[2] = 0x4C303038536C6D58;
        *((_WORD *)v50 + 12) = v74;
        *((_WORD *)v50 + 13) = v73;
        *((_WORD *)v50 + 14) = 0;
        *((_WORD *)v50 + 15) = *v76;
        v64 = CVPixelBufferLockBaseAddress(v75, 1uLL);
        if ((_DWORD)v64)
          return v64;
        v68 = CVPixelBufferGetBytesPerRow(v75);
        v69 = CVPixelBufferGetBaseAddress(v75);
        if (v68 == (unsigned __int16)v76[1] && *(void **)(a1 + 20520) == v69)
        {
          v83 = 0;
          v8 = SlimHrlcEncodeRun_C(a1, (_BYTE *)v50 + 32, a6 + a7 - (_QWORD)(v50 + 4), &v83);
          v70 = v83 - a6;
          *(_DWORD *)(a6 + 8) = v83 - a6 - *(unsigned __int16 *)(a6 + 6);
          if (v72)
            *v72 = v70;
        }
        else
        {
          v8 = 4294950306;
        }
        CVPixelBufferUnlockBaseAddress(v75, 1uLL);
      }
      else
      {
        return 4294950306;
      }
    }
    else
    {
      return 4294950302;
    }
  }
  return v8;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetFpnImageDimensions2(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)a1 != 1111904334)
    return 4294950194;
  v8 = 0;
  switch(*(_BYTE *)(a1 + 4))
  {
    case 1:
      if (*(_BYTE *)(a1 + 5) != 3)
        goto LABEL_6;
      result = CheckFileV1P3(a1, a2, &v8);
      if (!(_DWORD)result)
        goto LABEL_16;
      break;
    case 2:
      result = CheckFileV1P3(a1, a2, &v8);
      if (!(_DWORD)result)
        goto LABEL_16;
      break;
    case 3:
      result = CheckFileV3(a1, a2, &v8);
      if (!(_DWORD)result)
        goto LABEL_16;
      break;
    case 4:
      result = CheckFileV4(a1, a2, &v8);
      if (!(_DWORD)result)
        goto LABEL_16;
      break;
    case 5:
      result = CheckFileV5(a1, a2, &v8);
      if (!(_DWORD)result)
        goto LABEL_16;
      break;
    case 6:
      result = CheckFileV6(a1, a2, &v8);
      if (!(_DWORD)result)
      {
LABEL_16:
        v7 = v8;
        if (v8)
        {
          if (a3)
            *a3 = *(unsigned __int16 *)(v8 + 24);
          result = 0;
          if (a4)
            *a4 = *(unsigned __int16 *)(v7 + 26);
        }
        else
        {
          result = 4294950304;
        }
      }
      break;
    default:
LABEL_6:
      result = 4294950299;
      break;
  }
  return result;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  return CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2(a1, a2, 1, a3, a4);
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetShadingThumbDimensions2(uint64_t a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;

  if (*(_DWORD *)a1 != 1111904334)
    return 4294950194;
  switch(*(_BYTE *)(a1 + 4))
  {
    case 1:
      if (*(_BYTE *)(a1 + 5) != 3)
        goto LABEL_7;
      if (a3 != 1)
        goto LABEL_35;
      result = CheckFileV1P3(a1, a2, 0);
      if (!(_DWORD)result)
        goto LABEL_10;
      break;
    case 2:
      if (a3 != 1)
        goto LABEL_35;
      result = CheckFileV1P3(a1, a2, 0);
      if (!(_DWORD)result)
      {
LABEL_10:
        v10 = (unsigned __int8 *)(a1 + 48);
        v11 = (unsigned __int8 *)(a1 + 49);
        goto LABEL_20;
      }
      break;
    case 3:
      if (a3 != 1)
        goto LABEL_35;
      result = CheckFileV3(a1, a2, 0);
      if (!(_DWORD)result)
      {
        v10 = (unsigned __int8 *)(a1 + 56);
        v11 = (unsigned __int8 *)(a1 + 57);
        goto LABEL_20;
      }
      break;
    case 4:
      if (a3 != 1)
        goto LABEL_35;
      result = CheckFileV4(a1, a2, 0);
      if (!(_DWORD)result)
        goto LABEL_19;
      break;
    case 5:
      if (a3 != 1)
        goto LABEL_35;
      result = CheckFileV5(a1, a2, 0);
      if (!(_DWORD)result)
      {
LABEL_19:
        v10 = (unsigned __int8 *)(a1 + 58);
        v11 = (unsigned __int8 *)(a1 + 59);
LABEL_20:
        v12 = *v10;
        v13 = *v11;
        goto LABEL_21;
      }
      break;
    case 6:
      result = CheckFileV6(a1, a2, 0);
      if (!(_DWORD)result)
      {
        v14 = *(unsigned __int16 *)(a1 + 12);
        if (*(_WORD *)(a1 + 12))
        {
          v15 = (unsigned __int8 *)(a1 + 106);
          v12 = 0xFFFF;
          v13 = 0xFFFF;
          do
          {
            if (*((unsigned __int16 *)v15 - 4) == a3)
            {
              v12 = *(v15 - 1);
              v13 = *v15;
            }
            v15 += 32;
            --v14;
          }
          while (v14);
          result = 4294950303;
          if (v12 != 0xFFFF && v13 != 0xFFFF)
          {
LABEL_21:
            if (a4)
              *a4 = v12;
            result = 0;
            if (a5)
              *a5 = v13;
          }
        }
        else
        {
LABEL_35:
          result = 4294950303;
        }
      }
      break;
    default:
LABEL_7:
      result = 4294950299;
      break;
  }
  return result;
}

uint64_t CMPhotoFixedPatternNoiseDecoderRun(uint64_t a1, unint64_t a2, __CVBuffer *a3, uint64_t a4, uint64_t a5)
{
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0u;
  memset(v6, 0, sizeof(v6));
  WORD2(v7) = 1;
  v8 = 0;
  v9 = a4;
  return CMPhotoFixedPatternNoiseDecoderRun2(a1, a2, a3, 1, (uint64_t)v6, a5);
}

uint64_t CMPhotoFixedPatternNoiseDecoderRun2(uint64_t a1, unint64_t a2, __CVBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  float v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  __int16 v21;
  int32x2_t v22;
  int16x4_t v23;
  float v24;
  __int16 v25;
  int32x2_t v26;
  int32x2_t v27;
  float32x2_t v28;
  uint64_t v29;
  float v30;
  __int16 v31;
  uint64_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int16x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t *v44;
  __int16 *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int16x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  __CVBuffer *v52;
  __int128 *v53;
  size_t v54;
  uint64_t v55;
  __int16 *v56;
  size_t BytesPerRow;
  char *BaseAddress;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v68;
  float32x4_t v70;
  CVPixelBufferRef *v71;
  void **v72;
  _BYTE v73[46];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  if (*(_DWORD *)a1 != 1111904334)
    return 4294950194;
  v91 = 0;
  v92 = 0;
  switch(*(_BYTE *)(a1 + 4))
  {
    case 1:
      if (*(_BYTE *)(a1 + 5) != 3)
        return 4294950299;
      v8 = CheckFileV1P3(a1, a2, &v74);
      if (!(_DWORD)v8)
        goto LABEL_8;
      return v8;
    case 2:
      v8 = CheckFileV1P3(a1, a2, &v74);
      if ((_DWORD)v8)
        return v8;
LABEL_8:
      v11 = 0;
      v12 = *(_BYTE *)(a1 + 4);
      v13 = *(_BYTE *)(a1 + 5);
      *(_WORD *)v73 = *(_WORD *)(a1 + 12);
      *(_DWORD *)&v73[2] = *(_DWORD *)(a1 + 14);
      *(_WORD *)&v73[6] = 9896;
      *(_DWORD *)&v73[8] = *(_DWORD *)(a1 + 18);
      *(_WORD *)&v73[12] = *(_WORD *)(a1 + 22);
      *(_OWORD *)&v73[22] = *(_OWORD *)(a1 + 24);
      *(_QWORD *)&v73[38] = *(_QWORD *)(a1 + 40);
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      LODWORD(v75) = *(_DWORD *)&v73[8];
      v14 = *(float *)(a1 + 64);
      v15 = llroundf(*(float *)(a1 + 60) * 16.0);
      v16 = *(_QWORD *)(a1 + 52);
      v91 = 0;
      v92 = 0;
      WORD2(v75) = *(_WORD *)&v73[12];
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 48);
      HIBYTE(v75) = 0;
      LODWORD(v76) = 4456448;
      WORD2(v76) = v15;
      WORD3(v76) = llroundf(v14 * 16.0);
      v17 = 5;
      v18 = 8000;
      v19 = 1000;
      *((_QWORD *)&v76 + 1) = 0;
      goto LABEL_24;
    case 3:
      v8 = CheckFileV3(a1, a2, &v74);
      if ((_DWORD)v8)
        return v8;
      v11 = 0;
      v12 = *(_BYTE *)(a1 + 4);
      v13 = *(_BYTE *)(a1 + 5);
      *(_WORD *)v73 = *(_WORD *)(a1 + 12);
      *(_DWORD *)&v73[2] = *(_DWORD *)(a1 + 14);
      *(_WORD *)&v73[6] = 9896;
      *(_DWORD *)&v73[8] = *(_DWORD *)(a1 + 18);
      *(_OWORD *)&v73[12] = *(_OWORD *)(a1 + 22);
      *(_OWORD *)&v73[28] = *(_OWORD *)(a1 + 38);
      *(_WORD *)&v73[44] = *(_WORD *)(a1 + 54);
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v20 = *(float *)(a1 + 72);
      v21 = llroundf(*(float *)(a1 + 68) * 16.0);
      v16 = *(_QWORD *)(a1 + 60);
      v91 = 0;
      v92 = 0;
      LODWORD(v75) = *(_DWORD *)&v73[8];
      WORD2(v75) = *(_WORD *)&v73[12];
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 56);
      HIBYTE(v75) = 0;
      LODWORD(v76) = 4980736;
      WORD2(v76) = v21;
      WORD3(v76) = llroundf(v20 * 16.0);
      v22.i32[0] = *(unsigned __int16 *)&v73[18];
      v22.i32[1] = *(unsigned __int16 *)&v73[16];
      v9.i32[0] = *(unsigned __int16 *)&v73[20];
      v9.i32[1] = *(unsigned __int16 *)&v73[14];
      v23 = (int16x4_t)vcvt_s32_f32(vrnda_f32(vmul_f32(vcvt_f32_s32(vsra_n_s32(vshr_n_s32(vshl_n_s32(v22, 0x10uLL), 0x10uLL), vshl_n_s32(v9, 0x10uLL), 0x10uLL)), (float32x2_t)0x3E0000003E000000)));
      *((int16x4_t *)&v76 + 1) = vuzp1_s16(v23, v23);
      v17 = 5;
      v18 = 8000;
      v19 = 1000;
      goto LABEL_24;
    case 4:
      v8 = CheckFileV4(a1, a2, &v74);
      if ((_DWORD)v8)
        return v8;
      v11 = 0;
      v12 = *(_BYTE *)(a1 + 4);
      v13 = *(_BYTE *)(a1 + 5);
      *(_OWORD *)v73 = *(_OWORD *)(a1 + 12);
      *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 28);
      *(_QWORD *)&v73[32] = *(_QWORD *)(a1 + 44);
      *(_WORD *)&v73[40] = *(_WORD *)(a1 + 52);
      *(_DWORD *)&v73[42] = *(_DWORD *)(a1 + 54);
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v24 = *(float *)(a1 + 72);
      v25 = llroundf(*(float *)(a1 + 68) * 16.0);
      v16 = *(_QWORD *)(a1 + 60);
      v19 = *(unsigned __int16 *)(a1 + 76);
      LODWORD(v75) = *(_DWORD *)&v73[8];
      v18 = *(unsigned __int16 *)(a1 + 78);
      WORD2(v75) = *(_WORD *)&v73[12];
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 58);
      LODWORD(v76) = 5505024;
      v17 = *(_WORD *)(a1 + 80);
      v92 = 0;
      v91 = 0;
      WORD2(v76) = v25;
      WORD3(v76) = llroundf(v24 * 16.0);
      HIBYTE(v75) = 0;
      v26.i32[0] = *(unsigned __int16 *)&v73[18];
      v26.i32[1] = *(unsigned __int16 *)&v73[16];
      v9 = vshl_n_s32(v26, 0x10uLL);
      v27.i32[0] = *(unsigned __int16 *)&v73[20];
      v27.i32[1] = *(unsigned __int16 *)&v73[14];
      v28 = vcvt_f32_s32(vsra_n_s32(vshr_n_s32(v9, 0x10uLL), vshl_n_s32(v27, 0x10uLL), 0x10uLL));
      goto LABEL_15;
    case 5:
      v8 = CheckFileV5(a1, a2, &v74);
      if ((_DWORD)v8)
        return v8;
      v12 = *(_BYTE *)(a1 + 4);
      v13 = *(_BYTE *)(a1 + 5);
      *(_OWORD *)v73 = *(_OWORD *)(a1 + 12);
      v29 = *(_QWORD *)(a1 + 20);
      *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 28);
      *(_QWORD *)&v73[32] = *(_QWORD *)(a1 + 44);
      *(_WORD *)&v73[40] = *(_WORD *)(a1 + 52);
      *(_DWORD *)&v73[42] = *(_DWORD *)(a1 + 54);
      v30 = *(float *)(a1 + 72);
      v31 = llroundf(*(float *)(a1 + 68) * 16.0);
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      v16 = *(_QWORD *)(a1 + 60);
      v19 = *(unsigned __int16 *)(a1 + 76);
      v18 = *(unsigned __int16 *)(a1 + 78);
      v17 = *(_WORD *)(a1 + 80);
      v32 = *(_QWORD *)(a1 + 82);
      v92 = *(_WORD *)(a1 + 90);
      v91 = v32;
      LODWORD(v75) = v29;
      WORD2(v75) = WORD2(v29);
      v11 = *(_QWORD *)(a1 + 92);
      *(_DWORD *)((char *)&v75 + 6) = 276824065;
      WORD5(v75) = 3024;
      BYTE12(v75) = 2;
      *(_WORD *)((char *)&v75 + 13) = *(_WORD *)(a1 + 58);
      HIBYTE(v75) = 0;
      LODWORD(v76) = 6553600;
      WORD2(v76) = v31;
      WORD3(v76) = llroundf(v30 * 16.0);
      v33.i32[0] = *(unsigned __int16 *)&v73[18];
      v33.i32[1] = *(unsigned __int16 *)&v73[16];
      v34.i32[0] = *(unsigned __int16 *)&v73[20];
      v34.i32[1] = HIWORD(v29);
      v9 = vsra_n_s32(vshr_n_s32(vshl_n_s32(v33, 0x10uLL), 0x10uLL), vshl_n_s32(v34, 0x10uLL), 0x10uLL);
      v28 = vcvt_f32_s32(v9);
LABEL_15:
      v35 = (int16x4_t)vcvt_s32_f32(vrnda_f32(vmul_f32(v28, (float32x2_t)0x3E0000003E000000)));
      *((int16x4_t *)&v76 + 1) = vuzp1_s16(v35, v35);
      goto LABEL_24;
    case 6:
      v8 = CheckFileV6(a1, a2, &v74);
      if ((_DWORD)v8)
        return v8;
      v12 = *(_BYTE *)(a1 + 4);
      v13 = *(_BYTE *)(a1 + 5);
      *(_OWORD *)v73 = *(_OWORD *)(a1 + 14);
      *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 30);
      *(_QWORD *)&v73[32] = *(_QWORD *)(a1 + 46);
      *(_WORD *)&v73[40] = *(_WORD *)(a1 + 54);
      *(_DWORD *)&v73[42] = *(_DWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 60);
      v19 = *(unsigned __int16 *)(a1 + 68);
      v18 = *(unsigned __int16 *)(a1 + 70);
      v17 = *(_WORD *)(a1 + 72);
      v36 = *(_QWORD *)(a1 + 74);
      v92 = *(_WORD *)(a1 + 82);
      v91 = v36;
      v11 = *(_QWORD *)(a1 + 84);
      if (*(unsigned __int16 *)(a1 + 12) >= 8u)
        v37 = 8;
      else
        v37 = *(unsigned __int16 *)(a1 + 12);
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      v83 = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0u;
      v87 = 0u;
      v88 = 0u;
      v89 = 0u;
      v90 = 0u;
      if (!(_DWORD)v37)
        return 4294950194;
      v38 = 0;
      v39 = 32 * v37;
      do
      {
        v40 = (char *)&v75 + v38;
        *(_QWORD *)v40 = *(_QWORD *)(a1 + v38 + 92);
        *((_DWORD *)v40 + 2) = *(_DWORD *)(a1 + v38 + 100);
        *((_DWORD *)v40 + 3) = *(_DWORD *)(a1 + v38 + 104);
        *((_OWORD *)v40 + 1) = *(_OWORD *)(a1 + v38 + 108);
        v38 += 32;
      }
      while (v39 != v38);
      if (WORD3(v75) != 1)
        return 4294950194;
LABEL_24:
      *(_BYTE *)a6 = v12;
      *(_BYTE *)(a6 + 1) = v13;
      v41 = vmulq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v73)), (float32x4_t)vdupq_n_s32(0x37800000u));
      *(float32x4_t *)(a6 + 4) = v41;
      v41.i16[0] = *(_WORD *)&v73[8];
      v41.f32[0] = (float)v41.u32[0] * 0.0039062;
      v9.i16[0] = *(_WORD *)&v73[10];
      *(_DWORD *)(a6 + 20) = v41.i32[0];
      *(float *)(a6 + 24) = (float)v9.u32[0] * 0.0039062;
      v41.i16[0] = *(_WORD *)&v73[12];
      *(float *)(a6 + 28) = (float)v41.u32[0] * 0.0039062;
      v41.f32[0] = (float)SWORD5(v76) * 0.0625;
      *(_DWORD *)(a6 + 48) = v41.i32[0];
      *(_DWORD *)(a6 + 52) = v41.i32[0];
      v41.i64[0] = *((_QWORD *)&v76 + 1);
      v41.i16[1] = *(_WORD *)&v73[22];
      v42 = vmulq_f32(vcvtq_f32_s32(vmovl_s16((int16x4_t)vzip1_s32(*(int32x2_t *)v41.f32, *(int32x2_t *)&v73[24]))), (float32x4_t)xmmword_1A8295410);
      *(_DWORD *)(a6 + 56) = v42.i32[0];
      *(float32x4_t *)(a6 + 60) = v42;
      *(float *)(a6 + 76) = (float)*(__int16 *)&v73[28] * 0.015625;
      *(float32x4_t *)(a6 + 80) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&v73[30]));
      *(float32x4_t *)(a6 + 96) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)&v73[38]));
      *(_QWORD *)(a6 + 32) = v16;
      v42.f32[0] = (float)SWORD3(v76) * 0.0625;
      *(float *)(a6 + 40) = (float)SWORD2(v76) * 0.0625;
      *(_DWORD *)(a6 + 44) = v42.i32[0];
      *(float *)(a6 + 112) = (float)v19 * 0.25;
      *(float *)(a6 + 116) = (float)v18 * 0.25;
      *(_WORD *)(a6 + 120) = v17;
      *(_QWORD *)(a6 + 122) = v91;
      *(_WORD *)(a6 + 130) = v92;
      *(_QWORD *)(a6 + 132) = v11;
      if (!a4)
        goto LABEL_42;
      v43 = 0;
      v70 = (float32x4_t)vdupq_n_s32(0x3D800000u);
      break;
    default:
      return 4294950299;
  }
  while (2)
  {
    v44 = (float32x4_t *)(a5 + (v43 << 6));
    v45 = &v44[2].i16[2];
    v46 = v44[2].u16[2];
    if (v44[2].i16[2])
    {
      v68 = v43;
      v47 = 0;
      *v45 = 0;
      v71 = (CVPixelBufferRef *)&v44[3].i64[1];
      v72 = (void **)&v44[3];
      do
      {
        v48 = (unint64_t)(&v75 + 2 * v47);
        if (*(unsigned __int16 *)(v48 + 6) == v46)
        {
          v49.i16[0] = *(_WORD *)v48;
          v49.i16[1] = *(_WORD *)(v48 | 2);
          v49.i16[2] = *(_WORD *)(v48 | 4);
          v49.i16[3] = *(_WORD *)(v48 + 20);
          v50 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)v49));
          v50.i32[3] = vcvtq_f32_s32(vmovl_s16(v49)).i32[3];
          *v44 = vmulq_f32(v50, (float32x4_t)xmmword_1A8295420);
          v44[1] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)(v48 + 22))), v70);
          v44[2].f32[0] = (float)*(__int16 *)(v48 + 30) * 0.0625;
          *v45 = v46;
          v44[2].i16[3] = *(unsigned __int8 *)(v48 + 12);
          v44[2].i16[4] = *(_WORD *)(v48 + 8);
          v44[2].i16[5] = *(_WORD *)(v48 + 10);
          v51 = *(unsigned __int8 *)(v48 + 15);
          v44[2].i16[6] = v51;
          if (*v72 && *((_WORD *)&v75 + 16 * v47 + 8))
            memcpy(*v72, (const void *)(a1 + *((unsigned __int16 *)&v75 + 16 * v47 + 8)), 4 * v51);
          v52 = *v71;
          if (*v71)
          {
            v53 = &v75 + 2 * v47;
            v54 = *((unsigned __int8 *)v53 + 13);
            v55 = *((unsigned __int8 *)v53 + 14);
            if (CVPixelBufferGetWidth(*v71) != v54 || CVPixelBufferGetHeight(v52) != v55)
              return 4294950306;
            v8 = CVPixelBufferLockBaseAddress(v52, 1uLL);
            if ((_DWORD)v8)
              return v8;
            v56 = v45;
            BytesPerRow = CVPixelBufferGetBytesPerRow(v52);
            BaseAddress = (char *)CVPixelBufferGetBaseAddress(v52);
            if ((_DWORD)v55)
            {
              v59 = BaseAddress;
              v60 = (char *)(a1 + *((unsigned __int16 *)&v76 + 16 * v47 + 1));
              do
              {
                memcpy(v59, v60, v54);
                v59 += BytesPerRow;
                v60 += v54;
                LODWORD(v55) = v55 - 1;
              }
              while ((_DWORD)v55);
            }
            CVPixelBufferUnlockBaseAddress(v52, 1uLL);
            v45 = v56;
          }
        }
        ++v47;
      }
      while (v47 != 8);
      v43 = v68 + 1;
      if (v68 + 1 != a4)
        continue;
LABEL_42:
      if (*(_DWORD *)v74 == 196623 && *(_DWORD *)(v74 + 16) == 1399614808 && *(_DWORD *)(v74 + 20) == 1278226488)
      {
        v61 = *(unsigned __int16 *)(v74 + 24);
        if (*(_DWORD *)(v74 + 8) == (_DWORD)v61)
        {
          v62 = *(unsigned __int16 *)(v74 + 26);
          if (*(_DWORD *)(v74 + 12) == (_DWORD)v62)
          {
            v63 = *(unsigned __int16 *)(v74 + 30);
            if (CVPixelBufferGetWidth(a3) == v61 && CVPixelBufferGetHeight(a3) == v62)
            {
              v8 = CVPixelBufferLockBaseAddress(a3, 1uLL);
              if (!(_DWORD)v8)
              {
                CVPixelBufferGetBytesPerRow(a3);
                CVPixelBufferGetBaseAddress(a3);
                v10 = SlimHrlcDecodeRun_C(v63);
                CVPixelBufferUnlockBaseAddress(a3, 1uLL);
                return v10;
              }
              return v8;
            }
            return 4294950306;
          }
        }
      }
      return 4294950194;
    }
    break;
  }
  return 4294950306;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetShadingThumbTypes2(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4, _DWORD *a5)
{
  uint64_t result;
  _DWORD *v8;
  unint64_t v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int v13;

  result = 4294950306;
  if (a3)
  {
    if (a4)
    {
      v8 = a5;
      if (a5)
      {
        if (*(_DWORD *)a1 == 1111904334)
        {
          switch(*(_BYTE *)(a1 + 4))
          {
            case 1:
              if (*(_BYTE *)(a1 + 5) != 3)
                goto LABEL_9;
              result = CheckFileV1P3(a1, a2, 0);
              if (!(_DWORD)result)
                goto LABEL_17;
              break;
            case 2:
              result = CheckFileV1P3(a1, a2, 0);
              if (!(_DWORD)result)
                goto LABEL_17;
              break;
            case 3:
              result = CheckFileV3(a1, a2, 0);
              if (!(_DWORD)result)
                goto LABEL_17;
              break;
            case 4:
              result = CheckFileV4(a1, a2, 0);
              if (!(_DWORD)result)
                goto LABEL_17;
              break;
            case 5:
              result = CheckFileV5(a1, a2, 0);
              if (!(_DWORD)result)
              {
LABEL_17:
                *a4 = 1;
                bzero(v8, 4 * a3);
                result = 0;
                *v8 = 1;
              }
              break;
            case 6:
              result = CheckFileV6(a1, a2, 0);
              if (!(_DWORD)result)
              {
                bzero(v8, 4 * a3);
                v10 = *(unsigned __int16 *)(a1 + 12);
                if (v10 >= a3)
                  v10 = a3;
                if (v10)
                {
                  v11 = (unsigned __int16 *)(a1 + 98);
                  v12 = v10;
                  do
                  {
                    v13 = *v11;
                    v11 += 16;
                    *v8++ = v13;
                    --v12;
                  }
                  while (v12);
                }
                result = 0;
                *a4 = v10;
              }
              break;
            default:
LABEL_9:
              result = 4294950299;
              break;
          }
        }
        else
        {
          return 4294950194;
        }
      }
    }
  }
  return result;
}

uint64_t CheckFileV1P3(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 49) * (unint64_t)*(unsigned __int8 *)(a1 + 48);
  v4 = v3 + 68;
  v5 = v3 + 100;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2)
    return 4294950194;
  v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  result = 0;
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t CheckFileV3(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 57) * (unint64_t)*(unsigned __int8 *)(a1 + 56);
  v4 = v3 + 76;
  v5 = v3 + 108;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2)
    return 4294950194;
  v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  result = 0;
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t CheckFileV4(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 59) * (unint64_t)*(unsigned __int8 *)(a1 + 58);
  v4 = v3 + 84;
  v5 = v3 + 116;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2)
    return 4294950194;
  v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  result = 0;
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t CheckFileV5(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 59) * (unint64_t)*(unsigned __int8 *)(a1 + 58);
  v4 = v3 + 100;
  v5 = v3 + 132;
  if (*(unsigned __int16 *)(a1 + 6) != (unsigned __int16)v4 || v5 >= a2)
    return 4294950194;
  v7 = a1 + v4;
  if (*(_DWORD *)v7 != 196623
    || *(_DWORD *)(v7 + 16) != 1399614808
    || *(_DWORD *)(v7 + 20) != 1278226488
    || *(_DWORD *)(v7 + 8) != *(unsigned __int16 *)(v7 + 24)
    || *(_DWORD *)(v7 + 12) != *(unsigned __int16 *)(v7 + 26))
  {
    return 4294950194;
  }
  result = 0;
  if (a3)
    *a3 = v7;
  return result;
}

uint64_t CheckFileV6(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v3 = *(unsigned __int16 *)(a1 + 12);
  v4 = a1 + 32 * v3 + 92;
  if (*(_WORD *)(a1 + 12))
  {
    v5 = (unsigned __int8 *)(a1 + 107);
    do
    {
      v4 += 4 * *v5 + *(v5 - 1) * (unint64_t)*(v5 - 2);
      v5 += 32;
      --v3;
    }
    while (v3);
  }
  v6 = 4294950194;
  if (v4 - a1 + 32 < a2 && *(unsigned __int16 *)(a1 + 6) == (unsigned __int16)(v4 - a1))
  {
    if (*(_DWORD *)v4 == 196623
      && *(_DWORD *)(v4 + 16) == 1399614808
      && *(_DWORD *)(v4 + 20) == 1278226488
      && *(_DWORD *)(v4 + 8) == *(unsigned __int16 *)(v4 + 24)
      && *(_DWORD *)(v4 + 12) == *(unsigned __int16 *)(v4 + 26))
    {
      v6 = 0;
      if (a3)
        *a3 = v4;
    }
    else
    {
      return 4294950194;
    }
  }
  return v6;
}

uint64_t CMPhotoFixedPatternNoiseDecoderGetNCorrectionPairs2(uint64_t a1, unint64_t a2, int a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;

  if (*(_DWORD *)a1 != 1111904334)
    return 4294950194;
  switch(*(_BYTE *)(a1 + 4))
  {
    case 1:
      if (*(_BYTE *)(a1 + 5) != 3)
        goto LABEL_7;
      if (a3 != 1)
        goto LABEL_30;
      result = CheckFileV1P3(a1, a2, 0);
      if (!(_DWORD)result)
        goto LABEL_19;
      break;
    case 2:
      if (a3 != 1)
        goto LABEL_30;
      result = CheckFileV1P3(a1, a2, 0);
      if (!(_DWORD)result)
        goto LABEL_19;
      break;
    case 3:
      if (a3 != 1)
        goto LABEL_30;
      result = CheckFileV3(a1, a2, 0);
      if (!(_DWORD)result)
        goto LABEL_19;
      break;
    case 4:
      if (a3 != 1)
        goto LABEL_30;
      result = CheckFileV4(a1, a2, 0);
      if (!(_DWORD)result)
        goto LABEL_19;
      break;
    case 5:
      if (a3 != 1)
        goto LABEL_30;
      result = CheckFileV5(a1, a2, 0);
      if (!(_DWORD)result)
      {
LABEL_19:
        v8 = 0;
        goto LABEL_20;
      }
      break;
    case 6:
      result = CheckFileV6(a1, a2, 0);
      if (!(_DWORD)result)
      {
        v9 = *(unsigned __int16 *)(a1 + 12);
        if (!*(_WORD *)(a1 + 12))
          goto LABEL_30;
        v10 = (unsigned __int16 *)(a1 + 98);
        v8 = 0xFFFF;
        v11 = (unsigned __int16 *)(a1 + 98);
        do
        {
          v12 = *v11;
          v11 += 16;
          if (v12 == a3)
            v8 = *((unsigned __int8 *)v10 + 9);
          v10 = v11;
          --v9;
        }
        while (v9);
        if (v8 != 0xFFFF)
        {
LABEL_20:
          result = 0;
          if (a4)
            *a4 = v8;
        }
        else
        {
LABEL_30:
          result = 4294950303;
        }
      }
      break;
    default:
LABEL_7:
      result = 4294950299;
      break;
  }
  return result;
}

BOOL cmpweak_exists_kVTPixelTransferPropertyKey_UseOptimalMSRCoefficients()
{
  return MEMORY[0x1E0CED858] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayItemCount()
{
  if (MEMORY[0x1E0CC4A50])
    return (const __CFString *)*MEMORY[0x1E0CC4A50];
  else
    return CFSTR("OverlayItemCount");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemCount()
{
  return MEMORY[0x1E0CC4A50] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayCanvasFillValues()
{
  if (MEMORY[0x1E0CC4A48])
    return (const __CFString *)*MEMORY[0x1E0CC4A48];
  else
    return CFSTR("OverlayCanvasFillValues");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayCanvasFillValues()
{
  return MEMORY[0x1E0CC4A48] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayItemIndex()
{
  if (MEMORY[0x1E0CC4A58])
    return (const __CFString *)*MEMORY[0x1E0CC4A58];
  else
    return CFSTR("OverlayItemIndex");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemIndex()
{
  return MEMORY[0x1E0CC4A58] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_OverlayItemOffset()
{
  if (MEMORY[0x1E0CC4A60])
    return (const __CFString *)*MEMORY[0x1E0CC4A60];
  else
    return CFSTR("OverlayItemOffset");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemOffset()
{
  return MEMORY[0x1E0CC4A60] != 0;
}

const __CFString *cmpweak_kFigPictureCollection_Group_LowestMemberIDKey()
{
  if (MEMORY[0x1E0CC4AF8])
    return (const __CFString *)*MEMORY[0x1E0CC4AF8];
  else
    return CFSTR("LowestMemberID");
}

BOOL cmpweak_exists_kFigPictureCollection_Group_LowestMemberIDKey()
{
  return MEMORY[0x1E0CC4AF8] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionProperty_SourceSpecifiesOrientation()
{
  if (MEMORY[0x1E0CC4A00])
    return (const __CFString *)*MEMORY[0x1E0CC4A00];
  else
    return CFSTR("SourceSpecifiesOrientation");
}

BOOL cmpweak_exists_kFigPictureCollectionProperty_SourceSpecifiesOrientation()
{
  return MEMORY[0x1E0CC4A00] != 0;
}

const __CFString *cmpweak_kFigCameraExtrinsics_WriteAllFields()
{
  if (MEMORY[0x1E0CC3F40])
    return (const __CFString *)*MEMORY[0x1E0CC3F40];
  else
    return CFSTR("WriteAllFields");
}

BOOL cmpweak_exists_kFigCameraExtrinsics_WriteAllFields()
{
  return MEMORY[0x1E0CC3F40] != 0;
}

const __CFString *cmpweak_kFigEditCursorProperty_RepeatsEdits()
{
  if (MEMORY[0x1E0CC4040])
    return (const __CFString *)*MEMORY[0x1E0CC4040];
  else
    return CFSTR("RepeatEdits");
}

BOOL cmpweak_exists_kFigEditCursorProperty_RepeatsEdits()
{
  return MEMORY[0x1E0CC4040] != 0;
}

const __CFString *cmpweak_kFigTrackProperty_EditedDuration()
{
  if (MEMORY[0x1E0CC6148])
    return (const __CFString *)*MEMORY[0x1E0CC6148];
  else
    return CFSTR("TrackDuration");
}

BOOL cmpweak_exists_kFigTrackProperty_EditedDuration()
{
  return MEMORY[0x1E0CC6148] != 0;
}

const __CFString *cmpweak_kFigTrackProperty_HasEditListBox()
{
  if (MEMORY[0x1E0CC61A8])
    return (const __CFString *)*MEMORY[0x1E0CC61A8];
  else
    return CFSTR("HasEditListBox");
}

BOOL cmpweak_exists_kFigTrackProperty_HasEditListBox()
{
  return MEMORY[0x1E0CC61A8] != 0;
}

const __CFString *cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor()
{
  if (MEMORY[0x1E0CC4BE0])
    return (const __CFString *)*MEMORY[0x1E0CC4BE0];
  else
    return CFSTR("TonemapBaseColorIsWorkingColor");
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapBaseColorIsWorkingColor()
{
  return MEMORY[0x1E0CC4BE0] != 0;
}

const __CFString *cmpweak_kFigPictureProperty_TonemapBaseHDRHeadroom()
{
  if (MEMORY[0x1E0CC4BE8])
    return (const __CFString *)*MEMORY[0x1E0CC4BE8];
  else
    return CFSTR("TonemapBaseHDRHeadroom");
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapBaseHDRHeadroom()
{
  return MEMORY[0x1E0CC4BE8] != 0;
}

const __CFString *cmpweak_kFigPictureProperty_TonemapAlternateHDRHeadroom()
{
  if (MEMORY[0x1E0CC4BD8])
    return (const __CFString *)*MEMORY[0x1E0CC4BD8];
  else
    return CFSTR("TonemapAlternateHDRHeadroom");
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapAlternateHDRHeadroom()
{
  return MEMORY[0x1E0CC4BD8] != 0;
}

const __CFString *cmpweak_kFigPictureProperty_TonemapChannelMetadata()
{
  if (MEMORY[0x1E0CC4BF0])
    return (const __CFString *)*MEMORY[0x1E0CC4BF0];
  else
    return CFSTR("TonemapChannelMetadata");
}

BOOL cmpweak_exists_kFigPictureProperty_TonemapChannelMetadata()
{
  return MEMORY[0x1E0CC4BF0] != 0;
}

const __CFString *cmpweak_kFigTonemapChannel_BaseOffset()
{
  if (MEMORY[0x1E0CC60F0])
    return (const __CFString *)*MEMORY[0x1E0CC60F0];
  else
    return CFSTR("BaseOffset");
}

BOOL cmpweak_exists_kFigTonemapChannel_BaseOffset()
{
  return MEMORY[0x1E0CC60F0] != 0;
}

const __CFString *cmpweak_kFigTonemapChannel_AlternateOffset()
{
  if (MEMORY[0x1E0CC60E8])
    return (const __CFString *)*MEMORY[0x1E0CC60E8];
  else
    return CFSTR("AlternateOffset");
}

BOOL cmpweak_exists_kFigTonemapChannel_AlternateOffset()
{
  return MEMORY[0x1E0CC60E8] != 0;
}

const __CFString *cmpweak_kFigTonemapChannel_Gamma()
{
  if (MEMORY[0x1E0CC6108])
    return (const __CFString *)*MEMORY[0x1E0CC6108];
  else
    return CFSTR("Gamma");
}

BOOL cmpweak_exists_kFigTonemapChannel_Gamma()
{
  return MEMORY[0x1E0CC6108] != 0;
}

const __CFString *cmpweak_kFigTonemapChannel_GainMapMin()
{
  if (MEMORY[0x1E0CC6100])
    return (const __CFString *)*MEMORY[0x1E0CC6100];
  else
    return CFSTR("GainMapMin");
}

BOOL cmpweak_exists_kFigTonemapChannel_GainMapMin()
{
  return MEMORY[0x1E0CC6100] != 0;
}

const __CFString *cmpweak_kFigTonemapChannel_GainMapMax()
{
  if (MEMORY[0x1E0CC60F8])
    return (const __CFString *)*MEMORY[0x1E0CC60F8];
  else
    return CFSTR("GainMapMax");
}

BOOL cmpweak_exists_kFigTonemapChannel_GainMapMax()
{
  return MEMORY[0x1E0CC60F8] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_TonemapInputItemIDs()
{
  if (MEMORY[0x1E0CC4A90])
    return (const __CFString *)*MEMORY[0x1E0CC4A90];
  else
    return CFSTR("TonemapInputItemIDs");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_TonemapInputItemIDs()
{
  return MEMORY[0x1E0CC4A90] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_TonemapMetadata()
{
  if (MEMORY[0x1E0CC4A98])
    return (const __CFString *)*MEMORY[0x1E0CC4A98];
  else
    return CFSTR("TonemapMetadata");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_TonemapMetadata()
{
  return MEMORY[0x1E0CC4A98] != 0;
}

const __CFString *cmpweak_kFigPictureCollectionWriterOption_IdentityInputItemID()
{
  if (MEMORY[0x1E0CC4A38])
    return (const __CFString *)*MEMORY[0x1E0CC4A38];
  else
    return CFSTR("IdentityInputItemID");
}

BOOL cmpweak_exists_kFigPictureCollectionWriterOption_IdentityInputItemID()
{
  return MEMORY[0x1E0CC4A38] != 0;
}

uint64_t SlimVideoDecoder_CreateSession(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 4294951896;
  pthread_once(&SlimVideoDecoderSessionGetTypeID_onceToken, (void (*)(void))RegisterSlimVideoDecoderSessionClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294951894;
  v4 = Instance;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t SlimVideoDecoder_StartSessionInternal(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  return _startDecoderSession(a1 + 16, 0, a2);
}

uint64_t _startDecoderSession(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  int *v5;
  uint64_t VersionFromFormatDescription;
  CMVideoDimensions Dimensions;
  int v8;
  unsigned int v9;
  char v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  const void *v21;
  const void *v22;
  CFTypeRef v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int valuePtr;

  v29 = 0;
  v30 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 6;
  v5 = (int *)(a1 + 60);
  FigFormatDescriptionRelease();
  *(_QWORD *)(a1 + 8) = FigFormatDescriptionRetain();
  VersionFromFormatDescription = _getVersionFromFormatDescription(a3, &v30);
  if ((_DWORD)VersionFromFormatDescription)
    return VersionFromFormatDescription;
  Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 8));
  VersionFromFormatDescription = Slim_GetPixelBufferInfoFromVersion(v30, v5, (int *)&v30 + 1, (int *)&v29 + 1, (char *)(a1 + 56), (int *)&v29);
  if ((_DWORD)VersionFromFormatDescription)
    return VersionFromFormatDescription;
  v8 = HIDWORD(v30);
  *(_DWORD *)(a1 + 64) = HIDWORD(v30);
  v9 = *(_DWORD *)(a1 + 60);
  v10 = v29;
  valuePtr = v8;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_68;
  v12 = Mutable;
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  if (!v13)
  {
    CFRelease(v12);
LABEL_68:
    v21 = 0;
    goto LABEL_49;
  }
  v14 = v13;
  CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E0CA9040], v13);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (v9 > 5)
    goto LABEL_48;
  if (((1 << v9) & 0x26) == 0)
  {
    if (((1 << v9) & 0x18) == 0)
      goto LABEL_48;
    goto LABEL_47;
  }
  v15 = (Dimensions.width + 15) & 0xFFFFFFF0;
  v16 = (Dimensions.height + 3) & 0xFFFFFFFC;
  if (valuePtr > 1651925815)
  {
    if (valuePtr > 1735549491)
    {
      if (valuePtr <= 1815491697)
      {
        if (valuePtr != 1735549492 && valuePtr != 1735549752)
        {
          v17 = 1815162994;
          goto LABEL_33;
        }
        goto LABEL_43;
      }
      if (valuePtr != 1919379252 && valuePtr != 1919378232)
      {
        v17 = 1815491698;
        goto LABEL_33;
      }
LABEL_43:
      v15 = (Dimensions.width + 7) & 0xFFFFFFF8;
      v16 = (Dimensions.height + 7) & 0xFFFFFFF8;
      goto LABEL_44;
    }
    if (valuePtr > 1652056887)
    {
      if (valuePtr != 1652056888)
      {
        if (valuePtr == 1734501176)
          goto LABEL_43;
        v19 = 1734505012;
LABEL_42:
        if (valuePtr != v19)
          goto LABEL_44;
        goto LABEL_43;
      }
      goto LABEL_38;
    }
    if (valuePtr == 1651925816)
      goto LABEL_38;
    v18 = 1651926376;
LABEL_37:
    if (valuePtr != v18)
      goto LABEL_44;
    goto LABEL_38;
  }
  if (valuePtr <= 1650942775)
  {
    if (valuePtr <= 1647392368)
    {
      if (valuePtr != 1111970369)
      {
        v17 = 1380411457;
LABEL_33:
        if (valuePtr != v17)
          goto LABEL_44;
      }
    }
    else
    {
      if (valuePtr == 1647392369)
        goto LABEL_38;
      if (valuePtr != 1647589490)
      {
        v18 = 1647719528;
        goto LABEL_37;
      }
    }
    v15 = (Dimensions.width + 3) & 0xFFFFFFFC;
    goto LABEL_44;
  }
  if (valuePtr <= 1650946097)
  {
    if (valuePtr == 1650942776)
      goto LABEL_43;
    v19 = 1650943796;
    goto LABEL_42;
  }
  if (valuePtr != 1650946098 && valuePtr != 1651519798)
  {
    v18 = 1651847472;
    goto LABEL_37;
  }
LABEL_38:
  if ((v10 & 1) == 0)
    goto LABEL_43;
LABEL_44:
  CMPhotoGetBytesPerPixelForPixelFormat(valuePtr);
  FigCFDictionarySetInt32();
  if (v15 != Dimensions.width)
    FigCFDictionarySetInt32();
  if (v16 != Dimensions.height)
LABEL_47:
    FigCFDictionarySetInt32();
LABEL_48:
  v31 = 0;
  PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  v21 = v31;
  CFRelease(v12);
  CFRelease(v14);
  if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    return PixelBufferAttributesWithIOSurfaceSupport;
LABEL_49:
  if (*(_QWORD *)a1)
  {
    VTDecoderSessionSetPixelBufferAttributes();
  }
  else
  {
    v22 = *(const void **)(a1 + 72);
    if (v22)
      CFRelease(v22);
    if (v21)
      v23 = CFRetain(v21);
    else
      v23 = 0;
    *(_QWORD *)(a1 + 72) = v23;
  }
  v24 = malloc_type_calloc(1uLL, 0x20B0uLL, 0x1030040868D5BD5uLL);
  *(_QWORD *)(a1 + 48) = v24;
  if (!v24)
    goto LABEL_61;
  *(CMVideoDimensions *)v24 = Dimensions;
  v24[8] = 0;
  v24[2090] = HIDWORD(v29);
  v24[2091] = v29;
  *((_QWORD *)v24 + 7) = 0;
  if (*(_BYTE *)(a1 + 56))
  {
    CreateTreeLeaves((_QWORD *)v24 + 19, 1024);
    v25 = malloc_type_malloc(0x20uLL, 0x102004084B5A0ACuLL);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8344) = v25;
    if (!v25)
      _startDecoderSession_cold_1();
    v25[3] = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8344) + 16) = 0;
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_QWORD *)(v26 + 8344);
    *(_QWORD *)(v27 + 8) = 0;
    *(_WORD *)v27 = 0;
    if (CreateHuffTree((uint64_t)&bgg4, 1024, v26 + 152, v27))
    {
LABEL_61:
      PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
      if (!v21)
        return PixelBufferAttributesWithIOSurfaceSupport;
      goto LABEL_64;
    }
  }
  PixelBufferAttributesWithIOSurfaceSupport = 0;
  if (v21)
LABEL_64:
    CFRelease(v21);
  return PixelBufferAttributesWithIOSurfaceSupport;
}

BOOL SlimVideoDecoder_SessionIsSlimX(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 76) == 1;
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimYzip(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 76) == 2;
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimHrlc(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 76) == 3;
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimUncompressed(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 76) == 4;
  return result;
}

BOOL SlimVideoDecoder_SessionIsSlimIntc(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 76) == 5;
  return result;
}

uint64_t SlimVideoDecoder_DecodeFrameInternal(uint64_t a1, opaqueCMSampleBuffer *a2, __CVBuffer *a3, const __CFDictionary *a4, void (*a5)(uint64_t, uint64_t, uint64_t, CVPixelBufferRef), uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  CVPixelBufferRef v12;
  CVPixelBufferRef v13;
  CVPixelBufferRef v16;

  v16 = a3;
  v11 = _decodeFrame(a1 + 16, a2, a4, &v16);
  v12 = v16;
  if ((_DWORD)v11)
    v13 = 0;
  else
    v13 = v16;
  a5(a6, a7, v11, v13);
  if (v12 != a3 && v12 != 0)
    CFRelease(v12);
  return v11;
}

uint64_t _decodeFrame(uint64_t a1, CMSampleBufferRef sbuf, const __CFDictionary *a3, CVPixelBufferRef *a4)
{
  OpaqueCMBlockBuffer *DataBuffer;
  unint64_t DataLength;
  int v10;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t Dimensions;
  __CVPixelBufferPool *PixelBufferPool;
  size_t PlaneCount;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __CVBuffer *v18;
  size_t v19;
  size_t v20;
  OSType v21;
  size_t Width;
  size_t Height;
  OSType v24;
  BOOL v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  int BytesPerRowOfPlane;
  _DWORD *v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  unsigned __int16 v34;
  int v35;
  unsigned __int16 v36;
  _QWORD *v38;
  int BytesPerRow;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned __int16 v45;
  CFNumberRef v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  char *v53;
  const __CFAllocator *v54;
  const __CFData *v55;
  const __CFData *v56;
  CFPropertyListRef v57;
  const void *v58;
  const __CFString *v59;
  const opaqueCMFormatDescription *v61;
  CMVideoDimensions v62;
  void *value;
  OSType pixelFormatType;
  unint64_t v65;
  size_t totalLengthOut;
  char *dataPointerOut;
  CVPixelBufferRef pixelBufferOut;
  CMBlockBufferRef blockBufferOut;
  _BYTE error[12];
  CFNumberRef number;
  const __CFNumber *valuePtr;

  *(_DWORD *)error = 0;
  pixelBufferOut = *a4;
  blockBufferOut = 0;
  totalLengthOut = 0;
  dataPointerOut = 0;
  v65 = 0;
  pixelFormatType = 0;
  if (!sbuf)
  {
    v10 = -15400;
    goto LABEL_7;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  DataLength = CMBlockBufferGetDataLength(DataBuffer);
  FigCFDictionaryGetInt32IfPresent();
  if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    blockBufferOut = (CMBlockBufferRef)CFRetain(DataBuffer);
  }
  else
  {
    *(_DWORD *)error = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, DataLength, 0, &blockBufferOut);
    if (*(_DWORD *)error)
      goto LABEL_203;
  }
  if (HIDWORD(DataLength))
  {
    v10 = -12911;
LABEL_7:
    *(_DWORD *)error = v10;
    goto LABEL_203;
  }
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (!FormatDescription)
    FormatDescription = *(const opaqueCMFormatDescription **)(a1 + 8);
  Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(FormatDescription);
  v61 = FormatDescription;
  v62 = (CMVideoDimensions)Dimensions;
  if (*(_QWORD *)a1)
  {
    PixelBufferPool = (__CVPixelBufferPool *)VTDecoderSessionGetPixelBufferPool();
    *(_DWORD *)error = CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut);
    if (*(_DWORD *)error)
      goto LABEL_203;
  }
  else
  {
    v18 = pixelBufferOut;
    v19 = (int)Dimensions;
    v20 = Dimensions >> 32;
    v21 = pixelFormatType;
    if (pixelBufferOut)
    {
      Width = CVPixelBufferGetWidth(pixelBufferOut);
      Height = CVPixelBufferGetHeight(v18);
      v24 = CVPixelBufferGetPixelFormatType(v18);
      valuePtr = 0;
      number = 0;
      if (a3
        && CFDictionaryGetValueIfPresent(a3, CFSTR("Y"), (const void **)&valuePtr)
        && CFDictionaryGetValueIfPresent(a3, CFSTR("Height"), (const void **)&number))
      {
        *(_QWORD *)&error[4] = 0;
        CFNumberGetValue(valuePtr, kCFNumberSInt32Type, &error[8]);
        CFNumberGetValue(number, kCFNumberSInt32Type, &error[4]);
        v25 = Height >= *(int *)&error[4] + (uint64_t)*(int *)&error[8];
      }
      else
      {
        v25 = Height == v20;
      }
      if (v24 == pixelFormatType && Width == v19 && v25)
        goto LABEL_12;
      v21 = pixelFormatType;
    }
    if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v19, v20, v21, *(CFDictionaryRef *)(a1 + 72), &pixelBufferOut))
    {
      goto LABEL_203;
    }
  }
LABEL_12:
  if (!pixelBufferOut)
  {
    v10 = -15402;
    goto LABEL_7;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 32) = CVPixelBufferGetPixelFormatType(pixelBufferOut);
  *(_DWORD *)error = CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
  if (!*(_DWORD *)error)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = dataPointerOut;
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 112) = 0;
    value = 0;
    if (a3 && CFDictionaryGetValueIfPresent(a3, CFSTR("Y"), (const void **)&value))
    {
      LODWORD(valuePtr) = 0;
      CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
      *(_DWORD *)(*(_QWORD *)(a1 + 48) + 112) = (_DWORD)valuePtr;
    }
    if (CVPixelBufferGetPlaneCount(pixelBufferOut) < 2)
      PlaneCount = 1;
    else
      PlaneCount = CVPixelBufferGetPlaneCount(pixelBufferOut);
    v15 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v15 + 40) = PlaneCount;
    *(_DWORD *)(v15 + 48) = 1;
    if (!CMPhotoPixelFormatContainsYCbCr(pixelFormatType))
    {
LABEL_58:
      if (CVPixelBufferIsPlanar(pixelBufferOut))
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40))
        {
          v26 = 0;
          v27 = 22;
          v28 = 2;
          while (1)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + v27 * 4) = CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, v26);
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, v26);
            v30 = *(_DWORD **)(a1 + 48);
            v30[v28] = BytesPerRowOfPlane;
            v31 = v30[28];
            if (!v31)
              goto LABEL_109;
            v32 = v30[8];
            if (v32 <= 1937125937)
            {
              if (v32 <= 1751527983)
              {
                if (v32 > 875704949)
                {
                  v33 = v32 == 875704950 || v32 == 875836518;
                  v35 = 875836534;
                }
                else
                {
                  v33 = v32 == 875704422 || v32 == 875704438;
                  v35 = 875704934;
                }
              }
              else if (v32 <= 1936077359)
              {
                v33 = v32 == 1751527984 || v32 == 1882468912;
                v35 = 1885745712;
              }
              else if (v32 > 1936077875)
              {
                v33 = v32 == 1936077876;
                v35 = 1937125936;
              }
              else
              {
                v33 = v32 == 1936077360;
                v35 = 1936077362;
              }
              goto LABEL_100;
            }
            if (v32 > 1953903667)
            {
              if (v32 <= 2016687155)
              {
                v33 = v32 == 1953903668 || v32 == 2016686640;
                v35 = 2016686642;
              }
              else
              {
                if (v32 > 2019963441)
                {
                  v33 = v32 == 2019963956;
                  v36 = 12850;
                }
                else
                {
                  v33 = v32 == 2016687156;
                  v36 = 12848;
                }
                v35 = v36 | 0x78660000;
              }
              goto LABEL_100;
            }
            if (v32 <= 1952854577)
            {
              v33 = v32 == 1937125938 || v32 == 1937126452;
              v34 = 12848;
            }
            else
            {
              if (v32 > 1953903151)
              {
                v33 = v32 == 1953903152;
                v35 = 1953903154;
                goto LABEL_100;
              }
              v33 = v32 == 1952854578;
              v34 = 13364;
            }
            v35 = v34 | 0x74660000;
LABEL_100:
            if (!v33 && v32 != v35)
            {
              *(_DWORD *)error = -15405;
              goto LABEL_201;
            }
            if (v26)
            {
              v38 = &v30[v27];
              v31 /= v30[12];
            }
            else
            {
              v38 = v30 + 22;
            }
            *v38 += v31 * BytesPerRowOfPlane;
LABEL_109:
            ++v26;
            v27 += 2;
            ++v28;
            if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 40) <= v26)
              goto LABEL_172;
          }
        }
        goto LABEL_172;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 88) = CVPixelBufferGetBaseAddress(pixelBufferOut);
      BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
      v40 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)(v40 + 8) = BytesPerRow;
      v41 = *(_DWORD *)(v40 + 112);
      v42 = *(_DWORD *)(v40 + 32);
      if (v41)
      {
        if (v42 <= 1651847471)
        {
          if (v42 <= 1278226735)
          {
            if (v42 > 1278226487)
            {
              v47 = v42 - 1278226488;
              if (v47 <= 0x30 && ((1 << v47) & 0x1400000000001) != 0)
                goto LABEL_170;
              goto LABEL_209;
            }
            if (v42 == 825306677 || v42 == 825437747)
              goto LABEL_170;
            v43 = 1111970369;
          }
          else if (v42 <= 1647589489)
          {
            if ((v42 - 1278226736) <= 6 && ((1 << (v42 - 48)) & 0x45) != 0)
              goto LABEL_170;
            v43 = 1380411457;
          }
          else
          {
            if (v42 <= 1650942775)
            {
              if (v42 != 1647589490)
              {
                if (v42 == 1647719528)
                {
                  v48 = *(_QWORD *)(v40 + 88);
                  v49 = (v41 * BytesPerRow) >> 1;
LABEL_171:
                  *(_QWORD *)(v40 + 88) = v48 + v49;
LABEL_172:
                  CVPixelBufferGetExtendedPixels(pixelBufferOut, 0, 0, 0, (size_t *)(*(_QWORD *)(a1 + 48) + 24));
                  v50 = *(_QWORD *)(a1 + 48);
                  *(CMVideoDimensions *)v50 = v62;
                  *(_QWORD *)(v50 + 56) = DataLength;
                  if (*(_DWORD *)(v50 + 32) != 1651519798
                    || (LODWORD(valuePtr) = 0, (*(_DWORD *)error = _getVersionFromFormatDescription(v61, &valuePtr)) == 0)
                    && (*(_DWORD *)error = Slim_GetPixelBufferInfoFromVersion(valuePtr, 0, 0, 0, 0, (int *)(*(_QWORD *)(a1 + 48) + 8364))) == 0)
                  {
                    switch(*(_DWORD *)(a1 + 60))
                    {
                      case 1:
                        *(_DWORD *)error = SlimXDecodeFrame(*(_QWORD *)(a1 + 48), &v65);
                        if (*(_DWORD *)error)
                          break;
                        goto LABEL_185;
                      case 2:
                        v51 = YZipDecodeFrame(*(_QWORD *)(a1 + 48));
                        goto LABEL_183;
                      case 3:
                        v51 = HrlcDecodeFrame(*(_QWORD *)(a1 + 48));
                        goto LABEL_183;
                      case 4:
                        v51 = UncompressedDecodeFrame(*(_QWORD *)(a1 + 48), pixelBufferOut, DataLength);
                        goto LABEL_183;
                      case 5:
                        v51 = IntcDecodeFrame(pixelBufferOut, *(_QWORD *)(a1 + 48));
LABEL_183:
                        *(_DWORD *)error = v51;
                        if (v51)
                          break;
                        v65 = DataLength;
LABEL_185:
                        if (pixelBufferOut)
                        {
                          CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
                          v52 = 0;
                        }
                        else
                        {
                          v52 = 1;
                        }
                        if (v65 + 4 < DataLength)
                        {
                          v53 = &dataPointerOut[v65];
                          if (dataPointerOut[v65] == 109 && v53[1] == 101 && v53[2] == 116 && v53[3] == 97)
                          {
                            v54 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                            v55 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v53 + 4, DataLength - v65 - 4, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
                            if (v55)
                            {
                              v56 = v55;
                              v57 = CFPropertyListCreateWithData(v54, v55, 0, 0, (CFErrorRef *)error);
                              if (v57)
                              {
                                v58 = v57;
                                if (*(_BYTE *)(a1 + 56))
                                  v59 = CFSTR("RawImageMetadata");
                                else
                                  v59 = CFSTR("MetadataDictionary");
                                CMSetAttachment(pixelBufferOut, v59, v57, 1u);
                                CFRelease(v58);
                              }
                              CFRelease(v56);
                            }
                          }
                        }
                        *a4 = pixelBufferOut;
                        pixelBufferOut = 0;
                        if (v52)
                          break;
                        goto LABEL_203;
                      default:
                        v65 = (int)SlimDecodeFrame(*(int **)(a1 + 48));
                        goto LABEL_185;
                    }
                  }
LABEL_201:
                  if (pixelBufferOut)
                    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
                  goto LABEL_203;
                }
                goto LABEL_209;
              }
              goto LABEL_170;
            }
            if (v42 == 1650942776 || v42 == 1650943796)
              goto LABEL_170;
            v43 = 1651519798;
          }
        }
        else if (v42 > 1735549491)
        {
          if (v42 > 1815162993)
          {
            if (v42 > 1919378231)
            {
              if (v42 == 1919379252)
                goto LABEL_170;
              v43 = 1919378232;
            }
            else
            {
              if (v42 == 1815162994)
                goto LABEL_170;
              v43 = 1815491698;
            }
          }
          else if (v42 > 1751410031)
          {
            if (v42 == 1751410032)
              goto LABEL_170;
            v43 = 1751411059;
          }
          else
          {
            if (v42 == 1735549492)
              goto LABEL_170;
            v43 = 1735549752;
          }
        }
        else if (v42 > 1717855599)
        {
          if (v42 > 1734501175)
          {
            if (v42 == 1734501176)
              goto LABEL_170;
            v43 = 1734505012;
          }
          else
          {
            if (v42 == 1717855600)
              goto LABEL_170;
            v43 = 1717856627;
          }
        }
        else
        {
          if (v42 <= 1651926375)
          {
            if (v42 != 1651847472)
            {
              v43 = 1651925816;
              goto LABEL_169;
            }
LABEL_170:
            v48 = *(_QWORD *)(v40 + 88);
            v49 = (v41 * BytesPerRow);
            goto LABEL_171;
          }
          if (v42 == 1651926376)
            goto LABEL_170;
          v43 = 1652056888;
        }
LABEL_169:
        if (v42 == v43)
          goto LABEL_170;
LABEL_209:
        *(_DWORD *)error = FigSignalErrorAt();
        goto LABEL_201;
      }
      if (v42 > 1651847471)
      {
        if (v42 > 1651926375)
        {
          if (v42 == 1652056888)
            goto LABEL_145;
          v45 = 25960;
        }
        else
        {
          if (v42 == 1651847472)
            goto LABEL_145;
          v45 = 25400;
        }
        v44 = v45 | 0x62760000;
      }
      else
      {
        if (v42 <= 1650946097)
        {
          if (v42 != 1647392369)
          {
            v44 = 1647719528;
            goto LABEL_144;
          }
LABEL_145:
          v46 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(v40 + 8360));
          CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA90D8], v46, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v46);
          goto LABEL_172;
        }
        if (v42 == 1650946098)
          goto LABEL_145;
        v44 = 1651519798;
      }
LABEL_144:
      if (v42 != v44)
        goto LABEL_172;
      goto LABEL_145;
    }
    v16 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)(v16 + 48) = 2;
    if ((int)pixelFormatType > 1952854577)
    {
      if ((int)pixelFormatType > 2016686641)
      {
        if ((int)pixelFormatType > 2019963441)
        {
          if (pixelFormatType == 2019963956)
            goto LABEL_57;
          v17 = 2019963442;
        }
        else
        {
          if (pixelFormatType == 2016686642)
            goto LABEL_57;
          v17 = 2016687156;
        }
      }
      else if ((int)pixelFormatType > 1953903153)
      {
        if (pixelFormatType == 1953903154)
          goto LABEL_57;
        v17 = 1953903668;
      }
      else
      {
        if (pixelFormatType == 1952854578)
          goto LABEL_57;
        v17 = 1952855092;
      }
    }
    else if ((int)pixelFormatType > 1936077361)
    {
      if ((int)pixelFormatType > 1937125937)
      {
        if (pixelFormatType == 1937125938)
          goto LABEL_57;
        v17 = 1937126452;
      }
      else
      {
        if (pixelFormatType == 1936077362)
          goto LABEL_57;
        v17 = 1936077876;
      }
    }
    else
    {
      if ((int)pixelFormatType <= 875836517)
      {
        if (pixelFormatType != 875704934)
        {
          v17 = 875704950;
          goto LABEL_56;
        }
LABEL_57:
        *(_DWORD *)(v16 + 48) = 1;
        goto LABEL_58;
      }
      if (pixelFormatType == 875836518)
        goto LABEL_57;
      v17 = 875836534;
    }
LABEL_56:
    if (pixelFormatType != v17)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_203:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (*a4 != pixelBufferOut && pixelBufferOut)
    CFRelease(pixelBufferOut);
  return *(unsigned int *)error;
}

uint64_t SlimVideoDecoder_CopyPixelBufferAttributesInternal(uint64_t a1, _QWORD *a2)
{
  const void *v2;
  CFTypeRef v4;
  uint64_t result;

  v2 = *(const void **)(a1 + 88);
  if (!v2)
    return 4294951893;
  v4 = CFRetain(v2);
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t SlimVideoDecoder_CopyDecoderRestrictionsInternal(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  uint64_t v7;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    v7 = 0;
    _getAlignmentRestrictionUtility(*(unsigned int *)(a1 + 80), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8364), (int *)&v7 + 1, (int *)&v7);
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    if (a2)
      *a2 = v5;
    else
      CFRelease(v5);
  }
  return 0;
}

uint64_t _getAlignmentRestrictionUtility(uint64_t result, char a2, int *a3, int *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  if (a3 && a4)
  {
    v4 = 4;
    if ((int)result <= 1651925815)
    {
      if ((int)result > 1650942775)
      {
        if ((int)result <= 1650946097)
        {
          if ((_DWORD)result == 1650942776)
            goto LABEL_37;
          v8 = 1650943796;
LABEL_36:
          if ((_DWORD)result == v8)
            goto LABEL_37;
          goto LABEL_33;
        }
        if ((_DWORD)result == 1650946098 || (_DWORD)result == 1651519798)
        {
LABEL_32:
          if ((a2 & 1) == 0)
            goto LABEL_37;
LABEL_33:
          v6 = 4;
          v4 = 16;
          goto LABEL_38;
        }
        v7 = 1651847472;
      }
      else
      {
        if ((int)result <= 1647392368)
        {
          if ((_DWORD)result == 1111970369)
          {
            v6 = 4;
            goto LABEL_38;
          }
          v5 = 1380411457;
LABEL_27:
          v6 = 4;
          if ((_DWORD)result != v5)
            goto LABEL_33;
LABEL_38:
          *a3 = v4;
          *a4 = v6;
          return result;
        }
        if ((_DWORD)result == 1647392369)
          goto LABEL_32;
        v6 = 4;
        if ((_DWORD)result == 1647589490)
          goto LABEL_38;
        v7 = 1647719528;
      }
    }
    else
    {
      if ((int)result > 1735549491)
      {
        if ((int)result <= 1815491697)
        {
          if ((_DWORD)result != 1735549492 && (_DWORD)result != 1735549752)
          {
            v5 = 1815162994;
            goto LABEL_27;
          }
LABEL_37:
          v4 = 8;
          v6 = 8;
          goto LABEL_38;
        }
        v6 = 4;
        if ((_DWORD)result == 1815491698)
          goto LABEL_38;
        if ((_DWORD)result == 1919378232)
          goto LABEL_37;
        v8 = 1919379252;
        goto LABEL_36;
      }
      if ((int)result > 1652056887)
      {
        if ((_DWORD)result != 1652056888)
        {
          if ((_DWORD)result == 1734501176)
            goto LABEL_37;
          v8 = 1734505012;
          goto LABEL_36;
        }
        goto LABEL_32;
      }
      if ((_DWORD)result == 1651925816)
        goto LABEL_32;
      v7 = 1651926376;
    }
    if ((_DWORD)result != v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  return result;
}

uint64_t SlimVideoDecoder_CopyDecoderRestrictionsFromFormatDescript(const opaqueCMFormatDescription *a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  uint64_t VersionFromFormatDescription;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;

  v13 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 0;
  v5 = Mutable;
  VersionFromFormatDescription = _getVersionFromFormatDescription(a1, &v13);
  if ((_DWORD)VersionFromFormatDescription
    || (v11 = 0,
        v12 = 0,
        VersionFromFormatDescription = Slim_GetPixelBufferInfoFromVersion(v13, 0, (int *)&v12, 0, 0, &v11),
        (_DWORD)VersionFromFormatDescription))
  {
    v7 = VersionFromFormatDescription;
    goto LABEL_7;
  }
  v9 = 0;
  v10 = 0;
  _getAlignmentRestrictionUtility(v12, v11, &v10, &v9);
  FigCFDictionarySetInt();
  FigCFDictionarySetInt();
  v7 = 0;
  if (!a2)
  {
LABEL_7:
    CFRelease(v5);
    return v7;
  }
  *a2 = v5;
  return v7;
}

uint64_t _getVersionFromFormatDescription(const opaqueCMFormatDescription *a1, _DWORD *a2)
{
  const __CFDictionary *Extension;
  const __CFData *Value;
  const __CFData *v6;
  unint64_t Length;
  const UInt8 *BytePtr;
  BOOL v9;
  const __CFNumber *v10;
  int v11;
  uint64_t result;
  int valuePtr;

  valuePtr = 0;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (Extension
    && (Value = (const __CFData *)CFDictionaryGetValue(Extension, CFSTR("slmC"))) != 0
    && ((v6 = Value, Length = CFDataGetLength(Value), BytePtr = CFDataGetBytePtr(v6), Length >= 4)
      ? (v9 = BytePtr == 0)
      : (v9 = 1),
        !v9))
  {
    v11 = *(_DWORD *)BytePtr;
    valuePtr = v11;
    if (!v11)
      return 4294951893;
  }
  else
  {
    v10 = (const __CFNumber *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2280]);
    if (!v10)
      return 4294951893;
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    v11 = valuePtr;
    if (!valuePtr)
      return 4294951893;
  }
  if ((v11 & 0xFFFCu) >= 0x64)
    return FigSignalErrorAt();
  result = 0;
  if (a2)
    *a2 = v11;
  return result;
}

uint64_t RegisterSlimVideoDecoderSessionClass()
{
  uint64_t result;

  sSlimVideoDecoderSessionClass = 0;
  *(_QWORD *)algn_1EE999D28 = "SlimVideoDecoderSessionClass";
  qword_1EE999D30 = (uint64_t)SlimVideoDecoderSessionClass_Init;
  unk_1EE999D38 = 0;
  qword_1EE999D40 = (uint64_t)SlimVideoDecoderSessionClass_Finalize;
  unk_1EE999D48 = 0;
  qword_1EE999D50 = 0;
  unk_1EE999D58 = SlimVideoDecoderSessionClass_CopyFormattingDesc;
  qword_1EE999D60 = 0;
  result = _CFRuntimeRegisterClass();
  sSlimVideoDecoderSessionTypeID = result;
  return result;
}

double SlimVideoDecoderSessionClass_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void SlimVideoDecoderSessionClass_Finalize(uint64_t a1)
{
  _finalizeDecoderStorage(a1 + 16);
}

__CFString *SlimVideoDecoderSessionClass_CopyFormattingDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SlimVideoDecoder %p>"), a1);
  return Mutable;
}

void _finalizeDecoderStorage(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = 0;
  v3 = *(const void **)(a1 + 72);
  if (v3)
    CFRelease(v3);
  FigFormatDescriptionRelease();
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_BYTE *)(a1 + 56))
    DestroyHuffTree(*(_QWORD **)(*(_QWORD *)(a1 + 48) + 8344));
  free(*(void **)(a1 + 48));
}

uint64_t CMPhotoGetAPIVersion()
{
  return 137;
}

uint64_t CMPhotoCompiledWithExperimentsOn()
{
  return 0;
}

char *CMPhotoGetSCMVersionString()
{
  return kCMPhotoSCMVersion;
}

uint64_t CMPhotoByteStreamWriteStreamCreate(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *v5;
  CFTypeRef v6;
  uint64_t result;

  if (!a3)
    return 0;
  v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405730B0C9uLL);
  if (!v5 || (v6 = CFRetain(a3), *v5 = a2, v5[1] = v6, (result = CFWriteStreamCreate()) == 0))
  {
    free(v5);
    CFRelease(a3);
    return 0;
  }
  return result;
}

void _streamFinalize_0(int a1, _QWORD *a2)
{
  const void *v3;

  v3 = (const void *)a2[1];
  if (v3)
    CFRelease(v3);
  free(a2);
}

const __CFString *_streamCopyDescription_0()
{
  return CFSTR("CMPhotoByteStreamWriteStream");
}

uint64_t _streamOpen_0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 1;
  return 1;
}

uint64_t _streamOpenCompleted_0()
{
  return 1;
}

uint64_t _streamWrite_0(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  int v14;
  uint64_t v15;
  uint64_t v17;

  if (a3)
  {
    v9 = 0;
    v10 = *a5;
    v11 = a3;
    while (1)
    {
      v17 = 0;
      v12 = a5[1];
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 16);
      if (!v13)
        break;
      v14 = v13(v12, a3, v10, a2, &v17);
      if (v14)
        goto LABEL_10;
      v15 = v17;
      if (!v17)
      {
        v14 = -12873;
        if (!a4)
          return v9;
LABEL_11:
        *a4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFErrorDomain)*MEMORY[0x1E0C9AFC8], v14, 0);
        return v9;
      }
      v10 = *a5 + v17;
      *a5 = v10;
      v9 += v15;
      v11 -= v15;
      if (!v11)
        return v9;
    }
    v14 = -12782;
LABEL_10:
    if (!a4)
      return v9;
    goto LABEL_11;
  }
  return 0;
}

uint64_t _streamCanWrite_0()
{
  return 1;
}

uint64_t CMPhotoFloatFromRationalArray(const void *a1, int a2, _DWORD *a3, _DWORD *a4, float *a5)
{
  CFTypeID v10;
  uint64_t result;
  double v12;
  float v13;

  if (!a1)
    return 4294950306;
  v10 = CFGetTypeID(a1);
  if (v10 != CFArrayGetTypeID()
    || CFArrayGetCount((CFArrayRef)a1) != 2
    || !FigCFArrayGetInt32AtIndex()
    || !FigCFArrayGetInt32AtIndex())
  {
    return 4294950306;
  }
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  result = 0;
  if (a5)
  {
    v12 = (double)0 / (double)0;
    if (a2)
      v12 = (double)0 / (double)0;
    v13 = v12;
    *a5 = v13;
  }
  return result;
}

uint64_t CMPhotoParseFlexRangeMetadataDictionary(const void *a1, _OWORD *a2)
{
  CFTypeID v4;
  CFTypeID TypeID;
  uint64_t result;
  const __CFString *v7;
  const void *Value;
  const void *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFTypeID v12;
  CFIndex v13;
  float *i;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  if (!a1)
    return 4294950306;
  v4 = CFGetTypeID(a1);
  TypeID = CFDictionaryGetTypeID();
  result = 4294950306;
  if (!a2 || v4 != TypeID)
    return result;
  v7 = cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor();
  if (!CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a1, v7, (_BYTE *)&v25 + 4))
    return 4294950306;
  cmpweak_kFigPictureProperty_TonemapBaseHDRHeadroom();
  Value = (const void *)FigCFDictionaryGetValue();
  result = CMPhotoFloatFromRationalArray(Value, 1, 0, 0, (float *)&v25 + 2);
  if ((_DWORD)result)
    return result;
  cmpweak_kFigPictureProperty_TonemapAlternateHDRHeadroom();
  v9 = (const void *)FigCFDictionaryGetValue();
  result = CMPhotoFloatFromRationalArray(v9, 1, 0, 0, (float *)((unint64_t)&v25 | 0xC));
  if ((_DWORD)result)
    return result;
  cmpweak_kFigPictureProperty_TonemapChannelMetadata();
  v10 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v10)
    return 4294950306;
  v11 = v10;
  v12 = CFGetTypeID(v10);
  if (v12 != CFArrayGetTypeID())
    return 4294950306;
  LODWORD(v26) = CFArrayGetCount(v11);
  if ((v26 & 0xFFFFFFFD) != 1)
    return 4294950306;
  v13 = 0;
  for (i = (float *)&v29 + 1; ; ++i)
  {
    CFArrayGetValueAtIndex(v11, v13);
    cmpweak_kFigTonemapChannel_BaseOffset();
    v15 = (const void *)FigCFDictionaryGetValue();
    result = CMPhotoFloatFromRationalArray(v15, 0, 0, 0, i - 3);
    if ((_DWORD)result)
      break;
    cmpweak_kFigTonemapChannel_AlternateOffset();
    v16 = (const void *)FigCFDictionaryGetValue();
    result = CMPhotoFloatFromRationalArray(v16, 0, 0, 0, i);
    if ((_DWORD)result)
      break;
    cmpweak_kFigTonemapChannel_Gamma();
    v17 = (const void *)FigCFDictionaryGetValue();
    result = CMPhotoFloatFromRationalArray(v17, 1, 0, 0, i - 12);
    if ((_DWORD)result)
      break;
    cmpweak_kFigTonemapChannel_GainMapMin();
    v18 = (const void *)FigCFDictionaryGetValue();
    result = CMPhotoFloatFromRationalArray(v18, 0, 0, 0, i - 9);
    if ((_DWORD)result)
      break;
    cmpweak_kFigTonemapChannel_GainMapMax();
    v19 = (const void *)FigCFDictionaryGetValue();
    result = CMPhotoFloatFromRationalArray(v19, 0, 0, 0, i - 6);
    if ((_DWORD)result)
      break;
    if (++v13 >= (unint64_t)(int)v26)
    {
      if ((_DWORD)v26 == 1)
      {
        v20 = 0;
        v21 = DWORD1(v26);
        do
        {
          v22 = (_DWORD *)((char *)&v29 + v20 + 8);
          *(v22 - 3) = DWORD2(v28);
          *v22 = DWORD1(v29);
          *(v22 - 12) = v21;
          *(v22 - 9) = v27;
          *(v22 - 6) = HIDWORD(v27);
          v20 += 4;
        }
        while (v20 != 8);
      }
      result = 0;
      v23 = v28;
      a2[2] = v27;
      a2[3] = v23;
      a2[4] = v29;
      v24 = v26;
      *a2 = v25;
      a2[1] = v24;
      return result;
    }
  }
  return result;
}

uint64_t CMPhotoWriteFlexRangeBinaryMetadata(const void *a1, void *a2)
{
  CFTypeID v4;
  CFTypeID TypeID;
  uint64_t result;
  CFTypeID v7;
  const __CFString *v8;
  const __CFArray *Value;
  const __CFArray *v10;
  CFTypeID v11;
  unint64_t Count;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const __CFDictionary *ValueAtIndex;
  UInt8 bytes[4];
  char v22;
  char v23;

  if (!a1)
    return 4294950306;
  v4 = CFGetTypeID(a1);
  TypeID = CFDictionaryGetTypeID();
  result = 4294950306;
  if (a2 && v4 == TypeID)
  {
    v7 = CFGetTypeID(a2);
    if (v7 == CFDataGetTypeID()
      && (v23 = 0,
          v8 = cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor(),
          CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)a1, v8, &v23))
      && (cmpweak_kFigPictureProperty_TonemapChannelMetadata(),
          (Value = (const __CFArray *)FigCFDictionaryGetValue()) != 0)
      && (v10 = Value, v11 = CFGetTypeID(Value), v11 == CFArrayGetTypeID())
      && (Count = CFArrayGetCount(v10), (Count & 0xFFFFFFFFFFFFFFFDLL) == 1))
    {
      v13 = Count;
      *(_DWORD *)bytes = 0;
      v22 = ((Count > 1) << 7) | ((v23 != 0) << 6);
      CFDataAppendBytes((CFMutableDataRef)a2, bytes, 5);
      result = _appendKeyAsBigEndianRational((const __CFDictionary *)a1, (const void *)*MEMORY[0x1E0CC4BE8], (__CFData *)a2);
      if (!(_DWORD)result)
      {
        result = _appendKeyAsBigEndianRational((const __CFDictionary *)a1, (const void *)*MEMORY[0x1E0CC4BD8], (__CFData *)a2);
        if (!(_DWORD)result)
        {
          v14 = 0;
          v15 = (const void *)*MEMORY[0x1E0CC6100];
          v16 = (const void *)*MEMORY[0x1E0CC60F8];
          v17 = (const void *)*MEMORY[0x1E0CC6108];
          v18 = (const void *)*MEMORY[0x1E0CC60F0];
          v19 = (const void *)*MEMORY[0x1E0CC60E8];
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
            result = _appendKeyAsBigEndianRational(ValueAtIndex, v15, (__CFData *)a2);
            if ((_DWORD)result)
              break;
            result = _appendKeyAsBigEndianRational(ValueAtIndex, v16, (__CFData *)a2);
            if ((_DWORD)result)
              break;
            result = _appendKeyAsBigEndianRational(ValueAtIndex, v17, (__CFData *)a2);
            if ((_DWORD)result)
              break;
            result = _appendKeyAsBigEndianRational(ValueAtIndex, v18, (__CFData *)a2);
            if ((_DWORD)result)
              break;
            result = _appendKeyAsBigEndianRational(ValueAtIndex, v19, (__CFData *)a2);
            if ((_DWORD)result)
              break;
            if (v13 == ++v14)
              return 0;
          }
        }
      }
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

uint64_t _appendKeyAsBigEndianRational(const __CFDictionary *a1, const void *a2, __CFData *a3)
{
  const void *Value;
  uint64_t v5;
  UInt8 bytes[8];

  *(_QWORD *)bytes = 0;
  Value = CFDictionaryGetValue(a1, a2);
  v5 = CMPhotoFloatFromRationalArray(Value, 1, bytes, &bytes[4], 0);
  if (!(_DWORD)v5)
  {
    *(int8x8_t *)bytes = vrev32_s8(*(int8x8_t *)bytes);
    CFDataAppendBytes(a3, bytes, 8);
  }
  return v5;
}

uint64_t CMPhotoCreateFlexRangeMetadataDictionary(const __CFDictionary *a1, __CFDictionary **a2)
{
  uint64_t result;
  __CFDictionary *Mutable;
  const __CFString *v6;
  const __CFArray *Value;
  const __CFArray *v8;
  CFTypeID v9;
  CFIndex Count;
  CFIndex v11;
  unint64_t v12;
  __CFArray *v13;
  CFIndex v14;
  uint64_t v15;
  CFMutableDictionaryRef v16;
  __CFDictionary **v17;
  const __CFAllocator *allocator;
  unsigned __int8 v19;

  result = 4294950306;
  if (a1 && a2)
  {
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMPhotoCFDictionarySetInt(Mutable, CFSTR("TonemapVersion"), 0);
    CMPhotoCFDictionarySetInt(Mutable, CFSTR("TonemapWriterVersion"), 0);
    v19 = 0;
    v6 = cmpweak_kFigPictureProperty_TonemapBaseColorIsWorkingColor();
    if (CMPhotoCFDictionaryGetBooleanIfPresent(a1, v6, &v19))
      CMPhotoCFDictionarySetBoolean(Mutable, CFSTR("TonemapBaseColorIsWorkingColor"), v19);
    cmpweak_kFigPictureProperty_TonemapBaseHDRHeadroom();
    if (FigCFDictionaryGetValue())
      FigCFDictionarySetValue();
    cmpweak_kFigPictureProperty_TonemapAlternateHDRHeadroom();
    if (FigCFDictionaryGetValue())
      FigCFDictionarySetValue();
    cmpweak_kFigPictureProperty_TonemapChannelMetadata();
    Value = (const __CFArray *)FigCFDictionaryGetValue();
    if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFArrayGetTypeID()))
    {
      v17 = a2;
      Count = CFArrayGetCount(v8);
      v11 = Count << 32;
      v12 = (int)Count;
      v13 = CFArrayCreateMutable(allocator, (int)Count, MEMORY[0x1E0C9B378]);
      if (v11)
      {
        v14 = 0;
        if (v12 <= 1)
          v15 = 1;
        else
          v15 = v12;
        do
        {
          CFArrayGetValueAtIndex(v8, v14);
          v16 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          cmpweak_kFigTonemapChannel_BaseOffset();
          if (FigCFDictionaryGetValue())
            FigCFDictionarySetValue();
          cmpweak_kFigTonemapChannel_AlternateOffset();
          if (FigCFDictionaryGetValue())
            FigCFDictionarySetValue();
          cmpweak_kFigTonemapChannel_Gamma();
          if (FigCFDictionaryGetValue())
            FigCFDictionarySetValue();
          cmpweak_kFigTonemapChannel_GainMapMin();
          if (FigCFDictionaryGetValue())
            FigCFDictionarySetValue();
          cmpweak_kFigTonemapChannel_GainMapMax();
          if (FigCFDictionaryGetValue())
            FigCFDictionarySetValue();
          CFArrayAppendValue(v13, v16);
          if (v16)
            CFRelease(v16);
          ++v14;
        }
        while (v15 != v14);
      }
      FigCFDictionarySetValue();
      if (v13)
        CFRelease(v13);
      result = 0;
      *v17 = Mutable;
    }
    else
    {
      if (Mutable)
        CFRelease(Mutable);
      return 4294950306;
    }
  }
  return result;
}

uint64_t CMPhotoCreateFlexRangeMetadataDictionaryFromParsedMetadata(uint64_t a1, __CFDictionary **a2)
{
  uint64_t MutableCopy;
  __CFDictionary *v5;
  uint64_t SInt32;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  CFMutableArrayRef v15;
  uint64_t v16;
  __CFDictionary **v18;
  __CFDictionary *theDict;
  uint64_t v20;
  CFMutableArrayRef theArray;

  if (!a2)
    return 4294950306;
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v5 = (__CFDictionary *)MutableCopy;
  SInt32 = FigCFNumberCreateSInt32();
  if (SInt32)
  {
    v7 = (void *)SInt32;
    FigCFDictionarySetInt32();
    FigCFDictionarySetBoolean();
    v8 = _setRationalForKey(CFSTR("TonemapBaseHDRHeadroom"), v7, v5);
    if ((_DWORD)v8 || (v8 = _setRationalForKey(CFSTR("TonemapAlternateHDRHeadroom"), v7, v5), (_DWORD)v8))
    {
      v16 = v8;
    }
    else
    {
      v9 = FigCFArrayCreateMutableCopy();
      if (v9)
      {
        v20 = a1;
        theArray = (CFMutableArrayRef)v9;
        v18 = a2;
        theDict = v5;
        if (*(int *)(a1 + 16) < 1)
        {
LABEL_16:
          v15 = theArray;
          CFDictionarySetValue(theDict, CFSTR("TonemapChannelMetadata"), theArray);
          v16 = 0;
          *v18 = theDict;
          v5 = (__CFDictionary *)v7;
        }
        else
        {
          v10 = 0;
          v11 = a1 + 44;
          while (1)
          {
            v12 = (void *)FigCFDictionaryCreateMutableCopy();
            if (!v12)
              break;
            v13 = v12;
            CFArrayAppendValue(theArray, v12);
            CFRelease(v13);
            v14 = _setRationalForKey(CFSTR("Gamma"), v7, (__CFDictionary *)v13);
            if ((_DWORD)v14
              || (v14 = _setRationalForKey(CFSTR("GainMapMin"), v7, (__CFDictionary *)v13), (_DWORD)v14)
              || (v14 = _setRationalForKey(CFSTR("GainMapMax"), v7, (__CFDictionary *)v13), (_DWORD)v14)
              || (v14 = _setRationalForKey(CFSTR("BaseOffset"), v7, (__CFDictionary *)v13), (_DWORD)v14)
              || (v14 = _setRationalForKey(CFSTR("AlternateOffset"), v7, (__CFDictionary *)v13), (_DWORD)v14))
            {
              v16 = v14;
              goto LABEL_18;
            }
            ++v10;
            v11 += 4;
            if (v10 >= *(int *)(v20 + 16))
              goto LABEL_16;
          }
          v16 = 4294950305;
LABEL_18:
          CFRelease(v7);
          v5 = theDict;
          v15 = theArray;
        }
        goto LABEL_19;
      }
      v16 = 4294950305;
    }
    CFRelease(v7);
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 4294950305;
  }
LABEL_19:
  CFRelease(v5);
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t _setRationalForKey(const void *a1, const void *a2, __CFDictionary *a3)
{
  uint64_t MutableCopy;
  __CFArray *v7;
  uint64_t appended;

  MutableCopy = FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v7 = (__CFArray *)MutableCopy;
  appended = FigCFArrayAppendInt();
  if (!(_DWORD)appended)
  {
    CFArrayAppendValue(v7, a2);
    CFDictionarySetValue(a3, a1, v7);
  }
  CFRelease(v7);
  return appended;
}

uint64_t CMPhotoCreateFlexRangeMetadataDictionaryFromBinaryMetadata(const void *a1, int a2, __CFDictionary **a3)
{
  uint64_t MutableCopy;
  __CFDictionary *v7;
  int v8;
  uint64_t v9;
  __CFArray *v10;
  void *v11;
  signed __int8 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __CFDictionary *v19;
  __CFArray *theArray;
  UInt8 v21;
  CFIndex v22;
  UInt8 buffer[4];
  CFRange v24;
  CFRange v25;

  if (!a1)
    return 4294950306;
  CFGetAllocator(a1);
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v7 = (__CFDictionary *)MutableCopy;
  *(_DWORD *)buffer = 0;
  v22 = 0;
  if ((unint64_t)CFDataGetLength((CFDataRef)a1) <= 3)
    goto LABEL_43;
  v24.location = 0;
  v24.length = 4;
  CFDataGetBytes((CFDataRef)a1, v24, buffer);
  v22 = 4;
  v8 = *(unsigned __int16 *)buffer;
  *(_WORD *)buffer = __rev16(*(unsigned __int16 *)buffer);
  *(_WORD *)&buffer[2] = bswap32(*(unsigned __int16 *)&buffer[2]) >> 16;
  if (v8)
    goto LABEL_43;
  v9 = FigCFDictionarySetUInt32();
  if ((_DWORD)v9)
    goto LABEL_44;
  v9 = FigCFDictionarySetUInt32();
  if ((_DWORD)v9)
    goto LABEL_44;
  if (!a2)
  {
    v21 = 0;
    if (CFDataGetLength((CFDataRef)a1) != 4)
    {
      v25.location = 4;
      v25.length = 1;
      CFDataGetBytes((CFDataRef)a1, v25, &v21);
      v22 = 5;
      v12 = v21;
      v9 = CMPhotoCFDictionarySetBoolean(v7, CFSTR("TonemapBaseColorIsWorkingColor"), (v21 >> 6) & 1);
      if (!(_DWORD)v9)
      {
        v9 = _extractAndSetRationalForKey((const __CFData *)a1, 5, 0, CFSTR("TonemapBaseHDRHeadroom"), v7, &v22);
        if (!(_DWORD)v9)
        {
          v9 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 0, CFSTR("TonemapAlternateHDRHeadroom"), v7, &v22);
          if (!(_DWORD)v9)
          {
            CFGetAllocator(a1);
            v13 = FigCFArrayCreateMutableCopy();
            if (v13)
            {
              v19 = v7;
              theArray = (__CFArray *)v13;
              v14 = 0;
              v11 = 0;
              while (1)
              {
                if (v11)
                  CFRelease(v11);
                CFGetAllocator(a1);
                v11 = (void *)FigCFDictionaryCreateMutableCopy();
                if (!v11)
                  break;
                v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1, CFSTR("GainMapMin"), (__CFDictionary *)v11, &v22);
                if ((_DWORD)v15
                  || (v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1, CFSTR("GainMapMax"), (__CFDictionary *)v11, &v22), (_DWORD)v15)|| (v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 0, CFSTR("Gamma"), (__CFDictionary *)v11, &v22), (_DWORD)v15)|| (v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1,
                              CFSTR("BaseOffset"),
                              (__CFDictionary *)v11,
                              &v22),
                      (_DWORD)v15)
                  || (v15 = _extractAndSetRationalForKey((const __CFData *)a1, v22, 1, CFSTR("AlternateOffset"), (__CFDictionary *)v11, &v22), (_DWORD)v15))
                {
                  v17 = v15;
                  goto LABEL_36;
                }
                CFArrayAppendValue(theArray, v11);
                if (v12 < 0 && v14++ < 2)
                  continue;
                v7 = v19;
                v10 = theArray;
                CFDictionarySetValue(v19, CFSTR("TonemapChannelMetadata"), theArray);
                goto LABEL_29;
              }
              v17 = 4294950305;
LABEL_36:
              v7 = v19;
              v10 = theArray;
            }
            else
            {
              v11 = 0;
              v10 = 0;
              v17 = 4294950305;
            }
            goto LABEL_37;
          }
        }
      }
LABEL_44:
      v17 = v9;
      v11 = 0;
      v10 = 0;
      goto LABEL_37;
    }
LABEL_43:
    v9 = FigSignalErrorAt();
    goto LABEL_44;
  }
  if ((unint64_t)CFDataGetLength((CFDataRef)a1) >= 5)
    FigSignalErrorAt();
  v10 = 0;
  v11 = 0;
LABEL_29:
  v17 = 0;
  if (a3)
  {
    *a3 = v7;
    if (!v10)
      goto LABEL_32;
    goto LABEL_31;
  }
LABEL_37:
  CFRelease(v7);
  if (v10)
LABEL_31:
    CFRelease(v10);
LABEL_32:
  if (v11)
    CFRelease(v11);
  return v17;
}

uint64_t _extractAndSetRationalForKey(const __CFData *a1, CFIndex a2, int a3, const void *a4, __CFDictionary *a5, _QWORD *a6)
{
  uint64_t MutableCopy;
  const void *v13;
  uint64_t appended;
  uint64_t v15;
  UInt8 buffer[8];
  CFRange v18;

  MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    v13 = (const void *)MutableCopy;
    if (!a1)
    {
      v15 = 4294950306;
LABEL_16:
      CFRelease(v13);
      return v15;
    }
    *(_QWORD *)buffer = 0;
    if ((unint64_t)(CFDataGetLength(a1) - a2) < 8)
    {
      appended = FigSignalErrorAt();
      if ((_DWORD)appended)
        goto LABEL_18;
      if (a3)
        goto LABEL_7;
    }
    else
    {
      v18.location = a2;
      v18.length = 8;
      CFDataGetBytes(a1, v18, buffer);
      if (a6)
        *a6 = a2 + 8;
      if (a3)
      {
LABEL_7:
        appended = FigCFArrayAppendInt32();
        if ((_DWORD)appended)
          goto LABEL_18;
LABEL_14:
        v15 = FigCFArrayAppendInt64();
        if (!(_DWORD)v15)
          CFDictionarySetValue(a5, a4, v13);
        goto LABEL_16;
      }
    }
    appended = FigCFArrayAppendInt64();
    if (!(_DWORD)appended)
      goto LABEL_14;
LABEL_18:
    v15 = appended;
    goto LABEL_16;
  }
  return 4294950305;
}

uint64_t CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata(const CGImageMetadata *a1, int a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v19;
  _QWORD block[12];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  int v36;
  CFNumberFormatterRef v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;

  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2000000000;
  v41 = 0;
  v37 = 0;
  v33 = 0;
  v34 = (float *)&v33;
  v35 = 0x2000000000;
  v36 = 0;
  v29 = 0;
  v30 = &v29;
  v31 = 0x2000000000;
  v32 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2000000000;
  v28 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  if (a1 && a3)
  {
    v6 = CMPhotoMetadataCreateCFNumberFormatter((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v37);
    v7 = v43;
    *((_DWORD *)v43 + 6) = v6;
    if (!v6)
    {
      *(_DWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 68) = 0;
      *(_DWORD *)(a3 + 76) = 0;
      *(_DWORD *)(a3 + 28) = 1065353216;
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)(a3 + 20) = _D0;
      *(_QWORD *)(a3 + 8) = 0x3F80000000000000;
      *(_BYTE *)(a3 + 4) = 1;
      v13 = a2 ? a2 : 3;
      *(_DWORD *)(a3 + 16) = v13;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __CMPhotoParseFlexRangeMetadataFromAuxiliaryXMPMetadata_block_invoke;
      block[3] = &unk_1E53F5898;
      block[4] = &v21;
      block[5] = &v42;
      block[10] = v37;
      block[11] = a3;
      block[6] = &v38;
      block[7] = &v25;
      block[8] = &v29;
      block[9] = &v33;
      CGImageMetadataEnumerateTagsUsingBlock(a1, 0, 0, block);
      v7 = v43;
      if (!*((_DWORD *)v43 + 6))
      {
        if (*((_BYTE *)v22 + 24))
        {
          if (v34[6] == 1.0 && *((_BYTE *)v26 + 24) && *((_BYTE *)v30 + 24))
          {
            if (*((_BYTE *)v39 + 24))
            {
              v14 = 0;
              *(int32x2_t *)(a3 + 8) = vrev64_s32(*(int32x2_t *)(a3 + 8));
              do
              {
                v15 = a3 + v14;
                v16 = *(_DWORD *)(a3 + v14 + 56);
                *(_DWORD *)(v15 + 56) = *(_DWORD *)(a3 + v14 + 68);
                *(_DWORD *)(v15 + 68) = v16;
                v14 += 4;
              }
              while (v14 != 12);
            }
          }
          else
          {
            v19 = FigSignalErrorAt();
            v7 = v43;
            *((_DWORD *)v43 + 6) = v19;
          }
        }
        else
        {
          *((_DWORD *)v43 + 6) = -16993;
        }
      }
    }
  }
  else
  {
    v45 = -16990;
    v7 = &v42;
  }
  if (v37)
  {
    CFRelease(v37);
    v7 = v43;
  }
  v17 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  return v17;
}

uint64_t _extractFloatValuesFromAuxMetaTagValue(const void *a1, unsigned int a2, char *a3)
{
  CFTypeID v6;
  CFIndex Count;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  CFTypeID v12;
  uint64_t v13;
  char *v14;
  int v15;

  if (!a1)
    goto LABEL_14;
  v6 = CFGetTypeID(a1);
  if (v6 != CFArrayGetTypeID())
  {
    v12 = CFGetTypeID(a1);
    if (v12 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a1, kCFNumberFloatType, a3);
      v10 = a2;
      v8 = 1;
LABEL_10:
      v13 = v10 - v8;
      if (v10 > v8)
      {
        v14 = &a3[4 * v8];
        v15 = *((_DWORD *)v14 - 1);
        do
        {
          *(_DWORD *)v14 = v15;
          v14 += 4;
          --v13;
        }
        while (v13);
      }
      return 0;
    }
LABEL_14:
    FigSignalErrorAt();
    return 0;
  }
  Count = CFArrayGetCount((CFArrayRef)a1);
  if (Count - 1 >= (unint64_t)a2)
    goto LABEL_14;
  v8 = Count;
  v9 = 0;
  v10 = a2;
  v11 = a3;
  while (FigCFArrayGetFloatAtIndex())
  {
    ++v9;
    v11 += 4;
    if (v8 == v9)
      goto LABEL_10;
  }
  return 4294950194;
}

uint64_t CMPhotoCreateXMPMetadataFromMetadata(float *a1, uint64_t a2, CGImageMetadata **a3)
{
  uint64_t v3;
  CGImageMetadata *Mutable;
  CGImageMetadata *v8;
  uint64_t v9;

  v3 = 4294950306;
  if (a1 && a3)
  {
    Mutable = CGImageMetadataCreateMutable();
    if (!Mutable)
      return 4294950305;
    v8 = Mutable;
    if (CGImageMetadataRegisterNamespaceForPrefix(Mutable, CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), CFSTR("HDRToneMap"), 0))
    {
      v9 = _addIntToCGMetadata(v8, 1, CFSTR("Version"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"));
      if ((_DWORD)v9
        || (v9 = _addIntToCGMetadata(v8, a2, CFSTR("BaseRenditionIsHDR"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/")), (_DWORD)v9)|| (v9 = _addFloatToCGMetadata(v8, CFSTR("HDRCapacityMin"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[2]), (_DWORD)v9)|| (v9 = _addFloatToCGMetadata(v8, CFSTR("HDRCapacityMax"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[3]), (_DWORD)v9)|| (v9 = _addFloatToCGMetadata(v8, CFSTR("Gamma"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[5]), (_DWORD)v9)
        || (v9 = _addFloatToCGMetadata(v8, CFSTR("GainMapMin"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[8]),
            (_DWORD)v9)
        || (v9 = _addFloatToCGMetadata(v8, CFSTR("GainMapMax"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[11]),
            (_DWORD)v9)
        || (v9 = _addFloatToCGMetadata(v8, CFSTR("OffsetSDR"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[14]),
            (_DWORD)v9))
      {
        v3 = v9;
      }
      else
      {
        v3 = _addFloatToCGMetadata(v8, CFSTR("OffsetHDR"), CFSTR("http://ns.adobe.com/hdr-gain-map/1.0/"), a1[17]);
        if (!(_DWORD)v3)
        {
          *a3 = v8;
          return v3;
        }
      }
    }
    else
    {
      v3 = 4294950305;
    }
    CFRelease(v8);
  }
  return v3;
}

uint64_t _addIntToCGMetadata(CGImageMetadata *a1, uint64_t a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef v7;
  CFStringRef v8;
  uint64_t v9;

  v7 = CFStringCreateWithFormat(0, 0, CFSTR("%d"), a2);
  if (!v7)
    return 4294950305;
  v8 = v7;
  v9 = _addValueToCGMetadata(a1, v7, a3, a4);
  CFRelease(v8);
  return v9;
}

uint64_t _addFloatToCGMetadata(CGImageMetadata *a1, const __CFString *a2, const __CFString *a3, float a4)
{
  CFStringRef v7;
  CFStringRef v8;
  uint64_t v9;

  v7 = CFStringCreateWithFormat(0, 0, CFSTR("%f"), a4);
  if (!v7)
    return 4294950305;
  v8 = v7;
  v9 = _addValueToCGMetadata(a1, v7, a2, a3);
  CFRelease(v8);
  return v9;
}

uint64_t CMPhotoHeadroomFromMeteorPlusMetadataMakerNote(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = 4294950306;
  if (a1 && a2)
  {
    if ((FigCFDictionaryGetFloatIfPresent() || FigCFDictionaryGetFloatIfPresent())
      && FigCFDictionaryGetFloatIfPresent())
    {
      result = 0;
      *a2 = 0;
    }
    else
    {
      return 4294950303;
    }
  }
  return result;
}

uint64_t CMPhotoGainMapCreateOutputFromConstituents(int a1, const void *a2, int a3, uint64_t a4, int a5, CFTypeRef cf, int a7, int a8, float a9, unsigned __int8 a10, unsigned __int8 a11, char a12, uint64_t a13, __CVBuffer **a14, CFTypeRef *a15)
{
  int v15;
  __CVBuffer **v17;
  const void *v18;
  void *Value;
  __CFDictionary *v20;
  CGColorSpaceRef v21;
  uint64_t v22;
  const void *v26;
  __CVBuffer *v27;
  __CVBuffer *v28;
  CFTypeID v29;
  const void *v30;
  __CVBuffer *v31;
  __CVBuffer *v32;
  CFTypeID v33;
  const void *v34;
  CGColorSpace *v35;
  unsigned int v36;
  uint64_t v37;
  double v38;
  size_t v39;
  double v40;
  size_t v41;
  CFAllocatorRef v42;
  uint64_t PixelBuffer;
  __CVBuffer *v44;
  __CVBuffer *v45;
  CFTypeID v46;
  const void *v47;
  CFTypeID v48;
  uint64_t v49;
  double v50;
  size_t v51;
  double v52;
  size_t v53;
  CFAllocatorRef v54;
  uint64_t CVPixelBufferNotBackedByIOSurface;
  __CFDictionary *v56;
  const void *v57;
  int v58;
  CGColorSpace *v59;
  CGColorSpaceRef ExtendedLinearized;
  CVBufferRef v61;
  uint64_t v62;
  const void *v63;
  CFStringRef *v64;
  CGColorSpaceRef v65;
  CGColorSpace *v66;
  _BOOL4 v67;
  const void **v68;
  const void *v69;
  __CFDictionary *Mutable;
  int v71;
  char v72;
  _BOOL4 v73;
  const void **v74;
  __CFDictionary *MutableCopy;
  const void *v76;
  const void *v77;
  const void *v78;
  char v79;
  uint64_t ColorSpaceFromPixelBuffer;
  uint64_t PixelFormatType;
  __CVBuffer **v82;
  double v83;
  size_t v84;
  double v85;
  size_t v86;
  CFAllocatorRef v87;
  uint64_t v88;
  int HasDisplayP3Primaries;
  CFStringRef *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CFTypeRef cfa;
  CFTypeRef v98;
  CVBufferRef buffer[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  const void *v104;
  CGColorSpace *v105[2];

  cfa = 0;
  v98 = 0;
  if (!cf)
    return 4294950306;
  v15 = a7;
  v17 = a14;
  v18 = a15;
  if (a7 == 6)
  {
    if (a15)
    {
      *a15 = CFRetain(cf);
      if (a14)
      {
        Value = (void *)FigCFDictionaryGetValue();
        if (Value)
          Value = (void *)CFRetain(Value);
        v18 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *a14 = (__CVBuffer *)Value;
LABEL_152:
        if (cfa)
          CFRelease(cfa);
        if (!v20)
          goto LABEL_156;
        goto LABEL_155;
      }
LABEL_151:
      v18 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      goto LABEL_152;
    }
LABEL_174:
    v20 = 0;
    v21 = 0;
    v22 = 4294950306;
    goto LABEL_152;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("FlexRangeGainMap")))
  {
    buffer[0] = 0;
    if (!a14)
      goto LABEL_173;
    v44 = (__CVBuffer *)FigCFDictionaryGetValue();
    if (!v44
      || (v45 = v44, v46 = CFGetTypeID(v44), v46 != CVPixelBufferGetTypeID())
      || (v47 = (const void *)FigCFDictionaryGetValue()) == 0
      || (v94 = a4, v48 = CFGetTypeID(v47), v48 != CVPixelBufferGetTypeID()))
    {
      v22 = 4294950306;
      goto LABEL_137;
    }
    if (v15 == 1)
      v15 = 3;
    if (v15 == 5)
      v49 = 1380411457;
    else
      v49 = 2019963440;
    CMPhotoGetPixelBufferCLAPAsRect(v45);
    v51 = vcvtad_u64_f64(v50);
    v53 = vcvtad_u64_f64(v52);
    if (a3)
    {
      v54 = CFGetAllocator(cf);
      CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v54, v49, v51, v53, 0, 0, 0, 0, buffer);
      if ((_DWORD)CVPixelBufferNotBackedByIOSurface)
        goto LABEL_178;
    }
    else
    {
      CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(a2, v49, v51, v53, 1, 0, 0, 1, 0, 0, buffer);
      if ((_DWORD)CVPixelBufferNotBackedByIOSurface)
        goto LABEL_178;
    }
    v17 = a14;
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("ColorSpace")))
    {
      v57 = (const void *)FigCFDictionaryGetValue();
      if (!v57)
        goto LABEL_118;
      v58 = a11;
      v59 = (CGColorSpace *)CFRetain(v57);
      goto LABEL_112;
    }
    v58 = a11;
    switch(v15)
    {
      case 3:
        if (CMPhotoPixelBufferHasDisplayP3Primaries(v45))
        {
          v64 = (CFStringRef *)MEMORY[0x1E0C9D918];
        }
        else if (CMPhotoPixelBufferHasSRGBPrimaries(v45))
        {
          v64 = (CFStringRef *)MEMORY[0x1E0C9D9E0];
        }
        else
        {
          v64 = (CFStringRef *)MEMORY[0x1E0C9D9C8];
        }
        break;
      case 4:
        if (CMPhotoPixelBufferHasDisplayP3Primaries(v45))
        {
          v64 = (CFStringRef *)MEMORY[0x1E0C9D910];
        }
        else if (CMPhotoPixelBufferHasSRGBPrimaries(v45))
        {
          v64 = (CFStringRef *)MEMORY[0x1E0C9D9D8];
        }
        else
        {
          v64 = (CFStringRef *)MEMORY[0x1E0C9D9C0];
        }
        break;
      case 5:
        v105[0] = 0;
        CVPixelBufferNotBackedByIOSurface = CMPhotoCreateColorSpaceFromPixelBuffer(v45, v105, 1, 0);
        if (!(_DWORD)CVPixelBufferNotBackedByIOSurface)
        {
          if (!v105[0])
          {
            v22 = 4294950303;
            goto LABEL_179;
          }
          ExtendedLinearized = CGColorSpaceCreateExtendedLinearized(v105[0]);
          v58 = a11;
          if (v105[0])
            CFRelease(v105[0]);
LABEL_113:
          if (ExtendedLinearized)
          {
            CVBufferSetAttachment(buffer[0], (CFStringRef)*MEMORY[0x1E0CA8CD8], ExtendedLinearized, kCVAttachmentMode_ShouldPropagate);
            v73 = CGColorSpaceUsesITUR_2100TF(ExtendedLinearized);
            v74 = (const void **)MEMORY[0x1E0CA8F00];
            if (!v73)
              v74 = (const void **)MEMORY[0x1E0CA8F10];
            CMPhotoAddMatrixToBufferIfAllowed(buffer[0], *v74);
            if (a13)
            {
              MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            }
            else
            {
              if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("MeteorMakerNote")))
              {
                FigCFDictionaryGetValue();
                MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              }
              else
              {
                MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!MutableCopy)
                {
                  v22 = 4294950305;
                  v17 = a14;
LABEL_136:
                  CFRelease(ExtendedLinearized);
                  goto LABEL_137;
                }
              }
              v17 = a14;
              if (!a8 && CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("MeteorXMPMetadata")))
              {
                v76 = (const void *)*MEMORY[0x1E0CBC6D0];
                v77 = (const void *)FigCFDictionaryGetValue();
                v78 = v76;
                v17 = a14;
                CFDictionaryAddValue(MutableCopy, v78, v77);
              }
            }
            if (!v94)
            {
              if (v58 | a10)
              {
                v79 = CGColorSpaceContainsFlexGTCInfo();
                if (v58 || (v79 & 1) == 0)
                  FigCFDictionarySetBoolean();
              }
            }
            if (a3)
              FigCFDictionarySetBoolean();
            v22 = CGImageApplyHDRGainMap();
            if (!(_DWORD)v22)
            {
              *v17 = buffer[0];
              buffer[0] = 0;
            }
            if (MutableCopy)
              CFRelease(MutableCopy);
            goto LABEL_136;
          }
LABEL_118:
          v22 = 4294950302;
          goto LABEL_137;
        }
LABEL_178:
        v22 = CVPixelBufferNotBackedByIOSurface;
LABEL_179:
        v17 = a14;
LABEL_137:
        v61 = buffer[0];
        if (!buffer[0])
          goto LABEL_139;
        goto LABEL_138;
      default:
        goto LABEL_118;
    }
    v59 = CGColorSpaceCreateWithName(*v64);
LABEL_112:
    ExtendedLinearized = v59;
    goto LABEL_113;
  }
  v104 = 0;
  v105[0] = 0;
  if (!a14)
  {
LABEL_173:
    v18 = 0;
    goto LABEL_174;
  }
  v26 = (const void *)FigCFDictionaryGetValue();
  if (!v26)
  {
    v56 = 0;
    v35 = 0;
    v32 = 0;
    v28 = 0;
LABEL_54:
    v22 = 4294950306;
    goto LABEL_55;
  }
  v27 = (__CVBuffer *)CFRetain(v26);
  v28 = v27;
  if (!v27
    || (v29 = CFGetTypeID(v27), v29 != CVPixelBufferGetTypeID())
    || (v30 = (const void *)FigCFDictionaryGetValue()) == 0)
  {
    v56 = 0;
    v35 = 0;
    v32 = 0;
    goto LABEL_54;
  }
  v31 = (__CVBuffer *)CFRetain(v30);
  v32 = v31;
  if (!v31
    || (v33 = CFGetTypeID(v31), v33 != CVPixelBufferGetTypeID())
    || (v34 = (const void *)FigCFDictionaryGetValue()) == 0)
  {
    v56 = 0;
    v35 = 0;
    goto LABEL_54;
  }
  v93 = a4;
  v35 = (CGColorSpace *)CFRetain(v34);
  if (!v35)
  {
    v56 = 0;
    v22 = 4294950306;
LABEL_191:
    v17 = a14;
    goto LABEL_55;
  }
  if (v15 == 2)
    v36 = 875704422;
  else
    v36 = 2019963440;
  if (v15 == 5)
    v37 = 1380411457;
  else
    v37 = v36;
  CMPhotoGetPixelBufferCLAPAsRect(v28);
  v39 = vcvtad_u64_f64(v38);
  v41 = vcvtad_u64_f64(v40);
  if (a3)
  {
    v42 = CFGetAllocator(cf);
    PixelBuffer = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v42, v37, v39, v41, 0, 0, 0, 0, v105);
    if ((_DWORD)PixelBuffer)
    {
LABEL_189:
      v22 = PixelBuffer;
LABEL_190:
      v56 = 0;
      goto LABEL_191;
    }
  }
  else
  {
    PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(a2, v37, v39, v41, 1, 0, 0, 1, 0, 0, v105);
    if ((_DWORD)PixelBuffer)
      goto LABEL_189;
  }
  v17 = a14;
  v62 = v93;
  switch(v15)
  {
    case 1:
      goto LABEL_90;
    case 2:
      if (CGColorSpaceUsesITUR_2100TF(v35))
        goto LABEL_79;
      v63 = (const void *)FigCFDictionaryGetValue();
      if (!v63)
      {
        v56 = 0;
        goto LABEL_54;
      }
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      *(_OWORD *)buffer = 0u;
      PixelBuffer = CMPhotoParseFlexRangeMetadataDictionary(v63, buffer);
      if ((_DWORD)PixelBuffer)
        goto LABEL_189;
      if (*((float *)&buffer[1] + 1) == 0.0)
      {
        v62 = v93;
        goto LABEL_90;
      }
      PixelBuffer = FigSignalErrorAt();
      goto LABEL_189;
    case 3:
      if (!CGColorSpaceIsPQBased(v35))
        goto LABEL_79;
      goto LABEL_90;
    case 4:
      if (!CGColorSpaceIsHLGBased(v35))
        goto LABEL_79;
      goto LABEL_90;
    case 5:
      v65 = CGColorSpaceCreateExtendedLinearized(v35);
      if (!v65)
      {
LABEL_79:
        v56 = 0;
        v22 = 4294950302;
        break;
      }
      v66 = v65;
      CFRelease(v35);
      v35 = v66;
LABEL_90:
      CVBufferSetAttachment(v105[0], (CFStringRef)*MEMORY[0x1E0CA8CD8], v35, kCVAttachmentMode_ShouldPropagate);
      v67 = CGColorSpaceUsesITUR_2100TF(v35);
      v68 = (const void **)MEMORY[0x1E0CA8F00];
      if (!v67)
        v68 = (const void **)MEMORY[0x1E0CA8F10];
      CMPhotoAddMatrixToBufferIfAllowed(v105[0], *v68);
      if (a13)
      {
        v56 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      }
      else
      {
        if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("FlexRangeMetadata")))
        {
          v69 = (const void *)FigCFDictionaryGetValue();
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          *(_OWORD *)buffer = 0u;
          PixelBuffer = CMPhotoParseFlexRangeMetadataDictionary(v69, buffer);
          if ((_DWORD)PixelBuffer)
            goto LABEL_189;
          PixelBuffer = CGImageCreateFlexRangeMetadata();
          if ((_DWORD)PixelBuffer)
            goto LABEL_189;
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!Mutable)
          {
            v22 = 4294950305;
            goto LABEL_190;
          }
          v56 = Mutable;
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CBC6D0], v104);
          v71 = a11;
          v62 = v93;
        }
        else
        {
          v56 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v71 = a11;
          if (!v56)
          {
            v22 = 4294950305;
            break;
          }
        }
        CFDictionaryAddValue(v56, (const void *)*MEMORY[0x1E0CBC6A8], v35);
        if (!v62)
        {
          if (v71 | a10)
          {
            v72 = CGColorSpaceContainsFlexGTCInfo();
            if (v71 || (v72 & 1) == 0)
              FigCFDictionarySetBoolean();
          }
        }
      }
      if (a3)
        FigCFDictionarySetBoolean();
      v22 = CGImageApplyHDRGainMap();
      if (!(_DWORD)v22)
      {
        *a14 = v105[0];
        v105[0] = 0;
      }
      break;
    default:
      v22 = FigSignalErrorAt();
      v56 = 0;
      break;
  }
LABEL_55:
  if (v104)
    CFRelease(v104);
  if (v56)
    CFRelease(v56);
  if (v35)
    CFRelease(v35);
  if (v28)
    CFRelease(v28);
  if (v105[0])
    CFRelease(v105[0]);
  if (v32)
  {
    v61 = v32;
LABEL_138:
    CFRelease(v61);
  }
LABEL_139:
  if ((_DWORD)v22)
  {
LABEL_177:
    v18 = 0;
    v20 = 0;
LABEL_182:
    v21 = 0;
    goto LABEL_152;
  }
  if (a15)
    *a15 = 0;
  if (!a12)
    goto LABEL_151;
  ColorSpaceFromPixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(*v17, (CGColorSpace **)&v98, 1, 0);
  if ((_DWORD)ColorSpaceFromPixelBuffer)
  {
    v22 = ColorSpaceFromPixelBuffer;
    goto LABEL_177;
  }
  if (!CGColorSpaceContainsFlexGTCInfo())
    goto LABEL_151;
  v20 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v20)
  {
    v18 = 0;
    v21 = 0;
    v22 = 4294950305;
    goto LABEL_152;
  }
  v18 = (const void *)CGColorSpaceCopyFlexGTCInfo();
  CFDictionaryAddValue(v20, (const void *)*MEMORY[0x1E0CBC6A0], v18);
  if (a9 >= 0.0)
    FigCFDictionarySetFloat();
  PixelFormatType = CVPixelBufferGetPixelFormatType(*v17);
  v82 = v17;
  CMPhotoGetPixelBufferCLAPAsRect(*v17);
  v84 = vcvtad_u64_f64(v83);
  v86 = vcvtad_u64_f64(v85);
  if (a3)
  {
    v87 = CFGetAllocator(cf);
    v88 = CMPhotoCreateCVPixelBufferNotBackedByIOSurface((uint64_t)v87, PixelFormatType, v84, v86, 0, 0, 0, 0, (CVPixelBufferRef *)&cfa);
    if (!(_DWORD)v88)
    {
      FigCFDictionarySetBoolean();
      goto LABEL_164;
    }
    goto LABEL_181;
  }
  v88 = CMPhotoSurfacePoolCreatePixelBuffer(a2, PixelFormatType, v84, v86, 1, 0, 0, 1, 0, 0, (CVPixelBufferRef *)&cfa);
  if ((_DWORD)v88)
  {
LABEL_181:
    v22 = v88;
    goto LABEL_182;
  }
LABEL_164:
  if (!CMPhotoPixelBufferIsITUR_2100TF(*v82))
  {
    v21 = 0;
    v22 = 4294950302;
    goto LABEL_152;
  }
  HasDisplayP3Primaries = CMPhotoPixelBufferHasDisplayP3Primaries(*v82);
  v91 = (CFStringRef *)MEMORY[0x1E0C9DA10];
  if (HasDisplayP3Primaries)
    v91 = (CFStringRef *)MEMORY[0x1E0C9D908];
  v21 = CGColorSpaceCreateWithName(*v91);
  CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v21, 0, 0, (const void *)*MEMORY[0x1E0CA8F10], (CVBufferRef)cfa);
  v92 = CGImageConvertHDRPixelBufferToSDR();
  if ((_DWORD)v92)
  {
    v22 = v92;
    goto LABEL_152;
  }
  if (*v82)
    CFRelease(*v82);
  v22 = 0;
  *v82 = (__CVBuffer *)cfa;
  cfa = 0;
LABEL_155:
  CFRelease(v20);
LABEL_156:
  if (v18)
    CFRelease(v18);
  if (v98)
    CFRelease(v98);
  if (v21)
    CFRelease(v21);
  return v22;
}

uint64_t _addValueToCGMetadata(CGImageMetadata *a1, CFTypeRef value, const __CFString *a3, CFStringRef xmlns)
{
  CGImageMetadataTagRef v6;
  CGImageMetadataTag *v7;
  const __CFString *v8;
  const __CFString *v9;
  uint64_t v10;

  v6 = CGImageMetadataTagCreate(xmlns, CFSTR("HDRToneMap"), a3, kCGImageMetadataTypeDefault, value);
  if (!v6)
    return 4294950305;
  v7 = v6;
  v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@:%@"), CFSTR("HDRToneMap"), a3);
  if (v8)
  {
    v9 = v8;
    if (CGImageMetadataSetTagWithPath(a1, 0, v8, v7))
      v10 = 0;
    else
      v10 = 4294950305;
    CFRelease(v9);
  }
  else
  {
    v10 = 4294950305;
  }
  CFRelease(v7);
  return v10;
}

uint64_t SlimVideoEncoder_CreateSession(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;
  uint64_t result;

  if (!a2)
    return 4294951896;
  pthread_once(&SlimVideoEncoderSessionGetTypeID_onceToken, (void (*)(void))RegisterSlimVideoEncoderSessionClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294951894;
  v4 = Instance;
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t SlimVideoEncoder_StartSessionInternal(const void *a1, unint64_t a2, uint64_t a3)
{
  return _startEncodeSession(a1, 0, a2, a3 + 16);
}

uint64_t _startEncodeSession(CFTypeRef cf, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v7;
  const void *v8;
  uint64_t result;
  const void *v10;
  CFTypeRef v11;
  CMMemoryPoolRef v12;
  _DWORD *v13;
  _DWORD *v14;
  CFTypeRef cfa;

  v7 = HIDWORD(a3);
  cfa = 0;
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 12) = a3;
  v8 = *(const void **)(a4 + 24);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a4 + 24) = cf;
  if (cf)
    CFRetain(cf);
  FigFormatDescriptionRelease();
  *(_QWORD *)(a4 + 32) = 0;
  result = _createPixelBufferAttributesDictionaryForEncoder(*(const __CFAllocator **)(a4 + 24), a3, v7, 0, 1, &cfa);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)a4)
    {
      VTEncoderSessionSetPixelBufferAttributes();
    }
    else
    {
      v10 = *(const void **)(a4 + 96);
      if (v10)
        CFRelease(v10);
      v11 = cfa;
      if (cfa)
        v11 = CFRetain(cfa);
      *(_QWORD *)(a4 + 96) = v11;
    }
    if (cfa)
      CFRelease(cfa);
    v12 = CMMemoryPoolCreate(0);
    *(_QWORD *)(a4 + 56) = v12;
    if (v12
      && (*(_QWORD *)(a4 + 48) = 0,
          v13 = malloc_type_calloc(1uLL, 0x20B0uLL, 0x1030040868D5BD5uLL),
          (*(_QWORD *)(a4 + 64) = v13) != 0))
    {
      v14 = v13;
      result = 0;
      *v14 = a3;
      v14[1] = v7;
      *((_OWORD *)v14 + 522) = xmmword_1A82954C0;
      *((_QWORD *)v14 + 7) = 3 * *(_DWORD *)(a4 + 12) * *(_DWORD *)(a4 + 16) + 0x20000;
      *((_QWORD *)v14 + 17) = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t SlimVideoEncoder_EncodeFrameInternal(uint64_t a1, __CVBuffer *a2, CMTime *a3, __int128 *a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, CFTypeRef), uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  CMTime v15;
  CFTypeRef v16;

  v16 = 0;
  v15 = *a3;
  v13 = *a4;
  v14 = *((_QWORD *)a4 + 2);
  v11 = _encodeFrame(a1 + 16, a2, &v15, (uint64_t)&v13, a5, &v16);
  a6(a7, a8, v11, v16);
  if (v16)
    CFRelease(v16);
  return v11;
}

uint64_t _encodeFrame(uint64_t a1, CVPixelBufferRef pixelBuffer, CMTime *a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  __CVBuffer *v7;
  signed int PixelFormatType;
  const __CFString *Value;
  char v11;
  uint64_t v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  __CVBuffer *v15;
  __CVBuffer *v16;
  const void *v17;
  const void *v18;
  int Width;
  int Height;
  CFTypeRef v21;
  const __CFString *v22;
  unsigned int v23;
  int v24;
  size_t HeightOfPlane;
  int v26;
  int v27;
  size_t v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned __int16 v37;
  CFTypeRef v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  const __CFAllocator *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  __CFDictionary *Mutable;
  int VersionFromPixelBufferInfo;
  const void *SInt32;
  CFDictionaryRef v50;
  const void **v51;
  const void *v52;
  int VideoFormatDescription;
  void *v54;
  char v55;
  size_t PlaneCount;
  uint64_t v57;
  uint64_t v58;
  int v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  int BytesPerRowOfPlane;
  uint64_t v64;
  unsigned int v65;
  unsigned __int16 v66;
  int v67;
  unsigned __int16 v68;
  _QWORD *v69;
  int BytesPerRow;
  uint64_t v71;
  int v72;
  int v73;
  int32x4_t v74;
  int v75;
  int32x4_t v76;
  int v77;
  unsigned int v78;
  const __CFDictionary *v79;
  const __CFDictionary *v80;
  uint64_t v81;
  uint64_t v82;
  OSType v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t DataSizeFromWidthAndHeight;
  void *v90;
  __CVBuffer *v91;
  size_t v92;
  const __CFAllocator *v93;
  const __CFAllocator *Allocator;
  int v95;
  int v96;
  uint64_t v97;
  CFTypeRef v98;
  const __CFData *Data;
  const __CFData *v100;
  UInt8 *BytePtr;
  size_t Length;
  const __CFAllocator *v103;
  char *v104;
  __CVBuffer *v105;
  const void *v106;
  CFTypeRef v107;
  OSStatus v108;
  int v110;
  const __CFString *key;
  const __CFDictionary *theDict;
  const __CFDictionary *extensions;
  int extensionsa;
  size_t dataLength;
  CFTypeRef cf;
  CMSampleTimingInfo sampleTimingArray;
  char *dataPointerOut;
  CMBlockBufferRef v122;
  CMBlockBufferRef blockBufferOut;
  _BYTE error[12];
  UInt8 bytes[4];
  int v126;
  void *values[2];

  v7 = pixelBuffer;
  *(_DWORD *)error = 0;
  v122 = 0;
  blockBufferOut = 0;
  dataPointerOut = 0;
  dataLength = 0;
  cf = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  theDict = CVBufferCopyAttachments(v7, kCVAttachmentMode_ShouldPropagate);
  if (CFDictionaryContainsKey(theDict, CFSTR("StreamName")))
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("StreamName"));
    if (CFStringCompare(Value, CFSTR("Depth"), 1uLL))
    {
      v11 = 1;
      if (CFStringCompare(Value, CFSTR("IR"), 1uLL))
        goto LABEL_7;
    }
    else
    {
      v11 = 0;
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 64) + 144) = v11;
  }
LABEL_7:
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  v12 = *(_QWORD *)(a1 + 64);
  if (!*(_DWORD *)(v12 + 116))
  {
    *(_DWORD *)(v12 + 32) = PixelFormatType;
    if (PixelFormatType == 1650943796)
    {
      v21 = CMGetAttachment(v7, CFSTR("RawImageMetadata"), 0);
      v12 = *(_QWORD *)(a1 + 64);
      if (v21)
      {
        *(_QWORD *)(v12 + 56) = 2 * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 16) + 0x10000;
        v22 = CFSTR("RawImageMetadata");
      }
      else
      {
        v22 = CFSTR("MetadataDictionary");
      }
      key = v22;
      PixelFormatType = 1650943796;
      goto LABEL_19;
    }
LABEL_16:
    key = CFSTR("MetadataDictionary");
    goto LABEL_19;
  }
  v13 = (const __CFDictionary *)CMGetAttachment(v7, CFSTR("RawImage"), 0);
  if (!v13)
  {
    v12 = *(_QWORD *)(a1 + 64);
    goto LABEL_16;
  }
  v14 = v13;
  v15 = (__CVBuffer *)CFDictionaryGetValue(v13, CFSTR("RawImageData"));
  if (!v15)
    goto LABEL_344;
  v16 = v15;
  v17 = CFDictionaryGetValue(v14, CFSTR("RawImageMetadata"));
  if (!v17)
    goto LABEL_344;
  v18 = v17;
  PixelFormatType = 1650943796;
  Width = CVPixelBufferGetWidth(v16);
  Height = CVPixelBufferGetHeight(v16);
  key = CFSTR("RawImageMetadata");
  CMSetAttachment(v16, CFSTR("RawImageMetadata"), v18, 1u);
  v12 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)v12 = Width;
  *(_DWORD *)(v12 + 4) = Height;
  *(_QWORD *)(v12 + 56) = 2 * Width * Height + 0x10000;
  *(_DWORD *)(v12 + 32) = 1650943796;
  v7 = v16;
LABEL_19:
  *(_DWORD *)(v12 + 112) = 0;
  if (a5)
  {
    v23 = *(_DWORD *)(a1 + 72);
    if (v23 <= 5)
    {
      v24 = 1 << v23;
      if ((v24 & 0x26) != 0)
      {
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(v7, 0);
        LODWORD(values[0]) = 0;
        if (!FigCFDictionaryGetIntIfPresent())
          goto LABEL_47;
        if (HeightOfPlane <= SLODWORD(values[0]))
          goto LABEL_346;
        v26 = 3;
        if (PixelFormatType <= 1734505011)
        {
          if (PixelFormatType > 1647589489)
          {
            if (PixelFormatType == 1647589490)
              goto LABEL_45;
            v27 = 1650943796;
LABEL_43:
            if (PixelFormatType == v27)
              goto LABEL_44;
            goto LABEL_234;
          }
          if (PixelFormatType != 1111970369 && PixelFormatType != 1380411457)
          {
LABEL_234:
            v74 = vdupq_n_s32(PixelFormatType);
            if (((PixelFormatType != 1651519798) & vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v74, (int32x4_t)xmmword_1A82954D0), (int16x8_t)vceqq_s32(v74, (int32x4_t)xmmword_1A82954E0))))) == 0)
            {
              if (PixelFormatType > 1735549751)
              {
                if (PixelFormatType == 1919378232)
                  goto LABEL_44;
                v75 = 1735549752;
              }
              else
              {
                if (PixelFormatType == 1650942776)
                  goto LABEL_44;
                v75 = 1734501176;
              }
              if (PixelFormatType != v75)
              {
LABEL_46:
                *(_DWORD *)(*(_QWORD *)(a1 + 64) + 112) = values[0];
LABEL_47:
                *(_DWORD *)&error[4] = 0;
                if (!FigCFDictionaryGetIntIfPresent())
                  goto LABEL_71;
                if (PixelFormatType <= 1734505011)
                {
                  if (PixelFormatType <= 1647589489)
                  {
                    if (PixelFormatType == 1111970369)
                      goto LABEL_64;
                    v29 = 1380411457;
                    goto LABEL_56;
                  }
                  if (PixelFormatType == 1647589490)
                    goto LABEL_64;
                  v30 = 1650943796;
                }
                else
                {
                  if (PixelFormatType > 1815162993)
                  {
                    if (PixelFormatType == 1815162994)
                      goto LABEL_64;
                    if (PixelFormatType == 1919379252)
                      goto LABEL_63;
                    v29 = 1815491698;
LABEL_56:
                    if (PixelFormatType != v29)
                    {
LABEL_238:
                      v76 = vdupq_n_s32(PixelFormatType);
                      if (((PixelFormatType != 1651519798) & vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_s32(v76, (int32x4_t)xmmword_1A82954D0), (int16x8_t)vceqq_s32(v76, (int32x4_t)xmmword_1A82954E0))))) == 0)
                      {
                        if (PixelFormatType > 1735549751)
                        {
                          if (PixelFormatType != 1735549752)
                          {
                            v77 = 1919378232;
LABEL_341:
                            if (PixelFormatType != v77)
                            {
                              v31 = *(_DWORD *)&error[4];
LABEL_69:
                              if (HeightOfPlane >= SLODWORD(values[0]) + (uint64_t)v31)
                              {
                                *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4) = v31;
                                goto LABEL_71;
                              }
LABEL_346:
                              LODWORD(Mutable) = 0;
                              v80 = 0;
                              *(_DWORD *)error = FigSignalErrorAt();
LABEL_355:
                              v55 = 1;
                              v79 = theDict;
                              goto LABEL_317;
                            }
                          }
                        }
                        else if (PixelFormatType != 1650942776)
                        {
                          v77 = 1734501176;
                          goto LABEL_341;
                        }
                      }
LABEL_63:
                      v31 = *(_DWORD *)&error[4];
                      v32 = -*(_DWORD *)&error[4] < 0;
                      v33 = -*(_DWORD *)&error[4] & 7;
                      v34 = error[4] & 7;
                      goto LABEL_65;
                    }
LABEL_64:
                    v31 = *(_DWORD *)&error[4];
                    v32 = -*(_DWORD *)&error[4] < 0;
                    v33 = -*(_DWORD *)&error[4] & 3;
                    v34 = error[4] & 3;
LABEL_65:
                    if (v32)
                      v35 = v34;
                    else
                      v35 = -v33;
                    if (v35)
                      goto LABEL_346;
                    goto LABEL_69;
                  }
                  if (PixelFormatType == 1734505012)
                    goto LABEL_63;
                  v30 = 1735549492;
                }
                if (PixelFormatType == v30)
                  goto LABEL_63;
                goto LABEL_238;
              }
            }
LABEL_44:
            v26 = 7;
          }
        }
        else
        {
          if (PixelFormatType <= 1815162993)
          {
            if (PixelFormatType == 1734505012)
              goto LABEL_44;
            v27 = 1735549492;
            goto LABEL_43;
          }
          if (PixelFormatType != 1815162994 && PixelFormatType != 1815491698)
          {
            v27 = 1919379252;
            goto LABEL_43;
          }
        }
LABEL_45:
        if (((uint64_t)values[0] & v26) != 0)
          goto LABEL_346;
        goto LABEL_46;
      }
      if ((v24 & 0x18) != 0)
      {
        v28 = CVPixelBufferGetHeightOfPlane(v7, 0);
        LODWORD(values[0]) = 0;
        if (FigCFDictionaryGetIntIfPresent())
          *(_DWORD *)(*(_QWORD *)(a1 + 64) + 112) = values[0];
        *(_DWORD *)&error[4] = 0;
        if (FigCFDictionaryGetIntIfPresent())
        {
          if (v28 >= *(int *)&error[4] + (uint64_t)SLODWORD(values[0]))
          {
            *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4) = *(_DWORD *)&error[4];
            goto LABEL_71;
          }
          goto LABEL_346;
        }
      }
    }
  }
LABEL_71:
  CVPixelBufferGetExtendedPixels(v7, 0, 0, 0, (size_t *)(*(_QWORD *)(a1 + 64) + 24));
  if (PixelFormatType > 1651847471)
  {
    if (PixelFormatType > 1651926375)
    {
      if (PixelFormatType == 1652056888)
        goto LABEL_84;
      v37 = 25960;
    }
    else
    {
      if (PixelFormatType == 1651847472)
        goto LABEL_84;
      v37 = 25400;
    }
    v36 = v37 | 0x62760000;
  }
  else if (PixelFormatType > 1650946097)
  {
    if (PixelFormatType == 1650946098)
      goto LABEL_84;
    v36 = 1651519798;
  }
  else
  {
    if (PixelFormatType == 1647392369)
      goto LABEL_84;
    v36 = 1647719528;
  }
  if (PixelFormatType != v36)
    goto LABEL_89;
LABEL_84:
  v38 = CVBufferCopyAttachment(v7, (CFStringRef)*MEMORY[0x1E0CA90D8], 0);
  if (!v38)
  {
LABEL_344:
    LODWORD(Mutable) = 0;
    v80 = 0;
    v110 = -15403;
LABEL_354:
    *(_DWORD *)error = v110;
    goto LABEL_355;
  }
  v39 = v38;
  *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8360) = FigCFNumberGetSInt32();
  CFRelease(v39);
  if (*(_DWORD *)(a1 + 72) == 4)
    goto LABEL_89;
  v40 = *(_QWORD *)(a1 + 64);
  v41 = *(unsigned int *)(v40 + 4);
  if (*(_QWORD *)(v40 + 24) + v41 < (unint64_t)(int)((v41 + 3) & 0xFFFFFFFC))
  {
    LODWORD(Mutable) = 0;
    v80 = 0;
    v110 = -15405;
    goto LABEL_354;
  }
  if ((((_BYTE)v41 + 3) & 4) != 0)
    *(_DWORD *)(v40 + 8364) |= 1u;
LABEL_89:
  if (*(_QWORD *)(a1 + 32))
  {
    extensions = 0;
    goto LABEL_118;
  }
  v42 = *(const __CFAllocator **)(a1 + 24);
  v43 = *(_QWORD *)(a1 + 64);
  v44 = *(_DWORD *)(v43 + 8360);
  v45 = *(_DWORD *)(v43 + 8364);
  extensionsa = *(_DWORD *)(a1 + 8);
  v46 = *(_DWORD *)(a1 + 72);
  values[0] = 0;
  Mutable = CFDictionaryCreateMutable(v42, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_353;
  v126 = 0;
  VersionFromPixelBufferInfo = Slim_GetVersionFromPixelBufferInfo(PixelFormatType, v44, v45, v46, &v126);
  if (VersionFromPixelBufferInfo)
  {
    LODWORD(v52) = VersionFromPixelBufferInfo;
    extensions = 0;
    goto LABEL_108;
  }
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2280], SInt32);
  if ((v46 - 1) > 4)
  {
    v50 = 0;
  }
  else
  {
    *(_DWORD *)bytes = v126;
    values[0] = CFDataCreate(v42, bytes, 4);
    if (!values[0])
    {
      extensions = 0;
      v50 = 0;
      LODWORD(v52) = 0;
      goto LABEL_104;
    }
    *(_QWORD *)&error[4] = CFSTR("slmC");
    v50 = CFDictionaryCreate(v42, (const void **)&error[4], (const void **)values, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
    if (!v50)
    {
      extensions = 0;
      LODWORD(v52) = -15401;
      goto LABEL_104;
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2240], v50);
  }
  v51 = (const void **)MEMORY[0x1E0CA21C8];
  if (!extensionsa)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA21C8], CFSTR("Slim"));
    goto LABEL_102;
  }
  v52 = (const void *)FigCFNumberCreateSInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA21B0], v52);
  CFDictionarySetValue(Mutable, *v51, CFSTR("Slim"));
  if (v52)
  {
    CFRelease(v52);
LABEL_102:
    LODWORD(v52) = 0;
  }
  extensions = Mutable;
  Mutable = 0;
LABEL_104:
  if (SInt32)
    CFRelease(SInt32);
  if (v50)
    CFRelease(v50);
LABEL_108:
  if (values[0])
    CFRelease(values[0]);
  if (Mutable)
    CFRelease(Mutable);
  *(_DWORD *)error = (_DWORD)v52;
  if ((_DWORD)v52)
    goto LABEL_356;
  if (!extensions)
  {
    LODWORD(Mutable) = 0;
LABEL_353:
    v80 = 0;
    v110 = -15401;
    goto LABEL_354;
  }
  if (*(_QWORD *)a1)
    VideoFormatDescription = VTEncoderSessionCreateVideoFormatDescription();
  else
    VideoFormatDescription = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 24), 0x736C696Du, *(_DWORD *)(a1 + 12), *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4), extensions, (CMVideoFormatDescriptionRef *)(a1 + 32));
  *(_DWORD *)error = VideoFormatDescription;
  if (VideoFormatDescription)
  {
LABEL_356:
    LODWORD(Mutable) = 0;
    v55 = 1;
    goto LABEL_334;
  }
LABEL_118:
  if ((*(_DWORD *)(a1 + 72) - 1) >= 5 && !*(_QWORD *)(*(_QWORD *)(a1 + 64) + 136))
  {
    v54 = malloc_type_calloc(1uLL, 0x50uLL, 0x101004022E95A03uLL);
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 136) = v54;
    CreateThreadContext(2, *(_QWORD *)(a1 + 12), (uint64_t)v54);
  }
  v55 = 1;
  *(_DWORD *)error = CVPixelBufferLockBaseAddress(v7, 1uLL);
  if (*(_DWORD *)error)
  {
    LODWORD(Mutable) = 0;
    goto LABEL_334;
  }
  if (CVPixelBufferGetPlaneCount(v7) < 2)
    PlaneCount = 1;
  else
    PlaneCount = CVPixelBufferGetPlaneCount(v7);
  v57 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v57 + 40) = PlaneCount;
  *(_DWORD *)(v57 + 48) = 1;
  if (CMPhotoPixelFormatContainsYCbCr(PixelFormatType))
  {
    v58 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)(v58 + 48) = 2;
    if (PixelFormatType > 1952854577)
    {
      if (PixelFormatType > 2016686641)
      {
        if (PixelFormatType > 2019963441)
        {
          if (PixelFormatType == 2019963956)
            goto LABEL_150;
          v59 = 2019963442;
        }
        else
        {
          if (PixelFormatType == 2016686642)
            goto LABEL_150;
          v59 = 2016687156;
        }
      }
      else if (PixelFormatType > 1953903153)
      {
        if (PixelFormatType == 1953903154)
          goto LABEL_150;
        v59 = 1953903668;
      }
      else
      {
        if (PixelFormatType == 1952854578)
          goto LABEL_150;
        v59 = 1952855092;
      }
    }
    else if (PixelFormatType > 1936077361)
    {
      if (PixelFormatType > 1937125937)
      {
        if (PixelFormatType == 1937125938)
          goto LABEL_150;
        v59 = 1937126452;
      }
      else
      {
        if (PixelFormatType == 1936077362)
          goto LABEL_150;
        v59 = 1936077876;
      }
    }
    else
    {
      if (PixelFormatType <= 875836517)
      {
        if (PixelFormatType != 875704934)
        {
          v59 = 875704950;
          goto LABEL_149;
        }
LABEL_150:
        *(_DWORD *)(v58 + 48) = 1;
        goto LABEL_151;
      }
      if (PixelFormatType == 875836518)
        goto LABEL_150;
      v59 = 875836534;
    }
LABEL_149:
    if (PixelFormatType != v59)
      goto LABEL_151;
    goto LABEL_150;
  }
LABEL_151:
  if (!CVPixelBufferIsPlanar(v7))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 64) = CVPixelBufferGetBaseAddress(v7);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v7);
    v71 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)(v71 + 8) = BytesPerRow;
    v72 = *(_DWORD *)(v71 + 112);
    if (!v72)
      goto LABEL_256;
    if (PixelFormatType > 1651847471)
    {
      if (PixelFormatType > 1735549491)
      {
        if (PixelFormatType > 1815162993)
        {
          if (PixelFormatType > 1919378231)
          {
            if (PixelFormatType == 1919379252)
              goto LABEL_254;
            v73 = 1919378232;
          }
          else
          {
            if (PixelFormatType == 1815162994)
              goto LABEL_254;
            v73 = 1815491698;
          }
        }
        else if (PixelFormatType > 1751410031)
        {
          if (PixelFormatType == 1751410032)
            goto LABEL_254;
          v73 = 1751411059;
        }
        else
        {
          if (PixelFormatType == 1735549492)
            goto LABEL_254;
          v73 = 1735549752;
        }
      }
      else if (PixelFormatType > 1717855599)
      {
        if (PixelFormatType > 1734501175)
        {
          if (PixelFormatType == 1734501176)
            goto LABEL_254;
          v73 = 1734505012;
        }
        else
        {
          if (PixelFormatType == 1717855600)
            goto LABEL_254;
          v73 = 1717856627;
        }
      }
      else
      {
        if (PixelFormatType <= 1651926375)
        {
          if (PixelFormatType != 1651847472)
          {
            v73 = 1651925816;
            goto LABEL_253;
          }
LABEL_254:
          v78 = v72 * BytesPerRow;
          goto LABEL_255;
        }
        if (PixelFormatType == 1651926376)
          goto LABEL_254;
        v73 = 1652056888;
      }
LABEL_253:
      if (PixelFormatType == v73)
        goto LABEL_254;
      goto LABEL_333;
    }
    if (PixelFormatType <= 1278226735)
    {
      if (PixelFormatType <= 1278226487)
      {
        if (PixelFormatType == 825306677 || PixelFormatType == 825437747)
          goto LABEL_254;
        v73 = 1111970369;
        goto LABEL_253;
      }
      if ((PixelFormatType - 1278226488) <= 0x30
        && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0)
      {
        goto LABEL_254;
      }
    }
    else
    {
      if (PixelFormatType <= 1647589489)
      {
        if ((PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
          goto LABEL_254;
        v73 = 1380411457;
        goto LABEL_253;
      }
      if (PixelFormatType > 1650942775)
      {
        if (PixelFormatType == 1650942776 || PixelFormatType == 1650943796)
          goto LABEL_254;
        v73 = 1651519798;
        goto LABEL_253;
      }
      if (PixelFormatType == 1647589490)
        goto LABEL_254;
      if (PixelFormatType == 1647719528)
      {
        v78 = (v72 * BytesPerRow) >> 1;
LABEL_255:
        *(_QWORD *)(v71 + 64) += v78;
        goto LABEL_256;
      }
    }
LABEL_333:
    v55 = 0;
    LODWORD(Mutable) = 0;
    *(_DWORD *)error = FigSignalErrorAt();
LABEL_334:
    v79 = theDict;
    v80 = extensions;
    goto LABEL_317;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40))
  {
    v60 = 0;
    v61 = 64;
    v62 = 8;
    while (1)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + v61) = CVPixelBufferGetBaseAddressOfPlane(v7, v60);
      BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v7, v60);
      v64 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)(v64 + v62) = BytesPerRowOfPlane;
      v65 = *(_DWORD *)(v64 + 112);
      if (v65)
        break;
LABEL_199:
      ++v60;
      v61 += 8;
      v62 += 4;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) <= v60)
        goto LABEL_256;
    }
    if (PixelFormatType <= 1937125937)
    {
      if (PixelFormatType <= 1751527983)
      {
        if (PixelFormatType <= 875704949)
        {
          if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
          {
            v67 = 875704934;
            goto LABEL_194;
          }
          goto LABEL_195;
        }
        if (PixelFormatType == 875704950 || PixelFormatType == 875836518)
          goto LABEL_195;
        v67 = 875836534;
      }
      else if (PixelFormatType <= 1936077359)
      {
        if (PixelFormatType == 1751527984 || PixelFormatType == 1882468912)
          goto LABEL_195;
        v67 = 1885745712;
      }
      else
      {
        if (PixelFormatType <= 1936077875)
        {
          if (PixelFormatType != 1936077360)
          {
            v67 = 1936077362;
            goto LABEL_194;
          }
          goto LABEL_195;
        }
        if (PixelFormatType == 1936077876)
          goto LABEL_195;
        v67 = 1937125936;
      }
    }
    else if (PixelFormatType > 1953903667)
    {
      if (PixelFormatType <= 2016687155)
      {
        if (PixelFormatType == 1953903668 || PixelFormatType == 2016686640)
          goto LABEL_195;
        v67 = 2016686642;
      }
      else
      {
        if (PixelFormatType > 2019963441)
        {
          if (PixelFormatType == 2019963956)
            goto LABEL_195;
          v68 = 12850;
        }
        else
        {
          if (PixelFormatType == 2016687156)
            goto LABEL_195;
          v68 = 12848;
        }
        v67 = v68 | 0x78660000;
      }
    }
    else
    {
      if (PixelFormatType <= 1952854577)
      {
        if (PixelFormatType != 1937125938 && PixelFormatType != 1937126452)
        {
          v66 = 12848;
          goto LABEL_177;
        }
LABEL_195:
        if (v60)
        {
          v69 = (_QWORD *)(v64 + v61);
          v65 /= *(_DWORD *)(v64 + 48);
        }
        else
        {
          v69 = (_QWORD *)(v64 + 64);
        }
        *v69 += v65 * BytesPerRowOfPlane;
        goto LABEL_199;
      }
      if (PixelFormatType <= 1953903151)
      {
        if (PixelFormatType != 1952854578)
        {
          v66 = 13364;
LABEL_177:
          v67 = v66 | 0x74660000;
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      if (PixelFormatType == 1953903152)
        goto LABEL_195;
      v67 = 1953903154;
    }
LABEL_194:
    if (PixelFormatType != v67)
    {
      v55 = 0;
      LODWORD(Mutable) = 0;
      *(_DWORD *)error = -15405;
      goto LABEL_334;
    }
    goto LABEL_195;
  }
LABEL_256:
  v79 = theDict;
  v80 = extensions;
  switch(*(_DWORD *)(a1 + 72))
  {
    case 1:
    case 3:
    case 5:
      v81 = *(_QWORD *)(a1 + 64);
      v82 = *(_QWORD *)(v81 + 128);
      if (v82)
      {
        *(_QWORD *)(v81 + 56) = v82 + 0x80000;
      }
      else
      {
        v83 = CVPixelBufferGetPixelFormatType(v7);
        v84 = *(_DWORD *)(a1 + 12);
        v85 = *(_DWORD *)(a1 + 16);
        v86 = (v84 - 1) & 0xF;
        if (1 - v84 >= 0)
          v86 = -((1 - v84) & 0xF);
        v87 = v84 - v86 + 15;
        v88 = (v85 - 1) & 7;
        if (1 - v85 >= 0)
          v88 = -((1 - v85) & 7);
        DataSizeFromWidthAndHeight = CMPhotoGetDataSizeFromWidthAndHeight(v83, v87, v85 - v88 + 7);
        if (DataSizeFromWidthAndHeight)
        {
          v90 = (void *)(DataSizeFromWidthAndHeight + 0x80000);
LABEL_267:
          *(_QWORD *)(*(_QWORD *)(a1 + 64) + 56) = v90;
        }
      }
LABEL_269:
      v91 = *(__CVBuffer **)(a1 + 48);
      if (v91)
      {
        LODWORD(Mutable) = 1;
        *(_DWORD *)error = CVPixelBufferLockBaseAddress(v91, 1uLL);
        if (*(_DWORD *)error)
        {
LABEL_271:
          v55 = 0;
          LODWORD(Mutable) = 0;
          break;
        }
      }
      else
      {
        LODWORD(Mutable) = 0;
      }
      v92 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 56);
      if (!v92)
        goto LABEL_277;
      v93 = *(const __CFAllocator **)(a1 + 24);
      Allocator = CMMemoryPoolGetAllocator(*(CMMemoryPoolRef *)(a1 + 56));
      *(_DWORD *)error = CMBlockBufferCreateWithMemoryBlock(v93, 0, v92, Allocator, 0, 0, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 56), 1u, &blockBufferOut);
      if (*(_DWORD *)error)
        goto LABEL_343;
      CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
      if (dataPointerOut)
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 88) = dataPointerOut;
LABEL_277:
        switch(*(_DWORD *)(a1 + 72))
        {
          case 1:
            v95 = SlimXEncodeFrame(*(_QWORD *)(a1 + 64), &dataLength);
            goto LABEL_288;
          case 2:
            v95 = YZipEncodeFrame(*(_QWORD *)(a1 + 64), (uint64_t *)&dataLength);
            goto LABEL_288;
          case 3:
            v95 = HrlcEncodeFrame(*(_QWORD *)(a1 + 64), &dataLength);
            goto LABEL_288;
          case 4:
            *(_DWORD *)error = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 24), 0, 0, &v122);
            if (*(_DWORD *)error)
              goto LABEL_343;
            v95 = UncompressedCopyFrame(*(unsigned int **)(a1 + 64), v7, v122, &dataLength);
            goto LABEL_288;
          case 5:
            v97 = *(_QWORD *)(a1 + 64);
            if (*(_DWORD *)(v97 + 112))
            {
              v55 = 0;
              v96 = -15405;
              goto LABEL_363;
            }
            v95 = IntcEncodeFrame(v7, v97, &dataLength);
LABEL_288:
            *(_DWORD *)error = v95;
            if (!v95)
            {
LABEL_289:
              v98 = CMGetAttachment(v7, key, 0);
              if (v98)
              {
                Data = CFPropertyListCreateData(*(CFAllocatorRef *)(a1 + 24), v98, kCFPropertyListXMLFormat_v1_0, 0, (CFErrorRef *)error);
                v100 = Data;
                if (Data)
                {
                  BytePtr = (UInt8 *)CFDataGetBytePtr(Data);
                  Length = CFDataGetLength(v100);
                  if (*(_DWORD *)(a1 + 72) == 4)
                  {
                    LODWORD(values[0]) = 1635018093;
                    if (!v122)
                    {
                      *(_DWORD *)error = -15402;
LABEL_360:
                      v55 = 0;
LABEL_316:
                      CFRelease(v100);
                      goto LABEL_317;
                    }
                    v103 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
                    *(_DWORD *)error = CMBlockBufferAppendMemoryBlock(v122, values, 4uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, 4uLL, 2u);
                    if (*(_DWORD *)error)
                      goto LABEL_360;
                    dataLength += 4;
                    *(_DWORD *)error = CMBlockBufferAppendMemoryBlock(v122, BytePtr, Length, v103, 0, 0, Length, 2u);
                    if (*(_DWORD *)error)
                      goto LABEL_360;
                  }
                  else
                  {
                    v104 = dataPointerOut;
                    if (!dataPointerOut)
                    {
                      v55 = 0;
                      *(_DWORD *)error = -15402;
                      goto LABEL_316;
                    }
                    dataPointerOut += dataLength;
                    v104[dataLength] = 109;
                    dataPointerOut[1] = 101;
                    dataPointerOut[2] = 116;
                    dataPointerOut[3] = 97;
                    dataPointerOut += 4;
                    dataLength += 4;
                    memcpy(dataPointerOut, BytePtr, Length);
                  }
                  dataLength += Length;
                }
              }
              else
              {
                v100 = 0;
              }
              if (*(_DWORD *)(a1 + 72) == 4)
                goto LABEL_303;
              if (!blockBufferOut)
              {
                v55 = 0;
                *(_DWORD *)error = -15402;
                goto LABEL_315;
              }
              *(_DWORD *)error = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 24), blockBufferOut, 0, dataLength, 1u, &v122);
              if (*(_DWORD *)error)
              {
                v55 = 0;
              }
              else
              {
LABEL_303:
                v105 = *(__CVBuffer **)(a1 + 48);
                if (v105)
                {
                  CVPixelBufferUnlockBaseAddress(v105, 1uLL);
                  v106 = *(const void **)(a1 + 48);
                  if (v106)
                    CFRelease(v106);
                  LODWORD(Mutable) = 0;
                }
                CVPixelBufferUnlockBaseAddress(v7, 1uLL);
                if (*(_BYTE *)(a1 + 40))
                {
                  if (v7)
                    v107 = CFRetain(v7);
                  else
                    v107 = 0;
                  *(_QWORD *)(a1 + 48) = v107;
                }
                sampleTimingArray.presentationTimeStamp = *a3;
                sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
                *(_OWORD *)&sampleTimingArray.duration.value = *(_OWORD *)a4;
                sampleTimingArray.duration.epoch = *(_QWORD *)(a4 + 16);
                v55 = 1;
                v108 = CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 24), v122, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 32), 1, 1, &sampleTimingArray, 1, &dataLength, (CMSampleBufferRef *)&cf);
                *(_DWORD *)error = v108;
                if (a6 && !v108)
                {
                  *a6 = cf;
                  cf = 0;
                  v55 = 1;
                }
              }
LABEL_315:
              if (!v100)
                goto LABEL_317;
              goto LABEL_316;
            }
LABEL_343:
            v55 = 0;
            break;
          default:
            *(_DWORD *)error = SlimEncodeFrame(*(_QWORD *)(a1 + 64));
            if (*(_DWORD *)error)
              goto LABEL_343;
            if (dataLength)
              goto LABEL_289;
            v55 = 0;
            v96 = -15402;
            goto LABEL_363;
        }
      }
      else
      {
        v55 = 0;
        v96 = -15403;
LABEL_363:
        *(_DWORD *)error = v96;
      }
      break;
    case 2:
      values[0] = 0;
      *(_DWORD *)error = YZipEncodeFindDataLength(*(_QWORD *)(a1 + 64), (uint64_t *)values);
      if (*(_DWORD *)error)
        goto LABEL_271;
      v90 = values[0];
      goto LABEL_267;
    case 4:
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 56) = 0;
      goto LABEL_269;
    default:
      goto LABEL_269;
  }
LABEL_317:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v122)
    CFRelease(v122);
  if (cf)
    CFRelease(cf);
  if (v80)
    CFRelease(v80);
  if (v79)
    CFRelease(v79);
  if ((v55 & 1) == 0)
    CVPixelBufferUnlockBaseAddress(v7, 1uLL);
  if ((_DWORD)Mutable)
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 48), 1uLL);
  return *(unsigned int *)error;
}

void SlimVideoEncoder_SetPropertyInternal(uint64_t a1, uint64_t a2, const void *a3)
{
  _setProperty(a1 + 16, a2, a3);
}

void _setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID v5;
  CFTypeID v6;
  CFTypeID v7;
  CFTypeID v8;
  CFTypeRef cf;

  if (FigCFEqual())
  {
    if (a3)
    {
      v5 = CFGetTypeID(a3);
      if (v5 == CFBooleanGetTypeID())
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 64) + 116) = CFBooleanGetValue((CFBooleanRef)a3);
        return;
      }
    }
    goto LABEL_31;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (!a3)
        goto LABEL_31;
      v7 = CFGetTypeID(a3);
      if (v7 != CFNumberGetTypeID())
        goto LABEL_31;
      LODWORD(cf) = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &cf);
      if (cf <= 0xF)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8352) = (_DWORD)cf;
        return;
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        if (FigCFEqual())
        {
          _setPropertyInputPixelFormat(a1, a3);
          return;
        }
        if (FigCFEqual())
        {
          _setPropertyQuality(a1, (const __CFNumber *)a3);
          return;
        }
        if (FigCFEqual())
        {
          _setPropertyTotalByteBudget(a1, a3);
          return;
        }
        goto LABEL_31;
      }
      if (!a3 || (v8 = CFGetTypeID(a3), v8 != CFNumberGetTypeID()))
      {
LABEL_31:
        FigSignalErrorAt();
        return;
      }
      LODWORD(cf) = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &cf);
      if (cf <= 0xFF)
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8356) = (_DWORD)cf;
        return;
      }
    }
    FigSignalErrorAt();
    return;
  }
  if (!a3)
    goto LABEL_31;
  v6 = CFGetTypeID(a3);
  if (v6 != CFNumberGetTypeID())
    goto LABEL_31;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(a1 + 72));
  if (*(_QWORD *)a1)
  {
    cf = 0;
    if (!_createPixelBufferAttributesDictionaryForEncoder(*(const __CFAllocator **)(a1 + 24), *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 72), &cf))
    {
      VTEncoderSessionSetPixelBufferAttributes();
      if (cf)
        CFRelease(cf);
    }
  }
}

uint64_t SlimVideoEncoder_CopyPixelBufferAttributesInternal(uint64_t a1, CFTypeRef *a2)
{
  const void *v2;

  v2 = *(const void **)(a1 + 112);
  if (!v2)
    return FigSignalErrorAt();
  *a2 = CFRetain(v2);
  return 0;
}

uint64_t RegisterSlimVideoEncoderSessionClass()
{
  uint64_t result;

  sSlimVideoEncoderSessionClass = 0;
  unk_1EE999DA0 = "SlimVideoEncoderSessionClass";
  qword_1EE999DA8 = (uint64_t)SlimVideoEncoderSessionClass_Init;
  unk_1EE999DB0 = 0;
  qword_1EE999DB8 = (uint64_t)SlimVideoEncoderSessionClass_Finalize;
  unk_1EE999DC0 = 0;
  qword_1EE999DC8 = 0;
  unk_1EE999DD0 = SlimVideoEncoderSessionClass_CopyFormattingDesc;
  qword_1EE999DD8 = 0;
  result = _CFRuntimeRegisterClass();
  sSlimVideoEncoderSessionTypeID = result;
  return result;
}

double SlimVideoEncoderSessionClass_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void SlimVideoEncoderSessionClass_Finalize(uint64_t a1)
{
  _finalizeEncoderStorage(a1 + 16);
}

__CFString *SlimVideoEncoderSessionClass_CopyFormattingDesc(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SlimVideoEncoder %p>"), a1);
  return Mutable;
}

void _finalizeEncoderStorage(uint64_t a1)
{
  uint64_t *v2;
  OpaqueCMMemoryPool *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = *(uint64_t **)(a1 + 64);
  if (v2)
  {
    if (v2[17])
    {
      DestroyThreadContext(v2[17]);
      free(*(void **)(*(_QWORD *)(a1 + 64) + 136));
      v2 = *(uint64_t **)(a1 + 64);
      v2[17] = 0;
    }
    free(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(OpaqueCMMemoryPool **)(a1 + 56);
  if (v3)
  {
    CMMemoryPoolFlush(v3);
    CMMemoryPoolInvalidate(*(CMMemoryPoolRef *)(a1 + 56));
    v4 = *(const void **)(a1 + 56);
    if (v4)
      CFRelease(v4);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v5 = *(const void **)(a1 + 96);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(a1 + 88);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)a1 = 0;
  v7 = *(const void **)(a1 + 32);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 32) = 0;
  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t _createPixelBufferAttributesDictionaryForEncoder(const __CFAllocator *a1, uint64_t a2, int a3, int a4, int a5, _QWORD *a6)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  CFMutableArrayRef v12;
  CFMutableArrayRef v13;
  uint64_t i;
  CFNumberRef v15;
  CFNumberRef v16;
  unsigned int v17;
  int v18;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v20;
  int32x4_t v22;
  int v23;

  if (a5 < 6)
  {
    Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 0;
    v11 = Mutable;
    v12 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    if (!v12)
    {
      v20 = 0;
LABEL_31:
      CFRelease(v11);
      return v20;
    }
    v13 = v12;
    for (i = 0; i != 248; i += 4)
    {
      v15 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&slimPixelFormatList + i);
      if (!v15)
      {
        CFRelease(v11);
        CFRelease(v13);
        return 0;
      }
      v16 = v15;
      CFArrayAppendValue(v13, v15);
      CFRelease(v16);
    }
    CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E0CA9040], v13);
    CFRelease(v13);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if (a5 > 5)
    {
LABEL_28:
      PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      v20 = PixelBufferAttributesWithIOSurfaceSupport;
      if (a6)
      {
        if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
          *a6 = 0;
      }
      goto LABEL_31;
    }
    if (((1 << a5) & 0x26) == 0)
    {
      if (((1 << a5) & 0x18) == 0)
        goto LABEL_28;
LABEL_27:
      FigCFDictionarySetInt32();
      goto LABEL_28;
    }
    v17 = (a3 + 3) & 0xFFFFFFFC;
    if (a4 <= 1734505011)
    {
      if (a4 <= 1647589489)
      {
        if (a4 == 1111970369 || a4 == 1380411457)
          goto LABEL_26;
        goto LABEL_33;
      }
      if (a4 == 1647589490)
        goto LABEL_26;
      v18 = 1650943796;
    }
    else if (a4 <= 1815162993)
    {
      if (a4 == 1734505012)
      {
LABEL_25:
        v17 = (a3 + 7) & 0xFFFFFFF8;
        goto LABEL_26;
      }
      v18 = 1735549492;
    }
    else
    {
      if (a4 == 1815162994 || a4 == 1815491698)
        goto LABEL_26;
      v18 = 1919379252;
    }
    if (a4 == v18)
      goto LABEL_25;
LABEL_33:
    if (a4 != 1651519798)
    {
      v22 = vdupq_n_s32(a4);
      if (vaddvq_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_1A82954D0), (int16x8_t)vceqq_s32(v22, (int32x4_t)xmmword_1A82954E0)), (int8x16_t)xmmword_1A82954F0)))goto LABEL_25;
    }
    if (a4 > 1735549751)
    {
      if (a4 == 1919378232)
        goto LABEL_25;
      v23 = 1735549752;
    }
    else
    {
      if (a4 == 1650942776)
        goto LABEL_25;
      v23 = 1734501176;
    }
    if (a4 == v23)
      goto LABEL_25;
LABEL_26:
    CMPhotoGetBytesPerPixelForPixelFormat(a4);
    FigCFDictionarySetInt32();
    if (v17 == a3)
      goto LABEL_28;
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t _setPropertyInputPixelFormat(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t v5;
  CFTypeRef cfa;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, (void *)(a1 + 76));
  if (!*(_QWORD *)a1)
    return 0;
  cfa = 0;
  v5 = _createPixelBufferAttributesDictionaryForEncoder(*(const __CFAllocator **)(a1 + 24), *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 72), &cfa);
  if (!(_DWORD)v5)
  {
    VTEncoderSessionSetPixelBufferAttributes();
    if (cfa)
      CFRelease(cfa);
  }
  return v5;
}

double _setPropertyQuality(uint64_t a1, const __CFNumber *cf)
{
  CFTypeID v4;
  double v5;
  double result;
  double valuePtr;

  if (cf && (v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()))
  {
    valuePtr = 0.0;
    CFNumberGetValue(cf, kCFNumberDoubleType, &valuePtr);
    v5 = valuePtr;
    if (valuePtr < 0.0 || valuePtr > 1.0)
    {
      FigSignalErrorAt();
    }
    else
    {
      *(double *)(a1 + 80) = valuePtr;
      result = 7.0 - floor(v5 * 7.0);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 120) = (int)result;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return result;
}

uint64_t _setPropertyTotalByteBudget(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, (void *)(*(_QWORD *)(a1 + 64) + 128));
  *(_DWORD *)(*(_QWORD *)(a1 + 64) + 120) = -1;
  return 0;
}

uint64_t CMPhotoCompressionPluginCreate(const void *a1, const void *a2, const void *a3, const void *a4, uint64_t a5, const __CFDictionary *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  char *v15;
  uint64_t v16;
  int v17;
  int IsTileEncoderAvailable;
  int IntIfPresent;
  int v20;
  BOOL v21;
  uint64_t (**v22)();
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;
  __int128 v27;
  uint64_t v29;
  int v32;
  char v33;
  __int16 v34;

  pthread_once(&_checkFigNoteTraceOnce_onceToken_1, (void (*)(void))_registerFigNoteTrace_1);
  v15 = 0;
  v16 = 4294950306;
  if (!a7 || !a9)
    goto LABEL_37;
  v15 = (char *)malloc_type_calloc(1uLL, 0xA0uLL, 0x10E004037F8FD11uLL);
  if (!v15)
  {
    v16 = 4294950305;
    goto LABEL_37;
  }
  v17 = *(_DWORD *)(a5 + 4);
  IsTileEncoderAvailable = CMPhotoIsTileEncoderAvailable(v17);
  v34 = 0;
  v33 = 0;
  if (!a6)
    goto LABEL_10;
  CMPhotoCFDictionaryGetBooleanIfPresent(a6, CFSTR("PreferSoftwareCodec"), (_BYTE *)&v34 + 1);
  CMPhotoCFDictionaryGetBooleanIfPresent(a6, CFSTR("RequireHardwareCodec"), &v34);
  CMPhotoCFDictionaryGetBooleanIfPresent(a6, CFSTR("UseVTCompression"), &v33);
  v32 = 0;
  IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(a6, CFSTR("QualityControllerType"), &v32);
  if ((_BYTE)v34 && IntIfPresent && v32 == 5)
    goto LABEL_39;
  if ((_BYTE)v34)
  {
    v20 = 0;
    HIBYTE(v34) = 0;
  }
  else
  {
LABEL_10:
    v20 = 1;
  }
  switch(v17)
  {
    case 1936484717:
      if (!v20)
        goto LABEL_36;
      v22 = &CMPhotoCompressionPluginClassSlim;
      break;
    case 1785750887:
      v22 = &CMPhotoCompressionPluginClassJPEG;
      break;
    case 1752589105:
      if (CMPhotoSupportsHEVCEncode())
      {
        if (v33)
          v21 = 1;
        else
          v21 = IsTileEncoderAvailable == 0;
        v22 = &CMPhotoCompressionPluginClassVideoToolbox;
        if (!v21)
          v22 = &CMPhotoCompressionPluginClassVideoToolbox_Tile;
        break;
      }
LABEL_39:
      v29 = FigSignalErrorAt();
      v22 = 0;
      if ((_DWORD)v29)
      {
        v16 = v29;
        goto LABEL_37;
      }
      break;
    default:
LABEL_36:
      v16 = 4294950298;
      goto LABEL_37;
  }
  *((_QWORD *)v15 + 4) = v22;
  if (a1)
    v23 = CFRetain(a1);
  else
    v23 = 0;
  *(_QWORD *)v15 = v23;
  if (a2)
    v24 = CFRetain(a2);
  else
    v24 = 0;
  *((_QWORD *)v15 + 1) = v24;
  v25 = a3;
  if (a3)
    v25 = CFRetain(a3);
  *((_QWORD *)v15 + 2) = v25;
  v26 = a4;
  if (a4)
    v26 = CFRetain(a4);
  *((_QWORD *)v15 + 3) = v26;
  v15[48] = *(_BYTE *)(a5 + 8);
  *((int32x2_t *)v15 + 5) = vrev64_s32(*(int32x2_t *)a5);
  *((_QWORD *)v15 + 16) = a7;
  *((_QWORD *)v15 + 17) = a8;
  v27 = *(_OWORD *)(a5 + 12);
  *(_QWORD *)(v15 + 100) = *(_QWORD *)(a5 + 28);
  *(_OWORD *)(v15 + 84) = v27;
  *((_DWORD *)v15 + 13) = *(_DWORD *)(a5 + 36);
  v15[56] = *(_BYTE *)(a5 + 40);
  *((_DWORD *)v15 + 20) = *(_DWORD *)(a5 + 64);
  *((_DWORD *)v15 + 15) = *(_DWORD *)(a5 + 44);
  *((_OWORD *)v15 + 4) = *(_OWORD *)(a5 + 48);
  *((_QWORD *)v15 + 14) = *(_QWORD *)(a5 + 72);
  v15[120] = *(_BYTE *)(a5 + 80);
  v16 = (**((uint64_t (***)(void *, const __CFDictionary *))v15 + 4))(v15, a6);
  if (!(_DWORD)v16)
  {
    *a9 = v15;
    v15 = 0;
  }
LABEL_37:
  CMPhotoCompressionPluginDispose((CFTypeRef *)v15);
  return v16;
}

void CMPhotoCompressionPluginDispose(CFTypeRef *a1)
{
  void (**v2)(CFTypeRef *);
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;

  if (a1)
  {
    v2 = (void (**)(CFTypeRef *))a1[4];
    if (v2)
      v2[2](a1);
    if (*a1)
      CFRelease(*a1);
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    v5 = a1[3];
    if (v5)
      CFRelease(v5);
    free(a1);
  }
}

uint64_t CMPhotoCompressionPluginPrepare(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 24);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t CMPhotoCompressionPluginEncode(uint64_t a1, __CVBuffer *a2, uint64_t a3, _QWORD *a4, uint64_t *a5, int a6, uint64_t a7, uint64_t a8)
{
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t (*v22)(uint64_t, __CVBuffer *, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t);
  __int128 v23;
  __int128 v24;
  _OWORD v26[2];
  _OWORD v27[2];

  if (!a1)
    return 4294950306;
  if (*((_OWORD *)a4 + 1) == 0)
  {
    *a4 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect(a2));
    a4[1] = vcvtad_u64_f64(v16);
    a4[2] = vcvtad_u64_f64(v17);
    a4[3] = vcvtad_u64_f64(v18);
  }
  v19 = *a5;
  if (a6)
  {
    v19 += *a4;
    v20 = a5[1] + a4[1];
    *a5 = v19;
    a5[1] = v20;
  }
  else
  {
    v20 = a5[1];
  }
  if (!(v19 | v20) && *((_OWORD *)a5 + 1) == 0)
  {
    v21 = *((_OWORD *)a4 + 1);
    *(_OWORD *)a5 = *(_OWORD *)a4;
    *((_OWORD *)a5 + 1) = v21;
  }
  v22 = *(uint64_t (**)(uint64_t, __CVBuffer *, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 32);
  v23 = *((_OWORD *)a4 + 1);
  v27[0] = *(_OWORD *)a4;
  v27[1] = v23;
  v24 = *((_OWORD *)a5 + 1);
  v26[0] = *(_OWORD *)a5;
  v26[1] = v24;
  return v22(a1, a2, a3, v27, v26, a7, a8);
}

uint64_t CMPhotoCompressionPluginCompleteEncodes(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 40);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoCompressionPluginPixelTransfer(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(uint64_t, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v9;
  __int128 v10;
  _OWORD v12[2];
  _OWORD v13[2];

  if (!a1)
    return 4294950306;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 48);
  if (!v8)
    return 4294950302;
  v9 = a3[1];
  v13[0] = *a3;
  v13[1] = v9;
  v10 = a4[1];
  v12[0] = *a4;
  v12[1] = v10;
  return v8(a1, a2, v13, v12, a5, a6, a7, a8);
}

uint64_t CMPhotoCompressionPluginCanBeReused(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t);
  __int128 v11;
  __int128 v12;
  uint64_t result;
  _OWORD v14[5];
  uint64_t v15;
  char v16;

  v16 = 0;
  if (!a1)
    return 4294950306;
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    return 4294950306;
  v9 = *(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))(v8 + 8);
  if (!v9)
    return 4294950302;
  v11 = *(_OWORD *)(a2 + 48);
  v14[2] = *(_OWORD *)(a2 + 32);
  v14[3] = v11;
  v14[4] = *(_OWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 80);
  v12 = *(_OWORD *)(a2 + 16);
  v14[0] = *(_OWORD *)a2;
  v14[1] = v12;
  result = v9(a1, v14, a3, a4, a5, a6, &v16, a8);
  if (a7)
  {
    if (!(_DWORD)result)
      *a7 = v16;
  }
  return result;
}

uint64_t CMPhotoCompressionPluginCopyReconstructionPixelBufferAttributes(uint64_t a1)
{
  uint64_t v1;

  if (a1 && (v1 = *(_QWORD *)(a1 + 32)) != 0)
    return (*(uint64_t (**)(void))(v1 + 56))();
  else
    return 4294950306;
}

uint64_t SlimCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t Session;
  const void *Value;
  CFTypeRef v11;
  unsigned int v12;
  uint64_t TargetingPThreadRootQueueWithPriority;
  uint64_t v14;
  _OWORD v16[10];
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;

  pthread_once(&_checkFigNoteTraceOnce_onceToken_2, (void (*)(void))_registerFigNoteTrace_2);
  v20 = -1;
  v21 = -1;
  v18 = 9;
  v19 = 2;
  v17 = 0;
  if (*(_DWORD *)(a1 + 40) == 1936484717)
  {
    v4 = (char *)malloc_type_calloc(1uLL, 0x88uLL, 0x10E0040A9A32FFAuLL);
    if (!v4)
      return 4294950305;
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 112);
    if (v7 >= 4)
      LODWORD(v7) = 4;
    if (v7 <= 1)
      LODWORD(v7) = 1;
    *((_DWORD *)v4 + 12) = v7;
    v8 = (uint64_t *)(v4 + 16);
    do
    {
      Session = SlimVideoEncoder_CreateSession(*(_QWORD *)a1, v8);
      if ((_DWORD)Session)
      {
        v14 = Session;
        goto LABEL_26;
      }
      ++v6;
      ++v8;
    }
    while (v6 < *((int *)v5 + 12));
    *((_DWORD *)v5 + 13) = 0;
    if (a2)
    {
      if (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("QualityControllerType"), &v18))
        Value = CFDictionaryGetValue(a2, CFSTR("QualityControllerParameters"));
      else
        Value = 0;
      CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("SlimCodecFlavor"), &v19);
      if (v19 > 6
        || (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("SlimXBitShift"), &v21), (v21 - 16) < 0xFFFFFFEF)
        || (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("SlimHrlcRunLengthValue"), &v20),
            (v20 - 256) < 0xFFFFFEFF))
      {
        v14 = 4294950306;
LABEL_26:
        memset(v16, 0, 144);
        v16[9] = (unint64_t)v5;
        SlimCompressionPluginClass_dispose((uint64_t)v16);
        return v14;
      }
      CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("SyncEncode"), v5 + 72);
      CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("ThreadPriority"), &v17);
      *((_DWORD *)v5 + 28) = v18;
      if (Value)
        v11 = CFRetain(Value);
      else
        v11 = 0;
    }
    else
    {
      v11 = 0;
      *((_DWORD *)v5 + 28) = 9;
    }
    *((_QWORD *)v5 + 15) = v11;
    v12 = v19;
    *((_DWORD *)v5 + 15) = v20;
    *((_DWORD *)v5 + 16) = v12;
    *((_DWORD *)v5 + 14) = v21;
    if (v5[72]
      || (TargetingPThreadRootQueueWithPriority = FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority(),
          (*((_QWORD *)v5 + 10) = TargetingPThreadRootQueueWithPriority) != 0))
    {
      v14 = 0;
      *(_QWORD *)(a1 + 144) = v5;
      return v14;
    }
    v14 = 4294950305;
    goto LABEL_26;
  }
  return FigSignalErrorAt();
}

void SlimCompressionPluginClass_dispose(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t i;
  const void *v5;
  const void *v6;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 144);
    v2 = *(NSObject **)(v1 + 80);
    if (v2)
    {
      dispatch_barrier_sync(v2, &__block_literal_global_9);
      v3 = *(NSObject **)(v1 + 80);
      if (v3)
        dispatch_release(v3);
    }
    for (i = 16; i != 48; i += 8)
    {
      v5 = *(const void **)(v1 + i);
      if (v5)
        CFRelease(v5);
    }
    CMPhotoVideoQualityControllerDispose(*(CFTypeRef **)(v1 + 128));
    v6 = *(const void **)(v1 + 120);
    if (v6)
      CFRelease(v6);
    free((void *)v1);
  }
}

uint64_t SlimCompressionPluginClass_prepare(uint64_t a1, unint64_t a2, unint64_t a3)
{
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t started;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  void *v19;
  _QWORD context[2];

  cf = 0;
  v19 = 0;
  if (!a1)
  {
    v8 = 4294950306;
    goto LABEL_39;
  }
  if (a2 | a3)
  {
    Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = *(_QWORD *)(a1 + 144);
      if (v7)
      {
        CMPhotoVideoQualityControllerDispose(*(CFTypeRef **)(v7 + 128));
        *(_QWORD *)(v7 + 128) = 0;
        v8 = 4294950190;
        if (!(a2 >> 31) && !(a3 >> 31))
        {
          v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          if (*MEMORY[0x1E0CA1FC0] == 1)
            kdebug_trace();
          if (*(int *)(v7 + 48) < 1)
          {
LABEL_13:
            started = CMPhotoVideoQualityControllerCreate(*(const void **)a1, *(_DWORD *)(a1 + 60), *(_DWORD *)(v7 + 112), a2, a3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(const void **)(v7 + 120), *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 48), &v19);
            if (!(_DWORD)started)
            {
              started = CMPhotoVideoQualityControllerSetSessionProperties((uint64_t)v19);
              if (!(_DWORD)started)
              {
                v12 = *(_DWORD *)(v7 + 56);
                if (v12 != -1)
                  CMPhotoCFDictionarySetInt(Mutable, CFSTR("SlimXBitShift"), v12);
                v13 = *(_DWORD *)(v7 + 60);
                if (v13 != -1)
                  CMPhotoCFDictionarySetInt(Mutable, CFSTR("SlimHrlcRunLengthValue"), v13);
                CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CED060], *(_DWORD *)(a1 + 44));
                v14 = 0;
                switch(*(_DWORD *)(v7 + 64))
                {
                  case 0:
                  case 2:
                    v14 = 1;
                    goto LABEL_26;
                  case 1:
                    goto LABEL_26;
                  case 3:
                    v14 = 2;
                    goto LABEL_26;
                  case 4:
                    CMPhotoCFDictionarySetInt(Mutable, CFSTR("InternalCodecType"), 3);
                    if (*(_DWORD *)(v7 + 60) == -1)
                      goto LABEL_43;
                    goto LABEL_27;
                  case 5:
                    v14 = 4;
                    goto LABEL_26;
                  case 6:
                    v14 = 5;
LABEL_26:
                    CMPhotoCFDictionarySetInt(Mutable, CFSTR("InternalCodecType"), v14);
LABEL_27:
                    if (*(int *)(v7 + 48) < 1)
                      goto LABEL_31;
                    v15 = 0;
                    break;
                  default:
                    goto LABEL_43;
                }
                while (1)
                {
                  v16 = *(_QWORD *)(v7 + 16 + 8 * v15);
                  context[0] = 0;
                  context[1] = v16;
                  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)_slimEncoderSessionSetOneProperty, context);
                  v8 = LODWORD(context[0]);
                  if (LODWORD(context[0]))
                    goto LABEL_35;
                  if (++v15 >= *(int *)(v7 + 48))
                  {
LABEL_31:
                    started = SlimVideoEncoder_CopyPixelBufferAttributesInternal(*(_QWORD *)(v7 + 16), &cf);
                    if ((_DWORD)started)
                      break;
                    if (*v9 == 1)
                      kdebug_trace();
                    CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)cf, (const void *)*MEMORY[0x1E0CA8F68], (_QWORD *)(v7 + 88));
                    CMPhotoPixelBufferAttributesGetExtendedPixels((const __CFDictionary *)cf, 0, (_QWORD *)(v7 + 96), 0, (_QWORD *)(v7 + 104));
                    v8 = 0;
                    *(_QWORD *)v7 = a2;
                    *(_QWORD *)(v7 + 8) = a3;
                    *(_QWORD *)(v7 + 128) = v19;
                    v19 = 0;
                    goto LABEL_35;
                  }
                }
              }
            }
          }
          else
          {
            v10 = 0;
            while (1)
            {
              started = SlimVideoEncoder_StartSessionInternal(*(const void **)a1, a2 | (a3 << 32), *(_QWORD *)(v7 + 16 + 8 * v10));
              if ((_DWORD)started)
                break;
              if (++v10 >= *(int *)(v7 + 48))
                goto LABEL_13;
            }
          }
          v8 = started;
        }
      }
      else
      {
        v8 = 4294950194;
      }
    }
    else
    {
      v8 = 4294950305;
    }
  }
  else
  {
    Mutable = 0;
LABEL_43:
    v8 = 4294950306;
  }
LABEL_35:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
LABEL_39:
  CMPhotoVideoQualityControllerDispose((CFTypeRef *)v19);
  return v8;
}

uint64_t SlimCompressionPluginClass_encode(uint64_t a1, __CVBuffer *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  CMTime v32;
  CMTime v33;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v8 = *(_QWORD *)(a1 + 144);
  if (!v8)
  {
    v24 = 4294950194;
    goto LABEL_29;
  }
  v12 = *(_QWORD *)(v8 + 8);
  v13 = a5[2];
  v14 = a5[3];
  if (*(_QWORD *)v8 != v13 || v12 != v14)
  {
    v16 = a4[1];
    v17 = a5[1];
    if (*a4 != *a5 || v16 != v17)
    {
      v19 = v16 + a4[3] - v17;
      if (*(_QWORD *)v8 == v13 && v19 <= v12 && v14 < v12)
        goto LABEL_21;
      v22 = FigSignalErrorAt();
LABEL_25:
      v24 = v22;
      goto LABEL_29;
    }
    v22 = SlimCompressionPluginClass_prepare(a1, v13, v14);
    if ((_DWORD)v22)
      goto LABEL_25;
  }
LABEL_21:
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*(_BYTE *)(v8 + 72))
  {
    _createSlimEncodeFrameProperties(a5[1], a5[3], *(CFAllocatorRef *)a1, (__CFDictionary **)&cf);
    v23 = *(_QWORD *)(v8 + 8 * *(int *)(v8 + 52) + 16);
    v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v32 = v33;
    v22 = SlimVideoEncoder_EncodeFrameInternal(v23, a2, &v33, (__int128 *)&v32.value, (uint64_t)cf, (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef))SlimCompressionPluginClass_callback, a1, a7);
    if ((_DWORD)v22)
      goto LABEL_25;
    goto LABEL_28;
  }
  v25 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10A00401229A369uLL);
  if (v25)
  {
    v26 = a5[3];
    v27 = a5[1];
    *(_QWORD *)v25 = *(_QWORD *)(v8 + 8 * *(int *)(v8 + 52) + 16);
    *((_QWORD *)v25 + 1) = a2;
    *((_QWORD *)v25 + 2) = v26;
    v28 = MEMORY[0x1E0CA2E18];
    v29 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v25 + 24) = *MEMORY[0x1E0CA2E18];
    v30 = *(_QWORD *)(v28 + 16);
    *((_QWORD *)v25 + 5) = v30;
    *((_OWORD *)v25 + 3) = v29;
    *((_QWORD *)v25 + 8) = v30;
    *((_QWORD *)v25 + 9) = v27;
    *((_QWORD *)v25 + 10) = SlimCompressionPluginClass_callback;
    *((_QWORD *)v25 + 11) = a1;
    *((_QWORD *)v25 + 12) = a7;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 80), v25, (dispatch_function_t)_dispatch_tileEncodeAsync);
LABEL_28:
    v24 = 0;
    *(_DWORD *)(v8 + 52) = (*(_DWORD *)(v8 + 52) + 1) % *(_DWORD *)(v8 + 48);
    goto LABEL_29;
  }
  v24 = 4294950305;
LABEL_29:
  if (cf)
    CFRelease(cf);
  return v24;
}

uint64_t SlimCompressionPluginClass_completeEncodes(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 144);
  if (!*(_BYTE *)(v1 + 72))
    dispatch_barrier_sync(*(dispatch_queue_t *)(v1 + 80), &__block_literal_global_12_0);
  return 0;
}

void _slimEncoderSessionSetOneProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  int v4;

  SlimVideoEncoder_SetPropertyInternal(*(_QWORD *)(a3 + 8), a1, a2);
  if (!*(_DWORD *)a3)
    *(_DWORD *)a3 = v4;
}

void _createSlimEncodeFrameProperties(uint64_t a1, uint64_t a2, CFAllocatorRef allocator, __CFDictionary **a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  int v9;

  if (a2 | a1)
  {
    Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return;
    v8 = Mutable;
    if (a1 && CMPhotoCFDictionarySetInt(Mutable, CFSTR("StillOffsetH"), a1))
      goto LABEL_14;
    if (a2)
    {
      v9 = CMPhotoCFDictionarySetInt(v8, CFSTR("EncodeHeight"), a2);
      if (!a4 || v9)
        goto LABEL_14;
    }
    else if (!a4)
    {
LABEL_14:
      CFRelease(v8);
      return;
    }
  }
  else
  {
    if (!a4)
      return;
    v8 = 0;
  }
  *a4 = v8;
}

uint64_t SlimCompressionPluginClass_callback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 128))(a1, a3, a4, *(_QWORD *)(a1 + 136), a2);
}

void _dispatch_tileEncodeAsync(void *a1)
{
  uint64_t v2;
  __CVBuffer *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, CFTypeRef);
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  CMTime v9;
  __CFDictionary *v10;

  v10 = 0;
  _createSlimEncodeFrameProperties(*((_QWORD *)a1 + 9), *((_QWORD *)a1 + 2), 0, &v10);
  v2 = *(_QWORD *)a1;
  v3 = (__CVBuffer *)*((_QWORD *)a1 + 1);
  v4 = (void (*)(uint64_t, uint64_t, uint64_t, CFTypeRef))*((_QWORD *)a1 + 10);
  v5 = *((_QWORD *)a1 + 11);
  v6 = *((_QWORD *)a1 + 12);
  v9 = *(CMTime *)((_BYTE *)a1 + 1);
  v7 = *((_OWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 8);
  if (!SlimVideoEncoder_EncodeFrameInternal(v2, v3, &v9, &v7, (uint64_t)v10, v4, v5, v6))
    free(a1);
  if (v10)
    CFRelease(v10);
}

CFTypeRef CMPhotoOneShotSessionPoolGetCompressionSession()
{
  return _copySession(0);
}

CFTypeRef _copySession(unsigned int a1)
{
  int v2;
  const void *ValueAtIndex;
  CFTypeRef v4;
  BOOL v5;
  CFTypeRef cf;

  cf = 0;
  pthread_once(&_createGlobalPoolIfNeeded_onceToken, _once_createGlobalPoolIfNeeded);
  if (!globalPool || !*(_BYTE *)globalPool)
    goto LABEL_11;
  v2 = pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8));
  if (v2)
    goto LABEL_16;
  if (CFArrayGetCount(*(CFArrayRef *)(globalPool + 8 * a1 + 16)) < 1)
  {
    v4 = 0;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(globalPool + 8 * a1 + 16), 0);
    v4 = ValueAtIndex ? CFRetain(ValueAtIndex) : 0;
    cf = v4;
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(globalPool + 8 * a1 + 16), 0);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(globalPool + 8));
  if (!v4)
  {
LABEL_11:
    if (a1 == 1)
    {
      v2 = CMPhotoDecompressionSessionCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &cf);
    }
    else if (a1)
    {
      v2 = -16990;
    }
    else
    {
      v2 = CMPhotoCompressionSessionCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &cf);
    }
LABEL_16:
    v4 = cf;
    if (v2)
      v5 = cf == 0;
    else
      v5 = 1;
    if (!v5)
    {
      CFRelease(cf);
      return 0;
    }
  }
  return v4;
}

CFTypeRef CMPhotoOneShotSessionPoolGetDecompressionSession()
{
  return _copySession(1u);
}

void CMPhotoOneShotSessionPoolRecycleSession(const void *a1)
{
  CFTypeID v2;
  uint64_t v3;
  CFNumberRef v4;
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  dispatch_time_t valuePtr;

  if (!a1)
    return;
  v2 = CFGetTypeID(a1);
  if (v2 == CMPhotoCompressionSessionGetTypeID())
  {
    v3 = 0;
  }
  else
  {
    if (v2 != CMPhotoDecompressionSessionGetTypeID())
    {
LABEL_16:
      CFRelease(a1);
      return;
    }
    v3 = 1;
  }
  if (!globalPool || !*(_BYTE *)globalPool)
    goto LABEL_16;
  valuePtr = dispatch_time(0, 60000000000);
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (v4)
  {
    v5 = v4;
    if (!pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8)))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(globalPool + 8 * v3 + 16), a1);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(globalPool + 32), a1, v5);
      v6 = globalPool;
      if (*(_BYTE *)(globalPool + 40))
      {
        dispatch_resume(*(dispatch_object_t *)(globalPool + 48));
        v6 = globalPool;
        *(_BYTE *)(globalPool + 40) = 0;
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 8));
    }
    CFRelease(a1);
    v7 = v5;
  }
  else
  {
    v7 = (CFNumberRef)a1;
  }
  CFRelease(v7);
}

uint64_t CMPhotoOneShotSessionPoolDiscardCompressionCaches()
{
  return _clearTimerRecord(0);
}

uint64_t _clearTimerRecord(uint64_t result)
{
  unsigned int v1;
  CFRange v2;

  if (globalPool && *(_BYTE *)globalPool)
  {
    v1 = result;
    result = pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8));
    if (!(_DWORD)result)
    {
      v2.length = CFArrayGetCount(*(CFArrayRef *)(globalPool + 8 * v1 + 16));
      v2.location = 0;
      CFArrayApplyFunction(*(CFArrayRef *)(globalPool + 8 * v1 + 16), v2, (CFArrayApplierFunction)_clearTimeRecordApplier, *(void **)(globalPool + 32));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(globalPool + 8 * v1 + 16));
      return pthread_mutex_unlock(*(pthread_mutex_t **)(globalPool + 8));
    }
  }
  return result;
}

uint64_t CMPhotoOneShotSessionPoolDiscardDecompressionCaches()
{
  return _clearTimerRecord(1);
}

void _once_createGlobalPoolIfNeeded()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  char v3;
  const CFArrayCallBacks *v4;
  char v5;
  CFMutableArrayRef Mutable;
  CFMutableDictionaryRef v7;
  NSObject *global_queue;
  NSObject *v9;
  void *v10;
  dispatch_time_t v11;
  _BYTE *v12;

  globalPool = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x10200404B17195AuLL);
  if (globalPool)
  {
    v0 = FigSimpleMutexCreate();
    *(_QWORD *)(globalPool + 8) = v0;
    if (v0)
    {
      v1 = 0;
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v3 = 1;
      v4 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        v5 = v3;
        Mutable = CFArrayCreateMutable(v2, 0, v4);
        *(_QWORD *)(globalPool + 8 * v1 + 16) = Mutable;
        if (!Mutable)
          break;
        v3 = 0;
        v1 = 1;
        if ((v5 & 1) == 0)
        {
          v7 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(globalPool + 32) = v7;
          if (v7)
          {
            global_queue = dispatch_get_global_queue(0, 0);
            v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, global_queue);
            v10 = (void *)globalPool;
            *(_QWORD *)(globalPool + 48) = v9;
            if (v9)
            {
              dispatch_set_context(v9, v10);
              dispatch_source_set_event_handler_f(*(dispatch_source_t *)(globalPool + 48), (dispatch_function_t)_performCleanup);
              v11 = dispatch_time(0, 60000000000);
              dispatch_source_set_timer(*(dispatch_source_t *)(globalPool + 48), v11, 0xDF8475800uLL, 0x1BF08EB00uLL);
              v12 = (_BYTE *)globalPool;
              *(_BYTE *)(globalPool + 40) = 1;
              *v12 = 1;
            }
          }
          return;
        }
      }
    }
  }
}

uint64_t _performCleanup(uint64_t a1)
{
  uint64_t result;
  CFIndex v3;

  result = pthread_mutex_lock(*(pthread_mutex_t **)(globalPool + 8));
  if (!(_DWORD)result)
  {
    v3 = _performCleanupByType(a1, 0);
    if (!(v3 + _performCleanupByType(a1, 1u)))
    {
      dispatch_suspend(*(dispatch_object_t *)(a1 + 48));
      *(_BYTE *)(a1 + 40) = 1;
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(globalPool + 8));
  }
  return result;
}

CFIndex _performCleanupByType(uint64_t a1, unsigned int a2)
{
  dispatch_time_t v4;
  const __CFArray *v5;
  CFIndex Count;
  unint64_t v7;
  const void *ValueAtIndex;
  dispatch_time_t v10;

  v4 = dispatch_time(0, 0);
  v5 = *(const __CFArray **)(a1 + 8 * a2 + 16);
  Count = CFArrayGetCount(v5);
  if (Count >= 1)
  {
    v7 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v5, v7 - 2);
      v10 = 0;
      CMPhotoCFDictionaryGetInt64IfPresent(*(CFDictionaryRef *)(a1 + 32), ValueAtIndex, &v10);
      if (v10 < v4)
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), ValueAtIndex);
        CFArrayRemoveValueAtIndex(v5, v7 - 2);
      }
      --v7;
    }
    while (v7 > 1);
  }
  return CFArrayGetCount(v5);
}

void _clearTimeRecordApplier(void *key, CFMutableDictionaryRef theDict)
{
  CFDictionaryRemoveValue(theDict, key);
}

uint64_t CMPhotoHEIFFileWriterCreate(const __CFAllocator *a1, const __CFDictionary *a2, _QWORD *a3)
{
  char *v6;
  char *v7;
  int *v8;
  _BYTE *v9;
  int v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  const __CFNumber *Value;
  CFTypeID v15;
  void (__cdecl *v16)(CFAllocatorRef, const void *);
  uint64_t v17;
  const void **v18;
  CFDictionaryRef v19;
  CFDictionaryRef v20;
  uint64_t v21;
  CFMutableArrayRef v22;
  CFMutableArrayRef v23;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v25;
  CFMutableArrayRef v26;
  __CFSet *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  const void *v34;
  CFTypeRef v35;
  CFTypeRef v36;
  CFTypeRef cf;
  CFArrayCallBacks valuePtr;

  v36 = 0;
  cf = 0;
  v35 = 0;
  if (!a3)
  {
    v7 = 0;
    v32 = 4294950306;
    goto LABEL_46;
  }
  pthread_once(&_checkFigNoteTraceOnce_onceToken_3, (void (*)(void))_registerFigNoteTrace_3);
  v6 = (char *)malloc_type_calloc(1uLL, 0x100uLL, 0x10E0040BC676932uLL);
  v7 = v6;
  if (!v6)
  {
LABEL_54:
    v32 = 4294950305;
    goto LABEL_46;
  }
  *((_QWORD *)v6 + 23) = 26214400;
  *((_DWORD *)v6 + 32) = 2;
  v8 = (int *)(v6 + 128);
  v6[176] = 0;
  v9 = v6 + 176;
  if (a2)
  {
    CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("BackingType"), v6 + 128);
    v10 = *v8;
    if (*v8)
    {
      if (v10 == 4)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("BackingIOSurfaceDestinationSize"));
        v12 = Value;
        if (Value)
        {
          v15 = CFGetTypeID(Value);
          if (v15 != CFNumberGetTypeID())
            goto LABEL_57;
          valuePtr.version = 0;
          if (!CFNumberGetValue(v12, kCFNumberLongType, &valuePtr) || valuePtr.version < 1)
            goto LABEL_57;
          v12 = 0;
          *((_QWORD *)v7 + 18) = valuePtr.version;
        }
      }
      else if (v10 == 3)
      {
        v11 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("BackingFileURL"));
        if (!v11)
          goto LABEL_57;
        v12 = v11;
        v13 = CFGetTypeID(v11);
        if (v13 != CFURLGetTypeID())
          goto LABEL_57;
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = 0;
      *v8 = 2;
    }
    CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("MaxOutputBufferSize"), (_QWORD *)v7 + 23);
    CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("DisableFastStartFiles"), v7 + 176);
    if (*v9)
    {
      if (*v8 == 4)
      {
LABEL_57:
        v17 = FigSignalErrorAt();
        goto LABEL_58;
      }
      v34 = 0;
      v16 = (void (__cdecl *)(CFAllocatorRef, const void *))*((_QWORD *)v7 + 18);
      valuePtr.version = *((_QWORD *)v7 + 16);
      valuePtr.retain = (CFArrayRetainCallBack)v12;
      valuePtr.release = v16;
      v17 = _createByteStreamAndBacking(a1, (uint64_t)&valuePtr, &cf, &v36);
      if (!(_DWORD)v17)
      {
        v18 = (const void **)MEMORY[0x1E0CC4AA8];
        goto LABEL_24;
      }
LABEL_58:
      v32 = v17;
      goto LABEL_46;
    }
  }
  else
  {
    v12 = 0;
  }
  v34 = 0;
  v17 = _createByteStreamAndBacking(a1, (uint64_t)&unk_1A8295620, &cf, &v36);
  if ((_DWORD)v17)
    goto LABEL_58;
  v18 = (const void **)MEMORY[0x1E0CC4AB0];
LABEL_24:
  v34 = *v18;
  v19 = CFDictionaryCreate(a1, MEMORY[0x1E0CC4AA0], &v34, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v19)
    goto LABEL_54;
  v20 = v19;
  v21 = FigIFFPictureCollectionWriterCreateWithByteStream();
  if ((_DWORD)v21)
  {
    v32 = v21;
  }
  else
  {
    *(_OWORD *)&valuePtr.version = 0u;
    valuePtr.copyDescription = 0;
    valuePtr.equal = 0;
    valuePtr.release = (CFArrayReleaseCallBack)_imageRecordReleaseCallback;
    v22 = CFArrayCreateMutable(a1, 0, &valuePtr);
    *((_QWORD *)v7 + 5) = v22;
    if (!v22)
      goto LABEL_53;
    *(_OWORD *)&valuePtr.version = 0u;
    valuePtr.equal = 0;
    *(_OWORD *)&valuePtr.release = (unint64_t)MEMORY[0x1E0C97CB0];
    v23 = CFArrayCreateMutable(a1, 0, &valuePtr);
    *((_QWORD *)v7 + 6) = v23;
    if (!v23)
      goto LABEL_53;
    Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    *((_QWORD *)v7 + 25) = Mutable;
    if (!Mutable)
      goto LABEL_53;
    v25 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    *((_QWORD *)v7 + 26) = v25;
    if (v25
      && (v26 = CFArrayCreateMutable(a1, 0, 0), (*((_QWORD *)v7 + 27) = v26) != 0)
      && (v27 = CFSetCreateMutable(a1, 0, 0), (*((_QWORD *)v7 + 13) = v27) != 0))
    {
      *((_DWORD *)v7 + 24) = 1835623985;
      CFSetAddValue(v27, (const void *)0x6D696631);
      *((_WORD *)v7 + 16) = 0;
      v7[34] = 0;
      v7[152] = 0;
      if (v12)
        v28 = CFRetain(v12);
      else
        v28 = 0;
      *((_QWORD *)v7 + 17) = v28;
      *((_QWORD *)v7 + 1) = FigSimpleMutexCreate();
      if (a1)
        v29 = CFRetain(a1);
      else
        v29 = 0;
      *(_QWORD *)v7 = v29;
      v30 = v36;
      *((_QWORD *)v7 + 2) = v35;
      v35 = 0;
      v36 = 0;
      v31 = cf;
      cf = 0;
      *((_QWORD *)v7 + 20) = v31;
      *((_QWORD *)v7 + 21) = v30;
      if (v7[176])
      {
        if (v31)
        {
          v31 = CFRetain(v31);
          v30 = (CFTypeRef)*((_QWORD *)v7 + 21);
        }
        *((_QWORD *)v7 + 14) = v31;
        if (v30)
          v30 = CFRetain(v30);
        *((_QWORD *)v7 + 15) = v30;
      }
      v32 = 0;
      *((_QWORD *)v7 + 9) = -1;
      *((_WORD *)v7 + 112) = 0;
      *((_QWORD *)v7 + 30) = 0;
      v7[248] = 1;
      *a3 = v7;
      v7 = 0;
    }
    else
    {
LABEL_53:
      v32 = 4294950305;
    }
  }
  CFRelease(v20);
LABEL_46:
  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
  if (v35)
    CFRelease(v35);
  CMPhotoHEIFFileWriterDispose((const void **)v7);
  return v32;
}

uint64_t _createByteStreamAndBacking(CFAllocatorRef structureAllocator, uint64_t a2, CFTypeRef *a3, _QWORD *a4)
{
  const void *Mutable;
  uint64_t WritableWithCFMutableData;
  uint64_t v9;
  uint64_t WritableForBlockBuffer;
  const void *v11;
  unint64_t v12;
  IOSurfaceRef buffer;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  buffer = 0;
  switch(*(_DWORD *)a2)
  {
    case 1:
      Mutable = CFDataCreateMutable(structureAllocator, 0);
      if (Mutable)
      {
        WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
        if (!(_DWORD)WritableWithCFMutableData)
          goto LABEL_21;
        v9 = WritableWithCFMutableData;
      }
      else
      {
        v9 = 4294950305;
      }
      goto LABEL_7;
    case 2:
      WritableForBlockBuffer = CMBlockBufferCreateEmpty(structureAllocator, 0, 0, &blockBufferOut);
      if ((_DWORD)WritableForBlockBuffer)
        goto LABEL_6;
      WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
      if ((_DWORD)WritableForBlockBuffer)
        goto LABEL_6;
      Mutable = blockBufferOut;
      blockBufferOut = 0;
      goto LABEL_21;
    case 3:
      if (!*(_QWORD *)(a2 + 8))
        goto LABEL_29;
      WritableForBlockBuffer = CMByteStreamCreateForFileURL();
      if ((_DWORD)WritableForBlockBuffer)
        goto LABEL_6;
      v11 = *(const void **)(a2 + 8);
      if (v11)
        Mutable = CFRetain(v11);
      else
        Mutable = 0;
      goto LABEL_21;
    case 4:
      v12 = *(_QWORD *)(a2 + 16);
      if (!v12)
      {
LABEL_29:
        Mutable = 0;
        v9 = 4294950306;
LABEL_7:
        if (cf)
          CFRelease(cf);
        goto LABEL_22;
      }
      WritableForBlockBuffer = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)CFSTR("SurfacePoolOneShot"), v12, 1, &buffer);
      if ((_DWORD)WritableForBlockBuffer
        || (IOSurfaceDecrementUseCount(buffer),
            WritableForBlockBuffer = FigByteStreamCreateWritableWithIOSurface(),
            (_DWORD)WritableForBlockBuffer))
      {
LABEL_6:
        v9 = WritableForBlockBuffer;
        Mutable = 0;
        goto LABEL_7;
      }
      Mutable = buffer;
      buffer = 0;
LABEL_21:
      v9 = 0;
      *a3 = cf;
      cf = 0;
      *a4 = Mutable;
      Mutable = 0;
LABEL_22:
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (Mutable)
        CFRelease(Mutable);
      if (buffer)
        CFRelease(buffer);
      return v9;
    default:
      WritableForBlockBuffer = FigSignalErrorAt();
      goto LABEL_6;
  }
}

void _imageRecordReleaseCallback(CFAllocatorRef allocator, _QWORD *ptr)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v4 = (const void *)ptr[6];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)ptr[15];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)ptr[16];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)ptr[18];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)ptr[17];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)ptr[19];
  if (v9)
    CFRelease(v9);
  CFAllocatorDeallocate(allocator, ptr);
}

void CMPhotoHEIFFileWriterDispose(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[2];
    if (v3)
      CFRelease(v3);
    v4 = a1[3];
    if (v4)
      CFRelease(v4);
    v5 = a1[6];
    if (v5)
      CFRelease(v5);
    v6 = a1[5];
    if (v6)
      CFRelease(v6);
    v7 = a1[7];
    if (v7)
      CFRelease(v7);
    v8 = a1[10];
    if (v8)
      CFRelease(v8);
    v9 = a1[11];
    if (v9)
      CFRelease(v9);
    v10 = a1[13];
    if (v10)
      CFRelease(v10);
    v11 = a1[29];
    if (v11)
      CFRelease(v11);
    v12 = a1[27];
    if (v12)
      CFRelease(v12);
    v13 = a1[25];
    if (v13)
      CFRelease(v13);
    v14 = a1[26];
    if (v14)
      CFRelease(v14);
    v15 = a1[20];
    if (v15)
      CFRelease(v15);
    v16 = a1[21];
    if (v16)
      CFRelease(v16);
    v17 = a1[17];
    if (v17)
      CFRelease(v17);
    v18 = a1[14];
    if (v18)
      CFRelease(v18);
    v19 = a1[15];
    if (v19)
      CFRelease(v19);
    FigSimpleMutexDestroy();
    free(a1);
  }
}

uint64_t CMPhotoHEIFFileWriterCloseAndCopyBacking(uint64_t a1, _DWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  __CFArray *v11;
  uint64_t IsFinal;
  const __CFAllocator *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  int *ValueAtIndex;
  uint64_t appended;
  CFMutableArrayRef v20;
  CFTypeRef v21;
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  uint64_t FigBaseObject;
  uint64_t (*v25)(uint64_t, _QWORD, __CFDictionary *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD);
  CFIndex i;
  const __CFArray *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, _QWORD);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, _QWORD, uint64_t *);
  CFTypeRef v35;
  uint64_t v37;
  CFMutableArrayRef context;
  uint64_t v39;
  void *v40;
  void *v41;
  CFTypeRef *v42;
  CFTypeRef *v43;
  uint64_t v44;
  CFTypeRef v45;
  CFTypeRef *v46;
  uint64_t v47;
  char v48;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v51;
  int v52;

  v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v8)
    return v8;
  if (!a4 && !*(_QWORD *)(a1 + 64))
  {
LABEL_74:
    v9 = 0;
    goto LABEL_72;
  }
  context = (CFMutableArrayRef)a1;
  if (!FigCFDictionaryGetCount())
  {
LABEL_7:
    cf = 0;
    p_cf = &cf;
    v51 = 0x2000000000;
    v52 = 0;
    v10 = *(const __CFArray **)(a1 + 88);
    v11 = (__CFArray *)MEMORY[0x1E0C809B0];
    if (v10 && CFArrayGetCount(v10) >= 1)
    {
      context = v11;
      v39 = 0x40000000;
      v40 = ___writePendingReferencesIfNeeded_block_invoke;
      v41 = &unk_1E53F5940;
      v42 = &cf;
      v43 = (CFTypeRef *)a1;
      FigCFArrayApplyBlock();
    }
    v9 = *((unsigned int *)p_cf + 6);
    _Block_object_dispose(&cf, 8);
    if ((_DWORD)v9)
      goto LABEL_72;
    cf = 0;
    p_cf = &cf;
    v51 = 0x2000000000;
    v52 = 0;
    v45 = 0;
    v46 = &v45;
    v47 = 0x2000000000;
    v48 = 0;
    context = v11;
    v39 = 0x40000000;
    v40 = ___addBackwardsCompatibleStereoGroupsIfNeeded_block_invoke;
    v41 = &unk_1E53F5968;
    v43 = &v45;
    v44 = a1;
    v42 = &cf;
    FigCFDictionaryApplyBlock();
    if (*((_BYTE *)v46 + 24))
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x756E6966);
    v9 = *((unsigned int *)p_cf + 6);
    _Block_object_dispose(&v45, 8);
    _Block_object_dispose(&cf, 8);
    if ((_DWORD)v9)
      goto LABEL_72;
    IsFinal = _ensureBackingIsFinal(a1);
    if ((_DWORD)IsFinal)
      goto LABEL_75;
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_61;
    context = 0;
    cf = 0;
    v45 = 0;
    v13 = *(const __CFAllocator **)a1;
    v14 = *(const __CFArray **)(a1 + 48);
    if (v14 && (Count = CFArrayGetCount(v14), Count >= 1))
    {
      v16 = Count;
      v17 = 0;
      while (1)
      {
        ValueAtIndex = (int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v17);
        appended = _appendTrackReferenceIfValid(ValueAtIndex[12], *ValueAtIndex, v13, &context);
        if ((_DWORD)appended)
          break;
        appended = _appendTrackReferenceIfValid(ValueAtIndex[24], *ValueAtIndex, v13, (CFMutableArrayRef *)&cf);
        if ((_DWORD)appended)
          break;
        appended = _appendTrackReferenceIfValid(ValueAtIndex[36], *ValueAtIndex, v13, (CFMutableArrayRef *)&v45);
        if ((_DWORD)appended)
          break;
        if (v16 == ++v17)
        {
          v20 = context;
          v21 = cf;
          v9 = (uint64_t)v45;
          if (!context)
            goto LABEL_26;
          goto LABEL_28;
        }
      }
      v9 = appended;
      v20 = context;
      if (context)
        goto LABEL_41;
    }
    else
    {
      v9 = 0;
      v21 = 0;
      v20 = 0;
LABEL_26:
      if (v21 || v9)
      {
LABEL_28:
        Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v23 = Mutable;
          if (v20)
            CFDictionaryAddValue(Mutable, CFSTR("thmb"), v20);
          if (v21)
            CFDictionaryAddValue(v23, CFSTR("auxl"), v21);
          if (v9)
            CFDictionaryAddValue(v23, CFSTR("cdsc"), (const void *)v9);
          FigBaseObject = FigFormatWriterGetFigBaseObject();
          v25 = *(uint64_t (**)(uint64_t, _QWORD, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
          if (v25)
            v9 = v25(FigBaseObject, *MEMORY[0x1E0CC44E0], v23);
          else
            v9 = 4294954514;
          CFRelease(v23);
          if (!v20)
            goto LABEL_42;
        }
        else
        {
          v9 = 4294950305;
          if (!v20)
            goto LABEL_42;
        }
LABEL_41:
        CFRelease(v20);
      }
    }
LABEL_42:
    if (cf)
      CFRelease(cf);
    if (v45)
      CFRelease(v45);
    if ((_DWORD)v9)
      goto LABEL_72;
    v26 = *(_QWORD *)(a1 + 24);
    v27 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (!v27)
      goto LABEL_71;
    IsFinal = v27(v26, 0);
    if ((_DWORD)IsFinal)
      goto LABEL_75;
    for (i = 0; ; ++i)
    {
      v29 = *(const __CFArray **)(a1 + 48);
      if (v29)
        v29 = (const __CFArray *)CFArrayGetCount(v29);
      if (i >= (uint64_t)v29)
        break;
      v30 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), i);
      IsFinal = _updateSampleDescriptionExtensions(a1, *(unsigned int *)v30);
      if ((_DWORD)IsFinal)
        goto LABEL_75;
      if (v30[7] >= 1)
      {
        IsFinal = _updateSampleDescriptionExtensions(a1, *((unsigned int *)v30 + 12));
        if ((_DWORD)IsFinal)
          goto LABEL_75;
      }
      if (v30[13] >= 1)
      {
        IsFinal = _updateSampleDescriptionExtensions(a1, *((unsigned int *)v30 + 24));
        if ((_DWORD)IsFinal)
          goto LABEL_75;
      }
    }
    v31 = *(_QWORD *)(a1 + 24);
    v32 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v32)
      goto LABEL_71;
    IsFinal = v32(v31, 0);
    if ((_DWORD)IsFinal)
      goto LABEL_75;
LABEL_61:
    v37 = 0;
    v33 = *(_QWORD *)(a1 + 112);
    v34 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v34)
    {
      IsFinal = v34(v33, 0, &v37);
      if (!(_DWORD)IsFinal)
      {
        if (a3)
          *a3 = v37;
        if (a2)
          *a2 = *(_DWORD *)(a1 + 128);
        if (a4)
        {
          v35 = *(CFTypeRef *)(a1 + 120);
          if (v35)
            v35 = CFRetain(v35);
          v9 = 0;
          *a4 = v35;
          goto LABEL_72;
        }
        goto LABEL_74;
      }
LABEL_75:
      v9 = IsFinal;
      goto LABEL_72;
    }
LABEL_71:
    v9 = 4294954514;
    goto LABEL_72;
  }
  v39 = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 80), (CFDictionaryApplierFunction)_pendingGroupPropertiesApplier, &context);
  v9 = v39;
  if (!(_DWORD)v39)
  {
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x756E6966);
    goto LABEL_7;
  }
LABEL_72:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v9;
}

uint64_t _ensureBackingIsFinal(uint64_t a1)
{
  const __CFArray *v2;
  uint64_t Sample;
  uint64_t v4;
  uint64_t appended;
  const void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *, _QWORD);
  _QWORD *DataLength;
  const void *v11;
  const void *v12;
  const void *v13;
  __int128 *v14;
  int v15;
  const __CFAllocator *v16;
  __int128 *v17;
  uint64_t v18;
  const __CFArray *v19;
  _QWORD *ValueAtIndex;
  BOOL v21;
  char v22;
  void *Mutable;
  CFIndex Count;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  CFIndex v28;
  const __CFArray *v29;
  const void *v30;
  const __CFArray *v31;
  CFIndex v32;
  CFIndex v33;
  CFIndex v34;
  CFIndex v35;
  CFIndex v36;
  const __CFArray *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  const void *v48;
  uint64_t v49;
  CFDictionaryRef v50;
  const void *v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, const void *, CFDictionaryRef);
  size_t v54;
  const __CFSet *v55;
  unint64_t v56;
  const __CFArray *v57;
  const void *v58;
  const __CFArray *v59;
  CFIndex v60;
  unint64_t v61;
  CFIndex v62;
  char v63;
  unint64_t v64;
  BOOL v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t CMBaseObject;
  uint64_t (*v70)(uint64_t, _QWORD, void *);
  uint64_t v71;
  uint64_t (*v72)(uint64_t, _QWORD, void *);
  CFMutableArrayRef v73;
  CFMutableArrayRef v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, _QWORD, CFMutableArrayRef);
  const __CFArray *v77;
  unsigned int *v78;
  unsigned int *v79;
  CFAllocatorRef v80;
  uint64_t v81;
  uint64_t v82;
  CFTypeRef v83;
  uint64_t (*v84)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v85;
  uint64_t (*v86)(CFTypeRef, uint64_t, CFTypeRef *);
  CFTypeRef v87;
  uint64_t (*v88)(CFTypeRef, uint64_t *);
  CFTypeRef v89;
  uint64_t (*v90)(CFTypeRef, _QWORD, CFTypeRef *);
  CFTypeRef v91;
  uint64_t (*v92)(CFTypeRef, uint64_t *);
  CFTypeRef v93;
  uint64_t (*v94)(CFTypeRef, _QWORD, CFTypeRef *);
  CFTypeRef v95;
  uint64_t (*v96)(CFTypeRef, __int128 *);
  uint64_t v97;
  uint64_t (*v98)(CFTypeRef, _QWORD, unsigned int *, unint64_t *, _QWORD **, _QWORD, _QWORD, _QWORD);
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v108;
  CFTypeRef v109;
  uint64_t (*v110)(uint64_t, CFTypeRef, void *);
  uint64_t v111;
  CFAllocatorRef v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v115;
  size_t v116;
  size_t v117;
  const __CFAllocator *v118;
  _QWORD *v119;
  const void *v120;
  const void *v121;
  const void *v122;
  CFTypeRef v123;
  __int128 v124;
  size_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  CFTypeRef v132;
  CFTypeRef v133;
  CFTypeRef v134;
  CFTypeRef cf;
  unsigned int v136;
  _QWORD *v137;
  unint64_t v138;

  while (1)
  {
    v2 = *(const __CFArray **)(a1 + 200);
    if (!v2 || CFArrayGetCount(v2) < 1)
      break;
    Sample = _reorderingBufferDequeueFirstSample(a1);
    if ((_DWORD)Sample)
      return Sample;
  }
  if (*(_BYTE *)(a1 + 152))
    return 0;
  if (*(_BYTE *)(a1 + 176))
  {
    *(_QWORD *)&v124 = 0;
    v138 = 0;
    if (*(_DWORD *)(a1 + 128) == 4)
    {
      v4 = 4294950304;
LABEL_27:
      if (v138)
        CFRelease((CFTypeRef)v138);
      return v4;
    }
    appended = _createByteStreamAndBacking(*(CFAllocatorRef *)a1, (uint64_t)&unk_1A8295620, (CFTypeRef *)&v124, &v138);
    v7 = (const void *)v124;
    if (!(_DWORD)appended)
    {
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(uint64_t (**)(uint64_t, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v9)
      {
        v4 = 4294954514;
        goto LABEL_25;
      }
      appended = v9(v8, v7, 0);
      if (!(_DWORD)appended)
      {
        v137 = 0;
        DataLength = (_QWORD *)CMBlockBufferGetDataLength((CMBlockBufferRef)v138);
        appended = CMByteStreamAppendBlockBuffer();
        if (!(_DWORD)appended)
        {
          if (v137 == DataLength)
          {
            v11 = *(const void **)(a1 + 16);
            if (v11)
            {
              CFRelease(v11);
              *(_QWORD *)(a1 + 16) = 0;
            }
            v12 = *(const void **)(a1 + 168);
            if (v12)
            {
              CFRelease(v12);
              *(_QWORD *)(a1 + 168) = 0;
            }
            v13 = *(const void **)(a1 + 160);
            if (v13)
            {
              CFRelease(v13);
              *(_QWORD *)(a1 + 160) = 0;
            }
            v4 = 0;
            *(_BYTE *)(a1 + 32) = 1;
            *(_BYTE *)(a1 + 152) = 1;
          }
          else
          {
            v4 = 4294950190;
          }
          goto LABEL_25;
        }
      }
    }
    v4 = appended;
LABEL_25:
    if (v7)
      CFRelease(v7);
    goto LABEL_27;
  }
  v137 = 0;
  v134 = 0;
  cf = 0;
  v132 = 0;
  v133 = 0;
  v14 = (__int128 *)(a1 + 128);
  v15 = *(_DWORD *)(a1 + 128);
  v16 = *(const __CFAllocator **)a1;
  if (v15 == 4)
  {
    v17 = (__int128 *)&unk_1A8295620;
  }
  else
  {
    v124 = *v14;
    v125 = *(_QWORD *)(a1 + 144);
    v17 = &v124;
  }
  v18 = _createByteStreamAndBacking(v16, (uint64_t)v17, (CFTypeRef *)&v137, &cf);
  if (!(_DWORD)v18)
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    *(_BYTE *)(a1 + 248) &= *(_BYTE *)(a1 + 224);
    v19 = *(const __CFArray **)(a1 + 48);
    if (v19 && CFArrayGetCount(v19) == 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), 0);
      if (ValueAtIndex[7])
        v21 = 0;
      else
        v21 = ValueAtIndex[13] < 2;
      v22 = v21;
      *(_BYTE *)(a1 + 247) = v22;
    }
    if (*(_BYTE *)(a1 + 225))
    {
      if (!*(_QWORD *)(a1 + 232))
      {
        Mutable = 0;
        v4 = 4294950306;
        goto LABEL_142;
      }
      Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, 0);
      if (!Mutable)
        goto LABEL_257;
      CFSetApplyFunction(*(CFSetRef *)(a1 + 232), (CFSetApplierFunction)_addNumberToArray, Mutable);
      Count = CFArrayGetCount((CFArrayRef)Mutable);
      if (Count >= 1)
      {
        v25 = Count;
        v26 = 0;
        while (1)
        {
          v27 = (CFIndex)CFArrayGetValueAtIndex((CFArrayRef)Mutable, v26);
          if (v27 < 0)
            break;
          v28 = v27;
          v29 = *(const __CFArray **)(a1 + 40);
          if (v29)
            v29 = (const __CFArray *)CFArrayGetCount(v29);
          if ((uint64_t)v29 < v28)
            break;
          v30 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v28);
          v31 = (const __CFArray *)*((_QWORD *)v30 + 16);
          if (v31)
          {
            v32 = CFArrayGetCount(v31);
            if (v32 >= 1)
            {
              v33 = v32;
              v34 = 0;
              do
              {
                v35 = (CFIndex)CFArrayGetValueAtIndex(*((CFArrayRef *)v30 + 16), v34);
                if (v35 < 0)
                  goto LABEL_139;
                v36 = v35;
                v37 = *(const __CFArray **)(a1 + 40);
                if (v37)
                  v37 = (const __CFArray *)CFArrayGetCount(v37);
                if ((uint64_t)v37 < v36)
                  goto LABEL_139;
                v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v36);
                v39 = v38[2];
                if (HIDWORD(v39)
                  || (v40 = v38[3], HIDWORD(v40))
                  || (v41 = *((_QWORD *)v30 + 2), HIDWORD(v41))
                  || (v42 = *((_QWORD *)v30 + 3), HIDWORD(v42)))
                {
                  v4 = 4294950190;
                  goto LABEL_140;
                }
                v43 = (v39 * v40);
                if (v43 << 32)
                {
                  v44 = (int)v41 * (int)v42 / (unint64_t)(int)v43;
                  LOBYTE(v124) = v44 < 0xC9;
                  if (v44 >= 0xC9)
                  {
                    v46 = _areSiblingThumbnailsMIAFCompliant(a1, (uint64_t)v30, (int)v43, (char *)&v124);
                    if ((_DWORD)v46)
                      goto LABEL_252;
                    v45 = v124;
                  }
                  else
                  {
                    v45 = 1;
                  }
                  *(_BYTE *)(a1 + 248) &= v45;
                }
              }
              while (v33 != ++v34);
            }
          }
          if (++v26 == v25)
            goto LABEL_70;
        }
LABEL_139:
        v4 = 4294950306;
        goto LABEL_140;
      }
LABEL_70:
      CFRelease(Mutable);
    }
    if (!*(_BYTE *)(a1 + 248))
    {
LABEL_124:
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      Mutable = (void *)FigCFNumberCreateUInt32();
      if (!Mutable)
        goto LABEL_257;
      CMBaseObject = FigPictureCollectionWriterGetCMBaseObject();
      v70 = *(uint64_t (**)(uint64_t, _QWORD, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v70)
      {
        v46 = v70(CMBaseObject, *MEMORY[0x1E0CC4AC0], Mutable);
        if ((_DWORD)v46)
          goto LABEL_252;
        CFRelease(Mutable);
        Mutable = (void *)FigCFNumberCreateUInt32();
        if (!Mutable)
          goto LABEL_257;
        v71 = FigPictureCollectionWriterGetCMBaseObject();
        v72 = *(uint64_t (**)(uint64_t, _QWORD, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v72)
        {
          v46 = v72(v71, *MEMORY[0x1E0CC4AC8], Mutable);
          if (!(_DWORD)v46)
          {
            if (CFSetGetCount(*(CFSetRef *)(a1 + 104)) <= 0)
            {
              CFRelease(Mutable);
              goto LABEL_222;
            }
            v73 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B378]);
            if (v73)
            {
              v74 = v73;
              CFSetApplyFunction(*(CFSetRef *)(a1 + 104), (CFSetApplierFunction)_addValueToArray, v73);
              v75 = FigPictureCollectionWriterGetCMBaseObject();
              v76 = *(uint64_t (**)(uint64_t, _QWORD, CFMutableArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
              if (v76)
                v4 = v76(v75, *MEMORY[0x1E0CC4AB8], v74);
              else
                v4 = 4294954514;
              CFRelease(Mutable);
              CFRelease(v74);
              if ((_DWORD)v4)
                goto LABEL_141;
LABEL_222:
              Mutable = CFDictionaryCreate(*(CFAllocatorRef *)a1, MEMORY[0x1E0CC4A10], MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (Mutable)
              {
                v108 = *(_QWORD *)(a1 + 16);
                v109 = v137;
                v110 = *(uint64_t (**)(uint64_t, CFTypeRef, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 16);
                if (v110)
                {
                  v111 = v110(v108, v109, Mutable);
                  if ((_DWORD)v111)
                    goto LABEL_265;
                  v112 = *(CFAllocatorRef *)a1;
                  v113 = FigPictureCollectionWriterGetCMBaseObject();
                  v114 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
                  if (v114)
                  {
                    v111 = v114(v113, *MEMORY[0x1E0CC4AD0], v112, &v132);
                    if (!(_DWORD)v111)
                    {
                      v138 = 0;
                      v131 = 0;
                      FigCFArrayGetInt64AtIndex();
                      FigCFArrayGetInt64AtIndex();
                      v4 = 4294950190;
                      if (v131 < 0 || (v138 & 0x8000000000000000) != 0)
                        goto LABEL_142;
                      if (v15 == 4)
                      {
                        v115 = cf;
                        v116 = CMBlockBufferGetDataLength((CMBlockBufferRef)cf);
                        v117 = v131 + v116;
                        v124 = *v14;
                        if (*(_QWORD *)(a1 + 144) > v131 + v116)
                          v117 = *(_QWORD *)(a1 + 144);
                        v118 = *(const __CFAllocator **)a1;
                        v125 = v117;
                        v111 = _createByteStreamAndBacking(v118, (uint64_t)&v124, &v134, &v133);
                        if ((_DWORD)v111)
                          goto LABEL_265;
                        *(_QWORD *)&v124 = 0;
                        v119 = v134;
                        v111 = CMByteStreamAppendBlockBuffer();
                        if ((_DWORD)v111)
                          goto LABEL_265;
                        if ((_QWORD)v124 != v116)
                          goto LABEL_264;
                        if (v109)
                        {
                          CFRelease(v109);
                          v137 = 0;
                        }
                        if (v115)
                          CFRelease(v115);
                        v137 = v119;
                        v134 = 0;
                        cf = v133;
                        v133 = 0;
                      }
                      else
                      {
                        v119 = v109;
                      }
                      *(_QWORD *)&v124 = 0;
                      v111 = CMByteStreamAppendBlockBuffer();
                      if (!(_DWORD)v111)
                      {
                        if ((_QWORD)v124 == v131)
                        {
                          v120 = *(const void **)(a1 + 16);
                          if (v120)
                          {
                            CFRelease(v120);
                            *(_QWORD *)(a1 + 16) = 0;
                          }
                          v121 = *(const void **)(a1 + 168);
                          if (v121)
                          {
                            CFRelease(v121);
                            *(_QWORD *)(a1 + 168) = 0;
                          }
                          v122 = *(const void **)(a1 + 160);
                          if (v122)
                          {
                            CFRelease(v122);
                            *(_QWORD *)(a1 + 160) = 0;
                          }
                          v4 = 0;
                          *(_BYTE *)(a1 + 32) = 1;
                          *(_BYTE *)(a1 + 152) = 1;
                          v137 = 0;
                          v123 = cf;
                          *(_QWORD *)(a1 + 112) = v119;
                          *(_QWORD *)(a1 + 120) = v123;
                          cf = 0;
                          goto LABEL_146;
                        }
LABEL_264:
                        v111 = FigSignalErrorAt();
                      }
                    }
LABEL_265:
                    v4 = v111;
                    goto LABEL_142;
                  }
                }
                v4 = 4294954514;
                goto LABEL_142;
              }
LABEL_257:
              v4 = 4294950305;
              goto LABEL_142;
            }
            v4 = 4294950305;
LABEL_140:
            CFRelease(Mutable);
            goto LABEL_141;
          }
LABEL_252:
          v4 = v46;
          goto LABEL_140;
        }
      }
      v4 = 4294954514;
      goto LABEL_140;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x6D696166);
    if (*(_BYTE *)(a1 + 242))
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694842);
    if (*(_BYTE *)(a1 + 243))
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694841);
    if (*(_BYTE *)(a1 + 244))
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694845);
    if (*(_BYTE *)(a1 + 245))
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D694142);
    if (*(_BYTE *)(a1 + 247))
    {
      v47 = *(_DWORD *)(a1 + 96);
      if (v47 == 1836279345 || v47 == 1635148659)
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D69416E);
    }
    v48 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *(_QWORD *)(a1 + 72));
    *(_QWORD *)&v124 = 0;
    v138 = 0;
    v49 = _createByteStreamAndBacking(*(CFAllocatorRef *)a1, (uint64_t)&unk_1A8295620, (CFTypeRef *)&v124, &v138);
    if ((_DWORD)v49)
    {
      v4 = v49;
      v54 = 0;
      v50 = 0;
      v51 = (const void *)v124;
    }
    else
    {
      v50 = CFDictionaryCreate(*(CFAllocatorRef *)a1, MEMORY[0x1E0CC4A10], MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v51 = (const void *)v124;
      if (v50)
      {
        v52 = *(_QWORD *)(a1 + 16);
        v53 = *(uint64_t (**)(uint64_t, const void *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
        if (v53)
        {
          v4 = v53(v52, v51, v50);
          if ((_DWORD)v4)
            v54 = 0;
          else
            v54 = CMBlockBufferGetDataLength((CMBlockBufferRef)v138);
        }
        else
        {
          v54 = 0;
          v4 = 4294954514;
        }
      }
      else
      {
        v54 = 0;
        v4 = 4294950305;
      }
    }
    if (v51)
      CFRelease(v51);
    if (v50)
      CFRelease(v50);
    if (v138)
      CFRelease((CFTypeRef)v138);
    if ((_DWORD)v4)
      goto LABEL_141;
    v55 = *(const __CFSet **)(a1 + 104);
    if (v55)
      v54 += 4 * CFSetGetCount(v55);
    if (*(_QWORD *)(a1 + 64) == 1)
    {
      v56 = *((_QWORD *)v48 + 8) + v54;
      v57 = (const __CFArray *)*((_QWORD *)v48 + 16);
      if (v57 && CFArrayGetCount(v57))
      {
        v58 = CFArrayGetValueAtIndex(*((CFArrayRef *)v48 + 16), 0);
        if (*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), (CFIndex)v58) + 8) + v54 >= 0x1F400
          || v56 >= *(_QWORD *)(a1 + 184))
        {
LABEL_122:
          if (*(_BYTE *)(a1 + 246))
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x4D695072);
          goto LABEL_124;
        }
      }
      else if (v56 >= 0x1F400)
      {
        goto LABEL_122;
      }
    }
    else
    {
      v59 = *(const __CFArray **)(a1 + 40);
      if (!v59)
        goto LABEL_122;
      v60 = CFArrayGetCount(v59);
      if (!v60)
        goto LABEL_122;
      v61 = v60;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 1;
      do
      {
        v66 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v62);
        v67 = v66[8];
        if (*((_DWORD *)v66 + 1) == 1)
        {
          v54 += v67;
          if (v66[14] == *(_QWORD *)(a1 + 72))
            break;
        }
        else
        {
          v64 += v67;
          if (v67 > *(_QWORD *)(a1 + 184))
            v63 = 1;
        }
        v65 = ++v62 < v61;
      }
      while (v61 != v62);
      if (v63)
        goto LABEL_122;
      v68 = *(_QWORD *)(a1 + 184);
      if (v64 <= v68)
        v68 = 0;
      if ((v68 + v54) >> 10 > 0x7C || !v65)
        goto LABEL_122;
    }
    *(_BYTE *)(a1 + 246) = 1;
    goto LABEL_122;
  }
  v4 = v18;
LABEL_141:
  Mutable = 0;
LABEL_142:
  if (v137)
    CFRelease(v137);
  if (cf)
    CFRelease(cf);
LABEL_146:
  if (v134)
    CFRelease(v134);
  if (v133)
    CFRelease(v133);
  if (Mutable)
    CFRelease(Mutable);
  if (v132)
    CFRelease(v132);
  if ((_DWORD)v4)
    return v4;
  v77 = *(const __CFArray **)(a1 + 48);
  if (!v77 || CFArrayGetCount(v77) != 1)
    return 0;
  v78 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), 0);
  if (*((_QWORD *)v78 + 1) != 1)
    return FigSignalErrorAt();
  v79 = v78;
  if (!*((_QWORD *)v78 + 2))
    return 0;
  Sample = _createMovieWriterIfNeeded(a1);
  if ((_DWORD)Sample)
    return Sample;
  v127 = 0;
  v128 = 0;
  v126 = 0;
  v80 = *(CFAllocatorRef *)a1;
  v81 = v79[6];
  v134 = 0;
  cf = 0;
  v132 = 0;
  v133 = 0;
  v82 = FigPictureCollectionCreateFromByteStream();
  if ((_DWORD)v82)
    goto LABEL_267;
  v131 = 0;
  v83 = cf;
  v84 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v84)
    goto LABEL_186;
  v82 = v84(v83, 1, &v131);
  if ((_DWORD)v82)
    goto LABEL_267;
  if (v131 <= 0)
  {
    v82 = FigSignalErrorAt();
    goto LABEL_267;
  }
  v85 = cf;
  v86 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v86)
    goto LABEL_186;
  v82 = v86(v85, v81, &v134);
  if ((_DWORD)v82)
    goto LABEL_267;
  _getSampleOffsetFromPictureReader((uint64_t)v80, (uint64_t)v134, &v128);
  v130 = 0;
  v87 = v134;
  v88 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v88)
    goto LABEL_186;
  v82 = v88(v87, &v130);
  if ((_DWORD)v82)
    goto LABEL_267;
  if (v130 >= 1)
  {
    v89 = v134;
    v90 = *(uint64_t (**)(CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v90)
      goto LABEL_186;
    v82 = v90(v89, 0, &v133);
    if ((_DWORD)v82)
      goto LABEL_267;
    _getSampleOffsetFromPictureReader((uint64_t)v80, (uint64_t)v133, &v127);
  }
  v129 = 0;
  v91 = v134;
  v92 = *(uint64_t (**)(CFTypeRef, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v92)
    goto LABEL_186;
  v82 = v92(v91, &v129);
  if ((_DWORD)v82)
    goto LABEL_267;
  if (v129 < 1)
    goto LABEL_178;
  v93 = v134;
  v94 = *(uint64_t (**)(CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v94)
  {
LABEL_186:
    v99 = 0;
    v4 = 4294954514;
    goto LABEL_187;
  }
  v82 = v94(v93, 0, &v132);
  if (!(_DWORD)v82)
  {
    _getSampleOffsetFromPictureReader((uint64_t)v80, (uint64_t)v132, &v126);
LABEL_178:
    v95 = v134;
    *(_QWORD *)&v124 = 0;
    v137 = 0;
    v138 = 0;
    v136 = 0;
    v96 = *(uint64_t (**)(CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v96)
    {
      v97 = v96(v95, &v124);
      if ((_DWORD)v97)
        goto LABEL_269;
      if ((uint64_t)v124 < 1)
      {
        v99 = 0;
        v4 = 0;
        goto LABEL_254;
      }
      v98 = *(uint64_t (**)(CFTypeRef, _QWORD, unsigned int *, unint64_t *, _QWORD **, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (v98)
      {
        v4 = v98(v95, 0, &v136, &v138, &v137, 0, 0, 0);
        v99 = 0;
        if ((_DWORD)v4 || (uint64_t)v124 < 1)
          goto LABEL_254;
        if (v138 == 1)
        {
          v4 = 0;
          v99 = *v137 + v136;
LABEL_254:
          free(v137);
          goto LABEL_187;
        }
        v97 = FigSignalErrorAt();
LABEL_269:
        v4 = v97;
        v99 = 0;
        goto LABEL_254;
      }
    }
    v99 = 0;
    v4 = 4294954514;
    goto LABEL_254;
  }
LABEL_267:
  v4 = v82;
  v99 = 0;
LABEL_187:
  if (cf)
    CFRelease(cf);
  if (v134)
    CFRelease(v134);
  if (v133)
    CFRelease(v133);
  if (v132)
    CFRelease(v132);
  if (!(_DWORD)v4)
  {
    if (!*v79)
    {
      v100 = *(_QWORD *)(a1 + 24);
      v101 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
      if (!v101)
        return 4294954514;
      Sample = v101(v100, 1885954932, 0, v79);
      if ((_DWORD)Sample)
        return Sample;
    }
    if (*((_QWORD *)v79 + 8) && !v79[12])
    {
      v102 = *(_QWORD *)(a1 + 24);
      v103 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
      if (!v103)
        return 4294954514;
      Sample = v103(v102, 1885954932, 0, v79 + 12);
      if ((_DWORD)Sample)
        return Sample;
    }
    if (*((_QWORD *)v79 + 14) && !v79[24])
    {
      v104 = *(_QWORD *)(a1 + 24);
      v105 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
      if (!v105)
        return 4294954514;
      Sample = v105(v104, 1635088502, 0, v79 + 24);
      if ((_DWORD)Sample)
        return Sample;
    }
    if (!*((_QWORD *)v79 + 20) || v79[36])
      goto LABEL_211;
    v106 = *(_QWORD *)(a1 + 24);
    v107 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
    if (v107)
    {
      Sample = v107(v106, 1835365473, 0, v79 + 36);
      if (!(_DWORD)Sample)
      {
LABEL_211:
        Sample = _addFirstSampleReferenceToTrack(a1, v79, v128);
        if ((_DWORD)Sample)
          return Sample;
        if (*((_QWORD *)v79 + 8))
        {
          Sample = _addFirstSampleReferenceToTrack(a1, v79 + 12, v127);
          if ((_DWORD)Sample)
            return Sample;
        }
        if (*((_QWORD *)v79 + 14))
        {
          Sample = _addFirstSampleReferenceToTrack(a1, v79 + 24, v126);
          if ((_DWORD)Sample)
            return Sample;
        }
        if (*((_QWORD *)v79 + 20))
        {
          Sample = _addFirstSampleReferenceToTrack(a1, v79 + 36, v99);
          if ((_DWORD)Sample)
            return Sample;
        }
        return 0;
      }
      return Sample;
    }
    return 4294954514;
  }
  return v4;
}

uint64_t CMPhotoHEIFFileWriterAddSequence(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v9;

  if (!a1)
    return 4294950306;
  v5 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v5)
    return v5;
  if (*(_BYTE *)(a1 + 33) || *(_BYTE *)(a1 + 34) || *(_BYTE *)(a1 + 176))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    v9 = 0;
    v6 = _dataBlobArrayNewEntry(*(void **)(a1 + 48), 0xC0uLL, &v9, a3);
    if (!(_DWORD)v6)
    {
      v7 = v9;
      *v9 = 0;
      *(_OWORD *)(v7 + 2) = 0u;
      *(_OWORD *)(v7 + 6) = 0u;
      *(_OWORD *)(v7 + 9) = 0u;
      *(_OWORD *)(v7 + 14) = 0u;
      *(_OWORD *)(v7 + 18) = 0u;
      *(_OWORD *)(v7 + 21) = 0u;
      *(_OWORD *)(v7 + 26) = 0u;
      *(_OWORD *)(v7 + 30) = 0u;
      *(_OWORD *)(v7 + 33) = 0u;
      *(_OWORD *)(v7 + 38) = 0u;
      *(_OWORD *)(v7 + 42) = 0u;
      *((_QWORD *)v7 + 23) = 0;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v6;
}

uint64_t CMPhotoHEIFFileWriterAddImageToSequence(uint64_t a1, const __CFDictionary *a2, int a3, CFIndex a4, int a5, const opaqueCMFormatDescription *a6, uint64_t *a7)
{
  uint64_t v14;
  const __CFArray *Count;
  _QWORD *ValueAtIndex;
  uint64_t IsFinal;
  _DWORD *v18;
  uint64_t v19;
  uint64_t Dimensions;
  uint64_t v21;
  _DWORD *v23;

  if (!a1)
    return 4294950306;
  v14 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v14)
    return v14;
  if (a4 < 0)
    goto LABEL_24;
  Count = *(const __CFArray **)(a1 + 48);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a4)
  {
LABEL_24:
    v21 = 4294950306;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 176))
  {
    IsFinal = FigSignalErrorAt();
    goto LABEL_28;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a4);
  if (ValueAtIndex[1]
    || (Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(a6),
        *((_DWORD *)ValueAtIndex + 7) = a5,
        ValueAtIndex[4] = (int)Dimensions,
        ValueAtIndex[5] = Dimensions >> 32,
        !a3)
    || ValueAtIndex[1]
    || *(_BYTE *)(a1 + 32))
  {
    v23 = 0;
    IsFinal = _addNewImageRecord(a1, 0, a2, a5, a6, 1, a7, &v23);
    if ((_DWORD)IsFinal)
      goto LABEL_28;
    v18 = v23;
    *v23 = 1;
    *((_QWORD *)v18 + 10) = a4;
  }
  else
  {
    IsFinal = _addNewImageRecordForDeferredSequence(a1, 0, a2, a5, a6, a4, (const void *)0xFFFFFFFFFFFFFFFFLL, a7);
    if ((_DWORD)IsFinal)
      goto LABEL_28;
  }
  v19 = ValueAtIndex[1];
  if (v19 == 1)
  {
    if (!ValueAtIndex[2])
    {
      v19 = 1;
      goto LABEL_21;
    }
    IsFinal = _ensureBackingIsFinal(a1);
    if (!(_DWORD)IsFinal)
    {
      v19 = ValueAtIndex[1];
      goto LABEL_21;
    }
LABEL_28:
    v21 = IsFinal;
    goto LABEL_22;
  }
LABEL_21:
  v21 = 0;
  ValueAtIndex[1] = v19 + 1;
LABEL_22:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v21;
}

uint64_t _addNewImageRecordForDeferredSequence(uint64_t a1, int a2, const __CFDictionary *a3, int a4, const opaqueCMFormatDescription *a5, uint64_t a6, const void *a7, uint64_t *a8)
{
  uint64_t result;
  _QWORD *v17;
  CFTypeRef v18;
  _DWORD *v19;
  _DWORD *v20;

  v20 = 0;
  result = _addNewImageRecord(a1, a2, a3, a4, a5, 0, a8, &v20);
  if (!(_DWORD)result)
  {
    v17 = v20;
    *v20 = 2;
    v17[10] = a6;
    v17[14] = a7;
    v17[15] = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)a1, a3);
    if (a5)
      v18 = CFRetain(a5);
    else
      v18 = 0;
    v17[17] = v18;
    if (!a2)
      ++*(_QWORD *)(a1 + 64);
    v19 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    result = _checkForMIAFConstraints(a1, a2, a3, a4, a5, *a8, a7);
    if (!(_DWORD)result && *v19 == 1)
    {
      kdebug_trace();
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoHEIFFileWriterAddImageToCollection(uint64_t a1, const __CFDictionary *a2, uint64_t a3, const opaqueCMFormatDescription *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *);
  uint64_t v13;
  uint64_t v14;
  int v16;

  if (!a1)
    return 4294950306;
  v10 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v10)
    return v10;
  if (*(_BYTE *)(a1 + 32))
  {
    v13 = FigSignalErrorAt();
  }
  else
  {
    v16 = 0;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v12)
    {
      v14 = 4294954514;
      goto LABEL_9;
    }
    v13 = v12(v11, a3, a4, a2, &v16);
    if (!(_DWORD)v13)
      v13 = _addNewImageRecordForCollection(a1, 0, a2, a3, a4, (const void *)0xFFFFFFFFFFFFFFFFLL, v16, a5);
  }
  v14 = v13;
LABEL_9:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v14;
}

uint64_t _addNewImageRecordForCollection(uint64_t a1, int a2, const __CFDictionary *a3, int a4, const opaqueCMFormatDescription *a5, const void *a6, int a7, uint64_t *a8)
{
  uint64_t result;
  _DWORD *v17;
  _DWORD *v18;
  char v19;
  _DWORD *v20;

  v20 = 0;
  v19 = 0;
  result = _addNewImageRecord(a1, a2, a3, a4, a5, 0, a8, &v20);
  if (!(_DWORD)result)
  {
    v17 = v20;
    *v20 = 0;
    v17[18] = a7;
    *((_QWORD *)v17 + 14) = a6;
    if (!a2)
      ++*(_QWORD *)(a1 + 64);
    v18 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    result = _checkForMIAFConstraints(a1, a2, a3, a4, a5, *a8, a6);
    if (!(_DWORD)result)
    {
      if (*v18 == 1)
        kdebug_trace();
      CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("ReserveImageHandle"), &v19);
      if (v19)
        return _createHEIFWriterImageHandleConfigurationKey(a3, a4, a5, (__CFData **)v17 + 19);
      else
        return 0;
    }
  }
  return result;
}

uint64_t CMPhotoHEIFFileWriterAddDerivedImageToCollection(uint64_t a1, int a2, void *a3, int a4, int32_t a5, int32_t a6, int a7, CGColorSpace *a8, const void *a9, const void *a10, const void *a11, CFArrayRef theArray, char a13, uint64_t *a14)
{
  __CFDictionary *Mutable;
  int TripletsForColorSpace;
  char v22;
  __CFDictionary *MutableCopy;
  CFMutableArrayRef v24;
  CFDataRef v25;
  uint64_t v26;
  __CFDictionary *v27;
  uint64_t v28;
  uint64_t ValueAtIndex;
  uint64_t v30;
  const __CFArray *v31;
  unint64_t Count;
  const __CFAllocator *v33;
  CFIndex v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFArray *v38;
  unint64_t v39;
  const __CFArray *v40;
  uint64_t v41;
  unint64_t v42;
  const __CFString *v43;
  const __CFString *v44;
  uint64_t appended;
  uint64_t v46;
  CMVideoFormatDescriptionRef v47;
  uint64_t (*v48)(uint64_t, uint64_t, CMVideoFormatDescriptionRef, __CFDictionary *, int *);
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  uint64_t v52;
  void *v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  void *v59;
  void *v60;
  void *value;
  CMVideoFormatDescriptionRef formatDescriptionOut;

  formatDescriptionOut = 0;
  if (!a1)
    return 4294950306;
  if (a4 == 1)
  {
    if (!theArray || CFArrayGetCount(theArray) != 2)
      goto LABEL_19;
LABEL_9:
    v54 = a3;
    if (a8)
    {
      Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v60 = 0;
        value = 0;
        v59 = 0;
        TripletsForColorSpace = CMPhotoGetTripletsForColorSpace(a8, 875704422, &value, &v60, &v59);
        v22 = CGColorSpaceContainsFlexGTCInfo();
        if (TripletsForColorSpace || (v22 & 1) != 0)
        {
          v25 = CGColorSpaceCopyICCData(a8);
          if (!v25)
          {
            v26 = FigSignalErrorAt();
            MutableCopy = 0;
            v24 = 0;
            goto LABEL_83;
          }
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2210], v25);
          CFRelease(v25);
        }
        else
        {
          if (value)
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8D68], value);
          if (v60)
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8E98], v60);
          if (v59)
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], v59);
        }
LABEL_34:
        v28 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)a1, 0x64696D67u, a5, a6, Mutable, &formatDescriptionOut);
        if ((_DWORD)v28 || (v28 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)), (_DWORD)v28))
        {
          v26 = v28;
          MutableCopy = 0;
          v24 = 0;
          v25 = 0;
          goto LABEL_83;
        }
        if (!*(_BYTE *)(a1 + 32))
        {
          v58 = -1;
          if (!FigCFArrayGetInt32AtIndex())
            goto LABEL_95;
          ValueAtIndex = FigCFArrayGetValueAtIndex();
          if (!ValueAtIndex)
            goto LABEL_95;
          v30 = ValueAtIndex;
          v31 = *(const __CFArray **)(ValueAtIndex + 48);
          if (v31)
          {
            Count = CFArrayGetCount(v31);
            v57 = 0;
            if (CMPhotoCFArrayGetSizeAtIndex(*(_QWORD *)(v30 + 48), 0, &v57))
            {
              MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              if (MutableCopy)
              {
                v56 = -1;
                if (a4 != 1)
                {
                  cmpweak_kFigPictureCollectionWriterOption_IdentityInputItemID();
                  v41 = FigCFDictionarySetInt64();
                  v24 = 0;
                  if ((_DWORD)v41)
                  {
                    v26 = v41;
                    v25 = 0;
                    goto LABEL_77;
                  }
LABEL_60:
                  v25 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, Count, MEMORY[0x1E0C9B378]);
                  if (!v25)
                    goto LABEL_102;
                  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CC4A68], v25);
                  if (Count)
                  {
                    do
                    {
                      appended = FigCFArrayAppendInt64();
                      if ((_DWORD)appended)
                        goto LABEL_94;
                    }
                    while (--Count);
                  }
                  v55 = 0;
                  v46 = *(_QWORD *)(a1 + 16);
                  v47 = formatDescriptionOut;
                  v48 = *(uint64_t (**)(uint64_t, uint64_t, CMVideoFormatDescriptionRef, __CFDictionary *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
                  if (v48)
                  {
                    appended = v48(v46, 1684630887, v47, MutableCopy, &v55);
                    if ((_DWORD)appended
                      || (appended = _addNewImageRecordForCollection(a1, 0, MutableCopy, 1684630887, formatDescriptionOut, (const void *)v58, v55, a14), (_DWORD)appended))
                    {
LABEL_94:
                      v26 = appended;
                      goto LABEL_77;
                    }
                    if (!a13)
                    {
                      v51 = 0;
                      goto LABEL_79;
                    }
                    if (*(_QWORD *)(a1 + 88)
                      || (v49 = FigCFArrayCreateMutableCopy(), (*(_QWORD *)(a1 + 88) = v49) != 0))
                    {
                      v50 = FigCFArrayCreateMutableCopy();
                      if (v50)
                      {
                        v51 = (const void *)v50;
                        v52 = FigCFArrayAppendInt32();
                        if ((_DWORD)v52
                          || (v52 = FigCFArrayAppendInt32(), (_DWORD)v52)
                          || v56 != -1 && (v52 = FigCFArrayAppendInt32(), (_DWORD)v52))
                        {
                          v26 = v52;
                          pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
LABEL_82:
                          CFRelease(v51);
                          goto LABEL_83;
                        }
                        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 88), v51);
LABEL_79:
                        if (a4 == 1)
                          CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x746D6170);
                        pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
                        v26 = 0;
                        if (!v51)
                          goto LABEL_83;
                        goto LABEL_82;
                      }
                    }
LABEL_102:
                    v26 = 4294950305;
                    goto LABEL_77;
                  }
                  v26 = 4294954514;
LABEL_77:
                  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
                  goto LABEL_83;
                }
                v33 = *(const __CFAllocator **)a1;
                v34 = CFArrayGetCount(theArray);
                v24 = CFArrayCreateMutable(v33, v34, MEMORY[0x1E0C9B378]);
                if (v24)
                {
                  if (!FigCFArrayGetInt32AtIndex())
                    goto LABEL_96;
                  v35 = FigCFArrayGetValueAtIndex();
                  if (!v35)
                    goto LABEL_96;
                  v36 = v35;
                  v37 = FigCFArrayAppendInt64();
                  if (!(_DWORD)v37)
                  {
                    v37 = FigCFArrayAppendInt64();
                    if (!(_DWORD)v37)
                    {
                      v38 = *(const __CFArray **)(v36 + 48);
                      if (!v38)
                      {
LABEL_59:
                        v43 = cmpweak_kFigPictureCollectionWriterOption_TonemapMetadata();
                        CFDictionarySetValue(MutableCopy, v43, v54);
                        v44 = cmpweak_kFigPictureCollectionWriterOption_TonemapInputItemIDs();
                        CFDictionarySetValue(MutableCopy, v44, v24);
                        goto LABEL_60;
                      }
                      v39 = CFArrayGetCount(v38);
                      v40 = *(const __CFArray **)(v36 + 48);
                      if (Count <= v39)
                      {
                        if (v40)
                        {
                          Count = CFArrayGetCount(v40);
                          v40 = *(const __CFArray **)(v36 + 48);
                        }
                        else
                        {
                          Count = 0;
                        }
                      }
                      value = 0;
                      if (CMPhotoCFArrayGetSizeAtIndex(v40, 0, &value))
                      {
                        v42 = v57;
                        if (v57 <= (unint64_t)value)
                          v42 = (unint64_t)value;
                        v57 = v42;
                        goto LABEL_59;
                      }
LABEL_96:
                      v25 = 0;
                      v26 = 4294950306;
                      goto LABEL_77;
                    }
                  }
                  v26 = v37;
LABEL_104:
                  v25 = 0;
                  goto LABEL_77;
                }
              }
              else
              {
                v24 = 0;
              }
              v25 = 0;
              goto LABEL_102;
            }
LABEL_95:
            MutableCopy = 0;
            v24 = 0;
            goto LABEL_96;
          }
        }
        v26 = FigSignalErrorAt();
        MutableCopy = 0;
        v24 = 0;
        goto LABEL_104;
      }
    }
    else
    {
      if (!a9 && !a10 && !a11)
      {
        Mutable = 0;
        goto LABEL_34;
      }
      v27 = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Mutable = v27;
      if (v27)
      {
        if (a9)
          CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E0CA8D68], a9);
        if (a10)
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8E98], a10);
        if (a11)
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8EE8], a11);
        goto LABEL_34;
      }
    }
    MutableCopy = 0;
    v24 = 0;
    v25 = 0;
    v26 = 4294950305;
    goto LABEL_83;
  }
  if (a4 != 2)
  {
    MutableCopy = 0;
    Mutable = 0;
    v24 = 0;
    v25 = 0;
    v26 = 4294950300;
    goto LABEL_83;
  }
  if (theArray && CFArrayGetCount(theArray) == 1)
    goto LABEL_9;
LABEL_19:
  MutableCopy = 0;
  Mutable = 0;
  v24 = 0;
  v25 = 0;
  v26 = 4294950306;
LABEL_83:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  if (Mutable)
    CFRelease(Mutable);
  return v26;
}

uint64_t CMPhotoHEIFFileWriterAddThumbnailToImage(uint64_t a1, const __CFDictionary *a2, CFIndex a3, uint64_t a4, const opaqueCMFormatDescription *a5, uint64_t *a6)
{
  uint64_t v12;
  const __CFArray *Count;
  unsigned int *ValueAtIndex;
  unsigned int *v15;
  CFIndex v16;
  const __CFArray *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t Dimensions;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *);
  __CFArray *v29;
  int v31;
  _DWORD *v32;

  if (!a1)
    return 4294950306;
  v12 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v12)
    return v12;
  if (a3 < 0)
    goto LABEL_33;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a3)
  {
LABEL_33:
    v25 = 4294950306;
    goto LABEL_29;
  }
  ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  if (ValueAtIndex[1])
  {
    v25 = 4294950302;
    goto LABEL_29;
  }
  v15 = ValueAtIndex;
  if (!*ValueAtIndex)
  {
    if (!*(_BYTE *)(a1 + 32))
    {
      v31 = 0;
      v26 = *(_QWORD *)(a1 + 16);
      v27 = ValueAtIndex[18];
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v28)
      {
        v25 = 4294954514;
        goto LABEL_29;
      }
      v23 = v28(v26, v27, a4, a5, a2, &v31);
      if (!(_DWORD)v23)
      {
        v23 = _addNewImageRecordForCollection(a1, 1, a2, a4, a5, (const void *)a3, v31, a6);
        if (!(_DWORD)v23)
        {
          v29 = (__CFArray *)*((_QWORD *)v15 + 16);
          if (v29)
          {
            CFArrayAppendValue(v29, (const void *)*a6);
            v25 = 0;
          }
          else
          {
            v25 = 4294950305;
          }
          goto LABEL_29;
        }
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  v16 = *((_QWORD *)ValueAtIndex + 10);
  if (v16 < 0
    || (v17 = *(const __CFArray **)(a1 + 48)) == 0
    || v16 >= CFArrayGetCount(v17)
    || (v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((_QWORD *)v15 + 10)), v19 = v18[7], v18[1] != v19 + 1))
  {
LABEL_26:
    v23 = FigSignalErrorAt();
    goto LABEL_27;
  }
  v20 = v18;
  if (!v19)
  {
    Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(a5);
    *((_DWORD *)v20 + 19) = a4;
    v20[10] = (int)Dimensions;
    v20[11] = Dimensions >> 32;
  }
  if (*v15 == 2 && !*(_BYTE *)(a1 + 32))
  {
    v23 = _addNewImageRecordForDeferredSequence(a1, 1, a2, a4, a5, *((_QWORD *)v15 + 10), (const void *)a3, a6);
    if (!(_DWORD)v23)
      goto LABEL_19;
LABEL_27:
    v25 = v23;
    goto LABEL_29;
  }
  v22 = *((_QWORD *)v15 + 10);
  v32 = 0;
  v23 = _addNewImageRecord(a1, 1, a2, a4, a5, 1, a6, &v32);
  if ((_DWORD)v23)
    goto LABEL_27;
  v24 = v32;
  *v32 = 1;
  *((_QWORD *)v24 + 10) = v22;
LABEL_19:
  v25 = 0;
  ++v20[7];
LABEL_29:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v25;
}

uint64_t CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(uint64_t a1, const __CFDictionary *a2, CFIndex a3, uint64_t a4, const opaqueCMFormatDescription *a5, uint64_t *a6)
{
  uint64_t v12;
  const __CFArray *Count;
  unsigned int *ValueAtIndex;
  unsigned int *v15;
  CFIndex v16;
  const __CFArray *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t Dimensions;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *);
  int v30;
  _DWORD *v31;

  if (!a1)
    return 4294950306;
  v12 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v12)
    return v12;
  if (a3 < 0)
    goto LABEL_31;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a3)
  {
LABEL_31:
    v25 = 4294950306;
    goto LABEL_27;
  }
  ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  if (ValueAtIndex[1])
  {
    v25 = 4294950302;
    goto LABEL_27;
  }
  v15 = ValueAtIndex;
  if (!*ValueAtIndex)
  {
    if (!*(_BYTE *)(a1 + 32))
    {
      v30 = 0;
      v26 = *(_QWORD *)(a1 + 16);
      v27 = ValueAtIndex[18];
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const opaqueCMFormatDescription *, const __CFDictionary *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v28)
      {
        v25 = 4294954514;
        goto LABEL_27;
      }
      v23 = v28(v26, v27, a4, a5, a2, &v30);
      if (!(_DWORD)v23)
        v23 = _addNewImageRecordForCollection(a1, 2, a2, a4, a5, (const void *)a3, v30, a6);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v16 = *((_QWORD *)ValueAtIndex + 10);
  if (v16 < 0
    || (v17 = *(const __CFArray **)(a1 + 48)) == 0
    || v16 >= CFArrayGetCount(v17)
    || (v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((_QWORD *)v15 + 10)), v19 = v18[13], v18[1] != v19 + 1))
  {
LABEL_24:
    v23 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v20 = v18;
  if (!v19)
  {
    Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(a5);
    *((_DWORD *)v20 + 31) = a4;
    v20[16] = (int)Dimensions;
    v20[17] = Dimensions >> 32;
  }
  if (*v15 == 2 && !*(_BYTE *)(a1 + 32))
  {
    v23 = _addNewImageRecordForDeferredSequence(a1, 2, a2, a4, a5, *((_QWORD *)v15 + 10), (const void *)a3, a6);
    if (!(_DWORD)v23)
      goto LABEL_19;
LABEL_25:
    v25 = v23;
    goto LABEL_27;
  }
  v22 = *((_QWORD *)v15 + 10);
  v31 = 0;
  v23 = _addNewImageRecord(a1, 2, a2, a4, a5, 1, a6, &v31);
  if ((_DWORD)v23)
    goto LABEL_25;
  v24 = v31;
  *v31 = 1;
  *((_QWORD *)v24 + 10) = v22;
LABEL_19:
  v25 = 0;
  ++v20[13];
LABEL_27:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v25;
}

uint64_t CMPhotoHEIFFileWriterAddAuxiliaryReferenceToImage(uint64_t a1, CFIndex a2, CFIndex a3)
{
  uint64_t v6;
  const __CFArray *Count;
  _DWORD *ValueAtIndex;
  _DWORD *v9;
  const __CFArray *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v12 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (a2 < 0)
    goto LABEL_20;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
    goto LABEL_20;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
  if (ValueAtIndex[1] != 2)
    goto LABEL_21;
  v9 = ValueAtIndex;
  if (*ValueAtIndex)
    goto LABEL_21;
  if (a3 < 0)
    goto LABEL_20;
  v10 = *(const __CFArray **)(a1 + 40);
  if (v10)
    v10 = (const __CFArray *)CFArrayGetCount(v10);
  if ((uint64_t)v10 <= a3)
  {
LABEL_20:
    v13 = 4294950306;
    goto LABEL_18;
  }
  v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  if (v11[1] || *v11)
  {
LABEL_21:
    v13 = 4294950302;
    goto LABEL_18;
  }
  v12 = _addItemReference(a1, v11[18], v9[18], 1635088492);
LABEL_17:
  v13 = v12;
LABEL_18:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v13;
}

uint64_t _addItemReference(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  __CFArray *MutableCopy;
  __CFArray *v9;
  uint64_t appended;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t, __CFArray *, uint64_t, _QWORD);
  uint64_t v14;

  MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v9 = MutableCopy;
  appended = CMPhotoCFArrayAppendInt32(MutableCopy, a2);
  if (!(_DWORD)appended)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
    if (*v12 < 5uLL || (v13 = (uint64_t (*)(uint64_t, uint64_t, __CFArray *, uint64_t, _QWORD))v12[17]) == 0)
    {
      v14 = 4294954514;
      goto LABEL_8;
    }
    appended = v13(v11, a3, v9, a4, 0);
  }
  v14 = appended;
LABEL_8:
  CFRelease(v9);
  return v14;
}

uint64_t CMPhotoHEIFFileWriterAddMetadataReferenceToImage(uint64_t a1, uint64_t a2, CFIndex a3)
{
  uint64_t v6;
  const __CFArray *Count;
  _DWORD *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v9 = FigSignalErrorAt();
  }
  else
  {
    if (a3 < 0)
      goto LABEL_13;
    Count = *(const __CFArray **)(a1 + 40);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= a3)
    {
LABEL_13:
      v10 = 4294950306;
      goto LABEL_11;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
    if (*ValueAtIndex)
    {
      v10 = 4294950302;
      goto LABEL_11;
    }
    v9 = _addItemReference(a1, ValueAtIndex[18], a2, 1667527523);
  }
  v10 = v9;
LABEL_11:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v10;
}

uint64_t CMPhotoHEIFFileWriterAddSampleBufferToImage(uint64_t a1, const void *a2, CFIndex a3, opaqueCMSampleBuffer *a4)
{
  uint64_t v8;
  const __CFArray *Count;
  unsigned int *ValueAtIndex;
  uint64_t v11;
  const opaqueCMFormatDescription *FormatDescription;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v17;
  uint64_t v18;
  uint64_t InfoFromFormatDescription;
  uint64_t v20;
  __CFSet *v21;
  uint64_t v22;
  const void *v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, opaqueCMSampleBuffer *);
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, _QWORD, unsigned int *);
  int v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *);
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, _QWORD, _DWORD *);
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  CMTime time2;
  CMTime time1;
  CMTime v72;

  if (!a1)
    return 4294950306;
  if (!a4)
    return 4294950194;
  v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v8)
    return v8;
  if (a3 < 0)
    goto LABEL_112;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a3)
  {
LABEL_112:
    v36 = 4294950306;
    goto LABEL_110;
  }
  ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
  v11 = ValueAtIndex[2];
  FormatDescription = CMSampleBufferGetFormatDescription(a4);
  v13 = *ValueAtIndex;
  if (!*(_BYTE *)(a1 + 32))
  {
    v14 = v13 - 1;
    if (a3)
      v15 = *((_BYTE *)ValueAtIndex + 56) == 0;
    else
      v15 = 0;
    v17 = !v15 || v14 < 2;
    LOBYTE(time1.value) = 8;
    if ((_DWORD)v11 == 1635148593)
    {
      v21 = *(__CFSet **)(a1 + 104);
      v18 = 1635148649;
      v22 = 1635148659;
    }
    else
    {
      if ((_DWORD)v11 != 1785750887)
      {
        LODWORD(v18) = 1835623985;
        if ((_DWORD)v11 == 1752589105)
        {
          InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(FormatDescription, 0, 0, 0, 0, 0, (char *)&time1, 0, 0, 0, 0, 0);
          if ((_DWORD)InfoFromFormatDescription)
            goto LABEL_109;
          if (LOBYTE(time1.value) <= 8u)
            v18 = 1751476579;
          else
            v18 = 1751476600;
          if (v14 >= 2)
            v20 = v18;
          else
            v20 = 1751479907;
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)v20);
        }
        goto LABEL_35;
      }
      v21 = *(__CFSet **)(a1 + 104);
      v18 = 1785750887;
      v22 = 1785751411;
    }
    if (v14 >= 2)
      v23 = (const void *)v18;
    else
      v23 = (const void *)v22;
    CFSetAddValue(v21, v23);
LABEL_35:
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x6D696631);
    if (v14 <= 1)
    {
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x6D736631);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x69736F38);
      CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x68656963);
    }
    if (v17)
    {
      v24 = 1836279345;
      if (v14 >= 2)
        v24 = v18;
      *(_DWORD *)(a1 + 96) = v24;
    }
    v13 = *ValueAtIndex;
  }
  if (v13 == 2)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
      v36 = 4294950304;
      goto LABEL_110;
    }
    LODWORD(time1.value) = 0;
    v29 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((_QWORD *)ValueAtIndex + 10));
    if (ValueAtIndex[1])
    {
      v30 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), *((_QWORD *)ValueAtIndex + 14));
      v31 = ValueAtIndex[1];
      if (v31 == 2)
      {
        v52 = *(_QWORD *)(a1 + 16);
        v53 = v30[18];
        v54 = *((_QWORD *)ValueAtIndex + 17);
        v55 = *((_QWORD *)ValueAtIndex + 15);
        v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
        if (v56)
          v36 = v56(v52, v53, v11, v54, v55, &time1);
        else
          v36 = 4294954514;
        v29 += 12;
      }
      else
      {
        if (v31 != 1)
        {
          if (v31)
            goto LABEL_108;
          goto LABEL_55;
        }
        v57 = *(_QWORD *)(a1 + 16);
        v58 = v30[18];
        v59 = *((_QWORD *)ValueAtIndex + 17);
        v60 = *((_QWORD *)ValueAtIndex + 15);
        v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 48);
        if (v61)
          v36 = v61(v57, v58, v11, v59, v60, &time1);
        else
          v36 = 4294954514;
        v29 += 6;
      }
LABEL_93:
      if ((_DWORD)v36)
        goto LABEL_110;
      ValueAtIndex[18] = time1.value;
      v29[2] = CFRetain(a4);
      *((_DWORD *)v29 + 6) = time1.value;
      goto LABEL_95;
    }
LABEL_55:
    v32 = *(_QWORD *)(a1 + 16);
    v33 = *((_QWORD *)ValueAtIndex + 17);
    v34 = *((_QWORD *)ValueAtIndex + 15);
    v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 24);
    if (!v35)
      goto LABEL_107;
    v36 = v35(v32, v11, v33, v34, &time1);
    goto LABEL_93;
  }
  if (!v13)
  {
LABEL_95:
    InfoFromFormatDescription = _addSampleBufferToCollection(a1, (uint64_t)ValueAtIndex, a2, a4);
    if ((_DWORD)InfoFromFormatDescription)
      goto LABEL_109;
LABEL_96:
    memset(&v72, 0, sizeof(v72));
    CMSampleBufferGetPresentationTimeStamp(&v72, a4);
    if (ValueAtIndex[1]
      || (ValueAtIndex[25] & 1) == 0
      || (time1 = v72, time2 = *(CMTime *)(ValueAtIndex + 22), !CMTimeCompare(&time1, &time2)))
    {
      v36 = 0;
      *(CMTime *)(ValueAtIndex + 22) = v72;
      goto LABEL_110;
    }
LABEL_108:
    InfoFromFormatDescription = FigSignalErrorAt();
    goto LABEL_109;
  }
  v25 = (unsigned int *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), *((_QWORD *)ValueAtIndex + 10));
  InfoFromFormatDescription = _ensureBackingIsFinal(a1);
  if ((_DWORD)InfoFromFormatDescription
    || (InfoFromFormatDescription = _createMovieWriterIfNeeded(a1), (_DWORD)InfoFromFormatDescription))
  {
LABEL_109:
    v36 = InfoFromFormatDescription;
    goto LABEL_110;
  }
  v26 = 1885954932;
  v27 = ValueAtIndex[1];
  v28 = v25;
  if (v27)
  {
    if (v27 == 2)
    {
      v26 = 1635088502;
      v28 = v25 + 24;
    }
    else
    {
      if (v27 != 1)
        goto LABEL_108;
      v28 = v25 + 12;
    }
  }
  v37 = *v28;
  if ((_DWORD)v37)
  {
LABEL_59:
    v38 = *(_QWORD *)(a1 + 24);
    v39 = *(uint64_t (**)(uint64_t, uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
    if (!v39)
      goto LABEL_107;
    v36 = v39(v38, v37, a4);
    if ((_DWORD)v36)
      goto LABEL_110;
    goto LABEL_96;
  }
  if (*(_BYTE *)(a1 + 33))
    goto LABEL_108;
  if (*v25)
    goto LABEL_108;
  v40 = v25 + 12;
  if (v25[12])
    goto LABEL_108;
  v41 = v25 + 24;
  if (v25[24] || v25[36])
    goto LABEL_108;
  v42 = *(_QWORD *)(a1 + 24);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
  if (!v43)
    goto LABEL_107;
  InfoFromFormatDescription = v43(v42, v26, 0, v28);
  if ((_DWORD)InfoFromFormatDescription)
    goto LABEL_109;
  v44 = 0;
  v69 = *MEMORY[0x1E0CC45A8];
  v68 = *MEMORY[0x1E0C9AE40];
  while (1)
  {
    if (v44 == ValueAtIndex[1])
      goto LABEL_83;
    if (v44)
      break;
    if (!*v25)
    {
      v49 = *(_QWORD *)(a1 + 24);
      v50 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
      if (!v50)
        goto LABEL_107;
      InfoFromFormatDescription = v50(v49, 1885954932, 0, v25);
      if ((_DWORD)InfoFromFormatDescription)
        goto LABEL_109;
      v47 = *(_QWORD *)(a1 + 24);
      v48 = *v25;
LABEL_81:
      v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
      if (!v51)
        goto LABEL_107;
      InfoFromFormatDescription = v51(v47, v48, v69, v68);
      if ((_DWORD)InfoFromFormatDescription)
        goto LABEL_109;
    }
LABEL_83:
    if (++v44 == 3)
      goto LABEL_84;
  }
  if (v44 == 1)
  {
    if (!*v40)
    {
      v45 = *(_QWORD *)(a1 + 24);
      v46 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
      if (!v46)
        goto LABEL_107;
      InfoFromFormatDescription = v46(v45, 1885954932, 0, v25 + 12);
      if ((_DWORD)InfoFromFormatDescription)
        goto LABEL_109;
      v47 = *(_QWORD *)(a1 + 24);
      v48 = *v40;
      goto LABEL_81;
    }
    goto LABEL_83;
  }
  if (v44 != 2)
    goto LABEL_108;
  if (*v41)
    goto LABEL_84;
  v62 = *(_QWORD *)(a1 + 24);
  v63 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v63)
  {
    InfoFromFormatDescription = v63(v62, 1635088502, 0, v41);
    if ((_DWORD)InfoFromFormatDescription)
      goto LABEL_109;
    v64 = *(_QWORD *)(a1 + 24);
    v65 = *v41;
    v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v66)
    {
      InfoFromFormatDescription = v66(v64, v65, v69, v68);
      if ((_DWORD)InfoFromFormatDescription)
        goto LABEL_109;
LABEL_84:
      v37 = *v28;
      goto LABEL_59;
    }
  }
LABEL_107:
  v36 = 4294954514;
LABEL_110:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v36;
}

uint64_t _addSampleBufferToCollection(uint64_t a1, uint64_t a2, const void *a3, void *value)
{
  const void *v8;
  const void *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, const void *, void *);
  size_t TotalSampleSize;

  if ((*(_DWORD *)(a2 + 4) | 2) == 2)
  {
    v8 = (const void *)*(unsigned int *)(a2 + 72);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 200), value);
    if (a3)
      v9 = a3;
    else
      v9 = (const void *)*MEMORY[0x1E0C9B0D0];
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 208), v9);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 216), v8);
    *(_QWORD *)(a1 + 192) += CMSampleBufferGetTotalSampleSize((CMSampleBufferRef)value);
    while (*(_QWORD *)(a1 + 192) > *(_QWORD *)(a1 + 184))
    {
      result = _reorderingBufferDequeueFirstSample(a1);
      if ((_DWORD)result)
        return result;
    }
LABEL_11:
    TotalSampleSize = CMSampleBufferGetTotalSampleSize((CMSampleBufferRef)value);
    result = 0;
    *(_QWORD *)(a2 + 64) += TotalSampleSize;
    return result;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(a2 + 72);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 64);
  if (!v13)
    return 4294954514;
  result = v13(v11, v12, a3, value);
  if (!(_DWORD)result)
    goto LABEL_11;
  return result;
}

uint64_t _createMovieWriterIfNeeded(uint64_t a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
    return 0;
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v3 = Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC43A0], (const void *)*MEMORY[0x1E0CC43D0]);
  CFDictionarySetValue(v3, (const void *)*MEMORY[0x1E0CC4428], (const void *)*MEMORY[0x1E0CC4430]);
  v4 = FigMovieFormatWriterCreateWithByteStream();
  CFRelease(v3);
  return v4;
}

uint64_t CMPhotoHEIFFileWriterAddMetadataToImage(uint64_t a1, uint64_t a2, CFIndex a3, int a4, const void *a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  uint64_t v15;
  const __CFArray *Count;
  CFMutableArrayRef *ValueAtIndex;
  CFMutableArrayRef *v18;
  int v19;
  uint64_t v20;
  uint64_t appended;
  uint64_t MutableCopy;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, int *);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, uint64_t, const void *, uint64_t, int *);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(uint64_t, uint64_t, const void *, int *);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, const void *);
  __CFDictionary *DeepCopy;
  __CFDictionary *v39;
  const void *Value;
  const void *v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t (*v46)(uint64_t, uint64_t, const void *, const void *, const void *, int *);
  int v48;

  if (!a1)
    return 4294950306;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (!*(_QWORD *)(a1 + 16))
      return 4294950304;
    v15 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
    if ((_DWORD)v15)
      return v15;
    if (a3 < 0)
      goto LABEL_22;
    Count = *(const __CFArray **)(a1 + 40);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= a3)
    {
LABEL_22:
      v20 = 4294950306;
    }
    else
    {
      ValueAtIndex = (CFMutableArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a3);
      v18 = ValueAtIndex;
      v19 = *((_DWORD *)ValueAtIndex + 1);
      if (!v19 || (v20 = 4294950302, a4 == 1) && v19 == 2)
      {
        if (*(_DWORD *)ValueAtIndex)
        {
          appended = FigSignalErrorAt();
LABEL_14:
          v20 = appended;
        }
        else if (ValueAtIndex[18]
               || (MutableCopy = FigCFArrayCreateMutableCopy(), (v18[18] = (CFMutableArrayRef)MutableCopy) != 0))
        {
          v48 = 0;
          switch(a4)
          {
            case 0:
              v23 = *(_QWORD *)(a1 + 16);
              v24 = *((unsigned int *)v18 + 18);
              v25 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v25 < 8uLL)
                goto LABEL_41;
              v26 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t, uint64_t, int *))v25[20];
              if (!v26)
                goto LABEL_41;
              appended = v26(v23, v24, a5, a6, a7, &v48);
              if ((_DWORD)appended)
                goto LABEL_14;
              goto LABEL_38;
            case 1:
              v27 = *(_QWORD *)(a1 + 16);
              v28 = *((unsigned int *)v18 + 18);
              v29 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v29 < 8uLL)
                goto LABEL_41;
              v30 = (uint64_t (*)(uint64_t, uint64_t, const void *, uint64_t, int *))v29[21];
              if (!v30)
                goto LABEL_41;
              appended = v30(v27, v28, a5, a7, &v48);
              if ((_DWORD)appended)
                goto LABEL_14;
              goto LABEL_38;
            case 2:
              v31 = *(_QWORD *)(a1 + 16);
              v32 = *((unsigned int *)v18 + 18);
              v33 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v33 < 8uLL)
                goto LABEL_41;
              v34 = (uint64_t (*)(uint64_t, uint64_t, const void *, int *))v33[22];
              if (!v34)
                goto LABEL_41;
              appended = v34(v31, v32, a5, &v48);
              if ((_DWORD)appended)
                goto LABEL_14;
              goto LABEL_38;
            case 3:
              v35 = *(_QWORD *)(a1 + 16);
              v36 = *((unsigned int *)v18 + 18);
              v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 40);
              if (!v37)
                goto LABEL_41;
              appended = v37(v35, v36, *MEMORY[0x1E0CC4BD0], a5);
              if ((_DWORD)appended)
                goto LABEL_14;
              DeepCopy = CMPhotoDictionaryCreateDeepCopy(*(const __CFAllocator **)a1, a5);
              if (!DeepCopy)
                goto LABEL_48;
              v39 = DeepCopy;
              CFArrayAppendValue(v18[18], DeepCopy);
              CFRelease(v39);
              goto LABEL_39;
            case 4:
              Value = CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("Data"));
              v41 = CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("URI"));
              v42 = CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("Name"));
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *((unsigned int *)v18 + 18);
              v45 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
              if (*v45 < 8uLL
                || (v46 = (uint64_t (*)(uint64_t, uint64_t, const void *, const void *, const void *, int *))v45[23]) == 0)
              {
LABEL_41:
                v20 = 4294954514;
                break;
              }
              appended = v46(v43, v44, Value, v41, v42, &v48);
              if ((_DWORD)appended)
                goto LABEL_14;
LABEL_38:
              appended = FigCFArrayAppendInt32();
              if ((_DWORD)appended)
                goto LABEL_14;
LABEL_39:
              v20 = 0;
              if (a8)
                *a8 = v48;
              break;
            default:
              goto LABEL_22;
          }
        }
        else
        {
LABEL_48:
          v20 = 4294950305;
        }
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return v20;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoHEIFFileWriterGetMetadataCount(uint64_t a1, CFIndex a2, const __CFArray **a3)
{
  uint64_t v6;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const __CFArray *v9;
  uint64_t v10;

  if (!a1)
    return 4294950306;
  if (!*(_QWORD *)(a1 + 16))
    return 4294950304;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (a2 < 0)
    goto LABEL_16;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_16:
    v10 = 4294950306;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    if (*(_DWORD *)ValueAtIndex)
    {
      v9 = 0;
    }
    else
    {
      v9 = (const __CFArray *)*((_QWORD *)ValueAtIndex + 18);
      if (v9)
        v9 = (const __CFArray *)CFArrayGetCount(v9);
    }
    v10 = 0;
    if (a3)
      *a3 = v9;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v10;
}

uint64_t CMPhotoHEIFFileWriterAddCompressedMovie(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  CFMutableArrayRef *v7;
  CFMutableArrayRef *v8;
  uint64_t (*v9)(uint64_t, CFIndex *);
  uint64_t IsFinal;
  const __CFAllocator *v11;
  CFMutableArrayRef Mutable;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD *, _QWORD *, char *);
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, _QWORD *);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, const __CFAllocator *, _QWORD *);
  dispatch_queue_t v29;
  const __CFArray *v30;
  CFIndex v31;
  uint64_t v32;
  CFIndex v33;
  unsigned int *ValueAtIndex;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t FigBaseObject;
  void (*v39)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, CFTypeRef);
  CFTypeRef v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFIndex Count;
  CFIndex v47;
  CFMutableArrayRef v48;
  __CFArray *v49;
  CFIndex i;
  CFDictionaryRef v51;
  CFDictionaryRef v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t, __CFArray *);
  CFIndex v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, const __CFAllocator *, CMTime *);
  uint64_t v57;
  CMTimeValue value;
  uint64_t (*v59)(CMTimeValue, CFTypeRef *, CFTypeRef *);
  uint64_t v60;
  CFMutableArrayRef v61;
  __CFArray *v62;
  CFTypeRef v63;
  uint64_t (*v64)(CFTypeRef, CFTypeRef *);
  uint64_t v65;
  CFMutableDictionaryRef v66;
  __CFDictionary *v67;
  CFDictionaryRef v68;
  CFDictionaryRef v69;
  CFDictionaryRef v70;
  CFDictionaryRef v71;
  CFDictionaryRef v72;
  CFDictionaryRef v73;
  CFDictionaryRef v74;
  CFDictionaryRef v75;
  CFTypeRef v76;
  uint64_t (*v77)(CFTypeRef, uint64_t);
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t, __CFArray *);
  CFDictionaryRef v80;
  CFDictionaryRef v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t, CFDictionaryRef);
  uint64_t v83;
  uint64_t SInt32;
  const void *v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t, const void *);
  uint64_t v87;
  uint64_t v88;
  const void *v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t, const void *);
  uint64_t v91;
  CFDictionaryRef v92;
  CFDictionaryRef v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t, CFDictionaryRef);
  CFMutableArrayRef v95;
  const __CFArray *v96;
  CFIndex v97;
  void *v98;
  NSObject *v99;
  uint64_t v101;
  const __CFArray *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, uint64_t, CFTypeRef);
  CFTypeRef v114;
  uint64_t v115;
  void (*v116)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  const __CFDictionary *v117;
  void *v118;
  int64_t v119;
  uint64_t v120;
  __CFDictionary *v121;
  const void **v122;
  const void **v123;
  uint64_t v124;
  CFIndex v125;
  CFMutableArrayRef v126;
  CFMutableArrayRef v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t appended;
  uint64_t v131;
  uint64_t (*v132)(uint64_t, _QWORD, int64_t);
  uint64_t v133;
  void (*v134)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  CFIndex v135;
  CFIndex v136;
  CFMutableArrayRef v137;
  __CFArray *v138;
  CFIndex v139;
  const void **v140;
  const CFDictionaryKeyCallBacks *v141;
  const CFDictionaryValueCallBacks *v142;
  CFDictionaryRef v143;
  CFDictionaryRef v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t, _QWORD, __CFArray *);
  uint64_t v147;
  dispatch_group_t v148;
  CFTypeRef v149;
  CFIndex v150;
  uint64_t v151;
  CMTime *v152;
  const __CFArray *v153;
  char *v154;
  dispatch_group_t *v155;
  char *v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t, uint64_t, const __CFAllocator *, CMTime *);
  const void *v159;
  opaqueCMBufferQueue *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(uint64_t, _QWORD);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  void *v169;
  void *key;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const __CFArray *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const void **v194;
  uint64_t v195;
  __CFDictionary *v196;
  uint64_t v197;
  CMTimeEpoch v198;
  void *v199;
  const void **v200;
  void *v201;
  void *v202;
  CFIndex v203;
  const __CFArray *v204;
  uint64_t v205;
  CFMutableArrayRef *v206;
  CFIndex capacity;
  void *values[2];
  _BYTE v209[32];
  __int128 v210;
  _BYTE v211[32];
  CFTypeRef cf[2];
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  CFTypeRef v218;
  CMTime v219;
  CMTime rhs;
  CMTime time;
  CMTime v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v3 = 4294950306;
  if (!a1 || !a3)
    goto LABEL_196;
  v5 = a1;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
  {
    v3 = v6;
LABEL_196:
    _trackRelease(0);
    return v3;
  }
  capacity = 0;
  if (*(_QWORD *)(v5 + 24)
    || *(_BYTE *)(v5 + 34)
    || CFArrayGetCount(*(CFArrayRef *)(v5 + 48))
    || (v7 = (CFMutableArrayRef *)malloc_type_calloc(1uLL, 0x20uLL, 0x1020040E72D6CFBuLL)) == 0)
  {
    v3 = FigSignalErrorAt();
    _trackRelease(0);
    goto LABEL_153;
  }
  v8 = v7;
  v9 = *(uint64_t (**)(uint64_t, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  v205 = v5;
  if (!v9)
  {
    v15 = 0;
LABEL_32:
    v3 = 4294954514;
    goto LABEL_143;
  }
  IsFinal = v9(a3, &capacity);
  if ((_DWORD)IsFinal)
    goto LABEL_255;
  if (capacity < 1)
    goto LABEL_254;
  IsFinal = _ensureBackingIsFinal(v5);
  if ((_DWORD)IsFinal)
    goto LABEL_255;
  IsFinal = _createMovieWriterIfNeeded(v5);
  if ((_DWORD)IsFinal)
    goto LABEL_255;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity, 0);
  v8[2] = Mutable;
  if (!Mutable)
  {
LABEL_254:
    IsFinal = FigSignalErrorAt();
    goto LABEL_255;
  }
  v206 = v8;
  if (capacity >= 1)
  {
    v13 = 0;
    v14 = *MEMORY[0x1E0CC4670];
    while (1)
    {
      v15 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x102004016B32722uLL);
      if (!v15)
      {
LABEL_190:
        v17 = FigSignalErrorAt();
LABEL_191:
        v3 = v17;
        goto LABEL_143;
      }
      v16 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD *, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 48);
      if (!v16)
        goto LABEL_32;
      v17 = v16(a3, v13, (_QWORD *)v15 + 3, (_QWORD *)v15 + 1, v15 + 12);
      if ((_DWORD)v17)
        goto LABEL_191;
      *(_QWORD *)v15 = v8;
      v18 = *((_QWORD *)v15 + 3);
      v19 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v19)
        goto LABEL_32;
      v17 = v19(v18, (_QWORD *)v15 + 4);
      if ((_DWORD)v17)
        goto LABEL_191;
      v17 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams();
      if ((_DWORD)v17)
        goto LABEL_191;
      v20 = *((_QWORD *)v15 + 4);
      v21 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v21)
        goto LABEL_32;
      v22 = v21(v20, (_QWORD *)v15 + 6);
      if ((_DWORD)v22)
        goto LABEL_262;
      v23 = *(_QWORD *)(v5 + 24);
      v24 = *((unsigned int *)v15 + 2);
      v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 8);
      if (!v25)
        break;
      v22 = v25(v23, v24, 0, (_QWORD *)v15 + 2);
      if ((_DWORD)v22)
      {
LABEL_262:
        v3 = v22;
        goto LABEL_142;
      }
      v26 = *(_QWORD *)(v5 + 24);
      v27 = *((unsigned int *)v15 + 4);
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 16);
      if (!v28)
        break;
      v17 = v28(v26, v27, v14, v11, (_QWORD *)v15 + 7);
      v8 = v206;
      if ((_DWORD)v17)
        goto LABEL_191;
      v29 = dispatch_queue_create("com.apple.coremedia.CMPhoto.videoTrackWriter", 0);
      *((_QWORD *)v15 + 9) = v29;
      if (!v29)
        goto LABEL_190;
      CFArrayAppendValue(v206[2], v15);
      if (++v13 >= capacity)
      {
        v30 = v206[2];
        goto LABEL_34;
      }
    }
    v3 = 4294954514;
LABEL_142:
    v8 = v206;
    goto LABEL_143;
  }
  v30 = Mutable;
LABEL_34:
  v31 = 0;
  v201 = (void *)*MEMORY[0x1E0CC6230];
  v199 = (void *)*MEMORY[0x1E0CC45E8];
  v198 = *MEMORY[0x1E0CC6158];
  v197 = *MEMORY[0x1E0CC4558];
  v195 = *MEMORY[0x1E0CC61C0];
  v193 = *MEMORY[0x1E0CC45D8];
  v192 = *MEMORY[0x1E0CC6178];
  v191 = *MEMORY[0x1E0CC4578];
  v190 = *MEMORY[0x1E0CC6260];
  v189 = *MEMORY[0x1E0CC46A0];
  v188 = *MEMORY[0x1E0CC61F0];
  v187 = *MEMORY[0x1E0CC4690];
  v186 = *MEMORY[0x1E0CC6138];
  v185 = *MEMORY[0x1E0CC4678];
  v184 = *MEMORY[0x1E0CC6120];
  v183 = *MEMORY[0x1E0CC4538];
  v182 = *MEMORY[0x1E0CC6218];
  v181 = *MEMORY[0x1E0CC4640];
  v180 = *MEMORY[0x1E0CC6160];
  v179 = *MEMORY[0x1E0CC4568];
  v178 = *MEMORY[0x1E0CC61D0];
  v177 = *MEMORY[0x1E0CC6018];
  v175 = *MEMORY[0x1E0CC6200];
  v165 = *MEMORY[0x1E0CC45F8];
  v174 = *MEMORY[0x1E0CC6140];
  key = (void *)*MEMORY[0x1E0CC4500];
  v169 = (void *)*MEMORY[0x1E0CC44F0];
  v168 = (void *)*MEMORY[0x1E0CC4520];
  v167 = (void *)*MEMORY[0x1E0CC4510];
  v164 = *MEMORY[0x1E0CC4548];
  v172 = *MEMORY[0x1E0CC4638];
  v173 = *MEMORY[0x1E0CC4620];
  v171 = *MEMORY[0x1E0CC4610];
  v166 = *MEMORY[0x1E0CC45B8];
  v32 = *(_QWORD *)(v5 + 24);
  v176 = v30;
  while (1)
  {
    v33 = v30 ? CFArrayGetCount(v30) : 0;
    if (v31 >= v33)
      break;
    v203 = v31;
    ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v30, v31);
    v35 = 0;
    v36 = ValueAtIndex[4];
    v222.value = (CMTimeValue)v201;
    *(_QWORD *)&v222.timescale = v199;
    v222.epoch = v198;
    v223 = v197;
    v224 = v195;
    v225 = v193;
    v226 = v192;
    v227 = v191;
    v228 = v190;
    v229 = v189;
    v230 = v188;
    v231 = v187;
    v232 = v186;
    v233 = v185;
    v234 = v184;
    v235 = v183;
    v236 = v182;
    v237 = v181;
    v238 = v180;
    v239 = v179;
    v240 = v178;
    v241 = v177;
    cf[0] = 0;
    do
    {
      v37 = *(CMTimeValue *)((char *)&v222.value + v35);
      FigBaseObject = FigTrackReaderGetFigBaseObject();
      v39 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v39)
        v39(FigBaseObject, v37, v11, cf);
      v40 = cf[0];
      if (cf[0])
      {
        v41 = *(_QWORD *)((char *)&v222.timescale + v35);
        v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 24);
        if (!v42)
        {
          v3 = 4294954514;
          v43 = cf[0];
LABEL_138:
          if (v43)
            CFRelease(v43);
LABEL_140:
          v15 = 0;
          goto LABEL_142;
        }
        v3 = v42(v32, v36, v41, v40);
        v43 = cf[0];
        if ((_DWORD)v3)
          goto LABEL_138;
        if (cf[0])
        {
          CFRelease(cf[0]);
          cf[0] = 0;
        }
      }
      v35 += 16;
    }
    while (v35 != 176);
    cf[0] = 0;
    v44 = FigTrackReaderGetFigBaseObject();
    v45 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v45 || (v45(v44, v175, v11, cf), !cf[0]))
    {
      v30 = v176;
      v54 = v203;
      goto LABEL_65;
    }
    Count = CFArrayGetCount((CFArrayRef)cf[0]);
    if (Count < 1)
    {
      v3 = 0;
LABEL_59:
      v30 = v176;
      goto LABEL_62;
    }
    v47 = Count;
    v48 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
    if (!v48)
    {
      v3 = FigSignalErrorAt();
      goto LABEL_59;
    }
    v49 = v48;
    for (i = 0; i != v47; ++i)
    {
      values[0] = 0;
      values[0] = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], i);
      v51 = CFDictionaryCreate(v11, MEMORY[0x1E0CC4358], (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v51)
      {
        v3 = FigSignalErrorAt();
        v30 = v176;
        goto LABEL_61;
      }
      v52 = v51;
      CFArrayAppendValue(v49, v51);
      CFRelease(v52);
    }
    v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
    v30 = v176;
    if (v53)
      v3 = v53(v32, v36, v165, v49);
    else
      v3 = 4294954514;
LABEL_61:
    CFRelease(v49);
LABEL_62:
    if (cf[0])
      CFRelease(cf[0]);
    v54 = v203;
    if ((_DWORD)v3)
      goto LABEL_140;
LABEL_65:
    v219.value = 0;
    v218 = 0;
    v55 = FigTrackReaderGetFigBaseObject();
    v56 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v56)
      goto LABEL_70;
    v57 = v56(v55, v174, v11, &v219);
    if ((_DWORD)v57)
    {
      v3 = v57;
      goto LABEL_96;
    }
    value = v219.value;
    v59 = *(uint64_t (**)(CMTimeValue, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
    if (!v59)
    {
LABEL_70:
      v3 = 4294954514;
      goto LABEL_96;
    }
    *(_OWORD *)cf = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)&v213 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v60 = v59(value, cf, &v218);
    if ((_DWORD)v60 == -12521)
    {
      v3 = 0;
      goto LABEL_96;
    }
    v3 = v60;
    if (!(_DWORD)v60)
    {
      v61 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
      if (!v61)
      {
        v3 = FigSignalErrorAt();
        v54 = v203;
        goto LABEL_96;
      }
      v62 = v61;
      while (1)
      {
        v216 = 0u;
        v217 = 0u;
        v214 = 0u;
        v215 = 0u;
        *(_OWORD *)cf = 0u;
        v213 = 0u;
        v63 = v218;
        v64 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v64)
        {
          v3 = 4294954514;
LABEL_93:
          v54 = v203;
          goto LABEL_95;
        }
        v65 = v64(v63, cf);
        if ((_DWORD)v65)
        {
          v3 = v65;
          v30 = v176;
          goto LABEL_93;
        }
        *(_OWORD *)&v209[16] = v214;
        v210 = v215;
        *(_OWORD *)v211 = v216;
        *(_OWORD *)&v211[16] = v217;
        *(_OWORD *)values = *(_OWORD *)cf;
        *(_OWORD *)v209 = v213;
        v66 = CFDictionaryCreateMutable(v11, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v66)
        {
          v67 = v66;
          *(_OWORD *)&time.value = *(_OWORD *)values;
          time.epoch = *(_QWORD *)v209;
          v68 = CMTimeCopyAsDictionary(&time, v11);
          if (v68)
          {
            v69 = v68;
            CFDictionaryAddValue(v67, key, v68);
            CFRelease(v69);
            time = *(CMTime *)&v209[8];
            v70 = CMTimeCopyAsDictionary(&time, v11);
            if (v70)
            {
              v71 = v70;
              CFDictionaryAddValue(v67, v169, v70);
              CFRelease(v71);
              *(_OWORD *)&time.value = v210;
              time.epoch = *(_QWORD *)v211;
              v72 = CMTimeCopyAsDictionary(&time, v11);
              if (v72)
              {
                v73 = v72;
                CFDictionaryAddValue(v67, v168, v72);
                CFRelease(v73);
                time = *(CMTime *)&v211[8];
                v74 = CMTimeCopyAsDictionary(&time, v11);
                if (v74)
                {
                  v75 = v74;
                  CFDictionaryAddValue(v67, v167, v74);
                  CFRelease(v75);
                  CFArrayAppendValue(v62, v67);
                  CFRelease(v67);
                  v30 = v176;
                  v54 = v203;
                  goto LABEL_82;
                }
              }
            }
          }
          v3 = FigSignalErrorAt();
          CFRelease(v67);
        }
        else
        {
          v3 = FigSignalErrorAt();
        }
        v30 = v176;
        v54 = v203;
        if ((_DWORD)v3)
          goto LABEL_95;
        CFArrayAppendValue(v62, 0);
LABEL_82:
        v76 = v218;
        v77 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (!v77)
          goto LABEL_94;
        v78 = v77(v76, 1);
        if ((_DWORD)v78 == -12520)
        {
          v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 24);
          if (v79)
          {
            v3 = v79(v32, v36, v164, v62);
            goto LABEL_95;
          }
LABEL_94:
          v3 = 4294954514;
LABEL_95:
          CFRelease(v62);
          break;
        }
        v3 = v78;
        if ((_DWORD)v78)
          goto LABEL_95;
      }
    }
LABEL_96:
    if (v218)
      CFRelease(v218);
    if (v219.value)
      CFRelease((CFTypeRef)v219.value);
    if ((_DWORD)v3)
      goto LABEL_140;
    CMTimeMake(&rhs, 1, 1);
    v80 = CMTimeCopyAsDictionary(&rhs, v11);
    if (!v80)
    {
      v3 = FigSignalErrorAt();
      goto LABEL_123;
    }
    v81 = v80;
    v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 24);
    if (v82)
    {
      v83 = v82(v32, v36, v173, v81);
      if (!(_DWORD)v83)
      {
        SInt32 = FigCFNumberCreateSInt32();
        if (SInt32)
        {
          v85 = (const void *)SInt32;
          v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 24);
          if (!v86)
          {
            v3 = 4294954514;
            goto LABEL_120;
          }
          v87 = v86(v32, v36, v172, v85);
          if (!(_DWORD)v87)
          {
            v88 = FigCFNumberCreateSInt32();
            if (v88)
            {
              v89 = (const void *)v88;
              v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 24);
              if (!v90)
              {
                v3 = 4294954514;
                goto LABEL_118;
              }
              v91 = v90(v32, v36, v171, v89);
              if (!(_DWORD)v91)
              {
                *(_OWORD *)cf = *MEMORY[0x1E0CA2E68];
                *(_QWORD *)&v213 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
                v92 = CMTimeCopyAsDictionary((CMTime *)cf, v11);
                if (v92)
                {
                  v93 = v92;
                  v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 24);
                  if (v94)
                    v3 = v94(v32, v36, v166, v93);
                  else
                    v3 = 4294954514;
                  CFRelease(v93);
LABEL_118:
                  CFRelease(v89);
LABEL_119:
                  v30 = v176;
LABEL_120:
                  CFRelease(v85);
LABEL_121:
                  v54 = v203;
                  goto LABEL_122;
                }
                v91 = FigSignalErrorAt();
              }
              v3 = v91;
              goto LABEL_118;
            }
            v87 = FigSignalErrorAt();
          }
          v3 = v87;
          goto LABEL_119;
        }
        v83 = FigSignalErrorAt();
      }
      v3 = v83;
      goto LABEL_121;
    }
    v3 = 4294954514;
LABEL_122:
    CFRelease(v81);
LABEL_123:
    v8 = v206;
    v15 = 0;
    v31 = v54 + 1;
    if ((_DWORD)v3)
      goto LABEL_143;
  }
  v101 = 0;
  v102 = v8[2];
  v103 = *MEMORY[0x1E0CC44A8];
  v222.value = *MEMORY[0x1E0CC4328];
  *(_QWORD *)&v222.timescale = v103;
  v104 = *MEMORY[0x1E0CC4498];
  v222.epoch = *MEMORY[0x1E0CC42E8];
  v223 = v104;
  v105 = *MEMORY[0x1E0CC44B8];
  v224 = *MEMORY[0x1E0CC4308];
  v225 = v105;
  v106 = *MEMORY[0x1E0CC5F88];
  v226 = *MEMORY[0x1E0CC42F8];
  v227 = v106;
  cf[0] = 0;
  v204 = v102;
  do
  {
    v107 = *(CMTimeValue *)((char *)&v222.value + v101);
    v108 = FigFormatReaderGetFigBaseObject();
    v109 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
    if (v109)
      v109(v108, v107, v11, cf);
    v110 = cf[0];
    if (cf[0])
    {
      v111 = *(_QWORD *)((char *)&v222.timescale + v101);
      v112 = FigFormatWriterGetFigBaseObject();
      v113 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v113)
      {
        v3 = 4294954514;
        v114 = cf[0];
LABEL_187:
        if (v114)
          CFRelease(v114);
        goto LABEL_253;
      }
      v3 = v113(v112, v111, v110);
      v114 = cf[0];
      if ((_DWORD)v3)
        goto LABEL_187;
      v102 = v204;
      if (cf[0])
      {
        CFRelease(cf[0]);
        cf[0] = 0;
      }
    }
    v101 += 16;
  }
  while (v101 != 64);
  cf[0] = 0;
  v115 = FigFormatReaderGetFigBaseObject();
  v116 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v116 || (v116(v115, *MEMORY[0x1E0CC4330], v11, cf), (v117 = (const __CFDictionary *)cf[0]) == 0))
  {
    v120 = v205;
    goto LABEL_212;
  }
  v118 = (void *)FigCFDictionaryGetCount();
  v119 = (int64_t)v118;
  v120 = v205;
  if (!v118)
  {
    v121 = 0;
    v122 = 0;
    v3 = 0;
    goto LABEL_201;
  }
  v121 = CFDictionaryCreateMutable(v11, (CFIndex)v118, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v121)
  {
    v3 = FigSignalErrorAt();
    v119 = 0;
    v118 = 0;
    v122 = 0;
    goto LABEL_201;
  }
  v122 = (const void **)malloc_type_calloc(v119, 8uLL, 0x6004044C4A2DFuLL);
  if (!v122 || (v123 = (const void **)malloc_type_calloc(v119, 8uLL, 0x6004044C4A2DFuLL)) == 0)
  {
    v3 = FigSignalErrorAt();
    v119 = 0;
    v118 = 0;
    goto LABEL_201;
  }
  v200 = v123;
  CFDictionaryGetKeysAndValues(v117, v122, v123);
  if (v119 < 1)
  {
    v3 = 0;
    v119 = (int64_t)v121;
    v121 = 0;
    goto LABEL_200;
  }
  v124 = 0;
  v196 = v121;
  v194 = v122;
  while (2)
  {
    v202 = (void *)v122[v124];
    if (!v200[v124])
    {
      v127 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
      if (!v127)
        goto LABEL_257;
LABEL_184:
      CFDictionaryAddValue(v121, v202, v127);
      CFRelease(v127);
      ++v124;
      v8 = v206;
      if (v124 == v119)
      {
        v3 = 0;
        v119 = (int64_t)v121;
        v121 = 0;
        v120 = v205;
        goto LABEL_200;
      }
      continue;
    }
    break;
  }
  v125 = CFArrayGetCount((CFArrayRef)v200[v124]);
  if ((v125 & 1) != 0 || (v126 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378])) == 0)
  {
LABEL_257:
    v3 = FigSignalErrorAt();
    v119 = 0;
    v120 = v205;
    v8 = v206;
    goto LABEL_200;
  }
  v127 = v126;
  if (v125 < 1)
    goto LABEL_184;
  v128 = 0;
  while (1)
  {
    LODWORD(values[0]) = 0;
    LODWORD(time.value) = 0;
    FigCFArrayGetInt32AtIndex();
    v129 = v128 + 1;
    FigCFArrayGetInt32AtIndex();
    if (!_getDestinationTrackIDFromSourceTrackID((int)values[0], v102)
      || !_getDestinationTrackIDFromSourceTrackID(time.value, v102))
    {
      break;
    }
    appended = FigCFArrayAppendInt32();
    if ((_DWORD)appended)
      goto LABEL_199;
    appended = FigCFArrayAppendInt32();
    if ((_DWORD)appended)
      goto LABEL_199;
    v128 += 2;
    v102 = v204;
    if (v129 + 1 >= v125)
    {
      v121 = v196;
      v122 = v194;
      goto LABEL_184;
    }
  }
  appended = FigSignalErrorAt();
LABEL_199:
  v3 = appended;
  v121 = v196;
  CFRelease(v127);
  v119 = 0;
  v120 = v205;
  v8 = v206;
  v122 = v194;
LABEL_200:
  v118 = v200;
LABEL_201:
  free(v118);
  free(v122);
  if (v121)
    CFRelease(v121);
  if (!(_DWORD)v3)
  {
    v131 = FigFormatWriterGetFigBaseObject();
    v132 = *(uint64_t (**)(uint64_t, _QWORD, int64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v132)
      v3 = v132(v131, *MEMORY[0x1E0CC44E0], v119);
    else
      v3 = 4294954514;
  }
  if (v119)
    CFRelease((CFTypeRef)v119);
  if (cf[0])
    CFRelease(cf[0]);
  if (!(_DWORD)v3)
  {
LABEL_212:
    cf[0] = 0;
    v133 = FigFormatReaderGetFigBaseObject();
    v134 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
    if (!v134)
      goto LABEL_228;
    v134(v133, *MEMORY[0x1E0CC42D0], v11, cf);
    if (!cf[0])
      goto LABEL_228;
    v135 = CFArrayGetCount((CFArrayRef)cf[0]);
    if (v135 < 1)
    {
      v3 = 0;
    }
    else
    {
      v136 = v135;
      v137 = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
      if (v137)
      {
        v138 = v137;
        v139 = 0;
        v140 = (const void **)MEMORY[0x1E0CC4358];
        v141 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v142 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        do
        {
          values[0] = 0;
          values[0] = (void *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v139);
          v143 = CFDictionaryCreate(v11, v140, (const void **)values, 1, v141, v142);
          if (!v143)
          {
            v147 = FigSignalErrorAt();
            goto LABEL_221;
          }
          v144 = v143;
          CFArrayAppendValue(v138, v143);
          CFRelease(v144);
          ++v139;
        }
        while (v136 != v139);
        v145 = FigFormatWriterGetFigBaseObject();
        v146 = *(uint64_t (**)(uint64_t, _QWORD, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v146)
        {
          v147 = v146(v145, *MEMORY[0x1E0CC4468], v138);
LABEL_221:
          v3 = v147;
          goto LABEL_224;
        }
        v3 = 4294954514;
LABEL_224:
        v8 = v206;
        CFRelease(v138);
      }
      else
      {
        v3 = FigSignalErrorAt();
        v8 = v206;
      }
    }
    if (cf[0])
      CFRelease(cf[0]);
    if (!(_DWORD)v3)
    {
LABEL_228:
      CMNotificationCenterGetDefaultLocalCenter();
      IsFinal = CMNotificationCenterAddListener();
      if (!(_DWORD)IsFinal)
      {
        v148 = dispatch_group_create();
        v8[3] = (CFMutableArrayRef)v148;
        if (v148)
        {
          v149 = *(CFTypeRef *)(v120 + 24);
          if (v149)
            v149 = CFRetain(v149);
          v150 = 0;
          v8[1] = (CFMutableArrayRef)v149;
          v151 = *MEMORY[0x1E0CC4460];
          v152 = (CMTime *)MEMORY[0x1E0CA2E18];
          while (1)
          {
            v153 = v8[2];
            if (v153)
              v153 = (const __CFArray *)CFArrayGetCount(v153);
            if (v150 >= (uint64_t)v153)
              break;
            v154 = (char *)CFArrayGetValueAtIndex(v8[2], v150);
            v155 = (dispatch_group_t *)v8;
            v156 = v154;
            dispatch_group_enter(v155[3]);
            v156[104] = 1;
            v222 = *v152;
            time.value = 0;
            v157 = FigFormatWriterGetFigBaseObject();
            v158 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
            if (!v158)
            {
              v3 = 4294954514;
LABEL_250:
              v8 = v206;
              goto LABEL_252;
            }
            v3 = v158(v157, v151, v11, &time);
            v159 = (const void *)time.value;
            if (!(_DWORD)v3)
            {
              CMTimeMakeFromDictionary(&v222, (CFDictionaryRef)time.value);
              v159 = (const void *)time.value;
            }
            if (v159)
              CFRelease(v159);
            if ((_DWORD)v3)
              goto LABEL_250;
            cf[0] = 0;
            cf[1] = 0;
            *(_QWORD *)&v213 = 0;
            CMTimeMake((CMTime *)values, 1, 2);
            time = v222;
            CMTimeAdd((CMTime *)cf, &time, (CMTime *)values);
            CMTimeMake(&rhs, 1, 1);
            *(_OWORD *)&v219.value = *(_OWORD *)cf;
            v219.epoch = v213;
            CMTimeAdd(&time, &v219, &rhs);
            *(CMTime *)(v156 + 80) = time;
            v160 = (opaqueCMBufferQueue *)*((_QWORD *)v156 + 7);
            *(_OWORD *)&time.value = *(_OWORD *)cf;
            time.epoch = v213;
            v161 = CMBufferQueueInstallTrigger(v160, (CMBufferQueueTriggerCallback)_lowWaterLevelTriggerFunction, v156, 1, &time, (CMBufferQueueTriggerToken *)v156 + 8);
            ++v150;
            v8 = v206;
            if ((_DWORD)v161)
            {
              v3 = v161;
              goto LABEL_252;
            }
          }
          dispatch_group_wait((dispatch_group_t)v8[3], 0xFFFFFFFFFFFFFFFFLL);
          v3 = *(unsigned int *)v8;
          if (!(_DWORD)v3)
          {
            v162 = *(_QWORD *)(v205 + 24);
            v163 = *(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (v163)
            {
              v3 = v163(v162, 0);
              if (!(_DWORD)v3)
                *(_BYTE *)(v205 + 34) = 1;
            }
            else
            {
              v3 = 4294954514;
            }
          }
        }
        else
        {
          v3 = FigSignalErrorAt();
        }
LABEL_252:
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        goto LABEL_253;
      }
LABEL_255:
      v3 = IsFinal;
    }
  }
LABEL_253:
  v15 = 0;
LABEL_143:
  _trackRelease(v15);
  v95 = v8[1];
  if (v95)
    CFRelease(v95);
  v96 = v8[2];
  v5 = v205;
  if (v96)
  {
    if (CFArrayGetCount(v8[2]) >= 1)
    {
      v97 = 0;
      do
      {
        v98 = (void *)CFArrayGetValueAtIndex(v96, v97);
        _trackRelease(v98);
        ++v97;
      }
      while (v97 < CFArrayGetCount(v96));
    }
    CFRelease(v96);
  }
  v99 = v8[3];
  if (v99)
    dispatch_release(v99);
  free(v8);
LABEL_153:
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
  return v3;
}

uint64_t _formatWriterNotificationErrorCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  CFIndex i;
  dispatch_queue_t *ValueAtIndex;

  result = FigCFDictionaryGetInt32IfPresent();
  if ((_DWORD)result)
  {
    if (!*(_DWORD *)a2)
    {
      *(_DWORD *)a2 = 0;
      result = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
      if (result >= 1)
      {
        for (i = 0; i < result; ++i)
        {
          ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), i);
          dispatch_async_f(ValueAtIndex[9], ValueAtIndex, (dispatch_function_t)_readWriteSamplesUntilSampleBufferQueueIsFull);
          result = CFArrayGetCount(*(CFArrayRef *)(a2 + 16));
        }
      }
    }
  }
  return result;
}

void _trackRelease(void *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  opaqueCMBufferQueue *v6;
  const void *v7;
  NSObject *v8;

  if (a1)
  {
    v2 = (const void *)*((_QWORD *)a1 + 3);
    if (v2)
      CFRelease(v2);
    v3 = (const void *)*((_QWORD *)a1 + 4);
    if (v3)
      CFRelease(v3);
    v4 = (const void *)*((_QWORD *)a1 + 5);
    if (v4)
      CFRelease(v4);
    v5 = (const void *)*((_QWORD *)a1 + 6);
    if (v5)
      CFRelease(v5);
    v6 = (opaqueCMBufferQueue *)*((_QWORD *)a1 + 7);
    if (v6)
    {
      CMBufferQueueRemoveTrigger(v6, *((CMBufferQueueTriggerToken *)a1 + 8));
      v7 = (const void *)*((_QWORD *)a1 + 7);
      if (v7)
        CFRelease(v7);
    }
    v8 = *((_QWORD *)a1 + 9);
    if (v8)
      dispatch_release(v8);
    free(a1);
  }
}

uint64_t CMPhotoHEIFFileWriterAddGroup(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, const void *, _QWORD, unsigned int *);
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  uint64_t MutableCopy;
  __CFDictionary *v15;
  CFMutableArrayRef v16;
  CFNumberRef Int;
  uint64_t v18;
  unsigned int v20;

  if (!a1)
    return 4294950306;
  if (!*(_QWORD *)(a1 + 16))
    return 4294950304;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (*(_BYTE *)(a1 + 32))
    goto LABEL_25;
  if (a2 == 1634497650)
  {
    v7 = (const void **)MEMORY[0x1E0CC4AD8];
  }
  else
  {
    if (a2 != 1937007986)
    {
LABEL_25:
      v12 = FigSignalErrorAt();
      goto LABEL_26;
    }
    v7 = (const void **)MEMORY[0x1E0CC4AE0];
  }
  v8 = *v7;
  if (!*v7)
    goto LABEL_25;
  v20 = 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v10 < 2uLL || (v11 = (uint64_t (*)(uint64_t, const void *, _QWORD, unsigned int *))v10[12]) == 0)
  {
    v18 = 4294954514;
LABEL_27:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return v18;
  }
  v12 = v11(v9, v8, 0, &v20);
  if ((_DWORD)v12)
  {
LABEL_26:
    v18 = v12;
    goto LABEL_27;
  }
  if (!*(_QWORD *)(a1 + 56)
    && (Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(a1 + 56) = Mutable) == 0)
    || (MutableCopy = FigCFDictionaryCreateMutableCopy()) == 0)
  {
    v18 = 4294950305;
    goto LABEL_27;
  }
  v15 = (__CFDictionary *)MutableCopy;
  v16 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B378]);
  if (v16)
  {
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CC4B00], v16);
    CFDictionarySetValue(v15, (const void *)*MEMORY[0x1E0CC4B08], v8);
    Int = CMPhotoCFNumberCreateInt(v20);
    if (Int)
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), Int, v15);
      v18 = 0;
      if (a3)
        *a3 = v20;
      goto LABEL_20;
    }
  }
  else
  {
    Int = 0;
  }
  v18 = 4294950305;
LABEL_20:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (Int)
    CFRelease(Int);
  return v18;
}

uint64_t CMPhotoHEIFFileWriterAddGroupProperties(uint64_t a1, int a2, const void *a3)
{
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  CFNumberRef Int;
  CFNumberRef v9;
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (FigCFDictionaryGetCount() <= 0)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 80)
    && (Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(a1 + 80) = Mutable) == 0)
    || (Int = CMPhotoCFNumberCreateInt(a2)) == 0)
  {
    v10 = 4294950305;
LABEL_13:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return v10;
  }
  v9 = Int;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), Int, a3);
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v9);
  return 0;
}

uint64_t CMPhotoHEIFFileWriterAddImageToGroup(uint64_t a1, CFIndex a2, uint64_t a3)
{
  uint64_t v6;
  const __CFArray *Count;
  _DWORD *ValueAtIndex;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v14;
  CFNumberRef Int;
  CFNumberRef v16;
  const __CFDictionary *Value;
  __CFArray *v18;
  uint64_t appended;

  if (!a1)
    return 4294950306;
  if (!*(_QWORD *)(a1 + 16))
    return 4294950304;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v14 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (a2 < 0)
    goto LABEL_21;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_21:
    appended = 4294950306;
    goto LABEL_19;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
  if (ValueAtIndex[1])
  {
    appended = 4294950302;
    goto LABEL_19;
  }
  v9 = ValueAtIndex;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = ValueAtIndex[18];
  v12 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v12 < 2uLL || (v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v12[13]) == 0)
  {
    appended = 4294954514;
LABEL_19:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return appended;
  }
  v14 = v13(v10, v11, a3, 0);
  if ((_DWORD)v14)
  {
LABEL_26:
    appended = v14;
    goto LABEL_19;
  }
  Int = CMPhotoCFNumberCreateInt(a3);
  if (!Int)
  {
    appended = 4294950305;
    goto LABEL_19;
  }
  v16 = Int;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), Int);
  if (Value && (v18 = (__CFArray *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CC4B00])) != 0)
    appended = CMPhotoCFArrayAppendInt32(v18, v9[18]);
  else
    appended = 4294950304;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v16);
  return appended;
}

uint64_t CMPhotoHEIFFileWriterAddGroupToGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFNumberRef Int;
  CFNumberRef v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  CFNumberRef v11;
  __CFArray *v12;
  __CFArray *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v17;
  uint64_t appended;

  if (!a1)
    return 4294950306;
  if (!*(_QWORD *)(a1 + 16))
    return 4294950304;
  if (a2 == a3)
    return 4294950306;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (*(_BYTE *)(a1 + 32))
  {
    appended = FigSignalErrorAt();
    goto LABEL_26;
  }
  Int = CMPhotoCFNumberCreateInt(a3);
  if (!Int)
    goto LABEL_20;
  v8 = Int;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), Int);
  if (!Value)
  {
LABEL_21:
    v17 = FigSignalErrorAt();
LABEL_22:
    appended = v17;
    goto LABEL_17;
  }
  v10 = Value;
  CFRelease(v8);
  v11 = CMPhotoCFNumberCreateInt(a2);
  if (!v11)
  {
LABEL_20:
    appended = 4294950305;
LABEL_26:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    return appended;
  }
  v8 = v11;
  if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), v11))
    goto LABEL_21;
  v12 = (__CFArray *)CFDictionaryGetValue(v10, (const void *)*MEMORY[0x1E0CC4B00]);
  if (!v12)
  {
    appended = 4294950304;
    goto LABEL_17;
  }
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v15 >= 7uLL)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v15[19];
    if (v16)
    {
      v17 = v16(v14, a2, a3, 0);
      if (!(_DWORD)v17)
      {
        appended = CMPhotoCFArrayAppendInt32(v13, a2);
        if (!(_DWORD)appended)
          CFSetAddValue(*(CFMutableSetRef *)(a1 + 104), (const void *)0x756E6966);
        goto LABEL_17;
      }
      goto LABEL_22;
    }
  }
  appended = 4294954514;
LABEL_17:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  CFRelease(v8);
  return appended;
}

uint64_t CMPhotoHEIFFileWriterGetPropertiesForImage(uint64_t a1, CFIndex a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  const __CFArray *Count;
  _OWORD *ValueAtIndex;
  uint64_t v11;

  if (!a1)
    return 4294950306;
  v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v8)
    return v8;
  if (a2 < 0)
    goto LABEL_13;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_13:
    v11 = 4294950306;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    if (a3)
      *a3 = ValueAtIndex[1];
    v11 = 0;
    if (a4)
      *a4 = *((_DWORD *)ValueAtIndex + 2);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v11;
}

uint64_t CMPhotoHEIFFileWriterGetPropertiesForSequence(uint64_t a1, CFIndex a2, int a3, _OWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  const __CFArray *Count;
  _OWORD *ValueAtIndex;
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v10 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v10)
    return v10;
  if (a2 < 0)
    goto LABEL_21;
  Count = *(const __CFArray **)(a1 + 48);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_21:
    v13 = 4294950306;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
    switch(a3)
    {
      case 0:
LABEL_12:
        if (!*((_DWORD *)ValueAtIndex + 7) || ValueAtIndex[2] == 0)
        {
          v13 = 4294950303;
        }
        else
        {
          if (a4)
            *a4 = ValueAtIndex[2];
          v13 = 0;
          if (a5)
            *a5 = *((_DWORD *)ValueAtIndex + 7);
        }
        goto LABEL_19;
      case 2:
        ValueAtIndex += 6;
        goto LABEL_12;
      case 1:
        ValueAtIndex += 3;
        goto LABEL_12;
    }
    v13 = FigSignalErrorAt();
  }
LABEL_19:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v13;
}

uint64_t CMPhotoHEIFFileWriterGetOrientationTransformsForImage(uint64_t a1, CFIndex a2, _BYTE *a3, _DWORD *a4, _BYTE *a5, _DWORD *a6)
{
  uint64_t v12;
  const __CFArray *Count;
  _BYTE *ValueAtIndex;
  uint64_t v15;

  if (!a1)
    return 4294950306;
  v12 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v12)
    return v12;
  if (a2 < 0)
    goto LABEL_17;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_17:
    v15 = 4294950306;
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    if (a3)
      *a3 = ValueAtIndex[32];
    if (a4)
      *a4 = *((_DWORD *)ValueAtIndex + 9);
    if (a5)
      *a5 = ValueAtIndex[40];
    v15 = 0;
    if (a6)
      *a6 = *((_DWORD *)ValueAtIndex + 11);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v15;
}

uint64_t CMPhotoHEIFFileWriterGetSequenceHandleForImage(uint64_t a1, CFIndex a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  const __CFArray *Count;
  _QWORD *ValueAtIndex;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v8)
    return v8;
  if ((a2 & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 40);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count > a2)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
      if ((*(_DWORD *)ValueAtIndex - 1) > 1)
      {
        v12 = 0;
        v11 = -1;
        if (!a3)
          goto LABEL_12;
      }
      else
      {
        v11 = ValueAtIndex[10];
        v12 = 1;
        if (!a3)
        {
LABEL_12:
          v13 = 0;
          if (a4)
            *a4 = v11;
          goto LABEL_14;
        }
      }
      *a3 = v12;
      goto LABEL_12;
    }
  }
  v13 = 4294950306;
LABEL_14:
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v13;
}

uint64_t CMPhotoHEIFFileWriterGetTimeStampForImage(uint64_t a1, CFIndex a2, uint64_t a3)
{
  uint64_t v6;
  const __CFArray *Count;
  char *ValueAtIndex;
  uint64_t v9;
  __int128 v10;

  if (!a1)
    return 4294950306;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (a2 < 0)
    goto LABEL_11;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_11:
    v9 = 4294950306;
  }
  else
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    v9 = 0;
    if (a3)
    {
      v10 = *(_OWORD *)(ValueAtIndex + 88);
      *(_QWORD *)(a3 + 16) = *((_QWORD *)ValueAtIndex + 13);
      *(_OWORD *)a3 = v10;
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v9;
}

uint64_t CMPhotoHEIFFileWriterSetTimeStampForImage(uint64_t a1, CFIndex a2, uint64_t a3)
{
  uint64_t v6;
  const __CFArray *Count;
  char *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;

  if (!a1 || (*(_BYTE *)(a3 + 12) & 1) == 0)
    return 4294950306;
  v6 = pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  if ((_DWORD)v6)
    return v6;
  if (a2 < 0)
    goto LABEL_12;
  Count = *(const __CFArray **)(a1 + 40);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a2)
  {
LABEL_12:
    v9 = 4294950306;
  }
  else
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
    v9 = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(ValueAtIndex + 88) = *(_OWORD *)a3;
    *((_QWORD *)ValueAtIndex + 13) = v10;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v9;
}

uint64_t CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions(uint64_t a1, const __CFDictionary *a2, int a3, const opaqueCMFormatDescription *a4, CFIndex a5)
{
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  if (CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions_onceToken != -1)
    dispatch_once(&CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions_onceToken, &__block_literal_global_10);
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
    return 0;
  CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a5);
  if (_createHEIFWriterImageHandleConfigurationKey(a2, a3, a4, (__CFData **)&cf))
    v10 = 0;
  else
    v10 = FigCFEqual();
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t _createHEIFWriterImageHandleConfigurationKey(const __CFDictionary *a1, int a2, CMVideoFormatDescriptionRef videoDesc, __CFData **a4)
{
  double width;
  double height;
  CMVideoDimensions Dimensions;
  CFMutableDataRef Mutable;
  __CFData *v12;
  const __CFArray *Value;
  int Count;
  const __CFString *Extension;
  const __CFString *v16;
  const __CFString *v17;
  const __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  UInt8 bytes[4];
  unint64_t v24;
  unint64_t v25;
  CMVideoDimensions v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGRect CleanAperture;

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  CleanAperture = CMVideoFormatDescriptionGetCleanAperture(videoDesc, 1u);
  width = CleanAperture.size.width;
  height = CleanAperture.size.height;
  Dimensions = CMVideoFormatDescriptionGetDimensions(videoDesc);
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 4294950305;
  v12 = Mutable;
  *(_DWORD *)bytes = a2;
  v24 = vcvtad_u64_f64(width);
  v25 = vcvtad_u64_f64(height);
  v26 = Dimensions;
  if (a1)
  {
    BYTE4(v29) = 0;
    LODWORD(v29) = FigCFDictionaryGetIntIfPresent();
    *(_DWORD *)((char *)&v29 + 6) = -1;
    BYTE5(v29) = FigCFDictionaryGetIntIfPresent();
    BYTE10(v29) = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(a1, (const void *)*MEMORY[0x1E0CC4A70], (_BYTE *)&v29 + 10);
    Value = (const __CFArray *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CC4A68]);
    FigCFArrayGetIntAtIndex();
    if (Value)
      Count = CFArrayGetCount(Value);
    else
      Count = 0;
    HIDWORD(v30) = Count;
  }
  if (videoDesc)
  {
    Extension = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8D68]);
    v16 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8E98]);
    v17 = (const __CFString *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8EE8]);
    CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA21D0]);
    BYTE11(v29) = FigCFEqual();
    HIDWORD(v29) = CVColorPrimariesGetIntegerCodePointForString(Extension);
    LODWORD(v30) = CMPhotoCVYCbCrMatrixGetIntegerCodePointForString(v17);
    DWORD1(v30) = CVTransferFunctionGetIntegerCodePointForString(v16);
    if ((_DWORD)v30 == 2 && FigCFEqual())
      LODWORD(v30) = 0;
    v18 = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA8D50]);
    *(_QWORD *)&v27 = CMPhotoGetCropRectFromCLAPDict(v18, (double)Dimensions.width, (double)Dimensions.height);
    *((_QWORD *)&v27 + 1) = v19;
    *(_QWORD *)&v28 = v20;
    *((_QWORD *)&v28 + 1) = v21;
  }
  CFDataAppendBytes(v12, bytes, 92);
  if (a4)
  {
    result = 0;
    *a4 = v12;
  }
  else
  {
    CFRelease(v12);
    return 0;
  }
  return result;
}

BOOL CMPhotoHEIFFileWriterImageSequenceFirstFrameCompleted(uint64_t a1, int a2, CFIndex idx)
{
  _BOOL8 result;
  const __CFArray *Count;

  result = 0;
  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 48);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    return (uint64_t)Count > idx && *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), idx) + 1) > 1;
  }
  return result;
}

uint64_t _pendingGroupPropertiesApplier(uint64_t key, uint64_t a2, _DWORD *a3)
{
  const __CFDictionary *Value;
  uint64_t UInt32;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, _QWORD);

  if (!a3[2])
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a3 + 56), (const void *)key);
    if (Value && CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CC4B00]))
    {
      UInt32 = FigCFNumberGetUInt32();
      v7 = *(_QWORD *)(*(_QWORD *)a3 + 16);
      v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
      if (*v8 >= 6uLL && (v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v8[18]) != 0)
        key = v9(v7, UInt32, a2, 0);
      else
        key = 4294954514;
    }
    else
    {
      key = FigSignalErrorAt();
    }
    a3[2] = key;
  }
  return key;
}

uint64_t ___writePendingReferencesIfNeeded_block_invoke(uint64_t a1, const __CFArray *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const __CFArray *Count;
  uint64_t v10;
  uint64_t v11;
  const void *ValueAtIndex;
  const void *v13;
  CFTypeID v14;
  uint64_t SInt32;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, const void *);
  int v20;

  result = FigCFArrayGetInt32AtIndex();
  if (!(_DWORD)result
    || (result = FigCFArrayGetInt32AtIndex(), !(_DWORD)result)
    || a2 && CFArrayGetCount(a2) >= 3 && (result = FigCFArrayGetInt32AtIndex(), !(_DWORD)result))
  {
    v8 = (uint64_t *)(a1 + 32);
    v20 = -16992;
LABEL_34:
    *(_DWORD *)(*(_QWORD *)(*v8 + 8) + 24) = v20;
    return result;
  }
  result = FigCFArrayGetValueAtIndex();
  if (!result || (v5 = result, (result = FigCFArrayGetValueAtIndex()) == 0))
  {
    v8 = (uint64_t *)(a1 + 32);
LABEL_33:
    v20 = -16990;
    goto LABEL_34;
  }
  v6 = result;
  v7 = 0;
  v8 = (uint64_t *)(a1 + 32);
  while (1)
  {
    Count = *(const __CFArray **)(*(_QWORD *)(a1 + 40) + 40);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v7 >= (uint64_t)Count)
      break;
    result = FigCFArrayGetValueAtIndex();
    if (!result)
      goto LABEL_33;
    if (v7 != -1 && *(_DWORD *)(result + 4) == 2 && *(_QWORD *)(result + 112) == -1)
    {
      result = _addItemReference(*(_QWORD *)(a1 + 40), *(_DWORD *)(v6 + 72), *(unsigned int *)(result + 72), 1635088492);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        return result;
    }
    ++v7;
  }
  v10 = 0;
  v11 = *MEMORY[0x1E0CC4BD0];
  while (1)
  {
    result = *(_QWORD *)(v5 + 144);
    if (result)
      result = CFArrayGetCount((CFArrayRef)result);
    if (v10 >= result)
      break;
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    v13 = ValueAtIndex;
    if (ValueAtIndex && (v14 = CFGetTypeID(ValueAtIndex), v14 == CFNumberGetTypeID()))
    {
      SInt32 = FigCFNumberGetSInt32();
      result = _addItemReference(*(_QWORD *)(a1 + 40), *(_DWORD *)(v6 + 72), SInt32, 1667527523);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      v16 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
      v18 = *(unsigned int *)(v6 + 72);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
      result = v19 ? v19(v17, v18, v11, v13) : 4294954514;
      *(_DWORD *)(*(_QWORD *)(*v8 + 8) + 24) = result;
      v16 = *v8;
    }
    if (*(_DWORD *)(*(_QWORD *)(v16 + 8) + 24))
      break;
    ++v10;
  }
  return result;
}

uint64_t ___addBackwardsCompatibleStereoGroupsIfNeeded_block_invoke(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t UInt32;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, unsigned int *);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, _QWORD);
  unsigned int v27;
  unsigned int v28;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v1 = (_QWORD *)result;
    FigCFDictionaryGetValue();
    v2 = *MEMORY[0x1E0CC4AE0];
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      result = FigCFDictionaryGetValue();
      if (result)
      {
        result = CFArrayGetCount((CFArrayRef)result);
        if (result == 3)
        {
          UInt32 = FigCFNumberGetUInt32();
          v28 = 0;
          v4 = *(_QWORD *)(v1[6] + 16);
          v5 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v5 >= 2uLL && (v6 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, unsigned int *))v5[12]) != 0)
            result = v6(v4, v2, 0, &v28);
          else
            result = 4294954514;
          *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = result;
          if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
          {
            v27 = 0;
            v7 = *(_QWORD *)(v1[6] + 16);
            v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
            if (*v8 >= 2uLL && (v9 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, unsigned int *))v8[12]) != 0)
              result = v9(v7, *MEMORY[0x1E0CC4AD8], 0, &v27);
            else
              result = 4294954514;
            *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = result;
            if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
            {
              result = FigCFArrayGetInt32AtIndex();
              if ((_DWORD)result)
              {
                result = FigCFArrayGetInt32AtIndex();
                if ((_DWORD)result)
                {
                  v10 = *(_QWORD *)(v1[6] + 16);
                  v11 = v28;
                  v12 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                  if (*v12 >= 2uLL && (v13 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))v12[13]) != 0)
                    result = v13(v10, 0, v11, 0);
                  else
                    result = 4294954514;
                  *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = result;
                  if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
                  {
                    v14 = *(_QWORD *)(v1[6] + 16);
                    v15 = v28;
                    v16 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                    if (*v16 >= 2uLL
                      && (v17 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD))v16[13]) != 0)
                    {
                      result = v17(v14, 0, v15, 0);
                    }
                    else
                    {
                      result = 4294954514;
                    }
                    *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = result;
                    if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
                    {
                      v18 = *(_QWORD *)(v1[6] + 16);
                      v19 = v27;
                      v20 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                      if (*v20 >= 7uLL
                        && (v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v20[19]) != 0)
                      {
                        result = v21(v18, UInt32, v19, 0);
                      }
                      else
                      {
                        result = 4294954514;
                      }
                      *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = result;
                      if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
                      {
                        v22 = *(_QWORD *)(v1[6] + 16);
                        v24 = v27;
                        v23 = v28;
                        v25 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                        if (*v25 >= 7uLL
                          && (v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))v25[19]) != 0)
                        {
                          result = v26(v22, v23, v24, 0);
                        }
                        else
                        {
                          result = 4294954514;
                        }
                        *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = result;
                        if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
                          *(_BYTE *)(*(_QWORD *)(v1[5] + 8) + 24) = 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = -16992;
      }
    }
  }
  return result;
}

uint64_t _reorderingBufferDequeueFirstSample(uint64_t a1)
{
  opaqueCMSampleBuffer *ValueAtIndex;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, const void *, const void *, opaqueCMSampleBuffer *);
  const void *v7;
  uint64_t result;
  size_t TotalSampleSize;
  __CFArray *v10;

  ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 200), 0);
  v3 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 216), 0);
  v4 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 208), 0);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t (**)(uint64_t, const void *, const void *, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 64);
  if (!v6)
    return 4294954514;
  if (v4 == (const void *)*MEMORY[0x1E0C9B0D0])
    v7 = 0;
  else
    v7 = v4;
  result = v6(v5, v3, v7, ValueAtIndex);
  if (!(_DWORD)result)
  {
    TotalSampleSize = CMSampleBufferGetTotalSampleSize(ValueAtIndex);
    v10 = *(__CFArray **)(a1 + 200);
    *(_QWORD *)(a1 + 192) -= TotalSampleSize;
    CFArrayRemoveValueAtIndex(v10, 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 208), 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 216), 0);
    return 0;
  }
  return result;
}

void _addValueToArray(uint64_t a1, __CFArray *a2)
{
  const void *UInt32;
  const void *v4;

  UInt32 = (const void *)FigCFNumberCreateUInt32();
  if (UInt32)
  {
    v4 = UInt32;
    CFArrayAppendValue(a2, UInt32);
    CFRelease(v4);
  }
}

void _addNumberToArray(void *value, CFMutableArrayRef theArray)
{
  if (theArray)
    CFArrayAppendValue(theArray, value);
}

uint64_t _areSiblingThumbnailsMIAFCompliant(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  const __CFArray *v6;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex ValueAtIndex;
  CFIndex v13;
  const __CFArray *Count;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t result;

  v6 = *(const __CFArray **)(a2 + 128);
  if (v6 && (v9 = CFArrayGetCount(v6), v9 >= 1))
  {
    v10 = v9;
    v11 = 0;
    while (1)
    {
      ValueAtIndex = (CFIndex)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 128), v11);
      if (ValueAtIndex < 0)
        return 4294950306;
      v13 = ValueAtIndex;
      Count = *(const __CFArray **)(a1 + 40);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if ((uint64_t)Count < v13)
        return 4294950306;
      v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v13);
      v16 = v15[3] * v15[2];
      if (v16 > a3 && v16 / a3 < 0xC9)
      {
        v17 = 1;
        goto LABEL_12;
      }
      if (v10 == ++v11)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v17 = 0;
LABEL_12:
    result = 0;
    if (a4)
      *a4 = v17;
  }
  return result;
}

uint64_t _addFirstSampleReferenceToTrack(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t CopyWithNoData;
  CFNumberRef v6;
  CFNumberRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD);
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t valuePtr;

  valuePtr = a3;
  CopyWithNoData = FigSampleBufferCreateCopyWithNoData();
  if ((_DWORD)CopyWithNoData)
    return CopyWithNoData;
  v6 = CFNumberCreate(*(CFAllocatorRef *)a1, kCFNumberSInt64Type, &valuePtr);
  if (!v6)
    return 4294950305;
  v7 = v6;
  CMSetAttachment(0, (CFStringRef)*MEMORY[0x1E0CA26F0], v6, 1u);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *a2;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v10)
  {
    v11 = v10(v8, v9, 0);
    if ((_DWORD)v11)
    {
      v13 = v11;
    }
    else
    {
      v12 = (const void *)*((_QWORD *)a2 + 2);
      if (v12)
      {
        CFRelease(v12);
        v13 = 0;
        *((_QWORD *)a2 + 2) = 0;
      }
      else
      {
        v13 = 0;
      }
    }
  }
  else
  {
    v13 = 4294954514;
  }
  CFRelease(v7);
  return v13;
}

void _getSampleOffsetFromPictureReader(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int (*v6)(uint64_t, CFTypeRef *);
  uint64_t CMBaseObject;
  unsigned int (*v8)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *);
  unint64_t v9;
  BOOL v10;
  CFTypeRef v11;
  unsigned int (*v12)(CFTypeRef, CFTypeRef *);
  CFTypeRef v13;
  unsigned int (*v14)(CFTypeRef, uint64_t *, void **, void **, _QWORD, _QWORD);
  uint64_t v15;
  CGSize size;
  void *v17;
  void *v18;
  CFDictionaryRef dict;
  CFTypeRef cf;
  CFTypeRef v21;

  v21 = 0;
  dict = 0;
  cf = 0;
  v17 = 0;
  v18 = 0;
  v6 = *(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    if (!v6(a2, &v21))
    {
      CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
      v8 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v8)
      {
        if (!v8(CMBaseObject, *MEMORY[0x1E0CC4C38], a1, &dict))
        {
          size.width = 0.0;
          size.height = 0.0;
          if (!CGSizeMakeWithDictionaryRepresentation(dict, &size)
            || ((v9 = vcvtad_u64_f64(size.height), vcvtad_u64_f64(size.width) == 1) ? (v10 = v9 == 1) : (v10 = 0), !v10))
          {
LABEL_24:
            FigSignalErrorAt();
            goto LABEL_17;
          }
          v11 = v21;
          v12 = *(unsigned int (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v12)
          {
            if (!v12(v11, &cf))
            {
              v15 = 0;
              v13 = cf;
              v14 = *(unsigned int (**)(CFTypeRef, uint64_t *, void **, void **, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
              if (v14)
              {
                if (!v14(v13, &v15, &v18, &v17, 0, 0))
                {
                  if (v15 == 1)
                  {
                    *a3 = *(_QWORD *)v18;
                    goto LABEL_17;
                  }
                  goto LABEL_24;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_17:
  if (v21)
    CFRelease(v21);
  if (cf)
    CFRelease(cf);
  if (dict)
    CFRelease(dict);
  free(v18);
  free(v17);
}

uint64_t _appendTrackReferenceIfValid(int a1, int a2, CFAllocatorRef allocator, CFMutableArrayRef *a4)
{
  uint64_t result;
  CFMutableArrayRef Mutable;

  result = 0;
  if (a1 && a2)
  {
    if (*a4 || (Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]), (*a4 = Mutable) != 0))
    {
      result = FigCFArrayAppendInt32();
      if (!(_DWORD)result)
        return FigCFArrayAppendInt32();
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t _updateSampleDescriptionExtensions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFAllocatorRef v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *);
  uint64_t v7;
  const opaqueCMFormatDescription *ValueAtIndex;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v10;
  const void *v11;
  const __CFDictionary *v12;
  __CFDictionary *v13;
  __CFArray *v14;
  uint64_t v15;
  __CFData *Mutable;
  __CFData *v17;
  const __CFAllocator *v18;
  CMVideoCodecType MediaSubType;
  int32_t width;
  CMVideoDimensions Dimensions;
  uint64_t v22;
  __CFArray *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, __CFArray *);
  uint64_t v26;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CFArrayRef theArray;
  UInt8 v30[4];
  UInt8 bytes[4];

  formatDescriptionOut = 0;
  theArray = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(CFAllocatorRef *)a1;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 16);
  if (!v6)
  {
    v13 = 0;
    v10 = 0;
    v14 = 0;
    goto LABEL_12;
  }
  v7 = v6(v4, a2, *MEMORY[0x1E0CC4588], v5, &theArray);
  if ((_DWORD)v7)
    goto LABEL_32;
  if (!theArray
    || CFArrayGetCount(theArray) != 1
    || (ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, 0),
        !CMFormatDescriptionGetExtensions(ValueAtIndex)))
  {
    v7 = FigSignalErrorAt();
LABEL_32:
    v15 = v7;
    v13 = 0;
    v10 = 0;
    goto LABEL_37;
  }
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v10 = MutableCopy;
  if (MutableCopy)
  {
    v11 = (const void *)*MEMORY[0x1E0CA2240];
    if (CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA2240]))
    {
      v12 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      v13 = v12;
      if (v12)
      {
        if (CFDictionaryContainsKey(v12, CFSTR("ccst")))
        {
          v14 = 0;
          v15 = 0;
          goto LABEL_20;
        }
        *(_DWORD *)bytes = 0;
        Mutable = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
        if (Mutable)
        {
          v17 = Mutable;
          *(_DWORD *)v30 = 132;
          CFDataAppendBytes(Mutable, bytes, 4);
          CFDataAppendBytes(v17, v30, 4);
          CFDictionarySetValue(v13, CFSTR("ccst"), v17);
          CFRelease(v17);
          goto LABEL_15;
        }
        v22 = FigSignalErrorAt();
        if (!(_DWORD)v22)
        {
LABEL_15:
          CFDictionarySetValue(v10, v11, v13);
          CFDictionaryRemoveValue(v10, (const void *)*MEMORY[0x1E0CA2278]);
          CFDictionaryRemoveValue(v10, (const void *)*MEMORY[0x1E0CA2270]);
          v18 = *(const __CFAllocator **)a1;
          MediaSubType = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
          width = CMVideoFormatDescriptionGetDimensions(ValueAtIndex).width;
          Dimensions = CMVideoFormatDescriptionGetDimensions(ValueAtIndex);
          v22 = CMVideoFormatDescriptionCreate(v18, MediaSubType, width, Dimensions.height, v10, &formatDescriptionOut);
          if (!(_DWORD)v22)
          {
            v23 = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, MEMORY[0x1E0C9B378]);
            v14 = v23;
            if (!v23)
            {
              v26 = FigSignalErrorAt();
              goto LABEL_19;
            }
            CFArrayAppendValue(v23, formatDescriptionOut);
            v24 = *(_QWORD *)(a1 + 24);
            v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 24);
            if (v25)
            {
              v26 = v25(v24, a2, *MEMORY[0x1E0CC4660], v14);
LABEL_19:
              v15 = v26;
              goto LABEL_20;
            }
LABEL_12:
            v15 = 4294954514;
            goto LABEL_20;
          }
        }
      }
      else
      {
        v22 = FigSignalErrorAt();
      }
      v15 = v22;
      goto LABEL_37;
    }
  }
  v15 = FigSignalErrorAt();
  v13 = 0;
LABEL_37:
  v14 = 0;
LABEL_20:
  if (theArray)
    CFRelease(theArray);
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (v14)
    CFRelease(v14);
  if (v10)
    CFRelease(v10);
  if (v13)
    CFRelease(v13);
  return v15;
}

uint64_t _dataBlobArrayNewEntry(void *a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  const __CFAllocator *v8;
  void *v9;
  const void *v10;
  uint64_t result;

  v8 = CFGetAllocator(a1);
  v9 = CFAllocatorAllocate(v8, a2, 0);
  if (!v9)
    return 4294950305;
  v10 = v9;
  bzero(v9, a2);
  CFArrayAppendValue((CFMutableArrayRef)a1, v10);
  if (a4)
    *a4 = CFArrayGetCount((CFArrayRef)a1) - 1;
  result = 0;
  if (a3)
    *a3 = v10;
  return result;
}

uint64_t _addNewImageRecord(uint64_t a1, int a2, const __CFDictionary *a3, int a4, const opaqueCMFormatDescription *a5, int a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  const void *Value;
  uint64_t v20;
  char IntIfPresent;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _BYTE *v25;
  CFMutableArrayRef Mutable;
  int v27;
  BOOL v28;
  uint64_t v29;
  CGRect CleanAperture;

  v29 = 0;
  result = _dataBlobArrayNewEntry(*(void **)(a1 + 40), 0xA0uLL, &v29, a7);
  if (!(_DWORD)result)
  {
    CleanAperture = CMVideoFormatDescriptionGetCleanAperture(a5, 1u);
    v17 = v29;
    *(_DWORD *)(v29 + 4) = a2;
    *(_DWORD *)(v17 + 8) = a4;
    *(_QWORD *)(v17 + 16) = vcvtad_u64_f64(CleanAperture.size.width);
    *(_QWORD *)(v17 + 24) = vcvtad_u64_f64(CleanAperture.size.height);
    v18 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v17 + 88) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v17 + 104) = *(_QWORD *)(v18 + 16);
    Value = (const void *)FigCFDictionaryGetValue();
    if (Value)
      Value = CFRetain(Value);
    v20 = v29;
    *(_DWORD *)(v29 + 36) = 0;
    *(_QWORD *)(v20 + 48) = Value;
    IntIfPresent = FigCFDictionaryGetIntIfPresent();
    v22 = v29;
    *(_DWORD *)(v29 + 44) = -1;
    *(_BYTE *)(v22 + 32) = IntIfPresent;
    v23 = FigCFDictionaryGetIntIfPresent();
    v24 = v29;
    *(_BYTE *)(v29 + 56) = 0;
    v24 += 56;
    *(_BYTE *)(v24 - 16) = v23;
    *(_QWORD *)(v24 + 8) = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(a3, (const void *)*MEMORY[0x1E0CC4A70], (_BYTE *)v24);
    if (a2)
    {
      v25 = (_BYTE *)v29;
    }
    else
    {
      Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)a1, 0, 0);
      v25 = (_BYTE *)v29;
      *(_QWORD *)(v29 + 128) = Mutable;
      if (!Mutable)
        return 4294950305;
    }
    v27 = v25[56];
    *(_BYTE *)(a1 + 224) |= v27;
    if (v27)
      *(_QWORD *)(a1 + 72) = *a7;
    if (!a6)
    {
      if (v25[32])
        v28 = 1;
      else
        v28 = v25[40] != 0;
      *(_BYTE *)(a1 + 248) &= v28;
    }
    result = 0;
    *a8 = v25;
  }
  return result;
}

uint64_t _checkForMIAFConstraints(uint64_t a1, int a2, const __CFDictionary *a3, int a4, CMVideoFormatDescriptionRef videoDesc, uint64_t a6, const void *a7)
{
  unint64_t Dimensions;
  unint64_t v14;
  double x;
  double y;
  double width;
  double height;
  uint64_t MediaSubType;
  int32_t v20;
  _BOOL4 v21;
  int v22;
  const void *v23;
  const __CFDictionary *v24;
  int v25;
  _BOOL4 v26;
  char v28;
  const __CFDictionary *Extension;
  const __CFData *Value;
  const __CFData *v31;
  BOOL v32;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  char v37;
  const __CFDictionary *Extensions;
  const __CFString *v39;
  BOOL v40;
  char v41;
  char v42;
  char v43;
  BOOL v44;
  char v45;
  _QWORD *ValueAtIndex;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t result;
  __CFSet *Mutable;
  BOOL v54;
  char v55;
  char v56;
  char v57;
  char v58;
  const __CFDictionary *v60;
  __int128 v61;
  CFTypeRef cf;
  char v63;
  unsigned __int8 v64;
  __int16 v65;
  uint64_t v66;
  char v67;
  CGRect CleanAperture;

  Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  v14 = HIDWORD(Dimensions);
  CleanAperture = CMVideoFormatDescriptionGetCleanAperture(videoDesc, 1u);
  x = CleanAperture.origin.x;
  y = CleanAperture.origin.y;
  width = CleanAperture.size.width;
  height = CleanAperture.size.height;
  v67 = 0;
  *(_QWORD *)&v61 = 0;
  v66 = 0;
  v65 = 0;
  v64 = 1;
  MediaSubType = CMFormatDescriptionGetMediaSubType(videoDesc);
  v60 = a3;
  if (!CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
  {
    if (a4 == 1635148593)
    {
      Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA2240]);
      if (Extension)
      {
        Value = (const __CFData *)CFDictionaryGetValue(Extension, CFSTR("avcC"));
        if (Value)
        {
          v31 = Value;
          CFDataGetBytePtr(Value);
          CFDataGetLength(v31);
          if (!FigH264Bridge_GetSPSFromAVCC()
            && !FigH264Bridge_GetSPSChromaFormatAndBitDepths())
          {
            v20 = HIDWORD(Dimensions);
            v22 = a2;
            v23 = a7;
            if (HIBYTE(v65) == v65)
              goto LABEL_62;
            v32 = 0;
            a2 = v22;
            goto LABEL_127;
          }
        }
      }
    }
    else
    {
      if (a4 != 1752589105)
      {
        v20 = HIDWORD(Dimensions);
        v22 = a2;
        v23 = a7;
        v26 = 0;
        goto LABEL_44;
      }
      v24 = (const __CFDictionary *)CMFormatDescriptionGetExtension(videoDesc, (CFStringRef)*MEMORY[0x1E0CA2240]);
      if (v24)
      {
        if (CFDictionaryGetValue(v24, CFSTR("hvcC")))
        {
          if (!FigHEVCBridge_GetHEVCParameterSetAtIndex()
            && !FigHEVCBridge_GetSPSChromaFormatAndBitDepths())
          {
            v25 = v64;
            if (HIBYTE(v65) == v65)
            {
              v20 = HIDWORD(Dimensions);
              v22 = a2;
              v23 = a7;
              v26 = HIBYTE(v65) == 10;
LABEL_47:
              v34 = v25 == 3 || v25 == 0;
              *(_BYTE *)(a1 + 244) |= v34;
              v35 = v25 == 1;
              v36 = v26 && v25 == 1;
              if (v26)
                v35 = 0;
              v37 = v25 == 2 || v36;
              *(_BYTE *)(a1 + 243) |= v37;
              *(_BYTE *)(a1 + 242) |= v35;
              goto LABEL_63;
            }
          }
        }
      }
    }
LABEL_124:
    v32 = 0;
    goto LABEL_80;
  }
  v20 = HIDWORD(Dimensions);
  LOBYTE(cf) = 0;
  v63 = 0;
  v21 = 1;
  v22 = a2;
  if ((int)MediaSubType <= 1278226735)
  {
    v23 = a7;
    if ((MediaSubType - 1278226488) <= 0x30
      && ((1 << (MediaSubType - 56)) & 0x1400000000001) != 0)
    {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  if ((MediaSubType - 1278226736) > 6 || ((1 << (MediaSubType - 48)) & 0x45) == 0)
  {
    v23 = a7;
    if ((_DWORD)MediaSubType == 1717855600 || (_DWORD)MediaSubType == 1751410032)
      goto LABEL_25;
LABEL_19:
    v21 = (_DWORD)MediaSubType == 1751411059 || (_DWORD)MediaSubType == 1717856627;
    goto LABEL_25;
  }
  v23 = a7;
LABEL_25:
  v26 = CMPhotoGetBitDepthForPixelFormat(MediaSubType) == 10;
  if (!CMPhotoPixelFormatIsSubsampled(MediaSubType, &cf, &v63, &v67, 0))
  {
    if (v21)
    {
      v64 = 0;
      goto LABEL_44;
    }
    if (!v67)
    {
      v64 = 3;
      goto LABEL_44;
    }
    if ((_BYTE)cf && v63)
    {
      v28 = 1;
    }
    else
    {
      if (!(_BYTE)cf || v63)
      {
LABEL_44:
        if (a4 != 1635148593)
        {
          if (a4 == 1752589105)
          {
            v25 = v64;
            goto LABEL_47;
          }
LABEL_63:
          a7 = v23;
          a2 = v22;
          LODWORD(v14) = v20;
          a3 = v60;
          if (!videoDesc)
          {
LABEL_79:
            v32 = v64 - 3 < 0xFFFFFFFE;
            goto LABEL_80;
          }
          Extensions = CMFormatDescriptionGetExtensions(videoDesc);
          cf = 0;
          if (!CMPhotoCreateColorSpaceFromPixelBufferAttachments(Extensions, v64 == 0, (CGColorSpace **)&cf, 1, 0)&& (cf|| (v39 = (const __CFString *)FigCFDictionaryGetValue()) == 0|| (cf = CGColorSpaceCreateWithName(v39)) != 0))
          {
            v63 = 1;
            if (v60)
            {
              FigCFDictionaryGetBooleanIfPresent();
              v40 = v63 == 0;
            }
            else
            {
              v40 = 0;
            }
            if (a2)
              v40 = 0;
            if (a2 == 2 || cf || v40)
            {
              if (cf)
                CFRelease(cf);
            }
            else
            {
              *(_BYTE *)(a1 + 248) = 0;
            }
            goto LABEL_79;
          }
          goto LABEL_124;
        }
LABEL_62:
        *(_BYTE *)(a1 + 245) |= 1u;
        goto LABEL_63;
      }
      v28 = 2;
    }
    v64 = v28;
    goto LABEL_44;
  }
  v32 = 0;
  a7 = v23;
  a2 = v22;
LABEL_127:
  LODWORD(v14) = v20;
  a3 = v60;
LABEL_80:
  v41 = ((v14 | Dimensions) & 1) == 0 || v32;
  v42 = v41 & *(_BYTE *)(a1 + 248);
  if ((((int)x | (int)width) & 1) != 0)
    v43 = 0;
  else
    v43 = v41 & *(_BYTE *)(a1 + 248);
  v44 = ((int)y & 1) == 0 && ((int)height & 1) == 0;
  if (v32)
  {
    v45 = 1;
  }
  else
  {
    v42 = v43;
    v45 = v44;
  }
  if ((int)v14 * (int)Dimensions >= 128000001)
    v45 = 0;
  *(_BYTE *)(a1 + 248) = v42 & v45;
  if (a2 != 1)
    goto LABEL_107;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), (CFIndex)a7);
  v47 = ValueAtIndex[2];
  if (HIDWORD(v47))
    return 4294950190;
  v48 = ValueAtIndex[3];
  if (HIDWORD(v48))
    return 4294950190;
  v49 = (int)Dimensions * (uint64_t)SHIDWORD(Dimensions);
  if (v49)
  {
    v50 = v48 * v47 / v49;
    LOBYTE(v61) = v50 < 0xC9;
    if (v50 < 0xC9)
    {
      v51 = 1;
LABEL_106:
      *(_BYTE *)(a1 + 225) |= v51 == 0;
      goto LABEL_107;
    }
    result = _areSiblingThumbnailsMIAFCompliant(a1, (uint64_t)ValueAtIndex, v49, (char *)&v61);
    if ((_DWORD)result)
      return result;
    v51 = v61;
    if ((_BYTE)v61)
      goto LABEL_106;
    Mutable = *(__CFSet **)(a1 + 232);
    if (!Mutable)
    {
      Mutable = CFSetCreateMutable(*(CFAllocatorRef *)a1, 0, 0);
      *(_QWORD *)(a1 + 232) = Mutable;
      if (!Mutable)
        return 4294950305;
    }
    if (a7 == (const void *)(int)a7)
    {
      CFSetAddValue(Mutable, a7);
      v51 = v61;
      goto LABEL_106;
    }
    return 4294950190;
  }
LABEL_107:
  if (a3)
  {
    LOBYTE(v66) = 1;
    FigCFDictionaryGetBooleanIfPresent();
    if ((_BYTE)v66)
    {
      *(_BYTE *)(a1 + 248) &= CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CC4A68]) != 0;
      if (!a2 && !*(_BYTE *)(a1 + 224))
      {
        *(_BYTE *)(a1 + 224) = 1;
        *(_QWORD *)(a1 + 72) = a6;
      }
    }
    v61 = *MEMORY[0x1E0C9D820];
    if (FigCFDictionaryGetCGSizeIfPresent())
    {
      v54 = *(double *)&v61 >= 64.0;
      if (*((double *)&v61 + 1) < 64.0)
        v54 = 0;
      v55 = *(_BYTE *)(a1 + 248) & v54;
      v56 = ((int)*(double *)&v61 & 1) == 0 || v32;
      v57 = v55 & v56;
      v58 = ((int)*((double *)&v61 + 1) & 1) == 0 || v32;
      *(_BYTE *)(a1 + 248) = v57 & v58;
    }
  }
  return 0;
}

uint64_t _getDestinationTrackIDFromSourceTrackID(int a1, CFArrayRef theArray)
{
  CFIndex v4;
  CFIndex v5;
  _DWORD *ValueAtIndex;

  v4 = 0;
  while (1)
  {
    v5 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v4 >= v5)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4++);
    if (ValueAtIndex[3] == a1)
      return ValueAtIndex[4];
  }
  return 0;
}

void _readWriteSamplesUntilSampleBufferQueueIsFull(uint64_t *a1)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  _OWORD *v5;
  CMTime *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, CMTime *);
  int v9;
  CMTimeValue v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, CMTimeValue, CMTimeValue, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, CMTime *);
  uint64_t v14;
  uint64_t v15;
  CMTimeValue value;
  uint64_t (*v17)(uint64_t, uint64_t, CMTimeValue);
  CMItemCount NumSamples;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, CMItemCount, uint64_t *);
  OSStatus v21;
  CMTime time2;
  CMTime v23;
  uint64_t v24;
  CMTime time1;

  v2 = *a1;
  if (!*(_DWORD *)*a1)
  {
    v3 = 0;
    v5 = a1 + 10;
    v6 = (CMTime *)MEMORY[0x1E0CA2E18];
    while (1)
    {
      if (CMBufferQueueContainsEndOfData((CMBufferQueueRef)a1[7])
        || (memset(&v23, 0, sizeof(v23)),
            CMBufferQueueGetDuration(&v23, (CMBufferQueueRef)a1[7]),
            *(_OWORD *)&time1.value = *v5,
            time1.epoch = a1[12],
            time2 = v23,
            CMTimeCompare(&time1, &time2) < 1))
      {
        v4 = 0;
        goto LABEL_33;
      }
      time1 = *v6;
      time2.value = 0;
      v24 = 0;
      v7 = a1[6];
      v8 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v8)
        break;
      v9 = v8(v7, &time1);
      if (v9)
        goto LABEL_31;
      if (*((_DWORD *)a1 + 2) == 1936684398)
      {
        if (time1.timescale / time1.value <= 1)
          v10 = 1;
        else
          v10 = time1.timescale / time1.value;
      }
      else
      {
        v10 = 1;
      }
      v11 = a1[5];
      v12 = a1[6];
      v13 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue, CMTimeValue, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v13)
        break;
      v9 = v13(v11, v12, v10, v10, 1, 0, 2, 0, 0, 0, 0, &time2);
      if (v9)
        goto LABEL_31;
      v14 = *(_QWORD *)(*a1 + 8);
      v15 = *((unsigned int *)a1 + 4);
      value = time2.value;
      v17 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v17)
        break;
      v9 = v17(v14, v15, value);
      if (v9)
      {
LABEL_31:
        v4 = v9;
      }
      else
      {
        NumSamples = CMSampleBufferGetNumSamples((CMSampleBufferRef)time2.value);
        if (time2.value)
        {
          CFRelease((CFTypeRef)time2.value);
          time2.value = 0;
        }
        v19 = a1[6];
        v20 = *(uint64_t (**)(uint64_t, CMItemCount, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 168);
        if (!v20)
          break;
        v4 = v20(v19, NumSamples, &v24);
        if (!v4)
          v3 = v24 != NumSamples;
      }
LABEL_24:
      if (time2.value)
        CFRelease((CFTypeRef)time2.value);
      if (v4)
        goto LABEL_33;
      if (v3)
      {
        v21 = CMBufferQueueMarkEndOfData((CMBufferQueueRef)a1[7]);
        if (v21)
        {
          v4 = v21;
          goto LABEL_33;
        }
      }
      if (*(_DWORD *)v2)
        goto LABEL_3;
    }
    v4 = -12782;
    goto LABEL_24;
  }
  v3 = 0;
LABEL_3:
  v4 = 1;
LABEL_33:
  if (*((_BYTE *)a1 + 104) && (v4 || v3))
  {
    dispatch_group_leave(*(dispatch_group_t *)(v2 + 24));
    *((_BYTE *)a1 + 104) = 0;
  }
}

void _lowWaterLevelTriggerFunction(dispatch_queue_t *context)
{
  dispatch_async_f(context[9], context, (dispatch_function_t)_readWriteSamplesUntilSampleBufferQueueIsFull);
}

BOOL CMPhotoRectMakeWithDictionaryRepresentation(const __CFDictionary *a1, uint64x2_t *a2)
{
  _BOOL8 result;
  uint64x2_t v4;
  CGRect v5;

  if (!a2)
    return 0;
  memset(&v5, 0, sizeof(v5));
  result = CGRectMakeWithDictionaryRepresentation(a1, &v5);
  if (result)
  {
    v4 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v5.size));
    *a2 = vcvtq_u64_f64(vrndaq_f64((float64x2_t)v5.origin));
    a2[1] = v4;
    return 1;
  }
  return result;
}

BOOL CMPhotoSizeMakeWithDictionaryRepresentation(const __CFDictionary *a1, uint64x2_t *a2)
{
  _BOOL8 result;
  float64x2_t v4;

  if (!a2)
    return 0;
  v4 = 0uLL;
  result = CGSizeMakeWithDictionaryRepresentation(a1, (CGSize *)&v4);
  if (result)
  {
    *a2 = vcvtq_u64_f64(vrndaq_f64(v4));
    return 1;
  }
  return result;
}

uint64_t Slim_GetVersionFromPixelBufferInfo(int a1, unsigned int a2, char a3, int a4, int *a5)
{
  int v5;
  _DWORD *v6;
  uint64_t result;

  if (a1 > 1735549751)
  {
    if (a1 > 1937126451)
    {
      if (a1 <= 2016686639)
      {
        if (a1 <= 1952855091)
        {
          switch(a1)
          {
            case 1937126452:
              v5 = 94;
              break;
            case 1952854576:
              v5 = 24;
              break;
            case 1952854578:
              v5 = 87;
              break;
            default:
              return FigSignalErrorAt();
          }
        }
        else if (a1 > 1953903153)
        {
          if (a1 == 1953903154)
          {
            v5 = 88;
          }
          else
          {
            if (a1 != 1953903668)
              return FigSignalErrorAt();
            v5 = 90;
          }
        }
        else if (a1 == 1952855092)
        {
          v5 = 89;
        }
        else
        {
          if (a1 != 1953903152)
            return FigSignalErrorAt();
          v5 = 23;
        }
      }
      else if (a1 > 2019963441)
      {
        if (a1 > 2037741157)
        {
          if (a1 == 2037741158)
          {
            v5 = 7;
          }
          else
          {
            if (a1 != 2037741171)
              return FigSignalErrorAt();
            v5 = 1;
          }
        }
        else if (a1 == 2019963442)
        {
          v5 = 83;
        }
        else
        {
          if (a1 != 2019963956)
            return FigSignalErrorAt();
          v5 = 85;
        }
      }
      else if (a1 > 2016687155)
      {
        if (a1 == 2016687156)
        {
          v5 = 86;
        }
        else
        {
          if (a1 != 2019963440)
            return FigSignalErrorAt();
          v5 = 12;
        }
      }
      else if (a1 == 2016686640)
      {
        v5 = 11;
      }
      else
      {
        if (a1 != 2016686642)
          return FigSignalErrorAt();
        v5 = 84;
      }
    }
    else if (a1 <= 1885745711)
    {
      if (a1 <= 1751527983)
      {
        switch(a1)
        {
          case 1735549752:
            v5 = 46;
            break;
          case 1751410032:
            v5 = 78;
            break;
          case 1751411059:
            v5 = 79;
            break;
          default:
            return FigSignalErrorAt();
        }
      }
      else if (a1 > 1815491697)
      {
        if (a1 == 1815491698)
        {
          v5 = 20;
        }
        else
        {
          if (a1 != 1882468912)
            return FigSignalErrorAt();
          v5 = 13;
        }
      }
      else if (a1 == 1751527984)
      {
        v5 = 74;
      }
      else
      {
        if (a1 != 1815162994)
          return FigSignalErrorAt();
        v5 = 19;
      }
    }
    else if (a1 > 1936077361)
    {
      if (a1 > 1937125935)
      {
        if (a1 == 1937125936)
        {
          v5 = 25;
        }
        else
        {
          if (a1 != 1937125938)
            return FigSignalErrorAt();
          v5 = 92;
        }
      }
      else if (a1 == 1936077362)
      {
        v5 = 91;
      }
      else
      {
        if (a1 != 1936077876)
          return FigSignalErrorAt();
        v5 = 93;
      }
    }
    else if (a1 > 1919379251)
    {
      if (a1 == 1919379252)
      {
        v5 = 10;
      }
      else
      {
        if (a1 != 1936077360)
          return FigSignalErrorAt();
        v5 = 26;
      }
    }
    else if (a1 == 1885745712)
    {
      v5 = 14;
    }
    else
    {
      if (a1 != 1919378232)
        return FigSignalErrorAt();
      v5 = 47;
    }
    goto LABEL_167;
  }
  if (a1 > 1380411456)
  {
    if (a1 <= 1651925815)
    {
      if (a1 <= 1650942775)
      {
        if (a1 == 1380411457)
        {
          v5 = 75;
          goto LABEL_167;
        }
        if (a1 == 1647589490)
        {
          v5 = 21;
          goto LABEL_167;
        }
        if (a1 != 1647719528)
          return FigSignalErrorAt();
        if (a2 == 6)
        {
          v5 = 59;
          goto LABEL_167;
        }
        if (a2 == 7)
        {
          v5 = 60;
          goto LABEL_167;
        }
      }
      else
      {
        if (a1 <= 1651519797)
        {
          if (a1 == 1650942776)
          {
            v5 = 45;
          }
          else
          {
            if (a1 != 1650943796)
              return FigSignalErrorAt();
            v5 = 3;
          }
          goto LABEL_167;
        }
        if (a1 == 1651519798)
        {
          if ((a3 & 1) != 0)
          {
            if (a2 < 5)
            {
              v5 = a2 + 62;
              goto LABEL_167;
            }
          }
          else if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
          {
            v6 = &unk_1A8295790;
            goto LABEL_156;
          }
        }
        else
        {
          if (a1 != 1651847472)
            return FigSignalErrorAt();
          if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
          {
            v6 = &unk_1A8295724;
            goto LABEL_156;
          }
        }
      }
    }
    else
    {
      if (a1 > 1717856626)
      {
        if (a1 > 1734505011)
        {
          if (a1 == 1734505012)
          {
            v5 = 73;
          }
          else
          {
            if (a1 != 1735549492)
              return FigSignalErrorAt();
            v5 = 72;
          }
        }
        else if (a1 == 1717856627)
        {
          v5 = 81;
        }
        else
        {
          if (a1 != 1734501176)
            return FigSignalErrorAt();
          v5 = 48;
        }
        goto LABEL_167;
      }
      if (a1 > 1652056887)
      {
        if (a1 != 1652056888)
        {
          if (a1 != 1717855600)
            return FigSignalErrorAt();
          v5 = 80;
          goto LABEL_167;
        }
        if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
        {
          v6 = &unk_1A829576C;
          goto LABEL_156;
        }
      }
      else if (a1 == 1651925816)
      {
        if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
        {
          v6 = &unk_1A8295700;
          goto LABEL_156;
        }
      }
      else
      {
        if (a1 != 1651926376)
          return FigSignalErrorAt();
        if (a2 < 9 && ((0x13Fu >> a2) & 1) != 0)
        {
          v6 = &unk_1A8295748;
LABEL_156:
          v5 = v6[a2];
          goto LABEL_167;
        }
      }
    }
    return 4294951896;
  }
  if (a1 <= 875836533)
  {
    if (a1 <= 875704437)
    {
      switch(a1)
      {
        case 825306677:
          v5 = 61;
          break;
        case 825437747:
          v5 = 9;
          break;
        case 875704422:
          v5 = 4;
          break;
        default:
          return FigSignalErrorAt();
      }
    }
    else if (a1 > 875704949)
    {
      if (a1 == 875704950)
      {
        v5 = 77;
      }
      else
      {
        if (a1 != 875836518)
          return FigSignalErrorAt();
        v5 = 6;
      }
    }
    else if (a1 == 875704438)
    {
      v5 = 2;
    }
    else
    {
      if (a1 != 875704934)
        return FigSignalErrorAt();
      v5 = 76;
    }
  }
  else if (a1 > 1278226535)
  {
    if (a1 > 1278226737)
    {
      if (a1 == 1278226738)
      {
        v5 = 22;
      }
      else
      {
        if (a1 != 1278226742)
          return FigSignalErrorAt();
        v5 = 8;
      }
    }
    else if (a1 == 1278226536)
    {
      v5 = 17;
    }
    else
    {
      if (a1 != 1278226736)
        return FigSignalErrorAt();
      v5 = 16;
    }
  }
  else if (a1 > 1278226487)
  {
    if (a1 == 1278226488)
    {
      v5 = 15;
    }
    else
    {
      if (a1 != 1278226534)
        return FigSignalErrorAt();
      v5 = 18;
    }
  }
  else
  {
    if (a1 != 875836534)
    {
      if (a1 == 1111970369)
      {
        v5 = 82;
        goto LABEL_167;
      }
      return FigSignalErrorAt();
    }
    v5 = 5;
  }
LABEL_167:
  result = 0;
  if (a5)
    *a5 = v5 | (a4 << 16);
  return result;
}

uint64_t Slim_GetPixelBufferInfoFromVersion(unsigned int a1, int *a2, int *a3, int *a4, char *a5, int *a6)
{
  int v6;
  int v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;

  if ((unsigned __int16)a1 - 100 <= 0xFFFFFF9C)
    return FigSignalErrorAt();
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 2037741171;
  switch((__int16)a1)
  {
    case 1:
      break;
    case 2:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v10 = 875704422;
      goto LABEL_7;
    case 3:
      v6 = 0;
      v7 = 0;
      v11 = 1650942776;
      goto LABEL_13;
    case 4:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 875704422;
      break;
    case 5:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v10 = 875836518;
LABEL_7:
      v9 = v10 | 0x10;
      break;
    case 6:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 875836518;
      break;
    case 7:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 2037741158;
      break;
    case 8:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1278226742;
      break;
    case 9:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 825437747;
      break;
    case 10:
      v6 = 0;
      v7 = 0;
      v11 = 1919378232;
LABEL_13:
      v9 = v11 + 1020;
      goto LABEL_83;
    case 11:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 2016686640;
      break;
    case 12:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v12 = 2016686640;
      goto LABEL_18;
    case 13:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1882468912;
      break;
    case 14:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v12 = 1882468912;
LABEL_18:
      v9 = v12 + 3276800;
      break;
    case 15:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1278226488;
      break;
    case 16:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1278226736;
      break;
    case 17:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1278226536;
      break;
    case 18:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1278226534;
      break;
    case 19:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1815162994;
      break;
    case 20:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1815491698;
      break;
    case 21:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1647589490;
      break;
    case 22:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1278226738;
      break;
    case 23:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v13 = 1952854576;
      goto LABEL_30;
    case 24:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1952854576;
      break;
    case 25:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v13 = 1936077360;
LABEL_30:
      v9 = v13 | 0x100000;
      break;
    case 26:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1936077360;
      break;
    case 27:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      goto LABEL_110;
    case 28:
      v6 = 0;
      v8 = 0;
      v7 = 1;
      goto LABEL_110;
    case 29:
      v6 = 0;
      v8 = 0;
      v7 = 2;
      goto LABEL_110;
    case 30:
      v6 = 0;
      v8 = 0;
      v7 = 3;
      goto LABEL_110;
    case 31:
      v8 = 0;
      v7 = 4;
      v6 = 1;
      goto LABEL_110;
    case 32:
      v6 = 0;
      v8 = 0;
      v7 = 5;
      goto LABEL_110;
    case 33:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      goto LABEL_112;
    case 34:
      v6 = 0;
      v8 = 0;
      v7 = 1;
      goto LABEL_112;
    case 35:
      v6 = 0;
      v8 = 0;
      v7 = 2;
      goto LABEL_112;
    case 36:
      v6 = 0;
      v8 = 0;
      v7 = 3;
      goto LABEL_112;
    case 37:
      v8 = 0;
      v7 = 4;
      v6 = 1;
      goto LABEL_112;
    case 38:
      v6 = 0;
      v8 = 0;
      v7 = 5;
      goto LABEL_112;
    case 39:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1651926376;
      break;
    case 40:
      v6 = 0;
      v8 = 0;
      v9 = 1651926376;
      goto LABEL_71;
    case 41:
      v6 = 0;
      v8 = 0;
      v9 = 1651926376;
      goto LABEL_57;
    case 42:
      v6 = 0;
      v8 = 0;
      v9 = 1651926376;
      goto LABEL_59;
    case 43:
      v8 = 0;
      v9 = 1651926376;
      goto LABEL_61;
    case 44:
      v6 = 0;
      v8 = 0;
      v9 = 1651926376;
      goto LABEL_63;
    case 45:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1650942776;
      break;
    case 46:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1735549752;
      break;
    case 47:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1919378232;
      break;
    case 48:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1734501176;
      break;
    case 49:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1652056888;
      break;
    case 50:
      v6 = 0;
      v8 = 0;
      v9 = 1652056888;
      goto LABEL_71;
    case 51:
      v6 = 0;
      v8 = 0;
      v9 = 1652056888;
LABEL_57:
      v7 = 2;
      break;
    case 52:
      v6 = 0;
      v8 = 0;
      v9 = 1652056888;
LABEL_59:
      v7 = 3;
      break;
    case 53:
      v8 = 0;
      v9 = 1652056888;
LABEL_61:
      v7 = 4;
      v6 = 1;
      break;
    case 54:
      v6 = 0;
      v8 = 0;
      v9 = 1652056888;
LABEL_63:
      v7 = 5;
      break;
    case 59:
      v6 = 0;
      v8 = 0;
      v7 = 6;
      goto LABEL_67;
    case 60:
      v6 = 0;
      v8 = 0;
      v7 = 7;
LABEL_67:
      v9 = 1647719528;
      break;
    case 61:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 825306677;
      break;
    case 62:
      v7 = 0;
      v8 = 0;
      goto LABEL_75;
    case 63:
      v8 = 0;
      v6 = 1;
      v9 = 1651519798;
LABEL_71:
      v7 = 1;
      break;
    case 64:
      v8 = 0;
      v7 = 2;
      goto LABEL_75;
    case 65:
      v8 = 0;
      v7 = 3;
      goto LABEL_75;
    case 66:
      v8 = 0;
      v7 = 4;
LABEL_75:
      v6 = 1;
      goto LABEL_117;
    case 67:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      goto LABEL_117;
    case 68:
      v6 = 0;
      v8 = 0;
      v7 = 1;
      goto LABEL_117;
    case 69:
      v6 = 0;
      v8 = 0;
      v7 = 2;
      goto LABEL_117;
    case 70:
      v6 = 0;
      v8 = 0;
      v7 = 3;
      goto LABEL_117;
    case 71:
      v6 = 0;
      v8 = 0;
      v7 = 5;
      goto LABEL_117;
    case 72:
      v6 = 0;
      v7 = 0;
      v8 = 1;
      v9 = 1735549492;
      break;
    case 73:
      v6 = 0;
      v7 = 0;
      v9 = 1734505012;
LABEL_83:
      v8 = 1;
      break;
    case 74:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1751527984;
      break;
    case 75:
      v6 = 0;
      v7 = 0;
      v8 = 1;
      v9 = 1380411457;
      break;
    case 76:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 875704934;
      break;
    case 77:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 875704950;
      break;
    case 78:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1751410032;
      break;
    case 79:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v15 = 1751410032;
      goto LABEL_92;
    case 80:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1717855600;
      break;
    case 81:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v15 = 1717855600;
LABEL_92:
      v9 = v15 + 1027;
      break;
    case 82:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1111970369;
      break;
    case 83:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 2019963442;
      break;
    case 84:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v16 = 2016686640;
      goto LABEL_103;
    case 85:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v17 = 2019963442;
      goto LABEL_108;
    case 86:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v18 = 2016686640;
      goto LABEL_106;
    case 87:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v16 = 1952854576;
      goto LABEL_103;
    case 88:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1953903154;
      break;
    case 89:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v18 = 1952854576;
      goto LABEL_106;
    case 90:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v17 = 1953903154;
      goto LABEL_108;
    case 91:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v16 = 1936077360;
LABEL_103:
      v9 = v16 | 2;
      break;
    case 92:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 1937125938;
      break;
    case 93:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v18 = 1936077360;
LABEL_106:
      v9 = v18 + 516;
      break;
    case 94:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v17 = 1937125938;
LABEL_108:
      v9 = v17 + 514;
      break;
    case 95:
      v6 = 0;
      v8 = 0;
      v7 = 8;
LABEL_110:
      v9 = 1651925816;
      break;
    case 96:
      v6 = 0;
      v8 = 0;
      v7 = 8;
LABEL_112:
      v9 = 1651847472;
      break;
    case 97:
      v6 = 0;
      v8 = 0;
      v9 = 1651926376;
      goto LABEL_115;
    case 98:
      v6 = 0;
      v8 = 0;
      v9 = 1652056888;
LABEL_115:
      v7 = 8;
      break;
    case 99:
      v6 = 0;
      v8 = 0;
      v7 = 8;
LABEL_117:
      v9 = 1651519798;
      break;
    default:
      return FigSignalErrorAt();
  }
  if (a2)
    *a2 = HIWORD(a1) & 0xF;
  if (a3)
    *a3 = v9;
  if (a6)
    *a6 = v6;
  if (a4)
    *a4 = v7;
  if (a5)
    *a5 = v8;
  return 0;
}

uint64_t Slim_GetEquivalentBlockSizeVersion(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;

  v1 = (unsigned __int16)(a1 - 62);
  if (v1 >= 5)
    v2 = a1;
  else
    v2 = v1 + 67;
  return v2 | a1 & 0xF0000;
}

__SecTask *_currentProcessIsOfIdentifier(uint64_t a1)
{
  __SecTask *result;
  __SecTask *v3;
  __CFString *v4;
  uint64_t v5;

  result = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (result)
  {
    v3 = result;
    v4 = (__CFString *)SecTaskCopySigningIdentifier(result, 0);
    v5 = -[__CFString isEqualToString:](v4, "isEqualToString:", a1);

    CFRelease(v3);
    return (__SecTask *)v5;
  }
  return result;
}

uint64_t CMPhotoJPEGPreload()
{
  return pthread_once(&get_ADClientFunctions_once, (void (*)(void))link_AggregateDictionary);
}

void *link_AggregateDictionary()
{
  void *result;
  void *v1;

  result = dlopen("/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary", 4);
  if (result)
  {
    v1 = result;
    _ADClientAddValueForScalarKey = (uint64_t)dlsym(result, "ADClientAddValueForScalarKey");
    result = dlsym(v1, "ADClientPushValueForDistributionKey");
    _ADClientPushValueForDistributionKey = (uint64_t)result;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetTypeID()
{
  pthread_once(&CMPhotoDecompressionContainerGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionContainer);
  return sCMPhotoDecompressionContainerTypeID;
}

uint64_t CMPhotoDecompressionTileIteratorGetTypeID()
{
  pthread_once(&CMPhotoDecompressionTileIteratorGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionTileIterator);
  return sCMPhotoDecompressionTileIteratorTypeID;
}

uint64_t RegisterCMPhotoDecompressionTileIterator()
{
  uint64_t result;

  sCMPhotoDecompressionTileIteratorClass = 0;
  *(_QWORD *)algn_1ECEF2088 = "CMPhotoDecompressionTileIterator";
  qword_1ECEF2090 = (uint64_t)CMPhotoDecompressionTileIteratorClass_Init;
  unk_1ECEF2098 = 0;
  qword_1ECEF20A0 = (uint64_t)CMPhotoDecompressionTileIteratorClass_Finalize;
  unk_1ECEF20A8 = 0;
  qword_1ECEF20B0 = 0;
  unk_1ECEF20B8 = CMPhotoDecompressionTileIteratorClass_CopyFormattingDesc;
  qword_1ECEF20C0 = 0;
  result = _CFRuntimeRegisterClass();
  sCMPhotoDecompressionTileIteratorTypeID = result;
  return result;
}

BOOL CMPhotoDecompressionContainerHasAlternates(uint64_t a1)
{
  return *(_QWORD *)(a1 + 544) != 0;
}

uint64_t CMPhotoDecompressionContainerExternalToInternalIndex(_QWORD *a1, const __CFNumber *a2, CFIndex a3, const __CFDictionary *a4, const __CFNumber **a5, CFIndex *a6, const __CFNumber **a7)
{
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v14;
  CFTypeID v15;
  const __CFNumber *Size;
  CFTypeID v17;
  const __CFDictionary *Value;
  const __CFDictionary *v19;
  BOOL v20;
  CFIndex v21;
  const __CFString *v22;
  uint64_t (*v23)(_QWORD *, uint64_t, CFTypeRef *);
  uint64_t v24;
  uint64_t v25;
  uint64_t FirstAuxiliaryOfTypeForInternalIndexWithOptions;
  uint64_t (*v27)(_QWORD *, uint64_t, _QWORD, CMFormatDescriptionRef *);
  FourCharCode MediaSubType;
  const __CFNumber *v30;
  CFIndex v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  int v36;
  CMFormatDescriptionRef desc;
  CFTypeRef cf;

  v31 = a3;
  if (a2 == (const __CFNumber *)-2)
    a2 = (const __CFNumber *)a1[71];
  v30 = a2;
  if (((unint64_t)a2 & 0x8000000000000000) != 0 || (uint64_t)a2 >= a1[73])
    return FigSignalErrorAt();
  if (!a1[68])
  {
    v14 = 0;
    goto LABEL_11;
  }
  ValueAtIndex = (const __CFNumber *)FigCFArrayGetValueAtIndex();
  if (ValueAtIndex)
  {
    v14 = ValueAtIndex;
    v15 = CFGetTypeID(ValueAtIndex);
    if (v15 == CFNumberGetTypeID())
    {
      Size = CMPhotoCFNumberGetSize(v14);
      v14 = 0;
      v30 = Size;
LABEL_11:
      if (a3 == -1 && !FigCFDictionaryGetCFIndexIfPresent())
      {
        if (!v14)
        {
          v31 = 0;
          if (!a5)
          {
LABEL_65:
            if (a7)
              *a7 = v14;
            if (a6)
            {
              v25 = 0;
              *a6 = v31;
              return v25;
            }
            return 0;
          }
LABEL_64:
          *a5 = v30;
          goto LABEL_65;
        }
        desc = 0;
        cf = 0;
        v36 = 0;
        v35 = 0;
        if (a4)
        {
          CFDictionaryGetValue(a4, CFSTR("kCMPhotoDecompressionOption_ForTranscode"));
          v36 = FigCFEqual() != 0;
          Value = (const __CFDictionary *)FigCFDictionaryGetValue();
          if (Value)
          {
            v19 = Value;
            CMPhotoCFDictionaryGetIntIfPresent(Value, CFSTR("DecodeToHDROutputMode"), &v36);
            CMPhotoCFDictionaryGetBooleanIfPresent(v19, CFSTR("DecodeToHDROutputModePreferMeteor"), &v35);
          }
        }
        if (_selectAlternateIndexBasedOnOptions_onceToken != -1)
          dispatch_once(&_selectAlternateIndexBasedOnOptions_onceToken, &__block_literal_global_12);
        if (_selectAlternateIndexBasedOnOptions_onceTokenPreferMeteor != -1)
          dispatch_once(&_selectAlternateIndexBasedOnOptions_onceTokenPreferMeteor, &__block_literal_global_209);
        v20 = v36 == 6 || v36 == 1;
        if ((!v20 || v35) && CFArrayGetCount(v14) >= 1)
        {
          v21 = 0;
          v22 = (const __CFString *)*MEMORY[0x1E0C9DA10];
          while (1)
          {
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            v34 = 0;
            if (!CMPhotoCFArrayGetSizeAtIndex(v14, v21, &v34))
            {
              v25 = 4294950304;
              goto LABEL_53;
            }
            v23 = *(uint64_t (**)(_QWORD *, uint64_t, CFTypeRef *))(a1[4] + 448);
            if (!v23)
            {
LABEL_71:
              v25 = 4294950302;
              goto LABEL_53;
            }
            v24 = v23(a1, v34, &cf);
            if ((_DWORD)v24)
            {
              v25 = v24;
              if ((_DWORD)v24 != -16993)
                goto LABEL_53;
              cf = CGColorSpaceCreateWithName(v22);
            }
            switch(v36)
            {
              case 0:
                v27 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, CMFormatDescriptionRef *))(a1[4] + 40);
                if (!v27)
                  goto LABEL_71;
                FirstAuxiliaryOfTypeForInternalIndexWithOptions = v27(a1, v34, 0, &desc);
                if ((_DWORD)FirstAuxiliaryOfTypeForInternalIndexWithOptions)
                  goto LABEL_77;
                MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
                if (desc)
                {
                  CFRelease(desc);
                  desc = 0;
                }
                if (MediaSubType != 1953325424)
                  goto LABEL_52;
                goto LABEL_50;
              case 1:
              case 6:
                if (!v35)
                  goto LABEL_50;
                v33 = 0;
                v32 = -1;
                FirstAuxiliaryOfTypeForInternalIndexWithOptions = CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, v34, 0, 4, (uint64_t)CFSTR("urn:com:apple:photo:2020:aux:hdrgainmap"), &v33, &v32);
                if ((_DWORD)FirstAuxiliaryOfTypeForInternalIndexWithOptions)
                {
LABEL_77:
                  v25 = FirstAuxiliaryOfTypeForInternalIndexWithOptions;
                  goto LABEL_53;
                }
                if (v33 && !CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)cf))
                  goto LABEL_52;
LABEL_50:
                if (++v21 >= CFArrayGetCount(v14))
                  goto LABEL_51;
                break;
              case 2:
                if (!CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)cf)
                  && !CGColorSpaceUsesExtendedRange((CGColorSpaceRef)cf))
                {
                  goto LABEL_52;
                }
                goto LABEL_50;
              default:
                goto LABEL_50;
            }
          }
        }
LABEL_51:
        v21 = 0;
LABEL_52:
        v25 = 0;
        v31 = v21;
LABEL_53:
        if (desc)
          CFRelease(desc);
        if (cf)
          CFRelease(cf);
        if ((_DWORD)v25)
          return v25;
      }
      if (v14)
      {
        if (v31 < CFArrayGetCount(v14))
        {
          if (!CMPhotoCFArrayGetSizeAtIndex(v14, v31, &v30))
            return 4294950304;
LABEL_63:
          if (!a5)
            goto LABEL_65;
          goto LABEL_64;
        }
      }
      else if (!v31)
      {
        goto LABEL_63;
      }
      FigSignalErrorAt();
      return 0;
    }
    v17 = CFGetTypeID(v14);
    if (v17 == CFArrayGetTypeID())
      goto LABEL_11;
  }
  return 4294950304;
}

uint64_t CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, CFMutableDictionaryRef *a5)
{
  uint64_t v6;
  CFMutableDictionaryRef v7;
  CFMutableDictionaryRef Mutable;
  uint64_t v9;
  const __CFAllocator *v10;

  if (a1[72] <= a2)
    return 4294950306;
  if (a1[68])
  {
    v6 = *(_QWORD *)(a1[70] + 8 * a2);
    a2 = *(_QWORD *)(a1[69] + 8 * a2);
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  v6 = 0;
  if (a3)
LABEL_4:
    *a3 = a2;
LABEL_5:
  if (a4)
    *a4 = v6;
  if (!a5)
    return 0;
  v7 = *a5;
  if (*a5)
  {
    Mutable = 0;
  }
  else
  {
    v10 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v7 = Mutable;
    if (!Mutable)
      return 4294950305;
  }
  v9 = FigCFDictionarySetCFIndex();
  if ((_DWORD)v9)
  {
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    *a5 = v7;
  }
  return v9;
}

uint64_t CMPhotoDecompressionContainerGetContainerFormat(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = 4294950306;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_DWORD *)(a1 + 536);
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetImageCountWithOptions(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (!a1)
    return 4294950306;
  if (!a3)
    return 0;
  result = 0;
  *a3 = *(_QWORD *)(a1 + 584);
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAlternatesCountForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t *a4, CFIndex *a5)
{
  uint64_t v6;
  unint64_t Count;
  uint64_t v8;
  CFArrayRef theArray;

  if (!a1)
    return 4294950306;
  if (!a4)
    return 0;
  theArray = 0;
  v6 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, 0, 0, a5, &theArray);
  if (!(_DWORD)v6)
  {
    Count = (unint64_t)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    if (Count <= 1)
      v8 = 1;
    else
      v8 = Count;
    *a4 = v8;
  }
  return v6;
}

uint64_t CMPhotoDecompressionContainerGetLoopCount(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 464);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionContainerGetPrimaryItemIndexWithOptions(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = 4294950306;
  if (a1)
  {
    if (a3)
    {
      result = 0;
      *a3 = *(_QWORD *)(a1 + 568);
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyFormatDescriptionForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 40);
      if (v8)
        return v8(a1, v9, a3, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyFormatDescriptionForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyFormatDescriptionForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  if (!a4)
    return 0;
  v5 = CMPhotoDecompressionContainerCreateTileIteratorForIndexWithOptions(a1, a2, a3, &cf);
  v6 = cf;
  if (!(_DWORD)v5)
    v5 = _copySampleBufferFromIterator((uint64_t)cf, a4);
  v7 = v5;
  if (v6)
    CFRelease(v6);
  return v7;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, CFTypeRef *a4)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;
  uint64_t (*v9)(_QWORD *, _QWORD, CFTypeRef);
  uint64_t v10;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v12 = -1;
  v6 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v12, 0, 0);
  if ((_DWORD)v6)
    return v6;
  v7 = _allocateTileIterator(a1, &cf);
  v8 = cf;
  if ((_DWORD)v7)
  {
    v10 = v7;
    goto LABEL_13;
  }
  *((_QWORD *)cf + 3) = v12;
  v9 = *(uint64_t (**)(_QWORD *, _QWORD, CFTypeRef))(a1[4] + 240);
  if (!v9)
  {
    v10 = 4294950302;
LABEL_8:
    CFRelease(v8);
    return v10;
  }
  v10 = v9(a1, 0, v8);
  v8 = cf;
  if ((_DWORD)v10)
  {
LABEL_13:
    if (!v8)
      return v10;
    goto LABEL_8;
  }
  *a4 = cf;
  return v10;
}

uint64_t _copySampleBufferFromIterator(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 4294950306;
  if (a1 && a2)
  {
    result = CMPhotoDecompressionTileIteratorReset(a1);
    if (!(_DWORD)result)
      return CMPhotoDecompressionTileIteratorCopyTileSampleBuffer(a1);
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopySampleBufferForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopySampleBufferForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t (*v12)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v13 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v13, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4 || a5 || a6)
    {
      v12 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t))(a1[4] + 56);
      if (v12)
        return v12(a1, v13, a3, a4, a5, a6);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImageBitDepthForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 64);
      if (v8)
        return v8(a1, v9, a3, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetEncoderNativePixelFormatForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;

  if (!a1)
    return 4294950306;
  v8 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v8, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[4] + 368);
      if (v7)
        return v7(a1, v8, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetEncoderNativePixelFormatForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerGetEncoderNativePixelFormatForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImageSubsamplingForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;

  if (!a1)
    return 4294950306;
  v8 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v8, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[4] + 376);
      if (v7)
        return v7(a1, v8, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImageSubsamplingForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyImageSubsamplingForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImageIsRGBForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;

  if (!a1)
    return 4294950306;
  v8 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v8, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[4] + 384);
      if (v7)
        return v7(a1, v8, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImageIsRGBForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyImageIsRGBForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailCountForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 72);
    if (v8)
      return v8(a1, v9, a3, a4);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetThumbnailCountForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerGetThumbnailCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailDimensionsForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetThumbnailGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, 0);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailGeometryForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CMPhotoDecompressionContainerGetThumbnailGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailGeometryForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  if (!a1)
    return 4294950306;
  v14 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v14, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5 || a6 || a7)
    {
      v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[4] + 400);
      if (v13)
        return v13(a1, v14, a3, a5, a6, a7);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 408);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyThumbnailBitDepthForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetThumbnailEncodedPixelFormatForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 416);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetThumbnailEncodedPixelFormatForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerGetThumbnailEncodedPixelFormatForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCreateThumbnailImageForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v16 = -1;
  v12 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v16, 0, 0);
  if ((_DWORD)v12)
    goto LABEL_10;
  if (a3 < 0)
  {
    v14 = 4294950306;
  }
  else if (a6)
  {
    if (a4 && CFDictionaryContainsKey(a4, CFSTR("DryRun")))
    {
      v12 = FigSignalErrorAt();
      goto LABEL_10;
    }
    v12 = _createModifiedDecodeOptionsIfNeeded(a1, a2, a3, a4, a5, &cf);
    if ((_DWORD)v12)
    {
LABEL_10:
      v14 = v12;
      goto LABEL_12;
    }
    v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t))(a1[4] + 88);
    if (v13)
    {
      v12 = v13(a1, v16, a3, cf, a5, a6);
      goto LABEL_10;
    }
    v14 = 4294950302;
  }
  else
  {
    v14 = 0;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else if (a5)
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 392);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyThumbnailFormatDescriptionForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  cf = 0;
  v5 = 4294950306;
  if (a1 && (a3 & 0x8000000000000000) == 0)
  {
    if (a5)
    {
      v7 = CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndexWithOptions(a1, a2, a3, a4, &cf);
      v8 = cf;
      if (!(_DWORD)v7)
        v7 = _copySampleBufferFromIterator((uint64_t)cf, a5);
      v5 = v7;
      if (v8)
        CFRelease(v8);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t ThumbnailCountForIndexWithOptions;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD *, _QWORD);
  uint64_t v14;
  uint64_t v16;
  const __CFNumber *v17;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v17 = 0;
  ThumbnailCountForIndexWithOptions = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, &v17, 0, 0);
  if ((_DWORD)ThumbnailCountForIndexWithOptions)
    return ThumbnailCountForIndexWithOptions;
  v16 = 0;
  ThumbnailCountForIndexWithOptions = CMPhotoDecompressionContainerGetThumbnailCountForIndexWithOptions(a1, a2, a4, (uint64_t)&v16);
  if ((_DWORD)ThumbnailCountForIndexWithOptions)
    return ThumbnailCountForIndexWithOptions;
  if (v16 <= a3)
    return FigSignalErrorAt();
  v11 = _allocateTileIterator(a1, &cf);
  v12 = cf;
  if ((_DWORD)v11)
  {
    v14 = v11;
    goto LABEL_16;
  }
  *((_QWORD *)cf + 3) = v17;
  v12[5] = a3;
  v13 = *(uint64_t (**)(_QWORD *, _QWORD))(a1[4] + 240);
  if (!v13)
  {
    v14 = 4294950302;
LABEL_10:
    CFRelease(v12);
    return v14;
  }
  v14 = v13(a1, 0);
  v12 = cf;
  if ((_DWORD)v14)
  {
LABEL_16:
    if (!v12)
      return v14;
    goto LABEL_10;
  }
  *a5 = cf;
  return v14;
}

uint64_t CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyThumbnailSampleBufferForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, &v9, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 136);
      if (v8)
        return v8(a1, v9, a3, a4);
      else
        return 4294950302;
    }
    else
    {
      return 4294950306;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageDimensionsForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, 0);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t (*v14)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  if (!a1)
    return 4294950306;
  v15 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v15, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      v14 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t))(a1[4] + 144);
      if (v14)
        return v14(a1, v15, a3, a4, a5, a6, a7);
      else
        return 4294950302;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageGeometryForIndexWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 432);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageBitDepthForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryEncodedPixelFormatForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 440);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryEncodedPixelFormatForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerGetAuxiliaryEncodedPixelFormatForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t);
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v13 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v13, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t))(a1[4] + 152);
      if (v12)
        return v12(a1, v13, a3, a4, a5, a6);
      else
        return 4294950302;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndexWithOptions(a1, a2, a3, 0, a4, a5);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 200);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageCGColorSpaceForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v11;

  result = 4294950306;
  if (a1)
  {
    if (a5)
    {
      v11 = -1;
      result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, &v11, 0, 0);
      if (!(_DWORD)result)
      {
        if (a3 < 0)
        {
          return 4294950306;
        }
        else
        {
          v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32)
                                                                                              + 160);
          if (v10)
            return v10(a1, v11, a3, a4, a5, 0);
          else
            return 4294950302;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, int a4, uint64_t a5, char *a6, uint64_t *a7)
{
  uint64_t result;
  uint64_t v14;

  if (!a1)
    return 4294950306;
  result = 4294950306;
  if (a6 && a7)
  {
    v14 = -1;
    result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v14, 0, 0);
    if (!(_DWORD)result)
      return CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(a1, v14, (uint64_t)a3, a4, a5, a6, a7);
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerFindFirstAuxiliaryOfTypeForInternalIndexWithOptions(_QWORD *cf, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char *a6, uint64_t *a7)
{
  char v8;
  uint64_t v9;
  uint64_t AuxiliaryImageCountForIndexWithOptions;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef MutableCopy;
  CFTypeRef cfa;

  v8 = 0;
  MutableCopy = 0;
  cfa = 0;
  v9 = 4294950306;
  if (a6 && a7)
  {
    if (!a3 || (CFGetAllocator(cf), (MutableCopy = (CFTypeRef)FigCFDictionaryCreateMutableCopy()) != 0))
    {
      v18 = -1;
      AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerInternalToExternalIndexAndCopyAlternateOptions(cf, a2, &v18, 0, (CFMutableDictionaryRef *)&MutableCopy);
      if (!(_DWORD)AuxiliaryImageCountForIndexWithOptions)
      {
        v17 = 0;
        AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions((uint64_t)cf, v18, (uint64_t)MutableCopy, (uint64_t)&v17);
        if (!(_DWORD)AuxiliaryImageCountForIndexWithOptions)
        {
          if (v17 < 1)
          {
LABEL_16:
            v9 = 0;
LABEL_17:
            v8 = 0;
            goto LABEL_19;
          }
          v15 = 0;
          while (1)
          {
            if (cfa)
            {
              CFRelease(cfa);
              cfa = 0;
            }
            AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions((uint64_t)cf, v18, v15, (uint64_t)MutableCopy, (uint64_t)&cfa);
            if ((_DWORD)AuxiliaryImageCountForIndexWithOptions)
              break;
            if (CMPhotoGetAuxiliaryImageTypeFromURN() == a4 && (a4 != 4 || FigCFEqual()))
            {
              v9 = 0;
              *a7 = v15;
              v8 = 1;
              goto LABEL_19;
            }
            if (++v15 >= v17)
              goto LABEL_16;
          }
        }
      }
      v9 = AuxiliaryImageCountForIndexWithOptions;
      goto LABEL_17;
    }
    v8 = 0;
    v9 = 4294950305;
  }
LABEL_19:
  if (cfa)
    CFRelease(cfa);
  if (MutableCopy)
    CFRelease(MutableCopy);
  *a6 = v8;
  return v9;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, _QWORD, uint64_t);
  uint64_t v11;

  if (!a1)
    return 4294950306;
  v11 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, _QWORD, uint64_t))(a1[4] + 160);
      if (v10)
        return v10(a1, v11, a3, a4, 0, a5);
      else
        return 4294950302;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageSubTypeDataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v11;

  if (!a1)
    return 4294950306;
  v11 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 168);
      if (v10)
        return v10(a1, v11, a3, a4, a5);
      else
        return 4294950302;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryFormatInfoForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (!a1)
    return 4294950306;
  v10 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v10, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else
    {
      v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a1[4] + 176);
      if (v9)
        return v9(a1, v10, a3, a5);
      else
        return 4294950302;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryFormatInfoForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryFormatInfoForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v11;

  if (!a1)
    return 4294950306;
  v11 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else if (a5)
    {
      v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 184);
      if (v10)
        return v10(a1, v11, a3, a4, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageFormatDescriptionForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef cf;

  cf = 0;
  v5 = 4294950306;
  if (a1 && (a3 & 0x8000000000000000) == 0)
  {
    if (a5)
    {
      v7 = CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndexWithOptions(a1, a2, a3, a4, &cf);
      v8 = cf;
      if (!(_DWORD)v7)
        v7 = _copySampleBufferFromIterator((uint64_t)cf, a5);
      v5 = v7;
      if (v8)
        CFRelease(v8);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t AuxiliaryImageCountForIndexWithOptions;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD *, _QWORD);
  uint64_t v14;
  uint64_t v16;
  const __CFNumber *v17;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v17 = 0;
  AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, &v17, 0, 0);
  if ((_DWORD)AuxiliaryImageCountForIndexWithOptions)
    return AuxiliaryImageCountForIndexWithOptions;
  v16 = 0;
  AuxiliaryImageCountForIndexWithOptions = CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions((uint64_t)a1, (uint64_t)a2, (uint64_t)a4, (uint64_t)&v16);
  if ((_DWORD)AuxiliaryImageCountForIndexWithOptions)
    return AuxiliaryImageCountForIndexWithOptions;
  if (v16 <= a3)
    return FigSignalErrorAt();
  v11 = _allocateTileIterator(a1, &cf);
  v12 = cf;
  if ((_DWORD)v11)
  {
    v14 = v11;
    goto LABEL_16;
  }
  *((_QWORD *)cf + 3) = v17;
  v12[4] = a3;
  v13 = *(uint64_t (**)(_QWORD *, _QWORD))(a1[4] + 240);
  if (!v13)
  {
    v14 = 4294950302;
LABEL_10:
    CFRelease(v12);
    return v14;
  }
  v14 = v13(a1, 0);
  v12 = cf;
  if ((_DWORD)v14)
  {
LABEL_16:
    if (!v12)
      return v14;
    goto LABEL_10;
  }
  *a5 = cf;
  return v14;
}

uint64_t CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyAuxiliaryImageSampleBufferForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCreateAuxiliaryImageForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t);
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v13 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v13, 0, 0);
  if (!(_DWORD)result)
  {
    if (a3 < 0)
    {
      return 4294950306;
    }
    else if ((_DWORD)a5 == 4)
    {
      return 4294950300;
    }
    else if (a6)
    {
      v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t))(a1[4] + 192);
      if (v12)
        return v12(a1, v13, a3, a4, a5, a6);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateAuxiliaryImageDictionaryRepresentation(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, __CFDictionary **a5)
{
  uint64_t AuxiliaryImageForIndex;
  __CFDictionary *Mutable;
  uint64_t AuxiliaryDataDictionaryFromPixelbuffer;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, int *);
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  CFTypeRef v19;
  void *value;
  CFTypeRef v21;
  CFTypeRef cf;

  v21 = 0;
  cf = 0;
  v19 = 0;
  value = 0;
  if (a5)
  {
    v18 = -1;
    AuxiliaryImageForIndex = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v18, 0, 0);
    if ((_DWORD)AuxiliaryImageForIndex
      || (AuxiliaryImageForIndex = CMPhotoDecompressionContainerCreateAuxiliaryImageForIndex(a1, a2, a3, a4, 2, (uint64_t)&cf), (_DWORD)AuxiliaryImageForIndex))
    {
      v15 = AuxiliaryImageForIndex;
LABEL_14:
      Mutable = 0;
      goto LABEL_15;
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      AuxiliaryDataDictionaryFromPixelbuffer = CMPhotoCreateAuxiliaryDataDictionaryFromPixelbuffer((__CVBuffer *)cf, (__CFData **)&value, (__CFDictionary **)&v19);
      if (!(_DWORD)AuxiliaryDataDictionaryFromPixelbuffer)
      {
        if (v19)
        {
          v17 = 0;
          v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, int *))(a1[4] + 144);
          if (v13)
          {
            if (!v13(a1, v18, a3, 0, 0, 0, &v17))
              CMPhotoCFDictionarySetInt((__CFDictionary *)v19, (const void *)*MEMORY[0x1E0CBCFF0], v17);
          }
        }
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC6C0], value);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC6C8], v19);
        v14 = CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(a1, a2, a3, a4, (uint64_t)&v21);
        if ((_DWORD)v14)
        {
          v15 = v14;
          if ((_DWORD)v14 != -16993)
            goto LABEL_15;
        }
        else
        {
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CBC6D0], v21);
        }
        v15 = 0;
        *a5 = Mutable;
        goto LABEL_14;
      }
      v15 = AuxiliaryDataDictionaryFromPixelbuffer;
    }
    else
    {
      v15 = 4294950305;
    }
  }
  else
  {
    Mutable = 0;
    v15 = 4294950306;
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (value)
    CFRelease(value);
  if (v19)
    CFRelease(v19);
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForImageIndex(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v9;

  result = 4294950306;
  if (a1)
  {
    if (a4)
    {
      v9 = -1;
      result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
      if (!(_DWORD)result)
      {
        v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 208);
        if (v8)
          return v8(a1, v9, a3, a4);
        else
          return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForThumbnailIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v11;

  result = 4294950306;
  if (a1)
  {
    if (a5)
    {
      v11 = -1;
      result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
      if (!(_DWORD)result)
      {
        v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 216);
        if (v10)
          return v10(a1, v11, a3, a4, a5);
        else
          return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateOutputBufferAttributesForAuxiliaryImageIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v11;

  result = 4294950306;
  if (a1)
  {
    if (a5)
    {
      v11 = -1;
      result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
      if (!(_DWORD)result)
      {
        v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 224);
        if (v10)
          return v10(a1, v11, a3, a4, a5);
        else
          return 4294950302;
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetExifCountForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *))(a1[4] + 336);
    if (v8)
    {
      return v8(a1, v9, a3, a4);
    }
    else
    {
      result = 0;
      if (a4)
        *a4 = 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyExifForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t);
  uint64_t v13;

  if (!a1)
    return 4294950306;
  v13 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v13, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5 | a6)
    {
      v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t))(a1[4] + 256);
      if (v12)
        return v12(a1, v13, a3, a4, a5, a6);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetXMPCountForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *))(a1[4] + 264);
    if (v8)
    {
      return v8(a1, v9, a3, a4);
    }
    else
    {
      result = 0;
      if (a4)
        *a4 = 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyXMPForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, int a4, const __CFDictionary *a5, _QWORD *a6)
{
  uint64_t v11;
  CFAllocatorRef v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, CFDataRef *);
  const __CFAllocator *v14;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFStringRef v17;
  uint64_t v18;
  uint64_t v20;
  CFDataRef theData;

  theData = 0;
  if (!a1)
    return 4294950306;
  v20 = -1;
  v11 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a5, (const __CFNumber **)&v20, 0, 0);
  if ((_DWORD)v11)
    goto LABEL_17;
  if (!a6)
  {
LABEL_11:
    v18 = 0;
    goto LABEL_12;
  }
  v12 = CFGetAllocator(a1);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, CFDataRef *))(a1[4] + 272);
  if (!v13)
  {
    v18 = 4294950302;
    goto LABEL_12;
  }
  v14 = v12;
  v11 = v13(a1, v20, a3, a5, &theData);
  if ((_DWORD)v11)
  {
LABEL_17:
    v18 = v11;
    goto LABEL_12;
  }
  if (!a4)
  {
    v18 = 0;
    *a6 = theData;
    return v18;
  }
  if (a4 != 1)
    goto LABEL_11;
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v17 = CFStringCreateWithBytes(v14, BytePtr, Length, 0x8000100u, 0);
  if (v17)
  {
    v18 = 0;
    *a6 = v17;
  }
  else
  {
    v18 = 4294950305;
  }
LABEL_12:
  if (theData)
    CFRelease(theData);
  return v18;
}

uint64_t CMPhotoDecompressionContainerCopyXMPForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, int a4, _QWORD *a5)
{
  return CMPhotoDecompressionContainerCopyXMPForIndexWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t CMPhotoDecompressionContainerGetDebugMetadataCountForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *))(a1[4] + 280);
    if (v8)
    {
      return v8(a1, v9, a3, a4);
    }
    else
    {
      result = 0;
      if (a4)
        *a4 = 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetDebugMetadataCountForIndex(_QWORD *a1, const __CFNumber *a2, _QWORD *a3)
{
  return CMPhotoDecompressionContainerGetDebugMetadataCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyDebugMetadataForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v11;

  if (!a1)
    return 4294950306;
  v11 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 288);
      if (v10)
        return v10(a1, v11, a3, a4, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyDebugMetadataForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyDebugMetadataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerGetCustomMetadataCountForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, _QWORD *))(a1[4] + 296);
    if (v8)
    {
      return v8(a1, v9, a3, a4);
    }
    else
    {
      result = 0;
      if (a4)
        *a4 = 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetCustomMetadataCountForIndex(_QWORD *a1, const __CFNumber *a2, _QWORD *a3)
{
  return CMPhotoDecompressionContainerGetCustomMetadataCountForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyCustomMetadataForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5)
{
  uint64_t result;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v11;

  if (!a1)
    return 4294950306;
  v11 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v11, 0, 0);
  if (!(_DWORD)result)
  {
    if (a5)
    {
      v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 304);
      if (v10)
        return v10(a1, v11, a3, a4, a5);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyCustomMetadataForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4)
{
  return CMPhotoDecompressionContainerCopyCustomMetadataForIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCopyStereoMetadataForIndex()
{
  return FigSignalErrorAt();
}

uint64_t CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v8)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t);
  uint64_t v9;

  if (!a1)
    return 4294950306;
  v9 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v9, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v8 = *(uint64_t (**)(_QWORD *, uint64_t, const __CFDictionary *, uint64_t))(a1[4] + 312);
      if (v8)
        return v8(a1, v9, a3, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyGroupsDescriptionArray(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(void);

  if (!a1)
    return 4294950306;
  if (!a2)
    return 0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 320);
  if (v2)
    return v2();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionContainerCopyCGColorSpaceForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t);
  uint64_t v8;

  if (!a1)
    return 4294950306;
  v8 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a3, (const __CFNumber **)&v8, 0, 0);
  if (!(_DWORD)result)
  {
    if (a4)
    {
      v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[4] + 448);
      if (v7)
        return v7(a1, v8, a4);
      else
        return 4294950302;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyCGColorSpaceForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  return CMPhotoDecompressionContainerCopyCGColorSpaceForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  const __CFAllocator *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *, __CFData **);
  uint64_t v14;
  uint64_t v15;
  CFIndex Length;
  __CFData *Mutable;
  const UInt8 *BytePtr;
  const UInt8 *v19;
  CFIndex v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, _QWORD, const __CFData **);
  uint64_t v22;
  BOOL v23;
  uint64_t (*v24)(uint64_t, uint64_t, const __CFData **);
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, uint64_t, const void **);
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unsigned int *);
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t (*v30)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v31;
  const void *v33;
  const void *v34;
  const __CFDictionary *v35;
  __CFDictionary *v36;
  CFMutableDictionaryRef v37;
  __CFDictionary *v38;
  const void *v39;
  unint64_t v40;
  uint64_t v41;
  const void *Value;
  const void *v43;
  const __CFDictionary *v44;
  uint64_t (*v45)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  uint64_t v46;
  const void *v47;
  int IntIfPresent;
  const void **v49;
  unsigned int (*v50)(uint64_t, uint64_t, _QWORD, char *, uint64_t *, uint64_t *);
  double v51[2];
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  CFTypeRef v59;
  CFTypeRef v60;
  CFTypeRef cf;
  CFTypeRef v62;
  CFTypeRef v63;
  const void *v64;
  const __CFData *v65;
  const __CFData *v66;
  __CFData *v67;
  unsigned int v68;

  v66 = 0;
  v67 = 0;
  v64 = 0;
  v65 = 0;
  v62 = 0;
  v63 = 0;
  v60 = 0;
  cf = 0;
  v59 = 0;
  v58 = 0;
  v56 = 0;
  v57 = 0;
  if (!a1)
    goto LABEL_102;
  if (!a6)
  {
    v15 = 0;
    goto LABEL_42;
  }
  v12 = CFGetAllocator((CFTypeRef)a1);
  if (a3 != -1)
  {
    v68 = 0;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *, __CFData **))(*(_QWORD *)(a1 + 32) + 256);
    if (!v13)
      goto LABEL_41;
    v14 = v13(a1, a2, a3, 0, &v68, &v67);
    if ((_DWORD)v14 != -16993)
    {
      v15 = v14;
      if ((_DWORD)v14)
        goto LABEL_42;
      Length = CFDataGetLength(v67);
      if (Length < v68)
      {
        v22 = FigSignalErrorAt();
        goto LABEL_105;
      }
      if (v68 != 6)
      {
        Mutable = CFDataCreateMutable(v12, 0);
        CFDataAppendBytes(Mutable, (const UInt8 *)"Exif", 6);
        BytePtr = CFDataGetBytePtr(v67);
        v19 = &BytePtr[v68];
        v20 = CFDataGetLength(v67);
        CFDataAppendBytes(Mutable, v19, v20 - v68);
        if (v67)
          CFRelease(v67);
        v67 = Mutable;
      }
    }
  }
  if (a4 != -1)
  {
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, const __CFData **))(*(_QWORD *)(a1 + 32) + 272);
    if (!v21)
      goto LABEL_41;
    v22 = v21(a1, a2, a4, 0, &v66);
    if ((_DWORD)v22)
      v23 = (_DWORD)v22 == -16993;
    else
      v23 = 1;
    if (!v23)
      goto LABEL_105;
  }
  v24 = *(uint64_t (**)(uint64_t, uint64_t, const __CFData **))(*(_QWORD *)(a1 + 32) + 456);
  if (v24)
  {
    v22 = v24(a1, a2, &v65);
    if ((v22 + 16994) >= 2 && (_DWORD)v22 != 0)
      goto LABEL_105;
  }
  v26 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, const void **))(*(_QWORD *)(a1 + 32) + 288);
  if (v26)
  {
    v22 = v26(a1, a2, 0, a5, &v64);
    if ((v22 + 16994) >= 2 && (_DWORD)v22 != 0)
      goto LABEL_105;
  }
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, unint64_t *, unsigned int *))(*(_QWORD *)(a1 + 32) + 56);
  if (!v28)
    goto LABEL_41;
  v22 = v28(a1, a2, a5, &v55, &v54, &v53);
  if ((_DWORD)v22)
    goto LABEL_105;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(a1 + 32) + 64);
  if (!v29)
    goto LABEL_41;
  v22 = v29(a1, a2, a5, &v62);
  if ((_DWORD)v22)
    goto LABEL_105;
  v52 = 0;
  if (!CMPhotoCFArrayGetSizeAtIndex(v62, 0, &v52))
  {
    v15 = 4294950304;
    goto LABEL_42;
  }
  v51[0] = (double)v55;
  v51[1] = (double)v54;
  v22 = CMPhotoCreateImagePropertiesFromData(v12, v51, &v52, (uint64_t)v67, v66, v65, 0, 0, (__CFDictionary **)&v60);
  if ((_DWORD)v22)
    goto LABEL_105;
  v30 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(a1 + 32) + 448);
  if (!v30)
  {
LABEL_41:
    v15 = 4294950302;
    goto LABEL_42;
  }
  v31 = v30(a1, a2, &cf);
  if ((_DWORD)v31 == -16993)
  {
    cf = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (!cf)
    {
      v15 = 4294950305;
      goto LABEL_44;
    }
  }
  else
  {
    v15 = v31;
    if ((_DWORD)v31)
      goto LABEL_42;
  }
  v33 = (const void *)CGColorSpaceCopyICCProfileASCIIDescriptionString();
  if (v33)
  {
    v34 = v33;
    CFDictionarySetValue((CFMutableDictionaryRef)v60, (const void *)*MEMORY[0x1E0CBD060], v33);
    CFRelease(v34);
  }
  if (v64)
    CFDictionarySetValue((CFMutableDictionaryRef)v60, CFSTR("iOS_Debug"), v64);
  if (!*(_DWORD *)(a1 + 536))
  {
    v45 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(a1 + 32) + 312);
    if (v45)
    {
      v46 = v45(a1, a2, 0, &v63);
      if ((v46 + 16994) >= 2)
      {
        v15 = v46;
        if ((_DWORD)v46)
          goto LABEL_42;
      }
    }
  }
  v35 = (const __CFDictionary *)v63;
  if (!v63)
    goto LABEL_79;
  v36 = (__CFDictionary *)v60;
  if (!v60)
  {
LABEL_102:
    v15 = 4294950306;
    goto LABEL_42;
  }
  v37 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v37)
  {
    v38 = v37;
    v68 = 0;
    v39 = (const void *)*MEMORY[0x1E0CC60C8];
    if (!CMPhotoCFDictionaryGetInt32IfPresent(v35, (const void *)*MEMORY[0x1E0CC60C8], &v68)
      || (LODWORD(v40) = v68, v41 = CMPhotoCFDictionarySetDouble(v38, v39, (double)v40 / 1000.0), !(_DWORD)v41))
    {
      Value = CFDictionaryGetValue(v35, CFSTR("CameraModel"));
      if (Value)
        CFDictionarySetValue(v38, CFSTR("CameraModel"), Value);
      v43 = CFDictionaryGetValue(v35, CFSTR("CameraExtrinsics"));
      if (v43)
        CFDictionarySetValue(v38, CFSTR("CameraExtrinsics"), v43);
      if (CFDictionaryGetCount(v38) >= 1)
        CFDictionarySetValue(v36, CFSTR("{HEIF}"), v38);
      CFRelease(v38);
LABEL_79:
      if (CFDictionaryGetValue((CFDictionaryRef)v60, (const void *)*MEMORY[0x1E0CBD090]))
      {
        v22 = _createMutableTIFFProperties((int)v12, (CFDictionaryRef)v60, &v59);
        if ((_DWORD)v22)
          goto LABEL_105;
        v44 = (const __CFDictionary *)v59;
      }
      else
      {
        v44 = 0;
      }
      v68 = v53;
      v47 = (const void *)*MEMORY[0x1E0CBCFF0];
      IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)v60, (const void *)*MEMORY[0x1E0CBCFF0], &v68);
      v49 = (const void **)MEMORY[0x1E0CBD0C0];
      if (!IntIfPresent && v44)
        CMPhotoCFDictionaryGetIntIfPresent(v44, (const void *)*MEMORY[0x1E0CBD0C0], &v68);
      v22 = CMPhotoCFDictionarySetInt((__CFDictionary *)v60, v47, v53);
      if ((_DWORD)v22)
        goto LABEL_105;
      if (v44)
      {
        v22 = CMPhotoCFDictionarySetInt(v44, *v49, v53);
        if ((_DWORD)v22)
          goto LABEL_105;
      }
      v50 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, char *, uint64_t *, uint64_t *))(*(_QWORD *)(a1 + 32)
                                                                                                  + 328);
      if (!v50 || v50(a1, a2, 0, &v58, &v57, &v56) || !v58)
      {
LABEL_101:
        v15 = 0;
        *a6 = v60;
        v60 = 0;
        goto LABEL_42;
      }
      if (!v44)
      {
        v22 = _createMutableTIFFProperties((int)v12, (CFDictionaryRef)v60, &v59);
        if ((_DWORD)v22)
          goto LABEL_105;
        v44 = (const __CFDictionary *)v59;
      }
      v22 = CMPhotoCFDictionarySetInt64(v44, (const void *)*MEMORY[0x1E0CBD0E8], v57);
      if (!(_DWORD)v22)
      {
        v15 = CMPhotoCFDictionarySetInt64(v44, (const void *)*MEMORY[0x1E0CBD0E0], v56);
        if ((_DWORD)v15)
          goto LABEL_42;
        goto LABEL_101;
      }
LABEL_105:
      v15 = v22;
      goto LABEL_42;
    }
    v15 = v41;
    CFRelease(v38);
  }
  else
  {
    v15 = 4294950305;
  }
LABEL_42:
  if (cf)
    CFRelease(cf);
LABEL_44:
  if (v62)
    CFRelease(v62);
  if (v64)
    CFRelease(v64);
  if (v67)
    CFRelease(v67);
  if (v66)
    CFRelease(v66);
  if (v65)
    CFRelease(v65);
  if (v60)
    CFRelease(v60);
  if (v59)
    CFRelease(v59);
  if (v63)
    CFRelease(v63);
  return v15;
}

uint64_t _createMutableTIFFProperties(int a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const void *v5;
  const void *MutableCopy;
  const void *v7;
  uint64_t result;

  v5 = (const void *)*MEMORY[0x1E0CBD090];
  CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBD090]);
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v7 = MutableCopy;
  CFDictionarySetValue(theDict, v5, MutableCopy);
  result = 0;
  *a3 = v7;
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImagePropertiesForIndexWithOptions(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  uint64_t result;
  uint64_t v12;

  if (!a1)
    return 4294950306;
  v12 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a5, (const __CFNumber **)&v12, 0, 0);
  if (!(_DWORD)result)
  {
    if (a6)
      return CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex((uint64_t)a1, v12, a3, a4, (uint64_t)a5, a6);
    else
      return 0;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCopyImagePropertiesForIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  return CMPhotoDecompressionContainerCopyImagePropertiesForIndexWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t CMPhotoDecompressionContainerDecodeThumbnailForIndexAsyncF(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v20 = -1;
  v16 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v20, 0, 0);
  if ((_DWORD)v16)
    goto LABEL_10;
  v17 = 4294950306;
  if ((a3 & 0x8000000000000000) == 0 && a7)
  {
    if (a4 && CFDictionaryContainsKey(a4, CFSTR("DryRun")))
    {
      v16 = FigSignalErrorAt();
      goto LABEL_10;
    }
    v16 = _createModifiedDecodeOptionsIfNeeded(a1, a2, a3, a4, a5, &cf);
    if ((_DWORD)v16)
    {
LABEL_10:
      v17 = v16;
      goto LABEL_12;
    }
    v18 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(a1[4] + 104);
    if (v18)
    {
      v16 = v18(a1, v20, a3, cf, a5, a6, a7, a8);
      goto LABEL_10;
    }
    v17 = 4294950302;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t CMPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsyncF(_QWORD *a1, const __CFNumber *a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  if (!a1)
    return 4294950306;
  v17 = -1;
  result = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a2, -1, a4, (const __CFNumber **)&v17, 0, 0);
  if (!(_DWORD)result)
  {
    result = 4294950306;
    if ((a3 & 0x8000000000000000) == 0)
    {
      if (a7)
      {
        if (a4 && CFDictionaryContainsKey(a4, CFSTR("DryRun")))
        {
          return FigSignalErrorAt();
        }
        else
        {
          v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFDictionary *, uint64_t, uint64_t, uint64_t, uint64_t))(a1[4] + 112);
          if (v16)
            return v16(a1, v17, a3, a4, a5, a6, a7, a8);
          else
            return 4294950302;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerDecodeThumbnailForIndexAsync(_QWORD *a1, const __CFNumber *a2, uint64_t a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6, void *aBlock)
{
  uint64_t v14;
  uint64_t v15;

  if (theDict && CFDictionaryContainsKey(theDict, CFSTR("DryRun")))
  {
    v14 = FigSignalErrorAt();
  }
  else
  {
    aBlock = _Block_copy(aBlock);
    v14 = CMPhotoDecompressionContainerDecodeThumbnailForIndexAsyncF(a1, a2, a3, theDict, a5, a6, (uint64_t)_callback_CompletionHandlerWrapper_0, (uint64_t)aBlock);
  }
  v15 = v14;
  if (aBlock && (_DWORD)v14)
    _Block_release(aBlock);
  return v15;
}

uint64_t CMPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsync(_QWORD *a1, const __CFNumber *a2, uint64_t a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6, void *aBlock)
{
  uint64_t v14;
  uint64_t v15;

  if (theDict && CFDictionaryContainsKey(theDict, CFSTR("DryRun")))
  {
    v14 = FigSignalErrorAt();
  }
  else
  {
    aBlock = _Block_copy(aBlock);
    v14 = CMPhotoDecompressionContainerDecodeAuxiliaryImageForIndexAsyncF(a1, a2, a3, theDict, a5, a6, (uint64_t)_callback_CompletionHandlerWrapper_0, (uint64_t)aBlock);
  }
  v15 = v14;
  if (aBlock && (_DWORD)v14)
    _Block_release(aBlock);
  return v15;
}

uint64_t CMPhotoDecompressionContainerCancelAsyncRequest(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = 4294950306;
  if (a1 && a2)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 120);
    if (v4)
      return v4(a1);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateSequenceContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v6)(uint64_t);

  result = 4294950306;
  if (a1 && a4)
  {
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 360);
    if (v6)
      return v6(a1);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetSequenceCount(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t);

  result = 4294950306;
  if (a1 && a2)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 352);
    if (v4)
      return v4(a1);
    else
      return 4294950302;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerGetVideoAndAudioCount(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v3)(void);
  uint64_t result;

  if (!a1)
    return 4294950306;
  v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 472);
  if (v3)
    return v3();
  if (a2)
    *a2 = 0;
  result = 0;
  if (a3)
    *a3 = 0;
  return result;
}

uint64_t _allocateTileIterator(CFTypeRef cf, _QWORD *a2)
{
  uint64_t result;
  uint64_t Instance;
  _QWORD *v6;
  CFTypeRef v7;

  result = 4294950306;
  if (cf && a2)
  {
    CFGetAllocator(cf);
    pthread_once(&CMPhotoDecompressionTileIteratorGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionTileIterator);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v6 = (_QWORD *)Instance;
      v7 = CFRetain(cf);
      result = 0;
      v6[2] = v7;
      v6[3] = -1;
      v6[4] = -1;
      v6[5] = -1;
      *a2 = v6;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForIndex(_QWORD *a1, const __CFNumber *a2, CFTypeRef *a3)
{
  return CMPhotoDecompressionContainerCreateTileIteratorForIndexWithOptions(a1, a2, 0, a3);
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, CFTypeRef *a4)
{
  return CMPhotoDecompressionContainerCreateTileIteratorForAuxiliaryImageIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndex(_QWORD *a1, const __CFNumber *a2, uint64_t a3, CFTypeRef *a4)
{
  return CMPhotoDecompressionContainerCreateTileIteratorForThumbnailImageIndexWithOptions(a1, a2, a3, 0, a4);
}

uint64_t CMPhotoDecompressionContainerInitColorController(_QWORD *a1, CFDictionaryRef theDict, void *a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  CFTypeID v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  void *value;

  if (theDict)
  {
    v14 = 0;
    value = 0;
    if (CMPhotoCFDictionaryGetLongIfPresent(theDict, CFSTR("ColorConverterCallback"), &v14))
    {
      v8 = v14;
      v13 = 0;
      if (CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("ColorConverterVersion"), &v13))
        v9 = v13 == 1;
      else
        v9 = 0;
      if (!v9)
        return FigSignalErrorAt();
      if (CMPhotoCFDictionaryGetLongIfPresent(theDict, CFSTR("ColorConverterUserPointer"), &v14))
        v10 = v14;
      else
        v10 = 0;
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("ColorConverterCGColorSpace"), (const void **)&value))
    {
      if (value == (void *)*MEMORY[0x1E0C9B0D0])
      {
        a3 = 0;
        a4 = 0;
      }
      else
      {
        if (!value)
          return FigSignalErrorAt();
        v11 = CFGetTypeID(value);
        if (v11 != CGColorSpaceGetTypeID())
          return FigSignalErrorAt();
        a4 = 0;
        a3 = value;
      }
    }
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  result = 0;
  *a1 = a3;
  a1[1] = a4;
  a1[2] = v8;
  a1[3] = v10;
  return result;
}

uint64_t CMPhotoDecompressionContainerCreateAlphaDecodeOptionsForInternalIndex(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, __CFDictionary **a6)
{
  uint64_t DefaultFormatWhenDecodingAlphaForInternalIndex;
  uint64_t v9;
  int v10;
  uint64_t MutableCopy;
  const void *v12;
  __CFDictionary *v13;
  uint64_t v14;
  int v16;

  v16 = a4;
  if (!a1)
    return 4294950306;
  if (!a4)
  {
    DefaultFormatWhenDecodingAlphaForInternalIndex = CMPhotoDecompressionContainerGetDefaultFormatWhenDecodingAlphaForInternalIndex(a1, a2, &v16);
    if ((_DWORD)DefaultFormatWhenDecodingAlphaForInternalIndex)
      return DefaultFormatWhenDecodingAlphaForInternalIndex;
    a4 = v16;
  }
  v9 = 4294950302;
  if (a4 > 1279340599)
  {
    if (a4 == 1279340600 || a4 == 1815491698)
      goto LABEL_13;
    v10 = 1279340854;
  }
  else
  {
    if (a4 == 843264056 || a4 == 843264310)
      goto LABEL_13;
    v10 = 1111970369;
  }
  if (a4 != v10)
    return v9;
LABEL_13:
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return 4294950305;
  v12 = (const void *)MutableCopy;
  v13 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (v13)
  {
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    CFDictionaryRemoveValue(v13, CFSTR("UseProvidedPixelBuffer"));
    if (a5)
    {
      *a5 = v12;
      v12 = 0;
    }
    if (a6)
    {
      *a6 = v13;
      v13 = 0;
    }
    v14 = 0;
    v9 = 0;
    if (!v12)
      goto LABEL_21;
  }
  else
  {
    v14 = 4294950305;
  }
  CFRelease(v12);
  v9 = v14;
LABEL_21:
  if (v13)
    CFRelease(v13);
  return v9;
}

uint64_t CMPhotoDecompressionContainerGetDefaultFormatWhenDecodingAlphaForInternalIndex(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t (*v4)(void);
  int v5;
  uint64_t result;

  if (!a3)
    return 4294950306;
  v4 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 64);
  if (v4)
  {
    v5 = v4();
    result = 0;
    if (!v5)
    {
      FigCFArrayGetInt32AtIndex();
      result = 0;
    }
    *a3 = 1111970369;
  }
  else
  {
    result = 0;
    *a3 = 1111970369;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerValidateSourceCropRect(const void *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int64x2_t *a5)
{
  CFTypeID v10;
  CFTypeID TypeID;
  uint64_t result;
  CGSize v13;
  int64x2_t v14;
  int8x16_t v15;
  char v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  BOOL v20;
  CGRect v22;

  if (!a1)
    return 4294950306;
  v10 = CFGetTypeID(a1);
  TypeID = CFDictionaryGetTypeID();
  result = 4294950306;
  if (a5 && v10 == TypeID)
  {
    v13 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v22.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v22.size = v13;
    if (!CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)a1, &v22))
      return FigSignalErrorAt();
    v14 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64((float64x2_t)v22.origin));
    v15 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64((float64x2_t)v22.size));
    v16 = a2 | a3;
    if (a2 | a3)
    {
      v17.i64[0] = a2;
      v17.i64[1] = a3;
      v18 = vsubq_s64(v17, v14);
      v19 = vandq_s8((int8x16_t)v18, (int8x16_t)vcgtzq_s64(v18));
      v15 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v19, (uint64x2_t)v15), v15, v19);
      if (v15.i64[0])
        v20 = v15.i64[1] == 0;
      else
        v20 = 1;
      if (v20)
        return 4294950306;
      v16 = a2 == v15.i64[0] && a3 == v15.i64[1];
    }
    if (a4)
      *a4 = v16;
    result = 0;
    *a5 = v14;
    a5[1] = (int64x2_t)v15;
  }
  return result;
}

uint64_t CMPhotoDecompressionContainerPredictTranscodedSize(__CFData *a1, uint64_t a2, const __CFNumber *a3, uint64_t *a4)
{
  CFMutableDataRef Mutable;
  unsigned int ImageGeometryForIndexWithOptions;
  FourCharCode MediaSubType;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int DQTLocationFromJFIFByteStream;
  UInt8 *MutableBytePtr;
  CFIndex v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, CFIndex, uint64_t, UInt8 *, unint64_t *);
  uint64_t v17;
  double v18;
  uint8x16_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  int64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  double v39;
  double v40;
  unint64_t v41;
  double v42;
  long double v43;
  long double v44;
  double v45;
  uint64_t v47;
  unint64_t v49;
  unint64_t v50;
  CFIndex length;
  uint64_t v52;
  char v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  CMFormatDescriptionRef desc[2];

  Mutable = a1;
  desc[0] = 0;
  *a4 = 0;
  ImageGeometryForIndexWithOptions = CMPhotoDecompressionContainerCopyFormatDescriptionForIndexWithOptions(a1, a3, 0, (uint64_t)desc);
  if (ImageGeometryForIndexWithOptions)
    goto LABEL_52;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc[0]);
  v57 = 1785750887;
  FigCFDictionaryGetIntIfPresent();
  if (a3)
    goto LABEL_25;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  if (!Mutable)
  {
    DQTLocationFromJFIFByteStream = -16990;
    goto LABEL_44;
  }
  if (*((uint64_t *)Mutable + 73) < 1)
  {
LABEL_25:
    Mutable = 0;
    goto LABEL_26;
  }
  ImageGeometryForIndexWithOptions = CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(Mutable, 0, 0, (uint64_t)&v55, (uint64_t)&v56, (uint64_t)&v54);
  if (ImageGeometryForIndexWithOptions)
  {
LABEL_52:
    DQTLocationFromJFIFByteStream = ImageGeometryForIndexWithOptions;
    goto LABEL_53;
  }
  if (v55 <= v56)
    v9 = v56;
  else
    v9 = v55;
  v10 = *((_QWORD *)Mutable + 61);
  if (MediaSubType != 1785750887)
  {
    Mutable = 0;
    v40 = 0.85;
LABEL_28:
    FigCFDictionaryGetIntIfPresent();
    FigCFDictionaryGetIntIfPresent();
    DQTLocationFromJFIFByteStream = 0;
    if (v40 > 0.0 && v40 <= 1.0)
    {
      DQTLocationFromJFIFByteStream = 0;
      if (0.85 > 0.0 && 0.85 <= 1.0)
      {
        DQTLocationFromJFIFByteStream = 0;
        if (v9 >= 1)
        {
          DQTLocationFromJFIFByteStream = 0;
          v41 = v56 * v55;
          if (v56 * v55)
          {
            v42 = (double)v9 / (double)v9 * ((double)v9 / (double)v9 * (double)v41);
            if (v42 > 0.0)
            {
              v43 = log2((double)v41) * 0.833 + -1.733 + v40 * 5.366 + v40 * -1.67 * v40;
              v44 = log2(v42) * 0.833 + -1.733 + 0.85 * 5.366 + 0.85 * -1.67 * 0.85;
              v45 = log2((double)v10) - v43 + v44;
              if (MediaSubType == 1785750887 && v57 == 1752589105)
              {
                v45 = v45 + -1.0;
              }
              else if (v57 == 1785750887 && MediaSubType == 1735551332)
              {
                v45 = v45 + 1.0;
              }
              DQTLocationFromJFIFByteStream = 0;
              *a4 = (unint64_t)exp2(v45);
            }
          }
        }
      }
    }
    goto LABEL_44;
  }
  v11 = *((_QWORD *)Mutable + 8);
  v53 = 0;
  length = 0;
  v52 = 0;
  DQTLocationFromJFIFByteStream = CMPhotoGetDQTLocationFromJFIFByteStream(v11, 0, &v53, &v52, &length);
  if (DQTLocationFromJFIFByteStream || !v53)
  {
LABEL_53:
    Mutable = 0;
    goto LABEL_44;
  }
  v49 = v10;
  Mutable = CFDataCreateMutable(0, 0);
  CFDataSetLength(Mutable, length);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  v50 = 0;
  v14 = length;
  v15 = v52;
  v16 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, UInt8 *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 8);
  if (!v16)
  {
    DQTLocationFromJFIFByteStream = -12782;
    goto LABEL_44;
  }
  DQTLocationFromJFIFByteStream = v16(v11, v14, v15, MutableBytePtr, &v50);
  if (!DQTLocationFromJFIFByteStream && v50 >= 0x41 && v50 == length)
  {
    if (*MutableBytePtr <= 0xFu)
    {
      v17 = 0;
      v18 = 0.0;
      do
      {
        v19 = *(uint8x16_t *)&MutableBytePtr[v17 * 16 + 1];
        v20 = vmovl_high_u8(v19);
        v21 = vmovl_u8(*(uint8x8_t *)v19.i8);
        v22 = (uint8x16_t)xmmword_1A8295808[v17];
        v23 = vmovl_high_u8(v22);
        v24 = vmovl_u8(*(uint8x8_t *)v22.i8);
        v25 = vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v21.i8);
        v26 = vmull_high_u16(v24, v21);
        v27 = vmull_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v20.i8);
        v28 = vmull_high_u16(v23, v20);
        v29.i64[0] = v28.i32[2];
        v29.i64[1] = v28.i32[3];
        v30 = vcvtq_f64_s64(v29);
        v29.i64[0] = v28.i32[0];
        v29.i64[1] = v28.i32[1];
        v31 = vcvtq_f64_s64(v29);
        v29.i64[0] = v27.i32[2];
        v29.i64[1] = v27.i32[3];
        v32 = vcvtq_f64_s64(v29);
        v29.i64[0] = v27.i32[0];
        v29.i64[1] = v27.i32[1];
        v33 = vcvtq_f64_s64(v29);
        v29.i64[0] = v26.i32[2];
        v29.i64[1] = v26.i32[3];
        v34 = vcvtq_f64_s64(v29);
        v29.i64[0] = v26.i32[0];
        v29.i64[1] = v26.i32[1];
        v35 = vcvtq_f64_s64(v29);
        v29.i64[0] = v25.i32[2];
        v29.i64[1] = v25.i32[3];
        v36 = vcvtq_f64_s64(v29);
        v29.i64[0] = v25.i32[0];
        v29.i64[1] = v25.i32[1];
        v37 = vcvtq_f64_s64(v29);
        v18 = v18
            + v37.f64[0]
            + v37.f64[1]
            + v36.f64[0]
            + v36.f64[1]
            + v35.f64[0]
            + v35.f64[1]
            + v34.f64[0]
            + v34.f64[1]
            + v33.f64[0]
            + v33.f64[1]
            + v32.f64[0]
            + v32.f64[1]
            + v31.f64[0]
            + v31.f64[1]
            + v30.f64[0]
            + v30.f64[1];
        ++v17;
      }
      while (v17 != 4);
      v38 = v18 / 29656.8;
      v39 = 0.0;
      v10 = v49;
      if (v38 < 2.0)
      {
        v39 = 1.0;
        if (v38 > 0.0606060606)
          v39 = pow((2.0 / v38 + -1.0) * 0.03125, 0.33333333);
      }
      if (v39 >= 0.2)
        v40 = v39;
      else
        v40 = 0.2;
      goto LABEL_28;
    }
LABEL_26:
    DQTLocationFromJFIFByteStream = 0;
  }
LABEL_44:
  v47 = *a4;
  if (desc[0])
    CFRelease(desc[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v47)
    return DQTLocationFromJFIFByteStream;
  else
    return 4294950306;
}

uint64_t CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(const opaqueCMFormatDescription *a1, uint64_t a2, int a3, CMVideoFormatDescriptionRef *a4)
{
  const __CFDictionary *Extensions;
  const __CFDictionary *v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  const opaqueCMFormatDescription *v18;
  uint64_t InfoFromFormatDescription;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v21;
  const void *v22;
  __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  const void **v27;
  const __CFAllocator *v28;
  CMVideoCodecType MediaSubType;
  int32_t width;
  CMVideoDimensions Dimensions;
  void *value;
  CFTypeRef cf;
  CMVideoFormatDescriptionRef formatDescriptionOut;
  CFTypeRef v36;
  CFTypeRef v37;
  CFTypeRef v38;
  char v39;

  v39 = 1;
  v37 = 0;
  v38 = 0;
  formatDescriptionOut = 0;
  v36 = 0;
  cf = 0;
  if (!a4)
  {
    v25 = 0;
    v21 = 0;
    goto LABEL_49;
  }
  if (a2)
  {
    Extensions = CMFormatDescriptionGetExtensions(a1);
    v9 = Extensions;
    if (Extensions)
    {
      v10 = (unint64_t)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA8D68]);
      v11 = (unint64_t)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA8E98]);
      v12 = CMPhotoGetMatrixFromPixelBufferAttachments(v9) != 0;
      v13 = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA21D0]) != 0;
      v14 = (unint64_t)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA8CD8]);
      v15 = v14 | v11;
      v16 = (v14 | v10) != 0;
      v17 = v15 != 0;
      if (a3)
        goto LABEL_13;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v12 = 0;
      v13 = 0;
      if (a3)
        goto LABEL_13;
    }
    if (v16 && v17 && v12 && v13)
    {
      if (a1)
        v18 = (const opaqueCMFormatDescription *)CFRetain(a1);
      else
        v18 = 0;
      v25 = 0;
      v21 = 0;
      *a4 = v18;
LABEL_45:
      if (cf)
        CFRelease(cf);
      goto LABEL_47;
    }
LABEL_13:
    InfoFromFormatDescription = (*(uint64_t (**)(uint64_t, CFTypeRef *))(a2 + 16))(a2, &cf);
    if ((_DWORD)InfoFromFormatDescription
      || (InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(a1, (opaqueCMSampleBuffer *)cf, 1, 0, &v39, 0, 0, 0, 0, &v38, &v37, &v36), (_DWORD)InfoFromFormatDescription))
    {
      v25 = InfoFromFormatDescription;
      v21 = 0;
      goto LABEL_45;
    }
    CFGetAllocator(a1);
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v21 = MutableCopy;
    if (!MutableCopy)
      goto LABEL_61;
    if (a3)
    {
      v22 = (const void *)*MEMORY[0x1E0CA2240];
      v23 = (__CFDictionary *)CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA2240]);
      if (v23)
      {
        CFGetAllocator(a1);
        v24 = FigCFDictionaryCreateMutableCopy();
        if (v24)
        {
          v23 = (__CFDictionary *)v24;
          value = 0;
          if (!CMPhotoCreateAV1CodecConfigFromSampleBuffer((opaqueCMSampleBuffer *)cf, (CFMutableDataRef *)&value))
          {
            CFDictionarySetValue(v23, CFSTR("av1C"), value);
            if (value)
              CFRelease(value);
            CFDictionarySetValue(v21, v22, v23);
          }
          goto LABEL_26;
        }
LABEL_61:
        v25 = 4294950305;
        goto LABEL_45;
      }
    }
    else
    {
      v23 = 0;
    }
LABEL_26:
    if (!v16 && v38)
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CA8D68], v38);
    if (!v17 && v37)
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CA8E98], v37);
    if (v36)
      v26 = v12;
    else
      v26 = 1;
    if ((v26 & 1) == 0)
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CA8EE8], v36);
    if (!v13)
    {
      v27 = (const void **)MEMORY[0x1E0C9AE50];
      if (!v39)
        v27 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v21, (const void *)*MEMORY[0x1E0CA21D0], *v27);
    }
    v28 = CFGetAllocator(a1);
    MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    width = CMVideoFormatDescriptionGetDimensions(a1).width;
    Dimensions = CMVideoFormatDescriptionGetDimensions(a1);
    v25 = CMVideoFormatDescriptionCreate(v28, MediaSubType, width, Dimensions.height, v21, &formatDescriptionOut);
    if (!(_DWORD)v25)
    {
      *a4 = formatDescriptionOut;
      formatDescriptionOut = 0;
    }
    if (v23)
      CFRelease(v23);
    goto LABEL_45;
  }
  v21 = 0;
  v25 = 4294950306;
LABEL_47:
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
LABEL_49:
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  if (v36)
    CFRelease(v36);
  if (v21)
    CFRelease(v21);
  return v25;
}

uint64_t CMPhotoDecompressionContainerCreateCorrespondingDecodeOptionsForInternalIndexAuxImage(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64x2_t *a5, int a6, __CFDictionary **a7)
{
  uint64_t v7;
  uint64_t (*v10)(_QWORD *, uint64_t, _QWORD, uint64_t *, uint64_t *, int *);
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t *, int *);
  const __CFAllocator *v18;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v20;
  uint64_t (*v21)(_QWORD *, uint64_t, uint64_t, const __CFArray **);
  uint64_t YUVPixelFormatForParameters;
  const __CFArray *v23;
  CFIndex Count;
  int v25;
  uint64x2_t v26;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v28;
  uint64x2_t v30[2];
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const __CFArray *v39;
  CGRect v40;

  v39 = 0;
  v7 = 4294950306;
  if (!a1 || !a7)
    return v7;
  v37 = 0;
  v38 = 0;
  v36 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 1;
  v10 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t *, uint64_t *, int *))(a1[4] + 56);
  if (!v10)
    goto LABEL_15;
  v16 = v10(a1, a2, 0, &v37, &v38, &v36);
  if ((_DWORD)v16)
  {
LABEL_37:
    v7 = v16;
    goto LABEL_33;
  }
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t *, int *))(a1[4] + 144);
  if (!v17)
  {
LABEL_15:
    v7 = 4294950302;
    goto LABEL_33;
  }
  v16 = v17(a1, a2, a3, 0, &v34, &v35, &v33);
  if ((_DWORD)v16)
    goto LABEL_37;
  if (v36 != v33)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_37;
  }
  if (!(a6 | a4))
  {
    v20 = 0;
LABEL_32:
    v7 = 0;
    *a7 = v20;
    goto LABEL_33;
  }
  v18 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v20 = Mutable;
    if (((v34 | v35) & 1) == 0)
      goto LABEL_26;
    v21 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, const __CFArray **))(a1[4] + 432);
    if (!v21)
    {
      v7 = 4294950302;
      goto LABEL_18;
    }
    YUVPixelFormatForParameters = v21(a1, a2, a3, &v39);
    if (!(_DWORD)YUVPixelFormatForParameters)
    {
      v23 = v39;
      if (v39)
      {
        Count = CFArrayGetCount(v39);
        v23 = v39;
      }
      else
      {
        Count = 0;
      }
      *(_QWORD *)&v31 = 0;
      if (!CMPhotoCFArrayGetSizeAtIndex(v23, 0, &v31))
      {
        v7 = 4294950194;
        goto LABEL_18;
      }
      v25 = Count == 1 ? 6 : 1;
      v30[0].i32[0] = 0;
      YUVPixelFormatForParameters = CMPhotoGetYUVPixelFormatForParameters(v25, v31, 1, 0, 0, 0, 1, v30[0].i32);
      if (!(_DWORD)YUVPixelFormatForParameters)
      {
        YUVPixelFormatForParameters = CMPhotoCFDictionarySetInt32(v20, CFSTR("OutputPixelFormat"), v30[0].i32[0]);
        if (!(_DWORD)YUVPixelFormatForParameters)
        {
LABEL_26:
          if (a6)
            CFDictionarySetValue(v20, CFSTR("ApplyTransform"), (const void *)*MEMORY[0x1E0C9AE50]);
          if (!a4)
            goto LABEL_32;
          v31 = 0u;
          v32 = 0u;
          v26 = a5[1];
          v30[0] = *a5;
          v30[1] = v26;
          YUVPixelFormatForParameters = CMPhotoTranslateAndScalePreOrientationCrop(v37, v38, v30, 1, v34, v35, 1, &v31);
          if (!(_DWORD)YUVPixelFormatForParameters)
          {
            v40.origin.x = (double)(unint64_t)v31;
            v40.origin.y = (double)*((unint64_t *)&v31 + 1);
            v40.size.width = (double)(unint64_t)v32;
            v40.size.height = (double)*((unint64_t *)&v32 + 1);
            DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v40);
            if (DictionaryRepresentation)
            {
              v28 = DictionaryRepresentation;
              CFDictionaryAddValue(v20, CFSTR("SourceCropRect"), DictionaryRepresentation);
              CFRelease(v28);
              goto LABEL_32;
            }
            v7 = 4294950305;
LABEL_18:
            CFRelease(v20);
            goto LABEL_33;
          }
        }
      }
    }
    v7 = YUVPixelFormatForParameters;
    goto LABEL_18;
  }
  v7 = 4294950305;
LABEL_33:
  if (v39)
    CFRelease(v39);
  return v7;
}

uint64_t CMPhotoDecompressionContainerCheckHDROutputMode(__CVBuffer *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int *v5;

  if (!a1)
    return 4294950306;
  v2 = a2 - 2;
  if (a2 < 2)
    return 0;
  if (CMPhotoPixelBufferIsHLG(a1))
  {
    if (v2 < 4)
    {
      v5 = (unsigned int *)&unk_1A8295860;
      return v5[v2];
    }
  }
  else if (CMPhotoPixelBufferIsPQ(a1))
  {
    if (v2 < 4)
    {
      v5 = (unsigned int *)&unk_1A8295870;
      return v5[v2];
    }
  }
  else if (CMPhotoPixelBufferIsLinear(a1) || CMPhotoPixelBufferIsExtendedLinear(a1))
  {
    if (v2 < 4)
    {
      v5 = (unsigned int *)&unk_1A8295848;
      return v5[v2];
    }
  }
  else if (v2 <= 3)
  {
    v5 = (unsigned int *)&unk_1A8295880;
    return v5[v2];
  }
  return 4294950306;
}

uint64_t CMPhotoDecompressionContainerAddMeteorHeadroomToDescriptionForInternalIndex(_QWORD *a1, uint64_t a2, uint64_t a3, __CFDictionary *a4)
{
  uint64_t v5;
  unsigned int (*v7)(_QWORD *, uint64_t, uint64_t, _QWORD, CGImageMetadataRef *);
  CFStringRef v8;
  CFStringRef v9;
  const __CFArray *v10;
  const __CFAllocator *v11;
  uint64_t CFNumberFormatter;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  BOOL v17;
  CGImageMetadataTag *ValueAtIndex;
  CFStringRef v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, _QWORD, uint64_t *);
  uint64_t MetadataFromData;
  BOOL v23;
  uint64_t (*v24)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, CFTypeRef *);
  BOOL v25;
  const void *v26;
  const void *Value;
  uint64_t v28;
  CFTypeID v30;
  float Double;
  uint64_t v32;
  __CFDictionary *v33;
  float v34;
  uint64_t v35;
  CFDictionaryRef theDict;
  CFTypeRef v37;
  CFTypeRef cf;
  CFTypeRef v39;
  CGImageMetadataRef metadata;

  v5 = a2;
  v39 = 0;
  metadata = 0;
  v37 = 0;
  cf = 0;
  theDict = 0;
  v7 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, _QWORD, CGImageMetadataRef *))(a1[4] + 168);
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    goto LABEL_17;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (v7(a1, a2, a3, 0, &metadata))
    goto LABEL_17;
  v11 = CFGetAllocator(a1);
  CFNumberFormatter = CMPhotoMetadataCreateCFNumberFormatter(v11, (CFNumberFormatterRef *)&v39);
  if ((_DWORD)CFNumberFormatter)
  {
    MetadataFromData = CFNumberFormatter;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    goto LABEL_35;
  }
  v13 = CGImageMetadataCopyTags(metadata);
  v10 = v13;
  if (!v13)
  {
    v9 = 0;
    v8 = 0;
LABEL_61:
    MetadataFromData = 4294950194;
    goto LABEL_35;
  }
  Count = CFArrayGetCount(v13);
  if (Count < 1)
  {
    v8 = 0;
    v9 = 0;
    goto LABEL_17;
  }
  v15 = Count;
  v32 = v5;
  v33 = a4;
  v16 = 0;
  v17 = 1;
  while (1)
  {
    ValueAtIndex = (CGImageMetadataTag *)CFArrayGetValueAtIndex(v10, v16);
    v19 = CGImageMetadataTagCopyNamespace(ValueAtIndex);
    if (v19)
      break;
LABEL_14:
    v17 = ++v16 < v15;
    if (v15 == v16)
    {
      v8 = 0;
      v9 = 0;
      a4 = v33;
      goto LABEL_56;
    }
  }
  v9 = v19;
  v8 = CGImageMetadataTagCopyName(ValueAtIndex);
  if (!v8)
    goto LABEL_61;
  if (!FigCFEqual())
    goto LABEL_12;
  v20 = CMPhotoCopyMetadataTagValue(ValueAtIndex, (__CFNumberFormatter *)v39, 0, (__CFArray **)&cf);
  if ((_DWORD)v20)
    goto LABEL_33;
  if (!FigCFEqual())
  {
LABEL_12:
    CFRelease(v9);
    CFRelease(v8);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    goto LABEL_14;
  }
  if (!cf)
    goto LABEL_61;
  v30 = CFGetTypeID(cf);
  a4 = v33;
  if (v30 != CFNumberGetTypeID())
    goto LABEL_61;
  Double = CMPhotoCFNumberGetDouble((const __CFNumber *)cf);
  v20 = CMPhotoCFDictionarySetFloat(v33, CFSTR("MeteorHeadroomFromProperties"), Double);
  if ((_DWORD)v20)
    goto LABEL_33;
LABEL_56:
  if (v17)
    goto LABEL_57;
  v5 = v32;
LABEL_17:
  v35 = 0;
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t *))(a1[4] + 336);
  if (!v21)
    goto LABEL_34;
  MetadataFromData = v21(a1, v5, 0, &v35);
  if ((_DWORD)MetadataFromData)
    v23 = 1;
  else
    v23 = v35 == 0;
  if (v23)
    goto LABEL_35;
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, CFTypeRef *))(a1[4] + 256);
  if (!v24)
  {
LABEL_34:
    MetadataFromData = 4294950302;
    goto LABEL_35;
  }
  MetadataFromData = v24(a1, v5, 0, 0, 0, &v37);
  if ((_DWORD)MetadataFromData)
    v25 = 1;
  else
    v25 = v37 == 0;
  if (!v25)
  {
    MetadataFromData = CGImageCreateMetadataFromData();
    if (!(_DWORD)MetadataFromData)
    {
      if (theDict)
      {
        v26 = (const void *)*MEMORY[0x1E0CBCF70];
        if (!CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CBCF70])
          || (Value = CFDictionaryGetValue(theDict, v26),
              v34 = 0.0,
              v28 = CMPhotoHeadroomFromMeteorPlusMetadataMakerNote((uint64_t)Value, &v34),
              (_DWORD)v28 == -16993))
        {
LABEL_57:
          MetadataFromData = 0;
        }
        else
        {
          MetadataFromData = v28;
          if (!(_DWORD)v28)
          {
            v20 = CMPhotoCFDictionarySetFloat(a4, CFSTR("MeteorHeadroomFromMakerNote"), v34);
LABEL_33:
            MetadataFromData = v20;
          }
        }
      }
    }
  }
LABEL_35:
  if (metadata)
    CFRelease(metadata);
  if (theDict)
    CFRelease(theDict);
  if (v37)
    CFRelease(v37);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (cf)
    CFRelease(cf);
  if (v39)
    CFRelease(v39);
  if (v10)
    CFRelease(v10);
  return MetadataFromData;
}

uint64_t CMPhotoDecompressionContainerCreateMeteorConstituentsForInternalIndex(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, __CFDictionary **a6)
{
  __CFDictionary *v6;
  int v11;
  int v12;
  uint64x2_t v13;
  uint64_t CorrespondingDecodeOptionsForInternalIndexAuxImage;
  uint64_t (*v15)(_QWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, CFTypeRef *);
  __CFDictionary *MutableCopy;
  unsigned int (*v17)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, uint64x2_t *);
  uint64_t v18;
  unsigned int (*v19)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64x2_t *);
  const void *v20;
  const void *v21;
  __CFDictionary *Mutable;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t, CFTypeRef, void **);
  int v25;
  void *v26;
  uint64x2_t v28[2];
  void *value;
  CFDictionaryRef theDict;
  CFTypeRef v31;
  CFTypeRef cf;

  v6 = (__CFDictionary *)a4;
  v31 = 0;
  cf = 0;
  value = 0;
  theDict = 0;
  if (!a4)
  {
    MutableCopy = 0;
    v23 = 4294950306;
    goto LABEL_30;
  }
  v11 = a4[21];
  v12 = *((unsigned __int8 *)v6 + 71);
  v13 = *(uint64x2_t *)((char *)v6 + 40);
  v28[0] = *(uint64x2_t *)((char *)v6 + 24);
  v28[1] = v13;
  CorrespondingDecodeOptionsForInternalIndexAuxImage = CMPhotoDecompressionContainerCreateCorrespondingDecodeOptionsForInternalIndexAuxImage(a1, a2, a3, v11, v28, v12, (__CFDictionary **)&cf);
  if ((_DWORD)CorrespondingDecodeOptionsForInternalIndexAuxImage)
    goto LABEL_42;
  v15 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, CFTypeRef, uint64_t, CFTypeRef *))(a1[4] + 192);
  if (!v15)
  {
    v6 = 0;
    MutableCopy = 0;
    v23 = 4294950302;
    goto LABEL_30;
  }
  CorrespondingDecodeOptionsForInternalIndexAuxImage = v15(a1, a2, a3, cf, 2, &v31);
  if ((_DWORD)CorrespondingDecodeOptionsForInternalIndexAuxImage)
  {
LABEL_42:
    v23 = CorrespondingDecodeOptionsForInternalIndexAuxImage;
    v6 = 0;
    goto LABEL_29;
  }
  CFGetAllocator(a1);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v6 = 0;
    goto LABEL_44;
  }
  FigCFDictionarySetValue();
  v28[0].i32[0] = 1;
  v17 = *(unsigned int (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD, uint64x2_t *))(a1[4] + 56);
  if (v17)
  {
    if (!v17(a1, a2, 0, 0, 0, v28))
    {
      v18 = FigCFDictionarySetInt();
      if ((_DWORD)v18)
        goto LABEL_45;
    }
  }
  if (*((_QWORD *)v6 + 12))
    FigCFDictionarySetValue();
  FigCFDictionarySetValue();
  v28[0].i32[0] = 1;
  v19 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64x2_t *))(a1[4] + 144);
  if (v19)
  {
    if (!v19(a1, a2, a3, 0, 0, 0, v28))
    {
      v18 = FigCFDictionarySetInt();
      if ((_DWORD)v18)
      {
LABEL_45:
        v23 = v18;
        v6 = 0;
        goto LABEL_30;
      }
    }
  }
  v6 = 0;
  if (!CMPhotoDecompressionContainerCopyImagePropertiesForInternalIndex((uint64_t)a1, a2, 0, 0, 0, (CFTypeRef *)&theDict))
  {
    if (theDict)
    {
      v20 = (const void *)*MEMORY[0x1E0CBCF70];
      if (CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CBCF70]))
      {
        v21 = (const void *)FigCFDictionaryGetValue();
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v6 = Mutable;
        if (Mutable)
        {
          CFDictionaryAddValue(Mutable, v20, v21);
          CFDictionarySetValue(MutableCopy, CFSTR("MeteorMakerNote"), v6);
          goto LABEL_21;
        }
LABEL_44:
        v23 = 4294950305;
        goto LABEL_30;
      }
    }
    v6 = 0;
  }
LABEL_21:
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, CFTypeRef, void **))(a1[4] + 168);
  if (!v24)
  {
LABEL_28:
    v23 = 0;
    *a6 = MutableCopy;
LABEL_29:
    MutableCopy = 0;
    goto LABEL_30;
  }
  v25 = v24(a1, a2, a3, cf, &value);
  v26 = value;
  if (!v25)
  {
    if (value)
    {
      CFDictionarySetValue(MutableCopy, CFSTR("MeteorXMPMetadata"), value);
      v26 = value;
      goto LABEL_25;
    }
    goto LABEL_28;
  }
LABEL_25:
  *a6 = MutableCopy;
  if (v26)
    CFRelease(v26);
  MutableCopy = 0;
  v23 = 0;
LABEL_30:
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (theDict)
    CFRelease(theDict);
  if (v6)
    CFRelease(v6);
  return v23;
}

uint64_t CMPhotoDecompressionContainerCopyTranslatedOptionsForAlternates(_QWORD *cf, const __CFNumber *a2, const __CFDictionary *a3, int a4, __CFDictionary **a5)
{
  uint64_t v5;
  const __CFDictionary *v7;
  __CFDictionary *MutableCopy;
  __CFDictionary *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *);
  uint64_t (*v17)(_QWORD *, uint64_t, _QWORD, uint64_t *, uint64_t *, int *);
  const void *Value;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v20;
  uint64x2_t v22[2];
  uint64x2_t v23;
  uint64x2_t v24;
  uint64x2_t v25;
  uint64x2_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGRect v35;

  v5 = 4294950306;
  if (cf && a5)
  {
    v7 = a3;
    if (cf[68])
    {
      if (a4)
      {
        CFGetAllocator(cf);
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
          return 4294950305;
        v7 = MutableCopy;
        CFDictionarySetValue(MutableCopy, CFSTR("kCMPhotoDecompressionOption_ForTranscode"), (const void *)*MEMORY[0x1E0C9AE50]);
        v11 = v7;
      }
      else
      {
        v11 = 0;
        if (!a3)
        {
LABEL_28:
          v5 = 0;
          *a5 = v11;
          return v5;
        }
      }
      v12 = CFDictionaryContainsKey(v7, CFSTR("AlternateIndex"));
      v13 = CFDictionaryContainsKey(v7, CFSTR("SourceCropRect"));
      if (v12)
        v14 = 1;
      else
        v14 = v13 == 0;
      if (!v14)
      {
        v33 = -1;
        v34 = -1;
        v15 = CMPhotoDecompressionContainerExternalToInternalIndex(cf, a2, -1, 0, (const __CFNumber **)&v34, 0, 0);
        if ((_DWORD)v15)
          goto LABEL_32;
        v15 = CMPhotoDecompressionContainerExternalToInternalIndex(cf, a2, -1, v7, (const __CFNumber **)&v33, 0, 0);
        if ((_DWORD)v15)
          goto LABEL_32;
        if (v34 != v33)
        {
          v31 = 0;
          v32 = 0;
          v30 = 1;
          v16 = *(uint64_t (**)(_QWORD *))(cf[4] + 56);
          if (!v16)
            goto LABEL_29;
          v15 = v16(cf);
          if ((_DWORD)v15)
            goto LABEL_32;
          v28 = 0;
          v29 = 0;
          v27 = 1;
          v17 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t *, uint64_t *, int *))(cf[4] + 56);
          if (!v17)
          {
LABEL_29:
            v5 = 4294950302;
            if (!v11)
              return v5;
            goto LABEL_30;
          }
          v15 = v17(cf, v33, 0, &v28, &v29, &v27);
          if ((_DWORD)v15)
          {
LABEL_32:
            v5 = v15;
            if (!v11)
              return v5;
            goto LABEL_30;
          }
          if (v31 != v28 || v32 != v29 || v27 != v30)
          {
            v25 = 0u;
            v26 = 0u;
            Value = CFDictionaryGetValue(v7, CFSTR("SourceCropRect"));
            v15 = CMPhotoDecompressionContainerValidateSourceCropRect(Value, v31, v32, 0, (int64x2_t *)&v25);
            if (!(_DWORD)v15)
            {
              v23 = v25;
              v24 = v26;
              v22[0] = v25;
              v22[1] = v26;
              v15 = CMPhotoTranslateAndScalePreOrientationCrop(v31, v32, v22, v30, v28, v29, v27, &v23);
              if (!(_DWORD)v15)
              {
                if (v11 || (CFGetAllocator(cf), (v11 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy()) != 0))
                {
                  v35.origin.x = (double)v23.u64[0];
                  v35.origin.y = (double)v23.u64[1];
                  v35.size.width = (double)v24.u64[0];
                  v35.size.height = (double)v24.u64[1];
                  DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v35);
                  if (DictionaryRepresentation)
                  {
                    v20 = DictionaryRepresentation;
                    CFDictionarySetValue(v11, CFSTR("SourceCropRect"), DictionaryRepresentation);
                    CFRelease(v20);
                    goto LABEL_28;
                  }
                  v5 = 4294950305;
LABEL_30:
                  CFRelease(v11);
                  return v5;
                }
                return 4294950305;
              }
            }
            goto LABEL_32;
          }
        }
      }
      if (v11)
        goto LABEL_28;
    }
    else if (!a3)
    {
      v11 = 0;
      goto LABEL_28;
    }
    v11 = (__CFDictionary *)CFRetain(v7);
    goto LABEL_28;
  }
  return v5;
}

CFTypeRef CMPhotoDecompressionContainerClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoDecompressionContainer]"));
}

double CMPhotoDecompressionTileIteratorClass_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void CMPhotoDecompressionTileIteratorClass_Finalize(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(void);

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(void (**)(void))(v2[4] + 248);
  if (!v3 || (v3(), (v2 = *(_QWORD **)(a1 + 16)) != 0))
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFTypeRef CMPhotoDecompressionTileIteratorClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoDecompressionTileIterator]"));
}

uint64_t _indexMapComparator()
{
  unsigned int Value;
  unsigned int v1;

  Value = FigCFDictionaryGetValue();
  v1 = FigCFDictionaryGetValue();
  if (Value < v1)
    return -1;
  else
    return Value > v1;
}

const __CFNumber *___populateIndexMap_block_invoke(_QWORD *a1, const __CFNumber *a2)
{
  const __CFNumber *result;
  uint64_t v4;
  uint64_t v5;

  result = CMPhotoCFNumberGetSize(a2);
  if ((uint64_t)result < a1[5])
  {
    *(_QWORD *)(a1[6] + 8 * (_QWORD)result) = a1[7];
    v4 = *(_QWORD *)(a1[4] + 8);
    v5 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v5 + 1;
    *(_QWORD *)(a1[8] + 8 * (_QWORD)result) = v5;
  }
  return result;
}

uint64_t jpegService()
{
  uint64_t result;

  result = _jpegService;
  if (!_jpegService)
  {
    pthread_once(&jpegService_once, (void (*)(void))_initializeService);
    return _jpegService;
  }
  return result;
}

uint64_t JPEGDeviceInterface_decodeJPEG(mach_port_t connection, void *inputStruct, void *outputStruct)
{
  _DWORD *v6;
  mach_port_t v7;
  uint64_t v8;
  size_t outputStructCnt;

  outputStructCnt = 88;
  v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  v7 = connection;
  if (connection || (v7 = _openService()) != 0)
  {
    if (*v6 == 1)
      kdebug_trace();
    v8 = IOConnectCallStructMethod(v7, 1u, inputStruct, 0x58uLL, outputStruct, &outputStructCnt);
  }
  else
  {
    v8 = 3758097101;
  }
  if (!*((_QWORD *)inputStruct + 6) && *v6 == 1)
    kdebug_trace();
  if (!connection && v7)
    _closeService(v7);
  return v8;
}

uint64_t JPEGDeviceInterface_decodeJPEG2024(mach_port_t connection, void *inputStruct, void *outputStruct)
{
  _DWORD *v6;
  mach_port_t v7;
  uint64_t v8;
  size_t outputStructCnt;

  outputStructCnt = 3488;
  v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  v7 = connection;
  if (connection || (v7 = _openService()) != 0)
  {
    if (*v6 == 1)
      kdebug_trace();
    v8 = IOConnectCallStructMethod(v7, 7u, inputStruct, 0xDA0uLL, outputStruct, &outputStructCnt);
  }
  else
  {
    v8 = 3758097101;
  }
  if (!*((_QWORD *)inputStruct + 6) && *v6 == 1)
    kdebug_trace();
  if (!connection && v7)
    _closeService(v7);
  return v8;
}

uint64_t JPEGDeviceInterface_encodeJPEG(uint64_t a1)
{
  mach_port_t v1;
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  mach_port_t v10;
  _BOOL4 v11;
  BOOL v12;
  int v13;
  mach_port_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[26];
  uint64_t v64;
  size_t outputStructCnt;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  outputStructCnt = 88;
  v11 = v8[21]
     && (pthread_once(&JPEGDeviceInterface_supportsRSTLogging_once, (void (*)(void))_checkSupportsRSTLogging),
         _supportsRSTLogging)
     && (v9[6] * v9[5]) > 0x2DC6C0;
  if (v7)
    v12 = v5 == 0;
  else
    v12 = 1;
  v13 = !v12;
  v14 = v10;
  if (!v10)
  {
    v14 = _openService();
    if (!v14)
      return 3758097101;
  }
  if (((v13 | v11) & 1) != 0)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    memset(v63, 0, sizeof(v63));
    v15 = *((_OWORD *)v9 + 3);
    v59 = *((_OWORD *)v9 + 2);
    v60 = v15;
    v61 = *((_OWORD *)v9 + 4);
    v16 = *((_QWORD *)v9 + 10);
    v64 = 0;
    v62 = v16;
    v17 = *((_OWORD *)v9 + 1);
    v58[0] = *(_OWORD *)v9;
    v58[1] = v17;
    if (v13)
    {
      v18 = v7[1];
      *(_OWORD *)((char *)v63 + 4) = *v7;
      *(_OWORD *)((char *)&v63[1] + 4) = v18;
      v19 = v7[3];
      *(_OWORD *)((char *)&v63[2] + 4) = v7[2];
      *(_OWORD *)((char *)&v63[3] + 4) = v19;
      v20 = v5[1];
      *(_OWORD *)((char *)&v63[4] + 4) = *v5;
      *(_OWORD *)((char *)&v63[5] + 4) = v20;
      v21 = v5[3];
      *(_OWORD *)((char *)&v63[6] + 4) = v5[2];
      *(_OWORD *)((char *)&v63[7] + 4) = v21;
      LODWORD(v59) = v59 | 8;
    }
    LODWORD(v63[0]) = v11;
    outputStructCnt = 4096;
    v22 = IOConnectCallStructMethod(v14, 4u, v58, 0x1000uLL, &v26, &outputStructCnt);
    v23 = v29;
    v3[2] = v28;
    v3[3] = v23;
    v3[4] = v30;
    *((_QWORD *)v3 + 10) = v31;
    v24 = v27;
    *v3 = v26;
    v3[1] = v24;
    if (!v10)
      goto LABEL_19;
  }
  else
  {
    v22 = IOConnectCallStructMethod(v14, 3u, v9, 0x58uLL, v3, &outputStructCnt);
    if (!v10)
LABEL_19:
      _closeService(v14);
  }
  return v22;
}

uint64_t _openService()
{
  uint64_t v0;

  if (_jpegSema)
    FigSemaphoreWaitRelative();
  else
    pthread_mutex_lock(&_jpegLock);
  v0 = _openDriverConnection();
  if (!(_DWORD)v0)
  {
    if (_jpegSema)
      FigSemaphoreSignal();
    else
      pthread_mutex_unlock(&_jpegLock);
  }
  return v0;
}

uint64_t _closeService(io_connect_t a1)
{
  if (a1)
    IOServiceClose(a1);
  if (_jpegSema)
    return FigSemaphoreSignal();
  else
    return pthread_mutex_unlock(&_jpegLock);
}

uint64_t JPEGDeviceInterface_encodeJPEG2024(mach_port_t a1, void *inputStruct, void *outputStruct)
{
  size_t outputStructCnt;

  outputStructCnt = 3488;
  return IOConnectCallStructMethod(a1, 6u, inputStruct, 0xDA0uLL, outputStruct, &outputStructCnt);
}

uint64_t JPEGDeviceInterface_supportsMissingEOI()
{
  pthread_once(&JPEGDeviceInterface_supportsMissingEOI_once, (void (*)(void))_checkSupportsMissingEOI);
  return _supportsMissingEOI;
}

const __CFBoolean *_checkSupportsMissingEOI()
{
  const __CFBoolean *result;

  result = _checkUInt32DriverProperty(CFSTR("AppleJPEGSupportsMissingEOI"), (const __CFBoolean *)_supportsMissingEOI);
  _supportsMissingEOI = (char)result;
  return result;
}

uint64_t VTDecompressionPluginClass_create(uint64_t a1, const opaqueCMFormatDescription *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  void **v13;
  void *v14;
  const void *v15;
  void *v16;
  void *v17;
  CFDictionaryRef v18;
  CFDictionaryRef v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void *v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char v32;
  int v33;
  __int16 v34;
  char DecodeHighSpeedDefault;
  uint64_t (*v36)(uint64_t, uint64_t, unsigned int, char, uint64_t);
  uint64_t v37;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  DecodeHighSpeedDefault = CMPhotoGetDecodeHighSpeedDefault();
  v34 = 0;
  v33 = 0;
  v8 = 4294950306;
  v32 = 1;
  if (!a1 || !a2 || !a4)
    return v8;
  v9 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E2040A0F51DDDuLL);
  if (!v9)
    return 4294950305;
  v10 = v9;
  v36 = 0;
  v37 = 0;
  v9[41] = 0;
  v11 = v9 + 41;
  v9[24] = 1;
  if (a3
    && (CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("SyncDecode"), v9 + 25),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("AllowPackedBuffers"), v11),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("ForceHighSpeedDecode"), &DecodeHighSpeedDefault),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("PreferSoftwareCodec"), (_BYTE *)&v34 + 1),
        CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("RequireHardwareCodec"), &v34),
        CMPhotoCFDictionaryGetInt32IfPresent(a3, CFSTR("ThreadPriority"), &v33),
        HIBYTE(v34)))
  {
    v12 = 0;
    LOBYTE(v34) = 0;
  }
  else
  {
    v12 = 1;
    if ((_BYTE)v34)
    {
      v13 = (void **)MEMORY[0x1E0CEDCC0];
      goto LABEL_11;
    }
  }
  v13 = (void **)MEMORY[0x1E0CEDCA8];
LABEL_11:
  v14 = (void *)*MEMORY[0x1E0CEDCA0];
  keys[0] = *v13;
  keys[1] = v14;
  v15 = (const void *)*MEMORY[0x1E0C9AE40];
  v16 = (void *)*MEMORY[0x1E0C9AE50];
  if (v12)
    v17 = (void *)*MEMORY[0x1E0C9AE50];
  else
    v17 = (void *)*MEMORY[0x1E0C9AE40];
  values[0] = v17;
  values[1] = v16;
  v18 = CFDictionaryCreate(*(CFAllocatorRef *)a1, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v18)
  {
    *v10 = 1;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v30 = (unint64_t)v10;
    VTDecompressionPluginClass_dispose((uint64_t)&v26);
    return 4294950305;
  }
  v19 = v18;
  v36 = VTDecompressionPluginClass_VideoToolbox_callback;
  v37 = a1;
  v20 = *(_QWORD *)(a1 + 80);
  if (!v20 && ((v22 = *(_DWORD *)(a1 + 72), v22 == 1635135537) || v22 == 1902212657))
  {
    v21 = VTDecompressionSessionCreateWithOptions();
    if ((_DWORD)v21)
      goto LABEL_30;
  }
  else
  {
    v21 = CMPhotoCodecSessionPoolCreateDecompressionSession(*(CFTypeRef *)(a1 + 24), 0, v20, a2, v18, (uint64_t)VTDecompressionPluginClass_VideoToolbox_callback, a1, (_QWORD *)v10 + 1, &v32);
    if ((_DWORD)v21)
      goto LABEL_30;
  }
  if (DecodeHighSpeedDefault)
    v23 = v16;
  else
    v23 = v15;
  v21 = VTSessionSetProperty(*((VTSessionRef *)v10 + 1), (CFStringRef)*MEMORY[0x1E0CED388], v23);
  if (!(_DWORD)v21)
  {
    if (v10[24] || v10[25] || (v24 = FigDispatchQueueCreateWithPriority(), (*((_QWORD *)v10 + 4) = v24) != 0))
    {
      *(_QWORD *)(a1 + 64) = v10;
      CFRelease(v19);
      return 0;
    }
    v8 = 4294950305;
    goto LABEL_31;
  }
LABEL_30:
  v8 = v21;
LABEL_31:
  CFRelease(v19);
  *v10 = 1;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v30 = (unint64_t)v10;
  VTDecompressionPluginClass_dispose((uint64_t)&v26);
  if ((v8 | 2) == 0x44E)
    return 4294951826;
  return v8;
}

void VTDecompressionPluginClass_dispose(uint64_t a1)
{
  unsigned __int8 *v2;
  NSObject *v3;
  NSObject *v4;
  OpaqueVTDecompressionSession *v5;
  int v6;
  const void *v7;
  const void *v8;

  if (a1)
  {
    v2 = *(unsigned __int8 **)(a1 + 64);
    if (v2)
    {
      v3 = *((_QWORD *)v2 + 4);
      if (v3)
      {
        dispatch_barrier_sync_f(v3, 0, (dispatch_function_t)_dispatch_empty);
        v4 = *((_QWORD *)v2 + 4);
        if (v4)
          dispatch_release(v4);
      }
      v5 = (OpaqueVTDecompressionSession *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        if (v2[24])
          VTDecompressionSessionWaitForAsynchronousFrames(v5);
        if (!*(_QWORD *)(a1 + 80) && ((v6 = *(_DWORD *)(a1 + 72), v6 == 1635135537) || v6 == 1902212657))
          VTDecompressionSessionInvalidate(*((VTDecompressionSessionRef *)v2 + 1));
        else
          CMPhotoCodecSessionPoolRecycleSession(*(_QWORD *)(a1 + 24), *((CFTypeRef *)v2 + 1), *v2);
        v7 = (const void *)*((_QWORD *)v2 + 1);
        if (v7)
        {
          CFRelease(v7);
          *((_QWORD *)v2 + 1) = 0;
        }
      }
      v8 = (const void *)*((_QWORD *)v2 + 2);
      if (v8)
        CFRelease(v8);
      free(v2);
      *(_QWORD *)(a1 + 64) = 0;
    }
  }
}

uint64_t VTDecompressionPluginClass_decode(uint64_t a1, int a2, CMSampleBufferRef sampleBuffer, void *sourceFrameRefCon)
{
  uint64_t v7;
  VTDecodeFrameFlags v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  CFTypeRef v13;
  CFTypeRef v14;

  v7 = *(_QWORD *)(a1 + 64);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*(_BYTE *)(v7 + 25))
  {
    v8 = 0;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v7 + 24))
  {
    v10 = malloc_type_calloc(1uLL, 0x20uLL, 0xA0040A3F8AD00uLL);
    if (!v10)
    {
      *(_BYTE *)v7 = 1;
      return 4294950305;
    }
    v11 = v10;
    v12 = *(const void **)(v7 + 8);
    if (v12)
    {
      v13 = CFRetain(v12);
      if (sampleBuffer)
      {
LABEL_13:
        v14 = CFRetain(sampleBuffer);
LABEL_16:
        *v11 = a1;
        v11[1] = v13;
        v11[2] = v14;
        v11[3] = sourceFrameRefCon;
        dispatch_async_f(*(dispatch_queue_t *)(v7 + 32), v11, (dispatch_function_t)_dispatch_decodeTileAsync);
        return 0;
      }
    }
    else
    {
      v13 = 0;
      if (sampleBuffer)
        goto LABEL_13;
    }
    v14 = 0;
    goto LABEL_16;
  }
  v8 = 1;
LABEL_7:
  result = VTDecompressionSessionDecodeFrame(*(VTDecompressionSessionRef *)(v7 + 8), sampleBuffer, v8, sourceFrameRefCon, 0);
  if ((_DWORD)result)
  {
    *(_BYTE *)v7 = 1;
    if ((result | 2) == 0x44E)
      return 4294951826;
  }
  return result;
}

uint64_t VTDecompressionPluginClass_setAttachment(uint64_t a1, const void *a2, const void *a3)
{
  int v4;
  BOOL v5;

  if (!*(_QWORD *)(a1 + 80) && ((v4 = *(_DWORD *)(a1 + 72), v4 != 1635135537) ? (v5 = v4 == 1902212657) : (v5 = 1), v5))
    return 0;
  else
    return CMPhotoCodecSessionPoolSetDecompressionSessionAttachment(*(_QWORD *)(a1 + 24), *(const void **)(*(_QWORD *)(a1 + 64) + 8), a2, a3);
}

uint64_t VTDecompressionPluginClass_copyAttachments(uint64_t a1, CFDictionaryRef *a2)
{
  int v3;
  BOOL v4;

  if (!*(_QWORD *)(a1 + 80) && ((v3 = *(_DWORD *)(a1 + 72), v3 != 1635135537) ? (v4 = v3 == 1902212657) : (v4 = 1), v4))
    return 0;
  else
    return CMPhotoCodecSessionPoolCopyDecompressionSessionAttachments(*(_QWORD *)(a1 + 24), *(const void **)(*(_QWORD *)(a1 + 64) + 8), a2);
}

uint64_t VTDecompressionPluginClass_VideoToolbox_callback(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;

  v10 = *(_BYTE **)(a1 + 64);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if ((a4 & 2) != 0)
    v11 = -17104;
  else
    v11 = a3;
  if (v11)
  {
    *v10 = 1;
    if ((v11 | 2) == 0x44E)
      v12 = 4294951826;
    else
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 48))(a1, v12, a5, *(_QWORD *)(a1 + 56), a2);
}

void _dispatch_decodeTileAsync(_QWORD *a1)
{
  OpaqueVTDecompressionSession *v1;
  uint64_t v2;
  _BYTE *v3;
  opaqueCMSampleBuffer *v4;
  void *v5;
  uint64_t v6;

  v2 = *a1;
  v1 = (OpaqueVTDecompressionSession *)a1[1];
  v3 = *(_BYTE **)(*a1 + 64);
  v4 = (opaqueCMSampleBuffer *)a1[2];
  v5 = (void *)a1[3];
  free(a1);
  v6 = VTDecompressionSessionDecodeFrame(v1, v4, 0, v5, 0);
  if ((_DWORD)v6)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(v2 + 48))(v2, v6, 0, *(_QWORD *)(v2 + 56), v5);
    *v3 = 1;
  }
  if (v1)
    CFRelease(v1);
  if (v4)
    CFRelease(v4);
}

void _dispatch_tileDecodeTileAsync(uint64_t *a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v3 = *a1;
  v2 = (const void *)a1[1];
  v5 = (const void *)a1[2];
  v4 = (const void *)a1[3];
  v6 = a1[6];
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v8 = VTTileDecompressionSessionDecodeTile();
  if (*v7 == 1)
    kdebug_trace();
  if ((_DWORD)v8)
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(v3 + 48))(v3, v8, 0, *(_QWORD *)(v3 + 56), v6);
  free(a1);
  if (v2)
    CFRelease(v2);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
}

uint64_t _addReferencesToItemInfo(__CFDictionary *a1, const __CFDictionary *a2, int a3, const void *a4, _BYTE *a5)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  uint64_t i;
  CFIndex Count;
  void *value;

  value = 0;
  *a5 = 1;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v11 = Mutable;
  if (a2 && CFDictionaryGetValueIfPresent(a2, a4, (const void **)&value))
  {
    for (i = -1; ; ++i)
    {
      Count = (CFIndex)value;
      if (value)
        Count = CFArrayGetCount((CFArrayRef)value);
      if (i + 1 >= Count)
        break;
      FigCFArrayGetInt32AtIndex();
      if (!a3)
      {
        if ((((_BYTE)i + 1) & 1) == 0)
        {
          *a5 = 0;
          goto LABEL_13;
        }
        FigCFArrayGetInt32AtIndex();
        FigCFArrayAppendInt32();
      }
    }
  }
  CFDictionarySetValue(a1, a4, v11);
LABEL_13:
  CFRelease(v11);
  return 0;
}

uint64_t _copyFormatDescriptionForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return _copyFormatDescriptionForTrackReader(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), a4);
}

uint64_t _getThumbnailCountForIndex_2(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex *a4)
{
  if (!a4)
    return 0;
  if (*(_BYTE *)(a1 + 112))
  {
    *a4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t _createThumbnailImageForIndex_1(uint64_t a1, uint64_t a2, CFIndex idx, const __CFDictionary *a4, int a5, CGImageRef *a6)
{
  uint64_t v12;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t SampleBuffer;
  CFTypeRef v16;
  CFTypeRef cf;
  const void *v19[3];

  v19[2] = *(const void **)MEMORY[0x1E0C80C00];
  cf = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    if (a4)
    {
      v19[0] = CFSTR("DryRun");
      v19[1] = CFSTR("UseProvidedPixelBuffer");
      v12 = _checkForUnsupportedKeys(a4, v19);
      if ((_DWORD)v12)
        return v12;
    }
    if (idx < 0)
      return 4294950306;
    Count = *(const __CFArray **)(a1 + 88);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count <= idx)
      return 4294950306;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), idx);
    SampleBuffer = _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 40), a2, (uint64_t)ValueAtIndex, (CMSampleBufferRef *)&cf);
    v16 = cf;
    if ((_DWORD)SampleBuffer)
    {
      v12 = SampleBuffer;
      if (!cf)
        return v12;
    }
    else
    {
      v12 = _decodePixelBufferForImageIndex(*(const __CFAllocator **)(a1 + 40), (uint64_t *)a1, a2, (uint64_t)cf, (uint64_t)ValueAtIndex, a4, a5, a6);
      v16 = cf;
      if (!cf)
        return v12;
    }
    CFRelease(v16);
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t _getAuxiliaryImageGeometryForIndex_2(uint64_t a1, int a2, CFIndex idx, uint64_t a4, _QWORD *a5, _QWORD *a6, _DWORD *a7)
{
  const __CFArray *Count;
  const void *v13;

  if (idx < 0)
    return 4294950306;
  Count = *(const __CFArray **)(a1 + 96);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 4294950306;
  v13 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx) + 1);
  if (!v13)
    return 4294950306;
  else
    return _getReferenceSequenceGeometry(v13, a5, a6, a7);
}

uint64_t _copyAuxiliaryImageFormatDescriptionForIndex_0(uint64_t a1, int a2, CFIndex idx, uint64_t a4, _QWORD *a5)
{
  const __CFArray *Count;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v11;
  CFArrayRef v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  if (!a5)
    return 0;
  if (idx < 0)
    return 4294950306;
  Count = *(const __CFArray **)(a1 + 96);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx || !*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx) + 1))
    return 4294950306;
  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v10 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v10)
    return 4294954514;
  v11 = v10(FigBaseObject, *MEMORY[0x1E0CC6188], *MEMORY[0x1E0C9AE00], &theArray);
  v12 = theArray;
  if (!(_DWORD)v11)
  {
    v13 = CFArrayGetCount(theArray);
    v12 = theArray;
    if (v13 != 1)
    {
      v11 = 4294950194;
      if (!theArray)
        return v11;
      goto LABEL_14;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    v11 = 0;
    *a5 = ValueAtIndex;
    v12 = theArray;
  }
  if (v12)
LABEL_14:
    CFRelease(v12);
  return v11;
}

uint64_t _createOutputBufferAttributesForImageIndex_2(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  uint64_t OutputBufferAttributesForFormatDescription;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  OutputBufferAttributesForFormatDescription = _copyFormatDescriptionForTrackReader(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8), &cf);
  if (!(_DWORD)OutputBufferAttributesForFormatDescription)
    OutputBufferAttributesForFormatDescription = _createOutputBufferAttributesForFormatDescription(a1, (CMVideoFormatDescriptionRef)cf, a3, a4);
  v8 = OutputBufferAttributesForFormatDescription;
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t _createOutputBufferAttributesForThumbnailIndex_1(uint64_t a1, int a2, CFIndex a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  uint64_t OutputBufferAttributesForFormatDescription;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  OutputBufferAttributesForFormatDescription = _copyThumbnailFormatDescriptionForIndex_0(a1, a2, a3, &cf);
  if (!(_DWORD)OutputBufferAttributesForFormatDescription)
    OutputBufferAttributesForFormatDescription = _createOutputBufferAttributesForFormatDescription(a1, (CMVideoFormatDescriptionRef)cf, a4, a5);
  v9 = OutputBufferAttributesForFormatDescription;
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t _createOutputBufferAttributesForAuxiliaryIndex_1(uint64_t a1, int a2, CFIndex a3, const __CFDictionary *a4, CFMutableDictionaryRef *a5)
{
  uint64_t OutputBufferAttributesForFormatDescription;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  OutputBufferAttributesForFormatDescription = _copyAuxiliaryImageFormatDescriptionForIndex_0(a1, a2, a3, (uint64_t)a4, &cf);
  if (!(_DWORD)OutputBufferAttributesForFormatDescription)
    OutputBufferAttributesForFormatDescription = _createOutputBufferAttributesForFormatDescription(a1, (CMVideoFormatDescriptionRef)cf, a4, a5);
  v9 = OutputBufferAttributesForFormatDescription;
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t _initTileIteratorForIndex_1(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  const __CFArray *Count;
  const __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  const __CFArray *v11;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const void **);
  uint64_t v17;
  const void *v18;
  const void *v20;

  v20 = 0;
  v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v5)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_26;
  }
  v6 = a3[5];
  if (v6 != -1)
  {
    Count = (const __CFArray *)a1[11];
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v6 <= (uint64_t)Count)
    {
      v8 = (const __CFArray *)a1[11];
      v9 = a3[5];
LABEL_12:
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v9);
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  v10 = a3[4];
  if (v10 != -1)
  {
    v11 = (const __CFArray *)a1[12];
    if (v11)
      v11 = (const __CFArray *)CFArrayGetCount(v11);
    if (v10 <= (uint64_t)v11)
    {
      v8 = (const __CFArray *)a1[12];
      v9 = a3[4];
      goto LABEL_12;
    }
LABEL_28:
    v17 = 4294950306;
    goto LABEL_19;
  }
  ValueAtIndex = (const void *)a1[10];
LABEL_13:
  v13 = pthread_mutex_lock(*((pthread_mutex_t **)ValueAtIndex + 4));
  if ((_DWORD)v13)
  {
LABEL_26:
    v17 = v13;
    goto LABEL_19;
  }
  v14 = _moveCursorToPosition(*((_QWORD *)ValueAtIndex + 2), (uint64_t *)ValueAtIndex + 3, a3[3]);
  if ((_DWORD)v14)
    goto LABEL_27;
  v15 = *((_QWORD *)ValueAtIndex + 2);
  v16 = *(uint64_t (**)(uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v16)
  {
    v17 = 4294954514;
    goto LABEL_21;
  }
  v14 = v16(v15, &v20);
  if ((_DWORD)v14)
  {
LABEL_27:
    v17 = v14;
  }
  else
  {
    v17 = pthread_mutex_unlock(*((pthread_mutex_t **)ValueAtIndex + 4));
    if (!(_DWORD)v17)
    {
      *v5 = v20;
      a3[6] = (uint64_t)&_initTileIteratorForIndex_vtable_0;
      a3[7] = (uint64_t)v5;
      v5 = 0;
LABEL_19:
      free(v5);
      return v17;
    }
  }
LABEL_21:
  pthread_mutex_unlock(*((pthread_mutex_t **)ValueAtIndex + 4));
  v18 = v20;
  free(v5);
  if (v18)
    CFRelease(v18);
  return v17;
}

uint64_t _finalizeTileIterator_1(uint64_t a1, uint64_t a2)
{
  CFTypeRef *v3;

  v3 = *(CFTypeRef **)(a2 + 56);
  if (v3)
  {
    if (!*v3 || (CFRelease(*v3), *v3 = 0, (v3 = *(CFTypeRef **)(a2 + 56)) != 0))
    {
      *(_QWORD *)(a2 + 56) = 0;
      free(v3);
    }
  }
  *(_QWORD *)(a2 + 48) = 0;
  return 0;
}

uint64_t _copyImageIsRGBForIndex_2(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return 0;
  v4 = _copySequenceReaderColor(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), 0, 0, 0, &cf, 0, 0);
  if (!(_DWORD)v4)
    *a3 = FigCFEqual();
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t _copyThumbnailFormatDescriptionForIndex_0(uint64_t a1, int a2, CFIndex idx, _QWORD *a4)
{
  const __CFArray *Count;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v10;
  CFArrayRef v11;
  CFIndex v12;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  if (!a4)
    return 0;
  if (idx < 0)
    return 4294950306;
  Count = *(const __CFArray **)(a1 + 88);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx || !*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), idx) + 1))
    return 4294950306;
  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v9)
    return 4294954514;
  v10 = v9(FigBaseObject, *MEMORY[0x1E0CC6188], *MEMORY[0x1E0C9AE00], &theArray);
  v11 = theArray;
  if (!(_DWORD)v10)
  {
    v12 = CFArrayGetCount(theArray);
    v11 = theArray;
    if (v12 != 1)
    {
      v10 = 4294950194;
      if (!theArray)
        return v10;
      goto LABEL_14;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    v10 = 0;
    *a4 = ValueAtIndex;
    v11 = theArray;
  }
  if (v11)
LABEL_14:
    CFRelease(v11);
  return v10;
}

uint64_t _getThumbnailGeometryForIndex_1(uint64_t a1, int a2, CFIndex idx, _QWORD *a4, _QWORD *a5, _DWORD *a6)
{
  const __CFArray *Count;
  const void *v12;

  if (idx < 0)
    return 4294950306;
  Count = *(const __CFArray **)(a1 + 88);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 4294950306;
  v12 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), idx) + 1);
  if (!v12)
    return 4294950306;
  else
    return _getReferenceSequenceGeometry(v12, a4, a5, a6);
}

uint64_t _copyThumbnailBitDepthForIndex_1(uint64_t a1, int a2, CFIndex a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  CMFormatDescriptionRef desc;
  CFTypeRef cf;

  desc = 0;
  cf = 0;
  if (!a4)
    return 0;
  v5 = _copyThumbnailFormatDescriptionForIndex_0(a1, a2, a3, &desc);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else if (CMFormatDescriptionGetExtensions(desc))
  {
    v6 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&cf);
    if (!(_DWORD)v6)
    {
      *a4 = cf;
      cf = 0;
    }
  }
  else
  {
    v6 = 4294950303;
  }
  if (desc)
    CFRelease(desc);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t _copyAuxiliaryImageBitDepthForIndex_1(uint64_t a1, int a2, CFIndex a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  CMFormatDescriptionRef desc;
  CFTypeRef cf;

  desc = 0;
  cf = 0;
  if (!a4)
    return 0;
  v5 = _copyAuxiliaryImageFormatDescriptionForIndex_0(a1, a2, a3, (uint64_t)a4, &desc);
  if ((_DWORD)v5)
  {
    v6 = v5;
  }
  else if (CMFormatDescriptionGetExtensions(desc))
  {
    v6 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&cf);
    if (!(_DWORD)v6)
    {
      *a4 = cf;
      cf = 0;
    }
  }
  else
  {
    v6 = 4294950303;
  }
  if (desc)
    CFRelease(desc);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t _copyColorSpaceForIndex_2(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (a3)
    return _copySequenceReaderColor(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), a3, 0, 0, 0, 0, 0);
  else
    return 0;
}

uint64_t _getLoopCount(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  int v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, CMTimeRange *, CFTypeRef *);
  const __CFString *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFString *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **);
  unint64_t v21;
  CFTypeRef v22;
  uint64_t (*v23)(CFTypeRef, CMTimeRange *);
  int v24;
  CMTimeRange v25;
  CMTimeRange range1;
  CMTimeRange v27[2];
  CMTime v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  const __CFDictionary *v33;

  if (!a2)
    return 0;
  if (!*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(a1 + 56) = 0;
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
    v32 = 0;
    v33 = 0;
    v30 = 0;
    v31 = 0;
    v29 = 0;
    if (!v6)
    {
      v24 = FigSignalErrorAt();
      goto LABEL_32;
    }
    FigBaseObject = FigTrackReaderGetFigBaseObject();
    v8 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
    {
      v9 = v8(FigBaseObject, *MEMORY[0x1E0CC6140], 0, &v32);
      if (v9)
        goto LABEL_47;
      v10 = cmpweak_kFigTrackProperty_HasEditListBox();
      v11 = FigTrackReaderGetFigBaseObject();
      v12 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v12)
      {
        v9 = v12(v11, v10, 0, &v29);
        if (v9)
          goto LABEL_47;
        if (!FigCFEqual())
        {
          v24 = -16993;
          goto LABEL_30;
        }
        v13 = v32;
        v14 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
        if (v14)
        {
          *(_OWORD *)&v27[0].start.value = *MEMORY[0x1E0CA2E28];
          v27[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E28] + 16);
          v9 = v14(v13, v27, &v31);
          if (v9)
            goto LABEL_47;
          v15 = cmpweak_kFigEditCursorProperty_RepeatsEdits();
          v16 = FigEditCursorGetFigBaseObject();
          v17 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
          if (v17)
          {
            v9 = v17(v16, v15, 0, &v30);
            if (v9)
              goto LABEL_47;
            v18 = cmpweak_kFigTrackProperty_EditedDuration();
            v19 = FigTrackReaderGetFigBaseObject();
            v20 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v20)
            {
              v9 = v20(v19, v18, v5, &v33);
              if (v9)
                goto LABEL_47;
              memset(&v28, 0, sizeof(v28));
              CMTimeMakeFromDictionary(&v28, v33);
              if ((v28.flags & 1) == 0)
              {
                v24 = -17102;
                goto LABEL_30;
              }
              if (FigCFEqual())
              {
                v21 = 1;
LABEL_28:
                v24 = 0;
                *(_QWORD *)(a1 + 56) = v21;
                goto LABEL_30;
              }
              if ((~v28.flags & 0x11) == 0)
              {
                v21 = 0;
                goto LABEL_28;
              }
              memset(v27, 0, sizeof(v27));
              v22 = v31;
              v23 = *(uint64_t (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
              if (v23)
              {
                v9 = v23(v22, v27);
                if (!v9)
                {
                  range1 = v27[0];
                  v25 = v27[1];
                  if (CMTimeRangeEqual(&range1, &v25))
                  {
                    memset(&range1, 0, 24);
                    v25.start = v27[1].duration;
                    CMTimeConvertScale(&range1.start, &v25.start, v28.timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                    v21 = 0;
                    if (!((unint64_t)(v28.value / range1.start.value) >> 32))
                      v21 = vcvtpd_s64_f64((double)v28.value / (double)range1.start.value);
                    goto LABEL_28;
                  }
                  v24 = -16994;
LABEL_30:
                  if (v29)
                    CFRelease(v29);
LABEL_32:
                  if (v33)
                    CFRelease(v33);
                  if (v31)
                    CFRelease(v31);
                  if (v32)
                    CFRelease(v32);
                  if (v30)
                    CFRelease(v30);
                  *(_BYTE *)(a1 + 48) = 1;
                  *(_BYTE *)(a1 + 49) = v24 == 0;
                  if (!v24)
                    goto LABEL_4;
                  return 4294950303;
                }
LABEL_47:
                v24 = v9;
                goto LABEL_30;
              }
            }
          }
        }
      }
    }
    v24 = -12782;
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 49))
    return 4294950303;
LABEL_4:
  result = 0;
  *a2 = *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t _createSequenceReader(uint64_t a1, uint64_t a2, int a3, int a4, _QWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD *, int *);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, CFTypeRef *);
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, _QWORD *);
  uint64_t v18;
  CFTypeRef cf;
  int v21;

  v21 = 0;
  cf = 0;
  if ((int)a2 < 1)
  {
    v10 = 0;
    v18 = 4294950306;
    goto LABEL_20;
  }
  v10 = malloc_type_calloc(1uLL, 0x78uLL, 0x106004017483417uLL);
  if (!v10)
  {
    v18 = 4294950305;
    goto LABEL_20;
  }
  v11 = FigSimpleMutexCreate();
  v10[4] = v11;
  if (!v11)
  {
    v18 = 4294950305;
    goto LABEL_18;
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v12)
    goto LABEL_17;
  v13 = v12(a1, a2, v10 + 1, &v21);
  if (!(_DWORD)v13)
  {
    if (a3 == 1635088502 && a4 && v21 == 1885954932)
    {
      v21 = 1635088502;
    }
    else if (v21 != a3)
    {
      v18 = 4294950306;
      goto LABEL_18;
    }
    v14 = v10[1];
    v15 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v15)
      goto LABEL_17;
    v13 = v15(v14, &cf);
    if (!(_DWORD)v13)
    {
      v16 = cf;
      v17 = *(uint64_t (**)(CFTypeRef, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v17)
      {
        v13 = v17(v16, v10 + 2);
        if (!(_DWORD)v13)
        {
          *(_DWORD *)v10 = v21;
          v10[3] = 0;
          v10[5] = 0;
          *((_DWORD *)v10 + 12) = a2;
          *((_BYTE *)v10 + 52) = 0;
          *((_BYTE *)v10 + 60) = 0;
          v18 = 0;
          if (a5)
          {
            *a5 = v10;
            v10 = 0;
          }
          goto LABEL_18;
        }
        goto LABEL_25;
      }
LABEL_17:
      v18 = 4294954514;
      goto LABEL_18;
    }
  }
LABEL_25:
  v18 = v13;
LABEL_18:
  if (cf)
    CFRelease(cf);
LABEL_20:
  _releaseSequenceReader(v10);
  return v18;
}

uint64_t _copyReferenceSequenceReaders(const __CFAllocator *a1, uint64_t a2, const __CFArray *a3, int a4, int a5, __CFArray **a6)
{
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *value;

  Mutable = CFArrayCreateMutable(a1, 0, 0);
  if (!Mutable)
    return 4294950305;
  v12 = Mutable;
  if (CFArrayGetCount(a3) >= 1)
  {
    v13 = 0;
    while (1)
    {
      value = 0;
      if (!FigCFArrayGetInt32AtIndex())
      {
        v15 = 4294950306;
        goto LABEL_11;
      }
      v14 = _createSequenceReader(a2, 0, a4, a5, &value);
      if ((_DWORD)v14)
        break;
      CFArrayAppendValue(v12, value);
      if (++v13 >= CFArrayGetCount(a3))
        goto LABEL_7;
    }
    v15 = v14;
    goto LABEL_11;
  }
LABEL_7:
  v15 = 0;
  if (!a6)
  {
LABEL_11:
    CFRelease(v12);
    return v15;
  }
  *a6 = v12;
  return v15;
}

void _releaseSequenceReader(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (a1)
  {
    FigSimpleMutexDestroy();
    a1[4] = 0;
    v2 = (const void *)a1[2];
    if (v2)
    {
      CFRelease(v2);
      a1[2] = 0;
    }
    v3 = (const void *)a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    v4 = (const void *)a1[5];
    if (v4)
    {
      CFRelease(v4);
      a1[5] = 0;
    }
    v5 = (const void *)a1[9];
    if (v5)
    {
      CFRelease(v5);
      a1[9] = 0;
    }
    v6 = (const void *)a1[10];
    if (v6)
    {
      CFRelease(v6);
      a1[10] = 0;
    }
    v7 = (const void *)a1[11];
    if (v7)
    {
      CFRelease(v7);
      a1[11] = 0;
    }
    v8 = (const void *)a1[12];
    if (v8)
    {
      CFRelease(v8);
      a1[12] = 0;
    }
    v9 = (const void *)a1[13];
    if (v9)
      CFRelease(v9);
    free(a1);
  }
}

CFNumberRef _getImageCountForSequence(uint64_t a1, _QWORD *a2)
{
  CFAllocatorRef v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, _QWORD, CFAllocatorRef, CFNumberRef *);
  CFNumberRef result;
  uint64_t v7;
  CFNumberRef number;

  number = 0;
  if (!a2)
    return 0;
  v7 = 0;
  v3 = CFGetAllocator(*(CFTypeRef *)(a1 + 8));
  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v5 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v5)
  {
    v5(FigBaseObject, *MEMORY[0x1E0CC6250], v3, &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v7);
      result = number;
      *a2 = v7;
      if (!result)
        return result;
      CFRelease(result);
      return 0;
    }
  }
  return (CFNumberRef)4294950194;
}

uint64_t _copyFormatDescriptionForTrackReader(uint64_t a1, _QWORD *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFArrayRef *);
  uint64_t v5;
  CFArrayRef v6;
  CFIndex Count;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  if (!a2)
    return 0;
  if (a1)
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject();
    v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
    if (!v4)
      return 4294954514;
    v5 = v4(FigBaseObject, *MEMORY[0x1E0CC6188], *MEMORY[0x1E0C9AE00], &theArray);
    v6 = theArray;
    if (!(_DWORD)v5)
    {
      Count = CFArrayGetCount(theArray);
      v6 = theArray;
      if (Count != 1)
      {
        v5 = 4294950194;
        if (!theArray)
          return v5;
        goto LABEL_10;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (ValueAtIndex)
        ValueAtIndex = CFRetain(ValueAtIndex);
      v5 = 0;
      *a2 = ValueAtIndex;
      v6 = theArray;
    }
    if (!v6)
      return v5;
LABEL_10:
    CFRelease(v6);
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t _getImageGeometryFromTrackReader(CFTypeRef cf, _QWORD *a2)
{
  CFAllocatorRef v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *);
  uint64_t v7;
  CFAllocatorRef v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *);
  uint64_t v11;
  uint64_t v12;
  double width;
  double CropRectFromCLAPDict;
  double v15;
  double v16;
  double height;
  CGSize size;
  CFDictionaryRef dict;

  size.height = 0.0;
  dict = 0;
  size.width = 0.0;
  if (!a2 || !cf)
    goto LABEL_25;
  v4 = CFGetAllocator(cf);
  FigBaseObject = FigTrackReaderGetFigBaseObject();
  v6 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v6)
  {
LABEL_15:
    v12 = 4294954514;
    goto LABEL_22;
  }
  v7 = v6(FigBaseObject, *MEMORY[0x1E0CC6138], v4, &dict);
  if ((_DWORD)v7)
  {
LABEL_26:
    v12 = v7;
    goto LABEL_22;
  }
  if (!CGSizeMakeWithDictionaryRepresentation(dict, &size) || size.width <= 0.0 || size.height <= 0.0)
  {
LABEL_25:
    v7 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (dict)
  {
    CFRelease(dict);
    dict = 0;
  }
  v8 = CFGetAllocator(cf);
  v9 = FigTrackReaderGetFigBaseObject();
  v10 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v10)
    goto LABEL_15;
  v11 = v10(v9, *MEMORY[0x1E0CC6120], v8, &dict);
  if (!(_DWORD)v11 || (v12 = v11, (_DWORD)v11 == -12783))
  {
    width = size.width;
    if (dict)
    {
      CropRectFromCLAPDict = CMPhotoGetCropRectFromCLAPDict(dict, size.width, size.height);
      width = size.width;
    }
    else
    {
      height = size.height;
      CropRectFromCLAPDict = 0.0;
      v15 = 0.0;
      v16 = size.width;
    }
    if (CropRectFromCLAPDict >= 0.0 && CropRectFromCLAPDict + v16 <= width && v15 >= 0.0 && v15 + height <= size.height)
    {
      v12 = 0;
      *a2 = vcvtad_u64_f64(CropRectFromCLAPDict);
      a2[1] = vcvtad_u64_f64(v15);
      a2[2] = vcvtad_u64_f64(v16);
      a2[3] = vcvtad_u64_f64(height);
      goto LABEL_22;
    }
    goto LABEL_25;
  }
LABEL_22:
  if (dict)
    CFRelease(dict);
  return v12;
}

uint64_t _checkForUnsupportedKeys(const __CFDictionary *a1, const void **a2)
{
  uint64_t result;

  result = CFDictionaryContainsKey(a1, *a2);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t _moveSampleCursorToIndexAndCreateSampleBuffer(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CMSampleBufferRef *a4)
{
  uint64_t v8;
  uint64_t SampleBufferFromSampleCursor;
  uint64_t v10;

  v8 = pthread_mutex_lock(*(pthread_mutex_t **)(a3 + 32));
  if ((_DWORD)v8)
    return v8;
  SampleBufferFromSampleCursor = _moveCursorToPosition(*(_QWORD *)(a3 + 16), (uint64_t *)(a3 + 24), a2);
  if (!(_DWORD)SampleBufferFromSampleCursor)
    SampleBufferFromSampleCursor = _createSampleBufferFromSampleCursor(a1, *(_QWORD *)(a3 + 16), a4);
  v10 = SampleBufferFromSampleCursor;
  pthread_mutex_unlock(*(pthread_mutex_t **)(a3 + 32));
  return v10;
}

uint64_t ___createImageForIndex_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = _createAuxiliaryImageForIndex_1(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(const __CFDictionary **)(a1 + 72), 2, (CGImageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _decodePixelBufferForImageIndex(const __CFAllocator *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, int a7, CGImageRef *a8)
{
  __int128 v13;
  uint64_t ImageCountForSequence;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, __int128 *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, __int128 *);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _OWORD *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t *);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  const void *v35;
  uint64_t ImageGeometryFromTrackReader;
  CFTypeRef v37;
  CFTypeRef v38;
  int v39;
  FourCharCode MediaSubType;
  const void **v41;
  uint64_t v42;
  __CFDictionary *MutableCopy;
  __CFDictionary *v44;
  const void *v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  CFTypeRef *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  const __CFDictionary *Extension;
  const __CFArray *v54;
  const __CFArray *ValueAtIndex;
  CFTypeID v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  CFTypeID v60;
  unsigned int v61;
  uint64_t appended;
  CFMutableArrayRef Mutable;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t FigBaseObject;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, __int128 *);
  _BOOL4 v70;
  const __CFBoolean *v71;
  CFTypeID v72;
  int v73;
  CFTypeID v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int Int64AtIndex;
  uint64_t v82;
  CFNumberRef Size;
  CFNumberRef v84;
  uint64_t v85;
  __CVBuffer *v86;
  const void *v87;
  CFTypeRef v88;
  __int128 v89;
  unsigned int v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t PixelFormatType;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  CFTypeRef v100;
  char v101;
  double v102;
  double v103;
  uint64_t CVPixelBufferNotBackedByIOSurface;
  CFTypeRef v105;
  uint64_t WrappedPixelBufferForType;
  const __CFAllocator *v107;
  _DWORD *v108;
  const __CFAllocator *v112;
  void *v113;
  void *v114;
  void *key;
  uint64_t v116;
  uint64_t v117;
  CFTypeRef *v118;
  uint64_t v119;
  CFTypeRef v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  _BYTE v125[48];
  __int128 v126;
  CFTypeRef cf[2];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  CFTypeRef v132;
  __int128 v133;
  __int128 v134;
  CFTypeRef v135[3];
  const __CFDictionary *v136;
  CFTypeRef v137;
  CFTypeRef v138;
  _OWORD v139[2];
  __int128 value;
  __int128 v141;
  unint64_t v142;
  uint64_t v143;
  void *v144;
  __int128 v145;
  __int128 v146;

  v137 = 0;
  v138 = 0;
  v136 = 0;
  v13 = 0uLL;
  v134 = 0u;
  *(_OWORD *)v135 = 0u;
  v133 = 0u;
  v132 = 0;
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    v13 = 0uLL;
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      kdebug_trace();
      v13 = 0uLL;
    }
  }
  v131 = 0;
  v129 = v13;
  v130 = v13;
  *(_OWORD *)cf = v13;
  v128 = v13;
  *(_OWORD *)&v125[32] = v13;
  v126 = v13;
  *(_OWORD *)v125 = v13;
  *(_OWORD *)&v125[16] = v13;
  v124 = v13;
  v122 = 0;
  v123 = 0;
  v112 = a1;
  v119 = a3;
  if (*(_BYTE *)(a5 + 61))
    goto LABEL_43;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v144 = 0;
  *(_QWORD *)&v145 = 0;
  *(_QWORD *)&value = 0;
  *(_QWORD *)&v139[0] = 0;
  *(_WORD *)(a5 + 61) = 1;
  ImageCountForSequence = (uint64_t)_getImageCountForSequence(a5, &v144);
  if ((_DWORD)ImageCountForSequence)
    goto LABEL_258;
  v15 = *(_QWORD *)(a5 + 8);
  v16 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v16)
    goto LABEL_33;
  ImageCountForSequence = v16(v15, &v145);
  if ((_DWORD)ImageCountForSequence)
  {
LABEL_258:
    v34 = ImageCountForSequence;
    goto LABEL_34;
  }
  v17 = v145;
  v18 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v18)
  {
LABEL_33:
    v34 = 4294954514;
    goto LABEL_34;
  }
  ImageCountForSequence = v18(v17, &value);
  if ((_DWORD)ImageCountForSequence)
    goto LABEL_258;
  v143 = -1;
  v19 = value;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v20)
    goto LABEL_33;
  ImageCountForSequence = v20(v19, -1, &v143);
  if ((_DWORD)ImageCountForSequence)
    goto LABEL_258;
  if (v143)
  {
    ImageCountForSequence = FigSignalErrorAt();
    goto LABEL_258;
  }
  v21 = value;
  v22 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v22)
    goto LABEL_33;
  v23 = v22(v21, v139);
  if ((_DWORD)v23)
  {
LABEL_256:
    v34 = v23;
    goto LABEL_34;
  }
  if ((uint64_t)v144 >= 2)
  {
    v24 = 0;
    while (1)
    {
      v25 = value;
      v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v26)
      {
LABEL_151:
        v34 = 4294954514;
        goto LABEL_34;
      }
      v23 = v26(v25, 1, &v143);
      if ((_DWORD)v23)
        goto LABEL_256;
      if (v143 != 1)
        goto LABEL_252;
      v27 = *(_QWORD *)&v139[0];
      v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
      if (!v28)
        goto LABEL_151;
      v23 = v28(v27, 1, &v143);
      if ((_DWORD)v23)
        goto LABEL_256;
      if (v143 != 1)
      {
LABEL_252:
        v34 = 4294950194;
        goto LABEL_34;
      }
      v29 = value;
      v30 = *(_QWORD *)&v139[0];
      v31 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      v32 = v30 ? *(_QWORD *)(CMBaseObjectGetVTable() + 16) : 0;
      if (v31 == v32)
      {
        v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 32);
        if (v33)
        {
          if (v33(v29, v30))
            break;
        }
      }
      if (++v24 >= (uint64_t)v144 - 1)
        goto LABEL_32;
    }
    v23 = FigSignalErrorAt();
    goto LABEL_256;
  }
LABEL_32:
  v34 = 0;
  *(_BYTE *)(a5 + 62) = 1;
LABEL_34:
  if ((_QWORD)v145)
    CFRelease((CFTypeRef)v145);
  if ((_QWORD)value)
    CFRelease((CFTypeRef)value);
  if (*(_QWORD *)&v139[0])
    CFRelease(*(CFTypeRef *)&v139[0]);
  if ((_DWORD)v34)
    goto LABEL_206;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
LABEL_43:
  if (!*(_BYTE *)(a5 + 62))
  {
    ImageGeometryFromTrackReader = FigSignalErrorAt();
    goto LABEL_233;
  }
  v35 = *(const void **)(a5 + 8);
  v145 = 0u;
  v146 = 0u;
  ImageGeometryFromTrackReader = _getImageGeometryFromTrackReader(v35, &v145);
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_233;
  ImageGeometryFromTrackReader = CMPhotoDecompressionContainerParseOptions((uint64_t)a2, a6, v146, *((uint64_t *)&v146 + 1), (uint64_t)&v124);
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_233;
  if (!BYTE8(v124))
  {
    DWORD1(v124) = 0;
    goto LABEL_51;
  }
  if (CMPhotoHEIFUtilitiesSupportsOutputPixelFormat(SDWORD1(v124)))
  {
LABEL_51:
    if (!v125[5])
    {
      *(_OWORD *)&v125[8] = v145;
      *(_OWORD *)&v125[24] = v146;
      goto LABEL_55;
    }
    value = v145;
    v141 = v146;
    v139[0] = *(_OWORD *)&v125[8];
    v139[1] = *(_OWORD *)&v125[24];
    ImageGeometryFromTrackReader = CMPhotoApplyCropCMPhotoRectToRect(&value, (unint64_t *)v139);
    if (!(_DWORD)ImageGeometryFromTrackReader)
    {
      *(_OWORD *)&v125[8] = value;
      *(_OWORD *)&v125[24] = v141;
LABEL_55:
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(*(unint64_t *)&v125[24], *(unint64_t *)&v125[32], *(unint64_t *)&v125[40], 0, 0, v126, 0, &v122, 0, 0);
      goto LABEL_56;
    }
LABEL_233:
    v34 = ImageGeometryFromTrackReader;
    goto LABEL_206;
  }
  ImageGeometryFromTrackReader = FigSignalErrorAt();
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_233;
LABEL_56:
  ImageGeometryFromTrackReader = CMPhotoDecompressionSessionCopyScaler(a2[2], &v138);
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_233;
  ImageGeometryFromTrackReader = CMPhotoDecompressionSessionCopySurfacePool(a2[2], &v137);
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_233;
  v38 = v137;
  v37 = v138;
  *(_QWORD *)&value = 0;
  *(_QWORD *)&v139[0] = 0;
  v144 = 0;
  *(_QWORD *)&v145 = 0;
  v39 = _copyFormatDescriptionForTrackReader(*(_QWORD *)(a5 + 8), &v145);
  if (v39)
    MediaSubType = 0;
  else
    MediaSubType = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)v145);
  if ((_QWORD)v145)
    CFRelease((CFTypeRef)v145);
  v41 = (const void **)MEMORY[0x1E0C9AE50];
  if (v39)
  {
    v44 = 0;
    v34 = 4294950194;
    goto LABEL_237;
  }
  v42 = _copyFormatDescriptionForTrackReader(*(_QWORD *)(a5 + 8), &value);
  if ((_DWORD)v42
    || (v42 = _copySequenceReaderColor(a2[5], a5, (_QWORD *)&v133 + 1, &v134, (_QWORD *)&v134 + 1, v135, &v135[1], (_DWORD *)&v135[1] + 1), (_DWORD)v42))
  {
    v34 = v42;
    v44 = 0;
LABEL_237:
    v47 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    goto LABEL_239;
  }
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v44 = MutableCopy;
  if (!MutableCopy)
  {
    v34 = 4294950305;
    goto LABEL_237;
  }
  v45 = *v41;
  CFDictionarySetValue(MutableCopy, CFSTR("UseVTDecompression"), v45);
  v46 = DWORD2(v126);
  v47 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (DWORD2(v126) == 1)
  {
    CFDictionarySetValue(v44, CFSTR("PreferSoftwareCodec"), v45);
    v46 = DWORD2(v126);
  }
  if (v46 == 2)
    CFDictionarySetValue(v44, CFSTR("RequireHardwareCodec"), v45);
  if (DWORD1(v124) && CMPhotoPixelFormatIsPackedYUV(SDWORD1(v124)))
    CFDictionaryAddValue(v44, CFSTR("AllowPackedBuffers"), v45);
  CFDictionarySetValue(v44, CFSTR("SyncDecode"), (const void *)*MEMORY[0x1E0C9AE40]);
  v48 = CMPhotoDecompressionSessionCopySequenceCodecPool(a2[2], &v144);
  if ((_DWORD)v48)
  {
    v34 = v48;
  }
  else
  {
    v34 = CMPhotoDecompressionPluginCreate((const void *)a2[5], v38, v37, v144, MediaSubType, (const void *)a2[2], value, 0, *(int *)(a5 + 48)+ ((unint64_t)(a2[62] + *(int *)(a5 + 48) + (a2[62] + *(int *)(a5 + 48)) * (a2[62] + *(int *)(a5 + 48))) >> 1), v44, (uint64_t)_decoder_plugin_callback_simple, (uint64_t)&v133, v139);
    if (!(_DWORD)v34)
    {
      v49 = *(CFTypeRef **)&v139[0];
      *(_QWORD *)&v139[0] = 0;
      goto LABEL_76;
    }
  }
LABEL_239:
  if (*((_QWORD *)&v133 + 1))
  {
    CFRelease(*((CFTypeRef *)&v133 + 1));
    *((_QWORD *)&v133 + 1) = 0;
  }
  if ((_QWORD)v134)
  {
    CFRelease((CFTypeRef)v134);
    *(_QWORD *)&v134 = 0;
  }
  if (*((_QWORD *)&v134 + 1))
  {
    CFRelease(*((CFTypeRef *)&v134 + 1));
    *((_QWORD *)&v134 + 1) = 0;
  }
  if (v135[0])
  {
    CFRelease(v135[0]);
    v135[0] = 0;
  }
  if (*(_QWORD *)&v139[0])
    CFRelease(*(CFTypeRef *)&v139[0]);
  v49 = 0;
LABEL_76:
  if (v144)
    CFRelease(v144);
  if (v44)
    CFRelease(v44);
  if ((_QWORD)value)
    CFRelease((CFTypeRef)value);
  if ((_DWORD)v34)
    goto LABEL_228;
  v50 = CMPhotoDecompressionPluginCopyAttachments((uint64_t)v49);
  if ((_DWORD)v50)
  {
LABEL_231:
    v34 = v50;
    goto LABEL_228;
  }
  v121 = -1;
  CMPhotoCFDictionaryGetInt64IfPresent(v136, CFSTR("LastDecodedFrameNumber"), &v121);
  v118 = v49;
  if (!v119)
  {
    v51 = 0;
    v52 = 0;
    *(_BYTE *)(a5 + 60) = 1;
    goto LABEL_98;
  }
  if (*(_BYTE *)(a5 + 60) && v121 + 1 == v119)
  {
    v51 = 0;
    v52 = 0;
LABEL_98:
    v57 = -1;
LABEL_164:
    if (*v47 == 1)
    {
      kdebug_trace();
      if (*v47 == 1)
        kdebug_trace();
    }
    goto LABEL_167;
  }
  if (*v47 == 1)
    kdebug_trace();
  *(_BYTE *)(a5 + 60) = 0;
  *(_QWORD *)&v145 = 0;
  if (!*(_BYTE *)(a5 + 52))
  {
    *(_WORD *)(a5 + 52) = 1;
    *(_DWORD *)(a5 + 56) = -1;
    v34 = _copyFormatDescriptionForTrackReader(*(_QWORD *)(a5 + 8), &v145);
    if ((_DWORD)v34)
      goto LABEL_104;
    Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension((CMFormatDescriptionRef)v145, (CFStringRef)*MEMORY[0x1E0CA2240]);
    if (Extension)
    {
      v54 = (const __CFArray *)CFDictionaryGetValue(Extension, CFSTR("ccst"));
      if (!v54)
        goto LABEL_104;
      ValueAtIndex = v54;
      v56 = CFGetTypeID(v54);
      if (v56 == CFArrayGetTypeID())
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
        if (!ValueAtIndex)
        {
LABEL_104:
          if ((_QWORD)v145)
            CFRelease((CFTypeRef)v145);
          if ((_DWORD)v34)
            goto LABEL_227;
          goto LABEL_107;
        }
      }
      else
      {
        v60 = CFGetTypeID(ValueAtIndex);
        if (v60 != CFDataGetTypeID())
          goto LABEL_104;
      }
      if (CFDataGetLength(ValueAtIndex) != 8)
        goto LABEL_104;
      v61 = bswap32(*((_DWORD *)CFDataGetBytePtr(ValueAtIndex) + 1));
      v58 = v61 >> 31;
      v59 = (v61 >> 26) & 0xF;
    }
    else
    {
      LOBYTE(v58) = 0;
      v59 = -1;
    }
    *(_BYTE *)(a5 + 53) = v58;
    *(_DWORD *)(a5 + 56) = v59;
    goto LABEL_104;
  }
LABEL_107:
  v143 = 0;
  if (!*(_QWORD *)(a5 + 40))
  {
    appended = (uint64_t)_getImageCountForSequence(a5, &v143);
    if ((_DWORD)appended)
    {
LABEL_226:
      v34 = appended;
      goto LABEL_227;
    }
    v117 = *MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a5 + 40) = Mutable;
    if (!Mutable)
    {
      v34 = 4294950305;
      goto LABEL_227;
    }
    if (v143 >= 1)
    {
      v64 = 0;
      v65 = 0;
      v66 = 0;
      v116 = *MEMORY[0x1E0CC5E40];
      v114 = (void *)*MEMORY[0x1E0CA2618];
      key = (void *)*MEMORY[0x1E0CA25C8];
      v113 = (void *)*MEMORY[0x1E0CA2620];
      while (1)
      {
        *(_QWORD *)&v145 = 0;
        appended = pthread_mutex_lock(*(pthread_mutex_t **)(a5 + 32));
        if ((_DWORD)appended)
          goto LABEL_226;
        v67 = _moveCursorToPosition(*(_QWORD *)(a5 + 16), (uint64_t *)(a5 + 24), v64);
        if ((_DWORD)v67)
          break;
        FigBaseObject = FigSampleCursorGetFigBaseObject();
        v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
        if (!v69)
        {
          v34 = 4294954514;
LABEL_127:
          pthread_mutex_unlock(*(pthread_mutex_t **)(a5 + 32));
          v70 = 0;
          v73 = -1;
          goto LABEL_129;
        }
        v67 = v69(FigBaseObject, v116, v117, &v145);
        if ((_DWORD)v67)
          break;
        v67 = pthread_mutex_unlock(*(pthread_mutex_t **)(a5 + 32));
        if ((_DWORD)v67)
          break;
        *(_QWORD *)&value = 0;
        *(_QWORD *)&v139[0] = 0;
        v144 = 0;
        if ((_QWORD)v145)
        {
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v145, key, (const void **)&value);
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v145, v114, (const void **)v139);
          CFDictionaryGetValueIfPresent((CFDictionaryRef)v145, v113, (const void **)&v144);
        }
        v70 = FigCFEqual() == 0;
        v71 = (const __CFBoolean *)value;
        if ((_QWORD)value && (v72 = CFGetTypeID((CFTypeRef)value), v72 == CFBooleanGetTypeID()))
          v73 = CMPhotoCFBooleanGetValue(v71) != 0;
        else
          v73 = -1;
        v34 = *(_QWORD *)&v139[0];
        if (*(_QWORD *)&v139[0])
        {
          v74 = CFGetTypeID(*(CFTypeRef *)&v139[0]);
          if (v74 == CFBooleanGetTypeID())
          {
            v75 = CMPhotoCFBooleanGetValue((const __CFBoolean *)v34);
            v34 = 0;
            v76 = v75 != 0;
            goto LABEL_130;
          }
          v34 = 0;
        }
LABEL_129:
        v76 = -1;
LABEL_130:
        if ((_QWORD)v145)
          CFRelease((CFTypeRef)v145);
        if ((_DWORD)v34)
          goto LABEL_227;
        if (v64)
          v77 = 1;
        else
          v77 = v70;
        if (v77 != 1)
        {
          appended = FigSignalErrorAt();
          if ((_DWORD)appended)
            goto LABEL_226;
          goto LABEL_153;
        }
        v78 = v64;
        v79 = v64;
        if (!v70)
        {
          if (!*(_BYTE *)(a5 + 53) || *(_DWORD *)(a5 + 56) != 1)
            goto LABEL_144;
          if (v73 == 1)
          {
            v78 = v66;
            v79 = v65;
            goto LABEL_145;
          }
          if (!v73)
          {
            v78 = v66;
            v79 = v65;
            if (v76 == 1)
            {
              v34 = 4294950194;
              goto LABEL_227;
            }
          }
          else
          {
LABEL_144:
            v78 = v66;
            v79 = v65;
          }
        }
LABEL_145:
        appended = FigCFArrayAppendInt64();
        if ((_DWORD)appended)
          goto LABEL_226;
        ++v64;
        v65 = v79;
        v66 = v78;
        if (v64 >= v143)
          goto LABEL_153;
      }
      v34 = v67;
      goto LABEL_127;
    }
  }
LABEL_153:
  v142 = 0;
  Int64AtIndex = FigCFArrayGetInt64AtIndex();
  v47 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!Int64AtIndex)
  {
    v34 = 4294950194;
    goto LABEL_227;
  }
  v51 = HIDWORD(v142);
  v57 = (int)v142;
  v52 = (int)v142 != v119 && (v121 != (int)v142 || v121 == -1);
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    goto LABEL_164;
  }
LABEL_167:
  if (v52)
  {
    if (v57 < 0)
    {
      if (v51 < v119)
      {
        do
        {
          v82 = _decodeReferencePixelBuffer(v112, (uint64_t)v118, v51, a5);
          if ((_DWORD)v82)
            goto LABEL_170;
        }
        while (v119 != ++v51);
      }
      *(_BYTE *)(a5 + 60) = 1;
    }
    else
    {
      v82 = _decodeReferencePixelBuffer(v112, (uint64_t)v118, v57, a5);
      if ((_DWORD)v82)
      {
LABEL_170:
        v34 = v82;
LABEL_227:
        v49 = v118;
        goto LABEL_228;
      }
    }
  }
  v49 = v118;
  v50 = CMPhotoDecompressionPluginDecode((uint64_t)v118);
  if ((_DWORD)v50)
    goto LABEL_231;
  Size = CMPhotoCFNumberCreateSize(v119);
  if (!Size)
  {
    v34 = 4294950305;
LABEL_228:
    if (v49)
      CMPhotoDecompressionPluginDispose(v49);
    goto LABEL_206;
  }
  v84 = Size;
  v34 = CMPhotoDecompressionPluginSetAttachment((uint64_t)v118);
  CFRelease(v84);
  if ((_DWORD)v34)
    goto LABEL_228;
  CMPhotoDecompressionPluginDispose(v118);
  if (*v47 == 1)
  {
    kdebug_trace();
    if (*v47 == 1)
      kdebug_trace();
  }
  v34 = v133;
  if (!(_DWORD)v133)
  {
    v85 = (uint64_t)v138;
    v120 = v137;
    v86 = (__CVBuffer *)v132;
    v87 = (const void *)*((_QWORD *)&v133 + 1);
    v89 = v134;
    v88 = v135[0];
    v90 = v135[1];
    v91 = HIDWORD(v135[1]);
    v93 = v122;
    v92 = v123;
    *(_QWORD *)&value = 0;
    CMPhotoRemoveColorInformationGuessedBy((__CVBuffer *)v132);
    CMPhotoAddColorInformationToPixelBufferAccordingToFormat(v87, (const void *)v89, *((const void **)&v89 + 1), v88, v86);
    CMPhotoAddChromaLocationToPixelBufferAccordingToFormat(v90, v91, v86);
    PixelFormatType = CVPixelBufferGetPixelFormatType(v86);
    v95 = PixelFormatType;
    if (BYTE8(v124))
      v96 = DWORD1(v124);
    else
      v96 = PixelFormatType;
    v97 = CMPhotoPixelBufferHasUnhandledIdentityMatrix(v86);
    v99 = *(_QWORD *)&v125[24];
    v98 = *(_QWORD *)&v125[32];
    v100 = cf[1];
    v145 = *(_OWORD *)&v125[8];
    v146 = *(_OWORD *)&v125[24];
    v101 = CMPhotoPixelBufferMemcpySupportedForBuffer(v86, &v145, 0, 0);
    if (!v100 && (_DWORD)v96 == (_DWORD)v95 && !v97 && v93 == v99 && v92 == v98 && (v101 & 1) != 0)
    {
      if (BYTE9(v128))
        CVPixelBufferNotBackedByIOSurface = CMPhotoCreateCVPixelBufferNotBackedByIOSurface(*MEMORY[0x1E0C9AE00], v95, *(size_t *)&v125[24], *(size_t *)&v125[32], 0, 0, 0, 0, (CVPixelBufferRef *)&value);
      else
        CVPixelBufferNotBackedByIOSurface = CMPhotoSurfacePoolCreatePixelBuffer(v120, v95, *(size_t *)&v125[24], *(size_t *)&v125[32], 1, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&value);
      v34 = CVPixelBufferNotBackedByIOSurface;
      v107 = v112;
      if ((_DWORD)CVPixelBufferNotBackedByIOSurface)
        goto LABEL_204;
      v145 = *(_OWORD *)&v125[8];
      v146 = *(_OWORD *)&v125[24];
      WrappedPixelBufferForType = CMPhotoPixelBufferCopyCropRectToOffset(v86, 1, (uint64_t *)&v145, (__CVBuffer *)value, 1, 0, 0, 0);
      if ((_DWORD)WrappedPixelBufferForType)
      {
LABEL_203:
        v34 = WrappedPixelBufferForType;
        goto LABEL_204;
      }
      CMPhotoPropagateColorPropertiesFromSourceBuffer(v86, (__CVBuffer *)value);
    }
    else
    {
      v105 = cf[1];
      if (cf[1])
        v105 = CFRetain(cf[1]);
      *(_QWORD *)&value = v105;
      WrappedPixelBufferForType = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(v85, v86, 0, BYTE9(v128) == 0, 1, v96, 0, 0, (double)*(unint64_t *)&v125[8], (double)*(unint64_t *)&v125[16], (double)*(unint64_t *)&v125[24], (double)*(unint64_t *)&v125[32], (double)v93, (double)v92, v102, v103, 1u, 0, BYTE1(v124),
                                    SBYTE2(v126),
                                    SBYTE3(v126),
                                    SBYTE4(v126),
                                    (__CVBuffer **)&value);
      v107 = v112;
      if ((_DWORD)WrappedPixelBufferForType)
        goto LABEL_203;
    }
    if (a8)
    {
      WrappedPixelBufferForType = CMPhotoCreateWrappedPixelBufferForType(v107, (CVPixelBufferRef)value, BYTE8(v128), a7, a8);
      goto LABEL_203;
    }
    v34 = 0;
LABEL_204:
    if ((_QWORD)value)
      CFRelease((CFTypeRef)value);
  }
LABEL_206:
  if (*((_QWORD *)&v133 + 1))
    CFRelease(*((CFTypeRef *)&v133 + 1));
  v108 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if ((_QWORD)v134)
    CFRelease((CFTypeRef)v134);
  if (*((_QWORD *)&v134 + 1))
    CFRelease(*((CFTypeRef *)&v134 + 1));
  if (v135[0])
    CFRelease(v135[0]);
  if (v132)
    CFRelease(v132);
  if (v138)
    CFRelease(v138);
  if (v137)
    CFRelease(v137);
  if (v136)
    CFRelease(v136);
  if (*v108 == 1)
  {
    kdebug_trace();
    if (*v108 == 1)
      kdebug_trace();
  }
  return v34;
}

uint64_t _moveCursorToPosition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t *);
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a2;
  v10 = 0;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v7)
    return 4294954514;
  v8 = a3 - v6;
  result = v7(a1, v8, &v10);
  if (!(_DWORD)result)
  {
    if (v10 == v8)
    {
      result = 0;
      *a2 = a3;
    }
    else
    {
      return 4294950194;
    }
  }
  return result;
}

uint64_t _createSampleBufferFromSampleCursor(const __CFAllocator *a1, uint64_t a2, CMSampleBufferRef *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t *, size_t *, CFTypeRef *, _QWORD);
  uint64_t v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *);
  uint64_t (*v10)(uint64_t, CMTime *);
  uint64_t (*v11)(uint64_t, CMSampleTimingInfo *);
  uint64_t (*v12)(uint64_t, const opaqueCMFormatDescription **);
  CFTypeRef v13;
  size_t v14;
  uint64_t v15;
  uint64_t (*v16)(CFTypeRef, size_t, uint64_t, CMBlockBufferRef *, uint64_t *);
  const __CFArray *SampleAttachmentsArray;
  void *ValueAtIndex;
  uint64_t v19;
  uint64_t v21;
  size_t sampleSizeArray;
  CFDictionaryRef theDict;
  uint64_t v24;
  CMSampleBufferRef sbuf;
  CMBlockBufferRef dataBuffer;
  CMSampleTimingInfo sampleTimingArray;
  CFTypeRef v28;
  const opaqueCMFormatDescription *v29;

  v28 = 0;
  v29 = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  sbuf = 0;
  dataBuffer = 0;
  theDict = 0;
  v24 = 0;
  v21 = 0;
  sampleSizeArray = 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t *, size_t *, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 144);
  if (!v6)
    goto LABEL_21;
  v7 = v6(a2, &v24, &sampleSizeArray, &v28, 0);
  if ((_DWORD)v7)
    goto LABEL_34;
  if (!v28)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_34;
  }
  FigBaseObject = FigSampleCursorGetFigBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
  if (!v9)
  {
LABEL_21:
    v19 = 4294954514;
    goto LABEL_22;
  }
  v7 = v9(FigBaseObject, *MEMORY[0x1E0CC5E40], *MEMORY[0x1E0C9AE00], &theDict);
  if ((_DWORD)v7)
  {
LABEL_34:
    v19 = v7;
    goto LABEL_22;
  }
  sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v10 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v10)
    goto LABEL_21;
  v7 = v10(a2, &sampleTimingArray.presentationTimeStamp);
  if ((_DWORD)v7)
    goto LABEL_34;
  v11 = *(uint64_t (**)(uint64_t, CMSampleTimingInfo *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v11)
    goto LABEL_21;
  v7 = v11(a2, &sampleTimingArray);
  if ((_DWORD)v7)
    goto LABEL_34;
  v12 = *(uint64_t (**)(uint64_t, const opaqueCMFormatDescription **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 160);
  if (!v12)
    goto LABEL_21;
  v7 = v12(a2, &v29);
  if ((_DWORD)v7)
    goto LABEL_34;
  v13 = v28;
  v14 = sampleSizeArray;
  v15 = v24;
  v16 = *(uint64_t (**)(CFTypeRef, size_t, uint64_t, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
  if (!v16)
    goto LABEL_21;
  v7 = v16(v13, v14, v15, &dataBuffer, &v21);
  if ((_DWORD)v7)
    goto LABEL_34;
  v7 = CMSampleBufferCreate(a1, dataBuffer, 1u, 0, 0, v29, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sbuf);
  if ((_DWORD)v7)
    goto LABEL_34;
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex && theDict)
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_appendAttributesToDictionary, ValueAtIndex);
    v19 = 0;
    if (a3)
    {
      *a3 = sbuf;
      sbuf = 0;
    }
  }
  else
  {
    v19 = 4294950194;
  }
LABEL_22:
  if (theDict)
    CFRelease(theDict);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (dataBuffer)
    CFRelease(dataBuffer);
  if (sbuf)
    CFRelease(sbuf);
  return v19;
}

void _appendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (theDict)
    CFDictionarySetValue(theDict, key, value);
}

uint64_t _decodeReferencePixelBuffer(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t SampleBuffer;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  SampleBuffer = _moveSampleCursorToIndexAndCreateSampleBuffer(a1, a3, a4, (CMSampleBufferRef *)&cf);
  if (!(_DWORD)SampleBuffer)
    SampleBuffer = CMPhotoDecompressionPluginDecode(a2);
  v6 = SampleBuffer;
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t _copySequenceReaderColor(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v16;
  FourCharCode MediaSubType;
  const opaqueCMFormatDescription *v18;
  _BOOL4 v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t v24;
  _QWORD v26[6];
  CMFormatDescriptionRef desc;
  CFMutableArrayRef v28;

  desc = 0;
  if (!a2)
    return 4294950306;
  if (*(_BYTE *)(a2 + 64))
    goto LABEL_17;
  v16 = _copyFormatDescriptionForTrackReader(*(_QWORD *)(a2 + 8), &desc);
  if (!(_DWORD)v16)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
    v18 = desc;
    if (MediaSubType == 1635135537)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 0x40000000;
      v26[2] = ___copySequenceReaderColor_block_invoke;
      v26[3] = &__block_descriptor_tmp_17;
      v26[4] = a1;
      v26[5] = a2;
      v28 = 0;
      v16 = CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(desc, (uint64_t)v26, 0, &v28);
      if ((_DWORD)v16)
        goto LABEL_40;
      if (desc)
        CFRelease(desc);
      v18 = v28;
      desc = v28;
    }
    v19 = *(_DWORD *)a2 == 1635088502;
    v28 = 0;
    if (CMPhotoCopyImageBitDepthFromFormatDescription(v18, &v28) != -12783)
    {
      if (!v28)
      {
        v19 = 0;
        goto LABEL_15;
      }
      v19 = CFArrayGetCount(v28) == 1;
    }
    if (v28)
      CFRelease(v28);
LABEL_15:
    v16 = CMPhotoDecompressionContainerCopyColorInfoFromFormatDescription(desc, 0, 0, v19, 1, 0, (_QWORD *)(a2 + 72), (CFTypeRef *)(a2 + 80), (CFTypeRef *)(a2 + 88), (CFTypeRef *)(a2 + 96), (int *)(a2 + 112), (int *)(a2 + 116), 0);
    if (!(_DWORD)v16)
    {
      *(_BYTE *)(a2 + 64) = 1;
LABEL_17:
      if (a3)
      {
        v20 = *(CFTypeRef *)(a2 + 72);
        if (v20)
          v20 = CFRetain(v20);
        *a3 = v20;
      }
      if (a4)
      {
        v21 = *(CFTypeRef *)(a2 + 80);
        if (v21)
          v21 = CFRetain(v21);
        *a4 = v21;
      }
      if (a5)
      {
        v22 = *(CFTypeRef *)(a2 + 88);
        if (v22)
          v22 = CFRetain(v22);
        *a5 = v22;
      }
      if (a6)
      {
        v23 = *(CFTypeRef *)(a2 + 96);
        if (v23)
          v23 = CFRetain(v23);
        *a6 = v23;
      }
      if (a7)
        *a7 = *(_DWORD *)(a2 + 112);
      v24 = 0;
      if (a8)
        *a8 = *(_DWORD *)(a2 + 116);
      goto LABEL_37;
    }
  }
LABEL_40:
  v24 = v16;
LABEL_37:
  if (desc)
    CFRelease(desc);
  return v24;
}

void _decoder_plugin_callback_simple(int a1, int a2, CFTypeRef cf, _DWORD *a4, _QWORD *a5)
{
  CFTypeRef v6;

  *a4 = a2;
  if (!a2 && a5)
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    *a5 = v6;
  }
}

uint64_t ___copySequenceReaderColor_block_invoke(uint64_t a1, CMSampleBufferRef *a2)
{
  return _moveSampleCursorToIndexAndCreateSampleBuffer(*(const __CFAllocator **)(a1 + 32), 0, *(_QWORD *)(a1 + 40), a2);
}

uint64_t _getReferenceSequenceGeometry(const void *a1, _QWORD *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  result = _getImageGeometryFromTrackReader(a1, &v8);
  if (!(_DWORD)result)
  {
    if (a4)
      *a4 = 1;
    if (a2)
      *a2 = v9;
    if (a3)
      *a3 = *((_QWORD *)&v9 + 1);
  }
  return result;
}

uint64_t _getAuxiliaryTypeInfoForIndex(uint64_t a1, CFIndex idx, _DWORD *a3, const __CFString **a4)
{
  const __CFArray *Count;
  _QWORD *ValueAtIndex;
  uint64_t v10;
  const __CFDictionary *Extensions;
  const __CFString *v12;
  UniChar *v13;
  __CFString *MutableCopy;
  uint64_t v15;
  CFDataRef data;
  void *value;
  CMFormatDescriptionRef desc;
  CFRange v20;
  CFRange v21;

  desc = 0;
  Count = *(const __CFArray **)(a1 + 96);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_24;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), idx);
  v10 = _copyFormatDescriptionForTrackReader(ValueAtIndex[1], &desc);
  if ((_DWORD)v10)
  {
LABEL_24:
    v15 = v10;
LABEL_17:
    v12 = 0;
    goto LABEL_18;
  }
  Extensions = CMFormatDescriptionGetExtensions(desc);
  if (!Extensions
    || (value = 0,
        LODWORD(Extensions) = CFDictionaryGetValueIfPresent(Extensions, (const void *)*MEMORY[0x1E0CA2240], (const void **)&value), !(_DWORD)Extensions)|| (data = 0, LODWORD(Extensions) = CFDictionaryGetValueIfPresent((CFDictionaryRef)value, CFSTR("auxi"), (const void **)&data), !(_DWORD)Extensions))
  {
    v12 = 0;
    if (!a3)
    {
LABEL_15:
      v15 = 0;
      if (!a4)
        goto LABEL_18;
      *a4 = v12;
      goto LABEL_17;
    }
LABEL_14:
    *a3 = (_DWORD)Extensions;
    goto LABEL_15;
  }
  v12 = CFStringCreateFromExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE10], data, 0x8000100u);
  if (v12)
  {
    v13 = (UniChar *)malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
    *v13 = 49;
    v20.location = CFStringGetLength(v12) - 1;
    v20.length = 1;
    CFStringGetCharacters(v12, v20, v13);
    if (!*v13)
    {
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v12);
      v21.location = CFStringGetLength(v12) - 1;
      v21.length = 1;
      CFStringDelete(MutableCopy, v21);
      CFRelease(v12);
      v12 = MutableCopy;
    }
    free(v13);
    LODWORD(Extensions) = CMPhotoGetAuxiliaryImageTypeFromURN();
    if (!a3)
      goto LABEL_15;
    goto LABEL_14;
  }
  v15 = FigSignalErrorAt();
LABEL_18:
  if (desc)
    CFRelease(desc);
  if (v12)
    CFRelease(v12);
  return v15;
}

uint64_t _createOutputBufferAttributesForFormatDescription(uint64_t a1, CMVideoFormatDescriptionRef videoDesc, const __CFDictionary *a3, CFMutableDictionaryRef *a4)
{
  uint64_t Dimensions;
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if (!videoDesc)
    return 4294950306;
  Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(videoDesc);
  v24 = 0;
  v25 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v8 = CMPhotoDecompressionContainerParseOptions(a1, a3, (int)Dimensions, Dimensions >> 32, (uint64_t)v15);
  if ((_DWORD)v8)
    return v8;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(*((unint64_t *)&v16 + 1), v17, *((unint64_t *)&v17 + 1), 0, 0, v18, 0, &v24, 0, 0);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v10 = Mutable;
  v11 = CMPhotoCFDictionarySetSize(Mutable, *MEMORY[0x1E0CA90E0], v24);
  if ((_DWORD)v11 || (v11 = CMPhotoCFDictionarySetSize(v10, *MEMORY[0x1E0CA8FD8], v25), (_DWORD)v11))
  {
    v13 = v11;
LABEL_10:
    CFRelease(v10);
    return v13;
  }
  v12 = CMPhotoCFDictionarySetSize(v10, *MEMORY[0x1E0CA8F68], 16);
  v13 = v12;
  if (!a4 || (_DWORD)v12)
    goto LABEL_10;
  *a4 = v10;
  return v13;
}

uint64_t TileIterator_reset_0()
{
  return 0;
}

uint64_t TileIterator_copyTileSampleBuffer_0(uint64_t a1, CMSampleBufferRef *a2)
{
  return _createSampleBufferFromSampleCursor((const __CFAllocator *)*MEMORY[0x1E0C9AE00], **(_QWORD **)(a1 + 56), a2);
}

uint64_t _createDescriptionOfFrameForIndex(uint64_t a1, uint64_t a2, uint64_t a3, const __CFAllocator *a4, int a5, __CFDictionary **a6, __CFDictionary **a7)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, CMTime *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, CFIndex *);
  uint64_t FigBaseObject;
  uint64_t (*v23)(uint64_t, _QWORD, _QWORD, const __CFDictionary **);
  const __CFAllocator *v24;
  CFDictionaryRef v25;
  CFDictionaryRef v26;
  uint64_t v27;
  __CFDictionary *v28;
  uint64_t ImageGeometryFromTrackReader;
  __CFDictionary *v30;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v32;
  uint64_t v33;
  uint64_t v34;
  CFStringRef v35;
  CFStringRef v36;
  CFStringRef v37;
  FourCharCode MediaSubType;
  __CFArray *v39;
  __CFArray *v40;
  CFMutableArrayRef v41;
  CFMutableArrayRef v42;
  __CFDictionary **v43;
  __CFDictionary **v44;
  uint64_t ThumbnailCountForIndex_2;
  uint64_t v47;
  CFIndex v48;
  CFIndex v49;
  const CFArrayCallBacks *v50;
  const void *ValueAtIndex;
  uint64_t v52;
  CFTypeRef v53;
  uint64_t AuxiliaryImageCountForIndex_2;
  CFIndex value;
  CFIndex v56;
  const void *v57;
  uint64_t AuxiliaryTypeInfoForIndex;
  __CFDictionary *v59;
  CFIndex capacity[2];
  __int128 v63;
  CFTypeRef v64;
  CMFormatDescriptionRef desc;
  CGColorSpaceRef space;
  CFTypeRef v67;
  CFTypeRef v68;
  CFTypeRef v69;
  CFTypeRef cf;
  unsigned __int8 v71;
  CMTime time;
  const __CFDictionary *v73;
  CMTime v74;
  CGSize v75;

  v69 = 0;
  cf = 0;
  v67 = 0;
  v68 = 0;
  desc = 0;
  space = 0;
  v64 = 0;
  Mutable = CFDictionaryCreateMutable(a4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v27 = 4294950305;
    goto LABEL_64;
  }
  v13 = Mutable;
  v73 = 0;
  memset(&v74, 0, sizeof(v74));
  capacity[1] = 0;
  *(_QWORD *)&v63 = 0;
  capacity[0] = 0;
  v14 = pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 32));
  if ((_DWORD)v14)
  {
    v27 = v14;
    goto LABEL_23;
  }
  v17 = _moveCursorToPosition(*(_QWORD *)(a2 + 16), (uint64_t *)(a2 + 24), a3);
  if ((_DWORD)v17)
    goto LABEL_144;
  v18 = *(_QWORD *)(a2 + 16);
  v19 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v19)
    goto LABEL_21;
  v17 = v19(v18, &v74);
  if ((_DWORD)v17)
  {
LABEL_144:
    v27 = v17;
    goto LABEL_22;
  }
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(uint64_t (**)(uint64_t, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v21)
  {
LABEL_21:
    v27 = 4294954514;
LABEL_22:
    pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 32));
LABEL_23:
    v26 = 0;
    v25 = 0;
    goto LABEL_24;
  }
  v17 = v21(v20, capacity);
  if ((_DWORD)v17)
    goto LABEL_144;
  FigBaseObject = FigSampleCursorGetFigBaseObject();
  v23 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v23)
    goto LABEL_21;
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = v23(FigBaseObject, *MEMORY[0x1E0CC5E40], *MEMORY[0x1E0C9AE00], &v73);
  if ((_DWORD)v17)
    goto LABEL_144;
  v17 = pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 32));
  if ((_DWORD)v17)
    goto LABEL_144;
  *(_OWORD *)&time.value = *(_OWORD *)capacity;
  time.epoch = v63;
  v25 = CMTimeCopyAsDictionary(&time, v24);
  if (v25)
    CFDictionarySetValue(v13, CFSTR("SequenceSampleDuration"), v25);
  time = v74;
  v26 = CMTimeCopyAsDictionary(&time, v24);
  if (v26)
    CFDictionarySetValue(v13, CFSTR("SequenceSamplePTS"), v26);
  if (v73)
  {
    LOBYTE(time.value) = 0;
    if (CMPhotoCFDictionaryGetBooleanIfPresent(v73, (const void *)*MEMORY[0x1E0CA25C8], &time))
      CMPhotoCFDictionarySetBoolean(v13, CFSTR("SequenceSampleDependsOnOthers"), LOBYTE(time.value));
    v71 = 0;
    if (CMPhotoCFDictionaryGetBooleanIfPresent(v73, (const void *)*MEMORY[0x1E0CA2618], &v71))
      CMPhotoCFDictionarySetBoolean(v13, CFSTR("SequenceSampleIsDependedOnByOthers"), v71);
    v27 = 0;
LABEL_24:
    if (v73)
      CFRelease(v73);
    if (v25)
      goto LABEL_27;
    goto LABEL_28;
  }
  v27 = 0;
  if (v25)
LABEL_27:
    CFRelease(v25);
LABEL_28:
  if (v26)
    CFRelease(v26);
  if ((_DWORD)v27)
  {
    v42 = 0;
    v41 = 0;
    v40 = 0;
    v39 = 0;
    v28 = 0;
    goto LABEL_53;
  }
  if (a3)
  {
    v28 = 0;
    goto LABEL_47;
  }
  v28 = CFDictionaryCreateMutable(a4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v28)
  {
    v42 = 0;
    v41 = 0;
    v40 = 0;
    v39 = 0;
    v27 = 4294950305;
    goto LABEL_53;
  }
  *(_OWORD *)capacity = 0u;
  v63 = 0u;
  ImageGeometryFromTrackReader = _getImageGeometryFromTrackReader(*(CFTypeRef *)(a2 + 8), capacity);
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_148;
  v30 = v28;
  v75.width = (double)(unint64_t)v63;
  v75.height = (double)*((unint64_t *)&v63 + 1);
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v75);
  if (!DictionaryRepresentation)
  {
    v27 = 4294950305;
LABEL_152:
    v28 = v30;
    goto LABEL_153;
  }
  v32 = DictionaryRepresentation;
  CFDictionarySetValue(v30, CFSTR("Dimensions"), DictionaryRepresentation);
  CFRelease(v32);
  v33 = _copyFormatDescriptionForTrackReader(*(_QWORD *)(a2 + 8), &desc);
  if ((_DWORD)v33)
  {
    v27 = v33;
    goto LABEL_152;
  }
  v74.value = 0;
  v34 = CMPhotoCopyImageBitDepthFromFormatDescription(desc, (CFMutableArrayRef *)&v74);
  v28 = v30;
  if ((_DWORD)v34 != -12783)
  {
    v27 = v34;
    if ((_DWORD)v34)
    {
LABEL_153:
      v42 = 0;
      v41 = 0;
      v40 = 0;
      v39 = 0;
      goto LABEL_53;
    }
    CFDictionarySetValue(v30, CFSTR("BitDepth"), (const void *)v74.value);
    if (v74.value)
      CFRelease((CFTypeRef)v74.value);
  }
  ImageGeometryFromTrackReader = _copySequenceReaderColor(*(_QWORD *)(a1 + 40), a2, &space, 0, 0, 0, 0, 0);
  if ((_DWORD)ImageGeometryFromTrackReader)
    goto LABEL_148;
  v35 = CGColorSpaceCopyName(space);
  if (v35)
  {
    v36 = v35;
    CFDictionarySetValue(v30, CFSTR("NamedColorSpace"), v35);
    v37 = v36;
    v28 = v30;
    CFRelease(v37);
  }
  else
  {
    v28 = v30;
    if (space)
      CFDictionarySetValue(v30, CFSTR("ColorSpace"), space);
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  ImageGeometryFromTrackReader = CMPhotoCFDictionarySetInt32(v28, CFSTR("CodecType"), MediaSubType);
  if ((_DWORD)ImageGeometryFromTrackReader)
  {
LABEL_148:
    v27 = ImageGeometryFromTrackReader;
    goto LABEL_153;
  }
LABEL_47:
  if (a5)
  {
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v44 = a7;
    v43 = a6;
    if (!a7)
      goto LABEL_50;
    goto LABEL_49;
  }
  capacity[0] = 0;
  ThumbnailCountForIndex_2 = _getThumbnailCountForIndex_2(a1, v15, v16, capacity);
  if ((_DWORD)ThumbnailCountForIndex_2)
  {
    v27 = ThumbnailCountForIndex_2;
    v39 = 0;
    v40 = 0;
LABEL_141:
    v41 = 0;
    v42 = 0;
    goto LABEL_52;
  }
  v59 = v28;
  v48 = capacity[0];
  if (capacity[0] >= 1)
  {
    v49 = 0;
    v40 = 0;
    v39 = 0;
    v50 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      if (!v39)
      {
        v39 = CFArrayCreateMutable(a4, v48, v50);
        if (!v39)
          break;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v49);
      if (v68)
      {
        CFRelease(v68);
        v68 = 0;
      }
      if (v67)
      {
        CFRelease(v67);
        v67 = 0;
      }
      v52 = _createDescriptionOfFrameForIndex(a1, ValueAtIndex, a3, a4, 1, &v67, &v68);
      if ((_DWORD)v52)
      {
        v27 = v52;
        goto LABEL_140;
      }
      if (v68)
        CFArrayAppendValue(v39, v68);
      if (!a3)
      {
        v53 = v67;
        if (v67)
        {
          if (!v40)
          {
            v40 = CFArrayCreateMutable(a4, capacity[0], v50);
            if (!v40)
              break;
            v53 = v67;
          }
          CFArrayAppendValue(v40, v53);
        }
      }
      ++v49;
      v48 = capacity[0];
      if (v49 >= capacity[0])
        goto LABEL_100;
    }
    v27 = 4294950305;
LABEL_140:
    v28 = v59;
    goto LABEL_141;
  }
  v39 = 0;
  v40 = 0;
LABEL_100:
  v74.value = 0;
  AuxiliaryImageCountForIndex_2 = _getAuxiliaryImageCountForIndex_2(a1, v48, v47, &v74.value);
  if ((_DWORD)AuxiliaryImageCountForIndex_2)
  {
    v27 = AuxiliaryImageCountForIndex_2;
    v41 = 0;
    v42 = 0;
    v28 = v59;
    goto LABEL_52;
  }
  value = v74.value;
  if (v74.value < 1)
  {
    v41 = 0;
    v42 = 0;
LABEL_124:
    if (v39)
      CFDictionarySetValue(v13, CFSTR("ThumbnailImages"), v39);
    v44 = a7;
    v43 = a6;
    if (v41)
      CFDictionarySetValue(v13, CFSTR("AuxiliaryImages"), v41);
    if (v40)
      CFDictionarySetValue(v59, CFSTR("ThumbnailImages"), v40);
    if (v42)
    {
      v28 = v59;
      CFDictionarySetValue(v59, CFSTR("AuxiliaryImages"), v42);
      if (!a7)
        goto LABEL_50;
    }
    else
    {
      v28 = v59;
      if (!a7)
      {
LABEL_50:
        v27 = 0;
        if (v43)
        {
          *v43 = v28;
          v28 = 0;
        }
        goto LABEL_52;
      }
    }
LABEL_49:
    *v44 = v13;
    v13 = 0;
    goto LABEL_50;
  }
  v56 = 0;
  v42 = 0;
  v41 = 0;
  while (1)
  {
    LODWORD(time.value) = 0;
    if (!v41)
    {
      v41 = CFArrayCreateMutable(a4, value, MEMORY[0x1E0C9B378]);
      if (!v41)
        break;
    }
    v57 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v56);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v69)
    {
      CFRelease(v69);
      v69 = 0;
    }
    AuxiliaryTypeInfoForIndex = _createDescriptionOfFrameForIndex(a1, v57, a3, a4, 2, &v69, &cf);
    if ((_DWORD)AuxiliaryTypeInfoForIndex)
    {
LABEL_137:
      v27 = AuxiliaryTypeInfoForIndex;
      goto LABEL_143;
    }
    if (cf)
      CFArrayAppendValue(v41, cf);
    if (!a3 && v69)
    {
      if (!v42)
      {
        v42 = CFArrayCreateMutable(a4, v74.value, MEMORY[0x1E0C9B378]);
        if (!v42)
          break;
      }
      AuxiliaryTypeInfoForIndex = _getAuxiliaryTypeInfoForIndex(a1, v56, &time, (const __CFString **)&v64);
      if ((_DWORD)AuxiliaryTypeInfoForIndex)
        goto LABEL_137;
      AuxiliaryTypeInfoForIndex = CMPhotoCFDictionarySetInt((__CFDictionary *)v69, CFSTR("AuxiliaryType"), time.value);
      if ((_DWORD)AuxiliaryTypeInfoForIndex)
        goto LABEL_137;
      if (v64)
        CFDictionarySetValue((CFMutableDictionaryRef)v69, CFSTR("AuxiliaryTypeURN"), v64);
      CFArrayAppendValue(v42, v69);
    }
    ++v56;
    value = v74.value;
    if (v56 >= v74.value)
      goto LABEL_124;
  }
  v27 = 4294950305;
LABEL_143:
  v28 = v59;
LABEL_52:
  if (v13)
LABEL_53:
    CFRelease(v13);
  if (v28)
    CFRelease(v28);
  if (v39)
    CFRelease(v39);
  if (v40)
    CFRelease(v40);
  if (v41)
    CFRelease(v41);
  if (v42)
    CFRelease(v42);
LABEL_64:
  if (cf)
    CFRelease(cf);
  if (v69)
    CFRelease(v69);
  if (v68)
    CFRelease(v68);
  if (v67)
    CFRelease(v67);
  if (space)
    CFRelease(space);
  if (desc)
    CFRelease(desc);
  if (v64)
    CFRelease(v64);
  return v27;
}

uint64_t CMPhotoDecompressionPluginSetAttachment(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 64);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionPluginCopyAttachments(uint64_t a1)
{
  uint64_t (*v1)(void);

  if (!a1)
    return 4294950306;
  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 72);
  if (v1)
    return v1();
  else
    return 4294950302;
}

uint64_t CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription(const opaqueCMFormatDescription *a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  FourCharCode MediaSubType;
  FourCharCode v8;
  const opaqueCMFormatDescription *v9;
  const opaqueCMFormatDescription *v10;
  uint64_t InfoFromFormatDescription;
  _QWORD v13[5];
  CMVideoFormatDescriptionRef v14;
  unsigned __int8 v15;
  int v16;
  __int16 v17;

  v17 = 0;
  v16 = 0;
  v15 = 1;
  v3 = 4294950306;
  if (!a1)
    return v3;
  if (!a3)
    return v3;
  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  v3 = 0;
  if (MediaSubType == 1953325424)
    return v3;
  v8 = MediaSubType;
  if (MediaSubType == 1768912492)
    return v3;
  if (a2 && MediaSubType == 1635135537)
  {
    v14 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = __CMPhotoDecompressionUtilityGetNativePixelFormatFromFormatDescription_block_invoke;
    v13[3] = &__block_descriptor_tmp_15;
    v13[4] = a2;
    v3 = CMPhotoDecompressionContainerCreateCorrectedAV1FormatDescription(a1, (uint64_t)v13, 0, &v14);
    if ((_DWORD)v3)
      return v3;
    v9 = v14;
    goto LABEL_11;
  }
  v10 = (const opaqueCMFormatDescription *)CFRetain(a1);
  v9 = v10;
  if (v8 != 1936484717)
  {
LABEL_11:
    InfoFromFormatDescription = CMPhotoGetInfoFromFormatDescription(v9, 0, 0, 0, &v15, &v16, (char *)&v17 + 1, (char *)&v17, 0, 0, 0, 0);
    if (!(_DWORD)InfoFromFormatDescription)
    {
      if (v16 == 6 || v17 == HIBYTE(v17))
        InfoFromFormatDescription = CMPhotoGetYUVPixelFormatForParameters(v16, HIBYTE(v17), v15, 0, 0, 0, 1, a3);
      else
        InfoFromFormatDescription = FigSignalErrorAt();
    }
    goto LABEL_15;
  }
  InfoFromFormatDescription = CMPhotoGetSlimPixelFormatFromFormatDescription(v10, a3);
LABEL_15:
  v3 = InfoFromFormatDescription;
  if (v9)
    CFRelease(v9);
  return v3;
}

uint64_t CMPhotoReleaseHardwareResources()
{
  uint64_t v0;

  CMPhotoSurfacePoolFlushCaches(0, 1);
  CMPhotoScaleAndRotateSessionDiscardCaches(0, v0);
  return CMPhotoCodecSessionPoolFlush(0, 3);
}

uint64_t CMPhotoComputePSNRHVSForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, uint64_t a3, unsigned int a4, double *a5, CVPixelBufferRef *a6)
{
  const __CFAllocator *v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v15;
  OSType PixelFormatType;
  int v17;
  size_t v18;
  size_t v19;
  long double *v20;
  long double *v21;
  double v22;
  int v23;
  uint64_t v24;
  size_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  OSType v30;
  int BytesPerPixelForPixelFormat;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  size_t v39;
  void *BaseAddress;
  size_t v41;
  void *v42;
  double v43;
  double v44;
  int v45;
  CVPixelBufferRef *v46;
  int v47;
  size_t v48;
  size_t v49;
  void *v50;
  size_t v51;
  void *v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  int v61;
  int v62;
  size_t v63;
  double v64;
  double v65;
  char v66;
  unint64_t v67;
  size_t v68;
  void *v69;
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  int v80;
  int v81;
  size_t v82;
  uint64_t v83;
  CVPixelBufferRef v84;
  size_t BytesPerRowOfPlane;
  float *v86;
  float *v87;
  float *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  size_t v92;
  float *v93;
  float *v94;
  float *v95;
  float v96;
  int v97;
  void *BaseAddressOfPlane;
  void *v100;
  size_t v101;
  size_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  size_t v107;
  CVPixelBufferRef *v108;
  const __CFAllocator *v109;
  __CFDictionary *v110;
  __CFDictionary *v111;
  double *v112;
  int BitDepthForPixelFormat;
  __CVBuffer *v114;
  __CVBuffer *pixelBuffer;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = CFDictionaryCreateMutable(v11, 0, v12, v13);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v15);
  v114 = a2;
  pixelBuffer = a1;
  if (CMPhotoPixelBufferHasCLAP(a1) || CMPhotoPixelBufferHasCLAP(a2) || !a4)
  {
    FigSignalErrorAt();
    v83 = 0;
    goto LABEL_90;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2)
    || (v17 = CVPixelBufferGetPixelFormatType(a2),
        v118 = 0,
        v119 = 0,
        CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v118, &v119),
        v116 = 0,
        v117 = 0,
        CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v116, &v117),
        v118 != v116)
    || v119 != v117)
  {
    v83 = FigSignalErrorAt();
LABEL_90:
    v21 = 0;
    v38 = 0;
    v97 = 0;
    v22 = 0.0;
    if (v15)
      goto LABEL_78;
    goto LABEL_79;
  }
  v109 = v11;
  v111 = Mutable;
  v112 = a5;
  if (v118 / a4 <= 1)
    v18 = 1;
  else
    v18 = v118 / a4;
  if (v119 / a4 <= 1)
    v19 = 1;
  else
    v19 = v119 / a4;
  v20 = (long double *)malloc_type_calloc((v19 * v18), 8uLL, 0x100004000313F17uLL);
  v21 = v20;
  v22 = 0.0;
  if (!v20)
  {
    v38 = 0;
    v97 = 0;
    v83 = 4294950305;
LABEL_66:
    Mutable = v111;
    a5 = v112;
    if (!v15)
      goto LABEL_79;
LABEL_78:
    CFRelease(v15);
    goto LABEL_79;
  }
  v110 = v15;
  v23 = 0;
  do
  {
    v24 = 0;
    v25 = v18;
    do
    {
      v20[(v23 * v18 + v24++)] = 0.0;
      --v25;
    }
    while (v25);
    ++v23;
  }
  while (v23 != (_DWORD)v19);
  v108 = a6;
  v26 = CMPhotoPixelFormatContainsYCbCr(v17);
  v27 = CMPhotoPixelFormatContainsRGB(v17);
  v28 = CMPhotoPixelFormatContainsGrayScale(v17);
  v29 = CVPixelBufferGetPixelFormatType(a2);
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v29);
  v30 = CVPixelBufferGetPixelFormatType(a2);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v30);
  v32 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  if ((_DWORD)v32)
  {
    v83 = v32;
    v38 = 0;
    v97 = 0;
LABEL_77:
    Mutable = v111;
    a5 = v112;
    v15 = v110;
    if (!v110)
      goto LABEL_79;
    goto LABEL_78;
  }
  v33 = CVPixelBufferLockBaseAddress(a2, 0);
  if ((_DWORD)v33)
  {
    v83 = v33;
    v38 = 0;
    goto LABEL_76;
  }
  if (v28)
  {
    if ((v17 - 1278226736) <= 6 && ((1 << (v17 - 48)) & 0x45) != 0)
    {
      v34 = 16 - BitDepthForPixelFormat;
      goto LABEL_31;
    }
    if (v17 == 1278226488)
    {
      v34 = 0;
LABEL_31:
      v36 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      if (!(_DWORD)v36)
      {
        v37 = CVPixelBufferLockBaseAddress(a2, 0);
        v38 = 1;
        if (!(_DWORD)v37)
        {
          v39 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
          BaseAddress = CVPixelBufferGetBaseAddress(a2);
          v41 = CVPixelBufferGetBytesPerRow(pixelBuffer) / BytesPerPixelForPixelFormat;
          v42 = CVPixelBufferGetBaseAddress(pixelBuffer);
          v43 = calc_psnrhvs((uint64_t)BaseAddress, v39, (uint64_t)v42, v41, BitDepthForPixelFormat, v116, v117, a4, 1, v34, (uint64_t)&csf_y, (uint64_t)v21, v18);
          v44 = log10(v43);
          v45 = 0;
          v46 = v108;
          do
          {
            v47 = 0;
            v48 = v18;
            do
            {
              v21[(v45 * v18 + v47)] = log10(v21[(v45 * v18 + v47)]) * -10.0;
              ++v47;
              --v48;
            }
            while (v48);
            ++v45;
          }
          while (v45 != (_DWORD)v19);
          v22 = v44 * -10.0;
          goto LABEL_59;
        }
        v83 = v37;
        goto LABEL_76;
      }
      goto LABEL_74;
    }
LABEL_72:
    FigSignalErrorAt();
    v83 = 0;
LABEL_75:
    v38 = 1;
LABEL_76:
    v97 = 1;
    goto LABEL_77;
  }
  if (v26)
  {
    if (v17 > 2016686639)
    {
      if (v17 != 2019963440 && v17 != 2016686640)
        goto LABEL_72;
      v35 = 6;
    }
    else
    {
      v35 = 0;
      if (v17 != 875704422 && v17 != 875704438)
        goto LABEL_72;
    }
    v66 = v35;
    v103 = v116 >> 1;
    v105 = v117 >> 1;
    v101 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) / BytesPerPixelForPixelFormat;
    v67 = 2 * BytesPerPixelForPixelFormat;
    v102 = CVPixelBufferGetBytesPerRowOfPlane(v114, 1uLL) / v67;
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v114, 0);
    v100 = CVPixelBufferGetBaseAddressOfPlane(v114, 1uLL);
    v68 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0) / BytesPerPixelForPixelFormat;
    v107 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL) / v67;
    v69 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    v70 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    v71 = a4;
    v72 = (uint64_t)v70;
    v73 = (uint64_t)v69;
    LODWORD(v69) = v71;
    v74 = calc_psnrhvs((uint64_t)BaseAddressOfPlane, v101, v73, v68, BitDepthForPixelFormat, v116, v117, v71, 1, v66, (uint64_t)&csf_y, (uint64_t)v21, v18);
    v75 = calc_psnrhvs((uint64_t)v100, v102, v72, v107, BitDepthForPixelFormat, v103, v105, (int)v69, 2, v66, (uint64_t)&csf_cb420, 0, 0);
    v76 = calc_psnrhvs((uint64_t)v100 + BytesPerPixelForPixelFormat, v102, v72 + BytesPerPixelForPixelFormat, v107, BitDepthForPixelFormat, v103, v105, (int)v69, 2, v66, (uint64_t)&csf_cr420, 0, 0);
    v77 = log10(v74);
    v78 = log10(v76);
    v79 = log10(v75);
    v80 = 0;
    v46 = v108;
    do
    {
      v81 = 0;
      v82 = v18;
      do
      {
        v21[(v80 * v18 + v81)] = log10(v21[(v80 * v18 + v81)]) * -10.0;
        ++v81;
        --v82;
      }
      while (v82);
      ++v80;
    }
    while (v80 != (_DWORD)v19);
    v64 = v78 * -10.0 + v77 * -10.0 * 8.0 + v79 * -10.0;
    v65 = 10.0;
  }
  else
  {
    if (!v27)
    {
      v36 = FigSignalErrorAt();
LABEL_74:
      v83 = v36;
      goto LABEL_75;
    }
    if (v17 != 1111970369 && v17 != 1815491698 && v17 != 1380401729)
      goto LABEL_72;
    v49 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
    v50 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    v51 = CVPixelBufferGetBytesPerRow(pixelBuffer) / BytesPerPixelForPixelFormat;
    v52 = CVPixelBufferGetBaseAddress(pixelBuffer);
    v104 = v117;
    v106 = v116;
    v53 = calc_psnrhvs((uint64_t)v50, v49, (uint64_t)v52, v51, BitDepthForPixelFormat, v116, v117, a4, 4, 0, (uint64_t)&csf_y, 0, v18);
    v54 = 1;
    if (BitDepthForPixelFormat <= 8)
    {
      v55 = 2;
    }
    else
    {
      v54 = 2;
      v55 = 4;
    }
    v56 = calc_psnrhvs((uint64_t)v50 + v54, v49, (uint64_t)v52 + v54, v51, BitDepthForPixelFormat, v106, v104, a4, 4, 0, (uint64_t)&csf_y, (uint64_t)v21, v18);
    v57 = calc_psnrhvs((uint64_t)v50 + v55, v49, (uint64_t)v52 + v55, v51, BitDepthForPixelFormat, v116, v117, a4, 4, 0, (uint64_t)&csf_y, 0, v18);
    v58 = log10(v53);
    v59 = log10(v56);
    v60 = log10(v57);
    v61 = 0;
    v46 = v108;
    do
    {
      v62 = 0;
      v63 = v18;
      do
      {
        v21[(v61 * v18 + v62)] = log10(v21[(v61 * v18 + v62)]) * -10.0;
        ++v62;
        --v63;
      }
      while (v63);
      ++v61;
    }
    while (v61 != (_DWORD)v19);
    v64 = v58 * -10.0 + v59 * -10.0 + v60 * -10.0;
    v65 = 3.0;
  }
  v22 = v64 / v65;
LABEL_59:
  v15 = v110;
  v83 = CVPixelBufferCreate(v109, v18, v19, 0x72673366u, 0, &pixelBufferOut);
  v84 = pixelBufferOut;
  if (!(_DWORD)v83)
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    v86 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
    v87 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
    v88 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
    v89 = 0;
    v90 = BytesPerRowOfPlane & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v91 = 0;
      v92 = v18;
      v93 = v86;
      v94 = v87;
      v95 = v88;
      do
      {
        v96 = v21[(v18 * v89 + v91)];
        *v93++ = v96;
        *v94++ = v96;
        *v95++ = v96;
        ++v91;
        --v92;
      }
      while (v92);
      ++v89;
      v88 = (float *)((char *)v88 + v90);
      v87 = (float *)((char *)v87 + v90);
      v86 = (float *)((char *)v86 + v90);
    }
    while (v89 != v19);
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    v84 = pixelBufferOut;
    v83 = 0;
    if (v46)
    {
      *v46 = pixelBufferOut;
      pixelBufferOut = 0;
      v38 = 1;
      v97 = 1;
      goto LABEL_66;
    }
  }
  Mutable = v111;
  a5 = v112;
  if (v84)
    CFRelease(v84);
  v38 = 1;
  v97 = 1;
  if (v110)
    goto LABEL_78;
LABEL_79:
  if (Mutable)
    CFRelease(Mutable);
  free(v21);
  if (a5)
    *a5 = v22;
  if (v97)
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  if (v38)
    CVPixelBufferUnlockBaseAddress(v114, 0);
  return v83;
}

double calc_psnrhvs(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v14;
  _BYTE *v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t i;
  float64x2_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  unint64_t j;
  int v49;
  unint64_t v50;
  int v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  unint64_t k;
  uint64_t v62;
  double v63;
  double v64;
  uint64_t v65;
  double v66;
  double v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  double v71;
  _BYTE *v72;
  double v73;
  uint64_t m;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  _DWORD *v79;
  _DWORD *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t n;
  int v84;
  double v85;
  double v86;
  double v87;
  uint64_t v88;
  int v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  _OWORD v122[2];
  _BYTE v123[512];
  _DWORD v124[64];
  _DWORD v125[64];
  uint64_t v126;

  v100 = a3;
  v14 = 0;
  v126 = *MEMORY[0x1E0C80C00];
  v15 = v123;
  v16 = (float64x2_t)vdupq_n_s64(0x3FD8DE6818051F1BuLL);
  v17 = a11;
  do
  {
    for (i = 0; i != 64; i += 16)
    {
      v19 = vmulq_f64(*(float64x2_t *)(v17 + i), v16);
      *(float64x2_t *)&v15[i] = vmulq_f64(v19, v19);
    }
    ++v14;
    v17 += 64;
    v15 += 64;
  }
  while (v14 != 8);
  v20 = ~(-1 << a5);
  if (a7 <= 7)
  {
    v21 = 0;
    v25 = (double)v20 * (double)v20;
    v32 = 0.0;
  }
  else
  {
    v99 = 0;
    v97 = 0;
    v21 = 0;
    v22 = (a6 - 7) * a9;
    v23 = a9 * (uint64_t)a2;
    v24 = a9 * (uint64_t)a4;
    v25 = (double)v20 * (double)v20;
    v106 = a9 * a8;
    v109 = v22;
    v92 = a8 * v24;
    v93 = a7 - 7;
    v105 = 2 * v106;
    v26 = 2 * v24;
    v94 = a8;
    v91 = a8 * v23;
    v27 = 2 * v23;
    v28 = (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL);
    v29 = (float64x2_t)vdupq_n_s64(0x3FF1111120000000uLL);
    v30 = a1;
    v98 = a3;
    v31 = 0.0;
    v32 = 0.0;
    v108 = v23;
    v107 = v24;
    v103 = 2 * v23;
    v104 = 2 * v24;
    v101 = v29;
    v102 = v28;
    do
    {
      v95 = v30;
      v96 = a1;
      if ((int)v109 >= 1)
      {
        v33 = 0;
        v34 = 0;
        v35 = v100;
        v36 = v30;
        v37 = v98;
        do
        {
          v114 = v34;
          v115 = v33;
          v116 = v21;
          v38 = 0;
          v39 = 0;
          v117 = 0u;
          v118 = 0u;
          v119 = 0u;
          v120 = 0u;
          v40 = 0.0;
          memset(v121, 0, sizeof(v121));
          v41 = v125;
          v112 = v36;
          v113 = a1;
          v42 = a1;
          v43 = v36;
          v110 = v37;
          v111 = v35;
          v44 = v35;
          v45 = v37;
          v46 = 0.0;
          memset(v122, 0, sizeof(v122));
          do
          {
            v47 = 0;
            for (j = 0; j != 8; ++j)
            {
              if (a5 < 9)
              {
                v49 = *(unsigned __int8 *)(v43 + v47);
                v50 = v38 + j;
                v41[j] = v49;
                v51 = *(unsigned __int8 *)(v45 + v47);
              }
              else
              {
                v49 = *(unsigned __int16 *)(v42 + 2 * v47) >> a10;
                v50 = j + 8 * v39;
                v41[j] = v49;
                v51 = *(unsigned __int16 *)(v44 + 2 * v47) >> a10;
              }
              v124[v50] = v51;
              v52 = (double)v49;
              v53 = ((j >> 1) & 6) + ((v39 >> 2) & 3);
              v46 = v46 + v52;
              v40 = v40 + (double)v51;
              *((double *)v122 + v53) = *((double *)v122 + v53) + v52;
              *((double *)v121 + v53) = *((double *)v121 + v53) + (double)v51;
              v47 += a9;
            }
            ++v39;
            v38 += 8;
            v41 += 8;
            v45 += v24;
            v44 += v26;
            v43 += v23;
            v42 += v27;
          }
          while (v39 != 8);
          v54 = 0;
          v55 = v46 * 0.015625;
          do
          {
            v122[v54] = vmulq_f64((float64x2_t)v122[v54], v28);
            v121[v54] = vmulq_f64((float64x2_t)v121[v54], v28);
            ++v54;
          }
          while (v54 != 2);
          v56 = 0;
          v57 = 0;
          v58 = v40 * 0.015625;
          v59 = 0.0;
          v60 = 0.0;
          do
          {
            for (k = 0; k != 8; ++k)
            {
              v62 = ((k >> 1) & 6) + ((v57 >> 2) & 3);
              v63 = (double)(int)v125[v56 + k];
              v60 = v60 + (v63 - v55) * (v63 - v55);
              v64 = (double)(int)v124[v56 + k];
              v59 = v59 + (v64 - v58) * (v64 - v58);
              *((double *)&v119 + v62) = *((double *)&v119 + v62)
                                       + (v63 - *((double *)v122 + v62)) * (v63 - *((double *)v122 + v62));
              *((double *)&v117 + v62) = *((double *)&v117 + v62)
                                       + (v64 - *((double *)v121 + v62)) * (v64 - *((double *)v121 + v62));
            }
            ++v57;
            v56 += 8;
          }
          while (v57 != 8);
          v65 = 0;
          v66 = v60 * 1.01587307;
          do
          {
            *(__int128 *)((char *)&v119 + v65) = (__int128)vmulq_f64(*(float64x2_t *)((char *)&v119 + v65), v29);
            *(__int128 *)((char *)&v117 + v65) = (__int128)vmulq_f64(*(float64x2_t *)((char *)&v117 + v65), v29);
            v65 += 16;
          }
          while (v65 != 32);
          if (v66 > 0.0)
            v66 = (*(double *)&v119 + *((double *)&v119 + 1) + *(double *)&v120 + *((double *)&v120 + 1)) / v66;
          v67 = v59 * 1.01587307;
          if (v59 * 1.01587307 > 0.0)
            v67 = (*(double *)&v117 + *((double *)&v117 + 1) + *(double *)&v118 + *((double *)&v118 + 1)) / v67;
          v68 = v125;
          od_bin_fdct8x8(v125, v125);
          v69 = v124;
          od_bin_fdct8x8(v124, v124);
          v70 = 0;
          v71 = 0.0;
          v72 = v123;
          v73 = 0.0;
          v23 = v108;
          v27 = v103;
          v26 = v104;
          v28 = v102;
          do
          {
            for (m = v70 == 0; m != 8; ++m)
            {
              v75 = *(double *)&v72[8 * m];
              v73 = v73 + (double)(int)v68[m] * (double)(int)v68[m] * v75;
              v71 = v71 + (double)(int)v69[m] * (double)(int)v69[m] * v75;
            }
            ++v70;
            v69 += 8;
            v68 += 8;
            v72 += 64;
          }
          while (v70 != 8);
          v76 = 0;
          v77 = sqrt(v66 * v73) * 0.03125;
          v78 = sqrt(v67 * v71) * 0.03125;
          if (v78 <= v77)
            v78 = v77;
          v79 = v124;
          v80 = v125;
          v81 = v123;
          v82 = a11;
          v24 = v107;
          v29 = v101;
          do
          {
            for (n = 0; n != 8; ++n)
            {
              v84 = v80[n] - v79[n];
              if (v84 < 0)
                v84 = v79[n] - v80[n];
              v85 = (double)v84;
              if (n | v76)
              {
                v86 = v78 / *(double *)&v81[8 * n];
                if (v86 <= v85)
                  v85 = v85 - v86;
                else
                  v85 = 0.0;
              }
              v87 = v85 * *(double *)(v82 + 8 * n);
              v32 = v32 + v87 * v87;
              v31 = v31 + v87 * v87;
            }
            ++v76;
            v79 += 8;
            v80 += 8;
            v82 += 64;
            v81 += 64;
          }
          while (v76 != 8);
          if (a12)
          {
            v31 = v31 * 0.015625 / v25;
            v88 = v115;
            *(double *)(a12 + 8 * (v115 + v99 * a13)) = v31;
            v89 = v116;
          }
          else
          {
            v89 = v116;
            v88 = v115;
          }
          v21 = v89 + 64;
          v33 = v88 + 1;
          v34 = v114 + v106;
          v37 = v110 + v106;
          v35 = v111 + v105;
          v36 = v112 + v106;
          a1 = v113 + v105;
        }
        while (v114 + v106 < v109);
      }
      v98 += v92;
      ++v99;
      v100 += 2 * v92;
      v30 = v95 + v91;
      a1 = v96 + 2 * v91;
      v97 += v94;
    }
    while (v97 < v93);
  }
  return v32 / (double)v21 / v25;
}

_DWORD *od_bin_fdct8x8(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  _DWORD *result;
  _BYTE v7[256];
  uint64_t v8;

  v4 = 0;
  v8 = *MEMORY[0x1E0C80C00];
  do
  {
    od_bin_fdct8(&v7[v4], a2);
    v4 += 32;
    ++a2;
  }
  while (v4 != 256);
  for (i = 0; i != 32; i += 4)
  {
    result = od_bin_fdct8(a1, &v7[i]);
    a1 += 8;
  }
  return result;
}

_DWORD *od_bin_fdct8(_DWORD *result, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v2 = a2[16];
  v3 = a2[32];
  v4 = a2[48];
  v5 = *a2 - a2[56];
  v6 = v4 + a2[8];
  v7 = v4 - v6 / 2;
  v8 = v2 - a2[40];
  v9 = v3 + a2[24];
  v10 = v3 - v9 / 2;
  v11 = *a2 - v5 / 2 + v9 / 2;
  v12 = v6 / 2 - v2 + v8 / 2;
  v13 = v12 - v6;
  v14 = v11 - ((13573 * v13 + 0x4000) >> 15);
  v15 = v13 + ((11585 * v14 + 0x2000) >> 14);
  v16 = v11 - (v9 + ((21895 * v12 + 0x4000) >> 15));
  v17 = v12 + ((15137 * v16 + 0x2000) >> 14);
  v18 = v8 + ((19195 * v7 + 0x4000) >> 15);
  v19 = v7 + ((11585 * v18 + 0x2000) >> 14);
  v20 = 7489 * v19 + 4096;
  v21 = v10 + v19 / 2;
  v22 = v19 - v21;
  v23 = v5 / 2 - v18 + (v20 >> 13);
  v24 = v21 + ((3227 * (v5 - v23) + 0x4000) >> 15);
  v25 = v5 - v23 - ((6393 * v24 + 0x4000) >> 15);
  v26 = v22 + ((2485 * v23 + 4096) >> 13);
  v27 = v23 - ((18205 * v26 + 0x4000) >> 15);
  *result = v14 - ((13573 * v15 + 0x4000) >> 15);
  result[1] = v25;
  result[2] = v17;
  result[3] = v27;
  result[4] = v15;
  result[5] = v26 + ((2485 * v27 + 4096) >> 13);
  result[6] = v16 - ((21895 * v17 + 0x4000) >> 15);
  result[7] = v24 + ((3227 * v25 + 0x4000) >> 15);
  return result;
}

uint64_t _NSStringFromCGRect(double a1, double a2, double a3, double a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = (void *)MEMORY[0x1E0CB3940];
  if (floor(a1) == a1)
    v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), (int)a1);
  else
    v8 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%.4f"), *(_QWORD *)&a1);
  v9 = v8;
  if (floor(a2) == a2)
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), (int)a2);
  else
    v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%.4f"), *(_QWORD *)&a2);
  v11 = v10;
  if (floor(a3) == a3)
    v12 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), (int)a3);
  else
    v12 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%.4f"), *(_QWORD *)&a3);
  v13 = v12;
  if (floor(a4) == a4)
    v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), (int)a4);
  else
    v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%.4f"), *(_QWORD *)&a4);
  return objc_msgSend(v7, "stringWithFormat:", CFSTR("(%@ %@; %@ %@)"), v9, v11, v13, v14);
}

void sub_1A8243658(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

dispatch_queue_t ___getDeferredDeallocQueue_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.tiledlayer.deferreddeallocqueue", 0);
  _gDeferredDeallocQueue = (uint64_t)result;
  return result;
}

uint64_t SlimXEncodeBlocks_C(uint64_t a1)
{
  _BYTE *v2;
  int16x8_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t v11;
  uint16x8_t *v12;
  int16x8_t *v13;
  int8x16_t v14;
  uint16x8_t v15;
  int16x8_t v16;
  uint16x8_t *v17;
  int16x8_t *v18;
  uint32x4_t v19;
  int16x8_t v20;
  uint16x8_t *v21;
  int16x8_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint64_t i;
  uint64_t j;
  uint64_t v29;
  __int8 *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int8 *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int8 *v38;
  uint64_t v39;
  char *v40;
  uint64_t k;
  uint64_t m;
  uint64_t v43;
  __int8 *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  __int8 *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  __int8 *v52;
  uint64_t v53;
  char *v54;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  __int16 v71;
  __int16 v72;
  __int32 v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  uint64_t i11;
  uint64_t i12;
  uint64_t v91;
  __int8 *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  __int8 *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  __int8 *v100;
  uint64_t v101;
  char *v102;
  __int16 v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  __int16 v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  __int16 v117;
  __int16 v118;
  __int16 v119;
  __int16 v120;
  __int16 v121;
  __int16 v122;
  uint64_t i13;
  uint64_t i14;
  uint64_t v125;
  __int8 *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  __int8 *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  __int8 *v134;
  uint64_t v135;
  char *v136;
  __int16 v137;
  __int16 v138;
  __int16 v139;
  __int16 v140;
  __int16 v141;
  __int16 v142;
  __int16 v143;
  __int16 v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  uint64_t i15;
  uint64_t i16;
  uint64_t v159;
  __int8 *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  __int8 *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  __int8 *v168;
  uint64_t v169;
  char *v170;
  uint16x8_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  __int16 v176;
  __int16 v177;
  __int16 v178;
  __int16 v179;
  __int16 v180;
  __int16 v181;
  __int16 v182;
  __int16 v183;
  __int16 v184;
  __int16 v185;
  __int16 v186;
  __int16 v187;
  __int16 v188;
  __int16 v189;
  uint64_t v190;
  int16x8_t *v191;
  unsigned int v192;
  __int16 *v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int v196;
  __int16 *v197;
  uint32x4_t v198;
  __int16 v199;
  __int16 v200;
  __int16 v201;
  __int16 v202;
  __int16 v203;
  __int16 v204;
  __int16 v205;
  __int16 v206;
  __int16 v207;
  __int16 v208;
  __int16 v209;
  __int16 v210;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  __int16 v216;
  __int16 v217;
  __int16 v218;
  uint64_t v219;
  __int16 *v220;
  char v221;
  uint64_t v222;
  char v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int16 v228;
  uint32x4_t v229;
  int16x8_t v230;
  uint16x8_t *v231;
  int16x8_t *v232;
  uint32x4_t v233;
  __int16 v234;
  __int16 v235;
  __int16 v236;
  __int16 v237;
  __int16 v238;
  __int16 v239;
  __int16 v240;
  __int16 v241;
  __int16 v242;
  __int16 v243;
  __int16 v244;
  __int16 v245;
  __int16 v246;
  __int16 v247;
  __int16 v248;
  __int16 v249;
  __int16 v250;
  __int16 v251;
  __int16 v252;
  int16x8_t v253;
  uint16x8_t *v254;
  int16x8_t *v255;
  uint32x4_t v256;
  __int16 v257;
  __int16 v258;
  __int16 v259;
  __int16 v260;
  __int16 v261;
  __int16 v262;
  __int16 v263;
  __int16 v264;
  __int16 v265;
  __int16 v266;
  __int16 v267;
  __int16 v268;
  __int16 v269;
  __int16 v270;
  __int16 v271;
  __int16 v272;
  __int16 v273;
  __int16 v274;
  __int16 v275;
  __int16 v276;
  __int16 v277;
  __int16 v278;
  __int16 v279;
  __int16 v280;
  uint64_t v281;
  unsigned int v282;
  uint64_t v283;
  int32x4_t v284;
  uint32x4_t v285;
  int32x4_t v286;
  uint32x4_t v287;
  int32x4_t v288;
  uint32x4_t v289;
  int16x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int16x4_t v293;
  int32x4_t v294;
  int16x4_t v295;
  uint64_t v296;
  int32x4_t v297;
  int32x4_t v298;
  uint32x4_t v299;
  int16x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int16x4_t v303;
  int32x4_t v304;
  int16x4_t v305;
  uint64_t v306;
  int32x4_t v307;
  int32x4_t v308;
  uint32x4_t v309;
  int16x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int16x4_t v313;
  int32x4_t v314;
  int16x4_t v315;
  uint64_t v316;
  int32x4_t v317;
  int32x4_t v318;
  uint32x4_t v319;
  int16x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int16x4_t v323;
  int32x4_t v324;
  int16x4_t v325;
  uint64_t v326;
  int32x4_t v327;
  int32x4_t v328;
  uint32x4_t v329;
  int16x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int16x4_t v333;
  int32x4_t v334;
  int16x4_t v335;
  uint64_t v336;
  int32x4_t v337;
  int32x4_t v338;
  uint32x4_t v339;
  int16x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int16x4_t v343;
  int32x4_t v344;
  int16x4_t v345;
  uint64_t v346;
  int32x4_t v347;
  int32x4_t v348;
  uint32x4_t v349;
  int16x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int16x4_t v353;
  int32x4_t v354;
  int16x4_t v355;
  uint64_t v356;
  int32x4_t v357;
  int32x4_t v358;
  uint32x4_t v359;
  int16x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int16x4_t v363;
  int32x4_t v364;
  int16x4_t v365;
  uint16x8_t v366;
  uint16x8_t v367;
  unsigned int v368;
  _WORD *v369;
  unsigned int v370;
  __int16 v372;
  uint16x8_t v373;
  uint16x8_t v374;
  unsigned int v375;
  _WORD *v376;
  int v377;
  unsigned int v378;
  __int16 v379;
  unsigned __int32 v380;
  uint16x8_t v381;
  uint16x8_t v382;
  unsigned int v383;
  _WORD *v384;
  unsigned __int16 v385;
  int v386;
  unsigned int v387;
  __int16 v388;
  unsigned __int32 v389;
  __int16 v390;
  uint16x8_t v391;
  uint16x8_t v392;
  unsigned int v393;
  _WORD *v394;
  int v395;
  unsigned int v396;
  unsigned __int32 v397;
  uint64_t v398;
  int v399;
  unsigned int v400;
  int v401;
  unsigned int v402;
  unsigned __int16 *v403;
  int v404;
  int v405;
  int v406;
  int v407;
  unsigned int v408;
  int v409;
  int v410;
  int v411;
  unint64_t *v412;
  unsigned int v413;
  uint64_t v415;
  uint64_t v416;
  int v417;
  int v418;
  uint64_t v419;
  unint64_t *v420;
  unsigned int v421;
  const __int16 *v422;
  int16x8_t v423;
  const __int16 *v424;
  int16x8_t v425;
  const __int16 *v426;
  int16x8_t v427;
  const __int16 *v428;
  int16x8_t v429;
  uint64_t v430;
  uint16x4_t *v431;
  int v432;
  int v433;
  int v434;
  unint64_t *v435;
  unint64_t *v436;
  unint64_t *v437;
  unint64_t *v438;
  unint64_t *v439;
  unint64_t *v440;
  unint64_t *v441;
  uint32x4_t v443;
  int16x8_t v444;
  uint16x8_t v445[2];
  int16x8_t v446;
  int16x8_t v447;
  uint16x8_t v448[2];
  int16x8_t v449;
  uint64_t v450;

  v450 = *MEMORY[0x1E0C80C00];
  v2 = *(_BYTE **)(a1 + 16);
  v3 = *(int16x8_t **)a1;
  v4 = *(int *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = *(int *)(a1 + 32);
  v7 = predictionPattern_0[v6];
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(v8 + 128);
  if (v9 && *(_QWORD *)(v8 + 88) + v9 - (uint64_t)v2 < 160)
    return 4294951888;
  switch((int)v6)
  {
    case 0:
      for (i = 0; i != 8; ++i)
        v444.i16[i] = v3->u8[i];
      for (j = 0; j != 8; ++j)
        v447.i16[j] = v3->u8[j + 8];
      v29 = 0;
      v30 = &v3->i8[v4];
      do
      {
        v445[0].i16[v29] = v30[v29];
        ++v29;
      }
      while (v29 != 8);
      v31 = 0;
      v32 = v30 + 8;
      do
      {
        v448[0].i16[v31] = v32[v31];
        ++v31;
      }
      while (v31 != 8);
      v33 = 0;
      v34 = &v3->i8[2 * v4];
      do
      {
        v445[1].i16[v33] = v34[v33];
        ++v33;
      }
      while (v33 != 8);
      v35 = 0;
      v36 = v34 + 8;
      do
      {
        v448[1].i16[v35] = v36[v35];
        ++v35;
      }
      while (v35 != 8);
      v37 = 0;
      v38 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v37] = v38[v37];
        ++v37;
      }
      while (v37 != 8);
      v39 = 0;
      v40 = v38 + 8;
      do
      {
        v449.i16[v39] = v40[v39];
        ++v39;
      }
      while (v39 != 8);
      goto LABEL_145;
    case 1:
      for (k = 0; k != 8; ++k)
        v444.i16[k] = v3->u8[k];
      for (m = 0; m != 8; ++m)
        v447.i16[m] = v3->u8[m + 8];
      v43 = 0;
      v44 = &v3->i8[v4];
      do
      {
        v445[0].i16[v43] = v44[v43];
        ++v43;
      }
      while (v43 != 8);
      v45 = 0;
      v46 = v44 + 8;
      do
      {
        v448[0].i16[v45] = v46[v45];
        ++v45;
      }
      while (v45 != 8);
      v47 = 0;
      v48 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v47] = v48[v47];
        ++v47;
      }
      while (v47 != 8);
      v49 = 0;
      v50 = v48 + 8;
      do
      {
        v448[1].i16[v49] = v50[v49];
        ++v49;
      }
      while (v49 != 8);
      v51 = 0;
      v52 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v51] = v52[v51];
        ++v51;
      }
      while (v51 != 8);
      v53 = 0;
      v54 = v52 + 8;
      do
      {
        v449.i16[v53] = v54[v53];
        ++v53;
      }
      while (v53 != 8);
      goto LABEL_147;
    case 2:
      for (n = 0; n != 8; ++n)
        v444.i16[n] = v3->u8[n];
      for (ii = 0; ii != 8; ++ii)
        v445[1].i16[ii] = v3->u8[v4 + ii];
      for (jj = 0; jj != 8; ++jj)
        v445[0].i16[jj] = v3->u8[2 * v4 + jj];
      for (kk = 0; kk != 8; ++kk)
        v446.i16[kk] = v3->u8[3 * v4 + kk];
      for (mm = 0; mm != 8; ++mm)
        v447.i16[mm] = v3->u8[4 * v4 + mm];
      for (nn = 0; nn != 8; ++nn)
        v448[1].i16[nn] = v3->u8[5 * v4 + nn];
      for (i1 = 0; i1 != 8; ++i1)
        v448[0].i16[i1] = v3->u8[6 * (int)v4 + i1];
      for (i2 = 0; i2 != 8; ++i2)
        v449.i16[i2] = v3->u8[8 * v4 - v4 + i2];
      goto LABEL_173;
    case 3:
      for (i3 = 0; i3 != 8; ++i3)
        v444.i16[i3] = v3->u8[i3];
      for (i4 = 0; i4 != 8; ++i4)
        v445[0].i16[i4] = v3->u8[v4 + i4];
      for (i5 = 0; i5 != 8; ++i5)
        v445[1].i16[i5] = v3->u8[2 * v4 + i5];
      for (i6 = 0; i6 != 8; ++i6)
        v446.i16[i6] = v3->u8[3 * v4 + i6];
      for (i7 = 0; i7 != 8; ++i7)
        v447.i16[i7] = v3->u8[4 * v4 + i7];
      for (i8 = 0; i8 != 8; ++i8)
        v448[0].i16[i8] = v3->u8[5 * v4 + i8];
      for (i9 = 0; i9 != 8; ++i9)
        v448[1].i16[i9] = v3->u8[6 * (int)v4 + i9];
      for (i10 = 0; i10 != 8; ++i10)
        v449.i16[i10] = v3->u8[8 * v4 - v4 + i10];
      goto LABEL_92;
    case 4:
      for (i11 = 0; i11 != 8; ++i11)
        v444.i16[i11] = v3->u8[i11];
      for (i12 = 0; i12 != 8; ++i12)
        v447.i16[i12] = v3->u8[i12 + 8];
      v91 = 0;
      v92 = &v3->i8[v4];
      do
      {
        v445[0].i16[v91] = v92[v91];
        ++v91;
      }
      while (v91 != 8);
      v93 = 0;
      v94 = v92 + 8;
      do
      {
        v448[0].i16[v93] = v94[v93];
        ++v93;
      }
      while (v93 != 8);
      v95 = 0;
      v96 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v95] = v96[v95];
        ++v95;
      }
      while (v95 != 8);
      v97 = 0;
      v98 = v96 + 8;
      do
      {
        v448[1].i16[v97] = v98[v97];
        ++v97;
      }
      while (v97 != 8);
      v99 = 0;
      v100 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v99] = v100[v99];
        ++v99;
      }
      while (v99 != 8);
      v101 = 0;
      v102 = v100 + 8;
      do
      {
        v449.i16[v101] = v102[v101];
        ++v101;
      }
      while (v101 != 8);
      v103 = v444.i16[1];
      v444.i16[1] = v445[1].i16[0];
      v445[1].i16[0] = v103;
      v104 = v444.i16[3];
      v444.i16[3] = v445[1].i16[2];
      v105 = v444.i16[5];
      v444.i16[5] = v445[1].i16[4];
      v445[1].i16[4] = v105;
      v106 = v444.i16[7];
      v444.i16[7] = v445[1].i16[6];
      v107 = v445[0].i16[1];
      v445[0].i16[1] = v446.i16[0];
      v446.i16[0] = v107;
      v108 = v445[0].i16[3];
      v445[0].i16[3] = v446.i16[2];
      v109 = v445[0].i16[5];
      v445[0].i16[5] = v446.i16[4];
      v446.i16[4] = v109;
      v110 = v445[0].i16[7];
      v445[0].i16[7] = v446.i16[6];
      v111 = v447.i16[1];
      v447.i16[1] = v448[1].i16[0];
      v112 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v112;
      v113 = v447.i16[5];
      v447.i16[5] = v448[1].i16[4];
      v114 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v114;
      v115 = v448[0].i16[1];
      v448[0].i16[1] = v449.i16[0];
      v116 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v116;
      v117 = v448[0].i16[5];
      v448[0].i16[5] = v449.i16[4];
      v118 = v448[0].i16[7];
      v448[0].i16[7] = v449.i16[6];
      v449.i16[6] = v118;
      v445[1].i16[2] = v111;
      v448[1].i16[0] = v104;
      v119 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[1];
      v448[1].i16[1] = v119;
      v445[1].i16[6] = v113;
      v448[1].i16[4] = v106;
      v120 = v445[1].i16[7];
      v445[1].i16[7] = v448[1].i16[5];
      v448[1].i16[5] = v120;
      v446.i16[2] = v115;
      v449.i16[0] = v108;
      v121 = v446.i16[3];
      v446.i16[3] = v449.i16[1];
      v449.i16[1] = v121;
      v446.i16[6] = v117;
      v449.i16[4] = v110;
      v122 = v446.i16[7];
      v446.i16[7] = v449.i16[5];
      v449.i16[5] = v122;
      goto LABEL_181;
    case 5:
      for (i13 = 0; i13 != 8; ++i13)
        v444.i16[i13] = v3->u8[i13];
      for (i14 = 0; i14 != 8; ++i14)
        v447.i16[i14] = v3->u8[i14 + 8];
      v125 = 0;
      v126 = &v3->i8[v4];
      do
      {
        *((_WORD *)&v444 + v125 + 8) = v126[v125];
        ++v125;
      }
      while (v125 != 8);
      v127 = 0;
      v128 = v126 + 8;
      do
      {
        v448[0].i16[v127] = v128[v127];
        ++v127;
      }
      while (v127 != 8);
      v129 = 0;
      v130 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v129] = v130[v129];
        ++v129;
      }
      while (v129 != 8);
      v131 = 0;
      v132 = v130 + 8;
      do
      {
        v448[1].i16[v131] = v132[v131];
        ++v131;
      }
      while (v131 != 8);
      v133 = 0;
      v134 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v133] = v134[v133];
        ++v133;
      }
      while (v133 != 8);
      v135 = 0;
      v136 = v134 + 8;
      do
      {
        v449.i16[v135] = v136[v135];
        ++v135;
      }
      while (v135 != 8);
      v137 = v445[1].i16[1];
      v445[1].i16[1] = v444.i16[0];
      v444.i16[0] = v137;
      v138 = v444.i16[2];
      v444.i16[2] = v445[1].i16[3];
      v139 = v445[1].i16[5];
      v445[1].i16[5] = v444.i16[4];
      v444.i16[4] = v139;
      v140 = v444.i16[6];
      v444.i16[6] = v445[1].i16[7];
      v141 = v446.i16[1];
      v446.i16[1] = v445[0].i16[0];
      v445[0].i16[0] = v141;
      v142 = v445[0].i16[2];
      v445[0].i16[2] = v446.i16[3];
      v143 = v446.i16[5];
      v446.i16[5] = v445[0].i16[4];
      v445[0].i16[4] = v143;
      v144 = v445[0].i16[6];
      v445[0].i16[6] = v446.i16[7];
      v145 = v447.i16[0];
      v447.i16[0] = v448[1].i16[1];
      v146 = v448[1].i16[3];
      v448[1].i16[3] = v447.i16[2];
      v447.i16[2] = v146;
      v147 = v447.i16[4];
      v447.i16[4] = v448[1].i16[5];
      v148 = v448[1].i16[7];
      v448[1].i16[7] = v447.i16[6];
      v447.i16[6] = v148;
      v149 = v448[0].i16[0];
      v448[0].i16[0] = v449.i16[1];
      v150 = v449.i16[3];
      v449.i16[3] = v448[0].i16[2];
      v448[0].i16[2] = v150;
      v151 = v448[0].i16[4];
      v448[0].i16[4] = v449.i16[5];
      v152 = v449.i16[7];
      v449.i16[7] = v448[0].i16[6];
      v448[0].i16[6] = v152;
      v153 = v445[1].i16[2];
      v445[1].i16[2] = v448[1].i16[0];
      v448[1].i16[0] = v153;
      v445[1].i16[3] = v145;
      v448[1].i16[1] = v138;
      v154 = v445[1].i16[6];
      v445[1].i16[6] = v448[1].i16[4];
      v448[1].i16[4] = v154;
      v445[1].i16[7] = v147;
      v448[1].i16[5] = v140;
      v155 = v446.i16[2];
      v446.i16[2] = v449.i16[0];
      v449.i16[0] = v155;
      v446.i16[3] = v149;
      v449.i16[1] = v142;
      v156 = v446.i16[6];
      v446.i16[6] = v449.i16[4];
      v449.i16[4] = v156;
      v446.i16[7] = v151;
      v449.i16[5] = v144;
      goto LABEL_181;
    case 6:
      for (i15 = 0; i15 != 8; ++i15)
        v444.i16[i15] = v3->u8[i15];
      for (i16 = 0; i16 != 8; ++i16)
        v447.i16[i16] = v3->u8[i16 + 8];
      v159 = 0;
      v160 = &v3->i8[v4];
      do
      {
        *((_WORD *)&v444 + v159 + 8) = v160[v159];
        ++v159;
      }
      while (v159 != 8);
      v161 = 0;
      v162 = v160 + 8;
      do
      {
        v448[0].i16[v161] = v162[v161];
        ++v161;
      }
      while (v161 != 8);
      v163 = 0;
      v164 = &v3->i8[2 * (int)v4];
      do
      {
        v445[1].i16[v163] = v164[v163];
        ++v163;
      }
      while (v163 != 8);
      v165 = 0;
      v166 = v164 + 8;
      do
      {
        v448[1].i16[v165] = v166[v165];
        ++v165;
      }
      while (v165 != 8);
      v167 = 0;
      v168 = &v3->i8[3 * v4];
      do
      {
        v446.i16[v167] = v168[v167];
        ++v167;
      }
      while (v167 != 8);
      v169 = 0;
      v170 = v168 + 8;
      do
      {
        v449.i16[v169] = v170[v169];
        ++v169;
      }
      while (v169 != 8);
      goto LABEL_177;
    case 7:
      vectorload_4x16_packed10((unsigned int *)v3, *(_DWORD *)(a1 + 8), v4, &v444);
      goto LABEL_145;
    case 8:
      vectorload_4x16_packed10((unsigned int *)v3, *(_DWORD *)(a1 + 8), v4, &v444);
      goto LABEL_147;
    case 9:
      v190 = 0;
      v191 = v3;
      do
      {
        v192 = v191->i32[0];
        v191 = (int16x8_t *)((char *)v191 + 4);
        v444.i16[v190] = v192 & 0x3FF;
        v193 = &v447.i16[v190];
        *(v193 - 16) = (v192 >> 10) & 0x3FF;
        *v193 = (v192 >> 20) & 0x3FF;
        v193[16] = v192 >> 30;
        if (v190 == 3)
          v191 = (int16x8_t *)((char *)v3 + v4);
        ++v190;
      }
      while (v190 != 8);
      v194 = 0;
      v195 = (unsigned int *)((char *)v3 + 2 * (int)v4);
      do
      {
        v196 = *v195++;
        v197 = &v448[0].i16[v194];
        *(v197 - 32) = v196 & 0x3FF;
        *(v197 - 16) = (v196 >> 10) & 0x3FF;
        *v197 = (v196 >> 20) & 0x3FF;
        v197[16] = v196 >> 30;
        if (v194 == 3)
          v195 = (unsigned int *)((char *)v3 + 3 * (int)v4);
        ++v194;
      }
      while (v194 != 8);
      goto LABEL_181;
    case 10:
    case 15:
    case 24:
      v11 = v3[1];
      v444 = *v3;
      v447 = v11;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      v12 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v12;
      v448[1] = v12[1];
      v13 = (int16x8_t *)((char *)v3 + 3 * (int)v4);
      v446 = *v13;
      v449 = v13[1];
      if ((_DWORD)v6 == 15)
      {
        v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      if (*(_BYTE *)(a1 + 40))
      {
        v14.i64[0] = 0xF000F000F000FLL;
        v14.i64[1] = 0xF000F000F000FLL;
        v15 = (uint16x8_t)vandq_s8(vorrq_s8((int8x16_t)v449, vorrq_s8(vorrq_s8((int8x16_t)v448[1], vorrq_s8((int8x16_t)v448[0], (int8x16_t)v447)), vorrq_s8(vorrq_s8((int8x16_t)v446, (int8x16_t)v445[1]), vorrq_s8((int8x16_t)v445[0], (int8x16_t)v444)))), v14);
        v15.i16[0] = vmaxvq_u16(v15);
        if (v15.i32[0])
          return 4294951887;
      }
      if (v5)
      {
        v26 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v26));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v26));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v26));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v26));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v26));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v26));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v26));
        v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v26), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v26));
      }
LABEL_145:
      v171.i64[0] = v446.i64[0];
      v171.i64[1] = v444.i64[1];
      v172 = v445[0].i64[1];
      v444.i64[1] = v445[1].i64[0];
      *(uint16x8_t *)((char *)v445 + 8) = v171;
      v173 = v447.i64[1];
      v174 = v448[0].i64[1];
      v446.i64[0] = v172;
      v447.i64[1] = v448[1].i64[0];
      v171.i64[0] = v449.i64[0];
      v171.i64[1] = v173;
      *(uint16x8_t *)((char *)v448 + 8) = v171;
      v449.i64[0] = v174;
LABEL_181:
      v281 = a1 + 42;
      if ((int)v6 >= 17)
      {
        if (*(_DWORD *)(a1 + 108))
        {
          v282 = *(_DWORD *)(a1 + 112);
          if (v282)
          {
            v283 = 0;
            v284 = vdupq_n_s32(v282);
            v285 = (uint32x4_t)vdupq_n_s32(v282 - 1);
            v286.i64[0] = 0x2000000020;
            v286.i64[1] = 0x2000000020;
            v287 = (uint32x4_t)vnegq_s32(v284);
            v288.i64[0] = -1;
            v288.i64[1] = -1;
            v289.i64[0] = 0x100000001;
            v289.i64[1] = 0x100000001;
            do
            {
              v290 = *(int16x4_t *)&v444.i8[v283 * 2];
              v291 = (int32x4_t)vmovl_u16((uint16x4_t)v290);
              v292 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v286, vclzq_s32(v291)), (int8x16_t)vceqzq_s32(v291));
              v293 = vmovn_s32(vcgtq_s32(v292, v284));
              v294 = vsubq_s32(v292, v284);
              v295 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v290, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v291, v287))), vmovn_s32((int32x4_t)vshlq_u32(v289, (uint32x4_t)vaddq_s32(v294, v288))))), (uint32x4_t)vnegq_s32(v294)), (int32x4_t)vshlq_u32((uint32x4_t)v294, v285)));
              if ((v293.i8[0] & 1) != 0)
                v444.i16[v283] = v295.i16[0];
              if ((v293.i8[2] & 1) != 0)
                v444.i16[v283 + 1] = v295.i16[1];
              if ((v293.i8[4] & 1) != 0)
                v444.i16[v283 + 2] = v295.i16[2];
              if ((v293.i8[6] & 1) != 0)
                v444.i16[v283 + 3] = v295.i16[3];
              v283 += 4;
            }
            while (v283 != 8);
            v296 = 0;
            v297.i64[0] = 0x2000000020;
            v297.i64[1] = 0x2000000020;
            v298.i64[0] = -1;
            v298.i64[1] = -1;
            v299.i64[0] = 0x100000001;
            v299.i64[1] = 0x100000001;
            do
            {
              v300 = *(int16x4_t *)((char *)&v444 + v296 * 2 + 16);
              v301 = (int32x4_t)vmovl_u16((uint16x4_t)v300);
              v302 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v297, vclzq_s32(v301)), (int8x16_t)vceqzq_s32(v301));
              v303 = vmovn_s32(vcgtq_s32(v302, v284));
              v304 = vsubq_s32(v302, v284);
              v305 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v300, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v301, v287))), vmovn_s32((int32x4_t)vshlq_u32(v299, (uint32x4_t)vaddq_s32(v304, v298))))), (uint32x4_t)vnegq_s32(v304)), (int32x4_t)vshlq_u32((uint32x4_t)v304, v285)));
              if ((v303.i8[0] & 1) != 0)
                *(_WORD *)((char *)&v444 + v296 * 2 + 16) = v305.i16[0];
              if ((v303.i8[2] & 1) != 0)
                v445[0].i16[v296 + 1] = v305.i16[1];
              if ((v303.i8[4] & 1) != 0)
                v445[0].i16[v296 + 2] = v305.i16[2];
              if ((v303.i8[6] & 1) != 0)
                v445[0].i16[v296 + 3] = v305.i16[3];
              v296 += 4;
            }
            while (v296 != 8);
            v306 = 0;
            v307.i64[0] = 0x2000000020;
            v307.i64[1] = 0x2000000020;
            v308.i64[0] = -1;
            v308.i64[1] = -1;
            v309.i64[0] = 0x100000001;
            v309.i64[1] = 0x100000001;
            do
            {
              v310 = *(int16x4_t *)&v445[1].i8[v306 * 2];
              v311 = (int32x4_t)vmovl_u16((uint16x4_t)v310);
              v312 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v307, vclzq_s32(v311)), (int8x16_t)vceqzq_s32(v311));
              v313 = vmovn_s32(vcgtq_s32(v312, v284));
              v314 = vsubq_s32(v312, v284);
              v315 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v310, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v311, v287))), vmovn_s32((int32x4_t)vshlq_u32(v309, (uint32x4_t)vaddq_s32(v314, v308))))), (uint32x4_t)vnegq_s32(v314)), (int32x4_t)vshlq_u32((uint32x4_t)v314, v285)));
              if ((v313.i8[0] & 1) != 0)
                v445[1].i16[v306] = v315.i16[0];
              if ((v313.i8[2] & 1) != 0)
                v445[1].i16[v306 + 1] = v315.i16[1];
              if ((v313.i8[4] & 1) != 0)
                v445[1].i16[v306 + 2] = v315.i16[2];
              if ((v313.i8[6] & 1) != 0)
                v445[1].i16[v306 + 3] = v315.i16[3];
              v306 += 4;
            }
            while (v306 != 8);
            v316 = 0;
            v317.i64[0] = 0x2000000020;
            v317.i64[1] = 0x2000000020;
            v318.i64[0] = -1;
            v318.i64[1] = -1;
            v319.i64[0] = 0x100000001;
            v319.i64[1] = 0x100000001;
            do
            {
              v320 = *(int16x4_t *)&v446.i8[v316 * 2];
              v321 = (int32x4_t)vmovl_u16((uint16x4_t)v320);
              v322 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v317, vclzq_s32(v321)), (int8x16_t)vceqzq_s32(v321));
              v323 = vmovn_s32(vcgtq_s32(v322, v284));
              v324 = vsubq_s32(v322, v284);
              v325 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v320, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v321, v287))), vmovn_s32((int32x4_t)vshlq_u32(v319, (uint32x4_t)vaddq_s32(v324, v318))))), (uint32x4_t)vnegq_s32(v324)), (int32x4_t)vshlq_u32((uint32x4_t)v324, v285)));
              if ((v323.i8[0] & 1) != 0)
                v446.i16[v316] = v325.i16[0];
              if ((v323.i8[2] & 1) != 0)
                v446.i16[v316 + 1] = v325.i16[1];
              if ((v323.i8[4] & 1) != 0)
                v446.i16[v316 + 2] = v325.i16[2];
              if ((v323.i8[6] & 1) != 0)
                v446.i16[v316 + 3] = v325.i16[3];
              v316 += 4;
            }
            while (v316 != 8);
            v326 = 0;
            v327.i64[0] = 0x2000000020;
            v327.i64[1] = 0x2000000020;
            v328.i64[0] = -1;
            v328.i64[1] = -1;
            v329.i64[0] = 0x100000001;
            v329.i64[1] = 0x100000001;
            do
            {
              v330 = *(int16x4_t *)&v447.i8[v326 * 2];
              v331 = (int32x4_t)vmovl_u16((uint16x4_t)v330);
              v332 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v327, vclzq_s32(v331)), (int8x16_t)vceqzq_s32(v331));
              v333 = vmovn_s32(vcgtq_s32(v332, v284));
              v334 = vsubq_s32(v332, v284);
              v335 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v330, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v331, v287))), vmovn_s32((int32x4_t)vshlq_u32(v329, (uint32x4_t)vaddq_s32(v334, v328))))), (uint32x4_t)vnegq_s32(v334)), (int32x4_t)vshlq_u32((uint32x4_t)v334, v285)));
              if ((v333.i8[0] & 1) != 0)
                v447.i16[v326] = v335.i16[0];
              if ((v333.i8[2] & 1) != 0)
                v447.i16[v326 + 1] = v335.i16[1];
              if ((v333.i8[4] & 1) != 0)
                v447.i16[v326 + 2] = v335.i16[2];
              if ((v333.i8[6] & 1) != 0)
                v447.i16[v326 + 3] = v335.i16[3];
              v326 += 4;
            }
            while (v326 != 8);
            v336 = 0;
            v337.i64[0] = 0x2000000020;
            v337.i64[1] = 0x2000000020;
            v338.i64[0] = -1;
            v338.i64[1] = -1;
            v339.i64[0] = 0x100000001;
            v339.i64[1] = 0x100000001;
            do
            {
              v340 = *(int16x4_t *)&v448[0].i8[v336 * 2];
              v341 = (int32x4_t)vmovl_u16((uint16x4_t)v340);
              v342 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v337, vclzq_s32(v341)), (int8x16_t)vceqzq_s32(v341));
              v343 = vmovn_s32(vcgtq_s32(v342, v284));
              v344 = vsubq_s32(v342, v284);
              v345 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v340, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v341, v287))), vmovn_s32((int32x4_t)vshlq_u32(v339, (uint32x4_t)vaddq_s32(v344, v338))))), (uint32x4_t)vnegq_s32(v344)), (int32x4_t)vshlq_u32((uint32x4_t)v344, v285)));
              if ((v343.i8[0] & 1) != 0)
                v448[0].i16[v336] = v345.i16[0];
              if ((v343.i8[2] & 1) != 0)
                v448[0].i16[v336 + 1] = v345.i16[1];
              if ((v343.i8[4] & 1) != 0)
                v448[0].i16[v336 + 2] = v345.i16[2];
              if ((v343.i8[6] & 1) != 0)
                v448[0].i16[v336 + 3] = v345.i16[3];
              v336 += 4;
            }
            while (v336 != 8);
            v346 = 0;
            v347.i64[0] = 0x2000000020;
            v347.i64[1] = 0x2000000020;
            v348.i64[0] = -1;
            v348.i64[1] = -1;
            v349.i64[0] = 0x100000001;
            v349.i64[1] = 0x100000001;
            do
            {
              v350 = *(int16x4_t *)&v448[1].i8[v346 * 2];
              v351 = (int32x4_t)vmovl_u16((uint16x4_t)v350);
              v352 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v347, vclzq_s32(v351)), (int8x16_t)vceqzq_s32(v351));
              v353 = vmovn_s32(vcgtq_s32(v352, v284));
              v354 = vsubq_s32(v352, v284);
              v355 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v350, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v351, v287))), vmovn_s32((int32x4_t)vshlq_u32(v349, (uint32x4_t)vaddq_s32(v354, v348))))), (uint32x4_t)vnegq_s32(v354)), (int32x4_t)vshlq_u32((uint32x4_t)v354, v285)));
              if ((v353.i8[0] & 1) != 0)
                v448[1].i16[v346] = v355.i16[0];
              if ((v353.i8[2] & 1) != 0)
                v448[1].i16[v346 + 1] = v355.i16[1];
              if ((v353.i8[4] & 1) != 0)
                v448[1].i16[v346 + 2] = v355.i16[2];
              if ((v353.i8[6] & 1) != 0)
                v448[1].i16[v346 + 3] = v355.i16[3];
              v346 += 4;
            }
            while (v346 != 8);
            v356 = 0;
            v357.i64[0] = 0x2000000020;
            v357.i64[1] = 0x2000000020;
            v358.i64[0] = -1;
            v358.i64[1] = -1;
            v359.i64[0] = 0x100000001;
            v359.i64[1] = 0x100000001;
            do
            {
              v360 = *(int16x4_t *)&v449.i8[v356 * 2];
              v361 = (int32x4_t)vmovl_u16((uint16x4_t)v360);
              v362 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v357, vclzq_s32(v361)), (int8x16_t)vceqzq_s32(v361));
              v363 = vmovn_s32(vcgtq_s32(v362, v284));
              v364 = vsubq_s32(v362, v284);
              v365 = vmovn_s32(vaddq_s32((int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16(vsub_s16(v360, vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)v361, v287))), vmovn_s32((int32x4_t)vshlq_u32(v359, (uint32x4_t)vaddq_s32(v364, v358))))), (uint32x4_t)vnegq_s32(v364)), (int32x4_t)vshlq_u32((uint32x4_t)v364, v285)));
              if ((v363.i8[0] & 1) != 0)
                v449.i16[v356] = v365.i16[0];
              if ((v363.i8[2] & 1) != 0)
                v449.i16[v356 + 1] = v365.i16[1];
              if ((v363.i8[4] & 1) != 0)
                v449.i16[v356 + 2] = v365.i16[2];
              if ((v363.i8[6] & 1) != 0)
                v449.i16[v356 + 3] = v365.i16[3];
              v356 += 4;
            }
            while (v356 != 8);
          }
        }
      }
      v366 = vminq_u16((uint16x8_t)v444, v445[0]);
      v366.i16[0] = vminvq_u16(v366);
      v367 = vmaxq_u16((uint16x8_t)v444, v445[0]);
      v367.i16[0] = vmaxvq_u16(v367);
      v368 = 32 - __clz(v367.i32[0] - v366.u16[0]);
      v369 = (_WORD *)(v281 + ((v7 >> 9) & 0x7FFFF8));
      if (v367.i32[0] == v366.u16[0])
        LOWORD(v368) = 0;
      *(_WORD *)(a1 + 44) = v368 - *v369;
      *(_WORD *)(a1 + 42) = v368;
      v370 = (unsigned __int16)v369[2];
      if (v370 > v366.u16[0] || (int)((1 << v368) + v370) <= v367.i32[0])
      {
        v372 = ((v366.i16[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) & ~(unsigned __int16)((int)(v366.i32[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) >> 31))
             - v370;
        LOWORD(v370) = (v366.i16[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) & ~(unsigned __int16)((int)(v366.i32[0] - (((1 << v368) - (v367.i32[0] - v366.u16[0])) >> 1)) >> 31);
      }
      else
      {
        v372 = 0;
      }
      v373 = vminq_u16(v445[1], (uint16x8_t)v446);
      v373.i16[0] = vminvq_u16(v373);
      v374 = vmaxq_u16(v445[1], (uint16x8_t)v446);
      v374.i16[0] = vmaxvq_u16(v374);
      v375 = 32 - __clz(v374.i32[0] - v373.u16[0]);
      *(_WORD *)(a1 + 48) = v372;
      *(_WORD *)(a1 + 46) = v370;
      v376 = (_WORD *)(v281 + 8 * ((v7 >> 8) & 0xF));
      if (v374.i32[0] == v373.u16[0])
        LOWORD(v375) = 0;
      *(_WORD *)(a1 + 52) = v375 - *v376;
      *(_WORD *)(a1 + 50) = v375;
      v377 = 1 << v375;
      v378 = (unsigned __int16)v376[2];
      if (v378 > v373.u16[0] || (int)(v377 + v378) <= v374.i32[0])
      {
        v380 = (v373.i32[0] - ((v377 - (v374.i32[0] - v373.u16[0])) >> 1)) & ~((int)(v373.i32[0]
                                                                                                 - ((v377 - (v374.i32[0] - v373.u16[0])) >> 1)) >> 31);
        v379 = v380 - v378;
      }
      else
      {
        v379 = 0;
        LOWORD(v380) = v378;
      }
      v381 = vminq_u16((uint16x8_t)v447, v448[0]);
      v381.i16[0] = vminvq_u16(v381);
      v382 = vmaxq_u16((uint16x8_t)v447, v448[0]);
      v382.i16[0] = vmaxvq_u16(v382);
      v383 = 32 - __clz(v382.i32[0] - v381.u16[0]);
      *(_WORD *)(a1 + 56) = v379;
      *(_WORD *)(a1 + 54) = v380;
      v384 = (_WORD *)(v281 + 8 * (v7 >> 4));
      if (v382.i32[0] == v381.u16[0])
        v385 = 0;
      else
        v385 = v383;
      *(_WORD *)(a1 + 60) = v385 - *v384;
      *(_WORD *)(a1 + 58) = v385;
      v386 = 1 << v385;
      v387 = (unsigned __int16)v384[2];
      if (v387 > v381.u16[0] || (int)(v386 + v387) <= v382.i32[0])
      {
        v389 = (v381.i32[0] - ((v386 - (v382.i32[0] - v381.u16[0])) >> 1)) & ~((int)(v381.i32[0]
                                                                                                 - ((v386 - (v382.i32[0] - v381.u16[0])) >> 1)) >> 31);
        v388 = v389 - v387;
      }
      else
      {
        v388 = 0;
        LOWORD(v389) = v384[2];
      }
      *(_WORD *)(a1 + 64) = v388;
      *(_WORD *)(a1 + 62) = v389;
      if ((_DWORD)v6 == 19)
      {
        v390 = *(_WORD *)(a1 + 72);
      }
      else
      {
        v391 = vminq_u16(v448[1], (uint16x8_t)v449);
        v391.i16[0] = vminvq_u16(v391);
        v392 = vmaxq_u16(v448[1], (uint16x8_t)v449);
        v392.i16[0] = vmaxvq_u16(v392);
        v393 = 32 - __clz(v392.i32[0] - v391.u16[0]);
        v394 = (_WORD *)(v281 + 8 * (v7 & 0xF));
        if (v392.i32[0] == v391.u16[0])
          LOWORD(v393) = 0;
        *(_WORD *)(a1 + 68) = v393 - *v394;
        *(_WORD *)(a1 + 66) = v393;
        v395 = 1 << v393;
        v396 = (unsigned __int16)v394[2];
        if (v396 > v391.u16[0] || (int)(v395 + v396) <= v392.i32[0])
        {
          v397 = (v391.i32[0] - ((v395 - (v392.i32[0] - v391.u16[0])) >> 1)) & ~((int)(v391.i32[0] - ((v395 - (v392.i32[0] - v391.u16[0])) >> 1)) >> 31);
          v390 = v397 - v396;
        }
        else
        {
          v390 = 0;
          LOWORD(v397) = v394[2];
        }
        *(_WORD *)(a1 + 72) = v390;
        *(_WORD *)(a1 + 70) = v397;
      }
      v398 = 0;
      v399 = 0;
      v400 = 0;
      v401 = 0;
      v402 = v372 != 0;
      if (v379)
        v402 |= 2u;
      if (v388)
        v402 |= 4u;
      if (v390)
        v402 |= 8u;
      v403 = (unsigned __int16 *)(a1 + 44);
      break;
    case 11:
    case 16:
    case 25:
      v16 = v3[1];
      v444 = *v3;
      v447 = v16;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      v17 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v17;
      v448[1] = v17[1];
      v18 = (int16x8_t *)((char *)v3 + 3 * v4);
      v446 = *v18;
      v449 = v18[1];
      if ((_DWORD)v6 == 15)
      {
        v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      if (v5)
      {
        v19 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v19));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v19));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v19));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v19));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v19));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v19));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v19));
        v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v19), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v19));
      }
LABEL_147:
      v175 = v444.i16[1];
      v444.i16[1] = v445[1].i16[0];
      v445[1].i16[0] = v175;
      v176 = v444.i16[3];
      v444.i16[3] = v445[1].i16[2];
      v445[1].i16[2] = v176;
      v177 = v444.i16[5];
      v444.i16[5] = v445[1].i16[4];
      v445[1].i16[4] = v177;
      v178 = v444.i16[7];
      v444.i16[7] = v445[1].i16[6];
      v445[1].i16[6] = v178;
      v179 = v445[0].i16[1];
      v445[0].i16[1] = v446.i16[0];
      v446.i16[0] = v179;
      v180 = v445[0].i16[3];
      v445[0].i16[3] = v446.i16[2];
      v446.i16[2] = v180;
      v181 = v445[0].i16[5];
      v445[0].i16[5] = v446.i16[4];
      v446.i16[4] = v181;
      v182 = v445[0].i16[7];
      v445[0].i16[7] = v446.i16[6];
      v446.i16[6] = v182;
      v183 = v447.i16[1];
      v447.i16[1] = v448[1].i16[0];
      v448[1].i16[0] = v183;
      v184 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v184;
      v185 = v447.i16[5];
      v447.i16[5] = v448[1].i16[4];
      v448[1].i16[4] = v185;
      v186 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v186;
      v187 = v448[0].i16[1];
      v448[0].i16[1] = v449.i16[0];
      v449.i16[0] = v187;
      v188 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v188;
      v189 = v448[0].i16[5];
      v448[0].i16[5] = v449.i16[4];
      v449.i16[4] = v189;
      goto LABEL_180;
    case 12:
    case 18:
      v20 = v3[1];
      v444 = *v3;
      v447 = v20;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      v21 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v21;
      v448[1] = v21[1];
      v22 = (int16x8_t *)((char *)v3 + 3 * v4);
      v446 = *v22;
      v449 = v22[1];
      if ((_DWORD)v6 != 12)
        goto LABEL_177;
      v23 = vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v24 = vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      goto LABEL_176;
    case 13:
    case 20:
      v444 = *v3;
      v445[1] = *(uint16x8_t *)((char *)v3 + v4);
      v445[0] = *(uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v446 = *(int16x8_t *)((char *)v3 + 3 * v4);
      v447 = *(int16x8_t *)((char *)v3 + 4 * (int)v4);
      v448[1] = *(uint16x8_t *)((char *)v3 + 5 * v4);
      v448[0] = *(uint16x8_t *)((char *)v3 + 6 * (int)v4);
      v449 = *(int16x8_t *)((char *)v3 + 8 * v4 - v4);
      if ((_DWORD)v6 == 13)
      {
        v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      goto LABEL_171;
    case 14:
    case 22:
      v444 = *v3;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v445[1] = *(uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v446 = *(int16x8_t *)((char *)v3 + 3 * v4);
      v447 = *(int16x8_t *)((char *)v3 + 4 * (int)v4);
      v448[0] = *(uint16x8_t *)((char *)v3 + 5 * v4);
      v448[1] = *(uint16x8_t *)((char *)v3 + 6 * (int)v4);
      v449 = *(int16x8_t *)((char *)v3 + 7 * (int)v4);
      if ((_DWORD)v6 == 14)
      {
        v444 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
        v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      }
      if (v5)
      {
        v25 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v25));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v25));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v25));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v25));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v25));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v25));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v25));
        v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v25), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v25));
      }
LABEL_92:
      v71 = v444.i16[2];
      v72 = v444.i16[3];
      v73 = v444.i32[3];
      v444.i32[1] = v447.i32[0];
      v444.i32[3] = v447.i32[2];
      v447.i32[2] = v73;
      v74 = v445[0].i16[2];
      LOWORD(v73) = v445[0].i16[3];
      v445[0].i32[1] = v448[0].i32[0];
      v75 = v445[0].i16[6];
      v445[0].i16[6] = v448[0].i16[4];
      v448[0].i16[4] = v75;
      v76 = v445[0].i16[7];
      v445[0].i16[7] = v448[0].i16[5];
      v448[0].i16[5] = v76;
      v77 = v445[1].i16[2];
      v445[1].i16[2] = v448[1].i16[0];
      v448[1].i16[0] = v77;
      v78 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[1];
      v448[1].i16[1] = v78;
      v79 = v448[1].i16[4];
      v448[1].i16[4] = v445[1].i16[6];
      v80 = v448[1].i16[5];
      v448[1].i16[5] = v445[1].i16[7];
      v81 = v446.i16[2];
      v446.i16[2] = v449.i16[0];
      v449.i16[0] = v81;
      v82 = v446.i16[3];
      v446.i16[3] = v449.i16[1];
      v449.i16[1] = v82;
      v83 = v449.i16[4];
      v449.i16[4] = v446.i16[6];
      v84 = v449.i16[5];
      v449.i16[5] = v446.i16[7];
      v85 = v445[1].i16[4];
      v445[1].i16[4] = v71;
      v447.i16[0] = v85;
      v86 = v445[1].i16[5];
      v445[1].i16[5] = v72;
      v447.i16[1] = v86;
      v445[1].i32[3] = v447.i32[1];
      v447.i16[2] = v79;
      v447.i16[3] = v80;
      v87 = v446.i16[4];
      v446.i16[4] = v74;
      v448[0].i16[0] = v87;
      v88 = v446.i16[5];
      v446.i16[5] = v73;
      v448[0].i16[1] = v88;
      v446.i16[6] = v448[0].i16[2];
      v448[0].i16[2] = v83;
      goto LABEL_174;
    case 17:
      v444 = *v3;
      v447 = *(int16x8_t *)((char *)v3 + v4);
      v445[0] = *(uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v448[0] = *(uint16x8_t *)((char *)v3 + 3 * v4);
      v445[1] = *(uint16x8_t *)((char *)v3 + 4 * (int)v4);
      v448[1] = *(uint16x8_t *)((char *)v3 + 5 * v4);
      v446 = *(int16x8_t *)((char *)v3 + 6 * (int)v4);
      v449 = *(int16x8_t *)((char *)v3 + 8 * v4 - v4);
      if (v5)
      {
        v198 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v198));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v198));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v198));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v198));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v198));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v198));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v198));
        v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v198), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v198));
      }
      v199 = v445[1].i16[1];
      v445[1].i16[1] = v444.i16[0];
      v444.i16[0] = v199;
      v200 = v445[1].i16[3];
      v445[1].i16[3] = v444.i16[2];
      v201 = v445[1].i16[5];
      v445[1].i16[5] = v444.i16[4];
      v444.i16[4] = v201;
      v202 = v445[1].i16[7];
      v445[1].i16[7] = v444.i16[6];
      v203 = v446.i16[1];
      v446.i16[1] = v445[0].i16[0];
      v445[0].i16[0] = v203;
      v204 = v446.i16[3];
      v446.i16[3] = v445[0].i16[2];
      v205 = v446.i16[5];
      v446.i16[5] = v445[0].i16[4];
      v445[0].i16[4] = v205;
      v206 = v446.i16[7];
      v446.i16[7] = v445[0].i16[6];
      v207 = v448[1].i16[0];
      v448[1].i16[0] = v447.i16[1];
      v208 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v208;
      v209 = v448[1].i16[4];
      v448[1].i16[4] = v447.i16[5];
      v210 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v210;
      v211 = v449.i16[0];
      v449.i16[0] = v448[0].i16[1];
      v212 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v212;
      v213 = v449.i16[4];
      v449.i16[4] = v448[0].i16[5];
      v214 = v448[0].i16[7];
      v448[0].i16[7] = v449.i16[6];
      v449.i16[6] = v214;
      v444.i16[2] = v447.i16[0];
      v447.i16[0] = v200;
      v215 = v444.i16[3];
      v444.i16[3] = v207;
      v447.i16[1] = v215;
      v444.i16[6] = v447.i16[4];
      v447.i16[4] = v202;
      v216 = v444.i16[7];
      v444.i16[7] = v209;
      v447.i16[5] = v216;
      v445[0].i16[2] = v448[0].i16[0];
      v448[0].i16[0] = v204;
      v217 = v445[0].i16[3];
      v445[0].i16[3] = v211;
      v448[0].i16[1] = v217;
      v445[0].i16[6] = v448[0].i16[4];
      v448[0].i16[4] = v206;
      v218 = v445[0].i16[7];
      v445[0].i16[7] = v213;
      v448[0].i16[5] = v218;
      goto LABEL_181;
    case 19:
      v219 = 0;
      v220 = 0;
      v449 = 0u;
      v447 = 0u;
      memset(v448, 0, sizeof(v448));
      v446 = 0u;
      v221 = 1;
      v444 = 0u;
      memset(v445, 0, sizeof(v445));
      do
      {
        v222 = 0;
        v223 = v221;
        v224 = 2 * v219;
        v225 = 16 * v219;
        do
        {
          v226 = 0;
          v227 = v225;
          do
          {
            if (!(v222 & 3 | v226))
              v220 = (__int16 *)((char *)v3->i16 + (int)((v224 + (v222 >> 2)) * v4));
            v228 = *v220++;
            *(__int16 *)((char *)v444.i16 + v227) = v228;
            ++v226;
            v227 += 32;
          }
          while (v226 != 3);
          ++v222;
          v225 += 2;
        }
        while (v222 != 8);
        v221 = 0;
        v219 = 1;
      }
      while ((v223 & 1) != 0);
      if (v5)
      {
        v229 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v229));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v229));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v229));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v229));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v229));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v229), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v229));
      }
      goto LABEL_181;
    case 21:
      v230 = v3[1];
      v444 = *v3;
      v447 = v230;
      v445[1] = *(uint16x8_t *)((char *)v3 + v4);
      v448[1] = *(uint16x8_t *)((char *)&v3[1] + v4);
      v231 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[0] = *v231;
      v448[0] = v231[1];
      v232 = (int16x8_t *)((char *)v3 + 3 * (int)v4);
      v446 = *v232;
      v449 = v232[1];
LABEL_171:
      if (v5)
      {
        v233 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v233));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v233));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v233));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v233));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v233));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v233));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v233));
        v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v233));
      }
LABEL_173:
      v234 = v444.i16[1];
      v444.i16[1] = v447.i16[0];
      v235 = v444.i16[3];
      v444.i16[3] = v447.i16[2];
      v236 = v444.i16[5];
      v444.i16[5] = v447.i16[4];
      v447.i16[4] = v236;
      v237 = v444.i16[7];
      v444.i16[7] = v447.i16[6];
      v447.i16[6] = v237;
      v238 = v445[0].i16[1];
      v445[0].i16[1] = v448[0].i16[0];
      v239 = v445[0].i16[3];
      v445[0].i16[3] = v448[0].i16[2];
      v240 = v445[0].i16[5];
      v445[0].i16[5] = v448[0].i16[4];
      v448[0].i16[4] = v240;
      v241 = v445[0].i16[7];
      v445[0].i16[7] = v448[0].i16[6];
      v448[0].i16[6] = v241;
      v242 = v445[1].i16[1];
      v445[1].i16[1] = v448[1].i16[0];
      v448[1].i16[0] = v242;
      v243 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v243;
      v244 = v448[1].i16[4];
      v448[1].i16[4] = v445[1].i16[5];
      v245 = v448[1].i16[6];
      v448[1].i16[6] = v445[1].i16[7];
      v246 = v446.i16[1];
      v446.i16[1] = v449.i16[0];
      v449.i16[0] = v246;
      v247 = v446.i16[3];
      v446.i16[3] = v449.i16[2];
      v449.i16[2] = v247;
      v248 = v449.i16[4];
      v449.i16[4] = v446.i16[5];
      v84 = v449.i16[6];
      v449.i16[6] = v446.i16[7];
      v249 = v445[1].i16[4];
      v445[1].i16[4] = v234;
      v447.i16[0] = v249;
      v445[1].i16[5] = v447.i16[1];
      v447.i16[1] = v244;
      v250 = v445[1].i16[6];
      v445[1].i16[6] = v235;
      v447.i16[2] = v250;
      v445[1].i16[7] = v447.i16[3];
      v447.i16[3] = v245;
      v251 = v446.i16[4];
      v446.i16[4] = v238;
      v448[0].i16[0] = v251;
      v446.i16[5] = v448[0].i16[1];
      v448[0].i16[1] = v248;
      v252 = v446.i16[6];
      v446.i16[6] = v239;
      v448[0].i16[2] = v252;
LABEL_174:
      v446.i16[7] = v448[0].i16[3];
      v448[0].i16[3] = v84;
      goto LABEL_181;
    case 23:
      v253 = v3[1];
      v444 = *v3;
      v447 = v253;
      v445[0] = *(uint16x8_t *)((char *)v3 + v4);
      v448[0] = *(uint16x8_t *)((char *)&v3[1] + v4);
      v254 = (uint16x8_t *)((char *)v3 + 2 * (int)v4);
      v445[1] = *v254;
      v448[1] = v254[1];
      v255 = (int16x8_t *)((char *)v3 + 3 * v4);
      v446 = *v255;
      v449 = v255[1];
      v23 = vbslq_s8((int8x16_t)vcltzq_s16(v444), vmvnq_s8((int8x16_t)v444), (int8x16_t)(*(_OWORD *)&v444 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v24 = vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[0]), vmvnq_s8((int8x16_t)v445[0]), (int8x16_t)(*(_OWORD *)v445 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
LABEL_176:
      v444 = (int16x8_t)v23;
      v445[0] = (uint16x8_t)v24;
      v445[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v445[1]), vmvnq_s8((int8x16_t)v445[1]), (int8x16_t)(*(_OWORD *)&v445[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v446 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v446), vmvnq_s8((int8x16_t)v446), (int8x16_t)(*(_OWORD *)&v446 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v447 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v447), vmvnq_s8((int8x16_t)v447), (int8x16_t)(*(_OWORD *)&v447 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v448[0] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[0]), vmvnq_s8((int8x16_t)v448[0]), (int8x16_t)(*(_OWORD *)v448 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v448[1] = (uint16x8_t)vbslq_s8((int8x16_t)vcltzq_s16((int16x8_t)v448[1]), vmvnq_s8((int8x16_t)v448[1]), (int8x16_t)(*(_OWORD *)&v448[1] | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
      v449 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v449), vmvnq_s8((int8x16_t)v449), (int8x16_t)(*(_OWORD *)&v449 | __PAIR128__(0x8000800080008000, 0x8000800080008000)));
LABEL_177:
      if (v5)
      {
        v256 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v5));
        v444 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v444.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v444), v256));
        v445[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[0].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[0]), v256));
        v445[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v445[1].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v445[1]), v256));
        v446 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v446.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v446), v256));
        v447 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v447.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v447), v256));
        v448[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[0].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[0]), v256));
        v448[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v448[1].i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16(v448[1]), v256));
        v449 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v449.i8), v256), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v449), v256));
      }
      v257 = v444.i16[2];
      v444.i16[2] = v447.i16[0];
      v447.i16[0] = v257;
      v258 = v444.i16[3];
      v259 = v444.i16[6];
      v444.i16[6] = v447.i16[4];
      v447.i16[4] = v259;
      v260 = v444.i16[7];
      v261 = v445[0].i16[2];
      v445[0].i16[2] = v448[0].i16[0];
      v448[0].i16[0] = v261;
      v262 = v445[0].i16[3];
      v263 = v445[0].i16[6];
      v445[0].i16[6] = v448[0].i16[4];
      v448[0].i16[4] = v263;
      v264 = v445[0].i16[7];
      v265 = v445[1].i16[2];
      v266 = v445[1].i16[3];
      v445[1].i16[3] = v448[1].i16[1];
      v448[1].i16[1] = v266;
      v267 = v445[1].i16[6];
      v268 = v445[1].i16[7];
      v445[1].i16[7] = v448[1].i16[5];
      v448[1].i16[5] = v268;
      v269 = v446.i16[2];
      v270 = v446.i16[3];
      v446.i16[3] = v449.i16[1];
      v449.i16[1] = v270;
      v271 = v446.i16[6];
      v272 = v446.i16[7];
      v446.i16[7] = v449.i16[5];
      v449.i16[5] = v272;
      v273 = v444.i16[1];
      v444.i16[1] = v445[1].i16[0];
      v445[1].i16[0] = v273;
      v444.i16[3] = v448[1].i16[0];
      v445[1].i16[2] = v447.i16[1];
      v274 = v444.i16[5];
      v444.i16[5] = v445[1].i16[4];
      v445[1].i16[4] = v274;
      v444.i16[7] = v448[1].i16[4];
      v445[1].i16[6] = v447.i16[5];
      v275 = v445[0].i16[1];
      v445[0].i16[1] = v446.i16[0];
      v446.i16[0] = v275;
      v445[0].i16[3] = v449.i16[0];
      v446.i16[2] = v448[0].i16[1];
      v276 = v445[0].i16[5];
      v445[0].i16[5] = v446.i16[4];
      v446.i16[4] = v276;
      v445[0].i16[7] = v449.i16[4];
      v446.i16[6] = v448[0].i16[5];
      v447.i16[1] = v265;
      v448[1].i16[0] = v258;
      v277 = v447.i16[3];
      v447.i16[3] = v448[1].i16[2];
      v448[1].i16[2] = v277;
      v447.i16[5] = v267;
      v448[1].i16[4] = v260;
      v278 = v447.i16[7];
      v447.i16[7] = v448[1].i16[6];
      v448[1].i16[6] = v278;
      v448[0].i16[1] = v269;
      v449.i16[0] = v262;
      v279 = v448[0].i16[3];
      v448[0].i16[3] = v449.i16[2];
      v449.i16[2] = v279;
      v448[0].i16[5] = v271;
      v449.i16[4] = v264;
LABEL_180:
      v280 = v448[0].i16[7];
      v448[0].i16[7] = v449.i16[6];
      v449.i16[6] = v280;
      goto LABEL_181;
    default:
      return 4294951891;
  }
  do
  {
    v405 = *v403;
    v403 += 4;
    v404 = v405;
    if ((unsigned __int16)(v405 + 2) >= 5u)
    {
      v407 = (unsigned __int16)v368;
      if ((unsigned __int16)v368 <= 0xFu)
      {
        if ((unsigned __int16)v375 <= 0xFu)
        {
          if (v385 <= 0xFu)
          {
            v408 = *(unsigned __int16 *)(a1 + 66);
            if (v408 <= 0xF)
            {
              *v2 = v402 + 64;
              v2[1] = *(_BYTE *)(a1 + 42) + 16 * *(_BYTE *)(a1 + 50);
              v412 = (unint64_t *)(v2 + 3);
              v2[2] = *(_BYTE *)(a1 + 58) + 16 * *(_BYTE *)(a1 + 66);
              goto LABEL_326;
            }
            goto LABEL_316;
          }
          if (v385 != 16)
            return 4294951894;
LABEL_315:
          v408 = *(unsigned __int16 *)(a1 + 66);
LABEL_316:
          if (v408 <= 0x10)
          {
            *v2 = v402 + 80;
            v409 = *(unsigned __int16 *)(a1 + 42) + (*(unsigned __int16 *)(a1 + 50) << 6);
            v410 = v409 + (*(unsigned __int16 *)(a1 + 58) << 12);
            v411 = v410 + (*(unsigned __int16 *)(a1 + 66) << 18);
            v2[1] = v409;
            v2[2] = BYTE1(v410);
            v412 = (unint64_t *)(v2 + 4);
            v2[3] = BYTE2(v411);
            goto LABEL_326;
          }
          return 4294951894;
        }
        v10 = 4294951894;
        if ((unsigned __int16)v375 != 16)
          return v10;
      }
      else
      {
        v10 = 4294951894;
        if (v407 != 16 || (unsigned __int16)v375 > 0x10u)
          return v10;
      }
      if (v385 > 0x10u)
        return v10;
      goto LABEL_315;
    }
    if (v404)
    {
      v399 = v398;
      ++v401;
    }
    v400 = 5 * v400 + v404 + 2;
    ++v398;
  }
  while (v398 != 4);
  if (v401 == 1)
  {
    v413 = *(unsigned __int16 *)(v281 + 8 * v399 + 2);
    if (v413 != 0xFFFF && v413 != 1)
      goto LABEL_325;
    v406 = ((v413 >> 11) & 0x10 | (32 * v399)) + v402 + 128;
LABEL_324:
    *v2 = v406;
    v412 = (unint64_t *)(v2 + 1);
  }
  else
  {
    if (!v401)
    {
      LOBYTE(v406) = v402 + 48;
      goto LABEL_324;
    }
LABEL_325:
    *v2 = ((v400 >> 4) & 0xF0) + v402;
    v412 = (unint64_t *)(v2 + 2);
    v2[1] = v400;
  }
LABEL_326:
  v415 = 0;
  while (2)
  {
    if ((v402 & 1) != 0)
    {
      v416 = a1 + v415;
      if (v6 <= 5)
      {
        LOWORD(v416) = *(_WORD *)(v416 + 46);
        goto LABEL_335;
      }
      v417 = *(__int16 *)(v416 + 48);
      if (v417 >= 0)
        LOWORD(v416) = *(_WORD *)(v416 + 48);
      else
        LODWORD(v416) = -v417;
      v418 = (v417 >> 9) & 0x40;
      if ((unsigned __int16)v416 > 0x3Fu)
      {
        if ((v416 & 0xC000) != 0)
        {
          v421 = *(unsigned __int16 *)(a1 + v415 + 46);
          *(_BYTE *)v412 = 0;
          v420 = (unint64_t *)((char *)v412 + 2);
          *((_BYTE *)v412 + 1) = v421;
          LODWORD(v416) = v421 >> 8;
          v419 = 3;
        }
        else
        {
          *(_BYTE *)v412 = v416 & 0x3F | v418 | 0x80;
          v420 = (unint64_t *)((char *)v412 + 1);
          LOWORD(v416) = (unsigned __int16)v416 >> 6;
          v419 = 2;
        }
      }
      else
      {
        LOBYTE(v416) = v418 + v416;
LABEL_335:
        v419 = 1;
        v420 = v412;
      }
      v412 = (unint64_t *)((char *)v412 + v419);
      *(_BYTE *)v420 = v416;
    }
    v402 >>= 1;
    v415 += 8;
    if (v415 != 32)
      continue;
    break;
  }
  if (!v412)
    return 4294951894;
  v422 = (const __int16 *)(a1 + 46);
  v423 = vld1q_dup_s16(v422);
  v444 = vsubq_s16(v444, v423);
  v445[0] = (uint16x8_t)vsubq_s16((int16x8_t)v445[0], v423);
  v424 = (const __int16 *)(a1 + 54);
  v425 = vld1q_dup_s16(v424);
  v445[1] = (uint16x8_t)vsubq_s16((int16x8_t)v445[1], v425);
  v446 = vsubq_s16(v446, v425);
  v426 = (const __int16 *)(a1 + 62);
  v427 = vld1q_dup_s16(v426);
  v447 = vsubq_s16(v447, v427);
  v448[0] = (uint16x8_t)vsubq_s16((int16x8_t)v448[0], v427);
  if ((_DWORD)v6 == 19
    || (v428 = (const __int16 *)(a1 + 70),
        v429 = vld1q_dup_s16(v428),
        v448[1] = (uint16x8_t)vsubq_s16((int16x8_t)v448[1], v429),
        v449 = vsubq_s16(v449, v429),
        (int)v6 > 16)
    || !*(_DWORD *)(a1 + 108))
  {
    v436 = vectorWritePacked(v412, (uint64_t)&v444, *(unsigned __int16 *)(a1 + 42));
    v437 = vectorWritePacked(v436, (uint64_t)v445, *(unsigned __int16 *)(a1 + 42));
    v438 = vectorWritePacked(v437, (uint64_t)v445[1].i64, *(unsigned __int16 *)(a1 + 50));
    v439 = vectorWritePacked(v438, (uint64_t)&v446, *(unsigned __int16 *)(a1 + 50));
    v440 = vectorWritePacked(v439, (uint64_t)&v447, *(unsigned __int16 *)(a1 + 58));
    v412 = vectorWritePacked(v440, (uint64_t)v448, *(unsigned __int16 *)(a1 + 58));
    if ((_DWORD)v6 != 19)
    {
      v441 = vectorWritePacked(v412, (uint64_t)v448[1].i64, *(unsigned __int16 *)(a1 + 66));
      v412 = vectorWritePacked(v441, (uint64_t)&v449, *(unsigned __int16 *)(a1 + 66));
    }
  }
  else
  {
    v430 = 0;
    v431 = (uint16x4_t *)v445;
    do
    {
      v432 = *(unsigned __int16 *)(v281 + v430);
      v433 = *(_DWORD *)(a1 + 108) * v432;
      v443 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v433 / 8));
      *(int16x8_t *)v431[-2].i8 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(v431[-2]), v443), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v431[-2].i8), v443));
      v434 = v432 - v433 / 8;
      v435 = vectorWritePacked(v412, (uint64_t)&v431[-2], v434);
      *(int16x8_t *)v431->i8 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*v431), v443), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v431->i8), v443));
      v412 = vectorWritePacked(v435, (uint64_t)v431, v434);
      v431 += 4;
      v430 += 8;
    }
    while (v430 != 32);
  }
  v10 = 0;
  *(_QWORD *)(a1 + 16) = v412;
  return v10;
}

unsigned int *vectorload_4x16_packed10(unsigned int *a1, int a2, int a3, _WORD *a4)
{
  vectorload_1x16_packed10(a1, a2, a4, a4 + 32);
  vectorload_1x16_packed10((unsigned int *)((char *)a1 + a3), a2, a4 + 8, a4 + 40);
  vectorload_1x16_packed10((unsigned int *)((char *)a1 + 2 * a3), a2, a4 + 16, a4 + 48);
  return vectorload_1x16_packed10((unsigned int *)((char *)a1 + 3 * a3), a2, a4 + 24, a4 + 56);
}

double SlimXDecodeBlocks_C(uint64_t a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int16x8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  unsigned int v22;
  unsigned __int16 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  __int16 v38;
  __int16 v39;
  unsigned __int8 *v40;
  int v41;
  uint16x4_t *v42;
  uint64_t i;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint32x4_t v48;
  int16x8_t v49;
  unsigned int v50;
  const __int16 *v51;
  int16x8_t v52;
  const __int16 *v53;
  int16x8_t v54;
  const __int16 *v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  unsigned int v59;
  uint32x4_t v60;
  int16x8_t v61;
  uint64_t v62;
  __int16 *v63;
  char v64;
  uint64_t v65;
  char v66;
  int v67;
  int16x8_t *v68;
  uint64_t v69;
  int16x8_t *v70;
  __int16 v71;
  const __int16 *v72;
  int16x8_t v73;
  int16x8_t v74;
  uint64_t v75;
  unsigned int v77;
  int16x8_t *v78;
  uint64_t j;
  uint16x4_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int16x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  int32x4_t v87;
  int8x8_t v88;
  int32x4_t v89;
  int16x4_t v90;
  uint32x4_t v91;
  uint64_t v92;
  uint32x4_t v93;
  int32x4_t v94;
  int8x8_t v95;
  int32x4_t v96;
  int16x4_t v97;
  uint32x4_t v98;
  uint64_t v99;
  uint32x4_t v100;
  int32x4_t v101;
  int8x8_t v102;
  int32x4_t v103;
  int16x4_t v104;
  uint32x4_t v105;
  uint64_t v106;
  uint32x4_t v107;
  int32x4_t v108;
  int8x8_t v109;
  int32x4_t v110;
  int16x4_t v111;
  uint32x4_t v112;
  uint64_t v113;
  uint32x4_t v114;
  int32x4_t v115;
  int8x8_t v116;
  int32x4_t v117;
  int16x4_t v118;
  uint32x4_t v119;
  uint64_t v120;
  uint32x4_t v121;
  int32x4_t v122;
  int8x8_t v123;
  int32x4_t v124;
  int16x4_t v125;
  uint32x4_t v126;
  uint64_t v127;
  uint32x4_t v128;
  int32x4_t v129;
  int8x8_t v130;
  int32x4_t v131;
  int16x4_t v132;
  uint32x4_t v133;
  uint64_t v134;
  uint32x4_t v135;
  int32x4_t v136;
  int8x8_t v137;
  int32x4_t v138;
  int16x4_t v139;
  uint32x4_t v140;
  char *v141;
  char *v142;
  int16x8_t *v143;
  int16x8_t *v144;
  char *v145;
  __int16 v146;
  __int16 v147;
  __int16 v148;
  __int16 v149;
  __int16 v150;
  __int16 v151;
  __int16 v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  __int16 v156;
  __int16 v157;
  __int16 v158;
  __int16 v159;
  __int16 v160;
  __int16 v161;
  __int16 v162;
  __int16 v163;
  __int16 v164;
  __int16 v165;
  __int16 v166;
  __int16 v167;
  __int16 v168;
  __int16 v169;
  __int16 v170;
  __int16 v171;
  __int16 v172;
  __int16 v173;
  __int16 v174;
  __int16 v175;
  __int16 v176;
  __int16 v177;
  __int16 v178;
  __int16 v179;
  __int16 v180;
  __int16 v181;
  uint32x4_t v182;
  int16x8_t v183;
  __int8 *v184;
  int16x8_t *v185;
  uint64_t v186;
  int v187;
  int16x8_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int16 v196;
  __int16 v197;
  __int16 v198;
  __int16 v199;
  __int16 v200;
  __int16 v201;
  __int16 v202;
  __int16 v203;
  __int16 v204;
  __int16 v205;
  __int16 v206;
  __int16 v207;
  __int16 v208;
  __int16 v209;
  __int16 v210;
  __int16 v211;
  __int16 v212;
  __int16 v213;
  __int16 v214;
  __int16 v215;
  uint32x4_t v216;
  int16x8_t v217;
  __int8 *v218;
  int16x8_t *v219;
  uint64_t v220;
  int16x8_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint32x4_t v233;
  __int128 v234;
  uint64_t v235;
  uint64_t v236;
  uint32x4_t v237;
  int16x8_t v238;
  uint64_t v239;
  int v240;
  int16x8_t *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  __int8 *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  __int8 *v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  __int8 *v254;
  uint64_t v255;
  int16x8_t *v256;
  char *v257;
  int v258;
  __int8 *v259;
  __int8 *v260;
  int16x8_t *v261;
  __int16 v262;
  __int16 v263;
  __int16 v264;
  __int16 v265;
  __int16 v266;
  __int16 v267;
  __int16 v268;
  __int16 v269;
  __int16 v270;
  __int16 v271;
  __int16 v272;
  __int16 v273;
  __int16 v274;
  __int16 v275;
  __int16 v276;
  __int16 v277;
  __int16 v278;
  __int16 v279;
  __int16 v280;
  __int16 v281;
  __int16 v282;
  __int16 v283;
  __int16 v284;
  __int16 v285;
  uint32x4_t v286;
  __int8 *v287;
  __int8 *v288;
  uint64_t v289;
  int v290;
  __int16 v291;
  int16x8_t *v292;
  char *v293;
  __int16 v294;
  __int16 v295;
  __int16 v296;
  int16x8_t *v297;
  __int16 v298;
  __int16 v299;
  __int16 v300;
  __int16 v301;
  __int16 v302;
  __int16 v303;
  __int16 v304;
  __int16 v305;
  __int16 v306;
  __int16 v307;
  __int16 v308;
  __int16 v309;
  __int16 v310;
  __int16 v311;
  __int16 v312;
  __int16 v313;
  __int16 v314;
  __int16 v315;
  __int16 v316;
  __int16 v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  __int8 *v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  __int8 *v325;
  uint64_t v326;
  char *v327;
  uint64_t v328;
  int v329;
  __int8 *v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  int v334;
  __int16 v335;
  int16x8_t *v336;
  char *v337;
  __int16 v338;
  __int16 v339;
  __int16 v340;
  int16x8_t *v341;
  __int16 v342;
  __int16 v343;
  __int16 v344;
  __int16 v345;
  __int16 v346;
  __int16 v347;
  __int16 v348;
  __int16 v349;
  __int16 v350;
  __int16 v351;
  __int16 v352;
  __int16 v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  __int8 *v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  __int8 *v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  __int8 *v365;
  uint64_t v366;
  char *v367;
  __int16 v368;
  __int16 v369;
  __int16 v370;
  __int16 v371;
  __int16 v372;
  __int16 v373;
  __int16 v374;
  __int16 v375;
  char *v376;
  __int16 v377;
  __int16 v378;
  __int16 v379;
  __int16 v380;
  int16x8_t *v381;
  __int16 v382;
  __int16 v383;
  __int16 v384;
  __int16 v385;
  __int16 v386;
  __int16 v387;
  __int16 v388;
  __int16 v389;
  __int16 v390;
  __int16 v391;
  __int16 v392;
  __int16 v393;
  uint32x4_t v394;
  int16x8_t v395;
  uint64_t v396;
  int v397;
  int16x8_t *v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  __int8 *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  __int8 *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  __int8 *v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  int16x8_t *v414;
  uint64_t v415;
  _DWORD *v416;
  __int16 v417;
  __int16 v418;
  __int16 v419;
  __int16 v420;
  __int16 v421;
  __int16 v422;
  __int16 v423;
  __int16 v424;
  __int16 v425;
  __int16 v426;
  __int16 v427;
  __int16 v428;
  __int16 v429;
  __int16 v430;
  __int16 v431;
  __int16 v432;
  __int16 v433;
  __int16 v434;
  __int16 v435;
  __int16 v436;
  uint32x4_t v437;
  uint64_t v438;
  __int16 v439;
  __int16 v440;
  __int16 v441;
  __int16 v442;
  __int16 v443;
  __int16 v444;
  __int16 v445;
  __int16 v446;
  __int16 v447;
  __int16 v448;
  __int16 v449;
  __int16 v450;
  __int16 v451;
  __int16 v452;
  __int16 v453;
  __int16 v454;
  __int16 v455;
  __int16 v456;
  __int16 v457;
  __int16 v458;
  uint32x4_t v459;
  __int8 *v460;
  __int8 *v461;
  __int16 v462;
  __int16 v463;
  __int16 v464;
  __int16 v465;
  __int16 v466;
  __int16 v467;
  __int16 v468;
  __int16 v469;
  __int16 v470;
  __int16 v471;
  __int16 v472;
  __int16 v473;
  __int16 v474;
  __int16 v475;
  __int16 v476;
  __int16 v477;
  __int16 v478;
  __int16 v479;
  __int16 v480;
  __int16 v481;
  __int16 v482;
  __int16 v483;
  __int16 v484;
  __int16 v485;
  uint32x4_t v486;
  __int8 *v487;
  __int8 *v488;
  unsigned int v490;
  int16x8_t v491;
  uint32x4_t v492;
  int16x8_t v493;
  _BYTE v494[32];
  int16x8_t v495;
  int16x8_t v496;
  _BYTE v497[32];
  int16x8_t v498;
  uint64_t v499;

  v499 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 108);
  if (v2 >= 8)
    goto LABEL_359;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (v4 >= v3)
    goto LABEL_359;
  v5 = *(int16x8_t **)a1;
  v6 = *(int *)(a1 + 12);
  v7 = a1 + 42;
  v490 = *(_DWORD *)(a1 + 36);
  v8 = *(unsigned int *)(a1 + 32);
  v9 = predictionPattern_0[v8];
  v10 = v3 - v4;
  v11 = (unsigned __int8 *)(v4 + 2);
  while (1)
  {
    v12 = v11 - 1;
    *(_QWORD *)(a1 + 16) = v11 - 1;
    v13 = *(v11 - 2);
    v14 = v13 & 0xF;
    v15 = v13 >> 4;
    if (v13 >> 4 != 6)
      break;
    if (v14 < 8)
    {
      v16 = 10 - v14;
      if ((v13 & 0xF) == 0)
        v16 = 0;
      *(_DWORD *)(a1 + 108) = v14;
      *(_DWORD *)(a1 + 112) = v16;
      ++v11;
      v2 = v13 & 0xF;
      if (--v10)
        continue;
    }
    goto LABEL_359;
  }
  switch(v15)
  {
    case 0u:
    case 1u:
    case 2u:
      if ((unint64_t)v12 >= v3)
        goto LABEL_359;
      *(_QWORD *)(a1 + 16) = v11;
      v17 = *(v11 - 1) | (unsigned __int16)((_WORD)v15 << 8);
      v18 = v17;
      v19 = v17 % 5u;
      *(_WORD *)(a1 + 68) = v17 % 5u;
      v20 = (v17 / 5u) % 5u;
      *(_WORD *)(a1 + 60) = v20;
      v21 = ((((unsigned __int16)(v17 - ((18351 * v18) >> 16)) >> 1) + ((18351 * v18) >> 16)) >> 4)
          % 5u;
      *(_WORD *)(a1 + 52) = v21;
      v22 = (((unsigned __int16)(v17 - ((1573 * v18) >> 16)) >> 1) + ((1573 * v18) >> 16)) >> 6;
      if (v18 >= 0x271)
        LOWORD(v22) = v22 - 5;
      *(_WORD *)(a1 + 44) = v22;
LABEL_25:
      v23 = v22 + *(_WORD *)(v7 + ((v9 >> 9) & 0x7FFFF8)) - 2;
      *(_WORD *)(a1 + 42) = v23;
      LOWORD(v24) = v21 + *(_WORD *)(v7 + 8 * ((v9 >> 8) & 0xF)) - 2;
      *(_WORD *)(a1 + 50) = v24;
      LOWORD(v25) = v20 + *(_WORD *)(v7 + 8 * (v9 >> 4)) - 2;
      *(_WORD *)(a1 + 58) = v25;
      LOWORD(v26) = v19 + *(_WORD *)(v7 + 8 * (v9 & 0xF)) - 2;
      *(_WORD *)(a1 + 66) = v26;
      goto LABEL_26;
    case 3u:
      v23 = *(_WORD *)(v7 + ((v9 >> 9) & 0x7FFFF8));
      *(_WORD *)(a1 + 42) = v23;
      LOWORD(v24) = *(_WORD *)(v7 + 8 * ((v9 >> 8) & 0xF));
      *(_WORD *)(a1 + 50) = v24;
      LOWORD(v25) = *(_WORD *)(v7 + 8 * (v9 >> 4));
      *(_WORD *)(a1 + 58) = v25;
      LOWORD(v26) = *(_WORD *)(v7 + 8 * (v9 & 0xF));
      goto LABEL_23;
    case 4u:
      if ((unint64_t)v12 >= v3)
        goto LABEL_359;
      *(_QWORD *)(a1 + 16) = v11;
      v27 = *(v11 - 1);
      v23 = v27 & 0xF;
      *(_WORD *)(a1 + 42) = v23;
      v24 = v27 >> 4;
      *(_WORD *)(a1 + 50) = v24;
      if ((unint64_t)v11 >= v3)
        goto LABEL_359;
      v12 = v11 + 1;
      *(_QWORD *)(a1 + 16) = v11 + 1;
      v28 = *v11;
      LOWORD(v25) = v28 & 0xF;
      *(_WORD *)(a1 + 58) = v25;
      v26 = v28 >> 4;
      goto LABEL_23;
    case 5u:
      if ((unint64_t)v12 >= v3)
        goto LABEL_359;
      *(_QWORD *)(a1 + 16) = v11;
      if ((unint64_t)v11 >= v3)
        goto LABEL_359;
      v29 = *(v11 - 1);
      *(_QWORD *)(a1 + 16) = v11 + 1;
      if ((unint64_t)(v11 + 1) >= v3)
        goto LABEL_359;
      v30 = *v11;
      v12 = v11 + 2;
      *(_QWORD *)(a1 + 16) = v11 + 2;
      v31 = v11[1];
      v23 = v29 & 0x3F;
      *(_WORD *)(a1 + 42) = v23;
      v24 = ((v29 & 0xFFFF00FF | (v30 << 8)) >> 6) & 0x3F;
      *(_WORD *)(a1 + 50) = v24;
      v25 = (((v30 << 8) | (v31 << 16)) >> 12) & 0x3F;
      *(_WORD *)(a1 + 58) = (((v30 << 8) | (v31 << 16)) >> 12) & 0x3F;
      v26 = v31 >> 2;
LABEL_23:
      *(_WORD *)(a1 + 66) = v26;
      v11 = v12;
LABEL_26:
      if (v8 >= 6)
        v32 = 16;
      else
        v32 = 8;
      if (v32 < v23 || v32 < (unsigned __int16)v24 || v32 < (unsigned __int16)v25 || v32 < (unsigned __int16)v26)
        goto LABEL_359;
      v33 = v23;
      v34 = 12;
      v35 = 46;
      break;
    case 7u:
      goto LABEL_359;
    default:
      *(_WORD *)(a1 + 68) = 2;
      *(_WORD *)(a1 + 60) = 2;
      *(_WORD *)(a1 + 52) = 2;
      *(_WORD *)(a1 + 44) = 2;
      *(_WORD *)(v7 + 8 * ((v13 >> 5) & 3) + 2) = (2 * ((v13 & 0x10) != 0)) ^ 3;
      LOWORD(v22) = *(_WORD *)(a1 + 44);
      v21 = *(_WORD *)(a1 + 52);
      v20 = *(_WORD *)(a1 + 60);
      v19 = *(_WORD *)(a1 + 68);
      --v11;
      goto LABEL_25;
  }
  do
  {
    if ((v14 & 1) == 0)
    {
      LOWORD(v36) = 0;
LABEL_36:
      *(_WORD *)(a1 + v35) = *(_WORD *)(v7 + 8 * ((v9 >> v34) & 3) + 4) + v36;
      v37 = v11;
      goto LABEL_49;
    }
    if ((unint64_t)v11 >= v3)
      goto LABEL_359;
    v37 = v11 + 1;
    *(_QWORD *)(a1 + 16) = v11 + 1;
    v38 = *v11;
    if (v8 > 5)
    {
      if (*v11)
      {
        if ((v38 & 0x80) != 0)
        {
          if ((unint64_t)v37 >= v3)
            goto LABEL_359;
          v40 = v11 + 2;
          *(_QWORD *)(a1 + 16) = v11 + 2;
          v41 = v38 & 0x3F | (v11[1] << 6);
          if ((v38 & 0x40) != 0)
            v36 = -v41;
          else
            LOWORD(v36) = v41;
          v11 = v40;
        }
        else
        {
          if ((v38 & 0x40) != 0)
            v36 = -(v38 & 0x3F);
          else
            LOWORD(v36) = v38 & 0x3F;
          ++v11;
        }
        goto LABEL_36;
      }
      if ((unint64_t)v37 >= v3)
        goto LABEL_359;
      *(_QWORD *)(a1 + 16) = v11 + 2;
      v39 = v11[1];
      *(_WORD *)(a1 + v35) = v39;
      if ((unint64_t)(v11 + 2) >= v3)
        goto LABEL_359;
      v37 = v11 + 3;
      *(_QWORD *)(a1 + 16) = v11 + 3;
      *(_WORD *)(a1 + v35) = v39 | (v11[2] << 8);
    }
    else
    {
      *(_WORD *)(a1 + v35) = v38;
    }
LABEL_49:
    v14 >>= 1;
    v35 += 8;
    v34 -= 4;
    v11 = v37;
  }
  while (v35 != 78);
  if (v8 <= 0x10 && v2)
  {
    v42 = (uint16x4_t *)&v493;
    for (i = 42; i != 74; i += 8)
    {
      v44 = *(unsigned __int16 *)(a1 + i);
      v45 = *(_DWORD *)(a1 + 108) * v44 + 7;
      v46 = *(_DWORD *)(a1 + 108) * v44 / 8;
      v47 = v44 - v46;
      vectorReadPacked(a1, (uint64_t)v42, v44 - v46);
      v48 = (uint32x4_t)vdupq_n_s32(v46);
      v49 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*v42), v48), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v42->i8), v48));
      if (v45 >= 0xF)
        v50 = 1 << (v46 - 1);
      else
        v50 = 0;
      v491 = vdupq_n_s16(v50);
      v492 = v48;
      *(int16x8_t *)v42->i8 = vaddq_s16(v491, v49);
      vectorReadPacked(a1, (uint64_t)&v42[2], v47);
      *(int16x8_t *)v42[2].i8 = vaddq_s16(v491, vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(v42[2]), v492), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v42[2].i8), v492)));
      v42 += 4;
    }
  }
  else
  {
    vectorReadPacked(a1, (uint64_t)&v493, v33);
    vectorReadPacked(a1, (uint64_t)v494, *(unsigned __int16 *)(a1 + 42));
    vectorReadPacked(a1, (uint64_t)&v494[16], *(unsigned __int16 *)(a1 + 50));
    vectorReadPacked(a1, (uint64_t)&v495, *(unsigned __int16 *)(a1 + 50));
    vectorReadPacked(a1, (uint64_t)&v496, *(unsigned __int16 *)(a1 + 58));
    vectorReadPacked(a1, (uint64_t)v497, *(unsigned __int16 *)(a1 + 58));
    if (*(_DWORD *)(a1 + 32) != 19)
    {
      vectorReadPacked(a1, (uint64_t)&v497[16], *(unsigned __int16 *)(a1 + 66));
      vectorReadPacked(a1, (uint64_t)&v498, *(unsigned __int16 *)(a1 + 66));
    }
  }
  v51 = (const __int16 *)(a1 + 46);
  v52 = vld1q_dup_s16(v51);
  v53 = (const __int16 *)(a1 + 54);
  v54 = vld1q_dup_s16(v53);
  v493 = vaddq_s16(v493, v52);
  *(int16x8_t *)v494 = vaddq_s16(*(int16x8_t *)v494, v52);
  *(int16x8_t *)&v494[16] = vaddq_s16(*(int16x8_t *)&v494[16], v54);
  v495 = vaddq_s16(v495, v54);
  v55 = (const __int16 *)(a1 + 62);
  v56 = vld1q_dup_s16(v55);
  v57 = vaddq_s16(v496, v56);
  v58 = vaddq_s16(*(int16x8_t *)v497, v56);
  v496 = v57;
  *(int16x8_t *)v497 = v58;
  v59 = *(_DWORD *)(a1 + 32);
  if (v59 == 19)
  {
    if (!*(_DWORD *)(a1 + 108))
    {
LABEL_68:
      if (v490)
      {
        v60 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v60), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v60));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v60), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v60));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v60), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v60));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v60), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v60));
        v61 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v60), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v60));
        v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v60), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v60));
        v496 = v61;
        *(int16x8_t *)v497 = v58;
      }
      v62 = 0;
      v63 = 0;
      v64 = 1;
      do
      {
        v65 = 0;
        v66 = v64;
        v67 = 2 * v62;
        v68 = &v493 + v62;
        do
        {
          v69 = 0;
          v70 = v68;
          do
          {
            if (!(v65 & 3 | v69))
              v63 = (__int16 *)((char *)v5->i16 + (int)((v67 + (v65 >> 2)) * v6));
            v71 = v70->i16[0];
            v70 += 2;
            *v63++ = v71;
            ++v69;
          }
          while (v69 != 3);
          ++v65;
          v68 = (int16x8_t *)((char *)v68 + 2);
        }
        while (v65 != 8);
        v64 = 0;
        v62 = 1;
      }
      while ((v66 & 1) != 0);
      return *(double *)v58.i64;
    }
LABEL_102:
    v81 = *(_DWORD *)(a1 + 112);
    if (v81)
    {
      v82 = 0;
      v83 = 1 << (v81 - 1);
      *(int16x4_t *)v58.i8 = vdup_n_s16(v83 - 1);
      v84 = vdup_n_s16(v83);
      v85 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v81 - 1));
      v86.i64[0] = 0x100000001;
      v86.i64[1] = 0x100000001;
      v87.i64[0] = -1;
      v87.i64[1] = -1;
      do
      {
        v88 = *(int8x8_t *)&v493.i8[v82 * 2];
        v89 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v88), v85);
        v90 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v89, v86));
        v91 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v88, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v89, v87));
        if ((v90.i8[0] & 1) != 0)
          v493.i16[v82] = (v91.u16[0] >> v81) + v91.i16[0];
        if ((v90.i8[2] & 1) != 0)
          v493.i16[v82 + 1] = (v91.u16[2] >> v81) + v91.i16[2];
        if ((v90.i8[4] & 1) != 0)
          v493.i16[v82 + 2] = (v91.u16[4] >> v81) + v91.i16[4];
        if ((v90.i8[6] & 1) != 0)
          v493.i16[v82 + 3] = (v91.u16[6] >> v81) + v91.i16[6];
        v82 += 4;
      }
      while (v82 != 8);
      v92 = 0;
      v93.i64[0] = 0x100000001;
      v93.i64[1] = 0x100000001;
      v94.i64[0] = -1;
      v94.i64[1] = -1;
      do
      {
        v95 = *(int8x8_t *)((char *)&v493 + v92 + 16);
        v96 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v95), v85);
        v97 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v96, v93));
        v98 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v95, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v96, v94));
        if ((v97.i8[0] & 1) != 0)
          *(_WORD *)((char *)&v493 + v92 + 16) = (v98.u16[0] >> v81) + v98.i16[0];
        if ((v97.i8[2] & 1) != 0)
          *(_WORD *)&v494[v92 + 2] = (v98.u16[2] >> v81) + v98.i16[2];
        if ((v97.i8[4] & 1) != 0)
          *(_WORD *)&v494[v92 + 4] = (v98.u16[4] >> v81) + v98.i16[4];
        if ((v97.i8[6] & 1) != 0)
          *(_WORD *)&v494[v92 + 6] = (v98.u16[6] >> v81) + v98.i16[6];
        v92 += 8;
      }
      while (v92 != 16);
      v99 = 0;
      v100.i64[0] = 0x100000001;
      v100.i64[1] = 0x100000001;
      v101.i64[0] = -1;
      v101.i64[1] = -1;
      do
      {
        v102 = *(int8x8_t *)&v494[v99 + 16];
        v103 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v102), v85);
        v104 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v103, v100));
        v105 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v102, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v103, v101));
        if ((v104.i8[0] & 1) != 0)
          *(_WORD *)&v494[v99 + 16] = (v105.u16[0] >> v81) + v105.i16[0];
        if ((v104.i8[2] & 1) != 0)
          *(_WORD *)&v494[v99 + 18] = (v105.u16[2] >> v81) + v105.i16[2];
        if ((v104.i8[4] & 1) != 0)
          *(_WORD *)&v494[v99 + 20] = (v105.u16[4] >> v81) + v105.i16[4];
        if ((v104.i8[6] & 1) != 0)
          *(_WORD *)&v494[v99 + 22] = (v105.u16[6] >> v81) + v105.i16[6];
        v99 += 8;
      }
      while (v99 != 16);
      v106 = 0;
      v107.i64[0] = 0x100000001;
      v107.i64[1] = 0x100000001;
      v108.i64[0] = -1;
      v108.i64[1] = -1;
      do
      {
        v109 = *(int8x8_t *)&v495.i8[v106 * 2];
        v110 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v109), v85);
        v111 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v110, v107));
        v112 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v109, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v110, v108));
        if ((v111.i8[0] & 1) != 0)
          v495.i16[v106] = (v112.u16[0] >> v81) + v112.i16[0];
        if ((v111.i8[2] & 1) != 0)
          v495.i16[v106 + 1] = (v112.u16[2] >> v81) + v112.i16[2];
        if ((v111.i8[4] & 1) != 0)
          v495.i16[v106 + 2] = (v112.u16[4] >> v81) + v112.i16[4];
        if ((v111.i8[6] & 1) != 0)
          v495.i16[v106 + 3] = (v112.u16[6] >> v81) + v112.i16[6];
        v106 += 4;
      }
      while (v106 != 8);
      v113 = 0;
      v114.i64[0] = 0x100000001;
      v114.i64[1] = 0x100000001;
      v115.i64[0] = -1;
      v115.i64[1] = -1;
      do
      {
        v116 = *(int8x8_t *)&v496.i8[v113 * 2];
        v117 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v116), v85);
        v118 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v117, v114));
        v119 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v116, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v117, v115));
        if ((v118.i8[0] & 1) != 0)
          v496.i16[v113] = (v119.u16[0] >> v81) + v119.i16[0];
        if ((v118.i8[2] & 1) != 0)
          v496.i16[v113 + 1] = (v119.u16[2] >> v81) + v119.i16[2];
        if ((v118.i8[4] & 1) != 0)
          v496.i16[v113 + 2] = (v119.u16[4] >> v81) + v119.i16[4];
        if ((v118.i8[6] & 1) != 0)
          v496.i16[v113 + 3] = (v119.u16[6] >> v81) + v119.i16[6];
        v113 += 4;
      }
      while (v113 != 8);
      v120 = 0;
      v121.i64[0] = 0x100000001;
      v121.i64[1] = 0x100000001;
      v122.i64[0] = -1;
      v122.i64[1] = -1;
      do
      {
        v123 = *(int8x8_t *)&v497[v120];
        v124 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v123), v85);
        v125 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v124, v121));
        v126 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v123, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v124, v122));
        if ((v125.i8[0] & 1) != 0)
          *(_WORD *)&v497[v120] = (v126.u16[0] >> v81) + v126.i16[0];
        if ((v125.i8[2] & 1) != 0)
          *(_WORD *)&v497[v120 + 2] = (v126.u16[2] >> v81) + v126.i16[2];
        if ((v125.i8[4] & 1) != 0)
          *(_WORD *)&v497[v120 + 4] = (v126.u16[4] >> v81) + v126.i16[4];
        if ((v125.i8[6] & 1) != 0)
          *(_WORD *)&v497[v120 + 6] = (v126.u16[6] >> v81) + v126.i16[6];
        v120 += 8;
      }
      while (v120 != 16);
      v127 = 0;
      v128.i64[0] = 0x100000001;
      v128.i64[1] = 0x100000001;
      v129.i64[0] = -1;
      v129.i64[1] = -1;
      do
      {
        v130 = *(int8x8_t *)&v497[v127 + 16];
        v131 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v130), v85);
        v132 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v131, v128));
        v133 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v130, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v131, v129));
        if ((v132.i8[0] & 1) != 0)
          *(_WORD *)&v497[v127 + 16] = (v133.u16[0] >> v81) + v133.i16[0];
        if ((v132.i8[2] & 1) != 0)
          *(_WORD *)&v497[v127 + 18] = (v133.u16[2] >> v81) + v133.i16[2];
        if ((v132.i8[4] & 1) != 0)
          *(_WORD *)&v497[v127 + 20] = (v133.u16[4] >> v81) + v133.i16[4];
        if ((v132.i8[6] & 1) != 0)
          *(_WORD *)&v497[v127 + 22] = (v133.u16[6] >> v81) + v133.i16[6];
        v127 += 8;
      }
      while (v127 != 16);
      v134 = 0;
      v135.i64[0] = 0x100000001;
      v135.i64[1] = 0x100000001;
      v136.i64[0] = -1;
      v136.i64[1] = -1;
      do
      {
        v137 = *(int8x8_t *)&v498.i8[v134 * 2];
        v138 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)v137), v85);
        v139 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v138, v135));
        v140 = vshlq_u32(vmovl_u16((uint16x4_t)vadd_s16((int16x4_t)vand_s8(v137, *(int8x8_t *)v58.i8), v84)), (uint32x4_t)vaddq_s32(v138, v136));
        if ((v139.i8[0] & 1) != 0)
          v498.i16[v134] = (v140.u16[0] >> v81) + v140.i16[0];
        if ((v139.i8[2] & 1) != 0)
          v498.i16[v134 + 1] = (v140.u16[2] >> v81) + v140.i16[2];
        if ((v139.i8[4] & 1) != 0)
          v498.i16[v134 + 2] = (v140.u16[4] >> v81) + v140.i16[4];
        if ((v139.i8[6] & 1) != 0)
          v498.i16[v134 + 3] = (v140.u16[6] >> v81) + v140.i16[6];
        v134 += 4;
      }
      while (v134 != 8);
    }
  }
  else
  {
    v72 = (const __int16 *)(a1 + 70);
    v73 = vld1q_dup_s16(v72);
    v74 = vaddq_s16(*(int16x8_t *)&v497[16], v73);
    v58 = vaddq_s16(v498, v73);
    *(int16x8_t *)&v497[16] = v74;
    v498 = v58;
    if (*(_DWORD *)(a1 + 108))
    {
      if (v59 > 0x10)
        goto LABEL_102;
      v75 = 0;
      if (v59 >= 0xC || v59 == 6)
        v77 = -1;
      else
        v77 = 1023;
      if (v59 < 6)
        v77 = 255;
      *(int16x4_t *)v58.i8 = vdup_n_s16(v77);
      v78 = &v493;
      do
      {
        for (j = 0; j != 8; j += 4)
        {
          v80 = vcgt_u16(*(uint16x4_t *)&v78->i8[j * 2], *(uint16x4_t *)v58.i8);
          if ((v80.i8[0] & 1) != 0)
            v78->i16[j] = v77;
          if ((v80.i8[2] & 1) != 0)
            v78->i16[j + 1] = v77;
          if ((v80.i8[4] & 1) != 0)
            v78->i16[j + 2] = v77;
          if ((v80.i8[6] & 1) != 0)
            v78->i16[j + 3] = v77;
        }
        ++v75;
        ++v78;
      }
      while (v75 != 8);
    }
  }
  v141 = v494;
  v142 = &v494[16];
  v143 = &v495;
  v144 = &v496;
  v145 = v497;
  switch(v59)
  {
    case 0u:
    case 7u:
      *(_QWORD *)&v234 = v495.i64[0];
      *((_QWORD *)&v234 + 1) = v493.i64[1];
      v235 = *(_QWORD *)&v494[8];
      v493.i64[1] = *(_QWORD *)&v494[16];
      *(_OWORD *)&v494[8] = v234;
      v58.i64[0] = v496.i64[1];
      v236 = *(_QWORD *)&v497[8];
      v495.i64[0] = v235;
      v496.i64[1] = *(_QWORD *)&v497[16];
      *(_QWORD *)&v234 = v498.i64[0];
      *((_QWORD *)&v234 + 1) = v58.i64[0];
      *(_OWORD *)&v497[8] = v234;
      v498.i64[0] = v236;
      goto LABEL_247;
    case 1u:
    case 8u:
    case 0xBu:
    case 0x10u:
    case 0x19u:
      v146 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v146;
      v147 = v493.i16[3];
      v493.i16[3] = *(_WORD *)&v494[20];
      *(_WORD *)&v494[20] = v147;
      v148 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v148;
      v149 = v493.i16[7];
      v493.i16[7] = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = v149;
      v150 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v150;
      v151 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v495.i16[2];
      v495.i16[2] = v151;
      v152 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v152;
      v153 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = v495.i16[6];
      v495.i16[6] = v153;
      v154 = v496.i16[1];
      v496.i16[1] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v154;
      v155 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v155;
      v156 = v496.i16[5];
      v496.i16[5] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v156;
      v157 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v157;
      v158 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v498.i16[0];
      v498.i16[0] = v158;
      v159 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v159;
      v160 = *(_WORD *)&v497[10];
      *(_WORD *)&v497[10] = v498.i16[4];
      v498.i16[4] = v160;
      v161 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v161;
LABEL_247:
      if (v490)
      {
        v237 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v237));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v237));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v237));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v237));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v237));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v237));
        v238 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v237), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v237));
        v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v237), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v237));
        *(int16x8_t *)&v497[16] = v238;
        v498 = v58;
      }
      if (v59 == 15)
      {
        v58 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        v493 = v58;
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      if (v59 <= 5)
      {
        v239 = 0;
        v240 = 0;
        v241 = &v493;
        do
        {
          v5->i8[v239] = v241->i8[0];
          v240 |= v241->u8[1];
          ++v239;
          v241 = (int16x8_t *)((char *)v241 + 2);
        }
        while ((_DWORD)v239 != 8);
        if (!v240)
        {
          v242 = 0;
          do
          {
            v5->i8[v242 + 8] = v144->i8[0];
            v240 |= v144->u8[1];
            ++v242;
            v144 = (int16x8_t *)((char *)v144 + 2);
          }
          while ((_DWORD)v242 != 8);
          if (!v240)
          {
            v243 = 0;
            v244 = 0;
            v245 = &v5->i8[v6];
            do
            {
              v245[v243] = *v141;
              v244 |= v141[1];
              ++v243;
              v141 += 2;
            }
            while ((_DWORD)v243 != 8);
            if (!v244)
            {
              v246 = 0;
              v247 = v245 + 8;
              do
              {
                v247[v246] = *v145;
                v244 |= v145[1];
                ++v246;
                v145 += 2;
              }
              while ((_DWORD)v246 != 8);
              if (!v244)
              {
                v248 = 0;
                v249 = &v5->i8[2 * v6];
                do
                {
                  v249[v248] = *v142;
                  v244 |= v142[1];
                  ++v248;
                  v142 += 2;
                }
                while ((_DWORD)v248 != 8);
                if (!v244)
                {
                  v250 = 0;
                  v251 = &v497[16];
                  v252 = v249 + 8;
                  do
                  {
                    v252[v250] = *v251;
                    v244 |= v251[1];
                    ++v250;
                    v251 += 2;
                  }
                  while ((_DWORD)v250 != 8);
                  if (!v244)
                  {
                    v253 = 0;
                    v254 = &v5->i8[3 * v6];
                    do
                    {
                      v254[v253] = v143->i8[0];
                      v244 |= v143->u8[1];
                      ++v253;
                      v143 = (int16x8_t *)((char *)v143 + 2);
                    }
                    while ((_DWORD)v253 != 8);
                    if (!v244)
                    {
                      v255 = 0;
                      v256 = &v498;
                      v257 = v254 + 8;
                      do
                      {
                        v257[v255] = v256->i8[0];
                        v244 |= v256->u8[1];
                        ++v255;
                        v256 = (int16x8_t *)((char *)v256 + 2);
                      }
                      while ((_DWORD)v255 != 8);
                      if (!v244)
                        return *(double *)v58.i64;
                    }
                  }
                }
              }
            }
          }
        }
LABEL_359:
        longjmp((int *)(a1 + 116), -15407);
      }
      if (v59 - 7 > 1)
      {
LABEL_279:
        *v5 = v493;
        v5[1] = v496;
        v259 = &v5->i8[v6];
        *(_OWORD *)v259 = *(_OWORD *)v494;
        *((_OWORD *)v259 + 1) = *(_OWORD *)v497;
        v260 = &v5->i8[2 * (int)v6];
        *(_OWORD *)v260 = *(_OWORD *)&v494[16];
        *((_OWORD *)v260 + 1) = *(_OWORD *)&v497[16];
        v261 = (int16x8_t *)((char *)v5 + 3 * (int)v6);
        *v261 = v495;
        v58 = v498;
LABEL_380:
        v261[1] = v58;
      }
      else
      {
        v258 = *(_DWORD *)(a1 + 8);
        vectorstore_1x16_packed10(v5->i32, v258, (unsigned __int16 *)&v493, (unsigned __int16 *)&v496);
        vectorstore_1x16_packed10((int *)((char *)v5->i32 + v6), v258, (unsigned __int16 *)v494, (unsigned __int16 *)v497);
        vectorstore_1x16_packed10((int *)((char *)v5->i32 + 2 * v6), v258, (unsigned __int16 *)&v494[16], (unsigned __int16 *)&v497[16]);
        vectorstore_1x16_packed10((int *)((char *)v5->i32 + 3 * (int)v6), v258, (unsigned __int16 *)&v495, (unsigned __int16 *)&v498);
      }
      return *(double *)v58.i64;
    case 2u:
    case 0xDu:
    case 0x14u:
      v162 = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v496.i16[0];
      v163 = v496.i16[1];
      v496.i16[1] = *(_WORD *)&v494[26];
      v164 = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = v496.i16[2];
      v165 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v494[30];
      v166 = v495.i16[4];
      v495.i16[4] = *(_WORD *)v497;
      v167 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v495.i16[5];
      v168 = v495.i16[6];
      v495.i16[6] = *(_WORD *)&v497[4];
      v169 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v495.i16[7];
      v170 = v493.i16[1];
      v493.i16[1] = v162;
      v496.i16[0] = v170;
      v171 = v493.i16[3];
      v493.i16[3] = v164;
      v496.i16[2] = v171;
      v172 = v493.i16[5];
      v493.i16[5] = v496.i16[4];
      v496.i16[4] = v172;
      v173 = v493.i16[7];
      v493.i16[7] = v496.i16[6];
      v496.i16[6] = v173;
      v174 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v166;
      *(_WORD *)v497 = v174;
      v175 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v168;
      *(_WORD *)&v497[4] = v175;
      v176 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v176;
      v177 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[12];
      *(_WORD *)&v497[12] = v177;
      v178 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v178;
      v179 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v179;
      *(_WORD *)&v494[26] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v163;
      *(_WORD *)&v494[30] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v165;
      v180 = v495.i16[1];
      v495.i16[1] = v498.i16[0];
      v498.i16[0] = v180;
      v181 = v495.i16[3];
      v495.i16[3] = v498.i16[2];
      v498.i16[2] = v181;
      v495.i16[5] = v498.i16[4];
      v498.i16[4] = v167;
      v495.i16[7] = v498.i16[6];
      v498.i16[6] = v169;
      if (v490)
      {
        v182 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v182));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v182));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v182));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v182));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v182));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v182));
        v183 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v182), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v182));
        v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v182), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v182));
        *(int16x8_t *)&v497[16] = v183;
        v498 = v58;
      }
      v184 = &v497[16];
      v185 = &v498;
      if (v59 == 13)
      {
        v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      else if (v59 == 2)
      {
        v186 = 0;
        v187 = 0;
        v188 = &v493;
        do
        {
          v5->i8[v186] = v188->i8[0];
          v187 |= v188->u8[1];
          ++v186;
          v188 = (int16x8_t *)((char *)v188 + 2);
        }
        while ((_DWORD)v186 != 8);
        if (v187)
          goto LABEL_359;
        v189 = 0;
        do
        {
          v5->i8[v6 + v189] = *v142;
          v187 |= v142[1];
          ++v189;
          v142 += 2;
        }
        while ((_DWORD)v189 != 8);
        if (v187)
          goto LABEL_359;
        v190 = 0;
        do
        {
          v5->i8[2 * v6 + v190] = *v141;
          v187 |= v141[1];
          ++v190;
          v141 += 2;
        }
        while ((_DWORD)v190 != 8);
        if (v187)
          goto LABEL_359;
        v191 = 0;
        do
        {
          v5->i8[3 * v6 + v191] = v143->i8[0];
          v187 |= v143->u8[1];
          ++v191;
          v143 = (int16x8_t *)((char *)v143 + 2);
        }
        while ((_DWORD)v191 != 8);
        if (v187)
          goto LABEL_359;
        v192 = 0;
        do
        {
          v5->i8[4 * v6 + v192] = v144->i8[0];
          v187 |= v144->u8[1];
          ++v192;
          v144 = (int16x8_t *)((char *)v144 + 2);
        }
        while ((_DWORD)v192 != 8);
        if (v187)
          goto LABEL_359;
        v193 = 0;
        do
        {
          v5->i8[5 * v6 + v193] = *v184;
          v187 |= v184[1];
          ++v193;
          v184 += 2;
        }
        while ((_DWORD)v193 != 8);
        if (v187)
          goto LABEL_359;
        v194 = 0;
        do
        {
          v5->i8[6 * (int)v6 + v194] = *v145;
          v187 |= v145[1];
          ++v194;
          v145 += 2;
        }
        while ((_DWORD)v194 != 8);
        if (v187)
          goto LABEL_359;
        v195 = 0;
        do
        {
          v5->i8[8 * v6 - v6 + v195] = v185->i8[0];
          v187 |= v185->u8[1];
          ++v195;
          v185 = (int16x8_t *)((char *)v185 + 2);
        }
        while ((_DWORD)v195 != 8);
LABEL_240:
        if (!v187)
          return *(double *)v58.i64;
        goto LABEL_359;
      }
      *v5 = v493;
      *(int16x8_t *)((char *)v5 + v6) = *(int16x8_t *)&v494[16];
      *(int16x8_t *)((char *)v5 + 2 * (int)v6) = *(int16x8_t *)v494;
      *(int16x8_t *)((char *)v5 + 3 * v6) = v495;
      *(int16x8_t *)((char *)v5 + 4 * (int)v6) = v496;
      *(int16x8_t *)((char *)v5 + 5 * v6) = *(int16x8_t *)&v497[16];
      v438 = 6 * (int)v6;
      v58 = *(int16x8_t *)v497;
LABEL_383:
      *(int16x8_t *)((char *)v5 + v438) = v58;
      v58.i64[0] = v498.i64[0];
      *(int16x8_t *)((char *)v5 + 8 * v6 - v6) = v498;
      return *(double *)v58.i64;
    case 3u:
    case 0xEu:
    case 0x16u:
      v196 = *(_WORD *)&v494[24];
      v197 = *(_WORD *)&v494[26];
      *(_DWORD *)&v494[24] = v496.i32[0];
      v198 = v496.i16[2];
      v199 = v496.i16[3];
      v496.i32[1] = *(_DWORD *)&v494[28];
      v200 = v495.i16[4];
      v201 = v495.i16[5];
      v495.i32[2] = *(_DWORD *)v497;
      v202 = *(_WORD *)&v497[4];
      *(_WORD *)&v497[4] = v495.i16[6];
      v203 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v495.i16[7];
      v204 = v493.i16[2];
      v493.i16[2] = v196;
      v496.i16[0] = v204;
      v205 = v493.i16[3];
      v493.i16[3] = v197;
      v496.i16[1] = v205;
      v206 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v206;
      v207 = v493.i16[7];
      v493.i16[7] = v496.i16[5];
      v496.i16[5] = v207;
      v208 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = v200;
      *(_WORD *)v497 = v208;
      v209 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v201;
      *(_WORD *)&v497[2] = v209;
      v210 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v210;
      v211 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[10];
      *(_WORD *)&v497[10] = v211;
      v212 = *(_WORD *)&v494[20];
      *(_WORD *)&v494[20] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v212;
      v213 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v213;
      *(_DWORD *)&v494[28] = *(_DWORD *)&v497[24];
      *(_WORD *)&v497[24] = v198;
      *(_WORD *)&v497[26] = v199;
      v214 = v495.i16[2];
      v495.i16[2] = v498.i16[0];
      v498.i16[0] = v214;
      v215 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v215;
      v495.i32[3] = v498.i32[2];
      v498.i16[4] = v202;
      v498.i16[5] = v203;
      if (v490)
      {
        v216 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v216));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v216));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v216));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v216));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v216));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v216));
        v217 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v216), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v216));
        v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v216), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v216));
        *(int16x8_t *)&v497[16] = v217;
        v498 = v58;
      }
      v218 = &v497[16];
      v219 = &v498;
      if (v59 == 14)
      {
        v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      else if (v59 == 3)
      {
        v220 = 0;
        v187 = 0;
        v221 = &v493;
        do
        {
          v5->i8[v220] = v221->i8[0];
          v187 |= v221->u8[1];
          ++v220;
          v221 = (int16x8_t *)((char *)v221 + 2);
        }
        while ((_DWORD)v220 != 8);
        if (v187)
          goto LABEL_359;
        v222 = 0;
        do
        {
          v5->i8[v6 + v222] = *v141;
          v187 |= v141[1];
          ++v222;
          v141 += 2;
        }
        while ((_DWORD)v222 != 8);
        if (v187)
          goto LABEL_359;
        v223 = 0;
        do
        {
          v5->i8[2 * v6 + v223] = *v142;
          v187 |= v142[1];
          ++v223;
          v142 += 2;
        }
        while ((_DWORD)v223 != 8);
        if (v187)
          goto LABEL_359;
        v224 = 0;
        do
        {
          v5->i8[3 * v6 + v224] = v143->i8[0];
          v187 |= v143->u8[1];
          ++v224;
          v143 = (int16x8_t *)((char *)v143 + 2);
        }
        while ((_DWORD)v224 != 8);
        if (v187)
          goto LABEL_359;
        v225 = 0;
        do
        {
          v5->i8[4 * v6 + v225] = v144->i8[0];
          v187 |= v144->u8[1];
          ++v225;
          v144 = (int16x8_t *)((char *)v144 + 2);
        }
        while ((_DWORD)v225 != 8);
        if (v187)
          goto LABEL_359;
        v226 = 0;
        do
        {
          v5->i8[5 * v6 + v226] = *v145;
          v187 |= v145[1];
          ++v226;
          v145 += 2;
        }
        while ((_DWORD)v226 != 8);
        if (v187)
          goto LABEL_359;
        v227 = 0;
        do
        {
          v5->i8[6 * (int)v6 + v227] = *v218;
          v187 |= v218[1];
          ++v227;
          v218 += 2;
        }
        while ((_DWORD)v227 != 8);
        if (v187)
          goto LABEL_359;
        v228 = 0;
        do
        {
          v5->i8[8 * v6 - v6 + v228] = v219->i8[0];
          v187 |= v219->u8[1];
          ++v228;
          v219 = (int16x8_t *)((char *)v219 + 2);
        }
        while ((_DWORD)v228 != 8);
        goto LABEL_240;
      }
      *v5 = v493;
      *(int16x8_t *)((char *)v5 + v6) = *(int16x8_t *)v494;
      *(int16x8_t *)((char *)v5 + 2 * (int)v6) = *(int16x8_t *)&v494[16];
      *(int16x8_t *)((char *)v5 + 3 * (int)v6) = v495;
      *(int16x8_t *)((char *)v5 + 4 * (int)v6) = v496;
      *(int16x8_t *)((char *)v5 + 5 * (int)v6) = *(int16x8_t *)v497;
      *(int16x8_t *)((char *)v5 + 6 * (int)v6) = *(int16x8_t *)&v497[16];
      v58.i64[0] = v498.i64[0];
      *(int16x8_t *)((char *)v5 + 7 * (int)v6) = v498;
      return *(double *)v58.i64;
    case 4u:
      v289 = 0;
      v290 = 0;
      v291 = *(_WORD *)&v494[20];
      v292 = &v493;
      v293 = &v497[16];
      v294 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v294;
      v295 = *(_WORD *)&v494[28];
      v296 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v296;
      v297 = &v498;
      v298 = v495.i16[2];
      v299 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v299;
      v300 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v300;
      v301 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      v302 = v495.i16[6];
      *(_WORD *)&v494[16] = v301;
      v303 = v493.i16[3];
      v493.i16[3] = *(_WORD *)&v497[16];
      *(_WORD *)&v494[20] = v303;
      v304 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v304;
      v305 = v493.i16[7];
      v493.i16[7] = *(_WORD *)&v497[24];
      *(_WORD *)&v494[28] = v305;
      v306 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v306;
      v307 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v498.i16[0];
      v495.i16[2] = v307;
      v308 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v308;
      v309 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = v498.i16[4];
      v495.i16[6] = v309;
      v310 = v496.i16[1];
      v496.i16[1] = v291;
      *(_WORD *)&v497[16] = v310;
      v311 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v311;
      v312 = v496.i16[5];
      v496.i16[5] = v295;
      *(_WORD *)&v497[24] = v312;
      v313 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v313;
      v314 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v298;
      v498.i16[0] = v314;
      v315 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v315;
      v316 = *(_WORD *)&v497[10];
      *(_WORD *)&v497[10] = v302;
      v498.i16[4] = v316;
      v317 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v317;
      do
      {
        v5->i8[v289] = v292->i8[0];
        v290 |= v292->u8[1];
        ++v289;
        v292 = (int16x8_t *)((char *)v292 + 2);
      }
      while ((_DWORD)v289 != 8);
      if (v290)
        goto LABEL_359;
      v318 = 0;
      do
      {
        v5->i8[v318 + 8] = v144->i8[0];
        v290 |= v144->u8[1];
        ++v318;
        v144 = (int16x8_t *)((char *)v144 + 2);
      }
      while ((_DWORD)v318 != 8);
      if (v290)
        goto LABEL_359;
      v319 = 0;
      v320 = 0;
      v321 = &v5->i8[v6];
      do
      {
        v321[v319] = *v141;
        v320 |= v141[1];
        ++v319;
        v141 += 2;
      }
      while ((_DWORD)v319 != 8);
      if (v320)
        goto LABEL_359;
      v322 = 0;
      v323 = v321 + 8;
      do
      {
        v323[v322] = *v145;
        v320 |= v145[1];
        ++v322;
        v145 += 2;
      }
      while ((_DWORD)v322 != 8);
      if (v320)
        goto LABEL_359;
      v324 = 0;
      v325 = &v5->i8[2 * (int)v6];
      do
      {
        v325[v324] = *v142;
        v320 |= v142[1];
        ++v324;
        v142 += 2;
      }
      while ((_DWORD)v324 != 8);
      if (v320)
        goto LABEL_359;
      v326 = 0;
      v327 = v325 + 8;
      do
      {
        v327[v326] = *v293;
        v320 |= v293[1];
        ++v326;
        v293 += 2;
      }
      while ((_DWORD)v326 != 8);
      if (v320)
        goto LABEL_359;
      v328 = 0;
      v329 = 0;
      v330 = &v5->i8[3 * v6];
      do
      {
        v330[v328] = v143->i8[0];
        v329 |= v143->u8[1];
        ++v328;
        v143 = (int16x8_t *)((char *)v143 + 2);
      }
      while ((_DWORD)v328 != 8);
      if (v329)
        goto LABEL_359;
      v331 = 0;
      v332 = v330 + 8;
      do
      {
        v332[v331] = v297->i8[0];
        v329 |= v297->u8[1];
        ++v331;
        v297 = (int16x8_t *)((char *)v297 + 2);
      }
      while ((_DWORD)v331 != 8);
      goto LABEL_358;
    case 5u:
      v333 = 0;
      v334 = 0;
      v335 = *(_WORD *)&v494[20];
      v336 = &v493;
      v337 = &v497[16];
      *(_WORD *)&v494[20] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v335;
      v338 = *(_WORD *)&v494[22];
      v339 = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v339;
      v340 = *(_WORD *)&v494[30];
      v341 = &v498;
      v342 = v495.i16[2];
      v495.i16[2] = v498.i16[0];
      v498.i16[0] = v342;
      v343 = v495.i16[3];
      v344 = v495.i16[6];
      v495.i16[6] = v498.i16[4];
      v498.i16[4] = v344;
      v345 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = v493.i16[0];
      v346 = v495.i16[7];
      v493.i16[0] = v345;
      *(_WORD *)&v494[22] = v493.i16[2];
      v493.i16[2] = *(_WORD *)&v497[18];
      v347 = *(_WORD *)&v494[26];
      *(_WORD *)&v494[26] = v493.i16[4];
      v493.i16[4] = v347;
      *(_WORD *)&v494[30] = v493.i16[6];
      v493.i16[6] = *(_WORD *)&v497[26];
      v348 = v495.i16[1];
      v495.i16[1] = *(_WORD *)v494;
      *(_WORD *)v494 = v348;
      v495.i16[3] = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = v498.i16[1];
      v349 = v495.i16[5];
      v495.i16[5] = *(_WORD *)&v494[8];
      *(_WORD *)&v494[8] = v349;
      v495.i16[7] = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = v498.i16[5];
      *(_WORD *)&v497[18] = v496.i16[0];
      v496.i16[0] = v338;
      v350 = *(_WORD *)&v497[22];
      *(_WORD *)&v497[22] = v496.i16[2];
      v496.i16[2] = v350;
      *(_WORD *)&v497[26] = v496.i16[4];
      v496.i16[4] = v340;
      v351 = *(_WORD *)&v497[30];
      *(_WORD *)&v497[30] = v496.i16[6];
      v496.i16[6] = v351;
      v498.i16[1] = *(_WORD *)v497;
      *(_WORD *)v497 = v343;
      v352 = v498.i16[3];
      v498.i16[3] = *(_WORD *)&v497[4];
      *(_WORD *)&v497[4] = v352;
      v498.i16[5] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v346;
      v353 = v498.i16[7];
      v498.i16[7] = *(_WORD *)&v497[12];
      *(_WORD *)&v497[12] = v353;
      do
      {
        v5->i8[v333] = v336->i8[0];
        v334 |= v336->u8[1];
        ++v333;
        v336 = (int16x8_t *)((char *)v336 + 2);
      }
      while ((_DWORD)v333 != 8);
      if (v334)
        goto LABEL_359;
      v354 = 0;
      do
      {
        v5->i8[v354 + 8] = v144->i8[0];
        v334 |= v144->u8[1];
        ++v354;
        v144 = (int16x8_t *)((char *)v144 + 2);
      }
      while ((_DWORD)v354 != 8);
      if (v334)
        goto LABEL_359;
      v355 = 0;
      v356 = 0;
      v357 = &v5->i8[v6];
      do
      {
        v357[v355] = *v141;
        v356 |= v141[1];
        ++v355;
        v141 += 2;
      }
      while ((_DWORD)v355 != 8);
      if (v356)
        goto LABEL_359;
      v358 = 0;
      v359 = v357 + 8;
      do
      {
        v359[v358] = *v145;
        v356 |= v145[1];
        ++v358;
        v145 += 2;
      }
      while ((_DWORD)v358 != 8);
      if (v356)
        goto LABEL_359;
      v360 = 0;
      v361 = &v5->i8[2 * (int)v6];
      do
      {
        v361[v360] = *v142;
        v356 |= v142[1];
        ++v360;
        v142 += 2;
      }
      while ((_DWORD)v360 != 8);
      if (v356)
        goto LABEL_359;
      v362 = 0;
      v363 = v361 + 8;
      do
      {
        v363[v362] = *v337;
        v356 |= v337[1];
        ++v362;
        v337 += 2;
      }
      while ((_DWORD)v362 != 8);
      if (v356)
        goto LABEL_359;
      v364 = 0;
      v329 = 0;
      v365 = &v5->i8[3 * v6];
      do
      {
        v365[v364] = v143->i8[0];
        v329 |= v143->u8[1];
        ++v364;
        v143 = (int16x8_t *)((char *)v143 + 2);
      }
      while ((_DWORD)v364 != 8);
      if (v329)
        goto LABEL_359;
      v366 = 0;
      v367 = v365 + 8;
      do
      {
        v367[v366] = v341->i8[0];
        v329 |= v341->u8[1];
        ++v366;
        v341 = (int16x8_t *)((char *)v341 + 2);
      }
      while ((_DWORD)v366 != 8);
      goto LABEL_358;
    case 6u:
      v368 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v368;
      v369 = v493.i16[3];
      v370 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v370;
      v371 = v493.i16[7];
      v372 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v372;
      v373 = *(_WORD *)&v494[6];
      v374 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v374;
      v375 = *(_WORD *)&v494[14];
      v376 = &v497[16];
      v377 = v496.i16[1];
      v378 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v378;
      v379 = v496.i16[5];
      v380 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v380;
      v381 = &v498;
      v382 = *(_WORD *)&v497[2];
      v383 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v383;
      v384 = *(_WORD *)&v497[10];
      v385 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v385;
      v386 = v493.i16[2];
      v493.i16[2] = v496.i16[0];
      v496.i16[0] = v386;
      v493.i16[3] = *(_WORD *)&v497[16];
      v496.i16[1] = *(_WORD *)&v494[20];
      v387 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v387;
      v493.i16[7] = *(_WORD *)&v497[24];
      v496.i16[5] = *(_WORD *)&v494[28];
      v388 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = *(_WORD *)v497;
      *(_WORD *)v497 = v388;
      *(_WORD *)&v494[6] = v498.i16[0];
      *(_WORD *)&v497[2] = v495.i16[2];
      v389 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v389;
      *(_WORD *)&v494[14] = v498.i16[4];
      *(_WORD *)&v497[10] = v495.i16[6];
      *(_WORD *)&v494[20] = v377;
      *(_WORD *)&v497[16] = v369;
      v390 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v390;
      *(_WORD *)&v494[28] = v379;
      *(_WORD *)&v497[24] = v371;
      v391 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v391;
      v495.i16[2] = v382;
      v498.i16[0] = v373;
      v392 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v392;
      v495.i16[6] = v384;
      v498.i16[4] = v375;
      v393 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v393;
      if (v490)
      {
        v394 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v394));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v394));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v394));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v394));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v394));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v394));
        v395 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v394), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v394));
        v58 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v394), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v394));
        *(int16x8_t *)&v497[16] = v395;
        v498 = v58;
      }
      v396 = 0;
      v397 = 0;
      v398 = &v493;
      do
      {
        v5->i8[v396] = v398->i8[0];
        v397 |= v398->u8[1];
        ++v396;
        v398 = (int16x8_t *)((char *)v398 + 2);
      }
      while ((_DWORD)v396 != 8);
      if (v397)
        goto LABEL_359;
      v399 = 0;
      do
      {
        v5->i8[v399 + 8] = v144->i8[0];
        v397 |= v144->u8[1];
        ++v399;
        v144 = (int16x8_t *)((char *)v144 + 2);
      }
      while ((_DWORD)v399 != 8);
      if (v397)
        goto LABEL_359;
      v400 = 0;
      v401 = 0;
      v402 = &v5->i8[v6];
      do
      {
        v402[v400] = *v141;
        v401 |= v141[1];
        ++v400;
        v141 += 2;
      }
      while ((_DWORD)v400 != 8);
      if (v401)
        goto LABEL_359;
      v403 = 0;
      v404 = v402 + 8;
      do
      {
        v404[v403] = *v145;
        v401 |= v145[1];
        ++v403;
        v145 += 2;
      }
      while ((_DWORD)v403 != 8);
      if (v401)
        goto LABEL_359;
      v405 = 0;
      v406 = &v5->i8[2 * (int)v6];
      do
      {
        v406[v405] = *v142;
        v401 |= v142[1];
        ++v405;
        v142 += 2;
      }
      while ((_DWORD)v405 != 8);
      if (v401)
        goto LABEL_359;
      v407 = 0;
      v408 = v406 + 8;
      do
      {
        v408[v407] = *v376;
        v401 |= v376[1];
        ++v407;
        v376 += 2;
      }
      while ((_DWORD)v407 != 8);
      if (v401)
        goto LABEL_359;
      v409 = 0;
      v329 = 0;
      v410 = &v5->i8[3 * v6];
      do
      {
        v410[v409] = v143->i8[0];
        v329 |= v143->u8[1];
        ++v409;
        v143 = (int16x8_t *)((char *)v143 + 2);
      }
      while ((_DWORD)v409 != 8);
      if (v329)
        goto LABEL_359;
      v411 = 0;
      v412 = v410 + 8;
      do
      {
        v412[v411] = v381->i8[0];
        v329 |= v381->u8[1];
        ++v411;
        v381 = (int16x8_t *)((char *)v381 + 2);
      }
      while ((_DWORD)v411 != 8);
LABEL_358:
      if (v329)
        goto LABEL_359;
      return *(double *)v58.i64;
    case 9u:
      v413 = 0;
      v414 = v5;
      do
      {
        v414->i32[0] = (v496.u16[v413] << 20)
                     + (*(unsigned __int16 *)&v497[v413 * 2 + 16] << 30)
                     + (*(unsigned __int16 *)&v494[v413 * 2 + 16] << 10)
                     + v493.u16[v413];
        v414 = (int16x8_t *)((char *)v414 + 4);
        if (v413 == 3)
          v414 = (int16x8_t *)((char *)v5 + v6);
        ++v413;
      }
      while (v413 != 8);
      v415 = 0;
      v416 = (__int32 *)((char *)v5->i32 + 2 * (int)v6);
      do
      {
        *v416++ = (*(unsigned __int16 *)&v497[v415 * 2] << 20)
                + (*(unsigned __int16 *)&v497[v415 * 2 + 32] << 30)
                + (v495.u16[v415] << 10)
                + *(unsigned __int16 *)&v494[v415 * 2];
        if (v415 == 3)
          v416 = (__int32 *)((char *)v5->i32 + 3 * (int)v6);
        ++v415;
      }
      while (v415 != 8);
      return *(double *)v58.i64;
    case 0xAu:
    case 0xFu:
    case 0x18u:
      *(_QWORD *)&v229 = v495.i64[0];
      *((_QWORD *)&v229 + 1) = v493.i64[1];
      v230 = *(_QWORD *)&v494[8];
      v493.i64[1] = *(_QWORD *)&v494[16];
      *(_OWORD *)&v494[8] = v229;
      v231 = v496.i64[1];
      v232 = *(_QWORD *)&v497[8];
      v495.i64[0] = v230;
      v496.i64[1] = *(_QWORD *)&v497[16];
      *(_QWORD *)&v229 = v498.i64[0];
      *((_QWORD *)&v229 + 1) = v231;
      *(_OWORD *)&v497[8] = v229;
      v498.i64[0] = v232;
      if (v490)
      {
        v233 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v233));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v233));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v233));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v233));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v233));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v233));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v233), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v233));
        v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v233), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v233));
      }
      if (v59 == 15)
      {
        v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      goto LABEL_279;
    case 0xCu:
    case 0x12u:
      v262 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v262;
      v263 = v493.i16[3];
      v264 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v264;
      v265 = v493.i16[7];
      v266 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v266;
      v267 = *(_WORD *)&v494[6];
      v268 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v268;
      v269 = *(_WORD *)&v494[14];
      v270 = v496.i16[1];
      v271 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v271;
      v272 = v496.i16[5];
      v273 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v273;
      v274 = *(_WORD *)&v497[2];
      v275 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v275;
      v276 = *(_WORD *)&v497[10];
      v277 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v277;
      v278 = v493.i16[2];
      v493.i16[2] = v496.i16[0];
      v496.i16[0] = v278;
      v493.i16[3] = *(_WORD *)&v497[16];
      v496.i16[1] = *(_WORD *)&v494[20];
      v279 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v279;
      v493.i16[7] = *(_WORD *)&v497[24];
      v496.i16[5] = *(_WORD *)&v494[28];
      v280 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = *(_WORD *)v497;
      *(_WORD *)v497 = v280;
      *(_WORD *)&v494[6] = v498.i16[0];
      *(_WORD *)&v497[2] = v495.i16[2];
      v281 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v281;
      *(_WORD *)&v494[14] = v498.i16[4];
      *(_WORD *)&v497[10] = v495.i16[6];
      *(_WORD *)&v494[20] = v270;
      *(_WORD *)&v497[16] = v263;
      v282 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v282;
      *(_WORD *)&v494[28] = v272;
      *(_WORD *)&v497[24] = v265;
      v283 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v283;
      v495.i16[2] = v274;
      v498.i16[0] = v267;
      v284 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v284;
      v495.i16[6] = v276;
      v498.i16[4] = v269;
      v285 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v285;
      if (v490)
      {
        v286 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v286));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v286));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v286));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v286));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v286));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v286));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v286), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v286));
        v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v286), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v286));
      }
      if (v59 == 12)
      {
        v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
        *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
        *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
        v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
        v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
        *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
        *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
        v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      }
      *v5 = v493;
      v5[1] = v496;
      v287 = &v5->i8[v6];
      *(_OWORD *)v287 = *(_OWORD *)v494;
      *((_OWORD *)v287 + 1) = *(_OWORD *)v497;
      v288 = &v5->i8[2 * (int)v6];
      *(_OWORD *)v288 = *(_OWORD *)&v494[16];
      *((_OWORD *)v288 + 1) = *(_OWORD *)&v497[16];
      goto LABEL_378;
    case 0x11u:
      v417 = v496.i16[0];
      v496.i16[0] = v493.i16[2];
      v418 = v493.i16[3];
      v493.i16[3] = v496.i16[1];
      v419 = v496.i16[4];
      v496.i16[4] = v493.i16[6];
      v420 = v493.i16[7];
      v493.i16[7] = v496.i16[5];
      v421 = *(_WORD *)v497;
      *(_WORD *)v497 = *(_WORD *)&v494[4];
      v422 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = *(_WORD *)&v497[2];
      v423 = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = *(_WORD *)&v494[12];
      v424 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[10];
      v425 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = v493.i16[0];
      v493.i16[0] = v425;
      v426 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = v417;
      v493.i16[2] = v426;
      v427 = *(_WORD *)&v494[26];
      *(_WORD *)&v494[26] = v493.i16[4];
      v493.i16[4] = v427;
      v428 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = v419;
      v493.i16[6] = v428;
      v429 = v495.i16[1];
      v495.i16[1] = *(_WORD *)v494;
      *(_WORD *)v494 = v429;
      v430 = v495.i16[3];
      v495.i16[3] = v421;
      *(_WORD *)&v494[4] = v430;
      v431 = v495.i16[5];
      v495.i16[5] = *(_WORD *)&v494[8];
      *(_WORD *)&v494[8] = v431;
      v432 = v495.i16[7];
      v495.i16[7] = v423;
      *(_WORD *)&v494[12] = v432;
      v496.i16[1] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v418;
      v433 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v433;
      v496.i16[5] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v420;
      v434 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v434;
      *(_WORD *)&v497[2] = v498.i16[0];
      v498.i16[0] = v422;
      v435 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v435;
      *(_WORD *)&v497[10] = v498.i16[4];
      v498.i16[4] = v424;
      v436 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v436;
      if (v490)
      {
        v437 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v437));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v437));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v437));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v437));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v437));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v437));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v437), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v437));
        v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v437), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v437));
      }
      *v5 = v493;
      *(int16x8_t *)((char *)v5 + v6) = v496;
      *(int16x8_t *)((char *)v5 + 2 * (int)v6) = *(int16x8_t *)v494;
      *(int16x8_t *)((char *)v5 + 3 * v6) = *(int16x8_t *)v497;
      *(int16x8_t *)((char *)v5 + 4 * (int)v6) = *(int16x8_t *)&v494[16];
      *(int16x8_t *)((char *)v5 + 5 * v6) = *(int16x8_t *)&v497[16];
      v438 = 6 * (int)v6;
      v58 = v495;
      goto LABEL_383;
    case 0x13u:
      goto LABEL_68;
    case 0x15u:
      v439 = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v496.i16[0];
      v440 = v496.i16[1];
      v496.i16[1] = *(_WORD *)&v494[26];
      v441 = *(_WORD *)&v494[28];
      *(_WORD *)&v494[28] = v496.i16[2];
      v442 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v494[30];
      v443 = v495.i16[4];
      v495.i16[4] = *(_WORD *)v497;
      v444 = *(_WORD *)&v497[2];
      *(_WORD *)&v497[2] = v495.i16[5];
      v445 = v495.i16[6];
      v495.i16[6] = *(_WORD *)&v497[4];
      v446 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v495.i16[7];
      v447 = v493.i16[1];
      v493.i16[1] = v439;
      v496.i16[0] = v447;
      v448 = v493.i16[3];
      v493.i16[3] = v441;
      v496.i16[2] = v448;
      v449 = v493.i16[5];
      v493.i16[5] = v496.i16[4];
      v496.i16[4] = v449;
      v450 = v493.i16[7];
      v493.i16[7] = v496.i16[6];
      v496.i16[6] = v450;
      v451 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v443;
      *(_WORD *)v497 = v451;
      v452 = *(_WORD *)&v494[6];
      *(_WORD *)&v494[6] = v445;
      *(_WORD *)&v497[4] = v452;
      v453 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v453;
      v454 = *(_WORD *)&v494[14];
      *(_WORD *)&v494[14] = *(_WORD *)&v497[12];
      *(_WORD *)&v497[12] = v454;
      v455 = *(_WORD *)&v494[18];
      *(_WORD *)&v494[18] = *(_WORD *)&v497[16];
      *(_WORD *)&v497[16] = v455;
      v456 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v456;
      *(_WORD *)&v494[26] = *(_WORD *)&v497[24];
      *(_WORD *)&v497[24] = v440;
      *(_WORD *)&v494[30] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v442;
      v457 = v495.i16[1];
      v495.i16[1] = v498.i16[0];
      v498.i16[0] = v457;
      v458 = v495.i16[3];
      v495.i16[3] = v498.i16[2];
      v498.i16[2] = v458;
      v495.i16[5] = v498.i16[4];
      v498.i16[4] = v444;
      v495.i16[7] = v498.i16[6];
      v498.i16[6] = v446;
      if (v490)
      {
        v459 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v459));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v459));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v459));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v459));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v459));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v459));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v459), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v459));
        v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v459), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v459));
      }
      *v5 = v493;
      v5[1] = v496;
      v460 = &v5->i8[v6];
      *(_OWORD *)v460 = *(_OWORD *)&v494[16];
      *((_OWORD *)v460 + 1) = *(_OWORD *)&v497[16];
      v461 = &v5->i8[2 * (int)v6];
      *(_OWORD *)v461 = *(_OWORD *)v494;
      *((_OWORD *)v461 + 1) = *(_OWORD *)v497;
      v261 = (int16x8_t *)((char *)v5 + 3 * (int)v6);
      goto LABEL_379;
    case 0x17u:
      v462 = v493.i16[1];
      v493.i16[1] = *(_WORD *)&v494[16];
      *(_WORD *)&v494[16] = v462;
      v463 = v493.i16[3];
      v464 = v493.i16[5];
      v493.i16[5] = *(_WORD *)&v494[24];
      *(_WORD *)&v494[24] = v464;
      v465 = v493.i16[7];
      v466 = *(_WORD *)&v494[2];
      *(_WORD *)&v494[2] = v495.i16[0];
      v495.i16[0] = v466;
      v467 = *(_WORD *)&v494[6];
      v468 = *(_WORD *)&v494[10];
      *(_WORD *)&v494[10] = v495.i16[4];
      v495.i16[4] = v468;
      v469 = *(_WORD *)&v494[14];
      v470 = v496.i16[1];
      v471 = v496.i16[3];
      v496.i16[3] = *(_WORD *)&v497[20];
      *(_WORD *)&v497[20] = v471;
      v472 = v496.i16[5];
      v473 = v496.i16[7];
      v496.i16[7] = *(_WORD *)&v497[28];
      *(_WORD *)&v497[28] = v473;
      v474 = *(_WORD *)&v497[2];
      v475 = *(_WORD *)&v497[6];
      *(_WORD *)&v497[6] = v498.i16[2];
      v498.i16[2] = v475;
      v476 = *(_WORD *)&v497[10];
      v477 = *(_WORD *)&v497[14];
      *(_WORD *)&v497[14] = v498.i16[6];
      v498.i16[6] = v477;
      v478 = v493.i16[2];
      v493.i16[2] = v496.i16[0];
      v496.i16[0] = v478;
      v493.i16[3] = *(_WORD *)&v497[16];
      v496.i16[1] = *(_WORD *)&v494[20];
      v479 = v493.i16[6];
      v493.i16[6] = v496.i16[4];
      v496.i16[4] = v479;
      v493.i16[7] = *(_WORD *)&v497[24];
      v496.i16[5] = *(_WORD *)&v494[28];
      v480 = *(_WORD *)&v494[4];
      *(_WORD *)&v494[4] = *(_WORD *)v497;
      *(_WORD *)v497 = v480;
      *(_WORD *)&v494[6] = v498.i16[0];
      *(_WORD *)&v497[2] = v495.i16[2];
      v481 = *(_WORD *)&v494[12];
      *(_WORD *)&v494[12] = *(_WORD *)&v497[8];
      *(_WORD *)&v497[8] = v481;
      *(_WORD *)&v494[14] = v498.i16[4];
      *(_WORD *)&v497[10] = v495.i16[6];
      *(_WORD *)&v494[20] = v470;
      *(_WORD *)&v497[16] = v463;
      v482 = *(_WORD *)&v494[22];
      *(_WORD *)&v494[22] = *(_WORD *)&v497[18];
      *(_WORD *)&v497[18] = v482;
      *(_WORD *)&v494[28] = v472;
      *(_WORD *)&v497[24] = v465;
      v483 = *(_WORD *)&v494[30];
      *(_WORD *)&v494[30] = *(_WORD *)&v497[26];
      *(_WORD *)&v497[26] = v483;
      v495.i16[2] = v474;
      v498.i16[0] = v467;
      v484 = v495.i16[3];
      v495.i16[3] = v498.i16[1];
      v498.i16[1] = v484;
      v495.i16[6] = v476;
      v498.i16[4] = v469;
      v485 = v495.i16[7];
      v495.i16[7] = v498.i16[5];
      v498.i16[5] = v485;
      if (v490)
      {
        v486 = (uint32x4_t)vdupq_n_s32(v490);
        v493 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v493.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v493), v486));
        *(int16x8_t *)v494 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v494), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v494), v486));
        *(int16x8_t *)&v494[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v494[16]), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v494[16]), v486));
        v495 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v495.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v495), v486));
        v496 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v496.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v496), v486));
        *(int16x8_t *)v497 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v497), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v497), v486));
        *(int16x8_t *)&v497[16] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v497[16]), v486), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v497[16]), v486));
        v498 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v498.i8), v486), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)v498), v486));
      }
      v493 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v493), (int8x16_t)(*(_OWORD *)&v493 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v493));
      *(int8x16_t *)v494 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v494), (int8x16_t)(*(_OWORD *)v494 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v494));
      *(int8x16_t *)&v494[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v494[16]), (int8x16_t)(*(_OWORD *)&v494[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v494[16]));
      v495 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v495), (int8x16_t)(*(_OWORD *)&v495 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v495));
      v496 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v496), (int8x16_t)(*(_OWORD *)&v496 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v496));
      *(int8x16_t *)v497 = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)v497), (int8x16_t)(*(_OWORD *)v497 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)v497));
      *(int8x16_t *)&v497[16] = vbslq_s8((int8x16_t)vcltzq_s16(*(int16x8_t *)&v497[16]), (int8x16_t)(*(_OWORD *)&v497[16] & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8(*(int8x16_t *)&v497[16]));
      v498 = (int16x8_t)vbslq_s8((int8x16_t)vcltzq_s16(v498), (int8x16_t)(*(_OWORD *)&v498 & __PAIR128__(0x7FFF7FFF7FFF7FFFLL, 0x7FFF7FFF7FFF7FFFLL)), vmvnq_s8((int8x16_t)v498));
      *v5 = v493;
      v5[1] = v496;
      v487 = &v5->i8[v6];
      *(_OWORD *)v487 = *(_OWORD *)v494;
      *((_OWORD *)v487 + 1) = *(_OWORD *)v497;
      v488 = &v5->i8[2 * (int)v6];
      *(_OWORD *)v488 = *(_OWORD *)&v494[16];
      *((_OWORD *)v488 + 1) = *(_OWORD *)&v497[16];
LABEL_378:
      v261 = (int16x8_t *)((char *)v5 + 3 * v6);
LABEL_379:
      *v261 = v495;
      v58 = v498;
      goto LABEL_380;
    default:
      longjmp((int *)(a1 + 116), -15405);
  }
}

uint64_t vectorReadPacked(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t i;
  int v8;

  if (a3 > 0x10 || (v3 = *(unsigned int **)(result + 16), *(_QWORD *)(result + 24) - (_QWORD)v3 < (uint64_t)a3))
    longjmp((int *)(result + 116), -15407);
  if (a3 < 5)
  {
    v6 = 0;
    v4 = 0;
  }
  else
  {
    v5 = *v3++;
    v4 = v5;
    v6 = 32;
  }
  for (i = 0; i != 8; ++i)
  {
    while (v6 < a3)
    {
      v8 = *(unsigned __int8 *)v3;
      v3 = (unsigned int *)((char *)v3 + 1);
      v4 += v8 << v6;
      v6 += 8;
    }
    *(_WORD *)(a2 + 2 * i) = v4 & ~(-1 << a3);
    v4 >>= a3;
    v6 -= a3;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t SlimHrlcEncode_C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = malloc_type_malloc(0x5048uLL, 0x1030040F2A0CDD9uLL);
  if (!v4)
    return 4294951895;
  v5 = v4;
  v4[2565] = *(_QWORD *)(a1 + 64);
  *((_WORD *)v4 + 10264) = *(_DWORD *)(a1 + 8356);
  *((_WORD *)v4 + 10265) = *(_DWORD *)(a2 + 12);
  v6 = *(_DWORD *)(a1 + 4);
  *((_WORD *)v4 + 10266) = *(_DWORD *)a1;
  *((_WORD *)v4 + 10267) = v6;
  SlimHrlcGetSize_C((uint64_t)v4);
  v7 = *(_BYTE **)(a2 + 16);
  if (v5[2568] > *(_QWORD *)(a2 + 24) - (_QWORD)v7)
    return 4294951895;
  v10 = 0;
  v8 = SlimHrlcEncodeRun_C((uint64_t)v5, v7, *(_QWORD *)(a1 + 56), &v10);
  *(_QWORD *)(a2 + 16) = v10;
  free(v5);
  return v8;
}

uint64_t SlimHrlcDecode_C(uint64_t a1)
{
  return SlimHrlcDecodeRun_C(*(unsigned __int16 *)(a1 + 8356));
}

uint64_t CMPhotoJFIFTranscodeStrips(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, const void *a7, int a8, unsigned __int8 a9, char a10, uint64_t (*a11)(uint64_t, void **), uint64_t a12, char a13, uint64_t (*a14)(uint64_t, CFTypeRef *), uint64_t a15, CFIndex a16, uint64_t (*a17)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *), uint64_t a18, const void *a19, uint64_t a20,const void *a21,const void *a22,uint64_t a23,const __CFData **a24)
{
  uint64_t (*v30)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *);
  uint64_t WritableWithCFMutableData;
  __CFDictionary *Mutable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  __CVBuffer *v46;
  int IsITUR_2100TF;
  double v48;
  double v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  double v53;
  double v54;
  void *v55;
  void (*v56)(void *, _QWORD, _QWORD, _QWORD, __n128);
  uint64_t v58;
  uint64_t PixelFormatType;
  unint64_t v60;
  __CFDictionary *MutableCopy;
  CFDictionaryRef v62;
  const void *Value;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(CFTypeRef, _QWORD, uint64_t, _QWORD);
  OpaqueCMBlockBuffer *DataBuffer;
  size_t DataLength;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __CFArray *v73;
  __CFDictionary *v74;
  const __CFData *v75;
  CFIndex v76;
  const void **ValueAtIndex;
  CFIndex i;
  CMSampleBufferRef sbuf;
  CFTypeRef v82;
  CFTypeRef v83;
  CFTypeRef v84[2];
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  CFTypeRef cf[2];
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  CFTypeRef v92[2];
  __int128 v93;
  CFMutableDictionaryRef theDict[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  CFTypeRef v99;
  void *keys[2];
  __int128 v101;
  void *values[3];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v99 = 0;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  *(_OWORD *)theDict = 0u;
  *(_OWORD *)v92 = 0u;
  v91 = 0;
  v89 = 0u;
  v90 = 0u;
  *(_OWORD *)cf = 0u;
  v87 = 0;
  v85 = 0u;
  v86 = 0u;
  *(_OWORD *)v84 = 0u;
  v82 = 0;
  v83 = 0;
  sbuf = 0;
  if (!a2 || !a3 || !a11 || (v30 = a17, a16) && !a17)
  {
    WritableWithCFMutableData = FigSignalErrorAt();
    goto LABEL_112;
  }
  WritableWithCFMutableData = _addColorSpaceToPropertiesIfNeeded((uint64_t)a1, a19, a20, &v82);
  if ((_DWORD)WritableWithCFMutableData)
    goto LABEL_112;
  *((_QWORD *)&v98 + 1) = 16;
  LOBYTE(v98) = 1;
  theDict[1] = 0;
  *(_QWORD *)&v95 = 0;
  *((_QWORD *)&v95 + 1) = a2;
  *(_QWORD *)&v96 = a3;
  *((_QWORD *)&v96 + 1) = a2;
  *(_QWORD *)&v97 = a3;
  *((_QWORD *)&v97 + 1) = a3;
  v92[0] = CFDataCreateMutable(a1, 0);
  if (!v92[0])
  {
LABEL_146:
    v73 = 0;
    v74 = 0;
    goto LABEL_147;
  }
  WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
  if ((_DWORD)WritableWithCFMutableData)
  {
LABEL_112:
    v52 = WritableWithCFMutableData;
LABEL_113:
    v73 = 0;
    v74 = 0;
LABEL_114:
    v75 = 0;
    goto LABEL_115;
  }
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  theDict[0] = Mutable;
  if (!Mutable)
    goto LABEL_146;
  CMPhotoCFDictionarySetInt(Mutable, CFSTR("QualityControllerType"), a6);
  if (a7)
    CFDictionarySetValue(theDict[0], CFSTR("QualityControllerParameters"), a7);
  DWORD2(v93) = 1;
  if (!a8 && CMPhotoUnifiedJPEGEncoderIsHardwareAvailable())
    DWORD2(v93) = 2;
  HIDWORD(v93) = 5;
  WritableWithCFMutableData = CMPhotoUnifiedJPEGEncoderCreate(a1, a22, a21, 0, &v93);
  if ((_DWORD)WritableWithCFMutableData)
    goto LABEL_112;
  v38 = *MEMORY[0x1E0C9D628];
  v39 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v40 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v41 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v42 = *MEMORY[0x1E0C9D820];
  v43 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v44 = *((_QWORD *)&v97 + 1);
  while (v44)
  {
    if (!(_QWORD)v96)
      goto LABEL_44;
    keys[0] = 0;
    values[0] = 0;
    if (cf[1])
    {
      CFRelease(cf[1]);
      cf[1] = 0;
    }
    v45 = a11(a12, keys);
    if ((_DWORD)v45)
    {
      v52 = v45;
      FigSignalErrorAt();
      goto LABEL_69;
    }
    v46 = (__CVBuffer *)keys[0];
    if (!keys[0])
    {
      v50 = FigSignalErrorAt();
LABEL_68:
      v52 = v50;
LABEL_69:
      v55 = 0;
      goto LABEL_30;
    }
    if (a10)
    {
      IsITUR_2100TF = CMPhotoPixelBufferIsITUR_2100TF((__CVBuffer *)keys[0]);
      v46 = (__CVBuffer *)keys[0];
      if (IsITUR_2100TF)
      {
        v50 = CMPhotoScaleAndRotateSessionTransformForSize((uint64_t)a22, (__CVBuffer *)keys[0], a9 == 0, 1, 875704422, 0x100000002, 1, 0, v38, v39, v40, v41, v42, v43, v48, v49, 0, 1u, (__CVBuffer **)values);
        if ((_DWORD)v50)
          goto LABEL_68;
        if (keys[0])
          CFRelease(keys[0]);
        v46 = (__CVBuffer *)values[0];
        keys[0] = values[0];
        values[0] = 0;
      }
    }
    v51.n128_f64[0] = CMPhotoGetPixelBufferCLAPAsRect(v46);
    v52 = 0;
    LOBYTE(cf[0]) = 1;
    v89 = 0uLL;
    *((_QWORD *)&v90 + 1) = vcvtad_u64_f64(v54);
    v91 = *((_QWORD *)&v90 + 1);
    v55 = keys[0];
    *(_QWORD *)&v90 = vcvtad_u64_f64(v53);
    cf[1] = keys[0];
    keys[0] = 0;
    *(_QWORD *)&v95 = v95 + *((_QWORD *)&v90 + 1);
    *(_QWORD *)&v96 = v96 - *((_QWORD *)&v90 + 1);
    BYTE1(v98) = (_QWORD)v96 == 0;
LABEL_30:
    if (values[0])
      CFRelease(values[0]);
    if (keys[0])
      CFRelease(keys[0]);
    if ((_DWORD)v52)
      goto LABEL_113;
    if (a20)
    {
      v56 = *(void (**)(void *, _QWORD, _QWORD, _QWORD, __n128))(a20 + 16);
      if (v56)
        v56(v55, v95, 0, *(_QWORD *)(a20 + 24), v51);
    }
    while (LOBYTE(v84[0]) && LOBYTE(cf[0]) != 0)
    {
      WritableWithCFMutableData = _transcodeCopyStripIntoOverflowAndEncodeIfNecessary((uint64_t)v92, a9, (uint64_t)cf, (uint64_t)v84);
      if ((_DWORD)WritableWithCFMutableData)
        goto LABEL_112;
    }
LABEL_44:
    if (BYTE1(v98) || (v58 = *((_QWORD *)&v90 + 1), !(*((_QWORD *)&v90 + 1) % *((_QWORD *)&v98 + 1))))
    {
      if (LOBYTE(v84[0]) && (BYTE1(v98) || !v87))
      {
        WritableWithCFMutableData = _transcodeEncodeStrip((uint64_t)v92, a9, (uint64_t)v84, v33, v34, v35, v36, v37);
        if ((_DWORD)WritableWithCFMutableData)
          goto LABEL_112;
      }
      if (LOBYTE(cf[0]))
      {
        WritableWithCFMutableData = _transcodeEncodeStrip((uint64_t)v92, a9, (uint64_t)cf, v33, v34, v35, v36, v37);
        if ((_DWORD)WritableWithCFMutableData)
          goto LABEL_112;
      }
    }
    else
    {
      if (!v84[1])
      {
        if (!cf[1])
        {
          v73 = 0;
          v74 = 0;
          v75 = 0;
          v52 = 4294950306;
          goto LABEL_115;
        }
        PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)cf[1]);
        WritableWithCFMutableData = CMPhotoSurfacePoolCreatePixelBuffer(a21, PixelFormatType, *((size_t *)&v96 + 1), *((size_t *)&v98 + 1), 1, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&v84[1]);
        if ((_DWORD)WritableWithCFMutableData)
          goto LABEL_112;
        v85 = 0uLL;
        v86 = *((unint64_t *)&v96 + 1);
        v87 = *((_QWORD *)&v98 + 1);
      }
      v60 = v58 & 0xFFFFFFFFFFFFFFF0;
      *((_QWORD *)&v90 + 1) = v58 & 0xFFFFFFFFFFFFFFF0;
      if ((v58 & 0xFFFFFFFFFFFFFFF0) != 0)
      {
        WritableWithCFMutableData = _transcodeEncodeStrip((uint64_t)v92, a9, (uint64_t)cf, v33, v34, v35, v36, v37);
        if ((_DWORD)WritableWithCFMutableData)
          goto LABEL_112;
        v60 = *((_QWORD *)&v90 + 1);
      }
      *((_QWORD *)&v90 + 1) = v60 + (v58 & 0xF);
      LOBYTE(cf[0]) = (v58 & 0xF) != 0;
      while (LOBYTE(cf[0]))
      {
        WritableWithCFMutableData = _transcodeCopyStripIntoOverflowAndEncodeIfNecessary((uint64_t)v92, a9, (uint64_t)cf, (uint64_t)v84);
        if ((_DWORD)WritableWithCFMutableData)
          goto LABEL_112;
      }
    }
    v44 = *((_QWORD *)&v97 + 1);
    if (BYTE1(v98) && *((_QWORD *)&v97 + 1))
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
LABEL_109:
      v52 = 4294950304;
      goto LABEL_115;
    }
  }
  if (cf[1])
  {
    CFRelease(cf[1]);
    cf[1] = 0;
  }
  if (v84[1])
  {
    CFRelease(v84[1]);
    v84[1] = 0;
  }
  if (a13 || a14)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v74 = MutableCopy;
    if (MutableCopy)
    {
      CMPhotoCFDictionarySetInt(MutableCopy, CFSTR("QualityControllerType"), 3);
      keys[0] = CFSTR("QualityValue");
      values[0] = 0;
      values[0] = CMPhotoCFNumberCreateFloat(0.75);
      v62 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (values[0])
        CFRelease(values[0]);
      CFDictionarySetValue(v74, CFSTR("QualityControllerParameters"), v62);
      if (v62)
        CFRelease(v62);
      if (a13)
      {
        *(_OWORD *)keys = 0u;
        CMPhotoPixelBufferConstrainSizeToMaxSideLength(*((unint64_t *)&v96 + 1), v97, 0xA0uLL, 0, 0, 0, 1, (unint64_t *)keys, 0, 0);
        Value = CFDictionaryGetValue(v74, CFSTR("QualityControllerParameters"));
        v64 = CMPhotoJFIFTranscodeFromJFIF(a1, *((uint64_t *)&v96 + 1), v97, CMPhotoRectZero, 1, (unint64_t)keys[0], (unint64_t)keys[1], a5, 3u, Value, 0, 0, 0, 0, 0, (uint64_t)v92[1], 0, 0, a21,
                a22,
                a23,
                0,
                a9,
                1,
                (__CFData **)&v83);
        if (!(_DWORD)v64)
        {
          v30 = a17;
          if (!v83)
            goto LABEL_152;
LABEL_96:
          if (a16)
            goto LABEL_97;
LABEL_77:
          v73 = 0;
          goto LABEL_102;
        }
      }
      else
      {
        if (!a14)
        {
          v30 = a17;
          if (a16)
            goto LABEL_97;
          goto LABEL_77;
        }
        v64 = a14(a15, &v99);
        v30 = a17;
        if (!(_DWORD)v64)
        {
          v65 = (uint64_t)v99;
          if (!v99)
          {
LABEL_152:
            v64 = FigSignalErrorAt();
            goto LABEL_153;
          }
          if (a20)
          {
            v66 = *(void (**)(CFTypeRef, _QWORD, uint64_t, _QWORD))(a20 + 16);
            if (v66)
            {
              v66(v99, 0, 1, *(_QWORD *)(a20 + 24));
              v65 = (uint64_t)v99;
            }
          }
          *(_OWORD *)keys = 0u;
          v101 = 0u;
          v64 = CMPhotoUnifiedJPEGEncoderEncode(v93, (uint64_t)v74, v65, a9, keys, 1, DWORD2(v93), HIDWORD(v93), (uint64_t)v92, &sbuf);
          if ((_DWORD)v64)
            goto LABEL_153;
          DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
          v75 = DataBuffer;
          if (!DataBuffer)
          {
            v73 = 0;
            goto LABEL_109;
          }
          DataLength = CMBlockBufferGetDataLength(DataBuffer);
          v64 = CMPhotoDataCreateFromSource(a1, v75, 0, DataLength, &v83, 0);
          if ((_DWORD)v64)
            goto LABEL_153;
          goto LABEL_96;
        }
      }
LABEL_153:
      v52 = v64;
      v73 = 0;
      goto LABEL_114;
    }
    v73 = 0;
LABEL_147:
    v75 = 0;
LABEL_148:
    v52 = 4294950305;
    goto LABEL_115;
  }
  v74 = 0;
  if (!a16)
    goto LABEL_77;
LABEL_97:
  v73 = CFArrayCreateMutable(a1, a16, 0);
  if (!v73)
    goto LABEL_147;
  if (a16 >= 1)
  {
    v69 = 0;
    while (1)
    {
      v70 = _compressAuxImage(a1, v93, v73, v69, a9, v30, a18, (uint64_t)v92);
      if ((_DWORD)v70)
        break;
      if (a16 == ++v69)
        goto LABEL_102;
    }
    v52 = v70;
    goto LABEL_114;
  }
LABEL_102:
  v75 = CFDataCreateMutable(a1, 0);
  if (!v75)
    goto LABEL_148;
  v71 = FigByteStreamCreateWritableWithCFMutableData();
  if ((_DWORD)v71)
  {
    v52 = v71;
  }
  else
  {
    v72 = CMPhotoJFIFUtilitiesMergeImageComponents(a1, 0, (int)v92[0], (int)v83, v73, v82);
    v52 = v72;
    if (a24 && !(_DWORD)v72)
    {
      *a24 = v75;
      goto LABEL_114;
    }
  }
LABEL_115:
  v76 = 0;
  if (v73)
    goto LABEL_118;
LABEL_119:
  for (i = 0; v76 < i; i = CFArrayGetCount(v73))
  {
    ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v73, v76);
    CMPhotoCompressedAuxImageStorageDestroy(ValueAtIndex);
    ++v76;
    if (!v73)
      goto LABEL_119;
LABEL_118:
    ;
  }
  if (v74)
    CFRelease(v74);
  if (v73)
    CFRelease(v73);
  if (v82)
    CFRelease(v82);
  if (v99)
    CFRelease(v99);
  if (sbuf)
    CFRelease(sbuf);
  CMPhotoUnifiedJPEGEncoderDestroy((void *)v93);
  if (theDict[0])
    CFRelease(theDict[0]);
  if (v92[0])
    CFRelease(v92[0]);
  if (v92[1])
    CFRelease(v92[1]);
  if (v83)
    CFRelease(v83);
  if (cf[1])
    CFRelease(cf[1]);
  if (v84[1])
    CFRelease(v84[1]);
  if (v75)
    CFRelease(v75);
  return v52;
}

uint64_t _addColorSpaceToPropertiesIfNeeded(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CGColorSpaceRef v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  __CFDictionary *MutableCopy;
  CFTypeRef v12;

  if (!a3)
    goto LABEL_11;
  if (!*(_QWORD *)a3)
  {
    v10 = *(const void **)(a3 + 8);
    if (v10)
    {
      v8 = CFRetain(v10);
      v7 = 0;
      if (v8)
        goto LABEL_9;
LABEL_12:
      if (a2)
        v12 = CFRetain(a2);
      else
        v12 = 0;
      v8 = 0;
LABEL_16:
      v9 = 0;
      *a4 = v12;
      if (!v7)
        goto LABEL_18;
      goto LABEL_17;
    }
LABEL_11:
    v7 = 0;
    goto LABEL_12;
  }
  v7 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (!v7 || (CGColorSpaceEqualToColorSpace() & 1) != 0)
    goto LABEL_12;
  v8 = CGColorSpaceCopyICCData(*(CGColorSpaceRef *)a3);
  if (!v8)
  {
    v9 = FigSignalErrorAt();
LABEL_17:
    CFRelease(v7);
    goto LABEL_18;
  }
LABEL_9:
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    v12 = MutableCopy;
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC770], v8);
    goto LABEL_16;
  }
  v9 = 4294950305;
  if (v7)
    goto LABEL_17;
LABEL_18:
  if (v8)
    CFRelease(v8);
  return v9;
}

uint64_t _transcodeCopyStripIntoOverflowAndEncodeIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CVBuffer *v14;
  __CVBuffer *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a3 + 40);
  if (!v4)
    return FigSignalErrorAt();
  v10 = (_QWORD *)(a4 + 16);
  v9 = *(_QWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a4 + 40);
  if (v4 >= *(_QWORD *)(a4 + 48))
    v12 = *(_QWORD *)(a4 + 48);
  else
    v12 = *(_QWORD *)(a3 + 40);
  v13 = *(_QWORD *)(a3 + 32);
  v14 = *(__CVBuffer **)(a3 + 8);
  v15 = *(__CVBuffer **)(a4 + 8);
  v16 = v11 + v10[1];
  v25 = *(_OWORD *)(a3 + 16);
  v26 = v13;
  v27 = v12;
  result = CMPhotoPixelBufferCopyCropRectToOffset(v14, 1, (uint64_t *)&v25, v15, 1, v9, v16, 0);
  if (!(_DWORD)result)
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a3 + 24) += v12;
    v23 = *(_QWORD *)(a3 + 40) - v12;
    *(_QWORD *)(a3 + 40) = v23;
    *(_BYTE *)a3 = v23 != 0;
    v24 = *(_QWORD *)(a4 + 48) - v12;
    *(_QWORD *)(a4 + 40) += v12;
    *(_QWORD *)(a4 + 48) = v24;
    if (v24)
    {
      return 0;
    }
    else
    {
      result = _transcodeEncodeStrip(a1, a2, a4, v18, v19, v20, v21, v22);
      if (!(_DWORD)result)
      {
        *v10 = 0;
        v10[1] = 0;
        *(_QWORD *)(a4 + 40) = 0;
        *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 104);
        *(_BYTE *)a4 = 0;
      }
    }
  }
  return result;
}

uint64_t _transcodeEncodeStrip(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFData *v20;
  __int128 v21;
  uint64_t result;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];

  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = v11 - *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a3 + 40);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a3 + 8);
  v17 = *(unsigned int *)(a1 + 24);
  v18 = *(unsigned int *)(a1 + 28);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(__CFData **)(a1 + 8);
  v21 = *(_OWORD *)(a3 + 32);
  v28[0] = *(_OWORD *)(a3 + 16);
  v28[1] = v21;
  *(_QWORD *)&v25 = 0;
  *((_QWORD *)&v25 + 1) = v13;
  v26 = v12;
  v27 = v14;
  *((_QWORD *)&v24 + 1) = v11;
  *(_QWORD *)&v24 = v12;
  result = CMPhotoUnifiedJPEGEncoderEncodeStripToStream(v19, v15, v16, a2, v28, v17, v18, a8, v24, &v25, a1, v20);
  if (!(_DWORD)result)
  {
    v23 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a1 + 88) -= v23;
    *(_QWORD *)(a3 + 24) += v23;
    *(_QWORD *)(a3 + 40) = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
  return result;
}

uint64_t CMPhotoJFIFTranscodeFromJFIF(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, unint64_t a6, unint64_t a7, unsigned int a8, unsigned int a9, const void *a10, char a11, uint64_t a12, CFIndex a13, uint64_t (*a14)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *), uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,char a22,unsigned __int8 a23,char a24,__CFData **a25)
{
  __CFData *v31;
  uint64_t v32;
  __CFDictionary *v33;
  __CFData *v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t (*v38)(uint64_t, _QWORD, uint64_t *);
  CFIndex v39;
  __CFData *Mutable;
  uint64_t image_info;
  unsigned int chroma_subsampling;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, _QWORD, CVPixelBufferRef *);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t PixelBufferDataPointers;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  __CVBuffer *v69;
  CVPixelBufferRef v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t PixelFormatType;
  double v74;
  double v75;
  uint64_t v76;
  OSType v77;
  unsigned int v78;
  uint64_t v79;
  __CFDictionary *v80;
  uint64_t v81;
  uint64_t AROTSegmentSize;
  size_t v83;
  __CFData *v84;
  UInt8 v85;
  UInt8 *MutableBytePtr;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  UInt8 *v91;
  CFIndex Length;
  const void *v93;
  __CFArray *v94;
  __CFDictionary *v95;
  CFDictionaryRef v96;
  uint64_t CropPostOrientation;
  CFIndex v98;
  const void *Value;
  void (*v100)(uint64_t, _QWORD, uint64_t, _QWORD);
  OpaqueCMBlockBuffer *DataBuffer;
  const __CFData *v102;
  size_t DataLength;
  CFMutableArrayRef v104;
  uint64_t v105;
  uint64_t v106;
  __CFData *v107;
  CFMutableDataRef v108;
  uint64_t WritableWithCFMutableData;
  uint64_t v110;
  CFIndex v111;
  const void **ValueAtIndex;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  __CFData *v118;
  char v119;
  size_t v120;
  uint64_t v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  CMBlockBufferRef theBuffer;
  CFTypeRef v133;
  CFTypeRef v134;
  CFTypeRef v135;
  CFTypeRef v136;
  CMSampleBufferRef sbuf;
  void *v138;
  CFTypeRef v139;
  CFTypeRef cf;
  void *v141;
  unsigned int v142;
  uint64_t v143;
  char *dataPointerOut;
  __CFData *v145;
  CVPixelBufferRef pixelBuffer;
  void *keys[2];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *p_src;
  void (*v159)(uint64_t *, char **, char **);
  __int128 __dst;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  char **p_dataPointerOut;
  uint64_t v166;
  uint64_t v167;
  void *values[2];
  __int128 v169;
  uint64_t *v170;
  uint64_t v171;
  CVPixelBufferRef v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t __src;
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  sbuf = 0;
  v138 = 0;
  v135 = 0;
  v136 = 0;
  v133 = 0;
  v134 = 0;
  theBuffer = 0;
  if (a24)
  {
    v31 = 0;
    v32 = 4294950306;
    if (a5 != 1 || a13 || a11 || a12)
    {
      v33 = 0;
      v34 = 0;
      goto LABEL_227;
    }
    v33 = 0;
    v34 = 0;
    if (a17)
      goto LABEL_227;
  }
  v35 = _addColorSpaceToPropertiesIfNeeded((uint64_t)a1, a17, a18, &v134);
  if ((_DWORD)v35)
    goto LABEL_139;
  v130 = xmmword_1E53F6200;
  v131 = 0;
  v36 = a7;
  v37 = a3 == a7 && a2 == a6;
  if (v37 || !a22)
  {
    v44 = *a4;
    v45 = a4[2];
    *((_QWORD *)&v123 + 1) = a4[3];
    v126 = a4[1];
    LODWORD(v141) = 0;
    __src = 0;
    v176 = 0;
    v151 = 0u;
    v152 = 0u;
    v149 = 0u;
    v150 = 0u;
    *(_OWORD *)keys = 0u;
    v148 = 0u;
    Mutable = CFDataCreateMutable(a1, 0);
    if (!Mutable)
    {
      v32 = 4294950305;
      v39 = a13;
      goto LABEL_145;
    }
    pixelBuffer = 0;
    v46 = *(uint64_t (**)(uint64_t, _QWORD, CVPixelBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
    if (v46)
    {
      *(_QWORD *)&v123 = v45;
      v47 = v46(a16, 0, &pixelBuffer);
      if ((_DWORD)v47)
      {
        v32 = v47;
        goto LABEL_42;
      }
      v173 = 0;
      v174 = a16;
      values[0] = _applejpeg_read;
      values[1] = 0;
      *(_QWORD *)&v169 = _applejpeg_skip_0;
      *((_QWORD *)&v169 + 1) = _applejpeg_rewind_0;
      v170 = &v173;
      v171 = 0;
      v172 = pixelBuffer;
      dataPointerOut = 0;
      v145 = Mutable;
      *(_QWORD *)&v163 = 0;
      *((_QWORD *)&v163 + 1) = _applejpeg_write;
      v164 = 0uLL;
      v166 = 0;
      v167 = 0;
      p_dataPointerOut = &dataPointerOut;
      v32 = 4294950305;
      if (!applejpeg_recode_open_file() || (_DWORD)v141)
        goto LABEL_42;
      applejpeg_recode_clear_options();
      v48 = 0;
      if ((a5 - 5) >= 4)
        v49 = a7;
      else
        v49 = a6;
      v50 = 1;
      if (v49 < 0x21)
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        if (a6 * a7 >= 0x2DC6C0)
        {
          v54 = v49 + 15;
          if (v54 >= 0x10)
          {
            v48 = (v54 >> 4) - 1;
            AROTSegmentSize = CMPhotoUnifiedJPEGEncoderGetAROTSegmentSize(v48);
            v83 = AROTSegmentSize + 2;
            v84 = Mutable;
            v121 = AROTSegmentSize;
            v85 = AROTSegmentSize - 2;
            v116 = (unint64_t)(AROTSegmentSize - 2) >> 8;
            CFDataSetLength(v84, AROTSegmentSize + 2);
            v118 = v84;
            MutableBytePtr = CFDataGetMutableBytePtr(v84);
            bzero(MutableBytePtr, v83);
            *(_DWORD *)MutableBytePtr = -352331521;
            MutableBytePtr[4] = v116;
            MutableBytePtr[5] = v85;
            v87 = applejpeg_recode_set_option_skip_app0();
            if ((_DWORD)v87 || (v87 = applejpeg_recode_set_option_jpeg_format(), (_DWORD)v87))
            {
              v32 = v87;
              Mutable = v118;
              v36 = a7;
              goto LABEL_42;
            }
            v50 = 0;
            v53 = 2;
            Mutable = v118;
            v52 = v83;
            v36 = a7;
            v51 = v121;
          }
          else
          {
            v48 = 0;
            v51 = 0;
            v52 = 0;
            v53 = 0;
          }
        }
      }
      v117 = v53;
      v119 = v50;
      v120 = v52;
      v122 = v51;
      v88 = applejpeg_recode_set_option_hw_accelerated_resize();
      if (!(_DWORD)v88)
      {
        v89 = applejpeg_recode_set_option_aspect();
        v39 = a13;
        if (!(_DWORD)v89)
        {
          v89 = applejpeg_recode_set_option_outsize();
          if (!(_DWORD)v89)
          {
            if ((v44 | v126 || v123 != 0) && (v90 = applejpeg_recode_set_option_crop()) != 0)
            {
              v89 = CMPhotoAppleJPEGErrorToCMPhotoError(v90);
            }
            else
            {
              v89 = CMPhotoJPEGQualityControllerParse((int)a1, a6, v36, 0, a9, a10, 1, keys);
              if (!(_DWORD)v89)
              {
                __dst = v151;
                v161 = v152;
                v162 = 0;
                v89 = applejpeg_recode_set_option_quantization_tables();
                if (!(_DWORD)v89)
                {
                  if (a5 == 1 || (v89 = applejpeg_recode_set_option_orientation(), !(_DWORD)v89))
                  {
                    if (!a18
                      || !*(_QWORD *)(a18 + 16)
                      || (__src = a18,
                          v176 = 0,
                          v157 = 1,
                          p_src = &__src,
                          v159 = _applejpeg_converter_callback,
                          v89 = applejpeg_recode_set_option_converter(),
                          !(_DWORD)v89))
                    {
                      v157 = 0;
                      v89 = applejpeg_recode_all_file();
                      if (!(_DWORD)v89)
                      {
                        applejpeg_recode_close();
                        if ((v119 & 1) != 0)
                        {
                          v32 = 0;
LABEL_145:
                          applejpeg_recode_close();
LABEL_146:
                          CMPhotoJPEGQualitySettingsReleaseStorage(keys);
                          if (!(_DWORD)v32)
                            goto LABEL_147;
LABEL_112:
                          v34 = Mutable;
                          v31 = 0;
                          v33 = 0;
                          goto LABEL_227;
                        }
                        v91 = CFDataGetMutableBytePtr(Mutable);
                        Length = CFDataGetLength(Mutable);
                        v32 = CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr(Length - v120, (unint64_t)&v91[v120], v48, v122, (unint64_t)&v91[v117]);
                        if (!(_DWORD)v32)
                          goto LABEL_145;
LABEL_135:
                        applejpeg_recode_close();
                        CFRelease(Mutable);
                        Mutable = 0;
                        goto LABEL_146;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v32 = v89;
        goto LABEL_135;
      }
      v32 = v88;
    }
    else
    {
      v32 = 4294954514;
    }
LABEL_42:
    v39 = a13;
    goto LABEL_135;
  }
  v129 = 0;
  v38 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v38)
  {
    v32 = 4294954514;
LABEL_40:
    v31 = 0;
    v33 = 0;
    v34 = 0;
    goto LABEL_227;
  }
  v35 = v38(a16, 0, &v129);
  if ((_DWORD)v35)
  {
LABEL_139:
    v32 = v35;
    goto LABEL_40;
  }
  v39 = a13;
  if (v129 < 0)
  {
    v32 = 4294950190;
    goto LABEL_40;
  }
  Mutable = 0;
  v32 = 4294950305;
  if (CMCreateContiguousBlockBufferFromStream() || v129)
    goto LABEL_112;
  cf = 0;
  v141 = 0;
  v139 = 0;
  if (a18 && *(_QWORD *)(a18 + 16))
  {
    v32 = FigSignalErrorAt();
    goto LABEL_231;
  }
  dataPointerOut = 0;
  v145 = 0;
  if (CMBlockBufferGetDataPointer(theBuffer, 0, (size_t *)&v145, 0, &dataPointerOut))
  {
    v32 = 4294950194;
LABEL_231:
    CMPhotoUnifiedJPEGEncoderDestroy(0);
    Mutable = 0;
    v80 = 0;
    goto LABEL_105;
  }
  v170 = 0;
  *(_OWORD *)values = 0u;
  v169 = 0u;
  v156 = 0;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  *(_OWORD *)keys = 0u;
  pixelBuffer = 0;
  v143 = 0;
  if (!applejpeg_decode_create())
  {
LABEL_137:
    v69 = 0;
    v68 = 0;
    goto LABEL_69;
  }
  image_info = applejpeg_decode_open_mem();
  if ((_DWORD)image_info || (image_info = applejpeg_decode_get_image_info(), (_DWORD)image_info))
  {
LABEL_136:
    v32 = image_info;
    goto LABEL_137;
  }
  chroma_subsampling = applejpeg_decode_get_chroma_subsampling();
  if (chroma_subsampling >= 2)
  {
    if (chroma_subsampling == 4)
    {
      v125 = 1;
      v124 = 1;
      v43 = 1278226488;
      goto LABEL_46;
    }
LABEL_45:
    v125 = 2;
    v124 = 2;
    v43 = 875704422;
    goto LABEL_46;
  }
  if ((a5 - 9) > 0xFFFFFFFB)
    goto LABEL_45;
  v43 = 875704934;
  v124 = 1;
  v125 = 2;
LABEL_46:
  v55 = 0;
  do
    v56 = v55++;
  while (a6 <= SLODWORD(values[1]) >> v55 && v56 <= 2 && v36 <= SHIDWORD(values[1]) >> v55);
  image_info = applejpeg_decode_set_option_outsize();
  if ((_DWORD)image_info)
    goto LABEL_136;
  image_info = applejpeg_decode_set_option_outformat();
  if ((_DWORD)image_info)
    goto LABEL_136;
  image_info = applejpeg_decode_set_option_multithread();
  if ((_DWORD)image_info)
    goto LABEL_136;
  image_info = applejpeg_decode_set_option_orientation();
  if ((_DWORD)image_info)
    goto LABEL_136;
  image_info = applejpeg_decode_get_output_dimensions();
  if ((_DWORD)image_info)
    goto LABEL_136;
  image_info = CMPhotoSurfacePoolCreatePixelBuffer(0, v43, SHIDWORD(v143), (int)v143, 1, v125, v124, 0, 2, 0, &pixelBuffer);
  if ((_DWORD)image_info)
    goto LABEL_136;
  image_info = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  if ((_DWORD)image_info)
    goto LABEL_136;
  v142 = 0;
  p_src = 0;
  v157 = 0;
  __src = 0;
  v176 = 0;
  v173 = 0;
  v174 = 0;
  PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(pixelBuffer, 0, 0, &v142, (uint64_t)&v157, (uint64_t)&__src, (uint64_t)&v173);
  if ((_DWORD)PixelBufferDataPointers)
    goto LABEL_140;
  v60 = v142;
  if (v142 - 3 < 0xFFFFFFFE)
  {
    v69 = 0;
    v32 = 4294950301;
    goto LABEL_199;
  }
  v163 = 0u;
  v164 = 0u;
  bzero((char *)&__dst + 8 * v142, 32 - 8 * v142);
  memcpy(&__dst, &__src, 8 * v60);
  v61 = 0;
  v62 = &v173;
  v63 = &v157;
  do
  {
    v65 = *v63++;
    v64 = v65;
    v66 = (_QWORD *)((char *)&v163 + v61);
    v67 = *v62++;
    *v66 = v64;
    v66[1] = v67;
    v61 += 16;
  }
  while (16 * v60 != v61);
  PixelBufferDataPointers = applejpeg_decode_set_option_stride();
  if ((_DWORD)PixelBufferDataPointers)
  {
LABEL_140:
    v32 = PixelBufferDataPointers;
    goto LABEL_141;
  }
  v32 = applejpeg_decode_image_all();
  if ((_DWORD)v32)
  {
LABEL_141:
    v69 = 0;
LABEL_199:
    v68 = 1;
    goto LABEL_69;
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  v68 = 0;
  v69 = pixelBuffer;
  pixelBuffer = 0;
LABEL_69:
  applejpeg_decode_destroy();
  v70 = pixelBuffer;
  if (v68 && pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    v70 = pixelBuffer;
  }
  if (v70)
    CFRelease(v70);
  if ((_DWORD)v32)
    goto LABEL_143;
  if ((a5 - 5) >= 4)
    v71 = v36;
  else
    v71 = a6;
  if ((a5 - 5) >= 4)
    v72 = a6;
  else
    v72 = v36;
  if (CVPixelBufferGetWidth(v69) != v72 || CVPixelBufferGetHeight(v69) != v71)
  {
    keys[0] = 0;
    PixelFormatType = CVPixelBufferGetPixelFormatType(v69);
    v76 = CMPhotoScaleAndRotateSessionTransformForSize(0, v69, a23 == 0, 1, PixelFormatType, 0, 0, 1u, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), (double)v72, (double)v71, v74, v75, 2, 1u, (__CVBuffer **)keys);
    if ((_DWORD)v76)
    {
LABEL_142:
      v32 = v76;
LABEL_143:
      Mutable = 0;
      v80 = 0;
      goto LABEL_103;
    }
    if (v69)
      CFRelease(v69);
    v69 = (__CVBuffer *)keys[0];
  }
  v76 = CMPhotoUnifiedJPEGEncoderCreate(0, 0, 0, 0, &v141);
  if ((_DWORD)v76)
    goto LABEL_142;
  v77 = CVPixelBufferGetPixelFormatType(v69);
  if (v77 == 1278226488)
    v78 = 6;
  else
    v78 = 5;
  if (v77 == 875704934)
    v79 = 3;
  else
    v79 = v78;
  v80 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v80)
  {
    if (a9)
      FigCFDictionarySetInt();
    if (a10)
      CFDictionarySetValue(v80, CFSTR("QualityControllerParameters"), a10);
    *(_OWORD *)keys = 0u;
    v148 = 0u;
    v81 = CMPhotoUnifiedJPEGEncoderEncode((uint64_t)v141, (uint64_t)v80, (uint64_t)v69, a23, keys, 1, 0, v79, 0, (CMSampleBufferRef *)&v139);
    if ((_DWORD)v81)
    {
      v32 = v81;
      goto LABEL_101;
    }
    v32 = CMPhotoDataCreateFromSampleBuffer(a1, (CMSampleBufferRef)v139, 0, (CFDataRef *)&cf);
    if ((_DWORD)v32)
    {
LABEL_101:
      Mutable = 0;
      goto LABEL_103;
    }
    Mutable = (__CFData *)cf;
    cf = 0;
  }
  else
  {
    Mutable = 0;
    v32 = 4294950305;
  }
LABEL_103:
  CMPhotoUnifiedJPEGEncoderDestroy(v141);
  if (v69)
    CFRelease(v69);
LABEL_105:
  if (cf)
    CFRelease(cf);
  if (v139)
    CFRelease(v139);
  if (v80)
    CFRelease(v80);
  if ((_DWORD)v32)
    goto LABEL_112;
LABEL_147:
  v93 = a19;
  if (a11 || a12)
  {
    v95 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v33 = v95;
    if (!v95)
    {
LABEL_192:
      v34 = Mutable;
      v31 = 0;
      v32 = 4294950305;
      goto LABEL_227;
    }
    CMPhotoCFDictionarySetInt(v95, CFSTR("QualityControllerType"), 3);
    keys[0] = CFSTR("QualityValue");
    values[0] = 0;
    values[0] = CMPhotoCFNumberCreateFloat(0.75);
    v96 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (values[0])
      CFRelease(values[0]);
    CFDictionarySetValue(v33, CFSTR("QualityControllerParameters"), v96);
    if (v96)
      CFRelease(v96);
    if (a11)
    {
      keys[0] = 0;
      keys[1] = 0;
      *(_QWORD *)&v148 = a6;
      *((_QWORD *)&v148 + 1) = v36;
      *(_OWORD *)values = 0u;
      v169 = v148;
      CropPostOrientation = CMPhotoGetCropPostOrientation(a6, v36, values, a5, keys);
      if ((_DWORD)CropPostOrientation)
        goto LABEL_190;
      values[0] = 0;
      values[1] = 0;
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(v148, *((unint64_t *)&v148 + 1), 0xA0uLL, 0, 0, 0, 1, (unint64_t *)values, 0, 0);
      v98 = CFDataGetLength(Mutable);
      CropPostOrientation = CMPhotoByteStreamCreateFromSource(Mutable, v98, 0, 0, &v136, 0);
      if ((_DWORD)CropPostOrientation)
        goto LABEL_190;
      Value = CFDictionaryGetValue(v33, CFSTR("QualityControllerParameters"));
      BYTE2(v115) = 1;
      BYTE1(v115) = a23;
      LOBYTE(v115) = 0;
      v93 = a19;
      LOBYTE(v114) = 0;
      CropPostOrientation = CMPhotoJFIFTranscodeFromJFIF(a1, v148, *((_QWORD *)&v148 + 1), &CMPhotoRectZero, 1, values[0], values[1], a8, 3, Value, v114, 0, 0, 0, 0, v136, 0, 0, a19,
                              a20,
                              a21,
                              v115,
                              &v135);
      if ((_DWORD)CropPostOrientation)
        goto LABEL_190;
      if (!v135)
      {
        v34 = Mutable;
        v32 = FigSignalErrorAt();
LABEL_191:
        v31 = 0;
        goto LABEL_227;
      }
    }
    else
    {
      if (!a12)
      {
        v93 = a19;
        if (!v39)
          goto LABEL_150;
        goto LABEL_171;
      }
      v93 = a19;
      CropPostOrientation = CMPhotoUnifiedJPEGEncoderCreate(a1, a20, a19, 0, &v138);
      if ((_DWORD)CropPostOrientation)
        goto LABEL_190;
      if (a18)
      {
        v100 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a18 + 16);
        if (v100)
          v100(a12, 0, 1, *(_QWORD *)(a18 + 24));
      }
      *(_OWORD *)keys = 0u;
      v148 = 0u;
      CropPostOrientation = CMPhotoUnifiedJPEGEncoderEncode((uint64_t)v138, (uint64_t)v33, a12, a23, keys, 1, 1, 5, 0, &sbuf);
      if ((_DWORD)CropPostOrientation)
        goto LABEL_190;
      DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
      if (!DataBuffer)
      {
        v34 = Mutable;
        v31 = 0;
        v32 = 4294950304;
LABEL_227:
        CMPhotoUnifiedJPEGEncoderDestroy(v138);
        Mutable = v34;
        if (!v33)
          goto LABEL_209;
LABEL_208:
        CFRelease(v33);
        goto LABEL_209;
      }
      v102 = DataBuffer;
      DataLength = CMBlockBufferGetDataLength(DataBuffer);
      CropPostOrientation = CMPhotoDataCreateFromSource(a1, v102, 0, DataLength, &v135, 0);
      if ((_DWORD)CropPostOrientation)
        goto LABEL_190;
    }
    if (!v39)
      goto LABEL_150;
  }
  else
  {
    v33 = 0;
    if (!v39)
    {
LABEL_150:
      v94 = 0;
      goto LABEL_178;
    }
  }
LABEL_171:
  if (!v138)
  {
    CropPostOrientation = CMPhotoUnifiedJPEGEncoderCreate(a1, a20, v93, 0, &v138);
    if ((_DWORD)CropPostOrientation)
    {
LABEL_190:
      v32 = CropPostOrientation;
      v34 = Mutable;
      goto LABEL_191;
    }
  }
  v104 = CFArrayCreateMutable(a1, v39, 0);
  if (!v104)
    goto LABEL_192;
  v94 = v104;
  if (v39 >= 1)
  {
    v105 = 0;
    while (1)
    {
      v106 = _compressAuxImage(a1, (uint64_t)v138, v94, v105, a23, a14, a15, 0);
      if ((_DWORD)v106)
        break;
      if (v39 == ++v105)
        goto LABEL_178;
    }
    v32 = v106;
    v31 = 0;
    goto LABEL_203;
  }
LABEL_178:
  if (a24)
  {
    v31 = 0;
    if (a25)
    {
      v107 = Mutable;
      Mutable = 0;
LABEL_185:
      v31 = 0;
      v32 = 0;
      *a25 = v107;
      goto LABEL_203;
    }
    v32 = 0;
  }
  else
  {
    v108 = CFDataCreateMutable(a1, 0);
    if (v108)
    {
      v107 = v108;
      WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if ((_DWORD)WritableWithCFMutableData)
      {
        v32 = WritableWithCFMutableData;
      }
      else
      {
        v110 = CMPhotoJFIFUtilitiesMergeImageComponents(a1, v133, (int)Mutable, (int)v135, v94, v134);
        v32 = v110;
        if (a25 && !(_DWORD)v110)
          goto LABEL_185;
      }
      v31 = v107;
    }
    else
    {
      v31 = 0;
      v32 = 4294950305;
    }
  }
LABEL_203:
  if (!v94)
  {
    v34 = Mutable;
    goto LABEL_227;
  }
  if (CFArrayGetCount(v94) >= 1)
  {
    v111 = 0;
    do
    {
      ValueAtIndex = (const void **)CFArrayGetValueAtIndex(v94, v111);
      CMPhotoCompressedAuxImageStorageDestroy(ValueAtIndex);
      ++v111;
    }
    while (v111 < CFArrayGetCount(v94));
  }
  CMPhotoUnifiedJPEGEncoderDestroy(v138);
  CFRelease(v94);
  if (v33)
    goto LABEL_208;
LABEL_209:
  if (sbuf)
    CFRelease(sbuf);
  if (Mutable)
    CFRelease(Mutable);
  if (v136)
    CFRelease(v136);
  if (v135)
    CFRelease(v135);
  if (v134)
    CFRelease(v134);
  if (v31)
    CFRelease(v31);
  if (v133)
    CFRelease(v133);
  if (theBuffer)
    CFRelease(theBuffer);
  return v32;
}

uint64_t _compressAuxImage(const __CFAllocator *a1, uint64_t a2, __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, const void **, const __CFDictionary **, int *, const void **, __CVBuffer **, CFTypeRef *, CFTypeRef *), uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  signed int PixelFormatType;
  int v15;
  int v16;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  _OWORD v23[2];
  int v24;
  void *v25;
  CFTypeRef v26;
  CFTypeRef cf;
  CFTypeRef v28;
  void *value;
  CFTypeRef v30;
  const void *v31;
  __CVBuffer *v32;
  const __CFDictionary *v33;
  const void *v34;

  v33 = 0;
  v34 = 0;
  v31 = 0;
  v32 = 0;
  value = 0;
  v30 = 0;
  cf = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v13 = a6(a4, a7, &v34, &v33, &v24, &v31, &v32, &cf, &v26);
  if ((_DWORD)v13)
  {
    v20 = v13;
LABEL_47:
    CMPhotoCompressedAuxImageStorageDestroy(0);
    goto LABEL_24;
  }
  if (v24 == 3)
  {
    v20 = 0;
    goto LABEL_47;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(v32);
  if (v33 && CFDictionaryContainsKey(v33, CFSTR("IntInvalidValue")))
  {
    v15 = 1;
    goto LABEL_14;
  }
  v15 = 1;
  if (PixelFormatType <= 1278226735)
  {
    if (PixelFormatType == 825306677)
      goto LABEL_14;
    v16 = 825437747;
  }
  else
  {
    if (PixelFormatType == 1278226736 || PixelFormatType == 1278226742)
      goto LABEL_14;
    v16 = 1932996149;
  }
  if (PixelFormatType != v16)
    v15 = 0;
LABEL_14:
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v20 = 4294950305;
    goto LABEL_47;
  }
  v18 = Mutable;
  v19 = CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(1785750887, v15, (CFNumberRef *)&value, (CFNumberRef *)&v28);
  if ((_DWORD)v19)
    goto LABEL_43;
  if (value)
    CFDictionarySetValue(v18, CFSTR("QualityControllerType"), value);
  if (v28)
    CFDictionarySetValue(v18, CFSTR("QualityControllerParameters"), v28);
  memset(v23, 0, sizeof(v23));
  v19 = CMPhotoUnifiedJPEGEncoderEncode(a2, (uint64_t)v18, (uint64_t)v32, a5, v23, 1, 1, 6, a8, (CMSampleBufferRef *)&v30);
  if ((_DWORD)v19)
  {
LABEL_43:
    v20 = v19;
    v21 = 0;
  }
  else
  {
    v20 = CMPhotoCompressedAuxImageStorageCreate(v30, 1, v34, v31, v33, 0, v24, cf, v26, &v25);
    v21 = (const void **)v25;
    if (!(_DWORD)v20)
    {
      CFArrayAppendValue(a3, v25);
      v21 = 0;
      v25 = 0;
    }
  }
  CMPhotoCompressedAuxImageStorageDestroy(v21);
  CFRelease(v18);
LABEL_24:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (v28)
    CFRelease(v28);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  if (v30)
    CFRelease(v30);
  if (v26)
    CFRelease(v26);
  return v20;
}

void *_applejpeg_alloc_0(size_t a1)
{
  return malloc_type_malloc(a1, 0x9C4D338CuLL);
}

uint64_t _applejpeg_read(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v10;

  v7 = *a3;
  v6 = a3[1];
  v8 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 8);
  if (!v8)
    return 0;
  v10 = 0;
  if (v8(v6, a2, v7, a1, &v10))
    return 0;
  result = v10;
  *a3 += v10;
  return result;
}

uint64_t _applejpeg_skip_0(int a1, _QWORD *a2)
{
  *a2 += a1;
  return 0;
}

uint64_t _applejpeg_rewind_0(_QWORD *a1)
{
  *a1 = 0;
  return 0;
}

uint64_t _applejpeg_write(UInt8 *bytes, int a2, uint64_t a3)
{
  CFDataAppendBytes(*(CFMutableDataRef *)(a3 + 8), bytes, a2);
  *(_QWORD *)a3 += a2;
  return 0;
}

void _applejpeg_converter_callback(uint64_t *a1, char **a2, char **a3)
{
  uint64_t v3;
  size_t v5;
  int v6;
  size_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  CVReturn v13;
  CFTypeRef v14;
  uint64_t v15;
  CFTypeRef cf;

  v3 = *a1;
  cf = 0;
  if (*((_DWORD *)a2 + 12) == 4 && *((_DWORD *)a3 + 12) == 4)
  {
    v5 = *((int *)a2 + 10);
    if ((_DWORD)v5 == *((_DWORD *)a3 + 10))
    {
      v6 = *((_DWORD *)a2 + 11);
      if (v6 == *((_DWORD *)a3 + 11))
      {
        v8 = v6;
        if (a2[15])
          v9 = (uint64_t)a2[15];
        else
          v9 = 4 * v5;
        if (a3[15])
          v10 = (size_t)a3[15];
        else
          v10 = 4 * v5;
        v11 = *a3;
        if (v6)
        {
          v15 = v3;
          v12 = *a2;
          do
          {
            memcpy(v11, v12, 4 * v5);
            v12 += v9;
            v11 += v10;
            --v6;
          }
          while (v6);
          v11 = *a3;
          v3 = v15;
        }
        v13 = CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v8, 0x42475241u, v11, v10, 0, 0, 0, (CVPixelBufferRef *)&cf);
        v14 = cf;
        if (!v13)
        {
          (*(void (**)(CFTypeRef, uint64_t, _QWORD, _QWORD))(v3 + 16))(cf, a1[1], 0, *(_QWORD *)(v3 + 24));
          a1[1] += v8;
          v14 = cf;
        }
        if (v14)
          CFRelease(v14);
      }
    }
  }
}

uint64_t bitstream_write_start_luma(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return first_pixel_luma(a1, a2, a3, a4, a5, a6, 0, 32);
}

uint64_t first_pixel_luma(_DWORD *a1, __int32 *a2, int a3, int8x8_t a4)
{
  double *v4;
  __int32 v5;

  v5 = *a1;
  v4 = (double *)(a1 + 1);
  a4.i32[0] = v5;
  *a2 = v5;
  a4.i8[7] = HIBYTE(v5);
  if (((a3 - 4) & 7) != 0)
    return process_quad_luma();
  else
    return process_pixel_luma(v4, a4);
}

uint64_t process_quad_luma(__int32 *a1, uint64_t a2, int a3, uint64_t a4, double a5, int8x8_t a6)
{
  int8x8_t v6;
  __n128 v7;

  a6.i32[0] = *a1;
  v6 = vext_s8(*(int8x8_t *)&a5, a6, 7uLL);
  HIBYTE(a5) = HIBYTE(*a1);
  v7.n128_u64[0] = vshll_n_u8((uint8x8_t)vsub_s8(a6, v6), 1uLL).u64[0];
  v7.n128_u64[1] = v7.n128_u64[0];
  return process_quad_luma4((uint64_t)(a1 + 1), a2, (a3 - 4), a4, a5, v7);
}

uint64_t process_pixel_luma(double *a1, int8x8_t a2)
{
  double v3;

  v3 = *a1;
  _X0 = a1 + 1;
  __asm { PRFM            #0, [X0,#0x20] }
  return process_pixel_luma0(v3, (__n128)vshll_n_u8((uint8x8_t)vsub_s8(*(int8x8_t *)&v3, vext_s8(a2, *(int8x8_t *)&v3, 7uLL)), 1uLL));
}

uint64_t process_pixel_luma0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_luma0(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[0])), *(_WORD *)(a4 + a6.n128_u16[0]));
}

uint64_t bitstream_write_code_luma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, float a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_luma0(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_luma1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_luma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma1(a1, a2 + 1);
}

uint64_t process_pixel_luma1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma1(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_luma1(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_luma2(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_luma1(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma2(a1, a2 + 1);
}

uint64_t process_pixel_luma2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma2(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + WORD2(a7))), *(_WORD *)(a4 + WORD2(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_luma2(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_luma3(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_luma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma3(a1, a2 + 1);
}

uint64_t process_pixel_luma3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma3(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8;
  int v9;

  v8 = __OFSUB__(a8, (_DWORD)a6);
  v9 = a8 - a6;
  if ((v9 < 0) ^ v8 | (v9 == 0))
    return full_buffer_luma3(a1, a2, a3, a4, a5, a6, a7, v9);
  else
    return process_pixel_luma4();
}

uint64_t full_buffer_luma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma4(a1, a2 + 1);
}

uint64_t process_pixel_luma4()
{
  return process_quad_luma4();
}

uint64_t process_quad_luma4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_luma4(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[4])), *(_WORD *)(a4 + a6.n128_u16[4]));
}

uint64_t bitstream_write_code_luma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_luma4(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_luma5(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_luma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma5(a1, a2 + 1);
}

uint64_t process_pixel_luma5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma5(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[5])), *(_WORD *)(a4 + a7.n128_u16[5]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_luma5(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_luma6(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_luma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma6(a1, a2 + 1);
}

uint64_t process_pixel_luma6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma6(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[6])), *(_WORD *)(a4 + a7.n128_u16[6]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_luma6(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_luma7(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_luma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_luma7(a1, a2 + 1);
}

uint64_t process_pixel_luma7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_luma7(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[7])), *(_WORD *)(a4 + a7.n128_u16[7]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_luma7(double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int8x8_t a9)
{
  BOOL v9;
  int v10;

  v9 = __OFSUB__(a8, (_DWORD)a6);
  v10 = a8 - a6;
  if ((v10 < 0) ^ v9 | (v10 == 0))
    return full_buffer_luma7((uint64_t)a1, a2, a3, a4, a5, a6, a7, v10);
  else
    return finish_quad_luma(a1, (uint64_t)a2, a3, a4, a5, a6, a7, v10, a9);
}

uint64_t full_buffer_luma7(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return finish_quad_luma(a1, a2 + 1);
}

uint64_t finish_quad_luma(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, int8x8_t a9)
{
  uint64_t v9;

  v9 = a7 | (a5 << a8);
  if ((_DWORD)a3)
    return process_pixel_luma(a1, a9);
  else
    return bitstream_write_flush_luma(a1, a2, a3, a4, a5, a6, v9);
}

uint64_t bitstream_write_flush_luma@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  int v10;

  if (a8 < 8)
    return bitstream_write_quad_luma(a1, a2, a3, a4, a5, a6, a7);
  v10 = a9 - a8;
  if (v10)
    return flush_loop_luma(a1, a2, a3, a4, a5, a6, a7, v10);
  else
    return done_luma(a1, (uint64_t)a2);
}

uint64_t flush_loop_luma(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unint64_t v8;
  BOOL v9;

  do
  {
    HIDWORD(v8) = a7;
    LODWORD(v8) = a7;
    a7 = v8 >> 24;
    *a2++ = BYTE3(v8);
    v9 = __OFSUB__(a8, 8);
    a8 -= 8;
  }
  while (!((a8 < 0) ^ v9 | (a8 == 0)));
  return done_luma();
}

uint64_t done_luma(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return a2 - v2;
}

uint64_t bitstream_write_quad_luma(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *a2 = a7;
  return done_luma(a1, (uint64_t)(a2 + 1));
}

uint64_t bitstream_write_start_chroma(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return first_pixel_chroma(a1, a2, a3, a4, a5, a6, 0, 32);
}

uint64_t first_pixel_chroma(_DWORD *a1, __int32 *a2, int a3, int8x8_t a4)
{
  double *v4;
  __int32 v5;

  v5 = *a1;
  v4 = (double *)(a1 + 1);
  a4.i32[0] = v5;
  *a2 = v5;
  a4.i16[3] = HIWORD(v5);
  if (((a3 - 4) & 7) != 0)
    return process_quad_chroma();
  else
    return process_pixel_luma(v4, a4);
}

uint64_t process_quad_chroma(__int32 *a1, uint64_t a2, int a3, uint64_t a4, double a5, int8x8_t a6)
{
  int8x8_t v6;
  __n128 v7;

  a6.i32[0] = *a1;
  v6 = vext_s8(*(int8x8_t *)&a5, a6, 6uLL);
  HIWORD(a5) = HIWORD(*a1);
  v7.n128_u64[0] = vshll_n_u8((uint8x8_t)vsub_s8(a6, v6), 1uLL).u64[0];
  v7.n128_u64[1] = v7.n128_u64[0];
  return process_quad_chroma4((uint64_t)(a1 + 1), a2, (a3 - 4), a4, a5, v7);
}

uint64_t process_pixel_chroma(double *a1, int8x8_t a2)
{
  double v3;

  v3 = *a1;
  _X0 = a1 + 1;
  __asm { PRFM            #0, [X0,#0x20] }
  return process_pixel_chroma0(v3, (__n128)vshll_n_u8((uint8x8_t)vsub_s8(*(int8x8_t *)&v3, vext_s8(a2, *(int8x8_t *)&v3, 6uLL)), 1uLL));
}

uint64_t process_pixel_chroma0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_chroma0(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[0])), *(_WORD *)(a4 + a6.n128_u16[0]));
}

uint64_t bitstream_write_code_chroma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, float a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_chroma0(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_chroma1(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_chroma0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma1(a1, a2 + 1);
}

uint64_t process_pixel_chroma1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma1(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma1(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_chroma1(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_chroma2(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_chroma1(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma2(a1, a2 + 1);
}

uint64_t process_pixel_chroma2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma2(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + WORD2(a7))), *(_WORD *)(a4 + WORD2(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, double a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_chroma2(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_chroma3(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_chroma2(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma3(a1, a2 + 1);
}

uint64_t process_pixel_chroma3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma3(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + HIWORD(a7))), *(_WORD *)(a4 + HIWORD(a7)), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8)
{
  BOOL v8;
  int v9;

  v8 = __OFSUB__(a8, (_DWORD)a6);
  v9 = a8 - a6;
  if ((v9 < 0) ^ v8 | (v9 == 0))
    return full_buffer_chroma3(a1, a2, a3, a4, a5, a6, a7, v9);
  else
    return process_pixel_chroma4();
}

uint64_t full_buffer_chroma3(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma4(a1, a2 + 1);
}

uint64_t process_pixel_chroma4()
{
  return process_quad_chroma4();
}

uint64_t process_quad_chroma4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, __n128 a6)
{
  return bitstream_write_code_chroma4(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a6.n128_u16[4])), *(_WORD *)(a4 + a6.n128_u16[4]));
}

uint64_t bitstream_write_code_chroma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_chroma4(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_chroma5(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_chroma4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma5(a1, a2 + 1);
}

uint64_t process_pixel_chroma5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma5(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[5])), *(_WORD *)(a4 + a7.n128_u16[5]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_chroma5(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_chroma6(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_chroma5(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma6(a1, a2 + 1);
}

uint64_t process_pixel_chroma6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma6(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[6])), *(_WORD *)(a4 + a7.n128_u16[6]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, double a9, __n128 a10)
{
  BOOL v10;
  int v11;

  v10 = __OFSUB__(a8, (_DWORD)a6);
  v11 = a8 - a6;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    return full_buffer_chroma6(a1, a2, a3, a4, a5, a6, a7, v11);
  else
    return process_pixel_chroma7(a1, (uint64_t)a2, a3, a4, a5, a9, a10, a6, a7, v11);
}

uint64_t full_buffer_chroma6(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return process_pixel_chroma7(a1, a2 + 1);
}

uint64_t process_pixel_chroma7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, __n128 a7, uint64_t a8, int a9, char a10)
{
  return bitstream_write_code_chroma7(a1, a2, a3, a4, HIBYTE(*(unsigned __int16 *)(a4 + a7.n128_u16[7])), *(_WORD *)(a4 + a7.n128_u16[7]), a9 | (a5 << a10));
}

uint64_t bitstream_write_code_chroma7(double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, int8x8_t a9)
{
  BOOL v9;
  int v10;

  v9 = __OFSUB__(a8, (_DWORD)a6);
  v10 = a8 - a6;
  if ((v10 < 0) ^ v9 | (v10 == 0))
    return full_buffer_chroma7((uint64_t)a1, a2, a3, a4, a5, a6, a7, v10);
  else
    return finish_quad_chroma(a1, (uint64_t)a2, a3, a4, a5, a6, a7, v10, a9);
}

uint64_t full_buffer_chroma7(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, char a8)
{
  *a2 = a7 | (a5 >> -a8);
  return finish_quad_chroma(a1, a2 + 1);
}

uint64_t finish_quad_chroma(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8, int8x8_t a9)
{
  uint64_t v9;

  v9 = a7 | (a5 << a8);
  if ((_DWORD)a3)
    return process_pixel_chroma(a1, a9);
  else
    return bitstream_write_flush_chroma(a1, a2, a3, a4, a5, a6, v9);
}

uint64_t bitstream_write_flush_chroma@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, int a9@<W8>)
{
  int v10;

  if (a8 < 8)
    return bitstream_write_quad_chroma(a1, a2, a3, a4, a5, a6, a7);
  v10 = a9 - a8;
  if (v10)
    return flush_loop_chroma(a1, a2, a3, a4, a5, a6, a7, v10);
  else
    return done_chroma(a1, (uint64_t)a2);
}

uint64_t flush_loop_chroma(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unint64_t v8;
  BOOL v9;

  do
  {
    HIDWORD(v8) = a7;
    LODWORD(v8) = a7;
    a7 = v8 >> 24;
    *a2++ = BYTE3(v8);
    v9 = __OFSUB__(a8, 8);
    a8 -= 8;
  }
  while (!((a8 < 0) ^ v9 | (a8 == 0)));
  return done_chroma();
}

uint64_t done_chroma(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return a2 - v2;
}

uint64_t bitstream_write_quad_chroma(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  *a2 = a7;
  return done_chroma(a1, (uint64_t)(a2 + 1));
}

uint64_t CMPhotoByteStreamReadAndCreateData(uint64_t a1, unint64_t a2, uint64_t a3, CFDataRef *a4, CFIndex *a5)
{
  uint64_t (*v10)(uint64_t, uint64_t, unint64_t *);
  uint64_t v11;
  CFIndex v12;
  const __CFAllocator *v13;
  UInt8 *v14;
  UInt8 *v15;
  uint64_t (*v16)(uint64_t, CFIndex, uint64_t, UInt8 *, uint64_t *);
  uint64_t v17;
  CFDataRef v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;

  if (a4)
  {
    v21 = 0;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
    if (!v10)
      return 4294954514;
    v22 = 0;
    v11 = v10(a1, a3, &v21);
    if ((_DWORD)v11)
      return v11;
    if ((v21 & 0x8000000000000000) != 0)
      return 4294950190;
    if (v21 >= a2)
      v12 = a2;
    else
      v12 = v21;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v14 = (UInt8 *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12, 0);
    if (!v14)
      return 4294950305;
    v15 = v14;
    v16 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, UInt8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
    if (v16)
    {
      v17 = v16(a1, v12, a3, v15, &v22);
      if ((_DWORD)v17)
      {
        v19 = v17;
      }
      else if (v22 == v12)
      {
        v18 = CFDataCreateWithBytesNoCopy(v13, v15, v12, v13);
        if (v18)
        {
          *a4 = v18;
          goto LABEL_15;
        }
        v19 = 4294950305;
      }
      else
      {
        v19 = 4294950194;
      }
    }
    else
    {
      v19 = 4294954514;
    }
    CFAllocatorDeallocate(v13, v15);
    return v19;
  }
  v12 = 0;
LABEL_15:
  v19 = 0;
  if (a5)
    *a5 = v12;
  return v19;
}

uint64_t CMPhotoUnifiedJPEGEncoderIsHardwareAvailable()
{
  if (_isHWAvailableHelper_onceToken_0 != -1)
    dispatch_once(&_isHWAvailableHelper_onceToken_0, &__block_literal_global_15);
  return _isHWAvailableHelper_sHWAvailable_0;
}

uint64_t CMPhotoUnifiedJPEGEncoderGetAROTSegmentSize(uint64_t a1)
{
  if (a1)
    return 4 * a1 + 14;
  else
    return 0;
}

uint64_t CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unsigned __int16 v7;
  uint64_t v11;
  _QWORD v13[7];
  _QWORD v14[4];
  _QWORD v15[10];
  void *v16;

  v16 = 0;
  v5 = 4294950306;
  if (a1)
  {
    if (a2)
    {
      v7 = a3;
      if (a3)
      {
        if (4 * a3 + 14 <= a4 && a5 && (a5 + a4 <= a2 || a2 + a1 < a5))
        {
          v15[0] = 0;
          v15[1] = 1;
          memset(&v15[2], 0, 24);
          v15[5] = a3;
          v15[6] = 0;
          v15[7] = 0;
          v15[8] = a5 + 14;
          v15[9] = 0;
          v11 = CMPhotoJFIFScannerCreate((uint64_t)_scannerCallbackMarker, (uint64_t)v15, (uint64_t)_scannerCallbackRestartMarker, (uint64_t)v15, &v16);
          if ((_DWORD)v11 || (v11 = CMPhotoJFIFScannerRun((uint64_t)v16, a2, a1), (_DWORD)v11))
          {
            v5 = v11;
          }
          else
          {
            v14[0] = 0;
            v14[1] = v14;
            v14[2] = 0x2000000000;
            v14[3] = 0;
            v13[0] = MEMORY[0x1E0C809B0];
            v13[1] = 0x40000000;
            v13[2] = __CMPhotoUnifiedJPEGEncoderWriteAROTTableToPtr_block_invoke;
            v13[3] = &unk_1E53F6220;
            v13[4] = v14;
            v13[5] = a4;
            v13[6] = a5;
            v5 = _writeRestartMarkerSegmentWithHandler(0, 0, v7, a5 + 14, 0, 0, (uint64_t)v13);
            _Block_object_dispose(v14, 8);
          }
        }
      }
    }
  }
  CMPhotoJFIFScannerDispose(v16);
  return v5;
}

uint64_t _scannerCallbackMarker(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char v11;
  _WORD sourceBytes[2];
  _BYTE v13[2];

  if ((a3 - 192) < 4)
  {
    v6 = *(_QWORD *)(a5 + 16);
    if (*(_OWORD *)(a5 + 16) != 0)
    {
      if (a4 > 8)
      {
        sourceBytes[0] = bswap32(*(_QWORD *)(a5 + 24)) >> 16;
        sourceBytes[1] = bswap32(v6) >> 16;
        if (*(_QWORD *)a5)
          return CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)a5, a2 + 5, 4uLL);
        return 4294950304;
      }
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (a3 == 217)
  {
    result = 0;
    *(_QWORD *)(a5 + 56) = a2;
    return result;
  }
  if (a3 != 218)
    return 0;
  v8 = a2 + a4 + 2;
  *(_QWORD *)(a5 + 48) = v8;
  if (!*(_BYTE *)(a5 + 12))
    goto LABEL_14;
  v9 = *(_QWORD *)(a5 + 64);
  if (v9)
  {
    *(_DWORD *)(v9 + 4 * (*(_QWORD *)(a5 + 72))++) = *(_QWORD *)(a5 + 32);
    *(_QWORD *)(a5 + 32) += 2;
    v8 = *(_QWORD *)(a5 + 48);
  }
  v10 = v8 - 2;
  *(_QWORD *)(a5 + 48) = v8 - 2;
  v13[0] = -1;
  v11 = *(_BYTE *)(a5 + 10);
  v13[1] = v11 | 0xD0;
  *(_BYTE *)(a5 + 10) = (v11 + 1) & 7;
  if (!*(_QWORD *)a5)
    return 4294950304;
  result = CMBlockBufferReplaceDataBytes(v13, *(CMBlockBufferRef *)a5, v10, 2uLL);
  if (!(_DWORD)result)
  {
LABEL_14:
    if (!*(_BYTE *)(a5 + 8) && !*(_BYTE *)(a5 + 11))
      return 4294950191;
    return 0;
  }
  return result;
}

uint64_t _scannerCallbackRestartMarker(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  char v7;
  char sourceBytes;

  v5 = *(_QWORD *)(a5 + 64);
  if (v5)
  {
    v6 = *(_QWORD *)(a5 + 72);
    if (*(_QWORD *)(a5 + 40) <= v6)
      return FigSignalErrorAt();
    *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(a5 + 32) + a3;
    ++*(_QWORD *)(a5 + 72);
  }
  if (!*(_BYTE *)(a5 + 9))
    return 0;
  v7 = *(_BYTE *)(a5 + 10);
  sourceBytes = v7 | 0xD0;
  *(_BYTE *)(a5 + 10) = (v7 + 1) & 7;
  if (*(_QWORD *)a5)
    return CMBlockBufferReplaceDataBytes(&sourceBytes, *(CMBlockBufferRef *)a5, a2 + 1, 1uLL);
  else
    return 4294950304;
}

uint64_t _writeRestartMarkerSegmentWithHandler(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int16 v16;
  int v17;
  char v18;
  char v19;
  int v20;
  int v21;
  char v22;
  char v23;
  uint64_t v24;

  v12 = a2 != 0;
  v24 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v13 = 4 * a3;
  v17 = -352331521;
  v18 = (unsigned __int16)(4 * a3 + 12) >> 8;
  v19 = (4 * a3 + 12) & 0xFD | (2 * (a2 != 0));
  v20 = 1414484545;
  v21 = 0;
  v22 = BYTE1(a3);
  v23 = a3;
  v14 = 16 - 2 * (a1 == 0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a7 + 16))(a7, v14, (unint64_t)&v17 | (2 * (a1 == 0)));
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a7 + 16))(a7, v13, a4);
    if (!(_DWORD)result)
    {
      if (!a2
        || (result = (*(uint64_t (**)(uint64_t, _QWORD, __int16 *))(a7 + 16))(a7, (2 * v12), &v16), !(_DWORD)result))
      {
        if (a5)
          *a5 = v14;
        result = 0;
        if (a6)
          *a6 = v13 + v14 + (2 * v12);
      }
    }
  }
  return result;
}

uint64_t CMPhotoUnifiedJPEGEncoderEncodeStripToStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, _OWORD *a10, uint64_t a11, __CFData *a12)
{
  __int128 v12;
  __int128 v13;
  _OWORD v15[2];
  _OWORD v16[2];

  if (!(_DWORD)a6 || *a10 == 0 && a10[1] == 0)
    return FigSignalErrorAt();
  v12 = a5[1];
  v16[0] = *a5;
  v16[1] = v12;
  v13 = a10[1];
  v15[0] = *a10;
  v15[1] = v13;
  return _encodeBuffer(a1, a2, a3, a4, (uint64_t)v16, 1, a6, a7, a9, (unint64_t *)v15, a11, 0, a12);
}

uint64_t CMPhotoUnifiedJPEGEncoderDidUseHW(uint64_t result)
{
  if (result)
    return *(unsigned __int8 *)(result + 73);
  return result;
}

uint64_t _encodeSW(uint64_t a1, __CVBuffer *a2, uint64_t a3, int a4, CFTypeRef *a5, __CFData *a6)
{
  uint64_t (*v12)(__CFData *, _QWORD, uint64_t *);
  uint64_t v13;
  __CFData *v14;
  uint64_t v15;
  CFMutableDataRef v16;
  CFMutableDataRef v17;
  uint64_t v18;
  uint64_t PixelFormatType;
  int v20;
  int v21;
  uint64_t v22;
  const __CFData *v23;
  int v24;
  __CVBuffer *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 IsNon601YCbCr;
  _DWORD *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t PixelBufferDataPointers;
  _DWORD *v37;
  __CVBuffer *v38;
  int v39;
  int v40;
  int restarted;
  BOOL v42;
  int v43;
  int v44;
  CFMutableDataRef Mutable;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int inserted;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(__CFData *, uint64_t, uint64_t, uint64_t, __int128 *);
  CFIndex Length;
  CFTypeRef *v57;
  __CFData *v58;
  int v59;
  __CFData *v60;
  _QWORD v61[5];
  _DWORD v62[21];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[15];
  char v68;
  uint64_t v69;
  BOOL (*v70)(UInt8 *, CFIndex, uint64_t);
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  uint64_t v80;
  CFTypeRef v81;
  CFTypeRef cf;
  __int128 bytes;
  uint64_t v84;
  _BYTE v85[116];
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  CFRange v89;

  v88 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v81 = 0;
  if (a6 && *(_QWORD *)(a3 + 160))
  {
    v13 = FigSignalErrorAt();
    goto LABEL_106;
  }
  v80 = 0;
  if (a6)
  {
    v12 = *(uint64_t (**)(__CFData *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v12)
    {
      v14 = 0;
      v22 = 4294954514;
      goto LABEL_22;
    }
    v13 = v12(a6, 0, &v80);
    if (!(_DWORD)v13)
    {
      v14 = 0;
      v15 = v80;
      if (v80 < 0)
      {
        v22 = 4294950190;
        goto LABEL_22;
      }
      v60 = 0;
      v16 = a6;
LABEL_10:
      v78[0] = a6 != 0;
      v78[1] = v16;
      v79 = v15;
      v76 = xmmword_1E53F62A0;
      v77 = 0;
      v69 = 0;
      v70 = _applejpeg_write_0;
      v71 = 0;
      v72 = 0;
      v74 = 0;
      v75 = 0;
      v73 = v78;
      if (!applejpeg_encode_create())
      {
        v22 = 4294950305;
        v14 = v60;
        goto LABEL_22;
      }
      v59 = a4;
      v18 = 875704422;
      PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
      v20 = PixelFormatType;
      if ((int)PixelFormatType <= 1885745711)
      {
        if ((int)PixelFormatType <= 875836533)
        {
          if ((_DWORD)PixelFormatType != 875704438)
          {
            v21 = 875704950;
LABEL_19:
            if ((_DWORD)PixelFormatType == v21)
              goto LABEL_20;
LABEL_29:
            v18 = PixelFormatType;
          }
LABEL_31:
          v57 = a5;
          v58 = a6;
          v25 = a2;
          v26 = *(_QWORD *)(a3 + 40);
          v27 = *(_QWORD *)(a3 + 48);
          v28 = *(_QWORD *)(a3 + 56);
          v29 = *(_QWORD *)(a3 + 64);
          v68 = 0;
          IsNon601YCbCr = CMPhotoPixelBufferIsNon601YCbCr(v25, &v68);
          if ((_DWORD)v18 != v20 || IsNon601YCbCr)
          {
            v31 = (_DWORD *)MEMORY[0x1E0CA1FC0];
            if (*MEMORY[0x1E0CA1FC0] == 1)
              kdebug_trace();
            if (!*(_BYTE *)(a3 + 9))
            {
              v35 = FigSignalErrorAt();
LABEL_110:
              v22 = v35;
LABEL_111:
              v14 = v60;
              goto LABEL_22;
            }
            v22 = CMPhotoScaleAndRotateSessionTransformForMaxSideLengthWithOptions(*(_QWORD *)(a1 + 16), v25, 0, v59 == 0, 1, v18, 1, 0, (double)*(unint64_t *)(a3 + 72), (double)*(unint64_t *)(a3 + 80), (double)*(unint64_t *)(a3 + 88), (double)*(unint64_t *)(a3 + 96), 0, 0, 0, 0, 1u, *(_WORD *)(a3 + 10), HIBYTE(*(_WORD *)(a3 + 10)),
                    *(_BYTE *)(a3 + 12),
                    (__CVBuffer **)&v81);
            if (*v31 == 1)
              kdebug_trace();
            if ((_DWORD)v22)
              goto LABEL_111;
            v25 = (__CVBuffer *)v81;
            v26 = vcvtad_u64_f64(CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v81));
            v27 = vcvtad_u64_f64(v32);
            LODWORD(v28) = vcvtad_u64_f64(v33);
            LODWORD(v29) = vcvtad_u64_f64(v34);
          }
          v35 = CVPixelBufferLockBaseAddress(v25, 1uLL);
          if (!(_DWORD)v35)
          {
            v66 = 0u;
            memset(v67, 0, sizeof(v67));
            v64 = 0u;
            v65 = 0u;
            v63 = 0u;
            memset(v62, 0, sizeof(v62));
            v87 = 0uLL;
            v86 = 0uLL;
            PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v25, v26, v27, v62, (uint64_t)&v86, (uint64_t)&v87, 0);
            if ((_DWORD)PixelBufferDataPointers
              || (memset(&v62[3], 0, 72),
                  v64 = 0uLL,
                  v62[1] = v28,
                  v62[2] = v29,
                  v63 = v87,
                  PixelBufferDataPointers = CMPhotoPixelFormatToAppleJPEGFormat(v18, &v62[3]),
                  (_DWORD)PixelBufferDataPointers))
            {
              v22 = PixelBufferDataPointers;
              v23 = 0;
              v14 = v60;
            }
            else
            {
              *(_OWORD *)&v85[52] = *(_OWORD *)&v62[13];
              *(_OWORD *)&v85[68] = *(_OWORD *)&v62[17];
              *(_OWORD *)&v85[84] = v63;
              *(_OWORD *)&v85[100] = v64;
              *(_OWORD *)&v85[4] = *(_OWORD *)&v62[1];
              *(_OWORD *)&v85[20] = *(_OWORD *)&v62[5];
              *(_OWORD *)&v85[36] = *(_OWORD *)&v62[9];
              v65 = v86;
              *(_OWORD *)((char *)v67 + 4) = *(_OWORD *)v85;
              *(_OWORD *)((char *)&v67[2] + 4) = *(_OWORD *)&v85[16];
              *(_OWORD *)((char *)&v67[4] + 4) = *(_OWORD *)&v85[32];
              *(_OWORD *)((char *)&v67[12] + 4) = *(_OWORD *)&v85[96];
              *(_OWORD *)((char *)&v67[10] + 4) = *(_OWORD *)&v85[80];
              *(_OWORD *)((char *)&v67[8] + 4) = *(_OWORD *)&v85[64];
              v66 = 0uLL;
              LODWORD(v67[0]) = v62[0];
              HIDWORD(v67[14]) = HIDWORD(v64);
              *(_OWORD *)((char *)&v67[6] + 4) = *(_OWORD *)&v85[48];
              if (*(_BYTE *)(a3 + 144))
              {
                v37 = (_DWORD *)MEMORY[0x1E0CA1FC0];
                v14 = v60;
                v38 = v25;
                CMPhotoGetBitDepthForPixelFormat(v18);
                restarted = applejpeg_encode_set_option_type_lossless();
                if (restarted)
                  goto LABEL_86;
                goto LABEL_49;
              }
              v39 = applejpeg_encode_set_option_type_baseline();
              v37 = (_DWORD *)MEMORY[0x1E0CA1FC0];
              if (!v39)
              {
                bytes = *(_OWORD *)(a3 + 184);
                v84 = *(_QWORD *)(a3 + 200);
                v40 = applejpeg_encode_set_option_q_tables();
                v38 = v25;
                if (v40)
                {
                  v22 = CMPhotoAppleJPEGErrorToCMPhotoError(v40);
                  v23 = 0;
                  v14 = v60;
                  goto LABEL_93;
                }
                v14 = v60;
LABEL_49:
                restarted = applejpeg_encode_set_option_restart_markers();
                if (!restarted)
                {
                  restarted = applejpeg_encode_set_option_num_threads();
                  if (!restarted)
                  {
                    if (!*(_BYTE *)(a3 + 4))
                    {
                      LOBYTE(bytes) = -1;
                      v44 = *(_DWORD *)(a3 + 32);
                      v42 = -v44 < 0;
                      v43 = -v44 & 7;
                      LOBYTE(v44) = v44 & 7;
                      if (!v42)
                        v44 = -v43;
                      BYTE1(bytes) = v44 | 0xD0;
                      if (_applejpeg_write_0((UInt8 *)&bytes, 2, (uint64_t)v78))
                      {
                        v23 = 0;
                        v22 = 4294950304;
                        goto LABEL_93;
                      }
                      if (*(_BYTE *)(a1 + 32))
                        *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * *(int *)(a3 + 32)) = v79 - *(_DWORD *)(a1 + 48) - 2;
                    }
                    ++*(_DWORD *)(a3 + 32);
                    if (!*(_BYTE *)(a1 + 32))
                      goto LABEL_67;
                    restarted = applejpeg_encode_set_option_record_rst_offsets();
                    if (!restarted
                      || *(_BYTE *)(a3 + 4)
                      && (*(_BYTE *)(a1 + 32) = 0, (restarted = applejpeg_encode_set_option_record_rst_offsets()) == 0))
                    {
                      if (*(_BYTE *)(a3 + 4) && *(_BYTE *)(a1 + 32))
                      {
                        Mutable = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
                        v23 = Mutable;
                        if (!Mutable)
                        {
LABEL_80:
                          v22 = 4294950305;
                          goto LABEL_93;
                        }
                        v46 = *(unsigned __int16 *)(a1 + 56);
                        v47 = *(_QWORD *)(a1 + 64);
                        v61[0] = MEMORY[0x1E0C809B0];
                        v61[1] = 0x40000000;
                        v61[2] = ___encodeSW_block_invoke;
                        v61[3] = &__block_descriptor_tmp_14_0;
                        v61[4] = Mutable;
                        v48 = _writeRestartMarkerSegmentWithHandler(0, 0, v46, v47, (uint64_t *)(a1 + 40), 0, (uint64_t)v61);
                        if ((_DWORD)v48)
                          goto LABEL_85;
                        *(_QWORD *)&bytes = 0;
                        CFDataGetLength(v23);
                        CFDataGetBytePtr(v23);
                        inserted = applejpeg_encode_set_option_insert_segment();
                        if (inserted)
                          goto LABEL_84;
                        *(_QWORD *)(a1 + 40) = bytes + 14;
LABEL_68:
                        inserted = applejpeg_encode_set_option_strip_encode();
                        if (!inserted)
                        {
                          inserted = applejpeg_encode_commit_options_for_file();
                          if (!inserted)
                          {
                            if (*(_BYTE *)(a3 + 4))
                            {
                              inserted = applejpeg_encode_image_all_with_bitstream_offset();
                              if (!inserted)
                                goto LABEL_72;
                            }
                            else
                            {
                              inserted = applejpeg_encode_image_all();
                              if (!inserted)
                              {
LABEL_72:
                                if (*v37 == 1)
                                  kdebug_trace();
                                if (*(_BYTE *)(a3 + 5) && *(_BYTE *)(a1 + 32))
                                {
                                  v50 = *(_QWORD *)(a1 + 56);
                                  v51 = 4 * v50;
                                  if (v58)
                                  {
                                    *(_QWORD *)&bytes = 0;
                                    v52 = *(_QWORD *)(a1 + 40);
                                    v53 = *(_QWORD *)(a1 + 64);
                                    v54 = *(uint64_t (**)(__CFData *, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                                    if (!v54)
                                    {
                                      v22 = 4294954514;
                                      goto LABEL_93;
                                    }
                                    v48 = v54(v58, v51, v52, v53, &bytes);
                                    if (!(_DWORD)v48)
                                    {
                                      v37 = (_DWORD *)MEMORY[0x1E0CA1FC0];
                                      if ((_QWORD)bytes != v51)
                                        goto LABEL_80;
                                      goto LABEL_90;
                                    }
LABEL_85:
                                    v22 = v48;
                                    goto LABEL_93;
                                  }
                                  v89.location = *(_QWORD *)(a1 + 40);
                                  v89.length = 4 * v50;
                                  CFDataReplaceBytes(v14, v89, *(const UInt8 **)(a1 + 64), 4 * v50);
                                }
                                else if (v58)
                                {
                                  goto LABEL_90;
                                }
                                Length = CFDataGetLength(v14);
                                v48 = CMPhotoSampleBufferCreateFromSource(*(const __CFAllocator **)a1, v14, 0, Length, &cf, 0);
                                if ((_DWORD)v48)
                                  goto LABEL_85;
                                _attachSizeHintIfNeeded(a3, Length, (void *)cf);
LABEL_90:
                                if (*v37 == 1)
                                  kdebug_trace();
                                v22 = 0;
                                *(_BYTE *)(a1 + 73) = 0;
                                *v57 = cf;
                                cf = 0;
LABEL_93:
                                applejpeg_encode_destroy();
                                CVPixelBufferUnlockBaseAddress(v38, 1uLL);
                                if (!v14)
                                  goto LABEL_95;
                                goto LABEL_94;
                              }
                            }
                          }
                        }
LABEL_84:
                        v48 = CMPhotoAppleJPEGErrorToCMPhotoError(inserted);
                        goto LABEL_85;
                      }
LABEL_67:
                      v23 = 0;
                      goto LABEL_68;
                    }
                  }
                }
LABEL_86:
                v22 = CMPhotoAppleJPEGErrorToCMPhotoError(restarted);
                v23 = 0;
                goto LABEL_93;
              }
              v22 = CMPhotoAppleJPEGErrorToCMPhotoError(v39);
              v23 = 0;
              v14 = v60;
            }
            v38 = v25;
            goto LABEL_93;
          }
          goto LABEL_110;
        }
        if ((_DWORD)PixelFormatType == 875836534)
        {
          v18 = 875836518;
          goto LABEL_31;
        }
        v24 = 1882468912;
      }
      else
      {
        if ((int)PixelFormatType > 2016686641)
        {
          if ((_DWORD)PixelFormatType == 2019963442)
          {
LABEL_20:
            v18 = 875704934;
            goto LABEL_31;
          }
          if ((_DWORD)PixelFormatType != 2019963440)
          {
            v21 = 2016686642;
            goto LABEL_19;
          }
          goto LABEL_31;
        }
        if ((_DWORD)PixelFormatType == 1885745712)
          goto LABEL_31;
        v24 = 2016686640;
      }
      if ((_DWORD)PixelFormatType == v24)
        goto LABEL_31;
      goto LABEL_29;
    }
LABEL_106:
    v22 = v13;
    v14 = 0;
    goto LABEL_22;
  }
  v17 = CFDataCreateMutable(*(CFAllocatorRef *)a1, 0);
  if (v17)
  {
    v15 = 0;
    v60 = v17;
    v16 = v17;
    goto LABEL_10;
  }
  v14 = 0;
  v22 = 4294950305;
LABEL_22:
  applejpeg_encode_destroy();
  v23 = 0;
  if (v14)
LABEL_94:
    CFRelease(v14);
LABEL_95:
  if (cf)
    CFRelease(cf);
  if (v23)
    CFRelease(v23);
  if (v81)
    CFRelease(v81);
  return v22;
}

xpc_object_t ___encodeHW_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFNumber *v3;
  uint64_t v4;
  float v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t empty;
  unint64_t v12;
  unsigned int valuePtr;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 140) == 4)
  {
    valuePtr = 0;
    v3 = *(const __CFNumber **)(v2 + 176);
    if (v3)
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr >= 6)
        v4 = 6;
      else
        v4 = valuePtr;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v5 = *(float *)(v2 + 168);
    v6 = v5;
    v7 = *(_DWORD *)(v2 + 136) == 1;
    v8 = 8;
    if (v7)
      v8 = 12;
    v9 = v8 | (v5 >= 0.75);
    if (v6 >= 0.9944)
      ++v9;
    if (v6 < 0.9)
      v4 = v9;
    else
      v4 = v9 + 1;
  }
  if (*(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56) >= 0x2E83001uLL)
    v10 = 48771073;
  else
    v10 = *(_QWORD *)(a1 + 64) * *(_QWORD *)(a1 + 56);
  empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "compressionIterations", *(int *)(a1 + 80));
  xpc_dictionary_set_uint64(empty, "initialQualityEnum", v4);
  xpc_dictionary_set_double(empty, "finalQuality", *(float *)(*(_QWORD *)(a1 + 32) + 168));
  xpc_dictionary_set_uint64(empty, "numPixels", v10);
  xpc_dictionary_set_uint64(empty, "surfaceSize", *(_QWORD *)(a1 + 72));
  LODWORD(v12) = *(_DWORD *)(a1 + 84);
  xpc_dictionary_set_double(empty, "fillRatio", (double)v12 / (double)*(unint64_t *)(a1 + 72));
  xpc_dictionary_set_uint64(empty, "encodedSize", *(unsigned int *)(a1 + 84));
  return empty;
}

uint64_t ___postProcessStripToStream_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  LODWORD(result) = CMByteStreamAppend();
  if (a2)
    return 4294950304;
  else
    return result;
}

void *_applejpeg_alloc_1(size_t a1)
{
  return malloc_type_malloc(a1, 0x67D60E5uLL);
}

BOOL _applejpeg_write_0(UInt8 *bytes, CFIndex length, uint64_t a3)
{
  int v4;
  int v5;

  v4 = length;
  if ((int)length < 1)
    goto LABEL_6;
  if (*(_DWORD *)a3 != 1)
  {
    if (!*(_DWORD *)a3)
      CFDataAppendBytes(*(CFMutableDataRef *)(a3 + 8), bytes, length);
    goto LABEL_6;
  }
  v5 = CMByteStreamAppend();
  if (!v5)
  {
LABEL_6:
    v5 = 0;
    *(_QWORD *)(a3 + 16) += v4;
  }
  return v5 != 0;
}

uint64_t ___encodeSW_block_invoke(uint64_t a1, CFIndex length, UInt8 *bytes)
{
  CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 32), bytes, length);
  return 0;
}

uint64_t CMPhotoDNGCompressLineASM(uint64_t a1, __n128 a2)
{
  a2.n128_u16[0] = *(_DWORD *)(a1 + 40);
  a2.n128_u16[1] = *(_DWORD *)(a1 + 44);
  return sub_1A824E338(a2);
}

uint64_t sub_1A824E338(uint64_t a1, int16x8_t a2)
{
  uint64_t v2;
  int16x8_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  do
  {
    v7 = *v3++;
    v6 -= 8;
    v8 = (int16x8_t)vshrq_n_u16((uint16x8_t)vshlq_n_s16(v7, 2uLL), 4uLL);
    a2.i32[1] = v8.i32[0];
    a2.i64[1] = *(uint64_t *)((char *)v8.i64 + 4);
    a2 = vsubq_s16(v8, a2);
    v9 = vshll_n_s16(*(int16x4_t *)a2.i8, 2uLL);
    v10 = vshll_high_n_s16(a2, 2uLL);
    a2.i32[0] = v8.i32[3];
    v11 = *(_DWORD *)(v2 + v9.i32[0]);
    v12 = (*(int *)(v2 + v9.i32[0]) >> 8);
    v13 = __OFSUB__(v5, v11);
    v14 = v5 - v11;
    if (v14 < 0 != v13)
      a1 = write_bitbuffer();
    v15 = v4 | (v12 << v14);
    v16 = *(_DWORD *)(v2 + v9.i32[1]);
    v17 = (*(int *)(v2 + v9.i32[1]) >> 8);
    v13 = __OFSUB__(v14, v16);
    v18 = v14 - v16;
    if (v18 < 0 != v13)
      a1 = write_bitbuffer();
    v19 = v15 | (v17 << v18);
    v20 = *(_DWORD *)(v2 + v9.i32[2]);
    v21 = (*(int *)(v2 + v9.i32[2]) >> 8);
    v13 = __OFSUB__(v18, v20);
    v22 = v18 - v20;
    if (v22 < 0 != v13)
      a1 = write_bitbuffer();
    v23 = v19 | (v21 << v22);
    v24 = *(_DWORD *)(v2 + v9.i32[3]);
    v25 = (*(int *)(v2 + v9.i32[3]) >> 8);
    v13 = __OFSUB__(v22, v24);
    v26 = v22 - v24;
    if (v26 < 0 != v13)
      a1 = write_bitbuffer();
    v27 = v23 | (v25 << v26);
    v28 = *(_DWORD *)(v2 + v10.i32[0]);
    v29 = (*(int *)(v2 + v10.i32[0]) >> 8);
    v13 = __OFSUB__(v26, v28);
    v30 = v26 - v28;
    if (v30 < 0 != v13)
      a1 = write_bitbuffer();
    v31 = v27 | (v29 << v30);
    v32 = *(_DWORD *)(v2 + v10.i32[1]);
    v33 = (*(int *)(v2 + v10.i32[1]) >> 8);
    v13 = __OFSUB__(v30, v32);
    v34 = v30 - v32;
    if (v34 < 0 != v13)
      a1 = write_bitbuffer();
    v35 = v31 | (v33 << v34);
    v36 = *(_DWORD *)(v2 + v10.i32[2]);
    v37 = (*(int *)(v2 + v10.i32[2]) >> 8);
    v13 = __OFSUB__(v34, v36);
    v38 = v34 - v36;
    if (v38 < 0 != v13)
      a1 = write_bitbuffer();
    v39 = v35 | (v37 << v38);
    v40 = *(_DWORD *)(v2 + v10.i32[3]);
    v41 = (*(int *)(v2 + v10.i32[3]) >> 8);
    v13 = __OFSUB__(v38, v40);
    v5 = v38 - v40;
    if (v5 < 0 != v13)
      a1 = write_bitbuffer();
    v4 = v39 | (v41 << v5);
  }
  while (v6);
  return done(a1);
}

uint64_t done(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)(result + 8) = v1;
  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v3;
  *(_DWORD *)(result + 32) = v4;
  return result;
}

uint64_t write_bitbuffer()
{
  return byte_0();
}

void byte_0()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_1();
}

void byte_1()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_2();
}

void byte_2()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_3();
}

void byte_3()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_4();
}

void byte_4()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_5();
}

void byte_5()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_6();
}

void byte_6()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  byte_7();
}

void byte_7()
{
  _BYTE *v0;
  unint64_t v1;
  _BYTE *v2;

  *v0 = HIBYTE(v1);
  v2 = v0 + 1;
  if (HIBYTE(v1) == 255)
    *v2 = 0;
  write_bitbuffer_done();
}

uint64_t SlimXEncodeF32Row(unsigned int **a1, int a2)
{
  unsigned int v2;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  unint64_t v16;
  unsigned int v17;
  signed int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  int v39;
  unint64_t v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  int v46;
  unint64_t v47;
  char *v48;
  int v49;
  unint64_t v50;
  char *v51;
  int v52;
  unsigned int *v53;
  int v54;
  uint64_t v55;

  v2 = a1[10][8];
  if (v2 != 1278226534 && v2 != 1717856627 && v2 != 1717855600)
    return 4294951896;
  v5 = (uint64_t)*a1;
  v6 = **a1;
  v7 = *((_DWORD *)a1 + 24);
  v8 = v7 - 32;
  *((_DWORD *)a1 + 24) = v7 - 32;
  if (v7 <= 31)
  {
    v10 = (unint64_t)a1[11] + (v6 >> (32 - v7));
    a1[11] = (unsigned int *)v10;
    v11 = (char *)a1[2];
    if ((char *)a1[3] - v11 <= 7)
LABEL_64:
      longjmp((int *)a1 + 29, -15400);
    *(_QWORD *)v11 = bswap64(v10);
    a1[2] += 2;
    v12 = *((_DWORD *)a1 + 24);
    v8 = v12 + 64;
    *((_DWORD *)a1 + 24) = v12 + 64;
    v9 = v6 << v12;
  }
  else
  {
    v9 = (unint64_t)a1[11] + (v6 << v8);
  }
  a1[11] = (unsigned int *)v9;
  if (*((_DWORD *)a1 + 25) > 1u)
  {
    v13 = 0;
    v14 = 16;
    do
    {
      v15 = (_DWORD *)(v5 + 4 * v13);
      v16 = (*v15 ^ v15[1]);
      v17 = 32 - __clz(v16);
      if ((_DWORD)v16)
        v18 = v17;
      else
        v18 = 0;
      v19 = (v18 - v14);
      if (v18 <= v14)
      {
        v23 = v8 - 3;
        *((_DWORD *)a1 + 24) = v8 - 3;
        if (v8 <= 2)
        {
          v24 = (unint64_t *)a1[2];
          if ((char *)a1[3] - (char *)v24 <= 7)
            goto LABEL_64;
          v25 = bswap64(v9);
          v9 = 0;
          *v24 = v25;
          a1[2] += 2;
          v23 = *((_DWORD *)a1 + 24) + 64;
        }
        v8 = v23 - v14;
        *((_DWORD *)a1 + 24) = v23 - v14;
        if (v23 - v14 < 0)
        {
          v28 = v9 + (v16 >> (v14 - v23));
          a1[11] = (unsigned int *)v28;
          v29 = (char *)a1[2];
          if ((char *)a1[3] - v29 <= 7)
            goto LABEL_64;
          *(_QWORD *)v29 = bswap64(v28);
          a1[2] += 2;
          v30 = *((_DWORD *)a1 + 24);
          v8 = v30 + 64;
          *((_DWORD *)a1 + 24) = v30 + 64;
          v9 = v16 << v30;
        }
        else
        {
          v9 += v16 << v8;
        }
        a1[11] = (unsigned int *)v9;
        if (v14 <= 0)
          v14 = 0;
        else
          --v14;
      }
      else if (v18 <= v14 + 6)
      {
        v26 = v8 - 3;
        *((_DWORD *)a1 + 24) = v8 - 3;
        if (v8 < 3)
        {
          v32 = v9 + (v19 >> (3 - v8));
          a1[11] = (unsigned int *)v32;
          v33 = (char *)a1[2];
          if ((char *)a1[3] - v33 <= 7)
            goto LABEL_64;
          *(_QWORD *)v33 = bswap64(v32);
          a1[2] += 2;
          v34 = *((_DWORD *)a1 + 24);
          v26 = v34 + 64;
          v27 = v19 << v34;
        }
        else
        {
          v27 = v9 + (v19 << v26);
        }
        v35 = v18 - 1;
        v36 = (1 << (v18 - 1)) ^ v16;
        *((_DWORD *)a1 + 24) = v26 - (v18 - 1);
        if (v26 - (v18 - 1) < 0)
        {
          v37 = v27 + (v36 >> (v18 - 1 - v26));
          a1[11] = (unsigned int *)v37;
          v38 = (char *)a1[2];
          if ((char *)a1[3] - v38 <= 7)
            goto LABEL_64;
          *(_QWORD *)v38 = bswap64(v37);
          a1[2] += 2;
          v39 = *((_DWORD *)a1 + 24);
          v8 = v39 + 64;
          *((_DWORD *)a1 + 24) = v39 + 64;
          v9 = v36 << v39;
          a1[11] = (unsigned int *)v9;
        }
        else
        {
          v9 = v27 + (v36 << (v26 - v35));
          a1[11] = (unsigned int *)v9;
          v8 = v26 - v35;
        }
      }
      else
      {
        v20 = v14 + 10;
        v21 = v8 - 4;
        *((_DWORD *)a1 + 24) = v8 - 4;
        if (v18 <= v14 + 10)
        {
          if (v8 < 4)
          {
            v44 = v9 + (0xEuLL >> (4 - v8));
            a1[11] = (unsigned int *)v44;
            v45 = (char *)a1[2];
            if ((char *)a1[3] - v45 <= 7)
              goto LABEL_64;
            *(_QWORD *)v45 = bswap64(v44);
            a1[2] += 2;
            v46 = *((_DWORD *)a1 + 24);
            v21 = v46 + 64;
            v31 = 14 << v46;
          }
          else
          {
            v31 = v9 + (14 << v21);
          }
          v8 = v21 - v20;
          *((_DWORD *)a1 + 24) = v21 - v20;
          if (v21 - v20 < 0)
          {
            v50 = v31 + (v16 >> (v20 - v21));
            a1[11] = (unsigned int *)v50;
            v51 = (char *)a1[2];
            if ((char *)a1[3] - v51 <= 7)
              goto LABEL_64;
            *(_QWORD *)v51 = bswap64(v50);
            a1[2] += 2;
            v52 = *((_DWORD *)a1 + 24);
            v8 = v52 + 64;
            *((_DWORD *)a1 + 24) = v52 + 64;
            v9 = v16 << v52;
          }
          else
          {
            v9 = v31 + (v16 << v8);
          }
        }
        else
        {
          if (v8 < 4)
          {
            v40 = v9 + (0xFuLL >> (4 - v8));
            a1[11] = (unsigned int *)v40;
            v41 = (char *)a1[2];
            if ((char *)a1[3] - v41 <= 7)
              goto LABEL_64;
            *(_QWORD *)v41 = bswap64(v40);
            a1[2] += 2;
            v42 = *((_DWORD *)a1 + 24);
            v21 = v42 + 64;
            *((_DWORD *)a1 + 24) = v42 + 64;
            v22 = 15 << v42;
          }
          else
          {
            v22 = v9 + (15 << v21);
          }
          v43 = v15[1];
          v8 = v21 - 32;
          *((_DWORD *)a1 + 24) = v21 - 32;
          if (v21 < 32)
          {
            v47 = v22 + (v43 >> (32 - v21));
            a1[11] = (unsigned int *)v47;
            v48 = (char *)a1[2];
            if ((char *)a1[3] - v48 <= 7)
              goto LABEL_64;
            *(_QWORD *)v48 = bswap64(v47);
            a1[2] += 2;
            v49 = *((_DWORD *)a1 + 24);
            v8 = v49 + 64;
            *((_DWORD *)a1 + 24) = v49 + 64;
            v9 = v43 << v49;
          }
          else
          {
            v9 = v22 + (v43 << v8);
          }
        }
        a1[11] = (unsigned int *)v9;
        if (v14 < 24)
          ++v14;
      }
      ++v13;
    }
    while ((v13 + 1) < *((_DWORD *)a1 + 25));
  }
  v55 = 0;
  if (a2 && v8 <= 63)
  {
    do
    {
      v53 = a1[2];
      if (a1[3] == v53)
        goto LABEL_64;
      a1[2] = (unsigned int *)((char *)v53 + 1);
      *(_BYTE *)v53 = HIBYTE(v9);
      v9 = (_QWORD)a1[11] << 8;
      a1[11] = (unsigned int *)v9;
      v54 = *((_DWORD *)a1 + 24);
      *((_DWORD *)a1 + 24) = v54 + 8;
    }
    while (v54 < 56);
    return 0;
  }
  return v55;
}

uint64_t SlimXDecodeF32Row(uint64_t a1)
{
  int v1;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;

  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 32);
  if (v1 != 1278226534 && v1 != 1717856627 && v1 != 1717855600)
    return 4294951896;
  v4 = *(int **)a1;
  v5 = *(_DWORD *)(a1 + 96);
  v6 = v5 - 32;
  if (v5 <= 32)
  {
    v11 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = v7 + 4;
    v10 = v8 - v7;
    v5 = v6;
    while (v10 < 5)
    {
      if (v9 - 4 == v8)
LABEL_84:
        longjmp((int *)(a1 + 116), -15400);
      *(_DWORD *)(a1 + 96) = v5 + 24;
      *(_QWORD *)(a1 + 16) = v9 - 3;
      v11 = ((unint64_t)*(unsigned __int8 *)(v9 - 4) << (v5 + 24)) + *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v11;
      ++v9;
      --v10;
      v12 = v5 - 8;
      v13 = v5 + 32;
      v5 -= 8;
      if (v13 <= 40)
      {
        v5 = v12 + 32;
        goto LABEL_17;
      }
    }
    *(_DWORD *)(a1 + 96) = v5;
    v15 = bswap32(*(_DWORD *)(v9 - 4));
    *(_QWORD *)(a1 + 16) = v9;
    v11 = (v15 << v5) + *(_QWORD *)(a1 + 88);
  }
LABEL_17:
  v16 = v11 << 32;
  *(_QWORD *)(a1 + 88) = v11 << 32;
  *(_DWORD *)(a1 + 96) = v5 + 32;
  *v4 = HIDWORD(v11);
  if (*(_DWORD *)(a1 + 100) > 1u)
  {
    v17 = 16;
    v18 = 1;
    do
    {
      v19 = v4;
      v20 = *(_DWORD *)(a1 + 96);
      if (v20 >= 62)
      {
        v22 = *(_QWORD *)(a1 + 16);
        v21 = *(_QWORD *)(a1 + 24);
        v23 = v22 + 4;
        v24 = v21 - v22;
        v20 -= 32;
        while (v24 < 5)
        {
          if (v23 - 4 == v21)
            goto LABEL_84;
          *(_DWORD *)(a1 + 96) = v20 + 24;
          *(_QWORD *)(a1 + 16) = v23 - 3;
          v16 += (unint64_t)*(unsigned __int8 *)(v23 - 4) << (v20 + 24);
          *(_QWORD *)(a1 + 88) = v16;
          ++v23;
          --v24;
          v25 = v20 - 8;
          v26 = v20 + 32;
          v20 -= 8;
          if (v26 <= 69)
          {
            v20 = v25 + 32;
            goto LABEL_26;
          }
        }
        *(_DWORD *)(a1 + 96) = v20;
        v27 = bswap32(*(_DWORD *)(v23 - 4));
        *(_QWORD *)(a1 + 16) = v23;
        v16 += v27 << v20;
      }
LABEL_26:
      v4 = v19 + 1;
      v28 = v16 >> 61;
      v29 = 8 * v16;
      *(_QWORD *)(a1 + 88) = v29;
      v30 = v20 + 3;
      *(_DWORD *)(a1 + 96) = v20 + 3;
      if ((_DWORD)v28 == 7)
      {
        if (v20 < 61)
        {
          v42 = v20 + 3;
        }
        else
        {
          v38 = *(_QWORD *)(a1 + 16);
          v39 = *(_QWORD *)(a1 + 24);
          v40 = v38 + 4;
          v41 = v39 - v38;
          v42 = v20 - 29;
          while (v41 < 5)
          {
            if (v40 - 4 == v39)
              goto LABEL_84;
            *(_DWORD *)(a1 + 96) = v42 + 24;
            *(_QWORD *)(a1 + 16) = v40 - 3;
            v29 += (unint64_t)*(unsigned __int8 *)(v40 - 4) << (v42 + 24);
            *(_QWORD *)(a1 + 88) = v29;
            ++v40;
            --v41;
            v43 = v42 - 8;
            v44 = v42 + 32;
            v42 -= 8;
            if (v44 <= 71)
            {
              v42 = v43 + 32;
              goto LABEL_58;
            }
          }
          *(_DWORD *)(a1 + 96) = v42;
          v56 = bswap32(*(_DWORD *)(v40 - 4));
          *(_QWORD *)(a1 + 16) = v40;
          v29 += v56 << v42;
        }
LABEL_58:
        v57 = 2 * v29;
        *(_QWORD *)(a1 + 88) = 2 * v29;
        v58 = v42 + 1;
        *(_DWORD *)(a1 + 96) = v42 + 1;
        if ((v29 & 0x8000000000000000) != 0)
        {
          if (v42 >= 32)
          {
            v67 = *(_QWORD *)(a1 + 16);
            v68 = *(_QWORD *)(a1 + 24);
            v69 = v67 + 4;
            v70 = v68 - v67;
            v58 = v42 - 31;
            while (v70 < 5)
            {
              if (v69 - 4 == v68)
                goto LABEL_84;
              *(_DWORD *)(a1 + 96) = v58 + 24;
              *(_QWORD *)(a1 + 16) = v69 - 3;
              v57 += (unint64_t)*(unsigned __int8 *)(v69 - 4) << (v58 + 24);
              *(_QWORD *)(a1 + 88) = v57;
              ++v69;
              --v70;
              v71 = v58 - 8;
              v72 = v58 + 32;
              v58 -= 8;
              if (v72 <= 40)
              {
                v58 = v71 + 32;
                goto LABEL_79;
              }
            }
            *(_DWORD *)(a1 + 96) = v58;
            v77 = bswap32(*(_DWORD *)(v69 - 4));
            *(_QWORD *)(a1 + 16) = v69;
            v57 += v77 << v58;
          }
LABEL_79:
          v76 = HIDWORD(v57);
          v16 = v57 << 32;
          *(_QWORD *)(a1 + 88) = v57 << 32;
          *(_DWORD *)(a1 + 96) = v58 + 32;
        }
        else
        {
          v59 = *v19;
          v60 = v17 + 10;
          v61 = 63 - v42;
          if (63 - v42 < v17 + 10)
          {
            v62 = *(_QWORD *)(a1 + 16);
            v63 = *(_QWORD *)(a1 + 24);
            v64 = v62 + 4;
            v65 = v63 - v62;
            v58 = v42 - 31;
            do
            {
              if (v58 + 32 >= 33 && v65 >= 5)
              {
                *(_DWORD *)(a1 + 96) = v58;
                v75 = bswap32(*(_DWORD *)(v64 - 4));
                *(_QWORD *)(a1 + 16) = v64;
                v57 += v75 << v58;
                goto LABEL_77;
              }
              if (v64 - 4 == v63)
                goto LABEL_84;
              *(_DWORD *)(a1 + 96) = v58 + 24;
              *(_QWORD *)(a1 + 16) = v64 - 3;
              v57 += (unint64_t)*(unsigned __int8 *)(v64 - 4) << (v58 + 24);
              *(_QWORD *)(a1 + 88) = v57;
              ++v64;
              --v65;
              v58 -= 8;
              v61 += 8;
            }
            while (v61 < v60);
            v58 += 32;
          }
LABEL_77:
          v16 = v57 << v60;
          *(_QWORD *)(a1 + 88) = v57 << v60;
          *(_DWORD *)(a1 + 96) = v58 + v60;
          LODWORD(v76) = v59 ^ (v57 >> (54 - v17));
        }
        *v4 = v76;
        if (v17 < 24)
          ++v17;
      }
      else if ((_DWORD)v28)
      {
        v45 = v17 + v28;
        v46 = v17 + v28 - 1;
        v47 = *v19;
        v48 = 61 - v20;
        if (61 - v20 < v46)
        {
          v49 = *(_QWORD *)(a1 + 16);
          v50 = *(_QWORD *)(a1 + 24);
          v51 = v49 + 4;
          v52 = v50 - v49;
          v30 = v20 - 29;
          do
          {
            if (v30 + 32 >= 33 && v52 >= 5)
            {
              *(_DWORD *)(a1 + 96) = v30;
              v73 = bswap32(*(_DWORD *)(v51 - 4));
              *(_QWORD *)(a1 + 16) = v51;
              v29 += v73 << v30;
              goto LABEL_75;
            }
            if (v51 - 4 == v50)
              goto LABEL_84;
            *(_DWORD *)(a1 + 96) = v30 + 24;
            *(_QWORD *)(a1 + 16) = v51 - 3;
            v29 += (unint64_t)*(unsigned __int8 *)(v51 - 4) << (v30 + 24);
            *(_QWORD *)(a1 + 88) = v29;
            ++v51;
            --v52;
            v30 -= 8;
            v48 += 8;
          }
          while (v48 < v46);
          v30 += 32;
        }
LABEL_75:
        v74 = v29 >> (65 - v45);
        v16 = v29 << v46;
        *(_QWORD *)(a1 + 88) = v16;
        *(_DWORD *)(a1 + 96) = v30 + v46;
        *v4 = ((1 << v46) + v74) ^ v47;
      }
      else
      {
        v31 = *v19;
        v32 = 61 - v20;
        if (61 - v20 < v17)
        {
          v33 = *(_QWORD *)(a1 + 16);
          v34 = *(_QWORD *)(a1 + 24);
          v35 = v33 + 4;
          v36 = v34 - v33;
          v30 = v20 - 29;
          do
          {
            if (v30 + 32 >= 33 && v36 >= 5)
            {
              *(_DWORD *)(a1 + 96) = v30;
              v54 = bswap32(*(_DWORD *)(v35 - 4));
              *(_QWORD *)(a1 + 16) = v35;
              v29 += v54 << v30;
              goto LABEL_56;
            }
            if (v35 - 4 == v34)
              goto LABEL_84;
            *(_DWORD *)(a1 + 96) = v30 + 24;
            *(_QWORD *)(a1 + 16) = v35 - 3;
            v29 += (unint64_t)*(unsigned __int8 *)(v35 - 4) << (v30 + 24);
            *(_QWORD *)(a1 + 88) = v29;
            ++v35;
            --v36;
            v30 -= 8;
            v32 += 8;
          }
          while (v32 < v17);
          v30 += 32;
        }
LABEL_56:
        v55 = v29 >> -(char)v17;
        v16 = v29 << v17;
        *(_QWORD *)(a1 + 88) = v16;
        *(_DWORD *)(a1 + 96) = v30 + v17;
        *v4 = v31 ^ v55;
        v17 -= v17 > 0;
      }
      ++v18;
    }
    while (v18 < *(_DWORD *)(a1 + 100));
  }
  return 0;
}

uint64_t VideoQualityControllerClass_create_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;

  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  if (!v7)
    return 4294950305;
  v8 = v7;
  result = 0;
  *v8 = a3;
  v8[1] = a4;
  *(_QWORD *)(a1 + 56) = v8;
  return result;
}

void VideoQualityControllerClass_dispose_0(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 56);
  if (v1)
    free(v1);
}

uint64_t VideoQualityControllerClass_setSessionProperties_0()
{
  FigCFDictionarySetFloat();
  return 0;
}

uint64_t CMPhotoVideoQualityControllerCreate(const void *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, int a9, char a10, _QWORD *a11)
{
  _QWORD *v19;
  _QWORD *v20;
  uint64_t (**v21)(int, int, int, int, CFTypeRef);
  uint64_t v22;
  CFTypeRef v23;
  const void *v25;

  v19 = malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040DF40DE8BuLL);
  v20 = v19;
  if (!v19)
  {
    v22 = 4294950305;
    goto LABEL_19;
  }
  if (a9 == 1936484717)
  {
    switch(a3)
    {
      case 0xAu:
        v25 = a8;
        v21 = &CMPhotoVideoQualityController_ByteBudget;
        goto LABEL_14;
      case 9u:
        v25 = a8;
        v21 = (uint64_t (**)(int, int, int, int, CFTypeRef))&CMPhotoVideoQualityController_Dummy;
        goto LABEL_14;
      case 3u:
        v25 = a8;
        v21 = &CMPhotoVideoQualityController_StillImageAdaptiveFirmware;
        goto LABEL_14;
    }
LABEL_11:
    v22 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (a9 != 1752589105 || a3 >= 7 || ((0x4Bu >> a3) & 1) == 0)
    goto LABEL_11;
  v25 = a8;
  v21 = off_1E53F62D8[a3];
LABEL_14:
  v19[1] = v21;
  if (a1)
  {
    v23 = CFRetain(a1);
    v21 = (uint64_t (**)(int, int, int, int, CFTypeRef))v20[1];
  }
  else
  {
    v23 = 0;
  }
  *v20 = v23;
  *((_DWORD *)v20 + 4) = a9;
  *((_DWORD *)v20 + 5) = a3;
  *((_DWORD *)v20 + 6) = a2;
  *((_BYTE *)v20 + 37) = a10;
  v20[5] = a6;
  v20[6] = a7;
  v22 = (*v21)((int)v20, a9, a4, a5, v25);
  if (!(_DWORD)v22)
  {
    *a11 = v20;
    v20 = 0;
  }
LABEL_19:
  CMPhotoVideoQualityControllerDispose((CFTypeRef *)v20);
  return v22;
}

void CMPhotoVideoQualityControllerDispose(CFTypeRef *a1)
{
  _QWORD *v2;
  void (*v3)(CFTypeRef *);

  if (a1)
  {
    v2 = a1[1];
    if (v2)
    {
      v3 = (void (*)(CFTypeRef *))v2[1];
      if (v3)
        v3(a1);
    }
    if (*a1)
      CFRelease(*a1);
    free(a1);
  }
}

uint64_t CMPhotoVideoQualityControllerSetSessionProperties(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t CMPhotoVideoQualityControllerSetTileProperties(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 24);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t CMPhotoVideoQualityControllerAnalyzeTile(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 32);
  if (v1)
    return v1();
  else
    return 0;
}

__n128 CMPhotoVideoQualityControllerGetPoolingKey@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 16);
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 13) = *(_QWORD *)(a1 + 29);
  return result;
}

uint64_t CMPhotoGetHEVCNALULocationAndSizeFromType(uint64_t a1, unint64_t a2, int a3, _QWORD *a4, unint64_t *a5)
{
  _BOOL4 v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v18;
  _BOOL4 v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;

  v5 = a3 != 80;
  if (a3 == 78)
    v5 = 0;
  if (a3 == 2)
    v5 = 0;
  v6 = 0;
  if (a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = -1;
    do
    {
      v10 = v8 + 1;
      v11 = *(unsigned __int8 *)(a1 + v8) | (v9 << 8);
      v6 += v7 & 1;
      if ((v11 & 0xFFFFFF) == 1)
      {
        if (v10 >= a2)
          return FigSignalErrorAt();
        v12 = v9 << 8;
        v13 = a1 + v8;
        v15 = *(_BYTE *)(v13 + 1);
        v14 = v13 + 1;
        v16 = v15 & 0x7E;
        v18 = v16 == 38 || v16 == 40;
        v20 = v16 == 78 || v16 == 80;
        v21 = a3 == 2 && v20;
        v22 = a3 != 1 && v21;
        if (a3 != 1)
          v18 = v21;
        if ((v7 & 1) != 0 && !v22)
        {
          if (v6 > 3)
          {
            v23 = -4;
            if (HIBYTE(v12))
              v23 = -3;
            v6 += v23;
            break;
          }
          return FigSignalErrorAt();
        }
        if (!((v16 != a3) & ~v18 | v7 & 1))
        {
          v6 = 0;
          *a4 = v14;
          v7 = 1;
        }
      }
      v9 = v11;
      v8 = v10;
    }
    while (a2 != v10);
  }
  if (v6)
    v5 = 0;
  if (v5)
    return FigSignalErrorAt();
  *a5 = v6;
  return 0;
}

uint64_t CMPhotoAsyncDispatcherGetTypeID()
{
  if (CMPhotoAsyncDispatcherGetTypeID_onceToken != -1)
    dispatch_once(&CMPhotoAsyncDispatcherGetTypeID_onceToken, &__block_literal_global_16);
  return sCMPhotoAsyncDispatcherTypeID;
}

double _dispatcherClass_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void _dispatcherClass_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }

}

CFTypeRef _dispatcherClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoAsyncDispatcher]"));
}

CFTypeRef _dispatcherClass_CopyDebugDesc()
{
  return CFRetain(CFSTR("<CMPhotoAsyncDispatcher %p>"));
}

uint64_t CMPhotoAsyncDispatcherCreate(const __CFAllocator *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  CFMutableArrayRef Mutable;
  dispatch_queue_t v13;
  dispatch_queue_t v14;
  dispatch_queue_t v15;
  id v16;
  id v17;
  uint64_t result;

  if (CMPhotoAsyncDispatcherGetTypeID_onceToken != -1)
  {
    dispatch_once(&CMPhotoAsyncDispatcherGetTypeID_onceToken, &__block_literal_global_16);
    if (a5)
      goto LABEL_3;
    return 4294950306;
  }
  if (!a5)
    return 4294950306;
LABEL_3:
  if (a2 - 17 <= 0xFFFFFFFFFFFFFFEFLL || a3 - 1 < a2)
    return FigSignalErrorAt();
  if (a4)
    return 4294950306;
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v11 = Instance;
    *(_QWORD *)(Instance + 24) = a2;
    Mutable = CFArrayCreateMutable(a1, a2, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v11 + 16) = Mutable;
    if (Mutable)
    {
      while (1)
      {
        v13 = dispatch_queue_create("CMPhotoAsyncDispatcherQueue", 0);
        if (!v13)
          break;
        v14 = v13;
        CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 16), v13);
        CFRelease(v14);
        if (!--a2)
        {
          if (!a3)
            goto LABEL_14;
          *(_BYTE *)(v11 + 40) = 1;
          *(_QWORD *)(v11 + 48) = a3;
          v15 = dispatch_queue_create("CMPhotoAsyncDispatcherFunnelQueue", 0);
          *(_QWORD *)(v11 + 56) = v15;
          if (v15)
          {
            v16 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            *(_QWORD *)(v11 + 64) = v16;
            if (v16)
            {
              v17 = (id)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
              *(_QWORD *)(v11 + 72) = v17;
              if (v17)
              {
LABEL_14:
                result = 0;
                *a5 = v11;
                return result;
              }
            }
          }
          break;
        }
      }
    }
    CFRelease((CFTypeRef)v11);
  }
  return 4294950305;
}

uint64_t CMPhotoAsyncDispatcherDispatchBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  CFIndex v5;
  NSObject *ValueAtIndex;
  _QWORD v8[6];

  v2 = 4294950306;
  if (!a1 || !a2)
    return v2;
  if (!*(_BYTE *)(a1 + 40))
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v4 + 1;
    v5 = v4 % *(_QWORD *)(a1 + 24);
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v5);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __CMPhotoAsyncDispatcherDispatchBlock_block_invoke;
    v8[3] = &unk_1E53F6318;
    v8[4] = a2;
    v8[5] = v5;
    dispatch_async(ValueAtIndex, v8);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout(uint64_t a1, uint64_t a2, uint64_t a3, dispatch_time_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  NSObject *v16;
  void *v17;
  intptr_t v18;
  NSObject *ValueAtIndex;
  NSObject *v20;
  _QWORD v22[9];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t block;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;

  v4 = 0;
  v5 = 4294950306;
  if (a1 && a2 && a3)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      v5 = FigSignalErrorAt();
      v4 = 0;
      goto LABEL_13;
    }
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = MEMORY[0x1E0C809B0];
    v13 = v9 >= v11;
    v14 = v9 - v11;
    if (v13)
    {
      v23 = 0;
      v24 = &v23;
      v25 = 0x3052000000;
      v26 = __Block_byref_object_copy__0;
      v27 = __Block_byref_object_dispose__0;
      v28 = 0;
      block = MEMORY[0x1E0C809B0];
      v16 = *(NSObject **)(a1 + 56);
      v30 = 3221225472;
      v31 = ___waitForIndexToComplete_block_invoke;
      v32 = &unk_1E53F6368;
      v33 = &v23;
      v34 = a1;
      v35 = v14;
      dispatch_sync(v16, &block);
      v17 = (void *)v24[5];
      if (v17)
      {
        v18 = dispatch_block_wait(v17, a4);

        _Block_object_dispose(&v23, 8);
        if (v18)
        {
          v4 = 0;
          v5 = 4294950189;
          goto LABEL_13;
        }
      }
      else
      {
        _Block_object_dispose(&v23, 8);
      }
    }
    v22[0] = v12;
    v22[1] = 3221225472;
    v22[2] = __CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout_block_invoke;
    v22[3] = &unk_1E53F6340;
    v22[6] = v9 % v10;
    v22[7] = a1;
    v22[8] = v9;
    v22[4] = a2;
    v22[5] = a3;
    v4 = (uint64_t *)dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v22);
    if (v4)
    {
      ++*(_QWORD *)(a1 + 32);
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v9 % v10);
      v20 = *(NSObject **)(a1 + 56);
      block = v12;
      v30 = 3221225472;
      v31 = ___addRunningJob_block_invoke;
      v32 = &unk_1E53F6390;
      v34 = a1;
      v35 = v9;
      v33 = v4;
      dispatch_sync(v20, &block);
      dispatch_async(ValueAtIndex, v4);
      v5 = 0;
    }
    else
    {
      v5 = FigSignalErrorAt();
    }
  }
LABEL_13:

  return v5;
}

void sub_1A824F9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletionAndTimeout(a1, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
}

const __CFArray *CMPhotoAsyncDispatcherWaitForCompletion(uint64_t a1)
{
  const __CFArray *result;
  CFIndex i;
  NSObject *ValueAtIndex;

  if (!a1)
    return (const __CFArray *)4294950306;
  result = *(const __CFArray **)(a1 + 16);
  if (result)
  {
    for (i = 0; CFArrayGetCount(result) > i; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i);
      dispatch_barrier_sync(ValueAtIndex, &__block_literal_global_4);
      result = *(const __CFArray **)(a1 + 16);
      if (!result)
        return result;
    }
    return 0;
  }
  return result;
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

id ___waitForIndexToComplete_block_invoke(_QWORD *a1)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40) = objc_msgSend(*(id *)(a1[5] + 72), "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1[6]));
  return *(id *)(*(_QWORD *)(a1[4] + 8) + 40);
}

uint64_t ___addToFunnel_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;

  v2 = a1[5];
  v3 = *(_QWORD *)(a1[6] + 80);
  v4 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v2);
  v5 = a1[4];
  if (v2 != v3)
    return objc_msgSend(*(id *)(a1[6] + 64), "setObject:forKeyedSubscript:", v5, v4);
  (*(void (**)(_QWORD))(v5 + 16))(a1[4]);
  objc_msgSend(*(id *)(a1[6] + 72), "removeObjectForKey:", v4);
  ++*(_QWORD *)(a1[6] + 80);
  v6 = (void *)MEMORY[0x1E0CB37E8];
  while (1)
  {
    v7 = objc_msgSend(v6, "numberWithUnsignedLong:");
    result = objc_msgSend(*(id *)(a1[6] + 64), "objectForKeyedSubscript:", v7);
    if (!result)
      break;
    (*(void (**)(void))(objc_msgSend(*(id *)(a1[6] + 64), "objectForKeyedSubscript:", v7) + 16))();
    objc_msgSend(*(id *)(a1[6] + 64), "removeObjectForKey:", v7);
    objc_msgSend(*(id *)(a1[6] + 72), "removeObjectForKey:", v7);
    v6 = (void *)MEMORY[0x1E0CB37E8];
    ++*(_QWORD *)(a1[6] + 80);
  }
  return result;
}

uint64_t ___addRunningJob_block_invoke(_QWORD *a1)
{
  return objc_msgSend(*(id *)(a1[5] + 72), "setObject:forKeyedSubscript:", a1[4], objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a1[6]));
}

uint64_t CMPhotoJPEGCreateJPEGFromSbuf(opaqueCMSampleBuffer *a1, const __CFDictionary *a2, void *a3, IOSurfaceRef *a4, _DWORD *a5)
{
  __CVBuffer *ImageBuffer;

  if ((sCMPhotoJPEGEncoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGEncoderTraceInitialized = 1;
  if (a1 && a4 && a5 && (ImageBuffer = CMSampleBufferGetImageBuffer(a1)) != 0)
    return _createJPEGFromCVPixelBuffer(0, ImageBuffer, a2, a3, 0, a4, a5);
  else
    return FigSignalErrorAt();
}

uint64_t _createJPEGFromCVPixelBuffer(unsigned int a1, __CVBuffer *a2, const __CFDictionary *a3, void *a4, __CFDictionary **a5, IOSurfaceRef *a6, _DWORD *a7)
{
  CGSize v9;
  const void *Value;
  CFTypeID v11;
  _BOOL4 v12;
  signed int PixelFormatType;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  __CFString *v22;
  int v23;
  __CFString *v24;
  CFTypeID v25;
  const UInt8 *BytePtr;
  int v27;
  int v28;
  int v29;
  const void *v30;
  uint64_t v31;
  CFTypeID v32;
  const void *v33;
  const void *v34;
  CFTypeID v35;
  const __CFData *v36;
  const __CFData *v37;
  CFTypeID v38;
  const __CFData *v39;
  const __CFData *v40;
  CFTypeID v41;
  int v42;
  int v43;
  float FloatValue;
  double v45;
  int v46;
  int v47;
  const __CFDictionary *v48;
  CGFloat v49;
  double v50;
  double v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned __int16 v59;
  int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v67;
  double v68;
  double v69;
  size_t v70;
  double v71;
  double v72;
  CGRect *p_rect;
  CGFloat y;
  CGFloat v75;
  __CVBuffer *v76;
  __IOSurface *IOSurface;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  _BOOL4 v83;
  BOOL v84;
  int v85;
  int v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  __CFDictionary *v97;
  __CFDictionary *v98;
  float v99;
  int v100;
  CGFloat *v101;
  CGSize v102;
  const void *v103;
  float v104;
  double v105;
  int v106;
  unsigned int v107;
  int v108;
  const __CFDictionary *v109;
  OSType v110;
  double v111;
  double v112;
  OSType v113;
  __CVBuffer *v114;
  __CVBuffer *v115;
  uint64_t v116;
  size_t v117;
  size_t v118;
  size_t BytesPerRow;
  CGColorSpace *v120;
  __CVBuffer *v121;
  void *BaseAddress;
  size_t DataSize;
  CGDataProvider *v124;
  CGBitmapInfo v125;
  size_t v126;
  CGImage *v127;
  CGImageRef v128;
  size_t v129;
  size_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  CGDataConsumer *v134;
  CGImageDestination *v135;
  const __CFAllocator *v136;
  __CFDictionary *Mutable;
  __CFDictionary *v138;
  const void *v139;
  CFNumberRef v140;
  CFMutableDictionaryRef v141;
  int v143;
  int v144;
  int v145;
  const __CFString *v146;
  int v147;
  int v148;
  int v149;
  int IntValue;
  uint64_t v153;
  int v154;
  const __CFDictionary *theDict;
  IOSurfaceRef *v157;
  unsigned int v158;
  int BoolValue;
  size_t Height;
  size_t Width;
  CFTypeRef cf;
  int v165;
  unsigned int v166;
  CGRect rect;
  IOSurfaceRef buffer;
  CFTypeRef v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  CGDataConsumerCallbacks cbks;
  IOSurfaceRef info;
  uint64_t v184;
  size_t AllocSize;
  CGRect v186;
  IOSurfaceRef v187;
  __CVBuffer *v188;
  float valuePtr[3];
  CGRect v190;
  CGRect v191;
  CGRect v192;

  v181 = 0;
  v179 = 0u;
  v180 = 0u;
  v177 = 0u;
  v178 = 0u;
  v176 = 0u;
  v175 = 0;
  v173 = 0u;
  v174 = 0u;
  v171 = 0u;
  v172 = 0u;
  v170 = 0u;
  buffer = 0;
  v169 = 0;
  v9 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
  rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
  rect.size = v9;
  if ((sCMPhotoJPEGEncoderTraceInitialized & 1) == 0)
    sCMPhotoJPEGEncoderTraceInitialized = 1;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (!a2)
  {
    v63 = FigSignalErrorAt();
    v67 = 0;
    goto LABEL_437;
  }
  if (!a6 || !a7)
    goto LABEL_458;
  BoolValue = _getBoolValue(a3, CFSTR("JPEGSoftwareEncode"), 0);
  if (a3 && (Value = CFDictionaryGetValue(a3, CFSTR("JPEGSoftwareEncode"))) != 0)
  {
    v11 = CFGetTypeID(Value);
    v12 = v11 == CFBooleanGetTypeID();
  }
  else
  {
    v12 = 0;
  }
  Width = CVPixelBufferGetWidth(a2);
  Height = CVPixelBufferGetHeight(a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  v14 = PixelFormatType;
  v15 = 0;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType != 1751411059)
      {
        v16 = 1751410032;
LABEL_24:
        if (PixelFormatType != v16)
          goto LABEL_26;
      }
    }
    else if (PixelFormatType != 1717855600)
    {
      v16 = 1717856627;
      goto LABEL_24;
    }
LABEL_25:
    v15 = 4;
    goto LABEL_26;
  }
  if ((PixelFormatType - 1278226488) <= 0x30
    && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
    || (PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
  {
    goto LABEL_25;
  }
LABEL_26:
  v166 = v15;
  v153 = 0;
  v17 = !v12;
  v18 = 420;
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType > 1751410031)
    {
      if (PixelFormatType != 1751411059)
      {
        v19 = 1751410032;
LABEL_38:
        if (PixelFormatType != v19)
          goto LABEL_40;
      }
    }
    else if (PixelFormatType != 1717855600)
    {
      v19 = 1717856627;
      goto LABEL_38;
    }
LABEL_39:
    v18 = 400;
    goto LABEL_40;
  }
  if ((PixelFormatType - 1278226488) <= 0x30
    && ((1 << (PixelFormatType - 56)) & 0x1400000000001) != 0
    || (PixelFormatType - 1278226736) <= 6 && ((1 << (PixelFormatType - 48)) & 0x45) != 0)
  {
    goto LABEL_39;
  }
LABEL_40:
  v157 = a6;
  v20 = 327689;
  theDict = a3;
  v158 = v17;
  if (!a3)
  {
    BytePtr = 0;
    v145 = 0;
    v143 = 0;
    v165 = 0;
    cf = 0;
    v27 = 1;
    IntValue = -1;
    v146 = CFSTR("SurfacePoolOneShot");
    v28 = 1;
    v148 = 0;
    v149 = 1;
    v29 = -1;
    v23 = BoolValue;
    goto LABEL_94;
  }
  v21 = _getBoolValue(a3, CFSTR("JPEGHighSpeedEncode"), 1);
  v22 = (__CFString *)CFDictionaryGetValue(a3, CFSTR("JPEGSurfacePool"));
  v23 = BoolValue;
  if (v22)
  {
    v24 = v22;
    v25 = CFGetTypeID(v22);
    v143 = 1;
    v146 = v24;
    if (v25 != CMPhotoSurfacePoolGetTypeID() && v24 != CFSTR("SurfacePoolOneShot"))
      goto LABEL_458;
  }
  else
  {
    v143 = 0;
    v146 = CFSTR("SurfacePoolOneShot");
  }
  v149 = v21;
  v30 = CFDictionaryGetValue(a3, CFSTR("JPEGScaleAndRotateSession"));
  if (v30)
  {
    v31 = (uint64_t)v30;
    v32 = CFGetTypeID(v30);
    v153 = v31;
    if (v32 != CMPhotoScaleAndRotateSessionGetTypeID())
      goto LABEL_458;
  }
  v33 = CFDictionaryGetValue(a3, CFSTR("JPEGProvidedSurface"));
  v34 = v33;
  if (v33)
  {
    v35 = CFGetTypeID(v33);
    if (v35 != IOSurfaceGetTypeID())
      goto LABEL_458;
  }
  cf = v34;
  v36 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("JPEGCustomLumaQuantTable"));
  v37 = v36;
  if (v36 && (v38 = CFGetTypeID(v36), v38 == CFDataGetTypeID()))
  {
    if (CFDataGetLength(v37) != 64)
      goto LABEL_458;
    BytePtr = CFDataGetBytePtr(v37);
  }
  else
  {
    BytePtr = 0;
  }
  v39 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("JPEGCustomChromaQuantTable"));
  if (!v39 || (v40 = v39, v41 = CFGetTypeID(v39), v41 != CFDataGetTypeID()))
  {
    if (!BytePtr)
      goto LABEL_62;
LABEL_458:
    v63 = FigSignalErrorAt();
    v67 = 0;
    goto LABEL_437;
  }
  if (CFDataGetLength(v40) != 64 || (BytePtr == 0) == (CFDataGetBytePtr(v40) != 0))
    goto LABEL_458;
LABEL_62:
  if (v37)
    goto LABEL_76;
  v42 = _getBoolValue(theDict, CFSTR("JPEGAppleQuality"), 1);
  if (v42)
    v43 = 327689;
  else
    v43 = 5;
  FloatValue = _getFloatValue(theDict, (const void *)*MEMORY[0x1E0CBC780], -1.0);
  if (FloatValue < 0.0)
  {
    v20 = v43;
    v23 = BoolValue;
    goto LABEL_76;
  }
  v45 = FloatValue;
  if (v45 < 0.05)
  {
    v46 = 0;
    v47 = 0;
LABEL_72:
    v23 = BoolValue;
    goto LABEL_73;
  }
  if (v45 < 0.26)
  {
    v46 = 1;
    v47 = 1;
    goto LABEL_72;
  }
  v23 = BoolValue;
  if (v45 >= 0.31)
  {
    if (v45 >= 0.6)
    {
      if (v45 >= 0.76)
      {
        if (v45 >= 0.83)
        {
          if (v45 >= 0.99)
            v47 = 6;
          else
            v47 = 5;
          if (v45 >= 0.99)
            v46 = 6;
          else
            v46 = 327689;
          goto LABEL_73;
        }
        v46 = 262153;
      }
      else
      {
        v46 = 4;
      }
      v47 = 4;
    }
    else
    {
      v46 = 3;
      v47 = 3;
    }
  }
  else
  {
    v46 = 2;
    v47 = 2;
  }
LABEL_73:
  if (v42)
    v20 = v46;
  else
    v20 = v47;
LABEL_76:
  IntValue = _getIntValue(theDict, CFSTR("JPEGPhotoQuality"), 0xFFFFFFFFLL);
  v48 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("JPEGSourceCropRect"));
  if (v48 && CGRectMakeWithDictionaryRepresentation(v48, &rect))
  {
    v190.origin.x = round(rect.origin.x);
    v190.origin.y = round(rect.origin.y);
    v190.size.width = round(rect.size.width);
    v190.size.height = round(rect.size.height);
    rect = v190;
    if (CGRectIsEmpty(v190))
      goto LABEL_458;
    v49 = (double)CVPixelBufferGetWidth(a2);
    v191.size.height = (double)CVPixelBufferGetHeight(a2);
    v51 = rect.size.width;
    v50 = rect.size.height;
    v191.origin.x = 0.0;
    v191.origin.y = 0.0;
    v191.size.width = v49;
    v192 = CGRectIntersection(rect, v191);
    if (!CGRectEqualToRect(rect, v192))
      goto LABEL_458;
    Height = (unint64_t)v50;
    Width = (unint64_t)v51;
    v165 = 1;
  }
  else
  {
    v165 = 0;
  }
  v52 = _getIntValue(theDict, CFSTR("JPEGSubsampling"), v18);
  if (v52 > 421)
  {
    if (v52 == 444)
    {
      v53 = 2;
      goto LABEL_91;
    }
    if (v52 == 422)
    {
      v53 = 1;
      goto LABEL_91;
    }
LABEL_105:
    v166 = 0;
    goto LABEL_92;
  }
  if (v52 == 400)
  {
    v53 = 4;
    goto LABEL_91;
  }
  if (v52 != 411)
    goto LABEL_105;
  v53 = 3;
LABEL_91:
  v166 = v53;
LABEL_92:
  v158 = _getBoolValue(theDict, CFSTR("JPEGSoftwareFallback"), v158);
  v27 = _getBoolValue(theDict, CFSTR("JPEGAllowHardwareEvenCrop"), 1);
  v145 = _getBoolValue(theDict, CFSTR("JPEGUse601YCbCrMatrix"), 0);
  v28 = _getBoolValue(theDict, CFSTR("JPEGIncreaseRoundingPoint"), 1);
  v148 = _getBoolValue(theDict, CFSTR("JPEGEnableCompressedSurfacePooling"), 0);
  v29 = _getIntValue(theDict, CFSTR("JPEGDestinationSurfaceSize"), 0xFFFFFFFFLL);
  if (v29 != -1 && v29 <= 0)
    goto LABEL_458;
LABEL_94:
  v147 = v28;
  v144 = v29;
  if (v23)
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 1;
    goto LABEL_135;
  }
  if (v14 > 875704933)
  {
    if (v14 > 1380401728)
    {
      if (v14 > 2037741170)
      {
        if (v14 == 2084070960)
          goto LABEL_131;
        v59 = 30323;
      }
      else
      {
        if (v14 == 1380401729)
          goto LABEL_113;
        v59 = 30310;
      }
      if (v14 != (v59 | 0x79750000))
        goto LABEL_129;
      v61 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      v62 = (Width & 1) != 0 && v61 == 0;
      v54 = !v62;
      if (!v54)
        goto LABEL_129;
      goto LABEL_133;
    }
    if (v14 == 875704934 || v14 == 875836518)
    {
LABEL_113:
      v54 = JPEGDeviceInterface_supportsAppleInterchangeFormats();
      if (!v54)
        goto LABEL_129;
LABEL_133:
      v55 = 0;
      v56 = 0;
      v57 = 1;
      goto LABEL_134;
    }
    v60 = 1111970369;
LABEL_112:
    if (v14 != v60)
      goto LABEL_129;
    goto LABEL_113;
  }
  if (v14 <= 641230387)
  {
    if (v14 == 32)
      goto LABEL_113;
    if (v14 == 641230384)
      goto LABEL_131;
    v60 = 641230386;
    goto LABEL_112;
  }
  if (v14 > 792225327)
  {
    if (v14 == 792225328)
      goto LABEL_131;
    v58 = 875704422;
    goto LABEL_117;
  }
  if (v14 == 641230388)
    goto LABEL_113;
  v58 = 758670896;
LABEL_117:
  if (v14 != v58)
    goto LABEL_129;
LABEL_131:
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    v54 = 1;
    goto LABEL_133;
  }
  v54 = ((Width | Height) & 1) == 0;
  if (((Width | Height) & 1) == 0)
    goto LABEL_133;
LABEL_129:
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    v55 = 1;
  }
  else
  {
    if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
      v84 = 1;
    else
      v84 = v27 == 0;
    v55 = !v84;
  }
  v63 = 3758097095;
  v56 = 875704422;
  if (v14 <= 875704933)
  {
    if (v14 > 758674991)
    {
      if (v14 > 846624120)
      {
        if (v14 == 846624121)
        {
          v100 = 0;
          v23 = BoolValue;
          if (v166 >= 2)
            goto LABEL_293;
          v54 = 0;
          v57 = 0;
          v56 = 2037741171;
          goto LABEL_367;
        }
        v86 = 875704438;
      }
      else
      {
        if (v14 == 758674992)
          goto LABEL_345;
        v86 = 792229424;
      }
    }
    else
    {
      if (v14 > 641234481)
      {
        if (v14 == 641234482)
        {
LABEL_326:
          v56 = 2037741158;
          if (v166 == 1)
          {
            v54 = 0;
            v57 = 0;
            v55 = 1;
            goto LABEL_134;
          }
          if (v166)
            goto LABEL_368;
          v100 = 0;
          if ((Width & 1) == 0)
            LOBYTE(v55) = 1;
          v23 = BoolValue;
          if ((v55 & 1) == 0)
            goto LABEL_293;
          goto LABEL_331;
        }
        v85 = 641234484;
LABEL_334:
        if (v14 != v85)
          goto LABEL_368;
        goto LABEL_335;
      }
      if (v14 == 32)
        goto LABEL_335;
      v86 = 641234480;
    }
    if (v14 != v86)
      goto LABEL_368;
    goto LABEL_345;
  }
  if (v14 <= 1111970368)
  {
    if (v14 <= 875836517)
    {
      if (v14 != 875704934 && v14 != 875704950)
        goto LABEL_368;
      goto LABEL_326;
    }
    if (v14 == 875836518)
      goto LABEL_335;
    v85 = 875836534;
    goto LABEL_334;
  }
  if (v14 > 1380401728)
  {
    if (v14 != 1380401729)
    {
      if (v14 != 2084075056)
      {
        v85 = 1999843442;
        goto LABEL_334;
      }
LABEL_345:
      if (!v166)
      {
        v100 = 0;
        if (((Width | Height) & 1) == 0)
          v55 = 1;
        v23 = BoolValue;
        if (v55 == 1)
        {
          v54 = 0;
          v57 = 0;
          goto LABEL_135;
        }
        goto LABEL_293;
      }
LABEL_368:
      v100 = 0;
      v23 = BoolValue;
      goto LABEL_293;
    }
LABEL_335:
    if (v166)
    {
      if (v166 == 2)
      {
        if (v14 == 1999843442)
        {
          v23 = BoolValue;
          if (!JPEGDeviceInterface_supportsAppleInterchangeFormats())
          {
            v100 = 0;
            goto LABEL_293;
          }
          v54 = 0;
          v57 = 0;
          v56 = 875836518;
          goto LABEL_367;
        }
      }
      else if (v166 == 1)
      {
        v100 = 0;
        if ((Width & 1) == 0)
          LOBYTE(v55) = 1;
        v23 = BoolValue;
        if ((v55 & 1) != 0)
        {
LABEL_366:
          v54 = 0;
          v57 = 0;
          v56 = 2037741158;
          goto LABEL_367;
        }
LABEL_293:
        if (!v158 && !v23)
        {
          *v157 = 0;
          *a7 = 0;
          v67 = v100;
          goto LABEL_437;
        }
        if (v100 && v169)
        {
          CFRelease(v169);
          v169 = 0;
        }
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        v188 = 0;
        v101 = (CGFloat *)MEMORY[0x1E0C9D628];
        v187 = 0;
        v102 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
        v186.origin = (CGPoint)*MEMORY[0x1E0C9D628];
        v186.size = v102;
        if (!theDict)
        {
          v107 = 0;
          v106 = 5;
          v104 = 0.85;
          goto LABEL_388;
        }
        v103 = (const void *)*MEMORY[0x1E0CBC780];
        if (CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBC780]))
        {
          v104 = _getFloatValue(theDict, v103, 0.85);
          v105 = v104;
          if (v104 >= 0.05)
          {
            if (v105 >= 0.26)
            {
              if (v105 >= 0.31)
              {
                if (v105 >= 0.6)
                {
                  v106 = 4;
                  if (v105 >= 0.76 && v105 >= 0.83)
                  {
                    if (v105 >= 0.99)
                      v106 = 6;
                    else
                      v106 = 5;
                  }
                }
                else
                {
                  v106 = 3;
                }
              }
              else
              {
                v106 = 2;
              }
            }
            else
            {
              v106 = 1;
            }
          }
          else
          {
            v106 = 0;
          }
        }
        else
        {
          v106 = 5;
          v104 = 0.85;
        }
        v108 = _getIntValue(theDict, CFSTR("JPEGSubsampling"), 420);
        if (v108 > 421)
        {
          if (v108 == 444)
          {
            v107 = 2;
            goto LABEL_386;
          }
          if (v108 == 422)
          {
            v107 = 1;
            goto LABEL_386;
          }
        }
        else
        {
          if (v108 == 400)
          {
            v107 = 4;
            goto LABEL_386;
          }
          if (v108 == 411)
          {
            v107 = 3;
            goto LABEL_386;
          }
        }
        v107 = 0;
LABEL_386:
        v109 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("JPEGSourceCropRect"));
        if (v109)
          CGRectMakeWithDictionaryRepresentation(v109, &v186);
LABEL_388:
        v110 = CVPixelBufferGetPixelFormatType(a2);
        v113 = v110;
        if (v110 == 1111970369 || v110 == 24)
        {
          v114 = a2;
          v115 = CVPixelBufferRetain(a2);
          v188 = v115;
        }
        else
        {
          v116 = CMPhotoScaleAndRotateSessionTransformForSizeWithHW(0, a2, 1, 1, 1111970369, 0, 0, 1u, *v101, v101[1], v101[2], v101[3], *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v111, v112, 0, 1u, 0,
                   0,
                   0,
                   0xFFFFFFFF,
                   &v188);
          if ((_DWORD)v116)
          {
            v63 = v116;
            v127 = 0;
            goto LABEL_477;
          }
          v114 = a2;
          v115 = v188;
        }
        v117 = CVPixelBufferGetWidth(v115);
        v118 = CVPixelBufferGetHeight(v188);
        BytesPerRow = CVPixelBufferGetBytesPerRow(v188);
        v120 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
        if (!v120)
        {
          v127 = 0;
          v138 = 0;
          v135 = 0;
          v128 = 0;
LABEL_472:
          v124 = 0;
          goto LABEL_473;
        }
        CVPixelBufferLockBaseAddress(v188, 1uLL);
        v121 = v188;
        BaseAddress = CVPixelBufferGetBaseAddress(v188);
        DataSize = CVPixelBufferGetDataSize(v188);
        v124 = CGDataProviderCreateWithData(v121, BaseAddress, DataSize, (CGDataProviderReleaseDataCallback)_unlockAndReleasePixelBuffer);
        if (!v124)
        {
          CVPixelBufferUnlockBaseAddress(v188, 1uLL);
          v127 = 0;
          v138 = 0;
          v135 = 0;
          v128 = 0;
LABEL_473:
          v63 = 4294954510;
          goto LABEL_418;
        }
        v188 = 0;
        if (v113 == 24)
          v125 = 0;
        else
          v125 = 8198;
        if (v113 == 24)
          v126 = 24;
        else
          v126 = 32;
        v127 = CGImageCreate(v117, v118, 8uLL, v126, BytesPerRow, v120, v125, v124, 0, 0, kCGRenderingIntentDefault);
        if (!v127)
        {
          v63 = FigSignalErrorAt();
          v138 = 0;
          v135 = 0;
          v128 = 0;
          goto LABEL_418;
        }
        CGDataProviderRelease(v124);
        CFRelease(v120);
        if (!CGRectIsNull(v186))
        {
          v128 = CGImageCreateWithImageInRect(v127, v186);
          if (!v128)
          {
            v63 = FigSignalErrorAt();
            v120 = 0;
            v138 = 0;
            v135 = 0;
            goto LABEL_478;
          }
          CFRelease(v127);
          v127 = v128;
        }
        v129 = CVPixelBufferGetWidth(v114);
        v130 = 2 * v129 * CVPixelBufferGetHeight(v114);
        if (v106 != 6)
          v130 /= 3uLL;
        v131 = (*MEMORY[0x1E0C85AD8] + v130 - 1) & -*MEMORY[0x1E0C85AD8];
        if (v131 <= 0x8000)
          v132 = 0x8000;
        else
          v132 = v131;
        v133 = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)CFSTR("SurfacePoolOneShot"), v132, 2, &v187);
        if (!(_DWORD)v133)
        {
          IOSurfaceDecrementUseCount(v187);
          info = v187;
          v184 = 0;
          AllocSize = IOSurfaceGetAllocSize(v187);
          cbks = (CGDataConsumerCallbacks)xmmword_1E53F6438;
          v134 = CGDataConsumerCreate(&info, &cbks);
          v128 = v134;
          if (v134)
          {
            v135 = CGImageDestinationCreateWithDataConsumer(v134, CFSTR("public.jpeg"), 1uLL, 0);
            if (v135)
            {
              v136 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v138 = Mutable;
              if (Mutable)
              {
                CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CBC7C0], (const void *)*MEMORY[0x1E0C9AE40]);
                v139 = (const void *)*MEMORY[0x1E0CBC780];
                valuePtr[0] = v104;
                v140 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFDictionarySetValue(v138, v139, v140);
                CFRelease(v140);
                LODWORD(v139) = dword_1A8295E4C[v107];
                LODWORD(v140) = dword_1A8295E60[v107];
                v141 = CFDictionaryCreateMutable(v136, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFDictionaryAddValue(v138, (const void *)*MEMORY[0x1E0CBCF60], v141);
                CMPhotoCFDictionarySetInt(v141, (const void *)*MEMORY[0x1E0CBCF50], (int)v140);
                CMPhotoCFDictionarySetInt(v141, (const void *)*MEMORY[0x1E0CBCF58], (int)v139);
                if (v141)
                  CFRelease(v141);
                CGImageDestinationAddImage(v135, v127, v138);
                if (CGImageDestinationFinalize(v135))
                {
                  v63 = 0;
                  v120 = 0;
                  v124 = 0;
                  *v157 = v187;
                  v187 = 0;
                  *a7 = v184;
LABEL_418:
                  if (v188)
                    CFRelease(v188);
                  if (v187)
                    CFRelease(v187);
                  if (v127)
                    CFRelease(v127);
                  if (v120)
                    CFRelease(v120);
                  if (v124)
                    CFRelease(v124);
                  if (v128)
                    CFRelease(v128);
                  if (v135)
                    CFRelease(v135);
                  if (v138)
                    CFRelease(v138);
                  if (*MEMORY[0x1E0CA1FC0] == 1)
                    kdebug_trace();
                  v67 = 0;
                  goto LABEL_437;
                }
                v63 = FigSignalErrorAt();
                v120 = 0;
LABEL_478:
                v124 = 0;
                goto LABEL_418;
              }
              v120 = 0;
            }
            else
            {
              v120 = 0;
              v138 = 0;
            }
          }
          else
          {
            v120 = 0;
            v138 = 0;
            v135 = 0;
          }
          goto LABEL_472;
        }
        v63 = v133;
LABEL_477:
        v120 = 0;
        v138 = 0;
        v135 = 0;
        v128 = 0;
        goto LABEL_478;
      }
      goto LABEL_368;
    }
    if (((Width | Height) & 1) == 0)
      LOBYTE(v55) = 1;
    if ((v55 & 1) == 0)
    {
      if ((Width & 1) == 0)
      {
        v100 = 0;
        v23 = BoolValue;
        if ((Height & 1) == 0)
          goto LABEL_293;
        goto LABEL_366;
      }
      goto LABEL_368;
    }
    v54 = 0;
    v57 = 0;
    v55 = 1;
LABEL_134:
    v23 = BoolValue;
    goto LABEL_135;
  }
  if (v14 == 1111970369)
    goto LABEL_335;
  v100 = 0;
  v23 = BoolValue;
  if (v14 != 1278226488)
    goto LABEL_293;
LABEL_331:
  v54 = 0;
  v57 = 0;
LABEL_367:
  v55 = 1;
LABEL_135:
  if (v55 | v23)
  {
    v63 = 0;
    goto LABEL_160;
  }
  v64 = 2;
  if (v14 <= 875836517)
  {
    if (v14 <= 641230387)
    {
      if (v14 == 32)
        goto LABEL_154;
      v65 = 641230386;
    }
    else
    {
      if (v14 == 641230388)
        goto LABEL_154;
      if (v14 == 846820726)
        goto LABEL_153;
      v65 = 875704934;
    }
LABEL_152:
    if (v14 != v65)
      goto LABEL_218;
LABEL_153:
    v64 = 1;
    goto LABEL_154;
  }
  if (v14 > 1380401728)
  {
    if (v14 == 1380401729)
      goto LABEL_154;
    if (v14 == 2037741171)
      goto LABEL_153;
    v65 = 2037741158;
    goto LABEL_152;
  }
  if (v14 != 875836518 && v14 != 1111970369)
  {
    if (v14 == 1278226488)
    {
      v64 = 4;
      goto LABEL_154;
    }
LABEL_218:
    v64 = 0;
  }
LABEL_154:
  if (v166 <= v64 || v166 == 4)
    v63 = 0;
  else
    v63 = 3758097095;
LABEL_160:
  if (v23 | v63)
  {
    v67 = 0;
    goto LABEL_287;
  }
  if (!v57 || (v67 = 0, a4) && !v54)
  {
    if (v165)
    {
      v69 = rect.size.width;
      v68 = rect.size.height;
      if (a4)
      {
LABEL_166:
        v70 = (unint64_t)v69;
        if (CVPixelBufferGetWidth((CVPixelBufferRef)a4) == (unint64_t)v69
          && CVPixelBufferGetHeight((CVPixelBufferRef)a4) == (unint64_t)v68
          && CVPixelBufferGetIOSurface((CVPixelBufferRef)a4))
        {
          v67 = 0;
          v169 = a4;
          goto LABEL_174;
        }
LABEL_173:
        v67 = 1;
        if (CMPhotoSurfacePoolCreatePixelBuffer(v146, v56, v70, (unint64_t)v68, 1, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&v169))
        {
          v100 = 0;
          goto LABEL_462;
        }
LABEL_174:
        if (v165)
        {
          p_rect = &rect;
          y = rect.origin.y;
          v75 = rect.size.width;
        }
        else
        {
          p_rect = (CGRect *)MEMORY[0x1E0C9D628];
          y = *(double *)(MEMORY[0x1E0C9D628] + 8);
          v75 = *(double *)(MEMORY[0x1E0C9D628] + 16);
        }
        if (!CMPhotoScaleAndRotateSessionTransformForMaxSideLength(v153, a2, 1, 1, v56, v145 != 0, 0, 0, p_rect->origin.x, y, v75, p_rect->size.height, 0, 0, 0, 1u, (__CVBuffer **)&v169))
        {
          v165 = 0;
          v76 = (__CVBuffer *)v169;
          goto LABEL_180;
        }
        v100 = v67;
LABEL_462:
        v63 = 3758097084;
        goto LABEL_293;
      }
    }
    else
    {
      CMPhotoGetPixelBufferCLAPAsRect(a2);
      v69 = v71;
      v68 = v72;
      if (a4)
        goto LABEL_166;
    }
    v70 = (unint64_t)v69;
    goto LABEL_173;
  }
  v76 = a2;
LABEL_180:
  IOSurface = CVPixelBufferGetIOSurface(v76);
  v154 = v67;
  if (cf)
  {
    if (!v148)
    {
      buffer = (IOSurfaceRef)CFRetain(cf);
      goto LABEL_241;
    }
    v91 = FigSignalErrorAt();
LABEL_464:
    v63 = v91;
    goto LABEL_437;
  }
  if (v144 < 1)
  {
    v79 = 2 * Height * Width;
    if (BytePtr)
    {
      if (*BytePtr == 1)
      {
        v80 = 0;
        do
        {
          v81 = v80;
          if (v80 == 63)
            break;
          v82 = BytePtr[++v80];
        }
        while (v82 == 1);
        v83 = v81 > 0x3E;
      }
      else
      {
        v83 = 0;
      }
      if (v166 == 2)
        v83 = 1;
      if (!v83)
        v79 = (3 * Height * Width) >> 1;
    }
    else
    {
      if ((unsigned __int16)v20 == 9)
        v87 = HIWORD(v20);
      else
        v87 = v20;
      if (v87 != 6)
        v79 /= 3uLL;
    }
    v88 = (v79 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    if (v88 <= 0x8000)
      v78 = 0x8000;
    else
      v78 = v88;
  }
  else
  {
    v78 = v144;
  }
  if (!v148)
  {
    v91 = CMPhotoSurfacePoolCreateMemorySurface((uint64_t)CFSTR("SurfacePoolOneShot"), v78, 2, &buffer);
    if (!(_DWORD)v91)
    {
      IOSurfaceDecrementUseCount(buffer);
      goto LABEL_241;
    }
    goto LABEL_464;
  }
  if (v143)
    v89 = (uint64_t)v146;
  else
    v89 = 0;
  v90 = CMPhotoSurfacePoolCreateMemorySurface(v89, v78, 2, &buffer);
  if ((_DWORD)v90)
  {
    v63 = v90;
    goto LABEL_437;
  }
LABEL_241:
  v92 = a1;
  if (a1 || (v92 = JPEGDeviceInterface_openDriverConnection(), (_DWORD)v92))
  {
    if (v57)
      IOSurfaceBindAccel();
    if (IntValue < 0)
    {
      v93 = 1;
      goto LABEL_262;
    }
    v93 = 1;
    if (BytePtr)
      goto LABEL_262;
    if (IntValue > 943009906)
    {
      switch(IntValue)
      {
        case 943009907:
          v93 = 0;
          BytePtr = (const UInt8 *)&unk_1A8295C0B;
          goto LABEL_262;
        case 959459438:
          v93 = 0;
          BytePtr = (const UInt8 *)&unk_1A8295C8B;
          goto LABEL_262;
        case 959459443:
          v93 = 0;
          BytePtr = (const UInt8 *)&unk_1A8295C4B;
          goto LABEL_262;
      }
    }
    else
    {
      switch(IntValue)
      {
        case 926232686:
          v93 = 0;
          BytePtr = (const UInt8 *)&sAppleQualityQMArray_Luma;
          goto LABEL_262;
        case 942682222:
          v93 = 0;
          BytePtr = (const UInt8 *)&unk_1A8295B8B;
          goto LABEL_262;
        case 942814579:
          v93 = 0;
          BytePtr = (const UInt8 *)&unk_1A8295BCB;
          goto LABEL_262;
      }
    }
    BytePtr = 0;
LABEL_262:
    if (BytePtr)
      v94 = v93 ^ 1;
    else
      v94 = 1;
    if (v147)
      v95 = (v149 != 0) | 0x10;
    else
      v95 = v149 != 0;
    while (1)
    {
      LODWORD(v176) = IOSurfaceGetID(IOSurface);
      DWORD2(v176) = IOSurfaceGetID(buffer);
      DWORD1(v176) = IOSurfaceGetAllocSize(IOSurface);
      HIDWORD(v176) = IOSurfaceGetAllocSize(buffer);
      *(_QWORD *)((char *)&v177 + 4) = __PAIR64__(Height, Width);
      if (v165)
        *(int32x2_t *)((char *)&v178 + 4) = vmovn_s64((int64x2_t)vcvtq_u64_f64((float64x2_t)rect.origin));
      HIDWORD(v177) = v20;
      LODWORD(v178) = v95;
      HIDWORD(v181) = 1;
      HIDWORD(v178) = v166;
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v63 = JPEGDeviceInterface_encodeJPEG(v92);
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v96 = (_DWORD)v63 == -536870168 ? v94 : 0;
      if (cf || !v96)
        break;
      if ((unsigned __int16)v20 == 9)
        v20 = 4;
      else
        --v20;
      if (!v20)
      {
        v63 = 3758097128;
        break;
      }
    }
    v23 = BoolValue;
    if (!a1)
      JPEGDeviceInterface_closeDriverConnection(v92);
    goto LABEL_286;
  }
  v63 = FigSignalErrorAt();
LABEL_286:
  v67 = v154;
LABEL_287:
  if (v23 | v63)
  {
    v100 = v67;
    goto LABEL_293;
  }
  *v157 = buffer;
  buffer = 0;
  *a7 = v171;
  if (!a5)
  {
    v63 = 0;
    goto LABEL_439;
  }
  v97 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v97)
  {
    v98 = v97;
    v99 = 0.025;
    switch(v20)
    {
      case 0u:
        break;
      case 1u:
        v99 = 0.15;
        break;
      case 2u:
        v99 = 0.27;
        break;
      case 3u:
        v99 = 0.31;
        break;
      case 4u:
        v99 = 0.6;
        break;
      case 5u:
        goto LABEL_315;
      case 6u:
        v99 = 1.0;
        break;
      default:
        if (v20 == 262153)
          v99 = 0.8;
        else
LABEL_315:
          v99 = 0.86;
        break;
    }
    CMPhotoCFDictionarySetFloat(v97, CFSTR("ByteBudgetHint_Quality"), v99);
    CMPhotoCFDictionarySetInt32(v98, CFSTR("ByteBudgetHint_Size"), v171);
    v63 = 0;
    *a5 = v98;
  }
  else
  {
    v63 = 0;
  }
LABEL_437:
  if (buffer)
    CFRelease(buffer);
LABEL_439:
  if (v67 && v169)
    CFRelease(v169);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  return v63;
}

uint64_t CMPhotoJPEGCreateJPEGFromCVPixelBuffer(__CVBuffer *a1, const __CFDictionary *a2, void *a3, IOSurfaceRef *a4, _DWORD *a5)
{
  return _createJPEGFromCVPixelBuffer(0, a1, a2, a3, 0, a4, a5);
}

uint64_t CMPhotoJPEGCreateJPEGFromIOSurface(IOSurfaceRef buffer, const __CFDictionary *a2, IOSurfaceRef *a3, _DWORD *a4)
{
  uint64_t PixelBufferWithSurface;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], buffer, 0, (CVPixelBufferRef *)&cf);
  if (!(_DWORD)PixelBufferWithSurface)
    PixelBufferWithSurface = _createJPEGFromCVPixelBuffer(0, (__CVBuffer *)cf, a2, 0, 0, a3, a4);
  v8 = PixelBufferWithSurface;
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t CMPhotoJPEGCreateJPEGSbufFromBuffer(void *a1, const __CFDictionary *a2, void *a3, opaqueCMSampleBuffer **a4)
{
  return _createJPEGSbufFromBuffer(0, a1, a2, a3, a4);
}

uint64_t _createJPEGSbufFromBuffer(unsigned int a1, void *a2, const __CFDictionary *a3, void *a4, opaqueCMSampleBuffer **a5)
{
  char BoolValue;
  CFTypeID v11;
  __CVBuffer *ImageBuffer;
  unsigned int v13;
  CFTypeID v14;
  uint64_t v15;
  OpaqueCMBlockBuffer *SampleBufferWrappingIOSurface;
  opaqueCMSampleBuffer *v17;
  CMBlockBufferRef DataBuffer;
  uint64_t v19;
  CFTypeRef value;
  CFTypeRef cf;
  int v23;

  v23 = 0;
  value = 0;
  cf = 0;
  if (a3)
  {
    BoolValue = _getBoolValue(a3, CFSTR("JPEGEnableCompressedSurfacePooling"), 0);
    if (!a2)
      goto LABEL_14;
  }
  else
  {
    BoolValue = 0;
    if (!a2)
      goto LABEL_14;
  }
  if (!a5)
    goto LABEL_14;
  v11 = CFGetTypeID(a2);
  if (v11 != CMSampleBufferGetTypeID())
  {
    v14 = CFGetTypeID(a2);
    if (v14 == CVPixelBufferGetTypeID())
    {
      v13 = a1;
      ImageBuffer = (__CVBuffer *)a2;
      goto LABEL_11;
    }
LABEL_14:
    v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  ImageBuffer = CMSampleBufferGetImageBuffer((CMSampleBufferRef)a2);
  if (!ImageBuffer)
    goto LABEL_14;
  v13 = a1;
LABEL_11:
  v15 = _createJPEGFromCVPixelBuffer(v13, ImageBuffer, a3, a4, (__CFDictionary **)&value, (IOSurfaceRef *)&cf, &v23);
  if ((_DWORD)v15)
  {
LABEL_15:
    v19 = v15;
    goto LABEL_16;
  }
  SampleBufferWrappingIOSurface = CMPhotoCreateSampleBufferWrappingIOSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (__IOSurface *)cf, 0, v23, BoolValue, 1u);
  if (SampleBufferWrappingIOSurface)
  {
    v17 = SampleBufferWrappingIOSurface;
    CMSetAttachment(SampleBufferWrappingIOSurface, CFSTR("ByteBudgetHint"), value, 1u);
    DataBuffer = CMSampleBufferGetDataBuffer(v17);
    CMPropagateAttachments(v17, DataBuffer);
    v19 = 0;
    *a5 = v17;
  }
  else
  {
    v19 = 4294950305;
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  return v19;
}

__CFArray *CMPhotoJPEGCreateJPEGNativePixelFormatArray()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  _appendPixelFormatValue(Mutable, 875704422);
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    _appendPixelFormatValue(Mutable, 1111970369);
    _appendPixelFormatValue(Mutable, 1380401729);
    _appendPixelFormatValue(Mutable, 32);
    _appendPixelFormatValue(Mutable, 875836518);
    _appendPixelFormatValue(Mutable, 875704934);
  }
  _appendPixelFormatValue(Mutable, 2037741158);
  return Mutable;
}

void _appendPixelFormatValue(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

__CFArray *CMPhotoJPEGCreateJPEGNativeSubsamplingArray()
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  _appendIntValue(Mutable, 0);
  _appendIntValue(Mutable, 1);
  if (JPEGDeviceInterface_supportsAppleInterchangeFormats())
  {
    _appendIntValue(Mutable, 2);
    _appendIntValue(Mutable, 4);
  }
  return Mutable;
}

void _appendIntValue(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(a1, v3);
  CFRelease(v3);
}

uint64_t CMPhotoJPEGGetEncodeTiming()
{
  return 0;
}

float _getFloatValue(const __CFDictionary *a1, const void *a2, float a3)
{
  float v3;
  const __CFNumber *Value;
  const __CFNumber *v5;
  CFTypeID TypeID;
  float valuePtr;

  v3 = a3;
  valuePtr = a3;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v5 = Value;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v5))
    {
      CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

void _unlockAndReleasePixelBuffer(__CVBuffer *a1)
{
  if (a1)
  {
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferRelease(a1);
  }
}

size_t _putBytes(uint64_t a1, const void *a2, size_t a3)
{
  char *BaseAddress;
  uint64_t v7;
  size_t v8;

  BaseAddress = (char *)IOSurfaceGetBaseAddress(*(IOSurfaceRef *)a1);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 + a3 > v8)
    a3 = v8 - v7;
  if (a3)
  {
    memcpy(&BaseAddress[v7], a2, a3);
    *(_QWORD *)(a1 + 8) += a3;
  }
  return a3;
}

uint64_t CMPhotoGetPreferredHEIFTileSizeForImageSize(unint64_t a1, unint64_t a2, int a3)
{
  BOOL v3;
  unint64_t v4;
  uint64_t v8;
  BOOL v9;

  v3 = a2 > 0x1800 || a1 > 0x1800;
  v4 = a1 * a2;
  if (v3 && v4 > 0x4000000)
    return 1024;
  if (a3 == 1882468912 || a3 == 1885745712)
    v8 = 768;
  else
    v8 = 512;
  v9 = a2 > 0xC00 || a1 > 0xC00;
  if (v9 && v4 >= 0x1000001)
  {
    v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 0x80uLL, 0x400uLL);
    _calculateTileLengthForImageLengthBasedOnRestrictions(a2, 0x40uLL, 0x400uLL);
  }
  return v8;
}

uint64_t CMPhotoGetPreferredDNGTileSizeForImageSize(unint64_t a1, unint64_t a2, int a3)
{
  BOOL v3;
  unint64_t v4;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a2 > 0x1800 || a1 > 0x1800;
  v4 = a1 * a2;
  if (!v3 || v4 < 0x4000001)
  {
    v7 = a2 > 0xC00 || a1 > 0xC00;
    if (v7 && v4 >= 0x1000001)
    {
      if (a3 == 5)
      {
        v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 8uLL, 0x800uLL);
        v9 = a2;
        v10 = 2048;
LABEL_22:
        _calculateTileLengthForImageLengthBasedOnRestrictions(v9, 8uLL, v10);
        return v8;
      }
    }
    else if (a3 != 5)
    {
      v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 8uLL, 0x200uLL);
      v9 = a2;
      v10 = 512;
      goto LABEL_22;
    }
    v8 = _calculateTileLengthForImageLengthBasedOnRestrictions(a1, 8uLL, 0x400uLL);
    v9 = a2;
    v10 = 1024;
    goto LABEL_22;
  }
  if (a3 == 5)
    return 2048;
  else
    return 1024;
}

uint64_t CMPhotoSetDefaultTilingOptionForCodec(int a1, unint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  uint64_t PreferredHEIFTileSizeForImageSize;
  unint64_t v7;

  PreferredHEIFTileSizeForImageSize = a2;
  if (a1 != 1936484717)
  {
    PreferredHEIFTileSizeForImageSize = CMPhotoGetPreferredHEIFTileSizeForImageSize(a2, a3, a4);
    a3 = v7;
  }
  if (a5)
  {
    *a5 = PreferredHEIFTileSizeForImageSize;
    a5[1] = a3;
  }
  return 0;
}

uint64_t CMPhotoGetTilingOption(const __CFDictionary *a1, unint64_t a2, unint64_t a3, int a4, int a5, _BYTE *a6, char *a7, unint64_t *a8, _QWORD *a9)
{
  const void *Value;
  const void *v17;
  unint64_t PreferredHEIFTileSizeForImageSize;
  unint64_t v19;
  CFTypeID v20;
  int v21;
  unint64_t v22;
  char v24;
  unint64_t v25;
  CFTypeID v26;
  _BYTE *v27;
  CGPoint v28;
  CFTypeID v30;
  double y;
  double x;
  CFTypeID v33;
  unint64_t width_low;
  char *v35;
  uint64_t result;
  _BYTE *v37;
  CGPoint point;
  CGSize size;

  Value = CFDictionaryGetValue(a1, CFSTR("Tiling"));
  v17 = CFDictionaryGetValue(a1, CFSTR("CustomMinimumSourceAlignment"));
  if (a5 == 1936484717)
  {
    PreferredHEIFTileSizeForImageSize = a2;
    v19 = a3;
    if (Value)
      goto LABEL_3;
LABEL_12:
    v22 = 0;
    *a6 = 0;
    if (!a8)
      goto LABEL_36;
LABEL_35:
    *a8 = PreferredHEIFTileSizeForImageSize;
    a8[1] = v19;
    goto LABEL_36;
  }
  PreferredHEIFTileSizeForImageSize = CMPhotoGetPreferredHEIFTileSizeForImageSize(a2, a3, a4);
  v19 = v25;
  if (!Value)
    goto LABEL_12;
LABEL_3:
  v37 = a6;
  v20 = CFGetTypeID(Value);
  if (v20 == CFBooleanGetTypeID())
  {
    v21 = CFBooleanGetValue((CFBooleanRef)Value);
    if (v21)
    {
      v22 = 0;
      if (a3 >= 2 * v19 || a2 >= 2 * PreferredHEIFTileSizeForImageSize)
        v24 = v21;
      else
        v24 = 0;
    }
    else
    {
      v24 = 0;
      v22 = 0;
    }
LABEL_33:
    v27 = v37;
    v35 = a7;
    goto LABEL_34;
  }
  v26 = CFGetTypeID(Value);
  if (v26 != CFDictionaryGetTypeID())
  {
    v33 = CFGetTypeID(Value);
    if (v33 != CFNumberGetTypeID() || a5 != 1936484717)
      return FigSignalErrorAt();
    LODWORD(size.width) = 0;
    if (CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &size))
    {
      if (SLODWORD(size.width) < 2)
      {
        v22 = 0;
        v24 = 0;
      }
      else
      {
        if (SLODWORD(size.width) >= 4)
          width_low = 4;
        else
          width_low = LODWORD(size.width);
        v19 = ((a3 + width_low - 1) / width_low + 7) & 0xFFFFFFFFFFFFFFF8;
        v22 = a3 % v19;
        v24 = 1;
      }
      goto LABEL_33;
    }
    return FigSignalErrorAt();
  }
  size.width = 0.0;
  size.height = 0.0;
  if (CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)Value, &size))
  {
    v27 = v37;
    if (a5 != 1936484717)
    {
      v28 = (CGPoint)xmmword_1A8295E80;
      point = (CGPoint)xmmword_1A8295E80;
      PreferredHEIFTileSizeForImageSize = vcvtad_u64_f64(size.width);
      v19 = vcvtad_u64_f64(size.height);
      if (a2 == PreferredHEIFTileSizeForImageSize && a3 == v19)
      {
        v24 = 0;
LABEL_57:
        v35 = a7;
        v22 = 0;
LABEL_34:
        *v27 = 1;
        *v35 = v24;
        if (!a8)
          goto LABEL_36;
        goto LABEL_35;
      }
      if (v17)
      {
        v30 = CFGetTypeID(v17);
        if (v30 == CFDictionaryGetTypeID())
        {
          CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)v17, &point);
          x = point.x;
          y = point.y;
        }
        else
        {
          x = 128.0;
          y = 64.0;
        }
        v27 = v37;
        v28 = (CGPoint)xmmword_1A8295E80;
      }
      else
      {
        x = 128.0;
        y = 64.0;
      }
      if (x <= 0.0 || y <= 0.0)
      {
        point = v28;
        x = 128.0;
        y = 64.0;
      }
      if ((a2 == PreferredHEIFTileSizeForImageSize
         || PreferredHEIFTileSizeForImageSize >= 0x80 && !(PreferredHEIFTileSizeForImageSize % (int)x))
        && (a3 == v19 || v19 >= 0x40 && !(v19 % (int)y)))
      {
        v24 = 1;
        goto LABEL_57;
      }
    }
    return FigSignalErrorAt();
  }
  v22 = 0;
  *v37 = 0;
  if (a8)
    goto LABEL_35;
LABEL_36:
  result = 0;
  if (a9)
  {
    *a9 = 0;
    a9[1] = v22;
  }
  return result;
}

uint64_t CMPhotoGetDestinationPixelFormatFromOptions(CFDictionaryRef theDict, int a2, uint64_t a3, unsigned int *a4)
{
  uint64_t result;
  unsigned __int16 v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int BitDepthForPixelFormat;
  int Int32IfPresent;
  int IsFullRange;
  int v19;
  int v20;
  _BOOL4 IsPackedYUV;
  int PixelFormatCompressionType;
  int v23;
  int v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  int DefaultImageSubsamplingForEncodeFromPixelFormat;
  int v33;
  unsigned int UncompressedPixelFormatFromCompressedPixelFormat;

  v33 = 8;
  UncompressedPixelFormatFromCompressedPixelFormat = 0;
  DefaultImageSubsamplingForEncodeFromPixelFormat = 0;
  v31 = 0;
  result = 4294950306;
  if ((_DWORD)a3 && a4)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("PreferSoftwareCodec"), &v31);
    if ((int)a3 <= 1717855599)
    {
      if ((int)a3 <= 1650946095)
      {
        if ((int)a3 > 1647719527)
        {
          if ((_DWORD)a3 == 1647719528 || (_DWORD)a3 == 1650942776)
            goto LABEL_43;
          v10 = 1650943796;
        }
        else
        {
          if ((_DWORD)a3 == 825306677 || (_DWORD)a3 == 825437747)
            goto LABEL_43;
          v10 = 1647392369;
        }
      }
      else if ((int)a3 <= 1651847471)
      {
        if ((_DWORD)a3 == 1650946096 || (_DWORD)a3 == 1650946098)
          goto LABEL_43;
        v10 = 1651519798;
      }
      else if ((int)a3 > 1651926375)
      {
        if ((_DWORD)a3 == 1651926376)
          goto LABEL_43;
        v10 = 1652056888;
      }
      else
      {
        if ((_DWORD)a3 == 1651847472)
          goto LABEL_43;
        v10 = 1651925816;
      }
      goto LABEL_42;
    }
    if ((int)a3 > 1735553071)
    {
      if ((int)a3 <= 1919378231)
      {
        if ((_DWORD)a3 == 1735553072 || (_DWORD)a3 == 1751410032)
          goto LABEL_43;
        v10 = 1751411059;
      }
      else
      {
        if ((int)a3 > 1919381551)
        {
          if ((_DWORD)a3 == 1932996149)
            goto LABEL_43;
          v11 = 28720;
        }
        else
        {
          if ((_DWORD)a3 == 1919378232)
            goto LABEL_43;
          v11 = 26420;
        }
        v10 = v11 | 0x72670000;
      }
    }
    else
    {
      if ((int)a3 <= 1734504495)
      {
        if ((_DWORD)a3 == 1717855600 || (_DWORD)a3 == 1717856627)
          goto LABEL_43;
        v9 = 25400;
      }
      else
      {
        if ((int)a3 > 1735549491)
        {
          if ((_DWORD)a3 == 1735549492)
            goto LABEL_43;
          v10 = 1735549752;
          goto LABEL_42;
        }
        if ((_DWORD)a3 == 1734504496)
          goto LABEL_43;
        v9 = 29236;
      }
      v10 = v9 | 0x67620000;
    }
LABEL_42:
    if ((_DWORD)a3 == v10)
    {
LABEL_43:
      if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("BitDepth"), &v33)
        || (v12 = v33, CMPhotoGetBitDepthForPixelFormat(a3) == v12))
      {
        if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("Subsampling"), &DefaultImageSubsamplingForEncodeFromPixelFormat)|| (v13 = DefaultImageSubsamplingForEncodeFromPixelFormat, v13 == CMPhotoGetChromaSubsamplingFromPixelFormat(a3)))
        {
          UncompressedPixelFormatFromCompressedPixelFormat = a3;
LABEL_48:
          result = 0;
          *a4 = UncompressedPixelFormatFromCompressedPixelFormat;
          return result;
        }
      }
      return FigSignalErrorAt();
    }
    if (a2 == 1936484717)
    {
      if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("BitDepth"), &v33)
        || (v14 = v33, CMPhotoGetBitDepthForPixelFormat(a3) == v14))
      {
        if (!CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("Subsampling"), &DefaultImageSubsamplingForEncodeFromPixelFormat)|| (v15 = DefaultImageSubsamplingForEncodeFromPixelFormat, v15 == CMPhotoGetChromaSubsamplingFromPixelFormat(a3)))
        {
          UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a3);
          goto LABEL_48;
        }
      }
      return FigSignalErrorAt();
    }
    DefaultImageSubsamplingForEncodeFromPixelFormat = CMPhotoGetDefaultImageSubsamplingForEncodeFromPixelFormat(a3, a2, v31);
    if (CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("Subsampling"), &DefaultImageSubsamplingForEncodeFromPixelFormat)&& !CMPhotoSubsamplingIsSupportedForCodec(DefaultImageSubsamplingForEncodeFromPixelFormat, a2, v31))
    {
      return FigSignalErrorAt();
    }
    BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(a3);
    Int32IfPresent = CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("BitDepth"), &v33);
    IsFullRange = CMPhotoPixelFormatIsFullRange(a3);
    if (Int32IfPresent)
    {
      v19 = DefaultImageSubsamplingForEncodeFromPixelFormat;
      v20 = v33;
      IsPackedYUV = CMPhotoPixelFormatIsPackedYUV(a3);
      PixelFormatCompressionType = CMPhotoGetPixelFormatCompressionType(a3);
      v23 = 1;
      if ((int)a3 <= 1380410944)
      {
        if ((_DWORD)a3 == 1278226534)
          goto LABEL_80;
        v24 = 1278226536;
      }
      else
      {
        if ((_DWORD)a3 == 1380410945 || (_DWORD)a3 == 1380411457)
          goto LABEL_80;
        v24 = 1751527984;
      }
      if ((_DWORD)a3 != v24)
        v23 = 0;
LABEL_80:
      if (!CMPhotoGetYUVPixelFormatForParameters(v19, v20, IsFullRange, IsPackedYUV, PixelFormatCompressionType, v23, 1, (int *)&UncompressedPixelFormatFromCompressedPixelFormat)&& CMPhotoEncoderSupportsPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat, a2, v31, 0))
      {
        goto LABEL_48;
      }
      return FigSignalErrorAt();
    }
    v33 = BitDepthForPixelFormat;
    if (BitDepthForPixelFormat < 8)
      return FigSignalErrorAt();
    while (1)
    {
      v25 = DefaultImageSubsamplingForEncodeFromPixelFormat;
      v26 = CMPhotoPixelFormatIsPackedYUV(a3);
      v27 = CMPhotoGetPixelFormatCompressionType(a3);
      v28 = 1;
      if ((int)a3 <= 1380410944)
      {
        if ((_DWORD)a3 == 1278226534)
          goto LABEL_72;
        v29 = 1278226536;
      }
      else
      {
        if ((_DWORD)a3 == 1380410945 || (_DWORD)a3 == 1380411457)
          goto LABEL_72;
        v29 = 1751527984;
      }
      if ((_DWORD)a3 != v29)
        v28 = 0;
LABEL_72:
      if (!CMPhotoGetYUVPixelFormatForParameters(v25, BitDepthForPixelFormat, IsFullRange, v26, v27, v28, 0, (int *)&UncompressedPixelFormatFromCompressedPixelFormat)&& CMPhotoEncoderSupportsPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat, a2, v31, 0))
      {
        goto LABEL_48;
      }
      v30 = v33;
      BitDepthForPixelFormat = --v33;
      if (v30 <= 8)
        return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t CMPhotoGetTwoPassCropRects(uint64_t a1, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;

  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  if ((*a2 & 1) == 0)
  {
    v15 = (v12 & 1) == 0 && (a2[2] & 1) == 0;
    if (v15 && (a2[3] & 1) == 0)
    {
LABEL_14:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      if (!a5)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  if ((v11 & 1) != 0)
    v17 = 1;
  else
    v17 = (v13 + v11) & (v13 + v11 != a3);
  if ((v12 & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v18 = (v14 + v12) & (v14 + v12 != a4);
    if ((v17 | v18) != 1)
      goto LABEL_14;
  }
  v31 = 0;
  result = CMPhotoPixelFormatIsSubsampled(a1, (_BYTE *)&v31 + 1, &v31, 0, 0);
  if ((_DWORD)result)
    return result;
  if (HIBYTE(v31))
    v24 = v17;
  else
    v24 = 0;
  if ((v24 & 1) != 0)
    return FigSignalErrorAt();
  v25 = (_BYTE)v31 ? v18 : 0;
  if ((v25 & 1) != 0)
    return FigSignalErrorAt();
  v26 = a2[1];
  v20 = a2[2];
  v19 = a2[3];
  v11 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v27 = v20 + *a2 + ((v20 + *a2) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v27 >= a3)
    v27 = a3;
  if (v17)
  {
    v28 = v27;
  }
  else
  {
    v11 = *a2;
    v28 = v20 + *a2;
  }
  v12 = v26 & 0xFFFFFFFFFFFFFFFELL;
  v29 = v19 + v26 + ((v19 + v26) | 0xFFFFFFFFFFFFFFFELL) + 2;
  if (v29 >= a4)
    v29 = a4;
  if (v18)
  {
    v30 = v29;
  }
  else
  {
    v12 = a2[1];
    v30 = v19 + v26;
  }
  v22 = *a2 - v11;
  v21 = v26 - v12;
  v13 = v28 - v11;
  v14 = v30 - v12;
  if (a5)
  {
LABEL_15:
    *a5 = v11;
    a5[1] = v12;
    a5[2] = v13;
    a5[3] = v14;
  }
LABEL_16:
  result = 0;
  if (a6)
  {
    *a6 = v22;
    a6[1] = v21;
    a6[2] = v20;
    a6[3] = v19;
  }
  return result;
}

uint64_t _calculateTileLengthForImageLengthBasedOnRestrictions(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = (a1 >> 3) / a2 * a2;
  if (v3 > a3)
    return a3;
  v5 = 1024;
  v4 = 512;
  do
  {
    v6 = v3 - a2;
    if (v3 <= a2)
      v7 = a2;
    else
      v7 = v3;
    while (v7 <= a3)
    {
      v8 = (v7 + a1 / v7 * v7 - a1) % v7;
      if (v8 <= v5)
        v4 = v7;
      if (v8 < v5)
        v5 = (v7 + a1 / v7 * v7 - a1) % v7;
      v7 += a2;
    }
    if (v5 <= (unint64_t)(3 * v4) >> 2)
      break;
    a3 = v4;
    v3 -= a2;
  }
  while (v6 >= 0x200);
  return v4;
}

uint64_t CMPhotoDNGWriteCompressedRaw(_DWORD *a1, CFDataRef theData, __CFData *a3, int a4, int a5, int a6)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v14;
  int v15;
  UInt8 *MutableBytePtr;
  UInt8 *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  UInt8 *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  UInt8 *v34;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  if (*(_QWORD *)BytePtr != 0x163726177
    || *((_DWORD *)BytePtr + 3) != a1[25]
    || *((_DWORD *)BytePtr + 4) != a1[26]
    || *((_DWORD *)BytePtr + 5) != a1[407]
    || *((_DWORD *)BytePtr + 6) != a1[408]
    || *((_DWORD *)BytePtr + 7) != a1[409])
  {
    return 1;
  }
  v14 = Length;
  v15 = BytePtr[32];
  MutableBytePtr = CFDataGetMutableBytePtr(a3);
  v17 = CFDataGetMutableBytePtr(a3);
  v18 = *((_DWORD *)BytePtr + 7);
  v19 = (8 * v18 + 36);
  if (v18)
  {
    v20 = 0;
    v34 = &MutableBytePtr[a4];
    v21 = (uint64_t)&BytePtr[4 * v18 + 36];
    v22 = &v17[a5];
    do
    {
      v23 = *(_DWORD *)&BytePtr[4 * v20 + 36];
      v24 = bswap32(v23);
      if (v15)
        v23 = v24;
      v25 = v23 - v19;
      v26 = v19;
      v27 = CFDataGetLength(a3);
      v19 = v26;
      v28 = v25 + v27;
      v29 = bswap32(v25 + v27);
      if (a6)
        v28 = v29;
      *(_DWORD *)&v34[4 * v20] = v28;
      v30 = *(_DWORD *)(v21 + 4 * v20);
      v31 = bswap32(v30);
      if (v15)
        v30 = v31;
      v32 = bswap32(v30);
      if (a6)
        v30 = v32;
      *(_DWORD *)&v22[4 * v20++] = v30;
    }
    while (v20 < *((unsigned int *)BytePtr + 7));
  }
  CFDataAppendBytes(a3, &BytePtr[(int)v19], v14 - (int)v19);
  return 0;
}

uint64_t CMPhotoDNGRead32(unsigned int *a1, int a2)
{
  unsigned int v2;

  v2 = bswap32(*a1);
  if (a2)
    return v2;
  else
    return *a1;
}

unsigned int *CMPhotoDNGWrite32(unsigned int *result, unsigned int a2, int a3)
{
  unsigned int v3;

  v3 = bswap32(a2);
  if (!a3)
    v3 = a2;
  *result = v3;
  return result;
}

uint64_t CMPhotoDNGJPEGXLCompressData(size_t a1, unint64_t a2, int a3, char *a4, uint64_t a5, float a6, uint64_t a7, int a8, CGColorSpace *a9, const __CFData *a10)
{
  unsigned int v18;
  uint64_t v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  const __CFData *v24;
  const __CFData *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  CFIndex Length;
  CFIndex v40;
  CFIndex v41;
  int v42;
  unsigned int v44;
  CGColorSpace *v45;
  int v46;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[28];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v65 = 0u;
  memset(v66, 0, sizeof(v66));
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v47 = 0;
  if (a6 < 0.0 || a6 > 1.0 || (v18 = CMPhotoDecompressionSupportedForContainerAndCodec(2, 1786276896, 0, &v47), !v47))
  {
    v19 = FigSignalErrorAt();
    goto LABEL_82;
  }
  v45 = a9;
  v19 = 4294950746;
  if (a3 > 1815361649)
  {
    if (a3 == 1815491698)
      goto LABEL_10;
    v20 = 1815361650;
  }
  else
  {
    if (a3 == 1111970369)
      goto LABEL_10;
    v20 = 1278226488;
  }
  v21 = 0;
  if (a3 != v20)
    goto LABEL_86;
LABEL_10:
  if (!a10)
  {
LABEL_82:
    v21 = 0;
    goto LABEL_86;
  }
  v44 = v18;
  if (!JxlEncoderCreate())
  {
    v21 = 0;
    v19 = 4294950745;
    goto LABEL_86;
  }
  if (a8 >= 2)
  {
    if (!JxlThreadParallelRunnerCreate())
    {
      v21 = 0;
      v19 = 4294950305;
      goto LABEL_86;
    }
    if (JxlEncoderSetParallelRunner())
    {
      v21 = 0;
      v19 = 4294950304;
      goto LABEL_86;
    }
  }
  if (!JxlEncoderFrameSettingsCreate())
  {
    v21 = 0;
    goto LABEL_85;
  }
  v22 = 0;
  v46 = 0;
  if (a3 > 1815361649)
  {
    if (a3 == 1815361650 || (v23 = 0, a3 == 1815491698))
    {
      v23 = 0;
      v46 = 3;
      v22 = 16;
    }
  }
  else
  {
    if (a3 == 1111970369)
    {
      v23 = 0;
      v46 = 3;
      goto LABEL_25;
    }
    v23 = 0;
    if (a3 == 1278226488)
    {
      v46 = 1;
      v23 = 1;
LABEL_25:
      v22 = 8;
    }
  }
  JxlEncoderInitBasicInfo();
  v21 = 0;
  v19 = 4294950302;
  if (!HIDWORD(a1) && !HIDWORD(a2))
  {
    *(_QWORD *)((char *)&v55 + 4) = __PAIR64__(a2, a1);
    *(_QWORD *)&v61 = __PAIR64__(a2, a1);
    HIDWORD(v55) = v22;
    DWORD1(v58) = v46;
    if (v45)
    {
      if (a6 == 1.0)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)&v48 = v23 | 0x100000000;
      DWORD2(v49) = 9;
      LODWORD(v53) = 8;
      LODWORD(v54) = 0;
      if (a6 == 1.0)
      {
LABEL_32:
        DWORD1(v57) = 1;
        goto LABEL_34;
      }
    }
    DWORD1(v57) = 0;
LABEL_34:
    if (!JxlEncoderSetBasicInfo())
    {
      if (v45)
      {
        v24 = CGColorSpaceCopyICCData(v45);
        if (!v24)
        {
          v21 = 0;
          v19 = 4294950306;
          goto LABEL_86;
        }
        v25 = v24;
        CFDataGetBytePtr(v24);
        CFDataGetLength(v25);
        v26 = JxlEncoderSetICCProfile();
        CFRelease(v25);
        if (v26)
          goto LABEL_79;
        goto LABEL_40;
      }
      if (!JxlEncoderSetColorEncoding())
      {
LABEL_40:
        if (a6 == 1.0)
        {
          if (JxlEncoderSetFrameLossless())
            goto LABEL_79;
        }
        else if (JxlEncoderSetFrameDistance()
               || JxlEncoderFrameSettingsSetOption()
               || JxlEncoderFrameSettingsSetOption())
        {
          goto LABEL_79;
        }
        if (JxlEncoderFrameSettingsSetOption())
        {
LABEL_79:
          v21 = 0;
          v19 = 4294950304;
          goto LABEL_86;
        }
        v27 = (v46 * v22);
        v28 = v27 >> 3;
        if (!is_mul_ok(v28, a1 * a2))
        {
          v19 = FigSignalErrorAt();
          v21 = 0;
          goto LABEL_86;
        }
        if (a3 == 1111970369 || a3 == 1815491698 || a3 == 1278226488)
        {
          v29 = (char *)malloc_type_malloc(v28 * a1 * a2, 0x171FE66uLL);
          v21 = v29;
          if (!v29)
          {
            v19 = 4294950745;
            goto LABEL_86;
          }
          if (a3 == 1111970369)
          {
            if (a2)
            {
              v31 = 0;
              do
              {
                if (a1)
                {
                  v32 = &a4[v31 * a5];
                  v33 = &v29[((unint64_t)(v31 * v27) >> 3) * a1];
                  v34 = a1;
                  do
                  {
                    *v33 = *v32;
                    v33[1] = v32[1];
                    v33[2] = v32[2];
                    v33 += 3;
                    v32 += 4;
                    --v34;
                  }
                  while (v34);
                }
                ++v31;
              }
              while (v31 != a2);
            }
          }
          else if (a3 == 1815491698)
          {
            if (a2)
            {
              v35 = 0;
              do
              {
                if (a1)
                {
                  v36 = &a4[v35 * a5];
                  v37 = &v29[((unint64_t)(v35 * v27) >> 3) * a1];
                  v38 = a1;
                  do
                  {
                    *(_WORD *)v37 = *(_WORD *)v36;
                    *((_WORD *)v37 + 1) = *((_WORD *)v36 + 1);
                    *((_WORD *)v37 + 2) = *((_WORD *)v36 + 2);
                    v36 += 8;
                    v37 += 6;
                    --v38;
                  }
                  while (v38);
                }
                ++v35;
              }
              while (v35 != a2);
            }
          }
          else if (a2)
          {
            v30 = 0;
            do
            {
              memcpy(&v21[(v30 >> 3) * a1], a4, a1);
              a4 += a5;
              v30 += v27;
              --a2;
            }
            while (a2);
          }
        }
        else
        {
          v21 = 0;
          if (a1 * v28 != a5)
          {
            v19 = v44;
            goto LABEL_86;
          }
        }
        if (!JxlEncoderAddImageFrame())
        {
          JxlEncoderCloseInput();
          Length = CFDataGetLength(a10);
          v40 = Length + 0x4000;
          v41 = Length;
          while (1)
          {
            CFDataSetLength(a10, v40);
            CFDataGetMutableBytePtr(a10);
            v42 = JxlEncoderProcessOutput();
            if (v42 != 2)
              break;
            v41 += 0x4000;
            Length = v41 - (v40 - Length);
            v40 += 0x4000;
          }
          if (!v42)
          {
            CFDataSetLength(a10, Length);
            v19 = v44;
            goto LABEL_86;
          }
        }
LABEL_85:
        v19 = 4294950739;
        goto LABEL_86;
      }
    }
    v21 = 0;
    v19 = 4294950739;
  }
LABEL_86:
  free(v21);
  JxlThreadParallelRunnerDestroy();
  JxlEncoderDestroy();
  return v19;
}

uint64_t CMPhotoDNGCompressLinearDNG(_DWORD *a1, __CVBuffer *a2, const __CFData *a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int CPUCount;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;

  pthread_once(&_checkFigNoteTraceOnce_onceToken_4, (void (*)(void))_registerFigNoteTrace_4);
  if (!a2)
    return 4294950746;
  a1[409] = 0;
  v12 = (a1[407] + a1[25] + ~((a1[25] - 1) % a1[407])) / a1[407];
  v13 = v12;
  v14 = (a1[408] + a1[26] + ~((a1[26] - 1) % a1[408])) / a1[408];
  v15 = v14;
  v16 = v14 * v12;
  if ((int)CMPhotoGetCPUCount() > 7)
    CPUCount = 8;
  else
    CPUCount = CMPhotoGetCPUCount();
  v18 = a1[7];
  if (CPUCount < v18)
    v18 = CPUCount;
  if (v18 >= v16)
    v18 = v16;
  if (v18 <= 1)
    v19 = 1;
  else
    v19 = v18;
  v20 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v21 = _compressAllTiles((uint64_t)a1, v13, v15, v19, a2, a3, a4, a5, a6);
  if (*v20 == 1)
    kdebug_trace();
  return v21;
}

uint64_t _compressAllTiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, const __CFData *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  CFTypeRef *v15;
  size_t v16;
  uint64_t v17;
  CFTypeRef *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t PixelFormatType;
  uint64_t v24;
  CFTypeRef *v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unint64_t v37;
  CVPixelBufferRef *v38;
  uint64_t PixelBuffer;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  CFTypeRef *v52;
  unint64_t v53;
  unint64_t v54;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int Length;
  int v61;
  UInt8 *MutableBytePtr;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  void **v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  CFTypeRef *v88;
  int v89;
  CVPixelBufferRef v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  _QWORD v94[6];
  int v95;
  int v96;
  int v97;
  char v98;
  _QWORD v99[2];
  void (*v100)(uint64_t, unint64_t);
  void *v101;
  CFTypeRef *v102;
  CFTypeRef *v103;
  uint64_t v104;
  CVPixelBufferRef v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  const __CFData *v110;
  _QWORD *v111;
  CFTypeRef *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  BOOL v121;
  char v122;
  CFTypeRef v123;
  _QWORD v124[3];
  _QWORD v125[5];

  v83 = a7;
  v84 = a8;
  v90 = a5;
  v125[3] = *MEMORY[0x1E0C80C00];
  v92 = a2;
  v79 = a2 * a3;
  v80 = a3;
  v85 = a4;
  if ((int)a4 >= 4)
    v11 = 4;
  else
    v11 = a4;
  v12 = a4;
  v13 = 8 * a4;
  MEMORY[0x1E0C80A78](a1);
  v14 = (v13 + 15) & 0xFFFFFFFF0;
  v15 = (CFTypeRef *)((char *)&v77 - v14);
  if (v13 >= 0x200)
    v16 = 512;
  else
    v16 = v13;
  bzero((char *)&v77 - v14, v16);
  MEMORY[0x1E0C80A78](v17);
  v18 = (CFTypeRef *)((char *)&v77 - v14);
  bzero(v18, v16);
  v87 = v11;
  v19 = 8 * v11;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v77 - v21;
  v123 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v90);
  v89 = PixelFormatType;
  MEMORY[0x1E0C80A78](PixelFormatType);
  v25 = (CFTypeRef *)(&v77 - 8 * v24);
  bzero(v25, v26);
  bzero(v15, v13);
  bzero(v18, v13);
  v91 = v22;
  v27 = v19;
  v28 = v85;
  bzero(v22, v27);
  if (v28 >= 2
    && (v29 = CMPhotoAsyncDispatcherCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v12, 16, 0, (uint64_t *)&v123), (_DWORD)v29))
  {
    v59 = v29;
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 8);
    v78 = v12;
    v88 = v18;
    if (v30 == 5)
    {
      if (*(_BYTE *)(a1 + 24))
        v31 = 0;
      else
        v31 = *(_DWORD *)(a1 + 156) == *(_DWORD *)(a1 + 136);
      v33 = !v31 || v89 == 1751527984;
      v93 = v33;
      if (_compressAllTiles_onceToken != -1)
        dispatch_once(&_compressAllTiles_onceToken, &__block_literal_global_18);
      v34 = 1815361650;
    }
    else
    {
      if (*(_BYTE *)(a1 + 24))
        v35 = 1;
      else
        v35 = v89 == 1751527984;
      v36 = v35;
      v93 = v36;
      if (v30 == 2)
        v34 = 1111970369;
      else
        v34 = 1815491698;
    }
    if (v28 < 1)
    {
LABEL_42:
      v28 = v85;
      if (v80)
      {
        v43 = 0;
        v86 = a9;
        v81 = (int)v84;
        v82 = (int)v83;
        v44 = MEMORY[0x1E0C809B0];
        do
        {
          if (v92)
          {
            for (i = 0; v92 != i; ++i)
            {
              v46 = *(int *)(a1 + 1628);
              v47 = i * v46 + *(_QWORD *)(a1 + 112);
              v48 = *(int *)(a1 + 1632);
              v49 = v43 * v48 + *(_QWORD *)(a1 + 120);
              v50 = *(_DWORD *)(a1 + 1636);
              v51 = v50;
              *(_DWORD *)(a1 + 1636) = v50 + 1;
              v52 = &v25[8 * (uint64_t)v50];
              v53 = *(int *)(a1 + 104) - v43 * v48;
              v54 = *(int *)(a1 + 100) - i * v46;
              v56 = v53 < v48 || v54 < v46;
              if (v56)
                v57 = 0;
              else
                v57 = v47;
              if (v56)
                v58 = 0;
              else
                v58 = v49;
              v99[0] = v44;
              v99[1] = 3221225472;
              v100 = ___compressAllTiles_block_invoke_2;
              v101 = &__block_descriptor_170_e8_v16__0Q8l;
              v121 = v56;
              v102 = v88;
              v103 = &v25[8 * (uint64_t)v50];
              v117 = v89;
              v118 = 0;
              v104 = a1;
              v105 = v90;
              v106 = v47;
              v107 = v49;
              v108 = v53;
              v109 = v54;
              v122 = v93;
              v110 = a6;
              v111 = v91;
              v119 = v28;
              v120 = v87;
              v112 = v15;
              v113 = v57;
              v114 = v58;
              v115 = v46;
              v116 = v48;
              if (v28 < 2)
              {
                Length = CFDataGetLength(a6);
                v100((uint64_t)v99, 0);
                if (*((_DWORD *)v52 + 2))
                {
                  v59 = 0;
                  goto LABEL_107;
                }
                v61 = CFDataGetLength(a6);
                MutableBytePtr = CFDataGetMutableBytePtr(a6);
                v63 = bswap32(Length);
                v64 = v86 == 0;
                if (!v86)
                  v63 = Length;
                *(_DWORD *)&MutableBytePtr[4 * v51 + v82] = v63;
                v65 = v61 - Length;
                v66 = bswap32(v61 - Length);
                if (!v64)
                  v65 = v66;
                *(_DWORD *)&MutableBytePtr[4 * v51 + v81] = v65;
                v28 = v85;
                v44 = MEMORY[0x1E0C809B0];
              }
              else
              {
                v94[0] = v44;
                v94[1] = 3221225472;
                v94[2] = ___compressAllTiles_block_invoke_3;
                v94[3] = &__block_descriptor_61_e5_v8__0l;
                v94[4] = &v25[8 * (uint64_t)v50];
                v94[5] = a6;
                v95 = v83;
                v96 = v50;
                v98 = v86;
                v97 = v84;
                if (*MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
                v59 = CMPhotoAsyncDispatcherDispatchBlockWithOrderedCompletion((uint64_t)v123, (uint64_t)v99, (uint64_t)v94);
                if (*MEMORY[0x1E0CA1FC0] == 1)
                  kdebug_trace();
                v44 = MEMORY[0x1E0C809B0];
                if ((_DWORD)v59)
                  goto LABEL_76;
              }
            }
          }
          ++v43;
        }
        while (v43 != v80);
      }
      if (v28 < 2)
        v59 = 0;
      else
        v59 = (uint64_t)CMPhotoAsyncDispatcherWaitForCompletion((uint64_t)v123);
LABEL_76:
      v12 = v78;
    }
    else
    {
      v37 = v78;
      v38 = (CVPixelBufferRef *)v15;
      while (1)
      {
        if (v93)
        {
          PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), v34, *(int *)(a1 + 1628), *(int *)(a1 + 1632), 1, 0, 0, 0, 0, 0, v38);
          if ((_DWORD)PixelBuffer)
            break;
        }
        ++v38;
        if (!--v37)
        {
          if (v93)
          {
            if ((int)v87 <= 1)
              v40 = 1;
            else
              v40 = v87;
            v41 = v91;
            do
            {
              v42 = objc_alloc(getCIContextClass());
              v124[0] = getkCIContextWorkingColorSpace();
              v125[0] = objc_msgSend(MEMORY[0x1E0C99E38], "null");
              v124[1] = getkCIContextCacheIntermediates();
              v125[1] = MEMORY[0x1E0C9AAA0];
              v124[2] = getkCIContextName();
              v125[2] = CFSTR("linearizationTable and shift signal encode");
              *v41++ = objc_msgSend(v42, "initWithOptions:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v125, v124, 3));
              --v40;
            }
            while (v40);
          }
          goto LABEL_42;
        }
      }
      v59 = PixelBuffer;
      v93 = 1;
LABEL_107:
      v12 = v78;
      v28 = v85;
    }
    v18 = v88;
  }
  v67 = v79;
  v68 = (void **)v91;
  if (v79)
  {
    v69 = (unsigned int *)(v25 + 1);
    v70 = v79;
    while (1)
    {
      v72 = *v69;
      v69 += 16;
      v71 = v72;
      if (v72)
        break;
      if (!--v70)
        goto LABEL_82;
    }
    v59 = v71;
  }
  else
  {
LABEL_82:
    if ((_BYTE)v93 && v28 >= 1)
    {
      if ((int)v87 <= 1)
        v73 = 1;
      else
        v73 = v87;
      do
      {
        v74 = *v68++;

        --v73;
      }
      while (v73);
    }
  }
  if (v123)
    CFRelease(v123);
  for (; v67; --v67)
  {
    if (*v25)
    {
      CFRelease(*v25);
      *v25 = 0;
    }
    v25 += 8;
  }
  if (v28 >= 1)
  {
    v75 = v12;
    do
    {
      if (*v15)
        CFRelease(*v15);
      ++v15;
      --v75;
    }
    while (v75);
    do
    {
      if (*v18)
        CFRelease(*v18);
      ++v18;
      --v12;
    }
    while (v12);
  }
  return v59;
}

uint64_t CMPhotoDNGCompressRaw(_DWORD *a1, __CVBuffer *a2, const __CFData *a3, int a4, int a5, int a6)
{
  uint64_t i;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  unsigned int v17;
  int v18;
  unsigned int BytesPerRow;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  __CVBuffer *v37;
  char *v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  unsigned int v45;
  int v46;
  _DWORD *v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 *v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  UInt8 *MutableBytePtr;
  unsigned int v113;
  unsigned int v114;
  unsigned int v117;
  const __CFAllocator *allocator;
  char *BaseAddress;
  uint64_t v122;
  int pixelFormatType;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int BytesPerPixelForPixelFormat;
  char *v131;
  uint64_t v132;
  _DWORD *v133;
  UInt8 bytes[2];
  void *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  CFIndex length[2];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  *(_OWORD *)length = 0u;
  v140 = 0u;
  v142 = 0u;
  v141 = 0u;
  v137 = 0u;
  v138 = 0u;
  v136 = 0u;
  LODWORD(length[1]) = 2 * a1[407] * a1[408];
  length[0] = (CFIndex)malloc_type_malloc(SLODWORD(length[1]), 0x16D87479uLL);
  v126 = a1[25];
  v128 = a1[26];
  DWORD1(v142) = v126;
  DWORD1(v140) = v128;
  *((_QWORD *)&v140 + 1) = 0x40000000ALL;
  v133 = a1;
  DWORD2(v138) = a1[405];
  v135 = malloc_type_malloc(0x7FFCuLL, 0x100004052888210uLL);
  v131 = (char *)v135 + 16380;
  for (i = -4095; i != 4096; ++i)
  {
    if ((int)i >= 0)
      v9 = i;
    else
      v9 = -(int)i;
    if (i)
    {
      v10 = 0;
      v11 = v9;
      do
      {
        ++v10;
        v36 = v9 > 1;
        v9 >>= 1;
      }
      while (v36);
    }
    else
    {
      v11 = v9;
      v10 = 0;
    }
    v12 = 0;
    v13 = 0;
    LODWORD(v14) = 0;
    v15 = 0;
    do
    {
      if (v12 >= (int)v14)
      {
        v16 = &g_huff_n[v15];
        do
        {
          v17 = *v16++;
          v14 = v17 + (uint64_t)(int)v14;
          v13 *= 2;
          ++v15;
        }
        while (v12 >= v14);
      }
      if (v15 >= 16)
        printf("ERROR NO HUFFCODE %d %d\n", i, v10);
      if (v10 == g_huff_v[v12])
        break;
      ++v12;
      ++v13;
    }
    while (v12 != 16);
    v18 = (v13 << v10) + ~((-1 << v10) | v11);
    if (i >= 0)
      v18 = ((v13 << v10) + i) & 0xFFFFFF;
    *(_DWORD *)&v131[4 * i] = (v15 + v10) | (v18 << 8);
  }
  CVPixelBufferLockBaseAddress(a2, 1uLL);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
  LODWORD(v20) = 2 * v126;
  if (BytesPerRow)
    v20 = BytesPerRow;
  else
    v20 = v20;
  v132 = v20;
  pixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(pixelFormatType);
  v21 = v133;
  v22 = v133[407];
  v23 = v133[408];
  v133[409] = 0;
  v24 = v128 - 1 + v23;
  v25 = a6;
  if (!__CFADD__(v128 - 1, v23))
  {
    v129 = 0;
    v26 = v24 / v23;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v122 = a4;
    if (v26 <= 1)
      v26 = 1;
    v117 = v26;
    v127 = (v126 + v22 - 1) / v22;
    while (!v127)
    {
LABEL_103:
      if (++v129 == v117)
        goto LABEL_104;
    }
    v27 = 0;
    while (1)
    {
      v28 = v21[407];
      v29 = *((_QWORD *)v21 + 15);
      v30 = *((_QWORD *)v21 + 14) + v28 * v27;
      v31 = v21[408];
      v32 = v29 + v31 * v129;
      v33 = DWORD1(v140) - v31 * v129;
      v34 = DWORD1(v142) - v28 * v27;
      if (pixelFormatType > 1735549491)
      {
        if (pixelFormatType == 1919379252)
          goto LABEL_36;
        v35 = 1735549492;
      }
      else
      {
        if (pixelFormatType == 1650943796)
          goto LABEL_36;
        v35 = 1734505012;
      }
      if (pixelFormatType != v35)
      {
        if (v34 < v28)
          v28 = DWORD1(v142) - v28 * v27;
        HIDWORD(v137) = v28;
        if (v33 >= v31)
          v48 = v31;
        else
          v48 = DWORD1(v140) - v31 * v129;
        LODWORD(v142) = v48;
        *((_QWORD *)&v141 + 1) = &BaseAddress[2 * v30 + v32 * DWORD2(v142)];
        goto LABEL_63;
      }
LABEL_36:
      v36 = v33 < v31 || v34 < v28;
      if (v36)
      {
        v37 = pixelBufferOut;
        if (!pixelBufferOut)
        {
          if (CVPixelBufferCreate(allocator, v28, v31, pixelFormatType, 0, &pixelBufferOut))
            goto LABEL_105;
          v37 = pixelBufferOut;
        }
        v125 = CVPixelBufferGetBytesPerRow(v37);
        CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
        v38 = (char *)CVPixelBufferGetBaseAddress(pixelBufferOut);
        v39 = v133;
        if (v34 >= v133[407])
          v40 = v133[407];
        else
          v40 = v34;
        if ((int)v133[408] < 1)
        {
LABEL_55:
          v47 = v39;
          CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
          *((_QWORD *)&v141 + 1) = v38;
          DWORD2(v142) = v125;
          v28 = v47[407];
          v31 = v47[408];
          v25 = a6;
          goto LABEL_56;
        }
        v41 = 0;
        v42 = v30;
        v43 = v125 / BytesPerPixelForPixelFormat;
        v44 = &BaseAddress[BytesPerPixelForPixelFormat * v42 + v132 * (v29 + v129 * v31)];
        while (2)
        {
          if (v41 >= v33)
          {
            v45 = v39[407] * BytesPerPixelForPixelFormat;
            v46 = v43 * v41;
LABEL_53:
            bzero(&v38[2 * v46], v45);
          }
          else
          {
            v45 = (v39[407] - v40) * BytesPerPixelForPixelFormat;
            memcpy(&v38[2 * (v43 * v41)], v44, v40 * BytesPerPixelForPixelFormat);
            if (v45)
            {
              v46 = v43 * v41 + v40;
              goto LABEL_53;
            }
          }
          ++v41;
          v39 = v133;
          v44 += v132;
          if (v41 >= (int)v133[408])
            goto LABEL_55;
          continue;
        }
      }
      DWORD2(v142) = v132;
      *((_QWORD *)&v141 + 1) = &BaseAddress[v32 * v132 + v30 * BytesPerPixelForPixelFormat];
LABEL_56:
      HIDWORD(v137) = v28;
      LODWORD(v142) = v31;
LABEL_63:
      *(_QWORD *)&v137 = 0;
      HIDWORD(length[1]) = 0;
      DWORD2(v137) = 64;
      v49 = CFDataGetLength(a3);
      if (v133[2] == 1)
      {
        v50 = v142;
        if ((int)v142 >= 1)
        {
          v51 = 0;
          v52 = HIDWORD(v137);
          do
          {
            if (v52 >= 1)
            {
              v53 = 0;
              v54 = *((_QWORD *)&v141 + 1) + (DWORD2(v142) * v51);
              do
              {
                *(_WORD *)bytes = 0;
                *(_WORD *)bytes = __rev16((*(unsigned __int16 *)(v54 + 2 * v53) >> SBYTE8(v138)) & 0xFFF);
                CFDataAppendBytes(a3, bytes, 2);
                v52 = HIDWORD(v137);
                ++v53;
              }
              while ((int)v53 < SHIDWORD(v137));
              v50 = v142;
            }
            ++v51;
          }
          while (v51 < v50);
        }
      }
      else
      {
        v55 = v27;
        v56 = BYTE8(v138);
        v57 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v57) = -1;
        v58 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v58) = -40;
        v59 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v59) = -1;
        v60 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v60) = -61;
        v61 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v61) = 0;
        v62 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v62) = 14;
        v63 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v63) = 12;
        v64 = v142;
        v65 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v65) = BYTE1(v142);
        v66 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v66) = v64;
        v67 = SHIDWORD(v137) / 2;
        v68 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v68) = (unsigned __int16)(SHIDWORD(v137) / 2) >> 8;
        v69 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v69) = v67;
        v70 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v70) = 2;
        v71 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v71) = 0;
        v72 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v72) = 17;
        v73 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v73) = 0;
        v74 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v74) = 1;
        v75 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v75) = 17;
        v76 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v76) = 0;
        _encodeWriteHuffTable((uint64_t)&v135, 0);
        _encodeWriteHuffTable((uint64_t)&v135, 1);
        v77 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v77) = -1;
        v78 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v78) = -38;
        v79 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v79) = 0;
        v80 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v80) = 10;
        v81 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v81) = 2;
        v82 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v82) = 0;
        v83 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v83) = 0;
        v84 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v84) = 1;
        v85 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v85) = 16;
        v86 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v86) = 1;
        v87 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v87) = 0;
        v88 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v88) = 0;
        CFDataAppendBytes(a3, (const UInt8 *)length[0], SHIDWORD(length[1]));
        HIDWORD(length[1]) = 0;
        if ((int)v142 >= 1)
        {
          v90 = 0;
          v91 = 0;
          do
          {
            v92 = (DWORD2(v142) * v91);
            v93 = *((_QWORD *)&v141 + 1) + v92;
            if (v91)
            {
              v94 = DWORD2(v142) >> 1;
              v95 = (*(unsigned __int16 *)(v93 - 2 * v94) >> v56) & 0xFFF;
              v96 = (*(unsigned __int16 *)(v93 + 2 * (1 - v94)) >> v56) & 0xFFF;
            }
            else
            {
              v96 = 2048;
              v95 = 2048;
            }
            *(_QWORD *)&v138 = __PAIR64__(v96, v95);
            v97 = HIDWORD(v137);
            if ((BYTE12(v137) & 7) == 0 && DWORD2(v138) == 2)
            {
              *(_QWORD *)&v136 = *((_QWORD *)&v141 + 1) + v92;
              *((_QWORD *)&v136 + 1) = length[0] + v90;
              CMPhotoDNGCompressLineASM((uint64_t)&v135, v89);
              v97 = HIDWORD(v137);
              v90 = DWORD2(v136) - LODWORD(length[0]);
              HIDWORD(length[1]) = DWORD2(v136) - LODWORD(length[0]);
            }
            else if (SHIDWORD(v137) >= 1)
            {
              v99 = 0;
              v100 = *((_QWORD *)&v141 + 1) + v92;
              do
              {
                v101 = (unsigned __int16 *)(v100 + 2 * v99);
                v102 = v138;
                LODWORD(v138) = (*v101 >> v56) & 0xFFF;
                _encodeWriteSymbol((uint64_t)&v135, *((_DWORD *)v135 + (int)v138 - v102 + 4095));
                v103 = DWORD1(v138);
                DWORD1(v138) = (v101[1] >> v56) & 0xFFF;
                _encodeWriteSymbol((uint64_t)&v135, *((_DWORD *)v135 + DWORD1(v138) - v103 + 4095));
                v97 = HIDWORD(v137);
                v99 += 2;
              }
              while ((int)v99 < SHIDWORD(v137));
              v90 = HIDWORD(length[1]);
            }
            if (LODWORD(length[1]) - v90 < 4 * v97)
            {
              CFDataAppendBytes(a3, (const UInt8 *)length[0], v90);
              v90 = 0;
              HIDWORD(length[1]) = 0;
            }
            ++v91;
          }
          while (v91 < (int)v142);
        }
        while ((BYTE8(v137) & 7) != 0)
          _encodeWriteSymbol((uint64_t)&v135, 0x101u);
        v27 = v55;
        if (SDWORD2(v137) <= 63)
        {
          v104 = v137;
          do
          {
            v105 = HIBYTE(v104);
            v106 = SHIDWORD(length[1]);
            ++HIDWORD(length[1]);
            *(_BYTE *)(length[0] + v106) = v105;
            if (v105 == 255)
            {
              v107 = SHIDWORD(length[1]);
              ++HIDWORD(length[1]);
              *(_BYTE *)(length[0] + v107) = 0;
            }
            v104 = (_QWORD)v137 << 8;
            *(_QWORD *)&v137 = (_QWORD)v137 << 8;
            v108 = DWORD2(v137);
            DWORD2(v137) += 8;
          }
          while (v108 < 56);
        }
        v109 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v109) = -1;
        v110 = SHIDWORD(length[1]);
        ++HIDWORD(length[1]);
        *(_BYTE *)(length[0] + v110) = -39;
        CFDataAppendBytes(a3, (const UInt8 *)length[0], SHIDWORD(length[1]));
        HIDWORD(length[1]) = 0;
      }
      v111 = CFDataGetLength(a3);
      MutableBytePtr = CFDataGetMutableBytePtr(a3);
      v21 = v133;
      v113 = bswap32(v49);
      if (!v25)
        v113 = v49;
      *(_DWORD *)&MutableBytePtr[4 * v133[409] + v122] = v113;
      v114 = bswap32(v111 - v49);
      if (!v25)
        v114 = v111 - v49;
      *(_DWORD *)&MutableBytePtr[4 * v133[409]++ + a5] = v114;
      if (++v27 == v127)
        goto LABEL_103;
    }
  }
LABEL_104:
  CVPixelBufferUnlockBaseAddress(a2, 1uLL);
LABEL_105:
  free(v135);
  free((void *)length[0]);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return 0;
}

uint64_t CMPhotoDNGRead8(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t CMPhotoDNGRead16(unsigned __int16 *a1, int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = bswap32(v2) >> 16;
  if (a2)
    LOWORD(v2) = v3;
  return (unsigned __int16)v2;
}

double CMPhotoDNGReadDouble(unint64_t *a1, int a2)
{
  double result;
  double v3;

  result = *(double *)a1;
  v3 = COERCE_DOUBLE(bswap64(*a1));
  if (a2)
    return v3;
  return result;
}

float CMPhotoDNGReadFloat(unsigned int *a1, int a2)
{
  float result;
  float v3;

  result = *(float *)a1;
  v3 = COERCE_FLOAT(bswap32(*a1));
  if (a2)
    return v3;
  return result;
}

uint64_t CMPhotoDNGReadRational(unsigned int *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  LODWORD(v2) = *a1;
  LODWORD(v3) = a1[1];
  v4 = bswap32(*a1);
  v5 = bswap32(v3);
  if (a2)
    v3 = v5;
  else
    v3 = v3;
  if (a2)
    v2 = v4;
  else
    v2 = v2;
  return v2 | (v3 << 32);
}

_WORD *CMPhotoDNGWrite16(_WORD *result, __int16 a2, int a3)
{
  __int16 v3;

  v3 = __rev16(a2);
  if (!a3)
    v3 = a2;
  *result = v3;
  return result;
}

unint64_t *CMPhotoDNGWrite64(unint64_t *result, unint64_t a2, int a3)
{
  unint64_t v3;

  v3 = bswap64(a2);
  if (!a3)
    v3 = a2;
  *result = v3;
  return result;
}

double *CMPhotoDNGWriteDouble(double *result, int a2, double a3)
{
  double v3;
  unint64_t v4;

  v3 = a3;
  v4 = bswap64(*(unint64_t *)&a3);
  if (a2)
    v3 = *(double *)&v4;
  *result = v3;
  return result;
}

uint64_t CMPhotoDNGDecompressRawTile(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7)
{
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  char v38;
  char v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  char *v46;
  __int16 v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  int v53;
  int v54;
  uint64_t v55;
  _WORD *v56;
  int v57;
  unsigned __int8 *v58;
  void *v59;
  int v60;
  int v61;
  char v63;
  unsigned __int8 *v64;
  __int128 v65;
  __int128 v66;
  _OWORD v67[2];
  _OWORD v68[2];
  void *v69[2];
  void *v70;

  v65 = 0u;
  v66 = 0u;
  v70 = 0;
  *(_OWORD *)v69 = 0u;
  memset(v68, 0, sizeof(v68));
  memset(v67, 0, sizeof(v67));
  *(_QWORD *)&v66 = __PAIR64__(*(unsigned __int8 *)(a1 + 6), __rev16(*(unsigned __int16 *)(a1 + 9)));
  v11 = __rev16(*(unsigned __int16 *)(a1 + 7));
  v64 = (unsigned __int8 *)(a1 + 20);
  HIDWORD(v65) = v11;
  LODWORD(v65) = a2 - 20;
  _decodeReadHuffTable((uint64_t)&v64);
  v12 = DWORD2(v65);
  if (DWORD2(v65) == 8)
  {
    v12 = 0;
    DWORD2(v65) = 0;
    v13 = v65;
    v14 = BYTE4(v65) << 8;
    v15 = v64;
  }
  else
  {
    v15 = v64 + 1;
    v13 = v65 - 1;
    v14 = *v64 << 8;
  }
  v16 = *v15;
  v64 = v15 + 1;
  v17 = v13 - 1;
  LODWORD(v65) = v17;
  if ((v14 | v16) == 0xFFC4)
  {
    _decodeReadHuffTable((uint64_t)&v64);
    v12 = DWORD2(v65);
    if (DWORD2(v65) == 8)
    {
      v12 = 0;
      DWORD2(v65) = 0;
      v15 = v64;
      v18 = v65;
    }
    else
    {
      v15 = v64 + 1;
      v18 = v65 - 1;
    }
    v17 = v18 - 1;
  }
  LODWORD(v65) = v17 - 4;
  v64 = v15 + 6;
  DWORD2(v66) = v15[5] >> 4;
  LODWORD(v65) = v17 - 6;
  v64 = v15 + 8;
  v19 = v15[7] >> 4;
  v64 = v15 + 11;
  HIDWORD(v66) = v19;
  LODWORD(v65) = v17 - 10;
  result = 4294950743;
  if ((v66 & 1) == 0 && 2 * (_DWORD)v66 == a3 && HIDWORD(v65) == a4)
  {
    v61 = v12;
    v60 = a5;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    do
    {
      v24 = *((_DWORD *)&v66 + v22 + 2);
      if ((v21 & 1) != 0 && v24 == DWORD2(v66))
        break;
      v63 = v23;
      v25 = v24;
      v26 = (char *)malloc_type_malloc(0x400uLL, 0x100004052888210uLL);
      v69[v25 + 1] = v26;
      if (!v26)
        return 4294950745;
      v27 = 0;
      LODWORD(v28) = 0;
      LODWORD(v29) = 0;
      LODWORD(v30) = 0;
      v31 = &v67[v25];
      v32 = (char *)v68 + 17 * v25;
      LODWORD(v33) = 256;
      do
      {
        v33 = v33 >> 1;
        v34 = *((unsigned __int8 *)v31 + v27++);
        if (v34)
        {
          v35 = 0;
          v28 = (int)v28;
          v30 = (int)v30;
          do
          {
            v36 = v32[v30];
            v28 += v33;
            v37 = v36 + v27;
            if ((v36 + v27) >= 9)
              v38 = v27;
            else
              v38 = v36 + v27;
            if (v37 < 9)
              v39 = 1;
            else
              v39 = 2;
            if (v28 > (int)v29)
            {
              v40 = 0;
              v41 = (int)v29;
              if (v37 >= 9)
                v42 = v32[v30];
              else
                v42 = 0;
              v43 = 1 << v36;
              if (1 << v36 >= 0)
                v44 = 1 << v36;
              else
                v44 = v43 + 1;
              v45 = v44 >> 1;
              v46 = &v26[4 * (int)v29 + 2];
              do
              {
                if (v40 < v45)
                  v47 = v40 - v43 + 1;
                else
                  v47 = v40;
                if (v37 < 9 && (v29 & ~(-1 << (8 - v37))) == 0)
                  v42 = v47;
                v40 += v37 < 9 && (v29 & ~(-1 << (8 - v37))) == 0;
                *(v46 - 2) = v38;
                *(v46 - 1) = v39;
                *(_WORD *)v46 = v42;
                v46 += 4;
                ++v41;
                LODWORD(v29) = v29 + 1;
              }
              while (v41 < v28);
            }
            ++v35;
            ++v30;
          }
          while (v35 < v34);
        }
      }
      while (v27 != 8);
      if ((int)v29 <= 255)
      {
        v29 = (int)v29;
        do
          *(_DWORD *)&v26[4 * v29++] = 0;
        while ((_DWORD)v29 != 256);
      }
      v23 = 0;
      v21 = 1;
      v22 = 1;
    }
    while ((v63 & 1) != 0);
    v48 = HIDWORD(v65);
    v49 = v61;
    if (SHIDWORD(v65) >= 1)
    {
      v50 = 0;
      v51 = a6;
      do
      {
        if (v50)
        {
          v52 = (unsigned __int16 *)(a6 + 2 * (v50 - 1) * v60);
          v53 = *v52 >> a7;
          v54 = v52[1] >> a7;
        }
        else
        {
          v53 = 1 << (BYTE4(v66) - 1);
          v54 = v53;
        }
        if (a3 >= 1)
        {
          v55 = 0;
          do
          {
            v53 += _readHuffFast((uint64_t)&v64, 0);
            v56 = (_WORD *)(v51 + 2 * v55);
            *v56 = v53 << a7;
            v54 += _readHuffFast((uint64_t)&v64, 1u);
            v55 += 2;
            v56[1] = v54 << a7;
          }
          while ((int)v55 < a3);
          v48 = HIDWORD(v65);
        }
        ++v50;
        v51 += 2 * v60;
      }
      while (v50 < v48);
      v49 = DWORD2(v65);
    }
    if ((v49 & 0xFFFFFFF8) == 8)
    {
      v57 = BYTE4(v65) << 8;
      v58 = v64;
    }
    else
    {
      v58 = v64 + 1;
      v57 = *v64 << 8;
    }
    if ((v57 | *v58) == 0xFFD9)
    {
      v59 = v69[1];
      if (v69[1])
        free(v69[1]);
      result = 0;
      if (v70)
      {
        if (v70 != v59)
        {
          free(v70);
          return 0;
        }
      }
    }
    else
    {
      return 4294950743;
    }
  }
  return result;
}

uint64_t _readHuffFast(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned __int8 *v4;
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3 >= 8)
  {
    v8 = *(_DWORD *)(a1 + 12);
    v9 = *(_DWORD *)(a1 + 16);
    LOBYTE(v3) = v3 - 8;
  }
  else
  {
    v4 = *(unsigned __int8 **)a1;
    v5 = (_BYTE *)(*(_QWORD *)a1 + 1);
    *(_QWORD *)a1 = v5;
    v6 = *v4;
    v7 = *(_DWORD *)(a1 + 8);
    v8 = v6 | (*(_DWORD *)(a1 + 12) << 8);
    *(_DWORD *)(a1 + 8) = v7 - 1;
    *(_DWORD *)(a1 + 12) = v8;
    if (v6 == 255 && !*v5)
    {
      *(_QWORD *)a1 = v4 + 2;
      *(_DWORD *)(a1 + 8) = v7 - 2;
    }
    v9 = v3 + 8;
    *(_DWORD *)(a1 + 16) = v3 + 8;
  }
  v10 = *(int *)(a1 + 4 * a2 + 32);
  v11 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8 * v10 + 112) + 4 * (v8 >> v3));
  v12 = *v11;
  v13 = v11[1];
  result = *((__int16 *)v11 + 1);
  if (v13 == 2)
  {
    v15 = v9 - v12;
    *(_DWORD *)(a1 + 16) = v15;
    if (v15 >= (int)result)
    {
      v19 = v8;
    }
    else
    {
      v16 = *(unsigned __int8 **)a1;
      v17 = *(_DWORD *)(a1 + 8);
      do
      {
        *(_DWORD *)(a1 + 12) = v8 << 8;
        *(_QWORD *)a1 = v16 + 1;
        v18 = *v16;
        v19 = v18 | (v8 << 8);
        *(_DWORD *)(a1 + 8) = v17 - 1;
        *(_DWORD *)(a1 + 12) = v19;
        if (v18 == 255)
        {
          v16 += 2;
          *(_QWORD *)a1 = v16;
          v17 -= 2;
          *(_DWORD *)(a1 + 8) = v17;
        }
        else
        {
          --v17;
          ++v16;
        }
        v15 += 8;
        *(_DWORD *)(a1 + 16) = v15;
        v8 = v18 | (v8 << 8);
      }
      while (v15 < (int)result);
    }
    *(_DWORD *)(a1 + 16) = v15 - result;
    v33 = v19 >> (v15 - result);
    v34 = -1 << result;
    v35 = result - 1;
    result = v33 & ~(-1 << result);
    if (!(result >> v35))
      return (v33 | v34) + 1;
  }
  else if (v13 == 1)
  {
    *(_DWORD *)(a1 + 16) = v9 - v12;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = a1 + 16 * v10 + 40;
    while (1)
    {
      v21 = _decodeReadBit(a1) | (2 * v21);
      v22 *= 2;
      v25 = *(unsigned __int8 *)(v24 + v20);
      if (*(_BYTE *)(v24 + v20))
        break;
LABEL_23:
      ++v20;
    }
    v26 = v23 + v25;
    while (v21 != v22)
    {
      ++v22;
      ++v23;
      if (!--v25)
      {
        v23 = v26;
        goto LABEL_23;
      }
    }
    v27 = a1 + 17 * v10 + v23;
    v28 = *(unsigned __int8 *)(v27 + 72);
    if (*(_BYTE *)(v27 + 72))
    {
      v29 = 0;
      v30 = 0;
      v31 = 1;
      do
      {
        v29 = _decodeReadBit(a1) | (2 * v29);
        if (!v30)
          v31 = v29;
        ++v30;
      }
      while (v28 != v30);
      if (v31)
        v32 = 0;
      else
        v32 = (-1 << v28) + 1;
      return (v32 + v29);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _decodeReadBit(uint64_t a1)
{
  int v1;
  unsigned int v2;
  int v3;
  unsigned __int8 *v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_DWORD *)(a1 + 12);
    v3 = v1 - 1;
  }
  else
  {
    v4 = (unsigned __int8 *)(*(_QWORD *)a1)++;
    v2 = *v4;
    v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v5 - 1;
    *(_DWORD *)(a1 + 12) = v2;
    if (v2 == 255)
    {
      *(_QWORD *)a1 = v4 + 2;
      *(_DWORD *)(a1 + 8) = v5 - 2;
    }
    v3 = 7;
  }
  *(_DWORD *)(a1 + 16) = v3;
  return (v2 >> v3) & 1;
}

uint64_t CMPhotoDNGDecompressLinearRawTile(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t output_buffer_size;
  __int128 v17;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[28];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (a9)
  {
    LOBYTE(v19[0]) = 0;
    v13 = CMPhotoDecompressionSupportedForContainerAndCodec(2, 1786276896, 0, (BOOL *)v19);
    if (!LOBYTE(v19[0]))
      return FigSignalErrorAt();
    v14 = v13;
    if (a6 == 1815491698 || a6 == 1647589490)
    {
      if (CMPhotoIsMatchedJxlDecodeAPI())
      {
        if (!JxlDecoderCreate())
          return 4294950745;
        if (JxlDecoderSubscribeEvents())
        {
          v14 = 4294950739;
          goto LABEL_29;
        }
        if (JxlDecoderSetInput())
          goto LABEL_27;
        if (JxlDecoderProcessInput() != 64)
          goto LABEL_27;
        v47 = 0u;
        memset(v48, 0, sizeof(v48));
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        if (JxlDecoderGetBasicInfo())
          goto LABEL_27;
        if (JxlDecoderProcessInput() != 256)
          goto LABEL_27;
        v31 = 0;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        v25 = 0u;
        if (!JxlDecoderGetColorAsEncodedProfile())
        {
          if (JxlDecoderSetPreferredColorProfile())
            goto LABEL_27;
        }
        v23 = 0uLL;
        v24 = 0;
        if (a6 == 1647589490)
          v15 = 3;
        else
          v15 = 4;
        *(_QWORD *)&v23 = v15 | 0x300000000;
        v24 = 1;
        v36 = a6;
        v32 = a3;
        v33 = a4;
        v34 = a5;
        *(_QWORD *)&v17 = DWORD1(v37);
        *((_QWORD *)&v17 + 1) = DWORD2(v37);
        v35 = v17;
        v20 = 0;
        if (JxlDecoderImageOutBufferSize() || JxlDecoderSetImageOutCallback())
        {
          v14 = 4294950746;
          goto LABEL_29;
        }
        if (JxlDecoderProcessInput() != 4096)
LABEL_27:
          v14 = 4294950743;
LABEL_29:
        JxlDecoderDestroy();
        return v14;
      }
      return FigSignalErrorAt();
    }
    return 4294950746;
  }
  else
  {
    v22 = -1;
    v23 = xmmword_1E53F64E8;
    v24 = 0;
    v20 = a1;
    v21 = a2;
    applejpeg_decode_create();
    output_buffer_size = applejpeg_decode_open_mem();
    if (!(_DWORD)output_buffer_size)
    {
      output_buffer_size = CMPhotoPixelFormatToAppleJPEGFormat(a6, &v22);
      if (!(_DWORD)output_buffer_size)
      {
        output_buffer_size = applejpeg_decode_set_option_outformat();
        if (!(_DWORD)output_buffer_size)
        {
          v34 = 0;
          *(_QWORD *)&v35 = 0;
          v32 = a5;
          v33 = 0;
          applejpeg_decode_set_option_stride();
          v19[2] = 0;
          v19[3] = 0;
          v25 = 0u;
          v26 = 0u;
          *(_QWORD *)&v27 = 0;
          output_buffer_size = applejpeg_decode_get_output_buffer_size();
          if (!(_DWORD)output_buffer_size)
          {
            v19[0] = a3;
            v19[1] = a4;
            v37 = 0u;
            v38 = 0u;
            v39 = 0u;
            v40 = 0u;
            v41 = 0u;
            v42 = 0u;
            v43 = 0u;
            v44 = 0u;
            v45 = 0u;
            *(_QWORD *)&v46 = 0;
            output_buffer_size = applejpeg_decode_image_all();
          }
        }
      }
    }
    v14 = output_buffer_size;
    applejpeg_decode_destroy();
  }
  return v14;
}

void ___compressAllTiles_block_invoke_2(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  CVPixelBufferRef *v4;
  __CVBuffer *v5;
  unint64_t v6;
  uint64_t v7;
  __CVBuffer *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  OSType PixelFormatType;
  unsigned int BytesPerPixelForPixelFormat;
  CVReturn v15;
  CVReturn v16;
  unint64_t v17;
  char *BaseAddressOfPlane;
  int BytesPerRowOfPlane;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  char *v29;
  size_t v30;
  size_t v31;
  unsigned int v32;
  unint64_t v33;
  char *v34;
  size_t v35;
  size_t v36;
  int v37;
  unint64_t v38;
  char *BaseAddress;
  int BytesPerRow;
  char *v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  char *v52;
  size_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  __CVBuffer **v57;
  __CVBuffer *v58;
  uint64_t Mutable;
  uint64_t v60;
  _DWORD *v61;
  void *v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  Class CIImageClass;
  uint64_t v75;
  void *v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  void *v82;
  double v83;
  CGFloat v84;
  double v85;
  void *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  double v92;
  float v93;
  float v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  float v103;
  float v104;
  int v105;
  CVReturn v106;
  uint64_t v107;
  int PixelBufferDataPointers;
  uint64_t v109;
  signed int v110;
  uint64_t v111;
  int v112;
  CGFloat *v113;
  unint64_t v114;
  size_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  CGAffineTransform *v126;
  int v127;
  int v128;
  CFIndex Length;
  uint64_t v130;
  UInt8 *MutableBytePtr;
  uint64_t v132;
  UInt8 *v133;
  uint64_t v134;
  uint64_t v135;
  size_t v136;
  UInt8 *v137;
  uint64_t v138;
  UInt8 *v139;
  uint64_t v140;
  size_t v141;
  UInt8 *v142;
  unsigned int v143;
  char *v144;
  unsigned int v145;
  char *v146;
  unint64_t v147;
  __CVBuffer *v148;
  __CVBuffer *v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  int v153;
  double v154;
  char *v156;
  unint64_t v157;
  double v158;
  uint64_t v159;
  size_t v160;
  unsigned int v161;
  double v162;
  int v163;
  CFDataRef theData;
  const __CFData *theDataa;
  CGAffineTransform v166;
  CGAffineTransform v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  CGAffineTransform v175;
  uint64_t v176;
  _QWORD v177[3];
  _QWORD v178[3];
  uint64_t v179;
  float v180;
  uint64_t v181;
  float v182;
  const __CFString *v183;
  float v184;
  uint64_t v185;
  float v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  CGFloat c;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;

  v2 = a2;
  v3 = a1;
  v193 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 168))
    goto LABEL_46;
  v4 = (CVPixelBufferRef *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  v5 = *v4;
  if (!*v4)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(int *)(*(_QWORD *)(a1 + 48) + 1628), *(int *)(*(_QWORD *)(a1 + 48) + 1632), *(_DWORD *)(a1 + 152), 0, v4);
    if (*(_DWORD *)(v3 + 156))
      return;
    v5 = *(__CVBuffer **)(*(_QWORD *)(v3 + 32) + 8 * v2);
  }
  v6 = *(_QWORD *)(v3 + 88);
  theData = *(CFDataRef *)(v3 + 80);
  v7 = *(_QWORD *)(v3 + 48);
  v8 = *(__CVBuffer **)(v3 + 56);
  v9 = *(int *)(v7 + 1628);
  v10 = *(unsigned int *)(v7 + 1632);
  v11 = *(_QWORD *)(v3 + 64);
  v12 = *(_QWORD *)(v3 + 72);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v8);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
  if (v9 < v6)
    v6 = v9;
  v15 = CVPixelBufferLockBaseAddress(v5, 0);
  if (v15)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = v15;
    return;
  }
  v150 = v11;
  v16 = CVPixelBufferLockBaseAddress(v8, 1uLL);
  if (v16)
  {
    v37 = v16;
    goto LABEL_43;
  }
  if (PixelFormatType == 1111970369 || PixelFormatType == 1815491698)
  {
    v161 = BytesPerPixelForPixelFormat;
    v38 = v9;
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(v5);
    BytesPerRow = CVPixelBufferGetBytesPerRow(v5);
    v41 = (char *)CVPixelBufferGetBaseAddress(v8);
    v42 = CVPixelBufferGetBytesPerRow(v8);
    if ((int)v10 < 1)
      goto LABEL_38;
    v148 = v8;
    v149 = v5;
    v157 = v2;
    v43 = v6;
    v44 = 0;
    v45 = 0;
    v46 = v12;
    v47 = v38;
    v48 = v38 * v161;
    v49 = v42;
    v50 = v161 * v43;
    v51 = v161 * (v47 - v43);
    v52 = &v41[v46 * v42 + v161 * v150];
    while (v45 < (unint64_t)theData)
    {
      memcpy(&BaseAddress[v44], v52, v50);
      if (v51)
      {
        v53 = v44 + v50;
        v54 = v51;
LABEL_35:
        bzero(&BaseAddress[v53], v54);
      }
      ++v45;
      v44 += BytesPerRow;
      v52 += v49;
      if (v10 == v45)
      {
        v37 = 0;
        v2 = v157;
        goto LABEL_41;
      }
    }
    v53 = v44;
    v54 = v48;
    goto LABEL_35;
  }
  if (PixelFormatType != 1751527984)
  {
    v37 = -16558;
    goto LABEL_42;
  }
  v17 = v9;
  v147 = v12;
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v5, 0);
  v156 = (char *)CVPixelBufferGetBaseAddressOfPlane(v5, 1uLL);
  BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v5, 0);
  v153 = CVPixelBufferGetBytesPerRowOfPlane(v5, 0);
  v146 = (char *)CVPixelBufferGetBaseAddressOfPlane(v8, 0);
  v20 = (char *)CVPixelBufferGetBaseAddressOfPlane(v8, 1uLL);
  v145 = CVPixelBufferGetBytesPerRowOfPlane(v8, 0);
  v21 = CVPixelBufferGetBytesPerRowOfPlane(v8, 1uLL);
  if ((int)v10 < 1)
  {
LABEL_38:
    v37 = 0;
    goto LABEL_42;
  }
  v143 = v21;
  v144 = v20;
  v148 = v8;
  v149 = v5;
  v22 = 0;
  v23 = v6;
  v24 = 0;
  v160 = v17 * BytesPerPixelForPixelFormat;
  v25 = BytesPerPixelForPixelFormat;
  v26 = BytesPerPixelForPixelFormat * v150;
  v27 = BytesPerPixelForPixelFormat * v23;
  v28 = v25 * (v17 - v23);
  v151 = v26;
  v29 = &v146[v26 + v147 * v145];
  do
  {
    if (v24 >= (unint64_t)theData)
    {
      v30 = v22;
      v31 = v160;
    }
    else
    {
      memcpy(&BaseAddressOfPlane[v22], v29, v27);
      if (!v28)
        goto LABEL_19;
      v30 = v22 + v27;
      v31 = v28;
    }
    bzero(&BaseAddressOfPlane[v30], v31);
LABEL_19:
    ++v24;
    v22 += BytesPerRowOfPlane;
    v29 += v145;
  }
  while (v10 != v24);
  if ((int)v10 >= 2)
  {
    v32 = 0;
    v33 = 0;
    v8 = v148;
    v34 = &v144[v151 + (v147 >> 1) * v143];
    while ((unint64_t)theData >> 1 > v33)
    {
      memcpy(&v156[v32], v34, v27);
      if (v28)
      {
        v35 = v32 + v27;
        v36 = v28;
LABEL_26:
        bzero(&v156[v35], v36);
      }
      ++v33;
      v32 += v153;
      v34 += v143;
      if (v10 >> 1 == v33)
      {
        v37 = 0;
        v5 = v149;
        goto LABEL_42;
      }
    }
    v35 = v32;
    v36 = v160;
    goto LABEL_26;
  }
  v37 = 0;
LABEL_41:
  v8 = v148;
  v5 = v149;
LABEL_42:
  CVPixelBufferUnlockBaseAddress(v8, 0);
LABEL_43:
  v3 = a1;
  CVPixelBufferUnlockBaseAddress(v5, 0);
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = v37;
  if (v37)
    return;
  if (*(_BYTE *)(a1 + 168))
  {
    v55 = 0;
    v56 = 0;
    v57 = (__CVBuffer **)(*(_QWORD *)(a1 + 32) + 8 * v2);
    goto LABEL_47;
  }
LABEL_46:
  v57 = (__CVBuffer **)(v3 + 56);
  v56 = *(_QWORD *)(v3 + 64);
  v55 = *(_QWORD *)(v3 + 72);
LABEL_47:
  v58 = *v57;
  if (*(int *)(v3 + 160) < 2)
  {
    Mutable = *(_QWORD *)(v3 + 96);
  }
  else
  {
    Mutable = (uint64_t)CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    **(_QWORD **)(v3 + 40) = Mutable;
    v60 = *(_QWORD *)(v3 + 40);
    if (!*(_QWORD *)v60)
    {
      *(_DWORD *)(v60 + 8) = -16551;
      return;
    }
  }
  theDataa = (const __CFData *)Mutable;
  v61 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!*(_BYTE *)(v3 + 169))
  {
LABEL_84:
    v106 = CVPixelBufferLockBaseAddress(v58, 1uLL);
    v107 = *(_QWORD *)(v3 + 40);
    *(_DWORD *)(v107 + 8) = v106;
    if (v106)
      return;
    PixelBufferDataPointers = CMPhotoGetPixelBufferDataPointers(v58, v56, v55, (_DWORD *)(v107 + 12), v107 + 16, v107 + 32, v107 + 48);
    *(_DWORD *)(*(_QWORD *)(v3 + 40) + 8) = PixelBufferDataPointers;
    if (PixelBufferDataPointers)
      goto LABEL_141;
    if (*v61 == 1)
      kdebug_trace();
    v109 = *(_QWORD *)(v3 + 48);
    v110 = CVPixelBufferGetPixelFormatType(v58);
    v111 = *(_QWORD *)(v3 + 40);
    v112 = *(_DWORD *)(v111 + 12);
    v113 = (CGFloat *)(v111 + 32);
    v115 = *(_QWORD *)(v3 + 136);
    v114 = *(_QWORD *)(v3 + 144);
    v116 = *(_DWORD *)(v109 + 8);
    if ((v116 - 2) >= 2)
    {
      if (v116 != 5)
      {
        if (v116 != 1)
        {
          v117 = -16552;
          goto LABEL_139;
        }
        if (v112 == 1 && *(_QWORD *)(v111 + 16) && *(_QWORD *)v113)
        {
          v117 = -16550;
          if (v110 > 1647589489)
          {
            if (v110 == 1647589490)
            {
              v119 = 0;
              v163 = 1;
              v159 = 2;
              v120 = 3;
            }
            else
            {
              if (v110 != 1815491698)
                goto LABEL_139;
              v119 = 0;
              v163 = 1;
              v159 = 2;
              v120 = 4;
            }
            v118 = 2;
            goto LABEL_124;
          }
          if (v110 == 24)
          {
            v163 = 0;
            v119 = 0;
            v118 = 2;
            v159 = 1;
            v120 = 3;
            goto LABEL_124;
          }
          if (v110 == 1111970369)
          {
            v163 = 0;
            v118 = 0;
            v119 = 2;
            v159 = 1;
            v120 = 4;
LABEL_124:
            Length = CFDataGetLength(theDataa);
            CFDataIncreaseLength(theDataa, 3 * v115 * v114 * v159);
            v130 = *(_QWORD *)(v111 + 16);
            MutableBytePtr = CFDataGetMutableBytePtr(theDataa);
            if (v163)
            {
              if (v114)
              {
                v132 = 0;
                v133 = &MutableBytePtr[Length];
                v134 = *(_QWORD *)v113;
                do
                {
                  v135 = v130;
                  v136 = v115;
                  if (v115)
                  {
                    do
                    {
                      *(_WORD *)v133 = bswap32(*(unsigned __int16 *)(v135 + 2 * v119)) >> 16;
                      *((_WORD *)v133 + 1) = bswap32(*(unsigned __int16 *)(v135 + 2)) >> 16;
                      v137 = v133 + 6;
                      *((_WORD *)v133 + 2) = bswap32(*(unsigned __int16 *)(v135 + 2 * v118)) >> 16;
                      v135 += 2 * v120;
                      v133 += 6;
                      --v136;
                    }
                    while (v136);
                    v133 = v137;
                  }
                  v130 += v134;
                  ++v132;
                }
                while (v132 != v114);
              }
            }
            else if (v114)
            {
              v138 = 0;
              v139 = &MutableBytePtr[Length];
              do
              {
                v140 = v130;
                v141 = v115;
                if (v115)
                {
                  do
                  {
                    *v139 = *(_BYTE *)(v140 + v119);
                    v139[1] = *(_BYTE *)(v140 + 1);
                    v142 = v139 + 3;
                    v139[2] = *(_BYTE *)(v140 + v118);
                    v140 += v120;
                    v139 += 3;
                    --v141;
                  }
                  while (v141);
                  v139 = v142;
                }
                v130 += *(_QWORD *)v113;
                ++v138;
              }
              while (v138 != v114);
            }
            v117 = 0;
            v3 = a1;
          }
        }
        else
        {
          v117 = -16550;
        }
LABEL_139:
        *(_DWORD *)(*(_QWORD *)(v3 + 40) + 8) = v117;
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
LABEL_141:
        CVPixelBufferUnlockBaseAddress(v58, 1uLL);
        return;
      }
      v121 = CMPhotoDNGJPEGXLCompressData(v115, v114, v110, *(char **)(v111 + 16), *(_QWORD *)(v111 + 32), *(float *)(v109 + 12), *(unsigned int *)(v109 + 16), *(_DWORD *)(v109 + 20), 0, theDataa);
LABEL_108:
      v117 = v121;
      goto LABEL_139;
    }
    LODWORD(v178[0]) = 0;
    v121 = CMPhotoPixelFormatToAppleJPEGFormat(v110, (int *)v178);
    if (v121)
      goto LABEL_108;
    v122 = *(_DWORD *)(v109 + 8);
    v123 = v178[0];
    memset(&v166, 0, 32);
    v191 = xmmword_1E53F64E8;
    v192 = 0;
    v175.a = 0.0;
    *(_QWORD *)&v175.b = _aj_write;
    v175.c = 0.0;
    v175.d = 0.0;
    v175.ty = 0.0;
    v176 = 0;
    *(_QWORD *)&v175.tx = theDataa;
    v174 = 0;
    v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    memset(&v167, 0, sizeof(v167));
    if (v122 != 3 && (v124 = CMPhotoJPEGQualityControllerCopyQTablesForQuality(&v166, *(float *)(v109 + 12))) != 0)
    {
      v117 = v124;
    }
    else
    {
      LODWORD(v167.tx) = v112;
      *(_QWORD *)&v167.ty = __PAIR64__(v114, v115);
      LODWORD(v168) = v123;
      if (v112)
      {
        v125 = v112;
        v126 = &v167;
        do
        {
          *(_QWORD *)&v126[2].d = *(int *)v113;
          v126->a = *(v113 - 2);
          v126 = (CGAffineTransform *)((char *)v126 + 8);
          ++v113;
          --v125;
        }
        while (v125);
      }
      if (applejpeg_encode_create())
      {
        if (v122 == 3)
        {
          v127 = applejpeg_encode_set_option_type_lossless();
          goto LABEL_112;
        }
        v128 = applejpeg_encode_set_option_type_baseline();
        if (!v128)
        {
          v189 = *(_OWORD *)&v166.a;
          c = v166.c;
          v127 = applejpeg_encode_set_option_q_tables();
LABEL_112:
          v3 = a1;
          if (!v127)
          {
            v127 = applejpeg_encode_commit_options_for_file();
            if (!v127)
            {
              *(_QWORD *)&v189 = 0;
              v127 = applejpeg_encode_image_all();
            }
          }
          v117 = v127;
          goto LABEL_116;
        }
      }
      else
      {
        v128 = FigSignalErrorAt();
      }
      v117 = v128;
    }
    v3 = a1;
LABEL_116:
    applejpeg_encode_destroy();
    if (*(_QWORD *)&v166.d)
      free(*(void **)&v166.d);
    goto LABEL_139;
  }
  v62 = *(void **)(*(_QWORD *)(v3 + 104) + 8 * (v2 % *(int *)(v3 + 164)));
  v58 = *(__CVBuffer **)(*(_QWORD *)(v3 + 112) + 8 * v2);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    Mutable = kdebug_trace();
  if (*(_BYTE *)(v3 + 168))
    v63 = (uint64_t *)(*(_QWORD *)(v3 + 32) + 8 * v2);
  else
    v63 = (uint64_t *)(v3 + 56);
  v64 = (_QWORD *)(v3 + 48);
  v65 = *(_QWORD *)(v3 + 48);
  if (v62)
    v66 = v58 == 0;
  else
    v66 = 1;
  if (v66)
  {
    v105 = -16557;
  }
  else
  {
    v67 = v3;
    v68 = *v63;
    v69 = v64[9];
    v70 = v64[10];
    v71 = v64[11];
    v72 = v64[12];
    v73 = (void *)MEMORY[0x1A85D1038](Mutable);
    CIImageClass = getCIImageClass();
    v187 = getkCIImageColorSpace();
    v188 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v75 = -[objc_class imageWithCVPixelBuffer:options:](CIImageClass, "imageWithCVPixelBuffer:options:", v68, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v188, &v187, 1));
    if (v75)
    {
      v76 = (void *)v75;
      v77 = (double)v69;
      v78 = (double)v70;
      v79 = (double)v71;
      v80 = (double)v72;
      v194.origin.x = v77;
      v194.origin.y = v78;
      v194.size.width = v79;
      v194.size.height = v80;
      if (!CGRectIsNull(v194))
      {
        CGAffineTransformMakeScale(&v175, 1.0, -1.0);
        objc_msgSend(v76, "extent");
        CGAffineTransformTranslate(&v167, &v175, 0.0, -v81);
        v195.origin.x = v77;
        v195.origin.y = v78;
        v195.size.width = v79;
        v195.size.height = v80;
        v196 = CGRectApplyAffineTransform(v195, &v167);
        v82 = (void *)objc_msgSend(v76, "imageByCroppingToRect:", v196.origin.x, v196.origin.y, v196.size.width, v196.size.height);
        objc_msgSend(v82, "extent");
        v84 = -v83;
        objc_msgSend(v82, "extent");
        CGAffineTransformMakeTranslation(&v166, v84, -v85);
        v76 = (void *)objc_msgSend(v82, "imageByApplyingTransform:", &v166);
      }
      *(_QWORD *)&v189 = CFSTR("inputRVector");
      *(_QWORD *)&v191 = -[objc_class vectorWithX:Y:Z:W:](getCIVectorClass(), "vectorWithX:Y:Z:W:", *(float *)(v65 + 2076), 0.0, 0.0, 0.0);
      *((_QWORD *)&v189 + 1) = CFSTR("inputGVector");
      *((_QWORD *)&v191 + 1) = -[objc_class vectorWithX:Y:Z:W:](getCIVectorClass(), "vectorWithX:Y:Z:W:", 0.0, *(float *)(v65 + 2080), 0.0, 0.0);
      c = COERCE_DOUBLE(CFSTR("inputBVector"));
      v192 = -[objc_class vectorWithX:Y:Z:W:](getCIVectorClass(), "vectorWithX:Y:Z:W:", 0.0, 0.0, *(float *)(v65 + 2084), 0.0);
      v86 = (void *)objc_msgSend(v76, "imageByApplyingFilter:withInputParameters:", CFSTR("CIColorMatrix"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v191, &v189, 3));
      if (*(_BYTE *)(v65 + 24) && (*(_DWORD *)(v65 + 8) == 2 || *(_QWORD *)(v65 + 2048)))
      {
        v186 = 0.0;
        v185 = 0;
        v184 = 0.0;
        v183 = 0;
        v182 = 0.0;
        v181 = 0;
        v180 = 0.0;
        v179 = 0;
        if (*(int *)(v65 + 1876) < 1)
        {
          v158 = 0.0;
          v162 = 0.0;
          v152 = 0.0;
          v154 = 0.0;
          v102 = 0.0;
          v101 = 0.0;
          v100 = 0.0;
          v99 = 0.0;
          v98 = 0.0;
          v97 = 0.0;
          v96 = 0.0;
          v95 = 0.0;
        }
        else
        {
          v88 = 0;
          v89 = 1672;
          do
          {
            v90 = *(double *)(v65 + v89);
            *((float *)&v185 + v88) = v90;
            v91 = *(double *)(v65 + v89 + 8);
            *((float *)&v183 + v88) = v91;
            v92 = *(double *)(v65 + v89 + 24);
            v93 = *(double *)(v65 + v89 + 16);
            *((float *)&v181 + v88) = v93;
            v94 = v92;
            *((float *)&v179 + v88) = v94;
            *(_DWORD *)(v65 + 4 * v88++ + 1864) = 4;
            v89 += 64;
          }
          while (v88 < *(int *)(v65 + 1876));
          v95 = *(float *)&v185;
          v96 = *(float *)&v183;
          v97 = *(float *)&v181;
          v98 = *(float *)&v179;
          v99 = *((float *)&v185 + 1);
          v100 = *((float *)&v183 + 1);
          v101 = *((float *)&v181 + 1);
          v102 = *((float *)&v179 + 1);
          v152 = v186;
          v154 = v184;
          v158 = v182;
          v162 = v180;
        }
        v177[0] = CFSTR("inputRedCoefficients");
        v178[0] = -[objc_class vectorWithX:Y:Z:W:](getCIVectorClass(), "vectorWithX:Y:Z:W:", v95, v96, v97, v98);
        v177[1] = CFSTR("inputGreenCoefficients");
        v178[1] = -[objc_class vectorWithX:Y:Z:W:](getCIVectorClass(), "vectorWithX:Y:Z:W:", v99, v100, v101, v102);
        v177[2] = CFSTR("inputBlueCoefficients");
        v178[2] = -[objc_class vectorWithX:Y:Z:W:](getCIVectorClass(), "vectorWithX:Y:Z:W:", v152, v154, v158, v162);
        v86 = (void *)objc_msgSend(v86, "imageByApplyingFilter:withInputParameters:", CFSTR("CIColorPolynomialInverse"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v178, v177, 3));
      }
      v61 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (*(_DWORD *)(v65 + 8) == 5)
      {
        v103 = (float)(*(_DWORD *)(v65 + 156) - *(_DWORD *)(v65 + 136));
        if (!*(_BYTE *)(v65 + 24))
        {
          v104 = *(float *)(v65 + 32);
          if (v104 != 0.0)
          {
            v87 = log2(v104) + v103;
            v103 = v87;
          }
        }
        v183 = CFSTR("inputEV");
        *(float *)&v87 = v103;
        v185 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v87);
        v86 = (void *)objc_msgSend(v86, "imageByApplyingFilter:withInputParameters:", CFSTR("CIExposureAdjust"), objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v185, &v183, 1));
      }
      objc_msgSend(v86, "extent");
      objc_msgSend(v62, "render:toCVPixelBuffer:bounds:colorSpace:", v86, v58, 0);
      v105 = 0;
    }
    else
    {
      v105 = -16552;
      v61 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    }
    objc_autoreleasePoolPop(v73);
    v3 = v67;
  }
  *(_DWORD *)(*(_QWORD *)(v3 + 40) + 8) = v105;
  if (*v61 == 1)
  {
    kdebug_trace();
    v105 = *(_DWORD *)(*(_QWORD *)(v3 + 40) + 8);
  }
  if (!v105)
  {
    v55 = 0;
    v56 = 0;
    goto LABEL_84;
  }
}

UInt8 *___compressAllTiles_block_invoke_3(UInt8 *result)
{
  UInt8 *v1;
  unsigned int Length;
  __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex v5;
  const void *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (!*(_DWORD *)(*((_QWORD *)result + 4) + 8))
  {
    v1 = result;
    Length = CFDataGetLength(*((CFDataRef *)result + 5));
    v3 = (__CFData *)*((_QWORD *)v1 + 5);
    BytePtr = CFDataGetBytePtr(**((CFDataRef **)v1 + 4));
    v5 = CFDataGetLength(**((CFDataRef **)v1 + 4));
    CFDataAppendBytes(v3, BytePtr, v5);
    v6 = (const void *)**((_QWORD **)v1 + 4);
    if (v6)
    {
      CFRelease(v6);
      **((_QWORD **)v1 + 4) = 0;
    }
    v7 = CFDataGetLength(*((CFDataRef *)v1 + 5));
    result = CFDataGetMutableBytePtr(*((CFMutableDataRef *)v1 + 5));
    v8 = bswap32(Length);
    if (v1[60])
      v9 = v8;
    else
      v9 = Length;
    *(_DWORD *)&result[4 * *((int *)v1 + 13) + *((int *)v1 + 12)] = v9;
    v10 = v7 - Length;
    v11 = bswap32(v7 - Length);
    if (v1[60])
      v10 = v11;
    *(_DWORD *)&result[4 * *((int *)v1 + 13) + *((int *)v1 + 14)] = v10;
  }
  return result;
}

Class initCIContext()
{
  Class result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  result = objc_getClass("CIContext");
  classCIContext = (uint64_t)result;
  getCIContextClass = CIContextFunction;
  return result;
}

uint64_t CIContextFunction()
{
  return classCIContext;
}

uint64_t initValkCIContextWorkingColorSpace()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIContextWorkingColorSpace");
  if (v0)
  {
    result = *v0;
    constantValkCIContextWorkingColorSpace = result;
  }
  else
  {
    result = constantValkCIContextWorkingColorSpace;
  }
  getkCIContextWorkingColorSpace = kCIContextWorkingColorSpaceFunction;
  return result;
}

uint64_t kCIContextWorkingColorSpaceFunction()
{
  return constantValkCIContextWorkingColorSpace;
}

uint64_t initValkCIContextCacheIntermediates()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIContextCacheIntermediates");
  if (v0)
  {
    result = *v0;
    constantValkCIContextCacheIntermediates = result;
  }
  else
  {
    result = constantValkCIContextCacheIntermediates;
  }
  getkCIContextCacheIntermediates = kCIContextCacheIntermediatesFunction;
  return result;
}

uint64_t kCIContextCacheIntermediatesFunction()
{
  return constantValkCIContextCacheIntermediates;
}

uint64_t initValkCIContextName()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIContextName");
  if (v0)
  {
    result = *v0;
    constantValkCIContextName = result;
  }
  else
  {
    result = constantValkCIContextName;
  }
  getkCIContextName = kCIContextNameFunction;
  return result;
}

uint64_t kCIContextNameFunction()
{
  return constantValkCIContextName;
}

Class initCIImage()
{
  Class result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  result = objc_getClass("CIImage");
  classCIImage = (uint64_t)result;
  getCIImageClass = CIImageFunction;
  return result;
}

uint64_t CIImageFunction()
{
  return classCIImage;
}

uint64_t initValkCIImageColorSpace()
{
  uint64_t *v0;
  uint64_t result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  v0 = (uint64_t *)dlsym((void *)CoreImageLibrary_sLib, "kCIImageColorSpace");
  if (v0)
  {
    result = *v0;
    constantValkCIImageColorSpace = result;
  }
  else
  {
    result = constantValkCIImageColorSpace;
  }
  getkCIImageColorSpace = kCIImageColorSpaceFunction;
  return result;
}

uint64_t kCIImageColorSpaceFunction()
{
  return constantValkCIImageColorSpace;
}

Class initCIVector()
{
  Class result;

  if (CoreImageLibrary_sOnce != -1)
    dispatch_once(&CoreImageLibrary_sOnce, &__block_literal_global_6);
  result = objc_getClass("CIVector");
  classCIVector = (uint64_t)result;
  getCIVectorClass = CIVectorFunction;
  return result;
}

uint64_t CIVectorFunction()
{
  return classCIVector;
}

void *_aj_malloc(size_t a1)
{
  return malloc_type_malloc(a1, 0xDA20D63uLL);
}

uint64_t _aj_write(UInt8 *bytes, int a2, CFMutableDataRef theData)
{
  CFDataAppendBytes(theData, bytes, a2);
  return 0;
}

uint64_t _encodeWriteSymbol(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v2 = *(_DWORD *)(result + 32) - a2;
  *(_DWORD *)(result + 32) = v2;
  v3 = *(_QWORD *)(result + 24);
  if (v2 < 0)
  {
    v5 = a2 >> 8;
    v6 = v3 + (v5 >> -(char)v2);
    *(_QWORD *)(result + 24) = v6;
    v6 >>= 56;
    v7 = *(_QWORD *)(result + 56);
    v8 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v8 + 1;
    *(_BYTE *)(v7 + v8) = v6;
    if (v6 == 255)
    {
      v9 = *(_QWORD *)(result + 56);
      v10 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v10 + 1;
      *(_BYTE *)(v9 + v10) = 0;
    }
    v11 = *(_QWORD *)(result + 24);
    v12 = *(_QWORD *)(result + 56);
    v13 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v13 + 1;
    *(_BYTE *)(v12 + v13) = BYTE6(v11);
    if ((~v11 & 0xFF000000000000) == 0)
    {
      v14 = *(_QWORD *)(result + 56);
      v15 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v15 + 1;
      *(_BYTE *)(v14 + v15) = 0;
    }
    v16 = *(_QWORD *)(result + 24);
    v17 = *(_QWORD *)(result + 56);
    v18 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v18 + 1;
    *(_BYTE *)(v17 + v18) = BYTE5(v16);
    if ((~v16 & 0xFF0000000000) == 0)
    {
      v19 = *(_QWORD *)(result + 56);
      v20 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v20 + 1;
      *(_BYTE *)(v19 + v20) = 0;
    }
    v21 = *(_QWORD *)(result + 24);
    v22 = *(_QWORD *)(result + 56);
    v23 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v23 + 1;
    *(_BYTE *)(v22 + v23) = BYTE4(v21);
    if ((~v21 & 0xFF00000000) == 0)
    {
      v24 = *(_QWORD *)(result + 56);
      v25 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v25 + 1;
      *(_BYTE *)(v24 + v25) = 0;
    }
    v26 = ~*(_DWORD *)(result + 24);
    v27 = *(_QWORD *)(result + 24) >> 24;
    v28 = *(_QWORD *)(result + 56);
    v29 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v29 + 1;
    *(_BYTE *)(v28 + v29) = v27;
    if ((v26 & 0xFF000000) == 0)
    {
      v30 = *(_QWORD *)(result + 56);
      v31 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v31 + 1;
      *(_BYTE *)(v30 + v31) = 0;
    }
    v32 = ~*(_DWORD *)(result + 24);
    v33 = *(_QWORD *)(result + 24) >> 16;
    v34 = *(_QWORD *)(result + 56);
    v35 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v35 + 1;
    *(_BYTE *)(v34 + v35) = v33;
    if ((*(_QWORD *)&v32 & 0xFF0000) == 0)
    {
      v36 = *(_QWORD *)(result + 56);
      v37 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v37 + 1;
      *(_BYTE *)(v36 + v37) = 0;
    }
    v38 = ~*(_DWORD *)(result + 24);
    v39 = *(_QWORD *)(result + 24) >> 8;
    v40 = *(_QWORD *)(result + 56);
    v41 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v41 + 1;
    *(_BYTE *)(v40 + v41) = v39;
    if ((v38 & 0xFF00) == 0)
    {
      v42 = *(_QWORD *)(result + 56);
      v43 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v43 + 1;
      *(_BYTE *)(v42 + v43) = 0;
    }
    v44 = *(_QWORD *)(result + 24);
    v45 = ~*(_DWORD *)(result + 24);
    v46 = *(_QWORD *)(result + 56);
    v47 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v47 + 1;
    *(_BYTE *)(v46 + v47) = v44;
    if (!(_BYTE)v45)
    {
      v48 = *(_QWORD *)(result + 56);
      v49 = *(int *)(result + 68);
      *(_DWORD *)(result + 68) = v49 + 1;
      *(_BYTE *)(v48 + v49) = 0;
    }
    v50 = *(_DWORD *)(result + 32);
    *(_DWORD *)(result + 32) = v50 + 64;
    v4 = v5 << v50;
  }
  else
  {
    v4 = v3 + ((unint64_t)(a2 >> 8) << v2);
  }
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t _encodeWriteHuffTable(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v2 = 0;
  v3 = *(_QWORD *)(result + 56);
  v4 = *(int *)(result + 68);
  *(_DWORD *)(result + 68) = v4 + 1;
  *(_BYTE *)(v3 + v4) = -1;
  v5 = *(_QWORD *)(result + 56);
  v6 = *(int *)(result + 68);
  *(_DWORD *)(result + 68) = v6 + 1;
  *(_BYTE *)(v5 + v6) = -60;
  v7 = *(_QWORD *)(result + 56);
  v8 = *(int *)(result + 68);
  *(_DWORD *)(result + 68) = v8 + 1;
  *(_BYTE *)(v7 + v8) = 0;
  v9 = *(_QWORD *)(result + 56);
  v10 = *(int *)(result + 68);
  *(_DWORD *)(result + 68) = v10 + 1;
  *(_BYTE *)(v9 + v10) = 32;
  v11 = *(int *)(result + 68);
  *(_DWORD *)(result + 68) = v11 + 1;
  *(_BYTE *)(*(_QWORD *)(result + 56) + v11) = a2;
  do
  {
    v12 = g_huff_n[v2];
    v13 = *(_QWORD *)(result + 56);
    v14 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v14 + 1;
    *(_BYTE *)(v13 + v14) = v12;
    ++v2;
  }
  while (v2 != 16);
  for (i = 0; i != 13; ++i)
  {
    v16 = g_huff_v[i];
    v17 = *(_QWORD *)(result + 56);
    v18 = *(int *)(result + 68);
    *(_DWORD *)(result + 68) = v18 + 1;
    *(_BYTE *)(v17 + v18) = v16;
  }
  return result;
}

uint64_t _decodeReadHuffTable(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (*(_DWORD *)(result + 16) == 8)
  {
    *(_DWORD *)(result + 16) = 0;
    v1 = *(_QWORD *)result;
    v2 = *(_DWORD *)(result + 8);
  }
  else
  {
    v1 = *(_QWORD *)result + 1;
    v2 = *(_DWORD *)(result + 8) - 1;
  }
  v3 = 0;
  LODWORD(v4) = 0;
  *(_DWORD *)(result + 8) = v2 - 1;
  *(_QWORD *)result = v1 + 2;
  v5 = *(unsigned __int8 *)(v1 + 1);
  *(_DWORD *)(result + 8) = v2 - 2;
  v6 = v2 - 3;
  do
  {
    *(_QWORD *)result = v1 + v3 + 3;
    v7 = *(unsigned __int8 *)(v1 + v3 + 2);
    *(_DWORD *)(result + 8) = v6;
    *(_BYTE *)(result + 16 * v5 + 40 + v3) = v7;
    v4 = (v4 + v7);
    ++v3;
    --v6;
  }
  while (v3 != 16);
  if ((_DWORD)v4)
  {
    v8 = v1 + 19;
    v9 = 17 * v5 + 72;
    do
    {
      *(_QWORD *)result = v8;
      v10 = *(_BYTE *)(v8 - 1);
      *(_DWORD *)(result + 8) = v6;
      *(_BYTE *)(result + v9) = v10;
      --v6;
      ++v8;
      ++v9;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *_jxlOutputCallback_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src)
{
  int v5;
  uint64_t v6;

  if (!a1)
    return (void *)FigSignalErrorAt();
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 == 1647589490)
  {
    v6 = 3;
    return memcpy((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) * a3 + 2 * a2 * v6), __src, 2 * a4 * v6);
  }
  if (v5 != 1815491698)
    return (void *)FigSignalErrorAt();
  v6 = 4;
  return memcpy((void *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 16) * a3 + 2 * a2 * v6), __src, 2 * a4 * v6);
}

uint64_t CMPhotoDecompressionContainerJFIFTranscode(_QWORD *a1, const __CFDictionary *a2, const __CFNumber *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 4294950306;
  v9 = CMPhotoDecompressionContainerCopyTranslatedOptionsForAlternates(a1, a3, a2, 1, (__CFDictionary **)&cf);
  if ((_DWORD)v9)
    goto LABEL_7;
  v13 = -1;
  v9 = CMPhotoDecompressionContainerExternalToInternalIndex(a1, a3, -1, (const __CFDictionary *)cf, (const __CFNumber **)&v13, 0, 0);
  if ((_DWORD)v9)
    goto LABEL_7;
  if (a4 < 0)
  {
    v11 = 4294950306;
  }
  else
  {
    v10 = *(uint64_t (**)(_QWORD *, CFTypeRef, uint64_t, uint64_t, uint64_t))(a1[4] + 232);
    if (v10)
    {
      v9 = v10(a1, cf, v13, a4, a5);
LABEL_7:
      v11 = v9;
      goto LABEL_9;
    }
    v11 = 4294950302;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t CMPhotoDecompressionContainerFlexibleTranscode(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v11;
  uint64_t ImageCountWithOptions;
  __CFArray *v13;
  const __CFNumber *v14;
  uint64_t AlternatesCountForIndex;
  CFTypeRef v16;
  uint64_t v17;
  __CFDictionary *v18;
  __CFDictionary *v19;
  uint64_t v20;
  __CFArray *v21;
  uint64_t TranscodePayload;
  uint64_t v23;
  uint64_t v24;
  __CFArray *v25;
  __CFArray *DeepCopy;
  uint64_t v27;
  CFTypeID v28;
  const __CFAllocator *v29;
  int v30;
  CFMutableDictionaryRef v31;
  const __CFDictionary *v32;
  int v33;
  int v34;
  int v35;
  const void *v36;
  CFTypeID v37;
  const void *v38;
  int v39;
  int *v40;
  uint64_t *v42;
  signed int v43;
  __CFDictionary *v44;
  _QWORD *v45;
  uint64_t v46;
  CFIndex v47;
  CFTypeRef cf[6];
  void *value[7];
  signed int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;

  if (!a1)
    return 4294950306;
  if (a3 > 1)
    return 4294950302;
  v6 = a5;
  if (!a5)
    return 4294950306;
  cf[0] = 0;
  v9 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v11 = Mutable;
  v46 = a4;
  v43 = a3;
  v52 = 0;
  ImageCountWithOptions = CMPhotoDecompressionContainerGetImageCountWithOptions((uint64_t)a1, 0, &v52);
  if ((_DWORD)ImageCountWithOptions)
  {
    v24 = ImageCountWithOptions;
    v13 = 0;
    goto LABEL_80;
  }
  v13 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  if (!v13)
    goto LABEL_83;
  v44 = v11;
  v45 = v6;
  if (v52 < 1)
  {
LABEL_42:
    v11 = v44;
    if (CMPhotoDecompressionContainerCopyGroupsDescriptionArray((uint64_t)a1, (uint64_t)cf))
    {
      v25 = 0;
      v6 = v45;
LABEL_46:
      FigCFDictionarySetValue();
      v24 = 0;
      goto LABEL_47;
    }
    DeepCopy = CMPhotoArrayCreateDeepCopy(v9, (const __CFArray *)cf[0]);
    v6 = v45;
    if (DeepCopy)
    {
      v25 = DeepCopy;
      FigCFArrayApplyBlock();
      FigCFDictionarySetValue();
      goto LABEL_46;
    }
LABEL_83:
    v24 = 4294950305;
    goto LABEL_80;
  }
  v14 = 0;
  while (1)
  {
    v51 = 0;
    v47 = 0;
    AlternatesCountForIndex = CMPhotoDecompressionContainerGetAlternatesCountForIndex(a1, v14, 0, &v51, &v47);
    if ((_DWORD)AlternatesCountForIndex)
    {
LABEL_78:
      v24 = AlternatesCountForIndex;
      goto LABEL_79;
    }
    v16 = (CFTypeRef)v51;
    if (v51 >= 2)
      break;
    value[0] = 0;
    AlternatesCountForIndex = _createTranscodePayload(v9, 1, (uint64_t)v14, -1, -1, (__CFDictionary **)value);
    if ((_DWORD)AlternatesCountForIndex)
      goto LABEL_78;
    CFArrayAppendValue(v13, value[0]);
    if (value[0])
      CFRelease(value[0]);
    AlternatesCountForIndex = _populateTranscodeDescriptionForMainImage(a1, v14, -1);
    if ((_DWORD)AlternatesCountForIndex)
      goto LABEL_78;
LABEL_35:
    v14 = (const __CFNumber *)((char *)v14 + 1);
    if ((uint64_t)v14 >= v52)
      goto LABEL_42;
  }
  v17 = v47;
  v18 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v18)
  {
    v19 = v18;
    v20 = CMPhotoCFDictionarySetInt(v18, CFSTR("EntryType"), 3);
    if ((_DWORD)v20)
    {
      v24 = v20;
      v21 = 0;
    }
    else
    {
      v21 = CFArrayCreateMutable(v9, (CFIndex)v16, MEMORY[0x1E0C9B378]);
      if (v21)
      {
        value[0] = 0;
        TranscodePayload = _createTranscodePayload(v9, 1, (uint64_t)v14, v17, -1, (__CFDictionary **)value);
        if (!(_DWORD)TranscodePayload)
        {
          CFArrayAppendValue(v21, value[0]);
          if (value[0])
            CFRelease(value[0]);
          TranscodePayload = _populateTranscodeDescriptionForMainImage(a1, v14, v17);
          if (!(_DWORD)TranscodePayload)
          {
            v23 = 0;
            while (1)
            {
              if (v17 != v23)
              {
                value[0] = 0;
                TranscodePayload = _createTranscodePayload(v9, 1, (uint64_t)v14, v23, -1, (__CFDictionary **)value);
                if ((_DWORD)TranscodePayload)
                  break;
                CFArrayAppendValue(v21, value[0]);
                if (value[0])
                  CFRelease(value[0]);
                TranscodePayload = _populateTranscodeDescriptionForMainImage(a1, v14, v23);
                if ((_DWORD)TranscodePayload)
                  break;
              }
              if (v16 == (CFTypeRef)++v23)
              {
                CFDictionarySetValue(v19, CFSTR("Payload"), v21);
                v24 = 0;
                goto LABEL_31;
              }
            }
          }
        }
        v24 = TranscodePayload;
      }
      else
      {
        v24 = 4294950305;
      }
    }
    CFRelease(v19);
    v19 = 0;
    if (v21)
LABEL_31:
      CFRelease(v21);
    if ((_DWORD)v24)
      goto LABEL_79;
    CFArrayAppendValue(v13, v19);
    if (v19)
      CFRelease(v19);
    goto LABEL_35;
  }
  v24 = 4294950305;
LABEL_79:
  v11 = v44;
  v6 = v45;
LABEL_80:
  CFRelease(v11);
  v11 = 0;
  v25 = 0;
  if (v13)
LABEL_47:
    CFRelease(v13);
  if (cf[0])
    CFRelease(cf[0]);
  if (v25)
    CFRelease(v25);
  if ((_DWORD)v24)
    goto LABEL_75;
  if (v46)
  {
    v27 = (*(uint64_t (**)(void))(v46 + 16))();
    if ((_DWORD)v27)
    {
      v24 = v27;
      if (v11)
        goto LABEL_76;
      return v24;
    }
  }
  v52 = 0;
  v53 = &v52;
  v54 = 0x2000000000;
  v55 = 0;
  v51 = 0;
  if (!v11)
  {
    v32 = 0;
    v42 = &v52;
LABEL_92:
    v40 = (int *)(v42 + 3);
    v39 = -16990;
LABEL_68:
    *v40 = v39;
    goto LABEL_69;
  }
  v28 = CFGetTypeID(v11);
  if (v28 != CFDictionaryGetTypeID())
  {
    v32 = 0;
LABEL_91:
    v42 = v53;
    goto LABEL_92;
  }
  v29 = CFGetAllocator(a1);
  v30 = CMPhotoCompressionSessionCreate(v29, 0, &v51);
  *((_DWORD *)v53 + 6) = v30;
  if (v30)
  {
    v32 = 0;
    goto LABEL_69;
  }
  v31 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v32 = v31;
  if (!v31)
  {
    v40 = (int *)(v53 + 3);
    v39 = -16991;
    goto LABEL_68;
  }
  v33 = CMPhotoCFDictionarySetSize(v31, CFSTR("ContainerFormat"), v43);
  *((_DWORD *)v53 + 6) = v33;
  if (v33)
    goto LABEL_69;
  v34 = CMPhotoCFDictionarySetSize(v32, CFSTR("BackingType"), 1);
  *((_DWORD *)v53 + 6) = v34;
  if (v34)
    goto LABEL_69;
  v35 = CMPhotoCompressionSessionOpenEmptyContainer(v51, v32);
  *((_DWORD *)v53 + 6) = v35;
  if (v35)
    goto LABEL_69;
  v36 = CFDictionaryGetValue(v11, CFSTR("MainImageList"));
  if (!v36)
    goto LABEL_91;
  v37 = CFGetTypeID(v36);
  if (v37 != CFArrayGetTypeID())
    goto LABEL_91;
  v38 = (const void *)MEMORY[0x1E0C809B0];
  value[0] = (void *)MEMORY[0x1E0C809B0];
  value[1] = (void *)0x40000000;
  value[2] = ___writeTranscodeDescriptionToData_block_invoke;
  value[3] = &unk_1E53F66E0;
  value[4] = &v52;
  value[5] = a1;
  value[6] = (void *)v51;
  v50 = v43;
  FigCFArrayApplyBlock();
  if (!*((_DWORD *)v53 + 6))
  {
    if (!CFDictionaryGetValue(v11, CFSTR("GroupsDescriptionList"))
      || (cf[0] = v38,
          cf[1] = (CFTypeRef)0x40000000,
          cf[2] = ___writeTranscodeDescriptionToData_block_invoke_2,
          cf[3] = &unk_1E53F6708,
          cf[4] = &v52,
          cf[5] = (CFTypeRef)v51,
          FigCFArrayApplyBlock(),
          !*((_DWORD *)v53 + 6)))
    {
      v39 = CMPhotoCompressionSessionCloseContainerAndCopyBacking(v51);
      v40 = (int *)(v53 + 3);
      goto LABEL_68;
    }
  }
LABEL_69:
  if (v51)
    CFRelease((CFTypeRef)v51);
  if (v32)
    CFRelease(v32);
  v24 = *((unsigned int *)v53 + 6);
  _Block_object_dispose(&v52, 8);
  if (!(_DWORD)v24)
    *v6 = 0;
LABEL_75:
  if (v11)
LABEL_76:
    CFRelease(v11);
  return v24;
}

uint64_t _createTranscodePayload(const __CFAllocator *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary **a6)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  uint64_t v16;
  uint64_t v17;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v13 = Mutable;
  v14 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v14)
  {
    v17 = 4294950305;
    goto LABEL_14;
  }
  v15 = v14;
  FigCFDictionarySetValue();
  CFRelease(v15);
  v16 = CMPhotoCFDictionarySetInt(v13, CFSTR("EntryType"), 1);
  if ((_DWORD)v16
    || (v16 = CMPhotoCFDictionarySetSize(v15, CFSTR("MainIndex"), a3), (_DWORD)v16)
    || a4 != -1 && (v16 = CMPhotoCFDictionarySetSize(v15, CFSTR("AlternateIndex"), a4), (_DWORD)v16)
    || a5 != -1 && (v16 = CMPhotoCFDictionarySetSize(v15, CFSTR("SubIndex"), a5), (_DWORD)v16))
  {
    v17 = v16;
    goto LABEL_14;
  }
  CMPhotoCFDictionarySetInt(v15, CFSTR("Type"), a2);
  v17 = 0;
  if (!a6)
  {
LABEL_14:
    CFRelease(v13);
    return v17;
  }
  *a6 = v13;
  return v17;
}

uint64_t _populateTranscodeDescriptionForMainImage(_QWORD *a1, const __CFNumber *a2, uint64_t a3)
{
  const __CFAllocator *v6;
  const __CFAllocator *v7;
  const __CFDictionary *Mutable;
  uint64_t TranscodePayloadArray;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef cf;

  v14 = 0;
  cf = 0;
  v6 = CFGetAllocator(a1);
  if (a3 == -1)
  {
    Mutable = 0;
    goto LABEL_6;
  }
  v7 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    TranscodePayloadArray = FigCFDictionarySetCFIndex();
    if ((_DWORD)TranscodePayloadArray)
    {
LABEL_27:
      v11 = TranscodePayloadArray;
      goto LABEL_15;
    }
LABEL_6:
    v10 = 0;
    while (1)
    {
      v13 = 0;
      TranscodePayloadArray = (*(uint64_t (**)(_QWORD *, const __CFNumber *, const __CFDictionary *, uint64_t *))((char *)&off_1E53F6648 + v10))(a1, a2, Mutable, &v13);
      if ((_DWORD)TranscodePayloadArray)
        goto LABEL_27;
      if (v13 >= 1)
      {
        TranscodePayloadArray = _createTranscodePayloadArray(v6, *(_DWORD *)((char *)&off_1E53F6648 + v10 + 16), v13, (uint64_t)a2, a3, (__CFArray **)&cf);
        if ((_DWORD)TranscodePayloadArray)
          goto LABEL_27;
        FigCFDictionarySetValue();
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
      }
      v10 += 24;
      if (v10 == 144)
      {
        if (CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(a1, a2, Mutable, (uint64_t)&v14)|| FigCFDictionaryGetCount() < 1)
        {
          v11 = 0;
          goto LABEL_15;
        }
        TranscodePayloadArray = _createTranscodePayloadArray(v6, 8, 1, (uint64_t)a2, a3, (__CFArray **)&cf);
        if (!(_DWORD)TranscodePayloadArray)
        {
          FigCFDictionarySetValue();
          if (cf)
          {
            CFRelease(cf);
            v11 = 0;
            cf = 0;
          }
          else
          {
            v11 = 0;
          }
          goto LABEL_22;
        }
        goto LABEL_27;
      }
    }
  }
  v11 = 4294950305;
LABEL_15:
  if (cf)
    CFRelease(cf);
LABEL_22:
  if (v14)
    CFRelease(v14);
  if (Mutable)
    CFRelease(Mutable);
  return v11;
}

void ___createTranscodeDescriptionFromContainer_block_invoke(int a1, CFMutableDictionaryRef theDict)
{
  CFDictionaryRemoveValue(theDict, CFSTR("Baseline"));
}

uint64_t _createTranscodePayloadArray(const __CFAllocator *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFArray **a6)
{
  CFMutableArrayRef Mutable;
  __CFArray *v13;
  uint64_t v14;
  uint64_t TranscodePayload;
  uint64_t v16;
  void *value;

  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v13 = Mutable;
  if (a3 >= 1)
  {
    v14 = 0;
    while (1)
    {
      value = 0;
      TranscodePayload = _createTranscodePayload(a1, a2, a4, a5, v14, (__CFDictionary **)&value);
      if ((_DWORD)TranscodePayload)
        break;
      CFArrayAppendValue(v13, value);
      if (value)
        CFRelease(value);
      if (a3 == ++v14)
        goto LABEL_8;
    }
    v16 = TranscodePayload;
    goto LABEL_11;
  }
LABEL_8:
  v16 = 0;
  if (!a6)
  {
LABEL_11:
    CFRelease(v13);
    return v16;
  }
  *a6 = v13;
  return v16;
}

uint64_t ___writeTranscodeDescriptionToData_block_invoke(uint64_t result, CFTypeRef cf)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  CFTypeID v7;
  const __CFArray *Value;
  const __CFArray *v9;
  CFTypeID v10;
  CFIndex Count;
  CFIndex v12;
  uint64_t v13;
  const __CFDictionary *ValueAtIndex;
  uint64_t v15[2];
  int v16;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v3 = result;
    if (cf)
    {
      v4 = *(_QWORD **)(result + 40);
      v5 = *(_QWORD *)(result + 48);
      v6 = *(_DWORD *)(result + 56);
      v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        v16 = 0;
        if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, CFSTR("EntryType"), &v16))
        {
          if (v16 != 3)
          {
            result = _writeMainImageToDestination(v4, v5, v6, (const __CFDictionary *)cf, 0);
LABEL_18:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result;
            return result;
          }
          Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("Payload"));
          if (Value)
          {
            v9 = Value;
            v10 = CFGetTypeID(Value);
            if (v10 == CFArrayGetTypeID())
            {
              Count = CFArrayGetCount(v9);
              if (Count)
              {
                v12 = Count;
                v15[1] = 0;
                if (Count == 1 || (result = CMPhotoCompressionSessionAddGroup(v5, 0, 1634497650), !(_DWORD)result))
                {
                  v13 = 0;
                  while (1)
                  {
                    ValueAtIndex = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
                    v15[0] = 0;
                    result = _writeMainImageToDestination(v4, v5, v6, ValueAtIndex, v15);
                    if ((_DWORD)result)
                      break;
                    if (v12 != 1)
                    {
                      result = CMPhotoCompressionSessionAddImageHandleToGroup(v5);
                      if ((_DWORD)result)
                        break;
                    }
                    if (v12 == ++v13)
                    {
                      result = 0;
                      goto LABEL_18;
                    }
                  }
                }
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
    result = 4294950306;
    goto LABEL_18;
  }
  return result;
}

uint64_t ___writeTranscodeDescriptionToData_block_invoke_2(uint64_t result, CFTypeRef cf)
{
  uint64_t v3;
  uint64_t v4;
  CFTypeID v5;
  const __CFArray *Value;
  const __CFArray *v7;
  CFTypeID v8;
  uint64_t v9;
  _QWORD v10[2];
  int v11;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v3 = result;
    if (cf)
    {
      v4 = *(_QWORD *)(result + 40);
      v5 = CFGetTypeID(cf);
      if (v5 == CFDictionaryGetTypeID())
      {
        v11 = 0;
        CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, CFSTR("GroupType"), &v11);
        if (v11)
        {
          v10[1] = -1;
          result = CMPhotoCompressionSessionAddGroup(v4, 0, v11);
          if ((_DWORD)result)
            goto LABEL_14;
          Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("GroupPictureIndexList"));
          if (Value)
          {
            v7 = Value;
            v8 = CFGetTypeID(Value);
            if (v8 == CFArrayGetTypeID())
            {
              if (CFArrayGetCount(v7) >= 1)
              {
                v9 = 0;
                do
                {
                  v10[0] = 0;
                  if (!CMPhotoCFArrayGetSizeAtIndex(v7, v9, v10))
                    goto LABEL_16;
                  result = CMPhotoCompressionSessionAddImageHandleToGroup(v4);
                  if ((_DWORD)result)
                    goto LABEL_14;
                }
                while (++v9 < CFArrayGetCount(v7));
              }
              result = CMPhotoCompressionSessionAddGroupProperties(v4);
LABEL_14:
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24) = result;
              return result;
            }
          }
        }
      }
    }
LABEL_16:
    result = 4294950306;
    goto LABEL_14;
  }
  return result;
}

uint64_t _writeMainImageToDestination(_QWORD *a1, uint64_t a2, int a3, const __CFDictionary *a4, uint64_t *a5)
{
  int v8;
  const __CFDictionary *Value;
  CFAllocatorRef v10;
  int v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFTypeID v14;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *v16;
  const __CFDictionary *v17;
  CFTypeID v18;
  CFTypeID v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  int v22;
  const __CFDictionary *MutableCopy;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  int v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  const __CFDictionary *v30;
  int v31;
  const void *v32;
  CFTypeID v33;
  const void *v34;
  CFTypeID v35;
  uint64_t v36;
  const __CFDictionary *v37;
  const void *v38;
  CFTypeID v39;
  uint64_t v40;
  uint64_t v43;
  __CFDictionary *v44;
  CFTypeRef v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  const __CFNumber *v52;
  int v53;
  CFTypeRef v54[2];

  v46 = 0;
  v47 = &v46;
  v48 = 0x2000000000;
  v49 = 0;
  v44 = 0;
  v45 = 0;
  v8 = _createBufferFromImageDescriptionEntry(a1, a4, a3, 0, 1, &v45, &v44, 0, 0, 0);
  *((_DWORD *)v47 + 6) = v8;
  if (v8)
    goto LABEL_60;
  v43 = -1;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("EncodeOptions"));
  v10 = CFGetAllocator(a1);
  v11 = CMPhotoMergeDictionaryEntries((uint64_t)v10, (uint64_t)v44, Value, 1u);
  *((_DWORD *)v47 + 6) = v11;
  if (v11)
    goto LABEL_60;
  v12 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("HEIFItemPropertiesList"));
  if (!v12)
  {
    v21 = v44;
LABEL_44:
    v31 = CMPhotoCompressionSessionAddImage(a2, v21, (uint64_t)v45, (uint64_t)&v43);
    *((_DWORD *)v47 + 6) = v31;
    if (v31)
      goto LABEL_60;
    if (v45)
    {
      CFRelease(v45);
      v45 = 0;
    }
    v32 = CFDictionaryGetValue(a4, CFSTR("ThumbnailImageList"));
    if (!v32)
      goto LABEL_50;
    v33 = CFGetTypeID(v32);
    if (v33 == CFArrayGetTypeID())
    {
      FigCFArrayApplyBlock();
      if (*((_DWORD *)v47 + 6))
        goto LABEL_60;
LABEL_50:
      v34 = CFDictionaryGetValue(a4, CFSTR("AuxiliaryImageList"));
      if (!v34)
        goto LABEL_53;
      v35 = CFGetTypeID(v34);
      if (v35 == CFArrayGetTypeID())
      {
        FigCFArrayApplyBlock();
        if (!*((_DWORD *)v47 + 6))
        {
LABEL_53:
          v36 = 0;
          v37 = a4;
          while (1)
          {
            v38 = CFDictionaryGetValue(v37, *(__CFString **)((char *)&off_1E53F6778 + v36));
            if (v38)
            {
              v39 = CFGetTypeID(v38);
              if (v39 != CFArrayGetTypeID())
                goto LABEL_68;
              FigCFArrayApplyBlock();
              v37 = a4;
              if (*((_DWORD *)v47 + 6))
                break;
            }
            v36 += 24;
            if (v36 == 96)
            {
              if (!a5)
                break;
              v21 = 0;
              *a5 = v43;
              goto LABEL_61;
            }
          }
        }
LABEL_60:
        v21 = 0;
        goto LABEL_61;
      }
    }
LABEL_68:
    v21 = 0;
    *((_DWORD *)v47 + 6) = -16990;
    goto LABEL_61;
  }
  v13 = v12;
  v14 = CFGetTypeID(v12);
  if (v14 != CFArrayGetTypeID())
    goto LABEL_68;
  if (CFArrayGetCount(v13) != 1)
    goto LABEL_68;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, 0);
  v16 = v44;
  v54[0] = 0;
  if (!ValueAtIndex)
    goto LABEL_68;
  v17 = ValueAtIndex;
  v18 = CFGetTypeID(ValueAtIndex);
  if (v18 != CFDictionaryGetTypeID()
    || v16 && (v19 = CFGetTypeID(v16), v19 != CFDictionaryGetTypeID())
    || (v53 = 0, !CMPhotoCFDictionaryGetIntIfPresent(v17, CFSTR("EntryType"), &v53)))
  {
    v21 = 0;
    MutableCopy = 0;
    v24 = 0;
    v22 = -16990;
    goto LABEL_36;
  }
  v20 = (const __CFDictionary *)FigCFDictionaryGetValue();
  v21 = 0;
  v22 = -16990;
  if (!v20)
  {
    MutableCopy = 0;
    v24 = 0;
    goto LABEL_36;
  }
  MutableCopy = 0;
  v24 = 0;
  if (v53 != 1)
    goto LABEL_36;
  v25 = v20;
  v52 = (const __CFNumber *)-1;
  if (!CMPhotoCFDictionaryGetSizeIfPresent(v20, CFSTR("MainIndex"), &v52))
  {
    v21 = 0;
    MutableCopy = 0;
    v24 = 0;
    goto LABEL_36;
  }
  v51 = -1;
  CMPhotoCFDictionaryGetSizeIfPresent(v25, CFSTR("AlternateIndex"), &v51);
  if (v51 == -1)
  {
    MutableCopy = 0;
  }
  else
  {
    CFGetAllocator(a1);
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
    {
      v21 = 0;
      v24 = 0;
      goto LABEL_75;
    }
    v26 = FigCFDictionarySetCFIndex();
    if (v26)
      goto LABEL_70;
  }
  v26 = CMPhotoDecompressionContainerCopyHEIFItemPropertiesForIndexWithOptions(a1, v52, MutableCopy, (uint64_t)v54);
  if (v26)
  {
LABEL_70:
    v22 = v26;
    v21 = 0;
LABEL_35:
    v24 = 0;
    goto LABEL_36;
  }
  CFGetAllocator(a1);
  v24 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!v24)
  {
    v21 = 0;
LABEL_75:
    v22 = -16991;
    goto LABEL_36;
  }
  v27 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v54[0], CFSTR("CameraExtrinsics"));
  if (!v27)
  {
LABEL_30:
    v29 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v54[0], CFSTR("CameraModel"));
    if (v29)
    {
      v30 = v29;
      if (!CFDictionaryContainsKey(v24, CFSTR("IntrinsicsMatrix")))
      {
        if (CFDictionaryGetValue(v30, CFSTR("Intrinsics")))
          FigCFDictionarySetValue();
      }
    }
    v22 = 0;
    v21 = v24;
    goto LABEL_35;
  }
  v28 = v27;
  v50 = 0;
  CMPhotoCFDictionaryGetInt32IfPresent(v27, CFSTR("CoordinateSystemID"), &v50);
  if (!v50)
  {
    if (!CFDictionaryContainsKey(v24, CFSTR("ExtrinsicsPosition")) && CFDictionaryGetValue(v28, CFSTR("Position")))
      FigCFDictionarySetValue();
    if (!CFDictionaryContainsKey(v24, CFSTR("ExtrinsicsRotation")) && CFDictionaryGetValue(v28, CFSTR("Rotation")))
      FigCFDictionarySetValue();
    goto LABEL_30;
  }
  v22 = FigSignalErrorAt();
  v21 = 0;
LABEL_36:
  if (v54[0])
    CFRelease(v54[0]);
  if (v24)
    CFRelease(v24);
  if (MutableCopy)
    CFRelease(MutableCopy);
  *((_DWORD *)v47 + 6) = v22;
  if (!v22)
  {
    v44 = v21;
    goto LABEL_44;
  }
LABEL_61:
  if (v44)
    CFRelease(v44);
  if (v45)
    CFRelease(v45);
  if (v21)
    CFRelease(v21);
  v40 = *((unsigned int *)v47 + 6);
  _Block_object_dispose(&v46, 8);
  return v40;
}

uint64_t _createBufferFromImageDescriptionEntry(_QWORD *a1, const __CFDictionary *cf, int a3, int a4, int a5, CFTypeRef *a6, __CFDictionary **a7, CFTypeRef *a8, void *a9, CFTypeRef *a10)
{
  const __CFDictionary *v10;
  CFTypeID v18;
  __CFDictionary *MutableCopy;
  const __CFDictionary *Value;
  uint64_t v21;
  const __CFDictionary *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  const void *v27;
  uint64_t AuxiliaryImageForIndex;
  uint64_t v29;
  CFTypeRef *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cfa;

  v10 = cf;
  v40 = 0;
  cfa = 0;
  v39 = 0;
  if (!cf)
    goto LABEL_71;
  v18 = CFGetTypeID(cf);
  if (v18 != CFDictionaryGetTypeID())
  {
    v10 = 0;
LABEL_71:
    MutableCopy = 0;
    goto LABEL_15;
  }
  CFGetAllocator(a1);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v10 = 0;
    v24 = 4294950305;
    goto LABEL_59;
  }
  v38 = 0;
  if (!CMPhotoCFDictionaryGetIntIfPresent(v10, CFSTR("EntryType"), &v38))
    goto LABEL_14;
  Value = (const __CFDictionary *)FigCFDictionaryGetValue();
  v10 = Value;
  if (!Value)
  {
LABEL_15:
    v24 = 4294950306;
    goto LABEL_59;
  }
  v21 = (uint64_t)a9;
  if (v38 == 2)
  {
    v25 = CFDictionaryGetValue(Value, CFSTR("PixelBuffer"));
    if (v25)
    {
      cfa = CFRetain(v25);
      if (cfa)
      {
        if (a4)
        {
          v26 = CFDictionaryGetValue(v10, CFSTR("AuxiliaryCustomURN"));
          if (v26)
            v26 = CFRetain(v26);
          v40 = v26;
          v27 = CFDictionaryGetValue(v10, CFSTR("AuxiliaryCGImageMetadata"));
          if (v27)
            v27 = CFRetain(v27);
          v39 = v27;
          if (a9)
            CMPhotoCFDictionaryGetIntIfPresent(v10, CFSTR("AuxiliaryType"), a9);
        }
        v10 = 0;
        goto LABEL_49;
      }
    }
    else
    {
      cfa = 0;
    }
    v24 = FigSignalErrorAt();
    v10 = 0;
    goto LABEL_59;
  }
  if (v38 != 1)
    goto LABEL_14;
  v37 = -1;
  if (!CMPhotoCFDictionaryGetSizeIfPresent(Value, CFSTR("MainIndex"), &v37)
    || (v32 = a4,
        v36 = -1,
        CMPhotoCFDictionaryGetSizeIfPresent(v10, CFSTR("AlternateIndex"), &v36),
        v35 = -1,
        CMPhotoCFDictionaryGetSizeIfPresent(v10, CFSTR("SubIndex"), &v35),
        v22 = (const __CFDictionary *)CFDictionaryGetValue(v10, CFSTR("DecodeOptions")),
        v34 = 0,
        !CMPhotoCFDictionaryGetIntIfPresent(v10, CFSTR("Type"), &v34)))
  {
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  if (v36 == -1)
  {
    v10 = 0;
  }
  else
  {
    CFGetAllocator(a1);
    v10 = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!v10)
    {
      v24 = 4294950305;
      goto LABEL_59;
    }
    v23 = FigCFDictionarySetCFIndex();
    if ((_DWORD)v23)
    {
      v24 = v23;
      goto LABEL_59;
    }
    v22 = v10;
    v21 = (uint64_t)a9;
  }
  if (v34 == 3)
  {
    v31 = a8;
    if (v32)
    {
      AuxiliaryImageForIndex = CMPhotoDecompressionContainerCreateAuxiliaryImageForIndex(a1, (const __CFNumber *)v37, v35, v22, 2, (uint64_t)&cfa);
      if (!(_DWORD)AuxiliaryImageForIndex)
      {
        if (!v21
          || (AuxiliaryImageForIndex = CMPhotoDecompressionContainerGetAuxiliaryImageTypeForIndexWithOptions(a1, (const __CFNumber *)v37, v35, v22, v21, 0), !(_DWORD)AuxiliaryImageForIndex))
        {
          v29 = CMPhotoDecompressionContainerCopyAuxiliaryImageMetadataForIndexWithOptions(a1, (const __CFNumber *)v37, v35, v22, (uint64_t)&v39);
          if ((_DWORD)v29)
          {
            v24 = v29;
            if ((_DWORD)v29 != -16993)
              goto LABEL_59;
          }
          AuxiliaryImageForIndex = CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions((uint64_t)a1, v37, v35, (uint64_t)v22, (uint64_t)&v40);
          if (!(_DWORD)AuxiliaryImageForIndex)
            goto LABEL_48;
        }
      }
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v34 == 2)
  {
    v31 = a8;
    if (!v32)
    {
      AuxiliaryImageForIndex = CMPhotoDecompressionContainerCreateThumbnailImageForIndex(a1, (const __CFNumber *)v37, v35, v22, 2, (uint64_t)&cfa);
      if (!(_DWORD)AuxiliaryImageForIndex)
        goto LABEL_48;
LABEL_58:
      v24 = AuxiliaryImageForIndex;
      goto LABEL_59;
    }
LABEL_57:
    AuxiliaryImageForIndex = FigSignalErrorAt();
    goto LABEL_58;
  }
  if (v34 != 1)
    goto LABEL_57;
  v31 = a8;
  if (v32)
    goto LABEL_57;
  AuxiliaryImageForIndex = CMPhotoDecompressionContainerCreateImageForIndex(a1, (const __CFNumber *)v37, v22, 2, (uint64_t)&cfa);
  if ((_DWORD)AuxiliaryImageForIndex)
    goto LABEL_58;
  if (a3 || !a5)
    goto LABEL_48;
  v33 = 1;
  AuxiliaryImageForIndex = CMPhotoDecompressionContainerGetImageGeometryForIndexWithOptions(a1, (const __CFNumber *)v37, v22, 0, 0, (uint64_t)&v33);
  if ((_DWORD)AuxiliaryImageForIndex)
    goto LABEL_58;
  CMPhotoCFDictionarySetInt(MutableCopy, CFSTR("ImageOrientation"), v33);
LABEL_48:
  a8 = v31;
LABEL_49:
  if (a6)
  {
    *a6 = cfa;
    cfa = 0;
  }
  if (a8)
  {
    *a8 = v39;
    v39 = 0;
  }
  if (a10)
  {
    *a10 = v40;
    v40 = 0;
  }
  v24 = 0;
  if (a7)
  {
    *a7 = MutableCopy;
    MutableCopy = 0;
  }
LABEL_59:
  if (cfa)
    CFRelease(cfa);
  if (v40)
    CFRelease(v40);
  if (v39)
    CFRelease(v39);
  if (v10)
    CFRelease(v10);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v24;
}

void ___writeMainImageToDestination_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  const __CFDictionary *Value;
  CFAllocatorRef v5;
  CFTypeRef v6;
  CFTypeRef cf;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v6 = 0;
    cf = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _createBufferFromImageDescriptionEntry(*(_QWORD **)(a1 + 40), a2, *(_DWORD *)(a1 + 64), 0, 0, &cf, (__CFDictionary **)&v6, 0, 0, 0);
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("EncodeOptions"));
      v5 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoMergeDictionaryEntries((uint64_t)v5, (uint64_t)v6, Value, 1u);
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoCompressionSessionAddThumbnail(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), (CFDictionaryRef)v6, (uint64_t)cf);
    }
    if (cf)
      CFRelease(cf);
    if (v6)
      CFRelease(v6);
  }
}

void ___writeMainImageToDestination_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  const __CFDictionary *Value;
  CFAllocatorRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t MutableCopy;
  CFTypeRef v9;
  int v10;
  CFTypeRef cf;
  int v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    return;
  v15 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  cf = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = _createBufferFromImageDescriptionEntry(*(_QWORD **)(a1 + 40), a2, *(_DWORD *)(a1 + 64), 1, 0, &v15, (__CFDictionary **)&cf, &v13, &v12, &v14);
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("EncodeOptions"));
    v5 = CFGetAllocator(*(CFTypeRef *)(a1 + 40));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoMergeDictionaryEntries((uint64_t)v5, (uint64_t)cf, Value, 1u);
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v6 = FigCFDictionaryGetValue();
      v7 = v12;
      if (v12 == 4 && v14 && !v6)
      {
        CFGetAllocator(*(CFTypeRef *)(a1 + 40));
        MutableCopy = FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v10 = -16991;
          goto LABEL_11;
        }
        v9 = (CFTypeRef)MutableCopy;
        FigCFDictionarySetValue();
        cf = v9;
        v7 = v12;
      }
      else
      {
        v9 = cf;
      }
      v10 = CMPhotoCompressionSessionAddAuxiliaryImage(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v7, (uint64_t)v13, (CFDictionaryRef)v9, (uint64_t)v15, 0);
LABEL_11:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;
    }
  }
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
}

void ___writeMainImageToDestination_block_invoke_3(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  CFTypeID v6;
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFDictionary *MutableCopy;
  int v10;
  unint64_t v11;
  int v12;
  const void *v13;
  const void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const __CFNumber *v18;
  int v19;
  CFTypeRef cfa;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v2 = (uint64_t)cf;
    v4 = *(_QWORD **)(a1 + 40);
    v5 = *(_DWORD *)(a1 + 72);
    cfa = 0;
    if (!cf)
    {
      v11 = 0;
      v12 = -16990;
      goto LABEL_41;
    }
    v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      v19 = 0;
      if (CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)v2, CFSTR("EntryType"), &v19))
      {
        Value = (const __CFDictionary *)FigCFDictionaryGetValue();
        if (Value)
        {
          v8 = Value;
          if (v19 == 2)
          {
            v13 = CFDictionaryGetValue(Value, CFSTR("MetadataPayload"));
            if (v13)
              v11 = (unint64_t)CFRetain(v13);
            else
              v11 = 0;
            v2 = 0;
            cfa = (CFTypeRef)v11;
            if (v5 == 4 && !v11)
            {
              v14 = CFDictionaryGetValue(v8, CFSTR("ImageProperties"));
              if (v14)
                v2 = (uint64_t)CFRetain(v14);
              else
                v2 = 0;
            }
            if (v11 | v2)
            {
              MutableCopy = 0;
              goto LABEL_37;
            }
            v12 = FigSignalErrorAt();
            v2 = 0;
            v11 = 0;
            goto LABEL_39;
          }
          if (v19 == 1)
          {
            v18 = (const __CFNumber *)-1;
            if (CMPhotoCFDictionaryGetSizeIfPresent(Value, CFSTR("MainIndex"), &v18))
            {
              v17 = -1;
              if (CMPhotoCFDictionaryGetSizeIfPresent(v8, CFSTR("SubIndex"), &v17))
              {
                v16 = -1;
                CMPhotoCFDictionaryGetSizeIfPresent(v8, CFSTR("AlternateIndex"), &v16);
                v15 = 0;
                if (CMPhotoCFDictionaryGetIntIfPresent(v8, CFSTR("Type"), &v15))
                {
                  if (v15 == v5)
                  {
                    if (v16 == -1)
                    {
                      MutableCopy = 0;
                      goto LABEL_25;
                    }
                    CFGetAllocator(v4);
                    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
                    if (MutableCopy)
                    {
                      v10 = FigCFDictionarySetCFIndex();
                      if (!v10)
                      {
                        v5 = v15;
LABEL_25:
                        switch(v5)
                        {
                          case 4:
                            v10 = CMPhotoDecompressionContainerCopyExifForIndexWithOptions(v4, v18, v17, MutableCopy, 0, (uint64_t)&cfa);
                            if (v10)
                              goto LABEL_27;
                            break;
                          case 5:
                            v10 = CMPhotoDecompressionContainerCopyXMPForIndexWithOptions(v4, v18, v17, 0, MutableCopy, &cfa);
                            if (v10)
                              goto LABEL_27;
                            break;
                          case 6:
                            v10 = CMPhotoDecompressionContainerCopyDebugMetadataForIndexWithOptions(v4, v18, v17, MutableCopy, (uint64_t)&cfa);
                            if (v10)
                              goto LABEL_27;
                            break;
                          case 7:
                            v10 = CMPhotoDecompressionContainerCopyCustomMetadataForIndexWithOptions(v4, v18, v17, MutableCopy, (uint64_t)&cfa);
                            if (v10)
                              goto LABEL_27;
                            break;
                          default:
                            break;
                        }
                        v2 = 0;
                        v11 = (unint64_t)cfa;
LABEL_37:
                        v12 = 0;
                        cfa = 0;
                        if (!MutableCopy)
                          goto LABEL_39;
                        goto LABEL_38;
                      }
LABEL_27:
                      v12 = v10;
                    }
                    else
                    {
                      v12 = -16991;
                    }
                  }
                  else
                  {
                    v12 = FigSignalErrorAt();
                    MutableCopy = 0;
                  }
                }
                else
                {
                  MutableCopy = 0;
                  v12 = -16990;
                }
                v2 = 0;
                v11 = 0;
                if (MutableCopy)
LABEL_38:
                  CFRelease(MutableCopy);
LABEL_39:
                if (cfa)
                  CFRelease(cfa);
LABEL_41:
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v12;
                if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
                {
                  if (v2)
                    goto LABEL_44;
                }
                else
                {
                  if (v2)
                  {
                    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoCompressionSessionAddMetadataFromImageProperties(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0, v2);
LABEL_44:
                    CFRelease((CFTypeRef)v2);
                    goto LABEL_46;
                  }
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, unint64_t))(a1 + 64))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), 0, v11);
                }
LABEL_46:
                if (v11)
                  CFRelease((CFTypeRef)v11);
                return;
              }
            }
          }
        }
      }
    }
    v2 = 0;
    v11 = 0;
    v12 = -16990;
    goto LABEL_39;
  }
}

uint64_t CMPhotoJPEGDecodeSessionGetTypeID()
{
  pthread_once(&CMPhotoJPEGDecodeSessionGetTypeID_sRegisterCMPhotoJPEGDecodeSessionOnce, (void (*)(void))fjds_register);
  return sCMPhotoJPEGDecodeSessionID;
}

uint64_t CMPhotoJPEGDecodeSessionCreateCVPixelBufferFromData(uint64_t a1, const __CFData *a2, const __CFDictionary *a3, _QWORD *a4)
{
  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return 4294951220;
  return fjds_createPixelBufferFromJPEGData(a1, 0, a2, a3, a4, 0);
}

uint64_t CMPhotoJPEGDecodeSessionCreateCGImageFromData(_BYTE *a1, const __CFData *a2, const __CFDictionary *a3, CGImageRef *a4)
{
  const __CFDictionary *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CVPixelBufferRef v11;
  uint64_t CGImageWithPixelBuffer;
  unsigned __int8 v14;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = 0;
  v14 = 1;
  if (a1)
  {
    if (a1[16])
      return 4294951220;
    v8 = unpackCGImageRequestOptions(a3, &v14);
    if ((_DWORD)v8)
      return (uint64_t)v8;
    v9 = fjds_createPixelBufferFromJPEGData((uint64_t)a1, 0, a2, a3, &pixelBuffer, 0);
    if ((_DWORD)v9)
    {
      CGImageWithPixelBuffer = v9;
      v11 = pixelBuffer;
      if (!pixelBuffer)
        return CGImageWithPixelBuffer;
    }
    else
    {
      v10 = CFGetAllocator(a1);
      v11 = pixelBuffer;
      CGImageWithPixelBuffer = CMPhotoCreateCGImageWithPixelBuffer(v10, pixelBuffer, v14, a4);
      if (!v11)
        return CGImageWithPixelBuffer;
    }
    CFRelease(v11);
    return CGImageWithPixelBuffer;
  }
  return FigSignalErrorAt();
}

const void *CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously(uint64_t a1, const void *a2, CFDictionaryRef theDict, uint64_t a4)
{
  unsigned int v8;
  const void *RequestIDAndAddToInflightList;
  const void *Value;
  CFTypeID v11;
  int v12;
  NSObject *global_queue;
  _QWORD v15[7];
  int v16;
  _QWORD v17[9];
  const void *v18;

  if (!a1)
    goto LABEL_14;
  if (*(_BYTE *)(a1 + 16))
  {
    v12 = -16076;
    goto LABEL_15;
  }
  if (!a2
    && (!theDict
     || (Value = CFDictionaryGetValue(theDict, CFSTR("SourceIOSurface"))) == 0
     || (v11 = CFGetTypeID(Value), v11 != IOSurfaceGetTypeID()))
    || !a4)
  {
LABEL_14:
    v12 = FigSignalErrorAt();
    if (!v12)
      return 0;
LABEL_15:
    global_queue = dispatch_get_global_queue(0, 0);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously_block_invoke_2;
    v15[3] = &unk_1E53F68C0;
    v15[4] = a4;
    v15[5] = a1;
    v15[6] = 0;
    v16 = v12;
    dispatch_async(global_queue, v15);
    return 0;
  }
  v8 = _getBoolValue_0(theDict, CFSTR("HighPriority"), 0) == 0;
  v18 = 0;
  if (!FigCFDictionaryGetInt64IfPresent())
  {
    RequestIDAndAddToInflightList = fjds_generateRequestIDAndAddToInflightList(a1);
    if (!a2)
      goto LABEL_8;
    goto LABEL_7;
  }
  RequestIDAndAddToInflightList = v18;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v18);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  if (a2)
LABEL_7:
    CFRetain(a2);
LABEL_8:
  if (theDict)
    CFRetain(theDict);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = __CMPhotoJPEGDecodeSessionDecodeDataToCVPixelBufferAsynchronously_block_invoke;
  v17[3] = &unk_1E53F6898;
  v17[6] = a1;
  v17[7] = RequestIDAndAddToInflightList;
  v17[8] = a2;
  v17[4] = a4;
  v17[5] = theDict;
  fjds_runRequestBlockAsynchronously(a1, v8, v17);
  return RequestIDAndAddToInflightList;
}

uint64_t CMPhotoJPEGDecodeSessionCancelRequest(uint64_t a1, const void *a2)
{
  uint64_t v4;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return 4294951220;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2))
  {
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
    v4 = 0;
  }
  else
  {
    v4 = 4294951223;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v4;
}

uint64_t CMPhotoJPEGDecodeSessionDiscardCachedBuffers(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(a1 + 16))
    return 4294951220;
  CMPhotoSurfacePoolFlushCaches(*(_QWORD *)(a1 + 200), 0);
  CMPhotoScaleAndRotateSessionDiscardCaches(*(_QWORD *)(a1 + 208), v2);
  return 0;
}

CFStringRef CMPhotoJPEGDecodeSessionCopyPoolDebugInfo(uint64_t a1)
{
  CFStringRef v2;
  CFStringRef v3;

  v2 = CFCopyDescription(*(CFTypeRef *)(a1 + 200));
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("CMPhotoJPEGDecodeSession %p pool info: %@"), a1, v2);
  if (v2)
    CFRelease(v2);
  return v3;
}

void fjds_finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const __CFArray *v8;
  CFIndex v9;
  const void *ValueAtIndex;
  NSObject *v11;
  const void *v12;
  const void *v13;
  NSObject **v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD block[5];

  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(NSObject **)(a1 + 56);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 64);
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(a1 + 72);
  if (v5)
    dispatch_release(v5);
  v6 = *(NSObject **)(a1 + 80);
  if (v6)
    dispatch_release(v6);
  v7 = *(NSObject **)(a1 + 88);
  if (v7)
    dispatch_release(v7);
  v8 = *(const __CFArray **)(a1 + 136);
  if (v8)
  {
    if (CFArrayGetCount(v8) >= 1)
    {
      v9 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 136), v9);
        JPEGDeviceInterface_closeDriverConnection((uint64_t)ValueAtIndex);
        ++v9;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(a1 + 136)) > v9);
    }
    CFRelease(*(CFTypeRef *)(a1 + 136));
  }
  v11 = *(NSObject **)(a1 + 152);
  if (v11)
    dispatch_release(v11);
  v12 = *(const void **)(a1 + 200);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 208);
  if (v13)
    CFRelease(v13);
  if (*(_BYTE *)(a1 + 160))
  {
    while (1)
    {
      v14 = *(NSObject ***)(a1 + 168);
      if (!v14)
        break;
      v15 = *v14;
      *(_QWORD *)(a1 + 168) = v14[1];
      dispatch_release(v15);
      free(v14);
    }
    v16 = *(NSObject **)(a1 + 184);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fjds_finalize_block_invoke;
    block[3] = &__block_descriptor_tmp_43;
    block[4] = a1;
    dispatch_sync(v16, block);
    IONotificationPortDestroy(*(IONotificationPortRef *)(a1 + 192));
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }
}

__CFString *fjds_copyDebugDesc(unsigned int *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFAllocatorRef v4;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CMPhotoJPEGDecodeSession %p [%p]>{ JPEG Cores: %i, Scaler Cores: %i, }"), a1, v4, a1[5], a1[6]);
  return Mutable;
}

void __fjds_finalize_block_invoke(uint64_t a1)
{
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)(*(_QWORD *)(a1 + 32) + 192), 0);
}

intptr_t _asyncDecodeCompleteCallback(uint64_t a1, int a2)
{
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  *(_DWORD *)a1 = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 8));
}

void fjds_scheduleNextRequest(uint64_t a1)
{
  uint64_t v2;
  char i;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v12[6];

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v2 = 0;
  for (i = 1; ; i = 0)
  {
    v4 = i;
    v5 = a1 + 16 * v2;
    v8 = *(uint64_t **)(v5 + 96);
    v6 = (_QWORD *)(v5 + 96);
    v7 = v8;
    if (v8)
      break;
    v2 = 1;
    if ((v4 & 1) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
      return;
    }
  }
  v9 = v7[1];
  *v6 = v9;
  if (!v9)
    *(_QWORD *)(a1 + 16 * v2 + 104) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  v10 = *v7;
  free(v7);
  v11 = *(NSObject **)(a1 + 72);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __fjds_scheduleNextRequest_block_invoke;
  v12[3] = &unk_1E53F69D0;
  v12[4] = v10;
  v12[5] = a1;
  dispatch_async(v11, v12);
}

void __fjds_runRequestBlockAsynchronously_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 56), 0xFFFFFFFFFFFFFFFFLL);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = *(NSObject **)(v2 + 72);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __fjds_runRequestBlockAsynchronously_block_invoke_2;
  v5[3] = &unk_1E53F6958;
  v5[4] = v3;
  v5[5] = v2;
  dispatch_async(v4, v5);
}

void __fjds_runRequestBlockAsynchronously_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 56));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __fjds_scheduleNextRequest_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 40) + 56));
  _Block_release(*(const void **)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t JPEGCompressionPluginClass_create(uint64_t a1, const __CFDictionary *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  dispatch_queue_t v10;
  uint64_t v11;
  char v13;
  int v14;

  if (!a1)
  {
    v5 = 0;
    goto LABEL_26;
  }
  v4 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x106004064F55C27uLL);
  v5 = v4;
  if (!v4)
  {
    v11 = 4294950305;
    goto LABEL_24;
  }
  v4[2] = 5;
  *v4 = 0;
  if (!a2)
    goto LABEL_16;
  CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("SyncEncode"), (_BYTE *)v4 + 4);
  CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("Subsampling"), v5 + 2);
  v14 = 0;
  FigCFDictionaryGetIntIfPresent();
  v13 = 0;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("PreferSoftwareCodec"), &v13))
    v6 = v13 == 0;
  else
    v6 = 1;
  if (!v6)
    *v5 = 1;
  if (CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("RequireHardwareCodec"), &v13))
    v7 = v13 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_15;
  if (*v5 == 1)
  {
LABEL_26:
    v11 = 4294950306;
    goto LABEL_24;
  }
  *v5 = 2;
LABEL_15:
  *((_QWORD *)v5 + 2) = CFDictionaryCreateCopy(*(CFAllocatorRef *)a1, a2);
  v9 = *v5;
  if (!(_DWORD)v9)
  {
LABEL_16:
    if (CMPhotoUnifiedJPEGEncoderIsHardwareAvailable())
      v9 = 2;
    else
      v9 = 1;
    *v5 = v9;
  }
  *v5 = CMPhotoGetEncodeAccelerationModeOverride(v9, v8);
  if (*((_BYTE *)v5 + 4)
    || (v10 = dispatch_queue_create("com.apple.coremedia.jpeg-encoder", MEMORY[0x1E0C80D50]),
        (*((_QWORD *)v5 + 3) = v10) != 0))
  {
    v11 = CMPhotoUnifiedJPEGEncoderCreate(*(const __CFAllocator **)a1, *(const void **)(a1 + 16), *(const void **)(a1 + 8), 0, (_QWORD *)v5 + 4);
    if (!(_DWORD)v11)
    {
      *(_QWORD *)(a1 + 144) = v5;
      v5 = 0;
    }
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
LABEL_24:
  PluginInstance_Dispose_0(v5);
  return v11;
}

void JPEGCompressionPluginClass_dispose(uint64_t a1)
{
  if (a1)
    PluginInstance_Dispose_0(*(void **)(a1 + 144));
}

uint64_t JPEGCompressionPluginClass_encode(uint64_t a1, CFTypeRef cf, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  CFTypeRef v17;
  __int128 v18;
  __int128 v19;
  __int128 v21;
  __int128 v22;
  _QWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  if (!a1)
    return 4294950306;
  v8 = *(_QWORD *)(a1 + 144);
  if (!v8)
    return 4294950195;
  if (!cf)
    return 4294950306;
  if (*(_BYTE *)(v8 + 4))
  {
    LOBYTE(v23[0]) = 0;
    v23[1] = a1;
    v23[2] = CFRetain(cf);
    v13 = a4[1];
    v24 = *a4;
    v25 = v13;
    v14 = a5[1];
    v26 = *a5;
    v27 = v14;
    v28 = a7;
    v29 = 0;
    _dispatch_encode(v23);
  }
  else
  {
    v15 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10A0040D1AAF97AuLL);
    if (!v15)
      return 4294950305;
    v16 = v15;
    v17 = CFRetain(cf);
    v18 = *a4;
    v22 = a4[1];
    v19 = *a5;
    v21 = a5[1];
    *v16 = 1;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = v17;
    *(_OWORD *)(v16 + 40) = v22;
    *(_OWORD *)(v16 + 24) = v18;
    *(_OWORD *)(v16 + 72) = v21;
    *(_OWORD *)(v16 + 56) = v19;
    *((_QWORD *)v16 + 11) = a7;
    *((_QWORD *)v16 + 12) = 0;
    dispatch_async_f(*(dispatch_queue_t *)(v8 + 24), v16, (dispatch_function_t)_dispatch_encode);
  }
  return 0;
}

uint64_t JPEGCompressionPluginClass_completeEncodes(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 4294950306;
  v1 = *(_QWORD *)(a1 + 144);
  if (!v1)
    return 4294950195;
  if (!*(_BYTE *)(v1 + 4))
    dispatch_barrier_sync_f(*(dispatch_queue_t *)(v1 + 24), 0, (dispatch_function_t)_dispatch_empty_0);
  return 0;
}

void PluginInstance_Dispose_0(void *a1)
{
  const void *v2;
  NSObject *v3;

  if (a1)
  {
    v2 = (const void *)*((_QWORD *)a1 + 2);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)a1 + 2) = 0;
    }
    CMPhotoUnifiedJPEGEncoderDestroy(*((void **)a1 + 4));
    *((_QWORD *)a1 + 4) = 0;
    v3 = *((_QWORD *)a1 + 3);
    if (v3)
      dispatch_release(v3);
  }
  free(a1);
}

void _dispatch_encode(_QWORD *a1)
{
  uint64_t v1;
  __CVBuffer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  unsigned int *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t v18;
  __CVBuffer *v19;
  size_t v20;
  uint64_t PixelFormatType;
  uint64_t PixelBuffer;
  unint64_t v23;
  BOOL v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  __CVBuffer *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  size_t v38;
  size_t v39;
  CFTypeRef v40;
  CFTypeRef cf;

  v1 = a1[1];
  v2 = (__CVBuffer *)a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v6 = a1[5];
  v5 = a1[6];
  v8 = a1[7];
  v7 = a1[8];
  v10 = a1[9];
  v9 = a1[10];
  v35 = a1[11];
  if (*(_BYTE *)a1)
  {
    v11 = a1[10];
    free(a1);
    v9 = v11;
  }
  v36 = v1;
  v12 = *(unsigned int **)(v1 + 144);
  v40 = 0;
  cf = 0;
  v13 = v10;
  v14 = v10 + v8;
  v15 = v6 + v3;
  v16 = v9 + v7;
  v17 = v5 + v4;
  if (v14 <= v15 && v16 <= v17)
  {
    v18 = v13;
LABEL_16:
    v28 = *((_QWORD *)v12 + 4);
    v29 = *((_QWORD *)v12 + 2);
    v30 = *v12;
    v31 = v12[2];
    *(_QWORD *)&v37 = v8;
    *((_QWORD *)&v37 + 1) = v7;
    v38 = v18;
    v39 = v9;
    v32 = CMPhotoUnifiedJPEGEncoderEncode(v28, v29, (uint64_t)v2, 0, &v37, 1, v30, v31, (uint64_t)v12, (CMSampleBufferRef *)&cf);
    v33 = cf;
    goto LABEL_17;
  }
  v34 = v2;
  v19 = v2;
  v20 = v9;
  PixelFormatType = CVPixelBufferGetPixelFormatType(v19);
  v18 = v13;
  PixelBuffer = CMPhotoSurfacePoolCreatePixelBuffer(*(const void **)(v36 + 8), PixelFormatType, v13, v20, 0, 0, 0, 0, 0, 0, (CVPixelBufferRef *)&v40);
  if ((_DWORD)PixelBuffer)
  {
    v32 = PixelBuffer;
    v33 = 0;
    v2 = v34;
  }
  else
  {
    v23 = v17 - v7;
    v24 = v16 > v17;
    v25 = v20;
    if (!v24)
      v23 = v20;
    v26 = v15 - v8;
    if (v14 <= v15)
      v26 = v13;
    v2 = v34;
    v27 = CMPhotoScaleAndRotateSessionTransformWithRect(*(_QWORD *)(v36 + 16), v34, 1, 1, (CVPixelBufferRef)v40, 0, 1, 1u, (double)v8, (double)v7, (double)v26, (double)v23, 0.0, 0.0, (double)v26, (double)v23);
    if (!(_DWORD)v27)
    {
      v27 = VTFillPixelBufferBorderWithBlack();
      if (!(_DWORD)v27)
      {
        if (v34)
          CFRelease(v34);
        v8 = 0;
        v7 = 0;
        v2 = (__CVBuffer *)v40;
        v40 = 0;
        v9 = v25;
        goto LABEL_16;
      }
    }
    v32 = v27;
    v33 = 0;
  }
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, CFTypeRef, _QWORD, uint64_t))(v36 + 128))(v36, v32, v33, *(_QWORD *)(v36 + 136), v35);
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
  if (v40)
    CFRelease(v40);
}

uint64_t CMPhotoCreateImageSurfaceWrappingPixelBuffer(__CVBuffer *a1, _BYTE *a2, __IOSurface **a3)
{
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t v9;
  double PixelBufferSize;
  double v11;
  double v12;
  OSType PixelFormatType;
  unint64_t BaseAddress;
  unint64_t v15;
  uint64_t BytesPerPixelForPixelFormat;
  __CFArray *v17;
  size_t v18;
  char v19;
  char v20;
  CFMutableDictionaryRef v21;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  char *BaseAddressOfPlane;
  char *v26;
  size_t BytesPerRow;
  __IOSurface *v28;
  __IOSurface *v29;
  int v31;
  __CFDictionary *theDict;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t DataSize;
  _BYTE *v41;
  const __CFAllocator *allocator;

  v3 = 4294950306;
  if (a1 && a2 && a3)
  {
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v8 = Mutable;
    v31 = *a2;
    if (!*a2)
    {
      v9 = CVPixelBufferLockBaseAddress(a1, 1uLL);
      if ((_DWORD)v9)
      {
        v3 = v9;
LABEL_23:
        CFRelease(v8);
        return v3;
      }
      *a2 = 1;
    }
    PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
    v12 = v11;
    PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
    BaseAddress = (unint64_t)CVPixelBufferGetBaseAddress(a1);
    FigCFDictionarySetInt64();
    v41 = (_BYTE *)BaseAddress;
    if ((*MEMORY[0x1E0C85AC0] & BaseAddress) == 0)
    {
      v15 = vcvtad_u64_f64(v12);
      CMPhotoCFDictionarySetInt(v8, (const void *)*MEMORY[0x1E0CBBF10], 0);
      CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E0CBC1E0], vcvtad_u64_f64(PixelBufferSize));
      CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E0CBC008], v15);
      CMPhotoCFDictionarySetInt32(v8, (const void *)*MEMORY[0x1E0CBC070], PixelFormatType);
      BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(PixelFormatType);
      if (CVPixelBufferIsPlanar(a1))
      {
        if (CVPixelBufferGetPlaneCount(a1) != 2)
        {
          v21 = 0;
          v17 = 0;
          v3 = 4294950301;
          goto LABEL_29;
        }
        DataSize = CVPixelBufferGetDataSize(a1);
        v17 = CFArrayCreateMutable(allocator, 2, MEMORY[0x1E0C9B378]);
        if (v17)
        {
          v39 = BytesPerPixelForPixelFormat;
          theDict = v8;
          v18 = 0;
          v38 = *MEMORY[0x1E0CBC178];
          v37 = *MEMORY[0x1E0CBC140];
          v36 = *MEMORY[0x1E0CBC090];
          v35 = *MEMORY[0x1E0CBC098];
          v34 = *MEMORY[0x1E0CBC160];
          v33 = *MEMORY[0x1E0CBC168];
          v19 = 1;
          while (1)
          {
            v20 = v19;
            v21 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v21)
            {
              v3 = 4294950305;
              v8 = theDict;
              goto LABEL_29;
            }
            CFArrayAppendValue(v17, v21);
            WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v18);
            HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v18);
            BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v18);
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v18);
            v26 = (char *)(BaseAddressOfPlane - v41);
            if (BaseAddressOfPlane < v41)
            {
              v8 = theDict;
              goto LABEL_28;
            }
            if ((unint64_t)&v26[BytesPerRowOfPlane * HeightOfPlane] > DataSize)
              break;
            CMPhotoCFDictionarySetSize(v21, v38, WidthOfPlane);
            CMPhotoCFDictionarySetSize(v21, v37, HeightOfPlane);
            CMPhotoCFDictionarySetSize(v21, v36, v39 << v18);
            CMPhotoCFDictionarySetSize(v21, v35, BytesPerRowOfPlane);
            CMPhotoCFDictionarySetSize(v21, v34, v26);
            CMPhotoCFDictionarySetSize(v21, v33, BytesPerRowOfPlane * HeightOfPlane);
            CFRelease(v21);
            v19 = 0;
            v18 = 1;
            if ((v20 & 1) == 0)
            {
              v8 = theDict;
              CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CBC158], v17);
              goto LABEL_19;
            }
          }
          v8 = theDict;
          goto LABEL_28;
        }
      }
      else
      {
        BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        CMPhotoCFDictionarySetInt(v8, (const void *)*MEMORY[0x1E0CBC058], 0);
        CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E0CBBF08], BytesPerRow);
        CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E0CBBF00], BytesPerPixelForPixelFormat);
        CMPhotoCFDictionarySetSize(v8, *MEMORY[0x1E0CBBEE0], BytesPerRow * v15);
        v17 = 0;
LABEL_19:
        v28 = IOSurfaceCreate(v8);
        if (v28)
        {
          v29 = v28;
          IOSurfaceSetValue(v28, (CFStringRef)*MEMORY[0x1E0CBC048], CFSTR("CMPhoto Wrapped Image"));
          v3 = 0;
          *a3 = v29;
LABEL_21:
          if (v17)
            CFRelease(v17);
          goto LABEL_23;
        }
      }
      v21 = 0;
      v3 = 4294950305;
      goto LABEL_29;
    }
    v21 = 0;
    v17 = 0;
LABEL_28:
    v3 = FigSignalErrorAt();
LABEL_29:
    if (!v31)
      CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    if (v21)
      CFRelease(v21);
    goto LABEL_21;
  }
  return v3;
}

uint64_t _ioSurfaceDeallocator_allocate()
{
  return 0;
}

void _ioSurfaceDeallocator_deallocateWithContext(uint64_t a1, uint64_t a2)
{
  __IOSurface *v3;

  v3 = *(__IOSurface **)a2;
  IOSurfaceUnlock(*(IOSurfaceRef *)a2, *(_DWORD *)(a2 + 8), 0);
  if (*(_BYTE *)(a2 + 12))
    IOSurfaceDecrementUseCount(v3);
  if (v3)
    CFRelease(v3);
  free((void *)a2);
}

uint64_t CMPhotoSampleBufferCopyIOSurfaceBacking(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _copyIOSurfaceBackingFromAttachmentBearer(a1, a2, a3, a4);
  return 0;
}

uint64_t _copyIOSurfaceBackingFromAttachmentBearer(uint64_t target, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  const void *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int valuePtr;

  v6 = (const void *)target;
  if (a2)
  {
    target = (uint64_t)CMGetAttachment((CMAttachmentBearerRef)target, CFSTR("IOSurface"), 0);
    if (target)
      target = (uint64_t)CFRetain((CFTypeRef)target);
    *a2 = target;
  }
  if (a3)
  {
    valuePtr = 0;
    target = (uint64_t)CMGetAttachment(v6, CFSTR("IOSurfaceDataOffset"), 0);
    if (target)
    {
      target = CFNumberGetValue((CFNumberRef)target, kCFNumberIntType, &valuePtr);
      v8 = valuePtr;
    }
    else
    {
      v8 = 0;
    }
    *a3 = v8;
  }
  if (a4)
  {
    v10 = 0;
    target = (uint64_t)CMGetAttachment(v6, CFSTR("IOSurfaceDataSize"), 0);
    if (target)
    {
      target = CFNumberGetValue((CFNumberRef)target, kCFNumberIntType, &v10);
      v9 = v10;
    }
    else
    {
      v9 = 0;
    }
    *a4 = v9;
  }
  return target;
}

uint64_t CMPhotoCopyBackingIOSurfaceFromStorage(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  if (a3)
  {
    *a3 = 0;
    if (a2 != 2)
      return 4294950303;
    _copyIOSurfaceBackingFromAttachmentBearer(a1, a3, a4, a5);
    if (!*a3)
      return 4294950303;
  }
  else if (a2 == 2)
  {
    _copyIOSurfaceBackingFromAttachmentBearer(a1, 0, a4, a5);
  }
  return 0;
}

uint64_t VideoQualityControllerClass_create_2(uint64_t a1, int a2, uint64_t a3, uint64_t a4, CFTypeRef cf)
{
  CFTypeID v10;
  float *v11;
  float *v12;
  float v13;
  int v14;
  unsigned int v15;
  float v16;
  CFTypeRef v17;
  uint64_t v18;
  int v20;
  unsigned int v21;
  float v22;

  if (cf)
  {
    v10 = CFGetTypeID(cf);
    if (v10 != CFDictionaryGetTypeID())
    {
      v18 = FigSignalErrorAt();
      goto LABEL_36;
    }
  }
  pthread_once(&_checkFigNoteTraceOnce_onceToken_5, (void (*)(void))_registerFigNoteTrace_5);
  v11 = (float *)malloc_type_calloc(1uLL, 0x38uLL, 0x106004071E7DF65uLL);
  v12 = v11;
  if (!v11)
  {
    v18 = 4294950305;
    goto LABEL_37;
  }
  *(_QWORD *)v11 = a3;
  *((_QWORD *)v11 + 1) = a4;
  *((_QWORD *)v11 + 2) = -1;
  v11[6] = -1.0;
  *((_BYTE *)v11 + 40) = 1;
  *((_BYTE *)v11 + 28) = 1;
  *((_DWORD *)v11 + 8) = a2;
  *((_DWORD *)v11 + 9) = 1;
  if (cf)
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("QualityValue")))
    {
      v22 = -1.0;
      if (!CMPhotoCFDictionaryGetFloatIfPresent((CFDictionaryRef)cf, CFSTR("QualityValue"), &v22)
        || v22 < 0.0
        || v22 > 1.0)
      {
        goto LABEL_38;
      }
      v13 = roundf(v22 * 1000.0);
      *(_DWORD *)(a1 + 28) = vcvtas_u32_f32(v22 * 1000.0);
      v12[6] = (float)v13 / 1000.0;
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("QPValue")))
    {
      v20 = 2;
      v21 = -1;
      if (!CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, CFSTR("QPValue"), &v21) || v21 > 0x33)
        goto LABEL_38;
      if (CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("PFrameQPOffsetValue")))
      {
        if (!CMPhotoCFDictionaryGetIntIfPresent((CFDictionaryRef)cf, CFSTR("PFrameQPOffsetValue"), &v20))
          goto LABEL_38;
        v14 = v20;
        v15 = v21;
        if (v20 + v21 >= 0x34)
          goto LABEL_38;
      }
      else
      {
        v14 = 2;
        v15 = v21;
      }
      *((_DWORD *)v12 + 4) = v15;
      *((_DWORD *)v12 + 5) = v14;
      *(_DWORD *)(a1 + 28) = v15;
      *((_BYTE *)v12 + 40) = 0;
      *((_BYTE *)v12 + 28) = 0;
    }
    if (a2 != 1635148593)
    {
      if (a2 != 1752589105
        || !CMPhotoReuseCompressionSessionForDifferentQuantizationMatrixPresetDisabled())
      {
LABEL_29:
        CMPhotoCFDictionaryGetBooleanIfPresent((CFDictionaryRef)cf, CFSTR("EnableQPMod"), (_BYTE *)v12 + 28);
        if (*((_DWORD *)v12 + 4) != -1)
          goto LABEL_33;
        goto LABEL_30;
      }
      *(float *)(a1 + 32) = v12[9];
LABEL_28:
      FigCFDictionaryGetInt32IfPresent();
      goto LABEL_29;
    }
    if (!CFDictionaryContainsKey((CFDictionaryRef)cf, CFSTR("EntropyMode")))
    {
LABEL_27:
      *(_DWORD *)(a1 + 33) = 3;
      goto LABEL_28;
    }
    CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("EntropyMode"));
    if (FigCFEqual() || FigCFEqual())
    {
      *(_BYTE *)(a1 + 32) = FigCFEqual();
      goto LABEL_27;
    }
LABEL_38:
    v18 = FigSignalErrorAt();
    goto LABEL_37;
  }
LABEL_30:
  if (v12[6] == -1.0)
  {
    v16 = CMPhotoGetHEIFQualityDefault(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)) * 1000.0;
    *(_DWORD *)(a1 + 28) = vcvtas_u32_f32(v16);
    v12[6] = (float)roundf(v16) / 1000.0;
  }
  if (!cf)
  {
    v17 = 0;
    goto LABEL_35;
  }
LABEL_33:
  v17 = CFRetain(cf);
LABEL_35:
  v18 = 0;
  *((_QWORD *)v12 + 6) = v17;
  *(_QWORD *)(a1 + 56) = v12;
LABEL_36:
  v12 = 0;
LABEL_37:
  QualityController_dispose(v12);
  return v18;
}

void VideoQualityControllerClass_dispose_1(uint64_t a1)
{
  QualityController_dispose(*(_QWORD **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
}

uint64_t VideoQualityControllerClass_setSessionProperties_1(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v4;
  int v5;
  const __CFDictionary *v6;
  int v8;
  const __CFDictionary *v9;
  int v10;
  int v11;

  v4 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v4 + 40))
  {
    FigCFDictionarySetFloat();
  }
  else
  {
    CMPhotoCFDictionarySetInt32(a2, CFSTR("InitialQPI"), *(_DWORD *)(v4 + 16));
    if (*(_BYTE *)(a1 + 37))
      CMPhotoCFDictionarySetInt32(a2, CFSTR("InitialQPP"), *(_DWORD *)(v4 + 20) + *(_DWORD *)(v4 + 16));
  }
  if (!*(_BYTE *)(v4 + 40) && (*(_DWORD *)(v4 + 32) == 1635148593 || *(_BYTE *)(a1 + 37)))
  {
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
  }
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 == 1752589105)
  {
    if (!*(_BYTE *)(v4 + 28))
      CMPhotoCFDictionarySetBoolean(a2, (const void *)*MEMORY[0x1E0CECF98], 0);
    v8 = *(_DWORD *)(v4 + 36);
    v11 = v8;
    v9 = *(const __CFDictionary **)(v4 + 48);
    if (v9 && CFDictionaryContainsKey(v9, CFSTR("QuantizationScalingMatrixPreset")))
    {
      CMPhotoCFDictionaryGetIntIfPresent(*(CFDictionaryRef *)(v4 + 48), CFSTR("QuantizationScalingMatrixPreset"), &v11);
      v8 = v11;
    }
    if ((v8 - 1) > 3)
      return 0;
    goto LABEL_22;
  }
  if (v5 == 1635148593)
  {
    v10 = 3;
    v6 = *(const __CFDictionary **)(v4 + 48);
    if (v6
      && CFDictionaryContainsKey(v6, CFSTR("QuantizationScalingMatrixPreset"))
      && (!CMPhotoCFDictionaryGetIntIfPresent(*(CFDictionaryRef *)(v4 + 48), CFSTR("QuantizationScalingMatrixPreset"), &v10)|| (v10 - 1) >= 4))
    {
      return FigSignalErrorAt();
    }
LABEL_22:
    FigCFDictionarySetInt32();
  }
  return 0;
}

uint64_t VideoQualityControllerClass_setTileProperties_0()
{
  return 0;
}

void QualityController_dispose(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    v2 = (const void *)a1[6];
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t CMPhotoCompressionSuggestedPaddingForOptions(CFDictionaryRef theDict, unint64_t *a2, unint64_t *a3, double a4, double a5)
{
  double v8;
  const __CFDictionary *Value;
  _BOOL4 v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  _BOOL4 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v25;
  double v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  CGRect rect;
  uint64_t v43;
  __int128 v44;
  double v45;
  double v46;
  double v47;
  double v48;

  if (!((unint64_t)a2 | (unint64_t)a3))
    return 0;
  v8 = a5;
  v43 = 0;
  v44 = 0uLL;
  v45 = 0.0;
  v46 = 0.0;
  v47 = a4;
  v48 = a5;
  if (!theDict)
  {
    v15 = 0.0;
    v16 = 1;
    v17 = a4;
    v18 = 0.0;
    goto LABEL_11;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("SourceCropRect"));
  if (Value)
  {
    memset(&rect, 0, sizeof(rect));
    v11 = CGRectMakeWithDictionaryRepresentation(Value, &rect);
    v12 = v8;
    v13 = a4;
    if (v11)
    {
      result = CMPhotoApplyCropRectToRect(&v45, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
      if ((_DWORD)result)
        return result;
      v13 = v47;
      v12 = v48;
    }
  }
  else
  {
    v12 = v8;
    v13 = a4;
  }
  result = CMPhotoGetTilingOption(theDict, vcvtad_u64_f64(v13), vcvtad_u64_f64(v12), 0, 0, &v43, (char *)&v43 + 1, (unint64_t *)&v44, 0);
  if (!(_DWORD)result)
  {
    v18 = v45;
    v15 = v46;
    v17 = v47;
    a5 = v48;
    v16 = (_BYTE)v43 == 0;
LABEL_11:
    v19 = round(v18);
    v20 = round(v15);
    v21 = round(v17);
    v22 = round(a5);
    if (v16)
    {
      v44 = kCMPhotoTilingDefaultTileSize;
      if (v22 <= 6144.0 && v21 <= 6144.0 || v21 * v22 <= 67108864.0)
      {
        v25 = 1024.0;
      }
      else
      {
        v44 = kCMPhotoTilingDefaultTileSizeAboveMaxPictureSize;
        v25 = 2048.0;
      }
      v26 = v25;
      v27 = v21 >= v25;
      if (v22 >= v26)
        v27 = 1;
      BYTE1(v43) = v27;
    }
    v28 = (unint64_t)v19;
    v29 = (unint64_t)v20;
    if ((unint64_t)v19 & 0x7F | (unint64_t)v20 & 0x3F)
    {
      v37 = 0;
      v38 = 0;
      if (!a2)
      {
LABEL_36:
        result = 0;
        if (a3)
          *a3 = v37;
        return result;
      }
    }
    else
    {
      v30 = round(a4);
      v31 = round(v8);
      v32 = (unint64_t)v21;
      v33 = (unint64_t)v22;
      if (BYTE1(v43))
      {
        v34 = (v32 + (unint64_t)v44 - 1) / (unint64_t)v44;
        v35 = v33 + *((_QWORD *)&v44 + 1) - 1;
        v33 = *((_QWORD *)&v44 + 1);
        v32 = v44;
        v36 = v35 / *((_QWORD *)&v44 + 1);
      }
      else
      {
        v34 = 1;
        v36 = 1;
      }
      v39 = v29 + v36 * v33;
      v40 = (double)(v28 + v34 * v32) - v30;
      if (v40 < 0.0)
        v40 = 0.0;
      v38 = (unint64_t)v40;
      v41 = (double)v39 - v31;
      if (v41 < 0.0)
        v41 = 0.0;
      v37 = (unint64_t)v41;
      if (!a2)
        goto LABEL_36;
    }
    *a2 = v38;
    goto LABEL_36;
  }
  return result;
}

uint64_t CMPhotoCompressionCreateNativePixelFormatArray()
{
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionWriteFileContainerFromImage(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, const void *a6)
{
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  uint64_t v15;
  __CFDictionary *MutableCopy;
  __CFDictionary *v17;
  uint64_t v18;
  uint64_t ContainerFromImageExt;
  __CFDictionary *v20;

  if (a2)
  {
    if (!a6)
      return FigSignalErrorAt();
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v14 = Mutable;
    v15 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("ContainerFormat"), a5);
    if ((_DWORD)v15 || (v15 = CMPhotoCFDictionarySetInt(v14, CFSTR("BackingType"), 3), (_DWORD)v15))
    {
      ContainerFromImageExt = v15;
    }
    else
    {
      CFDictionarySetValue(v14, CFSTR("BackingFileURL"), a6);
      if (!a3)
      {
        v17 = 0;
        v18 = 0;
        goto LABEL_10;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(v12, 0, a1);
      if (MutableCopy)
      {
        v17 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, CFSTR("Tiling"));
        CMPhotoCFDictionarySetInt(v17, CFSTR("MaxPixelSize"), a3);
        v18 = a2;
LABEL_10:
        ContainerFromImageExt = CMPhotoCompressionCreateContainerFromImageExt(v14, a1, a2, v17, v18, a4);
        CFRelease(v14);
        if (!v17)
          return ContainerFromImageExt;
        v20 = v17;
LABEL_12:
        CFRelease(v20);
        return ContainerFromImageExt;
      }
      ContainerFromImageExt = 4294950305;
    }
    v20 = v14;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoCompressionCreateContainerFromImageExt(const __CFDictionary *a1, CFDictionaryRef theDict, uint64_t a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef CompressionSession;
  const void *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v19[2];

  *(_QWORD *)v19 = 0;
  if (!a3 || !a1 || theDict && CFDictionaryContainsKey(theDict, CFSTR("DryRun")))
  {
    v17 = FigSignalErrorAt();
    v13 = 0;
  }
  else
  {
    CompressionSession = CMPhotoOneShotSessionPoolGetCompressionSession();
    v13 = CompressionSession;
    if (CompressionSession)
    {
      v14 = CMPhotoCompressionSessionOpenEmptyContainer((uint64_t)CompressionSession, a1);
      if (!v14)
      {
        v14 = CMPhotoCompressionSessionAddImage((uint64_t)v13, theDict, a3, (uint64_t)v19);
        if (!v14
          && (!a5 || (v14 = CMPhotoCompressionSessionAddThumbnail((uint64_t)v13, *(uint64_t *)v19, a4, a5)) == 0)
          && (!a6
           || (v14 = CMPhotoCompressionSessionAddMetadataFromImageProperties((uint64_t)v13, *(uint64_t *)v19, 0, a6)) == 0))
        {
          v14 = CMPhotoCompressionSessionCloseContainerAndCopyBacking((uint64_t)v13);
        }
      }
      v15 = v14;
      v16 = CMPhotoCompressionSessionCloseContainer((uint64_t)v13);
      if (v15)
        v17 = v15;
      else
        v17 = v16;
    }
    else
    {
      v17 = 4294950195;
    }
  }
  CMPhotoOneShotSessionPoolRecycleSession(v13);
  return v17;
}

uint64_t CMPhotoCompressionCreateDataContainerFromImage(const __CFDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  const __CFAllocator *v11;
  __CFDictionary *Mutable;
  const __CFDictionary *v13;
  uint64_t v14;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v16;
  uint64_t v17;
  uint64_t ContainerFromImageExt;
  const __CFDictionary *v19;
  char v21;

  if (a2 && a6)
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      return 4294950305;
    v13 = Mutable;
    v14 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("ContainerFormat"), a5);
    if ((_DWORD)v14 || (v14 = CMPhotoCFDictionarySetInt(v13, CFSTR("BackingType"), 1), (_DWORD)v14))
    {
      ContainerFromImageExt = v14;
    }
    else
    {
      if (!a3)
      {
        v16 = 0;
        v17 = 0;
LABEL_13:
        ContainerFromImageExt = CMPhotoCompressionCreateContainerFromImageExt(v13, a1, a2, v16, v17, a4);
        CFRelease(v13);
        if (!v16)
          return ContainerFromImageExt;
        v19 = v16;
LABEL_15:
        CFRelease(v19);
        return ContainerFromImageExt;
      }
      MutableCopy = CFDictionaryCreateMutableCopy(v11, 0, a1);
      if (MutableCopy)
      {
        v16 = MutableCopy;
        CFDictionaryRemoveValue(MutableCopy, CFSTR("Tiling"));
        v21 = 0;
        if (!CMPhotoCFDictionaryGetBooleanIfPresent(v16, CFSTR("ApplyTransform"), &v21) || !v21)
          CFDictionaryRemoveValue(v16, CFSTR("ImageOrientation"));
        CMPhotoCFDictionarySetInt(v16, CFSTR("MaxPixelSize"), a3);
        v17 = a2;
        goto LABEL_13;
      }
      ContainerFromImageExt = 4294950305;
    }
    v19 = v13;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize(unint64_t *a1, double a2, double a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;

  v4 = 0;
  v17 = 0;
  v18 = 0;
  v5 = (unint64_t)(a2 * a3);
  v6 = vcvtad_u64_f64(a2);
  v7 = vcvtad_u64_f64(a3);
  v8 = 1.79769313e308;
  v9 = 320;
  v10 = a2 / a3;
  while (1)
  {
    CMPhotoPixelBufferConstrainSizeToMaxSideLength(v6, v7, v9, 0, 0, 0, 1, &v17, 0, 0);
    v11 = v18 * v17;
    v12 = vabdd_f64((double)v17 / (double)v18, v10);
    if (v12 < v8)
    {
      v8 = v12;
      v4 = v9;
    }
    v13 = 200 * v11;
    if (200 * v11 >= v5 && v8 == 0.0)
      break;
    v14 = 100 * v11;
    if (v14 >= v5 && v13 < v5)
      return FigSignalErrorAt();
    if (v14 >= v5)
    {
      v9 = v4;
      break;
    }
    v9 += 16;
  }
  result = 0;
  if (a1)
    *a1 = v9;
  return result;
}

uint64_t CMPhotoAppleJPEGErrorToCMPhotoError(int a1)
{
  if ((a1 + 1) > 0xC)
    return 4294950304;
  else
    return dword_1A8295F40[a1 + 1];
}

uint64_t CMPhotoCreateMPOFromJFIFData(uint64_t a1, int a2, CFDataRef theData, CFDataRef *a4, uint64_t a5, char a6)
{
  const UInt8 *BytePtr;
  const UInt8 *v12;
  __CFArray *Mutable;
  __CFArray *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  const UInt8 *v18;
  CFIndex Length;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFDataRef *v23;
  uint64_t v24;
  const __CFData *v25;
  CFIndex v26;
  _QWORD *v27;
  const UInt8 *v28;
  CFIndex v29;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *Size;
  const __CFNumber *v32;
  uint64_t v33;
  uint64_t v34;
  const __CFNumber *v35;
  uint64_t v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  uint64_t v39;
  const __CFNumber *v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  CFDataRef v52;
  uint64_t v53;
  CFDataRef *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;

  if (a1)
  {
    if (theData)
    {
      if (a5)
      {
        if (a4)
        {
          BytePtr = CFDataGetBytePtr(theData);
          v12 = &BytePtr[CFDataGetLength(theData)];
          if (__PAIR64__(*(v12 - 1), *(v12 - 2)) == 0xD9000000FFLL)
          {
            Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
            if (!Mutable)
              return 4294950305;
            v14 = Mutable;
            v15 = _storeStreamLengths(a1, Mutable);
            if (!(_DWORD)v15)
            {
              v51 = a1;
              v52 = theData;
              v49 = a5 + 1;
              v53 = 16 * (a5 + 1) + 58;
              v54 = a4;
              v55 = a5;
              v56 = _writeInitialMPHeaderSegment;
              v58 = 0;
              v57 = 0;
              v59 = a2;
              *(_DWORD *)((char *)&v59 + 1) = 0;
              BYTE5(v59) = a6;
              v16 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
              v17 = v16;
              if (v16)
              {
                v16[5] = _mpoScannerCallback;
                v16[6] = &v51;
                v16[7] = 0;
                v16[8] = 0;
                v18 = CFDataGetBytePtr(theData);
                Length = CFDataGetLength(theData);
                v20 = CMPhotoJFIFScannerRun((uint64_t)v17, (unint64_t)v18, Length);
                if (!(_DWORD)v20)
                {
                  free(v17);
                  v21 = v57;
                  v22 = v58;
                  v15 = _storeStreamLengths(a1, v14);
                  if (!(_DWORD)v15)
                  {
                    v47 = v22;
                    v48 = v21;
                    v23 = a4;
                    v24 = a5;
                    do
                    {
                      v25 = *v23;
                      if (a2)
                      {
                        v26 = CFDataGetLength(*v23);
                        v51 = 0;
                        CFDataGetBytePtr(v25);
                        v15 = CMByteStreamAppend();
                        if ((_DWORD)v15)
                          goto LABEL_42;
                        if (v51 != v26)
                          goto LABEL_41;
                      }
                      else
                      {
                        v51 = a1;
                        v52 = v25;
                        v53 = 0;
                        v54 = a4;
                        v59 = 0x100000000;
                        v55 = a5;
                        v57 = 0;
                        v58 = 0;
                        v56 = 0;
                        v27 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
                        v17 = v27;
                        if (!v27)
                          goto LABEL_43;
                        v27[5] = _mpoScannerCallback;
                        v27[6] = &v51;
                        v27[7] = 0;
                        v27[8] = 0;
                        v28 = CFDataGetBytePtr(v25);
                        v29 = CFDataGetLength(v25);
                        v20 = CMPhotoJFIFScannerRun((uint64_t)v17, (unint64_t)v28, v29);
                        if ((_DWORD)v20)
                          goto LABEL_44;
                        free(v17);
                      }
                      v15 = _storeStreamLengths(a1, v14);
                      if ((_DWORD)v15)
                        goto LABEL_42;
                      v23 += 2;
                      --v24;
                    }
                    while (v24);
                    v51 = 0;
                    if (CFArrayGetCount(v14) == a5 + 2)
                    {
                      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v14, 0);
                      Size = CMPhotoCFNumberGetSize(ValueAtIndex);
                      if (((unint64_t)Size & 0x8000000000000000) == 0)
                      {
                        if (a5 == -1)
                        {
LABEL_37:
                          v45 = 0;
                          goto LABEL_39;
                        }
                        v32 = Size;
                        v33 = 0;
                        v34 = (uint64_t)Size + v47 + 4;
                        v35 = (const __CFNumber *)((char *)Size + v48);
                        while (1)
                        {
                          v36 = v33 + 1;
                          v37 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, v33 + 1);
                          v38 = CMPhotoCFNumberGetSize(v37);
                          v39 = v38 - v32;
                          if ((uint64_t)v38 <= (uint64_t)v32 || v39 >= 0x7FFFFFFF)
                            break;
                          v40 = v38;
                          v61 = bswap32(v39);
                          v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                          if (!v41)
                            goto LABEL_38;
                          v15 = v41(a1, 4, v34, &v61, &v51);
                          if ((_DWORD)v15)
                            goto LABEL_42;
                          if (v51 != 4)
                            break;
                          v42 = v32 - v35;
                          if (!v33)
                            v42 = 0;
                          if (v42 > 2147483646)
                            break;
                          v60 = bswap32(v42);
                          v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                          if (!v43)
                          {
LABEL_38:
                            v45 = 4294954514;
                            goto LABEL_39;
                          }
                          v44 = v34 + 4;
                          v15 = v43(a1, 4, v44, &v60, &v51);
                          if ((_DWORD)v15)
                            goto LABEL_42;
                          if (v51 != 4)
                            break;
                          v34 = v44 + 12;
                          ++v33;
                          v32 = v40;
                          if (v49 == v36)
                            goto LABEL_37;
                        }
                      }
LABEL_41:
                      v15 = FigSignalErrorAt();
                      goto LABEL_42;
                    }
                    v45 = 4294950306;
                    goto LABEL_39;
                  }
                  goto LABEL_42;
                }
LABEL_44:
                v45 = v20;
              }
              else
              {
LABEL_43:
                v45 = 4294950305;
              }
              if (v17)
                free(v17);
              goto LABEL_39;
            }
LABEL_42:
            v45 = v15;
LABEL_39:
            CFRelease(v14);
            return v45;
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t _storeStreamLengths(uint64_t a1, __CFArray *a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, void **);
  uint64_t v5;
  void *v6;
  void *value;

  value = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    return 4294954514;
  v5 = v4(CMBaseObject, *MEMORY[0x1E0CA2068], *MEMORY[0x1E0C9AE00], &value);
  v6 = value;
  if (!(_DWORD)v5)
  {
    CFArrayAppendValue(a2, value);
    v6 = value;
  }
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t _writeInitialMPHeaderSegment(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6)
{
  unsigned int v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;

  v6 = 16 * (a4 + 1);
  *(_WORD *)result = -7425;
  *(_WORD *)(result + 2) = bswap32(v6 + 56) >> 16;
  *(_DWORD *)(result + 4) = 4608077;
  if (a5)
    *a5 = a2 + 8;
  *(_QWORD *)(result + 8) = 0x80000002A004D4DLL;
  *(_DWORD *)(result + 16) = 11535104;
  *(_WORD *)(result + 20) = 1792;
  *(_QWORD *)(result + 22) = 0x3030313004000000;
  *(_QWORD *)(result + 30) = 0x1000000040001B0;
  *(_DWORD *)(result + 38) = bswap32(a4 + 1);
  *(_DWORD *)(result + 42) = 117441200;
  *(_DWORD *)(result + 46) = bswap32(v6);
  *(_QWORD *)(result + 50) = 838860800;
  if (a6)
    *a6 = a2 + 58;
  *(_QWORD *)(result + 58) = 768;
  *(_QWORD *)(result + 66) = 0;
  if (a4)
  {
    v7 = (_QWORD *)(result + 74);
    v8 = (unsigned int *)(a3 + 8);
    do
    {
      v9 = *v8;
      v8 += 4;
      *v7 = bswap32(v9);
      v7[1] = 0;
      v7 += 2;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t CMPhotoJFIFScannerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t result;

  if (!(a1 | a3))
    return FigSignalErrorAt();
  if (!a5)
    return 0;
  v10 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
  if (!v10)
    return 4294950305;
  v11 = v10;
  result = 0;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  v11[8] = a4;
  *a5 = v11;
  return result;
}

uint64_t _mpoScannerCallback(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  const UInt8 *BytePtr;
  const UInt8 *v14;
  char v15;
  CFIndex v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  if (!*((_BYTE *)a5 + 68) && (a3 + 30) <= 0xFDu && *((_BYTE *)a5 + 67) != 0)
  {
    MEMORY[0x1E0C80A78]();
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))a5[5])((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a5[3], a5[4], a5 + 6, a5 + 7);
    LODWORD(result) = CMByteStreamAppend();
    if ((_DWORD)result)
      goto LABEL_44;
    if (v17 != a5[2])
    {
LABEL_41:
      LODWORD(result) = FigSignalErrorAt();
      goto LABEL_44;
    }
    *((_BYTE *)a5 + 68) = 1;
    if (*((_BYTE *)a5 + 69))
    {
      v12 = *a5;
      v22 = 0;
      v19 = -7425;
      v20 = 0;
      v21 = 34;
      if (!v12)
      {
        LODWORD(result) = -16990;
        goto LABEL_44;
      }
      v18 = 0;
      LODWORD(result) = CMByteStreamAppend();
      if ((_DWORD)result)
        goto LABEL_44;
      if (v18 != 4)
        goto LABEL_40;
      LODWORD(result) = CMByteStreamAppend();
      if ((_DWORD)result)
        goto LABEL_44;
      if (v18 != 28)
        goto LABEL_40;
      LODWORD(result) = CMByteStreamAppend();
      if ((_DWORD)result)
        goto LABEL_44;
      if (v18 != 4)
      {
LABEL_40:
        LODWORD(result) = -16991;
        goto LABEL_44;
      }
    }
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)a5[1]);
  v14 = BytePtr;
  if (a3 == 226 && a4 >= 6uLL && !strcmp((const char *)&BytePtr[a2 + 4], "MPF"))
  {
    if (*((_BYTE *)a5 + 64))
    {
LABEL_34:
      v15 = 0;
      LODWORD(result) = 0;
      goto LABEL_35;
    }
    goto LABEL_41;
  }
  LODWORD(result) = CMByteStreamAppend();
  if ((_DWORD)result)
  {
LABEL_44:
    v15 = 0;
    goto LABEL_35;
  }
  if (v17 != a4 + 2)
    goto LABEL_41;
  v15 = 0;
  LODWORD(result) = 0;
  switch(a3)
  {
    case 216:
      v15 = 0;
      LODWORD(result) = 0;
      *((_BYTE *)a5 + 67) = 1;
      break;
    case 217:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      break;
    case 218:
      if (!*((_BYTE *)a5 + 68))
        goto LABEL_41;
      v16 = CFDataGetLength((CFDataRef)a5[1]) - (a2 + a4 + 2);
      LODWORD(result) = CMByteStreamAppend();
      if ((_DWORD)result)
        goto LABEL_44;
      if (v17 != v16)
        goto LABEL_41;
      LODWORD(result) = 0;
      v15 = 1;
      break;
    case 224:
      if (a4 < 0x10)
        goto LABEL_34;
      LODWORD(result) = strcmp((const char *)&v14[a2 + 4], "JFIF");
      if ((_DWORD)result)
        goto LABEL_34;
      v15 = 0;
      *((_BYTE *)a5 + 65) = 1;
      break;
    case 225:
      if (a4 < 0x10uLL)
        goto LABEL_34;
      LODWORD(result) = memcmp(&v14[a2 + 4], "Exif", 6uLL);
      if ((_DWORD)result)
        goto LABEL_34;
      v15 = 0;
      *((_BYTE *)a5 + 66) = 1;
      break;
    default:
      LODWORD(result) = 0;
      break;
  }
LABEL_35:
  if ((v15 & ((_DWORD)result == 0)) != 0)
    return 4294950191;
  else
    return result;
}

uint64_t CMPhotoJFIFScannerRun(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD);
  __int16 v12;
  unsigned __int16 v13;
  uint64_t (*v14)(uint64_t, unsigned __int8 *, _QWORD, _QWORD, _QWORD);
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t (*v31)(uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD);
  unint64_t v32;

  result = 4294950306;
  if (!a1 || !a2)
    return result;
  if (*(_DWORD *)a1)
    return 0;
  v6 = a3;
  if (!a3)
    goto LABEL_92;
  v32 = ~a2;
  v7 = (unsigned __int8 *)a2;
  v8 = a3;
LABEL_6:
  while (2)
  {
    switch(*(_DWORD *)(a1 + 4))
    {
      case 0:
        if (*v7 != 255)
          goto LABEL_94;
        --v8;
        ++v7;
        *(_DWORD *)(a1 + 4) = 1;
        if (!v8)
          goto LABEL_92;
        continue;
      case 1:
        v10 = *v7++;
        v9 = v10;
        --v8;
        if (v10 != 216)
        {
          *(_BYTE *)(a1 + 24) = v9;
          *(_DWORD *)(a1 + 4) = 2;
          *(_BYTE *)(a1 + 28) = v9 == 218;
          if (!v8)
            goto LABEL_92;
          continue;
        }
        *(_BYTE *)(a1 + 24) = -40;
        v11 = *(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(a1 + 40);
        if (v11)
        {
          result = v11(a1, &v7[*(_QWORD *)(a1 + 16) - a2 - 2], 216, 0, *(_QWORD *)(a1 + 48));
          if ((_DWORD)result == -17105)
            goto LABEL_92;
          if ((_DWORD)result)
            goto LABEL_95;
        }
        goto LABEL_79;
      case 2:
        v12 = *v7++;
        *(_WORD *)(a1 + 26) = v12 << 8;
        --v8;
        *(_DWORD *)(a1 + 4) = 3;
        if (!v8)
          goto LABEL_92;
        continue;
      case 3:
        v13 = *(_WORD *)(a1 + 26) | *v7;
        *(_WORD *)(a1 + 26) = v13;
        if (v13 < 2u)
        {
LABEL_94:
          result = 4294950194;
        }
        else
        {
          *(_WORD *)(a1 + 26) = v13 - 2;
          ++v7;
          v14 = *(uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD, _QWORD, _QWORD))(a1 + 40);
          if (!v14)
            goto LABEL_21;
          result = v14(a1, &v7[*(_QWORD *)(a1 + 16) - a2 - 4], *(unsigned __int8 *)(a1 + 24), v13, *(_QWORD *)(a1 + 48));
          if ((_DWORD)result == -17105)
            goto LABEL_92;
          if (!(_DWORD)result)
          {
LABEL_21:
            --v8;
            *(_DWORD *)(a1 + 4) = 4;
            if (!v8)
              goto LABEL_92;
            continue;
          }
        }
        goto LABEL_95;
      case 4:
        v15 = *(unsigned __int16 *)(a1 + 26);
        if (v8 >= v15)
          v16 = *(unsigned __int16 *)(a1 + 26);
        else
          v16 = v8;
        v8 -= v16;
        v7 += v16;
        v17 = v15 - v16;
        *(_WORD *)(a1 + 26) = v17;
        if (v17)
          goto LABEL_86;
        if (!*(_BYTE *)(a1 + 28))
          goto LABEL_79;
        *(_QWORD *)(a1 + 32) = &v7[*(_QWORD *)(a1 + 16) - a2];
        *(_DWORD *)(a1 + 4) = 5;
        if (!v8)
          goto LABEL_92;
        continue;
      case 5:
        if (!*(_QWORD *)(a1 + 56))
        {
          if (v8 < 2)
          {
            v8 = 1;
            goto LABEL_89;
          }
LABEL_71:
          if (v7[v8 - 2] == 255 && v7[v8 - 1] == 217)
          {
            v7 += v8;
            goto LABEL_74;
          }
          if (*v7 == 255)
          {
            v30 = v7[1];
            if (v30 != 218)
            {
              if (v30 == 217)
              {
                v7 += 2;
                v8 -= 2;
                goto LABEL_83;
              }
              goto LABEL_89;
            }
LABEL_79:
            *(_DWORD *)(a1 + 4) = 0;
            if (!v8)
              goto LABEL_92;
          }
          else
          {
LABEL_89:
            --v8;
            ++v7;
            if (!v8)
              goto LABEL_92;
          }
          continue;
        }
        v18 = 0;
        v19 = *(_DWORD *)(a1 + 8);
        v20 = v19;
        break;
      case 6:
        goto LABEL_92;
      default:
        goto LABEL_86;
    }
    break;
  }
  while (2)
  {
    v21 = 0;
    v22 = 1;
    while (v20 == 1)
    {
      v23 = v7[v21];
      if (v23 == (*(unsigned __int8 *)(a1 + 12) | 0xD0))
      {
        result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(a1 + 56))(a1, &v7[v32 + v21 + *(_QWORD *)(a1 + 16)], &v7[v32 + v21 + *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 32)]);
        if ((_DWORD)result)
          goto LABEL_95;
        v19 = 0;
        v26 = &v7[v21];
        *(_BYTE *)(a1 + 12) = (*(_BYTE *)(a1 + 12) + 1) & 7;
LABEL_50:
        *(_DWORD *)(a1 + 8) = v19;
        v20 = v19;
        goto LABEL_51;
      }
      if (v23 != 217)
      {
        if (v23 == 218)
          v19 = 2;
        else
          v19 = 0;
        v26 = &v7[v21];
        goto LABEL_50;
      }
      *(_BYTE *)(a1 + 12) = 2;
      ++v21;
      --v22;
      v20 = 1;
      v18 = 1;
      if (v8 + v22 < 2)
      {
        v8 = 0;
        v7 += v21;
LABEL_83:
        v31 = *(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(a1 + 40);
        if (v31)
        {
          result = v31(a1, &v7[*(_QWORD *)(a1 + 16) - a2 - 2], 217, 0, *(_QWORD *)(a1 + 48));
          if ((_DWORD)result)
          {
LABEL_95:
            *(_DWORD *)a1 = result;
            return result;
          }
        }
        *(_DWORD *)(a1 + 4) = 6;
LABEL_86:
        if (!v8)
          goto LABEL_92;
        goto LABEL_6;
      }
    }
    if (v20 != 2)
    {
      if (!v20)
      {
        v24 = v6;
        v25 = &v7[v21];
        v26 = (unsigned __int8 *)memchr(&v7[v21], 255, v8 - v21);
        if (!v26)
          goto LABEL_62;
        v19 = 1;
        v6 = v24;
        goto LABEL_50;
      }
      v26 = &v7[v21];
      if (!&v7[v21])
      {
        v24 = v6;
        v25 = 0;
        goto LABEL_62;
      }
LABEL_51:
      v27 = v7 - v26 + v8;
      v8 = v27 - 1;
      if (v27)
        v7 = v26 + 1;
      else
        v7 = v26;
      if (v27 < 2)
      {
        if (!v18)
          goto LABEL_92;
LABEL_74:
        v8 = 0;
        goto LABEL_83;
      }
      continue;
    }
    break;
  }
  v24 = v6;
  v25 = &v7[v21];
LABEL_62:
  v8 -= v21;
  if (v19 == 2)
    v28 = v8;
  else
    v28 = 0;
  if (v19 == 2)
    v29 = 0;
  else
    v29 = v8;
  v7 = &v25[v29];
  if (!v18 && v28 > 1)
  {
    v6 = v24;
    goto LABEL_71;
  }
  v6 = v24;
  if (v18)
  {
    v8 = v28;
    goto LABEL_83;
  }
  if (v28)
    goto LABEL_89;
LABEL_92:
  result = 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) += v6;
  return result;
}

uint64_t CMPhotoJFIFScannerDispose(void *a1)
{
  free(a1);
  return 0;
}

uint64_t CMPhotoCreateDataFromJFIFSampleBufferAndInjectAppMarkers(const __CFAllocator *a1, CMSampleBufferRef sbuf, uint64_t a3, const __CFData **a4, char *a5, CFDataRef *a6)
{
  uint64_t result;
  uint64_t v13;
  char *v14;
  const __CFData **v15;
  uint64_t v16;
  char v17;
  const __CFData *v18;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v20;
  size_t DataLength;
  CFIndex v22;
  __CFData *Mutable;
  __CFData *v24;
  _QWORD *v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  _QWORD v31[3];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  UInt8 *MutableBytePtr;

  if (!a4)
    return CMPhotoDataCreateFromSampleBuffer(a1, sbuf, 1, a6);
  result = 4294950306;
  if (a5 && sbuf && a6)
  {
    if (a3 >= 1)
    {
      v13 = 0;
      v14 = a5;
      v15 = a4;
      v16 = a3;
      while (1)
      {
        v17 = *v14++;
        if ((v17 & 0xF0) != 0xE0)
          return 4294950306;
        v18 = *v15++;
        v13 += CFDataGetLength(v18);
        if (!--v16)
          goto LABEL_12;
      }
    }
    v13 = 0;
LABEL_12:
    DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
    if (!DataBuffer)
      return 4294950306;
    v20 = DataBuffer;
    DataLength = CMBlockBufferGetDataLength(DataBuffer);
    v22 = v13 + 4 * a3 + DataLength;
    Mutable = CFDataCreateMutable(a1, v22);
    if (Mutable)
    {
      v24 = Mutable;
      CFDataSetLength(Mutable, v22);
      v31[0] = a3;
      v31[1] = a4;
      v31[2] = a5;
      v32 = 0;
      v33 = 0u;
      v34 = 0u;
      MutableBytePtr = CFDataGetMutableBytePtr(v24);
      v25 = malloc_type_calloc(1uLL, 0x48uLL, 0x10800409512512CuLL);
      if (v25)
      {
        v26 = v25;
        v25[5] = _appInjectionScannerCallback;
        v25[6] = v31;
        v25[7] = 0;
        v25[8] = 0;
        *a6 = v24;
        if (DataLength)
        {
          v27 = 0;
          do
          {
            v30 = 0;
            if (CMBlockBufferGetDataPointer(v20, v27, (size_t *)&v34, 0, &v30))
              break;
            v28 = v33;
            *((_QWORD *)&v34 + 1) = v30;
            *((_QWORD *)&v33 + 1) = v33;
            v27 = v33;
            if (!(_BYTE)v32)
            {
              if (CMPhotoJFIFScannerRun((uint64_t)v26, (unint64_t)v30, v34))
                break;
              v28 = *((_QWORD *)&v33 + 1);
              v27 = v33;
            }
            v29 = v34 - (v27 - v28);
            if ((_QWORD)v34 != v27 - v28)
            {
              memcpy(MutableBytePtr, (const void *)(*((_QWORD *)&v34 + 1) + v27 - v28), v34 - (v27 - v28));
              v27 = v33 + v29;
              *(_QWORD *)&v33 = v33 + v29;
              MutableBytePtr += v29;
            }
          }
          while (v27 < DataLength);
        }
        free(v26);
        return 0;
      }
      CFRelease(v24);
    }
    return 4294950305;
  }
  return result;
}

uint64_t _appInjectionScannerCallback(uint64_t a1, unint64_t a2, int a3, unsigned int a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  size_t v11;
  uint64_t v12;
  size_t Length;
  const UInt8 *BytePtr;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t result;

  v6 = *(_QWORD *)(a5 + 32);
  v7 = *(_QWORD *)(a5 + 40);
  if (v6 < v7 || v6 >= *(_QWORD *)(a5 + 48) + v7)
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
  }
  else
  {
    v11 = a2 - v6;
    if (a2 > v6)
    {
      memcpy(*(void **)(a5 + 64), (const void *)(*(_QWORD *)(a5 + 56) + v6 - v7), v11);
      *(_QWORD *)(a5 + 64) += v11;
      *(_QWORD *)(a5 + 32) += v11;
    }
    if (*(_BYTE *)(a5 + 25) && (a3 + 30) <= 0xFDu && !*(_BYTE *)(a5 + 24))
    {
      if (*(uint64_t *)a5 >= 1)
      {
        v12 = 0;
        do
        {
          Length = CFDataGetLength(*(CFDataRef *)(*(_QWORD *)(a5 + 8) + 8 * v12));
          BytePtr = CFDataGetBytePtr(*(CFDataRef *)(*(_QWORD *)(a5 + 8) + 8 * v12));
          **(_WORD **)(a5 + 64) = bswap32(*(unsigned __int8 *)(*(_QWORD *)(a5 + 16) + v12) | 0xFF00) >> 16;
          *(_WORD *)(*(_QWORD *)(a5 + 64) + 2) = bswap32(Length + 2) >> 16;
          memcpy((void *)(*(_QWORD *)(a5 + 64) + 4), BytePtr, Length);
          *(_QWORD *)(a5 + 64) += Length + 4;
          ++v12;
        }
        while (v12 < *(_QWORD *)a5);
      }
      *(_BYTE *)(a5 + 24) = 1;
    }
    if (a3 == 216)
      *(_BYTE *)(a5 + 25) = 1;
    v15 = *(_QWORD *)(a5 + 40);
    v16 = *(_QWORD *)(a5 + 32);
    if (a2 + a4 - v16 + 2 >= *(_QWORD *)(a5 + 48) + v15 - v16)
      v17 = *(_QWORD *)(a5 + 48) + v15 - v16;
    else
      v17 = a2 + a4 - v16 + 2;
    if (v17)
    {
      memcpy(*(void **)(a5 + 64), (const void *)(*(_QWORD *)(a5 + 56) + v16 - v15), v17);
      *(_QWORD *)(a5 + 64) += v17;
      *(_QWORD *)(a5 + 32) += v17;
    }
  }
  if (*(_BYTE *)(a5 + 24))
    return 4294950191;
  else
    return 0;
}

uint64_t CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, unint64_t *a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *);
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned int (*v27)(uint64_t, size_t, uint64_t, unsigned __int8 *, uint64_t *);
  uint64_t (*v30)(void);
  uint64_t v32;
  uint64_t v34;
  unsigned __int8 __s1;
  unsigned __int8 v36;
  unsigned __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  result = 4294950306;
  if (a3 < 1 || !a4)
    return result;
  if (a5)
  {
    if (!a6)
      return result;
    v13 = a3;
    v14 = a6;
    v15 = a5;
    do
    {
      v17 = *v14++;
      v16 = v17;
      if (v17 > 0xFF || v16 && !*v15)
        return 4294950306;
      ++v15;
      --v13;
    }
    while (v13);
  }
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
  if (!v18)
    return 4294950194;
  v19 = a3;
  while (1)
  {
    v20 = v18(a1, 4, a2, &__s1, &v34);
    result = 4294950194;
    if (v20 || v34 != 4 || __s1 != 255)
      return result;
    v21 = v36;
    if (v36 != 216)
      break;
    a2 += 2;
LABEL_41:
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
    if (!v18)
      return 4294950194;
  }
  if (v36 == 255)
  {
    ++a2;
    goto LABEL_41;
  }
  if (v36 == 218)
    return 0;
  v22 = 0;
  v23 = bswap32(v37) >> 16;
  v24 = a2 + 4;
  v32 = a2;
  while (a6)
  {
    v25 = a6[v22];
    if (v21 == *(unsigned __int8 *)(a4 + v22) && v25 + 2 <= v23)
    {
      if (!v25)
        goto LABEL_43;
      v27 = *(unsigned int (**)(uint64_t, size_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 8);
      if (!v27)
        return 4294950194;
      if (v27(a1, v25, v24, &__s1, &v34) || v34 != v25)
        return 4294950194;
      if (!memcmp(&__s1, (const void *)a5[v22], v25))
      {
        v30 = *(uint64_t (**)(void))(a7 + 16);
        goto LABEL_44;
      }
    }
LABEL_37:
    if (v19 == ++v22)
      goto LABEL_38;
  }
  if (v21 != *(unsigned __int8 *)(a4 + v22) || v23 < 2)
    goto LABEL_37;
LABEL_43:
  v30 = *(uint64_t (**)(void))(a7 + 16);
LABEL_44:
  result = v30();
  if ((_DWORD)result == -17105)
    return 0;
  if (!(_DWORD)result)
  {
LABEL_38:
    a2 = v32 + v23 + 2;
    goto LABEL_41;
  }
  return result;
}

uint64_t CMPhotoFindMarkersWithSignaturesInJFIFByteStream(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _QWORD *a5, unint64_t *a6, void *a7)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  if (!a7)
    return 4294950306;
  if (a3 >= 1)
    bzero(a7, 16 * a3);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = __CMPhotoFindMarkersWithSignaturesInJFIFByteStream_block_invoke;
  v17[3] = &unk_1E53F6A38;
  v17[4] = &v18;
  v17[5] = a7;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, a3, a4, a5, a6, (uint64_t)v17);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    v15 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
  }
  else if (*((_BYTE *)v19 + 24))
  {
    v15 = 0;
  }
  else
  {
    v15 = 4294950303;
  }
  _Block_object_dispose(&v18, 8);
  return v15;
}

uint64_t CMPhotoJFIFCreateStrippedBufferFromByteStream(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, _QWORD *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v15;
  const void *v16;
  _QWORD *v17;
  const __CFAllocator *v18;
  uint64_t Empty;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *);
  uint64_t appended;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  OpaqueCMBlockBuffer *v37;
  CMBlockBufferRef blockBufferOut[2];

  v35[0] = a8;
  v35[1] = v35;
  blockBufferOut[1] = *(CMBlockBufferRef *)MEMORY[0x1E0C80C00];
  v37 = 0;
  blockBufferOut[0] = 0;
  v15 = a4;
  v16 = (const void *)MEMORY[0x1E0C80A78]();
  v17 = &v35[-2 * v15];
  v18 = CFGetAllocator(v16);
  Empty = CMBlockBufferCreateEmpty(v18, a4 + 1, 0, blockBufferOut);
  if ((_DWORD)Empty
    || ((Empty = CMPhotoFindMarkersWithSignaturesInJFIFByteStream(a1, a2, a4, a5, a6, a7, &v35[-2 * v15]), (_DWORD)Empty)
      ? (v20 = (_DWORD)Empty == -16993)
      : (v20 = 1),
        !v20))
  {
    v33 = Empty;
    goto LABEL_34;
  }
  if (a4 >= 1)
  {
    v21 = v17 + 1;
    v22 = v15;
    do
    {
      if (*v21)
      {
        v23 = *v21 + 4;
        *(v21 - 1) -= 4;
        *v21 = v23;
      }
      v21 += 2;
      --v22;
    }
    while (v22);
  }
  v24 = a2 + a3;
  if (a2 >= a2 + a3)
  {
LABEL_32:
    v33 = 0;
    *(_QWORD *)v35[0] = blockBufferOut[0];
    blockBufferOut[0] = 0;
    return v33;
  }
  v25 = v17 + 1;
  while (1)
  {
    if (a4 < 1)
    {
      v26 = 0;
      v29 = v24;
    }
    else
    {
      v26 = 0;
      v27 = v15;
      v28 = v25;
      v29 = v24;
      do
      {
        if (*v28 && *(v28 - 1) >= a2 && *(v28 - 1) < v29)
        {
          v29 = *(v28 - 1);
          v26 = *v28;
        }
        v28 += 2;
        --v27;
      }
      while (v27);
    }
    v30 = v29 - a2;
    if (v29 - a2 < 0)
    {
      v33 = 4294950190;
      goto LABEL_34;
    }
    if (v29 == a2)
      goto LABEL_31;
    v36 = 0;
    v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 32);
    if (!v31)
    {
      v33 = 4294954514;
      goto LABEL_38;
    }
    appended = v31(a1, v30, a2, &v37, &v36);
    if ((_DWORD)appended)
      goto LABEL_42;
    if (v36 != v30)
      break;
    appended = CMBlockBufferAppendBufferReference(blockBufferOut[0], v37, 0, 0, 0);
    if ((_DWORD)appended)
      goto LABEL_42;
    if (v37)
    {
      CFRelease(v37);
      v37 = 0;
    }
    a2 += v36;
LABEL_31:
    a2 += v26;
    if (a2 >= v24)
      goto LABEL_32;
  }
  appended = FigSignalErrorAt();
LABEL_42:
  v33 = appended;
LABEL_38:
  if (v37)
    CFRelease(v37);
LABEL_34:
  if (blockBufferOut[0])
    CFRelease(blockBufferOut[0]);
  return v33;
}

uint64_t CMPhotoCopyImageCountAndRangesFromJFIFByteStream(uint64_t a1, uint64_t a2, size_t *a3, _QWORD *a4)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, unint64_t, unsigned __int16 *, uint64_t *);
  uint64_t v22;
  unsigned int v23;
  size_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *);
  unsigned __int16 v33;
  unsigned int v34;
  __int16 v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  __int16 v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  BOOL v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *);
  _QWORD *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  BOOL v57;
  BOOL i;
  _BOOL4 v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t, char *, uint64_t *);
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *);
  size_t v67;
  size_t *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD v75[7];
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  unsigned __int16 v93;
  unsigned __int16 v94;
  unsigned int v95;
  unsigned int v96;
  char v97;
  unsigned __int8 v98;
  unsigned __int16 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v90 = 4;
  v91 = &kCMPhotoMPFIdentificationString;
  v86 = 0;
  v87 = &v86;
  v88 = 0x2000000000;
  v89 = 0;
  v82 = 0;
  v83 = &v82;
  v84 = 0x2000000000;
  v85 = 0;
  v78 = 0;
  v79 = &v78;
  v80 = 0x2000000000;
  v81 = 0;
  v77 = 0;
  *a3 = 1;
  *a4 = 0;
  v76 = -30;
  v75[0] = MEMORY[0x1E0C809B0];
  v75[1] = 0x40000000;
  v75[2] = __CMPhotoCopyImageCountAndRangesFromJFIFByteStream_block_invoke;
  v75[3] = &unk_1E53F6AB0;
  v75[4] = &v86;
  v75[5] = &v82;
  v75[6] = &v78;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v76, &v91, &v90, (uint64_t)v75);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    v13 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_118;
  }
  if (!*((_BYTE *)v87 + 24))
    goto LABEL_117;
  v74 = v79[3] - 4;
  if (v74 >= 8)
  {
    v9 = v83[3];
    v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 8);
    if (v10)
    {
      v71 = a2;
      v72 = v9;
      v11 = v9 + 4;
      v12 = 0;
      v13 = 4294950194;
      if (v10(a1, 8, v9 + 4, &v93, &v77) || v77 != 8)
        goto LABEL_119;
      v14 = v93;
      v15 = v94;
      v16 = bswap32(v94) >> 16;
      if (v93 == 19789)
        v15 = v16;
      if (v15 != 42)
        goto LABEL_118;
      v12 = 0;
      v17 = bswap32(v95);
      if (v93 == 19789)
        v18 = v17;
      else
        v18 = v95;
      v19 = v74 - v18;
      if (v74 <= v18)
        goto LABEL_119;
      v20 = v19 - 2;
      if (v19 < 2)
        goto LABEL_119;
      v21 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v21)
        goto LABEL_118;
      v22 = v11 + v18;
      v12 = 0;
      if (v21(a1, 2, v11 + v18, &v93, &v77) || v77 != 2)
        goto LABEL_119;
      v23 = bswap32(v93) >> 16;
      if (v14 != 19789)
        LOWORD(v23) = v93;
      if (v20 < 12 * (unint64_t)(unsigned __int16)v23)
      {
LABEL_118:
        v12 = 0;
        goto LABEL_119;
      }
      if ((_WORD)v23)
      {
        v69 = a3;
        v70 = a4;
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v73 = 0;
        v27 = 0;
        v28 = v22 + 2;
        v29 = (unsigned __int16)v23 - 1;
        while (1)
        {
          v30 = v29;
          v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v31)
            goto LABEL_115;
          if (v31(a1, 12, v28, &v93, &v77) || v77 != 12)
            goto LABEL_115;
          v33 = v93;
          v34 = bswap32(v93) >> 16;
          if (v14 == 19789)
            v33 = v34;
          if (v33 == 45058)
          {
            v40 = v94;
            v41 = bswap32(v94) >> 16;
            if (v14 == 19789)
              v40 = v41;
            if (v40 != 7)
              goto LABEL_115;
            v42 = bswap32(v95);
            if (v14 == 19789)
              v43 = v42;
            else
              v43 = v95;
            v73 = v43;
            v44 = bswap32(v96);
            if (v14 == 19789)
              v26 = v44;
            else
              v26 = v96;
            v27 = 1;
          }
          else if (v33 == 45057)
          {
            v35 = v94;
            v36 = bswap32(v94) >> 16;
            if (v14 == 19789)
              v35 = v36;
            if (v35 != 4)
              goto LABEL_115;
            v37 = v95;
            v38 = bswap32(v95);
            if (v14 == 19789)
              v37 = v38;
            if (v37 != 1)
              goto LABEL_115;
            v39 = bswap32(v96);
            if (v14 == 19789)
              v24 = v39;
            else
              v24 = v96;
            v25 = 1;
          }
          if (v27)
            v45 = v25 == 0;
          else
            v45 = 1;
          if (v45)
          {
            v29 = v30 - 1;
            v28 += 12;
            if (v30)
              continue;
          }
          v12 = 0;
          v13 = 0;
          if (v25 && v24 >= 2 && v27)
          {
            v46 = v24;
            if (v73 != 16 * v24)
              goto LABEL_115;
            v12 = 0;
            v13 = 4294950194;
            if (v74 > v26 && v74 - v26 >= v73)
            {
              v47 = v72 + v26 + 20;
              v48 = 1;
              while (1)
              {
                v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (!v49)
                  goto LABEL_115;
                if (v49(a1, 4, v47, &v93, &v77) || v77 != 4)
                  goto LABEL_115;
                ++v48;
                v47 += 16;
                if (v24 == v48)
                {
                  v51 = malloc_type_calloc(v24, 0x10uLL, 0x1000040451B5BE8uLL);
                  v12 = v51;
                  if (v51)
                  {
                    v52 = 0;
                    v53 = v83[3];
                    v54 = v79[3];
                    *v51 = v71;
                    v55 = v54 + v53;
                    v56 = v24 - 1;
                    while (1)
                    {
                      v57 = 0;
                      v92 = 0;
                      for (i = 1; ; i = 0)
                      {
                        while (1)
                        {
                          v59 = i;
                          v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                          if (!v59)
                            break;
                          if (!v60)
                            goto LABEL_116;
                          if (v60(a1, 4, v55, &v97, &v92) || v92 != 4)
                            goto LABEL_116;
                          v97 = -1;
                          if (v98 == 216)
                            v55 += 2;
                          else
                            v55 += (bswap32(v99) >> 16) + 2;
                          i = v98 != 218;
                        }
                        if (!v60 || v60(a1, 512, v55, &v97, &v92))
                          goto LABEL_116;
                        if (v55 < 0)
                          goto LABEL_121;
                        if (v92)
                          break;
LABEL_96:
                        v55 += v92;
                      }
                      v62 = 0;
                      while (1)
                      {
                        v63 = *(&v97 + v62);
                        if (v57)
                        {
                          if (v63 == 216)
                          {
                            v64 = -1;
                            goto LABEL_99;
                          }
                          if (v63 == 217)
                            break;
                        }
                        v57 = v63 == 255;
                        if (v92 == ++v62)
                          goto LABEL_96;
                      }
                      v64 = 1;
LABEL_99:
                      v65 = v12[2 * v52];
                      if (v65 < 0)
                      {
LABEL_121:
                        v13 = 4294950190;
                        goto LABEL_119;
                      }
                      v55 += v64 + v62;
                      v12[2 * v52 + 1] = v55 - v65;
                      if (v52 < v56)
                        break;
                      ++v52;
LABEL_113:
                      if (v52 == v46)
                      {
                        v13 = 0;
                        *v69 = v46;
                        *v70 = v12;
                        goto LABEL_118;
                      }
                    }
                    v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                    if (!v66)
                      goto LABEL_116;
                    v67 = v56;
                    while (1)
                    {
                      v13 = 4294950194;
                      if (v66(a1, 2, v55, &v93, &v77) || v77 != 2)
                        break;
                      if (v93 != 255 || HIBYTE(v93) != 255)
                      {
                        if (v93 == 255 && HIBYTE(v93) == 216)
                        {
                          ++v52;
                          v12[2 * v52] = v55;
                          v56 = v67;
                          goto LABEL_113;
                        }
                        goto LABEL_119;
                      }
                      ++v55;
                      v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int16 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                      if (!v66)
                        goto LABEL_119;
                    }
                  }
                  else
                  {
                    v13 = 4294950305;
                  }
                  goto LABEL_119;
                }
              }
            }
          }
          goto LABEL_119;
        }
      }
LABEL_117:
      v13 = 0;
      goto LABEL_118;
    }
  }
LABEL_115:
  v12 = 0;
LABEL_116:
  v13 = 4294950194;
LABEL_119:
  free(v12);
  _Block_object_dispose(&v78, 8);
  _Block_object_dispose(&v82, 8);
  _Block_object_dispose(&v86, 8);
  return v13;
}

uint64_t CMPhotoCompressedAuxImageStorageCreate(const void *a1, char a2, const void *a3, const void *a4, const void *a5, char a6, int a7, const void *a8, const void *a9, _QWORD *a10)
{
  _BYTE *v18;
  _BYTE *v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  uint64_t result;

  v18 = malloc_type_malloc(0x38uLL, 0x106004075BB3C11uLL);
  if (!v18)
    return 4294950305;
  v19 = v18;
  if (a1)
    v20 = CFRetain(a1);
  else
    v20 = 0;
  *(_QWORD *)v19 = v20;
  v19[8] = a2;
  v19[9] = a6;
  *((_DWORD *)v19 + 3) = a7;
  if (a3)
    v21 = CFRetain(a3);
  else
    v21 = 0;
  *((_QWORD *)v19 + 2) = v21;
  if (a4)
    v22 = CFRetain(a4);
  else
    v22 = 0;
  *((_QWORD *)v19 + 3) = v22;
  if (a5)
    v23 = CFRetain(a5);
  else
    v23 = 0;
  *((_QWORD *)v19 + 4) = v23;
  if (a8)
    v24 = CFRetain(a8);
  else
    v24 = 0;
  *((_QWORD *)v19 + 5) = v24;
  if (a9)
    v25 = CFRetain(a9);
  else
    v25 = 0;
  result = 0;
  *((_QWORD *)v19 + 6) = v25;
  *a10 = v19;
  return result;
}

void CMPhotoCompressedAuxImageStorageDestroy(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    v3 = a1[2];
    if (v3)
      CFRelease(v3);
    v4 = a1[3];
    if (v4)
      CFRelease(v4);
    v5 = a1[4];
    if (v5)
      CFRelease(v5);
    v6 = a1[5];
    if (v6)
      CFRelease(v6);
    v7 = a1[6];
    if (v7)
      CFRelease(v7);
    free(a1);
  }
}

uint64_t CMPhotoJFIFUtilitiesMergeImageComponents(const __CFAllocator *a1, const void *a2, int a3, int a4, CFArrayRef theArray, const void *a6)
{
  CFIndex Count;
  uint64_t v10;
  CFMutableDataRef Mutable;
  const __CFData *v12;
  uint64_t v13;
  __CFWriteStream *v14;
  __CFDictionary *MutableCopy;
  CFTypeRef v16;
  char v17;
  uint64_t v18;
  uint64_t MPOFromJFIFData;
  CFIndex v20;
  _DWORD *v21;
  const __CFArray *v22;
  CMSampleBufferRef *ValueAtIndex;
  CMSampleBufferRef *v24;
  uint64_t v25;
  CFIndex Length;
  __CFData *v27;
  __CFData *v28;
  const UInt8 *BytePtr;
  CFIndex v30;
  CMSampleBufferRef v31;
  const __CFAllocator *v32;
  __CFData *v33;
  __CFData *v34;
  uint64_t v35;
  uint64_t v36;
  CMSampleBufferRef v37;
  CFIndex v38;
  CFIndex v39;
  const __CFAllocator *v40;
  __CFData *v41;
  __CFData *v42;
  const UInt8 *v43;
  uint64_t v44;
  CFTypeRef *v45;
  __CFWriteStream *v47;
  CFTypeRef v48;
  const __CFData *v49;
  CFDataRef *v51;
  char v52;
  unsigned __int8 v54;
  const __CFAllocator *v55;
  __int16 v56;
  char v57;
  CFDataRef v58;
  CFDataRef theData;
  UInt8 bytes[2];
  const __CFData *v61;
  __CFData *v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  theData = 0;
  if (!theArray || (Count = CFArrayGetCount(theArray)) == 0)
  {
    v18 = CMPhotoByteStreamWriteStreamCreate((uint64_t)a1, 0, a2);
    if (v18)
    {
      v14 = (__CFWriteStream *)v18;
      if (a6)
      {
        v16 = CFRetain(a6);
        v10 = 0;
        v12 = 0;
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v16 = 0;
      }
      v17 = 1;
      goto LABEL_12;
    }
    return 4294950305;
  }
  v10 = Count;
  Mutable = CFDataCreateMutable(a1, 0);
  if (!Mutable)
    return 4294950305;
  v12 = Mutable;
  v13 = CMPhotoMutableDataWriteStreamCreate((uint64_t)a1, (uint64_t)Mutable);
  if (!v13)
  {
    v16 = 0;
    MPOFromJFIFData = 4294950305;
    goto LABEL_62;
  }
  v14 = (__CFWriteStream *)v13;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v16 = MutableCopy;
  if (!MutableCopy)
  {
LABEL_74:
    MPOFromJFIFData = 4294950305;
    goto LABEL_61;
  }
  CFDictionaryAddValue(MutableCopy, CFSTR("kCGImageWriteExtendedAPP0"), (const void *)*MEMORY[0x1E0C9AE50]);
  v17 = 0;
LABEL_12:
  if (!CFWriteStreamOpen(v14) || !CGImageWriteEXIFJPEGWithMetadata())
  {
    MPOFromJFIFData = FigSignalErrorAt();
    goto LABEL_61;
  }
  CFWriteStreamClose(v14);
  if ((v17 & 1) != 0)
  {
    MPOFromJFIFData = 0;
    goto LABEL_61;
  }
  v51 = (CFDataRef *)malloc_type_calloc(v10, 0x10uLL, 0x1060040ADAFC7CAuLL);
  if (!v51)
    goto LABEL_74;
  v47 = v14;
  v48 = v16;
  v49 = v12;
  if (v10 < 1)
  {
    v54 = 0;
    v52 = 0;
LABEL_47:
    v12 = v49;
    MPOFromJFIFData = CMPhotoCreateMPOFromJFIFData((uint64_t)a2, v54, v49, v51, v10, v52);
    v42 = 0;
    v34 = 0;
    v28 = 0;
    goto LABEL_48;
  }
  v20 = 0;
  v52 = 0;
  v54 = 0;
  v21 = v51 + 1;
  v22 = theArray;
  v55 = a1;
  while (1)
  {
    v58 = 0;
    ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(v22, v20);
    v24 = ValueAtIndex;
    if (*((_BYTE *)ValueAtIndex + 9))
    {
      v25 = CMPhotoDataCreateFromSampleBuffer(a1, *ValueAtIndex, *((_BYTE *)ValueAtIndex + 8) == 0, &v58);
      if ((_DWORD)v25)
        goto LABEL_66;
      v54 = 1;
      goto LABEL_42;
    }
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v57 = 0;
    v56 = 0;
    v25 = CMPhotoAuxiliaryImageMetadataCreateXMPData((int)a1, ValueAtIndex[2], ValueAtIndex[4], *((_DWORD *)ValueAtIndex + 3), (const __CFString *)ValueAtIndex[3], &theData);
    if ((_DWORD)v25)
    {
LABEL_66:
      MPOFromJFIFData = v25;
      v42 = 0;
      v34 = 0;
      v28 = 0;
      goto LABEL_71;
    }
    Length = CFDataGetLength(theData);
    v27 = CFDataCreateMutable(a1, Length + 29);
    v28 = v27;
    if (!v27)
    {
      v42 = 0;
      v34 = 0;
LABEL_69:
      MPOFromJFIFData = 4294950305;
      goto LABEL_71;
    }
    CFDataAppendBytes(v27, (const UInt8 *)"http://ns.adobe.com/xap/1.0/", 29);
    BytePtr = CFDataGetBytePtr(theData);
    v30 = CFDataGetLength(theData);
    CFDataAppendBytes(v28, BytePtr, v30);
    v61 = v28;
    LOBYTE(v56) = -31;
    v31 = v24[6];
    if (!v31)
    {
      v34 = 0;
      v36 = 1;
      goto LABEL_29;
    }
    v32 = CFGetAllocator(v24[6]);
    v33 = CFDataCreateMutable(v32, 0);
    v34 = v33;
    if (!v33)
    {
      v42 = 0;
      goto LABEL_69;
    }
    CFDataAppendBytes(v33, (const UInt8 *)"urn:iso:std:iso:ts:21496:-1", 28);
    v35 = CMPhotoWriteFlexRangeBinaryMetadata(v31, v34);
    if ((_DWORD)v35)
      break;
    v62 = v34;
    HIBYTE(v56) = -30;
    v52 = 1;
    v36 = 2;
LABEL_29:
    v37 = v24[5];
    if (v37)
    {
      v38 = CFDataGetLength(v24[5]);
      if ((unint64_t)(v38 - 65519) < 0xFFFFFFFFFFFF0001)
      {
        v44 = FigSignalErrorAt();
        v42 = 0;
        if ((_DWORD)v44)
        {
LABEL_45:
          MPOFromJFIFData = v44;
          goto LABEL_71;
        }
      }
      else
      {
        v39 = v38;
        v40 = CFGetAllocator(v37);
        v41 = CFDataCreateMutable(v40, 0);
        v42 = v41;
        if (!v41)
          goto LABEL_69;
        CFDataAppendBytes(v41, (const UInt8 *)"ICC_PROFILE", 12);
        *(_WORD *)bytes = 257;
        CFDataAppendBytes(v42, bytes, 2);
        v43 = CFDataGetBytePtr(v37);
        CFDataAppendBytes(v42, v43, v39);
      }
      v22 = theArray;
      *(&v61 + v36) = v42;
      *((_BYTE *)&v56 + v36++) = -30;
    }
    else
    {
      v42 = 0;
    }
    v44 = CMPhotoCreateDataFromJFIFSampleBufferAndInjectAppMarkers(v55, *v24, v36, &v61, (char *)&v56, &v58);
    if ((_DWORD)v44)
      goto LABEL_45;
    if (theData)
    {
      CFRelease(theData);
      theData = 0;
    }
    CFRelease(v28);
    a1 = v55;
    if (v42)
      CFRelease(v42);
    if (v34)
      CFRelease(v34);
LABEL_42:
    *((_QWORD *)v21 - 1) = v58;
    *v21 = 0;
    v21 += 4;
    if (v10 == ++v20)
      goto LABEL_47;
  }
  MPOFromJFIFData = v35;
  CFRelease(v34);
  v42 = 0;
  v34 = 0;
LABEL_71:
  v12 = v49;
LABEL_48:
  v14 = v47;
  v16 = v48;
  if (v10 >= 1)
  {
    v45 = (CFTypeRef *)v51;
    do
    {
      if (*v45)
      {
        CFRelease(*v45);
        *v45 = 0;
      }
      v45 += 2;
      --v10;
    }
    while (v10);
  }
  free(v51);
  if (theData)
    CFRelease(theData);
  if (v28)
    CFRelease(v28);
  if (v42)
    CFRelease(v42);
  if (v34)
    CFRelease(v34);
LABEL_61:
  CFRelease(v14);
  if (v12)
LABEL_62:
    CFRelease(v12);
  if (v16)
    CFRelease(v16);
  return MPOFromJFIFData;
}

uint64_t CMPhotoCopyDebugMetadataFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _OWORD *a5, CFDataRef *a6)
{
  uint64_t v9;
  const UInt8 *BytePtr;
  void *v11;
  CFDataRef theData;
  __int128 v14;
  char v15;

  v15 = 0;
  v14 = 0uLL;
  theData = 0;
  v9 = _copyChunkedHeadersFromJFIFByteStream(a1, a2, a3, 227, (uint64_t)"iOS_Debug", 0xCuLL, 2, &v15, &v14, &theData);
  if ((_DWORD)v9)
  {
    v11 = 0;
  }
  else
  {
    if (!theData)
    {
      v11 = 0;
      goto LABEL_13;
    }
    BytePtr = CFDataGetBytePtr(theData);
    v11 = malloc_type_malloc(0xCuLL, 0x11BDC764uLL);
    memcpy(v11, BytePtr, 0xCuLL);
    if (strncmp((const char *)v11, "iOSCustom", 0xCuLL))
    {
      if (a4)
        *a4 = v15;
      if (a5)
        *a5 = v14;
      if (a6)
      {
        *a6 = theData;
        theData = 0;
        goto LABEL_13;
      }
    }
  }
  if (theData)
    CFRelease(theData);
LABEL_13:
  free(v11);
  return v9;
}

uint64_t CMPhotoCopyCustomMetadataFromJFIFByteStream(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, _OWORD *a5, _QWORD *a6)
{
  return _copyChunkedHeadersFromJFIFByteStream(a1, a2, a3, 227, (uint64_t)"iOSCustom", 0xCuLL, 2, a4, a5, a6);
}

uint64_t CMPhotoGetXMPLocationFromJFIFByteStream(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  const char *v24;

  v23 = 29;
  v24 = "http://ns.adobe.com/xap/1.0/";
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2800000000;
  v17 = 0;
  v18 = 0;
  v13 = -31;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __CMPhotoGetXMPLocationFromJFIFByteStream_block_invoke;
  v12[3] = &unk_1E53F6B00;
  v12[4] = &v14;
  v12[5] = &v19;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v13, &v24, &v23, (uint64_t)v12);
  if (!(_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    if (a3)
      *a3 = *((_BYTE *)v20 + 24);
    if (a4)
    {
      if (*((_BYTE *)v20 + 24))
        v9 = v23 + v15[3];
      else
        v9 = 0;
      *a4 = v9;
    }
    if (a5)
    {
      if (*((_BYTE *)v20 + 24))
        v10 = v15[4] - v23;
      else
        v10 = 0;
      *a5 = v10;
    }
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v19, 8);
  return MarkersWithSignaturesInJFIFByteStreamWithHandler;
}

uint64_t CMPhotoGetDQTLocationFromJFIFByteStream(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2800000000;
  v17 = 0;
  v18 = 0;
  v13 = -37;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __CMPhotoGetDQTLocationFromJFIFByteStream_block_invoke;
  v12[3] = &unk_1E53F6B28;
  v12[4] = &v14;
  v12[5] = &v19;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a1, a2, 1, (uint64_t)&v13, 0, 0, (uint64_t)v12);
  if (!(_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    if (a3)
      *a3 = *((_BYTE *)v20 + 24);
    if (a4)
    {
      if (*((_BYTE *)v20 + 24))
        v9 = v15[3];
      else
        v9 = 0;
      *a4 = v9;
    }
    if (a5)
    {
      if (*((_BYTE *)v20 + 24))
        v10 = v15[4];
      else
        v10 = 0;
      *a5 = v10;
    }
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v19, 8);
  return MarkersWithSignaturesInJFIFByteStreamWithHandler;
}

uint64_t CMPhotoCopyIPTCFromJFIFByteStream(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _BYTE *a4, __CFData **a5)
{
  uint64_t MarkersWithSignaturesInJFIFByteStreamWithHandler;
  uint64_t v10;
  unint64_t v11;
  __CFData *Mutable;
  __CFData *v13;
  CFIndex v14;
  UInt8 *MutableBytePtr;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(uint64_t, CFIndex, unint64_t, UInt8 *, uint64_t *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[6];
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  const char *v35;

  v34 = 14;
  v35 = "Photoshop 3.0";
  v30 = 0;
  v31 = &v30;
  v32 = 0x2000000000;
  v33 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2800000000;
  v28 = 0;
  v29 = 0;
  v24 = -19;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = __CMPhotoCopyIPTCFromJFIFByteStream_block_invoke;
  v23[3] = &unk_1E53F6B50;
  v23[4] = &v25;
  v23[5] = &v30;
  MarkersWithSignaturesInJFIFByteStreamWithHandler = CMPhotoFindMarkersWithSignaturesInJFIFByteStreamWithHandler(a2, a3, 1, (uint64_t)&v24, &v35, &v34, (uint64_t)v23);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStreamWithHandler)
  {
    v20 = MarkersWithSignaturesInJFIFByteStreamWithHandler;
    goto LABEL_15;
  }
  if (*((_BYTE *)v31 + 24))
  {
    v10 = v26[4];
    v11 = v34;
    Mutable = CFDataCreateMutable(a1, 0);
    if (!Mutable)
    {
      v20 = 4294950305;
      goto LABEL_15;
    }
    v13 = Mutable;
    v14 = v10 - v11;
    v22 = 0;
    if (v14 < 0)
    {
      v20 = 4294950190;
      goto LABEL_14;
    }
    CFDataSetLength(Mutable, v14);
    MutableBytePtr = CFDataGetMutableBytePtr(v13);
    v16 = v26[3];
    v17 = v34;
    v18 = *(uint64_t (**)(uint64_t, CFIndex, unint64_t, UInt8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
    if (!v18)
    {
      v20 = 4294954514;
      goto LABEL_14;
    }
    v19 = v18(a2, v14, v17 + v16, MutableBytePtr, &v22);
    if ((_DWORD)v19)
    {
      v20 = v19;
      goto LABEL_14;
    }
    if (v22 != v14)
    {
      v20 = 4294950194;
      goto LABEL_14;
    }
    if (a4)
      goto LABEL_9;
  }
  else
  {
    v13 = 0;
    if (a4)
LABEL_9:
      *a4 = *((_BYTE *)v31 + 24);
  }
  v20 = 0;
  if (!a5)
  {
    if (!v13)
      goto LABEL_15;
LABEL_14:
    CFRelease(v13);
    goto LABEL_15;
  }
  *a5 = v13;
LABEL_15:
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v30, 8);
  return v20;
}

uint64_t CMPhotoJFIFUtilitiesCreateAuxiliaryPropertiesFromStream(const __CFAllocator *a1, uint64_t a2, uint64_t a3, int *a4, CGImageMetadata **a5, _QWORD *a6, const __CFDictionary **a7)
{
  uint64_t MarkersWithSignaturesInJFIFByteStream;
  const __CFData *v13;
  uint64_t v14;
  char v16;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;
  CMBlockBufferRef theBuffer;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  lengthAtOffsetOut = 0;
  theBuffer = 0;
  dataPointerOut = 0;
  v16 = -31;
  v22[0] = "http://ns.adobe.com/xap/1.0/";
  MarkersWithSignaturesInJFIFByteStream = CMPhotoFindMarkersWithSignaturesInJFIFByteStream(a2, a3, 1, (uint64_t)&v16, v22, (unint64_t *)&kCMPhotoXMPIdentificationStringSize, &v20);
  if ((_DWORD)MarkersWithSignaturesInJFIFByteStream)
  {
    v14 = MarkersWithSignaturesInJFIFByteStream;
    v13 = 0;
  }
  else if (v21 < 0)
  {
    v13 = 0;
    v14 = 4294950190;
  }
  else
  {
    v13 = 0;
    v14 = 4294950305;
    if (!CMCreateContiguousBlockBufferFromStream() && lengthAtOffsetOut == v21)
    {
      v13 = 0;
      v14 = 4294950194;
      if (!CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut)
        && lengthAtOffsetOut == v21)
      {
        v13 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, lengthAtOffsetOut, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        if (v13)
          v14 = CMPhotoAuxiliaryImageMetadataCreateFromXMPData(a1, v13, a4, a5, a6, a7);
        else
          v14 = 4294950305;
      }
    }
  }
  if (theBuffer)
    CFRelease(theBuffer);
  if (v13)
    CFRelease(v13);
  return v14;
}

uint64_t CMPhotoJFIFCopyCustomMetadataFromCFData(const __CFData *a1, CFTypeRef *a2)
{
  const UInt8 *BytePtr;
  const UInt8 *v5;
  unint64_t Length;
  CFIndex v7;
  unint64_t v8;
  unint64_t v9;
  CFStringRef v10;
  const __CFData *v11;
  CFIndex v12;
  unint64_t v13;
  CFStringRef v14;
  CFStringRef v15;
  uint64_t v16;
  unint64_t v17;
  CFIndex v18;
  const __CFAllocator *v19;
  const UInt8 *v20;
  CFDataRef v21;
  __CFDictionary *Mutable;
  __CFDictionary *v23;
  uint64_t v24;

  BytePtr = CFDataGetBytePtr(a1);
  if (!a1)
    return 4294950306;
  v5 = BytePtr;
  Length = CFDataGetLength(a1);
  v7 = *(_QWORD *)v5;
  v8 = *(_QWORD *)v5 + 8;
  if (v8 > Length)
    return 4294950194;
  v9 = Length;
  v10 = CFStringCreateWithBytes(0, v5 + 8, *(_QWORD *)v5, 0x8000100u, 1u);
  if (!v10)
    return 4294950305;
  v11 = (const __CFData *)v10;
  v12 = *(_QWORD *)&v5[v8];
  v13 = v12 + v7 + 16;
  if (v13 > v9)
  {
    v24 = 4294950194;
LABEL_22:
    v21 = v11;
LABEL_15:
    CFRelease(v21);
    return v24;
  }
  v14 = CFStringCreateWithBytes(0, &v5[v7 + 16], v12, 0x8000100u, 1u);
  if (!v14)
  {
    v24 = 4294950305;
    goto LABEL_22;
  }
  v15 = v14;
  v16 = *(_QWORD *)&v5[v13];
  v17 = v13 + 8;
  if (v16 + v17 > v9)
  {
    v21 = 0;
    v23 = 0;
    v24 = 4294950194;
  }
  else
  {
    v18 = CFDataGetLength(a1) - v17;
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = CFDataGetBytePtr(a1);
    v21 = CFDataCreateWithBytesNoCopy(v19, &v20[v17], v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v23 = Mutable;
    if (Mutable)
    {
      if (v21)
        CFDictionarySetValue(Mutable, CFSTR("Data"), v21);
      CFDictionarySetValue(v23, CFSTR("URI"), v11);
      CFDictionarySetValue(v23, CFSTR("Name"), v15);
      v24 = 0;
      if (a2)
        *a2 = CFRetain(v23);
    }
    else
    {
      v24 = 4294950305;
    }
  }
  CFRelease(v11);
  CFRelease(v15);
  if (v23)
    CFRelease(v23);
  if (v21)
    goto LABEL_15;
  return v24;
}

uint64_t ___copyChunkedHeadersFromJFIFByteStream_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, _WORD *, uint64_t *);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  __CFData *v25;
  uint64_t v26;
  CFIndex v27;
  UInt8 *MutableBytePtr;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, UInt8 *, uint64_t *);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _WORD v37[2];

  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  if (a8 < v8 + 2 * v9)
    return 4294950194;
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _WORD *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
  if (!v14)
    return 4294954514;
  v36 = 0;
  result = v14(v13, 2 * v9, v8 + a7, v37, &v36);
  if ((_DWORD)result)
    return result;
  v16 = *(_QWORD *)(a1 + 88);
  if (v36 != 2 * v16)
    return 4294950194;
  v17 = v36 + *(_QWORD *)(a1 + 80);
  if (v16 == 1)
  {
    v18 = LOBYTE(v37[0]);
    v19 = HIBYTE(v37[0]);
  }
  else
  {
    v18 = bswap32(v37[0]) >> 16;
    v19 = bswap32(v37[1]) >> 16;
  }
  v20 = v17 + a7;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v22 = *(_DWORD *)(v21 + 24);
  if (v22)
    v23 = 0;
  else
    v23 = v18 == 1;
  if (v23 && v19 != 0)
  {
    *(_DWORD *)(v21 + 24) = v19;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v20;
    v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  if (v22 <= 0 || v22 != v19 || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != v18)
    return FigSignalErrorAt();
  v25 = *(__CFData **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if (!v25)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = CFDataCreateMutable(*(CFAllocatorRef *)(a1 + 104), 0);
    v25 = *(__CFData **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (!v25)
      return 4294950305;
  }
  v26 = a8 - v17;
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) + v26;
  if (v27 < 0)
    return 4294950190;
  CFDataSetLength(v25, v27);
  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v30 = *(_QWORD *)(v29 + 24);
  *(_QWORD *)(v29 + 24) = v30 + v26;
  v31 = *(_QWORD *)(a1 + 96);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, UInt8 *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
  if (!v32)
    return 4294954514;
  result = v32(v31, v26, v20, &MutableBytePtr[v30], &v36);
  if ((_DWORD)result)
    return result;
  if (v36 != v26)
    return 4294950194;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v34 = *(_DWORD *)(v33 + 24);
  if (v34 == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    if ((v35 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v35;
      return 4294950191;
    }
    return 4294950190;
  }
  result = 0;
  *(_DWORD *)(v33 + 24) = v34 + 1;
  return result;
}

_QWORD *CreateTreeLeaves(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 >= 1)
  {
    v2 = result;
    v3 = 0;
    v4 = a2;
    do
    {
      result = malloc_type_malloc(0x20uLL, 0x102004084B5A0ACuLL);
      v2[v3] = result;
      if (!result)
        CreateTreeLeaves_cold_1();
      *(_WORD *)result = v3;
      result[2] = 0;
      *(_QWORD *)(v2[v3] + 24) = 0;
      *(_QWORD *)(v2[v3++] + 8) = 0;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t CreateHuffTree(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 < 1)
    return 0;
  v7 = 0;
  v8 = a2;
  while (1)
  {
    v9 = (unsigned __int8 *)(a1 + 4 * v7);
    v10 = *v9;
    if (*v9)
      break;
LABEL_14:
    if (++v7 == v8)
      return 0;
  }
  v11 = *((unsigned __int16 *)v9 + 1);
  v12 = (v11 >> (v10 - 1)) & 1;
  if (v10 == 1)
  {
    v13 = a4;
LABEL_10:
    if (v7 >= 0x400)
      CreateHuffTree_cold_1();
    v20 = *(_QWORD *)(a3 + 8 * v7);
    if (!v20)
      CreateHuffTree_cold_2();
    if (!v13)
      CreateHuffTree_cold_3();
    *(_QWORD *)(v13 + 8 * v12 + 16) = v20;
    *(_QWORD *)(v20 + 8) = v13;
    goto LABEL_14;
  }
  v14 = v10 - 2;
  v13 = a4;
  while (1)
  {
    v15 = v13 + 8 * v12;
    v18 = *(_QWORD **)(v15 + 16);
    v17 = (uint64_t *)(v15 + 16);
    v16 = v18;
    if (!v18)
    {
      v19 = 1;
      v16 = malloc_type_calloc(0x20uLL, 1uLL, 0xB24F6338uLL);
      *v17 = (uint64_t)v16;
      if (!v16)
        return v19;
    }
    v16[1] = v13;
    v13 = *v17;
    v12 = (v11 >> v14--) & 1;
    if (v14 == -1)
      goto LABEL_10;
  }
}

void DestroyHuffTree(_QWORD *a1)
{
  if (a1)
  {
    DestroyHuffTree(a1[2]);
    DestroyHuffTree(a1[3]);
    free(a1);
  }
}

uint64_t SlimDecodeFrame(int *a1)
{
  unsigned int v1;
  unint64_t v2;
  int v3;
  int v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned __int8 *v27;
  char *v28;
  BOOL v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  _BYTE *v42;
  char *v43;
  _BYTE *v44;
  char *v45;
  BOOL v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE *v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  char *v56;
  char *v57;
  char *v58;
  BOOL v59;
  unsigned __int8 *v60;
  char *v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  char *v71;
  char *v72;
  char *v73;
  BOOL v74;
  unsigned __int8 *v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  char *v83;
  char *v84;
  BOOL v85;
  unsigned __int8 *v86;
  char *v87;
  _BYTE *v88;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  _WORD *v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  _BYTE *v121;
  char *v122;
  _BYTE *v123;
  char *v124;
  BOOL v125;
  unsigned __int8 *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char v131;
  unsigned int v132;
  char *v133;
  char *v134;
  char *v135;
  BOOL v136;
  unsigned __int8 *v137;
  char *v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int16 *v145;
  _DWORD *v146;
  uint64_t v147;
  BOOL v148;
  __int16 v149;
  __int16 v150;
  _WORD *v151;
  uint64_t v152;
  unsigned int v153;

  if (*a1 < 0x10 || (v1 = a1[1], v1 <= 0xF))
    SlimDecodeFrame_cold_4();
  v2 = *((_QWORD *)a1 + 7);
  v3 = a1[8];
  if (v3 <= 875836533)
  {
    if (v3 <= 875704421)
    {
      if (v3 == 825437747)
        goto LABEL_18;
      v4 = 846624121;
    }
    else
    {
      if (v3 == 875704422 || v3 == 875704438)
        goto LABEL_18;
      v4 = 875836518;
    }
  }
  else if (v3 > 1650943795)
  {
    if (v3 == 1650943796 || v3 == 2037741158)
      goto LABEL_18;
    v4 = 2037741171;
  }
  else
  {
    if (v3 == 875836534 || v3 == 1278226536)
      goto LABEL_18;
    v4 = 1278226742;
  }
  if (v3 != v4)
    SlimDecodeFrame_cold_1();
LABEL_18:
  LODWORD(v5) = 0;
  v6 = 0;
  v7 = *((_QWORD *)a1 + 8);
  v8 = *((_QWORD *)a1 + 11);
  v9 = 2 * *a1 * v1;
  if (v3 <= 875836517)
  {
    if (v3 == 846624121)
    {
      LODWORD(v5) = 0;
      *(_BYTE *)v8 = *(_BYTE *)(v7 + 1);
      *(_BYTE *)(v8 + 1) = *(_BYTE *)v7;
      *(_BYTE *)(v8 + 2) = *(_BYTE *)(v7 + 3);
      *(_BYTE *)(v8 + 3) = *(_BYTE *)(v7 + 2);
      v11 = (_BYTE *)(v8 + 4);
      goto LABEL_29;
    }
    if (v3 == 875704422)
      goto LABEL_28;
    v10 = 875704438;
LABEL_27:
    v11 = (_BYTE *)*((_QWORD *)a1 + 11);
    if (v3 != v10)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (v3 <= 1650943795)
  {
    if (v3 != 875836518)
    {
      v10 = 875836534;
      goto LABEL_27;
    }
LABEL_28:
    LODWORD(v5) = 0;
    *(_DWORD *)v8 = *(_DWORD *)v7;
    v11 = (_BYTE *)(v8 + 4);
LABEL_29:
    v6 = 32;
    goto LABEL_30;
  }
  if (v3 != 1650943796)
  {
    v10 = 2037741171;
    goto LABEL_27;
  }
  if (!(v7 | v8))
    SlimDecodeFrame_cold_2();
  v5 = (_DWORD *)(v7 + 8);
  *(_WORD *)v8 = *(_WORD *)v7;
  *(_WORD *)(v8 + 2) = *(_WORD *)(v7 + 2);
  *(_WORD *)(v8 + 4) = *(_WORD *)(v7 + 4);
  *(_WORD *)(v8 + 6) = *(_WORD *)(v7 + 6);
  v140 = v9 >> 1;
  if (v9 < 9)
  {
    v6 = 31;
  }
  else
  {
    v141 = *((_QWORD *)a1 + 1043);
    v142 = *(_QWORD *)(v141 + 16);
    if (v140 <= 5)
      v143 = 5;
    else
      v143 = v140;
    v144 = 4;
    v145 = (__int16 *)v8;
    v6 = 31;
    do
    {
      if (!v5)
        SlimDecodeFrame_cold_3();
      v146 = v5;
      v147 = v141;
      if (v142)
      {
        do
        {
          v147 = *(_QWORD *)(v147 + 8 * ((*v146 >> v6) & 1) + 16);
          v148 = v6 == 0;
          if (v6)
          {
            --v6;
          }
          else
          {
            v5 = v146 + 1;
            v6 = 31;
          }
          if (v148)
            ++v146;
        }
        while (*(_QWORD *)(v147 + 16));
      }
      v149 = *v145++;
      v150 = v149 + *(_WORD *)v147;
      v151 = (_WORD *)(v8 + 2 * v144);
      if ((v150 & 0xFC00) != 0)
        v150 -= 1024;
      *v151 = v150;
      *(v151 - 4) *= 16;
      ++v144;
    }
    while (v144 != v143);
  }
  v152 = 0;
  v153 = v140 - 1;
  do
    *(_WORD *)(v8 + 2 * (v153 + v152--)) *= 16;
  while (v152 != -4);
  v11 = (_BYTE *)v8;
LABEL_30:
  v12 = v2 >> 2;
  v13 = a1[8];
  if (v13 > 875836517)
  {
    if (v13 != 875836518 && v13 != 875836534)
    {
      if (v13 != 2037741171)
        goto LABEL_134;
      if (v9 >= 5)
      {
        v37 = 0;
        v38 = v9 - 4;
        do
        {
          v39 = *(_DWORD *)(v7 + 4 * (v6 >> 5));
          if ((v6 & 0x1F) != 0)
          {
            v40 = (v6 >> 5) + 1;
            if (v40 >= v12)
              v41 = 0;
            else
              v41 = *(_DWORD *)(v7 + 4 * v40);
            v39 = (v39 << (v6 & 0x1F)) | (v41 >> 1 >> (v6 & 0x1F ^ 0x1F));
          }
          v42 = &v11[v37];
          v43 = (char *)&decode_luma12 + 2 * (v39 >> 20);
          if (v39 <= 0xEFFFFF)
            v43 = (char *)&decode_luma17 + 2 * (v39 >> 15);
          v44 = v43 + 1;
          v45 = (char *)&decode_luma9 + 2 * (v39 >> 23);
          v46 = v39 > 0x117FFFFF;
          if (v39 > 0x117FFFFF)
            v47 = (unsigned __int8 *)&decode_luma9 + 2 * (v39 >> 23);
          else
            v47 = (unsigned __int8 *)v43;
          if (v46)
            v44 = v45 + 1;
          v48 = v6 + *v47;
          *v42 = *v44 + v11[v37 - 2];
          v49 = *(_DWORD *)(v7 + 4 * (v48 >> 5));
          if ((v48 & 0x1F) != 0)
          {
            v50 = (v48 >> 5) + 1;
            if (v50 >= v12)
              v51 = 0;
            else
              v51 = *(_DWORD *)(v7 + 4 * v50);
            v49 = (v49 << (v48 & 0x1F)) | (v51 >> 1 >> (v48 & 0x1F ^ 0x1F));
          }
          v52 = &v11[v37];
          v53 = v37 + 2;
          v54 = *(v42 - 3);
          v55 = HIBYTE(v49);
          v56 = (char *)&decode_chroma23 + 2 * (v49 >> 9);
          if (v49 >> 10 < 0xD)
            v56 = (char *)&decode_chroma26 + 2 * (v49 >> 6);
          v57 = v56 + 1;
          if (v49 >= 0x40000)
          {
            v56 = (char *)&decode_chroma16 + 2 * HIWORD(v49);
            v57 = v56 + 1;
          }
          v58 = (char *)&decode_chroma9 + 2 * (v49 >> 23);
          v59 = v55 == 0;
          if (v55)
            v60 = (unsigned __int8 *)v58;
          else
            v60 = (unsigned __int8 *)v56;
          if (v59)
            v61 = v57;
          else
            v61 = v58 + 1;
          v6 = v48 + *v60;
          v52[1] = *v61 + v54;
          v37 = v53;
        }
        while ((int)v53 < v38);
      }
      goto LABEL_133;
    }
    goto LABEL_40;
  }
  if (v13 == 846624121)
  {
    if (v9 >= 5)
    {
      v116 = 0;
      v117 = v9 - 4;
      do
      {
        v118 = *(_DWORD *)(v7 + 4 * (v6 >> 5));
        if ((v6 & 0x1F) != 0)
        {
          v119 = (v6 >> 5) + 1;
          if (v119 >= v12)
            v120 = 0;
          else
            v120 = *(_DWORD *)(v7 + 4 * v119);
          v118 = (v118 << (v6 & 0x1F)) | (v120 >> 1 >> (v6 & 0x1F ^ 0x1F));
        }
        v121 = &v11[v116];
        v122 = (char *)&decode_luma12 + 2 * (v118 >> 20);
        if (v118 <= 0xEFFFFF)
          v122 = (char *)&decode_luma17 + 2 * (v118 >> 15);
        v123 = v122 + 1;
        v124 = (char *)&decode_luma9 + 2 * (v118 >> 23);
        v125 = v118 > 0x117FFFFF;
        if (v118 > 0x117FFFFF)
          v126 = (unsigned __int8 *)&decode_luma9 + 2 * (v118 >> 23);
        else
          v126 = (unsigned __int8 *)v122;
        if (v125)
          v123 = v124 + 1;
        v127 = v6 + *v126;
        v121[1] = *v123 + v11[v116 - 1];
        v128 = *(_DWORD *)(v7 + 4 * (v127 >> 5));
        if ((v127 & 0x1F) != 0)
        {
          v129 = (v127 >> 5) + 1;
          if (v129 >= v12)
            v130 = 0;
          else
            v130 = *(_DWORD *)(v7 + 4 * v129);
          v128 = (v128 << (v127 & 0x1F)) | (v130 >> 1 >> (v127 & 0x1F ^ 0x1F));
        }
        v131 = *(v121 - 4);
        v132 = HIBYTE(v128);
        v133 = (char *)&decode_chroma23 + 2 * (v128 >> 9);
        if (v128 >> 10 < 0xD)
          v133 = (char *)&decode_chroma26 + 2 * (v128 >> 6);
        v134 = v133 + 1;
        if (v128 >= 0x40000)
        {
          v133 = (char *)&decode_chroma16 + 2 * HIWORD(v128);
          v134 = v133 + 1;
        }
        v135 = (char *)&decode_chroma9 + 2 * (v128 >> 23);
        v136 = v132 == 0;
        if (v132)
          v137 = (unsigned __int8 *)v135;
        else
          v137 = (unsigned __int8 *)v133;
        if (v136)
          v138 = v134;
        else
          v138 = v135 + 1;
        v139 = *v137;
        v11[v116] = *v138 + v131;
        v6 = v127 + v139;
        v116 += 2;
      }
      while ((int)v116 < v117);
    }
    goto LABEL_133;
  }
  if (v13 == 875704422 || v13 == 875704438)
  {
LABEL_40:
    v15 = a1[1];
    if (v15)
    {
      v16 = 0;
      v17 = *a1;
      v18 = *(v11 - 1);
      v19 = (_DWORD)v11 - v8;
      v20 = a1[2] - *a1;
      do
      {
        v21 = v17 >= v19;
        v22 = v17 - v19;
        if (v22 != 0 && v21)
        {
          do
          {
            v23 = *(_DWORD *)(v7 + 4 * (v6 >> 5));
            if ((v6 & 0x1F) != 0)
            {
              v24 = (v6 >> 5) + 1;
              if (v24 >= v12)
                v25 = 0;
              else
                v25 = *(_DWORD *)(v7 + 4 * v24);
              v23 = (v23 << (v6 & 0x1F)) | (v25 >> 1 >> (v6 & 0x1F ^ 0x1F));
            }
            v26 = (char *)&decode_luma12 + 2 * (v23 >> 20);
            if (v23 <= 0xEFFFFF)
              v26 = (char *)&decode_luma17 + 2 * (v23 >> 15);
            v27 = (unsigned __int8 *)(v26 + 1);
            v28 = (char *)&decode_luma9 + 2 * (v23 >> 23);
            v29 = v23 > 0x117FFFFF;
            if (v23 > 0x117FFFFF)
              v30 = (unsigned __int8 *)&decode_luma9 + 2 * (v23 >> 23);
            else
              v30 = (unsigned __int8 *)v26;
            if (v29)
              v27 = (unsigned __int8 *)(v28 + 1);
            v6 += *v30;
            v18 += *v27;
            *v11++ = v18;
            --v22;
          }
          while (v22);
        }
        v19 = 0;
        v11 += v20;
        ++v16;
      }
      while (v16 != v15);
    }
    v31 = v6 + 31;
    v8 = *((_QWORD *)a1 + 12);
    v32 = *(_DWORD *)(v7 + 4 * (v31 >> 5));
    *(_DWORD *)v8 = v32;
    v33 = (_BYTE *)(v8 + 4);
    v34 = (v31 & 0xFFFFFFE0) + 32;
    if ((a1[8] | 0x10) == 0x34323076)
    {
      v35 = *a1;
      v36 = a1[1] >> 1;
      if (!v36)
        goto LABEL_132;
    }
    else
    {
      v36 = a1[1];
      v35 = 2 * *a1;
      if (!v36)
      {
LABEL_132:
        v6 = (v34 + 31) & 0xFFFFFFE0;
LABEL_133:
        v13 = a1[8];
        goto LABEL_134;
      }
    }
    v62 = 0;
    v63 = HIWORD(v32);
    v64 = HIBYTE(v32);
    v65 = (int)(a1[3] - v35);
    v66 = 4;
    do
    {
      if (v66 >= v35)
      {
        v88 = v33;
      }
      else
      {
        do
        {
          v67 = *(_DWORD *)(v7 + 4 * (v34 >> 5));
          if ((v34 & 0x1F) != 0)
          {
            v68 = (v34 >> 5) + 1;
            if (v68 >= v12)
              v69 = 0;
            else
              v69 = *(_DWORD *)(v7 + 4 * v68);
            v67 = (v67 << (v34 & 0x1F)) | (v69 >> 1 >> (v34 & 0x1F ^ 0x1F));
          }
          v70 = HIBYTE(v67);
          v71 = (char *)&decode_chroma23 + 2 * (v67 >> 9);
          if (v67 >> 10 < 0xD)
            v71 = (char *)&decode_chroma26 + 2 * (v67 >> 6);
          v72 = v71 + 1;
          if (v67 >= 0x40000)
          {
            v71 = (char *)&decode_chroma16 + 2 * HIWORD(v67);
            v72 = v71 + 1;
          }
          v73 = (char *)&decode_chroma9 + 2 * (v67 >> 23);
          v74 = v70 == 0;
          if (v70)
            v75 = (unsigned __int8 *)v73;
          else
            v75 = (unsigned __int8 *)v71;
          if (v74)
            v76 = v72;
          else
            v76 = v73 + 1;
          v77 = v34 + *v75;
          v63 += *v76;
          *v33 = v63;
          v78 = *(_DWORD *)(v7 + 4 * (v77 >> 5));
          if ((v77 & 0x1F) != 0)
          {
            v79 = (v77 >> 5) + 1;
            if (v79 >= v12)
              v80 = 0;
            else
              v80 = *(_DWORD *)(v7 + 4 * v79);
            v78 = (v78 << (v77 & 0x1F)) | (v80 >> 1 >> (v77 & 0x1F ^ 0x1F));
          }
          v81 = HIBYTE(v78);
          v82 = (char *)&decode_chroma23 + 2 * (v78 >> 9);
          if (v78 >> 10 < 0xD)
            v82 = (char *)&decode_chroma26 + 2 * (v78 >> 6);
          v83 = v82 + 1;
          if (v78 >= 0x40000)
          {
            v82 = (char *)&decode_chroma16 + 2 * HIWORD(v78);
            v83 = v82 + 1;
          }
          v84 = (char *)&decode_chroma9 + 2 * (v78 >> 23);
          v85 = v81 == 0;
          if (v81)
            v86 = (unsigned __int8 *)v84;
          else
            v86 = (unsigned __int8 *)v82;
          if (v85)
            v87 = v83;
          else
            v87 = v84 + 1;
          v34 = v77 + *v86;
          v64 += *v87;
          v88 = v33 + 2;
          v33[1] = v64;
          v66 += 2;
          v33 += 2;
        }
        while (v66 < v35);
      }
      v66 = 0;
      v33 = &v88[v65];
      ++v62;
    }
    while (v62 != v36);
    goto LABEL_132;
  }
LABEL_134:
  if (v13 > 1278226741)
  {
    if (v13 != 1278226742 && v13 != 2037741158)
    {
      if (v13 == 1650943796)
        return ((_DWORD)v5 - v7 + 4);
      return (v6 >> 3) & 0x1FFFFFFC;
    }
    goto LABEL_141;
  }
  if (v13 == 825437747 || v13 == 1278226536)
  {
LABEL_141:
    v90 = (*a1 + 15) & 0xFFFFFFF0;
    v91 = a1[2] >> 1;
    v21 = v91 >= v90;
    v92 = v91 - v90;
    if (!v21 || (*(_WORD *)v7 & 0xFFFE) != 0x5A02)
      return 0;
    v93 = v7 + a1[14];
    v94 = *(unsigned __int16 *)(v7 + 2);
    v95 = v7 + 4;
    v96 = (unsigned __int8 *)(v95 + 2 * v94);
    LODWORD(v97) = v8;
    if ((unint64_t)v96 >= v93)
      return ((_DWORD)v97 - v8);
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v97 = (_WORD *)v8;
    while (1)
    {
      v101 = *v96;
      if (!v99)
        break;
      v102 = v101 & 0xF;
      if (v102 > 0xC)
      {
        if (v102 != 15)
        {
          if (v102 == 13)
            return ((_DWORD)v97 - v8);
          v105 = *++v96;
          v106 = (v105 >> 4) + 1;
          do
          {
            *v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
            if (v98 + 1 == v90)
              v107 = v92;
            else
              v107 = 0;
            v97 += v107 + 1;
            if (v98 + 1 == v90)
              v98 = 0;
            else
              ++v98;
            --v106;
          }
          while ((_BYTE)v106);
LABEL_203:
          v99 = 1;
          goto LABEL_204;
        }
        v110 = v96[1];
        if ((v110 & 0x80) != 0)
        {
          v100 = v100 + v110 - 192;
          v111 = 1;
        }
        else
        {
          v100 = v96[2] | (v110 << 8);
          v111 = 2;
        }
        v99 = 0;
        *v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
        if (v98 + 1 == v90)
          v114 = v92;
        else
          v114 = 0;
        v97 += v114 + 1;
        if (v98 + 1 == v90)
          v98 = 0;
        else
          ++v98;
        v96 += v111;
      }
      else
      {
        v99 = 0;
        v100 = v100 + v102 - 6;
        *v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
        if (v98 + 1 == v90)
          v103 = v92;
        else
          v103 = 0;
        v97 += v103 + 1;
        if (v98 + 1 == v90)
          v98 = 0;
        else
          ++v98;
      }
      ++v96;
LABEL_204:
      if ((unint64_t)v96 >= v93)
        return ((_DWORD)v97 - v8);
    }
    if (v101 <= 0xCF)
    {
      v100 = v100 + (v101 >> 4) - 6;
      *v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
      if (v98 + 1 == v90)
        v104 = v92;
      else
        v104 = 0;
      v97 += v104 + 1;
      if (v98 + 1 == v90)
        v98 = 0;
      else
        ++v98;
      v99 = 1;
      goto LABEL_204;
    }
    if (v101 <= 0xEF)
    {
      v108 = (v101 & 0xF) + 1;
      do
      {
        *v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
        if (v98 + 1 == v90)
          v109 = v92;
        else
          v109 = 0;
        v97 += v109 + 1;
        if (v98 + 1 == v90)
          v98 = 0;
        else
          ++v98;
        --v108;
      }
      while ((_BYTE)v108);
      v99 = 0;
      ++v96;
      goto LABEL_204;
    }
    v112 = v96[1];
    if ((v101 & 8) != 0)
    {
      v100 = ((v112 >> 4) & 0xFFFFFF0F | (16 * (v101 & 0xF))) + v100 - 192;
      ++v96;
    }
    else
    {
      v113 = v96[2];
      v96 += 2;
      v100 = (v101 << 12) | (16 * v112) | (v113 >> 4);
    }
    *v97 = *(_WORD *)(v95 + 2 * (unsigned __int16)v100);
    if (v98 + 1 == v90)
      v115 = v92;
    else
      v115 = 0;
    v97 += v115 + 1;
    if (v98 + 1 == v90)
      v98 = 0;
    else
      ++v98;
    goto LABEL_203;
  }
  return (v6 >> 3) & 0x1FFFFFFC;
}

uint64_t SlimEncodeFrame(uint64_t a1)
{
  _DWORD *v1;
  int *v2;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  int v7;
  _DWORD *v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t result;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  int v62;
  uint64_t v63;
  __int16 v64;
  unsigned int v65;
  char *v66;
  int v67;
  int v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  char v75;
  char v76;
  unsigned int v77;
  _WORD v78[65535];
  uint64_t v79;

  v1 = (_DWORD *)MEMORY[0x1E0C80A78](a1);
  v79 = *MEMORY[0x1E0C80C00];
  v7 = *v1;
  if (*v1 < 0x10u)
    return 4294951896;
  v8 = v1;
  v9 = v1[1];
  if (v9 < 0x10)
    return 4294951896;
  v10 = v2;
  v11 = v1[8];
  result = 4294951896;
  if (v11 <= 875836533)
  {
    if (v11 <= 875704421)
    {
      if (v11 == 825437747)
        goto LABEL_18;
      v13 = 846624121;
    }
    else
    {
      if (v11 == 875704422 || v11 == 875704438)
        goto LABEL_18;
      v13 = 875836518;
    }
  }
  else if (v11 > 1650943795)
  {
    if (v11 == 1650943796 || v11 == 2037741171)
      goto LABEL_18;
    v13 = 2037741158;
  }
  else
  {
    if (v11 == 875836534 || v11 == 1278226536)
      goto LABEL_18;
    v13 = 1278226742;
  }
  if (v11 != v13)
    return result;
LABEL_18:
  v14 = (unsigned __int8 *)*((_QWORD *)v8 + 8);
  v15 = *((_QWORD *)v8 + 11);
  v16 = 2 * v9 * v7;
  if (v11 > 875836533)
  {
    if (v11 <= 1650943795)
    {
      if (v11 == 875836534)
      {
LABEL_59:
        v47 = pack_420v_luma_arm(*((_QWORD *)v8 + 8), *((_QWORD *)v8 + 11));
        v48 = v47;
        v49 = v15 + 4 * (v47 >> 2);
        if ((v47 & 3) != 0)
        {
          v50 = (uint64_t)v47 >> 2;
          bzero((void *)(v15 + (v47 & 3 | (unint64_t)(4 * v50))), 4 - (v47 & 3u));
          *(_DWORD *)(v15 + 4 * v50) = bswap32(*(_DWORD *)(v15 + 4 * v50));
          v49 += 4;
          v48 = (v48 + 3) & 0xFFFFFFFC;
        }
        if ((v8[8] | 0x10) == 0x34323076)
          v51 = (*v8 * v8[1]) >> 1;
        else
          v51 = (2 * v8[1] * *v8);
        v43 = pack_420v_chroma_arm(*((_QWORD *)v8 + 9), v49, v51, chroma) + v48;
        v54 = v43 & 3;
        if ((v43 & 3) == 0)
          goto LABEL_70;
        v55 = v43 >> 2;
        v56 = (uint64_t)v43 >> 2;
LABEL_69:
        bzero((void *)(v15 + (v54 | (4 * v56))), (4 - v54));
        *(_DWORD *)(v15 + 4 * v55) = bswap32(*(_DWORD *)(v15 + 4 * v55));
        v43 = (v43 + 3) & 0xFFFFFFFC;
        goto LABEL_70;
      }
      if (v11 != 1278226742)
        goto LABEL_56;
    }
    else
    {
      if (v11 == 1650943796)
      {
        v57 = pack_bgg4_arm(v3, v4, v5, v6);
        v43 = v57;
        v54 = v57 & 3;
        if ((v57 & 3) == 0)
          goto LABEL_70;
        v55 = v57 >> 2;
        v56 = (uint64_t)v57 >> 2;
        goto LABEL_69;
      }
      if (v11 != 2037741158)
      {
        if (v11 != 2037741171)
          goto LABEL_56;
        *(_DWORD *)v15 = *(_DWORD *)v14;
        v17 = (unsigned int *)(v15 + 4);
        if (v16 >= 5)
        {
          v18 = 0;
          v19 = 0;
          v20 = v16 - 4;
          v21 = v14 + 4;
          v22 = -32;
          do
          {
            v23 = (v21[v18] - v21[v18 - 2]);
            v24 = luma[2 * v23];
            v25 = v22 + v24;
            if (v22 + v24 < 0)
            {
              v27 = (v19 << v24) | luma[2 * v23 + 1];
            }
            else
            {
              v26 = v19 << -(char)v22;
              v27 = luma[2 * v23 + 1];
              *v17++ = (v27 >> v25) | v26;
              v25 -= 32;
            }
            v28 = (v21[v18 + 1] - v21[v18 - 3]);
            v29 = chroma[2 * v28];
            v22 = v25 + v29;
            if (v25 + v29 < 0)
            {
              v19 = (v27 << v29) | chroma[2 * v28 + 1];
            }
            else
            {
              v30 = v27 << -(char)v25;
              v19 = chroma[2 * v28 + 1];
              *v17++ = (v19 >> v22) | v30;
              v22 -= 32;
            }
            v18 += 2;
          }
          while ((int)v18 < v20);
          if (v22 >= -31)
          {
            v31 = v19 << -(char)v22;
LABEL_52:
            *v17 = v31;
            LODWORD(v17) = (_DWORD)v17 + 4;
          }
        }
LABEL_53:
        v43 = (_DWORD)v17 - v15;
        goto LABEL_70;
      }
    }
  }
  else
  {
    if (v11 > 875704421)
    {
      if (v11 != 875704422 && v11 != 875704438 && v11 != 875836518)
      {
LABEL_56:
        if (v11 != 1278226536)
        {
LABEL_58:
          v43 = 0;
          goto LABEL_70;
        }
        goto LABEL_57;
      }
      goto LABEL_59;
    }
    if (v11 != 825437747)
    {
      if (v11 != 846624121)
        goto LABEL_56;
      *(_DWORD *)v15 = v14[1] | (((v14[2] << 16) | (v14[3] << 8) | *v14) << 8);
      v17 = (unsigned int *)(v15 + 4);
      if (v16 >= 5)
      {
        v32 = 0;
        v33 = 0;
        v34 = -32;
        do
        {
          v35 = (v14[v32 + 5] - v14[v32 + 3]);
          v36 = luma[2 * v35];
          v37 = v34 + v36;
          if (v34 + v36 < 0)
          {
            v39 = (v33 << v36) | luma[2 * v35 + 1];
          }
          else
          {
            v38 = v33 << -(char)v34;
            v39 = luma[2 * v35 + 1];
            *v17++ = (v39 >> v37) | v38;
            v37 -= 32;
          }
          v40 = (v14[v32 + 4] - v14[v32]);
          v41 = chroma[2 * v40];
          v34 = v37 + v41;
          if (v37 + v41 < 0)
          {
            v33 = (v39 << v41) | chroma[2 * v40 + 1];
          }
          else
          {
            v42 = v39 << -(char)v37;
            v33 = chroma[2 * v40 + 1];
            *v17++ = (v33 >> v34) | v42;
            v34 -= 32;
          }
          v32 += 2;
        }
        while ((int)v32 < v16 - 4);
        if (v34 >= -31)
        {
          v31 = v33 << -(char)v34;
          goto LABEL_52;
        }
      }
      goto LABEL_53;
    }
  }
LABEL_57:
  v44 = (v7 + 15) & 0xFFFFFFF0;
  v45 = v8[2];
  v46 = (v45 >> 1) - v44;
  if (v45 >> 1 < v44)
    goto LABEL_58;
  v52 = v45 * v9;
  if (*((_BYTE *)v8 + 144))
  {
    v53 = (unsigned int *)*((_QWORD *)v8 + 17);
    if (v53)
    {
      v43 = EncodeFrameThreads(v53, *((unsigned __int16 **)v8 + 8), v52, *((_WORD **)v8 + 11), v44, (v45 >> 1) - v44);
      goto LABEL_70;
    }
    return 4294951896;
  }
  v58 = v52 >> 1;
  v59 = v15 + 4;
  bzero(v78, 0x1FFFEuLL);
  if (v52 >= 2)
  {
    v60 = 2 * v58;
    v61 = (unsigned __int16 *)v14;
    do
    {
      v62 = *v61++;
      v78[v62] = 1;
      v60 -= 2;
    }
    while (v60);
  }
  v63 = 0;
  v64 = 0;
  do
  {
    if (v78[v63] == 1)
    {
      v78[v63] = v64++;
      *(_WORD *)v59 = v63;
      v59 += 2;
    }
    ++v63;
  }
  while (v63 != 0xFFFF);
  *(_WORD *)v15 = 23043;
  *(_WORD *)(v15 + 2) = v64;
  v65 = (unsigned __int16)v78[*(unsigned __int16 *)v14];
  *(_BYTE *)v59 = (v65 >> 12) | 0xF0;
  *(_BYTE *)(v59 + 1) = v65 >> 4;
  v66 = (char *)(v59 + 2);
  v67 = 16 * v65;
  if ((_DWORD)v58 == 1)
  {
LABEL_136:
    *v66 = v67 + 13;
    LODWORD(v66) = (_DWORD)v66 + 1;
    goto LABEL_137;
  }
  v68 = 0;
  v69 = v14 + 2;
  v70 = 1;
  v71 = 1;
  do
  {
    v72 = (unsigned __int16)v78[*(unsigned __int16 *)v69];
    v73 = v72 - v65;
    v74 = (__int16)(v72 - v65);
    if (v74 < 0)
      v74 = -v74;
    if ((unsigned __int16)v74 > 6u)
    {
      if (!(_BYTE)v68)
      {
        if (v71)
          goto LABEL_110;
        goto LABEL_114;
      }
      if (v68 == 1)
      {
        if (v71)
        {
          *v66++ = v67 + 6;
LABEL_114:
          if ((unsigned __int16)(v73 + 64) > 0x7Fu)
          {
            v68 = 0;
            *v66 = (v72 >> 12) | 0xF0;
            v66[1] = v72 >> 4;
            v66 += 2;
            v67 = 16 * v72;
LABEL_124:
            v71 = 1;
            goto LABEL_125;
          }
          v68 = 0;
          *v66++ = ((v73 + 192) >> 4) - 16;
LABEL_123:
          v67 = 16 * v73;
          goto LABEL_124;
        }
        v67 = 96;
      }
      else
      {
        if (!v71)
        {
          *v66++ = v68 - 33;
          goto LABEL_114;
        }
        *v66 = v67 + 14;
        v67 = 16 * v68 - 16;
        ++v66;
      }
LABEL_110:
      v67 += 15;
      *v66 = v67;
      v71 = 0;
      v68 = 0;
      if ((unsigned __int16)(v73 + 64) > 0x7Fu)
      {
        *(_WORD *)(v66 + 1) = __rev16(v72);
        v66 += 3;
      }
      else
      {
        v66[1] = v73 - 64;
        v66 += 2;
      }
      goto LABEL_125;
    }
    if (v72 != (unsigned __int16)v65)
    {
      if (!(_BYTE)v68)
      {
        v73 += 6;
        if (v71)
          goto LABEL_119;
        goto LABEL_122;
      }
      if (v68 == 1)
      {
        if (v71)
        {
          v76 = v67 + 6;
LABEL_121:
          *v66++ = v76;
          v73 += 6;
LABEL_122:
          v68 = 0;
          goto LABEL_123;
        }
        v67 = 96;
      }
      else
      {
        if (!v71)
        {
          v76 = v68 - 33;
          goto LABEL_121;
        }
        *v66++ = v67 + 14;
        v67 = 16 * v68 - 16;
      }
      v73 += 6;
LABEL_119:
      v71 = 0;
      v68 = 0;
      v67 += v73;
      *v66++ = v67;
      goto LABEL_125;
    }
    if (++v68 == 16)
    {
      v68 = 0;
      v75 = v67 + 14;
      if (v71)
        v67 = -16;
      else
        v75 = -17;
      *v66++ = v75;
    }
LABEL_125:
    if (v70 + 1 == v44)
      v77 = v46;
    else
      v77 = 0;
    v69 += 2 * v77 + 2;
    if (v70 + 1 == v44)
      v70 = 0;
    else
      ++v70;
    v65 = v72;
  }
  while (v69 != &v14[2 * v58]);
  if (!(_BYTE)v68)
  {
    if (!v71)
      goto LABEL_137;
    goto LABEL_136;
  }
  if (v71)
  {
    *v66 = v67 + 14;
    LOBYTE(v67) = 16 * v68 - 16;
    ++v66;
    goto LABEL_136;
  }
  *v66 = v68 - 33;
  LODWORD(v66) = (_DWORD)v66 + 1;
LABEL_137:
  v43 = (_DWORD)v66 - v15;
LABEL_70:
  result = 0;
  if (v10)
    *v10 = v43;
  return result;
}

uint64_t CMPhotoCFDictionarySetInt16(__CFDictionary *a1, const void *a2, __int16 a3)
{
  uint64_t result;
  CFNumberRef v6;
  CFNumberRef v7;
  __int16 valuePtr;

  valuePtr = a3;
  result = 4294950306;
  if (a1 && a2)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionarySetDouble(__CFDictionary *a1, const void *a2, double a3)
{
  uint64_t result;
  CFNumberRef v6;
  CFNumberRef v7;
  double valuePtr;

  valuePtr = a3;
  result = 4294950306;
  if (a1 && a2)
  {
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(a1, a2, v6);
      CFRelease(v7);
      return 0;
    }
    else
    {
      return 4294950305;
    }
  }
  return result;
}

uint64_t CMPhotoCFDictionaryGetLongIfPresent(CFDictionaryRef theDict, const void *a2, void *a3)
{
  uint64_t result;
  CFTypeID TypeID;
  void *value;

  result = 0;
  value = 0;
  if (theDict)
  {
    if (a2)
    {
      if (a3)
      {
        result = CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value);
        if ((_DWORD)result)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberLongType, a3);
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoCFArrayAppendInt32(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  if (!a1)
    return 4294950306;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  if (!v3)
    return 4294950305;
  v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t CMPhotoCFArrayAppendFloat(__CFArray *a1, float a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  float valuePtr;

  valuePtr = a2;
  if (!a1)
    return 4294950306;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  if (!v3)
    return 4294950305;
  v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t CMPhotoCFArrayAppendDouble(__CFArray *a1, double a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  double valuePtr;

  valuePtr = a2;
  if (!a1)
    return 4294950306;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (!v3)
    return 4294950305;
  v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t CMPhotoCFArraySetCFIndexAtIndex(__CFArray *a1, uint64_t a2, CFIndex a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t valuePtr;

  valuePtr = a2;
  if (!a1)
    return 4294950306;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
  if (!v5)
    return 4294950305;
  v6 = v5;
  CFArraySetValueAtIndex(a1, a3, v5);
  CFRelease(v6);
  return 0;
}

CFNumberRef CMPhotoCFNumberCreateSize(uint64_t a1)
{
  uint64_t valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateInt(int a1)
{
  int valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateInt16(__int16 a1)
{
  __int16 valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateInt32(int a1)
{
  int valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef CMPhotoCFNumberCreateFloat(float a1)
{
  float valuePtr;

  valuePtr = a1;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
}

const __CFNumber *CMPhotoCFNumberGetSize(const __CFNumber *result)
{
  uint64_t valuePtr;

  if (result)
  {
    valuePtr = 0;
    if (CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr))
      return (const __CFNumber *)valuePtr;
    else
      return 0;
  }
  return result;
}

double CMPhotoCFNumberGetDouble(const __CFNumber *a1)
{
  int Value;
  double result;
  double valuePtr;

  if (!a1)
    return 0.0;
  valuePtr = 0.0;
  Value = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
  result = valuePtr;
  if (!Value)
    return 0.0;
  return result;
}

uint64_t CMPhotoDataCreateFromSource(const __CFAllocator *a1, const __CFData *a2, size_t a3, size_t a4, _QWORD *a5, char *a6)
{
  size_t DataLength;
  const __CFData *v10;
  const __CFAllocator *v12;
  uint64_t DataPointer;
  uint64_t v14;
  void *v15;
  char *v16;
  const __CFAllocator *v17;
  size_t v18;
  size_t v19;
  CFDataRef DataWrappingIOSurface;
  uint64_t (*v21)(const __CFData *, _QWORD, CFAllocatorContext *);
  uint64_t (*v22)(const __CFData *, size_t, size_t, CMBlockBufferRef *, CFIndex *);
  uint64_t v23;
  const UInt8 *BytePtr;
  CFAllocatorContext v26;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  char v31;
  CFTypeRef v32;
  CFIndex version;

  v32 = 0;
  version = a4;
  v31 = 0;
  cf = 0;
  blockBufferOut = 0;
  if (!a2)
  {
    v14 = 4294950306;
    goto LABEL_56;
  }
  if (a5)
  {
    DataLength = a4;
    v10 = a2;
    switch(CMPhotoGetStorageType(a2))
    {
      case 1u:
        if (!DataLength)
        {
          if ((a3 & 0x8000000000000000) != 0)
            goto LABEL_63;
          DataLength = CFDataGetLength(v10) - a3;
          version = DataLength;
        }
        if (DataLength + a3 > CFDataGetLength(v10))
          goto LABEL_11;
        if (!a3 && DataLength == CFDataGetLength(v10))
        {
          v12 = 0;
          v32 = CFRetain(v10);
          goto LABEL_46;
        }
        if ((DataLength & 0x8000000000000000) != 0)
          goto LABEL_63;
        BytePtr = CFDataGetBytePtr(v10);
        v32 = CFDataCreate(a1, &BytePtr[a3], DataLength);
        v12 = 0;
        if (v32)
        {
          v31 = 1;
          goto LABEL_46;
        }
        v10 = 0;
        goto LABEL_68;
      case 2u:
        dataPointerOut = 0;
        lengthAtOffsetOut = 0;
        if (!DataLength)
        {
          DataLength = CMBlockBufferGetDataLength(v10);
          version = DataLength;
        }
        if ((a3 & 0x8000000000000000) != 0)
          goto LABEL_65;
        if (CMBlockBufferIsRangeContiguous(v10, a3, DataLength))
          goto LABEL_20;
        DataPointer = CMBlockBufferCreateContiguous(a1, v10, a1, 0, a3, DataLength, 2u, &blockBufferOut);
        if ((_DWORD)DataPointer)
          goto LABEL_12;
        a3 = 0;
        v10 = blockBufferOut;
        v31 = 1;
LABEL_20:
        DataPointer = CMBlockBufferGetDataPointer(v10, a3, &lengthAtOffsetOut, 0, &dataPointerOut);
        if ((_DWORD)DataPointer)
          goto LABEL_12;
        if (v10)
          v10 = (const __CFData *)CFRetain(v10);
        v26.version = 0;
        v26.info = v10;
        memset(&v26.retain, 0, 24);
        v26.allocate = (CFAllocatorAllocateCallBack)_cfTypeDeallocator_allocate_0;
        v26.reallocate = 0;
        v26.deallocate = (CFAllocatorDeallocateCallBack)_cfTypeDeallocator_deallocate_0;
        v26.preferredSize = 0;
        v12 = CFAllocatorCreate(0, &v26);
        if (!v12)
          goto LABEL_68;
        if ((DataLength & 0x8000000000000000) != 0)
          goto LABEL_64;
        v32 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)dataPointerOut, DataLength, v12);
        if (v32)
          goto LABEL_46;
LABEL_68:
        v14 = 4294950305;
        break;
      case 3u:
        DataPointer = CMByteStreamCreateForFileURL();
        if ((_DWORD)DataPointer)
          goto LABEL_12;
        v15 = (void *)cf;
        v16 = &v31;
        v17 = a1;
        v18 = a3;
        v19 = DataLength;
        goto LABEL_40;
      case 4u:
        if ((a3 & 0x8000000000000000) != 0)
        {
LABEL_63:
          v12 = 0;
          v10 = 0;
LABEL_64:
          v14 = 4294950190;
          break;
        }
        DataWrappingIOSurface = CMPhotoCreateDataWrappingIOSurface(a1, v10, a3, DataLength);
        v12 = 0;
        v32 = DataWrappingIOSurface;
        if (DataWrappingIOSurface)
          goto LABEL_46;
        v14 = 4294950305;
        goto LABEL_42;
      case 5u:
        if (DataLength)
          goto LABEL_37;
        v26.version = 0;
        v21 = *(uint64_t (**)(const __CFData *, _QWORD, CFAllocatorContext *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 24);
        if (!v21)
        {
          v14 = 4294954514;
          goto LABEL_13;
        }
        DataPointer = v21(v10, 0, &v26);
        if ((_DWORD)DataPointer)
          goto LABEL_12;
        DataLength = v26.version;
        if (v26.version < 0)
        {
LABEL_65:
          v14 = 4294950190;
          goto LABEL_13;
        }
        version = v26.version;
LABEL_37:
        v22 = *(uint64_t (**)(const __CFData *, size_t, size_t, CMBlockBufferRef *, CFIndex *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v22)
        {
          DataPointer = v22(v10, DataLength, a3, &blockBufferOut, &version);
          if (!(_DWORD)DataPointer)
          {
            v31 = 1;
            v15 = blockBufferOut;
            v19 = version;
            v17 = a1;
            v18 = 0;
            v16 = 0;
LABEL_40:
            v23 = CMPhotoDataCreateFromSource(v17, v15, v18, v19, &v32, v16);
            v12 = 0;
            if ((_DWORD)v23)
            {
              v14 = v23;
LABEL_42:
              v10 = 0;
            }
            else
            {
LABEL_46:
              *a5 = v32;
              v32 = 0;
              v14 = 0;
              v10 = 0;
              if (a6)
                *a6 = v31;
            }
            break;
          }
LABEL_12:
          v14 = DataPointer;
          goto LABEL_13;
        }
        v12 = 0;
        v10 = 0;
        v14 = 4294954514;
        break;
      default:
LABEL_11:
        DataPointer = FigSignalErrorAt();
        goto LABEL_12;
    }
  }
  else
  {
    v14 = 0;
LABEL_13:
    v12 = 0;
    v10 = 0;
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
LABEL_56:
  if (v32)
    CFRelease(v32);
  return v14;
}

uint64_t _cfTypeDeallocator_allocate_0()
{
  return 0;
}

void _cfTypeDeallocator_deallocate_0(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t CMPhotoMergeDictionaryEntries(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, unsigned __int8 a4)
{
  _QWORD v5[4];

  v5[0] = 0;
  v5[1] = a1;
  v5[2] = a2;
  v5[3] = a4;
  if (!theDict)
    return 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_mergeDictionaryEntries, v5);
  return LODWORD(v5[0]);
}

void _mergeDictionaryEntries(const void *a1, CFTypeRef cf, uint64_t a3)
{
  CFTypeID v6;
  int v7;
  const __CFDictionary *v8;
  const void *Value;
  CFTypeID v10;
  CFMutableDictionaryRef MutableCopy;
  __int128 v12;
  __int128 v13;

  if (!*(_DWORD *)a3)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFDictionaryGetTypeID())
    {
      v7 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a3 + 16), a1);
      v8 = *(const __CFDictionary **)(a3 + 16);
      if (v7)
      {
        Value = CFDictionaryGetValue(v8, a1);
        v10 = CFGetTypeID(Value);
        if (v10 == CFDictionaryGetTypeID())
        {
          MutableCopy = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(a3 + 8), 0, (CFDictionaryRef)Value);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), a1, MutableCopy);
          v12 = 0u;
          v13 = 0u;
          LODWORD(v12) = *(_DWORD *)a3;
          *((_QWORD *)&v12 + 1) = *(_QWORD *)(a3 + 8);
          *(_QWORD *)&v13 = MutableCopy;
          BYTE8(v13) = *(_BYTE *)(a3 + 24);
          CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)_mergeDictionaryEntries, &v12);
          if (MutableCopy)
            CFRelease(MutableCopy);
        }
        else
        {
          *(_DWORD *)a3 = -17102;
        }
        return;
      }
    }
    else
    {
      v8 = *(const __CFDictionary **)(a3 + 16);
      if (*(_BYTE *)(a3 + 24))
      {
        CFDictionarySetValue(v8, a1, cf);
        return;
      }
    }
    CFDictionaryAddValue(v8, a1, cf);
  }
}

uint64_t CMPhotoPropertyListCopyWithMutableContainers(const __CFAllocator *a1, const void *a2, __CFArray **a3)
{
  CFTypeID v6;
  CFIndex Count;
  CFMutableDictionaryRef Mutable;
  __CFArray *v9;
  uint64_t v10;
  void *v11;
  CFTypeID v12;
  CFIndex v13;
  CFMutableArrayRef v14;
  CFIndex v15;
  const void *ValueAtIndex;
  const void *v17;
  CFTypeID v18;
  CFTypeID v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[2];
  uint64_t v24;
  void *value;

  value = 0;
  if (!a2)
    return 0;
  v6 = CFGetTypeID(a2);
  if (v6 == CFDictionaryGetTypeID())
  {
    Count = FigCFDictionaryGetCount();
    Mutable = CFDictionaryCreateMutable(a1, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v9 = Mutable;
      v23[1] = a1;
      v24 = 0;
      v23[0] = Mutable;
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)_transferDictionaryValue, v23);
      v10 = v24;
      if ((_DWORD)v24)
      {
        v11 = v9;
        goto LABEL_23;
      }
      goto LABEL_19;
    }
    return 4294950305;
  }
  v12 = CFGetTypeID(a2);
  if (v12 != CFArrayGetTypeID())
    return 0;
  v13 = CFArrayGetCount((CFArrayRef)a2);
  v14 = CFArrayCreateMutable(a1, v13, MEMORY[0x1E0C9B378]);
  if (!v14)
    return 4294950305;
  v9 = v14;
  if (CFArrayGetCount((CFArrayRef)a2) < 1)
  {
LABEL_18:
    v10 = 0;
LABEL_19:
    *a3 = v9;
    return v10;
  }
  v15 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v15);
    v17 = ValueAtIndex;
    if (ValueAtIndex)
    {
      v18 = CFGetTypeID(ValueAtIndex);
      if (v18 == CFDictionaryGetTypeID())
        break;
      v19 = CFGetTypeID(v17);
      if (v19 == CFArrayGetTypeID())
        break;
    }
    CFArrayAppendValue(v9, v17);
LABEL_17:
    if (++v15 >= CFArrayGetCount((CFArrayRef)a2))
      goto LABEL_18;
  }
  v20 = CMPhotoPropertyListCopyWithMutableContainers(a1, v17, &value);
  if (!(_DWORD)v20)
  {
    v21 = value;
    CFArrayAppendValue(v9, value);
    if (v21)
    {
      CFRelease(v21);
      value = 0;
    }
    goto LABEL_17;
  }
  v10 = v20;
  CFRelease(v9);
  v11 = value;
  if (value)
LABEL_23:
    CFRelease(v11);
  return v10;
}

void _transferDictionaryValue(void *key, CFTypeRef cf, uint64_t a3)
{
  CFTypeID v6;
  CFTypeID v7;
  int v8;
  __CFDictionary *v9;
  void *v10;
  void *value;

  value = 0;
  if (!*(_DWORD *)(a3 + 16))
  {
    if (cf
      && ((v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID()) || (v7 = CFGetTypeID(cf), v7 == CFArrayGetTypeID())))
    {
      v8 = CMPhotoPropertyListCopyWithMutableContainers(*(_QWORD *)(a3 + 8), cf, &value);
      if (!v8)
      {
        v9 = *(__CFDictionary **)a3;
        v10 = value;
        CFDictionarySetValue(v9, key, value);
        if (!v10)
          return;
LABEL_10:
        CFRelease(v10);
        return;
      }
      if (!*(_DWORD *)(a3 + 16))
        *(_DWORD *)(a3 + 16) = v8;
    }
    else
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, key, cf);
    }
    v10 = value;
    if (value)
      goto LABEL_10;
  }
}

uint64_t CMPhotoComputeMSEForPixelBuffer(__CVBuffer *a1, __CVBuffer *a2, unint64_t a3, uint64_t a4, int a5, double *a6, CVPixelBufferRef *a7)
{
  const __CFAllocator *v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v16;
  OSType PixelFormatType;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  double *v26;
  int v27;
  int v28;
  double v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  OSType v35;
  int BytesPerPixelForPixelFormat;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  char v41;
  char v42;
  size_t v43;
  void *BaseAddress;
  size_t v45;
  void *v46;
  uint64_t v47;
  int v48;
  int i;
  uint64_t v50;
  int v51;
  size_t v52;
  void *BaseAddressOfPlane;
  size_t v54;
  void *v55;
  int v56;
  int v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  int v71;
  int j;
  uint64_t v73;
  int v74;
  unint64_t v75;
  size_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  int k;
  uint64_t v86;
  int v87;
  CVPixelBufferRef v88;
  size_t BytesPerRowOfPlane;
  float *v90;
  float *v91;
  float *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  float *v98;
  float *v99;
  int v100;
  float v101;
  char v103;
  void *v104;
  size_t v105;
  char v106;
  void *v107;
  uint64_t v108;
  void *v109;
  int v110;
  size_t v111;
  uint64_t v112;
  void *v113;
  size_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  CVPixelBufferRef *v122;
  const __CFAllocator *allocator;
  int BitDepthForPixelFormat;
  unint64_t v125;
  __CFDictionary *cf;
  __CFDictionary *v127;
  double *v128;
  __CVBuffer *v129;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v16 = CFDictionaryCreateMutable(v12, 0, v13, v14);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], v16);
  v129 = a2;
  if (CMPhotoPixelBufferHasCLAP(a1)
    || CMPhotoPixelBufferHasCLAP(a2)
    || a3 && (a5 < 1 || a5 > a3))
  {
    FigSignalErrorAt();
    v30 = 0;
LABEL_99:
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0.0;
    goto LABEL_80;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a2)
    || (v18 = CVPixelBufferGetPixelFormatType(a2),
        v133 = 0,
        v134 = 0,
        CMPhotoGetPixelBufferCLAP(a1, 0, 0, &v133, &v134),
        v131 = 0,
        v132 = 0,
        CMPhotoGetPixelBufferCLAP(a2, 0, 0, &v131, &v132),
        v133 != v131)
    || v134 != v132)
  {
    v30 = FigSignalErrorAt();
    goto LABEL_99;
  }
  v127 = Mutable;
  v128 = a6;
  cf = v16;
  v122 = a7;
  allocator = v12;
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
LABEL_22:
    v26 = 0;
    goto LABEL_23;
  }
  v19 = (int)v134 - (a3 - 1);
  if (v19)
  {
    v22 = 0;
    v20 = 0;
    do
    {
      ++v20;
      v22 += a5;
    }
    while (v19 > v22);
  }
  else
  {
    v20 = 0;
  }
  v23 = (int)v133 - (a3 - 1);
  if (v23)
  {
    v24 = 0;
    v21 = 0;
    do
    {
      ++v21;
      v24 += a5;
    }
    while (v23 > v24);
  }
  else
  {
    v21 = 0;
  }
  v25 = v21 * v20;
  if (!(_DWORD)v25)
    goto LABEL_22;
  v26 = (double *)malloc_type_calloc(v25, 8uLL, 0x100004000313F17uLL);
  if (!v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0.0;
    v30 = 4294950305;
LABEL_79:
    Mutable = v127;
    a6 = v128;
    v16 = cf;
    goto LABEL_80;
  }
LABEL_23:
  v125 = a3;
  v31 = CMPhotoPixelFormatContainsYCbCr(v18);
  v32 = CMPhotoPixelFormatContainsRGB(v18);
  v33 = CMPhotoPixelFormatContainsGrayScale(v18);
  v34 = CVPixelBufferGetPixelFormatType(a2);
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v34);
  v35 = CVPixelBufferGetPixelFormatType(a2);
  BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v35);
  v37 = CVPixelBufferLockBaseAddress(a1, 0);
  v29 = 0.0;
  if ((_DWORD)v37)
  {
    v30 = v37;
    v27 = 0;
    v28 = 0;
    goto LABEL_79;
  }
  v38 = CVPixelBufferLockBaseAddress(a2, 0);
  if ((_DWORD)v38)
  {
    v30 = v38;
    v27 = 0;
    goto LABEL_96;
  }
  if (v33)
  {
    if ((v18 - 1278226736) <= 6 && ((1 << (v18 - 48)) & 0x45) != 0)
    {
      v40 = BitDepthForPixelFormat;
      v39 = v125;
      v41 = 16 - BitDepthForPixelFormat;
      goto LABEL_36;
    }
    v40 = BitDepthForPixelFormat;
    v39 = v125;
    if (v18 == 1278226488)
    {
      v41 = 0;
LABEL_36:
      v43 = CVPixelBufferGetBytesPerRow(v129) / BytesPerPixelForPixelFormat;
      BaseAddress = CVPixelBufferGetBaseAddress(v129);
      v45 = CVPixelBufferGetBytesPerRow(a1) / BytesPerPixelForPixelFormat;
      v46 = CVPixelBufferGetBaseAddress(a1);
      v47 = calc_ssd((uint64_t)BaseAddress, v43, (uint64_t)v46, v45, v40, v131, v132, v39, a5, 1u, v41, (uint64_t)v26, v21);
      v29 = (double)(unint64_t)v47 / ((double)v131 * (double)v132);
      if (v20)
      {
        v48 = 0;
        for (i = 0; i != v20; ++i)
        {
          v50 = v21;
          v51 = v48;
          if (v21)
          {
            do
            {
              v26[v51] = v26[v51] / ((double)v39 * (double)v39);
              ++v51;
              --v50;
            }
            while (v50);
          }
          v48 += v21;
        }
      }
      if (!v39)
        goto LABEL_77;
      goto LABEL_68;
    }
    goto LABEL_76;
  }
  if (!v31)
  {
    if (v32)
    {
      if (v18 != 1111970369 && v18 != 1815491698 && v18 != 1380401729)
        goto LABEL_76;
      v52 = CVPixelBufferGetBytesPerRow(a2) / BytesPerPixelForPixelFormat;
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      v54 = CVPixelBufferGetBytesPerRow(a1) / BytesPerPixelForPixelFormat;
      v55 = CVPixelBufferGetBaseAddress(a1);
      v115 = v131;
      v117 = v132;
      v56 = v52;
      v57 = v52;
      v110 = v52;
      v113 = v55;
      v58 = v55;
      v59 = v125;
      v120 = calc_ssd((uint64_t)BaseAddressOfPlane, v56, (uint64_t)v55, v54, BitDepthForPixelFormat, v131, v132, v125, a5, 4u, 0, 0, v21);
      v60 = 1;
      if (BitDepthForPixelFormat > 8)
        v60 = 2;
      v61 = (uint64_t)v58 + v60;
      if (BitDepthForPixelFormat <= 8)
        v62 = 2;
      else
        v62 = 4;
      v118 = calc_ssd((uint64_t)BaseAddressOfPlane + v60, v57, v61, v54, BitDepthForPixelFormat, v115, v117, v125, a5, 4u, 0, (uint64_t)v26, v21);
      v63 = (uint64_t)BaseAddressOfPlane + v62;
      v64 = v131;
      v65 = v132;
      v66 = calc_ssd(v63, v110, (uint64_t)v113 + v62, v54, BitDepthForPixelFormat, v131, v132, v125, a5, 4u, 0, 0, v21);
      v67 = (double)v64 * (double)v65;
      v68 = (double)(unint64_t)v120 / v67;
      v69 = (double)(unint64_t)v118 / v67;
      v70 = (double)(unint64_t)v66 / v67;
      if (v20)
      {
        v71 = 0;
        for (j = 0; j != v20; ++j)
        {
          v73 = v21;
          v74 = v71;
          if (v21)
          {
            do
            {
              v26[v74] = v26[v74] / ((double)v125 * (double)v125);
              ++v74;
              --v73;
            }
            while (v73);
          }
          v71 += v21;
        }
      }
      v29 = (v70 + v68 + v69) / 3.0;
      goto LABEL_67;
    }
    v30 = FigSignalErrorAt();
    v27 = 1;
LABEL_96:
    v28 = 1;
    goto LABEL_79;
  }
  if (v18 > 2016686639)
  {
    if (v18 != 2019963440 && v18 != 2016686640)
      goto LABEL_76;
    v42 = 6;
  }
  else
  {
    v42 = 0;
    if (v18 != 875704422 && v18 != 875704438)
    {
LABEL_76:
      FigSignalErrorAt();
      goto LABEL_77;
    }
  }
  v119 = v131 >> 1;
  v121 = v132 >> 1;
  v111 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0) / BytesPerPixelForPixelFormat;
  v75 = 2 * BytesPerPixelForPixelFormat;
  v114 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL) / v75;
  v116 = BytesPerPixelForPixelFormat;
  v107 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  v109 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  v76 = CVPixelBufferGetBytesPerRowOfPlane(a1, 0) / BytesPerPixelForPixelFormat;
  v105 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL) / v75;
  v77 = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  v104 = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  v103 = v42;
  v78 = (uint64_t)v77;
  LOBYTE(v77) = v42;
  v106 = v42;
  v59 = v125;
  v112 = calc_ssd((uint64_t)v107, v111, v78, v76, BitDepthForPixelFormat, v131, v132, v125, a5, 1u, v103, (uint64_t)v26, v21);
  v108 = calc_ssd((uint64_t)v109, v114, (uint64_t)v104, v105, BitDepthForPixelFormat, v119, v121, v125, a5, 2u, (char)v77, 0, 0);
  v79 = calc_ssd((uint64_t)v109 + v116, v114, (uint64_t)v104 + v116, v105, BitDepthForPixelFormat, v119, v121, v125, a5, 2u, v106, 0, 0);
  v80 = (double)v131 * (double)v132;
  v81 = (double)(unint64_t)v112 / v80;
  v82 = (double)(unint64_t)v79 / v80;
  v83 = (double)(unint64_t)v108 / v80;
  if (v20)
  {
    v84 = 0;
    for (k = 0; k != v20; ++k)
    {
      v86 = v21;
      v87 = v84;
      if (v21)
      {
        do
        {
          v26[v87] = v26[v87] / ((double)v125 * (double)v125);
          ++v87;
          --v86;
        }
        while (v86);
      }
      v84 += v21;
    }
  }
  v29 = (v83 + v82 + v81 * 6.0) * 0.125;
LABEL_67:
  if (!v59)
  {
LABEL_77:
    v30 = 0;
    goto LABEL_78;
  }
LABEL_68:
  v30 = CVPixelBufferCreate(allocator, v21, v20, 0x72673366u, 0, &pixelBufferOut);
  v88 = pixelBufferOut;
  if (!(_DWORD)v30)
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBufferOut, 0);
    v90 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 0);
    v91 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 1uLL);
    v92 = (float *)CVPixelBufferGetBaseAddressOfPlane(pixelBufferOut, 2uLL);
    if (v20)
    {
      v93 = 0;
      v94 = 0;
      v95 = 4 * (BytesPerRowOfPlane >> 2);
      do
      {
        v96 = v21;
        v97 = v90;
        v98 = v91;
        v99 = v92;
        v100 = v93;
        if (v21)
        {
          do
          {
            v101 = v26[v100];
            *v97++ = v101;
            *v98++ = v101;
            *v99++ = v101;
            ++v100;
            --v96;
          }
          while (v96);
        }
        ++v94;
        v93 += v21;
        v92 = (float *)((char *)v92 + v95);
        v91 = (float *)((char *)v91 + v95);
        v90 = (float *)((char *)v90 + v95);
      }
      while (v94 != v20);
    }
    CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    v88 = pixelBufferOut;
    if (v122)
    {
      v30 = 0;
      *v122 = pixelBufferOut;
      pixelBufferOut = 0;
LABEL_78:
      v27 = 1;
      v28 = 1;
      goto LABEL_79;
    }
    v30 = 0;
  }
  Mutable = v127;
  a6 = v128;
  v16 = cf;
  if (v88)
    CFRelease(v88);
  v27 = 1;
  v28 = 1;
LABEL_80:
  if (v16)
    CFRelease(v16);
  if (Mutable)
    CFRelease(Mutable);
  free(v26);
  if (a6)
    *a6 = v29;
  if (v28)
    CVPixelBufferUnlockBaseAddress(a1, 0);
  if (v27)
    CVPixelBufferUnlockBaseAddress(v129, 0);
  return v30;
}

uint64_t calc_ssd(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, unsigned int a10, char a11, uint64_t a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t i;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  if (a7)
  {
    v13 = 0;
    v14 = 0;
    v15 = a6 * a10;
    v16 = (int)a10 * (uint64_t)a2;
    v17 = (int)a10 * (uint64_t)a4;
    v18 = a3;
    v19 = a3;
    v20 = a1;
    v21 = a1;
    do
    {
      if (v15)
      {
        for (i = 0; i < v15; i += (int)a10)
        {
          if (a5 < 9)
          {
            v23 = *(unsigned __int8 *)(v21 + i);
            v24 = *(unsigned __int8 *)(v18 + i);
          }
          else
          {
            v23 = *(unsigned __int16 *)(v20 + 2 * i) >> a11;
            v24 = *(unsigned __int16 *)(v19 + 2 * i) >> a11;
          }
          v14 += (v23 - v24) * (uint64_t)(v23 - v24);
        }
      }
      ++v13;
      v21 += v16;
      v20 += 2 * v16;
      v19 += 2 * v17;
      v18 += v17;
    }
    while (v13 != a7);
  }
  else
  {
    v14 = 0;
  }
  if (a12)
  {
    v51 = a7 - (a8 - 1);
    if (a7 != a8 - 1)
    {
      v57 = 0;
      v25 = 0;
      v49 = (int)((a8 - 1) * a10);
      v50 = a6 * a10;
      v26 = (int)a10 * (uint64_t)a2;
      v27 = (int)a10 * (uint64_t)a4;
      v28 = (int)(a10 * a9);
      v48 = a9 * v27;
      v29 = 2 * v28;
      v47 = a9 * v26;
      v55 = a3;
      v56 = a1;
      do
      {
        v52 = v25;
        v53 = a1;
        v54 = a3;
        if (v50 != v49)
        {
          v30 = 0;
          v31 = 0;
          v32 = v56;
          v34 = a1;
          v33 = a3;
          v35 = v55;
          do
          {
            if (a8 < 1)
            {
              v37 = 0;
            }
            else
            {
              v36 = 0;
              v37 = 0;
              v38 = v34;
              v39 = v32;
              v40 = v33;
              v41 = v35;
              do
              {
                v42 = 0;
                v43 = a8;
                do
                {
                  if (a5 < 9)
                  {
                    v44 = *(unsigned __int8 *)(v39 + v42);
                    v45 = *(unsigned __int8 *)(v41 + v42);
                  }
                  else
                  {
                    v44 = *(unsigned __int16 *)(v38 + 2 * v42) >> a11;
                    v45 = *(unsigned __int16 *)(v40 + 2 * v42) >> a11;
                  }
                  v37 += (v44 - v45) * (uint64_t)(v44 - v45);
                  v42 += (int)a10;
                  --v43;
                }
                while (v43);
                ++v36;
                v41 += v27;
                v40 += 2 * v27;
                v39 += v26;
                v38 += 2 * v26;
              }
              while (v36 != a8);
            }
            *(double *)(a12 + 8 * (v30 + v57 * a13)) = (double)v37;
            ++v30;
            v31 += v28;
            v35 += v28;
            v33 += v29;
            v32 += v28;
            v34 += v29;
          }
          while (v50 - v49 > v31);
        }
        ++v57;
        v25 = v52 + a9;
        v55 += v48;
        a3 = v54 + 2 * v48;
        v56 += v47;
        a1 = v53 + 2 * v47;
      }
      while (v51 > v25);
    }
  }
  return v14;
}

uint64_t CMPhotoDecompressionSessionGetTypeID()
{
  pthread_once(&CMPhotoDecompressionSessionGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDecompressionSession);
  return sCMPhotoDecompressionSessionTypeID;
}

uint64_t CMPhotoDecompressionSessionSetSurfacePool(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;
  const void *v5;
  CFTypeRef v6;
  uint64_t v7;
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v5 = *(const void **)(a1 + 272);
  if (v5)
    CFRelease(v5);
  if (a2)
    v6 = CFRetain(a2);
  else
    v6 = 0;
  *(_QWORD *)(a1 + 272) = v6;
  v7 = *(_QWORD *)(a1 + 280);
  if (v7)
    goto LABEL_9;
  v8 = CFGetAllocator((CFTypeRef)a1);
  v9 = CMPhotoScaleAndRotateSessionCreate(v8, 0, (uint64_t *)(a1 + 280));
  if (!(_DWORD)v9)
  {
    v7 = *(_QWORD *)(a1 + 280);
LABEL_9:
    v9 = CMPhotoScaleAndRotateSessionSetSurfacePool(v7, a2);
  }
  v10 = v9;
  os_unfair_lock_unlock(v4);
  return v10;
}

uint64_t CMPhotoDecompressionSessionCopySequenceCodecPool(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  const void *v6;
  __CFDictionary *v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  const void **v11;
  const __CFAllocator *v12;
  CFTypeRef v13;

  v2 = 4294950306;
  if (!a1 || !a2)
    return v2;
  v5 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v6 = *(const void **)(a1 + 296);
  if (v6)
  {
    v7 = 0;
LABEL_10:
    v13 = CFRetain(v6);
    goto LABEL_11;
  }
  v8 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (!Mutable)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v10 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("MaxSimultaneousDecompressionSessions"), 3);
  if ((_DWORD)v10
    || (v10 = CMPhotoCFDictionarySetInt64(v7, CFSTR("IdleTimeoutMilliseconds"), 0), (_DWORD)v10)
    || (v11 = (const void **)(a1 + 296),
        v12 = CFGetAllocator((CFTypeRef)a1),
        v10 = CMPhotoCodecSessionPoolCreate(v12, v7, (uint64_t *)(a1 + 296)),
        (_DWORD)v10))
  {
LABEL_16:
    v2 = v10;
    os_unfair_lock_unlock(v5);
    if (!v7)
      return v2;
    goto LABEL_12;
  }
  v6 = *v11;
  if (*v11)
    goto LABEL_10;
  v13 = 0;
LABEL_11:
  os_unfair_lock_unlock(v5);
  v2 = 0;
  *a2 = v13;
  if (v7)
LABEL_12:
    CFRelease(v7);
  return v2;
}

void CMPhotoDecompressionSessionCancelAsyncRequest(uint64_t a1, const void *a2)
{
  os_unfair_lock_s *v4;

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  if (CFSetContainsValue(*(CFSetRef *)(a1 + 32), a2))
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 32), a2);
  else
    FigSignalErrorAt();
  os_unfair_lock_unlock(v4);
}

uint64_t CMPhotoDecompressionSetAsyncPreDecodeCallback(uint64_t a1, const void *a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  const void *v7;

  v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v7 = *(const void **)(a1 + 304);
  if (v7)
  {
    _Block_release(v7);
    *(_QWORD *)(a1 + 304) = 0;
  }
  *(_QWORD *)(a1 + 312) = 0;
  if (a2)
  {
    *(_QWORD *)(a1 + 304) = _Block_copy(a2);
    *(_QWORD *)(a1 + 312) = a3;
  }
  os_unfair_lock_unlock(v6);
  return 0;
}

uint64_t CMPhotoDecompressionSessionDiscardCachedBuffers(uint64_t a1)
{
  return CMPhotoDecompressionSessionFlushCachedBuffers(a1, 0, 1);
}

uint64_t CMPhotoDecompressionSessionReleaseHardwareResources(uint64_t a1)
{
  uint64_t result;

  if (!a1)
    return 4294950306;
  result = CMPhotoCodecSessionPoolFlush(*(_QWORD *)(a1 + 288), 2);
  if (!(_DWORD)result)
  {
    result = *(_QWORD *)(a1 + 296);
    if (result)
      return CMPhotoCodecSessionPoolFlush(result, 2);
  }
  return result;
}

BOOL CMPhotoDecompressionSessionSupportsCodec(int a1)
{
  return a1 == 1785750887 || VTSelectAndCreateVideoDecoderInstance() == 0;
}

CFTypeRef CMPhotoDecompressionSessionClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoDecompressionSession]"));
}

__CFString *CMPhotoDecompressionSession_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  os_unfair_lock_s *v5;
  const void *Default;
  CFStringRef v7;
  CFStringRef v8;
  const void *v9;
  CFStringRef v10;
  CFStringRef v11;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<CMPhotoDecompressionSession %p> {\n"), a1);
    v5 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    Default = *(const void **)(a1 + 288);
    if (!Default)
    {
      Default = (const void *)CMPhotoCodecSessionPoolGetDefault();
      if (!Default)
        goto LABEL_10;
    }
    if ((v7 = CFCopyDescription(Default)) != 0
      && ((v8 = v7,
           CFStringAppendFormat(v4, 0, CFSTR("\tCodecPool: {\n%@\n}\n"), v7),
           CFRelease(v8),
           (v9 = *(const void **)(a1 + 272)) != 0)
       || (v9 = (const void *)CMPhotoSurfacePoolGetDefault()) != 0)
      && (v10 = CFCopyDescription(v9)) != 0)
    {
      v11 = v10;
      CFStringAppendFormat(v4, 0, CFSTR("\tSurfacePool: {\n%@\n}\n"), v10);
      os_unfair_lock_unlock(v5);
      CFStringAppendFormat(v4, 0, CFSTR("}"));
      CFRelease(v11);
    }
    else
    {
LABEL_10:
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    }
  }
  return v4;
}

uint64_t CMPhotoGetCropPostOrientation(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, _OWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  if (!a5)
    return 4294950306;
  if (a4 == 1)
    goto LABEL_22;
  v23 = -1;
  v24 = 0;
  result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(a4, &v24, &v23);
  if ((_DWORD)result)
    return result;
  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  v13 = a3[3];
  v14 = (360 - v24) % 360;
  if (v14 == 270)
  {
    v10 = a1 - (v10 + v12);
    v15 = a3[1];
    goto LABEL_9;
  }
  if (v14 == 180)
  {
    v15 = a1 - (v10 + v12);
    v10 = a2 - (v11 + v13);
LABEL_12:
    v16 = a3[2];
    v12 = a3[3];
    goto LABEL_13;
  }
  if (v14 != 90)
  {
    v15 = *a3;
    v10 = a3[1];
    goto LABEL_12;
  }
  v15 = a2 - (v11 + v13);
LABEL_9:
  v16 = a3[3];
LABEL_13:
  if (v24 == 270 || v24 == 90)
  {
    v17 = a1;
    a1 = a2;
    a2 = v17;
  }
  v21 = v10;
  v22 = v15;
  if (!v23)
  {
    v18 = &v21;
    v15 = v10;
    v19 = v12;
    a1 = a2;
    goto LABEL_20;
  }
  if (v23 == 1)
  {
    v18 = &v22;
    v19 = v16;
LABEL_20:
    *v18 = a1 - v19 - v15;
    v10 = v21;
    v15 = v22;
  }
  *a3 = v15;
  a3[1] = v10;
  a3[2] = v16;
  a3[3] = v12;
LABEL_22:
  result = 0;
  v20 = *((_OWORD *)a3 + 1);
  *a5 = *(_OWORD *)a3;
  a5[1] = v20;
  return result;
}

uint64_t CMPhotoTranslateAndScalePreOrientationCrop(uint64_t a1, uint64_t a2, uint64x2_t *a3, int a4, uint64_t a5, uint64_t a6, int a7, _OWORD *a8)
{
  uint64_t result;
  uint64x2_t v17;
  uint64x2_t v18;
  float32x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  float64x2_t v23;
  int8x16_t v24;
  uint64x2_t v25;
  int32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int8x16_t v32;
  uint64x2_t v33;
  __int128 v34;
  __int128 v35;
  uint64x2_t v36;
  uint64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  _QWORD v40[4];
  _QWORD v41[4];
  __int128 v42;
  uint64x2_t v43;

  if (!a8)
    return 4294950306;
  v42 = 0u;
  v43 = 0u;
  v41[0] = 0;
  v41[1] = 0;
  v41[2] = a1;
  v41[3] = a2;
  result = CMPhotoGetCropPostOrientation(a1, a2, v41, a4, &v42);
  if (!(_DWORD)result)
  {
    v33 = v43;
    v40[0] = 0;
    v40[1] = 0;
    v40[2] = a5;
    v40[3] = a6;
    result = CMPhotoGetCropPostOrientation(a5, a6, v40, a7, &v42);
    if (!(_DWORD)result)
    {
      v32 = (int8x16_t)v43;
      v17 = a3[1];
      v38 = *(int64x2_t *)a3;
      v39 = (int64x2_t)v17;
      v18 = a3[1];
      v36 = *a3;
      v37 = v18;
      result = CMPhotoGetCropPostOrientation(a1, a2, &v36, a4, &v38);
      if (!(_DWORD)result)
      {
        v19 = vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v32)), vcvt_f32_f64(vcvtq_f64_u64(v33)));
        v20 = v38;
        v21 = v39;
        if (v19.f32[0] != 1.0 || v19.f32[1] != 1.0)
        {
          v23 = vcvtq_f64_f32(v19);
          v20 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_f64(v23, vcvtq_f64_u64((uint64x2_t)v38))));
          v21 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_f64(v23, vcvtq_f64_u64((uint64x2_t)v39))));
        }
        v24 = (int8x16_t)vaddq_s64(v20, v21);
        v25 = (uint64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v32, (uint64x2_t)v24), v24, v32);
        v26 = vmovn_s64((int64x2_t)vcgtq_u64(v25, (uint64x2_t)v20));
        if ((v26.i32[0] & v26.i32[1] & 1) != 0)
        {
          v27 = v20.i64[1];
          v28 = v20.i64[0];
          v29 = v25.i64[0] - v20.i64[0];
          v30 = v25.i64[1] - v20.i64[1];
        }
        else
        {
          v30 = 0;
          v29 = 0;
          v27 = 0;
          v28 = 0;
        }
        v34 = 0u;
        v35 = 0u;
        v36.i64[0] = v28;
        v36.i64[1] = v27;
        v37.i64[0] = v29;
        v37.i64[1] = v30;
        result = CMPhotoGetCropPreOrientation(v32.i64[0], v32.i64[1], &v36, a7, &v34);
        if (!(_DWORD)result)
        {
          v31 = v35;
          *a8 = v34;
          a8[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t CMPhotoPictureReaderCopyByteStreamForFirstTile(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t ContiguousBufferFromChunks;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, CFTypeRef *);
  CFTypeRef v10;
  uint64_t (*v11)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef cf;
  void *v19;
  void *v20;
  uint64_t v21;
  CFTypeRef v22;
  CFTypeRef v23;

  v22 = 0;
  v23 = 0;
  v20 = 0;
  v21 = 0;
  cf = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    goto LABEL_10;
  ContiguousBufferFromChunks = v6(a1, &v23);
  if ((_DWORD)ContiguousBufferFromChunks)
    goto LABEL_26;
  v8 = v23;
  v9 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v9)
    goto LABEL_10;
  ContiguousBufferFromChunks = v9(v8, &v22);
  if ((_DWORD)ContiguousBufferFromChunks)
    goto LABEL_26;
  v10 = v22;
  v11 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 40);
  if (!v11)
  {
LABEL_10:
    v14 = 4294954514;
    goto LABEL_15;
  }
  ContiguousBufferFromChunks = v11(v10, &v21, &v20, &v19, &cf, 0);
  if (!(_DWORD)ContiguousBufferFromChunks)
  {
    if (v21 == 1 && cf)
    {
      v12 = CFRetain(cf);
      v13 = *(_QWORD *)v20;
LABEL_14:
      v14 = 0;
      *a2 = v12;
      v17 = 0;
      *a3 = v13;
      goto LABEL_15;
    }
    ContiguousBufferFromChunks = _createContiguousBufferFromChunks(*MEMORY[0x1E0C9AE00], v21, (uint64_t)v20, (uint64_t)v19, (uint64_t)cf, 1, 0, 0, 0, (__CFData **)&v16);
    if (!(_DWORD)ContiguousBufferFromChunks)
    {
      ContiguousBufferFromChunks = FigByteStreamCreateWithCFData();
      if (!(_DWORD)ContiguousBufferFromChunks)
      {
        v13 = 0;
        v12 = v17;
        goto LABEL_14;
      }
    }
  }
LABEL_26:
  v14 = ContiguousBufferFromChunks;
LABEL_15:
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  free(v20);
  free(v19);
  return v14;
}

uint64_t CMPhotoPictureReaderCopyImageBitDepthForJPEG(uint64_t a1, CFMutableArrayRef *a2)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v5;
  uint64_t ImageInformationFromJFIFByteStream;
  const void *v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v13;
  uint64_t v14;
  const void *v15;
  int v16;

  v16 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v5 = Mutable;
  ImageInformationFromJFIFByteStream = CMPhotoPictureReaderCopyByteStreamForFirstTile(a1, &v15, &v14);
  v7 = v15;
  if (!(_DWORD)ImageInformationFromJFIFByteStream)
  {
    ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)v15, v14, 0, &v16, 0, 0, &v13, 0);
    if (!(_DWORD)ImageInformationFromJFIFByteStream)
    {
      v8 = 0;
      v9 = v16;
      while (1)
      {
        ImageInformationFromJFIFByteStream = FigCFArrayAppendInt();
        if ((_DWORD)ImageInformationFromJFIFByteStream)
          break;
        if (v9 != 6 && v8++ <= 1)
          continue;
        v11 = 0;
        if (!a2)
          goto LABEL_13;
        *a2 = v5;
        if (v7)
          goto LABEL_14;
        return v11;
      }
    }
  }
  v11 = ImageInformationFromJFIFByteStream;
LABEL_13:
  CFRelease(v5);
  if (v7)
LABEL_14:
    CFRelease(v7);
  return v11;
}

uint64_t CMPhotoPictureReaderGetYUVPixelFormatForJPEG(uint64_t a1, int *a2)
{
  uint64_t ImageInformationFromJFIFByteStream;
  CFTypeRef v4;
  uint64_t v5;
  uint64_t v7;
  CFTypeRef cf;
  uint64_t v9;

  cf = 0;
  v9 = 0;
  if (!a2)
    return 0;
  if (a1)
  {
    ImageInformationFromJFIFByteStream = CMPhotoPictureReaderCopyByteStreamForFirstTile(a1, &cf, &v9);
    v4 = cf;
    if (!(_DWORD)ImageInformationFromJFIFByteStream)
    {
      v7 = 0;
      ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream((uint64_t)cf, v9, 0, (int *)&v7 + 1, 0, 0, &v7, 0);
      if (!(_DWORD)ImageInformationFromJFIFByteStream)
        ImageInformationFromJFIFByteStream = CMPhotoGetYUVPixelFormatForParameters(SHIDWORD(v7), v7, 1, 0, 0, 0, 1, a2);
    }
    v5 = ImageInformationFromJFIFByteStream;
    if (v4)
      CFRelease(v4);
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoPictureReaderCopyBaseReaderAndPropertiesForDerivedPicture(const void *a1, _QWORD *a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t ImageGeometryFromPictureReader;
  CFAllocatorRef v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, _QWORD, CFAllocatorRef, const __CFBoolean **);
  const void *v12;
  BOOL v13;
  unsigned int Int;
  unint64_t v15;
  unsigned int v16;
  CFAllocatorRef v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, _QWORD, CFAllocatorRef, const __CFBoolean **);
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  CFAllocatorRef v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  const __CFArray *Value;
  const __CFArray *v29;
  CFTypeID v30;
  const void *ValueAtIndex;
  CFTypeRef v32;
  const void *v33;
  uint64_t v34;
  const __CFDictionary *v35;
  const __CFDictionary *v36;
  CFTypeID v37;
  const __CFDictionary *v38;
  double v39;
  double v40;
  double v41;
  const __CFBoolean *v42;
  signed int v43;
  unint64_t v44;
  unsigned int v46;
  uint64_t v47;
  const __CFBoolean *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  __int128 v65;
  _OWORD v66[2];
  uint64_t v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  unsigned __int128 v74;
  __int128 v75;
  const __CFBoolean *v76;
  CFTypeRef v77[2];

  v76 = 0;
  v77[0] = 0;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0;
  v71 = 0;
  v69 = 0uLL;
  v68 = 1;
  ImageGeometryFromPictureReader = CMPhotoPictureReaderGetImageGeometryFromPictureReader(a1, 0, (unint64_t)&v74, (unint64_t)&v70);
  if ((_DWORD)ImageGeometryFromPictureReader)
    goto LABEL_38;
  v9 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v11 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v11)
    goto LABEL_36;
  v12 = (const void *)*MEMORY[0x1E0CC4BC8];
  ImageGeometryFromPictureReader = v11(FigBaseObject, *MEMORY[0x1E0CC4BC8], v9, &v76);
  if ((_DWORD)ImageGeometryFromPictureReader)
    v13 = (_DWORD)ImageGeometryFromPictureReader == -12783;
  else
    v13 = 1;
  if (!v13)
    goto LABEL_38;
  if (v76)
  {
    Int = CMPhotoCFNumberGetInt(v76);
    HIDWORD(v15) = -1527099483 * Int + 47721858;
    LODWORD(v15) = HIDWORD(v15);
    if ((v15 >> 1) > 0x2D82D82)
      goto LABEL_97;
    v16 = Int;
    if (v76)
    {
      CFRelease(v76);
      v76 = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = CFGetAllocator(a1);
  v18 = FigPictureReaderGetFigBaseObject();
  v19 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v19)
  {
LABEL_36:
    v33 = 0;
    v22 = 4294954514;
    goto LABEL_40;
  }
  v20 = (const void *)*MEMORY[0x1E0CC4B98];
  v21 = v19(v18, *MEMORY[0x1E0CC4B98], v17, &v76);
  if ((_DWORD)v21)
  {
    v22 = v21;
    if ((_DWORD)v21 != -12783)
      goto LABEL_39;
  }
  if (!v76)
  {
    v24 = -1;
    goto LABEL_21;
  }
  v23 = CMPhotoCFNumberGetInt(v76);
  if (v23 > 1)
  {
LABEL_97:
    v33 = 0;
LABEL_98:
    v22 = 4294950195;
    goto LABEL_40;
  }
  v24 = v23;
  if (v76)
  {
    CFRelease(v76);
    v76 = 0;
  }
LABEL_21:
  v25 = CFGetAllocator(a1);
  v26 = FigPictureReaderGetFigBaseObject();
  v27 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v27)
    goto LABEL_36;
  ImageGeometryFromPictureReader = v27(v26, *MEMORY[0x1E0CC4B28], v25, v77);
  if ((_DWORD)ImageGeometryFromPictureReader)
  {
LABEL_38:
    v22 = ImageGeometryFromPictureReader;
LABEL_39:
    v33 = 0;
    goto LABEL_40;
  }
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v77[0], (const void *)*MEMORY[0x1E0CC4B40]);
  if (!Value
    || (v29 = Value, v30 = CFGetTypeID(Value), v30 != CFArrayGetTypeID())
    || CFArrayGetCount(v29) != 1
    || (ValueAtIndex = CFArrayGetValueAtIndex(v29, 0)) == 0
    || (v32 = CFRetain(ValueAtIndex)) == 0)
  {
    ImageGeometryFromPictureReader = FigSignalErrorAt();
    goto LABEL_38;
  }
  v33 = v32;
  v34 = CMPhotoPictureReaderGetImageGeometryFromPictureReader(v32, 0, 0, (unint64_t)&v69);
  if ((_DWORD)v34)
  {
LABEL_101:
    v22 = v34;
    goto LABEL_40;
  }
  v73 = v69;
  v35 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v77[0], (const void *)*MEMORY[0x1E0CC4B38]);
  if (!v35)
  {
    v43 = 0;
    v46 = -1;
    v47 = v73;
LABEL_58:
    if (v47 != v70)
      goto LABEL_98;
    v49 = *((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1) != v71)
      goto LABEL_98;
    goto LABEL_60;
  }
  v36 = v35;
  v37 = CFGetTypeID(v35);
  if (v37 != CFDictionaryGetTypeID())
  {
    v34 = FigSignalErrorAt();
    goto LABEL_101;
  }
  v38 = (const __CFDictionary *)CFDictionaryGetValue(v36, (const void *)*MEMORY[0x1E0CA8D50]);
  if (v38)
  {
    *(_QWORD *)&v72 = vcvtad_u64_f64(CMPhotoGetCropRectFromCLAPDict(v38, (double)(unint64_t)v69, (double)*((unint64_t *)&v69 + 1)));
    *((_QWORD *)&v72 + 1) = vcvtad_u64_f64(v39);
    *(_QWORD *)&v73 = vcvtad_u64_f64(v40);
    *((_QWORD *)&v73 + 1) = vcvtad_u64_f64(v41);
  }
  v42 = (const __CFBoolean *)CFDictionaryGetValue(v36, v12);
  if (v42)
  {
    v43 = CMPhotoCFNumberGetInt(v42);
    HIDWORD(v44) = -1527099483 * v43 + 47721858;
    LODWORD(v44) = HIDWORD(v44);
    if ((v44 >> 1) > 0x2D82D82)
      goto LABEL_98;
  }
  else
  {
    v43 = 0;
  }
  v48 = (const __CFBoolean *)CFDictionaryGetValue(v36, v20);
  if (v48)
  {
    v46 = CMPhotoCFNumberGetInt(v48);
    if (v46 > 1)
      goto LABEL_98;
  }
  else
  {
    v46 = -1;
  }
  v49 = v73;
  HIDWORD(v50) = -1527099483 * v43 + 47721856;
  LODWORD(v50) = HIDWORD(v50);
  if ((v50 >> 2) <= 0x16C16C0)
  {
    v47 = v73;
    goto LABEL_58;
  }
  if ((_QWORD)v73 != v71)
    goto LABEL_98;
  v47 = *((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1) != v70)
    goto LABEL_98;
LABEL_60:
  v51 = *((_QWORD *)&v74 + 1);
  v53 = v74;
  v67 = v53 >> 64;
  v52 = v53;
  *(_QWORD *)&v66[0] = v74;
  v55 = *((_QWORD *)&v75 + 1);
  v54 = v75;
  if (v46 == 1)
  {
    v56 = (uint64_t *)v66;
    v57 = v75;
    v58 = v47;
  }
  else
  {
    if (v46)
      goto LABEL_65;
    v56 = &v67;
    v52 = *((_QWORD *)&v74 + 1);
    v57 = *((_QWORD *)&v75 + 1);
    v58 = v49;
  }
  *v56 = v58 - v57 - v52;
  v52 = *(_QWORD *)&v66[0];
  v51 = v67;
LABEL_65:
  v59 = v43 % 360;
  if (v43 % 360 == 270)
  {
    v52 = v47 - v52 - v54;
    v60 = v51;
    goto LABEL_70;
  }
  if (v59 == 180)
  {
    v60 = v47 - v52 - v54;
    v52 = v49 - v51 - v55;
LABEL_73:
    v61 = v54;
    v54 = v55;
    goto LABEL_74;
  }
  if (v59 != 90)
  {
    v60 = v52;
    v52 = v51;
    goto LABEL_73;
  }
  v60 = v49 - v51 - v55;
LABEL_70:
  v61 = v55;
LABEL_74:
  *(_QWORD *)&v74 = v60;
  *((_QWORD *)&v74 + 1) = v52;
  *(_QWORD *)&v75 = v61;
  *((_QWORD *)&v75 + 1) = v54;
  if (v46 != -1 && (v16 == 270 || v16 == 90))
  {
    if (v16 < 0xB4)
      v62 = 180;
    else
      v62 = -180;
    v16 += v62;
  }
  v66[0] = v74;
  v66[1] = v75;
  v34 = CMPhotoApplyCropCMPhotoRectToRect(&v72, (unint64_t *)v66);
  if ((_DWORD)v34)
    goto LABEL_101;
  v63 = (int)(v16 + v43) % 360;
  if (v24 == v46)
    goto LABEL_89;
  if (v24 == -1)
    v64 = v46;
  else
    v64 = v24;
  if (v24 != -1 && v46 != -1)
  {
    v63 = (__int16)(v63 + 180) % 360;
LABEL_89:
    v64 = -1;
  }
  v34 = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(v63, v64, &v68);
  if ((_DWORD)v34)
    goto LABEL_101;
  if (a2)
  {
    *a2 = v33;
    v33 = 0;
  }
  if (a3)
  {
    v65 = v73;
    *a3 = v72;
    a3[1] = v65;
  }
  v22 = 0;
  if (a4)
    *a4 = v68;
LABEL_40:
  if (v77[0])
    CFRelease(v77[0]);
  if (v76)
    CFRelease(v76);
  if (v33)
    CFRelease(v33);
  return v22;
}

uint64_t CMPhotoPictureReaderCopyFormatDescriptorFromReader(uint64_t a1, uint64_t a2, int a3, CMFormatDescriptionRef *a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t, CMFormatDescriptionRef *);
  uint64_t v10;
  FourCharCode MediaSubType;
  uint64_t (*v12)(uint64_t, CFTypeRef *);
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, CFTypeRef *);
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t, CMFormatDescriptionRef *);
  uint64_t v17;
  uint64_t v18;
  CMFormatDescriptionRef desc;
  CFTypeRef cf;
  CFTypeRef v22;

  cf = 0;
  v22 = 0;
  desc = 0;
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v9)
    goto LABEL_15;
  v10 = v9(FigBaseObject, *MEMORY[0x1E0CC4B58], a2, &desc);
  if ((_DWORD)v10)
    goto LABEL_26;
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (!a3 || MediaSubType != 1735551332)
  {
    if (!a4)
    {
      v18 = 0;
      goto LABEL_19;
    }
LABEL_17:
    v18 = 0;
    *a4 = desc;
    desc = 0;
    goto LABEL_19;
  }
  if (desc)
  {
    CFRelease(desc);
    desc = 0;
  }
  v12 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v12)
  {
LABEL_15:
    v18 = 4294954514;
    goto LABEL_19;
  }
  v10 = v12(a1, &v22);
  if ((_DWORD)v10)
  {
LABEL_26:
    v18 = v10;
    goto LABEL_19;
  }
  v13 = v22;
  v14 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
    goto LABEL_15;
  v10 = v14(v13, &cf);
  if ((_DWORD)v10)
    goto LABEL_26;
  CMBaseObject = FigPictureTileCursorGetCMBaseObject();
  v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
  if (!v16)
    goto LABEL_15;
  v17 = v16(CMBaseObject, *MEMORY[0x1E0CC4BF8], a2, &desc);
  v18 = v17;
  if (a4 && !(_DWORD)v17)
    goto LABEL_17;
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v22)
    CFRelease(v22);
  if (desc)
    CFRelease(desc);
  return v18;
}

uint64_t _readBytesFromChunks(int64x2_t *a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t *);
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;

  v8 = a1[2].i64[0];
  v9 = a1[2].u64[1];
  if (*(_OWORD *)&a1[2] == 0)
  {
    v10 = (unint64_t *)a1[1].i64[0];
    v9 = *v10;
    a1[2].i64[1] = *v10;
  }
  v11 = a1[3].u64[0];
  if (v11 >= v9)
  {
    a1[2].i64[0] = ++v8;
    if (v8 >= a1->i64[0])
      return 4294950194;
    v11 = 0;
    v9 = *(_QWORD *)(a1[1].i64[0] + 8 * v8);
    a1[2].i64[1] = v9;
    a1[3].i64[0] = 0;
  }
  v18 = 0;
  v12 = a1[1].i64[1];
  v13 = *(_QWORD *)(a1->i64[1] + 8 * v8);
  v14 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
    return 4294954514;
  if (v9 - v11 >= a2)
    v15 = a2;
  else
    v15 = v9 - v11;
  result = v14(v12, v15, v13 + v11, a3, &v18);
  if (!(_DWORD)result)
  {
    v17 = v18;
    a1[3] = vaddq_s64(a1[3], vdupq_n_s64(v18));
    result = 0;
    if (a4)
      *a4 = v17;
  }
  return result;
}

uint64_t _processCompressedData(compression_stream *stream, CFDataRef theData, int flags, _BYTE *a4)
{
  unint64_t Length;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;

  if (!stream->dst_size)
  {
    Length = CFDataGetLength(theData);
    v9 = (unint64_t)fmin(round((double)Length * 1.25), 10485760.0);
    if (Length >= v9)
      return FigSignalErrorAt();
    v10 = Length;
    CFDataSetLength(theData, v9);
    stream->dst_ptr = &CFDataGetMutableBytePtr(theData)[v10];
    stream->dst_size = CFDataGetLength(theData) - v10;
  }
  result = compression_stream_process(stream, flags);
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result != 1)
    return FigSignalErrorAt();
  result = 0;
  *a4 = 1;
  return result;
}

uint64_t CMPhotoJPEGWriteMPFWithJPEG(__IOSurface *a1, CFIndex a2, IOSurfaceRef *a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  IOSurfaceRef *v7;
  uint64_t *v8;
  uint64_t CMBaseObject;
  unsigned int (*v12)(uint64_t, _QWORD);
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  OSType PixelFormat;
  size_t BytesPerRowOfPlane;
  size_t v20;
  const UInt8 *BaseAddress;
  const __CFAllocator *v22;
  const __CFData *v23;
  const UInt8 *BytePtr;
  CFIndex Length;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  CFIndex v29;
  uint64_t v30;
  CFIndex v31;
  const UInt8 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  size_t v38;
  char *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  OSType v52;
  __IOSurface *v53;
  size_t v54;
  uint64_t v55;
  void *BaseAddressOfPlane;
  __IOSurface *v57;
  size_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v64;
  const __CFData *v65;
  uint64_t v66;
  CFAllocatorRef allocator;
  CFAllocatorRef allocatora;
  __IOSurface *buffer;
  uint64_t v71;
  CFBooleanRef BOOLean;

  v71 = 0;
  BOOLean = 0;
  if (!a1
    || !a2
    || (int)a5 <= 0
    || (v7 = a3) == 0
    || (v8 = a4) == 0
    || !a6
    || (CMBaseObject = CMByteStreamGetCMBaseObject(),
        (v12 = *(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
    || (allocator = (CFAllocatorRef)*MEMORY[0x1E0C9AE00], v12(CMBaseObject, *MEMORY[0x1E0CA20A0]))
    || !CFBooleanGetValue(BOOLean))
  {
    v66 = FigSignalErrorAt();
    v14 = 0;
    v64 = 0;
    v65 = 0;
    goto LABEL_60;
  }
  buffer = a1;
  v13 = a5;
  v14 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
  v15 = 0;
  do
  {
    PixelFormat = IOSurfaceGetPixelFormat(v7[v15]);
    if (PixelFormat != 875704422 && PixelFormat != 1246774599 && PixelFormat != 875704438)
    {
      v64 = 0;
      v65 = 0;
      v66 = 4294954516;
      goto LABEL_60;
    }
    v14[v15] = PixelFormat;
    if ((PixelFormat | 0x10) == 0x34323076)
    {
      BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v7[v15], 0);
      v8[v15] = IOSurfaceGetHeightOfPlane(v7[v15], 0) * BytesPerRowOfPlane;
      v20 = IOSurfaceGetBytesPerRowOfPlane(v7[v15], 1uLL);
      v8[v15] += IOSurfaceGetHeightOfPlane(v7[v15], 1uLL) * v20;
    }
    ++v15;
  }
  while (a5 != v15);
  IOSurfaceLock(buffer, 1u, 0);
  BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
  v22 = allocator;
  allocatora = (CFAllocatorRef)a2;
  v23 = CFDataCreateWithBytesNoCopy(v22, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v65 = v23;
  if (!v23)
  {
    v64 = 0;
LABEL_71:
    v66 = 4294954510;
    goto LABEL_59;
  }
  BytePtr = CFDataGetBytePtr(v23);
  Length = CFDataGetLength(v65);
  v26 = 0;
  v27 = 0;
LABEL_24:
  v28 = v27;
  v29 = Length - v27;
  if (Length > v27)
  {
    v30 = 0;
    v31 = Length;
    v32 = BytePtr;
    do
    {
      v33 = v32[v28];
      if (v26)
      {
        if ((v33 & 0xF0) == 0xE0)
        {
          if (v29 + v30 >= 8)
          {
            v27 = v28 + __rev16(*(unsigned __int16 *)&v32[v28 + 1]) - v30 + 1;
            v26 = 1;
            if (v27 < Length)
              goto LABEL_24;
          }
          break;
        }
        if ((v33 | 2) == 0xC2)
        {
          v34 = v29 + v30;
          v35 = ~v30 + v28;
          if (v34 >= 9)
            v28 = v35;
          break;
        }
      }
      ++v32;
      v26 = v33 == 255;
      --v30;
      --v31;
    }
    while (v28 != v31);
  }
  if (v28 <= 0)
  {
    v66 = FigSignalErrorAt();
  }
  else
  {
    CFRelease(v65);
    v36 = IOSurfaceGetBaseAddress(buffer);
    v37 = byteStreamWrite(a6, (uint64_t)v36, v28, &v71);
    if (!(_DWORD)v37)
    {
      v38 = (int)(16 * a5 + 74);
      v39 = (char *)malloc_type_malloc(v38, 0xF5B6BD84uLL);
      v64 = v39;
      if (v39)
      {
        v40 = 0;
        *(_WORD *)v39 = -7425;
        v41 = 16 * (a5 + 1);
        *((_WORD *)v39 + 1) = bswap32(v41 + 56) >> 16;
        *(_QWORD *)(v39 + 4) = 0x2A004D4D004D4441;
        *(_QWORD *)(v39 + 12) = 0xB0030008000000;
        *((_WORD *)v39 + 10) = 1792;
        *(_QWORD *)(v39 + 22) = 0x3030313004000000;
        *(_QWORD *)(v39 + 30) = 0x1000000040001B0;
        *(_DWORD *)(v39 + 38) = bswap32(a5 + 1);
        *(_DWORD *)(v39 + 42) = 117441200;
        *(_DWORD *)(v39 + 46) = bswap32(v41);
        *(_QWORD *)(v39 + 50) = 838860800;
        v42 = v41 + 58 + (_DWORD)allocatora - v28 - 8;
        *(_DWORD *)(v39 + 58) = 768;
        *(_DWORD *)(v39 + 62) = bswap32(v41 + 58 + (_DWORD)allocatora);
        v43 = (unsigned int *)v8;
        v44 = a5;
        *(_QWORD *)(v39 + 66) = 0;
        do
        {
          v45 = &v64[1 * v40];
          v46 = v14[v40];
          if (v46 == 875704422)
            v47 = 117571586;
          else
            v47 = 131074;
          if (v46 == 875704438)
            v48 = 100794370;
          else
            v48 = v47;
          *(_DWORD *)(v45 + 74) = bswap32(v48);
          *(_DWORD *)(v45 + 78) = bswap32(*v43);
          *(_QWORD *)(v45 + 82) = bswap32(v42);
          v49 = *v43;
          v43 += 2;
          v42 += v49;
          ++v40;
          --v44;
        }
        while (v44);
        if (v41 + 58 == (_DWORD)v38)
        {
          v50 = byteStreamWrite(a6, (uint64_t)v64, v38, &v71);
          if (!(_DWORD)v50)
          {
            v51 = IOSurfaceGetBaseAddress(buffer);
            v50 = byteStreamWrite(a6, (uint64_t)v51 + v28, (uint64_t)allocatora - v28, &v71);
            if (!(_DWORD)v50)
            {
              while (1)
              {
                IOSurfaceLock(*v7, 1u, 0);
                v52 = IOSurfaceGetPixelFormat(*v7) & 0xFFFFFFEF;
                v53 = *v7;
                if (v52 == 875704422)
                {
                  v54 = IOSurfaceGetBytesPerRowOfPlane(v53, 0);
                  v55 = IOSurfaceGetHeightOfPlane(*v7, 0) * v54;
                  BaseAddressOfPlane = IOSurfaceGetBaseAddressOfPlane(*v7, 0);
                  v66 = byteStreamWrite(a6, (uint64_t)BaseAddressOfPlane, v55, &v71);
                  v57 = *v7;
                  if ((_DWORD)v66)
                  {
                    IOSurfaceUnlock(v57, 1u, 0);
                    goto LABEL_58;
                  }
                  v58 = IOSurfaceGetBytesPerRowOfPlane(v57, 1uLL);
                  v59 = IOSurfaceGetHeightOfPlane(*v7, 1uLL) * v58;
                  v60 = IOSurfaceGetBaseAddressOfPlane(*v7, 1uLL);
                  v61 = a6;
                  v62 = v59;
                }
                else
                {
                  v60 = IOSurfaceGetBaseAddress(v53);
                  v62 = *v8;
                  v61 = a6;
                }
                v66 = byteStreamWrite(v61, (uint64_t)v60, v62, &v71);
                IOSurfaceUnlock(*v7, 1u, 0);
                if ((_DWORD)v66)
                  goto LABEL_58;
                ++v8;
                ++v7;
                if (!--v13)
                {
                  v66 = 0;
                  goto LABEL_58;
                }
              }
            }
          }
        }
        else
        {
          v50 = FigSignalErrorAt();
        }
        v66 = v50;
LABEL_58:
        v65 = 0;
        goto LABEL_59;
      }
      v65 = 0;
      goto LABEL_71;
    }
    v66 = v37;
    v65 = 0;
  }
  v64 = 0;
LABEL_59:
  IOSurfaceUnlock(buffer, 1u, 0);
LABEL_60:
  free(v64);
  free(v14);
  if (v65)
    CFRelease(v65);
  if (BOOLean)
    CFRelease(BOOLean);
  return v66;
}

uint64_t byteStreamWrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t result;
  uint64_t v12;

  v8 = *a4;
  v12 = 0;
  v9 = v8;
  do
  {
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
    if (!v10)
      return 4294954514;
    result = v10(a1, a3, v9, a2 + v9 - v8, &v12);
    if ((_DWORD)result)
      return result;
    v9 += v12;
    a3 -= v12;
  }
  while (v12 && a3);
  if (a3)
    return 4294954516;
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t CMPhotoJPEGAddMPDataToJPEG(__IOSurface *a1, CFIndex a2, IOSurfaceRef *a3, uint64_t *a4, signed int a5, __CFDictionary **a6, CFIndex *a7)
{
  CFIndex v11;
  IOSurfaceRef *v12;
  uint64_t *v13;
  uint64_t v14;
  size_t BytesPerRowOfPlane;
  size_t v16;
  size_t v17;
  __CFDictionary *JPEGSurface;
  uint64_t WritableWithIOSurface;
  uint64_t v20;

  v11 = a2 + 16 * a5 + 74;
  if (a5 >= 1)
  {
    v12 = a3;
    v13 = a4;
    v14 = a5;
    do
    {
      if ((IOSurfaceGetPixelFormat(*v12) & 0xFFFFFFEF) == 0x34323066)
      {
        BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(*v12, 0);
        v16 = v11 + IOSurfaceGetHeightOfPlane(*v12, 0) * BytesPerRowOfPlane;
        v17 = IOSurfaceGetBytesPerRowOfPlane(*v12, 1uLL);
        v11 = v16 + IOSurfaceGetHeightOfPlane(*v12, 1uLL) * v17;
      }
      else
      {
        v11 += *v13;
      }
      ++v13;
      ++v12;
      --v14;
    }
    while (v14);
  }
  JPEGSurface = createJPEGSurface(v11);
  if (JPEGSurface)
  {
    WritableWithIOSurface = FigByteStreamCreateWritableWithIOSurface();
    if ((_DWORD)WritableWithIOSurface)
    {
      v20 = WritableWithIOSurface;
    }
    else
    {
      v20 = CMPhotoJPEGWriteMPFWithJPEG(a1, a2, a3, a4, a5, 0);
      if (!(_DWORD)v20)
      {
        *a6 = JPEGSurface;
        *a7 = v11;
        JPEGSurface = 0;
      }
    }
  }
  else
  {
    v20 = 4294954510;
  }
  if (JPEGSurface)
    CFRelease(JPEGSurface);
  return v20;
}

__CFDictionary *createJPEGSurface(int a1)
{
  uint64_t v2;
  __CFDictionary *result;
  __CFDictionary *v4;
  IOSurfaceRef v5;

  v2 = *MEMORY[0x1E0C85AD8];
  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (result)
  {
    v4 = result;
    setIntValue_0(result, (const void *)*MEMORY[0x1E0CBBF10], 0);
    setIntValue_0(v4, (const void *)*MEMORY[0x1E0CBC070], 1246774599);
    setIntValue_0(v4, (const void *)*MEMORY[0x1E0CBBEE0], (a1 + v2 - 1) & -(int)v2);
    v5 = IOSurfaceCreate(v4);
    CFRelease(v4);
    return v5;
  }
  return result;
}

uint64_t CMPhotoJPEGCopyMPDataFromJPEG(IOSurfaceRef buffer, CFIndex a2, int a3, __IOSurface **a4, _QWORD *a5)
{
  uint64_t result;
  const __CFAllocator *v11;
  const UInt8 *BaseAddress;
  const __CFData *v13;
  CFIndex MPTag;
  CFIndex v15;
  const UInt8 *BytePtr;
  __CFDictionary *JPEGSurface;
  __IOSurface *v18;
  uint64_t v19;
  CFIndex v20;
  const UInt8 *v21;
  void *v22;
  int v23;
  void *v24;
  void *v25;
  void *v26;

  result = 0xFFFFFFFFLL;
  if (buffer && a4 && a5)
  {
    IOSurfaceLock(buffer, 1u, 0);
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
    v13 = CFDataCreateWithBytesNoCopy(v11, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    MPTag = findMPTag(v13);
    if (MPTag)
    {
      v15 = MPTag;
      BytePtr = CFDataGetBytePtr(v13);
      v25 = 0;
      v26 = 0;
      v24 = 0;
      v23 = 0;
      if (!parseInitialMPFHeader((unsigned __int16 *)&BytePtr[v15], &v26, &v25, (unsigned int **)&v24, &v23))
      {
        JPEGSurface = createJPEGSurface(*((_QWORD *)v25 + a3));
        if (JPEGSurface)
        {
          v18 = JPEGSurface;
          v19 = a3;
          IOSurfaceLock(JPEGSurface, 0, 0);
          v20 = v15 + 8;
          if (!a3)
            v20 = 0;
          v21 = &BytePtr[*((_QWORD *)v26 + a3) + v20];
          v22 = IOSurfaceGetBaseAddress(v18);
          memcpy(v22, v21, *((_QWORD *)v25 + v19));
          IOSurfaceUnlock(v18, 0, 0);
          *a4 = v18;
          *a5 = *((_QWORD *)v25 + v19);
        }
        free(v26);
        free(v25);
        free(v24);
      }
    }
    CFRelease(v13);
    IOSurfaceUnlock(buffer, 1u, 0);
    return 0;
  }
  return result;
}

CFIndex findMPTag(const __CFData *a1)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v4;
  BOOL v5;
  int v6;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (Length < 1)
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = BytePtr[v4];
    if (v5)
      break;
LABEL_10:
    v5 = v6 == 255;
    ++v4;
LABEL_11:
    if (v4 >= Length)
      return 0;
  }
  if ((v6 & 0xF0) != 0xE0)
  {
    if ((v6 | 2) == 0xC2)
      return 0;
    goto LABEL_10;
  }
  if (Length - v4 < 8)
    return 0;
  if ((v6 & 0xF) != 2)
  {
    v4 += 1 + __rev16(*(unsigned __int16 *)&BytePtr[v4 + 1]);
    if (v4 >= Length)
      return 0;
    v5 = 1;
    goto LABEL_11;
  }
  return v4 - 1;
}

uint64_t parseInitialMPFHeader(unsigned __int16 *a1, _QWORD *a2, _QWORD *a3, unsigned int **a4, int *a5)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v13;
  unsigned int *i;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t result;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  _QWORD *v27;
  _QWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  if (*a1 != 58111 || *((_DWORD *)a1 + 1) != 5063745)
    return 0xFFFFFFFFLL;
  v6 = *((_DWORD *)a1 + 2);
  v7 = a1[8];
  v8 = bswap32(v7) >> 16;
  if (v6 == 704662861)
    LOWORD(v7) = v8;
  v7 = (unsigned __int16)v7;
  if (!(_WORD)v7)
    return 0;
  v13 = 0;
  for (i = (unsigned int *)(a1 + 13); ; i += 3)
  {
    v15 = *((unsigned __int16 *)i - 4);
    v16 = bswap32(v15) >> 16;
    if (v6 == 704662861)
      LOWORD(v15) = v16;
    if ((unsigned __int16)v15 == 45056)
    {
      v17 = *i;
      v18 = bswap32(*i);
      if (v6 == 704662861)
        v17 = v18;
      if (v17 != 808529968)
        return 0xFFFFFFFFLL;
      goto LABEL_20;
    }
    if ((unsigned __int16)v15 == 45057)
    {
      v19 = bswap32(*i);
      if (v6 == 704662861)
        v13 = v19;
      else
        v13 = *i;
      goto LABEL_20;
    }
    if ((unsigned __int16)v15 == 45058)
      break;
LABEL_20:
    if (!--v7)
      return 0;
  }
  if (!v13)
    return 0xFFFFFFFFLL;
  if (a2)
    v21 = malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
  else
    v21 = 0;
  if (a3)
    v22 = malloc_type_malloc(8 * v13, 0x100004000313F17uLL);
  else
    v22 = 0;
  if (a4)
    v23 = (unsigned int *)malloc_type_malloc(4 * v13, 0x100004052888210uLL);
  else
    v23 = 0;
  if (v13 >= 1)
  {
    LODWORD(v24) = bswap32(*i);
    if (v6 == 704662861)
      v24 = v24;
    else
      v24 = *i;
    v25 = v13;
    v26 = (unsigned int *)((char *)a1 + v24 + 16);
    v27 = v21;
    v28 = v22;
    v29 = v23;
    do
    {
      if (v21)
      {
        LODWORD(v30) = *v26;
        v31 = bswap32(*v26);
        if (v6 == 704662861)
          v30 = v31;
        else
          v30 = v30;
        *v27 = v30;
      }
      if (v22)
      {
        LODWORD(v32) = *(v26 - 1);
        v33 = bswap32(v32);
        if (v6 == 704662861)
          v32 = v33;
        else
          v32 = v32;
        *v28 = v32;
      }
      if (v23)
      {
        v34 = *(v26 - 2);
        v35 = bswap32(v34);
        if (v6 == 704662861)
          v34 = v35;
        *v29 = v34;
      }
      ++v29;
      ++v28;
      ++v27;
      v26 += 4;
      --v25;
    }
    while (v25);
  }
  if (a2)
    *a2 = v21;
  if (a3)
    *a3 = v22;
  if (a4)
    *a4 = v23;
  if (!a5)
    return 0;
  result = 0;
  *a5 = v13;
  return result;
}

uint64_t CMPhotoJPEGGetMPDataCountFromJPEG(IOSurfaceRef buffer, CFIndex a2, _DWORD *a3)
{
  uint64_t result;
  const __CFAllocator *v7;
  const UInt8 *BaseAddress;
  const __CFData *v9;
  CFIndex MPTag;
  CFIndex v11;
  const UInt8 *BytePtr;
  int v13;

  result = 0xFFFFFFFFLL;
  if (buffer && a3)
  {
    IOSurfaceLock(buffer, 1u, 0);
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    BaseAddress = (const UInt8 *)IOSurfaceGetBaseAddress(buffer);
    v9 = CFDataCreateWithBytesNoCopy(v7, BaseAddress, a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    MPTag = findMPTag(v9);
    if (MPTag)
    {
      v11 = MPTag;
      BytePtr = CFDataGetBytePtr(v9);
      v13 = 0;
      if (!parseInitialMPFHeader((unsigned __int16 *)&BytePtr[v11], 0, 0, 0, &v13))
        *a3 = v13;
    }
    CFRelease(v9);
    IOSurfaceUnlock(buffer, 1u, 0);
    return 0;
  }
  return result;
}

void setIntValue_0(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t _openContainerWithModificationCallback(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4, CFMutableDictionaryRef *a5, uint64_t (*a6)(CFDictionaryRef, uint64_t), uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  const __CFDictionary *v16;
  uint64_t v17;
  const __CFArray *Value;
  const __CFArray *v19;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v21;
  CFTypeID v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  CFTypeRef *v26;
  CFTypeRef v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFTypeID v30;
  const void *v31;
  CFTypeRef v32;
  BOOL v33;
  CFMutableDictionaryRef *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  CFTypeID v37;
  const void *v38;
  const __CFArray *v39;
  const __CFArray *v40;
  const __CFArray *v41;
  CFTypeID v42;
  const __CFArray *v43;
  CFIndex Count;
  uint64_t v45;
  CFIndex v46;
  CFIndex v47;
  const __CFDictionary *v48;
  const __CFDictionary *v49;
  CFTypeID v50;
  const void **v51;
  const __CFArray *v53;
  const void *v54;
  uint64_t DescriptionFromSession;
  uint64_t v56;
  uint64_t v58;
  CFMutableDictionaryRef *v59;
  CFDictionaryRef theDict;
  CFMutableDictionaryRef v61;
  int v62;
  _QWORD v63[4];
  CFMutableDictionaryRef v64[6];

  v64[4] = *(CFMutableDictionaryRef *)MEMORY[0x1E0C80C00];
  theDict = 0;
  v61 = 0;
  v13 = _parseContainer(a1, a2, a3, a4);
  if ((_DWORD)v13)
    return v13;
  _handleStripping(a1, a2);
  v14 = _createDescriptionFromSession(a1, &v61);
  if ((_DWORD)v14)
  {
    DescriptionFromSession = v14;
    v16 = v61;
    goto LABEL_72;
  }
  v58 = a3;
  v15 = CFGetAllocator((CFTypeRef)a1);
  v16 = v61;
  v17 = CMPhotoPropertyListCopyWithMutableContainers(v15, v61, &theDict);
  if ((_DWORD)v17 || (v17 = a6(theDict, a7), (_DWORD)v17))
  {
LABEL_80:
    DescriptionFromSession = v17;
    goto LABEL_72;
  }
  if (!CMPhotoCompressionSessionCheckForIllegalModification(v16, theDict))
  {
    v17 = FigSignalErrorAt();
    goto LABEL_80;
  }
  v59 = a5;
  v64[0] = (CFMutableDictionaryRef)CFSTR("EXIFMetadata");
  v64[1] = (CFMutableDictionaryRef)CFSTR("XMPMetadata");
  v64[2] = (CFMutableDictionaryRef)CFSTR("DebugMetadata");
  v64[3] = (CFMutableDictionaryRef)CFSTR("CustomMetadata");
  v63[0] = a1 + 328;
  v63[1] = a1 + 336;
  v63[2] = a1 + 344;
  v63[3] = a1 + 352;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ImageList"));
  if (!Value)
    goto LABEL_65;
  v19 = Value;
  if (CFArrayGetCount(Value) != 1)
    goto LABEL_65;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, 0);
  if (!ValueAtIndex)
    goto LABEL_65;
  v21 = ValueAtIndex;
  v22 = CFGetTypeID(ValueAtIndex);
  if (v22 != CFDictionaryGetTypeID())
    goto LABEL_65;
  v23 = 0;
  v24 = 1;
  while (2)
  {
    v25 = v23;
    while (1)
    {
      v26 = (CFTypeRef *)v63[v25];
      v27 = *v26;
      v28 = (const __CFArray *)CFDictionaryGetValue(v21, v64[v25]);
      if (v28)
        break;
      if (v27)
        goto LABEL_22;
LABEL_20:
      if (++v25 == 4)
      {
        if ((v24 & 1) == 0)
          goto LABEL_32;
        goto LABEL_37;
      }
    }
    v29 = v28;
    v30 = CFGetTypeID(v28);
    if (v30 != CFArrayGetTypeID())
    {
LABEL_67:
      DescriptionFromSession = FigSignalErrorAt();
      v34 = v59;
      if ((_DWORD)DescriptionFromSession)
        goto LABEL_72;
      goto LABEL_68;
    }
    if (!v27 || CFArrayGetCount(v29))
    {
      if (CFArrayGetCount(v29) >= 1)
      {
        v31 = CFArrayGetValueAtIndex(v29, 0);
        if (!FigCFEqual())
        {
          *(_BYTE *)(a1 + 376) = 1;
          if (*v26)
            CFRelease(*v26);
          if (v31)
            v32 = CFRetain(v31);
          else
LABEL_28:
            v32 = 0;
          goto LABEL_29;
        }
      }
      goto LABEL_20;
    }
LABEL_22:
    *(_BYTE *)(a1 + 376) = 1;
    v32 = *v26;
    if (*v26)
    {
      CFRelease(v32);
      goto LABEL_28;
    }
LABEL_29:
    v24 = 0;
    *v26 = v32;
    v23 = v25 + 1;
    if (v25 != 3)
      continue;
    break;
  }
LABEL_32:
  v33 = *(_QWORD *)(a1 + 328) || *(_QWORD *)(a1 + 336) || *(_QWORD *)(a1 + 344) || *(_QWORD *)(a1 + 352) != 0;
  *(_BYTE *)(a1 + 320) = v33;
LABEL_37:
  v34 = v59;
  if (!*(_QWORD *)(a1 + 280))
    goto LABEL_43;
  v35 = (const __CFArray *)CFDictionaryGetValue(v21, CFSTR("ThumbnailImage"));
  if (!v35)
  {
LABEL_41:
    *(_BYTE *)(a1 + 376) = 1;
    v38 = *(const void **)(a1 + 280);
    if (v38)
    {
      CFRelease(v38);
      *(_QWORD *)(a1 + 280) = 0;
    }
    goto LABEL_43;
  }
  v36 = v35;
  v37 = CFGetTypeID(v35);
  if (v37 != CFArrayGetTypeID())
    goto LABEL_81;
  if (!CFArrayGetCount(v36))
    goto LABEL_41;
LABEL_43:
  v39 = *(const __CFArray **)(a1 + 312);
  if (!v39 || CFArrayGetCount(v39) < 1)
  {
LABEL_68:
    v56 = _handleRewrite(a1, v58);
    DescriptionFromSession = v56;
    if (v34)
    {
      if (!(_DWORD)v56)
      {
        v64[0] = 0;
        DescriptionFromSession = _createDescriptionFromSession(a1, v64);
        if (!(_DWORD)DescriptionFromSession)
          *v34 = v64[0];
      }
    }
    goto LABEL_72;
  }
  v40 = (const __CFArray *)CFDictionaryGetValue(v21, CFSTR("Auxiliary"));
  v41 = v40;
  if (v40)
  {
    v42 = CFGetTypeID(v40);
    if (v42 != CFArrayGetTypeID())
    {
LABEL_81:
      DescriptionFromSession = FigSignalErrorAt();
      if ((_DWORD)DescriptionFromSession)
        goto LABEL_72;
      goto LABEL_68;
    }
  }
  v43 = *(const __CFArray **)(a1 + 312);
  if (!v43)
    goto LABEL_68;
  Count = CFArrayGetCount(v43);
  if (Count < 1)
  {
LABEL_61:
    v53 = *(const __CFArray **)(a1 + 312);
    v34 = v59;
    if (v53)
    {
      if (!CFArrayGetCount(v53))
      {
        v54 = *(const void **)(a1 + 312);
        if (v54)
        {
          CFRelease(v54);
          *(_QWORD *)(a1 + 312) = 0;
        }
      }
    }
    goto LABEL_68;
  }
  v45 = Count;
  while (1)
  {
    if (v41)
    {
      v46 = CFArrayGetCount(v41);
      if (v46 >= 1)
        break;
    }
LABEL_58:
    *(_BYTE *)(a1 + 376) = 1;
    v51 = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), v45 - 1);
    CMPhotoCompressedAuxImageStorageDestroy(v51);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 312), v45 - 1);
LABEL_59:
    if (v45-- <= 1)
      goto LABEL_61;
  }
  v47 = v46 + 1;
  while (1)
  {
    v48 = (const __CFDictionary *)CFArrayGetValueAtIndex(v41, v47 - 2);
    if (!v48)
      break;
    v49 = v48;
    v50 = CFGetTypeID(v48);
    if (v50 != CFDictionaryGetTypeID())
      break;
    v62 = 0;
    if (!CMPhotoCFDictionaryGetIntIfPresent(v49, CFSTR("ImageHandle"), &v62))
      goto LABEL_67;
    if (v45 - 1 == v62)
      goto LABEL_59;
    if ((unint64_t)--v47 < 2)
      goto LABEL_58;
  }
LABEL_65:
  DescriptionFromSession = 4294950306;
LABEL_72:
  if (v16)
    CFRelease(v16);
  if (theDict)
    CFRelease(theDict);
  return DescriptionFromSession;
}

uint64_t _addExif (uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFTypeRef a4)
{
  const __CFAllocator *v8;
  unint64_t Length;
  uint64_t v10;
  const UInt8 *BytePtr;
  const UInt8 *v12;
  __CFData *Mutable;
  __CFData *v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v18;

  v8 = CFGetAllocator((CFTypeRef)a1);
  if (a4)
    a4 = CFRetain(a4);
  if (a2 || !*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 328))
    goto LABEL_24;
  v18 = 0;
  Length = CFDataGetLength((CFDataRef)a4);
  if (!a3 || !CMPhotoCFDictionaryGetInt32IfPresent(a3, CFSTR("TIFFHeaderOffset"), (char *)&v18 + 4))
  {
    v10 = CMPhotoExifDetectTIFFHeaderOffset((const __CFData *)a4, &v18, (_DWORD *)&v18 + 1);
    if ((_DWORD)v10)
    {
LABEL_25:
      v16 = v10;
      goto LABEL_20;
    }
    if ((_BYTE)v18)
      goto LABEL_12;
LABEL_24:
    v10 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (Length <= HIDWORD(v18))
    goto LABEL_24;
  LOBYTE(v18) = 1;
LABEL_12:
  BytePtr = CFDataGetBytePtr((CFDataRef)a4);
  if (!(*(_DWORD *)BytePtr ^ 0x66697845 | *((unsigned __int16 *)BytePtr + 2)))
  {
    if (!a4)
    {
      v15 = 0;
      goto LABEL_19;
    }
LABEL_18:
    v15 = CFRetain(a4);
LABEL_19:
    v16 = 0;
    *(_QWORD *)(a1 + 328) = v15;
    *(_BYTE *)(a1 + 320) = 1;
    goto LABEL_20;
  }
  v12 = BytePtr;
  Mutable = CFDataCreateMutable(v8, 0);
  if (Mutable)
  {
    v14 = Mutable;
    CFDataAppendBytes(Mutable, (const UInt8 *)"Exif", 6);
    CFDataAppendBytes(v14, &v12[HIDWORD(v18)], Length - HIDWORD(v18));
    if (a4)
      CFRelease(a4);
    a4 = v14;
    goto LABEL_18;
  }
  v16 = 4294950305;
LABEL_20:
  if (a4)
    CFRelease(a4);
  return v16;
}

uint64_t _addXMP(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  CFTypeRef v5;

  if (a2 || !*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 336))
    return FigSignalErrorAt();
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 336) = v5;
  *(_BYTE *)(a1 + 320) = 1;
  return 0;
}

uint64_t _addDebugMetadata(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  CFTypeRef v5;

  if (a2 || !*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 344))
    return FigSignalErrorAt();
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 344) = v5;
  *(_BYTE *)(a1 + 320) = 1;
  return 0;
}

uint64_t _addCustomMetadata(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  CFAllocatorRef v7;
  const __CFAllocator *v8;
  const __CFData *Value;
  const __CFString *v10;
  const __CFString *v11;
  CFIndex Length;
  CFIndex v13;
  CFIndex v14;
  __CFData *Mutable;
  __CFData *v16;
  void *v17;
  const UInt8 *CStringPtrMaybeUsingPreallocatedBuffer;
  void *v19;
  const UInt8 *v20;
  const UInt8 *BytePtr;
  uint64_t v22;
  UInt8 bytes[8];

  v7 = CFGetAllocator((CFTypeRef)a1);
  if (a2 || !*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 352))
  {
    v22 = FigSignalErrorAt();
    v16 = 0;
    v17 = 0;
    v19 = 0;
  }
  else
  {
    v8 = v7;
    Value = (const __CFData *)CFDictionaryGetValue(a4, CFSTR("Data"));
    v10 = (const __CFString *)CFDictionaryGetValue(a4, CFSTR("URI"));
    v11 = (const __CFString *)CFDictionaryGetValue(a4, CFSTR("Name"));
    *(_QWORD *)bytes = 0;
    Length = CFStringGetLength(v10);
    v13 = CFStringGetLength(v11);
    v14 = CFDataGetLength(Value);
    Mutable = CFDataCreateMutable(v8, 0);
    v16 = Mutable;
    if (Mutable)
    {
      *(_QWORD *)bytes = Length;
      CFDataAppendBytes(Mutable, bytes, 8);
      v17 = malloc_type_malloc(Length, 0xEDBEE677uLL);
      CStringPtrMaybeUsingPreallocatedBuffer = (const UInt8 *)FigCFStringGetCStringPtrMaybeUsingPreallocatedBuffer();
      CFDataAppendBytes(v16, CStringPtrMaybeUsingPreallocatedBuffer, Length);
      *(_QWORD *)bytes = v13;
      CFDataAppendBytes(v16, bytes, 8);
      v19 = malloc_type_malloc(v13, 0x6A2DDBD4uLL);
      v20 = (const UInt8 *)FigCFStringGetCStringPtrMaybeUsingPreallocatedBuffer();
      CFDataAppendBytes(v16, v20, v13);
      *(_QWORD *)bytes = v14;
      CFDataAppendBytes(v16, bytes, 8);
      BytePtr = CFDataGetBytePtr(Value);
      CFDataAppendBytes(v16, BytePtr, v14);
      v22 = 0;
      *(_QWORD *)(a1 + 352) = CFRetain(v16);
      *(_BYTE *)(a1 + 320) = 1;
    }
    else
    {
      v17 = 0;
      v19 = 0;
      v22 = 4294950305;
    }
  }
  free(v17);
  free(v19);
  if (v16)
    CFRelease(v16);
  return v22;
}

uint64_t _addMetadataFromImageProperties(uint64_t a1, uint64_t a2, int a3, CFTypeRef cf)
{
  CFTypeRef v5;

  if (a2 || !*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 360))
    return FigSignalErrorAt();
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  *(_QWORD *)(a1 + 360) = v5;
  *(_BYTE *)(a1 + 320) = 1;
  return 0;
}

uint64_t _addAuxImageMetadata(uint64_t a1, CFIndex a2, CFTypeRef cf, const void *a4)
{
  const __CFArray *Count;
  CFTypeID v9;
  const __CFData *Value;
  CFDataRef v11;
  CFTypeID v12;
  const void *v13;
  CFTypeID v14;
  uint64_t v15;
  _QWORD *ValueAtIndex;
  _QWORD *v17;
  const void *v18;
  CFTypeRef v19;
  const void *v20;

  Count = *(const __CFArray **)(a1 + 312);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((a2 & 0x8000000000000000) == 0 && (uint64_t)Count > a2)
  {
    if (!cf)
      return 4294950306;
    v9 = CFGetTypeID(cf);
    if (v9 != CGImageMetadataGetTypeID())
      return 4294950306;
    if (!a4)
    {
      v11 = 0;
      goto LABEL_15;
    }
    Value = (const __CFData *)FigCFDictionaryGetValue();
    v11 = Value;
    if (!Value)
    {
LABEL_11:
      v13 = (const void *)FigCFDictionaryGetValue();
      a4 = v13;
      if (v13)
      {
        v14 = CFGetTypeID(v13);
        if (v14 != CFDictionaryGetTypeID())
        {
          v15 = 4294950306;
LABEL_30:
          if (v11)
            CFRelease(v11);
          return v15;
        }
      }
LABEL_15:
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), a2);
      if (ValueAtIndex)
      {
        v17 = ValueAtIndex;
        if (!ValueAtIndex[2])
        {
          ValueAtIndex[2] = CFRetain(cf);
          v18 = (const void *)v17[6];
          if (v18)
          {
            CFRelease(v18);
            v17[6] = 0;
          }
          if (a4)
            v19 = CFRetain(a4);
          else
            v19 = 0;
          v17[6] = v19;
          v20 = (const void *)v17[5];
          if (v20)
            CFRelease(v20);
          v15 = 0;
          v17[5] = v11;
          return v15;
        }
        v15 = FigSignalErrorAt();
      }
      else
      {
        v15 = 4294950304;
      }
      goto LABEL_30;
    }
    v12 = CFGetTypeID(Value);
    if (v12 != CGColorSpaceGetTypeID())
      return 4294950306;
    v11 = CGColorSpaceCopyICCData(v11);
    if (v11)
      goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t _addTmapImageOneShot(uint64_t a1, uint64_t a2, int a3, CFDictionaryRef theDict, uint64_t a5, const void *a6, int a7, const CGImageMetadata *a8, uint64_t *a9)
{
  int CFValueIfPresent;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  const __CFDictionary *MutableCopy;
  uint64_t v20;
  _BOOL4 v21;
  CGImageMetadata *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CGColorSpace *ColorSpaceFromTriplets;
  CGImageMetadata *v34;
  uint64_t v35;

  v34 = 0;
  v35 = -1;
  if (a2)
    return FigSignalErrorAt();
  if (!a5 || !a6)
    goto LABEL_34;
  ColorSpaceFromTriplets = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  CFValueIfPresent = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("ColorSpace"), (void **)&ColorSpaceFromTriplets);
  v14 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("Primaries"), (void **)&v32);
  v15 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("Transfer"), (void **)&v31);
  v16 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("Matrix"), (void **)&v30);
  if (!CFValueIfPresent)
  {
    if (v14)
      v17 = v15 == 0;
    else
      v17 = 1;
    if (v17 || v16 == 0)
      goto LABEL_34;
    ColorSpaceFromTriplets = CMPhotoCreateColorSpaceFromTriplets(v32, v31, v30, 0);
    if (!ColorSpaceFromTriplets)
      goto LABEL_34;
LABEL_15:
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (MutableCopy)
    {
      memset(v29, 0, sizeof(v29));
      v20 = CMPhotoParseFlexRangeMetadataDictionary(a6, v29);
      if ((_DWORD)v20
        || (v21 = CGColorSpaceUsesITUR_2100TF(ColorSpaceFromTriplets),
            v20 = CMPhotoCreateXMPMetadataFromMetadata((float *)v29, !v21, &v34),
            (_DWORD)v20))
      {
        v25 = v20;
        goto LABEL_36;
      }
      if (!a7)
      {
LABEL_24:
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        v24 = CMPhotoCompressionSessionAddAuxiliaryImage(a1, 0, 4, (uint64_t)v34, MutableCopy, a5, (uint64_t)&v35);
        v25 = v24;
        v22 = 0;
        if (a9 && !(_DWORD)v24)
        {
          v22 = 0;
          *a9 = v35;
        }
        goto LABEL_27;
      }
      v22 = CGImageMetadataCreateMutableCopy(v34);
      if (v22)
      {
        v23 = CMPhotoAddMeteorPlusGainMapMetadata(a8, v22);
        if ((_DWORD)v23)
        {
          v25 = v23;
          goto LABEL_27;
        }
        if (v34)
          CFRelease(v34);
        v34 = v22;
        goto LABEL_24;
      }
    }
    else
    {
      v22 = 0;
    }
    v25 = 4294950305;
    goto LABEL_27;
  }
  if (ColorSpaceFromTriplets)
    goto LABEL_15;
LABEL_34:
  v25 = FigSignalErrorAt();
  MutableCopy = 0;
LABEL_36:
  v22 = 0;
LABEL_27:
  if (v34)
    CFRelease(v34);
  if (v22)
    CFRelease(v22);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v25;
}

uint64_t _compressImageAsync(_QWORD *a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = -1;
  v7 = _compressImageInternal(a1, a2, a3, &v10);
  v8 = v7;
  if (a4 && !(_DWORD)v7)
    *a4 = v10;
  if (a5 && !(_DWORD)v7)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(a5 + 16))(a5, 0, 0, v10, 0);
  return v8;
}

uint64_t _compressAuxImageAsync(_QWORD *a1, uint64_t a2, unsigned int a3, const void *a4, const __CFDictionary *a5, opaqueCMSampleBuffer *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = -1;
  v10 = _compressAuxImageInternal(a1, a2, a3, a4, a5, a6, &v13);
  v11 = v10;
  if (a7 && !(_DWORD)v10)
    *a7 = v13;
  if (a8 && !(_DWORD)v10)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(a8 + 16))(a8, 0, 2, v13, 0);
  return v11;
}

uint64_t _compressThumbnailAsync(uint64_t a1, uint64_t a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = _compressThumbnailInternal(a1, a2, a3, a4);
  v7 = v6;
  if (a5 && !(_DWORD)v6)
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(a5 + 16))(a5, 0, 1, 0, 0);
  return v7;
}

uint64_t _parseContainer(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4)
{
  const __CFAllocator *v8;
  CFTypeID v9;
  uint64_t (*v10)(uint64_t, _QWORD, CGColorSpaceRef *);
  uint64_t ImageInformationFromJFIFByteStream;
  size_t v12;
  const __CFAllocator *v13;
  size_t v14;
  uint64_t v15;
  CFStringRef v16;
  CFTypeRef v17;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v19;
  CFTypeRef v20;
  const __CFData *v21;
  CFTypeRef v22;
  CFTypeRef *v23;
  CGColorSpace *v24;
  CGColorSpace *v25;
  uint64_t v26;
  const __CFArray *v27;
  BOOL v28;
  CGColorSpaceRef v30;
  CGColorSpaceRef v31;
  char v32;
  CGColorSpaceRef v33;
  CFDataRef v34;
  CGColorSpaceRef v35;
  CMSampleBufferRef *v36;
  char v37;
  char v38;
  size_t v39;
  size_t v40;
  char v41;
  size_t dataLength;
  size_t v43;
  unint64_t v44;
  size_t v45;
  char v46;
  char v47;
  CFTypeRef v48;
  CFTypeRef v49;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  const void *v52;
  _QWORD *v53;
  size_t v54;
  CGColorSpaceRef AllocSize;
  CGColorSpaceRef v56[2];

  v54 = 0;
  AllocSize = 0;
  v8 = CFGetAllocator((CFTypeRef)a1);
  v52 = 0;
  v53 = 0;
  cf = 0;
  blockBufferOut = 0;
  v48 = 0;
  v49 = 0;
  if (!a2)
    goto LABEL_7;
  v9 = CFGetTypeID(a4);
  if (v9 != IOSurfaceGetTypeID())
    goto LABEL_7;
  if (CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("BackingIOSurfaceSourceSize"), &AllocSize))
  {
    if (!AllocSize)
      goto LABEL_7;
  }
  else
  {
    AllocSize = (CGColorSpaceRef)IOSurfaceGetAllocSize((IOSurfaceRef)a4);
    if (!AllocSize)
    {
LABEL_7:
      v56[0] = 0;
      v10 = *(uint64_t (**)(uint64_t, _QWORD, CGColorSpaceRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
      if (!v10)
      {
        v26 = 4294954514;
        goto LABEL_71;
      }
      ImageInformationFromJFIFByteStream = v10(a3, 0, v56);
      if ((_DWORD)ImageInformationFromJFIFByteStream)
        goto LABEL_88;
      if (((unint64_t)v56[0] & 0x8000000000000000) != 0)
      {
        v26 = 4294950190;
        goto LABEL_71;
      }
      AllocSize = v56[0];
    }
  }
  ImageInformationFromJFIFByteStream = _newContainer(a1, a2);
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  ImageInformationFromJFIFByteStream = CMPhotoCopyImageCountAndRangesFromJFIFByteStream(a3, 0, &v54, &v53);
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  v12 = (size_t)AllocSize;
  if (v54 >= 2 && (unint64_t)AllocSize >= v53[1])
    v12 = v53[1];
  *(_QWORD *)(a1 + 384) = v12;
  ImageInformationFromJFIFByteStream = CMPhotoSampleBufferCreateFromSource(v8, (const __CFData *)a4, 0, v12, (_QWORD *)(a1 + 264), (char *)(a1 + 304));
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  v36 = (CMSampleBufferRef *)(a1 + 264);
  if (v54 >= 2)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v14 = 1;
    v15 = 2;
    do
    {
      v47 = 0;
      ImageInformationFromJFIFByteStream = CMPhotoSampleBufferCreateFromSource(v8, (const __CFData *)a4, v53[v15], v53[v15 + 1], &v52, &v47);
      if ((_DWORD)ImageInformationFromJFIFByteStream)
        goto LABEL_88;
      LODWORD(dataLength) = 0;
      if (CMPhotoJFIFUtilitiesCreateAuxiliaryPropertiesFromStream(v8, a3, v53[v15], (int *)&dataLength, 0, &cf, 0))
      {
        v56[0] = 0;
        ImageInformationFromJFIFByteStream = CMPhotoGetImageInformationFromJFIFByteStream(a3, v53[v15], 0, 0, 0, 0, 0, v56);
        if ((_DWORD)ImageInformationFromJFIFByteStream)
          goto LABEL_88;
        if (!v56[0])
        {
          v26 = 4294950300;
          goto LABEL_71;
        }
        CFRelease(v56[0]);
        v56[0] = 0;
        LODWORD(dataLength) = 4;
        v16 = CFStringCreateWithCStringNoCopy(v8, "urn:iso:std:iso:ts:21496:-1", 0x8000100u, v13);
        cf = v16;
        if (!v16)
        {
          v26 = 4294950305;
          goto LABEL_71;
        }
        v17 = v16;
      }
      else
      {
        v17 = cf;
      }
      ImageInformationFromJFIFByteStream = _saveAuxImage(a1 + 240, v52, v47, 1, dataLength, 0, v17, 0, 0, 0);
      if ((_DWORD)ImageInformationFromJFIFByteStream)
        goto LABEL_88;
      if (v52)
      {
        CFRelease(v52);
        v52 = 0;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      ++v14;
      v15 += 2;
    }
    while (v14 < v54);
  }
  v46 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  ImageInformationFromJFIFByteStream = CMPhotoGetExifLocationFromJFIFByteStream(a3, 0, &v46, &v45, &v43, &v44);
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  if (!v46)
    goto LABEL_44;
  v47 = 0;
  v56[0] = 0;
  dataLength = 0;
  DataBuffer = CMSampleBufferGetDataBuffer(*v36);
  if (!DataBuffer)
    goto LABEL_90;
  v19 = DataBuffer;
  ImageInformationFromJFIFByteStream = CMPhotoParseExifFromTIFF(DataBuffer, v43, v44, 0, 0, (BOOL *)&v47, (unint64_t)v56, (unint64_t)&dataLength, (char *)(a1 + 368));
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  if (v47)
  {
    ImageInformationFromJFIFByteStream = CMBlockBufferCreateWithBufferReference(v8, v19, (size_t)v56[0], dataLength, 0, &blockBufferOut);
    if ((_DWORD)ImageInformationFromJFIFByteStream)
      goto LABEL_88;
    ImageInformationFromJFIFByteStream = CMSampleBufferCreate(v8, blockBufferOut, 1u, 0, 0, 0, 1, 0, 0, 1, &dataLength, (CMSampleBufferRef *)(a1 + 280));
    if ((_DWORD)ImageInformationFromJFIFByteStream)
      goto LABEL_88;
    *(_BYTE *)(a1 + 305) = *(_BYTE *)(a1 + 304);
  }
  ImageInformationFromJFIFByteStream = CMPhotoDataCreateFromSource(v8, v19, v45, v44, &v49, 0);
  if ((_DWORD)ImageInformationFromJFIFByteStream)
  {
LABEL_88:
    v26 = ImageInformationFromJFIFByteStream;
    goto LABEL_71;
  }
  v20 = v49;
  if (v49)
    v20 = CFRetain(v49);
  *(_QWORD *)(a1 + 328) = v20;
  *(_BYTE *)(a1 + 320) = 1;
LABEL_44:
  v41 = 0;
  v39 = 0;
  v40 = 0;
  ImageInformationFromJFIFByteStream = CMPhotoGetXMPLocationFromJFIFByteStream(a3, 0, &v41, &v40, &v39);
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  if (!v41)
    goto LABEL_51;
  v21 = CMSampleBufferGetDataBuffer(*v36);
  if (!v21)
  {
LABEL_90:
    v26 = 4294950304;
    goto LABEL_71;
  }
  ImageInformationFromJFIFByteStream = CMPhotoDataCreateFromSource(v8, v21, v40, v39, &v48, 0);
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  v22 = v48;
  if (v48)
    v22 = CFRetain(v48);
  *(_QWORD *)(a1 + 336) = v22;
  *(_BYTE *)(a1 + 320) = 1;
LABEL_51:
  v38 = 0;
  ImageInformationFromJFIFByteStream = CMPhotoCopyDebugMetadataFromJFIFByteStream((uint64_t)v8, a3, 0, &v38, 0, (CFDataRef *)(a1 + 344));
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  *(_BYTE *)(a1 + 320) |= v38;
  v37 = 0;
  ImageInformationFromJFIFByteStream = CMPhotoCopyCustomMetadataFromJFIFByteStream((uint64_t)v8, a3, 0, &v37, 0, (_QWORD *)(a1 + 352));
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  *(_BYTE *)(a1 + 320) |= v37;
  v23 = (CFTypeRef *)(a1 + 288);
  ImageInformationFromJFIFByteStream = CMPhotoCopyICCProfileFromJFIFByteStream((uint64_t)v8, a3, 0, 0, 0, (_QWORD *)(a1 + 288));
  if ((_DWORD)ImageInformationFromJFIFByteStream)
    goto LABEL_88;
  v56[0] = 0;
  if (*v23)
  {
    v24 = (CGColorSpace *)MEMORY[0x1A85CF43C]();
    v25 = v24;
    if (v24 && CGColorSpaceGetModel(v24) < kCGColorSpaceModelCMYK)
      goto LABEL_66;
    if (*v23)
    {
      CFRelease(*v23);
      *v23 = 0;
    }
    if (!v25)
      goto LABEL_66;
    CFRelease(v25);
    goto LABEL_65;
  }
  if (!*(_BYTE *)(a1 + 368))
  {
LABEL_65:
    v25 = 0;
    goto LABEL_66;
  }
  if (!CGImageCreateColorSpaceFromExifOrData())
  {
    v30 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (v30)
    {
      v31 = v30;
      v32 = CGColorSpaceEqualToColorSpace();
      v33 = v56[0];
      if ((v32 & 1) == 0)
      {
        *v23 = CGColorSpaceCopyICCData(v56[0]);
        v33 = v56[0];
      }
      *(_QWORD *)(a1 + 296) = v33;
      v56[0] = 0;
      CFRelease(v31);
    }
    else
    {
      v34 = CGColorSpaceCopyICCData(v56[0]);
      v35 = v56[0];
      *(_QWORD *)(a1 + 288) = v34;
      *(_QWORD *)(a1 + 296) = v35;
    }
    goto LABEL_67;
  }
  v25 = v56[0];
LABEL_66:
  *(_QWORD *)(a1 + 296) = v25;
LABEL_67:
  v27 = *(const __CFArray **)(a1 + 312);
  if (v27)
    v28 = CFArrayGetCount(v27) > 0;
  else
    v28 = 0;
  v26 = 0;
  *(_BYTE *)(a1 + 377) = v28;
LABEL_71:
  free(v53);
  if (v52)
    CFRelease(v52);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v49)
    CFRelease(v49);
  if (v48)
    CFRelease(v48);
  if (cf)
    CFRelease(cf);
  return v26;
}

void _handleStripping(uint64_t a1, CFDictionaryRef theDict)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  BOOL v8;
  const void *v9;
  char v10;
  __int16 v11;

  v11 = 0;
  v10 = 0;
  if (theDict)
  {
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("StripExistingMetadata"), (_BYTE *)&v11 + 1);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("StripExistingThumbnails"), &v11);
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("StripExistingAuxiliaryImages"), &v10);
  }
  v4 = *(const void **)(a1 + 328);
  if (v4)
  {
    if (!HIBYTE(v11))
      goto LABEL_18;
    *(_BYTE *)(a1 + 376) = 1;
    *(_BYTE *)(a1 + 320) = 0;
    CFRelease(v4);
    *(_QWORD *)(a1 + 328) = 0;
    v5 = *(const void **)(a1 + 336);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  v5 = *(const void **)(a1 + 336);
  v8 = v5 || *(_QWORD *)(a1 + 344) || *(_QWORD *)(a1 + 352) != 0;
  if (!HIBYTE(v11) || !v8)
    goto LABEL_18;
  *(_BYTE *)(a1 + 376) = 1;
  *(_BYTE *)(a1 + 320) = 0;
  if (v5)
  {
LABEL_6:
    CFRelease(v5);
    *(_QWORD *)(a1 + 336) = 0;
  }
LABEL_7:
  v6 = *(const void **)(a1 + 344);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 344) = 0;
  }
  v7 = *(const void **)(a1 + 352);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 352) = 0;
  }
LABEL_18:
  if (v10 && *(_BYTE *)(a1 + 377))
  {
    *(_BYTE *)(a1 + 376) = 1;
    _releaseAuxImages(a1 + 240);
  }
  if ((_BYTE)v11)
  {
    v9 = *(const void **)(a1 + 280);
    if (v9)
    {
      *(_BYTE *)(a1 + 376) = 1;
      CFRelease(v9);
      *(_QWORD *)(a1 + 280) = 0;
    }
  }
}

uint64_t _handleRewrite(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4;
  const __CFAllocator *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;
  int v11;
  __int16 v12;
  unint64_t v13[6];
  _OWORD v14[3];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = CFGetAllocator((CFTypeRef)a1);
  if (!*(_BYTE *)(a1 + 376))
    return 0;
  v5 = v4;
  v12 = -7453;
  v11 = -471735840;
  v14[0] = xmmword_1E53F7050;
  v14[1] = *(_OWORD *)&off_1E53F7060;
  v14[2] = xmmword_1E53F7070;
  v13[0] = 5;
  v13[1] = 6;
  v13[2] = 29;
  v13[3] = 12;
  v13[4] = 12;
  v13[5] = 4;
  if (*(_BYTE *)(a1 + 377))
    v6 = 6;
  else
    v6 = 5;
  cf = 0;
  v7 = CMPhotoJFIFCreateStrippedBufferFromByteStream(a2, 0, *(_QWORD *)(a1 + 384), v6, (uint64_t)&v11, v14, v13, (uint64_t)&cf);
  if ((_DWORD)v7)
    return v7;
  v8 = CMPhotoSampleBufferCreateFromSource(v5, (const __CFData *)cf, 0, 0, (_QWORD *)(a1 + 272), 0);
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t _createDescriptionFromSession(uint64_t a1, CFMutableDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  __CFArray *v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  uint64_t v10;
  const void *v11;
  const __CFAllocator *v12;
  __CFArray *v13;
  __CFDictionary *v14;
  __CFDictionary *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  const __CFArray *v19;
  CFMutableArrayRef v20;
  CFMutableArrayRef v21;
  CFIndex v22;
  const CFDictionaryKeyCallBacks *v23;
  const CFDictionaryValueCallBacks *v24;
  const __CFArray *Count;
  __CFDictionary *v26;
  uint64_t v27;
  const void *v28;
  CFArrayRef v29;
  CFArrayRef v30;
  CFArrayRef v31;
  CFArrayRef v32;
  CFArrayRef v33;
  CFArrayRef v34;
  const __CFData *v35;
  uint64_t v36;
  CFArrayRef v37;
  CFArrayRef v38;
  uint64_t v39;
  CFMutableDictionaryRef *v41;
  __CFDictionary *v42;
  __CFArray *v43;
  __CFDictionary *cf;
  const __CFAllocator *allocator;
  void *values;

  v4 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v6 = Mutable;
  v7 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  if (!v7)
  {
    v15 = 0;
    v21 = 0;
    cf = 0;
    v13 = 0;
    v9 = 0;
    goto LABEL_77;
  }
  v8 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = v8;
  if (!v8)
  {
    v15 = 0;
    v21 = 0;
    cf = 0;
    v13 = 0;
    goto LABEL_77;
  }
  allocator = v4;
  v10 = CMPhotoCFDictionarySetInt(v8, CFSTR("ImageHandle"), 0);
  if ((_DWORD)v10
    || (v10 = CMPhotoCFDictionarySetInt64(v9, CFSTR("ItemID"), 1), (_DWORD)v10)
    || (v10 = CMPhotoCFDictionarySetInt(v9, CFSTR("CodecType"), 1785750887), (_DWORD)v10))
  {
    v39 = v10;
    v15 = 0;
    v21 = 0;
    cf = 0;
    v13 = 0;
    goto LABEL_68;
  }
  v11 = *(const void **)(a1 + 296);
  if (v11)
    CFDictionarySetValue(v9, CFSTR("ColorSpace"), v11);
  v12 = v4;
  if (!*(_QWORD *)(a1 + 280))
  {
    v43 = 0;
    v15 = 0;
    v18 = 2;
    goto LABEL_19;
  }
  v13 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  if (!v13)
  {
    v15 = 0;
    goto LABEL_76;
  }
  v14 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = v14;
  if (!v14)
  {
LABEL_76:
    v21 = 0;
    cf = 0;
    goto LABEL_77;
  }
  v16 = CMPhotoCFDictionarySetInt(v14, CFSTR("ImageHandle"), 0);
  if ((_DWORD)v16
    || (v16 = CMPhotoCFDictionarySetInt64(v9, CFSTR("ItemID"), 2), (_DWORD)v16)
    || (v16 = CMPhotoCFDictionarySetInt(v15, CFSTR("CodecType"), 1785750887), (_DWORD)v16))
  {
    v39 = v16;
    cf = v15;
    v15 = 0;
    v21 = 0;
    goto LABEL_68;
  }
  v17 = *(const void **)(a1 + 296);
  if (v17)
    CFDictionarySetValue(v15, CFSTR("ColorSpace"), v17);
  CFArrayAppendValue(v13, v15);
  v43 = v13;
  CFDictionarySetValue(v9, CFSTR("ThumbnailImage"), v13);
  v18 = 3;
  v12 = v4;
LABEL_19:
  v19 = *(const __CFArray **)(a1 + 312);
  cf = v15;
  if (v19 && CFArrayGetCount(v19) >= 1)
  {
    v20 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
    if (v20)
    {
      v41 = a2;
      v42 = v6;
      v21 = v20;
      v15 = 0;
      v22 = 0;
      v23 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        Count = *(const __CFArray **)(a1 + 312);
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (v22 >= (uint64_t)Count)
        {
          CFDictionarySetValue(v9, CFSTR("Auxiliary"), v21);
          v6 = v42;
          a2 = v41;
          goto LABEL_35;
        }
        if (v15)
          CFRelease(v15);
        v26 = CFDictionaryCreateMutable(v12, 0, v23, v24);
        v15 = v26;
        if (!v26)
        {
          v39 = 4294950305;
          goto LABEL_66;
        }
        v27 = CMPhotoCFDictionarySetInt(v26, CFSTR("ImageHandle"), v22);
        if ((_DWORD)v27 || (v27 = CMPhotoCFDictionarySetInt64(v9, CFSTR("ItemID"), v18 + v22), (_DWORD)v27))
        {
          v39 = v27;
          goto LABEL_66;
        }
        v28 = (const void *)*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 312), v22) + 3);
        if (!v28)
          break;
        CFDictionarySetValue(v15, CFSTR("AuxiliaryImageType"), v28);
        CFArrayAppendValue(v21, v15);
        ++v22;
        v12 = allocator;
      }
      v39 = 4294950194;
LABEL_66:
      v6 = v42;
    }
    else
    {
      v15 = 0;
      v21 = 0;
      v39 = 4294950305;
    }
    v13 = v43;
LABEL_68:
    CFRelease(v6);
    if (!v7)
      goto LABEL_52;
    goto LABEL_51;
  }
  v21 = 0;
  v15 = 0;
LABEL_35:
  v13 = v43;
  if (*(_QWORD *)(a1 + 328))
  {
    v29 = CFArrayCreate(v12, (const void **)(a1 + 328), 1, MEMORY[0x1E0C9B378]);
    if (!v29)
      goto LABEL_77;
    v30 = v29;
    FigCFDictionarySetValue();
    CFRelease(v30);
  }
  if (*(_QWORD *)(a1 + 336))
  {
    v31 = CFArrayCreate(v12, (const void **)(a1 + 336), 1, MEMORY[0x1E0C9B378]);
    if (!v31)
      goto LABEL_77;
    v32 = v31;
    FigCFDictionarySetValue();
    CFRelease(v32);
  }
  if (*(_QWORD *)(a1 + 344))
  {
    v33 = CFArrayCreate(v12, (const void **)(a1 + 344), 1, MEMORY[0x1E0C9B378]);
    if (!v33)
      goto LABEL_77;
    v34 = v33;
    FigCFDictionarySetValue();
    CFRelease(v34);
  }
  v35 = *(const __CFData **)(a1 + 352);
  if (!v35)
    goto LABEL_49;
  values = 0;
  v36 = CMPhotoJFIFCopyCustomMetadataFromCFData(v35, (CFTypeRef *)&values);
  if ((_DWORD)v36)
  {
    v39 = v36;
    goto LABEL_68;
  }
  v37 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!v37)
  {
LABEL_77:
    v39 = 4294950305;
    goto LABEL_68;
  }
  v38 = v37;
  FigCFDictionarySetValue();
  CFRelease(v38);
  if (values)
    CFRelease(values);
LABEL_49:
  CFArrayAppendValue(v7, v9);
  CFDictionaryAddValue(v6, CFSTR("ImageList"), v7);
  v39 = CMPhotoCFDictionarySetInt(v6, CFSTR("PrimaryImageHandle"), 0);
  if ((_DWORD)v39)
    goto LABEL_68;
  *a2 = v6;
LABEL_51:
  CFRelease(v7);
LABEL_52:
  if (v9)
    CFRelease(v9);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v15)
    CFRelease(v15);
  return v39;
}

uint64_t _saveAuxImage(uint64_t a1, const void *a2, char a3, char a4, int a5, const void *a6, const void *a7, const void *a8, const void *a9, const void *a10)
{
  CFMutableArrayRef Mutable;
  uint64_t v19;
  const void **v20;
  void *value;

  value = 0;
  if (*(_QWORD *)(a1 + 72)
    || (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0),
        (*(_QWORD *)(a1 + 72) = Mutable) != 0))
  {
    v19 = CMPhotoCompressedAuxImageStorageCreate(a2, a3, a6, a7, a8, a4, a5, a9, a10, &value);
    v20 = (const void **)value;
    if (!(_DWORD)v19)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), value);
      v20 = 0;
      value = 0;
    }
  }
  else
  {
    v20 = 0;
    v19 = 4294950305;
  }
  CMPhotoCompressedAuxImageStorageDestroy(v20);
  return v19;
}

uint64_t _compressImageInternal(_QWORD *a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, uint64_t *a4)
{
  uint64_t SourceDimensions;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13[2];
  char v14;

  if (a1[33])
    return FigSignalErrorAt();
  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  SourceDimensions = CMPhotoGetSourceDimensions(a3, a2, v13);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v10 = _encodeSource(a1, 0, 0, 0, a2, a3, &v14);
  if (*v9 == 1)
    kdebug_trace();
  if (a4 && !(_DWORD)v10)
  {
    if (v14)
      v11 = -1;
    else
      v11 = 0;
    *a4 = v11;
  }
  return v10;
}

uint64_t _compressThumbnailInternal(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, opaqueCMSampleBuffer *a4)
{
  int v8;
  uint64_t SourceDimensions;
  _DWORD *v11;
  uint64_t v12;
  const void *v13;
  unint64_t v14[2];

  if (!theDict || (v8 = CFDictionaryContainsKey(theDict, CFSTR("DryRun"))) == 0)
  {
    if (a2 || !*(_QWORD *)(a1 + 264) || *(_QWORD *)(a1 + 280))
      return FigSignalErrorAt();
    v8 = 0;
  }
  v14[0] = 0;
  v14[1] = 0;
  SourceDimensions = CMPhotoGetSourceDimensions(a4, theDict, v14);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  v11 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v12 = _encodeSource((const void *)a1, 1, 0, 0, theDict, a4, 0);
  if (*v11 == 1)
    kdebug_trace();
  if (!(v8 | v12))
  {
    if (CMSampleBufferGetTotalSampleSize(*(CMSampleBufferRef *)(a1 + 280)) < 0x10000)
    {
      return 0;
    }
    else
    {
      v12 = FigSignalErrorAt();
      v13 = *(const void **)(a1 + 280);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(a1 + 280) = 0;
      }
    }
  }
  return v12;
}

uint64_t _compressAuxImageInternal(_QWORD *a1, uint64_t a2, unsigned int a3, const void *a4, CFDictionaryRef theDict, opaqueCMSampleBuffer *a6, _QWORD *a7)
{
  uint64_t SourceDimensions;
  _DWORD *v16;
  uint64_t v17;
  const __CFArray *v18;
  CFIndex Count;
  unint64_t v20[2];

  if ((!theDict || !CFDictionaryContainsKey(theDict, CFSTR("DryRun"))) && (a2 || !a1[33])
    || a3 > 5
    || ((1 << a3) & 0x36) == 0)
  {
    return FigSignalErrorAt();
  }
  v20[0] = 0;
  v20[1] = 0;
  SourceDimensions = CMPhotoGetSourceDimensions(a6, theDict, v20);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v17 = _encodeSource(a1, 2, a3, a4, theDict, a6, 0);
  if (*v16 == 1)
    kdebug_trace();
  if (!(_DWORD)v17)
  {
    v18 = (const __CFArray *)a1[39];
    if (v18 && (Count = CFArrayGetCount(v18), Count >= 1))
    {
      v17 = 0;
      if (a7)
        *a7 = Count - 1;
    }
    else
    {
      return 4294950304;
    }
  }
  return v17;
}

uint64_t _openContainerWithModificationCallback_0(const void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, __CFDictionary **a5, uint64_t (*a6)(CFTypeRef, uint64_t), uint64_t a7)
{
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t ContainerAndCopyDescription;
  const __CFDictionary *v16;
  const __CFArray *Value;
  const __CFArray *v18;
  CFTypeID v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFTypeID v22;
  CFIndex v23;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v25;
  int IntIfPresent;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  _BOOL4 v32;
  const __CFArray *v33;
  const __CFArray *v34;
  int *v35;
  int v36;
  _BOOL4 v37;
  _BOOL4 v38;
  __CFDictionary *v39;
  const __CFArray *v40;
  const __CFArray *v41;
  CFIndex v42;
  uint64_t v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  const __CFArray *v46;
  const __CFArray *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  CFTypeID v51;
  CFTypeID v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const __CFDictionary *v56;
  const __CFDictionary *v57;
  CFTypeID v58;
  const __CFArray *v59;
  const __CFArray *v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  const __CFDictionary *v64;
  int hasMetadataChangedForImageHandle;
  const __CFArray *v67;
  __CFDictionary **v68;
  const __CFArray *theArray;
  uint64_t v70;
  CFTypeRef v71;
  CFTypeRef cf;
  int v73;
  __int16 v74;
  __int16 v75;
  _QWORD v76[9];
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  _QWORD v85[6];

  v85[4] = *MEMORY[0x1E0C80C00];
  v13 = CFGetAllocator(a1);
  v71 = 0;
  cf = 0;
  v14 = _newContainer_0((uint64_t)a1, a2);
  if ((_DWORD)v14)
    return v14;
  ContainerAndCopyDescription = _readContainerAndCopyDescription((uint64_t)a1, a3, (__CFDictionary **)&cf);
  if ((_DWORD)ContainerAndCopyDescription)
    goto LABEL_71;
  ContainerAndCopyDescription = CMPhotoPropertyListCopyWithMutableContainers(v13, cf, (__CFArray **)&v71);
  if ((_DWORD)ContainerAndCopyDescription)
    goto LABEL_71;
  ContainerAndCopyDescription = a6(v71, a7);
  if ((_DWORD)ContainerAndCopyDescription)
    goto LABEL_71;
  v16 = (const __CFDictionary *)v71;
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("ImageList"));
  v68 = a5;
  if (Value
    && (v18 = Value, v19 = CFGetTypeID(Value), v19 == CFArrayGetTypeID())
    && (v20 = (const __CFArray *)CFDictionaryGetValue(v16, CFSTR("ImageList"))) != 0
    && (v21 = v20, v22 = CFGetTypeID(v20), v22 == CFArrayGetTypeID()))
  {
    if (CFArrayGetCount(v21) >= 1)
    {
      v23 = 0;
      theArray = v21;
      while (1)
      {
        LODWORD(v76[0]) = 0;
        LODWORD(v81) = 0;
        LODWORD(v85[0]) = 0;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v23);
        if (!CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, CFSTR("ImageHandle"), v76))
          goto LABEL_40;
        v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v23);
        if (!CMPhotoCFDictionaryGetIntIfPresent(v25, CFSTR("ImageHandle"), &v81))
          goto LABEL_40;
        CMPhotoCFDictionaryGetInt32IfPresent(v25, CFSTR("CodecType"), v85);
        if ((_DWORD)v81 != LODWORD(v76[0]))
        {
          if (CFArrayGetCount(v18) >= 1)
          {
            v42 = 0;
            do
            {
              v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, v42);
              if (!CMPhotoCFDictionaryGetIntIfPresent(v25, CFSTR("ImageHandle"), &v81))
                break;
              if ((_DWORD)v81 == LODWORD(v76[0]))
                goto LABEL_14;
              ++v42;
            }
            while (v42 < CFArrayGetCount(v18));
          }
          goto LABEL_40;
        }
LABEL_14:
        LODWORD(v78) = -1;
        v80 = -1;
        IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(v25, CFSTR("Orientation"), &v78);
        v27 = CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, CFSTR("Orientation"), &v80);
        v28 = v27;
        v29 = v78;
        v30 = v80;
        v31 = !IntIfPresent || IntIfPresent == v27;
        v32 = !v31;
        v33 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ThumbnailImage"));
        v34 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Auxiliary"));
        if (v32 || v29 != v30)
          break;
        if (LODWORD(v85[0]) != 1953325424)
        {
          v75 = 0;
          v79 = v80;
          ContainerAndCopyDescription = _checkOrientationForImages(v33, v80, v28, (BOOL *)&v75 + 1, (BOOL *)&v75, &v79);
          if ((_DWORD)ContainerAndCopyDescription)
            goto LABEL_71;
          v74 = 0;
          v73 = v80;
          ContainerAndCopyDescription = _checkOrientationForImages(v34, v80, v28, (BOOL *)&v74 + 1, (BOOL *)&v74, &v73);
          if ((_DWORD)ContainerAndCopyDescription)
            goto LABEL_71;
          if (v75 || v74)
          {
            v35 = &v79;
            if (!HIBYTE(v75))
              v35 = &v73;
            v36 = *v35;
            v37 = (HIBYTE(v75) | HIBYTE(v74)) != 0;
            v38 = (v75 | v74) != 0;
            v39 = ValueAtIndex;
            v40 = v33;
            v41 = v34;
LABEL_37:
            ContainerAndCopyDescription = _updateOrRemoveOrientationForImages(v39, v40, v41, v36, v37, v38);
            if ((_DWORD)ContainerAndCopyDescription)
              goto LABEL_71;
          }
        }
        ++v23;
        v21 = theArray;
        if (v23 >= CFArrayGetCount(theArray))
          goto LABEL_41;
      }
      v37 = v29 != v30;
      v36 = v80;
      v39 = 0;
      v40 = v33;
      v41 = v34;
      v38 = v32;
      goto LABEL_37;
    }
  }
  else
  {
LABEL_40:
    v43 = FigSignalErrorAt();
    if ((_DWORD)v43)
      goto LABEL_72;
  }
LABEL_41:
  v45 = (const __CFDictionary *)v71;
  v44 = (const __CFDictionary *)cf;
  v81 = 0;
  v82 = &v81;
  v83 = 0x2000000000;
  v84 = 0;
  v46 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v71, CFSTR("GroupList"));
  if (v46)
  {
    v47 = v46;
    if (CFArrayGetCount(v46) >= 1)
    {
      v48 = CFDictionaryGetValue(v44, CFSTR("ImageList"));
      v49 = CFDictionaryGetValue(v45, CFSTR("ImageList"));
      if (v48)
      {
        v50 = v49;
        v51 = CFGetTypeID(v48);
        if (v51 == CFArrayGetTypeID())
        {
          if (v50)
          {
            v52 = CFGetTypeID(v50);
            if (v52 == CFArrayGetTypeID())
            {
              if (CFArrayGetCount(v47) < 1)
                goto LABEL_68;
              v53 = 0;
              v54 = *MEMORY[0x1E0C9B0D0];
              v55 = MEMORY[0x1E0C809B0];
              v67 = v47;
              while (1)
              {
                v70 = v53;
                v56 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
                if (!v56)
                  break;
                v57 = v56;
                v58 = CFGetTypeID(v56);
                if (v58 != CFDictionaryGetTypeID())
                  break;
                v80 = 0;
                if (!CMPhotoCFDictionaryGetInt32IfPresent(v57, CFSTR("GroupType"), &v80))
                  break;
                if (v80 == 1634497650)
                {
                  v59 = (const __CFArray *)FigCFDictionaryGetValue();
                  if (v59)
                  {
                    v60 = v59;
                    if (CFArrayGetCount(v59) >= 2)
                    {
                      v61 = 0;
                      v85[0] = CFSTR("EXIFMetadata");
                      v85[1] = CFSTR("XMPMetadata");
                      v85[2] = CFSTR("DebugMetadata");
                      v85[3] = CFSTR("CustomMetadata");
                      while (1)
                      {
                        v62 = (const void *)v85[v61];
                        if (CFArrayGetCount(v60) >= 1)
                          break;
LABEL_63:
                        if (++v61 == 4)
                        {
                          v47 = v67;
                          goto LABEL_65;
                        }
                      }
                      v63 = 0;
                      while (1)
                      {
                        v79 = -1;
                        v64 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
                        if (!CMPhotoCFDictionaryGetInt32IfPresent(v64, CFSTR("ImageHandle"), &v79))
                          break;
                        v78 = v54;
                        hasMetadataChangedForImageHandle = _hasMetadataChangedForImageHandle((const __CFArray *)v48, (const __CFArray *)v50, v79, v62, &v78);
                        *((_DWORD *)v82 + 6) = hasMetadataChangedForImageHandle;
                        if (hasMetadataChangedForImageHandle)
                          goto LABEL_68;
                        if (v78 != v54)
                        {
                          v76[0] = v55;
                          v76[1] = 0x40000000;
                          v76[2] = ___propagateMetadataChange_block_invoke;
                          v76[3] = &unk_1E53F70B0;
                          v77 = v79;
                          v76[4] = &v81;
                          v76[5] = v48;
                          v76[6] = v50;
                          v76[7] = v62;
                          v76[8] = v78;
                          FigCFArrayApplyBlock();
                          if (*((_DWORD *)v82 + 6))
                            goto LABEL_68;
                        }
                        if (CFArrayGetCount(v60) <= ++v63)
                          goto LABEL_63;
                      }
                      *((_DWORD *)v82 + 6) = -16990;
                      goto LABEL_68;
                    }
                  }
                }
LABEL_65:
                v53 = v70 + 1;
                if (v70 + 1 >= CFArrayGetCount(v47))
                  goto LABEL_68;
              }
            }
          }
        }
      }
      *((_DWORD *)v82 + 6) = FigSignalErrorAt();
    }
  }
LABEL_68:
  v43 = *((unsigned int *)v82 + 6);
  _Block_object_dispose(&v81, 8);
  if (!(_DWORD)v43)
  {
    if (CMPhotoCompressionSessionCheckForIllegalModification((const __CFDictionary *)cf, (const __CFDictionary *)v71))ContainerAndCopyDescription = _initContainerFromDescription(a1, (const __CFDictionary *)v71, v68);
    else
      ContainerAndCopyDescription = FigSignalErrorAt();
LABEL_71:
    v43 = ContainerAndCopyDescription;
  }
LABEL_72:
  if (cf)
    CFRelease(cf);
  if (v71)
    CFRelease(v71);
  return v43;
}

uint64_t _compressThumbnail_0(uint64_t a1, CFIndex a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4)
{
  return _compressThumbnailInternal_0(a1, a2, a3, a4, 0, 0);
}

uint64_t _compressAuxImage_1(uint64_t a1, CFIndex a2, unsigned int a3, uint64_t a4, const __CFDictionary *a5, opaqueCMSampleBuffer *a6, CFIndex *a7)
{
  return _compressAuxImageInternal_0(a1, a2, a3, a4, a5, a6, 0, a7, 0);
}

uint64_t _addCompressedImage(uint64_t a1, const __CFDictionary *a2, const void *a3, uint64_t a4)
{
  uint64_t result;

  result = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (!(_DWORD)result)
    return _addCompressedX(a1, a2, a3, 0, 0, 0, 0, 0, 0, a4);
  return result;
}

uint64_t _addCompressedThumbnail(uint64_t a1, CFIndex a2, const __CFDictionary *a3, const void *a4)
{
  uint64_t result;

  result = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (!(_DWORD)result)
    return _addCompressedX(a1, a3, a4, 1, a2, 0, 0, 0, 0, 0);
  return result;
}

uint64_t _addCompressedAux(uint64_t a1, CFIndex a2, int a3, const void *a4, uint64_t a5, const __CFDictionary *a6, const __CFDictionary *a7, const void *a8)
{
  uint64_t result;

  result = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if (!(_DWORD)result)
    return _addCompressedX(a1, a7, a8, 2, a2, a3, a4, a5, a6, 0);
  return result;
}

uint64_t _addCompressedMovie(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;
  uint64_t v11;

  v6 = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if ((_DWORD)v6)
    return v6;
  if (a3)
  {
    v7 = CFGetTypeID(a3);
    if (v7 == CFURLGetTypeID())
    {
      if (*(_BYTE *)(a1 + 104))
      {
        v8 = FigSignalErrorAt();
      }
      else
      {
        v8 = CMByteStreamCreateForFileURL();
        if (!(_DWORD)v8)
        {
          Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            if (CMPhotoHEIFUtilitiesByteStreamHasMoovAtom())
            {
              FigCFDictionarySetValue();
              v10 = FigFormatReaderCreateForStreamReturningMatchingContainerLabel();
              if (!(_DWORD)v10)
                v10 = CMPhotoHEIFFileWriterAddCompressedMovie(*(_QWORD *)(a1 + 88), a2, 0);
              v11 = v10;
            }
            else
            {
              v11 = 4294950194;
            }
          }
          else
          {
            v11 = 4294950305;
          }
          goto LABEL_11;
        }
      }
      v11 = v8;
      Mutable = 0;
LABEL_11:
      if (Mutable)
        CFRelease(Mutable);
      return v11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _addXMP_0(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, CFTypeRef a4)
{
  const void *Value;
  uint64_t v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v12 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!theDict)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("UseXMPContentEncoding"));
  v8 = (uint64_t)Value;
  if (!Value)
  {
LABEL_9:
    v12 = CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, a2, 1, a4, 0, v8, 0);
LABEL_10:
    v11 = v12;
    goto LABEL_11;
  }
  v9 = CFGetTypeID(Value);
  if (v9 == CFStringGetTypeID())
  {
    v10 = CMPhotoCompressDataWithContentEncoding(*(const __CFAllocator **)(a1 + 96), (CFDataRef)a4, v8, (__CFData **)&cf);
    if ((_DWORD)v10 != -17106)
    {
      v11 = v10;
      if ((_DWORD)v10)
        goto LABEL_11;
      a4 = cf;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  v11 = 4294950306;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t _addDebugMetadata_0(uint64_t a1, CFIndex a2, uint64_t a3, const void *a4)
{
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  else
    return CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, a2, 2, a4, 0, 0, 0);
}

uint64_t _addCustomMetadata_0(uint64_t a1, CFIndex a2, uint64_t a3, const void *a4)
{
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  else
    return CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, a2, 4, a4, 0, 0, 0);
}

uint64_t _addMetadataFromImageProperties_0(uint64_t *a1, CFIndex a2, uint64_t a3, const __CFDictionary *a4)
{
  const __CFAllocator *v7;
  uint64_t *v8;
  _DWORD *v9;
  uint64_t PropertiesForImage;
  const void *Value;
  CFTypeRef v12;
  int IntIfPresent;
  const __CFDictionary *v14;
  uint64_t OrientationTransformsForImage;
  uint64_t v16;
  uint64_t v17;
  int v19;
  unsigned __int8 v20;
  int v21;
  unsigned __int8 v22;
  int v23;
  __int128 v24;
  int v25;
  CFTypeRef v26;
  CFTypeRef cf;

  v7 = CFGetAllocator(a1);
  v8 = a1 + 11;
  v26 = 0;
  cf = 0;
  v25 = 1;
  v9 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*((_BYTE *)a1 + 104))
  {
    PropertiesForImage = FigSignalErrorAt();
LABEL_38:
    v17 = PropertiesForImage;
    v12 = 0;
    goto LABEL_28;
  }
  v24 = 0uLL;
  PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*v8, a2, &v24, 0);
  if ((_DWORD)PropertiesForImage)
    goto LABEL_38;
  PropertiesForImage = CMPhotoImagePropertiesCreateDataRepresentation(v7, v24, *((uint64_t *)&v24 + 1));
  if ((_DWORD)PropertiesForImage)
    goto LABEL_38;
  Value = CFDictionaryGetValue(a4, CFSTR("iOS_Debug"));
  if (Value)
    v12 = CFRetain(Value);
  else
    v12 = 0;
  IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(a4, (const void *)*MEMORY[0x1E0CBCFF0], &v25);
  if (!IntIfPresent)
  {
    v14 = (const __CFDictionary *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E0CBD090]);
    if (v14)
      IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(v14, (const void *)*MEMORY[0x1E0CBD0C0], &v25);
    else
      IntIfPresent = 0;
  }
  v23 = 0;
  v22 = 0;
  v21 = -1;
  v20 = 0;
  OrientationTransformsForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*v8, a2, &v22, &v23, &v20, &v21);
  if ((_DWORD)OrientationTransformsForImage)
    goto LABEL_26;
  if (IntIfPresent && v22 | v20)
  {
    v19 = 1;
    OrientationTransformsForImage = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(v23, v21, &v19);
    if ((_DWORD)OrientationTransformsForImage)
    {
LABEL_26:
      v17 = OrientationTransformsForImage;
      goto LABEL_28;
    }
    if (v19 != v25)
    {
      OrientationTransformsForImage = FigSignalErrorAt();
      goto LABEL_26;
    }
  }
  if (cf)
  {
    OrientationTransformsForImage = _addExifInternal((uint64_t)a1, a2, 0, (const __CFData *)cf);
    if ((_DWORD)OrientationTransformsForImage)
      goto LABEL_26;
  }
  if (!v26)
  {
    if (!v12)
    {
      v17 = 0;
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  v17 = _addXMP_0((uint64_t)a1, a2, 0, v26);
  if (!(_DWORD)v17 && v12)
  {
LABEL_25:
    OrientationTransformsForImage = _addDebugMetadata_0((uint64_t)a1, a2, v16, v12);
    goto LABEL_26;
  }
LABEL_28:
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  if (v12)
    CFRelease(v12);
  if (*v9 == 1)
    kdebug_trace();
  return v17;
}

uint64_t _addAuxImageMetadata_0(uint64_t a1, CFIndex a2, CGImageMetadataRef metadata)
{
  uint64_t XMPData;
  uint64_t v6;
  const __CFArray *v8;
  CFTypeRef cf;

  cf = 0;
  XMPData = CMPhotoAuxiliaryImageMetadataCreateXMPData(*(_QWORD *)(a1 + 96), metadata, 0, 4, 0, (CFDataRef *)&cf);
  if (!(_DWORD)XMPData)
  {
    v8 = 0;
    XMPData = CMPhotoHEIFFileWriterGetMetadataCount(*(_QWORD *)(a1 + 88), a2, &v8);
    if (!(_DWORD)XMPData)
    {
      if (v8)
        XMPData = FigSignalErrorAt();
      else
        XMPData = CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, a2, 1, cf, 0, 0, 0);
    }
  }
  v6 = XMPData;
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t _startImageSequence(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  uint64_t v9;
  CFMutableDictionaryRef v10;
  uint64_t v11;

  if (!*(_BYTE *)(a1 + 104))
  {
    v4 = (uint64_t *)(a1 + 48);
    if (!*(_QWORD *)(a1 + 48) && !*(_QWORD *)(a1 + 56))
    {
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
        return 4294950305;
      v8 = Mutable;
      v9 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("MaxSimultaneousCompressionSessions"), 3);
      if (!(_DWORD)v9)
      {
        v9 = CMPhotoCFDictionarySetInt64(v8, CFSTR("IdleTimeoutMilliseconds"), 0);
        if (!(_DWORD)v9)
        {
          v9 = CMPhotoCodecSessionPoolCreate(*(const __CFAllocator **)(a1 + 96), v8, v4);
          if (!(_DWORD)v9)
          {
            v10 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E0C9B390], 0);
            *(_QWORD *)(a1 + 56) = v10;
            if (!v10)
            {
              v11 = 4294950305;
              goto LABEL_13;
            }
            v9 = CMPhotoHEIFFileWriterAddSequence(*(_QWORD *)(a1 + 88), a2, a3);
          }
        }
      }
      v11 = v9;
LABEL_13:
      CFRelease(v8);
      return v11;
    }
  }
  return FigSignalErrorAt();
}

uint64_t _addImageToSequence(uint64_t a1, CFIndex a2, uint64_t a3, CFDictionaryRef theDict, opaqueCMSampleBuffer *a5, CFIndex *a6)
{
  int v12;
  uint64_t SourceDimensions;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  char v20;
  __int128 v22;
  uint64_t v23;
  unint64_t v24[2];
  __int128 v25;
  uint64_t v26;
  __int128 block;
  uint64_t (*v28)(uint64_t);
  void *v29;
  uint64_t *v30;
  CFDictionaryRef v31;
  opaqueCMSampleBuffer *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36[2];
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;

  if (!*(_BYTE *)(a1 + 104))
  {
    if (theDict)
      v12 = CFDictionaryContainsKey(theDict, CFSTR("IncludeAlphaAuxiliaryImageWithOptions"));
    else
      v12 = 0;
    v24[0] = 0;
    v24[1] = 0;
    SourceDimensions = CMPhotoGetSourceDimensions(a5, theDict, v24);
    if ((_DWORD)SourceDimensions)
      return SourceDimensions;
    SourceDimensions = _copyMainAndAuxImageSamplesIfNeeded(a1);
    if ((_DWORD)SourceDimensions)
      return SourceDimensions;
    v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    v15 = *MEMORY[0x1E0CA1FC0];
    if (!v12)
    {
      if (v15 == 1)
        kdebug_trace();
      block = *(_OWORD *)a3;
      v28 = *(uint64_t (**)(uint64_t))(a3 + 16);
      v19 = _compressX(a1, theDict, a5, 0, 0, 0, 0, 1, a2, &block, 0, 0, a6, 0);
      if (!(_DWORD)v19 && *v14 == 1)
      {
        kdebug_trace();
        return 0;
      }
      return v19;
    }
    if (v15 == 1)
      kdebug_trace();
    v22 = *(_OWORD *)a3;
    v23 = *(_QWORD *)(a3 + 16);
    v37 = 0;
    v38 = &v37;
    v39 = 0x2000000000;
    v40 = 0;
    v36[0] = 0;
    v36[1] = 0;
    v16 = CMPhotoGetSourceDimensions(a5, theDict, v36);
    if ((_DWORD)v16)
    {
      v19 = v16;
      v18 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 224) = FigSemaphoreCreate();
      *(_QWORD *)(a1 + 232) = -1;
      v17 = dispatch_queue_create("com.apple.coremedia.asyncauxiliary", 0);
      v18 = v17;
      if (v17)
      {
        *(_QWORD *)&block = MEMORY[0x1E0C809B0];
        *((_QWORD *)&block + 1) = 0x40000000;
        v28 = ___compressMainWithAuxiliaryAsync_block_invoke;
        v29 = &unk_1E53F7210;
        v30 = &v37;
        v31 = theDict;
        v32 = a5;
        v33 = a1;
        v34 = a1 + 88;
        v35 = 0;
        dispatch_async(v17, &block);
        if (*v14 == 1)
          kdebug_trace();
        v25 = v22;
        v26 = v23;
        v19 = _compressX(a1, theDict, a5, 0, 0, 0, 0, 1, a2, &v25, 0, 0, a6, 0);
        if (*v14 != 1)
          goto LABEL_19;
        kdebug_trace();
      }
      else
      {
        v19 = 4294950194;
      }
    }
    if (*v14 == 1)
      kdebug_trace();
    if (!v18)
    {
      v20 = 1;
LABEL_20:
      FigSemaphoreDestroy();
      if (*v14 == 1)
      {
        kdebug_trace();
        if ((v20 & 1) != 0)
        {
LABEL_22:
          if ((_DWORD)v19)
            goto LABEL_23;
          goto LABEL_33;
        }
      }
      else if ((v20 & 1) != 0)
      {
        goto LABEL_22;
      }
      dispatch_release(v18);
      if ((_DWORD)v19)
      {
LABEL_23:
        _Block_object_dispose(&v37, 8);
        if (*v14 == 1)
          kdebug_trace();
        return v19;
      }
LABEL_33:
      if (*((_DWORD *)v38 + 6))
        v19 = 4294951824;
      else
        v19 = 0;
      goto LABEL_23;
    }
LABEL_19:
    dispatch_sync(v18, &__block_literal_global_27);
    v20 = 0;
    goto LABEL_20;
  }
  return FigSignalErrorAt();
}

uint64_t _endImageSequence(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*(_BYTE *)(a1 + 104))
    v2 = FigSignalErrorAt();
  else
    v2 = 0;
  v3 = _disposeCompressionPluginsForSequenceAsyncEncoding(a1);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (v2)
    return v2;
  else
    return v3;
}

uint64_t _addGroup(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  else
    return CMPhotoHEIFFileWriterAddGroup(*(_QWORD *)(a1 + 88), a3, a4);
}

uint64_t _addGroupProperties(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  else
    return CMPhotoHEIFFileWriterAddGroupProperties(*(_QWORD *)(a1 + 88), a3, a4);
}

uint64_t _addImageToGroup(uint64_t a1, uint64_t a2, CFIndex a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  else
    return CMPhotoHEIFFileWriterAddImageToGroup(*(_QWORD *)(a1 + 88), a3, a4);
}

uint64_t _addGroupToGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  else
    return CMPhotoHEIFFileWriterAddGroupToGroup(*(_QWORD *)(a1 + 88), a3, a4);
}

uint64_t _addTmapImageOneShot_0(uint64_t a1, uint64_t a2, int a3, CFDictionaryRef theDict, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t *a9)
{
  int CFValueIfPresent;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  const __CFAllocator *v20;
  uint64_t MutableCopy;
  const __CFDictionary *v22;
  uint64_t v23;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v25;
  CFMutableDictionaryRef v26;
  CFMutableDictionaryRef v27;
  uint64_t v28;
  CFMutableArrayRef v29;
  CFMutableArrayRef v30;
  uint64_t v31;
  uint64_t v32;
  void *v35;
  void *v36;
  void *v37;
  CGColorSpaceRef v38;
  uint64_t v39;
  uint64_t v40;

  v40 = -1;
  v39 = -1;
  if (a5 && a6)
  {
    v37 = 0;
    v38 = 0;
    v35 = 0;
    v36 = 0;
    CFValueIfPresent = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("ColorSpace"), (void **)&v38);
    v15 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("Primaries"), &v37);
    v16 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("Transfer"), &v36);
    v17 = CMPhotoCFDictionaryGetCFValueIfPresent(theDict, CFSTR("Matrix"), &v35);
    if (!CFValueIfPresent)
    {
      v18 = !v15 || v16 == 0;
      if (v18 || v17 == 0)
        return FigSignalErrorAt();
    }
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
      return 4294950305;
    v22 = (const __CFDictionary *)MutableCopy;
    if (a7)
    {
      FigCFDictionarySetValue();
      v23 = CMPhotoCompressionSessionAddAuxiliaryImage(a1, a2, 4, a8, v22, a5, (uint64_t)&v40);
      if (!(_DWORD)v23)
        goto LABEL_14;
    }
    else
    {
      FigCFDictionarySetBoolean();
      v23 = CMPhotoCompressionSessionAddImage(a1, v22, a5, (uint64_t)&v40);
      if (!(_DWORD)v23)
      {
LABEL_14:
        Mutable = CFDictionaryCreateMutable(v20, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v25 = Mutable;
          v26 = CFDictionaryCreateMutable(v20, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v26)
          {
            v27 = v26;
            FigCFDictionarySetInt();
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            if (CFValueIfPresent)
            {
              CGColorSpaceUsesITUR_2100TF(v38);
            }
            else
            {
              if (!FigCFEqual())
                FigCFEqual();
              FigCFDictionarySetBoolean();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
            }
            FigCFDictionarySetValue();
            FigCFDictionarySetInt();
            v29 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            if (v29)
            {
              v30 = v29;
              FigCFArrayAppendInt32();
              FigCFArrayAppendInt32();
              v31 = CMPhotoCompressionSessionAddImage(a1, v25, (uint64_t)v30, (uint64_t)&v39);
              if ((_DWORD)v31
                || (v31 = CMPhotoCompressionSessionAddGroup(a1, 0, 1634497650), (_DWORD)v31)
                || (v31 = CMPhotoCompressionSessionAddImageHandleToGroup(a1), (_DWORD)v31))
              {
                v28 = v31;
              }
              else
              {
                v32 = CMPhotoCompressionSessionAddImageHandleToGroup(a1);
                v28 = v32;
                if (a9)
                {
                  if (!(_DWORD)v32)
                    *a9 = v39;
                }
              }
              CFRelease(v30);
            }
            else
            {
              v28 = 4294950305;
            }
            CFRelease(v27);
          }
          else
          {
            v28 = 4294950305;
          }
          CFRelease(v25);
        }
        else
        {
          v28 = 4294950305;
        }
        goto LABEL_33;
      }
    }
    v28 = v23;
LABEL_33:
    CFRelease(v22);
    return v28;
  }
  return FigSignalErrorAt();
}

uint64_t _compressImageAsync_0(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, CFIndex *a4, uint64_t a5)
{
  return _compressImageInternal_0(a1, a2, a3, 1, a4, a5);
}

uint64_t _compressAuxImageAsync_0(uint64_t a1, CFIndex a2, unsigned int a3, uint64_t a4, const __CFDictionary *a5, opaqueCMSampleBuffer *a6, CFIndex *a7, uint64_t a8)
{
  return _compressAuxImageInternal_0(a1, a2, a3, a4, a5, a6, 1, a7, a8);
}

uint64_t _compressThumbnailAsync_0(uint64_t a1, CFIndex a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4, uint64_t a5)
{
  return _compressThumbnailInternal_0(a1, a2, a3, a4, 1, a5);
}

void _destroySequenceGroupReaders(const __CFArray *a1)
{
  CFIndex v2;
  uint64_t *ValueAtIndex;

  if (a1)
  {
    if (CFArrayGetCount(a1) >= 1)
    {
      v2 = 0;
      do
      {
        ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(a1, v2);
        _destroySequenceGroupReader(ValueAtIndex);
        ++v2;
      }
      while (v2 < CFArrayGetCount(a1));
    }
    CFRelease(a1);
  }
}

void _destroySequenceGroupReader(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  CFIndex i;
  const __CFArray *Count;
  CFTypeRef *ValueAtIndex;
  CFTypeRef *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFIndex j;
  const __CFArray *v14;
  CFTypeRef *v15;
  CFTypeRef *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  const void *v20;
  const void *v21;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = *(const void **)(v2 + 8);
      if (v3)
        CFRelease(v3);
      v4 = *(const void **)(v2 + 16);
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)(v2 + 24);
      if (v5)
        CFRelease(v5);
      if (*(_QWORD *)v2)
        CFRelease(*(CFTypeRef *)v2);
      free((void *)v2);
    }
    for (i = 0; ; ++i)
    {
      Count = (const __CFArray *)a1[1];
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex((CFArrayRef)a1[1], i);
      if (ValueAtIndex)
      {
        v9 = ValueAtIndex;
        v10 = ValueAtIndex[1];
        if (v10)
          CFRelease(v10);
        v11 = v9[2];
        if (v11)
          CFRelease(v11);
        v12 = v9[3];
        if (v12)
          CFRelease(v12);
        if (*v9)
          CFRelease(*v9);
        free(v9);
      }
    }
    for (j = 0; ; ++j)
    {
      v14 = (const __CFArray *)a1[2];
      if (v14)
        v14 = (const __CFArray *)CFArrayGetCount(v14);
      if (j >= (uint64_t)v14)
        break;
      v15 = (CFTypeRef *)CFArrayGetValueAtIndex((CFArrayRef)a1[2], j);
      if (v15)
      {
        v16 = v15;
        v17 = v15[1];
        if (v17)
          CFRelease(v17);
        v18 = v16[2];
        if (v18)
          CFRelease(v18);
        v19 = v16[3];
        if (v19)
          CFRelease(v19);
        if (*v16)
          CFRelease(*v16);
        free(v16);
      }
    }
    v20 = (const void *)a1[1];
    if (v20)
      CFRelease(v20);
    v21 = (const void *)a1[2];
    if (v21)
      CFRelease(v21);
    free(a1);
  }
}

uint64_t _readContainerAndCopyDescription(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  uint64_t v4;
  CFTypeRef v5;
  CFMutableArrayRef Mutable;
  uint64_t v7;
  uint64_t (*v8)(CFTypeRef, uint64_t, uint64_t *);
  uint64_t v9;
  CFMutableDictionaryRef v10;
  uint64_t v11;
  uint64_t v12;
  const CFDictionaryKeyCallBacks *v13;
  const CFDictionaryValueCallBacks *v14;
  CFMutableDictionaryRef v15;
  CFTypeRef v16;
  uint64_t (*v17)(CFTypeRef, uint64_t, const void **, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t FigBaseObject;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v22;
  uint64_t CMBaseObject;
  unsigned int (*v24)(uint64_t, _QWORD, uint64_t, const __CFBoolean **);
  CFMutableArrayRef v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, _QWORD, uint64_t, const __CFArray **);
  __CFArray *v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  uint64_t ReferenceSequenceReaders;
  CFDictionaryRef v33;
  __CFArray *v34;
  uint64_t v36;
  uint64_t v37;
  const __CFAllocator *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, _QWORD, const __CFAllocator *, CMTime *);
  uint64_t hasTrackReferenceOfType;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFArray *v48;
  const __CFArray *v49;
  __CFArray **v50;
  __CFArray **v51;
  uint64_t (*v52)(uint64_t, uint64_t, CMTime *, _QWORD);
  uint64_t SequenceReader_0;
  __CFArray **v54;
  CFMutableArrayRef v55;
  CFIndex v56;
  const void *v57;
  const __CFArray *v58;
  const __CFDictionary *v59;
  const __CFAllocator *v60;
  void *v61;
  const __CFArray *v62;
  int v63;
  const __CFArray *v64;
  const __CFArray *v65;
  uint64_t v66;
  uint64_t v67;
  CFMutableArrayRef v68;
  CFIndex v69;
  void *v70;
  uint64_t MutableCopy;
  __CFArray *v72;
  const void *v73;
  const void *v74;
  CFTypeID v75;
  CFTypeID v76;
  CFIndex v77;
  CFIndex v78;
  const __CFDictionary *v79;
  uint64_t v80;
  const __CFDictionary *v81;
  CFIndex v82;
  __CFDictionary *v83;
  const __CFDictionary *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  uint64_t (*v88)(void *, uint64_t, CMTime *);
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void *, uint64_t, _QWORD, __CFArray **);
  uint64_t v92;
  CFMutableArrayRef v93;
  CFIndex v94;
  CMTime *v95;
  const __CFArray *Count;
  const __CFAllocator *v97;
  const __CFArray *v98;
  uint64_t *ValueAtIndex;
  CFMutableArrayRef v100;
  __CFDictionary *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  CFMutableDictionaryRef v105;
  __CFDictionary *v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t, CMTime *);
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, CMTime *);
  CMTimeValue v112;
  _BOOL4 v113;
  const __CFArray *v114;
  const __CFArray *v115;
  __CFDictionary *v116;
  CFMutableDictionaryRef v117;
  void *v118;
  void *v119;
  void *v120;
  CFDictionaryRef v121;
  __CFArray *v122;
  void *v123;
  void *key;
  int v125;
  __CFDictionary **v126;
  __CFArray *cf;
  __CFArray *cfa;
  CFIndex v129;
  __CFDictionary *v130;
  CFIndex v131;
  void *v132;
  __CFArray *v133;
  __CFDictionary *v134;
  uint64_t v135;
  __CFArray *theArray;
  CFNumberRef value;
  void *values;
  CFTypeRef v139;
  const __CFBoolean *v140;
  const void *v141;
  CFTypeRef v142;
  CFTypeRef v143;
  const __CFArray *v144;
  uint64_t v145;
  __int16 v146;
  unsigned int v147;
  const __CFArray *v148;
  CMTime v149;
  CMTime v150;
  __CFArray *v151;
  __CFArray *v152[2];

  v4 = a1;
  v144 = 0;
  v145 = 0;
  v5 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
  v142 = 0;
  v143 = v5;
  v140 = 0;
  v141 = 0;
  v139 = 0;
  Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E0C9B378]);
  theArray = Mutable;
  if (!Mutable)
  {
    v33 = 0;
    v29 = 0;
    ReferenceSequenceReaders = 4294950305;
    if (v5)
      goto LABEL_43;
    goto LABEL_44;
  }
  v7 = FigPictureCollectionCreateFromByteStream();
  if ((_DWORD)v7)
    goto LABEL_184;
  v8 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v8)
  {
    v33 = 0;
    v29 = 0;
    value = 0;
    ReferenceSequenceReaders = 4294954514;
    goto LABEL_42;
  }
  v7 = v8(v142, 1, &v145);
  if ((_DWORD)v7)
  {
LABEL_184:
    ReferenceSequenceReaders = v7;
    v33 = 0;
    v29 = 0;
    value = 0;
    goto LABEL_42;
  }
  if (v145 < 1)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_184;
  }
  v126 = a3;
  v9 = 0;
  value = 0;
  v10 = 0;
  v11 = v4 + 88;
  v12 = *MEMORY[0x1E0CC4B78];
  v13 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v14 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v135 = v4;
  do
  {
    if (v141)
    {
      CFRelease(v141);
      v141 = 0;
    }
    if (v10)
      CFRelease(v10);
    if (v143)
    {
      CFRelease(v143);
      v143 = 0;
    }
    v15 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v4 + 96), 0, v13, v14);
    if (!v15)
    {
      v33 = 0;
      v29 = 0;
      ReferenceSequenceReaders = 4294950305;
      goto LABEL_42;
    }
    v10 = v15;
    v16 = v142;
    v17 = *(uint64_t (**)(CFTypeRef, uint64_t, const void **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 16);
    if (!v17)
    {
LABEL_36:
      v33 = 0;
      ReferenceSequenceReaders = 4294954514;
      goto LABEL_37;
    }
    v18 = v17(v16, v9, &v141, 0);
    if ((_DWORD)v18)
      goto LABEL_179;
    v18 = _copyPictureReaderToImageDescription(v11, v141, 0, v9, v10);
    if ((_DWORD)v18)
      goto LABEL_179;
    v19 = *(_QWORD *)(v4 + 96);
    FigBaseObject = FigPictureReaderGetFigBaseObject();
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (!v21)
      goto LABEL_36;
    v18 = v21(FigBaseObject, v12, v19, &v143);
    if ((_DWORD)v18)
      goto LABEL_179;
    v4 = v135;
    if (FigCFEqual())
    {
      if (value)
      {
        v18 = FigSignalErrorAt();
LABEL_179:
        ReferenceSequenceReaders = v18;
        v33 = 0;
        goto LABEL_37;
      }
      value = CMPhotoCFNumberCreateInt(v9);
    }
    CFArrayAppendValue(theArray, v10);
    ++v9;
  }
  while (v9 < v145);
  *(_BYTE *)(v135 + 112) = 1;
  *(_QWORD *)(v135 + 120) = v142;
  v142 = 0;
  v22 = *(_QWORD *)(v135 + 96);
  CMBaseObject = FigPictureCollectionGetCMBaseObject();
  v24 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, const __CFBoolean **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  v134 = v10;
  if (v24 && !v24(CMBaseObject, *MEMORY[0x1E0CC4A08], v22, &v140) && CFBooleanGetValue(v140))
  {
    values = CFSTR("video/mp4");
    v121 = CFDictionaryCreate(*(CFAllocatorRef *)(v135 + 96), MEMORY[0x1E0CC4348], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v121)
      goto LABEL_248;
    v36 = FigFormatReaderCreateForStreamReturningMatchingContainerLabel();
    if ((_DWORD)v36)
    {
      ReferenceSequenceReaders = v36;
      goto LABEL_246;
    }
    v37 = (uint64_t)v139;
    v38 = CFGetAllocator((CFTypeRef)v135);
    v148 = 0;
    v149.value = 0;
    v151 = 0;
    v152[0] = 0;
    v133 = CFArrayCreateMutable(v38, 0, 0);
    if (v133)
    {
      v39 = FigFormatReaderGetFigBaseObject();
      v40 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v40)
      {
        hasTrackReferenceOfType = v40(v39, *MEMORY[0x1E0CC4330], v38, &v149);
        if ((_DWORD)hasTrackReferenceOfType)
        {
LABEL_185:
          ReferenceSequenceReaders = hasTrackReferenceOfType;
LABEL_186:
          v54 = 0;
        }
        else
        {
          v147 = 0;
          v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 64);
          if (v42)
          {
            v43 = 0;
            while (1)
            {
              if (v42(v37, v43, 1885954932, 0, &v147))
                goto LABEL_175;
              v146 = 0;
              hasTrackReferenceOfType = _hasTrackReferenceOfType((const __CFDictionary *)v149.value, CFSTR("thmb"), v147, (char *)&v146 + 1);
              if ((_DWORD)hasTrackReferenceOfType)
                goto LABEL_185;
              hasTrackReferenceOfType = _hasTrackReferenceOfType((const __CFDictionary *)v149.value, CFSTR("auxl"), v147, (char *)&v146);
              if ((_DWORD)hasTrackReferenceOfType)
                goto LABEL_185;
              if (!(HIBYTE(v146) | v146))
                break;
LABEL_97:
              v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
              ++v43;
              if (!v42)
                goto LABEL_175;
            }
            v44 = _copyTrackReferencesOfType((const __CFDictionary *)v149.value, CFSTR("thmb"), v147, v152);
            if ((_DWORD)v44)
            {
              ReferenceSequenceReaders = v44;
              if ((_DWORD)v44 != -16993)
                goto LABEL_186;
            }
            v45 = _copyTrackReferencesOfType((const __CFDictionary *)v149.value, CFSTR("auxl"), v147, &v151);
            if ((_DWORD)v45)
            {
              ReferenceSequenceReaders = v45;
              if ((_DWORD)v45 != -16993)
                goto LABEL_186;
            }
            v46 = _copyTrackReferencesOfType((const __CFDictionary *)v149.value, CFSTR("cdsc"), v147, &v148);
            if ((_DWORD)v46)
            {
              ReferenceSequenceReaders = v46;
              if ((_DWORD)v46 != -16993)
                goto LABEL_186;
            }
            v47 = v147;
            v49 = v151;
            v48 = v152[0];
            v150.value = 0;
            v50 = (__CFArray **)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
            if (!v50)
            {
              v54 = 0;
              goto LABEL_251;
            }
            v51 = v50;
            v52 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 56);
            if (v52)
            {
              SequenceReader_0 = v52(v37, v47, &v150, 0);
              if ((_DWORD)SequenceReader_0
                || (SequenceReader_0 = _createSequenceReader_0((uint64_t)v38, v37, (const void *)v150.value, v51),
                    (_DWORD)SequenceReader_0)
                || (SequenceReader_0 = _createReferenceSequenceReaders(v38, v37, v48, 1885954932, v51 + 1),
                    (_DWORD)SequenceReader_0))
              {
                ReferenceSequenceReaders = SequenceReader_0;
              }
              else
              {
                ReferenceSequenceReaders = _createReferenceSequenceReaders(v38, v37, v49, 1635088502, v51 + 2);
                if (!(_DWORD)ReferenceSequenceReaders)
                {
                  v54 = v51;
                  v51 = 0;
                  goto LABEL_88;
                }
              }
              v54 = 0;
            }
            else
            {
              v54 = 0;
              ReferenceSequenceReaders = 4294954514;
            }
LABEL_88:
            if (v150.value)
              CFRelease((CFTypeRef)v150.value);
            _destroySequenceGroupReader((uint64_t *)v51);
            if ((_DWORD)ReferenceSequenceReaders)
              goto LABEL_187;
            CFArrayAppendValue(v133, v54);
            if (v152[0])
            {
              CFRelease(v152[0]);
              v152[0] = 0;
            }
            v4 = v135;
            if (v151)
            {
              CFRelease(v151);
              v151 = 0;
            }
            if (v148)
            {
              CFRelease(v148);
              v148 = 0;
            }
            goto LABEL_97;
          }
LABEL_175:
          v92 = v4;
          v54 = 0;
          ReferenceSequenceReaders = 0;
          *(_QWORD *)(v92 + 144) = v133;
          v133 = 0;
        }
      }
      else
      {
        v54 = 0;
        ReferenceSequenceReaders = 4294954514;
      }
    }
    else
    {
      v54 = 0;
      v133 = 0;
LABEL_251:
      ReferenceSequenceReaders = 4294950305;
    }
LABEL_187:
    if (v149.value)
      CFRelease((CFTypeRef)v149.value);
    _destroySequenceGroupReader((uint64_t *)v54);
    _destroySequenceGroupReaders(v133);
    if ((_DWORD)ReferenceSequenceReaders)
      goto LABEL_246;
    v4 = v135;
    v93 = CFArrayCreateMutable(*(CFAllocatorRef *)(v135 + 96), 0, MEMORY[0x1E0C9B378]);
    if (!v93)
    {
LABEL_248:
      ReferenceSequenceReaders = 4294950305;
      goto LABEL_246;
    }
    v25 = v93;
    v94 = 0;
    v95 = (CMTime *)MEMORY[0x1E0CA2E18];
    cfa = v93;
    while (1)
    {
      Count = *(const __CFArray **)(v4 + 144);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (v94 >= (uint64_t)Count)
        break;
      v97 = *(const __CFAllocator **)(v4 + 96);
      v151 = 0;
      v152[0] = 0;
      v98 = *(const __CFArray **)(v4 + 144);
      if (!v98)
      {
        ReferenceSequenceReaders = 4294950304;
        goto LABEL_245;
      }
      if (CFArrayGetCount(v98) <= v94)
      {
        v116 = 0;
        ReferenceSequenceReaders = 4294950304;
        goto LABEL_228;
      }
      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 144), v94);
      v100 = CFArrayCreateMutable(v97, 0, MEMORY[0x1E0C9B378]);
      if (!v100)
      {
        v116 = 0;
        ReferenceSequenceReaders = 4294950305;
        goto LABEL_228;
      }
      v101 = v100;
      v102 = *ValueAtIndex;
      v103 = _moveCursorToPosition_0(*ValueAtIndex, 0);
      if ((_DWORD)v103)
      {
        ReferenceSequenceReaders = v103;
        v116 = 0;
        v106 = v101;
        v4 = v135;
        goto LABEL_227;
      }
      v131 = v94;
      v104 = 0;
      do
      {
        v105 = CFDictionaryCreateMutable(v97, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v105)
        {
          v116 = 0;
          ReferenceSequenceReaders = 4294950305;
          v106 = v101;
          v4 = v135;
          goto LABEL_237;
        }
        v106 = v105;
        v150 = *v95;
        v107 = *(_QWORD *)(v102 + 16);
        v108 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v108)
          goto LABEL_223;
        v109 = v108(v107, &v150);
        if ((_DWORD)v109)
        {
LABEL_222:
          ReferenceSequenceReaders = v109;
LABEL_224:
          v4 = v135;
          v94 = v131;
          CFRelease(v101);
          v116 = 0;
          goto LABEL_227;
        }
        if ((*(_QWORD *)(v102 + 32) & 0x8000000000000000) != 0)
        {
          v109 = FigSignalErrorAt();
          v113 = 0;
          if ((_DWORD)v109)
            goto LABEL_222;
        }
        else
        {
          v149.value = 0;
          v110 = *(_QWORD *)(v102 + 16);
          v111 = *(uint64_t (**)(uint64_t, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
          if (!v111)
          {
LABEL_223:
            ReferenceSequenceReaders = 4294954514;
            goto LABEL_224;
          }
          v109 = v111(v110, 1, &v149);
          if ((_DWORD)v109)
            goto LABEL_222;
          v112 = v149.value;
          *(_QWORD *)(v102 + 32) += v149.value;
          v113 = v112 != 1;
        }
        FigCFDictionarySetInt();
        v114 = (const __CFArray *)ValueAtIndex[1];
        v149 = v150;
        v109 = _createReferenceSequencesDescription(v97, v114, &v149, v152);
        if ((_DWORD)v109)
          goto LABEL_222;
        if (v152[0] && CFArrayGetCount(v152[0]) >= 1)
          CFDictionaryAddValue(v106, CFSTR("ThumbnailImage"), v152[0]);
        v115 = (const __CFArray *)ValueAtIndex[2];
        v149 = v150;
        v109 = _createReferenceSequencesDescription(v97, v115, &v149, &v151);
        if ((_DWORD)v109)
          goto LABEL_222;
        if (v151 && CFArrayGetCount(v151) >= 1)
          CFDictionaryAddValue(v106, CFSTR("Auxiliary"), v151);
        CFArrayAppendValue(v101, v106);
        CFRelease(v106);
        if (v152[0])
        {
          CFRelease(v152[0]);
          v152[0] = 0;
        }
        if (v151)
        {
          CFRelease(v151);
          v151 = 0;
        }
        ++v104;
      }
      while (!v113);
      v117 = CFDictionaryCreateMutable(v97, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v116 = v117;
      v4 = v135;
      if (v117)
      {
        v94 = v131;
        FigCFDictionarySetInt64();
        CFDictionaryAddValue(v116, CFSTR("ImageList"), v101);
        ReferenceSequenceReaders = 0;
        v106 = v101;
        goto LABEL_227;
      }
      ReferenceSequenceReaders = 4294950305;
      v106 = v101;
LABEL_237:
      v94 = v131;
LABEL_227:
      CFRelease(v106);
LABEL_228:
      v25 = cfa;
      if (v152[0])
        CFRelease(v152[0]);
      if (v151)
        CFRelease(v151);
      if ((_DWORD)ReferenceSequenceReaders)
      {
        if (v116)
          CFRelease(v116);
        v25 = cfa;
LABEL_245:
        CFRelease(v25);
LABEL_246:
        v33 = v121;
LABEL_37:
        CFRelease(v10);
        v29 = 0;
        goto LABEL_42;
      }
      CFArrayAppendValue(cfa, v116);
      if (v116)
        CFRelease(v116);
      ++v94;
    }
    if (CFArrayGetCount(v25) <= 0)
    {
      CFRelease(v25);
      v25 = 0;
    }
  }
  else
  {
    v25 = 0;
    v121 = 0;
  }
  v26 = *(_QWORD *)(v4 + 96);
  v27 = FigPictureCollectionGetCMBaseObject();
  v28 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  cf = v25;
  if (!v28 || v28(v27, *MEMORY[0x1E0CC49E8], v26, &v144) || !v144 || CFArrayGetCount(v144) < 1)
  {
    v29 = 0;
    goto LABEL_29;
  }
  v55 = CFArrayCreateMutable(*(CFAllocatorRef *)(v4 + 96), 0, MEMORY[0x1E0C9B378]);
  v29 = v55;
  if (!v55)
    goto LABEL_182;
  v56 = 0;
  key = (void *)*MEMORY[0x1E0CC4B08];
  v57 = (const void *)*MEMORY[0x1E0CC4AF0];
  v123 = (void *)*MEMORY[0x1E0CC4B00];
  v120 = (void *)*MEMORY[0x1E0CC60C0];
  v119 = (void *)*MEMORY[0x1E0CC60E0];
  v118 = (void *)*MEMORY[0x1E0CC60D0];
  v122 = v55;
  while (1)
  {
    v58 = v144;
    if (v144)
      v58 = (const __CFArray *)CFArrayGetCount(v144);
    if (v56 >= (uint64_t)v58)
      break;
    v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(v144, v56);
    v60 = *(const __CFAllocator **)(v4 + 96);
    v61 = *(void **)(v4 + 120);
    v62 = v144;
    v130 = CFDictionaryCreateMutable(v60, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v130)
      goto LABEL_182;
    v132 = v61;
    v129 = v56;
    CFDictionaryGetValue(v59, key);
    if (FigCFEqual())
    {
      v63 = 1937007986;
    }
    else
    {
      if (!FigCFEqual())
        goto LABEL_169;
      v63 = 1634497650;
    }
    LODWORD(v149.value) = 0;
    if (!CMPhotoCFDictionaryGetInt32IfPresent(v59, v57, &v149))
      goto LABEL_169;
    v64 = (const __CFArray *)CFDictionaryGetValue(v59, v123);
    v65 = v64;
    if (!v64)
    {
      v68 = 0;
      ReferenceSequenceReaders = 4294950304;
      goto LABEL_172;
    }
    v66 = CFArrayGetCount(v64);
    if (v66 < 1)
    {
LABEL_169:
      ReferenceSequenceReaders = FigSignalErrorAt();
      v65 = 0;
      v68 = 0;
      goto LABEL_172;
    }
    v67 = v66;
    v68 = CFArrayCreateMutable(v60, v66, MEMORY[0x1E0C9B378]);
    if (v68)
    {
      v125 = v63;
      v69 = 0;
      v70 = 0;
      do
      {
        if (v70)
          CFRelease(v70);
        MutableCopy = FigCFDictionaryCreateMutableCopy();
        if (!MutableCopy)
        {
          v65 = 0;
          ReferenceSequenceReaders = 4294950305;
          v4 = v135;
          v29 = v122;
          v82 = v129;
          v83 = v130;
          goto LABEL_157;
        }
        v70 = (void *)MutableCopy;
        v72 = v68;
        v73 = CFArrayGetValueAtIndex(v65, v69);
        if (!v73)
        {
LABEL_154:
          v65 = 0;
          ReferenceSequenceReaders = 4294950194;
LABEL_155:
          v29 = v122;
          v82 = v129;
          v83 = v130;
          v68 = v72;
          v10 = v134;
          v4 = v135;
          goto LABEL_156;
        }
        v74 = v73;
        v75 = CFGetTypeID(v73);
        if (v75 == CFNumberGetTypeID())
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v70, CFSTR("ImageHandle"), v74);
        }
        else
        {
          v76 = CFGetTypeID(v74);
          if (v76 != CFDictionaryGetTypeID())
            goto LABEL_154;
          CFDictionaryGetValue((CFDictionaryRef)v74, v57);
          v77 = 0;
          if (v62)
          {
LABEL_125:
            v78 = CFArrayGetCount(v62);
            goto LABEL_127;
          }
          while (1)
          {
            v78 = 0;
LABEL_127:
            if (v77 >= v78)
              break;
            v79 = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
            CFDictionaryGetValue(v79, v57);
            if (FigCFEqual())
              goto LABEL_132;
            ++v77;
            if (v62)
              goto LABEL_125;
          }
          v80 = FigSignalErrorAt();
          v77 = 0;
          if ((_DWORD)v80)
          {
            ReferenceSequenceReaders = v80;
            v65 = 0;
            goto LABEL_155;
          }
LABEL_132:
          CMPhotoCFDictionarySetSize(v70, CFSTR("GroupHandle"), v77);
        }
        v68 = v72;
        CFArrayAppendValue(v72, v70);
        ++v69;
        v10 = v134;
      }
      while (v69 != v67);
      v81 = (const __CFDictionary *)FigCFDictionaryGetValue();
      v4 = v135;
      v29 = v122;
      v82 = v129;
      v83 = v130;
      if (v81)
      {
        v84 = v81;
        v85 = CFDictionaryGetValue(v81, v120);
        if (v85)
          CFDictionaryAddValue(v130, CFSTR("DisparityAdjustment"), v85);
        v86 = CFDictionaryGetValue(v84, v119);
        if (v86)
          CFDictionaryAddValue(v130, CFSTR("StereoAggressors"), v86);
        v87 = CFDictionaryGetValue(v84, v118);
        if (v87)
          CFDictionaryAddValue(v130, CFSTR("MonoImageLocation"), v87);
      }
      v150.value = 0;
      v88 = *(uint64_t (**)(void *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v88)
      {
        v89 = v88(v132, 1, &v150);
        if ((_DWORD)v89)
          goto LABEL_173;
        LODWORD(v90) = v150.value;
        if (v150.value >= 1)
        {
          v90 = 0;
          while (1)
          {
            LODWORD(v152[0]) = 0;
            v91 = *(uint64_t (**)(void *, uint64_t, _QWORD, __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 16);
            if (!v91)
              break;
            v89 = v91(v132, v90, 0, v152);
            if ((_DWORD)v89)
              goto LABEL_173;
            if (LODWORD(v149.value) < LODWORD(v152[0]))
              goto LABEL_150;
            if (++v90 >= v150.value)
            {
              LODWORD(v90) = v150.value;
              goto LABEL_150;
            }
          }
          ReferenceSequenceReaders = 4294954514;
          goto LABEL_166;
        }
LABEL_150:
        v89 = CMPhotoCFDictionarySetInt32(v130, CFSTR("GroupType"), v125);
        if ((_DWORD)v89 || (v89 = CMPhotoCFDictionarySetInt32(v130, CFSTR("GroupHandle"), v129), (_DWORD)v89))
        {
LABEL_173:
          ReferenceSequenceReaders = v89;
          goto LABEL_166;
        }
        ReferenceSequenceReaders = CMPhotoCFDictionarySetInt32(v130, CFSTR("GroupSortOrder"), v90);
        if (!(_DWORD)ReferenceSequenceReaders)
        {
          CFDictionarySetValue(v130, CFSTR("ImageList"), v68);
          v65 = v130;
          v83 = 0;
          goto LABEL_156;
        }
LABEL_166:
        v65 = 0;
      }
      else
      {
        v65 = 0;
        ReferenceSequenceReaders = 4294954514;
      }
LABEL_156:
      CFRelease(v70);
      if (!v83)
        goto LABEL_158;
      goto LABEL_157;
    }
    v65 = 0;
    ReferenceSequenceReaders = 4294950305;
LABEL_172:
    v4 = v135;
    v82 = v129;
    v83 = v130;
LABEL_157:
    CFRelease(v83);
LABEL_158:
    if (v68)
      CFRelease(v68);
    if ((_DWORD)ReferenceSequenceReaders)
      goto LABEL_40;
    CFArrayAppendValue(v29, v65);
    if (v65)
      CFRelease(v65);
    v56 = v82 + 1;
  }
  v25 = cf;
LABEL_29:
  v30 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v4 + 96), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v30)
  {
LABEL_182:
    ReferenceSequenceReaders = 4294950305;
    goto LABEL_40;
  }
  v31 = v30;
  CFDictionaryAddValue(v30, CFSTR("PrimaryImageHandle"), value);
  CFDictionaryAddValue(v31, CFSTR("ImageList"), theArray);
  if (v25)
    CFDictionaryAddValue(v31, CFSTR("SequenceList"), v25);
  if (v29)
    CFDictionaryAddValue(v31, CFSTR("GroupList"), v29);
  *(_QWORD *)(v4 + 128) = v139;
  v139 = 0;
  if (v126)
  {
    ReferenceSequenceReaders = 0;
    *v126 = v31;
  }
  else
  {
    CFRelease(v31);
    ReferenceSequenceReaders = 0;
  }
LABEL_40:
  v33 = v121;
  CFRelease(v10);
  if (cf)
    CFRelease(cf);
LABEL_42:
  CFRelease(theArray);
  v5 = v143;
  Mutable = value;
  if (v143)
  {
LABEL_43:
    v34 = Mutable;
    CFRelease(v5);
    Mutable = v34;
  }
LABEL_44:
  if (Mutable)
    CFRelease(Mutable);
  if (v142)
    CFRelease(v142);
  if (v141)
    CFRelease(v141);
  if (v140)
    CFRelease(v140);
  if (v139)
    CFRelease(v139);
  if (v33)
    CFRelease(v33);
  if (v144)
    CFRelease(v144);
  if (v29)
    CFRelease(v29);
  return ReferenceSequenceReaders;
}

uint64_t _initContainerFromDescription(const void *a1, const __CFDictionary *a2, __CFDictionary **a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v8;
  const __CFArray *v9;
  const __CFArray *v10;
  uint64_t v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  uint64_t v16;
  CFIndex v17;
  char v18;
  uint64_t v19;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v21;
  __CFDictionary *v22;
  CFTypeID v23;
  uint64_t v24;
  uint64_t v25;
  const __CFArray *v26;
  const __CFArray *v27;
  CFTypeID v28;
  uint64_t v29;
  uint64_t v30;
  __CFDictionary **v31;
  CFMutableDictionaryRef v32;
  __CFDictionary *v33;
  const __CFAllocator *allocator;
  __CFDictionary **v36;
  uint64_t v37;
  const __CFDictionary *theDict;
  void *cf;
  const __CFDictionary *MutableCopy;
  CFMutableDictionaryRef v41;
  void *value;
  int key;
  int key_4;
  CFArrayRef theArray;
  __CFArray *v46;
  __CFArray *v47;
  __CFArray *v48;

  v6 = CFGetAllocator(a1);
  v47 = 0;
  v48 = 0;
  v46 = 0;
  theArray = 0;
  key_4 = 0;
  Mutable = CFDictionaryCreateMutable(v6, 0, 0, 0);
  if (!Mutable)
  {
    v8 = 0;
LABEL_67:
    v30 = 4294950305;
    goto LABEL_51;
  }
  v8 = CFDictionaryCreateMutable(v6, 0, 0, 0);
  if (!v8)
    goto LABEL_67;
  v41 = CFDictionaryCreateMutable(v6, 0, 0, 0);
  if (!v41)
    goto LABEL_67;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v30 = 4294950305;
    CFRelease(v41);
    goto LABEL_51;
  }
  cf = (void *)FigCFArrayCreateMutableCopy();
  if (!cf)
  {
LABEL_74:
    v30 = 4294950305;
    goto LABEL_50;
  }
  if (!FigCFDictionaryGetIntIfPresent())
    goto LABEL_69;
  v9 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("ImageList"));
  if (!v9)
  {
    v30 = 4294950305;
    goto LABEL_49;
  }
  v10 = v9;
  v11 = CMPhotoPropertyListCopyWithMutableContainers(v6, v9, &theArray);
  if ((_DWORD)v11
    || (theDict = a2, CFDictionaryGetValue(a2, CFSTR("GroupList")))
    && (v12 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("GroupList"))) != 0
    && (v13 = v12, CFArrayGetCount(v12) >= 1)
    && (v11 = CMPhotoPropertyListCopyWithMutableContainers(v6, v13, &v48), (_DWORD)v11))
  {
LABEL_70:
    v30 = v11;
LABEL_49:
    CFRelease(cf);
    goto LABEL_50;
  }
  Count = CFArrayGetCount(v10);
  if (Count < 1)
  {
LABEL_69:
    v11 = FigSignalErrorAt();
    goto LABEL_70;
  }
  v15 = Count;
  allocator = v6;
  v36 = a3;
  v16 = (uint64_t)a1;
  v17 = 0;
  v18 = 0;
  v37 = v16;
  v19 = v16 + 88;
  do
  {
    v11 = _addGroupsForCurrentPosition();
    if ((_DWORD)v11)
      goto LABEL_70;
    key = -1;
    value = (void *)-1;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v17);
    if (!ValueAtIndex)
    {
      v30 = 4294950304;
      goto LABEL_49;
    }
    v21 = ValueAtIndex;
    v22 = v8;
    v23 = CFGetTypeID(ValueAtIndex);
    if (v23 != CFDictionaryGetTypeID() || !CFArrayGetValueAtIndex(theArray, v17))
    {
      v30 = 4294950304;
      goto LABEL_48;
    }
    if (!CMPhotoCFDictionaryGetIntIfPresent(v21, CFSTR("ImageHandle"), &key))
    {
      v24 = FigSignalErrorAt();
LABEL_47:
      v30 = v24;
LABEL_48:
      v8 = v22;
      goto LABEL_49;
    }
    if (key_4 == key)
      v18 = 1;
    v24 = _copyImageDescriptionToWriter(v19, v21, 0, 0, key, key_4 == key, v41, MutableCopy, (__CFArray *)cf, &value);
    if ((_DWORD)v24)
      goto LABEL_47;
    v24 = FigCFDictionarySetInt();
    if ((_DWORD)v24)
      goto LABEL_47;
    CFDictionaryAddValue(Mutable, (const void *)key, value);
    ++v17;
    v8 = v22;
  }
  while (v15 != v17);
  if (!v18)
    goto LABEL_69;
  v11 = _addGroupsForCurrentPosition();
  if ((_DWORD)v11)
    goto LABEL_70;
  *(_QWORD *)(v37 + 152) = Mutable;
  *(_QWORD *)(v37 + 160) = v22;
  *(_QWORD *)(v37 + 168) = cf;
  if (v48)
  {
    v25 = _addGenericListToWriter(v19, (uint64_t (*)(uint64_t, CFIndex, const void *, void **))_addGroupDescriptionToWriter, v48, &v47);
    if ((_DWORD)v25)
      goto LABEL_65;
  }
  v26 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SequenceList"));
  if (!v26)
  {
    v31 = v36;
    if (!v36)
    {
      v8 = 0;
      Mutable = 0;
      v30 = 0;
      goto LABEL_50;
    }
LABEL_36:
    v32 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v32)
    {
      v33 = v32;
      CFDictionaryGetValue(*(CFDictionaryRef *)(v37 + 152), (const void *)key_4);
      v30 = FigCFDictionarySetInt();
      CFDictionarySetValue(v33, CFSTR("ImageList"), theArray);
      if (v46)
        CFDictionarySetValue(v33, CFSTR("SequenceList"), v46);
      if (v47)
        CFDictionarySetValue(v33, CFSTR("GroupList"), v47);
      v8 = 0;
      Mutable = 0;
      *v31 = v33;
      goto LABEL_50;
    }
    v8 = 0;
    Mutable = 0;
    goto LABEL_74;
  }
  v27 = v26;
  v28 = CFGetTypeID(v26);
  if (v28 == CFArrayGetTypeID())
  {
    v25 = _copyMainAndAuxImageSamplesIfNeeded(v37);
    if (!(_DWORD)v25)
    {
      v29 = _addGenericListToWriter(v19, (uint64_t (*)(uint64_t, CFIndex, const void *, void **))_addSequenceDescriptionToWriter, v27, &v46);
      v30 = v29;
      v8 = 0;
      v31 = v36;
      if (!v36)
      {
        Mutable = 0;
        goto LABEL_50;
      }
      Mutable = 0;
      if ((_DWORD)v29)
        goto LABEL_50;
      goto LABEL_36;
    }
LABEL_65:
    v30 = v25;
    v8 = 0;
    Mutable = 0;
  }
  else
  {
    v8 = 0;
    Mutable = 0;
    v30 = 4294950306;
  }
LABEL_50:
  CFRelease(v41);
  CFRelease(MutableCopy);
LABEL_51:
  if (v48)
    CFRelease(v48);
  if (v47)
    CFRelease(v47);
  if (v46)
    CFRelease(v46);
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  if (theArray)
    CFRelease(theArray);
  return v30;
}

uint64_t _copyPictureReaderToImageDescription(uint64_t a1, const void *a2, int a3, uint64_t a4, __CFDictionary *a5)
{
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v17;
  const void *v18;
  const void *v19;
  uint64_t HEIFOrientation;
  CFAllocatorRef v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t *v24;
  CFDictionaryRef Extensions;
  const __CFDictionary *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, CFAllocatorRef, const __CFArray **);
  BOOL v29;
  int v30;
  uint64_t (*v31)(const void *, CFTypeRef *);
  uint64_t v32;
  uint64_t CMBaseObject;
  uint64_t (*v34)(uint64_t, _QWORD, uint64_t, void **);
  uint64_t (*v35)(const void *, uint64_t *);
  uint64_t (*v36)(const void *, uint64_t *);
  uint64_t (*v37)(const void *, uint64_t *);
  uint64_t (*v38)(const void *, uint64_t *);
  _QWORD *v39;
  uint64_t (*v40)(const void *, uint64_t *);
  uint64_t (*v41)(const void *, uint64_t *);
  int v42;
  __CFArray *Mutable;
  __CFArray *v44;
  uint64_t v46;
  uint64_t v47;
  const CFDictionaryKeyCallBacks *v48;
  const CFDictionaryValueCallBacks *v49;
  uint64_t (*v50)(const void *, uint64_t, CFTypeRef *);
  uint64_t v51;
  CFMutableDictionaryRef v52;
  uint64_t v53;
  const CFDictionaryKeyCallBacks *v54;
  const CFDictionaryValueCallBacks *v55;
  uint64_t (*v56)(const void *, uint64_t, CFTypeRef *);
  uint64_t v57;
  CFMutableDictionaryRef v58;
  int v59;
  uint64_t v60;
  const __CFAllocator *v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const void *v64;
  int Int32IfPresent;
  const __CFArray *v66;
  const __CFAllocator *v67;
  __CFDictionary *v68;
  const __CFAllocator *v69;
  __CFDictionary *v70;
  const void *v71;
  __CFDictionary *v72;
  int v73;
  int v74;
  int v75;
  const __CFAllocator *v76;
  const __CFAllocator *v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int valuePtr;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CFNumberRef number;
  void *value;
  CFTypeRef v91;
  CFTypeRef v92;
  int v93;
  int v94;
  CFTypeRef cf[2];
  __int128 v96;
  CFTypeRef v97;
  CFTypeRef v98;
  __CFArray *v99;
  __CFDictionary *v100;
  const __CFArray *v101;
  CFTypeRef v102[3];

  value = 0;
  v91 = 0;
  v88 = 0;
  number = 0;
  v86 = 0;
  v87 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (!v12)
    goto LABEL_63;
  v13 = v12(FigBaseObject, *MEMORY[0x1E0CC4B80], v10, &number);
  if ((_DWORD)v13)
    goto LABEL_60;
  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
  {
    Mutable = 0;
    v44 = 0;
    HEIFOrientation = 4294950194;
    goto LABEL_64;
  }
  if (valuePtr == 1953325424 || valuePtr == 1768187246)
  {
    cf[0] = 0;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = FigPictureReaderGetFigBaseObject();
    v16 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (v16)
    {
      v17 = v16(v15, *MEMORY[0x1E0CC4B28], v14, cf);
      if ((_DWORD)v17)
      {
        HEIFOrientation = v17;
      }
      else
      {
        v18 = (const void *)*MEMORY[0x1E0CC4B38];
        v19 = (const void *)FigCFDictionaryGetValue();
        if (v19)
          CFDictionarySetValue(a5, v18, v19);
        HEIFOrientation = 0;
      }
    }
    else
    {
      HEIFOrientation = 4294954514;
    }
    if (cf[0])
      CFRelease(cf[0]);
    if ((_DWORD)HEIFOrientation)
      goto LABEL_61;
  }
  _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E0CC4B70], CFSTR("ItemID"), a5);
  _copyPropertyFromReaderToDictionary(a2, (uint64_t)CFSTR("CodecType"), CFSTR("CodecType"), a5);
  cf[0] = 0;
  v101 = 0;
  v102[0] = 0;
  v21 = CFGetAllocator(a2);
  v22 = FigPictureReaderGetFigBaseObject();
  v23 = *(unsigned int (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  v24 = (uint64_t *)MEMORY[0x1E0CC4BC0];
  if (v23)
  {
    if (!v23(v22, *MEMORY[0x1E0CC4B58], v21, cf))
    {
      Extensions = CMFormatDescriptionGetExtensions((CMFormatDescriptionRef)cf[0]);
      if (cf[0])
      {
        v26 = Extensions;
        v27 = FigPictureReaderGetFigBaseObject();
        v28 = *(unsigned int (**)(uint64_t, uint64_t, CFAllocatorRef, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
        if (v28 && !v28(v27, *v24, v21, &v101))
          v29 = CFArrayGetCount(v101) == 1;
        else
          v29 = a3 == 2;
        v30 = v29;
        if (!CMPhotoCreateColorSpaceFromPixelBufferAttachments(v26, v30, (CGColorSpace **)v102, 1, 1)
          && v102[0])
        {
          CFDictionarySetValue(a5, CFSTR("ColorSpace"), v102[0]);
        }
      }
    }
  }
  if (v101)
    CFRelease(v101);
  if (cf[0])
    CFRelease(cf[0]);
  if (v102[0])
    CFRelease(v102[0]);
  v31 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v31)
    goto LABEL_63;
  v13 = v31(a2, &v91);
  if ((_DWORD)v13)
    goto LABEL_60;
  v32 = *(_QWORD *)(a1 + 8);
  CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
  v34 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v34)
    goto LABEL_63;
  v13 = v34(CMBaseObject, *MEMORY[0x1E0CC4C30], v32, &value);
  if ((_DWORD)v13)
  {
LABEL_60:
    HEIFOrientation = v13;
LABEL_61:
    Mutable = 0;
LABEL_62:
    v44 = 0;
    goto LABEL_64;
  }
  if (!value)
  {
    Mutable = 0;
    v44 = 0;
    HEIFOrientation = 4294950304;
    goto LABEL_64;
  }
  CFDictionarySetValue(a5, CFSTR("TileDimensions"), value);
  LODWORD(cf[0]) = 1;
  LOBYTE(v102[0]) = 0;
  HEIFOrientation = CMPhotoPictureReaderGetHEIFOrientation(a2, v102, (int *)cf);
  if (!(_DWORD)HEIFOrientation && LOBYTE(v102[0]))
    HEIFOrientation = CMPhotoCFDictionarySetInt(a5, CFSTR("Orientation"), (int)cf[0]);
  if ((_DWORD)HEIFOrientation)
    goto LABEL_61;
  _copyPropertyFromReaderToDictionary(a2, *v24, CFSTR("PixelInformation"), a5);
  if (a3 == 2)
  {
    _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E0CC4B18], CFSTR("AuxiliaryImageType"), a5);
    _copyPropertyFromReaderToDictionary(a2, *MEMORY[0x1E0CC4B10], CFSTR("AuxiliaryImageSubType"), a5);
    goto LABEL_58;
  }
  if (a3)
  {
    v42 = 0;
    goto LABEL_76;
  }
  v35 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v35)
  {
LABEL_63:
    Mutable = 0;
    v44 = 0;
    HEIFOrientation = 4294954514;
    goto LABEL_64;
  }
  v13 = v35(a2, &v88);
  if ((_DWORD)v13)
    goto LABEL_60;
  v36 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v36)
    goto LABEL_63;
  v13 = v36(a2, &v87);
  if ((_DWORD)v13)
    goto LABEL_60;
  v37 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v37)
    goto LABEL_63;
  v13 = v37(a2, &v86);
  if ((_DWORD)v13)
    goto LABEL_60;
  v38 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v38)
    goto LABEL_63;
  v13 = v38(a2, &v84);
  if ((_DWORD)v13)
    goto LABEL_60;
  v39 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v39 < 2uLL)
    goto LABEL_63;
  v40 = (uint64_t (*)(const void *, uint64_t *))v39[13];
  if (!v40)
    goto LABEL_63;
  v13 = v40(a2, &v83);
  if ((_DWORD)v13)
    goto LABEL_60;
LABEL_58:
  v41 = *(uint64_t (**)(const void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v41)
    goto LABEL_63;
  v42 = a3 == 2;
  v13 = v41(a2, &v85);
  if ((_DWORD)v13)
    goto LABEL_60;
LABEL_76:
  if (*(_BYTE *)(a1 + 49))
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
      v44 = 0;
LABEL_185:
      HEIFOrientation = 4294950305;
      goto LABEL_64;
    }
    if (v88 >= 1)
    {
      v79 = v42;
      v46 = a4;
      v47 = 0;
      v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v49 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        cf[0] = 0;
        v50 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 24);
        if (v50)
        {
          v51 = v50(a2, v47, cf);
          if ((_DWORD)v51)
          {
            HEIFOrientation = v51;
            v52 = 0;
          }
          else
          {
            v52 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, v48, v49);
            if (v52)
            {
              HEIFOrientation = _copyPictureReaderToImageDescription(a1, cf[0], 1, v47, v52);
              if (!(_DWORD)HEIFOrientation)
                CFArrayAppendValue(Mutable, v52);
            }
            else
            {
              HEIFOrientation = 4294950305;
            }
          }
        }
        else
        {
          v52 = 0;
          HEIFOrientation = 4294954514;
        }
        if (cf[0])
          CFRelease(cf[0]);
        if (v52)
          CFRelease(v52);
        ++v47;
      }
      while (v47 < v88);
      a4 = v46;
      v42 = v79;
      if ((_DWORD)HEIFOrientation)
        goto LABEL_62;
    }
    if (CFArrayGetCount(Mutable) >= 1)
      CFDictionarySetValue(a5, CFSTR("ThumbnailImage"), Mutable);
  }
  if (*(_BYTE *)(a1 + 50))
  {
    v44 = 0;
    goto LABEL_120;
  }
  v44 = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B378]);
  if (!v44)
    goto LABEL_185;
  if (v87 < 1)
    goto LABEL_118;
  v80 = v42;
  v78 = a4;
  v53 = 0;
  v54 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v55 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  do
  {
    cf[0] = 0;
    v56 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v56)
    {
      v57 = v56(a2, v53, cf);
      if ((_DWORD)v57)
      {
        HEIFOrientation = v57;
        v58 = 0;
      }
      else
      {
        v58 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, v54, v55);
        if (v58)
        {
          HEIFOrientation = _copyPictureReaderToImageDescription(a1, cf[0], 2, v53, v58);
          if (!(_DWORD)HEIFOrientation)
            CFArrayAppendValue(v44, v58);
        }
        else
        {
          HEIFOrientation = 4294950305;
        }
      }
    }
    else
    {
      v58 = 0;
      HEIFOrientation = 4294954514;
    }
    if (cf[0])
      CFRelease(cf[0]);
    if (v58)
      CFRelease(v58);
    ++v53;
  }
  while (v53 < v87);
  a4 = v78;
  v42 = v80;
  if (!(_DWORD)HEIFOrientation)
  {
LABEL_118:
    if (CFArrayGetCount(v44) >= 1)
      CFDictionarySetValue(a5, CFSTR("Auxiliary"), v44);
LABEL_120:
    v59 = *(unsigned __int8 *)(a1 + 48);
    if (*(_BYTE *)(a1 + 48))
    {
LABEL_178:
      if (((v59 != 0) & ~v42) != 0
        || (v60 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v85, 1, a5),
            !(_DWORD)v60))
      {
        v60 = CMPhotoCFDictionarySetInt(a5, CFSTR("ImageHandle"), a4);
      }
      goto LABEL_181;
    }
    v60 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v86, 0, a5);
    if ((_DWORD)v60
      || (v60 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v84, 2, a5),
          (_DWORD)v60)
      || (v81 = v42,
          v60 = _copyMetadataTypeFromReaderToDictionary((uint64_t)a2, *(CFAllocatorRef *)(a1 + 8), v83, 4, a5),
          (_DWORD)v60))
    {
LABEL_181:
      HEIFOrientation = v60;
      goto LABEL_64;
    }
    v61 = *(const __CFAllocator **)(a1 + 8);
    v101 = 0;
    v102[0] = 0;
    v99 = 0;
    v100 = 0;
    v98 = 0;
    v97 = 0;
    v62 = FigPictureReaderGetFigBaseObject();
    v63 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v63)
    {
      if (!v63(v62, *MEMORY[0x1E0CC4BD0], 0, v102))
      {
        *(_OWORD *)cf = 0u;
        v96 = 0u;
        if (!CMPhotoPictureReaderGetImageGeometryFromPictureReader(a2, 0, (unint64_t)cf, 0))
        {
          v64 = (const void *)FigCFDictionaryGetValue();
          if (v64)
            v64 = CFRetain(v64);
          v101 = (const __CFArray *)v64;
          v94 = 0;
          Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
          v66 = v101;
          if (v101 || !Int32IfPresent)
          {
LABEL_134:
            if (v66)
            {
              v67 = CFGetAllocator(a2);
              v68 = CFDictionaryCreateMutable(v67, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!v68)
                goto LABEL_160;
              if (v99)
              {
                CFRelease(v99);
                v99 = 0;
              }
              v69 = CFGetAllocator(a2);
              if (CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(v69, v101, v96, *((uint64_t *)&v96 + 1), 0, &v99))
              {
LABEL_160:
                v70 = 0;
                goto LABEL_161;
              }
              CFDictionarySetValue(v68, CFSTR("Intrinsics_Matrix"), v99);
              CFDictionarySetValue(v68, CFSTR("Intrinsics_Storage"), v101);
              CFDictionaryAddValue(a5, CFSTR("Intrinsics"), v68);
            }
            else
            {
              v68 = 0;
            }
            v71 = (const void *)FigCFDictionaryGetValue();
            if (v71)
              v72 = (__CFDictionary *)CFRetain(v71);
            else
              v72 = 0;
            v100 = v72;
            v93 = 0;
            v73 = FigCFDictionaryGetInt32IfPresent();
            if (v72 || !v73)
            {
              if (v72)
              {
LABEL_157:
                v76 = CFGetAllocator(a2);
                v70 = CFDictionaryCreateMutable(v76, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v70)
                {
                  v77 = CFGetAllocator(a2);
                  if (!_createPositionAndRotationFromFigExtrinsics(v77, v100, &v98, &v97, 0, 0))
                  {
                    CFDictionarySetValue(v70, CFSTR("Extrinsics_Position"), v98);
                    CFDictionarySetValue(v70, CFSTR("Extrinsics_Rotation"), v97);
                    CFDictionarySetValue(v70, CFSTR("Extrinsics_Storage"), v100);
                    CFDictionaryAddValue(a5, CFSTR("Extrinsics"), v70);
                  }
                }
                goto LABEL_161;
              }
            }
            else
            {
              if (a4)
                v74 = v93;
              else
                v74 = 0;
              v92 = 0;
              if (!CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(v61, v74, 0, 0, (__CFArray **)&v92))
              {
                v75 = CMPhotoCreateFigExtrinsicsDictFromExtrinsics(v61, (unint64_t)v92, 0, 0, &v100);
                if (v92)
                  CFRelease(v92);
                v70 = 0;
                if (v75 || !v100)
                  goto LABEL_161;
                goto LABEL_157;
              }
            }
            goto LABEL_160;
          }
          if (!CMPhotoCreateIntrinsicsArrayFromHorizontalFOV(v61, v96, *((unint64_t *)&v96 + 1), v94, &v99)&& !CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix((int)v61, v99, v96, *((uint64_t *)&v96 + 1), (uint64_t)&v101))
          {
            v66 = v101;
            goto LABEL_134;
          }
        }
      }
    }
    v70 = 0;
    v68 = 0;
LABEL_161:
    if (v99)
      CFRelease(v99);
    if (v98)
      CFRelease(v98);
    if (v97)
      CFRelease(v97);
    if (v101)
      CFRelease(v101);
    if (v100)
      CFRelease(v100);
    if (v68)
      CFRelease(v68);
    if (v70)
      CFRelease(v70);
    if (v102[0])
      CFRelease(v102[0]);
    v59 = *(unsigned __int8 *)(a1 + 48);
    v42 = v81;
    goto LABEL_178;
  }
LABEL_64:
  if (number)
    CFRelease(number);
  if (v91)
    CFRelease(v91);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (v44)
    CFRelease(v44);
  return HEIFOrientation;
}

void _copyPropertyFromReaderToDictionary(const void *a1, uint64_t a2, const void *a3, __CFDictionary *a4)
{
  CFAllocatorRef v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, uint64_t, CFAllocatorRef, void **);
  int v10;
  void *v11;
  void *value;

  value = 0;
  v7 = CFGetAllocator(a1);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, CFAllocatorRef, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v9)
  {
    v10 = v9(FigBaseObject, a2, v7, &value);
    v11 = value;
    if (!v10)
    {
      if (!value)
        return;
      CFDictionarySetValue(a4, a3, value);
      v11 = value;
    }
    if (v11)
      CFRelease(v11);
  }
}

uint64_t _copyMetadataTypeFromReaderToDictionary(uint64_t a1, CFAllocatorRef allocator, uint64_t a3, int a4, __CFDictionary *a5)
{
  __CFArray *Mutable;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, void *, CFTypeRef *);
  _QWORD *v16;
  uint64_t *v17;
  void **v18;
  void **v19;
  void *v20;
  void *p_value;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef *p_cf;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFMutableDictionaryRef v30;
  CFMutableDictionaryRef v31;
  void *v32;
  void *v33;
  __CFString **v34;
  CFTypeRef *v36;
  __CFDictionary *theDict;
  int v38;
  uint64_t v39;
  CFTypeRef v40;
  void *v41;
  void *v42;
  CFTypeRef cf;
  CFTypeRef v44;
  void *value;
  __CFData *v46;

  v46 = 0;
  v44 = 0;
  value = 0;
  v42 = 0;
  cf = 0;
  v40 = 0;
  v41 = 0;
  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    theDict = a5;
    if (a3 >= 1)
    {
      v11 = 0;
      while (1)
      {
        v12 = 0;
        v39 = 0;
        v38 = 0;
        v13 = 0;
        switch(a4)
        {
          case 0:
            v14 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
            if (*v14 >= 3uLL
              && (v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, void *, CFTypeRef *))v14[15]) != 0)
            {
              v36 = &v40;
            }
            else
            {
              v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (!v15)
                goto LABEL_53;
            }
            v17 = (uint64_t *)&v38;
            v18 = (void **)&v39;
            v19 = &v42;
            v20 = &v41;
            p_cf = &cf;
            v24 = a1;
            v25 = v11;
            p_value = 0;
            goto LABEL_19;
          case 1:
            v16 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
            if (*v16 >= 3uLL
              && (v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, void *, CFTypeRef *))v16[16]) != 0)
            {
              v17 = &v39;
              v18 = &v42;
              v19 = &v41;
              v20 = &cf;
              p_value = &v40;
LABEL_16:
              v24 = a1;
              v25 = v11;
              p_cf = 0;
LABEL_19:
              v27 = v15(v24, v25, v17, v18, v19, v20, p_cf, p_value, v36);
            }
            else
            {
              v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
              if (!v22)
              {
LABEL_53:
                v28 = 4294954514;
                goto LABEL_62;
              }
LABEL_21:
              v27 = v22(a1, v11, &v39, &v42, &v41, &cf, 0);
            }
            v28 = v27;
            if ((_DWORD)v27)
              goto LABEL_62;
            v13 = v39;
            v12 = v40;
LABEL_24:
            v29 = CMPhotoPictureReaderCreateContiguousDataFromChunks((uint64_t)allocator, v13, (uint64_t)v42, (uint64_t)v41, (uint64_t)cf, 0, (uint64_t)v12, 0, &v46);
            if ((_DWORD)v29)
            {
              v28 = v29;
              goto LABEL_62;
            }
            if (!v46)
            {
              v28 = 4294950194;
              goto LABEL_62;
            }
            if (a4 == 4)
            {
              v30 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!v30)
                goto LABEL_75;
              v31 = v30;
              CFArrayAppendValue(Mutable, v30);
              CFRelease(v31);
              CFDictionarySetValue(v31, CFSTR("Data"), v46);
              if (value)
                CFDictionarySetValue(v31, CFSTR("URI"), value);
              if (v44)
                CFDictionarySetValue(v31, CFSTR("Name"), v44);
            }
            else
            {
              CFArrayAppendValue(Mutable, v46);
            }
            v32 = v42;
            if (v42)
            {
              v42 = 0;
              free(v32);
            }
            v33 = v41;
            if (v41)
            {
              v41 = 0;
              free(v33);
            }
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
            if (v46)
            {
              CFRelease(v46);
              v46 = 0;
            }
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (v44)
            {
              CFRelease(v44);
              v44 = 0;
            }
            if (v40)
            {
              CFRelease(v40);
              v40 = 0;
            }
            if (a3 == ++v11)
              goto LABEL_50;
            break;
          case 2:
            v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
            if (!v22)
              goto LABEL_53;
            goto LABEL_21;
          case 3:
            goto LABEL_24;
          case 4:
            v23 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
            if (*v23 < 2uLL)
              goto LABEL_53;
            v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *, void **, void **, void *, CFTypeRef *, void *, CFTypeRef *))v23[14];
            if (!v15)
              goto LABEL_53;
            v36 = &v44;
            v17 = &v39;
            v18 = &v42;
            v19 = &v41;
            v20 = &cf;
            p_value = &value;
            goto LABEL_16;
          default:
            v13 = 0;
            goto LABEL_24;
        }
      }
    }
LABEL_50:
    v28 = 0;
    switch(a4)
    {
      case 0:
        if (CFArrayGetCount(Mutable) < 1)
          goto LABEL_61;
        v34 = &kCMPhotoCompressionContainerDescription_EXIFMetadata;
        break;
      case 1:
        if (CFArrayGetCount(Mutable) < 1)
          goto LABEL_61;
        v34 = &kCMPhotoCompressionContainerDescription_XMPMetadata;
        break;
      case 2:
        if (CFArrayGetCount(Mutable) < 1)
          goto LABEL_61;
        v34 = &kCMPhotoCompressionContainerDescription_DebugMetadata;
        break;
      case 4:
        if (CFArrayGetCount(Mutable) < 1)
          goto LABEL_61;
        v34 = &kCMPhotoCompressionContainerDescription_CustomMetadata;
        break;
      default:
        goto LABEL_62;
    }
    CFDictionarySetValue(theDict, *v34, Mutable);
LABEL_61:
    v28 = 0;
  }
  else
  {
LABEL_75:
    v28 = 4294950305;
  }
LABEL_62:
  free(v42);
  free(v41);
  if (cf)
    CFRelease(cf);
  if (v46)
    CFRelease(v46);
  if (Mutable)
    CFRelease(Mutable);
  if (value)
    CFRelease(value);
  if (v44)
    CFRelease(v44);
  return v28;
}

uint64_t _createPositionAndRotationFromFigExtrinsics(const __CFAllocator *a1, CFDictionaryRef theDict, CFTypeRef *a3, CFTypeRef *a4, BOOL *a5, BOOL *a6)
{
  uint64_t RotationMatrixFromQuaternionArray;
  const __CFArray *Value;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t ExtrinsicsPositionArrayFromExtrinsicsValues;
  const void *v20;
  const void *v21;
  int v22;
  CFTypeRef v23;
  CFTypeRef cf;
  CFTypeRef v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v26 = 0;
  v28 = 0;
  v27 = 0;
  RotationMatrixFromQuaternionArray = 4294950306;
  if (a3 && a4)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CC3F20]);
    if (Value && CFArrayGetCount(Value) == 3)
    {
      v14 = 0;
      v15 = &v27;
      do
      {
        if (!FigCFArrayGetInt32AtIndex())
          goto LABEL_11;
        ++v14;
        v15 = (uint64_t *)((char *)v15 + 4);
      }
      while (v14 != 3);
      v16 = v27;
      if (a5)
      {
        v17 = HIDWORD(v27);
        if (v27)
          v18 = 0;
        else
          v18 = v28 == 0;
        *a5 = v18;
      }
      else
      {
        v17 = HIDWORD(v27);
      }
      ExtrinsicsPositionArrayFromExtrinsicsValues = CMPhotoCreateExtrinsicsPositionArrayFromExtrinsicsValues(a1, v16, v17, v28, (__CFArray **)&v26);
      if ((_DWORD)ExtrinsicsPositionArrayFromExtrinsicsValues)
      {
        RotationMatrixFromQuaternionArray = ExtrinsicsPositionArrayFromExtrinsicsValues;
        v23 = v26;
LABEL_27:
        if (v23)
          CFRelease(v23);
        goto LABEL_12;
      }
      v20 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CC3F30]);
      if (v20)
      {
        v21 = v20;
        v22 = 1;
        if (!a6)
          goto LABEL_21;
      }
      else
      {
        v21 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CC3F28]);
        v22 = 0;
        if (!a6)
        {
LABEL_21:
          RotationMatrixFromQuaternionArray = CMPhotoCreateRotationMatrixFromQuaternionArray(a1, v21, v22, (__CFArray **)&cf);
          v23 = v26;
          if (!(_DWORD)RotationMatrixFromQuaternionArray)
          {
            *a3 = v26;
            *a4 = cf;
            return RotationMatrixFromQuaternionArray;
          }
          goto LABEL_27;
        }
      }
      *a6 = v21 == 0;
      goto LABEL_21;
    }
LABEL_11:
    RotationMatrixFromQuaternionArray = 4294950304;
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
  return RotationMatrixFromQuaternionArray;
}

uint64_t _hasTrackReferenceOfType(const __CFDictionary *a1, const void *a2, int a3, char *a4)
{
  const __CFArray *Value;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  char v10;
  uint64_t result;

  if (!a1)
    goto LABEL_9;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value)
    goto LABEL_9;
  Count = CFArrayGetCount(Value);
  v8 = Count;
  if ((Count & 1) != 0)
    return FigSignalErrorAt();
  if (Count >= 1)
  {
    v9 = 0;
    while (FigCFArrayGetInt32AtIndex())
    {
      if (!a3)
      {
        v10 = 1;
        goto LABEL_10;
      }
      v9 += 2;
      if (v9 >= v8)
        goto LABEL_9;
    }
    return 4294950304;
  }
  else
  {
LABEL_9:
    v10 = 0;
LABEL_10:
    result = 0;
    if (a4)
      *a4 = v10;
  }
  return result;
}

uint64_t _copyTrackReferencesOfType(const __CFDictionary *a1, const void *a2, int a3, const __CFArray **a4)
{
  const __CFArray *Value;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  const __CFArray *Mutable;
  const __CFAllocator *v11;
  uint64_t v12;
  const CFArrayCallBacks *v13;
  const void *ValueAtIndex;
  uint64_t v15;

  if (!a1)
    return 4294950303;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 4294950303;
  v7 = Value;
  Count = CFArrayGetCount(Value);
  if (Count < 1)
    return 4294950303;
  v9 = Count;
  if ((Count & 1) != 0)
    return FigSignalErrorAt();
  if ((unint64_t)Count < 2)
    return 4294950303;
  Mutable = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v12 = 1;
  v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  while (1)
  {
    if (!FigCFArrayGetInt32AtIndex())
    {
      v15 = 4294950304;
      if (!Mutable)
        return v15;
      goto LABEL_20;
    }
    if (!a3)
      break;
LABEL_12:
    v12 += 2;
    if (v12 >= v9)
    {
      if (!Mutable)
        return 4294950303;
      if (CFArrayGetCount(Mutable) < 1)
      {
        v15 = 4294950303;
      }
      else
      {
        v15 = 0;
        if (a4)
        {
          *a4 = Mutable;
          return v15;
        }
      }
LABEL_20:
      CFRelease(Mutable);
      return v15;
    }
  }
  if (Mutable || (Mutable = CFArrayCreateMutable(v11, 0, v13)) != 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v7, v12 ^ 1);
    CFArrayAppendValue(Mutable, ValueAtIndex);
    goto LABEL_12;
  }
  return 4294950305;
}

uint64_t _createSequenceReader_0(uint64_t a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  char *v6;
  char *v7;
  CFTypeRef v8;
  CFTypeRef *v9;
  uint64_t (*v10)(const void *, char *);
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, char *);
  uint64_t (*v14)(const void *, char *, char *);
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;

  v6 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10200400824DF26uLL);
  if (!v6)
    return 4294950305;
  v7 = v6;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  *(_QWORD *)v7 = v8;
  v9 = (CFTypeRef *)(v7 + 8);
  v10 = *(uint64_t (**)(const void *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10)
    goto LABEL_14;
  v11 = v10(a3, v7 + 8);
  if ((_DWORD)v11)
    goto LABEL_26;
  v12 = *v9;
  v13 = *(uint64_t (**)(CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v13)
  {
LABEL_14:
    v16 = 4294954514;
    goto LABEL_15;
  }
  v11 = v13(v12, v7 + 16);
  if ((_DWORD)v11
    || (*((_QWORD *)v7 + 4) = 0, v11 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(), (_DWORD)v11))
  {
LABEL_26:
    v16 = v11;
    goto LABEL_15;
  }
  v14 = *(uint64_t (**)(const void *, char *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
    goto LABEL_14;
  v15 = v14(a3, v7 + 44, v7 + 40);
  v16 = v15;
  if (a4 && !(_DWORD)v15)
  {
    *a4 = v7;
    return v16;
  }
LABEL_15:
  if (*v9)
    CFRelease(*v9);
  v17 = (const void *)*((_QWORD *)v7 + 2);
  if (v17)
    CFRelease(v17);
  v18 = (const void *)*((_QWORD *)v7 + 3);
  if (v18)
    CFRelease(v18);
  if (*(_QWORD *)v7)
    CFRelease(*(CFTypeRef *)v7);
  free(v7);
  return v16;
}

uint64_t _createReferenceSequenceReaders(const __CFAllocator *a1, uint64_t a2, const __CFArray *a3, int a4, __CFArray **a5)
{
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t v16;
  uint64_t v17;
  void *value;
  int v20;
  unsigned int v21;
  CFTypeRef cf;

  cf = 0;
  Mutable = CFArrayCreateMutable(a1, 0, 0);
  if (!Mutable)
    return 4294950305;
  v11 = Mutable;
  v12 = 0;
  if (!a3)
    goto LABEL_4;
LABEL_3:
  for (i = CFArrayGetCount(a3); v12 < i; i = 0)
  {
    v21 = 0;
    if (!FigCFArrayGetInt32AtIndex())
    {
      v17 = 4294950304;
      goto LABEL_19;
    }
    v20 = 0;
    v14 = v21;
    v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 56);
    if (!v15)
    {
      v17 = 4294954514;
      goto LABEL_19;
    }
    v16 = v15(a2, v14, &cf, &v20);
    if ((_DWORD)v16)
    {
LABEL_24:
      v17 = v16;
      goto LABEL_19;
    }
    if (v20 == a4)
    {
      value = 0;
      v16 = _createSequenceReader_0((uint64_t)a1, a2, cf, &value);
      if ((_DWORD)v16)
        goto LABEL_24;
      CFArrayAppendValue(v11, value);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    ++v12;
    if (a3)
      goto LABEL_3;
LABEL_4:
    ;
  }
  v17 = 0;
  if (a5)
  {
    *a5 = v11;
    goto LABEL_20;
  }
LABEL_19:
  CFRelease(v11);
LABEL_20:
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t _moveCursorToPosition_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t *);
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0)
    return FigSignalErrorAt();
  v4 = a2 - v2;
  if (a2 == v2)
    return 0;
  v9 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v8)
    return 4294954514;
  result = v8(v7, v4, &v9);
  if (!(_DWORD)result)
  {
    if (v9 == v4)
    {
      result = 0;
      *(_QWORD *)(a1 + 32) = a2;
    }
    else
    {
      return 4294950194;
    }
  }
  return result;
}

uint64_t _createReferenceSequencesDescription(const __CFAllocator *a1, CFArrayRef theArray, CMTime *a3, __CFArray **a4)
{
  __CFArray *v7;
  CFIndex v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  uint64_t v15;
  CMTime v18;
  BOOL v19;

  v7 = 0;
  v8 = 0;
  v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); v8 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
    v19 = 0;
    v18 = *a3;
    v13 = _moveCursorToPresentationTime((uint64_t)ValueAtIndex, &v18, &v19);
    if ((_DWORD)v13)
    {
      v15 = v13;
      Mutable = 0;
      goto LABEL_16;
    }
    if (v19)
    {
      Mutable = CFDictionaryCreateMutable(a1, 0, v9, v10);
      if (!Mutable
        || (FigCFDictionarySetInt(), !v7) && (v7 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378])) == 0)
      {
        v15 = 4294950305;
        goto LABEL_16;
      }
      CFArrayAppendValue(v7, Mutable);
      CFRelease(Mutable);
    }
    ++v8;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  if (a4)
  {
    v15 = 0;
    *a4 = v7;
    return v15;
  }
  Mutable = 0;
  v15 = 0;
LABEL_16:
  if (v7)
    CFRelease(v7);
  if (Mutable)
    CFRelease(Mutable);
  return v15;
}

uint64_t _moveCursorToPresentationTime(uint64_t a1, CMTime *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, CMTime *);
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, CMTime *);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, CMTime *);
  int32_t v13;
  CMTime v14;
  CMTime time2;
  CMTime v16;
  CMTime time1;

  memset(&v16, 0, sizeof(v16));
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v7)
    return 4294954514;
  result = v7(v6, &v16);
  if ((_DWORD)result)
    return result;
  time1 = *a2;
  time2 = v16;
  if (!CMTimeCompare(&time1, &time2))
  {
LABEL_10:
    time1 = *a2;
    time2 = v16;
    v13 = CMTimeCompare(&time1, &time2);
    result = 0;
    *a3 = v13 == 0;
    return result;
  }
  v9 = *(_QWORD *)(a1 + 16);
  time1 = *a2;
  time2 = v16;
  CMTimeSubtract(&v14, &time1, &time2);
  v10 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (!v10)
    return 4294954514;
  time1 = v14;
  result = v10(v9, &time1);
  if (!(_DWORD)result || (_DWORD)result == -12840)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(uint64_t (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v12)
    {
      result = v12(v11, &v16);
      if ((_DWORD)result)
        return result;
      *(_QWORD *)(a1 + 32) = -1;
      goto LABEL_10;
    }
    return 4294954514;
  }
  return result;
}

uint64_t _addGroupsForCurrentPosition()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  v2 = 0;
  v3 = &v2;
  v4 = 0x2000000000;
  v5 = 0;
  FigCFArrayApplyBlock();
  v0 = *((unsigned int *)v3 + 6);
  _Block_object_dispose(&v2, 8);
  return v0;
}

uint64_t _copyImageDescriptionToWriter(uint64_t a1, const __CFDictionary *a2, CFIndex a3, int a4, uint64_t a5, int a6, const __CFDictionary *a7, const __CFDictionary *a8, __CFArray *a9, void **a10)
{
  const __CFDictionary *v10;
  __CFDictionary *Mutable;
  unsigned int v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  const __CFArray *v21;
  const __CFArray *v22;
  __CFDictionary *v23;
  const __CFArray *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, CFTypeRef *, _QWORD);
  CFTypeRef v29;
  uint64_t v30;
  CFTypeRef v31;
  uint64_t (*v32)(CFTypeRef, uint64_t, CFTypeRef *);
  uint64_t v33;
  uint64_t v34;
  uint64_t FigBaseObject;
  uint64_t (*v36)(uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, _QWORD, uint64_t, void **);
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, _QWORD, uint64_t, const __CFNumber **);
  uint64_t v44;
  const __CFDictionary *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  const __CFArray *v50;
  const __CFArray *v51;
  CFTypeID v52;
  const __CFArray *v53;
  CFIndex v54;
  const void *v55;
  int v56;
  const __CFArray *v57;
  const void *ValueAtIndex;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, const __CFNumber **);
  uint64_t appended;
  unint64_t v63;
  int v64;
  __CFDictionary *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __CFDictionary *v70;
  uint64_t OrientationTransformsForImage;
  int v72;
  uint64_t (*v73)(const void *, CFTypeRef *);
  uint64_t v74;
  uint64_t CMBaseObject;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t, const void **);
  uint64_t v77;
  __CFDictionary *v78;
  __CFDictionary *v79;
  void *v80;
  __CFArray *v81;
  CFMutableDictionaryRef v82;
  CFIndex v83;
  void *v84;
  const void *v85;
  CGColorSpace *v86;
  uint64_t PropertiesForImage;
  uint64_t v88;
  __CFArray *MutableCopy;
  __CFArray *v90;
  uint64_t v91;
  CFIndex v92;
  CFIndex v93;
  const __CFDictionary *v94;
  uint64_t v95;
  CFIndex v96;
  CFIndex v97;
  const __CFDictionary *v98;
  uint64_t v99;
  CFMutableDictionaryRef v101;
  uint64_t v102;
  CFIndex v103;
  const void **v104;
  int *v105;
  const __CFArray *v106;
  const __CFArray *v107;
  const __CFData *v108;
  const __CFData *v109;
  CFTypeID v110;
  CFIndex Length;
  CFTypeID v112;
  CFIndex v113;
  int Int32IfPresent;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  CFIndex Count;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t Dimensions;
  uint64_t ItemPropertiesFromIntrinsicsAndExtrinsics;
  uint64_t v126;
  uint64_t v127;
  int v128;
  const void *v129;
  const void *v130;
  uint64_t v131;
  const void *v132;
  const void *v133;
  unsigned int UInt32;
  const __CFArray *v135;
  unint64_t Int32;
  __CFDictionary *v137;
  __CFArray *v138;
  int v139;
  uint64_t v140;
  const void *v141;
  const void *v142;
  const void *v143;
  const void *v144;
  void *key;
  const __CFDictionary *v147;
  void *v148;
  __CFArray *v149;
  const __CFArray *v150;
  __CFDictionary *theDict;
  int v153;
  int v154;
  void *value;
  CFTypeRef v156;
  CFTypeRef v157;
  CFTypeRef cf;
  void *v159;
  unsigned int v160;
  CFTypeRef v161;
  CMFormatDescriptionRef v162[3];
  int valuePtr;
  CFTypeRef v164;
  const __CFNumber *v165;
  const void *v166;
  int v167;
  char v168;
  int v169;
  char v170;
  int v171;
  uint64_t v172;
  __int16 v173;
  CFIndex v174;
  CFTypeRef v175;
  CFTypeRef v176;
  const void *v177;
  int v178;
  const void *v179;
  int v180;
  const void *v181;
  int v182;
  const void *v183;
  int v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v161 = 0;
  v160 = 0;
  cf = 0;
  v159 = (void *)-1;
  v156 = 0;
  v157 = 0;
  value = 0;
  v154 = 0;
  if (!a7)
  {
    Mutable = 0;
    v34 = 4294950304;
    goto LABEL_212;
  }
  v10 = a7;
  Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v34 = 4294950305;
    goto LABEL_212;
  }
  if (!FigCFDictionaryGetIntIfPresent()
    || !CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("CodecType"), &v160)
    || ((v17 = v160, v160 != 1953325424) ? (v18 = v160 == 1768187246) : (v18 = 1),
        v18 ? (v19 = 0) : (v19 = 1),
        a4 && (v19 & 1) == 0))
  {
LABEL_261:
    v20 = FigSignalErrorAt();
LABEL_262:
    v34 = v20;
    goto LABEL_212;
  }
  key = (void *)*MEMORY[0x1E0CC4A80];
  FigCFDictionarySetValueFromKeyInDict();
  v153 = 1;
  if (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("Orientation"), &v153))
  {
    LODWORD(v162[0]) = 0;
    LODWORD(v176) = 0;
    v20 = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(v153, v162, (int *)&v176);
    if ((_DWORD)v20)
      goto LABEL_262;
    v20 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CC4A78], (int)v162[0]);
    if ((_DWORD)v20)
      goto LABEL_262;
    if ((_DWORD)v176 != -1)
    {
      v20 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CC4A40], (int)v176);
      if ((_DWORD)v20)
        goto LABEL_262;
    }
  }
  v148 = (void *)*MEMORY[0x1E0CC4A68];
  FigCFDictionarySetValueFromKeyInDict();
  theDict = Mutable;
  if (!a4)
  {
    v23 = Mutable;
    v21 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("ThumbnailImage"));
    v24 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("Auxiliary"));
    v144 = CFDictionaryGetValue(a2, CFSTR("EXIFMetadata"));
    v143 = CFDictionaryGetValue(a2, CFSTR("DebugMetadata"));
    v142 = CFDictionaryGetValue(a2, CFSTR("CustomMetadata"));
    v25 = CMPhotoCFDictionarySetBoolean(v23, (const void *)*MEMORY[0x1E0CC4A70], a6);
    if ((_DWORD)v25)
      goto LABEL_268;
    v22 = v24;
    goto LABEL_24;
  }
  if (a4 == 2)
  {
    if (FigCFDictionarySetValueFromKeyInDict())
    {
      FigCFDictionarySetValueFromKeyInDict();
      v21 = 0;
      v22 = 0;
      v143 = 0;
      v144 = 0;
      v142 = 0;
LABEL_24:
      v26 = a4 == 2;
      v141 = CFDictionaryGetValue(a2, CFSTR("XMPMetadata"));
      goto LABEL_26;
    }
    goto LABEL_261;
  }
  v26 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v22 = 0;
  v21 = 0;
  v141 = 0;
LABEL_26:
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 16);
  if (!v28)
    goto LABEL_56;
  v150 = v22;
  v25 = v28(v27, a5, &cf, 0);
  if ((_DWORD)v25)
    goto LABEL_268;
  v29 = cf;
  v30 = v154;
  switch(a4)
  {
    case 2:
      v32 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v32)
      {
LABEL_36:
        v33 = v32(v29, v30, &v157);
        goto LABEL_38;
      }
LABEL_56:
      v34 = 4294954514;
      goto LABEL_57;
    case 1:
      v32 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v32)
        goto LABEL_56;
      goto LABEL_36;
    case 0:
      if (cf)
        v31 = CFRetain(cf);
      else
        v31 = 0;
      v157 = v31;
      goto LABEL_42;
  }
  v33 = FigSignalErrorAt();
LABEL_38:
  v34 = v33;
  if ((_DWORD)v33)
    goto LABEL_57;
LABEL_42:
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v36)
    goto LABEL_56;
  v140 = *MEMORY[0x1E0CC4B70];
  v25 = v36(FigBaseObject);
  if ((_DWORD)v25)
    goto LABEL_268;
  Int32 = CMPhotoCFNumberGetInt32(0);
  v37 = CFDictionaryContainsKey(v10, (const void *)Int32);
  if (((v37 != 0) & ~v26) != 0)
  {
    v34 = 4294950300;
    goto LABEL_57;
  }
  v139 = v37;
  v38 = *(_QWORD *)(a1 + 8);
  v39 = FigPictureReaderGetFigBaseObject();
  v40 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v40 && !v40(v39, *MEMORY[0x1E0CC4B50], v38, &value))
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CC4A30], value);
  if (v17 != 1953325424 && v17 != 1768187246)
  {
    v25 = _copyFormatDescriptionFromPictureReader(a1, (uint64_t)v157, (CMFormatDescriptionRef *)&v161);
    if (!(_DWORD)v25)
    {
      if (a4)
      {
        if (a4 == 1)
        {
          v25 = CMPhotoHEIFFileWriterAddThumbnailToImage(*(_QWORD *)a1, theDict, a3, v160, (const opaqueCMFormatDescription *)v161, (uint64_t *)&v159);
          if (!(_DWORD)v25)
          {
            v25 = _copyReaderTilesToWriter((uint64_t)v157, *(const __CFAllocator **)(a1 + 8), *(_QWORD *)a1, (CFIndex)v159);
            v45 = a8;
            if (!(_DWORD)v25)
              goto LABEL_183;
          }
          goto LABEL_268;
        }
        if (v139)
        {
          v80 = (void *)CFDictionaryGetValue(v10, (const void *)Int32);
          v25 = CMPhotoHEIFFileWriterAddAuxiliaryReferenceToImage(*(_QWORD *)a1, (CFIndex)v80, a3);
          if (!(_DWORD)v25)
          {
            v81 = 0;
            v82 = 0;
            v159 = v80;
LABEL_185:
            Mutable = theDict;
LABEL_186:
            v34 = 0;
            if (a10)
              *a10 = v159;
LABEL_188:
            if (v82)
            {
              CFRelease(v82);
              if (!v81)
                goto LABEL_212;
            }
            else
            {
LABEL_210:
              if (!v81)
                goto LABEL_212;
            }
LABEL_211:
            CFRelease(v81);
            goto LABEL_212;
          }
          goto LABEL_268;
        }
        v25 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(*(_QWORD *)a1, theDict, a3, v160, (const opaqueCMFormatDescription *)v161, (uint64_t *)&v159);
        v45 = a8;
        if (!(_DWORD)v25)
        {
LABEL_167:
          CFDictionaryAddValue(v10, (const void *)Int32, v159);
          MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
          if (MutableCopy)
          {
            v90 = MutableCopy;
            CFArrayAppendValue(MutableCopy, v157);
            CMPhotoCFArrayAppendInt32(v90, (int)v159);
            v149 = v90;
            CFArrayAppendValue(a9, v90);
            goto LABEL_192;
          }
          v34 = 4294950305;
          goto LABEL_57;
        }
      }
      else
      {
        v25 = CMPhotoHEIFFileWriterAddImageToCollection(*(_QWORD *)a1, theDict, v160, (const opaqueCMFormatDescription *)v161, (uint64_t *)&v159);
        if (!(_DWORD)v25)
        {
          v45 = a8;
          if (v139)
            goto LABEL_184;
          goto LABEL_167;
        }
      }
    }
LABEL_268:
    v34 = v25;
    goto LABEL_57;
  }
  v164 = 0;
  v165 = 0;
  valuePtr = 0;
  v41 = *(_QWORD *)(a1 + 8);
  v42 = FigPictureReaderGetFigBaseObject();
  v43 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v43)
    goto LABEL_140;
  v44 = v43(v42, *MEMORY[0x1E0CC4B80], v41, &v165);
  if ((_DWORD)v44)
  {
LABEL_282:
    v34 = v44;
    v79 = 0;
    v53 = 0;
    goto LABEL_173;
  }
  if (!CFNumberGetValue(v165, kCFNumberSInt32Type, &valuePtr))
  {
LABEL_270:
    v79 = 0;
    v53 = 0;
    v34 = 4294950194;
    goto LABEL_173;
  }
  v45 = a8;
  if (valuePtr == 1953325424)
  {
    v46 = 1;
  }
  else
  {
    if (valuePtr != 1768187246)
    {
      v79 = 0;
      v53 = 0;
      v34 = 4294950300;
      goto LABEL_174;
    }
    v46 = 2;
  }
  v47 = *(_QWORD *)(a1 + 8);
  v48 = FigPictureReaderGetFigBaseObject();
  v49 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v49)
  {
LABEL_140:
    v79 = 0;
    v53 = 0;
    v34 = 4294954514;
LABEL_173:
    v45 = a8;
    goto LABEL_174;
  }
  v44 = v49(v48, *MEMORY[0x1E0CC4B28], v47, &v164);
  if ((_DWORD)v44)
    goto LABEL_282;
  v50 = (const __CFArray *)FigCFDictionaryGetValue();
  if (!v50)
    goto LABEL_270;
  v51 = v50;
  v52 = CFGetTypeID(v50);
  if (v52 != CFArrayGetTypeID())
    goto LABEL_270;
  v128 = v46;
  if (CFArrayGetCount(v51) < 1)
    goto LABEL_270;
  v147 = v10;
  v131 = a5;
  v53 = (const __CFArray *)FigCFArrayCreateMutableCopy();
  if (!v53)
  {
    v79 = 0;
    v34 = 4294950305;
    v45 = a8;
    goto LABEL_151;
  }
  v135 = v21;
  if (CFArrayGetCount(v51) < 1)
  {
    v83 = 0;
LABEL_152:
    v84 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CC4B38]);
    v176 = 0;
    v85 = CFDictionaryGetValue(a2, v148);
    a5 = v131;
    v10 = v147;
    if (v85 && !CMPhotoCFArrayGetSizeAtIndex(v85, 0, &v176))
    {
      v79 = 0;
      v34 = 4294950306;
      goto LABEL_173;
    }
    v86 = (CGColorSpace *)CFDictionaryGetValue(a2, CFSTR("ColorSpace"));
    v162[0] = 0;
    v162[1] = 0;
    PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*(_QWORD *)a1, v83, v162, 0);
    if ((_DWORD)PropertiesForImage
      || (LODWORD(v175) = 0,
          PropertiesForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*(_QWORD *)a1, v83, 0, &v175, 0, 0), (_DWORD)PropertiesForImage))
    {
      v34 = PropertiesForImage;
      v79 = 0;
      goto LABEL_173;
    }
    if ((_DWORD)v175 == 270 || (_DWORD)v175 == 90)
      *(int8x16_t *)v162 = vextq_s8(*(int8x16_t *)v162, *(int8x16_t *)v162, 8uLL);
    LODWORD(v174) = -1;
    if (CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("Orientation"), &v174))
    {
      v79 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!v79)
      {
        v34 = 4294950305;
        goto LABEL_173;
      }
      if ((_DWORD)v174 != 1)
      {
        v91 = FigSignalErrorAt();
        goto LABEL_171;
      }
      LODWORD(v166) = -1;
      HIDWORD(v172) = -1;
      CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(1, &v166, (int *)&v172 + 1);
      v88 = CMPhotoCFDictionarySetInt(v79, (const void *)*MEMORY[0x1E0CC4A78], (int)v166);
      if ((_DWORD)v88
        || HIDWORD(v172) != -1
        && (v88 = CMPhotoCFDictionarySetInt(v79, (const void *)*MEMORY[0x1E0CC4A40], SHIDWORD(v172)), (_DWORD)v88))
      {
        v34 = v88;
        v45 = a8;
        a5 = v131;
        v10 = v147;
        v21 = v135;
        goto LABEL_174;
      }
    }
    else
    {
      v79 = 0;
    }
    v91 = CMPhotoHEIFFileWriterAddDerivedImageToCollection(*(_QWORD *)a1, (int)v79, v84, v128, (int32_t)v162[0], (int32_t)v162[1], (int)v176, v86, 0, 0, 0, v53, 0, (uint64_t *)&v159);
LABEL_171:
    v34 = v91;
    goto LABEL_173;
  }
  v138 = v53;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v133 = (const void *)*MEMORY[0x1E0CC4A30];
  v132 = (const void *)*MEMORY[0x1E0C9AE40];
  v130 = (const void *)*MEMORY[0x1E0CC4A78];
  v129 = (const void *)*MEMORY[0x1E0CC4A40];
  v127 = *MEMORY[0x1E0CC4C30];
  v126 = *MEMORY[0x1E0CC4BC0];
  while (1)
  {
    if (v165)
    {
      CFRelease(v165);
      v165 = 0;
    }
    v57 = v51;
    ValueAtIndex = CFArrayGetValueAtIndex(v51, v54);
    v59 = *(_QWORD *)(a1 + 8);
    v60 = FigPictureReaderGetFigBaseObject();
    v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v61)
    {
      v79 = 0;
      v34 = 4294954514;
      goto LABEL_150;
    }
    appended = v61(v60, v140, v59, &v165);
    if ((_DWORD)appended)
      break;
    v63 = CMPhotoCFNumberGetInt32(v165);
    if (CFDictionaryContainsKey(v147, (const void *)v63))
    {
      v64 = CFDictionaryGetValue(v147, (const void *)v63);
      goto LABEL_128;
    }
    if (!v54)
    {
      appended = FigSignalErrorAt();
      break;
    }
    v65 = 0;
    v162[0] = 0;
    v175 = 0;
    v176 = 0;
    v64 = -1;
    v174 = -1;
    v34 = 4294950306;
    if (v55 && ValueAtIndex)
    {
      v66 = _copyFormatDescriptionFromPictureReader(a1, (uint64_t)ValueAtIndex, v162);
      if (!(_DWORD)v66)
      {
        v67 = *(_QWORD *)(a1 + 8);
        v68 = FigPictureReaderGetFigBaseObject();
        v65 = *(__CFDictionary **)(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v65)
        {
          v69 = ((uint64_t (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))v65)(v68, CFSTR("CodecType"), v67, &v175);
          if ((_DWORD)v69)
          {
            v34 = v69;
            v65 = 0;
          }
          else
          {
            UInt32 = FigCFNumberGetUInt32();
            v70 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            if (v70)
            {
              v137 = v70;
              CFDictionarySetValue(v70, v133, v132);
              v173 = 0;
              v172 = 0xFFFFFFFFLL;
              OrientationTransformsForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*(_QWORD *)a1, v56, (_BYTE *)&v173 + 1, (_DWORD *)&v172 + 1, &v173, &v172);
              if ((_DWORD)OrientationTransformsForImage)
                goto LABEL_136;
              v171 = 1;
              if (HIBYTE(v173) | v173)
              {
                OrientationTransformsForImage = CMPhotoExifOrientationFromHEIFRotationCCWAndMirroring(SHIDWORD(v172), v172, &v171);
                if ((_DWORD)OrientationTransformsForImage)
                  goto LABEL_136;
              }
              v170 = 0;
              v169 = 1;
              OrientationTransformsForImage = CMPhotoPictureReaderGetHEIFOrientation(v55, &v170, &v169);
              if ((_DWORD)OrientationTransformsForImage)
                goto LABEL_136;
              v168 = 0;
              v167 = 1;
              OrientationTransformsForImage = CMPhotoPictureReaderGetHEIFOrientation(ValueAtIndex, &v168, &v167);
              if ((_DWORD)OrientationTransformsForImage)
                goto LABEL_136;
              if (v169 == v171)
              {
                if (v168)
                {
                  OrientationTransformsForImage = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(v167, (_DWORD *)&v172 + 1, (int *)&v172);
                  if ((_DWORD)OrientationTransformsForImage)
                    goto LABEL_136;
                  v72 = v172 != -1;
                  if (!HIDWORD(v172))
                    goto LABEL_100;
LABEL_99:
                  OrientationTransformsForImage = CMPhotoCFDictionarySetInt(v137, v130, SHIDWORD(v172));
                  if ((_DWORD)OrientationTransformsForImage)
                    goto LABEL_136;
                  goto LABEL_100;
                }
              }
              else
              {
                if (v167 != v169)
                {
                  OrientationTransformsForImage = FigSignalErrorAt();
                  goto LABEL_136;
                }
                v72 = v173;
                if (HIBYTE(v173))
                  goto LABEL_99;
LABEL_100:
                if (v72)
                {
                  OrientationTransformsForImage = CMPhotoCFDictionarySetInt(v137, v129, v172);
                  if ((_DWORD)OrientationTransformsForImage)
                    goto LABEL_136;
                }
              }
              v73 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (!v73)
              {
                v34 = 4294954514;
                goto LABEL_114;
              }
              OrientationTransformsForImage = v73(ValueAtIndex, &v176);
              if ((_DWORD)OrientationTransformsForImage)
                goto LABEL_136;
              v166 = 0;
              v74 = *(_QWORD *)(a1 + 8);
              CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
              v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
              if (v76)
              {
                v77 = v76(CMBaseObject, v127, v74, &v166);
                if (!(_DWORD)v77)
                {
                  v65 = v137;
                  if (v166)
                  {
                    CFDictionarySetValue(v137, key, v166);
                    if (v166)
                      CFRelease(v166);
                    _copyPropertyFromReaderToDictionary(ValueAtIndex, v126, v148, v137);
                    OrientationTransformsForImage = CMPhotoHEIFFileWriterAddImageToCollection(*(_QWORD *)a1, v137, UInt32, v162[0], &v174);
                    if (!(_DWORD)OrientationTransformsForImage)
                    {
                      v34 = _copyReaderTilesToWriter((uint64_t)ValueAtIndex, *(const __CFAllocator **)(a1 + 8), *(_QWORD *)a1, v174);
                      if ((_DWORD)v34)
                        v64 = -1;
                      else
                        v64 = v174;
                      goto LABEL_115;
                    }
LABEL_136:
                    v34 = OrientationTransformsForImage;
LABEL_114:
                    v64 = -1;
LABEL_115:
                    v65 = v137;
                    goto LABEL_119;
                  }
                  v34 = 4294950304;
                  goto LABEL_118;
                }
                v34 = v77;
              }
              else
              {
                v34 = 4294954514;
              }
              v65 = v137;
            }
            else
            {
              v65 = 0;
              v34 = 4294950305;
            }
          }
        }
        else
        {
          v34 = 4294954514;
        }
LABEL_118:
        v64 = -1;
        goto LABEL_119;
      }
      v34 = v66;
      v65 = 0;
    }
LABEL_119:
    if (v176)
    {
      v78 = v65;
      CFRelease(v176);
      v65 = v78;
      v21 = v135;
    }
    if (v65)
      CFRelease(v65);
    if (v162[0])
      CFRelease(v162[0]);
    if (v175)
      CFRelease(v175);
    if ((_DWORD)v34)
      goto LABEL_273;
LABEL_128:
    appended = CMPhotoCFArrayAppendInt32(v138, v64);
    if ((_DWORD)appended)
      break;
    if (!v54)
    {
      v56 = v64;
      v55 = ValueAtIndex;
    }
    ++v54;
    v51 = v57;
    if (v54 >= CFArrayGetCount(v57))
    {
      v83 = v56;
      v53 = v138;
      goto LABEL_152;
    }
  }
  v34 = appended;
LABEL_273:
  v79 = 0;
LABEL_150:
  v45 = a8;
  a5 = v131;
  v53 = v138;
LABEL_151:
  v10 = v147;
LABEL_174:
  if (v165)
    CFRelease(v165);
  if (v164)
    CFRelease(v164);
  if (v53)
    CFRelease(v53);
  if (v79)
    CFRelease(v79);
  if ((_DWORD)v34)
  {
LABEL_57:
    Mutable = theDict;
    goto LABEL_212;
  }
LABEL_183:
  if (v139)
  {
LABEL_184:
    v81 = 0;
    v82 = 0;
    goto LABEL_185;
  }
  CFDictionaryAddValue(v10, (const void *)Int32, v159);
  v149 = 0;
LABEL_192:
  v92 = 0;
  while (1)
  {
    v93 = v21 ? CFArrayGetCount(v21) : 0;
    if (v92 >= v93)
      break;
    v162[0] = 0;
    LODWORD(v176) = 0;
    v94 = (const __CFDictionary *)CFArrayGetValueAtIndex(v21, v92);
    if (!CMPhotoCFDictionaryGetIntIfPresent(v94, CFSTR("ImageHandle"), &v176))
    {
      v95 = FigSignalErrorAt();
LABEL_199:
      v34 = v95;
      Mutable = theDict;
      goto LABEL_200;
    }
    v95 = _copyImageDescriptionToWriter(a1, v94, v159, 1, a5, 0, v10, v45, a9, v162);
    ++v92;
    if ((_DWORD)v95)
      goto LABEL_199;
  }
  v96 = 0;
  Mutable = theDict;
  while (1)
  {
    v97 = v150 ? CFArrayGetCount(v150) : 0;
    if (v96 >= v97)
      break;
    v162[0] = 0;
    LODWORD(v176) = 0;
    v98 = (const __CFDictionary *)CFArrayGetValueAtIndex(v150, v96);
    if (!CMPhotoCFDictionaryGetIntIfPresent(v98, CFSTR("ImageHandle"), &v176))
    {
      v99 = FigSignalErrorAt();
LABEL_209:
      v34 = v99;
      v81 = v149;
      goto LABEL_210;
    }
    v99 = _copyImageDescriptionToWriter(a1, v98, v159, 2, a5, 0, v10, v45, a9, v162);
    ++v96;
    if ((_DWORD)v99)
      goto LABEL_209;
  }
  v177 = v144;
  v178 = 0;
  v179 = v141;
  v180 = 1;
  v181 = v143;
  v182 = 2;
  v183 = v142;
  v184 = 4;
  v101 = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, 0, 0);
  if (v101)
  {
    v82 = v101;
    v102 = 0;
    while (2)
    {
      CFDictionaryRemoveAllValues(v82);
      v103 = 0;
      v104 = &v177 + 2 * v102;
      v107 = (const __CFArray *)*v104;
      v105 = (int *)(v104 + 1);
      v106 = v107;
      if (!v107)
      {
LABEL_250:
        Count = 0;
        goto LABEL_251;
      }
      while (1)
      {
        Count = CFArrayGetCount(v106);
LABEL_251:
        if (v103 >= Count)
          break;
        v108 = (const __CFData *)CFArrayGetValueAtIndex(v106, v103);
        if (v108)
        {
          v109 = v108;
          v110 = CFGetTypeID(v108);
          if (v110 == CFDataGetTypeID())
          {
            Length = CFDataGetLength(v109);
          }
          else
          {
            v112 = CFGetTypeID(v109);
            if (v112 != CFDictionaryGetTypeID())
            {
              v116 = FigSignalErrorAt();
LABEL_259:
              v34 = v116;
LABEL_260:
              v81 = v149;
              goto LABEL_188;
            }
            Length = CFDictionaryGetCount(v109);
          }
          v113 = Length;
          LODWORD(v162[0]) = 0;
          Int32IfPresent = CMPhotoCFDictionaryGetInt32IfPresent(a8, v109, v162);
          v115 = CFDictionaryContainsKey(v82, (const void *)LODWORD(v162[0]));
          if (!Int32IfPresent || v115)
          {
            Mutable = theDict;
            if (v113)
            {
              v117 = 0;
              LODWORD(v176) = 0;
              v118 = *v105;
              if (!*v105)
              {
                LOBYTE(v175) = 0;
                v119 = CMPhotoExifDetectTIFFHeaderOffset(v109, &v175, &v176);
                if ((_DWORD)v119)
                  goto LABEL_275;
                if (!(_BYTE)v175)
                {
                  v119 = FigSignalErrorAt();
LABEL_275:
                  v34 = v119;
                  Mutable = theDict;
                  goto LABEL_260;
                }
                v117 = v176;
              }
              v119 = CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)a1, 0, (CFIndex)v159, v118, v109, v117, 0, v162);
              if ((_DWORD)v119)
                goto LABEL_275;
              Mutable = theDict;
              if (LODWORD(v162[0]))
              {
                v116 = CMPhotoCFDictionarySetInt32(a8, v109, (int)v162[0]);
                if ((_DWORD)v116)
                  goto LABEL_259;
              }
            }
          }
          else
          {
            v116 = CMPhotoHEIFFileWriterAddMetadataReferenceToImage(*(_QWORD *)a1, LODWORD(v162[0]), (CFIndex)v159);
            Mutable = theDict;
            if ((_DWORD)v116)
              goto LABEL_259;
          }
          if (LODWORD(v162[0]))
            CFDictionarySetValue(v82, (const void *)LODWORD(v162[0]), 0);
        }
        ++v103;
        if (!v106)
          goto LABEL_250;
      }
      if (++v102 != 4)
        continue;
      break;
    }
    v121 = FigCFDictionaryGetValue();
    v122 = FigCFDictionaryGetValue();
    if (v121 | v122)
    {
      v123 = v122;
      Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)v161);
      ItemPropertiesFromIntrinsicsAndExtrinsics = _createItemPropertiesFromIntrinsicsAndExtrinsics(*(const __CFAllocator **)(a1 + 8), (int)Dimensions, Dimensions >> 32, v121, v123, (__CFDictionary **)&v156);
      v81 = v149;
      if ((_DWORD)ItemPropertiesFromIntrinsicsAndExtrinsics
        || CFDictionaryGetCount((CFDictionaryRef)v156) >= 1
        && (ItemPropertiesFromIntrinsicsAndExtrinsics = CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)a1, 0, (CFIndex)v159, 3, v156, 0, 0, 0), (_DWORD)ItemPropertiesFromIntrinsicsAndExtrinsics))
      {
        v34 = ItemPropertiesFromIntrinsicsAndExtrinsics;
        goto LABEL_188;
      }
    }
    else
    {
      v81 = v149;
    }
    goto LABEL_186;
  }
  v34 = 4294950305;
LABEL_200:
  v81 = v149;
  if (v149)
    goto LABEL_211;
LABEL_212:
  if (v156)
    CFRelease(v156);
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  if (v157)
    CFRelease(v157);
  if (v161)
    CFRelease(v161);
  if (value)
    CFRelease(value);
  return v34;
}

uint64_t _addGenericListToWriter(uint64_t a1, uint64_t (*a2)(uint64_t, CFIndex, const void *, void **), const __CFArray *a3, __CFArray **a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  void *value;

  value = 0;
  Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 8), 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294950305;
  v9 = Mutable;
  v10 = 0;
  if (!a3)
    goto LABEL_4;
LABEL_3:
  for (i = CFArrayGetCount(a3); v10 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a3, v10);
    v13 = a2(a1, v10, ValueAtIndex, &value);
    if ((_DWORD)v13)
    {
      v14 = v13;
      goto LABEL_13;
    }
    CFArrayAppendValue(v9, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    ++v10;
    if (a3)
      goto LABEL_3;
LABEL_4:
    ;
  }
  v14 = 0;
  if (a4)
  {
    *a4 = v9;
    v9 = 0;
  }
LABEL_13:
  if (value)
    CFRelease(value);
  if (v9)
    CFRelease(v9);
  return v14;
}

uint64_t _addGroupDescriptionToWriter(uint64_t a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  uint64_t v8;
  const __CFArray *Value;
  const __CFArray *v10;
  CFTypeID v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  CFTypeID v17;
  const void *v18;
  const __CFDictionary *v19;
  const __CFString *v20;
  uint64_t v21;
  void *v23;
  void *key;
  uint64_t v25;
  CFDictionaryRef theDict;

  theDict = 0;
  v8 = CMPhotoPropertyListCopyWithMutableContainers(*(const __CFAllocator **)(a1 + 8), a3, &theDict);
  if ((_DWORD)v8)
    goto LABEL_23;
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ImageList"));
  if (!Value)
    goto LABEL_22;
  v10 = Value;
  v11 = CFGetTypeID(Value);
  if (v11 != CFArrayGetTypeID())
    goto LABEL_22;
  Count = CFArrayGetCount(v10);
  if (Count <= 0)
    goto LABEL_22;
  v13 = Count;
  v8 = CMPhotoCFDictionarySetSize(theDict, CFSTR("GroupHandle"), a2);
  if ((_DWORD)v8)
  {
LABEL_23:
    v21 = v8;
    goto LABEL_24;
  }
  v25 = 0;
  if (CMPhotoCFDictionaryGetSizeIfPresent((const __CFDictionary *)a3, CFSTR("GroupID"), &v25))
  {
    CFDictionaryRemoveValue(theDict, CFSTR("GroupID"));
    v14 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v14);
      if (!ValueAtIndex)
        break;
      v16 = ValueAtIndex;
      v17 = CFGetTypeID(ValueAtIndex);
      if (v17 != CFDictionaryGetTypeID())
        break;
      key = 0;
      if (CMPhotoCFDictionaryGetLongIfPresent(v16, CFSTR("ImageHandle"), &key))
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 64), key))
          break;
        v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
        v8 = CMPhotoHEIFFileWriterAddImageToGroup(*(_QWORD *)a1, (CFIndex)v18, v25);
        if ((_DWORD)v8)
          goto LABEL_23;
        v19 = v16;
        v20 = CFSTR("ImageHandle");
      }
      else
      {
        v23 = 0;
        if (!CMPhotoCFDictionaryGetLongIfPresent(v16, CFSTR("GroupHandle"), &v23)
          || !CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 72), v23))
        {
          break;
        }
        v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v23);
        v8 = CMPhotoHEIFFileWriterAddGroupToGroup(*(_QWORD *)a1, (uint64_t)v18, v25);
        if ((_DWORD)v8)
          goto LABEL_23;
        v19 = v16;
        v20 = CFSTR("GroupHandle");
      }
      v8 = CMPhotoCFDictionarySetSize(v19, v20, v18);
      if ((_DWORD)v8)
        goto LABEL_23;
      if (v13 == ++v14)
      {
        v21 = 0;
        if (!a4)
          goto LABEL_24;
        *a4 = theDict;
        return v21;
      }
    }
LABEL_22:
    v8 = FigSignalErrorAt();
    goto LABEL_23;
  }
  v21 = 4294950304;
LABEL_24:
  if (theDict)
    CFRelease(theDict);
  return v21;
}

uint64_t _copyMainAndAuxImageSamplesIfNeeded(uint64_t a1)
{
  uint64_t i;
  const __CFArray *Count;
  const __CFArray *ValueAtIndex;
  uint64_t v5;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 112) || *(_BYTE *)(a1 + 113))
    return 0;
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a1 + 168);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
    {
      result = 0;
      *(_BYTE *)(a1 + 113) = 1;
      return result;
    }
    ValueAtIndex = (const __CFArray *)FigCFArrayGetValueAtIndex();
    if (!ValueAtIndex)
      break;
    if (CFArrayGetCount(ValueAtIndex) != 2)
      break;
    v5 = FigCFArrayGetValueAtIndex();
    if (!FigCFArrayGetInt32AtIndex())
      break;
    result = _copyReaderTilesToWriter(v5, *(const __CFAllocator **)(a1 + 96), *(_QWORD *)(a1 + 88), 0);
    if ((_DWORD)result)
      goto LABEL_14;
  }
  result = 4294950304;
LABEL_14:
  *(_BYTE *)(a1 + 104) = 1;
  return result;
}

uint64_t _addSequenceDescriptionToWriter(uint64_t a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  uint64_t v7;
  CFIndex v8;
  const __CFArray *v9;
  uint64_t *ValueAtIndex;
  const __CFArray *Value;
  CFTypeID v12;
  BOOL v13;
  const __CFArray *v14;
  CMSampleBufferRef v15;
  CFIndex v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  CFTypeID v19;
  const __CFDictionary *v20;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  const __CFArray *v23;
  const __CFArray *v24;
  CFTypeID v25;
  const __CFArray *v26;
  const __CFArray *v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFTypeID v30;
  const __CFArray *v31;
  const __CFArray *v32;
  uint64_t v33;
  CFDictionaryRef *v35;
  const __CFArray *theArray;
  const __CFArray *v37;
  CMTime v38;
  CFIndex v39;
  CMTime v40;
  uint64_t v41;
  CFIndex idx;
  CFDictionaryRef theDict;
  CMSampleBufferRef v44;
  CFIndex v45;

  v44 = 0;
  v45 = -1;
  theDict = 0;
  v7 = CMPhotoPropertyListCopyWithMutableContainers(*(const __CFAllocator **)(a1 + 8), a3, &theDict);
  if ((_DWORD)v7)
    goto LABEL_33;
  idx = 0;
  if (!CMPhotoCFDictionaryGetLongIfPresent((CFDictionaryRef)a3, CFSTR("SequenceHandle"), &idx))
    goto LABEL_32;
  v8 = idx;
  if (idx < 0)
    goto LABEL_32;
  v9 = *(const __CFArray **)(a1 + 56);
  if (!v9)
    goto LABEL_32;
  if (v8 >= CFArrayGetCount(v9))
    goto LABEL_32;
  ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), idx);
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("ImageList"));
  if (!Value)
    goto LABEL_32;
  v37 = Value;
  v12 = CFGetTypeID(Value);
  v13 = v12 == CFArrayGetTypeID();
  v14 = v37;
  if (!v13)
    goto LABEL_32;
  theArray = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ImageList"));
  v7 = CMPhotoHEIFFileWriterAddSequence(*(_QWORD *)a1, 0, &v45);
  if ((_DWORD)v7)
    goto LABEL_33;
  v7 = FigCFDictionarySetInt();
  if ((_DWORD)v7)
    goto LABEL_33;
  v35 = a4;
  if (CFArrayGetCount(v37) >= 1)
  {
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
      if (!v17)
        break;
      v18 = v17;
      v19 = CFGetTypeID(v17);
      if (v19 != CFDictionaryGetTypeID())
        break;
      v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v16);
      v41 = -1;
      if (!CMPhotoCFDictionaryGetLongIfPresent(v18, CFSTR("ImageHandle"), &v41))
      {
        v33 = 4294950306;
        goto LABEL_35;
      }
      v7 = _moveCursorToPosition_0(*ValueAtIndex, v41);
      if ((_DWORD)v7)
        goto LABEL_33;
      if (v15)
      {
        CFRelease(v15);
        v44 = 0;
      }
      v7 = _createSampleBufferAtCursor(*ValueAtIndex, &v44);
      if ((_DWORD)v7)
        goto LABEL_33;
      v15 = v44;
      FormatDescription = CMSampleBufferGetFormatDescription(v44);
      MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
      memset(&v40, 0, sizeof(v40));
      CMSampleBufferGetPresentationTimeStamp(&v40, v15);
      v39 = 0;
      v7 = CMPhotoHEIFFileWriterAddImageToSequence(*(_QWORD *)a1, 0, 1, v45, MediaSubType, FormatDescription, &v39);
      if ((_DWORD)v7)
        goto LABEL_33;
      v7 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*(_QWORD *)a1, 0, v39, v15);
      if ((_DWORD)v7)
        goto LABEL_33;
      v7 = FigCFDictionarySetInt();
      if ((_DWORD)v7)
        goto LABEL_33;
      v23 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("ThumbnailImage"));
      v24 = v23;
      if (v23)
      {
        v25 = CFGetTypeID(v23);
        if (v25 != CFArrayGetTypeID())
          break;
      }
      v26 = (const __CFArray *)CFDictionaryGetValue(v20, CFSTR("ThumbnailImage"));
      v27 = (const __CFArray *)ValueAtIndex[1];
      v38 = v40;
      v7 = _addReferenceSequencesDescriptionToWriter((uint64_t *)a1, 1, v24, v27, &v38, v39, v26);
      if ((_DWORD)v7)
        goto LABEL_33;
      v28 = (const __CFArray *)CFDictionaryGetValue(v18, CFSTR("Auxiliary"));
      v29 = v28;
      if (v28)
      {
        v30 = CFGetTypeID(v28);
        if (v30 != CFArrayGetTypeID())
          break;
      }
      v31 = (const __CFArray *)CFDictionaryGetValue(v20, CFSTR("Auxiliary"));
      v32 = (const __CFArray *)ValueAtIndex[2];
      v38 = v40;
      v7 = _addReferenceSequencesDescriptionToWriter((uint64_t *)a1, 2, v29, v32, &v38, v39, v31);
      if ((_DWORD)v7)
        goto LABEL_33;
      ++v16;
      v14 = v37;
      if (v16 >= CFArrayGetCount(v37))
        goto LABEL_30;
    }
LABEL_32:
    v7 = FigSignalErrorAt();
LABEL_33:
    v33 = v7;
    goto LABEL_35;
  }
LABEL_30:
  if (v35)
  {
    v33 = 0;
    *v35 = theDict;
    theDict = 0;
    goto LABEL_37;
  }
  v33 = 0;
LABEL_35:
  if (theDict)
    CFRelease(theDict);
LABEL_37:
  if (v44)
    CFRelease(v44);
  return v33;
}

void ___addGroupsForCurrentPosition_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFTypeID v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  __CFDictionary *v12;
  __CFDictionary *Mutable;
  void *value;
  int v15;
  void *key;
  uint64_t v17;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v17 = 0;
    if (!CMPhotoCFDictionaryGetLongIfPresent(theDict, CFSTR("GroupSortOrder"), &v17))
      goto LABEL_28;
    if (v17 <= *(_QWORD *)(a1 + 40))
      return;
    v4 = *(_QWORD *)(a1 + 48);
    if (v4 != 0xFFFFFFFFLL && v17 > v4)
      return;
    key = 0;
    if (!CMPhotoCFDictionaryGetLongIfPresent(theDict, CFSTR("GroupHandle"), &key)
      || (v15 = 0, !CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("GroupType"), &v15))
      || (v5 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ImageList"))) == 0
      || (v6 = v5, v7 = CFGetTypeID(v5), v7 != CFArrayGetTypeID())
      || CFArrayGetCount(v6) <= 0)
    {
LABEL_28:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
      return;
    }
    value = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoHEIFFileWriterAddGroup(**(_QWORD **)(a1 + 56), v15, &value);
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoCFDictionarySetSize(theDict, CFSTR("GroupID"), value);
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        v8 = CFDictionaryGetValue(theDict, CFSTR("DisparityAdjustment"));
        v9 = CFDictionaryGetValue(theDict, CFSTR("StereoAggressors"));
        v10 = CFDictionaryGetValue(theDict, CFSTR("MonoImageLocation"));
        v11 = v10;
        if (v8 || v9 || v10)
        {
          Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 56) + 8), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (!Mutable)
          {
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -16991;
            return;
          }
          v12 = Mutable;
          if (v8)
            CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CC60C0], v8);
          if (v9)
            CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E0CC60E0], v9);
          if (v11)
            CFDictionaryAddValue(v12, (const void *)*MEMORY[0x1E0CC60D0], v11);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CMPhotoHEIFFileWriterAddGroupProperties(**(_QWORD **)(a1 + 56), (int)value, v12);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
          {
LABEL_26:
            CFRelease(v12);
            return;
          }
        }
        else
        {
          v12 = 0;
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 64), key, value);
        if (!v12)
          return;
        goto LABEL_26;
      }
    }
  }
}

uint64_t _copyFormatDescriptionFromPictureReader(uint64_t a1, uint64_t a2, CMFormatDescriptionRef *a3)
{
  uint64_t v5;
  uint64_t FigBaseObject;
  uint64_t (*v7)(uint64_t, _QWORD, uint64_t, CMFormatDescriptionRef *);
  uint64_t v8;
  uint64_t v9;
  uint64_t CMBaseObject;
  unsigned int (*v11)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFNumberRef Int32;
  int v16;
  int v17;
  const __CFDictionary *Extensions;
  const __CFDictionary *MutableCopy;
  CMVideoCodecType MediaSubType;
  CMVideoDimensions Dimensions;
  uint64_t v22;
  uint64_t v23;
  CGColorSpace *v25;
  CMFormatDescriptionRef desc;
  CFTypeRef v27;
  CFTypeRef cf;

  desc = 0;
  v5 = *(_QWORD *)(a1 + 8);
  FigBaseObject = FigPictureReaderGetFigBaseObject();
  v7 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v7)
  {
    v23 = 4294954514;
    goto LABEL_27;
  }
  v8 = v7(FigBaseObject, *MEMORY[0x1E0CC4B58], v5, &desc);
  if ((_DWORD)v8)
    goto LABEL_30;
  v27 = 0;
  cf = 0;
  v9 = *(_QWORD *)(a1 + 8);
  CMBaseObject = FigPictureCollectionGetCMBaseObject();
  v11 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (!v11
    || v11(CMBaseObject, *MEMORY[0x1E0CC49E0], v9, &cf)
    || (v12 = *(_QWORD *)(a1 + 8),
        v13 = FigPictureCollectionGetCMBaseObject(),
        (v14 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48)) == 0)
    || v14(v13, *MEMORY[0x1E0CC49D8], v12, &v27))
  {
    v17 = 0;
    Int32 = 0;
  }
  else
  {
    Int32 = CMPhotoCFNumberCreateInt32(1835622758);
    v16 = FigCFArrayContainsValue();
    v17 = FigCFEqual() | v16;
  }
  if (cf)
    CFRelease(cf);
  if (v27)
    CFRelease(v27);
  if (Int32)
    CFRelease(Int32);
  Extensions = CMFormatDescriptionGetExtensions(desc);
  v25 = 0;
  v8 = CMPhotoCreateColorSpaceFromPixelBufferAttachments(Extensions, 0, &v25, 1, 0);
  if ((_DWORD)v8)
  {
LABEL_30:
    v23 = v8;
    goto LABEL_27;
  }
  MutableCopy = 0;
  if (v25 || !v17)
    goto LABEL_22;
  cf = 0;
  MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  FigCFDictionarySetValue();
  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
  v22 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(a1 + 8), MediaSubType, Dimensions.width, Dimensions.height, MutableCopy, (CMVideoFormatDescriptionRef *)&cf);
  if (!(_DWORD)v22)
  {
    if (desc)
      CFRelease(desc);
    desc = (CMFormatDescriptionRef)cf;
LABEL_22:
    v23 = 0;
    if (a3)
    {
      *a3 = desc;
      desc = 0;
    }
    if (MutableCopy)
      goto LABEL_25;
    goto LABEL_27;
  }
  v23 = v22;
  if (MutableCopy)
LABEL_25:
    CFRelease(MutableCopy);
LABEL_27:
  if (desc)
    CFRelease(desc);
  return v23;
}

uint64_t _copyReaderTilesToWriter(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CFIndex a4)
{
  uint64_t (*v6)(uint64_t, CFTypeRef *);
  uint64_t v7;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, _QWORD, const __CFAllocator *, const __CFDictionary **);
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, CFTypeRef *);
  CFTypeRef v15;
  uint64_t (*v16)(CFTypeRef, unint64_t *);
  void *v17;
  const __CFAllocator *v18;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v20;
  CFDictionaryRef v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, const __CFAllocator *, CMFormatDescriptionRef *);
  int v24;
  CFTypeRef v25;
  uint64_t (*v26)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, _QWORD);
  CFTypeRef v27;
  uint64_t (*v28)(CFTypeRef, unint64_t *, unint64_t *);
  uint64_t v29;
  uint64_t v31;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  uint64_t v36;
  void *v37;
  void *v38;
  CMFormatDescriptionRef formatDescription;
  CMSampleBufferRef sampleBufferOut;
  CFTypeRef v41;
  __CFData *v42;
  unint64_t v43;
  unint64_t v44;
  CGSize size;
  const __CFDictionary *v46;
  CFTypeRef v47;
  CFTypeRef v48;
  void *values;
  void *keys[3];
  CGPoint v51;

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v6)
    goto LABEL_44;
  v7 = v6(a1, &v48);
  if ((_DWORD)v7)
    goto LABEL_56;
  CMBaseObject = FigPictureTileCursorServiceGetCMBaseObject();
  v9 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v9)
    goto LABEL_44;
  v7 = v9(CMBaseObject, *MEMORY[0x1E0CC4C30], a2, &v46);
  if ((_DWORD)v7)
  {
LABEL_56:
    v29 = v7;
    goto LABEL_45;
  }
  size.width = 0.0;
  size.height = 0.0;
  if (!CGSizeMakeWithDictionaryRepresentation(v46, &size)
    || ((v10 = vcvtad_u64_f64(size.width), (v11 = vcvtad_u64_f64(size.height)) != 0) ? (v12 = v10 == 0) : (v12 = 1), v12))
  {
    v7 = FigSignalErrorAt();
    goto LABEL_56;
  }
  v13 = v48;
  v14 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v14)
  {
LABEL_44:
    v29 = 4294954514;
    goto LABEL_45;
  }
  v7 = v14(v13, &v47);
  if ((_DWORD)v7)
    goto LABEL_56;
  v43 = 0;
  v44 = 0;
  v15 = v47;
  v16 = *(uint64_t (**)(CFTypeRef, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v16)
    goto LABEL_44;
  v7 = v16(v15, &v43);
  if ((_DWORD)v7)
    goto LABEL_56;
  v17 = (void *)*MEMORY[0x1E0CC4A88];
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v31 = *MEMORY[0x1E0CC4BF8];
  do
  {
    v41 = 0;
    v42 = 0;
    formatDescription = 0;
    sampleBufferOut = 0;
    v37 = 0;
    v38 = 0;
    v36 = 0;
    v43 /= v10;
    v44 /= v11;
    v51.x = (double)v43;
    v51.y = (double)v44;
    DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v51);
    v20 = DictionaryRepresentation;
    if (!DictionaryRepresentation)
    {
      v21 = 0;
LABEL_43:
      LODWORD(v29) = -16991;
      goto LABEL_28;
    }
    values = DictionaryRepresentation;
    keys[0] = v17;
    v21 = CFDictionaryCreate(v18, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v21)
      goto LABEL_43;
    v22 = FigPictureTileCursorGetCMBaseObject();
    v23 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMFormatDescriptionRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v23)
    {
      v24 = v23(v22, v31, a2, &formatDescription);
      if (v24)
        goto LABEL_26;
      v25 = v47;
      v26 = *(uint64_t (**)(CFTypeRef, uint64_t *, void **, void **, CFTypeRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 40);
      if (v26)
      {
        v24 = v26(v25, &v36, &v38, &v37, &v41, 0);
        if (v24)
          goto LABEL_26;
        v24 = CMPhotoPictureReaderCreateContiguousBlockBufferFromChunks((uint64_t)a2, v36, (uint64_t)v38, (uint64_t)v37, (uint64_t)v41, 0, 0, &v42);
        if (v24)
          goto LABEL_26;
        memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
        CMTimeMake(&sampleTimingArray.duration, 1, 1);
        sampleTimingArray.presentationTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        sampleTimingArray.decodeTimeStamp = sampleTimingArray.presentationTimeStamp;
        sampleSizeArray = 0;
        sampleSizeArray = CMBlockBufferGetDataLength(v42);
        v24 = CMSampleBufferCreate(a2, v42, 1u, 0, 0, formatDescription, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &sampleBufferOut);
        if (v24)
          goto LABEL_26;
        v24 = CMPhotoHEIFFileWriterAddSampleBufferToImage(a3, v21, a4, sampleBufferOut);
        if (v24)
          goto LABEL_26;
        v27 = v47;
        v28 = *(uint64_t (**)(CFTypeRef, unint64_t *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 16);
        if (v28)
        {
          v24 = v28(v27, &v43, &v44);
LABEL_26:
          LODWORD(v29) = v24;
          goto LABEL_28;
        }
      }
    }
    LODWORD(v29) = -12782;
LABEL_28:
    free(v38);
    free(v37);
    if (v20)
      CFRelease(v20);
    if (v41)
      CFRelease(v41);
    if (v42)
      CFRelease(v42);
    if (formatDescription)
      CFRelease(formatDescription);
    if (sampleBufferOut)
      CFRelease(sampleBufferOut);
    if (v21)
      CFRelease(v21);
  }
  while (!(_DWORD)v29);
  if ((_DWORD)v29 == -17171)
    v29 = 0;
  else
    v29 = v29;
LABEL_45:
  if (v47)
    CFRelease(v47);
  if (v46)
    CFRelease(v46);
  if (v48)
    CFRelease(v48);
  return v29;
}

uint64_t _createItemPropertiesFromIntrinsicsAndExtrinsics(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary **a6)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  BOOL v15;
  uint64_t FigIntrinsicsDictFromIntrinsicsMatrix;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  uint64_t v23;
  uint64_t FigExtrinsicsDictFromExtrinsics;
  int v25;
  BOOL v26;
  unsigned int v27;
  BOOL v28;
  __int16 v30;
  CFTypeRef cf;
  void *value;

  if (!a6 || !(a4 | a5))
    return 4294950306;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950305;
  v11 = Mutable;
  v12 = (const void *)FigCFDictionaryGetValue();
  v13 = (const void *)FigCFDictionaryGetValue();
  v14 = v13;
  if (v13)
    v15 = v12 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    value = 0;
    if (!CMPhotoCreateIntrinsicsMatrixFromFigIntrinsicsDict(a1, v13, a2, a3, 0, (__CFArray **)&value))
    {
      v18 = FigCFEqual();
      if (value)
        CFRelease(value);
      if (v18)
        goto LABEL_18;
    }
LABEL_13:
    value = 0;
    FigIntrinsicsDictFromIntrinsicsMatrix = CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix((int)a1, v12, a2, a3, (uint64_t)&value);
    if ((_DWORD)FigIntrinsicsDictFromIntrinsicsMatrix)
    {
      FigExtrinsicsDictFromExtrinsics = FigIntrinsicsDictFromIntrinsicsMatrix;
      goto LABEL_57;
    }
    CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC60B8], value);
    CFRelease(value);
    goto LABEL_19;
  }
  if (v13)
  {
LABEL_18:
    CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC60B8], v14);
    goto LABEL_19;
  }
  if (v12)
    goto LABEL_13;
LABEL_19:
  v19 = FigCFDictionaryGetValue();
  v20 = FigCFDictionaryGetValue();
  v21 = (const __CFDictionary *)FigCFDictionaryGetValue();
  if (v21)
  {
    v22 = v21;
    if (!(v19 | v20))
      goto LABEL_51;
    cf = 0;
    value = 0;
    v30 = 0;
    v23 = _createPositionAndRotationFromFigExtrinsics(a1, v21, &cf, (CFTypeRef *)&value, (BOOL *)&v30 + 1, (BOOL *)&v30);
    if ((_DWORD)v23)
    {
      FigExtrinsicsDictFromExtrinsics = v23;
      goto LABEL_24;
    }
    if (FigCFEqual())
    {
      v25 = 1;
    }
    else
    {
      if ((_BYTE)v30)
        v26 = v20 == 0;
      else
        v26 = 0;
      v25 = v26;
    }
    if (FigCFEqual())
    {
      v27 = 1;
    }
    else
    {
      if (HIBYTE(v30))
        v28 = v19 == 0;
      else
        v28 = 0;
      v27 = v28;
    }
    if (v25)
      FigExtrinsicsDictFromExtrinsics = v27;
    else
      FigExtrinsicsDictFromExtrinsics = 0;
    if (cf)
      CFRelease(cf);
    if (value)
      CFRelease(value);
    if ((_DWORD)FigExtrinsicsDictFromExtrinsics)
    {
LABEL_51:
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC60B0], v22);
      FigExtrinsicsDictFromExtrinsics = 0;
      goto LABEL_52;
    }
  }
  else
  {
    FigExtrinsicsDictFromExtrinsics = 0;
  }
LABEL_24:
  if (v19 | v20)
  {
    value = 0;
    FigExtrinsicsDictFromExtrinsics = CMPhotoCreateFigExtrinsicsDictFromExtrinsics(a1, v19, v20, 0, (__CFDictionary **)&value);
    if (!(_DWORD)FigExtrinsicsDictFromExtrinsics)
    {
      CFDictionarySetValue(v11, (const void *)*MEMORY[0x1E0CC60B0], value);
      CFRelease(value);
      goto LABEL_52;
    }
LABEL_57:
    CFRelease(v11);
    return FigExtrinsicsDictFromExtrinsics;
  }
LABEL_52:
  *a6 = v11;
  return FigExtrinsicsDictFromExtrinsics;
}

uint64_t _createSampleBufferAtCursor(uint64_t a1, CMSampleBufferRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, CMSampleBufferRef *);
  uint64_t v6;
  CMSampleBufferRef v7;
  CMItemCount NumSamples;
  CMSampleBufferRef sbuf;

  sbuf = 0;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, CMSampleBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v5)
    return 4294954514;
  v6 = v5(v3, v4, 1, 1, 1, 0, 2, 0, 0, 0, 0, &sbuf);
  v7 = sbuf;
  if (!(_DWORD)v6)
  {
    NumSamples = CMSampleBufferGetNumSamples(sbuf);
    v7 = sbuf;
    if (NumSamples == 1)
    {
      v6 = 0;
      *a2 = sbuf;
      return v6;
    }
    v6 = 4294950304;
  }
  if (v7)
    CFRelease(v7);
  return v6;
}

uint64_t _addReferenceSequencesDescriptionToWriter(uint64_t *a1, int a2, CFArrayRef theArray, const __CFArray *a4, CMTime *a5, CFIndex a6, const __CFArray *a7)
{
  CMSampleBufferRef v11;
  CFIndex v12;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v15;
  CFTypeID v16;
  __CFDictionary *v17;
  CFIndex v18;
  const __CFArray *v19;
  const void *v20;
  uint64_t v21;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t MediaSubType;
  uint64_t v24;
  uint64_t v25;
  CMTime v30;
  BOOL v31;
  CFIndex idx;
  CMSampleBufferRef sbuf;

  v11 = 0;
  v12 = 0;
  sbuf = 0;
  while (1)
  {
    if (theArray)
      Count = CFArrayGetCount(theArray);
    else
      Count = 0;
    if (v12 >= Count)
    {
      v25 = 0;
      goto LABEL_25;
    }
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v12);
    if (!ValueAtIndex)
      goto LABEL_23;
    v15 = ValueAtIndex;
    v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID())
      goto LABEL_23;
    v17 = (__CFDictionary *)CFArrayGetValueAtIndex(a7, v12);
    idx = -1;
    if (!CMPhotoCFDictionaryGetLongIfPresent(v15, CFSTR("ImageHandle"), &idx))
      break;
    if (!a4)
      goto LABEL_23;
    v18 = idx;
    if (idx < 0 || v18 >= CFArrayGetCount(a4))
      goto LABEL_23;
    v19 = a7;
    v20 = CFArrayGetValueAtIndex(a4, idx);
    v31 = 0;
    v30 = *a5;
    v21 = _moveCursorToPresentationTime((uint64_t)v20, &v30, &v31);
    if ((_DWORD)v21)
      goto LABEL_24;
    if (!v31)
    {
LABEL_23:
      v21 = FigSignalErrorAt();
LABEL_24:
      v25 = v21;
      goto LABEL_25;
    }
    if (v11)
    {
      CFRelease(v11);
      sbuf = 0;
    }
    v21 = _createSampleBufferAtCursor((uint64_t)v20, &sbuf);
    v11 = sbuf;
    if ((_DWORD)v21)
      goto LABEL_24;
    FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
    MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
    v30.value = 0;
    v24 = *a1;
    if (a2 == 1)
    {
      v21 = CMPhotoHEIFFileWriterAddThumbnailToImage(v24, 0, a6, MediaSubType, FormatDescription, &v30.value);
      if ((_DWORD)v21)
        goto LABEL_24;
    }
    else
    {
      v21 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(v24, 0, a6, MediaSubType, FormatDescription, &v30.value);
      if ((_DWORD)v21)
        goto LABEL_24;
    }
    v21 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*a1, 0, v30.value, v11);
    if ((_DWORD)v21)
      goto LABEL_24;
    CFDictionaryRemoveValue(v17, CFSTR("ImageHandle"));
    ++v12;
    a7 = v19;
  }
  v25 = 4294950306;
LABEL_25:
  if (v11)
    CFRelease(v11);
  return v25;
}

uint64_t _updateOrRemoveOrientationForImages(__CFDictionary *a1, CFArrayRef theArray, const __CFArray *a3, int a4, int a5, int a6)
{
  uint64_t result;

  if (a6)
  {
    if (a1)
      CFDictionaryRemoveValue(a1, CFSTR("Orientation"));
    result = _removeOrientation(theArray);
    if (!(_DWORD)result)
      return _removeOrientation(a3);
  }
  else if (a5)
  {
    if (a1)
      CMPhotoCFDictionarySetInt(a1, CFSTR("Orientation"), a4);
    result = _updateOrientation(theArray, a4);
    if (!(_DWORD)result)
      return _updateOrientation(a3, a4);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t _checkOrientationForImages(CFArrayRef theArray, int a2, int a3, BOOL *a4, BOOL *a5, int *a6)
{
  BOOL v12;
  BOOL v13;
  CFIndex v14;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  int IntIfPresent;
  uint64_t result;
  int v19;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v19 = -1;
  do
  {
    if (theArray)
      Count = CFArrayGetCount(theArray);
    else
      Count = 0;
    if (v14 >= Count)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v14);
    if (!ValueAtIndex)
      return FigSignalErrorAt();
    IntIfPresent = CMPhotoCFDictionaryGetIntIfPresent(ValueAtIndex, CFSTR("Orientation"), &v19);
    v13 = IntIfPresent != a3;
    v12 = v19 != a2;
    if (v19 != a2)
      break;
    ++v14;
  }
  while (IntIfPresent == a3);
  if (a6)
    *a6 = v19;
  if (a4)
    *a4 = v12;
  result = 0;
  if (a5)
    *a5 = v13;
  return result;
}

uint64_t _removeOrientation(CFArrayRef theArray)
{
  CFIndex v2;
  CFIndex i;
  __CFDictionary *ValueAtIndex;

  v2 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); ; i = 0)
  {
    if (v2 >= i)
      return 0;
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(theArray, v2);
    if (!ValueAtIndex)
      break;
    CFDictionaryRemoveValue(ValueAtIndex, CFSTR("Orientation"));
    ++v2;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return FigSignalErrorAt();
}

uint64_t _updateOrientation(CFArrayRef theArray, int a2)
{
  CFIndex v4;
  CFIndex i;
  __CFDictionary *ValueAtIndex;

  v4 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); ; i = 0)
  {
    if (v4 >= i)
      return 0;
    ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
    if (!ValueAtIndex)
      break;
    CMPhotoCFDictionarySetInt(ValueAtIndex, CFSTR("Orientation"), a2);
    ++v4;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  return FigSignalErrorAt();
}

uint64_t _hasMetadataChangedForImageHandle(const __CFArray *a1, const __CFArray *a2, int a3, const void *a4, _QWORD *a5)
{
  uint64_t result;
  const void *Value;
  int v11;
  const void *v12;
  CFDictionaryRef v13;
  CFDictionaryRef theDict;

  v13 = 0;
  theDict = 0;
  result = _getImageWithHandleFromDescriptionList(a1, a3, &theDict);
  if (!(_DWORD)result)
  {
    result = _getImageWithHandleFromDescriptionList(a2, a3, &v13);
    if (!(_DWORD)result)
    {
      CFDictionaryGetValue(theDict, a4);
      Value = CFDictionaryGetValue(v13, a4);
      v11 = FigCFEqual();
      result = 0;
      if (v11)
        v12 = (const void *)*MEMORY[0x1E0C9B0D0];
      else
        v12 = Value;
      *a5 = v12;
    }
  }
  return result;
}

void ___propagateMetadataChange_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  int v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  int hasMetadataChangedForImageHandle;
  int ImageWithHandleFromDescriptionList;
  int v11;
  CFMutableDictionaryRef theDicta;
  uint64_t v13;

  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v11 = -1;
    if (CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("ImageHandle"), &v11))
    {
      v3 = v11;
      if (v11 == *(_DWORD *)(a1 + 72))
        return;
      v4 = *(const __CFArray **)(a1 + 40);
      v5 = *(const __CFArray **)(a1 + 48);
      v6 = *(const void **)(a1 + 56);
      v7 = *(const void **)(a1 + 64);
      v8 = *MEMORY[0x1E0C9B0D0];
      v13 = *MEMORY[0x1E0C9B0D0];
      hasMetadataChangedForImageHandle = _hasMetadataChangedForImageHandle(v4, v5, v11, v6, &v13);
      if (!hasMetadataChangedForImageHandle)
      {
        if (v13 == v8)
        {
          theDicta = 0;
          ImageWithHandleFromDescriptionList = _getImageWithHandleFromDescriptionList(v5, v3, &theDicta);
          if (!ImageWithHandleFromDescriptionList)
          {
            if (v7)
              CFDictionarySetValue(theDicta, v6, v7);
            else
              CFDictionaryRemoveValue(theDicta, v6);
          }
        }
        else
        {
          ImageWithHandleFromDescriptionList = 0;
        }
        goto LABEL_9;
      }
    }
    else
    {
      hasMetadataChangedForImageHandle = FigSignalErrorAt();
    }
    ImageWithHandleFromDescriptionList = hasMetadataChangedForImageHandle;
LABEL_9:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ImageWithHandleFromDescriptionList;
  }
}

uint64_t _getImageWithHandleFromDescriptionList(CFArrayRef theArray, int a2, const __CFDictionary **a3)
{
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  uint64_t result;
  int v12;

  v6 = 0;
  while (1)
  {
    v7 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v6 >= v7)
      break;
    ValueAtIndex = (const __CFDictionary *)FigCFArrayGetValueAtIndex();
    if (!ValueAtIndex)
      return 4294950306;
    v9 = ValueAtIndex;
    v10 = CFGetTypeID(ValueAtIndex);
    if (v10 != CFDictionaryGetTypeID())
      return 4294950306;
    v12 = -1;
    if (!CMPhotoCFDictionaryGetIntIfPresent(v9, CFSTR("ImageHandle"), &v12))
      return 4294950306;
    ++v6;
    if (v12 == a2)
      goto LABEL_12;
  }
  v9 = 0;
LABEL_12:
  if (!v9)
    return FigSignalErrorAt();
  result = 0;
  if (a3)
    *a3 = v9;
  return result;
}

const void *_finishAsyncEncoding(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  unint64_t v4;

  v2 = _disposeCompressionPluginsForSequenceAsyncEncoding((uint64_t)a1);
  if (!(_DWORD)v2)
  {
    v3 = a1[24];
    if (v3)
    {
      if (a1[25])
      {
        if (a1[26])
        {
          v4 = 0;
          do
          {
            FigSemaphoreWaitRelative();
            ++v4;
          }
          while (v4 < a1[26]);
          v3 = a1[24];
        }
        a1[26] = 0;
      }
      dispatch_barrier_sync(v3, &__block_literal_global_22);
    }
  }
  return v2;
}

const void *_disposeCompressionPluginsForSequenceAsyncEncoding(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *v3;
  const void *result;

  v2 = *(const __CFDictionary **)(a1 + 56);
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)_disposePluginFunction, 0);
    v3 = *(const void **)(a1 + 56);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  result = *(const void **)(a1 + 48);
  if (result)
  {
    result = (const void *)CMPhotoCodecSessionPoolFlush((uint64_t)result, 1);
    if (!(_DWORD)result)
    {
      result = *(const void **)(a1 + 48);
      if (result)
      {
        CFRelease(result);
        result = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
    }
  }
  return result;
}

void _disposePluginFunction(int a1, CFTypeRef *a2)
{
  CMPhotoCompressionPluginDispose(a2);
}

uint64_t _compressImageInternal_0(uint64_t a1, CFDictionaryRef theDict, opaqueCMSampleBuffer *a3, int a4, CFIndex *a5, uint64_t a6)
{
  int v12;
  _DWORD *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  _QWORD block[10];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  if (!theDict)
    return _compressMainImage(a1, theDict, a3, a4, a5, a6);
  v12 = CFDictionaryContainsKey(theDict, CFSTR("IncludeThumbnailWithOptions"));
  if (CFDictionaryContainsKey(theDict, CFSTR("IncludeAlphaAuxiliaryImageWithOptions")))
    return FigSignalErrorAt();
  if (!v12)
    return _compressMainImage(a1, theDict, a3, a4, a5, a6);
  v13 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  *(_QWORD *)(a1 + 224) = FigSemaphoreCreate();
  *(_QWORD *)(a1 + 232) = -1;
  v14 = dispatch_queue_create("com.apple.coremedia.asyncthumb", 0);
  v15 = v14;
  if (v14)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___compressMainWithThumbAsync_block_invoke;
    block[3] = &unk_1E53F70F8;
    block[6] = theDict;
    block[7] = a1 + 88;
    block[8] = a3;
    block[9] = a1;
    v19 = a4;
    block[4] = a6;
    block[5] = &v20;
    dispatch_async(v14, block);
    v16 = _compressMainImage(a1, theDict, a3, a4, a5, a6);
  }
  else
  {
    v16 = 4294950194;
  }
  if (*v13 == 1)
    kdebug_trace();
  dispatch_sync(v15, &__block_literal_global_16);
  FigSemaphoreDestroy();
  if (*v13 == 1)
    kdebug_trace();
  if (v15)
    dispatch_release(v15);
  if (!(_DWORD)v16)
  {
    if (*((_DWORD *)v21 + 6))
      v16 = 4294950187;
    else
      v16 = 0;
  }
  _Block_object_dispose(&v20, 8);
  if (*v13 == 1)
    kdebug_trace();
  return v16;
}

uint64_t _compressMainImage(uint64_t a1, const __CFDictionary *a2, opaqueCMSampleBuffer *a3, int a4, CFIndex *a5, uint64_t a6)
{
  uint64_t SourceDimensions;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v17[2];

  v17[0] = 0;
  v17[1] = 0;
  SourceDimensions = CMPhotoGetSourceDimensions(a3, a2, v17);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  SourceDimensions = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  v13 = 0;
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!a3 || !a4)
    goto LABEL_7;
  v13 = (uint64_t)a3 + rand();
  if (*v14 == 1)
  {
    kdebug_trace();
LABEL_7:
    if (*v14 == 1)
      kdebug_trace();
  }
  v15 = _compressX(a1, a2, a3, 0, 0, 0, 0, 1, -1, MEMORY[0x1E0CA2E18], a4, v13, a5, a6);
  if (*v14 == 1)
    kdebug_trace();
  return v15;
}

void ___compressMainWithThumbAsync_block_invoke(uint64_t a1)
{
  const __CFDictionary *Value;
  const void *v3;
  opaqueCMSampleBuffer *v4;
  CFTypeID v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  CGFloat v12;
  double v13;
  double v14;
  uint64_t PixelFormatType;
  uint64_t v16;
  int Int32IfPresent;
  int SizeIfPresent;
  int BooleanIfPresent;
  const __CFDictionary *v20;
  int v21;
  int v22;
  int DestinationPixelFormatFromOptions;
  unint64_t v24;
  int v25;
  size_t Width;
  size_t Height;
  size_t v28;
  size_t v29;
  double v30;
  double v31;
  CFIndex v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  CGRect rect;
  double PixelBufferCLAPAsRect;
  CGFloat v39;
  double v40;
  double v41;
  unsigned __int8 EvenScalingModeDefault;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  opaqueCMSampleBuffer *v46;
  __CVBuffer *v47[2];

  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), CFSTR("IncludeThumbnailWithOptions"));
  if (CFDictionaryGetCount(Value) <= 0
    || (v3 = CFDictionaryGetValue(Value, CFSTR("DryRun")),
        CFDictionaryContainsKey(Value, CFSTR("IncludeThumbnailWithOptions"))))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = FigSignalErrorAt();
    return;
  }
  if (Value)
  {
    Value = CFDictionaryCreateMutableCopy(*(CFAllocatorRef *)(*(_QWORD *)(a1 + 56) + 8), 0, Value);
    if (!Value)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = -16991;
      return;
    }
  }
  v4 = *(opaqueCMSampleBuffer **)(a1 + 64);
  if ((v3 == 0) != (v4 != 0))
    goto LABEL_67;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 72);
    if (!*(_BYTE *)(v6 + 16) && *(_BYTE *)(v6 + 72))
    {
LABEL_12:
      v7 = 0;
      v8 = *(unsigned __int8 *)(a1 + 80);
      v9 = *(_QWORD *)(a1 + 32);
      v46 = 0;
      v47[0] = 0;
      v45 = 0;
      v44 = 320;
      v43 = 0;
      EvenScalingModeDefault = 1;
      v10 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (!v3)
      {
        v11 = _createPixelBufferFromImage(v6 + 88, v4, &v46);
        if (v11)
          goto LABEL_58;
        PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v46);
        v39 = v12;
        v40 = v13;
        v41 = v14;
        PixelFormatType = CVPixelBufferGetPixelFormatType(v46);
        if (Value)
        {
          v16 = PixelFormatType;
          v35 = v8;
          v36 = v9;
          Int32IfPresent = CMPhotoCFDictionaryGetInt32IfPresent(Value, CFSTR("CodecType"), (char *)&v45 + 4);
          SizeIfPresent = CMPhotoCFDictionaryGetSizeIfPresent(Value, CFSTR("MaxPixelSize"), &v44);
          CMPhotoCFDictionaryGetBooleanIfPresent(Value, CFSTR("UseEvenScalingMode"), &EvenScalingModeDefault);
          EvenScalingModeDefault = CMPhotoGetEvenScalingModeDefault(1, EvenScalingModeDefault);
          BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(Value, CFSTR("AddMIAFCompliantThumbnails"), &v43);
          if (v44)
            CMPhotoCFDictionaryGetBooleanIfPresent(Value, CFSTR("AllowMaxPixelSizeUpscale"), (_BYTE *)&v43 + 1);
          if (SizeIfPresent == BooleanIfPresent)
          {
            v11 = FigSignalErrorAt();
            goto LABEL_58;
          }
          v20 = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("SourceCropRect"));
          if (!v20
            || (memset(&rect, 0, sizeof(rect)), !CGRectMakeWithDictionaryRepresentation(v20, &rect))
            || (v21 = CMPhotoApplyCropRectToRect(&PixelBufferCLAPAsRect, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height)) == 0)
          {
            if (BooleanIfPresent)
            {
              if ((_BYTE)v43)
              {
                v11 = CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize(&v44, v40, v41);
                if (v11)
                  goto LABEL_58;
              }
            }
            if (Int32IfPresent)
            {
              v22 = HIDWORD(v45);
            }
            else
            {
              v22 = 1752589105;
              HIDWORD(v45) = 1752589105;
            }
            v8 = v35;
            DestinationPixelFormatFromOptions = CMPhotoGetDestinationPixelFormatFromOptions(Value, v22, v16, (unsigned int *)&v45);
            if (!DestinationPixelFormatFromOptions)
            {
              v24 = v44;
              if (!v44)
              {
LABEL_38:
                v7 = 0;
LABEL_39:
                v9 = v36;
                goto LABEL_49;
              }
              v25 = HIBYTE(v43);
              Width = CVPixelBufferGetWidth(v46);
              Height = CVPixelBufferGetHeight(v46);
              if (v25)
              {
                if (Width > Height)
                  v28 = CVPixelBufferGetWidth(v46);
                else
                  v28 = CVPixelBufferGetHeight(v46);
                if (v24 == v28)
                  goto LABEL_38;
              }
              else
              {
                if (Width > Height)
                  v29 = CVPixelBufferGetWidth(v46);
                else
                  v29 = CVPixelBufferGetHeight(v46);
                if (v24 >= v29)
                  goto LABEL_38;
              }
              if (*v10 == 1)
                kdebug_trace();
              rect.origin.x = 0.0;
              rect.origin.y = 0.0;
              CMPhotoPixelBufferConstrainSizeToMaxSideLength(vcvtad_u64_f64(v40), vcvtad_u64_f64(v41), v44, 0, 0, HIBYTE(v43), EvenScalingModeDefault, (unint64_t *)&rect, 0, 0);
              DestinationPixelFormatFromOptions = _createPaddedPixelBufferAndClearPadding(*(const void **)(v6 + 24), v45, *(unint64_t *)&rect.origin.x, *(unint64_t *)&rect.origin.y, 0x10uLL, 0x10uLL, 0, (CFTypeRef *)v47);
              if (!DestinationPixelFormatFromOptions)
              {
                DestinationPixelFormatFromOptions = CMPhotoScaleAndRotateSessionTransformForSize(*(_QWORD *)(v6 + 32), v46, 1, 1, v45, 0, 0, 1u, PixelBufferCLAPAsRect, v39, v40, v41, (double)*(unint64_t *)&rect.origin.x, (double)*(unint64_t *)&rect.origin.y, v30, v31, 64, 1u, v47);
                if (!DestinationPixelFormatFromOptions)
                {
                  CFDictionarySetValue(Value, CFSTR("UsePixelsOutsideCrop"), (const void *)*MEMORY[0x1E0C9AE50]);
                  CFDictionaryRemoveValue(Value, CFSTR("SourceCropRect"));
                  CVPixelBufferRelease(v46);
                  v46 = v47[0];
                  v47[0] = 0;
                  if (*v10 == 1)
                    kdebug_trace();
                  v7 = 0;
                  v9 = v36;
                  goto LABEL_49;
                }
              }
            }
            v7 = DestinationPixelFormatFromOptions;
            goto LABEL_39;
          }
          v7 = v21;
          v9 = v36;
          v8 = v35;
        }
        else
        {
          v7 = 0;
        }
      }
LABEL_49:
      if (*v10 == 1)
        kdebug_trace();
      FigSemaphoreWaitRelative();
      if (*v10 == 1)
        kdebug_trace();
      v32 = *(_QWORD *)(v6 + 232);
      if (v32 < 0)
        goto LABEL_59;
      if (v8)
      {
        v33 = 1;
        v34 = v9;
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      v11 = _compressThumbnailInternal_0(v6, v32, Value, v46, v33, v34);
LABEL_58:
      v7 = v11;
LABEL_59:
      if (v47[0])
        CFRelease(v47[0]);
      if (v46)
        CFRelease(v46);
      goto LABEL_63;
    }
    goto LABEL_68;
  }
  v5 = CFGetTypeID(v3);
  if (v5 != CMFormatDescriptionGetTypeID())
  {
LABEL_67:
    v7 = FigSignalErrorAt();
    goto LABEL_63;
  }
  v6 = *(_QWORD *)(a1 + 72);
  if (!*(_BYTE *)(v6 + 16))
  {
    v4 = *(opaqueCMSampleBuffer **)(a1 + 64);
    goto LABEL_12;
  }
LABEL_68:
  v7 = -17101;
LABEL_63:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
  if (Value)
    CFRelease(Value);
}

uint64_t _createPixelBufferFromImage(uint64_t a1, opaqueCMSampleBuffer *a2, opaqueCMSampleBuffer **a3)
{
  opaqueCMSampleBuffer *v4;
  int ImageType;
  uint64_t PixelBufferWithSurface;
  uint64_t v8;
  CVImageBufferRef ImageBuffer;
  opaqueCMSampleBuffer *v10;
  CFTypeID v11;
  CFTypeRef cf;

  v4 = a2;
  cf = 0;
  ImageType = CMPhotoGetImageType(a2);
  switch(ImageType)
  {
    case 3:
      ImageBuffer = CMSampleBufferGetImageBuffer(v4);
      if (ImageBuffer)
      {
        v10 = (opaqueCMSampleBuffer *)CFRetain(ImageBuffer);
        v4 = v10;
        cf = v10;
        if (v10)
        {
          v11 = CFGetTypeID(v10);
          if (v11 == CVPixelBufferGetTypeID())
          {
            if (a3)
              goto LABEL_11;
LABEL_15:
            v8 = 0;
            goto LABEL_16;
          }
        }
      }
      else
      {
        v4 = 0;
        cf = 0;
      }
      v8 = FigSignalErrorAt();
      if (!v4)
        return v8;
      goto LABEL_17;
    case 2:
      if (v4)
        v4 = (opaqueCMSampleBuffer *)CFRetain(v4);
      cf = v4;
      if (a3)
        goto LABEL_11;
      goto LABEL_15;
    case 1:
      PixelBufferWithSurface = CMPhotoCreatePixelBufferWithSurface(*(const __CFAllocator **)(a1 + 8), v4, 0, (CVPixelBufferRef *)&cf);
      v8 = PixelBufferWithSurface;
      v4 = (opaqueCMSampleBuffer *)cf;
      if (!a3 || (_DWORD)PixelBufferWithSurface)
      {
LABEL_16:
        if (v4)
LABEL_17:
          CFRelease(v4);
        return v8;
      }
LABEL_11:
      v8 = 0;
      *a3 = v4;
      return v8;
  }
  return FigSignalErrorAt();
}

uint64_t _createPaddedPixelBufferAndClearPadding(const void *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int a7, CFTypeRef *a8)
{
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  uint64_t UncompressedPixelFormatFromCompressedPixelFormat;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char v23;
  CFTypeRef cf;

  cf = 0;
  v23 = 0;
  v14 = 128;
  if (a5 + a3 + ~((a3 - 1) % a5) > 0x80)
    v14 = a5 + a3 + ~((a3 - 1) % a5);
  if (a6 + a4 + ~((a4 - 1) % a6) <= 0x40)
    v15 = 64;
  else
    v15 = a6 + a4 + ~((a4 - 1) % a6);
  if (a7)
    v16 = a5 + a3 + ~((a3 - 1) % a5);
  else
    v16 = v14;
  if (a7)
    v17 = a6 + a4 + ~((a4 - 1) % a6);
  else
    v17 = v15;
  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a2);
  v19 = CMPhotoSurfacePoolCreatePixelBufferAndReportOrigin(a1, UncompressedPixelFormatFromCompressedPixelFormat, v16, v17, 1, a5, a6, 1, 64, 0, (CVPixelBufferRef *)&cf, &v23);
  if ((_DWORD)v19
    || (a3 == v16 ? (v20 = a4 == v17) : (v20 = 0),
        !v20
     && ((v19 = VTFillPixelBufferBorderWithBlack(), (_DWORD)v19)
      || (v19 = CMPhotoSetPixelBufferCLAP((__CVBuffer *)cf, 0, 0, a3, a4, 0, 1), (_DWORD)v19))))
  {
    v21 = v19;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v21 = 0;
    *a8 = cf;
  }
  return v21;
}

uint64_t _compressX(uint64_t a1, CFDictionaryRef theDict, const __CFArray *a3, int a4, CFIndex a5, unsigned int a6, uint64_t a7, char a8, CFIndex idx, __int128 *a10, char a11, uint64_t a12, CFIndex *a13, uint64_t a14)
{
  opaqueCMSampleBuffer *v15;
  uint64_t v18;
  const void *Value;
  CFTypeID v20;
  const void *v21;
  const void *v22;
  const void *v23;
  void *v24;
  uint64_t PropertiesForImage;
  uint64_t v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  void *v30;
  CGColorSpace *v31;
  CGColorSpace *v32;
  CFTypeID v33;
  __CFDictionary *Mutable;
  __CFDictionary *v35;
  uint64_t v36;
  uint64_t v37;
  __CFDictionary *v38;
  uint64_t PixelBufferFromImage;
  __CFDictionary *v40;
  uint64_t *v42;
  CFTypeRef cf;
  int v49;
  int8x16_t v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  const void *v75;
  const void *v76;
  const void *v77;
  uint64_t v78;
  CFIndex v79[2];

  cf = 0;
  if (!*(_BYTE *)(a1 + 104))
  {
    v15 = a3;
    v18 = a1 + 88;
    if (theDict)
    {
      v42 = (uint64_t *)(a1 + 88);
      if (a4 == 1)
      {
        Value = CFDictionaryGetValue(theDict, CFSTR("Tiling"));
        LODWORD(v53) = 0;
        CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("CodecType"), &v53);
        if (Value)
        {
          v20 = CFGetTypeID(Value);
          if (v20 != CFBooleanGetTypeID() || CFBooleanGetValue((CFBooleanRef)Value))
            return FigSignalErrorAt();
        }
      }
      v21 = CFDictionaryGetValue(theDict, CFSTR("DryRun"));
      if ((a3 != 0) != (v21 == 0))
        return 4294950306;
      v22 = v21;
      v23 = CFDictionaryGetValue(theDict, CFSTR("DerivedImageOptions"));
      v24 = v23 ? 0 : (void *)v22;
      if (v22 && v23 != 0)
        return 4294950306;
      if (v24)
      {
        v53 = *a10;
        *(_QWORD *)&v54 = *((_QWORD *)a10 + 2);
        return _encodePixelBufferForIndex((char *)a1, a4, a5, theDict, v24, a6, a7, a8, idx, (unsigned int *)&v53, a11, a12, a13, a14);
      }
      v18 = (uint64_t)v42;
      v15 = a3;
      if (v23)
      {
        v78 = 0;
        v79[0] = -1;
        v76 = 0;
        v77 = 0;
        v75 = 0;
        v74 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        PropertiesForImage = _parseOptions(theDict, 0, 0, (uint64_t)&v53, *MEMORY[0x1E0C9D648], *(double *)(MEMORY[0x1E0C9D648] + 8), *(double *)(MEMORY[0x1E0C9D648] + 16), *(double *)(MEMORY[0x1E0C9D648] + 24));
        if ((_DWORD)PropertiesForImage)
          return PropertiesForImage;
        v28 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("DerivedImageOptions"));
        if (!v28)
          return 4294950306;
        v29 = v28;
        v52 = 0;
        if (!CMPhotoCFDictionaryGetInt32IfPresent(v28, CFSTR("Type"), &v52))
          return 4294950306;
        v30 = (void *)CFDictionaryGetValue(v29, CFSTR("Metadata"));
        if (a3 && CFArrayGetCount(a3) > 0)
        {
          v51 = -1;
          if (FigCFArrayGetInt32AtIndex())
          {
            CMPhotoCFDictionaryGetSizeIfPresent(theDict, CFSTR("BitDepth"), &v78);
            v31 = (CGColorSpace *)CFDictionaryGetValue(theDict, CFSTR("ColorSpace"));
            v32 = v31;
            if (!v31 || (v33 = CFGetTypeID(v31), v33 == CGColorSpaceGetTypeID()))
            {
              FigCFDictionaryGetValueIfPresent();
              FigCFDictionaryGetValueIfPresent();
              FigCFDictionaryGetValueIfPresent();
              v50 = 0uLL;
              PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*v42, v51, &v50, 0);
              if ((_DWORD)PropertiesForImage)
                return PropertiesForImage;
              v49 = 0;
              PropertiesForImage = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*v42, v51, 0, &v49, 0, 0);
              if ((_DWORD)PropertiesForImage)
                return PropertiesForImage;
              if (v49 == 270 || v49 == 90)
                v50 = vextq_s8(v50, v50, 8uLL);
              Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(a1 + 96), 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (!Mutable)
                return 4294950305;
              v35 = Mutable;
              v36 = CMPhotoCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CC4A78], SHIDWORD(v62));
              if ((_DWORD)v36
                || (_DWORD)v63 != -1
                && (v36 = CMPhotoCFDictionarySetInt(v35, (const void *)*MEMORY[0x1E0CC4A40], v63), (_DWORD)v36))
              {
                v27 = v36;
              }
              else
              {
                v37 = CMPhotoHEIFFileWriterAddDerivedImageToCollection(*v42, (int)v35, v30, v52, v50.i32[0], v50.i32[2], v78, v32, v77, v76, v75, a3, v52 == 1, v79);
                v27 = v37;
                if (a13)
                {
                  if (!(_DWORD)v37)
                    *a13 = v79[0];
                }
              }
              v38 = v35;
LABEL_44:
              CFRelease(v38);
              return v27;
            }
          }
          return 4294950306;
        }
        return FigSignalErrorAt();
      }
    }
    PixelBufferFromImage = _createPixelBufferFromImage(v18, v15, (opaqueCMSampleBuffer **)&cf);
    v40 = (__CFDictionary *)cf;
    if ((_DWORD)PixelBufferFromImage)
    {
      v27 = PixelBufferFromImage;
      if (!cf)
        return v27;
    }
    else
    {
      v53 = *a10;
      *(_QWORD *)&v54 = *((_QWORD *)a10 + 2);
      v27 = _encodePixelBufferForIndex((char *)a1, a4, a5, theDict, (void *)cf, a6, a7, a8, idx, (unsigned int *)&v53, a11, a12, a13, a14);
      v40 = (__CFDictionary *)cf;
      if (!cf)
        return v27;
    }
    v38 = v40;
    goto LABEL_44;
  }
  return FigSignalErrorAt();
}

uint64_t _encodePixelBufferForIndex(char *cf, int a2, CFIndex a3, const __CFDictionary *a4, void *a5, unsigned int a6, uint64_t a7, char a8, CFIndex idx, unsigned int *a10, unsigned __int8 a11, uint64_t a12, CFIndex *a13, uint64_t a14)
{
  uint64_t v19;
  CFTypeID v21;
  uint64_t MediaSubType;
  int BooleanIfPresent;
  double x;
  double y;
  double width;
  double height;
  unint64_t v28;
  uint64_t SequenceHandleForImage;
  double v30;
  double v31;
  double v32;
  unsigned int v33;
  int v34;
  uint64_t CropPreOrientation;
  double v36;
  double v37;
  uint64_t *v38;
  BOOL v39;
  int v40;
  int v41;
  _BOOL4 v42;
  CFIndex v43;
  int v44;
  uint64_t v45;
  uint64_t PropertiesForSequence;
  uint64_t *v47;
  uint64_t PropertiesForImage;
  uint64_t *v49;
  const void *v50;
  __CVBuffer *v51;
  double PixelBufferCLAPAsRect;
  double v53;
  double v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  CFIndex v59;
  int v60;
  uint64_t *v61;
  int v62;
  int v63;
  unsigned int v64;
  __CFDictionary *Mutable;
  __CFDictionary *v66;
  const void *v67;
  const void *v68;
  int v69;
  int v70;
  const void **v71;
  const void **v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void **v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _BOOL4 v81;
  int v82;
  BOOL v83;
  _QWORD *v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  const __CFNumber *v88;
  const __CFDictionary *v89;
  int v90;
  int v91;
  uint64_t v92;
  __CVBuffer *v93;
  unsigned int v94;
  _BOOL4 v95;
  int v96;
  _BOOL4 v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t *v102;
  const void *v103;
  const __CFDictionary *v104;
  __CVBuffer *v105;
  _BOOL8 v106;
  const __CFAllocator *v107;
  CFMutableDataRef v108;
  uint64_t v109;
  char v110;
  const __CFData *v111;
  CFMutableDataRef v112;
  uint64_t WritableWithCFMutableData;
  uint64_t v114;
  const void *v115;
  const void *v116;
  CFTypeID v117;
  unint64_t Length;
  __CFData *v119;
  __CFData *v120;
  int v121;
  unsigned int v122;
  const UInt8 *BytePtr;
  CFIndex v124;
  _BOOL4 v125;
  int v126;
  _BOOL4 v127;
  _BOOL4 v128;
  uint64x2_t *v129;
  int v130;
  int v131;
  int v132;
  float64x2_t v133;
  int v134;
  uint64x2_t v135;
  unint64_t v136;
  unint64_t v137;
  BOOL v138;
  _BOOL4 v139;
  int v140;
  int v141;
  uint64_t TilingOption;
  __int32 v143;
  unsigned int v144;
  unsigned int v145;
  float64x2_t v146;
  unint64_t v147;
  unint64_t *v148;
  _BOOL4 v149;
  unint64_t v151;
  char v152;
  char v153;
  uint64x2_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  BOOL v160;
  char v161;
  __CVBuffer *v162;
  uint64_t *v163;
  uint64_t v164;
  double v165;
  double v166;
  _BOOL4 v167;
  double v168;
  double v169;
  int v170;
  int YUVPixelBufferWithDithering;
  _BOOL4 v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  int64x2_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64x2_t v179;
  float64x2_t v180;
  uint64_t v181;
  double v182;
  double v183;
  double v184;
  double v185;
  uint64_t v186;
  uint64_t v187;
  double v188;
  _BOOL4 v189;
  uint64_t PaddedPixelBufferAndClearPadding;
  uint64_t v191;
  uint64_t DefaultTripletsForTransfer;
  int v193;
  int v194;
  int IsFullRange;
  int ChromaSubsamplingFromPixelFormat;
  OSType PixelFormatType;
  int v198;
  double v199;
  double v200;
  uint64_t v201;
  double v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  CFTypeRef v206;
  uint64_t *v207;
  const void *v208;
  const void *v209;
  uint64_t UpdatedQualityParameters;
  unsigned int *v211;
  uint64_t v212;
  unint64_t v213;
  const __CFDictionary *v214;
  const opaqueCMFormatDescription *v215;
  int v216;
  const __CFAllocator *v217;
  CMVideoCodecType v218;
  const __CFDictionary *v219;
  const opaqueCMFormatDescription *v220;
  const opaqueCMFormatDescription *v221;
  int v222;
  CFDictionaryRef Extensions;
  BOOL v224;
  CFDictionaryRef v225;
  uint64_t Plugin;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const __CFAllocator *v236;
  CFMutableDictionaryRef v237;
  __CFDictionary *v238;
  _BOOL4 exists;
  const void **v240;
  const void **v241;
  CFNumberRef Int16;
  const __CFString *v243;
  CFDictionaryRef v244;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v246;
  char BitDepthForPixelFormat;
  int v248;
  int v249;
  const __CFAllocator *v250;
  __CFArray *v251;
  CFNumberRef v252;
  CFNumberRef v253;
  uint64_t v254;
  _BOOL4 v255;
  CFIndex v256;
  uint64_t *v257;
  __CFDictionary *v258;
  __CFDictionary *v259;
  const void *v260;
  const void *v261;
  uint64_t FigIntrinsicsDictFromIntrinsicsMatrix;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  CFMutableDictionaryRef v266;
  uint64_t v267;
  CFTypeRef *v268;
  __CVBuffer *v269;
  CFTypeRef *v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t TargetingPThreadRootQueueWithPriority;
  uint64_t v275;
  NSObject *v276;
  uint64_t v277;
  uint64_t v278;
  CFDataRef v279;
  uint64_t v280;
  uint64_t v281;
  CFIndex *v282;
  const void *v283;
  __CVBuffer *v285;
  CFIndex v286;
  CFIndex v287;
  const opaqueCMFormatDescription *v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  int v293;
  BOOL v294;
  int v295;
  uint64_t v296;
  char v297;
  float64x2_t v298;
  double v299;
  int v300;
  unint64_t v301;
  char v302;
  int v303;
  unsigned int v304;
  uint64_t v305;
  BOOL v306;
  _BOOL4 v307;
  uint64_t v308;
  unsigned int *v309;
  float64x2_t v310;
  float64x2_t v311;
  uint64x2_t v312;
  unsigned int v313;
  int v314;
  int v315;
  _DWORD *v316;
  __CFData *v317;
  CFTypeRef URNFromAuxiliaryImageType;
  char *v320;
  _BOOL4 v321;
  CMFormatDescriptionRef desc;
  CMFormatDescriptionRef desca;
  float64x2_t v324;
  unsigned int v325;
  unsigned int v326;
  CFTypeID v327;
  const __CFDictionary *v328;
  const __CFAllocator *allocator;
  CFMutableDictionaryRef theDict;
  CFIndex v331;
  uint64_t *v332;
  CFTypeID TypeID;
  _QWORD block[11];
  unsigned int v335;
  int v336;
  BOOL v337;
  unint64_t v338;
  _BYTE v339[19];
  int v340;
  char v341;
  __int16 v342;
  char v343;
  int v344;
  uint64x2_t v345;
  unsigned int v346;
  int v347;
  uint64_t v348;
  BOOL v349;
  _BYTE v350[7];
  _DWORD *v351;
  CFIndex v352;
  CMFormatDescriptionRef v353;
  uint64x2_t v354;
  const __CFDictionary *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  int v360;
  unsigned int v361;
  __int128 v362;
  uint64_t v363;
  unsigned int v364;
  int v365;
  BOOL v366;
  char v367;
  BOOL v368;
  _BYTE cfa[36];
  int v370;
  char v371;
  __int16 v372;
  char v373;
  int v374;
  uint64x2_t v375;
  unsigned int v376;
  int v377;
  uint64_t v378;
  BOOL v379;
  _BYTE v380[7];
  _BYTE value[344];
  _DWORD v382[2];
  uint64x2_t v383;
  __int16 v384;
  char v385;
  unsigned int v386;
  int v387;
  _QWORD v388[2];
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  uint64_t v415;
  uint64x2_t v416;
  CFIndex v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  CFDataRef v427;
  const __CFDictionary *v428;
  CMVideoFormatDescriptionRef v429;
  __CVBuffer *v430;
  __CVBuffer *v431;
  _BYTE v432[19];
  uint64_t v433;
  CGSize v434;
  CGRect CleanAperture;
  CGRect v436;
  CGRect v437;

  LODWORD(v19) = a2;
  v433 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  allocator = CFGetAllocator(cf);
  v332 = (uint64_t *)(cf + 88);
  v21 = CFGetTypeID(a5);
  v428 = 0;
  v429 = 0;
  TypeID = CMFormatDescriptionGetTypeID();
  v306 = v21 == TypeID;
  v426 = 0;
  v427 = 0;
  v423 = 0;
  v424 = &v423;
  v425 = 0x2000000000;
  v419 = 0;
  v420 = &v419;
  v421 = 0x2000000000;
  v422 = 0;
  if (_allowHEIFAsynchronousEncodeOverride_onceToken != -1)
    dispatch_once(&_allowHEIFAsynchronousEncodeOverride_onceToken, &__block_literal_global_20_0);
  v308 = a12;
  v418 = 0;
  v417 = -1;
  v416 = 0uLL;
  v391 = 0;
  v392 = &v391;
  v393 = 0x17000000000;
  v409 = 0u;
  v410 = 0u;
  v411 = 0u;
  v412 = 0u;
  v413 = 0u;
  v414 = 0u;
  v394 = 0u;
  v395 = 0u;
  v396 = 0u;
  v397 = 0u;
  v398 = 0u;
  v399 = 0u;
  v400 = 0u;
  v401 = 0u;
  v402 = 0u;
  v403 = 0u;
  v404 = 0u;
  v405 = 0u;
  v406 = 0u;
  v407 = 0u;
  v408 = 0u;
  v415 = 0;
  v328 = a4;
  v297 = a8;
  if (v21 == TypeID)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a5);
    LOBYTE(v431) = 0;
    BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(a4, CFSTR("AddMIAFCompliantThumbnails"), &v431);
    CleanAperture = CMVideoFormatDescriptionGetCleanAperture((CMVideoFormatDescriptionRef)a5, 1u);
    x = CleanAperture.origin.x;
    y = CleanAperture.origin.y;
    width = CleanAperture.size.width;
    height = CleanAperture.size.height;
    if ((_DWORD)v19 == 1 && BooleanIfPresent)
    {
      v28 = 320;
      *(_QWORD *)cfa = 320;
      *(_QWORD *)&value[8] = 0;
      *(_QWORD *)value = 0;
      if ((_BYTE)v431)
      {
        SequenceHandleForImage = CMPhotoDetermineMIAFCompliantThumbnailMaxPixelSize((unint64_t *)cfa, CleanAperture.size.width, CleanAperture.size.height);
        if ((_DWORD)SequenceHandleForImage)
          goto LABEL_278;
        v28 = *(_QWORD *)cfa;
      }
      CMPhotoPixelBufferConstrainSizeToMaxSideLength(vcvtad_u64_f64(width), vcvtad_u64_f64(height), v28, 0, 0, 0, 1, (unint64_t *)value, 0, 0);
      width = (double)*(unint64_t *)value;
      height = (double)*(unint64_t *)&value[8];
      x = 0.0;
      MediaSubType = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(MediaSubType);
      y = 0.0;
    }
  }
  else
  {
    v424[3] = (uint64_t)a5;
    MediaSubType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a5);
    x = CMPhotoGetPixelBufferCLAPAsRect((__CVBuffer *)v424[3]);
    y = v30;
    width = v31;
    height = v32;
    a5 = 0;
  }
  v418 = MediaSubType;
  CVPixelBufferRetain((CVPixelBufferRef)v424[3]);
  v33 = a6 - 1;
  if ((_DWORD)v19 == 2 && v33 <= 1)
  {
    if ((int)MediaSubType > 1380411456)
    {
      if ((int)MediaSubType <= 1717856626)
      {
        if ((int)MediaSubType > 1651926375)
        {
          if ((_DWORD)MediaSubType != 1651926376)
          {
            v34 = 1717855600;
            goto LABEL_36;
          }
        }
        else if ((_DWORD)MediaSubType != 1380411457)
        {
          v34 = 1647719528;
          goto LABEL_36;
        }
      }
      else if ((int)MediaSubType <= 1751411058)
      {
        if ((_DWORD)MediaSubType != 1717856627)
        {
          v34 = 1751410032;
          goto LABEL_36;
        }
      }
      else if ((_DWORD)MediaSubType != 1751411059 && (_DWORD)MediaSubType != 1751527984)
      {
        v34 = 1932996149;
        goto LABEL_36;
      }
    }
    else if ((int)MediaSubType > 1278226735)
    {
      if ((MediaSubType - 1278226736) > 6 || ((1 << (MediaSubType - 48)) & 0x45) == 0)
      {
        v34 = 1380410945;
        goto LABEL_36;
      }
    }
    else if (((MediaSubType - 1278226488) > 0x30
            || ((1 << (MediaSubType - 56)) & 0x1400000000001) == 0)
           && (_DWORD)MediaSubType != 825306677)
    {
      v34 = 825437747;
LABEL_36:
      if ((_DWORD)MediaSubType == v34)
        goto LABEL_37;
      SequenceHandleForImage = FigSignalErrorAt();
LABEL_278:
      PropertiesForSequence = SequenceHandleForImage;
      v84 = 0;
      v307 = 0;
      v321 = 0;
      goto LABEL_279;
    }
  }
LABEL_37:
  desc = (CMFormatDescriptionRef)a5;
  if ((_DWORD)v19)
  {
    if (v21 != TypeID)
    {
      SequenceHandleForImage = CMPhotoHEIFFileWriterGetSequenceHandleForImage(*v332, a3, 0, &idx);
      if ((_DWORD)SequenceHandleForImage)
        goto LABEL_278;
    }
  }
  v331 = idx;
  v321 = idx != -1;
  CropPreOrientation = _parseOptions(v328, v19, v321, (uint64_t)(v392 + 3), x, y, width, height);
  if ((_DWORD)CropPreOrientation)
    goto LABEL_676;
  v296 = a7;
  if (*((_DWORD *)v392 + 7) == 1936484717 && (_DWORD)MediaSubType != 875704422 && (_DWORD)MediaSubType != 1652056888)
  {
    v437.origin.x = x;
    v437.origin.y = y;
    v437.size.width = width;
    v437.size.height = height;
    if (!CGRectEqualToRect(*((CGRect *)v392 + 6), v437))
    {
      CropPreOrientation = FigSignalErrorAt();
      if ((_DWORD)CropPreOrientation)
        goto LABEL_676;
    }
  }
  v38 = v392;
  if ((_DWORD)v19)
    v39 = 0;
  else
    v39 = v21 == TypeID;
  v40 = v39;
  if (*((_BYTE *)v392 + 340) && (v40 & 1) == 0 || (_DWORD)v19 && v392[43] != -1)
  {
    CropPreOrientation = FigSignalErrorAt();
    goto LABEL_676;
  }
  v315 = v40;
  if (!*((_BYTE *)v392 + 98) || !*((_BYTE *)v392 + 176) || (v41 = *((_DWORD *)v392 + 47), v41 == 1))
  {
    v293 = 0;
    goto LABEL_59;
  }
  if (v21 != TypeID)
  {
    *(_QWORD *)value = 0;
    CropPreOrientation = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(*((_QWORD *)cf + 4), (__CVBuffer *)v424[3], 0, 1, v41, MediaSubType, 0, 0, *((CGFloat *)v392 + 24), *((CGFloat *)v392 + 25), *((CGFloat *)v392 + 26), *((CGFloat *)v392 + 27), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v36, v37, *((_BYTE *)v392 + 304), 64, *((_DWORD *)v392 + 68),
                           BYTE1(*((_DWORD *)v392 + 68)),
                           BYTE2(*((_DWORD *)v392 + 68)),
                           HIBYTE(*((_DWORD *)v392 + 68)),
                           (__CVBuffer **)value);
    if (!(_DWORD)CropPreOrientation)
    {
      v49 = v424;
      v50 = (const void *)v424[3];
      if (v50)
      {
        CFRelease(v50);
        v49 = v424;
      }
      v51 = *(__CVBuffer **)value;
      v49[3] = *(_QWORD *)value;
      PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(v51);
      width = v53;
      height = v54;
      v293 = 0;
      v47 = v392;
      *((double *)v392 + 24) = PixelBufferCLAPAsRect;
      v47[25] = v55;
      *((double *)v47 + 26) = v53;
      *((double *)v47 + 27) = v54;
      goto LABEL_81;
    }
LABEL_676:
    PropertiesForSequence = CropPreOrientation;
    v84 = 0;
    v307 = 0;
    goto LABEL_279;
  }
  memset(value, 0, 32);
  v388[0] = vcvtad_u64_f64(x);
  v388[1] = vcvtad_u64_f64(y);
  v389 = vcvtad_u64_f64(width);
  v390 = vcvtad_u64_f64(height);
  CropPreOrientation = CMPhotoGetCropPreOrientation(v389, v390, v388, v41, value);
  if ((_DWORD)CropPreOrientation)
    goto LABEL_676;
  width = (double)*(unint64_t *)&value[16];
  height = (double)*(unint64_t *)&value[24];
  v47 = v392;
  *((float64x2_t *)v392 + 12) = vcvtq_f64_u64(*(uint64x2_t *)value);
  *((double *)v47 + 26) = width;
  *((double *)v47 + 27) = height;
  v293 = 1;
LABEL_81:
  *((_BYTE *)v47 + 98) = 0;
  v56 = 1;
  *((_DWORD *)v47 + 47) = 1;
  v57 = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(1, (_DWORD *)v47 + 45, (int *)v47 + 46);
  if ((_DWORD)v57)
  {
    PropertiesForSequence = v57;
    v84 = 0;
    v307 = 0;
    desca = 0;
    theDict = 0;
    URNFromAuxiliaryImageType = 0;
    v317 = 0;
    goto LABEL_643;
  }
  v38 = v392;
LABEL_59:
  if (*((_BYTE *)v38 + 279))
    v42 = 1;
  else
    v42 = *((_BYTE *)v38 + 280) != 0;
  v307 = v42;
  if (*((_BYTE *)v38 + 24) || v21 == TypeID)
    goto LABEL_89;
  v43 = idx;
  v44 = *((_DWORD *)v38 + 7);
  *(_DWORD *)value = v44;
  if (idx < 0)
  {
    if ((_DWORD)v19)
    {
      PropertiesForImage = CMPhotoHEIFFileWriterGetPropertiesForImage(*v332, a3, 0, value);
      if ((_DWORD)PropertiesForImage)
        goto LABEL_146;
    }
    goto LABEL_88;
  }
  switch((_DWORD)v19)
  {
    case 2:
      v58 = *v332;
      v59 = idx;
      v60 = 2;
LABEL_85:
      PropertiesForSequence = CMPhotoHEIFFileWriterGetPropertiesForSequence(v58, v59, v60, 0, value);
      if ((_DWORD)PropertiesForSequence == -16993)
        PropertiesForSequence = CMPhotoHEIFFileWriterGetPropertiesForSequence(*v332, v43, 0, 0, value);
      if ((_DWORD)PropertiesForSequence)
        goto LABEL_147;
LABEL_88:
      *((_DWORD *)v38 + 7) = *(_DWORD *)value;
      goto LABEL_89;
    case 1:
      v58 = *v332;
      v59 = idx;
      v60 = 1;
      goto LABEL_85;
    case 0:
      v45 = CMPhotoHEIFFileWriterGetPropertiesForSequence(*v332, idx, 0, 0, value);
      if ((_DWORD)v45)
      {
        PropertiesForSequence = v45;
        if ((_DWORD)v45 != -16993)
        {
LABEL_147:
          v84 = 0;
LABEL_279:
          desca = 0;
          theDict = 0;
          URNFromAuxiliaryImageType = 0;
          v317 = 0;
          goto LABEL_722;
        }
        *(_DWORD *)value = v44;
      }
      goto LABEL_88;
  }
  PropertiesForImage = FigSignalErrorAt();
  if ((_DWORD)PropertiesForImage)
    goto LABEL_146;
LABEL_89:
  PropertiesForImage = CMPhotoGetDestinationPixelFormatFromOptions(v328, *((_DWORD *)v392 + 7), MediaSubType, &v418);
  if ((_DWORD)PropertiesForImage)
  {
LABEL_146:
    PropertiesForSequence = PropertiesForImage;
    goto LABEL_147;
  }
  v326 = a6;
  v327 = v21;
  v61 = v392;
  v62 = cf[64];
  v63 = cf[65];
  v64 = v418;
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v84 = 0;
    desca = 0;
    theDict = 0;
    URNFromAuxiliaryImageType = 0;
    v317 = 0;
    v56 = 1;
    PropertiesForSequence = 4294950305;
    v21 = v327;
    goto LABEL_643;
  }
  v66 = Mutable;
  if (v62)
    CFDictionarySetValue(Mutable, CFSTR("UseCodecSessionPool"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (v63)
    CFDictionarySetValue(v66, CFSTR("ForceHighSpeedEncode"), (const void *)*MEMORY[0x1E0C9AE50]);
  CMPhotoCFDictionarySetInt32(v66, CFSTR("ThreadPriority"), *((_DWORD *)v61 + 84));
  v67 = (const void *)v61[5];
  v21 = v327;
  if (v67)
    CFDictionarySetValue(v66, CFSTR("QualityControllerType"), v67);
  v68 = (const void *)v61[6];
  if (v68)
    CFDictionarySetValue(v66, CFSTR("QualityControllerParameters"), v68);
  v69 = *((_DWORD *)v61 + 66);
  if (v69 != -1)
    CMPhotoCFDictionarySetInt(v66, CFSTR("SlimXBitShift"), v69);
  v70 = *((_DWORD *)v61 + 67);
  v71 = (const void **)MEMORY[0x1E0C9AE50];
  if (v70 != -1)
    CMPhotoCFDictionarySetInt(v66, CFSTR("SlimHrlcRunLengthValue"), v70);
  CMPhotoCFDictionarySetInt(v66, CFSTR("SlimCodecFlavor"), *((_DWORD *)v61 + 65));
  if (*((_BYTE *)v61 + 89))
  {
    if (*((_BYTE *)v61 + 88))
      v72 = v71;
    else
      v72 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v66, CFSTR("AllowPixelTransfer"), *v72);
  }
  if (*((_BYTE *)v61 + 276))
    CFDictionarySetValue(v66, CFSTR("RequireHardwareCodec"), *v71);
  if (*((_BYTE *)v61 + 277))
    CFDictionarySetValue(v66, CFSTR("PreferSoftwareCodec"), *v71);
  v73 = (const void *)v61[41];
  if (v73)
    CFDictionarySetValue(v66, CFSTR("CustomMinimumSourceAlignment"), v73);
  v74 = (const void *)v61[36];
  if (v74)
  {
    CFDictionarySetValue(v66, CFSTR("UseCodecSessionPool"), v74);
    if (v331 != -1)
      FigCFEqual();
  }
  v75 = (const void *)v61[37];
  if (v75)
    CFDictionarySetValue(v66, CFSTR("Priority"), v75);
  v76 = (const void *)v61[10];
  if (v76)
    CFDictionarySetValue(v66, CFSTR("UsePixelsOutsideCrop"), v76);
  if (*((_BYTE *)v61 + 305))
  {
    v77 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*((_BYTE *)v61 + 304))
      v77 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v66, CFSTR("UseVTCompression"), *v77);
  }
  if (v331 != -1)
  {
    if (!CFDictionaryContainsKey(v66, CFSTR("UseVTCompression")))
    {
      CFDictionarySetValue(v66, CFSTR("UseVTCompression"), (const void *)*MEMORY[0x1E0C9AE50]);
      *((_BYTE *)v61 + 304) = 1;
    }
    if (!CFDictionaryContainsKey(v66, CFSTR("UseCodecSessionPool")))
    {
      v78 = *MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(v66, CFSTR("UseCodecSessionPool"), (const void *)*MEMORY[0x1E0C9AE50]);
      v61[36] = v78;
    }
  }
  v320 = cf;
  theDict = v66;
  if ((_DWORD)v19 != 2)
  {
    v317 = 0;
    URNFromAuxiliaryImageType = 0;
    v295 = 0;
    goto LABEL_299;
  }
  if (*((_BYTE *)v61 + 32))
  {
    v79 = v326;
    goto LABEL_156;
  }
  v80 = v61[40];
  v81 = v80 != 0;
  if (v80 && !*((_BYTE *)v61 + 24))
    *((_DWORD *)v61 + 7) = 1785750887;
  if (v64 == 1278226736 || v64 == 1278226742)
  {
    v82 = *((_DWORD *)v61 + 7);
    if (v80)
      v83 = 1;
    else
      v83 = v82 == 1785750887;
    v81 = v83;
  }
  else
  {
    v82 = *((_DWORD *)v61 + 7);
  }
  *(_QWORD *)value = 0;
  *(_QWORD *)cfa = 0;
  v85 = CMPhotoQualityControllerCopyDefaultControllerForAuxiliaryImage(v82, v81, (CFNumberRef *)value, (CFNumberRef *)cfa);
  v79 = v326;
  if ((_DWORD)v85)
  {
    PropertiesForSequence = v85;
    CFRelease(theDict);
    goto LABEL_147;
  }
  CFDictionarySetValue(v66, CFSTR("QualityControllerType"), *(const void **)value);
  if (*(_QWORD *)cfa)
    CFDictionarySetValue(v66, CFSTR("QualityControllerParameters"), *(const void **)cfa);
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
  if (*(_QWORD *)cfa)
    CFRelease(*(CFTypeRef *)cfa);
LABEL_156:
  v387 = 0;
  if (FigCFDictionaryGetIntIfPresent())
    v86 = v387 == 5;
  else
    v86 = 0;
  v87 = v86;
  v88 = (const __CFNumber *)v392[40];
  if (v88 && (v87 & 1) == 0)
    goto LABEL_274;
  v295 = v87;
  if (v327 == TypeID)
  {
    if ((int)MediaSubType > 1380411456)
    {
      v89 = v328;
      if ((int)MediaSubType <= 1717856626)
      {
        if ((int)MediaSubType > 1651926375)
        {
          if ((_DWORD)MediaSubType == 1651926376)
            goto LABEL_264;
          v90 = 1717855600;
        }
        else
        {
          if ((_DWORD)MediaSubType == 1380411457)
            goto LABEL_264;
          v90 = 1647719528;
        }
      }
      else if ((int)MediaSubType <= 1751411058)
      {
        if ((_DWORD)MediaSubType == 1717856627)
          goto LABEL_264;
        v90 = 1751410032;
      }
      else
      {
        if ((_DWORD)MediaSubType == 1751411059 || (_DWORD)MediaSubType == 1932996149)
          goto LABEL_264;
        v90 = 1751527984;
      }
    }
    else
    {
      v89 = v328;
      if ((int)MediaSubType <= 1278226735)
      {
        if (((MediaSubType - 1278226488) > 0x30
           || ((1 << (MediaSubType - 56)) & 0x1400000000001) == 0)
          && (_DWORD)MediaSubType != 825306677)
        {
          v90 = 825437747;
          goto LABEL_263;
        }
LABEL_264:
        if (v87)
          LODWORD(MediaSubType) = 1278226742;
        else
          LODWORD(MediaSubType) = 1278226488;
        v418 = MediaSubType;
LABEL_268:
        if (v79 != 4)
        {
          v317 = 0;
          URNFromAuxiliaryImageType = 0;
          goto LABEL_299;
        }
        if (v89)
        {
LABEL_270:
          v115 = CFDictionaryGetValue(v89, CFSTR("AuxiliaryImageCustomTypeURN"));
          if (v115)
          {
            v116 = v115;
            v117 = CFGetTypeID(v115);
            if (v117 == CFStringGetTypeID())
            {
              URNFromAuxiliaryImageType = CFRetain(v116);
              v317 = 0;
              goto LABEL_299;
            }
          }
        }
LABEL_274:
        v92 = FigSignalErrorAt();
LABEL_275:
        PropertiesForSequence = v92;
LABEL_276:
        v317 = 0;
        URNFromAuxiliaryImageType = 0;
        goto LABEL_721;
      }
      if ((MediaSubType - 1278226736) <= 6 && ((1 << (MediaSubType - 48)) & 0x45) != 0)
        goto LABEL_264;
      v90 = 1380410945;
    }
LABEL_263:
    if ((_DWORD)MediaSubType != v90)
      goto LABEL_268;
    goto LABEL_264;
  }
  v91 = *((_DWORD *)v392 + 7);
  if (v91 == 1936484717)
  {
    v428 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v428)
    {
      v317 = 0;
      URNFromAuxiliaryImageType = 0;
      PropertiesForSequence = 4294950305;
      goto LABEL_721;
    }
    CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v424[3]);
    v92 = FigCFDictionarySetInt();
    if ((_DWORD)v92)
      goto LABEL_275;
    CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v424[3]);
    v92 = FigCFDictionarySetInt();
    if ((_DWORD)v92)
      goto LABEL_275;
    v93 = (__CVBuffer *)v424[3];
  }
  else
  {
    *(_QWORD *)value = 0;
    if (v418 == 1278226742)
    {
      if (!v87 || v91 != 1785750887)
        goto LABEL_274;
      v94 = 16;
    }
    else if (v418 == 1278226736)
    {
      if (v91 == 1785750887)
        v94 = 16;
      else
        v94 = 10;
      if (v91 == 1785750887 && (v87 & 1) == 0)
        goto LABEL_274;
    }
    else if (v87)
    {
      v94 = 16;
    }
    else
    {
      v94 = 8;
    }
    v95 = v91 == 1752589105;
    if (v418 != 1278226736)
      v95 = 0;
    if (v418 == 1278226742)
      v96 = v87;
    else
      v96 = 0;
    v97 = v94 == 16 && v418 == 1278226736;
    v98 = v79 == 5 || v95;
    v39 = v91 == 1785750887;
    v99 = v96 | v97;
    if (!v39)
      v99 = 0;
    v100 = v98 | v99;
    if ((_DWORD)MediaSubType == 1751527984)
      v101 = 1;
    else
      v101 = v100;
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      kdebug_trace();
      v88 = (const __CFNumber *)v392[40];
    }
    PropertiesForSequence = CMPhotoCreateCompressionCompatiblePixelBufferWithAuxType((CVPixelBufferRef)v424[3], *((const void **)cf + 3), v79, v94, v88, v101, (CFTypeRef *)value, &v428);
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    if ((_DWORD)PropertiesForSequence)
      goto LABEL_276;
    v102 = v424;
    v103 = (const void *)v424[3];
    if (v103)
    {
      CFRelease(v103);
      v102 = v424;
    }
    v93 = *(__CVBuffer **)value;
    v102[3] = *(_QWORD *)value;
  }
  LODWORD(MediaSubType) = CVPixelBufferGetPixelFormatType(v93);
  v418 = MediaSubType;
  if (v79 == 4)
  {
    v89 = v328;
    if (v328)
      goto LABEL_270;
    goto LABEL_274;
  }
  v104 = v428;
  v105 = (__CVBuffer *)v424[3];
  URNFromAuxiliaryImageType = CMPhotoCreateURNFromAuxiliaryImageType(v79);
  if (v33 < 2)
  {
    *(_QWORD *)cfa = 0;
    memset(value, 0, 32);
    LODWORD(v431) = 0;
    LODWORD(v430) = 0;
    v107 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v112 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (v112)
    {
      WritableWithCFMutableData = FigByteStreamCreateWritableWithCFMutableData();
      if ((_DWORD)WritableWithCFMutableData)
      {
        PropertiesForSequence = WritableWithCFMutableData;
      }
      else
      {
        CMPhotoBitStreamWriteInit(value, *(uint64_t *)cfa, 0);
        if (v326 == 1)
          v114 = 1;
        else
          v114 = 2;
        if (v104 && !CFDictionaryContainsKey(v104, CFSTR("FloatMaxValue")))
        {
          CMPhotoBitStreamWriteBits((uint64_t)value, 0, 4u);
          CMPhotoBitStreamWriteExpGolomb((uint64_t)value, v114);
        }
        else
        {
          if (!FigCFDictionaryGetFloatIfPresent() || !FigCFDictionaryGetFloatIfPresent())
          {
            v111 = 0;
            v110 = 0;
            PropertiesForSequence = 4294950304;
            goto LABEL_285;
          }
          if (v326 == 2)
          {
            CMPhotoBitStreamWriteBits((uint64_t)value, 3, 2u);
            CMPhotoBitStreamWriteBits((uint64_t)value, 0, 2u);
          }
          else
          {
            CMPhotoBitStreamWriteBits((uint64_t)value, 0, 2u);
            CMPhotoBitStreamWriteBits((uint64_t)value, 3, 2u);
            CMPhotoBitStreamWriteExpGolomb((uint64_t)value, v114);
            v114 = 0;
          }
          CMPhotoBitStreamWriteExpGolomb((uint64_t)value, v114);
          _writeDepthRepInfoElement((uint64_t)value, *(float *)&v430);
          _writeDepthRepInfoElement((uint64_t)value, *(float *)&v431);
        }
        PropertiesForSequence = CMPhotoBitStreamWriteFlush((uint64_t)value);
        if (!(_DWORD)PropertiesForSequence)
        {
          v110 = -79;
          v111 = v112;
          v112 = 0;
          goto LABEL_285;
        }
      }
      v111 = 0;
      v110 = 0;
    }
    else
    {
      v111 = 0;
      v110 = 0;
      PropertiesForSequence = 4294950305;
    }
LABEL_285:
    if (*(_QWORD *)cfa)
      CFRelease(*(CFTypeRef *)cfa);
    if (v112)
      CFRelease(v112);
    if ((_DWORD)PropertiesForSequence)
      goto LABEL_247;
LABEL_290:
    if (v111)
    {
      Length = CFDataGetLength(v111);
      v119 = CFDataCreateMutable(v107, 0);
      if (!v119)
      {
        v317 = 0;
        PropertiesForSequence = 4294950305;
LABEL_297:
        CFRelease(v111);
LABEL_298:
        if (!(_DWORD)PropertiesForSequence)
          goto LABEL_299;
LABEL_721:
        v84 = 0;
        desca = 0;
        goto LABEL_722;
      }
      v120 = v119;
      v121 = Length + Length / 0xFF;
      *(_DWORD *)value = bswap32(v121 + 8);
      CFDataAppendBytes(v119, value, 4);
      *(_DWORD *)value = bswap32(v121 + 4);
      CFDataAppendBytes(v120, value, 4);
      *(_WORD *)value = 334;
      CFDataAppendBytes(v120, value, 2);
      value[0] = v110;
      CFDataAppendBytes(v120, value, 1);
      value[0] = -1;
      if (Length >= 0xFF)
      {
        v122 = Length / 0xFF;
        do
        {
          CFDataAppendBytes(v120, value, 1);
          --v122;
        }
        while (v122);
      }
      cfa[0] = Length + Length / 0xFF;
      CFDataAppendBytes(v120, cfa, 1);
      BytePtr = CFDataGetBytePtr(v111);
      v124 = CFDataGetLength(v111);
      v317 = v120;
      CFDataAppendBytes(v120, BytePtr, v124);
      PropertiesForSequence = 0;
LABEL_296:
      if (!v111)
        goto LABEL_298;
      goto LABEL_297;
    }
    v317 = 0;
LABEL_720:
    PropertiesForSequence = 4294950304;
    goto LABEL_721;
  }
  v317 = 0;
  if (v79 != 5)
  {
    if (v79 != 3)
      goto LABEL_720;
    *(_QWORD *)cfa = 0;
    memset(value, 0, 32);
    v106 = CMPhotoPixelBufferGetAlphaMode(v105) == 1;
    v107 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v108 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (v108)
    {
      v109 = FigByteStreamCreateWritableWithCFMutableData();
      if ((_DWORD)v109)
        goto LABEL_708;
      CMPhotoBitStreamWriteInit(value, *(uint64_t *)cfa, 0);
      v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 1u);
      if ((_DWORD)v109
        || (v109 = CMPhotoBitStreamWriteBits((uint64_t)value, v106, 3u), (_DWORD)v109)
        || (v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 3u), (_DWORD)v109)
        || (v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 8u), (_DWORD)v109)
        || (v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 255, 8u), (_DWORD)v109)
        || (v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 1u), (_DWORD)v109)
        || (v109 = CMPhotoBitStreamWriteBits((uint64_t)value, 0, 1u), (_DWORD)v109))
      {
LABEL_708:
        PropertiesForSequence = v109;
      }
      else
      {
        PropertiesForSequence = CMPhotoBitStreamWriteFlush((uint64_t)value);
        if (!(_DWORD)PropertiesForSequence)
        {
          v110 = -91;
          v111 = v108;
          v108 = 0;
          goto LABEL_242;
        }
      }
      v111 = 0;
      v110 = 0;
    }
    else
    {
      v111 = 0;
      v110 = 0;
      PropertiesForSequence = 4294950305;
    }
LABEL_242:
    if (*(_QWORD *)cfa)
      CFRelease(*(CFTypeRef *)cfa);
    if (v108)
      CFRelease(v108);
    if ((_DWORD)PropertiesForSequence)
    {
LABEL_247:
      v317 = 0;
      goto LABEL_296;
    }
    goto LABEL_290;
  }
LABEL_299:
  v386 = v418;
  v125 = CMPhotoEncoderSupportsPixelFormat(v418, *((_DWORD *)v392 + 7), *((unsigned __int8 *)v392 + 277), &v386);
  if (!v386
    || ((v126 = v418, !v125) ? (v127 = 1) : (v127 = MediaSubType != v418), (_DWORD)MediaSubType != v418 && !v125))
  {
    PropertiesForSequence = FigSignalErrorAt();
    v84 = 0;
    desca = 0;
    goto LABEL_679;
  }
  v128 = 0;
  v129 = (uint64x2_t *)v392;
  v130 = *((unsigned __int8 *)v392 + 96);
  v131 = *((unsigned __int8 *)v392 + 97);
  v132 = *((_DWORD *)v392 + 7);
  v310 = *((float64x2_t *)v392 + 12);
  v133 = *((float64x2_t *)v392 + 13);
  *(_QWORD *)&value[8] = 0;
  *(_QWORD *)value = 0;
  if ((_DWORD)v19 == 2 && v326 == 4)
  {
    v324 = v133;
    v134 = FigCFEqual();
    v133 = v324;
    v128 = v134 != 0;
  }
  v325 = v19;
  v135 = vcvtq_u64_f64(vrndaq_f64(v133));
  v136 = v129[5].u32[3];
  if ((int)v136 < 1)
    goto LABEL_319;
  if (v135.i64[0] <= (unint64_t)v135.i64[1])
    v137 = v135.u64[1];
  else
    v137 = v135.i64[0];
  v138 = v137 > v136;
  v139 = v137 != v136;
  v140 = v138;
  if (!v130)
    v139 = v140;
  if (v139)
  {
    CMPhotoPixelBufferConstrainSizeToMaxSideLength(v135.u64[0], v135.u64[1], v136, 0, 0, v130, v131, (unint64_t *)&v416, 0, 0);
    v141 = 1;
  }
  else
  {
LABEL_319:
    v141 = 0;
    v416 = v135;
  }
  if (v325 == 2 && v326 == 3 && v327 != TypeID)
  {
    TilingOption = CMPhotoHEIFFileWriterGetPropertiesForImage(*v332, a3, value, 0);
    if ((_DWORD)TilingOption)
    {
LABEL_672:
      PropertiesForSequence = TilingOption;
      goto LABEL_673;
    }
    v143 = *(_DWORD *)value;
    if (*(_OWORD *)value != *(_OWORD *)&v416)
    {
      v141 = 0;
      v144 = *(_DWORD *)value - v416.i32[0];
      if (*(_DWORD *)value - v416.i32[0] < 0)
        v144 = v416.i32[0] - *(_DWORD *)value;
      v145 = *(_DWORD *)&value[8] - v416.i32[2];
      if (*(_DWORD *)&value[8] - v416.i32[2] < 0)
        v145 = v416.i32[2] - *(_DWORD *)&value[8];
      if (v144 <= 1 && v145 <= 1)
      {
        if (*(_QWORD *)value <= *(_QWORD *)&value[8])
          v143 = *(_DWORD *)&value[8];
        v129[5].i32[3] = v143;
        v141 = 1;
      }
    }
  }
  if (v328)
  {
    TilingOption = CMPhotoGetTilingOption(v328, v416.u64[0], v416.u64[1], v126, v132, &v129[6].i8[8], &v129[6].i8[9], (unint64_t *)&v129[8], (uint64x2_t *)v129[9].i64);
    if ((_DWORD)TilingOption)
      goto LABEL_672;
  }
  v146 = vrndaq_f64(v310);
  if (v129[6].i8[8])
  {
    v147 = v416.i64[0];
    if (!v129[6].i8[9])
      goto LABEL_369;
    goto LABEL_365;
  }
  v311 = v146;
  if (v128)
  {
    if (*(_OWORD *)value != 0)
    {
LABEL_343:
      v148 = (unint64_t *)value;
      goto LABEL_345;
    }
    if (v327 == TypeID)
    {
      *(_OWORD *)value = *((_OWORD *)v320 + 11);
      goto LABEL_343;
    }
    v148 = (unint64_t *)value;
    TilingOption = CMPhotoHEIFFileWriterGetPropertiesForImage(*v332, a3, value, 0);
    if ((_DWORD)TilingOption)
      goto LABEL_672;
  }
  else
  {
    v148 = (unint64_t *)&v416;
  }
LABEL_345:
  TilingOption = CMPhotoSetDefaultTilingOptionForCodec(v132, *v148, v148[1], v126, v129[8].i64);
  if ((_DWORD)TilingOption)
    goto LABEL_672;
  v147 = v416.i64[0];
  v149 = v416.i64[0] >= (unint64_t)(2 * v129[8].i64[0]) || v416.i64[1] >= (unint64_t)(2 * v129[8].i64[1]);
  v146 = v311;
  if (v325 == 2)
  {
    if (v331 != -1)
      v149 = 0;
    v149 = v149 && (v416.i64[0] == *(_QWORD *)value && v416.i64[1] == *(_QWORD *)&value[8] || v128);
  }
  else
  {
    if (v325)
    {
LABEL_368:
      v129[6].i8[9] = 0;
      goto LABEL_369;
    }
    if (v331 != -1)
      v149 = 0;
  }
  v129[6].i8[9] = v149;
  if (v149)
  {
LABEL_365:
    v151 = v129[8].u64[0];
    if (v151 < v147 || v129[8].i64[1] < (unint64_t)v416.i64[1])
    {
      v152 = 0;
      v129[7] = vcvtq_u64_f64(v146);
      v153 = 1;
      goto LABEL_370;
    }
    goto LABEL_368;
  }
LABEL_369:
  v153 = 0;
  v154 = v416;
  v129[7] = vcvtq_u64_f64(v146);
  v129[8] = v154;
  v151 = v129[8].u64[0];
  v152 = 1;
LABEL_370:
  v155 = (v147 + v151 - 1) / v151;
  v156 = v416.u64[1];
  v157 = v129[8].u64[1];
  v158 = (v416.i64[1] + v157 - 1) / v157;
  v129[10].i64[0] = v155;
  v129[10].i64[1] = v158;
  if (v132 == 1936484717)
  {
    if ((v152 & 1) != 0)
      goto LABEL_384;
    PropertiesForSequence = 4294950297;
    if (v155 != 1 || v158 > 4)
    {
LABEL_673:
      v84 = 0;
      desca = 0;
      v56 = 1;
      LODWORD(v19) = v325;
LABEL_680:
      cf = v320;
      goto LABEL_643;
    }
    v159 = v129[9].u64[1];
    if (v159)
      v160 = v159 >= v157;
    else
      v160 = 1;
    v161 = !v160;
    v129[6].i8[10] = v161;
  }
  if (v331 == -1)
    v153 = 0;
  if ((v153 & 1) != 0)
  {
    TilingOption = FigSignalErrorAt();
    if (!(_DWORD)TilingOption)
    {
      v156 = v416.u64[1];
      v147 = v416.i64[0];
      goto LABEL_384;
    }
    goto LABEL_672;
  }
LABEL_384:
  v162 = (__CVBuffer *)v424[3];
  v163 = v392;
  v164 = v386;
  *(_QWORD *)cfa = 0;
  v430 = 0;
  v431 = 0;
  v165 = (double)v147;
  v166 = (double)v156;
  v167 = (vabdd_f64(floor((double)v147 * 0.5), (double)v147 * 0.5) >= 0.000001
       || vabdd_f64(floor(v166 * 0.5), v166 * 0.5) >= 0.000001)
      && !v141
      && *((_BYTE *)v392 + 105) == 0;
  v168 = *MEMORY[0x1E0C9D820];
  v169 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v170 = v141 | v127;
  if (*((_BYTE *)v392 + 106) && v167 | v170)
    goto LABEL_700;
  if (!v170)
  {
LABEL_412:
    v173 = 0;
LABEL_413:
    LODWORD(v19) = v325;
    if (!v167)
    {
LABEL_446:
      v168 = *((double *)v163 + 26);
      v169 = *((double *)v163 + 27);
      v188 = v169;
      v299 = v168;
      goto LABEL_447;
    }
    goto LABEL_414;
  }
  if (v141)
  {
    if (v127)
      goto LABEL_394;
LABEL_405:
    if (v327 != TypeID)
    {
      v172 = 0;
      goto LABEL_409;
    }
LABEL_406:
    v173 = 0;
    v163[24] = 0;
    v163[25] = 0;
    *((double *)v163 + 26) = v165;
    *((double *)v163 + 27) = v166;
    v163[14] = 0;
    v163[15] = 0;
    goto LABEL_413;
  }
  *((_DWORD *)v392 + 23) = 0;
  if (!v127)
    goto LABEL_405;
LABEL_394:
  if (!*((_BYTE *)v163 + 88))
  {
LABEL_700:
    PropertiesForSequence = FigSignalErrorAt();
    v206 = 0;
    v188 = v169;
    v299 = v168;
    LODWORD(v19) = v325;
    goto LABEL_701;
  }
  if (v327 == TypeID)
    goto LABEL_406;
  if (*((_BYTE *)v163 + 56))
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    YUVPixelBufferWithDithering = CMPhotoCreateYUVPixelBufferWithDithering(v162, *((_QWORD *)v320 + 3), v164, cfa);
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v39 = YUVPixelBufferWithDithering == 0;
    v172 = YUVPixelBufferWithDithering != 0;
    if (v39)
      v162 = *(__CVBuffer **)cfa;
  }
  else
  {
    v172 = 1;
  }
LABEL_409:
  if (!(v172 | v141))
    goto LABEL_412;
  if (*((_BYTE *)v163 + 105))
  {
    v174 = v163[16];
    v175 = v163[17];
  }
  else
  {
    v175 = 16;
    v174 = 16;
  }
  *(_QWORD *)&value[8] = 0;
  *(_QWORD *)value = 0;
  if (v141)
    v189 = *((_BYTE *)v163 + 97) != 0;
  else
    v189 = 0;
  CMPhotoPixelBufferConstrainSizeToMaxSideLength(v147, v156, *((int *)v163 + 23), 0, 0, *((unsigned __int8 *)v163 + 96), v189, (unint64_t *)value, 0, 0);
  if (*((_BYTE *)v163 + 304))
  {
    v173 = 0;
  }
  else
  {
    PaddedPixelBufferAndClearPadding = _createPaddedPixelBufferAndClearPadding(*((const void **)v320 + 3), v164, *(unint64_t *)value, *(unint64_t *)&value[8], v174, v175, 0, (CFTypeRef *)&v431);
    if ((_DWORD)PaddedPixelBufferAndClearPadding)
    {
      PropertiesForSequence = PaddedPixelBufferAndClearPadding;
      LODWORD(v19) = v325;
      goto LABEL_689;
    }
    CFDictionarySetValue(theDict, CFSTR("UsePixelsOutsideCrop"), (const void *)*MEMORY[0x1E0C9AE50]);
    v165 = (double)*(unint64_t *)value;
    v166 = (double)*(unint64_t *)&value[8];
    v173 = 1;
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v191 = v164;
  DefaultTripletsForTransfer = CMPhotoCreateDefaultTripletsForTransfer(v162, v164);
  v194 = v193;
  IsFullRange = CMPhotoPixelFormatIsFullRange(v191);
  v313 = v191;
  ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(v191);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v162);
  v198 = CMPhotoPixelFormatContainsRGB(PixelFormatType);
  if (!v141 && v172 && *((_BYTE *)v163 + 57) && ChromaSubsamplingFromPixelFormat == 1 && IsFullRange && v198)
    v201 = CMPhotoPixelBufferConvertRGBToYCbCrIdentityMatrix(*((const void **)v320 + 3), 1, v162, &v431);
  else
    v201 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(*((_QWORD *)v320 + 4), v162, 0, 1, 1, v313, DefaultTripletsForTransfer, v194, *((CGFloat *)v163 + 24), *((CGFloat *)v163 + 25), *((CGFloat *)v163 + 26), *((CGFloat *)v163 + 27), v165, v166, v199, v200, *((_BYTE *)v163 + 304), 64, *((_DWORD *)v163 + 68),
             BYTE1(*((_DWORD *)v163 + 68)),
             BYTE2(*((_DWORD *)v163 + 68)),
             HIBYTE(*((_DWORD *)v163 + 68)),
             &v431);
  PropertiesForSequence = v201;
  LODWORD(v19) = v325;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if ((_DWORD)PropertiesForSequence)
    goto LABEL_689;
  v162 = v431;
  v202 = CMPhotoGetPixelBufferCLAPAsRect(v431);
  *((double *)v163 + 24) = v202;
  *((double *)v163 + 25) = v203;
  v163[26] = v204;
  v163[27] = v205;
  v163[14] = vcvtad_u64_f64(v202);
  v163[15] = vcvtad_u64_f64(v203);
  v164 = v313;
  if (!v167)
    goto LABEL_446;
LABEL_414:
  v176 = (int64x2_t)vcvtq_u64_f64(vrndaq_f64(*((float64x2_t *)v163 + 13)));
  v177 = v176.u64[1];
  v178 = v176.i64[0];
  v179 = (uint64x2_t)vaddq_s64(vaddq_s64(v176, vdupq_n_s64(2uLL)), (int64x2_t)vorrq_s8((int8x16_t)v176, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL)));
  if (v327 != TypeID)
  {
    v312 = v179;
    if (!v173)
    {
      v181 = _createPaddedPixelBufferAndClearPadding(*((const void **)v320 + 3), v164, v176.u64[0], v176.u64[1], 2uLL, 2uLL, *((unsigned __int8 *)v163 + 304), (CFTypeRef *)&v430);
      if ((_DWORD)v181
        || (v181 = CMPhotoScaleAndRotateSessionTransformForSizeWithOptions(*((_QWORD *)v320 + 4), v162, 0, 1, 1, v164, 0, 0, *((CGFloat *)v163 + 24), *((CGFloat *)v163 + 25), *((CGFloat *)v163 + 26), *((CGFloat *)v163 + 27), *((double *)v163 + 26), *((double *)v163 + 27), v182, v183, *((_BYTE *)v163 + 304), 64, *((_DWORD *)v163 + 68),
                     BYTE1(*((_DWORD *)v163 + 68)),
                     BYTE2(*((_DWORD *)v163 + 68)),
                     HIBYTE(*((_DWORD *)v163 + 68)),
                     &v430),
            (_DWORD)v181))
      {
LABEL_688:
        PropertiesForSequence = v181;
LABEL_689:
        v206 = 0;
        v188 = v169;
        v299 = v168;
LABEL_701:
        v21 = v327;
        goto LABEL_451;
      }
      v162 = v430;
    }
    v181 = CMPhotoRemovePixelBufferCLAP(v162);
    if (!(_DWORD)v181)
    {
      v298 = vcvtq_f64_u64(v312);
      v181 = CMPhotoSetPixelBufferCLAPFromRect(v162, 0, 1, 0.0, 0.0, v298.f64[0], v298.f64[1]);
      if (!(_DWORD)v181)
      {
        CFDictionarySetValue(theDict, CFSTR("UsePixelsOutsideCrop"), (const void *)*MEMORY[0x1E0C9AE50]);
        v184 = CMPhotoGetPixelBufferCLAPAsRect(v162);
        *((double *)v163 + 24) = v184;
        *((double *)v163 + 25) = v185;
        v163[26] = v186;
        v163[27] = v187;
        v163[14] = vcvtad_u64_f64(v184);
        v163[15] = vcvtad_u64_f64(v185);
        v180 = v298;
        v179 = v312;
        goto LABEL_423;
      }
    }
    goto LABEL_688;
  }
  v180 = vcvtq_f64_u64(v179);
LABEL_423:
  v168 = (double)v178;
  v169 = (double)v177;
  v188 = v180.f64[1];
  v299 = v180.f64[0];
  *((uint64x2_t *)v163 + 8) = v179;
LABEL_447:
  v21 = v327;
  if (v162)
    v206 = CFRetain(v162);
  else
    v206 = 0;
  PropertiesForSequence = 0;
LABEL_451:
  if (v430)
    CFRelease(v430);
  cf = v320;
  if (v431)
    CFRelease(v431);
  if (*(_QWORD *)cfa)
    CFRelease(*(CFTypeRef *)cfa);
  if ((_DWORD)PropertiesForSequence)
    goto LABEL_721;
  v207 = v424;
  v208 = (const void *)v424[3];
  if (v208)
  {
    CFRelease(v208);
    v207 = v424;
  }
  v207[3] = (uint64_t)v206;
  if (*((_BYTE *)v392 + 32))
  {
    CFDictionaryGetValue(theDict, CFSTR("QualityControllerType"));
    v209 = CFDictionaryGetValue(theDict, CFSTR("QualityControllerParameters"));
    if (CMPhotoQualityControllerNeedsImageAnalysis())
    {
      *(_QWORD *)value = 0;
      UpdatedQualityParameters = CMPhotoAnalyzeImageAndCreateUpdatedQualityParameters(allocator, (__CVBuffer *)v424[3], v209, (__CFDictionary **)value, *((double *)v392 + 24), *((double *)v392 + 25), *((double *)v392 + 26), *((double *)v392 + 27));
      if ((_DWORD)UpdatedQualityParameters)
        goto LABEL_681;
      if (*(_QWORD *)value)
      {
        CFDictionarySetValue(theDict, CFSTR("QualityControllerParameters"), *(const void **)value);
        if (*(_QWORD *)value)
          CFRelease(*(CFTypeRef *)value);
      }
    }
  }
  v211 = a10;
  if ((_DWORD)v19)
  {
    if (v331 != -1 && (a10[3] & 1) == 0)
    {
      UpdatedQualityParameters = CMPhotoHEIFFileWriterGetTimeStampForImage(*v332, a3, (uint64_t)a10);
      if ((_DWORD)UpdatedQualityParameters)
        goto LABEL_681;
    }
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v385 = 0;
  v384 = 0;
  v382[0] = 0;
  *(_DWORD *)((char *)v382 + 3) = 0;
  v314 = *((_DWORD *)v392 + 7);
  v212 = *((unsigned __int8 *)v211 + 4);
  v213 = (unint64_t)*v211 << 24;
  *(_OWORD *)v432 = *(_OWORD *)((char *)v211 + 5);
  *(_DWORD *)&v432[15] = v211[5];
  v303 = *((_DWORD *)v392 + 77);
  v304 = v386;
  v302 = *((_BYTE *)v392 + 312);
  v383 = v416;
  v305 = v392[21] * v392[20];
  v214 = theDict;
  v215 = desc;
  if (v305 == 1 && v314 == 1936484717)
    CMPhotoCFDictionarySetBoolean(theDict, CFSTR("SyncEncode"), 1);
  v216 = a11;
  v301 = v213 | (v212 << 56);
  v309 = v211;
  if (v21 == TypeID)
  {
    if (!v293)
    {
      if (desc)
        v220 = (const opaqueCMFormatDescription *)CFRetain(desc);
      else
        v220 = 0;
      v429 = v220;
      if ((_DWORD)v19)
      {
LABEL_480:
        if (*((_BYTE *)v392 + 58) || (Extensions = CMFormatDescriptionGetExtensions(v215)) == 0)
          v221 = 0;
        else
          v221 = (const opaqueCMFormatDescription *)CFRetain(Extensions);
        v84 = 0;
        v224 = v216 == 0;
        goto LABEL_500;
      }
LABEL_479:
      v436 = CMVideoFormatDescriptionGetCleanAperture(v220, 1u);
      *((_QWORD *)v320 + 22) = vcvtad_u64_f64(v436.size.width);
      *((_QWORD *)v320 + 23) = vcvtad_u64_f64(v436.size.height);
      goto LABEL_480;
    }
    *(_QWORD *)value = 0;
    v217 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v218 = CMFormatDescriptionGetMediaSubType(desc);
    v219 = CMFormatDescriptionGetExtensions(desc);
    UpdatedQualityParameters = CMVideoFormatDescriptionCreate(v217, v218, (int)width, (int)height, v219, (CMVideoFormatDescriptionRef *)value);
    if (!(_DWORD)UpdatedQualityParameters)
    {
      v220 = *(const opaqueCMFormatDescription **)value;
      v429 = *(CMVideoFormatDescriptionRef *)value;
      v214 = theDict;
      v215 = desc;
      if ((_DWORD)v19)
        goto LABEL_480;
      goto LABEL_479;
    }
    goto LABEL_681;
  }
  UpdatedQualityParameters = CMPhotoCreateFormatDescriptionForHEIFWriter(allocator, (CVImageBufferRef)v424[3], *((unsigned __int8 *)v392 + 58), v299, v188, v168, v169, (_DWORD)v19 == 2, *((_DWORD *)v392 + 15), &v429, 0);
  if ((_DWORD)UpdatedQualityParameters)
  {
LABEL_681:
    PropertiesForSequence = UpdatedQualityParameters;
    goto LABEL_721;
  }
  v56 = 1;
  v84 = malloc_type_calloc(1uLL, 0x48uLL, 0x10A00403B6B9398uLL);
  if (!v84)
  {
    desca = 0;
LABEL_698:
    PropertiesForSequence = 4294950305;
    goto LABEL_643;
  }
  if (*((_BYTE *)v392 + 58))
  {
    v221 = 0;
    v214 = theDict;
    v222 = v315;
  }
  else
  {
    v225 = CMFormatDescriptionGetExtensions(v429);
    v214 = theDict;
    v222 = v315;
    if (v225)
      v221 = (const opaqueCMFormatDescription *)CFRetain(v225);
    else
      v221 = 0;
  }
  v224 = v216 == 0;
  if (v216)
  {
    v294 = 0;
    if (!v222)
      goto LABEL_506;
    goto LABEL_502;
  }
LABEL_500:
  v294 = v224;
  memcpy(value, v392 + 3, sizeof(value));
  *(_DWORD *)cfa = v304;
  *(_DWORD *)&cfa[4] = v314;
  cfa[8] = v321;
  *(_QWORD *)&cfa[9] = v301;
  *(_OWORD *)&cfa[17] = *(_OWORD *)v432;
  *(_DWORD *)&cfa[32] = *(_DWORD *)&v432[15];
  v370 = v303;
  v371 = v302;
  v372 = v384;
  v373 = v385;
  v374 = v19;
  v375 = v383;
  v376 = v326;
  v377 = 0;
  v378 = v305;
  v379 = v306;
  *(_DWORD *)v380 = v382[0];
  *(_DWORD *)&v380[3] = *(_DWORD *)((char *)v382 + 3);
  desca = v221;
  Plugin = _createPlugin(allocator, (uint64_t)v320, v19, (uint64_t)value, v214, (__int128 *)cfa, (uint64_t)v84, idx, v321, (uint64_t)v221, v420 + 3);
  if ((_DWORD)Plugin)
  {
LABEL_677:
    PropertiesForSequence = Plugin;
    goto LABEL_722;
  }
  if (v315)
  {
LABEL_502:
    if (!*((_BYTE *)v392 + 340) && (*((_BYTE *)v392 + 279) || *((_BYTE *)v392 + 280)))
    {
      *((_QWORD *)v320 + 29) = 0;
      FigSemaphoreSignal();
      v307 = 0;
    }
  }
LABEL_506:
  desca = v221;
  if (v21 == TypeID && !*((_BYTE *)v392 + 340))
  {
    PropertiesForSequence = 0;
    goto LABEL_722;
  }
  if ((_DWORD)v19)
  {
    Plugin = CMPhotoHEIFFileWriterGetOrientationTransformsForImage(*v332, a3, (_BYTE *)v392 + 176, (_DWORD *)v392 + 45, 0, (_DWORD *)v392 + 46);
    if ((_DWORD)Plugin)
      goto LABEL_677;
  }
  v316 = v84;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v227 = *((unsigned __int8 *)v392 + 99);
  v286 = v392[43];
  v289 = *((unsigned __int8 *)v392 + 340);
  v287 = idx;
  v288 = v429;
  v291 = v386;
  v292 = *((_DWORD *)v392 + 7);
  v290 = *((_DWORD *)v392 + 15);
  v228 = *((unsigned __int8 *)v392 + 306);
  v229 = *((_DWORD *)v392 + 46);
  v300 = *((_DWORD *)v392 + 45);
  v230 = *((unsigned __int8 *)v392 + 105);
  v231 = *((unsigned __int8 *)v392 + 106);
  v233 = v392[16];
  v232 = v392[17];
  v234 = v392[20];
  v235 = v392[21];
  v236 = CFGetAllocator(v320);
  v237 = CFDictionaryCreateMutable(v236, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v237)
  {
    v56 = 1;
    PropertiesForSequence = 4294950305;
    LODWORD(v19) = v325;
    cf = v320;
    v21 = v327;
    goto LABEL_686;
  }
  v238 = v237;
  if (v230)
  {
    if (v231)
    {
      exists = cmpweak_exists_kFigPictureCollectionWriterOption_OverlayItemCount();
      v19 = v325;
      v240 = (const void **)MEMORY[0x1E0C9AE50];
      v241 = (const void **)MEMORY[0x1E0C9AE40];
      if (exists)
      {
        Int16 = CMPhotoCFNumberCreateInt16((unsigned __int16)v235 * (unsigned __int16)v234);
        v243 = cmpweak_kFigPictureCollectionWriterOption_OverlayItemCount();
        CFDictionarySetValue(v238, v243, Int16);
        v244 = 0;
        if (v325)
          goto LABEL_524;
        goto LABEL_522;
      }
      PropertiesForSequence = 4294950297;
      Int16 = v238;
LABEL_703:
      v21 = v327;
      v84 = v316;
LABEL_566:
      CFRelease(Int16);
      goto LABEL_567;
    }
    v434.width = (double)v233;
    v434.height = (double)v232;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v434);
    v240 = (const void **)MEMORY[0x1E0C9AE50];
    if (!DictionaryRepresentation)
    {
      PropertiesForSequence = 4294950305;
      Int16 = v238;
      v19 = v325;
      goto LABEL_703;
    }
    v244 = DictionaryRepresentation;
    CFDictionarySetValue(v238, (const void *)*MEMORY[0x1E0CC4A80], DictionaryRepresentation);
    Int16 = 0;
    v19 = v325;
  }
  else
  {
    v244 = 0;
    Int16 = 0;
    v19 = v325;
    v240 = (const void **)MEMORY[0x1E0C9AE50];
  }
  v241 = (const void **)MEMORY[0x1E0C9AE40];
  if ((_DWORD)v19)
    goto LABEL_524;
LABEL_522:
  if (v227)
    CFDictionarySetValue(v238, (const void *)*MEMORY[0x1E0CC4A70], *v240);
LABEL_524:
  if (v228)
  {
    if (v227)
    {
LABEL_630:
      v246 = FigSignalErrorAt();
LABEL_631:
      PropertiesForSequence = v246;
      v251 = 0;
LABEL_632:
      v21 = v327;
      goto LABEL_561;
    }
    CFDictionarySetValue(v238, (const void *)*MEMORY[0x1E0CC4A30], *v241);
  }
  v246 = CMPhotoCFDictionarySetInt(v238, (const void *)*MEMORY[0x1E0CC4A78], v300);
  if ((_DWORD)v246)
    goto LABEL_631;
  if (v229 != -1)
  {
    v246 = CMPhotoCFDictionarySetInt(v238, (const void *)*MEMORY[0x1E0CC4A40], v229);
    if ((_DWORD)v246)
      goto LABEL_631;
  }
  if (v290 == 3)
    CFDictionarySetValue(v238, (const void *)*MEMORY[0x1E0CC4A18], *v240);
  if (URNFromAuxiliaryImageType)
  {
    CFDictionarySetValue(v238, (const void *)*MEMORY[0x1E0CC4A28], URNFromAuxiliaryImageType);
    if (v317)
      CFDictionarySetValue(v238, (const void *)*MEMORY[0x1E0CC4A20], v317);
  }
  if (v295)
  {
    if (v291 != 1278226742)
    {
      if (v291 == 1278226736)
      {
        if (v292 == 1785750887)
          BitDepthForPixelFormat = 16;
        else
          BitDepthForPixelFormat = 10;
        goto LABEL_546;
      }
LABEL_545:
      BitDepthForPixelFormat = 16;
LABEL_546:
      v249 = 1;
      goto LABEL_547;
    }
    if (v292 == 1785750887)
      goto LABEL_545;
    goto LABEL_630;
  }
  v248 = CMPhotoGetChromaSubsamplingFromPixelFormat(v291) & 0xFFFFFFFE;
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v291);
  if (v248 == 6)
    v249 = 1;
  else
    v249 = 3;
LABEL_547:
  value[0] = BitDepthForPixelFormat;
  v250 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v251 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!v251)
  {
    PropertiesForSequence = FigSignalErrorAt();
    goto LABEL_632;
  }
  v252 = CFNumberCreate(v250, kCFNumberCharType, value);
  if (v252)
  {
    v253 = v252;
    do
    {
      CFArrayAppendValue(v251, v253);
      --v249;
    }
    while (v249);
    CFRelease(v253);
  }
  CFDictionaryAddValue(v238, (const void *)*MEMORY[0x1E0CC4A68], v251);
  CMPhotoCFDictionarySetBoolean(v238, CFSTR("ReserveImageHandle"), v289);
  v21 = v327;
  if ((_DWORD)v19 == 2)
  {
    v254 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(*v332, v238, a3, v292, v288, &v417);
    goto LABEL_560;
  }
  if ((_DWORD)v19 == 1)
  {
    v254 = CMPhotoHEIFFileWriterAddThumbnailToImage(*v332, v238, a3, v292, v288, &v417);
    goto LABEL_560;
  }
  if ((_DWORD)v19)
    goto LABEL_559;
  if (v331 != -1)
  {
    v254 = CMPhotoHEIFFileWriterAddImageToSequence(*v332, v238, 1, v287, v292, v288, &v417);
LABEL_560:
    PropertiesForSequence = v254;
    goto LABEL_561;
  }
  v281 = *v332;
  if (v286 == -1)
  {
    v254 = CMPhotoHEIFFileWriterAddImageToCollection(v281, v238, v292, v288, &v417);
    goto LABEL_560;
  }
  if (!CMPhotoHEIFFileWriterCompareReservedImageHandleWithOptions(v281, v238, v292, v288, v286))
  {
LABEL_559:
    v254 = FigSignalErrorAt();
    goto LABEL_560;
  }
  PropertiesForSequence = 0;
  v417 = v286;
LABEL_561:
  CFRelease(v238);
  if (v244)
    CFRelease(v244);
  v84 = v316;
  if (v251)
    CFRelease(v251);
  if (Int16)
    goto LABEL_566;
LABEL_567:
  if ((_DWORD)PropertiesForSequence)
  {
LABEL_679:
    v56 = 1;
    goto LABEL_680;
  }
  cf = v320;
  v255 = v331 == -1 || CMPhotoHEIFFileWriterImageSequenceFirstFrameCompleted(*v332, 0, idx);
  v256 = v417;
  v257 = v392;
  if (!v392[28] && !v392[29] && !v392[30] && !v392[31])
  {
LABEL_587:
    if ((_DWORD)v19
      || v331 == -1
      || (v309[3] & 1) == 0
      || (v265 = *v332,
          *(_OWORD *)value = *(_OWORD *)v309,
          *(_QWORD *)&value[16] = *((_QWORD *)v309 + 2),
          Plugin = CMPhotoHEIFFileWriterSetTimeStampForImage(v265, v417, (uint64_t)value),
          !(_DWORD)Plugin))
    {
      if (*((_BYTE *)v392 + 279))
      {
        v266 = theDict;
        if (!(_DWORD)v19)
          goto LABEL_596;
      }
      else
      {
        v266 = theDict;
        if (!(_DWORD)v19 && *((_BYTE *)v392 + 280))
        {
LABEL_596:
          *((_QWORD *)v320 + 29) = v417;
          if (v331 == -1 || v255)
          {
            FigSemaphoreSignal();
            v307 = 0;
          }
        }
      }
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      if (!*((_BYTE *)v392 + 340))
      {
        v267 = a14;
        if (v294)
        {
          v268 = (CFTypeRef *)v420[3];
          v269 = (__CVBuffer *)v424[3];
          memcpy(value, v392 + 3, sizeof(value));
          *(_OWORD *)cfa = *(_OWORD *)v309;
          *(_QWORD *)&cfa[16] = *((_QWORD *)v309 + 2);
          v84 = v316;
          v285 = v269;
          v270 = v268;
          v271 = v326;
          v272 = v296;
          v273 = _encodeTiles((uint64_t)v320, v270, v328, v19, v417, value, v326, v296, v297, v321, (__int128 *)cfa, v416.i64[0], v416.i64[1], v285, v255, v316, v418, 0, v308,
                   desca,
                   v266,
                   a14);
          if ((_DWORD)v273)
          {
            PropertiesForSequence = v273;
LABEL_642:
            v56 = 0;
            goto LABEL_643;
          }
LABEL_618:
          if (*MEMORY[0x1E0CA1FC0] == 1)
            kdebug_trace();
          PropertiesForSequence = 0;
          if ((_DWORD)v19 != 2 || v331 != -1)
          {
            v56 = 0;
            goto LABEL_643;
          }
          if (v272 | (unint64_t)v428)
          {
            v277 = CMPhotoAuxiliaryImageMetadataCreateXMPData(*((_QWORD *)v320 + 12), (CGImageMetadataRef)v272, v428, v271, 0, &v427);
            if ((_DWORD)v277)
            {
LABEL_640:
              PropertiesForSequence = v277;
              goto LABEL_641;
            }
            v278 = v392[8];
            v279 = v427;
            if (!v278)
            {
LABEL_639:
              v277 = CMPhotoHEIFFileWriterAddMetadataToImage(*v332, 0, v417, 1, v279, 0, v278, 0);
              goto LABEL_640;
            }
            *(_QWORD *)value = 0;
            v280 = CMPhotoCompressDataWithContentEncoding(*((const __CFAllocator **)v320 + 12), v427, v278, (__CFData **)value);
            if (!(_DWORD)v280)
            {
              if (v427)
                CFRelease(v427);
              v279 = *(CFDataRef *)value;
              v427 = *(CFDataRef *)value;
              goto LABEL_639;
            }
            PropertiesForSequence = v280;
            if ((_DWORD)v280 == -17106)
            {
              v278 = 0;
              v279 = v427;
              goto LABEL_639;
            }
          }
          else
          {
            PropertiesForSequence = 0;
          }
LABEL_641:
          v321 = 0;
          goto LABEL_642;
        }
        os_unfair_lock_lock((os_unfair_lock_t)v320 + 54);
        v271 = v326;
        v84 = v316;
        if (*((_QWORD *)v320 + 24)
          || (TargetingPThreadRootQueueWithPriority = FigDispatchQueueCreateTargetingPThreadRootQueueWithPriority(),
              (*((_QWORD *)v320 + 24) = TargetingPThreadRootQueueWithPriority) != 0))
        {
          if (_allowHEIFAsynchronousCompleteEncodeTilesOverride_onceToken != -1)
            dispatch_once(&_allowHEIFAsynchronousCompleteEncodeTilesOverride_onceToken, &__block_literal_global_22_0);
          v275 = *((_QWORD *)v320 + 25);
          if (v275 || (_allowHEIFAsynchronousCompleteEncodeTilesOverride_allowAsynchronousComplete & 1) != 0)
            goto LABEL_613;
          v275 = FigSemaphoreCreate();
          *((_QWORD *)v320 + 25) = v275;
          if (*((_QWORD *)v320 + 24))
          {
            *((_QWORD *)v320 + 26) = 0;
LABEL_613:
            if (v275)
              ++*((_QWORD *)v320 + 26);
            os_unfair_lock_unlock((os_unfair_lock_t)v320 + 54);
            if (*MEMORY[0x1E0CA1FC0] == 1)
              kdebug_trace();
            v276 = *((_QWORD *)v320 + 24);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = ___encodePixelBufferForIndex_block_invoke;
            block[3] = &unk_1E53F7160;
            block[8] = v320;
            block[9] = allocator;
            v360 = v19;
            block[10] = v266;
            v335 = v304;
            v336 = v314;
            v337 = v321;
            v338 = v301;
            *(_OWORD *)v339 = *(_OWORD *)v432;
            *(_DWORD *)&v339[15] = *(_DWORD *)&v432[15];
            v340 = v303;
            v341 = v302;
            v342 = v384;
            v343 = v385;
            v345 = v383;
            v344 = v19;
            v346 = v326;
            v347 = 0;
            v348 = v305;
            v349 = v306;
            *(_DWORD *)v350 = v382[0];
            *(_DWORD *)&v350[3] = *(_DWORD *)((char *)v382 + 3);
            v351 = v316;
            v352 = idx;
            v366 = v321;
            v354 = v416;
            v353 = desca;
            v355 = v328;
            v361 = v326;
            v356 = v417;
            v272 = v296;
            v357 = v296;
            v367 = v297;
            v362 = *(_OWORD *)v309;
            v363 = *((_QWORD *)v309 + 2);
            block[6] = &v419;
            block[7] = &v423;
            v368 = v255;
            v364 = v418;
            block[4] = v267;
            block[5] = &v391;
            v365 = 0;
            v358 = v308;
            v359 = v332;
            dispatch_async(v276, block);
            goto LABEL_618;
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v320 + 54);
        goto LABEL_697;
      }
      PropertiesForSequence = 0;
      v56 = 1;
LABEL_686:
      v84 = v316;
      goto LABEL_643;
    }
    goto LABEL_677;
  }
  v258 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v258)
  {
LABEL_697:
    v56 = 1;
    goto LABEL_698;
  }
  v259 = v258;
  v260 = (const void *)v257[28];
  if (v260)
    CFDictionaryAddValue(v258, (const void *)*MEMORY[0x1E0CC60C8], v260);
  v261 = (const void *)v257[29];
  if (v261)
  {
    *(_QWORD *)value = 0;
    FigIntrinsicsDictFromIntrinsicsMatrix = CMPhotoCreateFigIntrinsicsDictFromIntrinsicsMatrix((int)allocator, v261, vcvtad_u64_f64(v168), vcvtad_u64_f64(v169), (uint64_t)value);
    if ((_DWORD)FigIntrinsicsDictFromIntrinsicsMatrix)
      goto LABEL_682;
    CFDictionarySetValue(v259, (const void *)*MEMORY[0x1E0CC60B8], *(const void **)value);
    if (*(_QWORD *)value)
      CFRelease(*(CFTypeRef *)value);
  }
  v263 = v257[30];
  v264 = v257[31];
  if (*((_OWORD *)v257 + 15) == 0)
    goto LABEL_586;
  *(_QWORD *)value = 0;
  FigIntrinsicsDictFromIntrinsicsMatrix = CMPhotoCreateFigExtrinsicsDictFromExtrinsics(allocator, v263, v264, *((unsigned __int8 *)v257 + 256), (__CFDictionary **)value);
  if ((_DWORD)FigIntrinsicsDictFromIntrinsicsMatrix)
  {
LABEL_682:
    PropertiesForSequence = FigIntrinsicsDictFromIntrinsicsMatrix;
    CFRelease(v259);
    goto LABEL_722;
  }
  CFDictionarySetValue(v259, (const void *)*MEMORY[0x1E0CC60B0], *(const void **)value);
  if (*(_QWORD *)value)
    CFRelease(*(CFTypeRef *)value);
LABEL_586:
  PropertiesForSequence = CMPhotoHEIFFileWriterAddMetadataToImage(*v332, 0, v256, 3, v259, 0, 0, 0);
  CFRelease(v259);
  if (!(_DWORD)PropertiesForSequence)
    goto LABEL_587;
LABEL_722:
  v56 = 1;
LABEL_643:
  v282 = a13;
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (v84)
  {
    if (*((_BYTE *)v392 + 352))
    {
      v283 = (const void *)v84[8];
      if (v283)
        _Block_release(v283);
    }
  }
  if (v282 && !(_DWORD)PropertiesForSequence)
    *v282 = v417;
  if (v21 != TypeID && (_DWORD)PropertiesForSequence != -15474 && (_DWORD)PropertiesForSequence)
    cf[104] = 1;
  if (v307)
    FigSemaphoreSignal();
  if (v56)
    _freeVariablesUsedAcrossAsyncEncodingMethods(PropertiesForSequence, (uint64_t)cf, (CFTypeRef *)v420[3], (CFTypeRef)v424[3], v321, v84, 0, v19, desca, theDict, v308);
  if (v428)
    CFRelease(v428);
  if (v427)
    CFRelease(v427);
  if (v429)
    CFRelease(v429);
  if (URNFromAuxiliaryImageType)
    CFRelease(URNFromAuxiliaryImageType);
  if (v317)
    CFRelease(v317);
  _Block_object_dispose(&v391, 8);
  _Block_object_dispose(&v419, 8);
  _Block_object_dispose(&v423, 8);
  return PropertiesForSequence;
}

uint64_t _parseOptions(CFDictionaryRef theDict, int a2, int a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  _BYTE *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v17;
  int BooleanIfPresent;
  int v19;
  uint64_t result;
  const __CFDictionary *Value;
  const void *v22;
  CFTypeID v23;
  const __CFArray *v24;
  const void *v25;
  CFTypeID v26;
  const __CFArray *v27;
  const void *v28;
  CFTypeID v29;
  const __CFArray *v30;
  const void *v31;
  CFTypeID v32;
  int v33;
  int v34;
  const void *v35;
  const void *v36;
  CFTypeID v37;
  void *v38;
  _DWORD *v39;
  _BYTE *v40;
  double *v41;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _BYTE *v48;
  int *v49;
  char v51;
  char v52;
  CGRect rect;

  *(_BYTE *)a4 = 0;
  strcpy((char *)(a4 + 4), "1cvh");
  *(_DWORD *)(a4 + 36) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_WORD *)(a4 + 64) = 1;
  v9 = (_BYTE *)(a4 + 64);
  *(_DWORD *)(a4 + 68) = 0;
  *(_DWORD *)(a4 + 31) = 0;
  *(_DWORD *)(a4 + 72) = 256;
  *(_WORD *)(a4 + 80) = 0;
  *(_BYTE *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 164) = 1;
  v10 = (_DWORD *)(a4 + 164);
  *(_QWORD *)(a4 + 156) = 0xFFFFFFFF00000000;
  v11 = (_DWORD *)(a4 + 156);
  *(double *)(a4 + 168) = a5;
  *(double *)(a4 + 176) = a6;
  *(double *)(a4 + 184) = a7;
  *(_OWORD *)(a4 + 200) = 0u;
  v12 = a4 + 200;
  *(double *)(a4 + 192) = a8;
  *(_BYTE *)(a4 + 232) = 0;
  *(_QWORD *)(a4 + 236) = 0xFFFFFFFF00000002;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_QWORD *)(a4 + 244) = 0xFFFFFFFFLL;
  *(_WORD *)(a4 + 252) = 0;
  v13 = (_BYTE *)(a4 + 252);
  *(_WORD *)(a4 + 255) = 0;
  if (a3)
    v14 = 30;
  else
    v14 = -1;
  *(_DWORD *)(a4 + 284) = v14;
  v49 = (int *)(a4 + 284);
  *(_QWORD *)(a4 + 272) = 0;
  *(_QWORD *)(a4 + 264) = 0;
  *(_DWORD *)(a4 + 279) = 0;
  *(_BYTE *)(a4 + 288) = 1;
  *(_QWORD *)(a4 + 320) = -1;
  *(_QWORD *)(a4 + 304) = 0;
  *(_QWORD *)(a4 + 296) = 0;
  *(_QWORD *)(a4 + 309) = 0;
  *(_BYTE *)(a4 + 328) = 0;
  if (!theDict)
    return 0;
  v40 = (_BYTE *)(a4 + 72);
  v41 = (double *)(a4 + 168);
  v47 = (_DWORD *)(a4 + 236);
  v48 = (_BYTE *)(a4 + 232);
  v45 = (_DWORD *)(a4 + 68);
  v46 = (_DWORD *)(a4 + 244);
  v44 = (_BYTE *)(a4 + 288);
  v43 = (_BYTE *)(a4 + 48);
  v39 = (_DWORD *)(a4 + 4);
  *(_BYTE *)a4 = CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("CodecType"), (void *)(a4 + 4));
  if (*(_DWORD *)(a4 + 4) == 1936484717)
  {
    LOBYTE(rect.origin.x) = 0;
    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("AllowExperimentalCodecs"), &rect);
    LOBYTE(rect.origin.x) |= FigDebugIsInternalBuild();
    v17 = CMPhotoAllowExperimentalCodecsOverride(SLOBYTE(rect.origin.x));
    LOBYTE(rect.origin.x) = v17;
    if (!v17)
      return FigSignalErrorAt();
  }
  v42 = (_QWORD *)(v12 + 120);
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("PrimaryImage"), (_BYTE *)(v12 - 125));
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("HiddenImage"), (_BYTE *)(v12 + 82));
  CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("ThreadPriority"), (void *)(v12 + 112));
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("RequireHardwareCodec"), v13);
  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("PreferSoftwareCodec"), (_BYTE *)(v12 + 53));
  *(_BYTE *)(a4 + 152) = CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("ImageOrientation"), v10);
  BooleanIfPresent = CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("ApplyTransform"), (_BYTE *)(v12 - 126));
  if (*(_BYTE *)(a4 + 74))
  {
    v19 = a2;
    if (!*(_BYTE *)(a4 + 152))
      return FigSignalErrorAt();
  }
  else
  {
    v19 = a2;
    if (!*(_BYTE *)(a4 + 152))
      goto LABEL_18;
  }
  result = CMPhotoHEIFRotationCCWAndMirroringFromExifOrientation(*v10, v11, (int *)(v12 - 40));
  if ((_DWORD)result)
    return result;
  if (BooleanIfPresent)
  {
    if (v19 && !*(_BYTE *)(v12 - 126))
      return FigSignalErrorAt();
  }
  else if (v19)
  {
    return FigSignalErrorAt();
  }
LABEL_18:
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("SourceCropRect"));
  if (!Value
    || (memset(&rect, 0, sizeof(rect)), !CGRectMakeWithDictionaryRepresentation(Value, &rect))
    || (result = CMPhotoApplyCropRectToRect(v41, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height),
        !(_DWORD)result))
  {
    *(_QWORD *)(a4 + 200) = CFDictionaryGetValue(theDict, CFSTR("HorizontalFOV"));
    v22 = CFDictionaryGetValue(theDict, CFSTR("ExtrinsicsPosition"));
    *(_QWORD *)(a4 + 216) = v22;
    if (!v22
      || (v23 = CFGetTypeID(v22), v23 == CFArrayGetTypeID())
      && (v24 = *(const __CFArray **)(a4 + 216)) != 0
      && CFArrayGetCount(v24) == 3)
    {
      v25 = CFDictionaryGetValue(theDict, CFSTR("ExtrinsicsRotation"));
      *(_QWORD *)(a4 + 224) = v25;
      if (!v25
        || (v26 = CFGetTypeID(v25), v26 == CFArrayGetTypeID())
        && (v27 = *(const __CFArray **)(a4 + 224)) != 0
        && CFArrayGetCount(v27) == 9)
      {
        if (*(_QWORD *)(a4 + 216) || *(_QWORD *)(a4 + 224))
          CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("WriteFullExtrinsics"), v48);
        v28 = CFDictionaryGetValue(theDict, CFSTR("IntrinsicsMatrix"));
        *(_QWORD *)(a4 + 208) = v28;
        if (!v28
          || (*(_QWORD *)v12 = 0, v29 = CFGetTypeID(v28), v29 == CFArrayGetTypeID())
          && (v30 = *(const __CFArray **)(a4 + 208)) != 0
          && CFArrayGetCount(v30) == 9)
        {
          CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("SlimCodecFlavor"), v47);
          if (*v47 < 7u)
          {
            CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("SlimXBitShift"), (void *)(v12 + 40));
            if ((*(_DWORD *)(v12 + 40) + 1) < 0x11)
            {
              CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("SlimHrlcRunLengthValue"), v46);
              if ((*v46 + 1) < 0x101)
              {
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("ForceHighSpeed"), (_BYTE *)(v12 + 48));
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("DisableMSRForTransfer"), (_BYTE *)(v12 + 49));
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("DisableGPUForTransfer"), (_BYTE *)(v12 + 51));
                CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("MaxPixelSize"), v45);
                CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseEvenScalingMode"), (_BYTE *)(v12 - 127));
                *(_BYTE *)(v12 - 127) = CMPhotoGetEvenScalingModeDefault(1, *(unsigned __int8 *)(v12 - 127));
                if (*v45)
                  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("AllowMaxPixelSizeUpscale"), v40);
                CMPhotoCFDictionaryGetIntIfPresent(theDict, CFSTR("MaxKeyFrameIntervalForSequence"), v49);
                if (!a3 || *v49 > 0)
                {
                  CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("UseDroppablePFramesOnlyForSequence"), v44);
                  *(_BYTE *)(a4 + 65) = CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("AllowPixelTransfer"), v9);
                  v31 = CFDictionaryGetValue(theDict, CFSTR("AuxiliaryImagePreserveValue"));
                  *(_QWORD *)(a4 + 296) = v31;
                  if (!v31 || (v32 = CFGetTypeID(v31), v32 == CFNumberGetTypeID()))
                  {
                    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("IgnoreColorSpace"), (_BYTE *)(v12 - 166));
                    v52 = 0;
                    if (CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("WriteColorAsNCLX"), &v52))
                    {
                      if (v52)
                        v33 = 2;
                      else
                        v33 = 1;
                      *(_DWORD *)(a4 + 36) = v33;
                    }
                    v51 = 0;
                    CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("WriteColorAsICCAndNCLX"), &v51);
                    if (v51)
                      *(_DWORD *)(a4 + 36) = 3;
                    if (v19 != 2
                      || !CFDictionaryGetValue(theDict, CFSTR("Subsampling"))
                      && !CFDictionaryGetValue(theDict, CFSTR("BitDepth")))
                    {
                      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("RGBToYUVDithering"), (_BYTE *)(v12 - 168));
                      CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("PreferIdentityMatrix"), (_BYTE *)(v12 - 167));
                      *(_BYTE *)(a4 + 255) = CFDictionaryContainsKey(theDict, CFSTR("IncludeThumbnailWithOptions"));
                      v34 = CFDictionaryContainsKey(theDict, CFSTR("IncludeAlphaAuxiliaryImageWithOptions"));
                      *(_BYTE *)(a4 + 256) = v34;
                      if (!*(_BYTE *)(a4 + 255) || !v34)
                      {
                        CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("CreateEncoderFriendlyBuffer"), v43);
                        v35 = CFDictionaryGetValue(theDict, CFSTR("QualityControllerType"));
                        *(_QWORD *)(a4 + 16) = v35;
                        *(_BYTE *)(a4 + 8) = v35 != 0;
                        *(_QWORD *)(a4 + 24) = CFDictionaryGetValue(theDict, CFSTR("QualityControllerParameters"));
                        *(_QWORD *)(a4 + 304) = CFDictionaryGetValue(theDict, CFSTR("CustomMinimumSourceAlignment"));
                        *(_QWORD *)(a4 + 264) = CFDictionaryGetValue(theDict, CFSTR("UseCodecSessionPool"));
                        *(_QWORD *)(a4 + 272) = CFDictionaryGetValue(theDict, CFSTR("Priority"));
                        *(_QWORD *)(a4 + 56) = CFDictionaryGetValue(theDict, CFSTR("UsePixelsOutsideCrop"));
                        *(_BYTE *)(a4 + 281) = FigCFDictionaryGetBooleanIfPresent();
                        v36 = CFDictionaryGetValue(theDict, CFSTR("UseXMPContentEncoding"));
                        *(_QWORD *)(a4 + 40) = v36;
                        if (v36)
                        {
                          v37 = CFGetTypeID(v36);
                          if (v37 != CFStringGetTypeID())
                            return 4294950306;
                        }
                        CMPhotoCFDictionaryGetBooleanIfPresent(theDict, CFSTR("ReserveImageHandle"), (_BYTE *)(v12 + 116));
                        if (!CMPhotoCFDictionaryGetLongIfPresent(theDict, CFSTR("ProvidedImageHandle"), v42)|| (*v42 & 0x8000000000000000) == 0)
                        {
                          rect.origin.x = 0.0;
                          result = CFDictionaryGetValueIfPresent(theDict, CFSTR("ReconstructionPixelBufferHandler"), (const void **)&rect);
                          if (!(_DWORD)result)
                            return result;
                          *(_BYTE *)(a4 + 328) = result;
                          if (*(_BYTE *)(a4 + 252) && *v39 == 1752589105)
                          {
                            v38 = _Block_copy(*(const void **)&rect.origin.x);
                            result = 0;
                            *(_QWORD *)(a4 + 336) = v38;
                            return result;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t _createPlugin(const void *a1, uint64_t a2, int a3, uint64_t a4, const __CFDictionary *a5, __int128 *a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, _QWORD *a11)
{
  CFNumberRef Size;
  const __CFDictionary *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t CanBeReused;
  uint64_t v23;
  _DWORD *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  __int128 v28;
  __int128 v29;
  const void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  CFTypeRef *Value;

  Value = 0;
  if (!a9)
  {
    Size = 0;
LABEL_9:
    v24 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v25 = *(const void **)(a2 + 24);
    v26 = *(const void **)(a2 + 32);
    if (a9)
    {
      v27 = *(const void **)(a2 + 48);
      v28 = a6[3];
      v36 = a6[2];
      v37 = v28;
      v38 = a6[4];
      v39 = *((_QWORD *)a6 + 10);
      v29 = a6[1];
      v34 = *a6;
      v35 = v29;
      CanBeReused = CMPhotoCompressionPluginCreate(a1, v25, v26, v27, (uint64_t)&v34, a5, (uint64_t)_compressionPluginSequenceFrameEncodeCallback, 0, &Value);
      if ((_DWORD)CanBeReused)
        goto LABEL_26;
      FigCFDictionarySetValue();
    }
    else
    {
      v30 = *(const void **)(a2 + 40);
      v31 = a6[3];
      v36 = a6[2];
      v37 = v31;
      v38 = a6[4];
      v39 = *((_QWORD *)a6 + 10);
      v32 = a6[1];
      v34 = *a6;
      v35 = v32;
      CanBeReused = CMPhotoCompressionPluginCreate(a1, v25, v26, v30, (uint64_t)&v34, a5, (uint64_t)_compressionPluginTileEncodeCallback, a7, &Value);
      if ((_DWORD)CanBeReused)
        goto LABEL_26;
    }
    if (*v24 == 1)
    {
      kdebug_trace();
      if (*v24 == 1)
        kdebug_trace();
    }
    CanBeReused = CMPhotoCompressionPluginPrepare((uint64_t)Value);
    if (!(_DWORD)CanBeReused)
    {
      if (*v24 == 1)
        kdebug_trace();
      goto LABEL_21;
    }
LABEL_26:
    v23 = CanBeReused;
    goto LABEL_28;
  }
  Size = CMPhotoCFNumberCreateSize(8 * a8 + a3);
  v18 = *(const __CFDictionary **)(a2 + 56);
  if (!v18)
  {
    v23 = 4294950303;
    goto LABEL_28;
  }
  if (!CFDictionaryContainsKey(v18, Size))
    goto LABEL_9;
  Value = (CFTypeRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 56), Size);
  v40 = 0;
  v19 = a6[3];
  v36 = a6[2];
  v37 = v19;
  v38 = a6[4];
  v39 = *((_QWORD *)a6 + 10);
  v20 = a6[1];
  v34 = *a6;
  v35 = v20;
  CanBeReused = CMPhotoCompressionPluginCanBeReused((uint64_t)Value, (uint64_t)&v34, *(_QWORD *)(a4 + 104), *(_QWORD *)(a4 + 112), (uint64_t)a5, a10, &v40, v21);
  if ((_DWORD)CanBeReused)
    goto LABEL_26;
  if (!v40)
  {
    v23 = FigSignalErrorAt();
    if (!(_DWORD)v23)
      goto LABEL_23;
LABEL_28:
    CMPhotoCompressionPluginDispose(Value);
    if (!Size)
      return v23;
    goto LABEL_24;
  }
LABEL_21:
  v23 = 0;
  if (a11)
  {
    *a11 = Value;
    Value = 0;
  }
LABEL_23:
  if (Size)
LABEL_24:
    CFRelease(Size);
  return v23;
}

uint64_t ___encodePixelBufferForIndex_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  int v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t result;
  uint64_t v14;
  __CVBuffer *v15;
  char v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  unsigned __int8 v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  const __CFDictionary *v26;
  uint64_t v27;
  CFTypeRef *v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char __dst[352];

  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v3 = *(_QWORD *)(a1 + 64);
  v2 = *(const void **)(a1 + 72);
  v4 = *(_DWORD *)(a1 + 256);
  v5 = *(const __CFDictionary **)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_BYTE *)(a1 + 296);
  v9 = *(_QWORD *)(a1 + 192);
  v10 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0x158uLL);
  v11 = *(_OWORD *)(a1 + 136);
  v33 = *(_OWORD *)(a1 + 120);
  v34 = v11;
  v35 = *(_OWORD *)(a1 + 152);
  v36 = *(_QWORD *)(a1 + 168);
  v12 = *(_OWORD *)(a1 + 104);
  v31 = *(_OWORD *)(a1 + 88);
  v32 = v12;
  result = _createPlugin(v2, v3, v4, (uint64_t)__dst, v5, &v31, v6, v7, v8, v9, v10);
  if (!(_DWORD)result)
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    v30 = *(_QWORD *)(a1 + 64);
    v29 = *(_DWORD *)(a1 + 256);
    v26 = *(const __CFDictionary **)(a1 + 216);
    v27 = *(_QWORD *)(a1 + 224);
    v28 = *(CFTypeRef **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v14 = *(_QWORD *)(a1 + 32);
    v24 = *(_BYTE *)(a1 + 297);
    v25 = *(_DWORD *)(a1 + 260);
    v22 = *(_BYTE *)(a1 + 296);
    v15 = *(__CVBuffer **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    v16 = *(_BYTE *)(a1 + 298);
    v17 = *(_DWORD **)(a1 + 176);
    v18 = *(_DWORD *)(a1 + 288);
    v19 = *(_QWORD *)(a1 + 240);
    v23 = *(_QWORD *)(a1 + 232);
    v20 = *(const void **)(a1 + 192);
    v21 = *(const void **)(a1 + 80);
    memcpy(__dst, (const void *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), 0x158uLL);
    v31 = *(_OWORD *)(a1 + 264);
    *(_QWORD *)&v32 = *(_QWORD *)(a1 + 280);
    result = _encodeTiles(v30, v28, v26, v29, v27, __dst, v25, v23, v24, v22, &v31, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208), v15, v16, v17, v18, 1u, v19,
               v20,
               v21,
               v14);
    if (*MEMORY[0x1E0CA1FC0] == 1)
      result = kdebug_trace();
  }
  if (*(_DWORD *)(a1 + 292))
    *(_BYTE *)(*(_QWORD *)(a1 + 248) + 16) = 1;
  return result;
}

uint64_t _encodeTiles(uint64_t a1, CFTypeRef *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, __int128 *a11, uint64_t a12, uint64_t a13, __CVBuffer *a14, char a15, _DWORD *a16, int a17, unsigned __int8 a18, uint64_t a19, const void *a20,const void *a21,uint64_t a22)
{
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  __CVBuffer *v28;
  int v29;
  uint64_t v30;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64x2_t v35;
  CFTypeRef *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  __int128 v41;
  _DWORD *v42;
  uint64x2_t v43;
  __CVBuffer *v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  __CVBuffer *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __CVBuffer *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  __CVBuffer *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  float64x2_t v66;
  float64x2_t v67;
  __CVBuffer *v68;
  __CVBuffer *v69;
  __CVBuffer *v70;
  int v71;
  uint64_t v72;
  __CVBuffer *v73;
  CFMutableDictionaryRef Mutable;
  int v75;
  char *v76;
  __CVBuffer *v77;
  uint64_t v78;
  CVPixelBufferRef *v79;
  CVPixelBufferRef *v80;
  uint64_t PixelBufferWithAttributes;
  int *v82;
  int v83;
  NSObject *v84;
  int v85;
  __CVBuffer *v86;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  __CVBuffer *v92;
  uint64_t v93;
  const __CFAllocator *allocator;
  uint64_t v95;
  char *__src;
  int v97;
  uint64_t v99;
  uint64_t v100;
  float64x2_t v101;
  uint64x2_t v102;
  uint64_t v103;
  float64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  int v107;
  uint64x2_t v108;
  __CVBuffer *v109;
  char *v110;
  void *v111;
  CFTypeRef *v112;
  __CVBuffer *v113;
  _QWORD block[12];
  _BYTE v116[344];
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  const void *v121;
  const void *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  char v127;
  unsigned __int8 v128;
  _OWORD v129[2];
  _OWORD v130[2];
  __CVBuffer *v131;
  uint64_t v132;
  uint64_t v133;
  __CVBuffer *v134;
  __CVBuffer *v135;
  uint64x2_t v136;
  uint64x2_t v137;
  size_t v138;
  size_t v139;
  unsigned int v140;
  void *v141;
  const __CFDictionary *v142;

  v97 = a7;
  v23 = a4;
  v26 = a1;
  v27 = (uint64_t)a16;
  v28 = a14;
  v29 = a10;
  v30 = a1 + 88;
  v131 = 0;
  v111 = a16;
  if (a6[48])
  {
    v32 = *(float64x2_t *)(a6 + 168);
    v33 = *((_QWORD *)a6 + 13) * *((_QWORD *)a6 + 17);
    v34 = *((_QWORD *)a6 + 14) * *((_QWORD *)a6 + 18);
    v35 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(a6 + 184)));
    v130[0] = vcvtq_u64_f64(vrndaq_f64(v32));
    v130[1] = v35;
    v136 = vcvtq_u64_f64(v32);
    v137.i64[0] = v33;
    v137.i64[1] = v34;
    v36 = a2;
    v37 = (uint64_t)a2;
    v38 = v30;
    v39 = CMPhotoCompressionPluginPixelTransfer(v37, (uint64_t)a14, &v136, v130, (uint64_t)&v131, v30, a7, a8);
    if ((_DWORD)v39)
    {
      v48 = v39;
      v110 = 0;
      v59 = 1;
      v65 = a18;
      v52 = a14;
      LODWORD(v23) = a4;
      v49 = a19;
      v50 = a20;
      a2 = v36;
      v29 = a10;
      goto LABEL_102;
    }
    if (v131)
    {
      v27 = (uint64_t)a16;
      if (a14)
        CFRelease(a14);
      v28 = v131;
      v30 = v38;
      v131 = 0;
      *((_QWORD *)a6 + 11) = 0;
      *((_QWORD *)a6 + 12) = 0;
      *(_OWORD *)(a6 + 168) = *MEMORY[0x1E0C9D538];
      v23 = a4;
    }
    else
    {
      v27 = (uint64_t)a16;
      v28 = a14;
      v23 = a4;
      v30 = v38;
    }
    a2 = v36;
    v29 = a10;
  }
  *(_QWORD *)v27 = v26;
  *(_QWORD *)(v27 + 8) = a5;
  *(_BYTE *)(v27 + 44) = a6[81];
  *(_BYTE *)(v27 + 45) = a9;
  *(_DWORD *)(v27 + 48) = 0;
  *(_BYTE *)(v27 + 16) = v29;
  *(_QWORD *)(v27 + 64) = *((_QWORD *)a6 + 42);
  v113 = v28;
  if (!v29)
  {
    v93 = v30;
    v110 = (char *)malloc_type_calloc(*((_QWORD *)a6 + 18) * *((_QWORD *)a6 + 17), 0x40uLL, 0x1020040330035C4uLL);
    if (v110)
    {
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        kdebug_trace();
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
      }
      v95 = v23;
      __src = a6;
      v112 = a2;
      v99 = v26;
      if (a6[82])
      {
        if (*((_DWORD *)a6 + 1) == 1936484717)
        {
          v51 = *((_QWORD *)a6 + 18);
          v52 = v113;
          if (v51)
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v106 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(__src + 184)));
            v108 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(__src + 168)));
            v103 = *((_QWORD *)__src + 11);
            v56 = (__CVBuffer *)*((_QWORD *)__src + 13);
            v100 = *((_QWORD *)__src + 12);
            v57 = *((_QWORD *)__src + 14);
            v58 = *((_QWORD *)__src + 16);
            v59 = 1;
            while (1)
            {
              v60 = (uint64_t)&v110[v54];
              v110[v54 + 32] = 1;
              v61 = v58 && v51 - 1 == v55;
              v62 = (__CVBuffer *)(v61 ? v58 : v57);
              *(_QWORD *)v60 = 0;
              *(_QWORD *)(v60 + 8) = v55;
              *(_QWORD *)(v60 + 16) = v56;
              *(_QWORD *)(v60 + 24) = v62;
              *(_WORD *)(v60 + 34) = v55;
              *(_QWORD *)(v60 + 40) = 0;
              *(_QWORD *)(v60 + 48) = v53;
              v136 = v108;
              v137 = v106;
              v132 = v103;
              v133 = v100 + v53;
              v134 = v56;
              v135 = v62;
              v63 = CMPhotoCompressionPluginEncode((uint64_t)v112, v52, a5, &v136, &v132, 0, 0, v60);
              if ((_DWORD)v63)
                break;
              ++v55;
              v54 += 64;
              v53 += v57;
              v52 = v113;
              if (v51 == v55)
                goto LABEL_73;
            }
            v48 = v63;
            a2 = v112;
            v26 = v99;
            v50 = a20;
            v40 = a21;
            v29 = 0;
            v49 = a19;
            goto LABEL_95;
          }
LABEL_73:
          v82 = (int *)MEMORY[0x1E0CA1FC0];
          LODWORD(v23) = v95;
          v40 = a21;
          if (*MEMORY[0x1E0CA1FC0] == 1)
          {
            kdebug_trace();
            v52 = v113;
          }
          v26 = v99;
          v83 = *v82;
          a2 = v112;
          if (*(_QWORD *)(v99 + 200))
          {
            if (v83 == 1)
            {
              kdebug_trace();
              v52 = v113;
            }
            v84 = *(NSObject **)(v99 + 192);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 0x40000000;
            block[2] = ___encodeTiles_block_invoke;
            block[3] = &unk_1E53F71E8;
            block[5] = v99;
            block[6] = v93;
            v123 = v95;
            block[7] = a12;
            block[8] = a13;
            block[9] = v112;
            block[10] = v52;
            block[11] = v110;
            memcpy(v116, __src, sizeof(v116));
            v127 = 0;
            v124 = v97;
            v125 = a17;
            v118 = a16;
            v119 = a8;
            v128 = a18;
            v49 = a19;
            v50 = a20;
            v120 = a19;
            v121 = a20;
            v122 = a21;
            v117 = a5;
            block[4] = a22;
            v126 = 0;
            dispatch_async(v84, block);
            v52 = v113;
            v65 = 0;
            v29 = 0;
          }
          else
          {
            if (v83 == 1)
            {
              kdebug_trace();
              v52 = v113;
            }
            v49 = a19;
            v50 = a20;
            v48 = _waitForTileEncodingToComplete(v99, v112, v52, v110, 0, v95, a5, a16, a18, a19, a20, a21, a22);
            v85 = *v82;
            v29 = 0;
            if (v85 == 1)
              kdebug_trace();
            if ((_DWORD)v48)
            {
              v59 = 0;
LABEL_95:
              v65 = a18;
              v52 = v113;
              goto LABEL_86;
            }
            v65 = a18;
            v52 = v113;
          }
          v48 = 0;
          v59 = 0;
          goto LABEL_86;
        }
        v48 = FigSignalErrorAt();
        goto LABEL_71;
      }
      v66 = *(float64x2_t *)(a6 + 168);
      v67 = *(float64x2_t *)(a6 + 184);
      v68 = (__CVBuffer *)*((_QWORD *)a6 + 13);
      v90 = *((_QWORD *)a6 + 12);
      v91 = *((_QWORD *)a6 + 11);
      v69 = (__CVBuffer *)*((_QWORD *)a6 + 14);
      v70 = (__CVBuffer *)*((_QWORD *)a6 + 18);
      v109 = (__CVBuffer *)*((_QWORD *)a6 + 17);
      v71 = a6[328];
      v141 = 0;
      v142 = 0;
      v140 = 0;
      v138 = 0;
      v139 = 0;
      v92 = v70;
      v107 = v71;
      if (v71)
      {
        v101 = v67;
        v104 = v66;
        v72 = CMPhotoCompressionPluginCopyReconstructionPixelBufferAttributes((uint64_t)a2);
        if ((_DWORD)v72)
        {
          v48 = v72;
LABEL_68:
          v52 = v113;
LABEL_69:
          if (!v142)
            goto LABEL_72;
          CFRelease(v142);
LABEL_71:
          v52 = v113;
LABEL_72:
          if ((_DWORD)v48)
          {
            v59 = 1;
            LODWORD(v23) = v95;
            a2 = v112;
            v26 = v99;
            v50 = a20;
            v40 = a21;
            v29 = 0;
            v49 = a19;
            goto LABEL_45;
          }
          goto LABEL_73;
        }
        CMPhotoCFDictionaryGetCFValueIfPresent(v142, (const void *)*MEMORY[0x1E0CA9040], &v141);
        FigCFArrayGetInt32AtIndex();
        CMPhotoCFDictionaryGetSizeIfPresent(v142, (const void *)*MEMORY[0x1E0CA90E0], &v139);
        CMPhotoCFDictionaryGetSizeIfPresent(v142, (const void *)*MEMORY[0x1E0CA8FD8], &v138);
        v70 = v92;
        v67 = v101;
        v66 = v104;
      }
      if (!v70)
      {
        v48 = 0;
        goto LABEL_68;
      }
      v73 = 0;
      Mutable = 0;
      v75 = 0;
      v102 = vcvtq_u64_f64(vrndaq_f64(v67));
      v105 = vcvtq_u64_f64(vrndaq_f64(v66));
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v76 = v110 + 56;
      v52 = v113;
      do
      {
        if (v109)
        {
          v77 = 0;
          v78 = v91;
          v89 = v75;
          v79 = (CVPixelBufferRef *)&v76[64 * (uint64_t)v75];
          while (1)
          {
            *(v79 - 7) = v77;
            v80 = v79 - 7;
            *((_BYTE *)v80 + 32) = 0;
            v80[1] = v73;
            v80[2] = v68;
            v80[3] = v69;
            if (v107)
            {
              PixelBufferWithAttributes = CMPhotoSurfacePoolCreatePixelBufferWithAttributes(*(const void **)(v99 + 24), v140, v139, v138, v142, v79);
              if ((_DWORD)PixelBufferWithAttributes)
                goto LABEL_64;
              if (!Mutable)
              {
                Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!Mutable)
                {
                  v48 = 4294950305;
                  goto LABEL_68;
                }
              }
              FigCFDictionarySetValue();
            }
            v136 = v105;
            v137 = v102;
            v132 = v78;
            v133 = v90 + (_QWORD)v73 * (_QWORD)v69;
            v134 = v68;
            v135 = v69;
            PixelBufferWithAttributes = CMPhotoCompressionPluginEncode((uint64_t)v112, v113, a5, &v136, &v132, 0, (uint64_t)Mutable, (uint64_t)(v79 - 7));
            if ((_DWORD)PixelBufferWithAttributes)
            {
LABEL_64:
              v48 = PixelBufferWithAttributes;
              v52 = v113;
              goto LABEL_65;
            }
            v77 = (__CVBuffer *)((char *)v77 + 1);
            v79 += 8;
            v78 += (uint64_t)v68;
            if (v109 == v77)
            {
              v76 = v110 + 56;
              v75 = v89 + (_DWORD)v77;
              v52 = v113;
              v70 = v92;
              break;
            }
          }
        }
        v73 = (__CVBuffer *)((char *)v73 + 1);
      }
      while (v73 != v70);
      v48 = 0;
LABEL_65:
      if (Mutable)
      {
        CFRelease(Mutable);
        goto LABEL_68;
      }
      goto LABEL_69;
    }
    v110 = 0;
    v59 = 1;
    v48 = 4294950305;
    v65 = a18;
    v52 = v113;
    v49 = a19;
    v50 = a20;
LABEL_102:
    v40 = a21;
    goto LABEL_86;
  }
  v40 = a21;
  if ((*((_BYTE *)a11 + 12) & 1) == 0)
  {
    v88 = FigSignalErrorAt();
    v52 = v113;
    v48 = v88;
    v110 = 0;
    v59 = 1;
    v65 = a18;
LABEL_99:
    v49 = a19;
    v50 = a20;
    goto LABEL_86;
  }
  v41 = *a11;
  *(_QWORD *)(v27 + 36) = *((_QWORD *)a11 + 2);
  *(_OWORD *)(v27 + 20) = v41;
  *(_QWORD *)(v27 + 56) = v28;
  v42 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
    v28 = v113;
  }
  v43 = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(a6 + 184)));
  v129[0] = vcvtq_u64_f64(vrndaq_f64(*(float64x2_t *)(a6 + 168)));
  v129[1] = v43;
  v136 = 0u;
  v137 = 0u;
  v44 = v28;
  v45 = CMPhotoCompressionPluginEncode((uint64_t)a2, v28, a5, v129, v136.i64, 0, 0, v27);
  if ((_DWORD)v45)
  {
    v48 = v45;
    v110 = 0;
    v59 = 1;
    v65 = a18;
    v52 = v44;
    goto LABEL_99;
  }
  if (*v42 == 1)
    kdebug_trace();
  v136.i8[0] = 1;
  CMPhotoCFDictionaryGetBooleanIfPresent(a3, CFSTR("AllowAsynchronousEncode"), &v136);
  if (a15)
    v46 = v136.u8[0] == 0;
  else
    v46 = 1;
  v47 = !v46;
  v136.i8[0] = v47;
  if (v46)
  {
    v64 = CMPhotoCompressionPluginCompleteEncodes((uint64_t)a2);
    v49 = a19;
    v50 = a20;
    if (!(_DWORD)v64)
    {
      if (!*(_BYTE *)(v26 + 104))
      {
        v48 = 0;
        goto LABEL_44;
      }
      v64 = FigSignalErrorAt();
    }
    v48 = v64;
    goto LABEL_44;
  }
  v48 = 0;
  v49 = a19;
  v50 = a20;
LABEL_44:
  v110 = 0;
  v111 = 0;
  v52 = 0;
  v59 = 1;
LABEL_45:
  v65 = a18;
LABEL_86:
  if (v65 && *(_QWORD *)(v26 + 200))
  {
    v86 = v52;
    FigSemaphoreSignal();
    v52 = v86;
  }
  if (v59)
    _freeVariablesUsedAcrossAsyncEncodingMethods(v48, v26, a2, v52, v29, v111, v110, v23, v50, v40, v49);
  if (v131)
    CFRelease(v131);
  return v48;
}

uint64_t _freeVariablesUsedAcrossAsyncEncodingMethods(int a1, uint64_t a2, CFTypeRef *a3, CFTypeRef cf, int a5, void *a6, void *a7, int a8, CFTypeRef cfa, const void *a10, uint64_t a11)
{
  uint64_t result;

  if (a5)
  {
    if (!a1)
      goto LABEL_9;
  }
  else
  {
    CMPhotoCompressionPluginDispose(a3);
  }
  if (cf)
    CFRelease(cf);
  if (a6)
    free(a6);
LABEL_9:
  if (a7)
    free(a7);
  if (cfa)
    CFRelease(cfa);
  if (a10)
    CFRelease(a10);
  result = CMPhotoSurfacePoolMarkCachesVolatile(*(_QWORD *)(a2 + 24), 0);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    return kdebug_trace();
  return result;
}

uint64_t _writeDepthRepInfoElement(uint64_t a1, float a2)
{
  uint64_t result;
  float v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;

  result = CMPhotoBitStreamWriteBits(a1, a2 < 0.0, 1u);
  if (!(_DWORD)result)
  {
    v5 = fabsf(a2);
    if (v5 >= 9.3132e-10)
    {
      v7 = vcvtms_s32_f32(log2f(v5));
      v8 = ldexpf(1.0, v7);
      result = CMPhotoBitStreamWriteBits(a1, v7 + 31, 7u);
      if (!(_DWORD)result)
      {
        result = CMPhotoBitStreamWriteBits(a1, 15, 5u);
        if (!(_DWORD)result)
        {
          v9 = ((float)(v5 / v8) + -1.0) * 65536.0;
          LODWORD(v6) = vcvtas_u32_f32(v9);
          return CMPhotoBitStreamWriteBits(a1, v6, 0x10u);
        }
      }
    }
    else
    {
      result = CMPhotoBitStreamWriteBits(a1, 0, 7u);
      if (!(_DWORD)result)
      {
        result = CMPhotoBitStreamWriteBits(a1, 15, 5u);
        if (!(_DWORD)result)
        {
          v6 = 0;
          return CMPhotoBitStreamWriteBits(a1, v6, 0x10u);
        }
      }
    }
  }
  return result;
}

void _compressionPluginSequenceFrameEncodeCallback(int a1, int a2, CMSampleBufferRef sbuf, uint64_t a4, char *a5)
{
  uint64_t v6;
  opaqueCMSampleBuffer *v8;
  const void *v9;
  CMTime v10;
  CMTime time1;
  CMSampleTimingInfo timingInfoOut;
  CMSampleBufferRef sampleBufferOut;

  v6 = *(_QWORD *)a5;
  sampleBufferOut = 0;
  if (!a2)
  {
    memset(&timingInfoOut, 0, sizeof(timingInfoOut));
    if (!CMSampleBufferGetSampleTimingInfo(sbuf, 0, &timingInfoOut)
      && (timingInfoOut.presentationTimeStamp.flags & 1) != 0
      && (timingInfoOut.decodeTimeStamp.flags & 1) != 0)
    {
      time1 = timingInfoOut.presentationTimeStamp;
      v10 = *(CMTime *)(a5 + 20);
      if (!CMTimeCompare(&time1, &v10))
      {
        if (sbuf)
          v8 = (opaqueCMSampleBuffer *)CFRetain(sbuf);
        else
          v8 = 0;
        sampleBufferOut = v8;
LABEL_8:
        if (!CMPhotoHEIFFileWriterAddSampleBufferToImage(*(_QWORD *)(v6 + 88), 0, *((_QWORD *)a5 + 1), v8))goto LABEL_10;
        goto LABEL_9;
      }
    }
    timingInfoOut.decodeTimeStamp = *(CMTime *)(a5 + 20);
    timingInfoOut.presentationTimeStamp = timingInfoOut.decodeTimeStamp;
    *(_OWORD *)&timingInfoOut.duration.value = *MEMORY[0x1E0CA2E18];
    timingInfoOut.duration.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    if (!CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sbuf, 1, &timingInfoOut, &sampleBufferOut))
    {
      v8 = sampleBufferOut;
      goto LABEL_8;
    }
  }
LABEL_9:
  *(_BYTE *)(v6 + 104) = 1;
LABEL_10:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  v9 = (const void *)*((_QWORD *)a5 + 7);
  if (v9)
    CFRelease(v9);
  CMPhotoSurfacePoolMarkCachesVolatile(*(_QWORD *)(v6 + 24), 0);
  free(a5);
}

void _compressionPluginTileEncodeCallback(uint64_t a1, int a2, opaqueCMSampleBuffer *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  __CFDictionary *Mutable;
  const __CFString *v10;
  int v11;
  CFDictionaryRef DictionaryRepresentation;
  const __CFString *v13;
  CFDictionaryRef v14;
  uint64_t v15;
  const void *v16;
  CGPoint v17;
  CGPoint v18;

  if (a2)
  {
    v11 = a2;
    Mutable = 0;
    goto LABEL_26;
  }
  v8 = *a4;
  if (*((_BYTE *)a4 + 44))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      if (*(_BYTE *)(a5 + 32))
      {
        v10 = cmpweak_kFigPictureCollectionWriterOption_OverlayItemIndex();
        v11 = CMPhotoCFDictionarySetInt16(Mutable, v10, *(_WORD *)(a5 + 34));
        if (!v11)
        {
          v17.x = (double)*(unint64_t *)(a5 + 40);
          v17.y = (double)*(unint64_t *)(a5 + 48);
          DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v17);
          if (DictionaryRepresentation)
          {
            v13 = cmpweak_kFigPictureCollectionWriterOption_OverlayItemOffset();
            CFDictionarySetValue(Mutable, v13, DictionaryRepresentation);
            v14 = 0;
            goto LABEL_12;
          }
          v14 = 0;
LABEL_30:
          v11 = -16991;
          goto LABEL_31;
        }
LABEL_26:
        v14 = 0;
        DictionaryRepresentation = 0;
        goto LABEL_31;
      }
      v18.x = (double)*(unint64_t *)a5;
      v18.y = (double)*(unint64_t *)(a5 + 8);
      v14 = CGPointCreateDictionaryRepresentation(v18);
      if (v14)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CC4A88], v14);
        goto LABEL_11;
      }
    }
    else
    {
      v14 = 0;
    }
    DictionaryRepresentation = 0;
    goto LABEL_30;
  }
  Mutable = 0;
  v14 = 0;
LABEL_11:
  DictionaryRepresentation = 0;
LABEL_12:
  v11 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*(_QWORD *)(v8 + 88), Mutable, a4[1], a3);
  if (!v11)
  {
    if (!*(_QWORD *)(a5 + 56))
      goto LABEL_18;
    v15 = a4[8];
    if (!v15)
      goto LABEL_18;
    v11 = (*(uint64_t (**)(void))(v15 + 16))();
    if (!v11)
    {
      v16 = *(const void **)(a5 + 56);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(a5 + 56) = 0;
      }
LABEL_18:
      if (!Mutable)
        goto LABEL_20;
      goto LABEL_19;
    }
  }
LABEL_31:
  *((_DWORD *)a4 + 12) = v11;
  if (Mutable)
LABEL_19:
    CFRelease(Mutable);
LABEL_20:
  if (v14)
    CFRelease(v14);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
}

void ___allowHEIFAsynchronousCompleteEncodeTilesOverride_block_invoke()
{
  _allowHEIFAsynchronousCompleteEncodeTilesOverride_allowAsynchronousComplete = 1;
}

uint64_t ___encodeTiles_block_invoke(uint64_t a1)
{
  _DWORD *v2;
  uint64_t result;

  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 112))
    FigSemaphoreSignal();
  if (*v2 == 1)
    kdebug_trace();
  result = _waitForTileEncodingToComplete(*(_QWORD *)(a1 + 40), *(CFTypeRef **)(a1 + 72), *(const void **)(a1 + 80), *(void **)(a1 + 88), *(unsigned __int8 *)(a1 + 504), *(unsigned int *)(a1 + 488), *(_QWORD *)(a1 + 440), *(_DWORD **)(a1 + 448), *(_BYTE *)(a1 + 505), *(_QWORD *)(a1 + 464), *(const void **)(a1 + 472), *(const void **)(a1 + 480), *(_QWORD *)(a1 + 32));
  if (*v2 == 1)
    result = kdebug_trace();
  if (*(_DWORD *)(a1 + 500))
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 16) = 1;
  return result;
}

uint64_t _waitForTileEncodingToComplete(uint64_t a1, CFTypeRef *a2, const void *a3, void *a4, int a5, uint64_t a6, uint64_t a7, _DWORD *a8, char a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v17 = CMPhotoCompressionPluginCompleteEncodes((uint64_t)a2);
  if (!(_DWORD)v17)
  {
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    if (!a8[12])
    {
      v18 = 0;
      goto LABEL_6;
    }
    v17 = FigSignalErrorAt();
  }
  v18 = v17;
LABEL_6:
  if (a9)
    v19 = a13 == 0;
  else
    v19 = 1;
  if (!v19)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a13 + 16))(a13, v18, a6, a7, 0);
  _freeVariablesUsedAcrossAsyncEncodingMethods(v18, a1, a2, a3, a5, a8, a4, a6, a11, a12, a10);
  return v18;
}

uint64_t _compressThumbnailInternal_0(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, opaqueCMSampleBuffer *a4, int a5, uint64_t a6)
{
  uint64_t SourceDimensions;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v17[2];

  v17[0] = 0;
  v17[1] = 0;
  SourceDimensions = CMPhotoGetSourceDimensions(a4, theDict, v17);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  v13 = 0;
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!a4 || !a5)
    goto LABEL_6;
  v13 = (uint64_t)a4 + rand();
  if (*v14 == 1)
  {
    kdebug_trace();
LABEL_6:
    if (*v14 == 1)
      kdebug_trace();
  }
  v15 = _compressX(a1, theDict, a4, 1, a2, 0, 0, 0, -1, MEMORY[0x1E0CA2E18], a5, v13, 0, a6);
  if (*v14 == 1)
    kdebug_trace();
  return v15;
}

uint64_t _compressAuxImageInternal_0(uint64_t a1, CFIndex a2, unsigned int a3, uint64_t a4, CFDictionaryRef theDict, opaqueCMSampleBuffer *a6, int a7, CFIndex *a8, uint64_t a9)
{
  uint64_t SourceDimensions;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21[2];

  v21[0] = 0;
  v21[1] = 0;
  SourceDimensions = CMPhotoGetSourceDimensions(a6, theDict, v21);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  SourceDimensions = _copyMainAndAuxImageSamplesIfNeeded(a1);
  if ((_DWORD)SourceDimensions)
    return SourceDimensions;
  v18 = 0;
  if (!a6 || !a7)
    goto LABEL_7;
  v18 = (uint64_t)a6 + rand();
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    kdebug_trace();
LABEL_7:
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
  }
  v19 = _compressX(a1, theDict, a6, 2, a2, a3, a4, 1, -1, MEMORY[0x1E0CA2E18], a7, v18, a8, a9);
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  return v19;
}

uint64_t _addCompressedX(uint64_t a1, const __CFDictionary *a2, CFTypeRef cf, int a4, CFIndex a5, int a6, const void *a7, uint64_t a8, const __CFDictionary *a9, uint64_t a10)
{
  CFTypeID v14;
  const __CFAllocator *v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  CFTypeID v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  const __CFDictionary *v22;
  uint64_t HEVCNALULocationAndSizeFromType;
  uint64_t v24;
  CFDictionaryRef DictionaryRepresentation;
  __CFDictionary *v26;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t Dimensions;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  float64x2_t v37;
  const void *v38;
  const void *v39;
  CFDataRef v40;
  CFDataRef v41;
  __CFDictionary *MutableCopy;
  uint64_t v43;
  uint64_t v44;
  const UInt8 *v45;
  CFIndex v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  double v50;
  int v51;
  unint64_t v52;
  const UInt8 *v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  BOOL v57;
  void *v58;
  void *v59;
  int v60;
  char *v61;
  uint64_t v62;
  size_t v63;
  char *v64;
  const UInt8 *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  CFDictionaryRef v69;
  CFDictionaryRef v70;
  uint64_t v71;
  CFDictionaryRef v72;
  uint64_t XMPData;
  _QWORD *v74;
  uint64_t v75;
  int v77;
  uint64_t v78;
  const __CFDictionary *v79;
  __int128 v80;
  __CFDictionary *theDict;
  CFDictionaryRef extensions;
  uint64_t v84;
  char *valuea;
  CFIndex v87;
  void *v88;
  uint64_t v90;
  size_t __n;
  void *__src;
  size_t dataLength;
  CMVideoCodecType codecType;
  __int16 v95;
  int v96;
  CFTypeRef v97;
  float64x2_t v98;
  __int128 v99;
  CMFormatDescriptionRef formatDescriptionOut;
  CMVideoFormatDescriptionRef v101;
  CFIndex v102;
  CGColorSpace *v103;
  void *values;
  void *keys;
  size_t parameterSetSizes[2];
  __int128 v107;
  CGRect size;
  uint64_t v109;
  CGSize v110;
  CGPoint v111;

  *((_QWORD *)&v80 + 1) = a8;
  *(_QWORD *)&v80 = a9;
  v109 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  if (!cf)
    return FigSignalErrorAt();
  v14 = CFGetTypeID(cf);
  if (v14 != CFDataGetTypeID())
    return FigSignalErrorAt();
  v77 = a6;
  v15 = CFGetAllocator((CFTypeRef)a1);
  v102 = -1;
  v103 = 0;
  v101 = 0;
  formatDescriptionOut = 0;
  v98 = 0u;
  v99 = 0u;
  v97 = 0;
  v95 = 0;
  codecType = 1752589105;
  v96 = 1;
  if (a2)
  {
    if (CMPhotoCFDictionaryGetInt32IfPresent(a2, CFSTR("CodecType"), &codecType)
      && codecType == 1752589105)
    {
      CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("PrimaryImage"), (_BYTE *)&v95 + 1);
      CMPhotoCFDictionaryGetBooleanIfPresent(a2, CFSTR("HiddenImage"), &v95);
      CMPhotoCFDictionaryGetCFValueIfPresent(a2, CFSTR("ColorSpace"), (void **)&v103);
      v16 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("TiledGrid"));
      if (!v16)
      {
        v78 = a10;
        v21 = 0;
        v20 = 1;
        v19 = 1;
LABEL_23:
        v87 = a5;
        v90 = v19;
        v84 = v20;
        v22 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("SourceCropRect"));
        CMPhotoCFDictionaryGetIntIfPresent(a2, CFSTR("NumberOfCodecSlices"), &v96);
        goto LABEL_24;
      }
      v17 = v16;
      v18 = CFGetTypeID(v16);
      if (v18 == CFDictionaryGetTypeID())
      {
        size.origin.x = 0.0;
        size.origin.y = 0.0;
        v78 = a10;
        if (CGSizeMakeWithDictionaryRepresentation(v17, (CGSize *)&size))
        {
          v19 = vcvtad_u64_f64(size.origin.x);
          v20 = vcvtad_u64_f64(size.origin.y);
        }
        else
        {
          v20 = 1;
          v19 = 1;
        }
        v21 = v19 > 1 || v20 > 1;
        goto LABEL_23;
      }
    }
    HEVCNALULocationAndSizeFromType = FigSignalErrorAt();
    goto LABEL_14;
  }
  v87 = a5;
  v84 = 1;
  v78 = a10;
  v21 = 0;
  v22 = 0;
  v90 = 1;
LABEL_24:
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  memset(&size, 0, sizeof(size));
  *(_OWORD *)parameterSetSizes = 0u;
  v107 = 0u;
  HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 64, &size, parameterSetSizes);
  if ((_DWORD)HEVCNALULocationAndSizeFromType)
    goto LABEL_14;
  HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 66, &size.origin.y, &parameterSetSizes[1]);
  if ((_DWORD)HEVCNALULocationAndSizeFromType)
    goto LABEL_14;
  HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 68, &size.size.width, (unint64_t *)&v107);
  if ((_DWORD)HEVCNALULocationAndSizeFromType)
    goto LABEL_14;
  HEVCNALULocationAndSizeFromType = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)BytePtr, Length, 2, &size.size.height, (unint64_t *)&v107 + 1);
  if ((_DWORD)HEVCNALULocationAndSizeFromType)
    goto LABEL_14;
  HEVCNALULocationAndSizeFromType = CMVideoFormatDescriptionCreateFromHEVCParameterSets(v15, 3uLL, (const uint8_t *const *)&size, parameterSetSizes, 4, 0, &formatDescriptionOut);
  if ((_DWORD)HEVCNALULocationAndSizeFromType)
    goto LABEL_14;
  Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(formatDescriptionOut);
  v31 = (int)Dimensions;
  v32 = Dimensions >> 32;
  v33 = v90;
  v34 = (double)(unint64_t)((int)Dimensions * v90);
  v35 = v84;
  v36 = (double)(unint64_t)((Dimensions >> 32) * v84);
  v98 = 0uLL;
  *(double *)&v99 = v34;
  *((double *)&v99 + 1) = v36;
  if (v22)
  {
    memset(&size, 0, sizeof(size));
    if (!CGRectMakeWithDictionaryRepresentation(v22, &size)
      || (HEVCNALULocationAndSizeFromType = CMPhotoApplyCropRectToRect(v98.f64, size.origin.x, size.origin.y, size.size.width, size.size.height), !(_DWORD)HEVCNALULocationAndSizeFromType))
    {
      v37 = v98;
      v36 = *((double *)&v99 + 1);
      v34 = *(double *)&v99;
      goto LABEL_34;
    }
LABEL_14:
    v24 = HEVCNALULocationAndSizeFromType;
    DictionaryRepresentation = 0;
    extensions = 0;
LABEL_15:
    v26 = 0;
    goto LABEL_125;
  }
  v37 = 0uLL;
LABEL_34:
  v98 = vrndaq_f64(v37);
  *(_QWORD *)&v99 = round(v34);
  *((_QWORD *)&v99 + 1) = round(v36);
  v38 = CMFormatDescriptionGetExtensions(formatDescriptionOut);
  if (v38)
    v38 = CFRetain(v38);
  extensions = (CFDictionaryRef)v38;
  if (v103)
  {
    size.origin.x = 0.0;
    v39 = (const void *)*MEMORY[0x1E0CA2210];
    if (!CMPhotoCFDictionaryGetCFValueIfPresent((CFDictionaryRef)v38, (const void *)*MEMORY[0x1E0CA2210], (void **)&size))
    {
      v40 = CGColorSpaceCopyICCData(v103);
      if (v40)
      {
        v41 = v40;
        MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        CFDictionarySetValue(MutableCopy, v39, v41);
        if (extensions)
          CFRelease(extensions);
        CFRelease(v41);
        extensions = MutableCopy;
        v35 = v84;
      }
    }
  }
  v43 = CMVideoFormatDescriptionCreate(v15, codecType, vcvtad_u64_f64(*(double *)&v99), vcvtad_u64_f64(*((double *)&v99 + 1)), extensions, &v101);
  if ((_DWORD)v43)
  {
    v24 = v43;
    DictionaryRepresentation = 0;
    goto LABEL_15;
  }
  theDict = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!theDict)
  {
    DictionaryRepresentation = 0;
    v26 = 0;
    v24 = 4294950305;
    goto LABEL_125;
  }
  if (v21)
  {
    v110.width = (double)v31;
    v110.height = (double)(unint64_t)v32;
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v110);
    if (!DictionaryRepresentation)
    {
      v24 = 4294950305;
      goto LABEL_117;
    }
    v26 = theDict;
    CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CC4A80], DictionaryRepresentation);
  }
  else
  {
    DictionaryRepresentation = 0;
    v26 = theDict;
  }
  if (HIBYTE(v95))
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E0CC4A70], (const void *)*MEMORY[0x1E0C9AE50]);
  if ((_BYTE)v95)
  {
    if (HIBYTE(v95))
      goto LABEL_122;
    CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E0CC4A30], (const void *)*MEMORY[0x1E0C9AE40]);
  }
  if (a4 == 2)
  {
    v79 = DictionaryRepresentation;
    if (a7)
      CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E0CC4A28], a7);
    v44 = CMPhotoHEIFFileWriterAddAuxiliaryImageToImage(*(_QWORD *)(a1 + 88), v26, v87, codecType, v101, &v102);
    if ((_DWORD)v44)
      goto LABEL_57;
    goto LABEL_61;
  }
  if (a4 == 1)
  {
    v79 = DictionaryRepresentation;
    v44 = CMPhotoHEIFFileWriterAddThumbnailToImage(*(_QWORD *)(a1 + 88), v26, v87, codecType, v101, &v102);
    if ((_DWORD)v44)
      goto LABEL_57;
    goto LABEL_61;
  }
  if (a4)
  {
LABEL_122:
    XMPData = FigSignalErrorAt();
    goto LABEL_123;
  }
  v79 = DictionaryRepresentation;
  v44 = CMPhotoHEIFFileWriterAddImageToCollection(*(_QWORD *)(a1 + 88), v26, codecType, v101, &v102);
  if ((_DWORD)v44)
  {
LABEL_57:
    v24 = v44;
    DictionaryRepresentation = v79;
    goto LABEL_125;
  }
LABEL_61:
  v45 = CFDataGetBytePtr((CFDataRef)cf);
  v46 = CFDataGetLength((CFDataRef)cf);
  if (!v35)
  {
LABEL_109:
    if (a4 != 2 || v80 == 0)
    {
      v74 = (_QWORD *)v78;
      DictionaryRepresentation = v79;
      v26 = theDict;
      if (!v78)
      {
        v24 = 0;
        goto LABEL_125;
      }
      goto LABEL_119;
    }
    XMPData = CMPhotoAuxiliaryImageMetadataCreateXMPData((int)v15, *((CGImageMetadataRef *)&v80 + 1), a9, v77, 0, (CFDataRef *)&v97);
    v74 = (_QWORD *)v78;
    DictionaryRepresentation = v79;
    v26 = theDict;
    if (!(_DWORD)XMPData)
    {
      v75 = CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, v102, 1, v97, 0, 0, 0);
      v24 = v75;
      if (!v78 || (_DWORD)v75)
        goto LABEL_125;
LABEL_119:
      v24 = 0;
      *v74 = v102;
      goto LABEL_125;
    }
LABEL_123:
    v24 = XMPData;
    goto LABEL_125;
  }
  v47 = v46;
  v48 = 0;
  v88 = (void *)*MEMORY[0x1E0CC4A88];
  while (1)
  {
    valuea = v48;
    if (v33)
      break;
LABEL_108:
    v48 = valuea + 1;
    if (valuea + 1 == (char *)v84)
      goto LABEL_109;
  }
  v49 = 0;
  v50 = (double)v48;
  while (1)
  {
    size.origin.x = 0.0;
    parameterSetSizes[0] = 0;
    dataLength = 0;
    if (v96 < 1)
      break;
    v51 = 0;
    v52 = v47;
    v53 = v45;
    while (1)
    {
      __n = 0;
      __src = 0;
      v54 = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)v53, v52, 1, &__src, &__n);
      if ((_DWORD)v54)
        break;
      v55 = __n + dataLength + 4;
      dataLength = v55;
      v56 = (_BYTE *)__src + __n - v53;
      v57 = v52 >= v56;
      v52 -= v56;
      if (!v57)
      {
        v24 = 4294950306;
        goto LABEL_101;
      }
      ++v51;
      v53 = (const UInt8 *)__src + __n;
      if (v51 >= v96)
        goto LABEL_73;
    }
    v24 = v54;
LABEL_101:
    v69 = 0;
    v70 = 0;
LABEL_89:
    if (*(_QWORD *)&size.origin.x)
      CFRelease(*(CFTypeRef *)&size.origin.x);
    if (parameterSetSizes[0])
      CFRelease((CFTypeRef)parameterSetSizes[0]);
    if (v69)
      CFRelease(v69);
    if (v70)
      CFRelease(v70);
    if ((_DWORD)v24)
      goto LABEL_116;
    if (++v49 == v33)
      goto LABEL_108;
  }
  v55 = 0;
LABEL_73:
  v58 = CFAllocatorAllocate(v15, v55, 0);
  v59 = v58;
  if (v96 < 1)
  {
    v65 = v45;
    v67 = v47;
LABEL_81:
    v68 = CMBlockBufferCreateWithMemoryBlock(v15, v59, dataLength, v15, 0, 0, dataLength, 1u, (CMBlockBufferRef *)&size);
    if ((_DWORD)v68)
    {
      v24 = v68;
      CFAllocatorDeallocate(v15, v59);
      v69 = 0;
      v70 = 0;
      v45 = v65;
      v47 = v67;
LABEL_83:
      v33 = v90;
      goto LABEL_89;
    }
    v71 = CMSampleBufferCreate(v15, *(CMBlockBufferRef *)&size.origin.x, 1u, 0, 0, formatDescriptionOut, 1, 0, 0, 1, &dataLength, (CMSampleBufferRef *)parameterSetSizes);
    v33 = v90;
    if (!(_DWORD)v71)
    {
      v111.x = (double)v49;
      v111.y = v50;
      v72 = CGPointCreateDictionaryRepresentation(v111);
      v69 = v72;
      if (v72)
      {
        values = v72;
        keys = v88;
        v70 = CFDictionaryCreate(v15, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v70)
        {
          v24 = CMPhotoHEIFFileWriterAddSampleBufferToImage(*(_QWORD *)(a1 + 88), v70, v102, (opaqueCMSampleBuffer *)parameterSetSizes[0]);
LABEL_88:
          v45 = v65;
          v47 = v67;
          goto LABEL_89;
        }
      }
      else
      {
        v70 = 0;
      }
      v24 = 4294950305;
      goto LABEL_88;
    }
    v24 = v71;
    v69 = 0;
    v70 = 0;
    goto LABEL_88;
  }
  v60 = 0;
  v61 = (char *)v58;
  while (1)
  {
    __n = 0;
    __src = 0;
    v62 = CMPhotoGetHEVCNALULocationAndSizeFromType((uint64_t)v45, v47, 1, &__src, &__n);
    if ((_DWORD)v62)
    {
      v24 = v62;
LABEL_104:
      v69 = 0;
      v70 = 0;
      goto LABEL_83;
    }
    v63 = __n;
    if (HIDWORD(__n))
      break;
    *(_DWORD *)v61 = bswap32(__n);
    v64 = v61 + 4;
    memcpy(v64, __src, v63);
    v65 = (const UInt8 *)__src + __n;
    v66 = (_BYTE *)__src + __n - v45;
    v67 = v47 - v66;
    if (v47 < v66)
    {
      v24 = 4294950306;
      goto LABEL_104;
    }
    v61 = &v64[__n];
    ++v60;
    v47 -= v66;
    v45 = (const UInt8 *)__src + __n;
    if (v60 >= v96)
      goto LABEL_81;
  }
  v24 = 4294950190;
LABEL_116:
  DictionaryRepresentation = v79;
LABEL_117:
  v26 = theDict;
LABEL_125:
  if (v97)
    CFRelease(v97);
  if (extensions)
    CFRelease(extensions);
  if (v103)
    CFRelease(v103);
  if (v101)
    CFRelease(v101);
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (v26)
    CFRelease(v26);
  if (DictionaryRepresentation)
    CFRelease(DictionaryRepresentation);
  return v24;
}

uint64_t _addExifInternal(uint64_t a1, CFIndex a2, CFDictionaryRef theDict, const __CFData *a4)
{
  unint64_t Length;
  uint64_t result;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 104))
    return FigSignalErrorAt();
  v9 = 0;
  if (theDict
    && CMPhotoCFDictionaryGetInt32IfPresent(theDict, CFSTR("TIFFHeaderOffset"), (char *)&v9 + 4))
  {
    Length = CFDataGetLength(a4);
    if (Length > HIDWORD(v9))
    {
      LOBYTE(v9) = 1;
      return CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, a2, 0, a4, HIDWORD(v9), 0, 0);
    }
    return FigSignalErrorAt();
  }
  result = CMPhotoExifDetectTIFFHeaderOffset(a4, &v9, (_DWORD *)&v9 + 1);
  if ((_DWORD)result)
    return result;
  if (!(_BYTE)v9)
    return FigSignalErrorAt();
  return CMPhotoHEIFFileWriterAddMetadataToImage(*(_QWORD *)(a1 + 88), 0, a2, 0, a4, HIDWORD(v9), 0, 0);
}

uint64_t ___compressMainWithAuxiliaryAsync_block_invoke(uint64_t a1)
{
  const __CFDictionary *Value;
  const void *v3;
  CFTypeID v4;
  uint64_t v5;
  _DWORD *v6;
  CFIndex v7;
  uint64_t result;

  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("IncludeAlphaAuxiliaryImageWithOptions"));
  if (CFDictionaryGetCount(Value) <= 0)
    goto LABEL_20;
  v3 = (const void *)FigCFDictionaryGetValue();
  if (CFDictionaryContainsKey(Value, CFSTR("IncludeAlphaAuxiliaryImageWithOptions"))
    || (v3 != 0) != (*(_QWORD *)(a1 + 48) == 0))
  {
    goto LABEL_20;
  }
  if (!v3)
  {
    v5 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(v5 + 16) || !*(_BYTE *)(v5 + 72))
      goto LABEL_19;
    goto LABEL_10;
  }
  v4 = CFGetTypeID(v3);
  if (v4 != CMFormatDescriptionGetTypeID())
  {
LABEL_20:
    result = FigSignalErrorAt();
    goto LABEL_16;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 16))
  {
LABEL_19:
    result = 4294950195;
    goto LABEL_16;
  }
LABEL_10:
  v6 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  FigSemaphoreWaitRelative();
  if (*v6 == 1)
    kdebug_trace();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 144);
  if (v7 < 0)
    goto LABEL_20;
  result = _compressAuxImageInternal_0(*(_QWORD *)(a1 + 56), v7, 3u, 0, Value, *(opaqueCMSampleBuffer **)(a1 + 48), 0, 0, 0);
LABEL_16:
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

BOOL CMPhotoIsMatchedJxlDecodeAPI()
{
  return JxlDecoderVersion() >> 3 > 0x464;
}

uint64_t CMPhotoMSRSupportsHDR()
{
  if (CMPhotoMSRSupportsHDR_onceToken != -1)
    dispatch_once(&CMPhotoMSRSupportsHDR_onceToken, &__block_literal_global_23);
  return CMPhotoMSRSupportsHDR_sHDRSupported;
}

uint64_t CMPhotoGetHEVCProfileForPixelFormat(uint64_t a1, int a2)
{
  uint64_t UncompressedPixelFormatFromCompressedPixelFormat;
  unint64_t BitDepthForPixelFormat;
  int ChromaSubsamplingFromPixelFormat;
  uint64_t v6;

  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat);
  ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat);
  if (BitDepthForPixelFormat < 9)
  {
    if (ChromaSubsamplingFromPixelFormat == 1 || ChromaSubsamplingFromPixelFormat == 3)
    {
      v6 = MEMORY[0x1E0CED9A0];
    }
    else if (ChromaSubsamplingFromPixelFormat == 6)
    {
      v6 = MEMORY[0x1E0CED9C0];
    }
    else
    {
      v6 = MEMORY[0x1E0CED9B0];
      if (!a2)
        v6 = MEMORY[0x1E0CED9A8];
    }
  }
  else
  {
    switch(ChromaSubsamplingFromPixelFormat)
    {
      case 1:
        v6 = MEMORY[0x1E0CED998];
        break;
      case 3:
        v6 = MEMORY[0x1E0CED990];
        break;
      case 6:
        v6 = MEMORY[0x1E0CED9B8];
        break;
      default:
        v6 = MEMORY[0x1E0CED988];
        break;
    }
  }
  return *(_QWORD *)v6;
}

uint64_t CMPhotoSupportsAVCEncode()
{
  return 0;
}

uint64_t CMPhotoGetAVCProfileForPixelFormat(uint64_t a1)
{
  uint64_t UncompressedPixelFormatFromCompressedPixelFormat;
  int ChromaSubsamplingFromPixelFormat;
  uint64_t v3;
  uint64_t v4;

  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  CMPhotoGetBitDepthForPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat);
  ChromaSubsamplingFromPixelFormat = CMPhotoGetChromaSubsamplingFromPixelFormat(UncompressedPixelFormatFromCompressedPixelFormat);
  v3 = MEMORY[0x1E0CED8D8];
  v4 = MEMORY[0x1E0CED8E0];
  if (ChromaSubsamplingFromPixelFormat != 1)
    v4 = MEMORY[0x1E0CED930];
  if (ChromaSubsamplingFromPixelFormat != 3)
    v3 = v4;
  return *(_QWORD *)v3;
}

uint64_t CMPhotoSupportsMLEncode()
{
  return 0;
}

uint64_t CMPhotoSupportsProResEncode(int a1)
{
  uint64_t result;
  char *v3;

  result = 0;
  if (a1 <= 1634755437)
  {
    if (a1 <= 1634743399)
    {
      if (a1 == 1634742376)
      {
        if (CMPhotoSupportsProResEncode_onceTokenAppleProRes400 != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes400, &__block_literal_global_9);
        v3 = &sDeviceSupportsProResEncoding_0;
      }
      else
      {
        if (a1 != 1634742888)
          return result;
        if (CMPhotoSupportsProResEncode_onceTokenAppleProRes420 != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes420, &__block_literal_global_11);
        v3 = &sDeviceSupportsProResEncoding_1;
      }
    }
    else
    {
      switch(a1)
      {
        case 1634743400:
          if (CMPhotoSupportsProResEncode_onceTokenAppleProRes4444 != -1)
            dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes4444, &__block_literal_global_13_1);
          v3 = &sDeviceSupportsProResEncoding_2;
          break;
        case 1634743416:
          if (CMPhotoSupportsProResEncode_onceTokenAppleProRes4444XQ != -1)
            dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes4444XQ, &__block_literal_global_15_1);
          v3 = &sDeviceSupportsProResEncoding_3;
          break;
        case 1634755432:
          if (CMPhotoSupportsProResEncode_onceTokenAppleProRes422HQ != -1)
            dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes422HQ, &__block_literal_global_17_0);
          v3 = &sDeviceSupportsProResEncoding_4;
          break;
        default:
          return result;
      }
    }
  }
  else if (a1 > 1634759271)
  {
    switch(a1)
    {
      case 1634759272:
        if (CMPhotoSupportsProResEncode_onceTokenAppleProResRAWHQ != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProResRAWHQ, &__block_literal_global_27_0);
        v3 = &sDeviceSupportsProResEncoding_9;
        break;
      case 1634759278:
        if (CMPhotoSupportsProResEncode_onceTokenAppleProResRAW != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProResRAW, &__block_literal_global_25_0);
        v3 = &sDeviceSupportsProResEncoding_8;
        break;
      case 1634759276:
        if (CMPhotoSupportsProResEncode_onceTokenAppleProRes400 != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes400, &__block_literal_global_7);
        v3 = &sDeviceSupportsProResEncoding_10;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(a1)
    {
      case 1634755438:
        if (CMPhotoSupportsProResEncode_onceTokenAppleProRes422 != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes422, &__block_literal_global_19);
        v3 = &sDeviceSupportsProResEncoding_5;
        break;
      case 1634755439:
        if (CMPhotoSupportsProResEncode_onceTokenAppleProRes422Proxy != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes422Proxy, &__block_literal_global_23);
        v3 = &sDeviceSupportsProResEncoding_7;
        break;
      case 1634755443:
        if (CMPhotoSupportsProResEncode_onceTokenAppleProRes422LT != -1)
          dispatch_once(&CMPhotoSupportsProResEncode_onceTokenAppleProRes422LT, &__block_literal_global_21);
        v3 = &sDeviceSupportsProResEncoding_6;
        break;
      default:
        return result;
    }
  }
  return *v3;
}

BOOL _isProResEncoderAvailable(int a1)
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  if (a1 == 1634759276)
  {
    if (sDeviceType < 0xD)
      return 0;
  }
  else if (sDeviceType < 0xB)
  {
    return 0;
  }
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType != 14;
}

BOOL CMPhotoSupportsAGXCompressedFormat()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 9;
}

BOOL CMPhotoSupportsLossyCompressedFormat()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 0xA;
}

BOOL CMPhotoSupportsIncreasedRoundingPointForJPEG()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 7;
}

BOOL CMPhotoSupportsSourcePadding()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 0xA;
}

uint64_t CMPhotoPerceptualCurveVersion()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  if (sDeviceType <= 0xB)
    return 1;
  else
    return 2;
}

uint64_t CMPhotoDNGDefaultBitDepth()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  if (sDeviceType <= 0xB)
    return 16;
  else
    return 10;
}

BOOL CMPhotoSupportsHEIFQualityV2()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 0xB;
}

BOOL CMPhotoAVESupportsHEIFQualityV2()
{
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 0xA;
}

float CMPhotoGetHEIFQualityDefault(uint64_t a1, uint64_t a2)
{
  float result;

  result = 0.75;
  if ((unint64_t)(a2 * a1) <= 0xF423FF)
  {
    if ((unint64_t)(a2 * a1) < 0xB71B00)
    {
      return 0.85;
    }
    else
    {
      pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
      result = 0.85;
      if (sDeviceType >= 0xC)
        return 0.75;
    }
  }
  return result;
}

uint64_t CMPhotoValidateMobileGestaltQuery()
{
  _BOOL8 v0;
  const void *v1;
  int v2;
  const void *v3;
  int v4;

  if (_isMobileGestaltVirtualDevice())
    return 1;
  v1 = (const void *)MGCopyAnswer();
  v2 = FigCFEqual();
  v3 = (const void *)MGCopyAnswer();
  v4 = FigCFEqual();
  if (v2
    || (pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType), sDeviceType <= 5))
  {
    if (v4)
    {
      v0 = 1;
      if (!v1)
        goto LABEL_10;
    }
    else
    {
      pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
      v0 = sDeviceType < 5;
      if (!v1)
        goto LABEL_10;
    }
LABEL_9:
    CFRelease(v1);
    goto LABEL_10;
  }
  v0 = 0;
  if (v1)
    goto LABEL_9;
LABEL_10:
  if (v3)
    CFRelease(v3);
  return v0;
}

uint64_t _isMobileGestaltVirtualDevice()
{
  const void *v0;
  uint64_t v1;

  v0 = (const void *)MGCopyAnswer();
  v1 = FigCFEqual();
  if (v0)
    CFRelease(v0);
  return v1;
}

BOOL CMPhotoIs422EncodeAvailable(int a1, int a2)
{
  if (a1 == 1936484717 || a1 == 1785750887)
    return 1;
  if (a1 != 1752589105 || a2)
    return 0;
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 6;
}

BOOL CMPhotoIs444EncodeAvailable(int a1, int a2)
{
  if (a1 == 1936484717 || a1 == 1785750887)
    return 1;
  if (a1 != 1752589105 || a2)
    return 0;
  pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
  return sDeviceType > 5;
}

BOOL CMPhotoIsRGBEncodeAvailable(int a1)
{
  return a1 == 1936484717;
}

BOOL CMPhotoIs400EncodeAvailable(int a1)
{
  if (a1 > 1785750886)
  {
    return a1 == 1785750887 || a1 == 1936484717;
  }
  else if (a1 == 1635148593)
  {
    pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
    return sDeviceType > 7;
  }
  else
  {
    return a1 == 1752589105;
  }
}

uint64_t CMPhotoIsPixelFormatSupportedBySLIM(int a1)
{
  uint64_t v1;

  v1 = 0;
  while (slimPixelFormatList_0[v1] != a1)
  {
    if (++v1 == 62)
      return 0;
  }
  return 1;
}

BOOL CMPhotoIsPixelFormatSupportedByAVC(int a1)
{
  switch(a1)
  {
    case 875704422:
      return 1;
    case 1278226488:
      pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
      return sDeviceType > 7;
    case 875704438:
      return 1;
    default:
      return 0;
  }
}

BOOL CMPhotoIsPixelFormatSupportedByHEVC(uint64_t a1, int a2)
{
  int v2;
  _BOOL8 result;
  int v4;
  int UncompressedPixelFormatFromCompressedPixelFormat;
  int v6;
  unsigned __int16 v7;
  int v8;

  v2 = a1;
  if (a2)
  {
    result = 0;
    if (v2 > 1278226735)
    {
      if (v2 != 1278226736 && v2 != 2019963440)
      {
        v4 = 2016686640;
LABEL_14:
        if (v2 != v4)
          return result;
      }
    }
    else if (v2 != 875704422 && v2 != 875704438)
    {
      v4 = 1278226488;
      goto LABEL_14;
    }
    return 1;
  }
  UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(a1);
  result = 0;
  if (UncompressedPixelFormatFromCompressedPixelFormat > 1882468911)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 2016687155)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 2019963441)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2019963442)
          goto LABEL_40;
        v7 = 13364;
      }
      else
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2016687156)
          return 1;
        v7 = 12848;
      }
      v6 = v7 | 0x78660000;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat > 2016686639)
      {
        if (UncompressedPixelFormatFromCompressedPixelFormat == 2016686640)
          return 1;
        v8 = 2016686642;
        goto LABEL_31;
      }
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1882468912)
        return 1;
      v6 = 1885745712;
    }
LABEL_38:
    if (UncompressedPixelFormatFromCompressedPixelFormat != v6)
      return result;
    return 1;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat > 875836517)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat > 1278226487)
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 1278226488)
        return 1;
      v6 = 1278226736;
    }
    else
    {
      if (UncompressedPixelFormatFromCompressedPixelFormat == 875836518)
        return 1;
      v6 = 875836534;
    }
    goto LABEL_38;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat <= 875704933)
  {
    if (UncompressedPixelFormatFromCompressedPixelFormat != 875704422)
    {
      v6 = 875704438;
      goto LABEL_38;
    }
    return 1;
  }
  if (UncompressedPixelFormatFromCompressedPixelFormat == 875704934)
  {
LABEL_40:
    pthread_once(&_getDeviceType_onceToken, (void (*)(void))_once_getDeviceType);
    return sDeviceType > 6;
  }
  v8 = 875704950;
LABEL_31:
  if (UncompressedPixelFormatFromCompressedPixelFormat == v8)
    goto LABEL_40;
  return result;
}

uint64_t CMPhotoIsTileEncoderAvailable(int a1)
{
  if (a1 == 1752589105)
  {
    if (CMPhotoIsTileEncoderAvailable_onceTokenHEVC != -1)
      dispatch_once(&CMPhotoIsTileEncoderAvailable_onceTokenHEVC, &__block_literal_global_35);
    return sTileEncodersAvailable_1;
  }
  else
  {
    if (a1 == 1635148593)
    {
      if (CMPhotoIsTileEncoderAvailable_onceTokenAVC == -1)
        return 0;
      dispatch_once(&CMPhotoIsTileEncoderAvailable_onceTokenAVC, &__block_literal_global_33);
    }
    return 0;
  }
}

BOOL CMPhotoEncoderSupportsPixelFormat(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 IsPixelFormatSupportedByAVC;
  unint64_t BitDepthForPixelFormat;
  int v11;
  int v12;
  int v13;
  BOOL v14;

  if (!(_DWORD)a1)
    return 0;
  v5 = a1;
  if (a2 == 1635148593)
  {
    IsPixelFormatSupportedByAVC = CMPhotoIsPixelFormatSupportedByAVC(a1);
    if (!IsPixelFormatSupportedByAVC)
      LODWORD(v5) = 875704422;
    if (!a4)
      return IsPixelFormatSupportedByAVC;
LABEL_15:
    *a4 = v5;
    return IsPixelFormatSupportedByAVC;
  }
  if (a2 == 1752589105)
  {
    if (CMPhotoIsPixelFormatSupportedByHEVC(a1, a3))
    {
LABEL_14:
      IsPixelFormatSupportedByAVC = 1;
      if (!a4)
        return IsPixelFormatSupportedByAVC;
      goto LABEL_15;
    }
    BitDepthForPixelFormat = CMPhotoGetBitDepthForPixelFormat(v5);
    if ((int)v5 > 1717855599)
    {
      if ((int)v5 > 1751410031)
      {
        if ((_DWORD)v5 == 1751411059)
          goto LABEL_32;
        v11 = 1751410032;
      }
      else
      {
        if ((_DWORD)v5 == 1717855600)
          goto LABEL_32;
        v11 = 1717856627;
      }
      if ((_DWORD)v5 != v11)
      {
LABEL_38:
        IsPixelFormatSupportedByAVC = 0;
        v14 = BitDepthForPixelFormat > 8;
        v12 = 875704422;
        v13 = 2019963440;
LABEL_33:
        if (v14)
          LODWORD(v5) = v13;
        else
          LODWORD(v5) = v12;
        if (!a4)
          return IsPixelFormatSupportedByAVC;
        goto LABEL_15;
      }
    }
    else if (((v5 - 1278226488) > 0x30 || ((1 << (v5 - 56)) & 0x1400000000001) == 0)
           && ((v5 - 1278226736) > 6 || ((1 << (v5 - 48)) & 0x45) == 0))
    {
      goto LABEL_38;
    }
LABEL_32:
    IsPixelFormatSupportedByAVC = 0;
    v12 = 1278226488;
    v13 = 1278226736;
    v14 = BitDepthForPixelFormat > 8;
    goto LABEL_33;
  }
  if (a2 != 1936484717)
    goto LABEL_14;
  v6 = 0;
  while (1)
  {
    v7 = slimPixelFormatList_0[v6];
    if (v7 == (_DWORD)a1)
      break;
    if (++v6 == 62)
    {
      LODWORD(a1) = 0;
      break;
    }
  }
  IsPixelFormatSupportedByAVC = v7 == (_DWORD)v5;
  LODWORD(v5) = a1;
  if (a4)
    goto LABEL_15;
  return IsPixelFormatSupportedByAVC;
}

uint64_t CMPhotoReuseCompressionSessionForDifferentQuantizationMatrixPresetDisabled()
{
  if (CMPhotoReuseCompressionSessionForDifferentQuantizationMatrixPresetDisabled_onceToken != -1)
    dispatch_once(&CMPhotoReuseCompressionSessionForDifferentQuantizationMatrixPresetDisabled_onceToken, &__block_literal_global_44);
  return 0;
}

uint64_t CMPhotoSetDecodeHardwareCutoff(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2 = &g_cutOffJPEG;
  if (!(_DWORD)result)
    v2 = &g_cutOffHEIF;
  *v2 = a2;
  return result;
}

uint64_t CMPhotoAllowExperimentalCodecsOverride(char a1)
{
  _QWORD block[4];
  char v3;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __CMPhotoAllowExperimentalCodecsOverride_block_invoke;
  block[3] = &__block_descriptor_tmp_45;
  v3 = a1;
  if (CMPhotoAllowExperimentalCodecsOverride_onceToken != -1)
    dispatch_once(&CMPhotoAllowExperimentalCodecsOverride_onceToken, block);
  return CMPhotoAllowExperimentalCodecsOverride_sAllowSlimCodec;
}

uint64_t CMPhotoDNGCompressorGetTypeID()
{
  pthread_once(&CMPhotoDNGCompressorGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDNGCompressor);
  return sCMPhotoDNGCompressorTypeID;
}

uint64_t RegisterCMPhotoDNGCompressor()
{
  uint64_t result;

  FigKTraceInit();
  sCMPhotoDNGCompressorClass = 0;
  *(_QWORD *)algn_1EE99A118 = "CMPhotoDNGCompressor";
  qword_1EE99A120 = (uint64_t)CMPhotoDNGCompressorClass_Init;
  unk_1EE99A128 = 0;
  qword_1EE99A130 = (uint64_t)CMPhotoDNGCompressorClass_Finalize;
  unk_1EE99A138 = 0;
  qword_1EE99A140 = 0;
  unk_1EE99A148 = CMPhotoDNGCompressorClass_CopyFormattingDesc;
  qword_1EE99A150 = (uint64_t)CMPhotoDNGCompressorClass_CopyDebugDesc;
  result = _CFRuntimeRegisterClass();
  sCMPhotoDNGCompressorTypeID = result;
  return result;
}

uint64_t CMPhotoDNGVersionFromPropertiesAndOptions(const __CFDictionary *a1, uint64_t a2, int a3, int a4, const __CFString **a5)
{
  const __CFDictionary *DictCFDict;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  CFTypeID v13;
  const __CFString *v14;
  const __CFString *v15;
  const void *v16;
  const void *DictCFArray;
  BOOL v18;
  const __CFString *v20;
  uint64_t result;
  int valuePtr;

  DictCFDict = (const __CFDictionary *)_readDictCFDict(a1, (const void *)*MEMORY[0x1E0CBC980]);
  if (!DictCFDict)
    return 4294950741;
  v10 = DictCFDict;
  Value = (const __CFNumber *)CFDictionaryGetValue(DictCFDict, (const void *)*MEMORY[0x1E0CBC968]);
  if (Value)
  {
    v12 = Value;
    v13 = CFGetTypeID(Value);
    v14 = CFSTR("1.3.0.0");
    if (v13 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v12, kCFNumberIntType, &valuePtr);
      if (valuePtr == 1)
        v14 = CFSTR("1.4.0.0");
    }
  }
  else
  {
    v14 = CFSTR("1.3.0.0");
  }
  if (a3)
    v15 = CFSTR("1.5.0.0");
  else
    v15 = v14;
  v16 = _readDictCFDict(v10, CFSTR("ProfileGainTableMap"));
  DictCFArray = _readDictCFArray(v10, CFSTR("WarpRectilinear2"), 0);
  if (v16)
    v18 = 0;
  else
    v18 = a4 == 0;
  if (v18 && DictCFArray == 0)
    v20 = v15;
  else
    v20 = CFSTR("1.6.0.0");
  if (a2)
    FigCFDictionaryGetIntIfPresent();
  result = 0;
  *a5 = v20;
  return result;
}

const void *_readDictCFDict(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v5;

  CFDictionaryGetTypeID();
  Value = CFDictionaryGetValue(a1, a2);
  v5 = Value;
  if (Value)
    CFGetTypeID(Value);
  return v5;
}

const void *_readDictCFArray(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  const void *Value;
  const void *v7;

  CFArrayGetTypeID();
  Value = CFDictionaryGetValue(a1, a2);
  v7 = Value;
  if (Value)
  {
    CFGetTypeID(Value);
  }
  else if (a3)
  {
    *a3 = 1;
  }
  return v7;
}

uint64_t CMPhotoDNGVersionFromProperties(const __CFDictionary *a1, int a2, int a3, const __CFString **a4)
{
  return CMPhotoDNGVersionFromPropertiesAndOptions(a1, 0, a2, a3, a4);
}

uint64_t CMPhotoDNGCreateDNGFromCompressedData(const __CFDictionary *a1, const __CFData *a2, const __CFData *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  return _createDNGInternal(a1, a3, a4, a2, 0, 0, 0, 0, a5);
}

uint64_t _createDNGInternal(const __CFDictionary *a1, const __CFData *a2, const __CFDictionary *a3, const __CFData *a4, __CVBuffer *a5, const __CFArray *a6, int a7, _QWORD *a8, CFTypeRef *a9)
{
  _DWORD *v14;
  uint64_t v15;
  int v16;
  OSType PixelFormatType;
  const __CFAllocator *v18;
  unsigned int v19;
  uint64_t v20;
  const __CFData *v21;
  size_t v22;
  unsigned int v23;
  unsigned int v24;
  __int16 *v25;
  __int16 v26;
  size_t v27;
  __int16 *BytePtr;
  size_t Length;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  CFDictionaryRef v35;
  CFDictionaryRef v36;
  const __CFData *EXIFDataFromProperties;
  const __CFData *v38;
  const UInt8 *v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  int v50;
  CFTypeRef *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  uint64_t v58;
  char *v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  char *v64;
  const __CFData *v65;
  size_t v66;
  __int16 *v67;
  int v68;
  char *v69;
  const __CFData *v70;
  size_t v71;
  __int16 *v72;
  CFIndex v73;
  uint64_t v74;
  UInt8 *v75;
  unsigned int *v76;
  unsigned int v77;
  __CFData *v78;
  const UInt8 *v79;
  CFIndex v80;
  __CFData *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  UInt8 *MutableBytePtr;
  unsigned int *v86;
  unsigned int v87;
  const __CFData *v88;
  __CFData *v89;
  const UInt8 *v90;
  CFIndex v91;
  __CFData *v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t i;
  char *v100;
  const void *v101;
  const void *v102;
  const void *v103;
  void *v104;
  int v106;
  unsigned int v107;
  unsigned int v108;
  __CVBuffer *v109;
  _QWORD *v110;
  unsigned int v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  __int128 v118;
  void *v119[2];
  CFMutableDataRef theData[2];
  uint64_t v121;
  __int16 __src[20];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  CFTypeRef cf;
  uint64_t v129;
  int v130;
  CFDataRef v131;
  uint64_t v132;
  __int16 v133;
  __int16 v134;
  __int16 v135[36];
  __int16 v136[36];
  int v137;
  int v138;
  int v139;
  int v140;
  _BYTE v141[20];
  __int16 v142[26];
  char v143;
  __int16 v144[36];
  __int16 v145[36];
  char v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  CFTypeRef v152;
  char v153;
  char v154;
  int v155;
  int v156;
  int v157;
  int v158;
  void *v159;
  void *v160;
  _DWORD __n[3];
  int v162;
  void *values;
  void *keys[3];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  bzero(__src, 0x828uLL);
  v121 = 0;
  *(_OWORD *)v119 = 0u;
  *(_OWORD *)theData = 0u;
  v118 = 0u;
  v116 = 0xFFFF;
  v117 = 0xFFFF;
  FigKTraceInit();
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v15 = 4294950746;
  if (!a1 || !a9)
    goto LABEL_157;
  v16 = a4 == 0;
  if (!a5)
    ++v16;
  if (v16 != 1)
  {
    v15 = 4294950739;
    goto LABEL_157;
  }
  if (a7)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(a5);
    if (PixelFormatType != 1751527984 && PixelFormatType != 1815491698)
    {
      v20 = FigSignalErrorAt();
      goto LABEL_78;
    }
  }
  *a9 = 0;
  if (*v14 == 1)
    kdebug_trace();
  v15 = _dngInfoInit((uint64_t)__src, a4, a5, a1, a6, a7, a3, (uint64_t)a2);
  if (*v14 == 1)
    kdebug_trace();
  if ((_DWORD)v15)
    goto LABEL_157;
  v109 = a5;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theData[1] = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!theData[1]
    || (LOBYTE(v121) = 1,
        LODWORD(v119[0]) = 0,
        LODWORD(theData[0]) = 20,
        (v119[1] = malloc_type_malloc(0x50uLL, 0x100004052888210uLL)) == 0))
  {
    v15 = 4294950745;
    goto LABEL_157;
  }
  v110 = a8;
  v118 = 0uLL;
  v19 = v158;
  CFDataAppendBytes(theData[1], _cmphotoDNGWriterWriteTIFFHeader_sTiffHeaderBE, 8);
  CFDataAppendBytes(theData[1], _cmphotoDNGWriterWriteTIFFHeader_sAppleDNGID, 8);
  v20 = _cmphotoDNGWriterIFDBegin((uint64_t)&v118, 4);
  if ((_DWORD)v20)
  {
LABEL_78:
    v15 = v20;
    goto LABEL_157;
  }
  v21 = a2;
  if (a2)
    v22 = v19 + 1;
  else
    v22 = v19;
  if (v132)
    _ifdAddTagS((char **)&v118, 270, v132);
  _ifdAddTagS((char **)&v118, 271, v123);
  _ifdAddTagS((char **)&v118, 272, v124);
  LODWORD(keys[0]) = v130;
  _ifdAddTag4((char **)&v118, 274, 3u, 1uLL, (__int16 *)keys);
  _ifdAddTagS((char **)&v118, 305, v125);
  _ifdAddTagS((char **)&v118, 306, (uint64_t)cf);
  if (v126)
    _ifdAddTagS((char **)&v118, 315, v126);
  if ((int)v22 < 1)
    v114 = 0xFFFF;
  else
    v114 = _ifdAddTag4((char **)&v118, 330, 4u, v22, 0);
  if (v127)
    _ifdAddTagS((char **)&v118, 33432, v127);
  if (v154)
  {
    LODWORD(keys[0]) = 0;
    v23 = _ifdAddTag4((char **)&v118, 34665, 4u, 1uLL, (__int16 *)keys);
  }
  else
  {
    v23 = 0xFFFF;
  }
  if (v153)
  {
    LODWORD(keys[0]) = 0;
    v24 = _ifdAddTag4((char **)&v118, 34853, 4u, 1uLL, (__int16 *)keys);
  }
  else
  {
    v24 = 0xFFFF;
  }
  _ifdAddTag4((char **)&v118, 50706, 1u, 4uLL, __src);
  _ifdAddTag4((char **)&v118, 50707, 1u, 4uLL, word_1A8296252);
  _ifdAddTagS((char **)&v118, 50708, v129);
  _ifdAddTag4((char **)&v118, 50721, 0xAu, 9uLL, v135);
  _ifdAddTag4((char **)&v118, 50722, 0xAu, 9uLL, v136);
  if (v146)
  {
    _ifdAddTag4((char **)&v118, 50723, 0xAu, 9uLL, v144);
    _ifdAddTag4((char **)&v118, 50724, 0xAu, 9uLL, v145);
  }
  if (v141[16])
  {
    v25 = (__int16 *)&v140;
    v26 = -14808;
    v27 = 3;
  }
  else
  {
    v25 = (__int16 *)v141;
    v26 = -14807;
    v27 = 2;
  }
  _ifdAddTag4((char **)&v118, v26, 5u, v27, v25);
  if (v143)
    _ifdAddTag4((char **)&v118, 50727, 5u, 3uLL, v142);
  if (v137)
    _ifdAddTag4((char **)&v118, 50730, 0xAu, 1uLL, (__int16 *)&v137);
  if (v138)
    _ifdAddTag4((char **)&v118, 50731, 5u, 1uLL, (__int16 *)&v138);
  if (v139)
    _ifdAddTag4((char **)&v118, 50732, 5u, 1uLL, (__int16 *)&v139);
  if (v131)
  {
    BytePtr = (__int16 *)CFDataGetBytePtr(v131);
    Length = CFDataGetLength(v131);
    _ifdAddTag4((char **)&v118, 50740, 1u, Length, BytePtr);
  }
  LODWORD(keys[0]) = v133;
  _ifdAddTag4((char **)&v118, 50778, 3u, 1uLL, (__int16 *)keys);
  LODWORD(keys[0]) = v134;
  _ifdAddTag4((char **)&v118, 50779, 3u, 1uLL, (__int16 *)keys);
  if (v148)
    _ifdAddTagS((char **)&v118, 50931, v148);
  if (v149)
    _ifdAddTagS((char **)&v118, 50932, v149);
  if (__n[0] >= 1)
    _ifdAddTag4((char **)&v118, 50940, 0xBu, __n[0], *(__int16 **)&__n[1]);
  if (v150)
    _ifdAddTagS((char **)&v118, 50934, v150);
  if (v151)
    _ifdAddTagS((char **)&v118, 50936, v151);
  if (v162 != -1)
  {
    LODWORD(keys[0]) = v162;
    _ifdAddTag4((char **)&v118, 50941, 4u, 1uLL, (__int16 *)keys);
  }
  _ifdAddTag4((char **)&v118, 50935, 5u, 1uLL, &v147);
  if (a2)
  {
    LODWORD(keys[0]) = 1;
    _ifdAddTag4((char **)&v118, 254, 4u, 1uLL, (__int16 *)keys);
    LODWORD(keys[0]) = v155;
    _ifdAddTag4((char **)&v118, 256, 4u, 1uLL, (__int16 *)keys);
    LODWORD(keys[0]) = v156;
    _ifdAddTag4((char **)&v118, 257, 4u, 1uLL, (__int16 *)keys);
    _ifdAddTag4((char **)&v118, 258, 3u, 3uLL, _addJPEGPreviewTags_bps888);
    LODWORD(keys[0]) = v157;
    _ifdAddTag4((char **)&v118, 259, 3u, 1uLL, (__int16 *)keys);
    if (v157 == 52546)
      v30 = 2;
    else
      v30 = 6;
    LODWORD(keys[0]) = v30;
    _ifdAddTag4((char **)&v118, 262, 3u, 1uLL, (__int16 *)keys);
    LODWORD(keys[0]) = 0;
    v31 = _ifdAddTag4((char **)&v118, 273, 4u, 1uLL, (__int16 *)keys);
    LODWORD(keys[0]) = 3;
    _ifdAddTag4((char **)&v118, 277, 3u, 1uLL, (__int16 *)keys);
    LODWORD(keys[0]) = v156;
    _ifdAddTag4((char **)&v118, 278, 4u, 1uLL, (__int16 *)keys);
    LODWORD(keys[0]) = CFDataGetLength(a2);
    _ifdAddTag4((char **)&v118, 279, 4u, 1uLL, (__int16 *)keys);
  }
  else
  {
    _addRawImageTags((char **)&v118, (uint64_t)__src, &v117, &v116);
    v31 = 0xFFFF;
  }
  v32 = _cmphotoDNGWriterIFDEnd((char **)&v118);
  if ((_DWORD)v32)
    goto LABEL_179;
  if (!v152)
    goto LABEL_105;
  v115 = 0;
  if (v154)
  {
    v32 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v23, (_DWORD *)&v115 + 1);
    if ((_DWORD)v32)
      goto LABEL_179;
  }
  if (!v153)
  {
    v33 = 0;
    goto LABEL_80;
  }
  v32 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v24, &v115);
  if ((_DWORD)v32)
  {
LABEL_179:
    v15 = v32;
    goto LABEL_157;
  }
  v33 = v115;
LABEL_80:
  v34 = HIDWORD(v115);
  keys[0] = *(void **)MEMORY[0x1E0CBC7C8];
  values = (void *)*MEMORY[0x1E0C9AE40];
  v35 = CFDictionaryCreate(v18, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v35)
  {
    v15 = 4294950745;
    goto LABEL_157;
  }
  v36 = v35;
  EXIFDataFromProperties = (const __CFData *)CGImageCreateEXIFDataFromProperties();
  if (!EXIFDataFromProperties)
  {
    CFRelease(v36);
    v15 = 4294950739;
    goto LABEL_157;
  }
  v38 = EXIFDataFromProperties;
  v39 = CFDataGetBytePtr(EXIFDataFromProperties);
  v40 = (uint64_t)(v39 + 6);
  v41 = CMPhotoDNGRead16((unsigned __int16 *)v39 + 3, 0);
  if (v41 != 19789 && v41 != 18761)
    goto LABEL_98;
  v42 = v41 == 19789;
  if (v121 != v42)
  {
    v15 = 4294950739;
    goto LABEL_103;
  }
  if (CMPhotoDNGRead16((unsigned __int16 *)v39 + 4, v42) == 42)
  {
    v43 = CMPhotoDNGRead32((unsigned int *)(v39 + 10), v42);
    if (!v43)
      goto LABEL_102;
    v44 = v43;
    v107 = v31;
    v45 = CMPhotoDNGRead16((unsigned __int16 *)(v40 + v43), v42);
    if (v45)
    {
      v46 = v45;
      v106 = v34;
      v47 = 0;
      v48 = 0;
      v49 = (unsigned int *)&v39[v44 + 16];
      do
      {
        v50 = CMPhotoDNGRead16((unsigned __int16 *)v49 - 4, v42);
        if (v50 == 34853)
        {
          v47 = CMPhotoDNGRead32(v49, v42);
        }
        else if (v50 == 34665)
        {
          v48 = CMPhotoDNGRead32(v49, v42);
        }
        v49 += 3;
        --v46;
      }
      while (v46);
      v31 = v107;
      if (v48)
      {
        v15 = _cmphotoDNGWriterIFDInsert((uint64_t)&v118, v40, v48, v106);
        if ((_DWORD)v15 || !v47)
          goto LABEL_103;
        goto LABEL_101;
      }
      if (v47)
      {
LABEL_101:
        v15 = _cmphotoDNGWriterIFDInsert((uint64_t)&v118, v40, v47, v33);
        goto LABEL_103;
      }
LABEL_102:
      v15 = 0;
      goto LABEL_103;
    }
    v15 = 0;
  }
  else
  {
LABEL_98:
    v15 = 4294950743;
  }
LABEL_103:
  CFRelease(v38);
  CFRelease(v36);
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if ((_DWORD)v15)
    goto LABEL_157;
  v21 = a2;
LABEL_105:
  v51 = a9;
  if (v21)
  {
    LODWORD(keys[0]) = 0;
    v20 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v114, keys);
    if ((_DWORD)v20)
      goto LABEL_78;
    v20 = _cmphotoDNGWriterIFDBegin((uint64_t)&v118, (int)keys[0]);
    if ((_DWORD)v20)
      goto LABEL_78;
    _addRawImageTags((char **)&v118, (uint64_t)__src, &v117, &v116);
    v20 = _cmphotoDNGWriterIFDEnd((char **)&v118);
    if ((_DWORD)v20)
      goto LABEL_78;
  }
  v52 = v158;
  if (v158 >= 1)
  {
    v108 = v31;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 4 * (v21 != 0);
    do
    {
      v57 = (char *)v159;
      LODWORD(values) = 0;
      v58 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v114, &values);
      if ((_DWORD)v58)
        goto LABEL_146;
      v58 = _cmphotoDNGWriterIFDBegin((uint64_t)&v118, v56 + (int)values);
      if ((_DWORD)v58)
        goto LABEL_146;
      v59 = &v57[v53];
      if ((*(_DWORD *)&v57[v53 + 28] - 1) > 1)
      {
        LODWORD(keys[0]) = 65540;
        _ifdAddTag4((char **)&v118, 254, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 8);
        _ifdAddTag4((char **)&v118, 256, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 9);
        _ifdAddTag4((char **)&v118, 257, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 8;
        _ifdAddTag4((char **)&v118, 258, 3u, 1uLL, (__int16 *)keys);
        v62 = *((_DWORD *)v59 + 6) - 1;
        if (v62 > 4)
          v63 = 0;
        else
          v63 = dword_1A829626C[v62];
        LODWORD(keys[0]) = v63;
        _ifdAddTag4((char **)&v118, 259, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 52527;
        _ifdAddTag4((char **)&v118, 262, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 0;
        *((_DWORD *)v59 + 15) = _ifdAddTag4((char **)&v118, 273, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 1;
        _ifdAddTag4((char **)&v118, 277, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 9);
        _ifdAddTag4((char **)&v118, 278, 4u, 1uLL, (__int16 *)keys);
        v69 = &v57[v53];
        LODWORD(keys[0]) = CFDataGetLength(*(CFDataRef *)&v57[v53]);
        _ifdAddTag4((char **)&v118, 279, 4u, 1uLL, (__int16 *)keys);
        v70 = *(const __CFData **)&v57[v53 + 8];
        if (v70)
        {
          v71 = CFDataGetLength(v70);
          v72 = (__int16 *)CFDataGetBytePtr(*((CFDataRef *)v69 + 1));
          _ifdAddTag4((char **)&v118, 700, 1u, v71, v72);
        }
        _ifdAddTagS((char **)&v118, 52526, *((_QWORD *)v69 + 2));
      }
      else
      {
        LODWORD(keys[0]) = 8;
        _ifdAddTag4((char **)&v118, 254, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 8);
        _ifdAddTag4((char **)&v118, 256, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 9);
        _ifdAddTag4((char **)&v118, 257, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 10);
        _ifdAddTag4((char **)&v118, 258, 3u, 1uLL, (__int16 *)keys);
        v60 = *((_DWORD *)v59 + 6) - 1;
        if (v60 > 4)
          v61 = 0;
        else
          v61 = dword_1A829626C[v60];
        LODWORD(keys[0]) = v61;
        _ifdAddTag4((char **)&v118, 259, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 51177;
        _ifdAddTag4((char **)&v118, 262, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 0;
        *((_DWORD *)v59 + 15) = _ifdAddTag4((char **)&v118, 273, 4u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 1;
        _ifdAddTag4((char **)&v118, 277, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = *((_DWORD *)v59 + 9);
        _ifdAddTag4((char **)&v118, 278, 4u, 1uLL, (__int16 *)keys);
        v64 = &v57[v53];
        LODWORD(keys[0]) = CFDataGetLength(*(CFDataRef *)&v57[v53]);
        _ifdAddTag4((char **)&v118, 279, 4u, 1uLL, (__int16 *)keys);
        v65 = *(const __CFData **)&v57[v53 + 8];
        if (v65)
        {
          v66 = CFDataGetLength(v65);
          v67 = (__int16 *)CFDataGetBytePtr(*((CFDataRef *)v64 + 1));
          _ifdAddTag4((char **)&v118, 700, 1u, v66, v67);
        }
        v68 = *((_DWORD *)v59 + 7) == 1 ? 2 : 1;
        LODWORD(keys[0]) = v68;
        _ifdAddTag4((char **)&v118, 51177, 3u, 1uLL, (__int16 *)keys);
        _ifdAddTag4((char **)&v118, 51178, 5u, 1uLL, (__int16 *)v64 + 22);
        _ifdAddTag4((char **)&v118, 51179, 5u, 1uLL, (__int16 *)v64 + 26);
        LODWORD(keys[0]) = 1;
        _ifdAddTag4((char **)&v118, 51180, 3u, 1uLL, (__int16 *)keys);
        LODWORD(keys[0]) = 1;
        _ifdAddTag4((char **)&v118, 51181, 3u, 1uLL, (__int16 *)keys);
      }
      v73 = CFDataGetLength(*(CFDataRef *)&v57[v53]);
      v58 = _cmphotoDNGWriterIFDEnd((char **)&v118);
      if ((_DWORD)v58)
      {
LABEL_146:
        v15 = v58;
        goto LABEL_147;
      }
      v55 += v73;
      ++v54;
      v52 = v158;
      v56 += 4;
      v53 += 64;
    }
    while (v54 < v158);
    v51 = a9;
    v21 = a2;
    v31 = v108;
    if (a2)
      goto LABEL_134;
    goto LABEL_136;
  }
  v55 = 0;
  if (!v21)
  {
LABEL_136:
    if (v52 < 1)
    {
LABEL_140:
      v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      v94 = v116;
      LODWORD(keys[0]) = 0;
      LODWORD(values) = 0;
      v95 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v117, keys);
      if ((_DWORD)v95 || (v95 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v94, &values), (_DWORD)v95))
      {
        v15 = v95;
        v96 = v110;
      }
      else
      {
        v96 = v110;
        if (a4)
        {
          v97 = CMPhotoDNGWriteCompressedRaw(__src, a4, theData[1], (int)keys[0], (int)values, v121);
        }
        else if (a7)
        {
          v97 = CMPhotoDNGCompressLinearDNG(__src, v109, theData[1], LODWORD(keys[0]), values, v121);
        }
        else
        {
          v97 = CMPhotoDNGCompressRaw(__src, v109, theData[1], (int)keys[0], (int)values, v121);
        }
        v15 = v97;
      }
      if (*v14 == 1)
        kdebug_trace();
      if (!(_DWORD)v15)
      {
        *v51 = CFRetain(theData[1]);
        v15 = 0;
        if (v96)
          *v96 = v55;
      }
      goto LABEL_157;
    }
    v83 = 0;
    v84 = 0;
    while (1)
    {
      LODWORD(keys[0]) = 0;
      v74 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, *(_DWORD *)((char *)v159 + v83 + 60), keys);
      if ((_DWORD)v74)
        goto LABEL_177;
      MutableBytePtr = CFDataGetMutableBytePtr(theData[1]);
      v86 = (unsigned int *)&MutableBytePtr[LODWORD(keys[0])];
      v87 = CFDataGetLength(theData[1]);
      CMPhotoDNGWrite32(v86, v87, v121);
      v88 = *(const __CFData **)((char *)v159 + v83);
      v89 = theData[1];
      v90 = CFDataGetBytePtr(v88);
      v91 = CFDataGetLength(v88);
      CFDataAppendBytes(v89, v90, v91);
      v92 = theData[1];
      v93 = CFDataGetLength(theData[1]);
      CFDataAppendBytes(v92, zero, -v93 & 3);
      ++v84;
      v83 += 64;
      if (v84 >= v158)
        goto LABEL_140;
    }
  }
LABEL_134:
  LODWORD(keys[0]) = 0;
  v74 = _cmphotoDNGWriterIFDGetTagDataOffset((uint64_t)&v118, v31, keys);
  if (!(_DWORD)v74)
  {
    v75 = CFDataGetMutableBytePtr(theData[1]);
    v76 = (unsigned int *)&v75[LODWORD(keys[0])];
    v77 = CFDataGetLength(theData[1]);
    CMPhotoDNGWrite32(v76, v77, v121);
    v78 = theData[1];
    v79 = CFDataGetBytePtr(v21);
    v80 = CFDataGetLength(v21);
    CFDataAppendBytes(v78, v79, v80);
    v81 = theData[1];
    v82 = CFDataGetLength(theData[1]);
    CFDataAppendBytes(v81, zero, -v82 & 3);
    v52 = v158;
    goto LABEL_136;
  }
LABEL_177:
  v15 = v74;
LABEL_147:
  v14 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_157:
  if (*v14 == 1)
    kdebug_trace();
  if (cf)
    CFRelease(cf);
  if (v152)
    CFRelease(v152);
  if (v158 >= 1)
  {
    v98 = 0;
    for (i = 0; i < v158; ++i)
    {
      v100 = (char *)v159;
      v101 = *(const void **)((char *)v159 + v98 + 16);
      if (v101)
      {
        CFRelease(v101);
        v100 = (char *)v159;
      }
      v102 = *(const void **)&v100[v98];
      if (v102)
      {
        CFRelease(v102);
        v100 = (char *)v159;
      }
      v103 = *(const void **)&v100[v98 + 8];
      if (v103)
        CFRelease(v103);
      v98 += 64;
    }
  }
  free(v159);
  _cmphotoDNGWriterReleaseTagStorage((char **)&v118);
  if (theData[1])
  {
    CFRelease(theData[1]);
    theData[1] = 0;
  }
  v104 = v119[1];
  if (v119[1])
  {
    v119[1] = 0;
    free(v104);
  }
  free(v160);
  free(*(void **)&__n[1]);
  return v15;
}

uint64_t CMPhotoDNGCreateDNGFromRAWPixelBuffer(const __CFDictionary *a1, __CVBuffer *a2, const __CFData *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  return _createDNGInternal(a1, a3, a4, 0, a2, 0, 0, 0, a5);
}

uint64_t CMPhotoDNGCreateDNGFromRAWPixelBufferAndAuxiliaryImage(const __CFDictionary *a1, __CVBuffer *a2, const __CFData *a3, const void *a4, const void *a5, const void *a6, const __CFDictionary *a7, CFTypeRef *a8)
{
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  uint64_t DNGInternal;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if (!a4)
    return _createDNGInternal(a1, a3, a7, 0, a2, 0, 0, 0, a8);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294950745;
  v17 = Mutable;
  DNGInternal = 4294950746;
  if (a5 && a6)
  {
    CFDictionarySetValue(Mutable, CFSTR("AuxPixelBuffer"), a4);
    CFDictionarySetValue(v17, CFSTR("AuxMetadata"), a5);
    CFDictionarySetValue(v17, CFSTR("AuxImageType"), a6);
    if (a7)
      CFDictionarySetValue(v17, CFSTR("AuxOptions"), a7);
    v20[0] = v17;
    DNGInternal = _createDNGInternal(a1, a3, a7, 0, a2, (const __CFArray *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1), 0, 0, a8);
  }
  CFRelease(v17);
  return DNGInternal;
}

uint64_t CMPhotoDNGCreateLinearDNGFromPixelBuffer(const __CFDictionary *a1, __CVBuffer *a2, const __CFData *a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  return _createDNGInternal(a1, a3, a4, 0, a2, 0, 1, 0, a5);
}

uint64_t CMPhotoDNGCreateCompressedDataFromRAWPixelBuffer(__CVBuffer *a1, uint64_t a2, __CFData **a3)
{
  CFMutableDataRef Mutable;
  __CFData *v6;
  int Width;
  int Height;
  CFIndex v9;
  int Length;
  int v11;
  uint64_t v12;
  UInt8 bytes[8];
  OSType PixelFormatType;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _DWORD v21[407];
  uint64_t v22;
  int v23;

  bzero(v21, 0x828uLL);
  FigKTraceInit();
  if (!a3)
    return 4294950746;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 4294950745;
  v6 = Mutable;
  FigCFDictionaryGetBooleanIfPresent();
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  v21[25] = Width;
  v21[26] = Height;
  v21[405] = 2;
  _tileDescriptionInitialize((uint64_t)v21);
  *(_QWORD *)bytes = 0x163726177;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v16 = Width;
  v17 = Height;
  v18 = v22;
  v9 = v23;
  v19 = v23;
  v20 = 1;
  CFDataAppendBytes(v6, bytes, 36);
  Length = CFDataGetLength(v6);
  v9 *= 4;
  CFDataIncreaseLength(v6, v9);
  v11 = CFDataGetLength(v6);
  CFDataIncreaseLength(v6, v9);
  v12 = CMPhotoDNGCompressRaw(v21, a1, v6, Length, v11, v20);
  if ((_DWORD)v12)
    CFRelease(v6);
  else
    *a3 = v6;
  return v12;
}

uint64_t _tileDescriptionInitialize(uint64_t result)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;

  v1 = (_DWORD *)result;
  v3 = *(_DWORD *)(result + 100);
  v2 = *(_DWORD *)(result + 104);
  *(_DWORD *)(result + 1628) = v3;
  *(_DWORD *)(result + 1632) = v2;
  *(_DWORD *)(result + 1636) = 1;
  if (*(_BYTE *)(result + 4))
  {
    result = CMPhotoGetPreferredDNGTileSizeForImageSize(v3, v2, *(_DWORD *)(result + 8));
    v1[407] = result;
    v1[408] = v4;
    v5 = (v4 + v1[26] - 1) / v4 * (((int)result + v1[25] - 1) / (int)result);
LABEL_17:
    v1[409] = v5;
    return result;
  }
  if (v3 >= 512 && (v3 & 0xF) == 0)
  {
    v5 = 1;
    do
    {
      v7 = v3 >> 1;
      v5 *= 2;
      if (v3 < 0x400)
        break;
      v8 = v3 & 0x1E;
      v3 = v3 >> 1;
    }
    while (!v8);
    *(_DWORD *)(result + 1628) = v7;
    *(_DWORD *)(result + 1636) = v5;
  }
  else
  {
    v5 = 1;
  }
  if (v2 >= 512 && (v2 & 3) == 0)
  {
    do
    {
      v9 = v2 >> 1;
      v5 *= 2;
      if (v2 < 0x400)
        break;
      v10 = v2 & 6;
      v2 = v2 >> 1;
    }
    while (!v10);
    *(_DWORD *)(result + 1632) = v9;
    goto LABEL_17;
  }
  return result;
}

uint64_t CMPhotoDNGCreateCVPixelBufferFromData(const __CFData *a1, unint64_t a2, unint64_t a3, size_t a4, uint64_t a5, uint64_t a6, CVPixelBufferRef *a7)
{
  return _createCVPixelBufferFromDNGData(a1, a2, a3, 0, 0, a4, a5, a6, a7);
}

uint64_t _createCVPixelBufferFromDNGData(CFDataRef theData, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, size_t a6, uint64_t a7, uint64_t a8, CVPixelBufferRef *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  const __CFAllocator *v22;
  double v23;
  size_t v24;
  double v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  size_t v31;
  unint64_t v32;
  CGColorSpaceRef v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFDictionary *pixelBufferAttributes;
  double v41;
  double v42;
  CFAllocatorRef *v43;
  void *v44;
  uint64_t v45;
  IOSurfaceRef v46;
  void *v47;
  const __CFAllocator *v48;
  UInt8 *BytePtr;
  uint64_t v50;
  CVPixelBufferRef pixelBufferOut;
  _QWORD v53[7];
  _QWORD v54[7];
  void *planeBaseAddress[2];
  size_t planeBytesPerRow[2];
  size_t v57[2];
  size_t planeWidth[2];
  _QWORD v59[4];
  _QWORD v60[6];

  v60[4] = *MEMORY[0x1E0C80C00];
  pixelBufferOut = 0;
  if (!theData)
    return 4294950739;
  v16 = a3;
  v17 = a2;
  if (a5 | a4)
  {
    v18 = 4294950741;
    if (!a4 || !a5)
      goto LABEL_39;
    v17 = CMPhotoAlignValue(a2, a4);
    v16 = CMPhotoAlignValue(a3, a5);
  }
  if (!a6)
  {
    a6 = CMPhotoGetBytesPerPixelForPixelFormat(a7) * v17;
    if (!a6)
    {
      v18 = 4294950741;
      goto LABEL_39;
    }
  }
  if ((_DWORD)a7 == 1751527984 || (_DWORD)a7 == 875704422)
  {
    v18 = 4294950739;
    if (!v17)
      goto LABEL_39;
    if (!v16)
      goto LABEL_39;
    v32 = (unint64_t)((double)(unint64_t)CFDataGetLength(theData) * 0.666666667);
    if (a6 * v16 != v32)
      goto LABEL_39;
    v33 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D958]);
    v34 = *MEMORY[0x1E0CA8FF0];
    v60[0] = MEMORY[0x1E0C9AA70];
    v35 = *MEMORY[0x1E0CA9040];
    v59[0] = v34;
    v59[1] = v35;
    v36 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a7);
    v37 = *MEMORY[0x1E0CA8E98];
    v38 = *MEMORY[0x1E0CA8EB8];
    v60[1] = v36;
    v60[2] = v38;
    v39 = *MEMORY[0x1E0CA8CD8];
    v59[2] = v37;
    v59[3] = v39;
    v60[3] = v33;
    pixelBufferAttributes = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 4);
    planeWidth[0] = a2;
    planeWidth[1] = a2 >> 1;
    v57[0] = a3;
    v57[1] = a3 >> 1;
    planeBytesPerRow[0] = a6;
    planeBytesPerRow[1] = a6;
    planeBaseAddress[0] = (void *)CFDataGetBytePtr(theData);
    planeBaseAddress[1] = (void *)&CFDataGetBytePtr(theData)[v32];
    CFRetain(theData);
    v18 = CVPixelBufferCreateWithPlanarBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3, a7, 0, 0, 2uLL, planeBaseAddress, planeWidth, v57, planeBytesPerRow, (CVPixelBufferReleasePlanarBytesCallback)_pixelBufferPlanarReleaseCallback, theData, pixelBufferAttributes, &pixelBufferOut);
    if (v33)
      CFRelease(v33);
    if ((_DWORD)v18)
      goto LABEL_39;
  }
  else if ((_DWORD)a7)
  {
    v18 = 4294950739;
    if (!v17 || !v16)
      goto LABEL_39;
    if (CFDataGetLength(theData) != a6 * v16)
    {
      v18 = 4294950743;
      goto LABEL_39;
    }
    v43 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if ((_DWORD)a7 != 1815491698)
      goto LABEL_51;
    v44 = (void *)MEMORY[0x1A85D1038]();
    v53[0] = *MEMORY[0x1E0CBBF68];
    v54[0] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", CFDataGetBytePtr(theData));
    v53[1] = *MEMORY[0x1E0CBBEE0];
    v54[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", CFDataGetLength(theData));
    v53[2] = *MEMORY[0x1E0CBBF08];
    v54[2] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a6);
    v53[3] = *MEMORY[0x1E0CBC1E0];
    v54[3] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2);
    v53[4] = *MEMORY[0x1E0CBC008];
    v54[4] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a3);
    v53[5] = *MEMORY[0x1E0CBC070];
    v45 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1815491698);
    v53[6] = *MEMORY[0x1E0CBBF00];
    v54[5] = v45;
    v54[6] = &unk_1E53FE700;
    v46 = IOSurfaceCreate((CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 7));
    v47 = (id)CFMakeCollectable(v46);
    objc_setAssociatedObject(v47, _createCVPixelBufferFromDNGData, theData, (void *)1);
    v18 = CVPixelBufferCreateWithIOSurface(*v43, (IOSurfaceRef)v47, 0, &pixelBufferOut);
    objc_autoreleasePoolPop(v44);
    if ((_DWORD)v18)
      goto LABEL_39;
    if (!pixelBufferOut)
    {
LABEL_51:
      CFRetain(theData);
      v48 = *v43;
      BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
      v50 = CVPixelBufferCreateWithBytes(v48, a2, a3, a7, BytePtr, a6, (CVPixelBufferReleaseBytesCallback)_pixelBufferReleaseCallback, theData, 0, &pixelBufferOut);
      if ((_DWORD)v50)
      {
        v18 = v50;
        goto LABEL_39;
      }
    }
  }
  else
  {
    v19 = (void *)MEMORY[0x1A85D1038]();
    v20 = (void *)-[objc_class imageWithData:](getCIImageClass_0(), "imageWithData:", theData);
    if (!v20)
    {
      v18 = 2;
      goto LABEL_18;
    }
    v21 = v20;
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    objc_msgSend(v20, "extent");
    v24 = (unint64_t)v23;
    objc_msgSend(v21, "extent");
    v26 = CVPixelBufferCreate(v22, v24, (unint64_t)v25, 0x6C363472u, 0, &pixelBufferOut);
    if ((_DWORD)v26)
    {
      v18 = v26;
      goto LABEL_18;
    }
    v27 = objc_alloc(getCIRenderDestinationClass());
    v28 = (id)objc_msgSend(v27, "initWithPixelBuffer:", pixelBufferOut);
    objc_msgSend(v28, "setAlphaMode:", 2);
    objc_msgSend(v28, "setColorSpace:", objc_msgSend(v21, "colorSpace"));
    planeWidth[0] = 0;
    v29 = (void *)-[objc_class context](getCIContextClass_0(), "context");
    if (!v29)
    {
      v18 = 4294950745;
      goto LABEL_18;
    }
    v30 = (void *)objc_msgSend(v29, "startTaskToRender:toDestination:error:", v21, v28, planeWidth);
    v31 = planeWidth[0];
    if (!v30
      || planeWidth[0]
      || (objc_msgSend(v30, "waitUntilCompletedAndReturnError:", planeWidth), (v31 = planeWidth[0]) != 0))
    {
      NSLog(CFSTR("%@"), v31);
      v18 = 4294950739;
LABEL_18:
      objc_autoreleasePoolPop(v19);
      goto LABEL_39;
    }
    objc_autoreleasePoolPop(v19);
  }
  if (!(_DWORD)a8 || (_DWORD)a8 == (_DWORD)a7)
  {
    v18 = 0;
    *a9 = pixelBufferOut;
    return v18;
  }
  planeWidth[0] = 0;
  v18 = CMPhotoScaleAndRotateSessionTransformForSize(0, pixelBufferOut, 1, 1, a8, 0, 0, 1u, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24), *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8), v41, v42, 0, 1u, (__CVBuffer **)planeWidth);
  if (!(_DWORD)v18)
    *a9 = (CVPixelBufferRef)planeWidth[0];
LABEL_39:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v18;
}

uint64_t CMPhotoDNGCreateCVPixelBufferFromTiledData(CFDataRef theData, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, size_t a6, uint64_t a7, uint64_t a8, CVPixelBufferRef *a9)
{
  return _createCVPixelBufferFromDNGData(theData, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t CMPhotoDNGCompressorCreate(const __CFAllocator *a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t Instance;
  _QWORD *v9;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;

  result = 4294950746;
  if (a2 <= 1 && a4)
  {
    pthread_once(&CMPhotoDNGCompressorGetTypeID_onceToken, (void (*)(void))RegisterCMPhotoDNGCompressor);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v9 = (_QWORD *)Instance;
      *(_DWORD *)(Instance + 16) = a2;
      *(_QWORD *)(Instance + 96) = 0;
      Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      v9[9] = Mutable;
      if (Mutable)
      {
        v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
        v9[10] = v11;
        if (v11)
        {
          result = 0;
          v9[8] = 0;
          v9[11] = 0;
          *a4 = v9;
          return result;
        }
      }
      CFRelease(v9);
    }
    return 4294950745;
  }
  return result;
}

uint64_t CMPhotoDNGCompressorSetMainImage(_QWORD *a1, const void *a2, CFTypeRef cf, const void *a4)
{
  uint64_t result;
  const void *v9;
  const void *v10;
  const void *v11;

  result = 4294950746;
  if (a2 && a1 && cf)
  {
    v9 = (const void *)a1[3];
    if (v9)
    {
      CFRelease(v9);
      a1[3] = 0;
    }
    v10 = (const void *)a1[4];
    if (v10)
    {
      CFRelease(v10);
      a1[4] = 0;
    }
    v11 = (const void *)a1[6];
    if (v11)
    {
      CFRelease(v11);
      a1[6] = 0;
    }
    a1[3] = CFRetain(cf);
    a1[4] = CFRetain(a2);
    if (a4)
    {
      result = (uint64_t)CFRetain(a4);
      a1[6] = result;
      if (result)
      {
        FigCFDictionaryGetIntIfPresent();
        return 0;
      }
    }
    else
    {
      result = 0;
      a1[6] = 0;
    }
  }
  return result;
}

uint64_t CMPhotoDNGCompressorSetCompressedPreviewImage(uint64_t a1, void *cf, CFDictionaryRef theDict)
{
  const void *v6;
  const void *v7;
  CFTypeID v8;
  CFTypeID v9;
  CFDataRef DataWrappingIOSurface;
  CFIndex v12;

  v12 = 0;
  if (!a1)
    return 4294950746;
  if (theDict)
  {
    if (CFDictionaryGetValue(theDict, CFSTR("SourceCropRect"))
      || CFDictionaryGetValue(theDict, CFSTR("PreviewImageMaxPixelSize")))
    {
      return FigSignalErrorAt();
    }
    FigCFDictionaryGetIntIfPresent();
    CMPhotoCFDictionaryGetSizeIfPresent(theDict, CFSTR("CompressedSurfaceSize"), &v12);
  }
  v6 = *(const void **)(a1 + 56);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v7 = *(const void **)(a1 + 96);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 96) = 0;
  }
  if (!cf)
    return 0;
  v8 = CFGetTypeID(cf);
  if (v8 == CFDataGetTypeID())
  {
    *(_QWORD *)(a1 + 56) = CFRetain(cf);
    return 0;
  }
  v9 = CFGetTypeID(cf);
  if (v9 == IOSurfaceGetTypeID())
  {
    DataWrappingIOSurface = CMPhotoCreateDataWrappingIOSurface((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (IOSurfaceRef)cf, 0, v12);
    *(_QWORD *)(a1 + 56) = DataWrappingIOSurface;
    if (DataWrappingIOSurface)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t CMPhotoDNGCompressorSetPreviewImage(uint64_t a1, CVPixelBufferRef pixelBuffer, const __CFDictionary *a3)
{
  uint64_t v3;
  uint64_t PixelFormatType;
  int v8;
  int UncompressedPixelFormatFromCompressedPixelFormat;
  int v10;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t JPEGFromPixelBuffer;
  const void *v15;
  const void *v16;
  int v17;
  CFTypeRef cf;

  cf = 0;
  v3 = 4294950746;
  if (a1 && pixelBuffer)
  {
    PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    v8 = PixelFormatType;
    UncompressedPixelFormatFromCompressedPixelFormat = CMPhotoGetUncompressedPixelFormatFromCompressedPixelFormat(PixelFormatType);
    v10 = UncompressedPixelFormatFromCompressedPixelFormat;
    if (UncompressedPixelFormatFromCompressedPixelFormat != 875704422
      && UncompressedPixelFormatFromCompressedPixelFormat != 1111970369)
    {
      return FigSignalErrorAt();
    }
    v11 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
    if (FigCFEqual())
    {
      v3 = FigSignalErrorAt();
      v12 = 0;
      goto LABEL_24;
    }
    if (v8 == 875704422)
    {
      v12 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
      if (!FigCFEqual())
      {
LABEL_23:
        v3 = FigSignalErrorAt();
LABEL_24:
        if (v11)
          CFRelease(v11);
        if (v12)
          CFRelease(v12);
        return v3;
      }
    }
    else
    {
      v12 = 0;
    }
    v17 = 0;
    if (!CMPhotoCFDictionaryGetIntIfPresent(a3, CFSTR("PreviewImageCodec"), &v17) || v17 == 1785750887)
    {
      JPEGFromPixelBuffer = _createJPEGFromPixelBuffer(pixelBuffer, a3, 0);
    }
    else
    {
      if (v17 != 1786276963 || v10 != 1111970369)
        goto LABEL_23;
      JPEGFromPixelBuffer = _createJPEGXLFromPixelBuffer(pixelBuffer, (uint64_t)a3, (CFDataRef *)&cf);
    }
    v3 = JPEGFromPixelBuffer;
    if ((_DWORD)JPEGFromPixelBuffer)
    {
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v15 = *(const void **)(a1 + 56);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(a1 + 56) = 0;
      }
      v16 = *(const void **)(a1 + 96);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(a1 + 96) = 0;
      }
      v3 = 0;
      *(_QWORD *)(a1 + 56) = cf;
      cf = 0;
    }
    goto LABEL_24;
  }
  return v3;
}

uint64_t _createJPEGFromPixelBuffer(__CVBuffer *a1, const __CFDictionary *a2, int a3)
{
  const __CFAllocator *v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v9;
  uint64_t v10;
  CFMutableDictionaryRef v11;
  __CFDictionary *v12;
  uint64_t v13;
  const void *Value;
  const void *v15;
  uint64_t v17;
  CFTypeRef v18;

  v18 = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CMPhotoCompressionSessionCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, &v18);
  if ((_DWORD)v7)
  {
    v17 = v7;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v9 = Mutable;
      v10 = FigCFDictionarySetInt();
      if ((_DWORD)v10
        || (v10 = FigCFDictionarySetInt(), (_DWORD)v10)
        || (v10 = CMPhotoCompressionSessionOpenEmptyContainer((uint64_t)v18, v9), (_DWORD)v10))
      {
        v17 = v10;
      }
      else
      {
        v11 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v11)
        {
          v12 = v11;
          v13 = FigCFDictionarySetInt();
          if (!(_DWORD)v13)
          {
            if (a3)
              goto LABEL_12;
            if (CVPixelBufferGetPixelFormatType(a1) == 1278226488)
              CFDictionarySetValue(v12, CFSTR("PreferSoftwareCodec"), (const void *)*MEMORY[0x1E0C9AE50]);
            v13 = FigCFDictionarySetInt();
            if (!(_DWORD)v13)
            {
LABEL_12:
              v13 = FigCFDictionarySetInt();
              if (!(_DWORD)v13)
              {
                if (a2)
                {
                  Value = CFDictionaryGetValue(a2, CFSTR("SourceCropRect"));
                  if (Value)
                    CFDictionarySetValue(v12, CFSTR("SourceCropRect"), Value);
                  v15 = CFDictionaryGetValue(a2, CFSTR("PreviewImageMaxPixelSize"));
                  if (v15)
                    CFDictionarySetValue(v12, CFSTR("MaxPixelSize"), v15);
                }
                v13 = CMPhotoCompressionSessionAddImage((uint64_t)v18, v12, (uint64_t)a1, 0);
                if (!(_DWORD)v13)
                {
                  v13 = CMPhotoCompressionSessionCloseContainerAndCopyBacking((uint64_t)v18);
                  if (!(_DWORD)v13)
                    v13 = FigSignalErrorAt();
                }
              }
            }
          }
          v17 = v13;
          CFRelease(v12);
        }
        else
        {
          v17 = 4294950745;
        }
      }
      CFRelease(v9);
    }
    else
    {
      v17 = 4294950745;
    }
  }
  if (v18)
    CFRelease(v18);
  return v17;
}

uint64_t _createJPEGXLFromPixelBuffer(__CVBuffer *a1, uint64_t a2, CFDataRef *a3)
{
  double PixelBufferSize;
  double v7;
  double v8;
  OSType PixelFormatType;
  size_t BytesPerRow;
  const __CFData *Mutable;
  BOOL v12;
  uint64_t ColorSpaceFromPixelBuffer;
  char *BaseAddress;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  float v19;
  int v20;
  unsigned int v21;

  PixelBufferSize = CMPhotoGetPixelBufferSize(a1);
  v8 = v7;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  Mutable = CFDataCreateMutable(0, 0);
  v20 = 2;
  v21 = 2;
  v19 = 1.0;
  cf = 0;
  if (a2)
  {
    FigCFDictionaryGetFloatIfPresent();
    v12 = v19 < 0.0 || v19 > 1.0;
    if (v12 || (FigCFDictionaryGetIntIfPresent(), v21 - 10 <= 0xFFFFFFF6))
    {
      ColorSpaceFromPixelBuffer = FigSignalErrorAt();
LABEL_20:
      v16 = ColorSpaceFromPixelBuffer;
      goto LABEL_14;
    }
    FigCFDictionaryGetIntIfPresent();
  }
  ColorSpaceFromPixelBuffer = CMPhotoCreateColorSpaceFromPixelBuffer(a1, (CGColorSpace **)&cf, 1, 1);
  if ((_DWORD)ColorSpaceFromPixelBuffer)
    goto LABEL_20;
  ColorSpaceFromPixelBuffer = CVPixelBufferLockBaseAddress(a1, 0);
  if ((_DWORD)ColorSpaceFromPixelBuffer)
    goto LABEL_20;
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  v15 = CMPhotoDNGJPEGXLCompressData(vcvtad_u64_f64(PixelBufferSize), vcvtad_u64_f64(v8), PixelFormatType, BaseAddress, BytesPerRow, v19, v21, v20, (CGColorSpace *)cf, Mutable);
  v16 = v15;
  if (a3 && !(_DWORD)v15)
    *a3 = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Mutable);
  CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v16;
}

uint64_t CMPhotoDNGCompressorSetPreviewImageFromRAW(uint64_t a1, uint64_t a2, __CVBuffer *a3, const __CFDictionary *a4)
{
  CFTypeRef v4;
  uint64_t v5;
  CGColorSpaceRef v8;
  double PixelBufferCLAPAsRect;
  double v12;
  CGFloat v13;
  double v14;
  double v15;
  double v16;
  double v17;
  OSType PixelFormatType;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  double v23;
  void *v24;
  double v25;
  CGFloat v26;
  double v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CVPixelBufferRef v39;
  CGRect v40;
  CGRect v41;

  v4 = 0;
  v39 = 0;
  v5 = 4294950746;
  if (!a1 || !a2)
  {
    v8 = 0;
    goto LABEL_22;
  }
  v8 = 0;
  if (!a3)
    goto LABEL_22;
  PixelBufferCLAPAsRect = CMPhotoGetPixelBufferCLAPAsRect(a3);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
  if (PixelFormatType != 1751527984 && PixelFormatType != 1815491698)
  {
    v5 = FigSignalErrorAt();
    v4 = 0;
LABEL_20:
    v8 = 0;
    goto LABEL_22;
  }
  v4 = CVBufferCopyAttachment(a3, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (!FigCFEqual())
  {
    v5 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v19 = (void *)MEMORY[0x1A85D1038]();
  v20 = (void *)-[objc_class filterWithCVPixelBuffer:properties:options:](getCIFilterClass(), "filterWithCVPixelBuffer:properties:options:", a3, a2, 0);
  if (!v20)
  {
    v28 = FigSignalErrorAt();
    goto LABEL_32;
  }
  v21 = (id)objc_msgSend(v20, "outputImage");
  if (!v21)
  {
    v8 = 0;
LABEL_34:
    v5 = 4294950745;
    goto LABEL_18;
  }
  v22 = v21;
  if (CMPhotoPixelBufferHasCLAP(a3))
  {
    CGAffineTransformMakeScale(&v37, 1.0, -1.0);
    objc_msgSend(v22, "extent");
    CGAffineTransformTranslate(&v38, &v37, 0.0, -v23);
    v40.origin.x = PixelBufferCLAPAsRect;
    v40.origin.y = v13;
    v40.size.width = v15;
    v40.size.height = v17;
    v41 = CGRectApplyAffineTransform(v40, &v38);
    v24 = (void *)objc_msgSend(v22, "imageByCroppingToRect:", v41.origin.x, v41.origin.y, v41.size.width, v41.size.height);
    objc_msgSend(v24, "extent");
    v26 = -v25;
    objc_msgSend(v24, "extent");
    CGAffineTransformMakeTranslation(&v36, v26, -v27);
    v22 = (void *)objc_msgSend(v24, "imageByApplyingTransform:", &v36);
  }
  v28 = CMPhotoSurfacePoolCreatePixelBuffer(CFSTR("SurfacePoolOneShot"), 875704422, (unint64_t)v15, (unint64_t)v17, 1, 0, 0, 0, 0, 0, &v39);
  if ((_DWORD)v28)
  {
LABEL_32:
    v5 = v28;
    v8 = 0;
LABEL_18:
    objc_autoreleasePoolPop(v19);
    goto LABEL_22;
  }
  CMPhotoAddDefault601709MatrixToBufferIfAllowed(v39, 1, 0);
  v8 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  if (!v8)
    goto LABEL_34;
  v29 = objc_alloc(getCIRenderDestinationClass());
  v30 = (id)objc_msgSend(v29, "initWithPixelBuffer:", v39);
  if (!v30)
    goto LABEL_34;
  v31 = v30;
  objc_msgSend(v30, "setAlphaMode:", 2);
  objc_msgSend(v31, "setColorSpace:", v8);
  v32 = (void *)-[objc_class context](getCIContextClass_0(), "context");
  if (!v32)
    goto LABEL_34;
  v35 = 0;
  v33 = (void *)objc_msgSend(v32, "startTaskToRender:toDestination:error:", v22, v31, &v35);
  v5 = 4294950739;
  if (!v33)
    goto LABEL_18;
  if (v35)
    goto LABEL_18;
  objc_msgSend(v33, "waitUntilCompletedAndReturnError:", &v35);
  if (v35)
    goto LABEL_18;
  objc_autoreleasePoolPop(v19);
  v5 = CMPhotoDNGCompressorSetPreviewImage(a1, v39, a4);
LABEL_22:
  if (v39)
    CFRelease(v39);
  if (v8)
    CFRelease(v8);
  if (v4)
    CFRelease(v4);
  return v5;
}

uint64_t CMPhotoDNGCompressorAddAuxiliaryImage(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result;
  __CFDictionary *Mutable;
  __CFDictionary *v12;

  result = 4294950746;
  if (a1 && a2 && a3 && a4)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v12 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("AuxPixelBuffer"), a2);
      CFDictionarySetValue(v12, CFSTR("AuxMetadata"), a3);
      CFDictionarySetValue(v12, CFSTR("AuxImageType"), a4);
      if (a5)
      {
        CFDictionarySetValue(v12, CFSTR("AuxOptions"), a5);
        FigCFDictionaryGetBooleanIfPresent();
      }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), v12);
      CFRelease(v12);
      return 0;
    }
    else
    {
      return 4294950745;
    }
  }
  return result;
}

uint64_t CMPhotoDNGCompressorFinalizeAndCreateData(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef *v3;
  const __CFArray *v5;
  const void *v6;
  uint64_t v7;
  const __CFArray *v8;
  const __CFDictionary *v9;
  const __CFAllocator *v10;
  uint64_t v11;
  CFIndex v12;
  __CFDictionary *v13;
  const void *v14;
  const __CFDictionary *ValueAtIndex;
  const void *v16;
  const void *v17;
  const __CFString *v18;
  const __CFDictionary *v19;
  __CFDictionary *MutableCopy;
  uint64_t CMPhotoAuxiliaryImageTypeAndFinalURNFromURN;
  uint64_t v22;
  const __CFData *v23;
  const void *v24;
  const __CFData *v25;
  CFTypeRef v26;
  CFTypeRef *v28;
  CFIndex Count;
  CFTypeRef v30;
  unsigned int v31;
  void *value;
  _QWORD v33[5];
  CFTypeRef cf;
  CFDataRef theData;
  const __CFString *v36;
  _QWORD v37[2];
  CFRange v38;

  v37[1] = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v2 = 4294950746;
  if (!a1)
    return v2;
  v3 = a2;
  if (!a2)
    return v2;
  if (!*(_QWORD *)(a1 + 24))
    return FigSignalErrorAt();
  v5 = *(const __CFArray **)(a1 + 80);
  if ((!v5 || CFArrayGetCount(v5) <= 0) && !*(_QWORD *)(a1 + 96))
  {
    v23 = *(const __CFData **)(a1 + 56);
    if (v23)
      goto LABEL_46;
    goto LABEL_48;
  }
  v6 = *(const void **)(a1 + 56);
  if (!v6)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(const __CFArray **)(a1 + 80);
  cf = 0;
  theData = 0;
  v36 = CFSTR("BackingType");
  v37[0] = &unk_1E53FE718;
  v9 = (const __CFDictionary *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v37, &v36, 1);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (v7)
      goto LABEL_13;
  }
  else
  {
    Count = 0;
    if (v7)
      goto LABEL_13;
  }
  if (!Count)
  {
    v13 = 0;
    v2 = 0;
    goto LABEL_56;
  }
LABEL_13:
  v10 = CFGetAllocator(v6);
  v11 = CMPhotoCompressionSessionCreate(v10, 0, &cf);
  if ((_DWORD)v11)
    goto LABEL_35;
  if (v7)
  {
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = ___addAuxiliaryImagesToJPEGData_block_invoke;
    v33[3] = &__block_descriptor_40_e25_i16__0____CFDictionary__8l;
    v33[4] = v7;
    v11 = CMPhotoCompressionSessionOpenExistingContainerForModification((uint64_t)cf, v9, v6, 0, (uint64_t)v33);
    if (!(_DWORD)v11)
      goto LABEL_16;
LABEL_35:
    v2 = v11;
    v13 = 0;
    goto LABEL_56;
  }
  v11 = CMPhotoCompressionSessionOpenExistingContainer((uint64_t)cf, v9, v6, 0);
  if ((_DWORD)v11)
    goto LABEL_35;
LABEL_16:
  v28 = v3;
  if (!Count)
  {
    v13 = 0;
LABEL_37:
    v2 = CMPhotoCompressionSessionCloseContainerAndCopyBacking((uint64_t)cf);
    if ((_DWORD)v2)
      goto LABEL_55;
    v23 = theData;
    theData = 0;
    v3 = v28;
    if (!v13)
      goto LABEL_40;
    goto LABEL_39;
  }
  v12 = 0;
  v13 = 0;
  v14 = (const void *)*MEMORY[0x1E0C9AE50];
  while (1)
  {
    if (v13)
      CFRelease(v13);
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, v12);
    v16 = CFDictionaryGetValue(ValueAtIndex, CFSTR("AuxPixelBuffer"));
    v17 = CFDictionaryGetValue(ValueAtIndex, CFSTR("AuxMetadata"));
    v18 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("AuxImageType"));
    v19 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("AuxOptions"));
    if (v19)
      MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, v19);
    else
      MutableCopy = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v13 = MutableCopy;
    if (!MutableCopy)
    {
      v2 = 4294950745;
      goto LABEL_55;
    }
    CFDictionarySetValue(MutableCopy, CFSTR("PreferSoftwareCodec"), v14);
    value = 0;
    v31 = 0;
    v38.length = CFStringGetLength(CFSTR("kCGImageAuxiliaryDataType"));
    v38.location = 0;
    if (CFStringCompareWithOptions(v18, CFSTR("kCGImageAuxiliaryDataType"), v38, 0) == kCFCompareEqualTo)
      break;
    CMPhotoAuxiliaryImageTypeAndFinalURNFromURN = CMPhotoGetCMPhotoAuxiliaryImageTypeAndFinalURNFromURN((uint64_t)v18, (const __CFString **)&value);
    v31 = CMPhotoAuxiliaryImageTypeAndFinalURNFromURN;
    if (!(_DWORD)CMPhotoAuxiliaryImageTypeAndFinalURNFromURN)
      goto LABEL_53;
LABEL_28:
    if ((_DWORD)CMPhotoAuxiliaryImageTypeAndFinalURNFromURN == 4 && value)
    {
      CFDictionarySetValue(v13, CFSTR("AuxiliaryImageCustomTypeURN"), value);
      CMPhotoAuxiliaryImageTypeAndFinalURNFromURN = v31;
    }
    v22 = CMPhotoCompressionSessionAddAuxiliaryImage((uint64_t)cf, 0, CMPhotoAuxiliaryImageTypeAndFinalURNFromURN, (uint64_t)v17, v13, (uint64_t)v16, 0);
    if ((_DWORD)v22)
      goto LABEL_54;
    if (Count == ++v12)
      goto LABEL_37;
  }
  CMPhotoGetCMPhotoAuxiliaryImageTypeFromCGImageAuxiliaryDataType((uint64_t)v18, (const __CFString **)&value, (int *)&v31);
  CMPhotoAuxiliaryImageTypeAndFinalURNFromURN = v31;
  if (v31)
    goto LABEL_28;
LABEL_53:
  v22 = FigSignalErrorAt();
LABEL_54:
  v2 = v22;
LABEL_55:
  v3 = v28;
LABEL_56:
  if (theData)
    CFRelease(theData);
  v23 = 0;
  if (v13)
LABEL_39:
    CFRelease(v13);
LABEL_40:
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v2)
  {
    v26 = v30;
  }
  else
  {
    v24 = *(const void **)(a1 + 56);
    if (v24)
      CFRelease(v24);
    *(_QWORD *)(a1 + 56) = v23;
    if (v23)
    {
LABEL_46:
      *(_QWORD *)(a1 + 64) = CFDataGetLength(v23);
      v25 = *(const __CFData **)(a1 + 56);
      goto LABEL_49;
    }
LABEL_48:
    v25 = 0;
LABEL_49:
    v2 = _createDNGInternal(*(const __CFDictionary **)(a1 + 32), v25, *(const __CFDictionary **)(a1 + 48), 0, *(__CVBuffer **)(a1 + 24), *(const __CFArray **)(a1 + 72), *(_DWORD *)(a1 + 16) == 1, (_QWORD *)(a1 + 88), &v30);
    v26 = v30;
    if (!(_DWORD)v2)
    {
      *v3 = v30;
      return v2;
    }
  }
  if (v26)
    CFRelease(v26);
  return v2;
}

uint64_t CMPhotoDNGCompressorFinalizeAndCreateSurface(uint64_t a1, uint64_t a2, uint64_t a3, IOSurfaceRef *a4, size_t *a5)
{
  uint64_t v5;
  uint64_t Data;
  size_t Length;
  void *BaseAddress;
  const UInt8 *BytePtr;
  IOSurfaceRef buffer;
  CFDataRef theData;

  buffer = 0;
  theData = 0;
  v5 = 4294950746;
  if (a1 && a4 && a5)
  {
    Data = CMPhotoDNGCompressorFinalizeAndCreateData(a1, (CFTypeRef *)&theData);
    if ((_DWORD)Data
      || (Length = CFDataGetLength(theData),
          Data = CMPhotoSurfacePoolCreateMemorySurface(a2, Length, 1, &buffer),
          (_DWORD)Data)
      || (Data = IOSurfaceLock(buffer, 0, 0), (_DWORD)Data))
    {
      v5 = Data;
    }
    else
    {
      BaseAddress = IOSurfaceGetBaseAddress(buffer);
      BytePtr = CFDataGetBytePtr(theData);
      memcpy(BaseAddress, BytePtr, Length);
      IOSurfaceUnlock(buffer, 0, 0);
      v5 = 0;
      *a4 = buffer;
      buffer = 0;
      *a5 = Length;
    }
  }
  if (theData)
    CFRelease(theData);
  if (buffer)
    CFRelease(buffer);
  return v5;
}

uint64_t CMPhotoDNGCompressorGetFinalizedSize(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;

  result = 4294950746;
  if (a1 && a3)
  {
    if (a4)
    {
      result = 0;
      *a3 = *(_QWORD *)(a1 + 64);
      *a4 = *(_QWORD *)(a1 + 88);
    }
  }
  return result;
}

uint64_t CMPhotoDNGUnpackToGetFileInformation(const __CFData *a1, const __CFDictionary *a2, CFDataRef *a3, _QWORD *a4, __CFDictionary **a5)
{
  return _dngUnpackInternal(a1, a2, a3, a4, 0, a5, 0, 0, 0);
}

uint64_t _dngUnpackInternal(const __CFData *a1, const __CFDictionary *a2, CFDataRef *a3, _QWORD *a4, _DWORD *a5, __CFDictionary **a6, CVPixelBufferRef *a7, _QWORD *a8, __CFArray **a9)
{
  _DWORD *v12;
  size_t v13;
  const __CFAllocator *v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  uint64_t CVPixelBufferFromDNGData;
  CGImageSource *v19;
  const __CFDictionary *v20;
  __CFDictionary *MutableCopy;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v23;
  __CFDictionary *v24;
  CFStringRef v25;
  const char *CStringPtrAndBufferToFree;
  _BOOL4 v27;
  __CFArray *FloatArrayFromRationals;
  __CFDictionary *v29;
  __CFArray *v30;
  __CFArray *v31;
  __CFArray *v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  __int16 v38;
  unint64_t Tag;
  __int16 v40;
  int v41;
  unsigned __int16 *v42;
  uint64_t v43;
  __int16 v44;
  BOOL v45;
  CFNumberRef v46;
  CFNumberRef v47;
  __CFArray *v48;
  __CFArray *v49;
  const void *v50;
  __CFDictionary *v51;
  __CFArray *v52;
  int v53;
  const void *v54;
  unsigned __int16 *v55;
  unint64_t v56;
  unsigned int v57;
  CFIndex v58;
  unsigned int *v59;
  CFMutableArrayRef v60;
  __CFArray *v61;
  float v62;
  int v63;
  int v64;
  CFMutableDictionaryRef v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int TagDataNvals;
  int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned __int16 *v88;
  __CFDictionary *v89;
  int v90;
  unsigned __int16 *v91;
  CFDataRef v92;
  int v93;
  unint64_t v94;
  unsigned int v95;
  const UInt8 *v96;
  unsigned int v97;
  BOOL v98;
  unsigned int v99;
  unsigned int v100;
  _OWORD *v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  unsigned int v105;
  const UInt8 *v106;
  CFStringRef v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  CFDataRef v111;
  int v112;
  _BYTE *v113;
  const void *v114;
  const __CFArray *v115;
  const __CFAllocator *v116;
  CFIndex v117;
  const void *ValueAtIndex;
  const void *v119;
  CFIndex i;
  int64_t v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  CFIndex v128;
  __CFData *v129;
  signed int v130;
  uint64_t v131;
  uint64_t v132;
  signed int v133;
  int64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t BytesPerPixelForPixelFormat;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int16 *v144;
  uint64_t v145;
  UInt8 *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int16 *v149;
  uint64_t v150;
  UInt8 *v151;
  int v152;
  unsigned __int16 *v153;
  unint64_t v154;
  unint64_t v155;
  int8x8_t *v157;
  unint64_t v158;
  void *v159;
  uint64_t j;
  CFTypeRef v161;
  double v162;
  int v163;
  unsigned __int16 *v164;
  unint64_t v165;
  unsigned int v166;
  unint64_t v167;
  const void *v168;
  unsigned __int16 *v169;
  uint64_t v170;
  _WORD *v171;
  void *v172;
  unint64_t v173;
  unsigned int v174;
  UInt8 *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned __int16 *v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  uint64_t appended;
  const void *v186;
  CFMutableArrayRef v187;
  __CFArray *v188;
  uint64_t v189;
  _BYTE *v190;
  CGFloat v191;
  CGFloat v192;
  uint64_t v193;
  CGFloat v194;
  CGFloat v195;
  double v196;
  double v197;
  _BYTE *v198;
  const __CFData *v199;
  uint64_t v200;
  const __CFData *v201;
  uint64_t v202;
  __CFDictionary *v203;
  __CFDictionary *v204;
  uint64_t Container;
  __CVBuffer *v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  uint64_t v211;
  double v212;
  uint64_t FractionalPixelBuffer;
  const __CFString *CGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType;
  const __CFString *v215;
  __CFDictionary *v216;
  __CFDictionary *v217;
  const __CFString *v218;
  CFStringEncoding SystemEncoding;
  CFDataRef *v220;
  _QWORD *v221;
  CFDataRef Length;
  uint64_t v223;
  CFTypeRef *v224;
  const void *v225;
  const void *v226;
  unsigned __int16 *v228;
  uint64_t v229;
  OSType v230;
  int64_t v231;
  const __CFArray *v234;
  CGImageSource *v235;
  const __CFDictionary *v236;
  CFTypeRef v237;
  _QWORD *v239;
  int v241;
  UInt8 *v242;
  __CFData *cf;
  void *value;
  __CFDictionary *v246;
  CFIndex v247;
  uint64_t v248;
  unsigned int v249;
  __CFDictionary *theDict;
  unint64_t v251;
  unsigned int v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  unsigned __int16 *v256;
  unsigned __int16 *v257;
  unsigned __int16 *v258;
  unsigned __int16 *v259;
  int v260;
  int v261;
  __CFDictionary *v262;
  __CFDictionary *v263;
  const __CFAllocator *allocator;
  uint64_t v265;
  uint64_t v266;
  CFMutableArrayRef theArray;
  __CFArray *theArraya;
  UInt8 *MutableBytePtr;
  int64_t v270;
  CGImageMetadata *v271;
  int v272;
  int v273;
  __int16 v274;
  int v275;
  char v276;
  size_t v277;
  OSType pixelFormat;
  unsigned __int16 *v279;
  unsigned __int16 *v280;
  uint64_t v281;
  OSType v282[2];
  int v283[2];
  int v284[2];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  const __CFData *v289;
  CFDataRef v290;
  int v291;
  __CVBuffer *v292;
  const __CFDictionary *v293;
  CGImageMetadata *v294;
  const __CFData *v295;
  _QWORD *valuePtr;
  __int128 values;
  __int128 v298;
  _BYTE v299[16];
  uint64_t v300;
  CFTypeRef keys[2];
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;

  v305 = *MEMORY[0x1E0C80C00];
  v289 = 0;
  v290 = 0;
  bzero(v299, 0x400uLL);
  v288 = 0u;
  v286 = 0u;
  v287 = 0u;
  v285 = 0u;
  *(_QWORD *)v283 = 0;
  *(_QWORD *)v284 = 0;
  v281 = 0;
  *(_QWORD *)v282 = 0;
  v279 = 0;
  v280 = 0;
  pixelFormat = 0;
  v277 = 0;
  v276 = 0;
  v275 = 0;
  v274 = 0;
  FigKTraceInit();
  v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (!a1)
  {
    cf = 0;
    value = 0;
    v271 = 0;
    v236 = 0;
    v237 = 0;
    MutableCopy = 0;
    Mutable = 0;
    v65 = 0;
    v234 = 0;
    v235 = 0;
    theArraya = 0;
    v71 = 0;
    v228 = 0;
    CVPixelBufferFromDNGData = 4294950746;
    goto LABEL_468;
  }
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  if (a2)
  {
    FigCFDictionaryGetInt32IfPresent();
    CMPhotoCFDictionaryGetSizeIfPresent(a2, CFSTR("CompressedSurfaceSize"), &v277);
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    v13 = v277;
  }
  else
  {
    v13 = 0;
  }
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v15 = CMPhotoDataCreateFromSource((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, 0, v13, &v289, 0);
  if ((_DWORD)v15 || (v15 = _cmphotoDNGReaderInit((uint64_t)&v287, v289), (_DWORD)v15))
  {
    CVPixelBufferFromDNGData = v15;
    cf = 0;
    value = 0;
    a1 = 0;
    v271 = 0;
    v236 = 0;
    v237 = 0;
    MutableCopy = 0;
    Mutable = 0;
    v65 = 0;
    v234 = 0;
    v235 = 0;
LABEL_536:
    theArraya = 0;
    v71 = 0;
    goto LABEL_537;
  }
  v16 = (const void **)MEMORY[0x1E0CBD090];
  keys[0] = *(CFTypeRef *)MEMORY[0x1E0CBD2A8];
  keys[1] = CFSTR("kCGImageSourceShouldUseRawDataForFullSize");
  v17 = *MEMORY[0x1E0C9AE50];
  *(_QWORD *)&values = CFSTR("com.adobe.raw-image");
  *((_QWORD *)&values + 1) = v17;
  CVPixelBufferFromDNGData = (uint64_t)CFDictionaryCreate(v14, keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v237 = (CFTypeRef)CVPixelBufferFromDNGData;
  if (!CVPixelBufferFromDNGData)
  {
    v235 = 0;
    v236 = 0;
    MutableCopy = 0;
    goto LABEL_534;
  }
  v19 = CGImageSourceCreateWithData(v289, (CFDictionaryRef)CVPixelBufferFromDNGData);
  if (!v19)
  {
    v235 = 0;
    v236 = 0;
    MutableCopy = 0;
    CVPixelBufferFromDNGData = 4294950743;
    goto LABEL_534;
  }
  v235 = v19;
  v20 = CGImageSourceCopyPropertiesAtIndex(v19, 0, (CFDictionaryRef)CVPixelBufferFromDNGData);
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v236 = v20;
  if (!MutableCopy || (CFDictionaryGetValue(v20, *v16), (value = (void *)FigCFDictionaryCreateMutableCopy()) == 0))
  {
    CVPixelBufferFromDNGData = 4294950745;
LABEL_534:
    cf = 0;
    value = 0;
    a1 = 0;
    v271 = 0;
    Mutable = 0;
    v65 = 0;
LABEL_535:
    v234 = 0;
    goto LABEL_536;
  }
  Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable || (v23 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    cf = 0;
    a1 = 0;
    v271 = 0;
    v65 = 0;
    v234 = 0;
    theArraya = 0;
    v71 = 0;
    v228 = 0;
    CVPixelBufferFromDNGData = 4294950745;
    goto LABEL_468;
  }
  v24 = v23;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC980], Mutable);
  CFDictionarySetValue(MutableCopy, *v16, value);
  keys[0] = 0;
  v25 = _copyStringTag((uint64_t)&v287, 270);
  v262 = v24;
  v239 = a4;
  v27 = v25
     && (CFDictionarySetValue((CFMutableDictionaryRef)value, (const void *)*MEMORY[0x1E0CBD0A8], v25),
         (CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree()) != 0)
     && strcmp(CStringPtrAndBufferToFree, "Internal") == 0;
  _copyStringTagToDict((uint64_t)&v287, 271, (const void *)*MEMORY[0x1E0CBD0B0], (__CFDictionary *)value);
  _copyStringTagToDict((uint64_t)&v287, 272, (const void *)*MEMORY[0x1E0CBD0B8], (__CFDictionary *)value);
  _copyIntegerTagToDict((unint64_t)&v287, 274);
  _copyStringTagToDict((uint64_t)&v287, 305, (const void *)*MEMORY[0x1E0CBD0D8], (__CFDictionary *)value);
  _copyStringTagToDict((uint64_t)&v287, 306, (const void *)*MEMORY[0x1E0CBD088], (__CFDictionary *)value);
  _copyStringTagToDict((uint64_t)&v287, 315, (const void *)*MEMORY[0x1E0CBD070], (__CFDictionary *)value);
  _copyStringTagToDict((uint64_t)&v287, 33432, (const void *)*MEMORY[0x1E0CBD080], (__CFDictionary *)value);
  _copyVersionToDictAsString((uint64_t)&v287, 50706, (const void *)*MEMORY[0x1E0CBC9D8], Mutable);
  _copyVersionToDictAsString((uint64_t)&v287, 50707, (const void *)*MEMORY[0x1E0CBC908], Mutable);
  _copyStringTagToDict((uint64_t)&v287, 50708, (const void *)*MEMORY[0x1E0CBC9D0], Mutable);
  FloatArrayFromRationals = _createFloatArrayFromRationals((uint64_t)&v287, 50721, 9);
  v29 = Mutable;
  v30 = _createFloatArrayFromRationals((uint64_t)&v287, 50722, 9);
  v31 = _createFloatArrayFromRationals((uint64_t)&v287, 50723, 9);
  v32 = _createFloatArrayFromRationals((uint64_t)&v287, 50724, 9);
  if (FloatArrayFromRationals)
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x1E0CBC958], FloatArrayFromRationals);
  theDict = v29;
  if (v30)
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x1E0CBC960], v30);
  if (v31)
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x1E0CBC940], v31);
  if (v32)
    CFDictionarySetValue(v29, (const void *)*MEMORY[0x1E0CBC948], v32);
  if (v31)
    CFRelease(v31);
  if (v32)
    CFRelease(v32);
  allocator = v14;
  if (FloatArrayFromRationals)
    CFRelease(FloatArrayFromRationals);
  v246 = MutableCopy;
  if (v30)
    CFRelease(v30);
  if (WORD4(v288))
  {
    v33 = 0;
    v34 = (unsigned __int16 *)v288;
    while (1)
    {
      v35 = CMPhotoDNGRead16(v34, BYTE10(v288));
      if (v35 == 50778)
        break;
      v34 += 6;
      if (++v33 >= WORD4(v288))
      {
        v36 = 0;
        LODWORD(v37) = 0;
        v38 = 0;
        if (!WORD4(v288))
          goto LABEL_61;
        goto LABEL_42;
      }
    }
    Tag = _readTag((uint64_t)v34, BYTE10(v288));
    v38 = v40;
    v36 = WORD1(Tag);
    v37 = HIDWORD(Tag);
    if (!WORD4(v288))
      goto LABEL_61;
LABEL_42:
    v41 = 0;
    v42 = (unsigned __int16 *)v288;
    while (CMPhotoDNGRead16(v42, BYTE10(v288)) != 50779)
    {
      v42 += 6;
      if (++v41 >= WORD4(v288))
        goto LABEL_61;
    }
    v43 = _readTag((uint64_t)v42, BYTE10(v288));
    if (v35 == 50778 && (_DWORD)v37 == 1)
    {
      v45 = (v43 & 0xFFFFFFFF00000000) != 0x100000000 || v36 > 0xD;
      if (!v45 && (v36 == 8 || v36 == 3) && WORD1(v43) <= 0xDu && (WORD1(v43) == 8 || WORD1(v43) == 3))
      {
        LOWORD(values) = v38;
        LOWORD(valuePtr) = v44;
        v46 = CFNumberCreate(v14, kCFNumberShortType, &values);
        v47 = CFNumberCreate(v14, kCFNumberShortType, &valuePtr);
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CBC930], v46);
        CFDictionarySetValue(theDict, (const void *)*MEMORY[0x1E0CBC938], v47);
        if (v46)
          CFRelease(v46);
        if (v47)
          CFRelease(v47);
      }
    }
  }
LABEL_61:
  v48 = _createFloatArrayFromRationals((uint64_t)&v287, 50728, 3);
  if (v48)
  {
    v49 = v48;
    v50 = (const void *)*MEMORY[0x1E0CBC8F0];
    v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    MutableCopy = v246;
    v51 = theDict;
  }
  else
  {
    v52 = _createFloatArrayFromRationals((uint64_t)&v287, 50729, 2);
    v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    MutableCopy = v246;
    v51 = theDict;
    if (!v52)
      goto LABEL_66;
    v49 = v52;
    v50 = (const void *)*MEMORY[0x1E0CBC900];
  }
  CFDictionarySetValue(v51, v50, v49);
  CFRelease(v49);
LABEL_66:
  _copyRationalTagToDict((uint64_t)&v287, 50730, (const void *)*MEMORY[0x1E0CBC910], v51);
  _copyRationalTagToDict((uint64_t)&v287, 50731, (const void *)*MEMORY[0x1E0CBC918], v51);
  _copyRationalTagToDict((uint64_t)&v287, 50732, (const void *)*MEMORY[0x1E0CBC920], v51);
  _copyDNGDataTagToDict((uint64_t)&v287, 50740, (const void *)*MEMORY[0x1E0CBC9A8], v51);
  _copyStringTagToDict((uint64_t)&v287, 50931, (const void *)*MEMORY[0x1E0CBC950], v51);
  _copyStringTagToDict((uint64_t)&v287, 50932, (const void *)*MEMORY[0x1E0CBC9B0], v51);
  if (WORD4(v288))
  {
    v53 = 0;
    v54 = (const void *)*MEMORY[0x1E0CBC9C8];
    v55 = (unsigned __int16 *)v288;
    while (CMPhotoDNGRead16(v55, BYTE10(v288)) != 50940)
    {
      v55 += 6;
      if (++v53 >= WORD4(v288))
        goto LABEL_81;
    }
    v56 = _readTag((uint64_t)v55, BYTE10(v288));
    v58 = HIDWORD(v56);
    if (HIDWORD(v56) * tiffDataTypeToSize[WORD1(v56)] <= 4)
      v59 = (unsigned int *)(v55 + 4);
    else
      v59 = (unsigned int *)(v287 + v57);
    if ((v56 & 0xFFFF0000) == 0xB0000)
    {
      v60 = CFArrayCreateMutable(v14, v58, MEMORY[0x1E0C9B378]);
      if (v60)
      {
        v61 = v60;
        if ((_DWORD)v58)
        {
          while (1)
          {
            v62 = CMPhotoDNGReadFloat(v59, BYTE10(v288));
            if (CMPhotoCFArrayAppendFloat(v61, v62))
              break;
            ++v59;
            LODWORD(v58) = v58 - 1;
            if (!(_DWORD)v58)
              goto LABEL_79;
          }
        }
        else
        {
LABEL_79:
          CFDictionarySetValue(theDict, v54, v61);
        }
        CFRelease(v61);
      }
    }
  }
LABEL_81:
  Mutable = theDict;
  _copyIntegerTagToDict((unint64_t)&v287, 51110);
  _copyStringTagToDict((uint64_t)&v287, 50936, (const void *)*MEMORY[0x1E0CBC9C0], theDict);
  _copyRationalTagToDict((uint64_t)&v287, 50935, (const void *)*MEMORY[0x1E0CBC9A0], theDict);
  _copyDoublesToDictAsArray((uint64_t)&v287, (const void *)*MEMORY[0x1E0CBC998], theDict);
  if (v25)
    CFRelease(v25);
  free((void *)keys[0]);
  if (v27)
    v63 = 4;
  else
    v63 = 2;
  v249 = v63;
  v273 = 0;
  v64 = _readSubFileType((uint64_t)&v287, &v273);
  if (v64 && v273 == 1)
  {
    v65 = v262;
    if (v275)
    {
      v66 = 0;
LABEL_96:
      v67 = 1;
      goto LABEL_97;
    }
    v70 = _readPreviewTags(&v287, &v290);
    v71 = 0;
    if (!(_DWORD)v70)
    {
      v66 = 0;
      goto LABEL_96;
    }
    CVPixelBufferFromDNGData = v70;
    cf = 0;
    a1 = 0;
    v271 = 0;
    v234 = 0;
    theArraya = 0;
LABEL_537:
    v228 = 0;
    goto LABEL_468;
  }
  v67 = 0;
  v65 = v262;
  v66 = 0;
  if (v64 && !v273)
  {
    v68 = CMPhotoPixelFormatContainsAlpha(pixelFormat);
    v69 = _readRawImageTags((unint64_t)&v287, v262, v249, v68, &v284[1], v284, &v283[1], v283, (int *)&v282[1], v282, (_DWORD *)&v281 + 1, &v281, &v280, &v279);
    if (!(_DWORD)v69)
    {
      v67 = 0;
      v285 = v287;
      v286 = v288;
      v66 = 1;
      goto LABEL_97;
    }
    CVPixelBufferFromDNGData = v69;
    cf = 0;
    a1 = 0;
    v271 = 0;
    goto LABEL_535;
  }
LABEL_97:
  v272 = 0;
  TagDataNvals = _getTagDataNvals((uint64_t)&v287, 330, &v272);
  v73 = v272;
  if (v272 >= 1)
  {
    v74 = TagDataNvals;
    v75 = 0;
    v241 = 0;
    v76 = TagDataNvals;
    v77 = v66;
    v261 = 0;
    while (1)
    {
      v78 = v74;
      if (v73 != 1)
        v78 = CMPhotoDNGRead32((unsigned int *)(v287 + v76 + (4 * v75)), BYTE10(v288));
      values = 0u;
      v298 = 0u;
      v79 = _cmphotoDNGReaderInit((uint64_t)&values, v289);
      if ((_DWORD)v79)
        goto LABEL_518;
      v79 = _cmphotoDNGReaderOpenIFD((uint64_t)&values, v78);
      if ((_DWORD)v79)
        goto LABEL_518;
      v80 = _readSubFileType((uint64_t)&values, &v273);
      if (v80 && v273 == 1)
      {
        if (v67 == v275)
        {
          v79 = _readPreviewTags(&values, &v290);
          if ((_DWORD)v79)
            goto LABEL_518;
        }
        ++v67;
        goto LABEL_189;
      }
      if (v80 && !v273)
      {
        if (v77)
          goto LABEL_517;
        CFRelease(v65);
        v65 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        if (!v65)
        {
LABEL_513:
          CVPixelBufferFromDNGData = 4294950745;
          goto LABEL_520;
        }
        v81 = CMPhotoPixelFormatContainsAlpha(pixelFormat);
        v82 = _readRawImageTags((unint64_t)&values, v65, v249, v81, &v284[1], v284, &v283[1], v283, (int *)&v282[1], v282, (_DWORD *)&v281 + 1, &v281, &v280, &v279);
        if ((_DWORD)v82)
          goto LABEL_514;
        v285 = values;
        v286 = v298;
LABEL_114:
        v77 = 1;
        goto LABEL_189;
      }
      if (!v80 || v273 != 8)
      {
        if (v80 && v273 == 65540)
        {
          if (v261 >= 16)
          {
LABEL_517:
            v79 = FigSignalErrorAt();
LABEL_518:
            CVPixelBufferFromDNGData = v79;
LABEL_519:
            v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
LABEL_520:
            cf = 0;
            a1 = 0;
            v271 = 0;
            v234 = 0;
            theArraya = 0;
            v228 = 0;
            MutableCopy = v246;
LABEL_521:
            Mutable = theDict;
LABEL_522:
            v71 = v261;
            goto LABEL_468;
          }
          if (_getTagDataNvals((uint64_t)&values, 254, keys) == 65540
            && (_getTagDataNvals((uint64_t)&values, 259, keys) == 7
             || _getTagDataNvals((uint64_t)&values, 259, keys) == 34892
             || _getTagDataNvals((uint64_t)&values, 259, keys) == 52546)
            && _getTagDataNvals((uint64_t)&values, 277, keys) == 1
            && _getTagDataNvals((uint64_t)&values, 258, keys) == 8)
          {
            v89 = v65;
            if (!WORD4(v298))
            {
LABEL_148:
              v92 = 0;
              goto LABEL_180;
            }
            v90 = 0;
            v91 = (unsigned __int16 *)v298;
            while (CMPhotoDNGRead16(v91, BYTE10(v298)) != 700)
            {
              v91 += 6;
              if (++v90 >= WORD4(v298))
                goto LABEL_148;
            }
            v104 = _readTag((uint64_t)v91, BYTE10(v298));
            if ((v104 & 0xFFFF0000) == 0x10000)
            {
              if (tiffDataTypeToSize[WORD1(v104)] * HIDWORD(v104) <= 4)
                v106 = (const UInt8 *)(v91 + 4);
              else
                v106 = (const UInt8 *)(values + v105);
              v92 = CFDataCreate(allocator, v106, HIDWORD(v104));
              if (!v92)
              {
                CVPixelBufferFromDNGData = 4294950745;
                v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
                goto LABEL_520;
              }
LABEL_180:
              v107 = _copyStringTag((uint64_t)&values, 52526);
              if (!v107)
                v107 = _copyStringTag((uint64_t)&values, 51182);
              LODWORD(valuePtr) = 0;
              v108 = _getTagDataNvals((uint64_t)&values, 273, &valuePtr);
              if ((_DWORD)valuePtr == 1
                && (v109 = v108) != 0
                && (v110 = _getTagDataNvals((uint64_t)&values, 279, keys), v110 >= 5)
                && v110 + v109 <= DWORD2(values))
              {
                v111 = CFDataCreate(allocator, (const UInt8 *)(values + v109), v110);
                if (v111)
                {
                  v112 = v261;
                  v113 = &v299[64 * (uint64_t)v261];
                  *(_QWORD *)v113 = v111;
                  *((_QWORD *)v113 + 1) = v92;
                  *((_QWORD *)v113 + 2) = v107;
                  *((_QWORD *)v113 + 3) = 0x400000000;
                  *((_OWORD *)v113 + 2) = 0u;
                  *((_OWORD *)v113 + 3) = 0u;
                  v65 = v89;
LABEL_188:
                  v261 = v112 + 1;
                  goto LABEL_189;
                }
                CVPixelBufferFromDNGData = 4294950745;
              }
              else
              {
                CVPixelBufferFromDNGData = FigSignalErrorAt();
              }
              if (v92)
                CFRelease(v92);
              if (v107)
                CFRelease(v107);
            }
            else
            {
              CVPixelBufferFromDNGData = FigSignalErrorAt();
            }
            v65 = v89;
          }
          else
          {
            CVPixelBufferFromDNGData = FigSignalErrorAt();
          }
          v112 = v261;
          if ((_DWORD)CVPixelBufferFromDNGData)
            goto LABEL_519;
          goto LABEL_188;
        }
        if (!v80 || v273 != 16 || !(_BYTE)v274)
          goto LABEL_189;
        CFRelease(v65);
        v65 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        if (!v65)
          goto LABEL_513;
        v93 = CMPhotoPixelFormatContainsAlpha(pixelFormat);
        v82 = _readRawImageTags((unint64_t)&values, v65, v249, v93, &v284[1], v284, &v283[1], v283, (int *)&v282[1], v282, (_DWORD *)&v281 + 1, &v281, &v280, &v279);
        if ((_DWORD)v82)
        {
LABEL_514:
          CVPixelBufferFromDNGData = v82;
          goto LABEL_520;
        }
        v285 = values;
        v286 = v298;
        v241 = 1;
        goto LABEL_114;
      }
      if (v261 >= 16)
        goto LABEL_517;
      v304 = 0u;
      v303 = 0u;
      v302 = 0u;
      *(_OWORD *)keys = 0u;
      v83 = _getTagDataNvals((uint64_t)&values, 254, &valuePtr);
      v84 = _getTagDataNvals((uint64_t)&values, 259, &valuePtr);
      if (v83 != 8 || v84 != 7 && v84 != 52546)
        goto LABEL_168;
      if (_getTagDataNvals((uint64_t)&values, 277, &valuePtr) != 1)
        goto LABEL_168;
      v85 = _getTagDataNvals((uint64_t)&values, 51177, &valuePtr);
      if ((v85 - 3) <= 0xFFFFFFFD)
        goto LABEL_168;
      v86 = v85 == 1 ? 2 : 1;
      HIDWORD(v302) = v86;
      if (_getTagDataNvals((uint64_t)&values, 51180, &valuePtr) != 1
        || _getTagDataNvals((uint64_t)&values, 51181, &valuePtr) != 1
        || !_getTagRational((uint64_t)&values, 51178, (uint64_t *)((char *)&v303 + 12))
        || !_getTagRational((uint64_t)&values, 51179, (uint64_t *)((char *)&v304 + 4)))
      {
        goto LABEL_168;
      }
      if (!WORD4(v298))
        break;
      v87 = 0;
      v88 = (unsigned __int16 *)v298;
      while (CMPhotoDNGRead16(v88, BYTE10(v298)) != 700)
      {
        v88 += 6;
        if (++v87 >= WORD4(v298))
          goto LABEL_160;
      }
      v94 = _readTag((uint64_t)v88, BYTE10(v298));
      if ((v94 & 0xFFFF0000) != 0x10000)
        goto LABEL_168;
      v96 = tiffDataTypeToSize[WORD1(v94)] * HIDWORD(v94) <= 4
          ? (const UInt8 *)(v88 + 4)
          : (const UInt8 *)(values + v95);
      keys[1] = CFDataCreate(allocator, v96, HIDWORD(v94));
      if (keys[1])
        break;
      CVPixelBufferFromDNGData = 4294950745;
LABEL_171:
      if (keys[0])
        CFRelease(keys[0]);
      if ((_DWORD)CVPixelBufferFromDNGData)
        goto LABEL_519;
      ++v261;
LABEL_189:
      ++v75;
      v73 = v272;
      if (v75 >= v272)
        goto LABEL_205;
    }
LABEL_160:
    LODWORD(v295) = 0;
    v97 = _getTagDataNvals((uint64_t)&values, 273, &v295);
    v98 = (_DWORD)v295 != 1 || v97 == 0;
    if (v98
      || (v99 = v97, v100 = _getTagDataNvals((uint64_t)&values, 279, &valuePtr), v100 <= 4)
      || v100 + v99 > DWORD2(values))
    {
LABEL_168:
      CVPixelBufferFromDNGData = FigSignalErrorAt();
    }
    else
    {
      keys[0] = CFDataCreate(allocator, (const UInt8 *)(values + v99), v100);
      if (keys[0])
      {
        CVPixelBufferFromDNGData = 0;
        v101 = &v299[64 * (uint64_t)v261];
        v102 = v302;
        *v101 = *(_OWORD *)keys;
        v101[1] = v102;
        v103 = v304;
        v101[2] = v303;
        v101[3] = v103;
        keys[1] = 0;
        keys[0] = 0;
      }
      else
      {
        CVPixelBufferFromDNGData = 4294950745;
      }
    }
    if (keys[1])
      CFRelease(keys[1]);
    goto LABEL_171;
  }
  v261 = 0;
  v241 = 0;
LABEL_205:
  v114 = (const void *)-[__CFDictionary allKeys](v65, "allKeys");
  if (v114)
    v115 = (const __CFArray *)CFRetain(v114);
  else
    v115 = 0;
  v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  MutableCopy = v246;
  Mutable = theDict;
  v116 = allocator;
  v117 = 0;
  if (v115)
    goto LABEL_211;
LABEL_212:
  for (i = 0; v117 < i; i = CFArrayGetCount(v115))
  {
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    FigCFArrayGetValueAtIndex();
    v119 = (const void *)FigCFDictionaryGetValue();
    CFDictionaryAddValue(theDict, ValueAtIndex, v119);
    ++v117;
    if (!v115)
      goto LABEL_212;
LABEL_211:
    ;
  }
  v257 = v280;
  v234 = v115;
  if (!v280 || (v256 = v279) == 0)
  {
    CVPixelBufferFromDNGData = FigSignalErrorAt();
    cf = 0;
    goto LABEL_526;
  }
  v263 = v65;
  if (!a7)
  {
    cf = 0;
    goto LABEL_290;
  }
  if (*v12 == 1)
  {
    kdebug_trace();
    v256 = v279;
    v257 = v280;
  }
  v121 = v284[1];
  v231 = v284[0];
  v122 = v283[1];
  v251 = v283[0];
  v123 = v282[1];
  keys[0] = &v285;
  v255 = v281;
  if ((_DWORD)v281 == 32803)
  {
    if (HIDWORD(v281) != 1 && HIDWORD(v281) != 7)
    {
      cf = 0;
      CVPixelBufferFromDNGData = 4294950744;
      goto LABEL_287;
    }
  }
  else
  {
    cf = 0;
    CVPixelBufferFromDNGData = 4294950744;
    if (SHIDWORD(v281) > 34891)
    {
      if (HIDWORD(v281) != 52546 && HIDWORD(v281) != 34892)
        goto LABEL_287;
    }
    else if (HIDWORD(v281) != 1 && HIDWORD(v281) != 7)
    {
      goto LABEL_287;
    }
  }
  if (!v282[1])
  {
    cf = 0;
    CVPixelBufferFromDNGData = 4294950746;
    goto LABEL_287;
  }
  v230 = v282[0];
  v260 = HIDWORD(v281);
  if ((_DWORD)v281 == 32803)
  {
    v124 = 1;
  }
  else
  {
    v125 = CMPhotoPixelFormatContainsAlpha(v282[1]);
    v124 = 3;
    if (v125)
      v124 = 4;
  }
  v266 = v124;
  v252 = v123;
  v229 = CMPhotoAlignValue(v121, v122);
  v126 = CMPhotoGetBytesPerPixelForPixelFormat(v123) * v229;
  v127 = v251;
  v248 = v126;
  v128 = CMPhotoAlignValue(v231, v251) * v126;
  v253 = v122;
  v129 = CFDataCreateMutable(allocator, 0);
  v247 = v128;
  CFDataSetLength(v129, v128);
  cf = v129;
  MutableBytePtr = CFDataGetMutableBytePtr(v129);
  if ((int)v231 < 1)
  {
LABEL_282:
    CVPixelBufferFromDNGData = 0;
    MutableCopy = v246;
    goto LABEL_287;
  }
  theArray = 0;
  v130 = 0;
  v270 = v121;
  v131 = v253;
  v132 = v266 * v253;
  if (v266 * v253 <= 1)
    v132 = 1;
  v265 = v132;
  v133 = v230;
  while ((int)v121 < 1)
  {
LABEL_281:
    theArray = (CFMutableArrayRef)((char *)theArray + v127);
    if ((uint64_t)theArray >= v231)
      goto LABEL_282;
  }
  v134 = 0;
  v242 = &MutableBytePtr[2 * (_QWORD)theArray * v121];
  v135 = v130;
  if (v130 <= v133)
    v130 = v133;
  v254 = v130;
  while (1)
  {
    v136 = CMPhotoDNGRead32((unsigned int *)&v257[2 * v135], *((unsigned __int8 *)keys[0] + 26));
    v137 = CMPhotoDNGRead32((unsigned int *)&v256[2 * v135], *((unsigned __int8 *)keys[0] + 26));
    if (v135 == v254)
      break;
    v138 = v137;
    if (v137 + v136 > *((_DWORD *)keys[0] + 2))
      break;
    if (v255 != 32803)
    {
      if (v260 == 1)
      {
        if (*v12 == 1)
          kdebug_trace();
        if ((int)v251 >= 1)
        {
          v147 = 0;
          v148 = v138 / v251;
          do
          {
            if ((_DWORD)v131)
            {
              v149 = (unsigned __int16 *)(*(_QWORD *)keys[0] + v136 + v147 * v148);
              v150 = v265;
              v151 = &MutableBytePtr[2 * (v134 + ((_QWORD)theArray + v147) * v270) * v266];
              do
              {
                *(_WORD *)v151 = CMPhotoDNGRead16(v149, *((unsigned __int8 *)keys[0] + 26));
                v151 += 2;
                ++v149;
                --v150;
              }
              while (v150);
            }
            ++v147;
          }
          while (v147 != v251);
        }
        goto LABEL_277;
      }
      BytesPerPixelForPixelFormat = CMPhotoGetBytesPerPixelForPixelFormat(v252);
      v141 = *(_QWORD *)keys[0];
      if (*v12 == 1)
        kdebug_trace();
      CVPixelBufferFromDNGData = CMPhotoDNGDecompressLinearRawTile(v141 + v136, v138, (uint64_t)&MutableBytePtr[BytesPerPixelForPixelFormat* (v134 + (_QWORD)theArray * v229)], v247 - BytesPerPixelForPixelFormat * (v134 + (_QWORD)theArray * v229), v248, v252, v131, v251, v260 == 52546);
      if (*v12 == 1)
        kdebug_trace();
      v121 = v270;
      goto LABEL_258;
    }
    if (v260 == 1)
    {
      if (*v12 == 1)
        kdebug_trace();
      if ((int)v251 >= 1)
      {
        v142 = 0;
        v143 = v138 / v251;
        do
        {
          if ((_DWORD)v131)
          {
            v144 = (unsigned __int16 *)(*(_QWORD *)keys[0] + v136 + v142 * v143);
            v145 = v265;
            v146 = &MutableBytePtr[2 * (v134 + ((_QWORD)theArray + v142) * v270) * v266];
            do
            {
              *(_WORD *)v146 = CMPhotoDNGRead16(v144, *((unsigned __int8 *)keys[0] + 26));
              v146 += 2;
              ++v144;
              --v145;
            }
            while (v145);
          }
          ++v142;
        }
        while (v142 != v251);
      }
LABEL_277:
      v12 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      v65 = v263;
      v121 = v270;
      if (*MEMORY[0x1E0CA1FC0] == 1)
        kdebug_trace();
      goto LABEL_279;
    }
    if (v260 == 7)
    {
      v139 = *(_QWORD *)keys[0];
      if (*v12 == 1)
        kdebug_trace();
      CVPixelBufferFromDNGData = CMPhotoDNGDecompressRawTile(v139 + v136, v138, v131, v251, v121, (uint64_t)&v242[2 * v134], v249);
      if (*v12 == 1)
        kdebug_trace();
LABEL_258:
      if ((_DWORD)CVPixelBufferFromDNGData)
        goto LABEL_284;
    }
LABEL_279:
    v134 += v131;
    ++v135;
    if (v134 >= v121)
    {
      v130 = v135;
      Mutable = theDict;
      v127 = v251;
      v116 = allocator;
      v133 = v230;
      goto LABEL_281;
    }
  }
  CVPixelBufferFromDNGData = 4294950743;
LABEL_284:
  if (cf)
    CFRelease(cf);
  cf = 0;
  MutableCopy = v246;
  Mutable = theDict;
  v116 = allocator;
LABEL_287:
  if (*v12 == 1)
    kdebug_trace();
  if ((_DWORD)CVPixelBufferFromDNGData)
  {
LABEL_526:
    a1 = 0;
    v271 = 0;
    theArraya = 0;
    v228 = 0;
    goto LABEL_522;
  }
LABEL_290:
  if (WORD4(v288))
  {
    v152 = 0;
    v153 = (unsigned __int16 *)v288;
    while (CMPhotoDNGRead16(v153, BYTE10(v288)) != 50727)
    {
      v153 += 6;
      if (++v152 >= WORD4(v288))
        goto LABEL_310;
    }
    v154 = _readTag((uint64_t)v153, BYTE10(v288));
    v155 = HIDWORD(v154);
    if ((v154 & 0xFFFF0000) != 0x50000 || v155 != 3)
    {
      a1 = 0;
      v271 = 0;
      theArraya = 0;
      v228 = 0;
      CVPixelBufferFromDNGData = 4294950739;
      goto LABEL_521;
    }
    __memmove_chk();
    if (BYTE10(v286) && v155)
    {
      v157 = (int8x8_t *)keys;
      v158 = v155;
      do
      {
        *v157 = vrev32_s8(*v157);
        ++v157;
        --v158;
      }
      while (v158);
    }
    v159 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v155);
    for (j = 0; j != 3; ++j)
    {
      v161 = keys[j];
      if (HIDWORD(v161))
        v162 = (double)v161 / (double)HIDWORD(v161);
      else
        v162 = 0.0;
      objc_msgSend(v159, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v162));
    }
    -[__CFDictionary setValue:forKey:](theDict, "setValue:forKey:", v159, *MEMORY[0x1E0CBC8E8]);
  }
LABEL_310:
  if (!WORD4(v286))
  {
LABEL_314:
    v228 = 0;
    Mutable = theDict;
    goto LABEL_354;
  }
  v163 = 0;
  v164 = (unsigned __int16 *)v286;
  while (CMPhotoDNGRead16(v164, BYTE10(v286)) != 50712)
  {
    v164 += 6;
    if (++v163 >= WORD4(v286))
      goto LABEL_314;
  }
  v165 = _readTag((uint64_t)v164, BYTE10(v286));
  v167 = HIDWORD(v165);
  if (HIDWORD(v165) * tiffDataTypeToSize[WORD1(v165)] <= 4)
    v168 = v164 + 4;
  else
    v168 = (const void *)(v285 + v166);
  Mutable = theDict;
  if (v282[1] != 1647589490 && v282[1] != 1815491698 || (v165 & 0xFFFF0000) != 0x30000)
  {
    a1 = 0;
    v271 = 0;
    theArraya = 0;
    v228 = 0;
    CVPixelBufferFromDNGData = 4294950739;
    goto LABEL_522;
  }
  v169 = (unsigned __int16 *)malloc_type_malloc(2 * v167, 0x1000040BDFB0063uLL);
  v228 = v169;
  if (!v169)
  {
    a1 = 0;
    v271 = 0;
    theArraya = 0;
    CVPixelBufferFromDNGData = 4294950745;
    goto LABEL_521;
  }
  memmove(v169, v168, 2 * v167);
  if (BYTE10(v286) && v167)
  {
    if (v167 <= 1)
      v170 = 1;
    else
      v170 = v167;
    v171 = v228;
    do
    {
      *v171 = bswap32((unsigned __int16)*v171) >> 16;
      ++v171;
      --v170;
    }
    while (v170);
  }
  Mutable = theDict;
  if (v276)
  {
    v258 = v228;
    v172 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v167);
    if ((_DWORD)v167)
    {
      v173 = v167;
      do
      {
        v174 = *v228++;
        objc_msgSend(v172, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", v174));
        --v173;
      }
      while (v173);
    }
    Mutable = theDict;
    -[__CFDictionary setValue:forKey:](theDict, "setValue:forKey:", v172, *MEMORY[0x1E0CBC990]);
    v228 = v258;
  }
  if (a7)
  {
    v175 = CFDataGetMutableBytePtr(cf);
    v176 = v283[0] * (uint64_t)v283[1] * (int)v282[0];
    v177 = v282[1] == 1815491698 ? 4 : 3;
    if ((_DWORD)v176)
    {
      v178 = v167 - 1;
      v179 = (unsigned __int16 *)(v175 + 2);
      v180 = 2 * v177;
      do
      {
        v181 = *(v179 - 1);
        if (v178 < v181)
          v181 = v167 - 1;
        *(v179 - 1) = v228[v181];
        v182 = *v179;
        if (v178 < v182)
          v182 = v167 - 1;
        *v179 = v228[v182];
        v183 = v179[1];
        if (v178 < v183)
          v183 = v167 - 1;
        v179[1] = v228[v183];
        v179 = (unsigned __int16 *)((char *)v179 + v180);
        --v176;
      }
      while (v176);
    }
  }
  a1 = CFArrayCreateMutable(v116, 3, MEMORY[0x1E0C9B378]);
  if (!a1)
  {
LABEL_531:
    v271 = 0;
    theArraya = 0;
    CVPixelBufferFromDNGData = 4294950745;
    goto LABEL_522;
  }
  v184 = 3;
  do
  {
    appended = FigCFArrayAppendInt32();
    if ((_DWORD)appended)
    {
      CVPixelBufferFromDNGData = appended;
      a1 = 0;
      v271 = 0;
      theArraya = 0;
      goto LABEL_521;
    }
    --v184;
  }
  while (v184);
  Mutable = theDict;
  v186 = CFDictionaryGetValue(theDict, CFSTR("BitsPerSample"));
  if (v186)
    CFDictionarySetValue(theDict, CFSTR("OriginalBitsPerSample"), v186);
  CFDictionaryRemoveValue(theDict, CFSTR("BitsPerSample"));
  CFDictionarySetValue(theDict, CFSTR("BitsPerSample"), a1);
  CFRelease(a1);
LABEL_354:
  v259 = v228;
  if (!a9 || !v261)
  {
    a1 = 0;
    if (v239)
    {
      v271 = 0;
      v188 = 0;
      v189 = 0;
      v71 = v261;
      if (v261 >= 1)
      {
        v189 = 0;
        a1 = (const __CFData *)v261;
        v220 = (CFDataRef *)v299;
        do
        {
          if (*v220)
            v189 += CFDataGetLength(*v220);
          v220 += 8;
          a1 = (const __CFData *)((char *)a1 - 1);
        }
        while (a1);
        v271 = 0;
        v188 = 0;
      }
    }
    else
    {
      v271 = 0;
      v188 = 0;
      v189 = 0;
      v71 = v261;
    }
LABEL_440:
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    if ((int)v282[0] > 1)
    {
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
    }
    if (a5)
      *a5 = v281 == 34892;
    if (a7 && (!(_BYTE)v274 || v241))
    {
      if (*v12 == 1)
        kdebug_trace();
      CVPixelBufferFromDNGData = _createCVPixelBufferFromDNGData(cf, v284[1], v284[0], v283[1], v283[0], 0, v282[1], pixelFormat, a7);
      if (*v12 == 1)
        kdebug_trace();
      if ((_DWORD)CVPixelBufferFromDNGData)
      {
        theArraya = v188;
        goto LABEL_467;
      }
      CVBufferSetAttachment(*a7, (CFStringRef)*MEMORY[0x1E0CA8E98], (CFTypeRef)*MEMORY[0x1E0CA8EB8], kCVAttachmentMode_ShouldPropagate);
    }
    if (a6)
    {
      v221 = a8;
      if (!(_BYTE)v274 || v241)
      {
        *a6 = MutableCopy;
        MutableCopy = 0;
      }
      if (!a8)
        goto LABEL_459;
    }
    else
    {
      v221 = a8;
      if (!a8)
        goto LABEL_459;
    }
    *v221 = v290;
    v290 = 0;
LABEL_459:
    if (a9)
    {
      *a9 = v188;
      v188 = 0;
    }
    if (a3)
    {
      Length = v290;
      if (v290)
        Length = (CFDataRef)CFDataGetLength(v290);
      *a3 = Length;
    }
    theArraya = v188;
    CVPixelBufferFromDNGData = 0;
    if (v239)
      *v239 = v189;
    goto LABEL_467;
  }
  v187 = CFArrayCreateMutable(v116, 0, MEMORY[0x1E0C9B378]);
  if (!v187)
  {
    a1 = 0;
    goto LABEL_531;
  }
  v188 = v187;
  if (v261 < 1)
  {
    a1 = 0;
    v271 = 0;
    v189 = 0;
    v71 = v261;
    goto LABEL_440;
  }
  theArraya = v187;
  v189 = 0;
  v271 = 0;
  a1 = 0;
  v190 = v299;
  v191 = *MEMORY[0x1E0C9D628];
  v192 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v193 = v261;
  v194 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v195 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v196 = *MEMORY[0x1E0C9D820];
  v197 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v198 = v299;
  while (1)
  {
    if (*(_QWORD *)v198)
      v189 += CFDataGetLength(*(CFDataRef *)v198);
    if (*v12 == 1)
      kdebug_trace();
    v294 = 0;
    v295 = 0;
    v292 = 0;
    v293 = 0;
    v291 = 0;
    v199 = (const __CFData *)*((_QWORD *)v198 + 1);
    if (v199)
    {
      v200 = CMPhotoAuxiliaryImageMetadataCreateFromXMPData(v116, v199, &v291, &v294, 0, &v293);
      if ((_DWORD)v200)
      {
        CVPixelBufferFromDNGData = v200;
        v206 = 0;
        goto LABEL_398;
      }
    }
    v201 = *(const __CFData **)v198;
    keys[0] = 0;
    valuePtr = 0;
    *(_QWORD *)&values = 0;
    v202 = CMPhotoDecompressionSessionCreate(v116, 0, &values);
    if ((_DWORD)v202)
    {
      CVPixelBufferFromDNGData = v202;
      v206 = 0;
      v204 = 0;
    }
    else
    {
      v203 = CFDictionaryCreateMutable(v116, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v204 = v203;
      if (v203)
      {
        Container = CMPhotoCFDictionarySetInt(v203, CFSTR("OutputPixelFormat"), 1278226488);
        if ((_DWORD)Container
          || (Container = CMPhotoCFDictionarySetInt(v204, CFSTR("AccelerationMode"), 1), (_DWORD)Container)
          || (Container = CMPhotoDecompressionSessionCreateContainer((const void *)values, 0, v201, 0, (uint64_t *)&valuePtr), (_DWORD)Container))
        {
          CVPixelBufferFromDNGData = Container;
LABEL_422:
          v206 = 0;
          goto LABEL_372;
        }
        CVPixelBufferFromDNGData = CMPhotoDecompressionContainerCreateImageForIndex(valuePtr, 0, v204, 2, (uint64_t)keys);
        v206 = (__CVBuffer *)keys[0];
        if (!(_DWORD)CVPixelBufferFromDNGData)
        {
          keys[0] = 0;
          goto LABEL_372;
        }
        if (keys[0])
        {
          CFRelease(keys[0]);
          goto LABEL_422;
        }
      }
      else
      {
        v206 = 0;
        CVPixelBufferFromDNGData = 4294950745;
      }
    }
LABEL_372:
    if ((_QWORD)values)
      CFRelease((CFTypeRef)values);
    if (valuePtr)
      CFRelease(valuePtr);
    if (v204)
      CFRelease(v204);
    if ((_DWORD)CVPixelBufferFromDNGData)
    {
      v116 = allocator;
    }
    else
    {
      v116 = allocator;
      if (v293)
      {
        if ((LODWORD(keys[0]) = 0, LODWORD(values) = 0, FigCFDictionaryGetFloatIfPresent())
          && FigCFDictionaryGetFloatIfPresent()
          && ((v207 = *(_QWORD *)(v198 + 44), !HIDWORD(v207))
            ? (v208 = 0.0)
            : (v208 = (double)v207 / (double)HIDWORD(v207)),
              vabdd_f64(v208, *(float *)&values) < 0.00000999999975
           && ((v211 = *(_QWORD *)(v198 + 52), !HIDWORD(v211))
             ? (v212 = 0.0)
             : (v212 = (double)v211 / (double)HIDWORD(v211)),
               vabdd_f64(v212, *(float *)keys) < 0.00000999999975
            && (LODWORD(valuePtr) = 0, FigCFDictionaryGetIntIfPresent()))))
        {
          FractionalPixelBuffer = CMPhotoCreateFractionalPixelBuffer(v206, 0, valuePtr, 0, v293, (CFTypeRef *)&v295);
          if (!(_DWORD)FractionalPixelBuffer)
          {
            a1 = v295;
            goto LABEL_397;
          }
        }
        else
        {
          FractionalPixelBuffer = FigSignalErrorAt();
        }
      }
      else
      {
        if (CVPixelBufferGetPixelFormatType(v206) == 1278226488)
        {
          a1 = v206;
          v206 = 0;
LABEL_397:
          CVPixelBufferFromDNGData = 0;
          v271 = v294;
          v294 = 0;
          v295 = 0;
          goto LABEL_398;
        }
        FractionalPixelBuffer = CMPhotoScaleAndRotateSessionTransformForSize(0, v206, 1, 1, 1278226488, 0, 0, 1u, v191, v192, v194, v195, v196, v197, v209, v210, 0, 1u, &v292);
        if (!(_DWORD)FractionalPixelBuffer)
        {
          a1 = v292;
          v292 = 0;
          goto LABEL_397;
        }
      }
      CVPixelBufferFromDNGData = FractionalPixelBuffer;
    }
LABEL_398:
    if (v293)
      CFRelease(v293);
    if (v295)
      CFRelease(v295);
    if (v294)
      CFRelease(v294);
    if (v206)
      CFRelease(v206);
    if (v292)
      CFRelease(v292);
    v65 = v263;
    if (*v12 == 1)
      kdebug_trace();
    if ((_DWORD)CVPixelBufferFromDNGData)
    {
      MutableCopy = v246;
      Mutable = theDict;
      goto LABEL_516;
    }
    CGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType = CMPhotoGetCGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType(*((_DWORD *)v198 + 7));
    if (CGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType)
      break;
    v218 = (const __CFString *)*((_QWORD *)v198 + 2);
    SystemEncoding = CFStringGetSystemEncoding();
    CFStringGetCStringPtr(v218, SystemEncoding);
LABEL_419:
    v198 += 64;
    v190 += 64;
    if (!--v193)
    {
      MutableCopy = v246;
      Mutable = theDict;
      v71 = v261;
      v188 = theArraya;
      goto LABEL_440;
    }
  }
  v215 = CGImageAuxiliaryDataTypeFromCMPhotoAuxiliaryImageType;
  v216 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v216)
  {
    v217 = v216;
    CFDictionarySetValue(v216, CFSTR("AuxPixelBuffer"), a1);
    if (a1)
      CFRelease(a1);
    CFDictionarySetValue(v217, CFSTR("AuxMetadata"), v271);
    if (v271)
      CFRelease(v271);
    CFDictionarySetValue(v217, CFSTR("AuxImageType"), v215);
    CFArrayAppendValue(theArraya, v217);
    CFRelease(v217);
    a1 = 0;
    v271 = 0;
    v65 = v263;
    goto LABEL_419;
  }
  CVPixelBufferFromDNGData = 4294950745;
  MutableCopy = v246;
  Mutable = theDict;
  v65 = v263;
LABEL_516:
  v71 = v261;
LABEL_467:
  v228 = v259;
LABEL_468:
  if (*v12 == 1)
    kdebug_trace();
  free(v228);
  if (v289)
    CFRelease(v289);
  if (cf)
    CFRelease(cf);
  if (v290)
    CFRelease(v290);
  if (v235)
    CFRelease(v235);
  if (v237)
    CFRelease(v237);
  if (v236)
    CFRelease(v236);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (v65)
    CFRelease(v65);
  if (v234)
    CFRelease(v234);
  if (theArraya)
    CFRelease(theArraya);
  if (a1)
    CFRelease(a1);
  if (v271)
    CFRelease(v271);
  if (v71 >= 1)
  {
    v223 = v71;
    v224 = (CFTypeRef *)&v300;
    do
    {
      v225 = *(v224 - 2);
      if (v225)
        CFRelease(v225);
      v226 = *(v224 - 1);
      if (v226)
        CFRelease(v226);
      if (*v224)
        CFRelease(*v224);
      v224 += 8;
      --v223;
    }
    while (v223);
  }
  return CVPixelBufferFromDNGData;
}

uint64_t CMPhotoDNGCompressorCreateFromSourceDNG(const __CFAllocator *a1, const __CFData *a2, id a3, _QWORD *a4)
{
  __CFDictionary *v4;
  uint64_t v5;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *Value;
  CFTypeID v15;
  CFTypeRef v16;
  __CFDictionary *v17;
  CFTypeID v18;
  int Int;
  CFTypeID v20;
  __CFDictionary *Mutable;
  uint64_t v22;
  _QWORD *v23;
  const void *v24;
  CFTypeRef v25;
  CFDictionaryRef v26;
  CFTypeRef v27;
  const __CFArray *v28;
  __CFArray *v29;
  int v31;
  unsigned int v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  CFDictionaryRef theDict;
  CFTypeRef cf;
  const __CFString *v38;
  _QWORD v39[2];
  CFRange v40;

  v4 = 0;
  v39[1] = *MEMORY[0x1E0C80C00];
  theDict = 0;
  cf = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v5 = 4294950746;
  if (!a2 || !a4)
  {
LABEL_9:
    if (cf)
      CFRelease(cf);
    goto LABEL_29;
  }
  v32 = 0;
  v10 = (void *)MEMORY[0x1A85D1038]();
  v38 = CFSTR("MainBufferPixelFormat");
  v39[0] = &unk_1E53FE6E8;
  v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, &v38, 1);
  if (a3)
  {
    if (!CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("MainBufferPixelFormat")))
    {
      a3 = (id)objc_msgSend(a3, "mutableCopy");
      objc_msgSend(a3, "setObject:forKeyedSubscript:", &unk_1E53FE6E8, CFSTR("MainBufferPixelFormat"));
    }
  }
  else
  {
    a3 = (id)v11;
  }
  v5 = _dngUnpackInternal(a2, (const __CFDictionary *)a3, 0, 0, &v32, &theDict, (CVPixelBufferRef *)&v35, &v34, (__CFArray **)&v33);
  objc_autoreleasePoolPop(v10);
  if ((_DWORD)v5)
    goto LABEL_8;
  v13 = CMPhotoDNGCompressorCreate(a1, v32, v12, &cf);
  if ((_DWORD)v13)
  {
    v5 = v13;
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  Value = (__CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBC980]);
  v4 = Value;
  if (!Value)
  {
LABEL_42:
    v5 = 4294950743;
    goto LABEL_9;
  }
  v15 = CFGetTypeID(Value);
  if (v15 != CFDictionaryGetTypeID())
  {
    v4 = 0;
    goto LABEL_42;
  }
  v16 = CFRetain(v4);
  *((_QWORD *)cf + 5) = v16;
  v17 = (__CFDictionary *)CFDictionaryGetValue(v4, CFSTR("OriginalBitsPerSample"));
  v4 = v17;
  if (!v17)
    goto LABEL_24;
  v31 = 0;
  v18 = CFGetTypeID(v17);
  if (v18 == CFArrayGetTypeID())
  {
    FigCFArrayGetIntAtIndex();
    Int = 0;
  }
  else
  {
    v20 = CFGetTypeID(v4);
    if (v20 != CFNumberGetTypeID())
    {
LABEL_23:
      v4 = 0;
      goto LABEL_24;
    }
    Int = CMPhotoCFNumberGetInt(v4);
    v31 = Int;
  }
  if (Int < 1)
    goto LABEL_23;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (!Mutable)
  {
    v5 = 4294950745;
    goto LABEL_9;
  }
  v22 = CMPhotoCFDictionarySetInt(Mutable, CFSTR("BitDepth"), v31);
  if ((_DWORD)v22)
  {
    v5 = v22;
    goto LABEL_9;
  }
LABEL_24:
  v23 = cf;
  v24 = (const void *)*((_QWORD *)cf + 12);
  if (v24)
  {
    CFRelease(v24);
    v23 = cf;
    *((_QWORD *)cf + 12) = 0;
  }
  v25 = v35;
  v26 = theDict;
  v35 = 0;
  theDict = 0;
  v23[3] = v25;
  v23[4] = v26;
  v28 = (const __CFArray *)v33;
  v27 = v34;
  v23[6] = v4;
  v23[7] = v27;
  v34 = 0;
  if (v28)
  {
    v29 = (__CFArray *)v23[9];
    v40.length = CFArrayGetCount(v28);
    v40.location = 0;
    CFArrayAppendArray(v29, v28, v40);
    v23 = cf;
  }
  v5 = 0;
  v4 = 0;
  *a4 = v23;
  cf = 0;
LABEL_29:
  if (theDict)
    CFRelease(theDict);
  if (v35)
    CFRelease(v35);
  if (v4)
    CFRelease(v4);
  if (v34)
    CFRelease(v34);
  if (v33)
    CFRelease(v33);
  return v5;
}

uint64_t CMPhotoDNGCompressorCreateFromSourceDNGWithModificationHandler(const __CFAllocator *a1, const __CFData *a2, void *a3, CFTypeRef *a4, uint64_t a5)
{
  const __CFAllocator *v6;
  uint64_t v7;
  const __CFData **v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  const __CFAllocator *v13;
  uint64_t Container;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  const __CFArray *v21;
  uint64_t v22;
  void *v23;
  CFIndex i;
  const __CFArray *v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFDictionary *v31;
  char *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  CFTypeID v38;
  void *v39;
  void *v40;
  CFTypeID v41;
  uint64_t v42;
  __CFArray *v43;
  CFMutableArrayRef *v44;
  const void *v45;
  const __CFArray *v46;
  void *v47;
  void *v48;
  CFTypeID v49;
  const __CFArray *v50;
  int Count;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CFTypeID v57;
  BOOL v58;
  const __CFAllocator *v61;
  CFMutableArrayRef Mutable;
  void *v63;
  void *v64;
  CFTypeID v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  CFTypeID v71;
  const void *v72;
  void *v73;
  const __CFAllocator *v74;
  uint64_t v75;
  uint64_t v76;
  void *v78;
  void *context;
  id v80;
  CFTypeRef v81;
  CFTypeRef cf;
  uint64_t v83;
  const __CFString *v84;
  uint64_t v85;
  const __CFString *v86;
  uint64_t v87;
  id v88;
  const __CFString *v89;
  void *v90;
  id v91;
  CFTypeRef v92[16];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  CFTypeRef v97[16];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v6 = a1;
  v102 = *MEMORY[0x1E0C80C00];
  v81 = 0;
  v7 = CMPhotoDNGCompressorCreateFromSourceDNG(a1, a2, a3, &v81);
  if (!(_DWORD)v7)
  {
    context = (void *)MEMORY[0x1A85D1038]();
    v8 = (const __CFData **)v81;
    v97[0] = 0;
    v92[0] = 0;
    if (!v81)
      goto LABEL_101;
    v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    if (!v9)
      goto LABEL_112;
    *(_QWORD *)&v93 = CFSTR("ImageHandle");
    *(_QWORD *)&v98 = &unk_1E53FE730;
    v10 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v98, &v93, 1), "mutableCopy");
    if (v10)
    {
      v78 = v10;
      v91 = v10;
      objc_msgSend(v9, "setObject:forKeyedSubscript:", (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v91, 1), "mutableCopy"), CFSTR("ImageList"));
      if (!v8[7])
        goto LABEL_20;
      v89 = CFSTR("ImageHandle");
      v90 = &unk_1E53FE730;
      v11 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v90, &v89, 1), "mutableCopy");
      if (v11)
      {
        v12 = v11;
        v88 = v11;
        objc_msgSend(v78, "setObject:forKeyedSubscript:", (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v88, 1), "mutableCopy"), CFSTR("ThumbnailImage"));
        v13 = CFGetAllocator(v8);
        Container = CMPhotoDecompressionSessionCreate(v13, 0, v97);
        if ((_DWORD)Container
          || (Container = CMPhotoDecompressionSessionCreateContainer(v97[0], 0, v8[7], 0, (uint64_t *)v92),
              (_DWORD)Container)
          || (v83 = 0,
              Container = CMPhotoDecompressionContainerGetAuxiliaryImageCountForIndexWithOptions((uint64_t)v92[0], 0, 0, (uint64_t)&v83), (_DWORD)Container))
        {
          v29 = Container;
        }
        else
        {
          if (v83 < 1)
            goto LABEL_20;
          v15 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          if (v15)
          {
            v16 = (void *)v15;
            v75 = a5;
            if (v83 >= 1)
            {
              v17 = 0;
              while (1)
              {
                v86 = CFSTR("ImageHandle");
                v87 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v17);
                v18 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v87, &v86, 1), "mutableCopy");
                if (!v18)
                {
                  v29 = 4294950745;
                  goto LABEL_109;
                }
                v19 = v18;
                cf = 0;
                v20 = CMPhotoDecompressionContainerCopyAuxiliaryImageTypeURNForIndexWithOptions((uint64_t)v92[0], 0, v17, 0, (uint64_t)&cf);
                if ((_DWORD)v20)
                  break;
                objc_msgSend(v19, "setObject:forKeyedSubscript:", cf, CFSTR("AuxiliaryImageType"));
                if (cf)
                  CFRelease(cf);
                objc_msgSend(v16, "addObject:", v19);
                if (v83 <= ++v17)
                  goto LABEL_19;
              }
              v29 = v20;
LABEL_109:
              a5 = v75;
              goto LABEL_110;
            }
LABEL_19:
            objc_msgSend(v12, "setObject:forKeyedSubscript:", v16, CFSTR("Auxiliary"));
            a5 = v75;
LABEL_20:
            v21 = v8[9];
            if (!v21 || CFArrayGetCount(v21) < 1)
            {
              v29 = 0;
              goto LABEL_36;
            }
            v22 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
            if (v22)
            {
              v23 = (void *)v22;
              v74 = v6;
              v76 = a5;
              v73 = v9;
              for (i = 0; ; ++i)
              {
                v25 = v8[9];
                if (v25)
                  LODWORD(v25) = CFArrayGetCount(v25);
                if (i >= (int)v25)
                {
                  objc_msgSend(v78, "setObject:forKeyedSubscript:", v23, CFSTR("Auxiliary"));
                  v29 = 0;
                  goto LABEL_35;
                }
                v26 = (void *)objc_msgSend((id)CFArrayGetValueAtIndex(v8[9], i), "objectForKeyedSubscript:", CFSTR("AuxImageType"));
                v84 = CFSTR("ImageHandle");
                v85 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", i);
                v27 = (id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v85, &v84, 1), "mutableCopy");
                if (!v27)
                {
                  v9 = 0;
                  v29 = 4294950745;
                  goto LABEL_35;
                }
                v28 = v27;
                v83 = 0;
                if (objc_msgSend(v26, "hasPrefix:", CFSTR("kCGImageAuxiliaryDataType")))
                  CMPhotoGetCMPhotoAuxiliaryImageTypeFromCGImageAuxiliaryDataType((uint64_t)v26, (const __CFString **)&v83, 0);
                else
                  CMPhotoGetCMPhotoAuxiliaryImageTypeAndFinalURNFromURN((uint64_t)v26, (const __CFString **)&v83);
                if (!v83)
                  break;
                objc_msgSend(v28, "setObject:forKeyedSubscript:", v83, CFSTR("AuxiliaryImageType"));
                objc_msgSend(v23, "addObject:", v28);
              }
              v29 = FigSignalErrorAt();
              v9 = 0;
LABEL_35:
              v6 = v74;
              a5 = v76;
LABEL_36:
              if (v97[0])
                CFRelease(v97[0]);
              if (v92[0])
                CFRelease(v92[0]);
              if ((_DWORD)v29)
                goto LABEL_102;
              v80 = 0;
              v30 = CMPhotoPropertyListCopyWithMutableContainers(v6, v9, (__CFArray **)&v80);
              if ((_DWORD)v30
                || (v31 = (const __CFDictionary *)v80,
                    v30 = (*(uint64_t (**)(uint64_t, const __CFDictionary *))(a5 + 16))(a5, v31),
                    (_DWORD)v30))
              {
                v29 = v30;
                goto LABEL_102;
              }
              if (!CMPhotoCompressionSessionCheckForIllegalModification((const __CFDictionary *)v9, v31))
                goto LABEL_101;
              v32 = (char *)v81;
              if (!v81)
                goto LABEL_101;
              v33 = (void *)-[__CFDictionary objectForKeyedSubscript:](v31, "objectForKeyedSubscript:", CFSTR("ImageList"));
              if (objc_msgSend(v33, "count") != 1)
                goto LABEL_101;
              v34 = (void *)objc_msgSend(v33, "objectAtIndexedSubscript:", 0);
              v35 = v34;
              if (*((_QWORD *)v32 + 7))
              {
                v36 = (void *)objc_msgSend(v34, "objectForKeyedSubscript:", CFSTR("ThumbnailImage"));
                v37 = v36;
                if (v36)
                {
                  v38 = CFGetTypeID(v36);
                  if (v38 != CFArrayGetTypeID())
                    goto LABEL_101;
                }
                if (!objc_msgSend(v37, "count", v73))
                  goto LABEL_57;
                v39 = (void *)objc_msgSend(v37, "objectAtIndexedSubscript:", 0);
                if (!v39)
                  goto LABEL_101;
                v40 = v39;
                v41 = CFGetTypeID(v39);
                if (v41 != CFDictionaryGetTypeID())
                  goto LABEL_101;
                LODWORD(v91) = 0;
                if (FigCFDictionaryGetIntIfPresent() && !(_DWORD)v91)
                {
                  v42 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("ImageList")), "objectAtIndexedSubscript:", 0), "objectForKeyedSubscript:", CFSTR("ThumbnailImage")), "objectAtIndexedSubscript:", 0), "objectForKeyedSubscript:", CFSTR("Auxiliary")), "count");
                  v44 = (CFMutableArrayRef *)(v32 + 96);
                  v43 = (__CFArray *)*((_QWORD *)v32 + 12);
                  if (v42)
                  {
                    if (v43)
                    {
                      CFArrayRemoveAllValues(v43);
                    }
                    else
                    {
                      v61 = CFGetAllocator(v32);
                      Mutable = CFArrayCreateMutable(v61, 0, MEMORY[0x1E0C9B378]);
                      *((_QWORD *)v32 + 12) = Mutable;
                      if (!Mutable)
                      {
                        v29 = 4294950745;
                        goto LABEL_102;
                      }
                    }
                    v63 = (void *)objc_msgSend(v40, "objectForKeyedSubscript:", CFSTR("Auxiliary"));
                    v64 = v63;
                    if (v63)
                    {
                      v65 = CFGetTypeID(v63);
                      if (v65 != CFArrayGetTypeID())
                        goto LABEL_101;
                    }
                    v100 = 0u;
                    v101 = 0u;
                    v98 = 0u;
                    v99 = 0u;
                    v66 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v98, v97, 16);
                    if (v66)
                    {
                      v67 = v66;
                      v68 = *(_QWORD *)v99;
LABEL_92:
                      v69 = 0;
                      while (1)
                      {
                        if (*(_QWORD *)v99 != v68)
                          objc_enumerationMutation(v64);
                        v70 = *(void **)(*((_QWORD *)&v98 + 1) + 8 * v69);
                        if (!v70)
                          goto LABEL_101;
                        v71 = CFGetTypeID(*(CFTypeRef *)(*((_QWORD *)&v98 + 1) + 8 * v69));
                        if (v71 != CFDictionaryGetTypeID())
                          goto LABEL_101;
                        v72 = (const void *)objc_msgSend(v70, "objectForKeyedSubscript:", CFSTR("ImageHandle"));
                        if (!v72)
                          goto LABEL_101;
                        CFArrayAppendValue(*v44, v72);
                        if (v67 == ++v69)
                        {
                          v67 = objc_msgSend(v64, "countByEnumeratingWithState:objects:count:", &v98, v97, 16);
                          if (v67)
                            goto LABEL_92;
                          goto LABEL_62;
                        }
                      }
                    }
                    goto LABEL_62;
                  }
                }
                else
                {
LABEL_57:
                  v45 = (const void *)*((_QWORD *)v32 + 7);
                  if (v45)
                  {
                    CFRelease(v45);
                    *((_QWORD *)v32 + 7) = 0;
                  }
                  v44 = (CFMutableArrayRef *)(v32 + 96);
                  v43 = (__CFArray *)*((_QWORD *)v32 + 12);
                }
                if (v43)
                {
                  CFRelease(v43);
                  *v44 = 0;
                }
              }
LABEL_62:
              v46 = (const __CFArray *)*((_QWORD *)v32 + 9);
              if (!v46 || CFArrayGetCount(v46) < 1)
                goto LABEL_85;
              v47 = (void *)objc_msgSend(v35, "objectForKeyedSubscript:", CFSTR("Auxiliary"));
              v48 = v47;
              if (!v47 || (v49 = CFGetTypeID(v47), v49 == CFArrayGetTypeID()))
              {
                v50 = (const __CFArray *)*((_QWORD *)v32 + 9);
                if (v50)
                {
                  Count = CFArrayGetCount(v50);
                  if (Count >= 1)
                  {
                    v52 = Count;
                    while (1)
                    {
                      v95 = 0u;
                      v96 = 0u;
                      v93 = 0u;
                      v94 = 0u;
                      v53 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v93, v92, 16, v73);
                      if (v53)
                        break;
LABEL_82:
                      CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v32 + 9), (v52 - 1));
LABEL_83:
                      if (v52-- <= 1)
                        goto LABEL_85;
                    }
                    v54 = v53;
                    v55 = *(_QWORD *)v94;
LABEL_71:
                    v56 = 0;
                    while (1)
                    {
                      if (*(_QWORD *)v94 != v55)
                        objc_enumerationMutation(v48);
                      if (!*(_QWORD *)(*((_QWORD *)&v93 + 1) + 8 * v56))
                        goto LABEL_101;
                      v57 = CFGetTypeID(*(CFTypeRef *)(*((_QWORD *)&v93 + 1) + 8 * v56));
                      if (v57 != CFDictionaryGetTypeID())
                        goto LABEL_101;
                      LODWORD(v91) = 0;
                      if (FigCFDictionaryGetIntIfPresent())
                        v58 = (_DWORD)v91 == (_DWORD)v52 - 1;
                      else
                        v58 = 0;
                      if (v58)
                        goto LABEL_83;
                      if (v54 == ++v56)
                      {
                        v54 = objc_msgSend(v48, "countByEnumeratingWithState:objects:count:", &v93, v92, 16);
                        if (v54)
                          goto LABEL_71;
                        goto LABEL_82;
                      }
                    }
                  }
                }
LABEL_85:
                objc_autoreleasePoolPop(context);
                v29 = 0;
                *a4 = v81;
                return v29;
              }
LABEL_101:
              v29 = 4294950746;
LABEL_102:
              objc_autoreleasePoolPop(context);
              goto LABEL_103;
            }
            goto LABEL_111;
          }
          v29 = 4294950745;
        }
LABEL_110:
        v9 = 0;
        goto LABEL_36;
      }
    }
LABEL_111:
    v9 = 0;
LABEL_112:
    v29 = 4294950745;
    goto LABEL_36;
  }
  v29 = v7;
LABEL_103:
  if (v81)
    CFRelease(v81);
  return v29;
}

uint64_t CMPhotoDNGCompressorReplaceMainImageOptions(uint64_t a1, CFTypeRef cf)
{
  const void *v4;
  CFTypeRef v5;
  uint64_t result;

  if (!a1)
    return 4294950746;
  v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  result = 0;
  *(_QWORD *)(a1 + 48) = v5;
  return result;
}

uint64_t CMPhotoDNGCompressorReplaceMainImageProperties(CFTypeRef cf, const __CFDictionary *a2)
{
  uint64_t result;
  const void *v5;
  const __CFAllocator *v6;
  __CFDictionary *MutableCopy;
  CFTypeRef v8;

  result = 4294950746;
  if (cf && a2)
  {
    v5 = (const void *)*((_QWORD *)cf + 4);
    if (v5)
    {
      CFRelease(v5);
      *((_QWORD *)cf + 4) = 0;
    }
    if (*((_QWORD *)cf + 5))
    {
      v6 = CFGetAllocator(cf);
      MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
      if (!MutableCopy)
        return 4294950745;
      v8 = MutableCopy;
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CBC980], *((const void **)cf + 5));
    }
    else
    {
      v8 = CFRetain(a2);
    }
    result = 0;
    *((_QWORD *)cf + 4) = v8;
  }
  return result;
}

uint64_t CMPhotoDNGCompressorRemoveAuxiliaryImages(CFMutableArrayRef *cf)
{
  __CFArray *v2;
  const __CFAllocator *v3;
  CFMutableArrayRef Mutable;

  if (!cf)
    return 4294950746;
  if (!cf[7])
  {
LABEL_6:
    CFArrayRemoveAllValues(cf[10]);
    CFArrayRemoveAllValues(cf[9]);
    return 0;
  }
  v2 = cf[12];
  if (v2)
  {
    CFArrayRemoveAllValues(v2);
    goto LABEL_6;
  }
  v3 = CFGetAllocator(cf);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  cf[12] = Mutable;
  if (Mutable)
    goto LABEL_6;
  return 4294950745;
}

uint64_t CMPhotoDNGUnpack(const __CFData *a1, const __CFDictionary *a2, __CFDictionary **a3, CVPixelBufferRef *a4, _QWORD *a5, __CFArray **a6)
{
  return _dngUnpackInternal(a1, a2, 0, 0, 0, a3, a4, a5, a6);
}

uint64_t CMPhotoDNGGetLightSourceTagFromTemp(float a1)
{
  uint64_t v1;
  float v2;
  char *v3;
  float v4;
  __int16 *v5;

  v1 = 0;
  v2 = 9999.0;
  v3 = (char *)&gLightSources;
  while (1)
  {
    v4 = a1 - *(float *)((char *)&gLightSources + v1);
    if (v4 < 0.0)
      v4 = -v4;
    if (v4 < 75.0)
      break;
    if (v4 < v2)
    {
      v3 = (char *)&gLightSources + v1;
      v2 = v4;
    }
    v1 += 12;
    if (v1 == 120)
    {
      v5 = (__int16 *)(v3 + 8);
      return *v5;
    }
  }
  v5 = (__int16 *)((char *)&gLightSources + v1 + 8);
  return *v5;
}

double CMPhotoDNGCompressorClass_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void CMPhotoDNGCompressorClass_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
    a1[7] = 0;
  }
  v7 = (const void *)a1[9];
  if (v7)
  {
    CFRelease(v7);
    a1[9] = 0;
  }
  v8 = (const void *)a1[10];
  if (v8)
  {
    CFRelease(v8);
    a1[10] = 0;
  }
  v9 = (const void *)a1[12];
  if (v9)
  {
    CFRelease(v9);
    a1[12] = 0;
  }
}

CFTypeRef CMPhotoDNGCompressorClass_CopyFormattingDesc()
{
  return CFRetain(CFSTR("[CMPhotoDNGCompressor]"));
}

__CFString *CMPhotoDNGCompressorClass_CopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  uint64_t v5;
  CFIndex Length;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  if (Mutable)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("<CMPhotoDNGCompressor %p> {\n"), a1);
    CFStringAppendFormat(v4, 0, CFSTR("\tmainBuffer: {\n%@\n}\n"), *(_QWORD *)(a1 + 24));
    CFStringAppendFormat(v4, 0, CFSTR("\tmainOptions: {\n%@\n}\n"), *(_QWORD *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 56);
    if (v5)
      Length = CFDataGetLength(*(CFDataRef *)(a1 + 56));
    else
      Length = 0;
    CFStringAppendFormat(v4, 0, CFSTR("\tjpegPreview: {\n%p (size %zd)\n}\n"), v5, Length);
    CFStringAppendFormat(v4, 0, CFSTR("\tauxImages: {\n%@\n}\n"), *(_QWORD *)(a1 + 72));
    CFStringAppendFormat(v4, 0, CFSTR("\tpreviewAuxImages: {\n%@\n}\n"), *(_QWORD *)(a1 + 80));
    CFStringAppendFormat(v4, 0, CFSTR("}"));
  }
  return v4;
}

uint64_t _dngInfoInit(uint64_t a1, const __CFData *a2, __CVBuffer *a3, const __CFDictionary *a4, const __CFArray *a5, char a6, const __CFDictionary *a7, uint64_t a8)
{
  float64_t v15;
  float64_t v16;
  float64_t v17;
  int CPUCount;
  int IntIfPresent;
  BOOL v20;
  int v21;
  const __CFDictionary *Value;
  unint64_t v23;
  unint64_t v24;
  CGSize v25;
  const __CFDictionary *v26;
  CFTypeID v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  const __CFDictionary *DictCFDict;
  const __CFDictionary *v34;
  const __CFString *v35;
  char v36;
  char v37;
  CFIndex v38;
  const __CFString *v39;
  const __CFString *v40;
  CFComparisonResult v41;
  CFIndex i;
  const __CFAllocator *v43;
  CFArrayRef ArrayBySeparatingStrings;
  const __CFArray *v45;
  CFIndex j;
  const __CFString *ValueAtIndex;
  unsigned int IntValue;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  CFTypeID v53;
  CFTypeID v54;
  const __CFNumber *v55;
  const __CFNumber *v56;
  CFTypeID v57;
  const void *v58;
  const void *v59;
  CFTypeID v60;
  CFTypeID v61;
  const __CFArray *DictCFArray;
  const __CFArray *v63;
  const __CFArray *v64;
  const __CFNumber *DictCFNumber;
  const __CFNumber *v66;
  const __CFArray *v67;
  const __CFArray *v68;
  const __CFNumber *v69;
  _DWORD *v70;
  const __CFArray *v71;
  const __CFArray *v72;
  const __CFArray *v73;
  const __CFArray *v74;
  const void *v75;
  int v76;
  int Count;
  const __CFArray *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  const __CFDictionary *v84;
  const __CFDictionary *v85;
  const __CFNumber *v86;
  const __CFNumber *v87;
  const __CFNumber *v88;
  const __CFNumber *v89;
  const __CFNumber *v90;
  const __CFNumber *v91;
  const __CFNumber *v92;
  const __CFArray *v93;
  const __CFArray *v94;
  CFIndex v95;
  uint64_t v96;
  const __CFDictionary *v97;
  const __CFDictionary *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  float v104;
  const __CFArray *v105;
  int v106;
  float v107;
  unsigned int v108;
  float v109;
  int v110;
  float v111;
  unsigned int v112;
  float v113;
  int v114;
  float v115;
  unsigned int v116;
  float v117;
  int v118;
  float v119;
  CFTypeID v120;
  __CFDateFormatter *v121;
  int v122;
  CFTypeID v124;
  const __CFData *v125;
  UInt8 *BytePtr;
  size_t Length;
  const UInt8 *v128;
  OSType PixelFormatType;
  signed int UsedBitDepthForPixelFormat;
  int v131;
  int32x2_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  int x_low;
  int v137;
  char v138;
  int *v139;
  int v140;
  CFTypeRef v141;
  CFDictionaryRef *v142;
  BOOL v143;
  int v144;
  void *v145;
  CFIndex v146;
  int *v147;
  int v148;
  const __CFDictionary *v149;
  __CVBuffer *v150;
  __CVBuffer *v151;
  const __CFString *v152;
  const __CFString *v153;
  const CGImageMetadata *v154;
  uint64_t v155;
  int32x2_t *v156;
  int *v157;
  int v158;
  int v159;
  const __CFDictionary *v160;
  unsigned int v161;
  float v162;
  int v163;
  float v164;
  unsigned int v165;
  CFIndex v166;
  float v167;
  int v168;
  float v169;
  CFIndex v170;
  _BOOL4 v171;
  const __CFDictionary *v172;
  const __CFDictionary *v173;
  CGFloat v174;
  CGFloat v175;
  CGFloat v176;
  CGSize v177;
  int v179;
  int v180;
  int JPEGXLFromPixelBuffer;
  int v182;
  int XMPData;
  int v184;
  int CMPhotoAuxiliaryImageTypeAndFinalURNFromURN;
  CGFloat x;
  CFIndex v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  _DWORD *v193;
  const __CFArray *v194;
  const void *v195;
  const void *v196;
  const __CFNumber *v197;
  const __CFNumber *number;
  CFTypeRef cf;
  const __CFArray *v200;
  const __CFArray *v201;
  const __CFArray *v202;
  const __CFArray *v203;
  const __CFArray *v204;
  const __CFArray *v205;
  const __CFArray *v206;
  const __CFArray *v207;
  int v208;
  int v209;
  __int128 v210;
  uint64_t v211;
  __CVBuffer *v212;
  const __CFData *v213;
  const __CFDictionary *metadata;
  const CGImageMetadata *metadataa;
  const __CFDictionary *theDict;
  const __CFDictionary *theDicta;
  const __CFString *v218;
  const __CFString *theString2;
  CFStringRef v220;
  float64x2_t v221;
  float64x2_t v222;
  char v223;
  char v224;
  int v225;
  int v226;
  int v227;
  float v228;
  int v229;
  uint64_t v230;
  __int16 v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  CGRect v235;
  CGRect rect;
  __CVBuffer *v237;
  const __CFDictionary *v238;
  CFRange v239;

  v233 = 0;
  v234 = 0;
  v232 = 0.0;
  v231 = 0;
  v230 = 0;
  *(_BYTE *)(a1 + 4) = a6;
  v228 = 1.0;
  v229 = 0;
  v226 = 2;
  v227 = 2;
  v225 = 0;
  v224 = a6;
  v223 = a6;
  v221.f64[0] = CMPhotoGetPixelBufferCLAPAsRect(a3);
  v221.f64[1] = v15;
  v222.f64[0] = v16;
  v222.f64[1] = v17;
  if ((int)CMPhotoGetCPUCount() > 7)
    CPUCount = 8;
  else
    CPUCount = CMPhotoGetCPUCount();
  *(_DWORD *)(a1 + 28) = CPUCount;
  if (a7)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetFloatIfPresent();
    if (v228 < 0.0)
      goto LABEL_35;
    if (v228 > 1.0)
      goto LABEL_35;
    FigCFDictionaryGetIntIfPresent();
    if ((v227 - 10) <= 0xFFFFFFF6)
      goto LABEL_35;
    FigCFDictionaryGetIntIfPresent();
    if (v226 < 0)
      goto LABEL_35;
    FigCFDictionaryGetIntIfPresent();
    FigCFDictionaryGetIntIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    CMPhotoCFDictionaryGetBooleanIfPresent(a7, CFSTR("RemoveWhiteBalance"), &v231);
    CMPhotoCFDictionaryGetFloatIfPresent(a7, CFSTR("ApplyDigitalGainAmount"), (char *)&v230 + 4);
    IntIfPresent = FigCFDictionaryGetIntIfPresent();
    v20 = (_DWORD)v230 != 1786276963 || IntIfPresent == 0;
    v21 = v20 ? 7 : 52546;
    FigCFDictionaryGetIntIfPresent();
    if (*(_DWORD *)(a1 + 28) >= 0x100u)
      goto LABEL_35;
    Value = (const __CFDictionary *)CFDictionaryGetValue(a7, CFSTR("SourceCropRect"));
    if (Value)
    {
      if (a2)
      {
LABEL_35:
        HIDWORD(v234) = FigSignalErrorAt();
        return HIDWORD(v234);
      }
      v25 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
      rect.origin = (CGPoint)*MEMORY[0x1E0C9D648];
      rect.size = v25;
      if (CGRectMakeWithDictionaryRepresentation(Value, &rect))
      {
        HIDWORD(v234) = CMPhotoApplyCropRectToRect(v221.f64, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
        if (HIDWORD(v234))
          return HIDWORD(v234);
      }
    }
    v26 = (const __CFDictionary *)CFDictionaryGetValue(a7, CFSTR("Tiling"));
    v24 = (unint64_t)v26;
    if (v26)
    {
      v27 = CFGetTypeID(v26);
      if (v27 != CFDictionaryGetTypeID())
        goto LABEL_35;
      rect.origin.x = 0.0;
      rect.origin.y = 0.0;
      v28 = CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)v24, (CGSize *)&rect);
      v23 = 0;
      v24 = 0;
      if (v28)
      {
        v23 = vcvtad_u64_f64(rect.origin.x);
        v29 = 7;
        if (!*(_BYTE *)(a1 + 4))
          v29 = 15;
        if ((v29 & v23) != 0)
          goto LABEL_35;
        v30 = 7;
        if (!*(_BYTE *)(a1 + 4))
          v30 = 3;
        v24 = vcvtad_u64_f64(rect.origin.y);
        if ((v30 & v24) != 0)
          goto LABEL_35;
      }
    }
    else
    {
      v23 = 0;
    }
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v21 = 7;
  }
  v31 = v229;
  *(_DWORD *)(a1 + 8) = v229;
  switch(v31)
  {
    case 0:
      *(_DWORD *)(a1 + 8) = 3;
      break;
    case 1:
    case 3:
      break;
    case 2:
    case 5:
      if (!*(_BYTE *)(a1 + 4))
        goto LABEL_35;
      break;
    default:
      goto LABEL_35;
  }
  *(float *)(a1 + 12) = v228;
  v32 = v226;
  *(_DWORD *)(a1 + 16) = v227;
  *(_DWORD *)(a1 + 20) = v32;
  *(_BYTE *)(a1 + 24) = v224;
  *(_BYTE *)(a1 + 25) = v223;
  *(_BYTE *)(a1 + 26) = v231;
  *(_DWORD *)(a1 + 32) = HIDWORD(v230);
  theDict = (const __CFDictionary *)_readDictCFDict(a4, (const void *)*MEMORY[0x1E0CBC980]);
  if (!theDict)
    goto LABEL_197;
  *((_QWORD *)&v210 + 1) = v24;
  DictCFDict = (const __CFDictionary *)_readDictCFDict(a4, (const void *)*MEMORY[0x1E0CBD090]);
  if (!DictCFDict)
    goto LABEL_197;
  v34 = DictCFDict;
  v209 = v21;
  v211 = a8;
  v212 = a3;
  v213 = a2;
  metadata = a4;
  *(_QWORD *)&v210 = v23;
  v35 = (const __CFString *)FigCFDictionaryGetValue();
  v36 = 0;
  v37 = 0;
  v38 = 0;
  theString2 = (const __CFString *)*MEMORY[0x1E0CBC708];
  v218 = (const __CFString *)*MEMORY[0x1E0CBC700];
  if (a5)
    goto LABEL_47;
LABEL_48:
  for (i = 0; v38 < i; i = CFArrayGetCount(a5))
  {
    if (CFArrayGetValueAtIndex(a5, v38))
    {
      v39 = (const __CFString *)FigCFDictionaryGetValue();
      if (v39)
      {
        v40 = v39;
        if (CFStringCompare(v39, theString2, 0))
        {
          v41 = CFStringCompare(v40, v218, 0);
          v36 |= v41 == kCFCompareEqualTo;
          v37 |= v41 != kCFCompareEqualTo;
        }
        else
        {
          v36 = 1;
        }
      }
    }
    ++v38;
    if (!a5)
      goto LABEL_48;
LABEL_47:
    ;
  }
  v220 = 0;
  HIDWORD(v234) = CMPhotoDNGVersionFromPropertiesAndOptions(metadata, (uint64_t)a7, v36 & 1, v37 & 1, &v220);
  if (HIDWORD(v234))
    return HIDWORD(v234);
  if (v35)
    CFStringCompare(v35, v220, 0x40uLL);
  else
    v35 = v220;
  v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v35, CFSTR("."));
  v45 = ArrayBySeparatingStrings;
  if (ArrayBySeparatingStrings)
    CFAutorelease(ArrayBySeparatingStrings);
  if (CFArrayGetCount(v45) != 4)
    goto LABEL_197;
  for (j = 0; j != 4; *(_BYTE *)(a1 + j++) = IntValue)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v45, j);
    IntValue = CFStringGetIntValue(ValueAtIndex);
    if (IntValue > 9)
      goto LABEL_197;
  }
  *(_QWORD *)(a1 + 40) = _readDictCFString(v34, (const void *)*MEMORY[0x1E0CBD0B0], (_DWORD *)&v234 + 1);
  *(_QWORD *)(a1 + 48) = _readDictCFString(v34, (const void *)*MEMORY[0x1E0CBD0B8], (_DWORD *)&v234 + 1);
  *(_QWORD *)(a1 + 56) = _readDictCFString(v34, (const void *)*MEMORY[0x1E0CBD0D8], (_DWORD *)&v234 + 1);
  v49 = CFDictionaryGetValue(v34, (const void *)*MEMORY[0x1E0CBD088]);
  if (!v49)
    goto LABEL_197;
  v50 = v49;
  if (!FigCFDictionaryGetIntIfPresent() && !FigCFDictionaryGetIntIfPresent())
    *(_DWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 88) = _readDictCFString(theDict, (const void *)*MEMORY[0x1E0CBC9D0], (_DWORD *)&v234 + 1);
  v51 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBC928]);
  if (!v51)
    goto LABEL_197;
  v52 = v51;
  v53 = CFGetTypeID(v51);
  if (v53 == CFArrayGetTypeID())
  {
    FigCFArrayGetInt32AtIndex();
  }
  else
  {
    v54 = CFGetTypeID(v52);
    if (v54 != CFNumberGetTypeID())
      goto LABEL_197;
    CFNumberGetValue((CFNumberRef)v52, kCFNumberIntType, (void *)(a1 + 128));
  }
  if (*(_BYTE *)(a1 + 4))
  {
    v55 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBC968]);
    if (v55)
    {
      v56 = v55;
      v57 = CFGetTypeID(v55);
      if (v57 == CFNumberGetTypeID())
        CFNumberGetValue(v56, kCFNumberIntType, (void *)(a1 + 144));
    }
  }
  v58 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CBC9F0]);
  if (!v58)
    goto LABEL_197;
  v59 = v58;
  v60 = CFGetTypeID(v58);
  if (v60 == CFArrayGetTypeID())
  {
    FigCFArrayGetInt32AtIndex();
  }
  else
  {
    v61 = CFGetTypeID(v59);
    if (v61 != CFNumberGetTypeID())
      goto LABEL_197;
    CFNumberGetValue((CFNumberRef)v59, kCFNumberIntType, (void *)(a1 + 132));
  }
  DictCFArray = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC8F0], 0);
  v63 = 0;
  v207 = DictCFArray;
  if (!DictCFArray)
    v63 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC900], (_DWORD *)&v234 + 1);
  v194 = v63;
  v64 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC8E8], 0);
  DictCFNumber = (const __CFNumber *)_readDictCFNumber(theDict, (const void *)*MEMORY[0x1E0CBC930], (_DWORD *)&v234 + 1);
  v66 = (const __CFNumber *)_readDictCFNumber(theDict, (const void *)*MEMORY[0x1E0CBC938], (_DWORD *)&v234 + 1);
  v202 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC958], (_DWORD *)&v234 + 1);
  v67 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC960], (_DWORD *)&v234 + 1);
  if (HIDWORD(v234))
    goto LABEL_197;
  v68 = v67;
  v200 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC940], 0);
  v203 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC948], 0);
  *(_QWORD *)(a1 + 680) = _readDictCFString(theDict, (const void *)*MEMORY[0x1E0CBC950], 0);
  *(_QWORD *)(a1 + 688) = _readDictCFString(theDict, (const void *)*MEMORY[0x1E0CBC9B0], 0);
  *(_QWORD *)(a1 + 704) = _readDictCFString(theDict, (const void *)*MEMORY[0x1E0CBC9C0], 0);
  *(_QWORD *)(a1 + 696) = _readDictCFString(theDict, (const void *)*MEMORY[0x1E0CBC8F8], 0);
  v69 = (const __CFNumber *)_readDictCFNumber(theDict, (const void *)*MEMORY[0x1E0CBC9B8], 0);
  v70 = (_DWORD *)(a1 + 2072);
  v206 = v64;
  cf = v50;
  v201 = v68;
  if (v69)
    CFNumberGetValue(v69, kCFNumberShortType, v70);
  else
    *v70 = -1;
  v197 = v66;
  number = DictCFNumber;
  *(_QWORD *)(a1 + 208) = _readDictCFData(theDict, (const void *)*MEMORY[0x1E0CBC9A8], 0);
  v71 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC9E8], 0);
  v72 = (const __CFArray *)_readDictCFArray(theDict, CFSTR("WarpRectilinear2"), 0);
  v205 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC9E0], 0);
  v204 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC988], 0);
  v73 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC998], 0);
  v74 = (const __CFArray *)_readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC9C8], 0);
  FigCFDictionaryGetFloatIfPresent();
  FigCFDictionaryGetFloatIfPresent();
  FigCFDictionaryGetFloatIfPresent();
  v232 = INFINITY;
  FigCFDictionaryGetFloatIfPresent();
  if (fabsf(v232) != INFINITY && (v232 < 0.0 || v232 > 1.0))
    goto LABEL_343;
  v75 = _readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC8E0], 0);
  v196 = _readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC970], 0);
  v195 = _readDictCFArray(theDict, (const void *)*MEMORY[0x1E0CBC978], 0);
  *(_QWORD *)(a1 + 64) = _readDictCFString(v34, (const void *)*MEMORY[0x1E0CBD070], 0);
  *(_QWORD *)(a1 + 72) = _readDictCFString(v34, (const void *)*MEMORY[0x1E0CBD080], 0);
  *(_QWORD *)(a1 + 216) = _readDictCFString(v34, (const void *)*MEMORY[0x1E0CBD0A8], 0);
  if (v71)
  {
    HIDWORD(v234) = _unpackArrayOfDoubles(v71, 0x14u, (char *)(a1 + 768), (_DWORD *)(a1 + 928));
    if (HIDWORD(v234))
      return HIDWORD(v234);
    v76 = *(_DWORD *)(a1 + 928);
    if (v76 != 8 && v76 != 20)
      goto LABEL_239;
  }
  if (v72)
  {
    Count = CFArrayGetCount(v72);
    if (Count != 60 && Count != 22)
      goto LABEL_239;
    v78 = v73;
    v79 = 0;
    v80 = (Count - 1);
    v81 = a1 + 936;
    do
    {
      if (!FigCFArrayGetDoubleAtIndex())
        goto LABEL_239;
      ++v79;
      v81 += 8;
    }
    while (v80 != v79);
    *(_DWORD *)(a1 + 1416) = v80;
    v73 = v78;
    if (!FigCFArrayGetInt32AtIndex())
      goto LABEL_239;
  }
  if (v74)
  {
    v82 = CFArrayGetCount(v74);
    *(_DWORD *)(a1 + 2060) = v82;
    v83 = malloc_type_malloc(4 * v82, 0x100004052888210uLL);
    *(_QWORD *)(a1 + 2064) = v83;
    HIDWORD(v234) = readFloatArray(v74, *(int *)(a1 + 2060), (uint64_t)v83);
    if (HIDWORD(v234))
      return HIDWORD(v234);
  }
  if (v205)
  {
    HIDWORD(v234) = _unpackArrayOfDoubles(v205, 0xEu, (char *)(a1 + 1424), (_DWORD *)(a1 + 1536));
    if (HIDWORD(v234))
      return HIDWORD(v234);
    if ((*(_DWORD *)(a1 + 1536) | 8) != 0xE)
      goto LABEL_239;
  }
  if (v204)
  {
    HIDWORD(v234) = _unpackArrayOfDoubles(v204, 7u, (char *)(a1 + 1544), (_DWORD *)(a1 + 1600));
    if (HIDWORD(v234))
      return HIDWORD(v234);
    if (*(_DWORD *)(a1 + 1600) != 7)
      goto LABEL_239;
  }
  if (v73)
  {
    HIDWORD(v234) = _unpackArrayOfDoubles(v73, 6u, (char *)(a1 + 712), (_DWORD *)(a1 + 760));
    if (HIDWORD(v234))
      return HIDWORD(v234);
    if ((*(_DWORD *)(a1 + 760) | 4) != 6)
      goto LABEL_239;
  }
  v84 = (const __CFDictionary *)_readDictCFDict(theDict, CFSTR("ProfileGainTableMap"));
  if (v84)
  {
    v85 = v84;
    v86 = (const __CFNumber *)_readDictCFNumber(v84, CFSTR("MapPointsV"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v86, kCFNumberIntType, (void *)(a1 + 1880));
    v87 = (const __CFNumber *)_readDictCFNumber(v85, CFSTR("MapPointsH"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v87, kCFNumberIntType, (void *)(a1 + 1884));
    v88 = (const __CFNumber *)_readDictCFNumber(v85, CFSTR("MapSpacingV"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v88, kCFNumberDoubleType, (void *)(a1 + 1888));
    v89 = (const __CFNumber *)_readDictCFNumber(v85, CFSTR("MapSpacingH"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v89, kCFNumberDoubleType, (void *)(a1 + 1896));
    v90 = (const __CFNumber *)_readDictCFNumber(v85, CFSTR("MapOriginV"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v90, kCFNumberDoubleType, (void *)(a1 + 1904));
    v91 = (const __CFNumber *)_readDictCFNumber(v85, CFSTR("MapOriginH"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v91, kCFNumberDoubleType, (void *)(a1 + 1912));
    v92 = (const __CFNumber *)_readDictCFNumber(v85, CFSTR("MapPointsN"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    CFNumberGetValue(v92, kCFNumberIntType, (void *)(a1 + 1920));
    v93 = (const __CFArray *)_readDictCFArray(v85, CFSTR("MapInputWeights"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    v94 = v93;
    if (CFArrayGetCount(v93) >= 1)
    {
      v95 = 0;
      v96 = a1 + 1924;
      while (FigCFArrayGetFloatAtIndex())
      {
        ++v95;
        v96 += 4;
        if (CFArrayGetCount(v94) <= v95)
          goto LABEL_122;
      }
      return HIDWORD(v234);
    }
LABEL_122:
    *(_QWORD *)(a1 + 1952) = _readDictCFData(v85, CFSTR("GainValues"), (_DWORD *)&v234 + 1);
    *(_BYTE *)(a1 + 1944) = 0;
    if (HIDWORD(v234))
      return HIDWORD(v234);
  }
  else
  {
    LODWORD(rect.origin.x) = 0;
    *(_QWORD *)(a1 + 1952) = _readDictCFData(theDict, CFSTR("ProfileGainTableMapPacked"), &rect);
    *(_BYTE *)(a1 + 1944) = LODWORD(rect.origin.x) == 0;
  }
  v97 = (const __CFDictionary *)_readDictCFDict(theDict, CFSTR("GainMap"));
  if (v97)
  {
    v98 = v97;
    _readDictCFNumber(v97, CFSTR("top"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1960) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("bottom"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1968) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("left"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1964) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("right"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1972) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("plane"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1976) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("planes"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1980) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("rowPitch"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1984) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("colPitch"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1988) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("mapsPointsV"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1992) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("mapsPointsH"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 1996) = FigCFNumberGetSInt32();
    _readDictCFNumber(v98, CFSTR("mapsSpacingV"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    FigCFNumberGetFloat64();
    *(_QWORD *)(a1 + 2000) = v99;
    _readDictCFNumber(v98, CFSTR("mapsSpacingH"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    FigCFNumberGetFloat64();
    *(_QWORD *)(a1 + 2008) = v100;
    _readDictCFNumber(v98, CFSTR("mapOriginV"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    FigCFNumberGetFloat64();
    *(_QWORD *)(a1 + 2016) = v101;
    _readDictCFNumber(v98, CFSTR("mapOriginH"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    FigCFNumberGetFloat64();
    *(_QWORD *)(a1 + 2024) = v102;
    _readDictCFNumber(v98, CFSTR("mapPlanes"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    *(_DWORD *)(a1 + 2032) = FigCFNumberGetSInt32();
    *(_QWORD *)(a1 + 2040) = _readDictCFData(v98, CFSTR("gainData"), (_DWORD *)&v234 + 1);
    if (HIDWORD(v234))
      return HIDWORD(v234);
  }
  if (fabsf(v232) == INFINITY)
  {
    *(_QWORD *)(a1 + 672) = 0;
    v105 = v207;
  }
  else
  {
    v103 = 0;
    v104 = -v232;
    if (v232 >= 0.0)
      v104 = v232;
    v105 = v207;
    do
    {
      v106 = 1 << v103;
      v107 = (float)(1 << v103);
      if (v103 > 0x1D)
        break;
      ++v103;
    }
    while ((float)(v104 * v107) < 1073700000.0);
    *(_DWORD *)(a1 + 672) = llroundf(v232 * v107);
    *(_DWORD *)(a1 + 676) = v106;
  }
  v108 = 0;
  v109 = -*(float *)&v234;
  if (*(float *)&v234 >= 0.0)
    v109 = *(float *)&v234;
  do
  {
    v110 = 1 << v108;
    v111 = (float)(1 << v108);
    if (v108 > 0x1D)
      break;
    ++v108;
  }
  while ((float)(v109 * v111) < 1073700000.0);
  v112 = 0;
  *(_DWORD *)(a1 + 372) = llroundf(*(float *)&v234 * v111);
  *(_DWORD *)(a1 + 376) = v110;
  v113 = -*((float *)&v233 + 1);
  if (*((float *)&v233 + 1) >= 0.0)
    v113 = *((float *)&v233 + 1);
  do
  {
    v114 = 1 << v112;
    v115 = (float)(1 << v112);
    if (v112 > 0x1D)
      break;
    ++v112;
  }
  while ((float)(v113 * v115) < 1073700000.0);
  v116 = 0;
  *(_DWORD *)(a1 + 380) = llroundf(*((float *)&v233 + 1) * v115);
  *(_DWORD *)(a1 + 384) = v114;
  v117 = -*(float *)&v233;
  if (*(float *)&v233 >= 0.0)
    v117 = *(float *)&v233;
  do
  {
    v118 = 1 << v116;
    v119 = (float)(1 << v116);
    if (v116 > 0x1D)
      break;
    ++v116;
  }
  while ((float)(v117 * v119) < 1073700000.0);
  *(_DWORD *)(a1 + 388) = llroundf(*(float *)&v233 * v119);
  *(_DWORD *)(a1 + 392) = v118;
  if (!v105)
  {
    if (v194)
    {
      HIDWORD(v234) = _floatArrayToRational(v194, a1 + 448, 2);
      if (HIDWORD(v234))
        return HIDWORD(v234);
      goto LABEL_169;
    }
LABEL_197:
    v122 = -16555;
LABEL_198:
    HIDWORD(v234) = v122;
    return HIDWORD(v234);
  }
  HIDWORD(v234) = _floatArrayToRational(v105, a1 + 396, 3);
  if (HIDWORD(v234))
    return HIDWORD(v234);
  LODWORD(rect.origin.x) = 0;
  HIDWORD(v234) = _unpackArrayOfDoubles(v207, 3u, (char *)(a1 + 424), &rect);
  if (HIDWORD(v234))
    return HIDWORD(v234);
  if (LODWORD(rect.origin.x) != 3)
    goto LABEL_343;
  *(_BYTE *)(a1 + 464) = 1;
LABEL_169:
  if (v206)
  {
    HIDWORD(v234) = _floatArrayToRational(v206, a1 + 468, 3);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    LODWORD(rect.origin.x) = 0;
    HIDWORD(v234) = _unpackArrayOfDoubles(v206, 3u, (char *)(a1 + 496), &rect);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    if (LODWORD(rect.origin.x) == 3)
    {
      *(_BYTE *)(a1 + 520) = 1;
      goto LABEL_174;
    }
LABEL_343:
    v122 = -16550;
    goto LABEL_198;
  }
LABEL_174:
  HIDWORD(v234) = _floatArrayToRational(v202, a1 + 228, 9);
  if (HIDWORD(v234))
    return HIDWORD(v234);
  HIDWORD(v234) = _floatArrayToRational(v201, a1 + 300, 9);
  if (HIDWORD(v234))
    return HIDWORD(v234);
  if (v200 && v203)
  {
    HIDWORD(v234) = _floatArrayToRational(v200, a1 + 524, 9);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    HIDWORD(v234) = _floatArrayToRational(v203, a1 + 596, 9);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    if (!*(_QWORD *)(a1 + 680))
      *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(a1 + 688))
      *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 668) = 1;
  }
  CFNumberGetValue(number, kCFNumberShortType, (void *)(a1 + 224));
  CFNumberGetValue(v197, kCFNumberShortType, (void *)(a1 + 226));
  if (v75)
  {
    HIDWORD(v234) = _readInt32Array(v75, 4, a1 + 164);
    if (HIDWORD(v234))
      goto LABEL_344;
    *(_BYTE *)(a1 + 180) = 1;
  }
  if (v196)
  {
    HIDWORD(v234) = _readInt32Array(v196, 2, a1 + 184);
    if (HIDWORD(v234))
      goto LABEL_344;
    *(_BYTE *)(a1 + 192) = 1;
  }
  if (!v195)
    goto LABEL_194;
  HIDWORD(v234) = _readInt32Array(v195, 2, a1 + 196);
  if (HIDWORD(v234))
  {
LABEL_344:
    FigSignalErrorAt();
    return HIDWORD(v234);
  }
  *(_BYTE *)(a1 + 204) = 1;
LABEL_194:
  v120 = CFGetTypeID(cf);
  if (v120 == CFDateGetTypeID())
  {
    v121 = CFDateFormatterCreate(v43, 0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v121, CFSTR("yyyy:MM:dd HH:mm:ss"));
    *(_QWORD *)(a1 + 80) = CFDateFormatterCreateStringWithDate(v43, v121, (CFDateRef)cf);
    if (v121)
      CFRelease(v121);
  }
  else
  {
    v124 = CFGetTypeID(cf);
    if (v124 != CFStringGetTypeID())
    {
LABEL_239:
      v122 = -16556;
      goto LABEL_198;
    }
    *(_QWORD *)(a1 + 80) = CFRetain(cf);
  }
  v125 = *(const __CFData **)(a1 + 208);
  if (v125)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(v125);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 208));
    if (!memchr(BytePtr, 0, Length))
      goto LABEL_239;
  }
  if (v211)
  {
    *(_QWORD *)(a1 + 1640) = v211;
    *(_DWORD *)(a1 + 1656) = v209;
    HIDWORD(v234) = _parseOutWidthAndHeightFromJpeg(a1);
    if (HIDWORD(v234))
      goto LABEL_239;
  }
  *(uint64x2_t *)(a1 + 112) = vcvtq_u64_f64(v221);
  if (v213)
  {
    v128 = CFDataGetBytePtr(v213);
    *(_QWORD *)(a1 + 100) = *(_QWORD *)(v128 + 12);
    PixelFormatType = *((_DWORD *)v128 + 2);
  }
  else
  {
    *(int32x2_t *)(a1 + 100) = vmovn_s64(vcvtq_s64_f64(v222));
    PixelFormatType = CVPixelBufferGetPixelFormatType(v212);
  }
  if (!*(_BYTE *)(a1 + 4))
  {
    *(_DWORD *)(a1 + 136) = 16;
    *(_DWORD *)(a1 + 156) = 16;
    if (HIBYTE(v231))
      v133 = 4;
    else
      v133 = 2;
    *(_DWORD *)(a1 + 1620) = v133;
    v132 = vrev64_s32(vshl_s32(*(int32x2_t *)(a1 + 128), vneg_s32(vdup_n_s32(v133))));
    goto LABEL_217;
  }
  UsedBitDepthForPixelFormat = CMPhotoGetUsedBitDepthForPixelFormat(PixelFormatType);
  *(_DWORD *)(a1 + 136) = UsedBitDepthForPixelFormat;
  if (!UsedBitDepthForPixelFormat)
    goto LABEL_35;
  v131 = *(_DWORD *)(a1 + 8);
  if (v131 == 2)
  {
    *(_DWORD *)(a1 + 156) = 8;
    v132 = (int32x2_t)255;
LABEL_217:
    *(int32x2_t *)(a1 + 148) = v132;
    goto LABEL_235;
  }
  v134 = *(_DWORD *)(a1 + 132);
  if (PixelFormatType == 1751527984 && (int)(34 - __clz(v134)) < UsedBitDepthForPixelFormat)
  {
    v134 = ~(-1 << UsedBitDepthForPixelFormat);
    *(_DWORD *)(a1 + 132) = v134;
  }
  v135 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 148) = v134;
  *(_DWORD *)(a1 + 152) = v135;
  *(_DWORD *)(a1 + 156) = UsedBitDepthForPixelFormat;
  if (v131 == 5 || v131 == 3)
  {
    LODWORD(rect.origin.x) = 16;
    if (_readDictCFArray(theDict, CFSTR("BitsPerSample"), 0))
      FigCFArrayGetInt32AtIndex();
    if (SLODWORD(rect.origin.x) >= *(_DWORD *)(a1 + 136))
      x_low = *(_DWORD *)(a1 + 136);
    else
      x_low = LODWORD(rect.origin.x);
    *(_DWORD *)(a1 + 136) = x_low;
    if (x_low >= (int)CMPhotoDNGDefaultBitDepth())
      v137 = CMPhotoDNGDefaultBitDepth();
    else
      v137 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(a1 + 156) = v137;
    v138 = v225;
    if (v225)
    {
      *(_DWORD *)(a1 + 156) = v225;
      if (!*(_BYTE *)(a1 + 24))
        *(_DWORD *)(a1 + 148) = ~(-1 << v138);
    }
    if (!*(_DWORD *)(a1 + 136))
      goto LABEL_35;
  }
LABEL_235:
  if ((*(_BYTE *)(a1 + 100) & 1) != 0 || (*(_BYTE *)(a1 + 104) & 1) != 0)
    goto LABEL_239;
  v139 = (int *)(a1 + 1624);
  if (*(_BYTE *)(a1 + 4))
  {
    *v139 = 0;
    v140 = HIDWORD(v234);
  }
  else
  {
    v140 = _cfaPatternFromPixelFormat(PixelFormatType, v139);
    HIDWORD(v234) = v140;
  }
  if (v140)
    return HIDWORD(v234);
  v141 = _copyFilteredImageProperties(metadata);
  *(_QWORD *)(a1 + 1608) = v141;
  if (v141)
  {
    v142 = (CFDictionaryRef *)(a1 + 1608);
    HIDWORD(v234) = CMPhotoUpdateImageProperties((CFDictionaryRef *)(a1 + 1608), 0, 0, v222.f64[0], v222.f64[1]);
    if (HIDWORD(v234))
      return HIDWORD(v234);
    if (*v142)
    {
      *(_BYTE *)(a1 + 1616) = CFDictionaryContainsKey(*v142, (const void *)*MEMORY[0x1E0CBCD68]);
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 1608), (const void *)*MEMORY[0x1E0CBCB50]))
        v143 = 1;
      else
        v143 = CFDictionaryContainsKey(*v142, (const void *)*MEMORY[0x1E0CBCF70]) != 0;
      *(_BYTE *)(a1 + 1617) = v143;
    }
  }
  *(_DWORD *)(a1 + 1660) = 0;
  *(_QWORD *)(a1 + 1664) = 0;
  if (a5)
  {
    if (CFArrayGetCount(a5) >= 1)
    {
      v144 = CFArrayGetCount(a5);
      *(_DWORD *)(a1 + 1660) = v144;
      v145 = malloc_type_calloc(v144, 0x40uLL, 0x1060040C5BCF64AuLL);
      *(_QWORD *)(a1 + 1664) = v145;
      if (!v145)
        goto LABEL_35;
    }
    if (*(int *)(a1 + 1660) >= 1)
    {
      v146 = 0;
      v147 = (int *)MEMORY[0x1E0CA1FC0];
      v208 = (int)v43;
      v148 = *MEMORY[0x1E0CA1FC0];
      while (1)
      {
        if (v148 == 1)
          kdebug_trace();
        v237 = 0;
        v238 = 0;
        v149 = (const __CFDictionary *)CFArrayGetValueAtIndex(a5, v146);
        v150 = (__CVBuffer *)CFDictionaryGetValue(v149, CFSTR("AuxPixelBuffer"));
        if (!v150
          || (v151 = v150, (v152 = (const __CFString *)CFDictionaryGetValue(v149, CFSTR("AuxImageType"))) == 0)
          || (v153 = v152, (v154 = (const CGImageMetadata *)CFDictionaryGetValue(v149, CFSTR("AuxMetadata"))) == 0))
        {
          XMPData = FigSignalErrorAt();
          goto LABEL_298;
        }
        metadataa = v154;
        theDicta = (const __CFDictionary *)CFDictionaryGetValue(v149, CFSTR("AuxOptions"));
        v155 = *(_QWORD *)(a1 + 1664);
        v156 = (int32x2_t *)(v155 + (v146 << 6));
        v156[7].i32[1] = 0xFFFF;
        v156[5].i32[0] = 8;
        v156[3].i32[0] = *(_DWORD *)(a1 + 8);
        v157 = (int *)&v156[3];
        v158 = CMPhotoCreateCompressionCompatiblePixelBuffer(v151, 0, 8u, 0, 0, (CFTypeRef *)&v237, &v238);
        if (v158)
          goto LABEL_325;
        v156[4].i32[0] = CVPixelBufferGetWidth(v237);
        v156[4].i32[1] = CVPixelBufferGetHeight(v237);
        if (CVPixelBufferGetPixelFormatType(v237) != 1278226488)
          goto LABEL_324;
        if (FigCFEqual())
          break;
        v160 = theDicta;
        if (FigCFEqual())
        {
          v159 = 1;
          goto LABEL_265;
        }
        if (!FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual())
        {
          v239.length = CFStringGetLength(CFSTR("kCGImageAuxiliaryDataType"));
          v239.location = 0;
          if (CFStringCompareWithOptions(v153, CFSTR("kCGImageAuxiliaryDataType"), v239, 0))
          {
            rect.origin.x = 0.0;
            CMPhotoAuxiliaryImageTypeAndFinalURNFromURN = CMPhotoGetCMPhotoAuxiliaryImageTypeAndFinalURNFromURN((uint64_t)v153, (const __CFString **)&rect);
            *(_DWORD *)(v155 + (v146 << 6) + 28) = CMPhotoAuxiliaryImageTypeAndFinalURNFromURN;
            if (CMPhotoAuxiliaryImageTypeAndFinalURNFromURN)
            {
              x = rect.origin.x;
              v160 = theDicta;
              if (*(_QWORD *)&rect.origin.x)
                x = COERCE_DOUBLE(CFRetain(*(CFTypeRef *)&rect.origin.x));
              v171 = 0;
              *(CGFloat *)(v155 + (v146 << 6) + 16) = x;
LABEL_277:
              if (!v160)
                goto LABEL_288;
              v172 = (const __CFDictionary *)CFDictionaryGetValue(v160, CFSTR("SourceCropRect"));
              if (v172)
              {
                v173 = v172;
                rect.origin.x = CMPhotoGetPixelBufferCLAPAsRect(v237);
                rect.origin.y = v174;
                rect.size.width = v175;
                rect.size.height = v176;
                v177 = *(CGSize *)(MEMORY[0x1E0C9D648] + 16);
                v235.origin = (CGPoint)*MEMORY[0x1E0C9D648];
                v235.size = v177;
                if (CGRectMakeWithDictionaryRepresentation(v173, &v235))
                {
                  v158 = CMPhotoApplyCropRectToRect(&rect.origin.x, v235.origin.x, v235.origin.y, v235.size.width, v235.size.height);
                  if (!v158)
                  {
                    v156[4] = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64((float64x2_t)rect.size)));
                    goto LABEL_282;
                  }
LABEL_325:
                  v182 = v158;
                  goto LABEL_326;
                }
              }
LABEL_282:
              v160 = theDicta;
              CMPhotoCFDictionaryGetIntIfPresent(theDicta, CFSTR("CompressionMode"), v157);
              LODWORD(rect.origin.x) = 0;
              if (!FigCFDictionaryGetFloatIfPresent())
                goto LABEL_288;
              if (*(float *)&rect.origin.x >= 0.0 && *(float *)&rect.origin.x <= 1.0)
              {
                v171 = *(float *)&rect.origin.x == 1.0;
LABEL_288:
                v179 = *v157;
                if ((*v157 - 2) < 2)
                {
LABEL_291:
                  if (v171)
                    v180 = 3;
                  else
                    v180 = 2;
                  *v157 = v180;
                  goto LABEL_295;
                }
                if (v179 == 5)
                {
                  JPEGXLFromPixelBuffer = _createJPEGXLFromPixelBuffer(v237, (uint64_t)v160, (CFDataRef *)(v155 + (v146 << 6)));
                }
                else
                {
                  if (!v179)
                    goto LABEL_291;
LABEL_295:
                  JPEGXLFromPixelBuffer = _createJPEGFromPixelBuffer(v237, v160, v171);
                }
                v182 = JPEGXLFromPixelBuffer;
                v147 = (int *)MEMORY[0x1E0CA1FC0];
                if (JPEGXLFromPixelBuffer)
                  goto LABEL_299;
                XMPData = CMPhotoAuxiliaryImageMetadataCreateXMPData(v208, metadataa, v238, *(_DWORD *)(v155 + (v146 << 6) + 28), *(const __CFString **)(v155 + (v146 << 6) + 16), (CFDataRef *)(v155 + (v146 << 6) + 8));
LABEL_298:
                v182 = XMPData;
                goto LABEL_299;
              }
            }
          }
          else
          {
            rect.origin.x = 0.0;
            v187 = v155 + (v146 << 6);
            CMPhotoGetCMPhotoAuxiliaryImageTypeFromCGImageAuxiliaryDataType((uint64_t)v153, (const __CFString **)&rect, (int *)(v187 + 28));
            if (*(_QWORD *)&rect.origin.x)
            {
              v171 = 0;
              *(_QWORD *)(v187 + 16) = CFRetain(*(CFTypeRef *)&rect.origin.x);
              v160 = theDicta;
              goto LABEL_277;
            }
          }
LABEL_324:
          v158 = FigSignalErrorAt();
          goto LABEL_325;
        }
        v184 = CMPhotoGetCMPhotoAuxiliaryImageTypeAndFinalURNFromURN((uint64_t)v153, 0);
        *(_DWORD *)(v155 + (v146 << 6) + 28) = v184;
        if (!v184)
          goto LABEL_324;
LABEL_266:
        LODWORD(rect.origin.x) = 0;
        LODWORD(v235.origin.x) = 0;
        if (CMPhotoCFDictionaryGetFloatIfPresent(v238, CFSTR("FloatMinValue"), &rect)
          && CMPhotoCFDictionaryGetFloatIfPresent(v238, CFSTR("FloatMaxValue"), &v235))
        {
          v161 = 0;
          v162 = -*(float *)&rect.origin.x;
          if (*(float *)&rect.origin.x >= 0.0)
            v162 = *(float *)&rect.origin.x;
          do
          {
            v163 = 1 << v161;
            v164 = (float)(1 << v161);
            if (v161 > 0x1D)
              break;
            ++v161;
          }
          while ((float)(v162 * v164) < 1073700000.0);
          v165 = 0;
          v166 = v155 + (v146 << 6);
          *(_DWORD *)(v166 + 44) = llroundf(*(float *)&rect.origin.x * v164);
          *(_DWORD *)(v166 + 48) = v163;
          v167 = -*(float *)&v235.origin.x;
          if (*(float *)&v235.origin.x >= 0.0)
            v167 = *(float *)&v235.origin.x;
          do
          {
            v168 = 1 << v165;
            v169 = (float)(1 << v165);
            if (v165 > 0x1D)
              break;
            ++v165;
          }
          while ((float)(v167 * v169) < 1073700000.0);
          v170 = v155 + (v146 << 6);
          *(_DWORD *)(v170 + 52) = llroundf(*(float *)&v235.origin.x * v169);
          *(_DWORD *)(v170 + 56) = v168;
          v171 = 1;
          goto LABEL_277;
        }
        v182 = -16557;
LABEL_326:
        v147 = (int *)MEMORY[0x1E0CA1FC0];
LABEL_299:
        if (v237)
          CFRelease(v237);
        if (v238)
          CFRelease(v238);
        HIDWORD(v234) = v182;
        v148 = *v147;
        if (*v147 == 1)
        {
          kdebug_trace();
          v182 = HIDWORD(v234);
          v148 = *v147;
        }
        if (v182)
          return HIDWORD(v234);
        if (++v146 >= *(int *)(a1 + 1660))
          goto LABEL_327;
      }
      v159 = 2;
      v160 = theDicta;
LABEL_265:
      *(_DWORD *)(v155 + (v146 << 6) + 28) = v159;
      goto LABEL_266;
    }
  }
LABEL_327:
  v188 = DWORD2(v210);
  if (v210 == 0)
  {
    _tileDescriptionInitialize(a1);
    v192 = *(_DWORD *)(a1 + 1636);
    v188 = *(_DWORD *)(a1 + 1632);
    v191 = *(_DWORD *)(a1 + 1628);
    v189 = *(_DWORD *)(a1 + 100);
    v190 = *(_DWORD *)(a1 + 104);
  }
  else
  {
    v189 = *(_DWORD *)(a1 + 100);
    v190 = *(_DWORD *)(a1 + 104);
    if (v189 >= (int)v210)
      v191 = v210;
    else
      v191 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 1628) = v191;
    if (v190 < SDWORD2(v210))
      v188 = v190;
    *(_DWORD *)(a1 + 1632) = v188;
    v192 = (v190 + v188 - 1) / v188 * ((v189 + v191 - 1) / v191);
    *(_DWORD *)(a1 + 1636) = v192;
  }
  if (v188 * v192 * v191 < v189 * v190)
    goto LABEL_35;
  HIDWORD(v234) = _prepareAnalogBalance(a1);
  if (!HIDWORD(v234) && *(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 24))
  {
    v193 = (_DWORD *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
      kdebug_trace();
    HIDWORD(v234) = _applyLossyJPEGPerceptualCurve(a1, v212);
    if (*v193 == 1)
      kdebug_trace();
  }
  return HIDWORD(v234);
}

